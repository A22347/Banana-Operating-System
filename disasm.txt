
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 5c f6 00 00       	call   c000f67c <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 8c 02 00       	call   c0028c48 <_init>
c0000025:	c3                   	ret    
c0000026:	bb de 98 02 c0       	mov    ebx,0xc00298de
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb ec 98 02 c0    	cmp    ebx,0xc00298ec
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 e2 02 c0       	mov    eax,0xc002e2d8
c0000049:	3d d8 e2 02 c0       	cmp    eax,0xc002e2d8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 e2 02 c0       	push   0xc002e2d8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 e2 02 c0       	mov    eax,0xc002e2d8
c0000075:	2d d8 e2 02 c0       	sub    eax,0xc002e2d8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 e2 02 c0       	push   0xc002e2d8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 08 e9 02 c0 00 	cmp    BYTE PTR ds:0xc002e908,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f4 98 02 c0       	mov    ebx,0xc00298f4
c00000bb:	81 eb f0 98 02 c0    	sub    ebx,0xc00298f0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f0 98 02 c0       	mov    esi,0xc00298f0
c00000ca:	a1 0c e9 02 c0       	mov    eax,ds:0xc002e90c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 0c e9 02 c0       	mov    ds:0xc002e90c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 0c e9 02 c0       	mov    eax,ds:0xc002e90c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 e2 02 c0       	push   0xc002e2d8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 08 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e908,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 10 e9 02 c0       	push   0xc002e910
c000012c:	68 d8 e2 02 c0       	push   0xc002e2d8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 3f d3 01 00       	call   c001d6e2 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 d2 1f 01 00       	call   c001238d <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 1d d3 01 00       	call   c001d6e2 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 c5 d7 01 00       	call   c001dba9 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 23 de 01 00       	call   c001e210 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 50 ed 02 c0 	lgdtd  ds:0xc002ed50
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 e3 3c 01 00       	call   c00142c5 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 28 e9 02 c0       	mov    ds:0xc002e928,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 28 e9 02 c0    	mov    DWORD PTR ds:0xc002e928,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 28 e9 02 c0    	mov    ebx,DWORD PTR ds:0xc002e928
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 00 99 02 c0 02 	test   BYTE PTR [edx-0x3ffd6700],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 00 99 02 c0 01 	test   BYTE PTR [edx-0x3ffd6700],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 00 99 02 c0 08 	test   BYTE PTR [edx-0x3ffd6700],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 00 99 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6700],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 00 99 02 c0 01 	test   BYTE PTR [edx-0x3ffd6700],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 40 e9 02 c0    	mov    ecx,DWORD PTR ds:0xc002e940
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 40 e9 02 c0    	mov    DWORD PTR ds:0xc002e940,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 44 e9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd16bc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 44 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd16bc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 40 e9 02 c0    	mov    DWORD PTR ds:0xc002e940,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 6c e9 02 c0    	cmp    DWORD PTR ds:0xc002e96c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 7c e9 02 c0    	mov    ecx,DWORD PTR ds:0xc002e97c
c0000e38:	c7 42 0c 74 e9 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e974
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 7c e9 02 c0    	mov    DWORD PTR ds:0xc002e97c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 6c e9 02 c0    	mov    DWORD PTR ds:0xc002e96c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 40 e9 02 c0 02 	test   BYTE PTR ds:0xc002e940,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 40 e9 02 c0       	mov    eax,0xc002e940
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 f9 e4 00 00       	call   c000f412 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 3b e4 00 00       	call   c000f412 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 25 e4 00 00       	call   c000f412 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 01 e4 00 00       	call   c000f412 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 40 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e940
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 40 e9 02 c0       	mov    eax,0xc002e940
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 44 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd16bc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 44 e9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd16bc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 74 e9 02 c0 	lea    edx,[eax*8-0x3ffd168c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 40 e9 02 c0       	mov    eax,0xc002e940
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 80 e9 02 c0    	mov    ebx,DWORD PTR ds:0xc002e980
c00011ba:	81 fb 74 e9 02 c0    	cmp    ebx,0xc002e974
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 74 e9 02 c0       	cmp    eax,0xc002e974
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 70 e9 02 c0    	cmp    DWORD PTR ds:0xc002e970,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 7c e9 02 c0       	mov    ds:0xc002e97c,eax
c00011f6:	a3 80 e9 02 c0       	mov    ds:0xc002e980,eax
c00011fb:	a3 70 e9 02 c0       	mov    ds:0xc002e970,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 74 e9 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e974
c0001209:	c7 40 0c 74 e9 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e974
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 80 e9 02 c0       	mov    ds:0xc002e980,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 74 e9 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e974
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 38 e9 02 c0 	lea    ebp,[edx*4-0x3ffd16c8]
c000125a:	8b 14 95 40 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd16c0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 40 e9 02 c0 	lea    ecx,[edx*4-0x3ffd16c0]
c0001275:	8b 14 95 40 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd16c0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 74 ec 02 c0 	or     DWORD PTR [edi*4-0x3ffd138c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 74 e9 02 c0 	lea    eax,[eax*8-0x3ffd168c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 7c e9 02 c0    	mov    DWORD PTR ds:0xc002e97c,ecx
c000132f:	89 0d 80 e9 02 c0    	mov    DWORD PTR ds:0xc002e980,ecx
c0001335:	c7 41 08 74 e9 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e974
c000133c:	c7 41 0c 74 e9 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e974
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 6c e9 02 c0 	lea    edx,[ecx*8-0x3ffd1694]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 74 ec 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd138c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 74 ec 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd138c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 6c e9 02 c0 	lea    edx,[eax*4-0x3ffd1694]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 74 ec 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd138c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 7c e9 02 c0    	mov    DWORD PTR ds:0xc002e97c,edi
c0001402:	89 3d 80 e9 02 c0    	mov    DWORD PTR ds:0xc002e980,edi
c0001408:	c7 47 08 74 e9 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e974
c000140f:	c7 47 0c 74 e9 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e974
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 70 e9 02 c0    	mov    DWORD PTR ds:0xc002e970,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 6c e9 02 c0       	mov    eax,ds:0xc002e96c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 6c e9 02 c0    	mov    DWORD PTR ds:0xc002e96c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 40 e9 02 c0       	mov    edx,0xc002e940
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 40 e9 02 c0 00 	cmp    DWORD PTR ds:0xc002e940,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 40 e9 02 c0       	mov    eax,0xc002e940
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 94 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002ec94
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 94 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec94,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 94 ec 02 c0    	mov    DWORD PTR ds:0xc002ec94,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 6c e9 02 c0    	cmp    DWORD PTR ds:0xc002e96c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 6c e9 02 c0    	mov    DWORD PTR ds:0xc002e96c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 40 e9 02 c0 00 	cmp    DWORD PTR ds:0xc002e940,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 40 e9 02 c0       	mov    eax,0xc002e940
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 9c ec 02 c0    	push   DWORD PTR ds:0xc002ec9c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 40 e9 02 c0 00 	cmp    DWORD PTR ds:0xc002e940,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 40 e9 02 c0       	mov    eax,0xc002e940
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 9c ec 02 c0       	mov    eax,ds:0xc002ec9c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 40 e9 02 c0       	mov    eax,0xc002e940
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 6c e9 02 c0 00 	cmp    DWORD PTR ds:0xc002e96c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 40 e9 02 c0       	mov    eax,0xc002e940
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 6c e9 02 c0       	mov    eax,ds:0xc002e96c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 44 e9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd16bc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 74 e9 02 c0       	mov    eax,0xc002e974
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 6c ec 02 c0       	cmp    eax,0xc002ec6c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 a8 ec 02 c0       	mov    eax,ds:0xc002eca8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 90 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec90
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 a4 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002eca4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 b4 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ecb4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 40 e9 02 c0       	mov    eax,0xc002e940
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 04 9a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd65fc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 40 e9 02 c0       	mov    eax,ds:0xc002e940
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 40 e9 02 c0       	mov    ds:0xc002e940,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 84 ec 02 c0    	mov    DWORD PTR ds:0xc002ec84,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 88 ec 02 c0    	mov    DWORD PTR ds:0xc002ec88,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 8c ec 02 c0    	mov    DWORD PTR ds:0xc002ec8c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 94 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec94,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 00 24 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdc00]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 6e f1 01 00       	jmp    c0020d60 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 00 24 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdc00]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 9f f1 01 00       	jmp    c0020da7 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 00 24 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdc00]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 c7 f1 01 00       	jmp    c0020dee <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 9a 50 02 00       	call   c0026fa4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 20 9b 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd64e0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 20 9b 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd64e0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 20 9a 02 c0       	mov    edx,0xc0029a20
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 40 9b 02 c0       	mov    edx,0xc0029b40
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 34 ce 02 c0       	mov    edx,0xc002ce34
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 4c 9b 02 c0       	mov    edx,0xc0029b4c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 30 9b 02 c0       	mov    edx,0xc0029b30
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 e0 ec 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1320]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 c0 ec 02 c0    	mov    ax,ds:0xc002ecc0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 c0 ec 02 c0    	mov    ds:0xc002ecc0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 97 3e 02 00       	call   c0026fa4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 52 9b 02 c0       	mov    eax,0xc0029b52
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad a0 9a 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6560]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 5b 9b 02 c0       	mov    eax,0xc0029b5b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 20 9b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd64e0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 62 28 02 00       	call   c0026fa4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 30 9b 02 c0       	mov    edx,0xc0029b30
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 20 9a 02 c0       	mov    edx,0xc0029a20
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 30 9a 02 c0       	mov    edx,0xc0029a30
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 e0 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1320]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 e0 ec 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1320],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 29 12 02 00       	call   c0026fa4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 0f 12 02 00       	call   c0026fa4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 77 9a 02 c0       	mov    eax,0xc0029a77
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 70 9a 02 c0       	mov    eax,0xc0029a70
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 e0 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1320]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 60 9a 02 c0       	mov    esi,0xc0029a60
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 52 f9 01 00       	call   c0026fa4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 40 9b 02 c0       	mov    edx,0xc0029b40
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 40 9a 02 c0       	mov    edx,0xc0029a40
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 50 9a 02 c0       	mov    edx,0xc0029a50
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 62 9b 02 c0       	mov    edx,0xc0029b62
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 6e 9b 02 c0       	mov    edx,0xc0029b6e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 82 9b 02 c0       	mov    edx,0xc0029b82
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 4d 71 00 00       	call   c000f5b6 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 47 71 00 00       	call   c000f5c6 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c a0 9e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029ea0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 a0 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ea0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 a0 9c 02 c0       	mov    eax,0xc0029ca0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 e0 9b 02 c0       	mov    eax,0xc0029be0
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 a0 9b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6460]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 8c 6e 00 00       	call   c000f5c6 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 76 6e 00 00       	call   c000f5c6 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 a6 02 02 00       	call   c0028a77 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 69 02 02 00       	call   c0028a59 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 3d 02 02 00       	call   c0028a77 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 f0 f8 01 00       	call   c002817c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 72 03 02 00       	call   c0028c10 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 b7 01 02 00       	call   c0028a77 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 f9 00 02 00       	call   c0028a77 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 c6 00 02 00       	call   c0028a59 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 b3 ff 01 00       	call   c0028a77 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 7b ff 01 00       	call   c0028a59 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 55 6a 00 00       	call   c000f5e6 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 f0 69 00 00       	call   c000f5c6 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 a0 9f 02 c0       	mov    eax,0xc0029fa0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 87 fd 01 00       	call   c0028a77 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 4c fd 01 00       	call   c0028a59 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 00 a4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5c00]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 5c fa 01 00       	call   c002880b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 da f3 01 00       	call   c00281a8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 96 fc 01 00       	call   c0028a7b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 84 fd 01 00       	call   c0028b9f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 6e f3 01 00       	call   c00281a8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 19 fc 01 00       	call   c0028a75 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 fa fb 01 00       	call   c0028a79 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 90 fd 01 00       	call   c0028c30 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 3a f9 01 00       	call   c002880b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 b8 f2 01 00       	call   c00281a8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 74 fb 01 00       	call   c0028a7b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 62 fc 01 00       	call   c0028b9f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 4c f2 01 00       	call   c00281a8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 f7 fa 01 00       	call   c0028a75 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 d7 fa 01 00       	call   c0028a79 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 6c fc 01 00       	call   c0028c30 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 12 fa 01 00       	call   c0028a77 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 d0 f9 01 00       	call   c0028a59 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 b8 f9 01 00       	call   c0028a77 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 2a f7 01 00       	call   c002880b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 2c ea 01 00       	call   c0027b2b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 8f f0 01 00       	call   c00281a8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 e1 f6 01 00       	call   c002880b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 e7 e9 01 00       	call   c0027b2b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 b6 f6 01 00       	call   c002880b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 06 f9 01 00       	call   c0028a75 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 e3 ef 01 00       	call   c002817c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 65 fa 01 00       	call   c0028c10 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 8c f8 01 00       	call   c0028a59 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 87 ef 01 00       	call   c002817c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 05 f6 01 00       	call   c002880b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 88 ef 01 00       	call   c00281a8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 da f5 01 00       	call   c002880b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 41 f2 01 00       	call   c002848c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 c0 e8 01 00       	call   c0027b2b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 20 e2 01 00       	call   c00274c0 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 f7 f8 01 00       	call   c0028b9f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 e0 ee 01 00       	call   c00281a8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 c7 f8 01 00       	call   c0028b9f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 39 e8 01 00       	call   c0027b2b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 72 f7 01 00       	call   c0028a7b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 5a f1 01 00       	call   c002848c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 e0 e7 01 00       	call   c0027b2b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 ce f8 01 00       	call   c0028c30 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 a0 f4 01 00       	call   c002880b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 f7 ed 01 00       	call   c002817c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 d6 f6 01 00       	call   c0028a77 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 6f e7 01 00       	call   c0027b2b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 9b ed 01 00       	call   c002817c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 3d f8 01 00       	call   c0028c30 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 ee f3 01 00       	call   c002880b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 6b ed 01 00       	call   c00281a8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 be f3 01 00       	call   c002880b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 c4 e6 01 00       	call   c0027b2b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 94 f3 01 00       	call   c002880b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 e6 f5 01 00       	call   c0028a77 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 bd ec 01 00       	call   c002817c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 3f f7 01 00       	call   c0028c10 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 66 f5 01 00       	call   c0028a59 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 60 ec 01 00       	call   c002817c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 de f2 01 00       	call   c002880b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 61 ec 01 00       	call   c00281a8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 b3 f2 01 00       	call   c002880b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 1a ef 01 00       	call   c002848c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 99 e5 01 00       	call   c0027b2b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 e9 de 01 00       	call   c00274c0 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 c0 f5 01 00       	call   c0028b9f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 a9 eb 01 00       	call   c00281a8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 90 f5 01 00       	call   c0028b9f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 02 e5 01 00       	call   c0027b2b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 3b f4 01 00       	call   c0028a7b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 22 ee 01 00       	call   c002848c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 a1 e4 01 00       	call   c0027b2b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 8f f5 01 00       	call   c0028c30 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 61 f1 01 00       	call   c002880b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 b8 ea 01 00       	call   c002817c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 97 f3 01 00       	call   c0028a77 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 30 e4 01 00       	call   c0027b2b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 5c ea 01 00       	call   c002817c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 d1 f0 01 00       	call   c002880b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 d7 e3 01 00       	call   c0027b2b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 60 a4 02 c0       	mov    eax,0xc002a460
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 74 a4 02 c0       	mov    eax,0xc002a474
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 89 5d 00 00       	call   c000f5c6 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 8b 5d 00 00       	call   c000f5e6 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 4c ef 01 00       	call   c002880b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 ca e8 01 00       	call   c00281a8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 5c db 01 00       	call   c00274c0 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 33 f2 01 00       	call   c0028b9f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 1c e8 01 00       	call   c00281a8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 ff f1 01 00       	call   c0028b9f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 71 e1 01 00       	call   c0027b2b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 d1 f1 01 00       	call   c0028b9f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 c0 e7 01 00       	call   c00281a8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 29 e1 01 00       	call   c0027b2b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 4a da 01 00       	call   c00274c0 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 21 f1 01 00       	call   c0028b9f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 0a e7 01 00       	call   c00281a8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 ed f0 01 00       	call   c0028b9f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 5f e0 01 00       	call   c0027b2b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 bf f0 01 00       	call   c0028b9f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 ae e6 01 00       	call   c00281a8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 17 e0 01 00       	call   c0027b2b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 f5 df 01 00       	call   c0027b2b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 d1 d8 01 00       	call   c00274c0 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 a8 ef 01 00       	call   c0028b9f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 91 e5 01 00       	call   c00281a8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 74 ef 01 00       	call   c0028b9f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 e6 de 01 00       	call   c0027b2b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 46 ef 01 00       	call   c0028b9f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 2f e5 01 00       	call   c00281a8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 98 de 01 00       	call   c0027b2b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 f8 ee 01 00       	call   c0028b9f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 e1 e4 01 00       	call   c00281a8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 4a de 01 00       	call   c0027b2b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 5f d7 01 00       	call   c00274c0 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 36 ee 01 00       	call   c0028b9f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 1f e4 01 00       	call   c00281a8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 06 ee 01 00       	call   c0028b9f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 78 dd 01 00       	call   c0027b2b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 d8 ed 01 00       	call   c0028b9f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 c1 e3 01 00       	call   c00281a8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 2a dd 01 00       	call   c0027b2b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 8a ed 01 00       	call   c0028b9f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 73 e3 01 00       	call   c00281a8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 dc dc 01 00       	call   c0027b2b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 b0 dc 01 00       	call   c0027b2b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 0d e3 01 00       	call   c00281a8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 c9 eb 01 00       	call   c0028a7b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 58 dc 01 00       	call   c0027b2b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 b5 e2 01 00       	call   c00281a8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 71 eb 01 00       	call   c0028a7b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 eb d4 01 00       	call   c00274c0 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 c2 eb 01 00       	call   c0028b9f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 ab e1 01 00       	call   c00281a8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 8e eb 01 00       	call   c0028b9f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 00 db 01 00       	call   c0027b2b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 60 eb 01 00       	call   c0028b9f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 49 e1 01 00       	call   c00281a8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 b2 da 01 00       	call   c0027b2b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 12 eb 01 00       	call   c0028b9f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 fb e0 01 00       	call   c00281a8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 64 da 01 00       	call   c0027b2b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 c4 ea 01 00       	call   c0028b9f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 ad e0 01 00       	call   c00281a8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 16 da 01 00       	call   c0027b2b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 76 ea 01 00       	call   c0028b9f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 5f e0 01 00       	call   c00281a8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 c8 d9 01 00       	call   c0027b2b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 ca d2 01 00       	call   c00274c0 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 a1 e9 01 00       	call   c0028b9f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 8a df 01 00       	call   c00281a8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 71 e9 01 00       	call   c0028b9f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 e3 d8 01 00       	call   c0027b2b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 43 e9 01 00       	call   c0028b9f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 2c df 01 00       	call   c00281a8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 95 d8 01 00       	call   c0027b2b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 f5 e8 01 00       	call   c0028b9f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 de de 01 00       	call   c00281a8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 47 d8 01 00       	call   c0027b2b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 a7 e8 01 00       	call   c0028b9f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 90 de 01 00       	call   c00281a8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 f9 d7 01 00       	call   c0027b2b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 59 e8 01 00       	call   c0028b9f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 42 de 01 00       	call   c00281a8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 ab d7 01 00       	call   c0027b2b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 7f d7 01 00       	call   c0027b2b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 dc dd 01 00       	call   c00281a8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 98 e6 01 00       	call   c0028a7b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 27 d7 01 00       	call   c0027b2b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 84 dd 01 00       	call   c00281a8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 40 e6 01 00       	call   c0028a7b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 ce d6 01 00       	call   c0027b2b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 2b dd 01 00       	call   c00281a8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 e7 e5 01 00       	call   c0028a7b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 75 d6 01 00       	call   c0027b2b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 d2 dc 01 00       	call   c00281a8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 8e e5 01 00       	call   c0028a7b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 ec ce 01 00       	call   c00274c0 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 c3 e5 01 00       	call   c0028b9f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 ac db 01 00       	call   c00281a8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 8f e5 01 00       	call   c0028b9f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 01 d5 01 00       	call   c0027b2b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 61 e5 01 00       	call   c0028b9f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 4a db 01 00       	call   c00281a8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 b3 d4 01 00       	call   c0027b2b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 13 e5 01 00       	call   c0028b9f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 fc da 01 00       	call   c00281a8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 65 d4 01 00       	call   c0027b2b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 c5 e4 01 00       	call   c0028b9f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 ae da 01 00       	call   c00281a8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 17 d4 01 00       	call   c0027b2b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 77 e4 01 00       	call   c0028b9f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 60 da 01 00       	call   c00281a8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 c9 d3 01 00       	call   c0027b2b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 29 e4 01 00       	call   c0028b9f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 12 da 01 00       	call   c00281a8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 78 d3 01 00       	call   c0027b2b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 d8 e3 01 00       	call   c0028b9f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 c1 d9 01 00       	call   c00281a8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 2a d3 01 00       	call   c0027b2b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 24 cc 01 00       	call   c00274c0 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 fb e2 01 00       	call   c0028b9f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 e4 d8 01 00       	call   c00281a8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 c4 e2 01 00       	call   c0028b9f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 36 d2 01 00       	call   c0027b2b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 96 e2 01 00       	call   c0028b9f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 7f d8 01 00       	call   c00281a8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 e8 d1 01 00       	call   c0027b2b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 48 e2 01 00       	call   c0028b9f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 31 d8 01 00       	call   c00281a8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 9a d1 01 00       	call   c0027b2b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 fa e1 01 00       	call   c0028b9f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 e3 d7 01 00       	call   c00281a8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 4c d1 01 00       	call   c0027b2b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 ac e1 01 00       	call   c0028b9f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 95 d7 01 00       	call   c00281a8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 fe d0 01 00       	call   c0027b2b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 5e e1 01 00       	call   c0028b9f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 47 d7 01 00       	call   c00281a8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 ad d0 01 00       	call   c0027b2b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 0d e1 01 00       	call   c0028b9f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 f6 d6 01 00       	call   c00281a8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 65 d0 01 00       	call   c0027b2b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 3e d0 01 00       	call   c0027b2b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 9c d6 01 00       	call   c00281a8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 58 df 01 00       	call   c0028a7b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 e7 cf 01 00       	call   c0027b2b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 45 d6 01 00       	call   c00281a8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 01 df 01 00       	call   c0028a7b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 8f cf 01 00       	call   c0027b2b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 ed d5 01 00       	call   c00281a8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 a9 de 01 00       	call   c0028a7b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 37 cf 01 00       	call   c0027b2b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 95 d5 01 00       	call   c00281a8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 51 de 01 00       	call   c0028a7b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 df ce 01 00       	call   c0027b2b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 3d d5 01 00       	call   c00281a8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 f9 dd 01 00       	call   c0028a7b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 8d ce 01 00       	call   c0027b2b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 eb d4 01 00       	call   c00281a8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 a7 dd 01 00       	call   c0028a7b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 bb c6 01 00       	call   c00274c0 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 92 dd 01 00       	call   c0028b9f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 7b d3 01 00       	call   c00281a8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 62 dd 01 00       	call   c0028b9f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 d4 cc 01 00       	call   c0027b2b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 a4 a4 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5b5c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 08 dd 01 00       	call   c0028b9f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 f1 d2 01 00       	call   c00281a8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 5c cc 01 00       	call   c0027b2b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 a9 dc 01 00       	call   c0028b9f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 92 d2 01 00       	call   c00281a8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 fd cb 01 00       	call   c0027b2b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 4a dc 01 00       	call   c0028b9f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 33 d2 01 00       	call   c00281a8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 9e cb 01 00       	call   c0027b2b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 eb db 01 00       	call   c0028b9f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 d4 d1 01 00       	call   c00281a8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 3f cb 01 00       	call   c0027b2b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 8c db 01 00       	call   c0028b9f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 75 d1 01 00       	call   c00281a8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 e0 ca 01 00       	call   c0027b2b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 2d db 01 00       	call   c0028b9f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 16 d1 01 00       	call   c00281a8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 81 ca 01 00       	call   c0027b2b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 ce da 01 00       	call   c0028b9f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 b7 d0 01 00       	call   c00281a8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 22 ca 01 00       	call   c0027b2b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 6f da 01 00       	call   c0028b9f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 58 d0 01 00       	call   c00281a8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 c3 c9 01 00       	call   c0027b2b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 cd c2 01 00       	call   c00274c0 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 a4 d9 01 00       	call   c0028b9f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 8d cf 01 00       	call   c00281a8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 74 d9 01 00       	call   c0028b9f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 e6 c8 01 00       	call   c0027b2b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 c0 a4 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5b40]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 19 d9 01 00       	call   c0028b9f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 02 cf 01 00       	call   c00281a8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 6d c8 01 00       	call   c0027b2b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 b9 d8 01 00       	call   c0028b9f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 a2 ce 01 00       	call   c00281a8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 0d c8 01 00       	call   c0027b2b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 59 d8 01 00       	call   c0028b9f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 42 ce 01 00       	call   c00281a8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 ad c7 01 00       	call   c0027b2b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 f9 d7 01 00       	call   c0028b9f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 e2 cd 01 00       	call   c00281a8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 4d c7 01 00       	call   c0027b2b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 99 d7 01 00       	call   c0028b9f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 82 cd 01 00       	call   c00281a8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 ed c6 01 00       	call   c0027b2b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 39 d7 01 00       	call   c0028b9f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 22 cd 01 00       	call   c00281a8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 8d c6 01 00       	call   c0027b2b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 d9 d6 01 00       	call   c0028b9f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 c2 cc 01 00       	call   c00281a8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 2d c6 01 00       	call   c0027b2b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 79 d6 01 00       	call   c0028b9f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 62 cc 01 00       	call   c00281a8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 cd c5 01 00       	call   c0027b2b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 dc a4 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5b24]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 72 c5 01 00       	call   c0027b2b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 cf cb 01 00       	call   c00281a8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 8b d4 01 00       	call   c0028a7b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 15 c5 01 00       	call   c0027b2b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 72 cb 01 00       	call   c00281a8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 2e d4 01 00       	call   c0028a7b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 b8 c4 01 00       	call   c0027b2b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 15 cb 01 00       	call   c00281a8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 d1 d3 01 00       	call   c0028a7b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 5b c4 01 00       	call   c0027b2b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 b8 ca 01 00       	call   c00281a8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 74 d3 01 00       	call   c0028a7b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 fe c3 01 00       	call   c0027b2b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 5b ca 01 00       	call   c00281a8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 17 d3 01 00       	call   c0028a7b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 a1 c3 01 00       	call   c0027b2b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 fe c9 01 00       	call   c00281a8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 ba d2 01 00       	call   c0028a7b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 44 c3 01 00       	call   c0027b2b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 a1 c9 01 00       	call   c00281a8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 5d d2 01 00       	call   c0028a7b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 e7 c2 01 00       	call   c0027b2b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 44 c9 01 00       	call   c00281a8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 00 d2 01 00       	call   c0028a7b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 fc c8 01 00       	call   c00281a8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 74 d3 01 00       	jmp    c0028c30 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 de cf 01 00       	call   c0028a77 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 9c cf 01 00       	call   c0028a59 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 33 cd 01 00       	call   c002880b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 34 c0 01 00       	call   c0027b2b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 03 cd 01 00       	call   c002880b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 6a c9 01 00       	call   c002848c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 09 cf 01 00       	call   c0028a59 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 0c cf 01 00       	call   c0028a77 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 df ce 01 00       	call   c0028a77 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 d8 c8 01 00       	call   c002848c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 62 d0 01 00       	call   c0028c30 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 3d d0 01 00       	call   c0028c30 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 0f cc 01 00       	call   c002880b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 66 c5 01 00       	call   c002817c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 45 ce 01 00       	call   c0028a77 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 de be 01 00       	call   c0027b2b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 02 c5 01 00       	call   c002817c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 a4 cf 01 00       	call   c0028c30 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 dc c7 01 00       	call   c002848c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 59 be 01 00       	call   c0027b2b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 85 ca 01 00       	call   c002880b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 85 bd 01 00       	call   c0027b2b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 65 bd 01 00       	call   c0027b2b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 35 ca 01 00       	call   c002880b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 85 cc 01 00       	call   c0028a75 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 64 c3 01 00       	call   c002817c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 e6 cd 01 00       	call   c0028c10 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 0d cc 01 00       	call   c0028a59 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 0b c3 01 00       	call   c002817c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 89 c9 01 00       	call   c002880b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 0c c3 01 00       	call   c00281a8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 5e c9 01 00       	call   c002880b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 c5 c5 01 00       	call   c002848c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 44 bc 01 00       	call   c0027b2b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 0e c9 01 00       	call   c002880b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 5a cb 01 00       	call   c0028a77 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 4f c2 01 00       	call   c00281a8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 21 c2 01 00       	call   c00281a8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 5a c8 01 00       	call   c002880b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 be c4 01 00       	call   c002848c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 86 c4 01 00       	call   c002848c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 05 bb 01 00       	call   c0027b2b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 f2 cb 01 00       	call   c0028c30 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 c4 c7 01 00       	call   c002880b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 1b c1 01 00       	call   c002817c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 fa c9 01 00       	call   c0028a77 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 92 ba 01 00       	call   c0027b2b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 b6 c0 01 00       	call   c002817c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 58 cb 01 00       	call   c0028c30 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 19 c9 01 00       	call   c0028a77 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 d7 c8 01 00       	call   c0028a59 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 6e c6 01 00       	call   c002880b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 6f b9 01 00       	call   c0027b2b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 3e c6 01 00       	call   c002880b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 a5 c2 01 00       	call   c002848c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 44 c8 01 00       	call   c0028a59 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 47 c8 01 00       	call   c0028a77 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 1a c8 01 00       	call   c0028a77 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 13 c2 01 00       	call   c002848c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 9d c9 01 00       	call   c0028c30 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 78 c9 01 00       	call   c0028c30 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 4a c5 01 00       	call   c002880b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 a1 be 01 00       	call   c002817c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 80 c7 01 00       	call   c0028a77 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 19 b8 01 00       	call   c0027b2b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 3d be 01 00       	call   c002817c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 df c8 01 00       	call   c0028c30 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 17 c1 01 00       	call   c002848c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 94 b7 01 00       	call   c0027b2b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 bf c3 01 00       	call   c002880b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 bf b6 01 00       	call   c0027b2b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 9f b6 01 00       	call   c0027b2b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 6f c3 01 00       	call   c002880b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 bf c5 01 00       	call   c0028a75 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 9d bc 01 00       	call   c002817c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 1f c7 01 00       	call   c0028c10 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 46 c5 01 00       	call   c0028a59 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 43 bc 01 00       	call   c002817c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 c1 c2 01 00       	call   c002880b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 44 bc 01 00       	call   c00281a8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 96 c2 01 00       	call   c002880b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 fd be 01 00       	call   c002848c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 7c b5 01 00       	call   c0027b2b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 46 c2 01 00       	call   c002880b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 92 c4 01 00       	call   c0028a77 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 87 bb 01 00       	call   c00281a8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 59 bb 01 00       	call   c00281a8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 90 c1 01 00       	call   c002880b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 f4 bd 01 00       	call   c002848c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 c1 bd 01 00       	call   c002848c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 40 b4 01 00       	call   c0027b2b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 2d c5 01 00       	call   c0028c30 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 ff c0 01 00       	call   c002880b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 56 ba 01 00       	call   c002817c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 35 c3 01 00       	call   c0028a77 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 cd b3 01 00       	call   c0027b2b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 f1 b9 01 00       	call   c002817c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 93 c4 01 00       	call   c0028c30 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 54 c2 01 00       	call   c0028a77 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 12 c2 01 00       	call   c0028a59 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 a9 bf 01 00       	call   c002880b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 aa b2 01 00       	call   c0027b2b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 79 bf 01 00       	call   c002880b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 e0 bb 01 00       	call   c002848c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 7f c1 01 00       	call   c0028a59 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 82 c1 01 00       	call   c0028a77 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 55 c1 01 00       	call   c0028a77 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 4e bb 01 00       	call   c002848c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 d8 c2 01 00       	call   c0028c30 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 b3 c2 01 00       	call   c0028c30 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 85 be 01 00       	call   c002880b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 dc b7 01 00       	call   c002817c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 bb c0 01 00       	call   c0028a77 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 54 b1 01 00       	call   c0027b2b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 78 b7 01 00       	call   c002817c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 1a c2 01 00       	call   c0028c30 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 52 ba 01 00       	call   c002848c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 cf b0 01 00       	call   c0027b2b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 fa bc 01 00       	call   c002880b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 fa af 01 00       	call   c0027b2b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 da af 01 00       	call   c0027b2b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 aa bc 01 00       	call   c002880b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 fa be 01 00       	call   c0028a75 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 d8 b5 01 00       	call   c002817c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 5a c0 01 00       	call   c0028c10 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 81 be 01 00       	call   c0028a59 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 7e b5 01 00       	call   c002817c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 fc bb 01 00       	call   c002880b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 7f b5 01 00       	call   c00281a8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 d1 bb 01 00       	call   c002880b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 38 b8 01 00       	call   c002848c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 b7 ae 01 00       	call   c0027b2b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 81 bb 01 00       	call   c002880b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 cd bd 01 00       	call   c0028a77 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 c2 b4 01 00       	call   c00281a8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 94 b4 01 00       	call   c00281a8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 cb ba 01 00       	call   c002880b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 2f b7 01 00       	call   c002848c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 fc b6 01 00       	call   c002848c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 7b ad 01 00       	call   c0027b2b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 68 be 01 00       	call   c0028c30 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 3a ba 01 00       	call   c002880b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 91 b3 01 00       	call   c002817c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 70 bc 01 00       	call   c0028a77 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 08 ad 01 00       	call   c0027b2b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 2c b3 01 00       	call   c002817c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 ce bd 01 00       	call   c0028c30 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 8f bb 01 00       	call   c0028a77 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 4d bb 01 00       	call   c0028a59 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 e4 b8 01 00       	call   c002880b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 e5 ab 01 00       	call   c0027b2b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 b4 b8 01 00       	call   c002880b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 1b b5 01 00       	call   c002848c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 ba ba 01 00       	call   c0028a59 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 bd ba 01 00       	call   c0028a77 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 90 ba 01 00       	call   c0028a77 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 89 b4 01 00       	call   c002848c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 13 bc 01 00       	call   c0028c30 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 ee bb 01 00       	call   c0028c30 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 c0 b7 01 00       	call   c002880b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 17 b1 01 00       	call   c002817c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 f6 b9 01 00       	call   c0028a77 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 8f aa 01 00       	call   c0027b2b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 b3 b0 01 00       	call   c002817c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 55 bb 01 00       	call   c0028c30 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 8d b3 01 00       	call   c002848c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 0a aa 01 00       	call   c0027b2b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 35 b6 01 00       	call   c002880b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 35 a9 01 00       	call   c0027b2b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 15 a9 01 00       	call   c0027b2b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 e5 b5 01 00       	call   c002880b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 35 b8 01 00       	call   c0028a75 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 13 af 01 00       	call   c002817c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 95 b9 01 00       	call   c0028c10 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 bc b7 01 00       	call   c0028a59 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 b9 ae 01 00       	call   c002817c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 37 b5 01 00       	call   c002880b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 ba ae 01 00       	call   c00281a8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 0c b5 01 00       	call   c002880b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 73 b1 01 00       	call   c002848c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 f2 a7 01 00       	call   c0027b2b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 bc b4 01 00       	call   c002880b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 08 b7 01 00       	call   c0028a77 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 fd ad 01 00       	call   c00281a8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 cf ad 01 00       	call   c00281a8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 06 b4 01 00       	call   c002880b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 6a b0 01 00       	call   c002848c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 37 b0 01 00       	call   c002848c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 b6 a6 01 00       	call   c0027b2b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 a3 b7 01 00       	call   c0028c30 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 75 b3 01 00       	call   c002880b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 cc ac 01 00       	call   c002817c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 ab b5 01 00       	call   c0028a77 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 43 a6 01 00       	call   c0027b2b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 67 ac 01 00       	call   c002817c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 09 b7 01 00       	call   c0028c30 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 c7 b4 01 00       	call   c0028a77 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 85 b4 01 00       	call   c0028a59 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 1c b2 01 00       	call   c002880b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 1d a5 01 00       	call   c0027b2b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 ec b1 01 00       	call   c002880b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 53 ae 01 00       	call   c002848c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 f2 b3 01 00       	call   c0028a59 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 f5 b3 01 00       	call   c0028a77 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 c8 b3 01 00       	call   c0028a77 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 c1 ad 01 00       	call   c002848c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 4b b5 01 00       	call   c0028c30 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 22 b5 01 00       	call   c0028c30 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 f4 b0 01 00       	call   c002880b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 4b aa 01 00       	call   c002817c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 2a b3 01 00       	call   c0028a77 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 c3 a3 01 00       	call   c0027b2b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 eb a9 01 00       	call   c002817c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 8d b4 01 00       	call   c0028c30 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 c6 ac 01 00       	call   c002848c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 43 a3 01 00       	call   c0027b2b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 6f af 01 00       	call   c002880b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 6f a2 01 00       	call   c0027b2b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 4f a2 01 00       	call   c0027b2b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 1f af 01 00       	call   c002880b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 53 b1 01 00       	call   c0028a59 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 4a a8 01 00       	call   c002817c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 cc b2 01 00       	call   c0028c10 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 f3 b0 01 00       	call   c0028a59 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 ed a7 01 00       	call   c002817c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 6b ae 01 00       	call   c002880b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 ee a7 01 00       	call   c00281a8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 40 ae 01 00       	call   c002880b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 a7 aa 01 00       	call   c002848c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 26 a1 01 00       	call   c0027b2b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 f0 ad 01 00       	call   c002880b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 3c b0 01 00       	call   c0028a77 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 31 a7 01 00       	call   c00281a8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 03 a7 01 00       	call   c00281a8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 47 ad 01 00       	call   c002880b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 ae a9 01 00       	call   c002848c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 97 a6 01 00       	call   c00281a8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 53 af 01 00       	call   c0028a7b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 46 a9 01 00       	call   c002848c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 c5 9f 01 00       	call   c0027b2b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 b2 b0 01 00       	call   c0028c30 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 84 ac 01 00       	call   c002880b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 db a5 01 00       	call   c002817c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 ba ae 01 00       	call   c0028a77 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 52 9f 01 00       	call   c0027b2b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 7a a5 01 00       	call   c002817c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 1c b0 01 00       	call   c0028c30 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 04 a5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5afc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 f8 a4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5b08]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 4f 19 00 00       	call   c000f5c6 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 cf ac 01 00       	call   c0028a77 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 8d ac 01 00       	call   c0028a59 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 79 ac 01 00       	call   c0028a77 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 eb a9 01 00       	call   c002880b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 69 a3 01 00       	call   c00281a8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 bb a9 01 00       	call   c002880b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 c1 9c 01 00       	call   c0027b2b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 90 a9 01 00       	call   c002880b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 e0 ab 01 00       	call   c0028a75 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 c1 a2 01 00       	call   c002817c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 43 ad 01 00       	call   c0028c10 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 6a ab 01 00       	call   c0028a59 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 69 a2 01 00       	call   c002817c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 e7 a8 01 00       	call   c002880b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 6a a2 01 00       	call   c00281a8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 bc a8 01 00       	call   c002880b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 23 a5 01 00       	call   c002848c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 a2 9b 01 00       	call   c0027b2b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 ca a4 01 00       	call   c002848c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 50 9b 01 00       	call   c0027b2b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 3e ac 01 00       	call   c0028c30 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 10 a8 01 00       	call   c002880b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 67 a1 01 00       	call   c002817c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 46 aa 01 00       	call   c0028a77 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 df 9a 01 00       	call   c0027b2b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 0b a1 01 00       	call   c002817c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 ad ab 01 00       	call   c0028c30 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 5a a7 01 00       	call   c002880b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 d7 a0 01 00       	call   c00281a8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 28 a7 01 00       	call   c002880b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 2e 9a 01 00       	call   c0027b2b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 fe a6 01 00       	call   c002880b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 52 a9 01 00       	call   c0028a79 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 2b a0 01 00       	call   c002817c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 ad aa 01 00       	call   c0028c10 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 d4 a8 01 00       	call   c0028a59 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 d2 9f 01 00       	call   c002817c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 50 a6 01 00       	call   c002880b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 d3 9f 01 00       	call   c00281a8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 25 a6 01 00       	call   c002880b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 8c a2 01 00       	call   c002848c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 0b 99 01 00       	call   c0027b2b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 27 a2 01 00       	call   c002848c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 a6 98 01 00       	call   c0027b2b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 94 a9 01 00       	call   c0028c30 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 66 a5 01 00       	call   c002880b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 bd 9e 01 00       	call   c002817c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 9c a7 01 00       	call   c0028a77 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 35 98 01 00       	call   c0027b2b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 61 9e 01 00       	call   c002817c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 d2 a4 01 00       	call   c002880b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 d8 97 01 00       	call   c0027b2b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 1e a6 02 c0       	mov    eax,0xc002a61e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 2f a6 02 c0       	mov    eax,0xc002a62f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 91 11 00 00       	call   c000f5c6 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 93 11 00 00       	call   c000f5e6 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 0d 11 00 00       	jmp    c000f5b6 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 28 11 00 00       	jmp    c000f5d6 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c000e4e3:	ff 05 64 22 03 c0    	inc    DWORD PTR ds:0xc0032264
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 64 22 03 c0       	mov    ds:0xc0032264,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 60 22 03 c0 00 	cmp    DWORD PTR ds:0xc0032260,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 60 22 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032260,0x0
c000e50d:	e8 24 f9 00 00       	call   c001de36 <schedule()>
c000e512:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c000e517:	48                   	dec    eax
c000e518:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 b0 ee 02 c0       	mov    eax,ds:0xc002eeb0
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 66 a6 02 c0       	push   0xc002a666
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 48 ed 02 c0       	mov    eax,0xc002ed48
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 6f a6 02 c0       	push   0xc002a66f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 a4 6f 02 c0       	mov    eax,0xc0026fa4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 79 a6 02 c0       	push   0xc002a679
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 d8 6c 02 c0       	mov    eax,0xc0026cd8
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 82 a6 02 c0       	push   0xc002a682
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 a4 70 02 c0       	mov    eax,0xc00270a4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 8c a6 02 c0       	push   0xc002a68c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 24 6e 02 c0       	mov    eax,0xc0026e24
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 95 a6 02 c0       	push   0xc002a695
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 4c ed 02 c0       	mov    eax,0xc002ed4c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 a2 a6 02 c0       	push   0xc002a6a2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 4d ed 02 c0       	mov    eax,0xc002ed4d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 05 55 00 00       	call   c0013b72 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 af a6 02 c0       	push   0xc002a6af
c000e69e:	e8 6d 0f 00 00       	call   c000f610 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 07 0f 00 00       	call   c000f5b6 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c000e6be:	68 c8 a6 02 c0       	push   0xc002a6c8
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 2f f3 00 00       	call   c001d9fa <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 49 ef 00 c0       	push   0xc000ef49
c000e6da:	53                   	push   ebx
c000e6db:	e8 12 f5 00 00       	call   c001dbf2 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 70 e6 01 c0       	push   0xc001e670
c000e6e9:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c000e6ef:	e8 fe f4 00 00       	call   c001dbf2 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 48 22 03 c0       	mov    ds:0xc0032248,eax
c000e6fc:	68 ac a7 02 c0       	push   0xc002a7ac
c000e701:	c6 05 4d ed 02 c0 01 	mov    BYTE PTR ds:0xc002ed4d,0x1
c000e708:	e8 03 0f 00 00       	call   c000f610 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 95 03 01 00       	call   c001eaa7 <Vm::initialise8086()>
c000e712:	e8 23 42 00 00       	call   c001293a <Fs::initVFS()>
c000e717:	c7 04 24 d5 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6d5
c000e71e:	e8 ed 0e 00 00       	call   c000f610 <Krnl::setBootMessage(char const*)>
c000e723:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 ac a7 02 c0       	push   0xc002a7ac
c000e742:	e8 c9 0e 00 00       	call   c000f610 <Krnl::setBootMessage(char const*)>
c000e747:	e8 3b db 00 00       	call   c001c287 <Sys::loadSyscalls()>
c000e74c:	e8 f3 b7 00 00       	call   c0019f44 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 ef a6 02 c0       	push   0xc002a6ef
c000e75b:	68 f8 a6 02 c0       	push   0xc002a6f8
c000e760:	e8 d4 c6 00 00       	call   c001ae39 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 bd 4c 00 00       	call   c001342a <User::loadClockSettings(int)>
c000e76d:	c7 04 24 d0 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7d0
c000e774:	e8 97 0e 00 00       	call   c000f610 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 a8 53 00 00       	call   c0013b32 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 00 a7 02 c0 	mov    DWORD PTR [esp],0xc002a700
c000e791:	e8 7a 0e 00 00       	call   c000f610 <Krnl::setBootMessage(char const*)>
c000e796:	e8 f5 b2 00 00       	call   c0019a90 <Krnl::startCPUs()>
c000e79b:	c7 04 24 1a a7 02 c0 	mov    DWORD PTR [esp],0xc002a71a
c000e7a2:	e8 69 0e 00 00       	call   c000f610 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 48 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed48
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 2b a7 02 c0       	push   0xc002a72b
c000e7b6:	e8 9c ec 00 00       	call   c001d457 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 be ee 00 00       	call   c001d682 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 64 f8 00 00       	call   c001e035 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 47 a7 02 c0       	push   0xc002a747
c000e7e5:	50                   	push   eax
c000e7e6:	e8 01 54 00 00       	call   c0013bec <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 1c a8 02 c0       	mov    edx,0xc002a81c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 61 ed 02 c0 04 	test   BYTE PTR ds:0xc002ed61,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 e7 82 01 00       	call   c0026c66 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 e6 9d 00 00       	call   c00187a0 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 bf 9d 00 00       	call   c00187a0 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 9d 9d 00 00       	call   c00187a0 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 7b 9d 00 00       	call   c00187a0 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 60 ed 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002ed60,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 89 9c 00 00       	call   c001871c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 64 9c 00 00       	call   c001871c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 51 81 01 00       	call   c0026c20 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 0e 81 01 00       	call   c0026c00 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 80 9c 00 00       	call   c00187a0 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 50 a7 02 c0       	push   0xc002a750
c000eb62:	e8 16 b5 00 00       	call   c001a07d <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 56 a7 02 c0       	push   0xc002a756
c000eb9a:	e8 de b4 00 00       	call   c001a07d <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 f0 a7 02 c0       	push   0xc002a7f0
c000ebf0:	e8 1b 0a 00 00       	call   c000f610 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 60 ed 02 c0 04 	test   BYTE PTR ds:0xc002ed60,0x4
c000ec03:	0f 94 05 80 dc 02 c0 	sete   BYTE PTR ds:0xc002dc80
c000ec0a:	e8 a7 09 00 00       	call   c000f5b6 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 fb 8d 00 00       	call   c0017a14 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 c0 4d 00 00       	call   c00139e8 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 00 a7 02 c0 	mov    DWORD PTR [esp],0xc002a700
c000ec41:	e8 ca 09 00 00       	call   c000f610 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 64 09 00 00       	call   c000f5b6 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 fc 9b 00 00       	call   c0018858 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 7d 4d 00 00       	call   c00139e8 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 09 53 00 00       	call   c0013f90 <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 4d 4d 00 00       	call   c00139e8 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 5c a7 02 c0       	push   0xc002a75c
c000ecb8:	e8 53 09 00 00       	call   c000f610 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 4b f0 00 00       	call   c001dd14 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 77 a7 02 c0       	push   0xc002a777
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 98 38 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 88 a7 02 c0       	push   0xc002a788
c000ed34:	e8 44 b3 00 00       	call   c001a07d <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 95 a7 02 c0       	push   0xc002a795
c000ed49:	e8 2f b3 00 00       	call   c001a07d <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 9f a7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a79f
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 18 b3 00 00       	jmp    c001a07d <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	83 ec 0c             	sub    esp,0xc
c000ede6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000edea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000edec:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000edf3:	52                   	push   edx
c000edf4:	50                   	push   eax
c000edf5:	68 40 a8 02 c0       	push   0xc002a840
c000edfa:	e8 b0 37 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c000edff:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee01:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ee05:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ee09:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ee0d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ee11:	8d 50 01             	lea    edx,[eax+0x1]
c000ee14:	c1 e0 03             	shl    eax,0x3
c000ee17:	89 13                	mov    DWORD PTR [ebx],edx
c000ee19:	83 c4 18             	add    esp,0x18
c000ee1c:	5b                   	pop    ebx
c000ee1d:	c3                   	ret    

c000ee1e <GDT::getNumberOfEntries()>:
c000ee1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee22:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee24:	c3                   	ret    
c000ee25:	90                   	nop

c000ee26 <GDT::flush()>:
c000ee26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee2a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee2c:	83 c0 04             	add    eax,0x4
c000ee2f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee36:	a3 52 ed 02 c0       	mov    ds:0xc002ed52,eax
c000ee3b:	66 89 15 50 ed 02 c0 	mov    WORD PTR ds:0xc002ed50,dx
c000ee42:	e9 09 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee47:	90                   	nop

c000ee48 <GDT::setup()>:
c000ee48:	55                   	push   ebp
c000ee49:	57                   	push   edi
c000ee4a:	56                   	push   esi
c000ee4b:	53                   	push   ebx
c000ee4c:	83 ec 3c             	sub    esp,0x3c
c000ee4f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee53:	6a 00                	push   0x0
c000ee55:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee59:	53                   	push   ebx
c000ee5a:	e8 33 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee5f:	6a 00                	push   0x0
c000ee61:	53                   	push   ebx
c000ee62:	e8 47 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee67:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee6f:	6a 00                	push   0x0
c000ee71:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee75:	53                   	push   ebx
c000ee76:	e8 17 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee7b:	68 ff ff ff 00       	push   0xffffff
c000ee80:	53                   	push   ebx
c000ee81:	e8 28 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee86:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee8a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee8f:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee94:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee98:	83 c4 20             	add    esp,0x20
c000ee9b:	6a 00                	push   0x0
c000ee9d:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000eea1:	53                   	push   ebx
c000eea2:	e8 eb fe ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000eea7:	68 ff ff ff 00       	push   0xffffff
c000eeac:	53                   	push   ebx
c000eead:	e8 fc fe ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000eeb2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000eeb6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eeba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eebe:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eec2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eec6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eecb:	0d 00 92 c0 00       	or     eax,0xc09200
c000eed0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eed4:	89 d8                	mov    eax,ebx
c000eed6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eeda:	80 cc 60             	or     ah,0x60
c000eedd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eee1:	83 c4 0c             	add    esp,0xc
c000eee4:	89 f8                	mov    eax,edi
c000eee6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eeea:	80 cc 60             	or     ah,0x60
c000eeed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eef1:	89 c7                	mov    edi,eax
c000eef3:	55                   	push   ebp
c000eef4:	e8 e9 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef9:	83 c4 0c             	add    esp,0xc
c000eefc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef00:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef04:	55                   	push   ebp
c000ef05:	e8 d8 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef0a:	83 c4 0c             	add    esp,0xc
c000ef0d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef11:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef15:	55                   	push   ebp
c000ef16:	e8 c7 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1b:	83 c4 0c             	add    esp,0xc
c000ef1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef26:	53                   	push   ebx
c000ef27:	51                   	push   ecx
c000ef28:	55                   	push   ebp
c000ef29:	e8 b4 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef2e:	83 c4 0c             	add    esp,0xc
c000ef31:	57                   	push   edi
c000ef32:	56                   	push   esi
c000ef33:	55                   	push   ebp
c000ef34:	e8 a9 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef39:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef3c:	e8 e5 fe ff ff       	call   c000ee26 <GDT::flush()>
c000ef41:	83 c4 4c             	add    esp,0x4c
c000ef44:	5b                   	pop    ebx
c000ef45:	5e                   	pop    esi
c000ef46:	5f                   	pop    edi
c000ef47:	5d                   	pop    ebp
c000ef48:	c3                   	ret    

c000ef49 <idleFunction(void*)>:
c000ef49:	53                   	push   ebx
c000ef4a:	83 ec 08             	sub    esp,0x8
c000ef4d:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c000ef52:	48                   	dec    eax
c000ef53:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c000ef58:	75 01                	jne    c000ef5b <idleFunction(void*)+0x12>
c000ef5a:	fb                   	sti    
c000ef5b:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c000ef60:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef66:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef6d:	74 3c                	je     c000efab <idleFunction(void*)+0x62>
c000ef6f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef76:	74 33                	je     c000efab <idleFunction(void*)+0x62>
c000ef78:	31 db                	xor    ebx,ebx
c000ef7a:	52                   	push   edx
c000ef7b:	52                   	push   edx
c000ef7c:	68 e1 00 00 00       	push   0xe1
c000ef81:	50                   	push   eax
c000ef82:	e8 b9 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef87:	53                   	push   ebx
c000ef88:	83 e0 02             	and    eax,0x2
c000ef8b:	50                   	push   eax
c000ef8c:	68 e1 00 00 00       	push   0xe1
c000ef91:	ff 35 48 ed 02 c0    	push   DWORD PTR ds:0xc002ed48
c000ef97:	e8 d0 fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef9c:	83 c4 20             	add    esp,0x20
c000ef9f:	e8 db 12 ff ff       	call   c000027f <doTPAUSE>
c000efa4:	e8 07 9d 01 00       	call   c0028cb0 <idleCommon()>
c000efa9:	eb f4                	jmp    c000ef9f <idleFunction(void*)+0x56>
c000efab:	fb                   	sti    
c000efac:	f4                   	hlt    
c000efad:	e8 fe 9c 01 00       	call   c0028cb0 <idleCommon()>
c000efb2:	eb f7                	jmp    c000efab <idleFunction(void*)+0x62>

c000efb4 <IDTEntry::IDTEntry(bool)>:
c000efb4:	83 ec 04             	sub    esp,0x4
c000efb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efbb:	88 04 24             	mov    BYTE PTR [esp],al
c000efbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efc2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efcc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efd4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efd7:	83 e2 f0             	and    edx,0xfffffff0
c000efda:	83 ca 0e             	or     edx,0xe
c000efdd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efe0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efe7:	83 e2 ef             	and    edx,0xffffffef
c000efea:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efed:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eff1:	74 04                	je     c000eff7 <IDTEntry::IDTEntry(bool)+0x43>
c000eff3:	b2 03                	mov    dl,0x3
c000eff5:	eb 02                	jmp    c000eff9 <IDTEntry::IDTEntry(bool)+0x45>
c000eff7:	b2 00                	mov    dl,0x0
c000eff9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effd:	83 e2 03             	and    edx,0x3
c000f000:	88 d1                	mov    cl,dl
c000f002:	c1 e1 05             	shl    ecx,0x5
c000f005:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f008:	83 e2 9f             	and    edx,0xffffff9f
c000f00b:	09 ca                	or     edx,ecx
c000f00d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f010:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f014:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f017:	83 ca 80             	or     edx,0xffffff80
c000f01a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f01d:	90                   	nop
c000f01e:	83 c4 04             	add    esp,0x4
c000f021:	c3                   	ret    

c000f022 <IDTEntry::setOffset(unsigned int)>:
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02a:	66 89 02             	mov    WORD PTR [edx],ax
c000f02d:	c1 e8 10             	shr    eax,0x10
c000f030:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f034:	c3                   	ret    
c000f035:	90                   	nop

c000f036 <IDT::IDT()>:
c000f036:	90                   	nop
c000f037:	c3                   	ret    

c000f038 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f038:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f03c:	83 c0 30             	add    eax,0x30
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(IDTEntry, int)>:
c000f040:	53                   	push   ebx
c000f041:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f045:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f04d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f051:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f054:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f058:	5b                   	pop    ebx
c000f059:	c3                   	ret    

c000f05a <IDT::addEntry(int, void (*)(), bool)>:
c000f05a:	53                   	push   ebx
c000f05b:	83 ec 10             	sub    esp,0x10
c000f05e:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f063:	50                   	push   eax
c000f064:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f068:	53                   	push   ebx
c000f069:	e8 46 ff ff ff       	call   c000efb4 <IDTEntry::IDTEntry(bool)>
c000f06e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f072:	53                   	push   ebx
c000f073:	e8 aa ff ff ff       	call   c000f022 <IDTEntry::setOffset(unsigned int)>
c000f078:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f07c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f080:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f084:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f088:	e8 b3 ff ff ff       	call   c000f040 <IDT::addEntry(IDTEntry, int)>
c000f08d:	83 c4 30             	add    esp,0x30
c000f090:	5b                   	pop    ebx
c000f091:	c3                   	ret    

c000f092 <IDT::flush()>:
c000f092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f096:	66 c7 05 58 ed 02 c0 ff 07 	mov    WORD PTR ds:0xc002ed58,0x7ff
c000f09f:	a3 5a ed 02 c0       	mov    ds:0xc002ed5a,eax
c000f0a4:	0f 01 1d 58 ed 02 c0 	lidtd  ds:0xc002ed58
c000f0ab:	c3                   	ret    

c000f0ac <IDT::setup()>:
c000f0ac:	57                   	push   edi
c000f0ad:	56                   	push   esi
c000f0ae:	53                   	push   ebx
c000f0af:	83 ec 10             	sub    esp,0x10
c000f0b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f0b6:	6a 00                	push   0x0
c000f0b8:	68 70 04 00 c0       	push   0xc0000470
c000f0bd:	6a 00                	push   0x0
c000f0bf:	53                   	push   ebx
c000f0c0:	e8 95 ff ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f0c5:	6a 00                	push   0x0
c000f0c7:	68 80 04 00 c0       	push   0xc0000480
c000f0cc:	6a 01                	push   0x1
c000f0ce:	53                   	push   ebx
c000f0cf:	e8 86 ff ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f0d4:	83 c4 20             	add    esp,0x20
c000f0d7:	6a 00                	push   0x0
c000f0d9:	68 8a 04 00 c0       	push   0xc000048a
c000f0de:	6a 02                	push   0x2
c000f0e0:	53                   	push   ebx
c000f0e1:	e8 74 ff ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f0e6:	6a 00                	push   0x0
c000f0e8:	68 94 04 00 c0       	push   0xc0000494
c000f0ed:	6a 03                	push   0x3
c000f0ef:	53                   	push   ebx
c000f0f0:	e8 65 ff ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f0f5:	83 c4 20             	add    esp,0x20
c000f0f8:	6a 00                	push   0x0
c000f0fa:	68 9e 04 00 c0       	push   0xc000049e
c000f0ff:	6a 04                	push   0x4
c000f101:	53                   	push   ebx
c000f102:	e8 53 ff ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f107:	6a 00                	push   0x0
c000f109:	68 a8 04 00 c0       	push   0xc00004a8
c000f10e:	6a 05                	push   0x5
c000f110:	53                   	push   ebx
c000f111:	e8 44 ff ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f116:	83 c4 20             	add    esp,0x20
c000f119:	6a 00                	push   0x0
c000f11b:	68 b2 04 00 c0       	push   0xc00004b2
c000f120:	6a 06                	push   0x6
c000f122:	53                   	push   ebx
c000f123:	e8 32 ff ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f128:	6a 00                	push   0x0
c000f12a:	68 bc 04 00 c0       	push   0xc00004bc
c000f12f:	6a 07                	push   0x7
c000f131:	53                   	push   ebx
c000f132:	e8 23 ff ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f137:	83 c4 20             	add    esp,0x20
c000f13a:	6a 00                	push   0x0
c000f13c:	68 c6 04 00 c0       	push   0xc00004c6
c000f141:	6a 08                	push   0x8
c000f143:	53                   	push   ebx
c000f144:	e8 11 ff ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f149:	6a 00                	push   0x0
c000f14b:	68 ce 04 00 c0       	push   0xc00004ce
c000f150:	6a 09                	push   0x9
c000f152:	53                   	push   ebx
c000f153:	e8 02 ff ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f158:	83 c4 20             	add    esp,0x20
c000f15b:	6a 00                	push   0x0
c000f15d:	68 d8 04 00 c0       	push   0xc00004d8
c000f162:	6a 0a                	push   0xa
c000f164:	53                   	push   ebx
c000f165:	e8 f0 fe ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f16a:	6a 00                	push   0x0
c000f16c:	68 e0 04 00 c0       	push   0xc00004e0
c000f171:	6a 0b                	push   0xb
c000f173:	53                   	push   ebx
c000f174:	e8 e1 fe ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f179:	83 c4 20             	add    esp,0x20
c000f17c:	6a 00                	push   0x0
c000f17e:	68 e8 04 00 c0       	push   0xc00004e8
c000f183:	6a 0c                	push   0xc
c000f185:	53                   	push   ebx
c000f186:	e8 cf fe ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f18b:	6a 00                	push   0x0
c000f18d:	68 f0 04 00 c0       	push   0xc00004f0
c000f192:	6a 0d                	push   0xd
c000f194:	53                   	push   ebx
c000f195:	e8 c0 fe ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f19a:	83 c4 20             	add    esp,0x20
c000f19d:	6a 00                	push   0x0
c000f19f:	68 f8 04 00 c0       	push   0xc00004f8
c000f1a4:	6a 0e                	push   0xe
c000f1a6:	53                   	push   ebx
c000f1a7:	e8 ae fe ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f1ac:	6a 00                	push   0x0
c000f1ae:	68 00 05 00 c0       	push   0xc0000500
c000f1b3:	6a 0f                	push   0xf
c000f1b5:	53                   	push   ebx
c000f1b6:	e8 9f fe ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f1bb:	83 c4 20             	add    esp,0x20
c000f1be:	6a 00                	push   0x0
c000f1c0:	68 0a 05 00 c0       	push   0xc000050a
c000f1c5:	6a 10                	push   0x10
c000f1c7:	53                   	push   ebx
c000f1c8:	e8 8d fe ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f1cd:	6a 00                	push   0x0
c000f1cf:	68 14 05 00 c0       	push   0xc0000514
c000f1d4:	6a 11                	push   0x11
c000f1d6:	53                   	push   ebx
c000f1d7:	e8 7e fe ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f1dc:	83 c4 20             	add    esp,0x20
c000f1df:	6a 00                	push   0x0
c000f1e1:	68 1e 05 00 c0       	push   0xc000051e
c000f1e6:	6a 12                	push   0x12
c000f1e8:	53                   	push   ebx
c000f1e9:	e8 6c fe ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f1ee:	6a 01                	push   0x1
c000f1f0:	68 b8 05 00 c0       	push   0xc00005b8
c000f1f5:	6a 60                	push   0x60
c000f1f7:	53                   	push   ebx
c000f1f8:	e8 5d fe ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f1fd:	83 c4 20             	add    esp,0x20
c000f200:	6a 00                	push   0x0
c000f202:	68 bf 05 00 c0       	push   0xc00005bf
c000f207:	6a 20                	push   0x20
c000f209:	53                   	push   ebx
c000f20a:	e8 4b fe ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f20f:	6a 00                	push   0x0
c000f211:	68 aa 05 00 c0       	push   0xc00005aa
c000f216:	6a 21                	push   0x21
c000f218:	53                   	push   ebx
c000f219:	e8 3c fe ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f21e:	83 c4 20             	add    esp,0x20
c000f221:	6a 00                	push   0x0
c000f223:	68 b1 05 00 c0       	push   0xc00005b1
c000f228:	6a 22                	push   0x22
c000f22a:	53                   	push   ebx
c000f22b:	e8 2a fe ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f230:	6a 00                	push   0x0
c000f232:	68 28 05 00 c0       	push   0xc0000528
c000f237:	6a 23                	push   0x23
c000f239:	53                   	push   ebx
c000f23a:	e8 1b fe ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f23f:	83 c4 20             	add    esp,0x20
c000f242:	6a 00                	push   0x0
c000f244:	68 32 05 00 c0       	push   0xc0000532
c000f249:	6a 24                	push   0x24
c000f24b:	53                   	push   ebx
c000f24c:	e8 09 fe ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f251:	6a 00                	push   0x0
c000f253:	68 3c 05 00 c0       	push   0xc000053c
c000f258:	6a 25                	push   0x25
c000f25a:	53                   	push   ebx
c000f25b:	e8 fa fd ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f260:	83 c4 20             	add    esp,0x20
c000f263:	6a 00                	push   0x0
c000f265:	68 46 05 00 c0       	push   0xc0000546
c000f26a:	6a 26                	push   0x26
c000f26c:	53                   	push   ebx
c000f26d:	e8 e8 fd ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f272:	6a 00                	push   0x0
c000f274:	68 50 05 00 c0       	push   0xc0000550
c000f279:	6a 27                	push   0x27
c000f27b:	53                   	push   ebx
c000f27c:	e8 d9 fd ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f281:	83 c4 20             	add    esp,0x20
c000f284:	6a 00                	push   0x0
c000f286:	68 5a 05 00 c0       	push   0xc000055a
c000f28b:	6a 28                	push   0x28
c000f28d:	53                   	push   ebx
c000f28e:	e8 c7 fd ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f293:	6a 00                	push   0x0
c000f295:	68 64 05 00 c0       	push   0xc0000564
c000f29a:	6a 29                	push   0x29
c000f29c:	53                   	push   ebx
c000f29d:	e8 b8 fd ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f2a2:	83 c4 20             	add    esp,0x20
c000f2a5:	6a 00                	push   0x0
c000f2a7:	68 6e 05 00 c0       	push   0xc000056e
c000f2ac:	6a 2a                	push   0x2a
c000f2ae:	53                   	push   ebx
c000f2af:	e8 a6 fd ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f2b4:	6a 00                	push   0x0
c000f2b6:	68 78 05 00 c0       	push   0xc0000578
c000f2bb:	6a 2b                	push   0x2b
c000f2bd:	53                   	push   ebx
c000f2be:	e8 97 fd ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f2c3:	83 c4 20             	add    esp,0x20
c000f2c6:	6a 00                	push   0x0
c000f2c8:	68 82 05 00 c0       	push   0xc0000582
c000f2cd:	6a 2c                	push   0x2c
c000f2cf:	53                   	push   ebx
c000f2d0:	e8 85 fd ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f2d5:	6a 00                	push   0x0
c000f2d7:	68 8c 05 00 c0       	push   0xc000058c
c000f2dc:	6a 2d                	push   0x2d
c000f2de:	53                   	push   ebx
c000f2df:	e8 76 fd ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f2e4:	83 c4 20             	add    esp,0x20
c000f2e7:	6a 00                	push   0x0
c000f2e9:	68 96 05 00 c0       	push   0xc0000596
c000f2ee:	6a 2e                	push   0x2e
c000f2f0:	53                   	push   ebx
c000f2f1:	e8 64 fd ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f2f6:	6a 00                	push   0x0
c000f2f8:	68 a0 05 00 c0       	push   0xc00005a0
c000f2fd:	6a 2f                	push   0x2f
c000f2ff:	53                   	push   ebx
c000f300:	e8 55 fd ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f305:	83 c4 20             	add    esp,0x20
c000f308:	6a 00                	push   0x0
c000f30a:	68 f6 05 00 c0       	push   0xc00005f6
c000f30f:	6a 30                	push   0x30
c000f311:	53                   	push   ebx
c000f312:	e8 43 fd ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f317:	6a 00                	push   0x0
c000f319:	68 00 06 00 c0       	push   0xc0000600
c000f31e:	6a 31                	push   0x31
c000f320:	53                   	push   ebx
c000f321:	e8 34 fd ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f326:	83 c4 20             	add    esp,0x20
c000f329:	6a 00                	push   0x0
c000f32b:	68 0a 06 00 c0       	push   0xc000060a
c000f330:	6a 32                	push   0x32
c000f332:	53                   	push   ebx
c000f333:	e8 22 fd ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f338:	6a 00                	push   0x0
c000f33a:	68 14 06 00 c0       	push   0xc0000614
c000f33f:	6a 33                	push   0x33
c000f341:	53                   	push   ebx
c000f342:	e8 13 fd ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f347:	83 c4 20             	add    esp,0x20
c000f34a:	6a 00                	push   0x0
c000f34c:	68 1e 06 00 c0       	push   0xc000061e
c000f351:	6a 34                	push   0x34
c000f353:	53                   	push   ebx
c000f354:	e8 01 fd ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f359:	6a 00                	push   0x0
c000f35b:	68 28 06 00 c0       	push   0xc0000628
c000f360:	6a 35                	push   0x35
c000f362:	53                   	push   ebx
c000f363:	e8 f2 fc ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f368:	83 c4 20             	add    esp,0x20
c000f36b:	6a 00                	push   0x0
c000f36d:	68 32 06 00 c0       	push   0xc0000632
c000f372:	6a 36                	push   0x36
c000f374:	53                   	push   ebx
c000f375:	e8 e0 fc ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f37a:	6a 00                	push   0x0
c000f37c:	68 3c 06 00 c0       	push   0xc000063c
c000f381:	6a 37                	push   0x37
c000f383:	53                   	push   ebx
c000f384:	e8 d1 fc ff ff       	call   c000f05a <IDT::addEntry(int, void (*)(), bool)>
c000f389:	83 c4 1c             	add    esp,0x1c
c000f38c:	6a 03                	push   0x3
c000f38e:	6a 02                	push   0x2
c000f390:	ff 35 b0 ee 02 c0    	push   DWORD PTR ds:0xc002eeb0
c000f396:	e8 47 27 00 00       	call   c0011ae2 <VAS::allocatePages(int, int)>
c000f39b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f3a2:	89 c6                	mov    esi,eax
c000f3a4:	e8 0d 02 00 00       	call   c000f5b6 <malloc>
c000f3a9:	81 c6 00 20 00 00    	add    esi,0x2000
c000f3af:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3b2:	89 c7                	mov    edi,eax
c000f3b4:	e8 21 17 00 00       	call   c0010ada <TSS::TSS()>
c000f3b9:	83 c4 0c             	add    esp,0xc
c000f3bc:	68 c6 04 00 c0       	push   0xc00004c6
c000f3c1:	56                   	push   esi
c000f3c2:	57                   	push   edi
c000f3c3:	e8 52 17 00 00       	call   c0010b1a <TSS::setup(unsigned long, unsigned long)>
c000f3c8:	89 c6                	mov    esi,eax
c000f3ca:	58                   	pop    eax
c000f3cb:	5a                   	pop    edx
c000f3cc:	6a 00                	push   0x0
c000f3ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3d2:	50                   	push   eax
c000f3d3:	e8 dc fb ff ff       	call   c000efb4 <IDTEntry::IDTEntry(bool)>
c000f3d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3dc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3e1:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3e8:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3f2:	80 ce 05             	or     dh,0x5
c000f3f5:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f400:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f403:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f406:	e8 87 fc ff ff       	call   c000f092 <IDT::flush()>
c000f40b:	83 c4 20             	add    esp,0x20
c000f40e:	5b                   	pop    ebx
c000f40f:	5e                   	pop    esi
c000f410:	5f                   	pop    edi
c000f411:	c3                   	ret    

c000f412 <sbrk>:
c000f412:	55                   	push   ebp
c000f413:	57                   	push   edi
c000f414:	56                   	push   esi
c000f415:	53                   	push   ebx
c000f416:	83 ec 1c             	sub    esp,0x1c
c000f419:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f41d:	85 c0                	test   eax,eax
c000f41f:	74 3e                	je     c000f45f <sbrk+0x4d>
c000f421:	78 43                	js     c000f466 <sbrk+0x54>
c000f423:	8b 15 48 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed48
c000f429:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f42f:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f435:	83 e2 01             	and    edx,0x1
c000f438:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f43c:	8b 0d 18 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db18
c000f442:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f446:	05 ff 0f 00 00       	add    eax,0xfff
c000f44b:	89 c2                	mov    edx,eax
c000f44d:	78 2f                	js     c000f47e <sbrk+0x6c>
c000f44f:	c1 fa 0c             	sar    edx,0xc
c000f452:	89 d7                	mov    edi,edx
c000f454:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f458:	be 00 00 00 00       	mov    esi,0x0
c000f45d:	eb 36                	jmp    c000f495 <sbrk+0x83>
c000f45f:	a1 18 db 02 c0       	mov    eax,ds:0xc002db18
c000f464:	eb 73                	jmp    c000f4d9 <sbrk+0xc7>
c000f466:	83 ec 08             	sub    esp,0x8
c000f469:	50                   	push   eax
c000f46a:	68 5c a8 02 c0       	push   0xc002a85c
c000f46f:	e8 3b 31 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c000f474:	83 c4 10             	add    esp,0x10
c000f477:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f47c:	eb 5b                	jmp    c000f4d9 <sbrk+0xc7>
c000f47e:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f484:	eb c9                	jmp    c000f44f <sbrk+0x3d>
c000f486:	81 05 18 db 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002db18,0x1000
c000f490:	46                   	inc    esi
c000f491:	39 f7                	cmp    edi,esi
c000f493:	74 33                	je     c000f4c8 <sbrk+0xb6>
c000f495:	8b 1d b0 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eeb0
c000f49b:	8b 2d 18 db 02 c0    	mov    ebp,DWORD PTR ds:0xc002db18
c000f4a1:	e8 b4 04 00 00       	call   c000f95a <Phys::allocatePage()>
c000f4a6:	68 01 0c 00 00       	push   0xc01
c000f4ab:	55                   	push   ebp
c000f4ac:	50                   	push   eax
c000f4ad:	53                   	push   ebx
c000f4ae:	e8 2d 25 00 00       	call   c00119e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f4b3:	83 c4 10             	add    esp,0x10
c000f4b6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4bb:	74 c9                	je     c000f486 <sbrk+0x74>
c000f4bd:	8b 1d 18 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db18
c000f4c3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4c6:	eb be                	jmp    c000f486 <sbrk+0x74>
c000f4c8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4cd:	75 12                	jne    c000f4e1 <sbrk+0xcf>
c000f4cf:	0f 20 d8             	mov    eax,cr3
c000f4d2:	0f 22 d8             	mov    cr3,eax
c000f4d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4d9:	83 c4 1c             	add    esp,0x1c
c000f4dc:	5b                   	pop    ebx
c000f4dd:	5e                   	pop    esi
c000f4de:	5f                   	pop    edi
c000f4df:	5d                   	pop    ebp
c000f4e0:	c3                   	ret    
c000f4e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4e5:	89 cb                	mov    ebx,ecx
c000f4e7:	c1 eb 0a             	shr    ebx,0xa
c000f4ea:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4f0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4fa:	c1 e0 0c             	shl    eax,0xc
c000f4fd:	01 c8                	add    eax,ecx
c000f4ff:	c1 e8 0a             	shr    eax,0xa
c000f502:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f507:	2d 00 00 40 00       	sub    eax,0x400000
c000f50c:	39 c3                	cmp    ebx,eax
c000f50e:	77 c5                	ja     c000f4d5 <sbrk+0xc3>
c000f510:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f513:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f519:	39 d8                	cmp    eax,ebx
c000f51b:	73 f3                	jae    c000f510 <sbrk+0xfe>
c000f51d:	eb b6                	jmp    c000f4d5 <sbrk+0xc3>

c000f51f <mmap>:
c000f51f:	83 ec 18             	sub    esp,0x18
c000f522:	68 8c a8 02 c0       	push   0xc002a88c
c000f527:	e8 51 ab 00 00       	call   c001a07d <Krnl::panic(char const*)>
c000f52c:	b8 00 00 00 00       	mov    eax,0x0
c000f531:	83 c4 1c             	add    esp,0x1c
c000f534:	c3                   	ret    

c000f535 <munmap>:
c000f535:	83 ec 18             	sub    esp,0x18
c000f538:	68 91 a8 02 c0       	push   0xc002a891
c000f53d:	e8 3b ab 00 00       	call   c001a07d <Krnl::panic(char const*)>
c000f542:	b8 00 00 00 00       	mov    eax,0x0
c000f547:	83 c4 1c             	add    esp,0x1c
c000f54a:	c3                   	ret    

c000f54b <liballoc_lock()>:
c000f54b:	fa                   	cli    
c000f54c:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c000f552:	b8 00 00 00 00       	mov    eax,0x0
c000f557:	c3                   	ret    

c000f558 <liballoc_unlock()>:
c000f558:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c000f55d:	48                   	dec    eax
c000f55e:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c000f563:	75 01                	jne    c000f566 <liballoc_unlock()+0xe>
c000f565:	fb                   	sti    
c000f566:	b8 00 00 00 00       	mov    eax,0x0
c000f56b:	c3                   	ret    

c000f56c <liballoc_alloc(int)>:
c000f56c:	83 ec 10             	sub    esp,0x10
c000f56f:	68 01 08 00 00       	push   0x801
c000f574:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f578:	ff 35 b0 ee 02 c0    	push   DWORD PTR ds:0xc002eeb0
c000f57e:	e8 5f 25 00 00       	call   c0011ae2 <VAS::allocatePages(int, int)>
c000f583:	83 c4 1c             	add    esp,0x1c
c000f586:	c3                   	ret    

c000f587 <liballoc_free(void*, int)>:
c000f587:	83 ec 14             	sub    esp,0x14
c000f58a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f58e:	ff 35 b0 ee 02 c0    	push   DWORD PTR ds:0xc002eeb0
c000f594:	e8 f3 21 00 00       	call   c001178c <VAS::freeAllocatedPages(unsigned long)>
c000f599:	b8 00 00 00 00       	mov    eax,0x0
c000f59e:	83 c4 1c             	add    esp,0x1c
c000f5a1:	c3                   	ret    

c000f5a2 <realloc>:
c000f5a2:	83 ec 14             	sub    esp,0x14
c000f5a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5ad:	e8 7a 20 ff ff       	call   c000162c <dlrealloc>
c000f5b2:	83 c4 1c             	add    esp,0x1c
c000f5b5:	c3                   	ret    

c000f5b6 <malloc>:
c000f5b6:	83 ec 18             	sub    esp,0x18
c000f5b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5bd:	e8 2d 1b ff ff       	call   c00010ef <dlmalloc>
c000f5c2:	83 c4 1c             	add    esp,0x1c
c000f5c5:	c3                   	ret    

c000f5c6 <free>:
c000f5c6:	83 ec 18             	sub    esp,0x18
c000f5c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5cd:	e8 c2 17 ff ff       	call   c0000d94 <dlfree>
c000f5d2:	83 c4 1c             	add    esp,0x1c
c000f5d5:	c3                   	ret    

c000f5d6 <rfree>:
c000f5d6:	83 ec 18             	sub    esp,0x18
c000f5d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5dd:	e8 b2 17 ff ff       	call   c0000d94 <dlfree>
c000f5e2:	83 c4 1c             	add    esp,0x1c
c000f5e5:	c3                   	ret    

c000f5e6 <calloc>:
c000f5e6:	56                   	push   esi
c000f5e7:	53                   	push   ebx
c000f5e8:	83 ec 10             	sub    esp,0x10
c000f5eb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5ef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5f4:	53                   	push   ebx
c000f5f5:	e8 bc ff ff ff       	call   c000f5b6 <malloc>
c000f5fa:	89 c6                	mov    esi,eax
c000f5fc:	83 c4 0c             	add    esp,0xc
c000f5ff:	53                   	push   ebx
c000f600:	6a 00                	push   0x0
c000f602:	50                   	push   eax
c000f603:	e8 48 11 ff ff       	call   c0000750 <memset>
c000f608:	89 f0                	mov    eax,esi
c000f60a:	83 c4 14             	add    esp,0x14
c000f60d:	5b                   	pop    ebx
c000f60e:	5e                   	pop    esi
c000f60f:	c3                   	ret    

c000f610 <Krnl::setBootMessage(char const*)>:
c000f610:	57                   	push   edi
c000f611:	56                   	push   esi
c000f612:	53                   	push   ebx
c000f613:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f619:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f620:	68 9e 00 00 00       	push   0x9e
c000f625:	6a 00                	push   0x0
c000f627:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f62b:	56                   	push   esi
c000f62c:	e8 1f 11 ff ff       	call   c0000750 <memset>
c000f631:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f634:	e8 33 11 ff ff       	call   c000076c <strlen>
c000f639:	ba 50 00 00 00       	mov    edx,0x50
c000f63e:	83 c4 10             	add    esp,0x10
c000f641:	29 c2                	sub    edx,eax
c000f643:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f647:	d1 ea                	shr    edx,1
c000f649:	84 c0                	test   al,al
c000f64b:	74 19                	je     c000f666 <Krnl::setBootMessage(char const*)+0x56>
c000f64d:	01 d2                	add    edx,edx
c000f64f:	43                   	inc    ebx
c000f650:	01 f2                	add    edx,esi
c000f652:	80 cc 0f             	or     ah,0xf
c000f655:	83 c2 02             	add    edx,0x2
c000f658:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f65c:	43                   	inc    ebx
c000f65d:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f662:	84 c0                	test   al,al
c000f664:	75 ec                	jne    c000f652 <Krnl::setBootMessage(char const*)+0x42>
c000f666:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f66b:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f670:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f672:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f678:	5b                   	pop    ebx
c000f679:	5e                   	pop    esi
c000f67a:	5f                   	pop    edi
c000f67b:	c3                   	ret    

c000f67c <kernel_main>:
c000f67c:	57                   	push   edi
c000f67d:	bf f9 03 00 00       	mov    edi,0x3f9
c000f682:	56                   	push   esi
c000f683:	89 fa                	mov    edx,edi
c000f685:	53                   	push   ebx
c000f686:	31 f6                	xor    esi,esi
c000f688:	83 ec 2c             	sub    esp,0x2c
c000f68b:	89 f0                	mov    eax,esi
c000f68d:	ee                   	out    dx,al
c000f68e:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f693:	b0 80                	mov    al,0x80
c000f695:	89 da                	mov    edx,ebx
c000f697:	ee                   	out    dx,al
c000f698:	b1 03                	mov    cl,0x3
c000f69a:	ba f8 03 00 00       	mov    edx,0x3f8
c000f69f:	88 c8                	mov    al,cl
c000f6a1:	ee                   	out    dx,al
c000f6a2:	89 f0                	mov    eax,esi
c000f6a4:	89 fa                	mov    edx,edi
c000f6a6:	ee                   	out    dx,al
c000f6a7:	88 c8                	mov    al,cl
c000f6a9:	89 da                	mov    edx,ebx
c000f6ab:	ee                   	out    dx,al
c000f6ac:	b0 c7                	mov    al,0xc7
c000f6ae:	ba fa 03 00 00       	mov    edx,0x3fa
c000f6b3:	ee                   	out    dx,al
c000f6b4:	b0 0b                	mov    al,0xb
c000f6b6:	ba fc 03 00 00       	mov    edx,0x3fc
c000f6bb:	ee                   	out    dx,al
c000f6bc:	68 98 a8 02 c0       	push   0xc002a898
c000f6c1:	e8 e9 2e 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c000f6c6:	e8 11 09 00 00       	call   c000ffdc <installVgaTextImplementation()>
c000f6cb:	0f b6 05 20 db 02 c0 	movzx  eax,BYTE PTR ds:0xc002db20
c000f6d2:	83 c4 10             	add    esp,0x10
c000f6d5:	84 c0                	test   al,al
c000f6d7:	74 6c                	je     c000f745 <kernel_main+0xc9>
c000f6d9:	31 db                	xor    ebx,ebx
c000f6db:	bf 0a 00 00 00       	mov    edi,0xa
c000f6e0:	be 05 00 00 00       	mov    esi,0x5
c000f6e5:	31 c9                	xor    ecx,ecx
c000f6e7:	eb 2a                	jmp    c000f713 <kernel_main+0x97>
c000f6e9:	3c 0d                	cmp    al,0xd
c000f6eb:	74 1a                	je     c000f707 <kernel_main+0x8b>
c000f6ed:	3c 0a                	cmp    al,0xa
c000f6ef:	74 40                	je     c000f731 <kernel_main+0xb5>
c000f6f1:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6f4:	80 cc 0e             	or     ah,0xe
c000f6f7:	c1 e2 04             	shl    edx,0x4
c000f6fa:	01 ca                	add    edx,ecx
c000f6fc:	41                   	inc    ecx
c000f6fd:	01 fa                	add    edx,edi
c000f6ff:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f707:	43                   	inc    ebx
c000f708:	0f b6 83 20 db 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd24e0]
c000f70f:	84 c0                	test   al,al
c000f711:	74 32                	je     c000f745 <kernel_main+0xc9>
c000f713:	80 b9 56 db 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd24aa],0xdb
c000f71a:	75 cd                	jne    c000f6e9 <kernel_main+0x6d>
c000f71c:	0f b6 91 55 db 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd24ab]
c000f723:	83 e2 fe             	and    edx,0xfffffffe
c000f726:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f72c:	75 bb                	jne    c000f6e9 <kernel_main+0x6d>
c000f72e:	47                   	inc    edi
c000f72f:	eb b8                	jmp    c000f6e9 <kernel_main+0x6d>
c000f731:	43                   	inc    ebx
c000f732:	46                   	inc    esi
c000f733:	31 c9                	xor    ecx,ecx
c000f735:	0f b6 83 20 db 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd24e0]
c000f73c:	bf 0a 00 00 00       	mov    edi,0xa
c000f741:	84 c0                	test   al,al
c000f743:	75 ce                	jne    c000f713 <kernel_main+0x97>
c000f745:	83 ec 0c             	sub    esp,0xc
c000f748:	68 b0 a8 02 c0       	push   0xc002a8b0
c000f74d:	e8 be fe ff ff       	call   c000f610 <Krnl::setBootMessage(char const*)>
c000f752:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f757:	a3 60 ed 02 c0       	mov    ds:0xc002ed60,eax
c000f75c:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f761:	05 ff 0f 00 00       	add    eax,0xfff
c000f766:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f76b:	89 04 24             	mov    DWORD PTR [esp],eax
c000f76e:	e8 30 03 00 00       	call   c000faa3 <Phys::physicalMemorySetup(unsigned int)>
c000f773:	e8 f0 1b 00 00       	call   c0011368 <Virt::virtualMemorySetup()>
c000f778:	58                   	pop    eax
c000f779:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f77d:	53                   	push   ebx
c000f77e:	e8 31 1e 00 00       	call   c00115b4 <VAS::VAS()>
c000f783:	89 1d b0 ee 02 c0    	mov    DWORD PTR ds:0xc002eeb0,ebx
c000f789:	e8 92 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f78e:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f795:	e8 1c fe ff ff       	call   c000f5b6 <malloc>
c000f79a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f79d:	89 c6                	mov    esi,eax
c000f79f:	e8 32 f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f7a4:	6a 00                	push   0x0
c000f7a6:	89 35 48 ed 02 c0    	mov    DWORD PTR ds:0xc002ed48,esi
c000f7ac:	6a 00                	push   0x0
c000f7ae:	6a 00                	push   0x0
c000f7b0:	56                   	push   esi
c000f7b1:	e8 2c f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f7b6:	83 c4 14             	add    esp,0x14
c000f7b9:	53                   	push   ebx
c000f7ba:	e8 a5 20 00 00       	call   c0011864 <VAS::~VAS()>
c000f7bf:	83 c4 30             	add    esp,0x30
c000f7c2:	5b                   	pop    ebx
c000f7c3:	5e                   	pop    esi
c000f7c4:	5f                   	pop    edi
c000f7c5:	c3                   	ret    

c000f7c6 <Phys::allocateDMA(unsigned long)>:
c000f7c6:	55                   	push   ebp
c000f7c7:	31 d2                	xor    edx,edx
c000f7c9:	57                   	push   edi
c000f7ca:	31 ed                	xor    ebp,ebp
c000f7cc:	56                   	push   esi
c000f7cd:	31 c9                	xor    ecx,ecx
c000f7cf:	53                   	push   ebx
c000f7d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7d4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7da:	31 c0                	xor    eax,eax
c000f7dc:	c1 ee 0c             	shr    esi,0xc
c000f7df:	eb 17                	jmp    c000f7f8 <Phys::allocateDMA(unsigned long)+0x32>
c000f7e1:	85 c9                	test   ecx,ecx
c000f7e3:	75 04                	jne    c000f7e9 <Phys::allocateDMA(unsigned long)+0x23>
c000f7e5:	89 d5                	mov    ebp,edx
c000f7e7:	89 d0                	mov    eax,edx
c000f7e9:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f7ec:	39 de                	cmp    esi,ebx
c000f7ee:	74 20                	je     c000f810 <Phys::allocateDMA(unsigned long)+0x4a>
c000f7f0:	42                   	inc    edx
c000f7f1:	89 d9                	mov    ecx,ebx
c000f7f3:	83 fa 2f             	cmp    edx,0x2f
c000f7f6:	7f 11                	jg     c000f809 <Phys::allocateDMA(unsigned long)+0x43>
c000f7f8:	80 ba a0 ed 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1260],0x0
c000f7ff:	74 e0                	je     c000f7e1 <Phys::allocateDMA(unsigned long)+0x1b>
c000f801:	31 c9                	xor    ecx,ecx
c000f803:	42                   	inc    edx
c000f804:	83 fa 2f             	cmp    edx,0x2f
c000f807:	7e ef                	jle    c000f7f8 <Phys::allocateDMA(unsigned long)+0x32>
c000f809:	5b                   	pop    ebx
c000f80a:	31 c0                	xor    eax,eax
c000f80c:	5e                   	pop    esi
c000f80d:	5f                   	pop    edi
c000f80e:	5d                   	pop    ebp
c000f80f:	c3                   	ret    
c000f810:	8d 14 30             	lea    edx,[eax+esi*1]
c000f813:	89 d7                	mov    edi,edx
c000f815:	4f                   	dec    edi
c000f816:	79 03                	jns    c000f81b <Phys::allocateDMA(unsigned long)+0x55>
c000f818:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f81b:	c1 ff 04             	sar    edi,0x4
c000f81e:	89 c2                	mov    edx,eax
c000f820:	c1 fa 04             	sar    edx,0x4
c000f823:	39 fa                	cmp    edx,edi
c000f825:	75 2f                	jne    c000f856 <Phys::allocateDMA(unsigned long)+0x90>
c000f827:	85 db                	test   ebx,ebx
c000f829:	74 1a                	je     c000f845 <Phys::allocateDMA(unsigned long)+0x7f>
c000f82b:	be a0 ed 02 c0       	mov    esi,0xc002eda0
c000f830:	8d 90 a0 ed 02 c0    	lea    edx,[eax-0x3ffd1260]
c000f836:	f7 d6                	not    esi
c000f838:	29 c6                	sub    esi,eax
c000f83a:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f83d:	42                   	inc    edx
c000f83e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f841:	39 d9                	cmp    ecx,ebx
c000f843:	7f f5                	jg     c000f83a <Phys::allocateDMA(unsigned long)+0x74>
c000f845:	85 ff                	test   edi,edi
c000f847:	74 13                	je     c000f85c <Phys::allocateDMA(unsigned long)+0x96>
c000f849:	5b                   	pop    ebx
c000f84a:	05 50 20 0c 00       	add    eax,0xc2050
c000f84f:	5e                   	pop    esi
c000f850:	c1 e0 0c             	shl    eax,0xc
c000f853:	5f                   	pop    edi
c000f854:	5d                   	pop    ebp
c000f855:	c3                   	ret    
c000f856:	89 ea                	mov    edx,ebp
c000f858:	31 c9                	xor    ecx,ecx
c000f85a:	eb a7                	jmp    c000f803 <Phys::allocateDMA(unsigned long)+0x3d>
c000f85c:	5b                   	pop    ebx
c000f85d:	c1 e0 0c             	shl    eax,0xc
c000f860:	5e                   	pop    esi
c000f861:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f866:	5f                   	pop    edi
c000f867:	5d                   	pop    ebp
c000f868:	c3                   	ret    

c000f869 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f869:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f86d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f871:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f877:	c1 e9 0c             	shr    ecx,0xc
c000f87a:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f87f:	76 25                	jbe    c000f8a6 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f881:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f886:	c1 e8 0c             	shr    eax,0xc
c000f889:	8d 50 10             	lea    edx,[eax+0x10]
c000f88c:	85 c9                	test   ecx,ecx
c000f88e:	74 15                	je     c000f8a5 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f890:	8d 82 a0 ed 02 c0    	lea    eax,[edx-0x3ffd1260]
c000f896:	8d 94 11 a0 ed 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1260]
c000f89d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8a0:	40                   	inc    eax
c000f8a1:	39 d0                	cmp    eax,edx
c000f8a3:	75 f8                	jne    c000f89d <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f8a5:	c3                   	ret    
c000f8a6:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8ac:	c1 ea 0c             	shr    edx,0xc
c000f8af:	eb db                	jmp    c000f88c <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f8b1 <Phys::setPageState(unsigned long, bool)>:
c000f8b1:	56                   	push   esi
c000f8b2:	ba 01 00 00 00       	mov    edx,0x1
c000f8b7:	53                   	push   ebx
c000f8b8:	8b 35 64 dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dc64
c000f8be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8c6:	89 c8                	mov    eax,ecx
c000f8c8:	83 e1 07             	and    ecx,0x7
c000f8cb:	c1 e8 03             	shr    eax,0x3
c000f8ce:	d3 e3                	shl    ebx,cl
c000f8d0:	01 c6                	add    esi,eax
c000f8d2:	d3 e2                	shl    edx,cl
c000f8d4:	f7 d2                	not    edx
c000f8d6:	20 16                	and    BYTE PTR [esi],dl
c000f8d8:	03 05 64 dc 02 c0    	add    eax,DWORD PTR ds:0xc002dc64
c000f8de:	08 18                	or     BYTE PTR [eax],bl
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	c3                   	ret    

c000f8e3 <Phys::getPageState(unsigned long)>:
c000f8e3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8e7:	8b 15 64 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc64
c000f8ed:	89 c8                	mov    eax,ecx
c000f8ef:	83 e1 07             	and    ecx,0x7
c000f8f2:	c1 e8 03             	shr    eax,0x3
c000f8f5:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f8f9:	d3 f8                	sar    eax,cl
c000f8fb:	83 e0 01             	and    eax,0x1
c000f8fe:	c3                   	ret    

c000f8ff <Phys::freePage(unsigned long)>:
c000f8ff:	53                   	push   ebx
c000f900:	83 ec 08             	sub    esp,0x8
c000f903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f907:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000f90c:	76 3a                	jbe    c000f948 <Phys::freePage(unsigned long)+0x49>
c000f90e:	c1 e8 0c             	shr    eax,0xc
c000f911:	50                   	push   eax
c000f912:	89 c3                	mov    ebx,eax
c000f914:	e8 ca ff ff ff       	call   c000f8e3 <Phys::getPageState(unsigned long)>
c000f919:	5a                   	pop    edx
c000f91a:	84 c0                	test   al,al
c000f91c:	74 19                	je     c000f937 <Phys::freePage(unsigned long)+0x38>
c000f91e:	83 ec 08             	sub    esp,0x8
c000f921:	ff 0d 90 ed 02 c0    	dec    DWORD PTR ds:0xc002ed90
c000f927:	6a 00                	push   0x0
c000f929:	53                   	push   ebx
c000f92a:	e8 82 ff ff ff       	call   c000f8b1 <Phys::setPageState(unsigned long, bool)>
c000f92f:	83 c4 10             	add    esp,0x10
c000f932:	83 c4 08             	add    esp,0x8
c000f935:	5b                   	pop    ebx
c000f936:	c3                   	ret    
c000f937:	c7 44 24 10 cf a8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a8cf
c000f93f:	83 c4 08             	add    esp,0x8
c000f942:	5b                   	pop    ebx
c000f943:	e9 35 a7 00 00       	jmp    c001a07d <Krnl::panic(char const*)>
c000f948:	68 00 10 00 00       	push   0x1000
c000f94d:	50                   	push   eax
c000f94e:	e8 16 ff ff ff       	call   c000f869 <Phys::freeDMA(unsigned long, unsigned long)>
c000f953:	59                   	pop    ecx
c000f954:	5b                   	pop    ebx
c000f955:	83 c4 08             	add    esp,0x8
c000f958:	5b                   	pop    ebx
c000f959:	c3                   	ret    

c000f95a <Phys::allocatePage()>:
c000f95a:	56                   	push   esi
c000f95b:	53                   	push   ebx
c000f95c:	51                   	push   ecx
c000f95d:	8b 35 84 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed84
c000f963:	89 f3                	mov    ebx,esi
c000f965:	eb 0a                	jmp    c000f971 <Phys::allocatePage()+0x17>
c000f967:	89 1d 84 ed 02 c0    	mov    DWORD PTR ds:0xc002ed84,ebx
c000f96d:	39 de                	cmp    esi,ebx
c000f96f:	74 24                	je     c000f995 <Phys::allocatePage()+0x3b>
c000f971:	53                   	push   ebx
c000f972:	e8 6c ff ff ff       	call   c000f8e3 <Phys::getPageState(unsigned long)>
c000f977:	5a                   	pop    edx
c000f978:	84 c0                	test   al,al
c000f97a:	74 77                	je     c000f9f3 <Phys::allocatePage()+0x99>
c000f97c:	43                   	inc    ebx
c000f97d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f983:	75 e2                	jne    c000f967 <Phys::allocatePage()+0xd>
c000f985:	31 db                	xor    ebx,ebx
c000f987:	c7 05 84 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed84,0x0
c000f991:	39 de                	cmp    esi,ebx
c000f993:	75 dc                	jne    c000f971 <Phys::allocatePage()+0x17>
c000f995:	83 ec 0c             	sub    esp,0xc
c000f998:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f99d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9a0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9a6:	e8 31 29 00 00       	call   c00122dc <VAS::scanForEviction()>
c000f9ab:	83 c4 10             	add    esp,0x10
c000f9ae:	85 c0                	test   eax,eax
c000f9b0:	75 59                	jne    c000fa0b <Phys::allocatePage()+0xb1>
c000f9b2:	83 ec 0c             	sub    esp,0xc
c000f9b5:	68 e5 a8 02 c0       	push   0xc002a8e5
c000f9ba:	e8 f0 2b 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c000f9bf:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000f9c6:	e8 fb fd ff ff       	call   c000f7c6 <Phys::allocateDMA(unsigned long)>
c000f9cb:	83 c4 10             	add    esp,0x10
c000f9ce:	85 c0                	test   eax,eax
c000f9d0:	75 39                	jne    c000fa0b <Phys::allocatePage()+0xb1>
c000f9d2:	83 ec 0c             	sub    esp,0xc
c000f9d5:	68 f6 a8 02 c0       	push   0xc002a8f6
c000f9da:	e8 9e a6 00 00       	call   c001a07d <Krnl::panic(char const*)>
c000f9df:	83 c4 10             	add    esp,0x10
c000f9e2:	8b 1d 84 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed84
c000f9e8:	53                   	push   ebx
c000f9e9:	e8 f5 fe ff ff       	call   c000f8e3 <Phys::getPageState(unsigned long)>
c000f9ee:	5a                   	pop    edx
c000f9ef:	84 c0                	test   al,al
c000f9f1:	75 89                	jne    c000f97c <Phys::allocatePage()+0x22>
c000f9f3:	6a 01                	push   0x1
c000f9f5:	53                   	push   ebx
c000f9f6:	e8 b6 fe ff ff       	call   c000f8b1 <Phys::setPageState(unsigned long, bool)>
c000f9fb:	a1 84 ed 02 c0       	mov    eax,ds:0xc002ed84
c000fa00:	59                   	pop    ecx
c000fa01:	ff 05 90 ed 02 c0    	inc    DWORD PTR ds:0xc002ed90
c000fa07:	c1 e0 0c             	shl    eax,0xc
c000fa0a:	5b                   	pop    ebx
c000fa0b:	5a                   	pop    edx
c000fa0c:	5b                   	pop    ebx
c000fa0d:	5e                   	pop    esi
c000fa0e:	c3                   	ret    

c000fa0f <Phys::allocateContiguousPages(int)>:
c000fa0f:	57                   	push   edi
c000fa10:	56                   	push   esi
c000fa11:	53                   	push   ebx
c000fa12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa16:	fa                   	cli    
c000fa17:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c000fa1d:	31 db                	xor    ebx,ebx
c000fa1f:	85 db                	test   ebx,ebx
c000fa21:	75 11                	jne    c000fa34 <Phys::allocateContiguousPages(int)+0x25>
c000fa23:	e8 32 ff ff ff       	call   c000f95a <Phys::allocatePage()>
c000fa28:	83 fe 01             	cmp    esi,0x1
c000fa2b:	89 c7                	mov    edi,eax
c000fa2d:	74 21                	je     c000fa50 <Phys::allocateContiguousPages(int)+0x41>
c000fa2f:	bb 01 00 00 00       	mov    ebx,0x1
c000fa34:	e8 21 ff ff ff       	call   c000f95a <Phys::allocatePage()>
c000fa39:	89 da                	mov    edx,ebx
c000fa3b:	c1 e2 0c             	shl    edx,0xc
c000fa3e:	01 fa                	add    edx,edi
c000fa40:	39 c2                	cmp    edx,eax
c000fa42:	74 20                	je     c000fa64 <Phys::allocateContiguousPages(int)+0x55>
c000fa44:	bb 01 00 00 00       	mov    ebx,0x1
c000fa49:	89 c7                	mov    edi,eax
c000fa4b:	83 fe 01             	cmp    esi,0x1
c000fa4e:	75 e4                	jne    c000fa34 <Phys::allocateContiguousPages(int)+0x25>
c000fa50:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c000fa55:	48                   	dec    eax
c000fa56:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c000fa5b:	75 01                	jne    c000fa5e <Phys::allocateContiguousPages(int)+0x4f>
c000fa5d:	fb                   	sti    
c000fa5e:	89 f8                	mov    eax,edi
c000fa60:	5b                   	pop    ebx
c000fa61:	5e                   	pop    esi
c000fa62:	5f                   	pop    edi
c000fa63:	c3                   	ret    
c000fa64:	43                   	inc    ebx
c000fa65:	39 f3                	cmp    ebx,esi
c000fa67:	75 b6                	jne    c000fa1f <Phys::allocateContiguousPages(int)+0x10>
c000fa69:	eb e5                	jmp    c000fa50 <Phys::allocateContiguousPages(int)+0x41>

c000fa6b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fa6b:	56                   	push   esi
c000fa6c:	53                   	push   ebx
c000fa6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa71:	39 1d 88 ed 02 c0    	cmp    DWORD PTR ds:0xc002ed88,ebx
c000fa77:	73 06                	jae    c000fa7f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fa79:	89 1d 88 ed 02 c0    	mov    DWORD PTR ds:0xc002ed88,ebx
c000fa7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa83:	c1 eb 0c             	shr    ebx,0xc
c000fa86:	c1 e8 0c             	shr    eax,0xc
c000fa89:	39 d8                	cmp    eax,ebx
c000fa8b:	73 13                	jae    c000faa0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fa8d:	6a 00                	push   0x0
c000fa8f:	8d 70 01             	lea    esi,[eax+0x1]
c000fa92:	50                   	push   eax
c000fa93:	e8 19 fe ff ff       	call   c000f8b1 <Phys::setPageState(unsigned long, bool)>
c000fa98:	5a                   	pop    edx
c000fa99:	89 f0                	mov    eax,esi
c000fa9b:	59                   	pop    ecx
c000fa9c:	39 f3                	cmp    ebx,esi
c000fa9e:	75 ed                	jne    c000fa8d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000faa0:	5b                   	pop    ebx
c000faa1:	5e                   	pop    esi
c000faa2:	c3                   	ret    

c000faa3 <Phys::physicalMemorySetup(unsigned int)>:
c000faa3:	55                   	push   ebp
c000faa4:	57                   	push   edi
c000faa5:	56                   	push   esi
c000faa6:	53                   	push   ebx
c000faa7:	31 db                	xor    ebx,ebx
c000faa9:	83 ec 40             	sub    esp,0x40
c000faac:	6a 30                	push   0x30
c000faae:	6a 00                	push   0x0
c000fab0:	68 a0 ed 02 c0       	push   0xc002eda0
c000fab5:	e8 96 0c ff ff       	call   c0000750 <memset>
c000faba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fabe:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fac3:	05 00 10 00 00       	add    eax,0x1000
c000fac8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000facc:	83 c4 10             	add    esp,0x10
c000facf:	83 ec 08             	sub    esp,0x8
c000fad2:	6a 01                	push   0x1
c000fad4:	53                   	push   ebx
c000fad5:	43                   	inc    ebx
c000fad6:	e8 d6 fd ff ff       	call   c000f8b1 <Phys::setPageState(unsigned long, bool)>
c000fadb:	83 c4 10             	add    esp,0x10
c000fade:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fae4:	75 e9                	jne    c000facf <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fae6:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000faed:	66 85 c0             	test   ax,ax
c000faf0:	0f 84 8e 01 00 00    	je     c000fc84 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000faf6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fafa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb02:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb06:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb0b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb0f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fb17:	eb 15                	jmp    c000fb2e <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fb19:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fb1d:	83 c3 18             	add    ebx,0x18
c000fb20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb24:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fb28:	0f 84 66 01 00 00    	je     c000fc94 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fb2e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fb31:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fb34:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fb37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fb3f:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fb41:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fb44:	01 f0                	add    eax,esi
c000fb46:	55                   	push   ebp
c000fb47:	11 fa                	adc    edx,edi
c000fb49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb4d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fb51:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fb55:	56                   	push   esi
c000fb56:	68 30 a9 02 c0       	push   0xc002a930
c000fb5b:	e8 4f 2a 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c000fb60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fb64:	83 c4 10             	add    esp,0x10
c000fb67:	09 f8                	or     eax,edi
c000fb69:	0f 85 25 01 00 00    	jne    c000fc94 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fb6f:	4d                   	dec    ebp
c000fb70:	75 a7                	jne    c000fb19 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fb72:	ba 00 00 08 00       	mov    edx,0x80000
c000fb77:	89 c1                	mov    ecx,eax
c000fb79:	39 f2                	cmp    edx,esi
c000fb7b:	19 f9                	sbb    ecx,edi
c000fb7d:	0f 82 a7 00 00 00    	jb     c000fc2a <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fb83:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fb87:	89 c1                	mov    ecx,eax
c000fb89:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fb8d:	0f 83 97 00 00 00    	jae    c000fc2a <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fb93:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fb98:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fb9c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fba0:	39 fa                	cmp    edx,edi
c000fba2:	19 e8                	sbb    eax,ebp
c000fba4:	0f 82 14 01 00 00    	jb     c000fcbe <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fbaa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fbae:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fbb2:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fbb8:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fbbd:	83 d5 ff             	adc    ebp,0xffffffff
c000fbc0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fbc4:	31 c0                	xor    eax,eax
c000fbc6:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fbca:	39 fa                	cmp    edx,edi
c000fbcc:	89 c1                	mov    ecx,eax
c000fbce:	19 e9                	sbb    ecx,ebp
c000fbd0:	0f 83 43 ff ff ff    	jae    c000fb19 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fbd6:	be 00 00 08 00       	mov    esi,0x80000
c000fbdb:	50                   	push   eax
c000fbdc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fbe0:	57                   	push   edi
c000fbe1:	56                   	push   esi
c000fbe2:	68 54 a9 02 c0       	push   0xc002a954
c000fbe7:	e8 c3 29 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c000fbec:	5a                   	pop    edx
c000fbed:	59                   	pop    ecx
c000fbee:	57                   	push   edi
c000fbef:	56                   	push   esi
c000fbf0:	e8 76 fe ff ff       	call   c000fa6b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fbf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fbf9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fbfd:	83 c4 0c             	add    esp,0xc
c000fc00:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc04:	03 05 94 ed 02 c0    	add    eax,DWORD PTR ds:0xc002ed94
c000fc0a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc11:	a3 94 ed 02 c0       	mov    ds:0xc002ed94,eax
c000fc16:	52                   	push   edx
c000fc17:	50                   	push   eax
c000fc18:	68 12 a9 02 c0       	push   0xc002a912
c000fc1d:	e8 8d 29 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c000fc22:	83 c4 10             	add    esp,0x10
c000fc25:	e9 ef fe ff ff       	jmp    c000fb19 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fc2a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fc2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fc32:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fc36:	39 ea                	cmp    edx,ebp
c000fc38:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fc3c:	0f 82 d7 fe ff ff    	jb     c000fb19 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fc42:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc47:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fc4b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fc4f:	0f 83 c4 fe ff ff    	jae    c000fb19 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fc55:	39 ee                	cmp    esi,ebp
c000fc57:	89 f8                	mov    eax,edi
c000fc59:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fc5d:	0f 83 78 ff ff ff    	jae    c000fbdb <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fc63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fc6b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fc6f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fc73:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fc77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc7f:	e9 57 ff ff ff       	jmp    c000fbdb <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fc84:	83 ec 0c             	sub    esp,0xc
c000fc87:	68 04 a9 02 c0       	push   0xc002a904
c000fc8c:	e8 ec a3 00 00       	call   c001a07d <Krnl::panic(char const*)>
c000fc91:	83 c4 10             	add    esp,0x10
c000fc94:	bb 40 01 00 00       	mov    ebx,0x140
c000fc99:	83 ec 08             	sub    esp,0x8
c000fc9c:	6a 00                	push   0x0
c000fc9e:	53                   	push   ebx
c000fc9f:	43                   	inc    ebx
c000fca0:	e8 0c fc ff ff       	call   c000f8b1 <Phys::setPageState(unsigned long, bool)>
c000fca5:	ff 05 94 ed 02 c0    	inc    DWORD PTR ds:0xc002ed94
c000fcab:	83 c4 10             	add    esp,0x10
c000fcae:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fcb4:	75 e3                	jne    c000fc99 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fcb6:	83 c4 3c             	add    esp,0x3c
c000fcb9:	5b                   	pop    ebx
c000fcba:	5e                   	pop    esi
c000fcbb:	5f                   	pop    edi
c000fcbc:	5d                   	pop    ebp
c000fcbd:	c3                   	ret    
c000fcbe:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fcc6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fcce:	e9 d7 fe ff ff       	jmp    c000fbaa <Phys::physicalMemorySetup(unsigned int)+0x107>
c000fcd3:	90                   	nop

c000fcd4 <Pipe::isAtty()>:
c000fcd4:	31 c0                	xor    eax,eax
c000fcd6:	c3                   	ret    
c000fcd7:	90                   	nop

c000fcd8 <Pipe::~Pipe()>:
c000fcd8:	83 ec 0c             	sub    esp,0xc
c000fcdb:	ba c0 a9 02 c0       	mov    edx,0xc002a9c0
c000fce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fce4:	89 10                	mov    DWORD PTR [eax],edx
c000fce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcea:	83 ec 0c             	sub    esp,0xc
c000fced:	50                   	push   eax
c000fcee:	e8 55 12 00 00       	call   c0010f48 <UnixFile::~UnixFile()>
c000fcf3:	83 c4 10             	add    esp,0x10
c000fcf6:	90                   	nop
c000fcf7:	83 c4 0c             	add    esp,0xc
c000fcfa:	c3                   	ret    
c000fcfb:	90                   	nop

c000fcfc <Pipe::~Pipe()>:
c000fcfc:	83 ec 0c             	sub    esp,0xc
c000fcff:	83 ec 0c             	sub    esp,0xc
c000fd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd06:	e8 cd ff ff ff       	call   c000fcd8 <Pipe::~Pipe()>
c000fd0b:	83 c4 10             	add    esp,0x10
c000fd0e:	83 ec 08             	sub    esp,0x8
c000fd11:	6a 20                	push   0x20
c000fd13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd17:	e8 b3 27 00 00       	call   c00124cf <operator delete(void*, unsigned long)>
c000fd1c:	83 c4 10             	add    esp,0x10
c000fd1f:	83 c4 0c             	add    esp,0xc
c000fd22:	c3                   	ret    
c000fd23:	90                   	nop

c000fd24 <Pipe::read(unsigned long long, void*, int*)>:
c000fd24:	55                   	push   ebp
c000fd25:	57                   	push   edi
c000fd26:	56                   	push   esi
c000fd27:	53                   	push   ebx
c000fd28:	83 ec 1c             	sub    esp,0x1c
c000fd2b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fd2f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fd33:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fd37:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fd3a:	89 c8                	mov    eax,ecx
c000fd3c:	99                   	cdq    
c000fd3d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fd41:	74 24                	je     c000fd67 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd43:	39 f9                	cmp    ecx,edi
c000fd45:	89 d1                	mov    ecx,edx
c000fd47:	19 f1                	sbb    ecx,esi
c000fd49:	73 1c                	jae    c000fd67 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd4b:	fa                   	cli    
c000fd4c:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c000fd52:	e8 df e0 00 00       	call   c001de36 <schedule()>
c000fd57:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c000fd5c:	48                   	dec    eax
c000fd5d:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c000fd62:	75 d3                	jne    c000fd37 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd64:	fb                   	sti    
c000fd65:	eb d0                	jmp    c000fd37 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd67:	39 f8                	cmp    eax,edi
c000fd69:	89 d1                	mov    ecx,edx
c000fd6b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fd6e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fd72:	19 f1                	sbb    ecx,esi
c000fd74:	73 07                	jae    c000fd7d <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fd76:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd79:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fd7d:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fd80:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fd83:	29 f7                	sub    edi,esi
c000fd85:	89 f8                	mov    eax,edi
c000fd87:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fd8b:	99                   	cdq    
c000fd8c:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fd8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd93:	19 d0                	sbb    eax,edx
c000fd95:	73 07                	jae    c000fd9e <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fd97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fd9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd9e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fda1:	89 ea                	mov    edx,ebp
c000fda3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fda7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fdac:	74 0d                	je     c000fdbb <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fdae:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fdb1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fdb5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdbb:	85 d2                	test   edx,edx
c000fdbd:	74 11                	je     c000fdd0 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fdbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdc3:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fdc6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fdca:	89 d1                	mov    ecx,edx
c000fdcc:	89 c7                	mov    edi,eax
c000fdce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdd0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fdd3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fdd6:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fdd9:	99                   	cdq    
c000fdda:	89 f7                	mov    edi,esi
c000fddc:	03 04 24             	add    eax,DWORD PTR [esp]
c000fddf:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fde3:	c1 ff 1f             	sar    edi,0x1f
c000fde6:	57                   	push   edi
c000fde7:	56                   	push   esi
c000fde8:	52                   	push   edx
c000fde9:	50                   	push   eax
c000fdea:	e8 b5 72 01 00       	call   c00270a4 <__umoddi3>
c000fdef:	83 c4 10             	add    esp,0x10
c000fdf2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fdf5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fdfa:	75 10                	jne    c000fe0c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fdfc:	83 ec 0c             	sub    esp,0xc
c000fdff:	68 7d a9 02 c0       	push   0xc002a97d
c000fe04:	e8 74 a2 00 00       	call   c001a07d <Krnl::panic(char const*)>
c000fe09:	83 c4 10             	add    esp,0x10
c000fe0c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe10:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe13:	89 10                	mov    DWORD PTR [eax],edx
c000fe15:	83 c4 1c             	add    esp,0x1c
c000fe18:	31 c0                	xor    eax,eax
c000fe1a:	5b                   	pop    ebx
c000fe1b:	5e                   	pop    esi
c000fe1c:	5f                   	pop    edi
c000fe1d:	5d                   	pop    ebp
c000fe1e:	c3                   	ret    
c000fe1f:	90                   	nop

c000fe20 <Pipe::write(unsigned long long, void*, int*)>:
c000fe20:	55                   	push   ebp
c000fe21:	57                   	push   edi
c000fe22:	56                   	push   esi
c000fe23:	53                   	push   ebx
c000fe24:	83 ec 1c             	sub    esp,0x1c
c000fe27:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fe2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe2f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fe32:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fe36:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe39:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe3d:	89 d8                	mov    eax,ebx
c000fe3f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fe42:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fe46:	89 d6                	mov    esi,edx
c000fe48:	89 d7                	mov    edi,edx
c000fe4a:	c1 ff 1f             	sar    edi,0x1f
c000fe4d:	03 34 24             	add    esi,DWORD PTR [esp]
c000fe50:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fe54:	c1 f8 1f             	sar    eax,0x1f
c000fe57:	39 f3                	cmp    ebx,esi
c000fe59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe61:	19 f8                	sbb    eax,edi
c000fe63:	b8 01 00 00 00       	mov    eax,0x1
c000fe68:	72 6e                	jb     c000fed8 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fe6a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fe6d:	01 d0                	add    eax,edx
c000fe6f:	99                   	cdq    
c000fe70:	f7 fb                	idiv   ebx
c000fe72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe76:	29 d3                	sub    ebx,edx
c000fe78:	89 d7                	mov    edi,edx
c000fe7a:	89 de                	mov    esi,ebx
c000fe7c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe7f:	c1 fb 1f             	sar    ebx,0x1f
c000fe82:	39 f2                	cmp    edx,esi
c000fe84:	19 d8                	sbb    eax,ebx
c000fe86:	b8 00 00 00 00       	mov    eax,0x0
c000fe8b:	72 04                	jb     c000fe91 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000fe8d:	89 d0                	mov    eax,edx
c000fe8f:	29 f0                	sub    eax,esi
c000fe91:	89 d3                	mov    ebx,edx
c000fe93:	29 c3                	sub    ebx,eax
c000fe95:	74 0b                	je     c000fea2 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000fe97:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fe9a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000fe9e:	89 d9                	mov    ecx,ebx
c000fea0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fea2:	85 c0                	test   eax,eax
c000fea4:	74 0d                	je     c000feb3 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000fea6:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000feaa:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000fead:	89 de                	mov    esi,ebx
c000feaf:	89 c1                	mov    ecx,eax
c000feb1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000feb3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000feb6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000febb:	75 10                	jne    c000fecd <Pipe::write(unsigned long long, void*, int*)+0xad>
c000febd:	83 ec 0c             	sub    esp,0xc
c000fec0:	68 99 a9 02 c0       	push   0xc002a999
c000fec5:	e8 b3 a1 00 00       	call   c001a07d <Krnl::panic(char const*)>
c000feca:	83 c4 10             	add    esp,0x10
c000fecd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fed1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000fed4:	89 08                	mov    DWORD PTR [eax],ecx
c000fed6:	31 c0                	xor    eax,eax
c000fed8:	83 c4 1c             	add    esp,0x1c
c000fedb:	5b                   	pop    ebx
c000fedc:	5e                   	pop    esi
c000fedd:	5f                   	pop    edi
c000fede:	5d                   	pop    ebp
c000fedf:	c3                   	ret    

c000fee0 <Pipe::Pipe(int)>:
c000fee0:	83 ec 0c             	sub    esp,0xc
c000fee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee7:	83 ec 08             	sub    esp,0x8
c000feea:	6a 00                	push   0x0
c000feec:	50                   	push   eax
c000feed:	e8 74 0e 00 00       	call   c0010d66 <UnixFile::UnixFile(int)>
c000fef2:	83 c4 10             	add    esp,0x10
c000fef5:	ba c0 a9 02 c0       	mov    edx,0xc002a9c0
c000fefa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fefe:	89 10                	mov    DWORD PTR [eax],edx
c000ff00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff08:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff0f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff1a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff25:	83 ec 0c             	sub    esp,0xc
c000ff28:	50                   	push   eax
c000ff29:	e8 88 f6 ff ff       	call   c000f5b6 <malloc>
c000ff2e:	83 c4 10             	add    esp,0x10
c000ff31:	89 c2                	mov    edx,eax
c000ff33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff37:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ff3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff3e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ff42:	90                   	nop
c000ff43:	83 c4 0c             	add    esp,0xc
c000ff46:	c3                   	ret    
c000ff47:	90                   	nop

c000ff48 <VgaText::isAtty()>:
c000ff48:	b0 01                	mov    al,0x1
c000ff4a:	c3                   	ret    
c000ff4b:	90                   	nop

c000ff4c <VgaText::~VgaText()>:
c000ff4c:	83 ec 0c             	sub    esp,0xc
c000ff4f:	ba 48 aa 02 c0       	mov    edx,0xc002aa48
c000ff54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff58:	89 10                	mov    DWORD PTR [eax],edx
c000ff5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff5e:	83 ec 0c             	sub    esp,0xc
c000ff61:	50                   	push   eax
c000ff62:	e8 e1 0f 00 00       	call   c0010f48 <UnixFile::~UnixFile()>
c000ff67:	83 c4 10             	add    esp,0x10
c000ff6a:	90                   	nop
c000ff6b:	83 c4 0c             	add    esp,0xc
c000ff6e:	c3                   	ret    
c000ff6f:	90                   	nop

c000ff70 <VgaText::~VgaText()>:
c000ff70:	83 ec 0c             	sub    esp,0xc
c000ff73:	83 ec 0c             	sub    esp,0xc
c000ff76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff7a:	e8 cd ff ff ff       	call   c000ff4c <VgaText::~VgaText()>
c000ff7f:	83 c4 10             	add    esp,0x10
c000ff82:	83 ec 08             	sub    esp,0x8
c000ff85:	68 c4 02 00 00       	push   0x2c4
c000ff8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff8e:	e8 3c 25 00 00       	call   c00124cf <operator delete(void*, unsigned long)>
c000ff93:	83 c4 10             	add    esp,0x10
c000ff96:	83 c4 0c             	add    esp,0xc
c000ff99:	c3                   	ret    

c000ff9a <VgaText::read(unsigned long long, void*, int*)>:
c000ff9a:	83 ec 10             	sub    esp,0x10
c000ff9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffa1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ffa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffa9:	e8 b6 5a 00 00       	call   c0015a64 <readKeyboard(VgaText*, char*, unsigned long)>
c000ffae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ffb2:	89 02                	mov    DWORD PTR [edx],eax
c000ffb4:	31 c0                	xor    eax,eax
c000ffb6:	83 c4 1c             	add    esp,0x1c
c000ffb9:	c3                   	ret    

c000ffba <setTerminalScrollLock(bool)>:
c000ffba:	c3                   	ret    

c000ffbb <addToTerminalCycle(VgaText*)>:
c000ffbb:	8b 15 00 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee00
c000ffc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffc5:	85 d2                	test   edx,edx
c000ffc7:	75 09                	jne    c000ffd2 <addToTerminalCycle(VgaText*)+0x17>
c000ffc9:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000ffcc:	a3 00 ee 02 c0       	mov    ds:0xc002ee00,eax
c000ffd1:	c3                   	ret    
c000ffd2:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000ffd5:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000ffd8:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000ffdb:	c3                   	ret    

c000ffdc <installVgaTextImplementation()>:
c000ffdc:	83 ec 10             	sub    esp,0x10
c000ffdf:	6a 20                	push   0x20
c000ffe1:	6a 00                	push   0x0
c000ffe3:	68 e0 ed 02 c0       	push   0xc002ede0
c000ffe8:	e8 63 07 ff ff       	call   c0000750 <memset>
c000ffed:	83 c4 1c             	add    esp,0x1c
c000fff0:	c3                   	ret    

c000fff1 <scrollTerminalScrollLock(int)>:
c000fff1:	c3                   	ret    

c000fff2 <VgaText::updateTitle()>:
c000fff2:	53                   	push   ebx
c000fff3:	31 c0                	xor    eax,eax
c000fff5:	83 ec 58             	sub    esp,0x58
c000fff8:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000fffc:	89 e1                	mov    ecx,esp
c000fffe:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010002:	40                   	inc    eax
c0010003:	83 f8 50             	cmp    eax,0x50
c0010006:	75 f6                	jne    c000fffe <VgaText::updateTitle()+0xc>
c0010008:	31 c0                	xor    eax,eax
c001000a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010011:	84 db                	test   bl,bl
c0010013:	74 06                	je     c001001b <VgaText::updateTitle()+0x29>
c0010015:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010018:	40                   	inc    eax
c0010019:	eb ef                	jmp    c001000a <VgaText::updateTitle()+0x18>
c001001b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c001001e:	85 c0                	test   eax,eax
c0010020:	74 09                	je     c001002b <VgaText::updateTitle()+0x39>
c0010022:	53                   	push   ebx
c0010023:	53                   	push   ebx
c0010024:	51                   	push   ecx
c0010025:	52                   	push   edx
c0010026:	ff d0                	call   eax
c0010028:	83 c4 10             	add    esp,0x10
c001002b:	83 c4 58             	add    esp,0x58
c001002e:	5b                   	pop    ebx
c001002f:	c3                   	ret    

c0010030 <VgaText::load()>:
c0010030:	53                   	push   ebx
c0010031:	31 c0                	xor    eax,eax
c0010033:	83 ec 58             	sub    esp,0x58
c0010036:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001003a:	89 e2                	mov    edx,esp
c001003c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010040:	40                   	inc    eax
c0010041:	83 f8 50             	cmp    eax,0x50
c0010044:	75 f6                	jne    c001003c <VgaText::load()+0xc>
c0010046:	31 c0                	xor    eax,eax
c0010048:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001004f:	84 c9                	test   cl,cl
c0010051:	74 06                	je     c0010059 <VgaText::load()+0x29>
c0010053:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010056:	40                   	inc    eax
c0010057:	eb ef                	jmp    c0010048 <VgaText::load()+0x18>
c0010059:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c001005c:	85 c0                	test   eax,eax
c001005e:	74 09                	je     c0010069 <VgaText::load()+0x39>
c0010060:	51                   	push   ecx
c0010061:	51                   	push   ecx
c0010062:	52                   	push   edx
c0010063:	53                   	push   ebx
c0010064:	ff d0                	call   eax
c0010066:	83 c4 10             	add    esp,0x10
c0010069:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c001006c:	85 c0                	test   eax,eax
c001006e:	74 09                	je     c0010079 <VgaText::load()+0x49>
c0010070:	83 ec 0c             	sub    esp,0xc
c0010073:	53                   	push   ebx
c0010074:	ff d0                	call   eax
c0010076:	83 c4 10             	add    esp,0x10
c0010079:	83 c4 58             	add    esp,0x58
c001007c:	5b                   	pop    ebx
c001007d:	c3                   	ret    

c001007e <VgaText::updateCursor()>:
c001007e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010082:	39 05 04 ee 02 c0    	cmp    DWORD PTR ds:0xc002ee04,eax
c0010088:	75 09                	jne    c0010093 <VgaText::updateCursor()+0x15>
c001008a:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c001008d:	85 c0                	test   eax,eax
c001008f:	74 02                	je     c0010093 <VgaText::updateCursor()+0x15>
c0010091:	ff e0                	jmp    eax
c0010093:	c3                   	ret    

c0010094 <VgaText::doANSI_SGR(int)>:
c0010094:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001009c:	85 d2                	test   edx,edx
c001009e:	75 0b                	jne    c00100ab <VgaText::doANSI_SGR(int)+0x17>
c00100a0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00100a3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00100a6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00100a9:	eb 59                	jmp    c0010104 <VgaText::doANSI_SGR(int)+0x70>
c00100ab:	83 fa 07             	cmp    edx,0x7
c00100ae:	75 0b                	jne    c00100bb <VgaText::doANSI_SGR(int)+0x27>
c00100b0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00100b3:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00100b6:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00100b9:	eb 49                	jmp    c0010104 <VgaText::doANSI_SGR(int)+0x70>
c00100bb:	83 fa 1b             	cmp    edx,0x1b
c00100be:	74 e0                	je     c00100a0 <VgaText::doANSI_SGR(int)+0xc>
c00100c0:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00100c3:	83 f9 07             	cmp    ecx,0x7
c00100c6:	77 09                	ja     c00100d1 <VgaText::doANSI_SGR(int)+0x3d>
c00100c8:	8b 14 8d a0 dc 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2360]
c00100cf:	eb 20                	jmp    c00100f1 <VgaText::doANSI_SGR(int)+0x5d>
c00100d1:	8d 4a d8             	lea    ecx,[edx-0x28]
c00100d4:	83 f9 07             	cmp    ecx,0x7
c00100d7:	77 09                	ja     c00100e2 <VgaText::doANSI_SGR(int)+0x4e>
c00100d9:	8b 14 8d a0 dc 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2360]
c00100e0:	eb 22                	jmp    c0010104 <VgaText::doANSI_SGR(int)+0x70>
c00100e2:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00100e5:	83 f9 07             	cmp    ecx,0x7
c00100e8:	77 0b                	ja     c00100f5 <VgaText::doANSI_SGR(int)+0x61>
c00100ea:	8b 14 95 58 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd24a8]
c00100f1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00100f4:	c3                   	ret    
c00100f5:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00100f8:	83 f9 07             	cmp    ecx,0x7
c00100fb:	77 0a                	ja     c0010107 <VgaText::doANSI_SGR(int)+0x73>
c00100fd:	8b 14 95 30 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd24d0]
c0010104:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010107:	c3                   	ret    

c0010108 <VgaText::setDefaultBgColour(VgaColour)>:
c0010108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010110:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010113:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010116:	c3                   	ret    
c0010117:	90                   	nop

c0010118 <VgaText::setDefaultFgColour(VgaColour)>:
c0010118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001011c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010120:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010123:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010126:	c3                   	ret    
c0010127:	90                   	nop

c0010128 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010128:	53                   	push   ebx
c0010129:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001012d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010131:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010135:	51                   	push   ecx
c0010136:	e8 cd ff ff ff       	call   c0010108 <VgaText::setDefaultBgColour(VgaColour)>
c001013b:	58                   	pop    eax
c001013c:	5a                   	pop    edx
c001013d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010141:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010145:	5b                   	pop    ebx
c0010146:	eb d0                	jmp    c0010118 <VgaText::setDefaultFgColour(VgaColour)>

c0010148 <VgaText::setTitleTextColour(VgaColour)>:
c0010148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001014c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010150:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010153:	e9 9a fe ff ff       	jmp    c000fff2 <VgaText::updateTitle()>

c0010158 <VgaText::setTitleColour(VgaColour)>:
c0010158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001015c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010160:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010163:	e9 8a fe ff ff       	jmp    c000fff2 <VgaText::updateTitle()>

c0010168 <VgaText::setTitle(char*)>:
c0010168:	53                   	push   ebx
c0010169:	83 ec 10             	sub    esp,0x10
c001016c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010174:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c001017a:	50                   	push   eax
c001017b:	e8 8c 06 ff ff       	call   c000080c <strcpy>
c0010180:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010184:	83 c4 18             	add    esp,0x18
c0010187:	5b                   	pop    ebx
c0010188:	e9 65 fe ff ff       	jmp    c000fff2 <VgaText::updateTitle()>
c001018d:	90                   	nop

c001018e <VgaText::combineColours(unsigned char, unsigned char)>:
c001018e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010192:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010197:	83 e0 0f             	and    eax,0xf
c001019a:	c1 e2 04             	shl    edx,0x4
c001019d:	09 d0                	or     eax,edx
c001019f:	c3                   	ret    

c00101a0 <VgaText::scrollScreen()>:
c00101a0:	55                   	push   ebp
c00101a1:	b9 01 00 00 00       	mov    ecx,0x1
c00101a6:	57                   	push   edi
c00101a7:	56                   	push   esi
c00101a8:	53                   	push   ebx
c00101a9:	83 ec 0c             	sub    esp,0xc
c00101ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101b0:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00101b6:	31 ff                	xor    edi,edi
c00101b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00101bb:	83 f9 17             	cmp    ecx,0x17
c00101be:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00101c1:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00101c8:	75 27                	jne    c00101f1 <VgaText::scrollScreen()+0x51>
c00101ca:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00101cd:	01 f5                	add    ebp,esi
c00101cf:	f7 c7 01 00 00 00    	test   edi,0x1
c00101d5:	74 16                	je     c00101ed <VgaText::scrollScreen()+0x4d>
c00101d7:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00101db:	50                   	push   eax
c00101dc:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00101e0:	50                   	push   eax
c00101e1:	e8 a8 ff ff ff       	call   c001018e <VgaText::combineColours(unsigned char, unsigned char)>
c00101e6:	5a                   	pop    edx
c00101e7:	5a                   	pop    edx
c00101e8:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00101eb:	eb 04                	jmp    c00101f1 <VgaText::scrollScreen()+0x51>
c00101ed:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00101f1:	47                   	inc    edi
c00101f2:	46                   	inc    esi
c00101f3:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00101f9:	75 bd                	jne    c00101b8 <VgaText::scrollScreen()+0x18>
c00101fb:	41                   	inc    ecx
c00101fc:	83 f9 18             	cmp    ecx,0x18
c00101ff:	75 af                	jne    c00101b0 <VgaText::scrollScreen()+0x10>
c0010201:	39 1d 04 ee 02 c0    	cmp    DWORD PTR ds:0xc002ee04,ebx
c0010207:	75 1b                	jne    c0010224 <VgaText::scrollScreen()+0x84>
c0010209:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001020d:	74 05                	je     c0010214 <VgaText::scrollScreen()+0x74>
c001020f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010212:	eb 10                	jmp    c0010224 <VgaText::scrollScreen()+0x84>
c0010214:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010217:	85 c0                	test   eax,eax
c0010219:	74 09                	je     c0010224 <VgaText::scrollScreen()+0x84>
c001021b:	83 ec 0c             	sub    esp,0xc
c001021e:	53                   	push   ebx
c001021f:	ff d0                	call   eax
c0010221:	83 c4 10             	add    esp,0x10
c0010224:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010228:	83 c4 0c             	add    esp,0xc
c001022b:	5b                   	pop    ebx
c001022c:	5e                   	pop    esi
c001022d:	5f                   	pop    edi
c001022e:	5d                   	pop    ebp
c001022f:	e9 4a fe ff ff       	jmp    c001007e <VgaText::updateCursor()>

c0010234 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010234:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010239:	c1 e0 08             	shl    eax,0x8
c001023c:	89 c2                	mov    edx,eax
c001023e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010243:	09 d0                	or     eax,edx
c0010245:	c3                   	ret    

c0010246 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010246:	56                   	push   esi
c0010247:	53                   	push   ebx
c0010248:	51                   	push   ecx
c0010249:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001024d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010252:	50                   	push   eax
c0010253:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010258:	50                   	push   eax
c0010259:	e8 30 ff ff ff       	call   c001018e <VgaText::combineColours(unsigned char, unsigned char)>
c001025e:	5b                   	pop    ebx
c001025f:	0f b6 c0             	movzx  eax,al
c0010262:	5e                   	pop    esi
c0010263:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010268:	50                   	push   eax
c0010269:	53                   	push   ebx
c001026a:	e8 c5 ff ff ff       	call   c0010234 <VgaText::combineCharAndColour(char, unsigned char)>
c001026f:	5a                   	pop    edx
c0010270:	5e                   	pop    esi
c0010271:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010274:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001027a:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001027e:	0f b7 d2             	movzx  edx,dx
c0010281:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010285:	39 0d 04 ee 02 c0    	cmp    DWORD PTR ds:0xc002ee04,ecx
c001028b:	75 10                	jne    c001029d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001028d:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010290:	85 c0                	test   eax,eax
c0010292:	74 09                	je     c001029d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010294:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010298:	5a                   	pop    edx
c0010299:	5b                   	pop    ebx
c001029a:	5e                   	pop    esi
c001029b:	ff e0                	jmp    eax
c001029d:	58                   	pop    eax
c001029e:	5b                   	pop    ebx
c001029f:	5e                   	pop    esi
c00102a0:	c3                   	ret    
c00102a1:	90                   	nop

c00102a2 <VgaText::getCursorX()>:
c00102a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102a6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00102a9:	c3                   	ret    

c00102aa <VgaText::getCursorY()>:
c00102aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00102b1:	c3                   	ret    

c00102b2 <VgaText::setCursor(int, int)>:
c00102b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102ba:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00102bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102c1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00102c4:	e9 b5 fd ff ff       	jmp    c001007e <VgaText::updateCursor()>

c00102c9 <setActiveTerminal(VgaText*)>:
c00102c9:	53                   	push   ebx
c00102ca:	83 ec 08             	sub    esp,0x8
c00102cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102d1:	85 db                	test   ebx,ebx
c00102d3:	75 11                	jne    c00102e6 <setActiveTerminal(VgaText*)+0x1d>
c00102d5:	c7 44 24 10 d4 a9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a9d4
c00102dd:	83 c4 08             	add    esp,0x8
c00102e0:	5b                   	pop    ebx
c00102e1:	e9 97 9d 00 00       	jmp    c001a07d <Krnl::panic(char const*)>
c00102e6:	a1 04 ee 02 c0       	mov    eax,ds:0xc002ee04
c00102eb:	85 c0                	test   eax,eax
c00102ed:	74 0c                	je     c00102fb <setActiveTerminal(VgaText*)+0x32>
c00102ef:	83 ec 0c             	sub    esp,0xc
c00102f2:	50                   	push   eax
c00102f3:	e8 86 fd ff ff       	call   c001007e <VgaText::updateCursor()>
c00102f8:	83 c4 10             	add    esp,0x10
c00102fb:	89 1d 04 ee 02 c0    	mov    DWORD PTR ds:0xc002ee04,ebx
c0010301:	51                   	push   ecx
c0010302:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010305:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010308:	53                   	push   ebx
c0010309:	e8 a4 ff ff ff       	call   c00102b2 <VgaText::setCursor(int, int)>
c001030e:	83 c4 10             	add    esp,0x10
c0010311:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010315:	75 07                	jne    c001031e <setActiveTerminal(VgaText*)+0x55>
c0010317:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c001031e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010322:	83 c4 08             	add    esp,0x8
c0010325:	5b                   	pop    ebx
c0010326:	e9 05 fd ff ff       	jmp    c0010030 <VgaText::load()>

c001032b <doTerminalCycle()>:
c001032b:	83 ec 18             	sub    esp,0x18
c001032e:	a1 00 ee 02 c0       	mov    eax,ds:0xc002ee00
c0010333:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010336:	50                   	push   eax
c0010337:	a3 00 ee 02 c0       	mov    ds:0xc002ee00,eax
c001033c:	e8 88 ff ff ff       	call   c00102c9 <setActiveTerminal(VgaText*)>
c0010341:	83 c4 1c             	add    esp,0x1c
c0010344:	c3                   	ret    
c0010345:	90                   	nop

c0010346 <VgaText::setCursorX(int)>:
c0010346:	83 ec 10             	sub    esp,0x10
c0010349:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001034d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010354:	50                   	push   eax
c0010355:	e8 58 ff ff ff       	call   c00102b2 <VgaText::setCursor(int, int)>
c001035a:	83 c4 1c             	add    esp,0x1c
c001035d:	c3                   	ret    

c001035e <VgaText::setCursorY(int)>:
c001035e:	83 ec 10             	sub    esp,0x10
c0010361:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010365:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010369:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001036c:	50                   	push   eax
c001036d:	e8 40 ff ff ff       	call   c00102b2 <VgaText::setCursor(int, int)>
c0010372:	83 c4 1c             	add    esp,0x1c
c0010375:	c3                   	ret    

c0010376 <VgaText::incrementCursor(bool)>:
c0010376:	56                   	push   esi
c0010377:	53                   	push   ebx
c0010378:	51                   	push   ecx
c0010379:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001037d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010381:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010384:	40                   	inc    eax
c0010385:	83 f8 50             	cmp    eax,0x50
c0010388:	74 05                	je     c001038f <VgaText::incrementCursor(bool)+0x19>
c001038a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001038d:	eb 24                	jmp    c00103b3 <VgaText::incrementCursor(bool)+0x3d>
c001038f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010392:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010399:	8d 50 01             	lea    edx,[eax+0x1]
c001039c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001039f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00103a2:	75 0f                	jne    c00103b3 <VgaText::incrementCursor(bool)+0x3d>
c00103a4:	83 ec 0c             	sub    esp,0xc
c00103a7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00103aa:	53                   	push   ebx
c00103ab:	e8 f0 fd ff ff       	call   c00101a0 <VgaText::scrollScreen()>
c00103b0:	83 c4 10             	add    esp,0x10
c00103b3:	89 f0                	mov    eax,esi
c00103b5:	84 c0                	test   al,al
c00103b7:	74 0c                	je     c00103c5 <VgaText::incrementCursor(bool)+0x4f>
c00103b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103bd:	5a                   	pop    edx
c00103be:	5b                   	pop    ebx
c00103bf:	5e                   	pop    esi
c00103c0:	e9 b9 fc ff ff       	jmp    c001007e <VgaText::updateCursor()>
c00103c5:	58                   	pop    eax
c00103c6:	5b                   	pop    ebx
c00103c7:	5e                   	pop    esi
c00103c8:	c3                   	ret    
c00103c9:	90                   	nop

c00103ca <VgaText::decrementCursor(bool)>:
c00103ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00103ce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103d2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00103d5:	85 c0                	test   eax,eax
c00103d7:	74 04                	je     c00103dd <VgaText::decrementCursor(bool)+0x13>
c00103d9:	48                   	dec    eax
c00103da:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00103dd:	84 c9                	test   cl,cl
c00103df:	74 09                	je     c00103ea <VgaText::decrementCursor(bool)+0x20>
c00103e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103e5:	e9 94 fc ff ff       	jmp    c001007e <VgaText::updateCursor()>
c00103ea:	c3                   	ret    
c00103eb:	90                   	nop

c00103ec <VgaText::putchar(char, VgaColour, VgaColour)>:
c00103ec:	53                   	push   ebx
c00103ed:	83 ec 08             	sub    esp,0x8
c00103f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00103fc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010400:	3c 07                	cmp    al,0x7
c0010402:	75 2a                	jne    c001042e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010404:	a1 b8 ee 02 c0       	mov    eax,ds:0xc002eeb8
c0010409:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010411:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010419:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010421:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010425:	83 c4 08             	add    esp,0x8
c0010428:	5b                   	pop    ebx
c0010429:	e9 8e 2f 00 00       	jmp    c00133bc <Buzzer::beep(int, int, bool)>
c001042e:	3c 0d                	cmp    al,0xd
c0010430:	75 09                	jne    c001043b <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010432:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010439:	eb 2c                	jmp    c0010467 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c001043b:	3c 0a                	cmp    al,0xa
c001043d:	75 31                	jne    c0010470 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c001043f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010442:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010449:	8d 50 01             	lea    edx,[eax+0x1]
c001044c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001044f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010452:	75 0f                	jne    c0010463 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010454:	83 ec 0c             	sub    esp,0xc
c0010457:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001045a:	53                   	push   ebx
c001045b:	e8 40 fd ff ff       	call   c00101a0 <VgaText::scrollScreen()>
c0010460:	83 c4 10             	add    esp,0x10
c0010463:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010467:	83 c4 08             	add    esp,0x8
c001046a:	5b                   	pop    ebx
c001046b:	e9 0e fc ff ff       	jmp    c001007e <VgaText::updateCursor()>
c0010470:	3c 08                	cmp    al,0x8
c0010472:	75 25                	jne    c0010499 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010474:	50                   	push   eax
c0010475:	50                   	push   eax
c0010476:	6a 01                	push   0x1
c0010478:	53                   	push   ebx
c0010479:	e8 4c ff ff ff       	call   c00103ca <VgaText::decrementCursor(bool)>
c001047e:	5a                   	pop    edx
c001047f:	59                   	pop    ecx
c0010480:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010483:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010486:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010489:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001048c:	6a 20                	push   0x20
c001048e:	53                   	push   ebx
c001048f:	e8 b2 fd ff ff       	call   c0010246 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010494:	83 c4 28             	add    esp,0x28
c0010497:	5b                   	pop    ebx
c0010498:	c3                   	ret    
c0010499:	83 ec 08             	sub    esp,0x8
c001049c:	0f be c0             	movsx  eax,al
c001049f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104a5:	51                   	push   ecx
c00104a6:	52                   	push   edx
c00104a7:	50                   	push   eax
c00104a8:	53                   	push   ebx
c00104a9:	e8 98 fd ff ff       	call   c0010246 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104ae:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00104b2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00104ba:	83 c4 28             	add    esp,0x28
c00104bd:	5b                   	pop    ebx
c00104be:	e9 b3 fe ff ff       	jmp    c0010376 <VgaText::incrementCursor(bool)>
c00104c3:	90                   	nop

c00104c4 <VgaText::doUpdate()>:
c00104c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104c8:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00104cb:	85 c0                	test   eax,eax
c00104cd:	74 02                	je     c00104d1 <VgaText::doUpdate()+0xd>
c00104cf:	ff e0                	jmp    eax
c00104d1:	c3                   	ret    

c00104d2 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00104d2:	55                   	push   ebp
c00104d3:	31 ed                	xor    ebp,ebp
c00104d5:	57                   	push   edi
c00104d6:	56                   	push   esi
c00104d7:	53                   	push   ebx
c00104d8:	83 ec 1c             	sub    esp,0x1c
c00104db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00104df:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00104e4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00104eb:	50                   	push   eax
c00104ec:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00104f1:	50                   	push   eax
c00104f2:	e8 97 fc ff ff       	call   c001018e <VgaText::combineColours(unsigned char, unsigned char)>
c00104f7:	59                   	pop    ecx
c00104f8:	0f b6 c0             	movzx  eax,al
c00104fb:	5e                   	pop    esi
c00104fc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010501:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010505:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010508:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001050c:	0f b7 f6             	movzx  esi,si
c001050f:	01 f6                	add    esi,esi
c0010511:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010514:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010517:	84 c0                	test   al,al
c0010519:	0f 84 fd 00 00 00    	je     c001061c <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c001051f:	3c 0d                	cmp    al,0xd
c0010521:	75 0c                	jne    c001052f <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010523:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001052a:	e9 e7 00 00 00       	jmp    c0010616 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001052f:	3c 0a                	cmp    al,0xa
c0010531:	75 47                	jne    c001057a <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010533:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010536:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001053d:	8d 48 01             	lea    ecx,[eax+0x1]
c0010540:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010543:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010546:	75 0f                	jne    c0010557 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010548:	83 ec 0c             	sub    esp,0xc
c001054b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001054e:	53                   	push   ebx
c001054f:	e8 4c fc ff ff       	call   c00101a0 <VgaText::scrollScreen()>
c0010554:	83 c4 10             	add    esp,0x10
c0010557:	83 ec 0c             	sub    esp,0xc
c001055a:	31 ed                	xor    ebp,ebp
c001055c:	53                   	push   ebx
c001055d:	e8 1c fb ff ff       	call   c001007e <VgaText::updateCursor()>
c0010562:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010567:	83 c4 10             	add    esp,0x10
c001056a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001056d:	0f b7 f6             	movzx  esi,si
c0010570:	01 f6                	add    esi,esi
c0010572:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010575:	e9 9c 00 00 00       	jmp    c0010616 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001057a:	3c 08                	cmp    al,0x8
c001057c:	75 35                	jne    c00105b3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c001057e:	56                   	push   esi
c001057f:	56                   	push   esi
c0010580:	6a 01                	push   0x1
c0010582:	53                   	push   ebx
c0010583:	e8 42 fe ff ff       	call   c00103ca <VgaText::decrementCursor(bool)>
c0010588:	58                   	pop    eax
c0010589:	5a                   	pop    edx
c001058a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001058d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010590:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010593:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010596:	6a 20                	push   0x20
c0010598:	53                   	push   ebx
c0010599:	e8 a8 fc ff ff       	call   c0010246 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001059e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105a3:	83 c4 20             	add    esp,0x20
c00105a6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105a9:	0f b7 f6             	movzx  esi,si
c00105ac:	01 f6                	add    esi,esi
c00105ae:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105b1:	eb 63                	jmp    c0010616 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105b3:	51                   	push   ecx
c00105b4:	51                   	push   ecx
c00105b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00105b9:	50                   	push   eax
c00105ba:	e8 75 fc ff ff       	call   c0010234 <VgaText::combineCharAndColour(char, unsigned char)>
c00105bf:	83 c4 10             	add    esp,0x10
c00105c2:	66 89 06             	mov    WORD PTR [esi],ax
c00105c5:	39 1d 04 ee 02 c0    	cmp    DWORD PTR ds:0xc002ee04,ebx
c00105cb:	75 21                	jne    c00105ee <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00105cd:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c00105d0:	85 c0                	test   eax,eax
c00105d2:	74 1a                	je     c00105ee <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00105d4:	52                   	push   edx
c00105d5:	52                   	push   edx
c00105d6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00105d9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00105dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00105e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00105e4:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c00105e7:	51                   	push   ecx
c00105e8:	53                   	push   ebx
c00105e9:	ff d0                	call   eax
c00105eb:	83 c4 20             	add    esp,0x20
c00105ee:	83 c6 02             	add    esi,0x2
c00105f1:	50                   	push   eax
c00105f2:	50                   	push   eax
c00105f3:	6a 00                	push   0x0
c00105f5:	53                   	push   ebx
c00105f6:	e8 7b fd ff ff       	call   c0010376 <VgaText::incrementCursor(bool)>
c00105fb:	83 c4 10             	add    esp,0x10
c00105fe:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010602:	75 0d                	jne    c0010611 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010604:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010609:	0f b7 f6             	movzx  esi,si
c001060c:	01 f6                	add    esi,esi
c001060e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010611:	bd 01 00 00 00       	mov    ebp,0x1
c0010616:	47                   	inc    edi
c0010617:	e9 f8 fe ff ff       	jmp    c0010514 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c001061c:	83 ec 0c             	sub    esp,0xc
c001061f:	53                   	push   ebx
c0010620:	e8 59 fa ff ff       	call   c001007e <VgaText::updateCursor()>
c0010625:	83 c4 10             	add    esp,0x10
c0010628:	89 e8                	mov    eax,ebp
c001062a:	84 c0                	test   al,al
c001062c:	74 0c                	je     c001063a <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c001062e:	83 ec 0c             	sub    esp,0xc
c0010631:	53                   	push   ebx
c0010632:	e8 8d fe ff ff       	call   c00104c4 <VgaText::doUpdate()>
c0010637:	83 c4 10             	add    esp,0x10
c001063a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010641:	83 c4 1c             	add    esp,0x1c
c0010644:	5b                   	pop    ebx
c0010645:	5e                   	pop    esi
c0010646:	5f                   	pop    edi
c0010647:	5d                   	pop    ebp
c0010648:	c3                   	ret    
c0010649:	90                   	nop

c001064a <VgaText::clearScreen()>:
c001064a:	57                   	push   edi
c001064b:	56                   	push   esi
c001064c:	31 f6                	xor    esi,esi
c001064e:	53                   	push   ebx
c001064f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010653:	52                   	push   edx
c0010654:	6a 00                	push   0x0
c0010656:	6a 00                	push   0x0
c0010658:	53                   	push   ebx
c0010659:	e8 54 fc ff ff       	call   c00102b2 <VgaText::setCursor(int, int)>
c001065e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010665:	83 c4 10             	add    esp,0x10
c0010668:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001066b:	7e 20                	jle    c001068d <VgaText::clearScreen()+0x43>
c001066d:	31 ff                	xor    edi,edi
c001066f:	50                   	push   eax
c0010670:	50                   	push   eax
c0010671:	56                   	push   esi
c0010672:	57                   	push   edi
c0010673:	47                   	inc    edi
c0010674:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010677:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001067a:	6a 20                	push   0x20
c001067c:	53                   	push   ebx
c001067d:	e8 c4 fb ff ff       	call   c0010246 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010682:	83 c4 20             	add    esp,0x20
c0010685:	83 ff 50             	cmp    edi,0x50
c0010688:	75 e5                	jne    c001066f <VgaText::clearScreen()+0x25>
c001068a:	46                   	inc    esi
c001068b:	eb db                	jmp    c0010668 <VgaText::clearScreen()+0x1e>
c001068d:	83 ec 0c             	sub    esp,0xc
c0010690:	53                   	push   ebx
c0010691:	e8 2e fe ff ff       	call   c00104c4 <VgaText::doUpdate()>
c0010696:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001069d:	83 c4 10             	add    esp,0x10
c00106a0:	5b                   	pop    ebx
c00106a1:	5e                   	pop    esi
c00106a2:	5f                   	pop    edi
c00106a3:	c3                   	ret    

c00106a4 <VgaText::putchar(char)>:
c00106a4:	56                   	push   esi
c00106a5:	53                   	push   ebx
c00106a6:	83 ec 14             	sub    esp,0x14
c00106a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00106ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00106b1:	3c 5b                	cmp    al,0x5b
c00106b3:	75 18                	jne    c00106cd <VgaText::putchar(char)+0x29>
c00106b5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00106b9:	74 1f                	je     c00106da <VgaText::putchar(char)+0x36>
c00106bb:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00106c1:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00106c8:	e9 bd 00 00 00       	jmp    c001078a <VgaText::putchar(char)+0xe6>
c00106cd:	3c 1b                	cmp    al,0x1b
c00106cf:	75 09                	jne    c00106da <VgaText::putchar(char)+0x36>
c00106d1:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00106d5:	e9 b0 00 00 00       	jmp    c001078a <VgaText::putchar(char)+0xe6>
c00106da:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00106dd:	84 c9                	test   cl,cl
c00106df:	0f 84 92 00 00 00    	je     c0010777 <VgaText::putchar(char)+0xd3>
c00106e5:	8d 50 c0             	lea    edx,[eax-0x40]
c00106e8:	80 fa 3e             	cmp    dl,0x3e
c00106eb:	77 76                	ja     c0010763 <VgaText::putchar(char)+0xbf>
c00106ed:	3c 6d                	cmp    al,0x6d
c00106ef:	75 47                	jne    c0010738 <VgaText::putchar(char)+0x94>
c00106f1:	31 f6                	xor    esi,esi
c00106f3:	31 d2                	xor    edx,edx
c00106f5:	31 c0                	xor    eax,eax
c00106f7:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00106fa:	7e 2d                	jle    c0010729 <VgaText::putchar(char)+0x85>
c00106fc:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010701:	80 fa 3b             	cmp    dl,0x3b
c0010704:	75 17                	jne    c001071d <VgaText::putchar(char)+0x79>
c0010706:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001070a:	50                   	push   eax
c001070b:	53                   	push   ebx
c001070c:	e8 83 f9 ff ff       	call   c0010094 <VgaText::doANSI_SGR(int)>
c0010711:	59                   	pop    ecx
c0010712:	31 d2                	xor    edx,edx
c0010714:	58                   	pop    eax
c0010715:	31 c0                	xor    eax,eax
c0010717:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001071b:	eb 09                	jmp    c0010726 <VgaText::putchar(char)+0x82>
c001071d:	6b c0 0a             	imul   eax,eax,0xa
c0010720:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010724:	88 ca                	mov    dl,cl
c0010726:	46                   	inc    esi
c0010727:	eb ce                	jmp    c00106f7 <VgaText::putchar(char)+0x53>
c0010729:	84 d2                	test   dl,dl
c001072b:	74 2e                	je     c001075b <VgaText::putchar(char)+0xb7>
c001072d:	50                   	push   eax
c001072e:	53                   	push   ebx
c001072f:	e8 60 f9 ff ff       	call   c0010094 <VgaText::doANSI_SGR(int)>
c0010734:	58                   	pop    eax
c0010735:	5a                   	pop    edx
c0010736:	eb 23                	jmp    c001075b <VgaText::putchar(char)+0xb7>
c0010738:	3c 4a                	cmp    al,0x4a
c001073a:	75 1f                	jne    c001075b <VgaText::putchar(char)+0xb7>
c001073c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010740:	75 19                	jne    c001075b <VgaText::putchar(char)+0xb7>
c0010742:	83 ec 0c             	sub    esp,0xc
c0010745:	53                   	push   ebx
c0010746:	e8 ff fe ff ff       	call   c001064a <VgaText::clearScreen()>
c001074b:	83 c4 0c             	add    esp,0xc
c001074e:	6a 00                	push   0x0
c0010750:	6a 00                	push   0x0
c0010752:	53                   	push   ebx
c0010753:	e8 5a fb ff ff       	call   c00102b2 <VgaText::setCursor(int, int)>
c0010758:	83 c4 10             	add    esp,0x10
c001075b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010761:	eb 27                	jmp    c001078a <VgaText::putchar(char)+0xe6>
c0010763:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010766:	83 fa 0e             	cmp    edx,0xe
c0010769:	7f 1f                	jg     c001078a <VgaText::putchar(char)+0xe6>
c001076b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001076e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010771:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010775:	eb 13                	jmp    c001078a <VgaText::putchar(char)+0xe6>
c0010777:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001077a:	0f be c0             	movsx  eax,al
c001077d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010780:	50                   	push   eax
c0010781:	53                   	push   ebx
c0010782:	e8 65 fc ff ff       	call   c00103ec <VgaText::putchar(char, VgaColour, VgaColour)>
c0010787:	83 c4 10             	add    esp,0x10
c001078a:	83 c4 14             	add    esp,0x14
c001078d:	5b                   	pop    ebx
c001078e:	5e                   	pop    esi
c001078f:	c3                   	ret    

c0010790 <VgaText::putx(unsigned int)>:
c0010790:	57                   	push   edi
c0010791:	b9 11 00 00 00       	mov    ecx,0x11
c0010796:	56                   	push   esi
c0010797:	be e2 a9 02 c0       	mov    esi,0xc002a9e2
c001079c:	53                   	push   ebx
c001079d:	83 ec 20             	sub    esp,0x20
c00107a0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00107a4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00107a8:	fc                   	cld    
c00107a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107ab:	be 08 00 00 00       	mov    esi,0x8
c00107b0:	50                   	push   eax
c00107b1:	50                   	push   eax
c00107b2:	89 d8                	mov    eax,ebx
c00107b4:	c1 e3 04             	shl    ebx,0x4
c00107b7:	c1 e8 1c             	shr    eax,0x1c
c00107ba:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00107bf:	50                   	push   eax
c00107c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00107c4:	e8 db fe ff ff       	call   c00106a4 <VgaText::putchar(char)>
c00107c9:	83 c4 10             	add    esp,0x10
c00107cc:	4e                   	dec    esi
c00107cd:	75 e1                	jne    c00107b0 <VgaText::putx(unsigned int)+0x20>
c00107cf:	83 c4 20             	add    esp,0x20
c00107d2:	5b                   	pop    ebx
c00107d3:	5e                   	pop    esi
c00107d4:	5f                   	pop    edi
c00107d5:	c3                   	ret    

c00107d6 <VgaText::puts(char const*)>:
c00107d6:	53                   	push   ebx
c00107d7:	83 ec 08             	sub    esp,0x8
c00107da:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00107de:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00107e1:	84 c0                	test   al,al
c00107e3:	74 12                	je     c00107f7 <VgaText::puts(char const*)+0x21>
c00107e5:	43                   	inc    ebx
c00107e6:	51                   	push   ecx
c00107e7:	51                   	push   ecx
c00107e8:	50                   	push   eax
c00107e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107ed:	e8 b2 fe ff ff       	call   c00106a4 <VgaText::putchar(char)>
c00107f2:	83 c4 10             	add    esp,0x10
c00107f5:	eb e7                	jmp    c00107de <VgaText::puts(char const*)+0x8>
c00107f7:	83 c4 08             	add    esp,0x8
c00107fa:	5b                   	pop    ebx
c00107fb:	c3                   	ret    

c00107fc <VgaText::VgaText(char const*)>:
c00107fc:	57                   	push   edi
c00107fd:	56                   	push   esi
c00107fe:	53                   	push   ebx
c00107ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010803:	83 ec 08             	sub    esp,0x8
c0010806:	6a 00                	push   0x0
c0010808:	50                   	push   eax
c0010809:	e8 58 05 00 00       	call   c0010d66 <UnixFile::UnixFile(int)>
c001080e:	83 c4 10             	add    esp,0x10
c0010811:	ba 48 aa 02 c0       	mov    edx,0xc002aa48
c0010816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001081a:	89 10                	mov    DWORD PTR [eax],edx
c001081c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010820:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010836:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001083a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001083e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010846:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001084d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010851:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010867:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001086e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010872:	8d 50 60             	lea    edx,[eax+0x60]
c0010875:	bb e0 ed 02 c0       	mov    ebx,0xc002ede0
c001087a:	b8 08 00 00 00       	mov    eax,0x8
c001087f:	fc                   	cld    
c0010880:	89 d7                	mov    edi,edx
c0010882:	89 de                	mov    esi,ebx
c0010884:	89 c1                	mov    ecx,eax
c0010886:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088c:	05 82 00 00 00       	add    eax,0x82
c0010891:	83 ec 08             	sub    esp,0x8
c0010894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010898:	50                   	push   eax
c0010899:	e8 6e ff fe ff       	call   c000080c <strcpy>
c001089e:	83 c4 10             	add    esp,0x10
c00108a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a5:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00108ac:	83 ec 0c             	sub    esp,0xc
c00108af:	6a 01                	push   0x1
c00108b1:	e8 f3 08 00 00       	call   c00111a9 <Virt::allocateKernelVirtualPages(int)>
c00108b6:	83 c4 10             	add    esp,0x10
c00108b9:	89 c2                	mov    edx,eax
c00108bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108bf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00108c2:	8b 1d b0 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eeb0
c00108c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00108cf:	89 c6                	mov    esi,eax
c00108d1:	e8 84 f0 ff ff       	call   c000f95a <Phys::allocatePage()>
c00108d6:	6a 05                	push   0x5
c00108d8:	56                   	push   esi
c00108d9:	50                   	push   eax
c00108da:	53                   	push   ebx
c00108db:	e8 00 11 00 00       	call   c00119e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00108e0:	83 c4 10             	add    esp,0x10
c00108e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00108ea:	83 ec 04             	sub    esp,0x4
c00108ed:	68 00 0f 00 00       	push   0xf00
c00108f2:	6a 00                	push   0x0
c00108f4:	50                   	push   eax
c00108f5:	e8 56 fe fe ff       	call   c0000750 <memset>
c00108fa:	83 c4 10             	add    esp,0x10
c00108fd:	83 ec 04             	sub    esp,0x4
c0010900:	6a 00                	push   0x0
c0010902:	6a 07                	push   0x7
c0010904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010908:	e8 1b f8 ff ff       	call   c0010128 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001090d:	83 c4 10             	add    esp,0x10
c0010910:	83 ec 04             	sub    esp,0x4
c0010913:	6a 00                	push   0x0
c0010915:	6a 00                	push   0x0
c0010917:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001091b:	e8 92 f9 ff ff       	call   c00102b2 <VgaText::setCursor(int, int)>
c0010920:	83 c4 10             	add    esp,0x10
c0010923:	83 ec 0c             	sub    esp,0xc
c0010926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001092a:	e8 1b fd ff ff       	call   c001064a <VgaText::clearScreen()>
c001092f:	83 c4 10             	add    esp,0x10
c0010932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010936:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001093a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093e:	05 02 01 00 00       	add    eax,0x102
c0010943:	83 ec 04             	sub    esp,0x4
c0010946:	68 96 00 00 00       	push   0x96
c001094b:	6a 00                	push   0x0
c001094d:	50                   	push   eax
c001094e:	e8 fd fd fe ff       	call   c0000750 <memset>
c0010953:	83 c4 10             	add    esp,0x10
c0010956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095a:	05 98 01 00 00       	add    eax,0x198
c001095f:	83 ec 04             	sub    esp,0x4
c0010962:	68 2c 01 00 00       	push   0x12c
c0010967:	6a 00                	push   0x0
c0010969:	50                   	push   eax
c001096a:	e8 e1 fd fe ff       	call   c0000750 <memset>
c001096f:	83 c4 10             	add    esp,0x10
c0010972:	90                   	nop
c0010973:	5b                   	pop    ebx
c0010974:	5e                   	pop    esi
c0010975:	5f                   	pop    edi
c0010976:	c3                   	ret    
c0010977:	90                   	nop

c0010978 <VgaText::receiveKey(unsigned char)>:
c0010978:	55                   	push   ebp
c0010979:	57                   	push   edi
c001097a:	56                   	push   esi
c001097b:	53                   	push   ebx
c001097c:	83 ec 1c             	sub    esp,0x1c
c001097f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010983:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010987:	84 db                	test   bl,bl
c0010989:	0f 84 c9 00 00 00    	je     c0010a58 <VgaText::receiveKey(unsigned char)+0xe0>
c001098f:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010995:	80 fb 08             	cmp    bl,0x8
c0010998:	75 2c                	jne    c00109c6 <VgaText::receiveKey(unsigned char)+0x4e>
c001099a:	83 ec 0c             	sub    esp,0xc
c001099d:	57                   	push   edi
c001099e:	e8 c9 fd fe ff       	call   c000076c <strlen>
c00109a3:	83 c4 10             	add    esp,0x10
c00109a6:	85 c0                	test   eax,eax
c00109a8:	74 41                	je     c00109eb <VgaText::receiveKey(unsigned char)+0x73>
c00109aa:	50                   	push   eax
c00109ab:	50                   	push   eax
c00109ac:	6a 08                	push   0x8
c00109ae:	56                   	push   esi
c00109af:	e8 f0 fc ff ff       	call   c00106a4 <VgaText::putchar(char)>
c00109b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00109b7:	e8 b0 fd fe ff       	call   c000076c <strlen>
c00109bc:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00109c4:	eb 22                	jmp    c00109e8 <VgaText::receiveKey(unsigned char)+0x70>
c00109c6:	0f be c3             	movsx  eax,bl
c00109c9:	52                   	push   edx
c00109ca:	52                   	push   edx
c00109cb:	50                   	push   eax
c00109cc:	56                   	push   esi
c00109cd:	e8 d2 fc ff ff       	call   c00106a4 <VgaText::putchar(char)>
c00109d2:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00109d6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00109db:	59                   	pop    ecx
c00109dc:	5d                   	pop    ebp
c00109dd:	8d 44 24 16          	lea    eax,[esp+0x16]
c00109e1:	50                   	push   eax
c00109e2:	57                   	push   edi
c00109e3:	e8 64 ff fe ff       	call   c000094c <strcat>
c00109e8:	83 c4 10             	add    esp,0x10
c00109eb:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c00109f2:	75 05                	jne    c00109f9 <VgaText::receiveKey(unsigned char)+0x81>
c00109f4:	80 fb 0a             	cmp    bl,0xa
c00109f7:	75 53                	jne    c0010a4c <VgaText::receiveKey(unsigned char)+0xd4>
c00109f9:	83 ec 0c             	sub    esp,0xc
c00109fc:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a02:	53                   	push   ebx
c0010a03:	e8 64 fd fe ff       	call   c000076c <strlen>
c0010a08:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a0b:	89 c5                	mov    ebp,eax
c0010a0d:	e8 5a fd fe ff       	call   c000076c <strlen>
c0010a12:	83 c4 10             	add    esp,0x10
c0010a15:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010a19:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010a1e:	76 10                	jbe    c0010a30 <VgaText::receiveKey(unsigned char)+0xb8>
c0010a20:	83 ec 0c             	sub    esp,0xc
c0010a23:	68 f3 a9 02 c0       	push   0xc002a9f3
c0010a28:	e8 50 96 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0010a2d:	83 c4 10             	add    esp,0x10
c0010a30:	50                   	push   eax
c0010a31:	50                   	push   eax
c0010a32:	57                   	push   edi
c0010a33:	53                   	push   ebx
c0010a34:	e8 13 ff fe ff       	call   c000094c <strcat>
c0010a39:	83 c4 0c             	add    esp,0xc
c0010a3c:	68 96 00 00 00       	push   0x96
c0010a41:	6a 00                	push   0x0
c0010a43:	57                   	push   edi
c0010a44:	e8 07 fd fe ff       	call   c0000750 <memset>
c0010a49:	83 c4 10             	add    esp,0x10
c0010a4c:	83 ec 0c             	sub    esp,0xc
c0010a4f:	56                   	push   esi
c0010a50:	e8 6f fa ff ff       	call   c00104c4 <VgaText::doUpdate()>
c0010a55:	83 c4 10             	add    esp,0x10
c0010a58:	83 c4 1c             	add    esp,0x1c
c0010a5b:	5b                   	pop    ebx
c0010a5c:	5e                   	pop    esi
c0010a5d:	5f                   	pop    edi
c0010a5e:	5d                   	pop    ebp
c0010a5f:	c3                   	ret    

c0010a60 <VgaText::write(unsigned long long, void*, int*)>:
c0010a60:	55                   	push   ebp
c0010a61:	57                   	push   edi
c0010a62:	56                   	push   esi
c0010a63:	53                   	push   ebx
c0010a64:	83 ec 0c             	sub    esp,0xc
c0010a67:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010a6b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010a6f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a73:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010a7a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010a7d:	39 eb                	cmp    ebx,ebp
c0010a7f:	74 13                	je     c0010a94 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010a81:	43                   	inc    ebx
c0010a82:	50                   	push   eax
c0010a83:	50                   	push   eax
c0010a84:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010a88:	50                   	push   eax
c0010a89:	56                   	push   esi
c0010a8a:	e8 15 fc ff ff       	call   c00106a4 <VgaText::putchar(char)>
c0010a8f:	83 c4 10             	add    esp,0x10
c0010a92:	eb e9                	jmp    c0010a7d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010a94:	83 ec 0c             	sub    esp,0xc
c0010a97:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010a9e:	56                   	push   esi
c0010a9f:	e8 20 fa ff ff       	call   c00104c4 <VgaText::doUpdate()>
c0010aa4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010aa8:	89 38                	mov    DWORD PTR [eax],edi
c0010aaa:	83 c4 1c             	add    esp,0x1c
c0010aad:	31 c0                	xor    eax,eax
c0010aaf:	5b                   	pop    ebx
c0010ab0:	5e                   	pop    esi
c0010ab1:	5f                   	pop    edi
c0010ab2:	5d                   	pop    ebp
c0010ab3:	c3                   	ret    

c0010ab4 <newTerminal(char*)>:
c0010ab4:	83 ec 28             	sub    esp,0x28
c0010ab7:	68 c4 02 00 00       	push   0x2c4
c0010abc:	e8 f5 ea ff ff       	call   c000f5b6 <malloc>
c0010ac1:	5a                   	pop    edx
c0010ac2:	59                   	pop    ecx
c0010ac3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ac7:	50                   	push   eax
c0010ac8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010acc:	e8 2b fd ff ff       	call   c00107fc <VgaText::VgaText(char const*)>
c0010ad1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ad5:	83 c4 2c             	add    esp,0x2c
c0010ad8:	c3                   	ret    
c0010ad9:	90                   	nop

c0010ada <TSS::TSS()>:
c0010ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ade:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ae5:	90                   	nop
c0010ae6:	c3                   	ret    
c0010ae7:	90                   	nop

c0010ae8 <TSS::setESP(unsigned long)>:
c0010ae8:	55                   	push   ebp
c0010ae9:	89 e5                	mov    ebp,esp
c0010aeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010aee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010af1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010af4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010af7:	90                   	nop
c0010af8:	5d                   	pop    ebp
c0010af9:	c3                   	ret    

c0010afa <TSS::flush()>:
c0010afa:	55                   	push   ebp
c0010afb:	89 e5                	mov    ebp,esp
c0010afd:	83 ec 10             	sub    esp,0x10
c0010b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b03:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b05:	83 c8 03             	or     eax,0x3
c0010b08:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b0c:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b10:	66 89 d0             	mov    ax,dx
c0010b13:	0f 00 d8             	ltr    ax
c0010b16:	90                   	nop
c0010b17:	c9                   	leave  
c0010b18:	c3                   	ret    
c0010b19:	90                   	nop

c0010b1a <TSS::setup(unsigned long, unsigned long)>:
c0010b1a:	55                   	push   ebp
c0010b1b:	89 e5                	mov    ebp,esp
c0010b1d:	83 ec 18             	sub    esp,0x18
c0010b20:	83 ec 0c             	sub    esp,0xc
c0010b23:	6a 68                	push   0x68
c0010b25:	e8 8c ea ff ff       	call   c000f5b6 <malloc>
c0010b2a:	83 c4 10             	add    esp,0x10
c0010b2d:	89 c2                	mov    edx,eax
c0010b2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b32:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b3b:	83 ec 04             	sub    esp,0x4
c0010b3e:	6a 68                	push   0x68
c0010b40:	6a 00                	push   0x0
c0010b42:	50                   	push   eax
c0010b43:	e8 08 fc fe ff       	call   c0000750 <memset>
c0010b48:	83 c4 10             	add    esp,0x10
c0010b4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b51:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010b57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b5d:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010b63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b69:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b6c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b75:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010b7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b81:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010b87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b8d:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010b93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b99:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ba2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ba5:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010bab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bb1:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bbd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010bc0:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010bc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bcc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bd5:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010bdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be2:	0f 20 da             	mov    edx,cr3
c0010be5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010be8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010beb:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010bee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf4:	83 ec 08             	sub    esp,0x8
c0010bf7:	50                   	push   eax
c0010bf8:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010bfb:	50                   	push   eax
c0010bfc:	e8 91 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c01:	83 c4 10             	add    esp,0x10
c0010c04:	83 ec 08             	sub    esp,0x8
c0010c07:	6a 68                	push   0x68
c0010c09:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c0c:	50                   	push   eax
c0010c0d:	e8 9c e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c12:	83 c4 10             	add    esp,0x10
c0010c15:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010c19:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c1c:	83 e0 0f             	and    eax,0xf
c0010c1f:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c22:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c25:	83 c8 40             	or     eax,0x40
c0010c28:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c2b:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0010c30:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c36:	05 78 01 00 00       	add    eax,0x178
c0010c3b:	83 ec 04             	sub    esp,0x4
c0010c3e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010c41:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010c44:	50                   	push   eax
c0010c45:	e8 98 e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010c4a:	83 c4 10             	add    esp,0x10
c0010c4d:	89 c2                	mov    edx,eax
c0010c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c52:	89 10                	mov    DWORD PTR [eax],edx
c0010c54:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0010c59:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c5f:	05 78 01 00 00       	add    eax,0x178
c0010c64:	83 ec 0c             	sub    esp,0xc
c0010c67:	50                   	push   eax
c0010c68:	e8 b9 e1 ff ff       	call   c000ee26 <GDT::flush()>
c0010c6d:	83 c4 10             	add    esp,0x10
c0010c70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c73:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c75:	83 ec 08             	sub    esp,0x8
c0010c78:	50                   	push   eax
c0010c79:	68 5c aa 02 c0       	push   0xc002aa5c
c0010c7e:	e8 2c 19 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0010c83:	83 c4 10             	add    esp,0x10
c0010c86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c89:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c8b:	c9                   	leave  
c0010c8c:	c3                   	ret    
c0010c8d:	90                   	nop

c0010c8e <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010c96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c99:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010c9e:	75 08                	jne    c0010ca8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010ca0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010ca6:	eb 38                	jmp    c0010ce0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010ca8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010cad:	75 17                	jne    c0010cc6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010caf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cb4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010cb7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010cbd:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010cc3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010cc6:	89 c1                	mov    ecx,eax
c0010cc8:	83 e1 fd             	and    ecx,0xfffffffd
c0010ccb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010cd1:	74 cd                	je     c0010ca0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010cd3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010cd8:	83 e0 ef             	and    eax,0xffffffef
c0010cdb:	83 f8 08             	cmp    eax,0x8
c0010cde:	76 c0                	jbe    c0010ca0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010ce0:	31 c0                	xor    eax,eax
c0010ce2:	c3                   	ret    
c0010ce3:	90                   	nop

c0010ce4 <ReservedFilename::isAtty()>:
c0010ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ce8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010ceb:	31 c0                	xor    eax,eax
c0010ced:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010cf3:	74 09                	je     c0010cfe <ReservedFilename::isAtty()+0x1a>
c0010cf5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010cfb:	0f 94 c0             	sete   al
c0010cfe:	c3                   	ret    
c0010cff:	90                   	nop

c0010d00 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d04:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d0b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d0f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d14:	75 08                	jne    c0010d1e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d16:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d1c:	eb 3d                	jmp    c0010d5b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d1e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d23:	75 17                	jne    c0010d3c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d2d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d33:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d39:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010d3c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d41:	75 04                	jne    c0010d47 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010d43:	89 0a                	mov    DWORD PTR [edx],ecx
c0010d45:	eb 14                	jmp    c0010d5b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d47:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010d4c:	74 c8                	je     c0010d16 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d4e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d53:	83 e0 ef             	and    eax,0xffffffef
c0010d56:	83 f8 08             	cmp    eax,0x8
c0010d59:	76 bb                	jbe    c0010d16 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d5b:	31 c0                	xor    eax,eax
c0010d5d:	c3                   	ret    

c0010d5e <UnixFile::getFileDescriptor()>:
c0010d5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d65:	c3                   	ret    

c0010d66 <UnixFile::UnixFile(int)>:
c0010d66:	53                   	push   ebx
c0010d67:	83 ec 28             	sub    esp,0x28
c0010d6a:	ba 48 ab 02 c0       	mov    edx,0xc002ab48
c0010d6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d73:	89 10                	mov    DWORD PTR [eax],edx
c0010d75:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010d7d:	0f 8f 8c 01 00 00    	jg     c0010f0f <UnixFile::UnixFile(int)+0x1a9>
c0010d83:	a1 e0 dc 02 c0       	mov    eax,ds:0xc002dce0
c0010d88:	8d 50 01             	lea    edx,[eax+0x1]
c0010d8b:	89 15 e0 dc 02 c0    	mov    DWORD PTR ds:0xc002dce0,edx
c0010d91:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010d95:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d98:	83 ec 08             	sub    esp,0x8
c0010d9b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010d9f:	68 98 ee 02 c0       	push   0xc002ee98
c0010da4:	e8 83 7f 01 00       	call   c0028d2c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010da9:	83 c4 10             	add    esp,0x10
c0010dac:	a0 94 ee 02 c0       	mov    al,ds:0xc002ee94
c0010db1:	83 f0 01             	xor    eax,0x1
c0010db4:	84 c0                	test   al,al
c0010db6:	0f 84 54 01 00 00    	je     c0010f10 <UnixFile::UnixFile(int)+0x1aa>
c0010dbc:	c6 05 94 ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee94,0x1
c0010dc3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010dcb:	83 ec 0c             	sub    esp,0xc
c0010dce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010dd2:	e8 df e7 ff ff       	call   c000f5b6 <malloc>
c0010dd7:	83 c4 10             	add    esp,0x10
c0010dda:	89 c3                	mov    ebx,eax
c0010ddc:	83 ec 08             	sub    esp,0x8
c0010ddf:	68 03 ff ff 0f       	push   0xfffff03
c0010de4:	53                   	push   ebx
c0010de5:	e8 2c 01 00 00       	call   c0010f16 <ReservedFilename::ReservedFilename(int)>
c0010dea:	83 c4 10             	add    esp,0x10
c0010ded:	89 1d 8c ee 02 c0    	mov    DWORD PTR ds:0xc002ee8c,ebx
c0010df3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010dfb:	83 ec 0c             	sub    esp,0xc
c0010dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e02:	e8 af e7 ff ff       	call   c000f5b6 <malloc>
c0010e07:	83 c4 10             	add    esp,0x10
c0010e0a:	89 c3                	mov    ebx,eax
c0010e0c:	83 ec 08             	sub    esp,0x8
c0010e0f:	68 01 ff ff 0f       	push   0xfffff01
c0010e14:	53                   	push   ebx
c0010e15:	e8 fc 00 00 00       	call   c0010f16 <ReservedFilename::ReservedFilename(int)>
c0010e1a:	83 c4 10             	add    esp,0x10
c0010e1d:	89 1d 90 ee 02 c0    	mov    DWORD PTR ds:0xc002ee90,ebx
c0010e23:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e2b:	83 ec 0c             	sub    esp,0xc
c0010e2e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010e32:	e8 7f e7 ff ff       	call   c000f5b6 <malloc>
c0010e37:	83 c4 10             	add    esp,0x10
c0010e3a:	89 c3                	mov    ebx,eax
c0010e3c:	83 ec 08             	sub    esp,0x8
c0010e3f:	68 00 ff ff 0f       	push   0xfffff00
c0010e44:	53                   	push   ebx
c0010e45:	e8 cc 00 00 00       	call   c0010f16 <ReservedFilename::ReservedFilename(int)>
c0010e4a:	83 c4 10             	add    esp,0x10
c0010e4d:	89 1d 84 ee 02 c0    	mov    DWORD PTR ds:0xc002ee84,ebx
c0010e53:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010e5b:	83 ec 0c             	sub    esp,0xc
c0010e5e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e62:	e8 4f e7 ff ff       	call   c000f5b6 <malloc>
c0010e67:	83 c4 10             	add    esp,0x10
c0010e6a:	89 c3                	mov    ebx,eax
c0010e6c:	83 ec 08             	sub    esp,0x8
c0010e6f:	68 02 ff ff 0f       	push   0xfffff02
c0010e74:	53                   	push   ebx
c0010e75:	e8 9c 00 00 00       	call   c0010f16 <ReservedFilename::ReservedFilename(int)>
c0010e7a:	83 c4 10             	add    esp,0x10
c0010e7d:	89 1d 88 ee 02 c0    	mov    DWORD PTR ds:0xc002ee88,ebx
c0010e83:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010e8b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010e90:	7f 7e                	jg     c0010f10 <UnixFile::UnixFile(int)+0x1aa>
c0010e92:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010e9a:	83 ec 0c             	sub    esp,0xc
c0010e9d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ea1:	e8 10 e7 ff ff       	call   c000f5b6 <malloc>
c0010ea6:	83 c4 10             	add    esp,0x10
c0010ea9:	89 c3                	mov    ebx,eax
c0010eab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010eaf:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010eb4:	83 ec 08             	sub    esp,0x8
c0010eb7:	50                   	push   eax
c0010eb8:	53                   	push   ebx
c0010eb9:	e8 58 00 00 00       	call   c0010f16 <ReservedFilename::ReservedFilename(int)>
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ec5:	89 1c 85 60 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd11a0],ebx
c0010ecc:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010ed4:	83 ec 0c             	sub    esp,0xc
c0010ed7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010edb:	e8 d6 e6 ff ff       	call   c000f5b6 <malloc>
c0010ee0:	83 c4 10             	add    esp,0x10
c0010ee3:	89 c3                	mov    ebx,eax
c0010ee5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ee9:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010eee:	83 ec 08             	sub    esp,0x8
c0010ef1:	50                   	push   eax
c0010ef2:	53                   	push   ebx
c0010ef3:	e8 1e 00 00 00       	call   c0010f16 <ReservedFilename::ReservedFilename(int)>
c0010ef8:	83 c4 10             	add    esp,0x10
c0010efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010eff:	89 1c 85 20 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd11e0],ebx
c0010f06:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f0a:	e9 7c ff ff ff       	jmp    c0010e8b <UnixFile::UnixFile(int)+0x125>
c0010f0f:	90                   	nop
c0010f10:	83 c4 28             	add    esp,0x28
c0010f13:	5b                   	pop    ebx
c0010f14:	c3                   	ret    
c0010f15:	90                   	nop

c0010f16 <ReservedFilename::ReservedFilename(int)>:
c0010f16:	83 ec 0c             	sub    esp,0xc
c0010f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f1d:	83 ec 08             	sub    esp,0x8
c0010f20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f24:	50                   	push   eax
c0010f25:	e8 3c fe ff ff       	call   c0010d66 <UnixFile::UnixFile(int)>
c0010f2a:	83 c4 10             	add    esp,0x10
c0010f2d:	ba 64 ab 02 c0       	mov    edx,0xc002ab64
c0010f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f36:	89 10                	mov    DWORD PTR [eax],edx
c0010f38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f43:	90                   	nop
c0010f44:	83 c4 0c             	add    esp,0xc
c0010f47:	c3                   	ret    

c0010f48 <UnixFile::~UnixFile()>:
c0010f48:	83 ec 1c             	sub    esp,0x1c
c0010f4b:	ba 48 ab 02 c0       	mov    edx,0xc002ab48
c0010f50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f54:	89 10                	mov    DWORD PTR [eax],edx
c0010f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f5d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010f62:	7f 73                	jg     c0010fd7 <UnixFile::~UnixFile()+0x8f>
c0010f64:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f6c:	83 ec 0c             	sub    esp,0xc
c0010f6f:	68 98 ee 02 c0       	push   0xc002ee98
c0010f74:	e8 87 7e 01 00       	call   c0028e00 <LinkedList<UnixFile>::getFirstElement()>
c0010f79:	83 c4 10             	add    esp,0x10
c0010f7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f80:	83 ec 0c             	sub    esp,0xc
c0010f83:	68 98 ee 02 c0       	push   0xc002ee98
c0010f88:	e8 7b 7e 01 00       	call   c0028e08 <LinkedList<UnixFile>::removeFirst()>
c0010f8d:	83 c4 10             	add    esp,0x10
c0010f90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f94:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010f98:	74 40                	je     c0010fda <UnixFile::~UnixFile()+0x92>
c0010f9a:	83 ec 08             	sub    esp,0x8
c0010f9d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010fa1:	68 98 ee 02 c0       	push   0xc002ee98
c0010fa6:	e8 81 7d 01 00       	call   c0028d2c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010fab:	83 c4 10             	add    esp,0x10
c0010fae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fb2:	8d 50 01             	lea    edx,[eax+0x1]
c0010fb5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010fb9:	3d 88 13 00 00       	cmp    eax,0x1388
c0010fbe:	0f 94 c0             	sete   al
c0010fc1:	84 c0                	test   al,al
c0010fc3:	74 a7                	je     c0010f6c <UnixFile::~UnixFile()+0x24>
c0010fc5:	83 ec 0c             	sub    esp,0xc
c0010fc8:	68 20 ab 02 c0       	push   0xc002ab20
c0010fcd:	e8 ab 90 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0010fd2:	83 c4 10             	add    esp,0x10
c0010fd5:	eb 95                	jmp    c0010f6c <UnixFile::~UnixFile()+0x24>
c0010fd7:	90                   	nop
c0010fd8:	eb 01                	jmp    c0010fdb <UnixFile::~UnixFile()+0x93>
c0010fda:	90                   	nop
c0010fdb:	90                   	nop
c0010fdc:	83 c4 1c             	add    esp,0x1c
c0010fdf:	c3                   	ret    

c0010fe0 <UnixFile::~UnixFile()>:
c0010fe0:	83 ec 0c             	sub    esp,0xc
c0010fe3:	83 ec 0c             	sub    esp,0xc
c0010fe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fea:	e8 59 ff ff ff       	call   c0010f48 <UnixFile::~UnixFile()>
c0010fef:	83 c4 10             	add    esp,0x10
c0010ff2:	83 ec 08             	sub    esp,0x8
c0010ff5:	6a 0c                	push   0xc
c0010ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ffb:	e8 cf 14 00 00       	call   c00124cf <operator delete(void*, unsigned long)>
c0011000:	83 c4 10             	add    esp,0x10
c0011003:	83 c4 0c             	add    esp,0xc
c0011006:	c3                   	ret    
c0011007:	90                   	nop

c0011008 <ReservedFilename::~ReservedFilename()>:
c0011008:	83 ec 0c             	sub    esp,0xc
c001100b:	ba 64 ab 02 c0       	mov    edx,0xc002ab64
c0011010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011014:	89 10                	mov    DWORD PTR [eax],edx
c0011016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001101a:	83 ec 0c             	sub    esp,0xc
c001101d:	50                   	push   eax
c001101e:	e8 25 ff ff ff       	call   c0010f48 <UnixFile::~UnixFile()>
c0011023:	83 c4 10             	add    esp,0x10
c0011026:	90                   	nop
c0011027:	83 c4 0c             	add    esp,0xc
c001102a:	c3                   	ret    
c001102b:	90                   	nop

c001102c <ReservedFilename::~ReservedFilename()>:
c001102c:	83 ec 0c             	sub    esp,0xc
c001102f:	83 ec 0c             	sub    esp,0xc
c0011032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011036:	e8 cd ff ff ff       	call   c0011008 <ReservedFilename::~ReservedFilename()>
c001103b:	83 c4 10             	add    esp,0x10
c001103e:	83 ec 08             	sub    esp,0x8
c0011041:	6a 0c                	push   0xc
c0011043:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011047:	e8 83 14 00 00       	call   c00124cf <operator delete(void*, unsigned long)>
c001104c:	83 c4 10             	add    esp,0x10
c001104f:	83 c4 0c             	add    esp,0xc
c0011052:	c3                   	ret    

c0011053 <getFromFileDescriptor(int)>:
c0011053:	53                   	push   ebx
c0011054:	83 ec 08             	sub    esp,0x8
c0011057:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001105b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011061:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011067:	7f 2c                	jg     c0011095 <getFromFileDescriptor(int)+0x42>
c0011069:	83 ec 0c             	sub    esp,0xc
c001106c:	68 98 ee 02 c0       	push   0xc002ee98
c0011071:	e8 8a 7d 01 00       	call   c0028e00 <LinkedList<UnixFile>::getFirstElement()>
c0011076:	83 c4 10             	add    esp,0x10
c0011079:	85 c0                	test   eax,eax
c001107b:	75 04                	jne    c0011081 <getFromFileDescriptor(int)+0x2e>
c001107d:	31 c0                	xor    eax,eax
c001107f:	eb 6e                	jmp    c00110ef <getFromFileDescriptor(int)+0x9c>
c0011081:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011084:	74 69                	je     c00110ef <getFromFileDescriptor(int)+0x9c>
c0011086:	52                   	push   edx
c0011087:	52                   	push   edx
c0011088:	50                   	push   eax
c0011089:	68 98 ee 02 c0       	push   0xc002ee98
c001108e:	e8 17 7e 01 00       	call   c0028eaa <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011093:	eb e1                	jmp    c0011076 <getFromFileDescriptor(int)+0x23>
c0011095:	a1 8c ee 02 c0       	mov    eax,ds:0xc002ee8c
c001109a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00110a0:	74 4d                	je     c00110ef <getFromFileDescriptor(int)+0x9c>
c00110a2:	a1 90 ee 02 c0       	mov    eax,ds:0xc002ee90
c00110a7:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00110ad:	74 40                	je     c00110ef <getFromFileDescriptor(int)+0x9c>
c00110af:	a1 88 ee 02 c0       	mov    eax,ds:0xc002ee88
c00110b4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00110ba:	74 33                	je     c00110ef <getFromFileDescriptor(int)+0x9c>
c00110bc:	a1 84 ee 02 c0       	mov    eax,ds:0xc002ee84
c00110c1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00110c7:	74 26                	je     c00110ef <getFromFileDescriptor(int)+0x9c>
c00110c9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00110cf:	83 f8 08             	cmp    eax,0x8
c00110d2:	77 09                	ja     c00110dd <getFromFileDescriptor(int)+0x8a>
c00110d4:	8b 04 85 60 ee 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd11a0]
c00110db:	eb 12                	jmp    c00110ef <getFromFileDescriptor(int)+0x9c>
c00110dd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00110e3:	83 fb 08             	cmp    ebx,0x8
c00110e6:	77 95                	ja     c001107d <getFromFileDescriptor(int)+0x2a>
c00110e8:	8b 04 9d 20 ee 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd11e0]
c00110ef:	83 c4 08             	add    esp,0x8
c00110f2:	5b                   	pop    ebx
c00110f3:	c3                   	ret    

c00110f4 <__static_initialization_and_destruction_0(int, int)>:
c00110f4:	83 ec 0c             	sub    esp,0xc
c00110f7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00110fc:	75 34                	jne    c0011132 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00110fe:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011106:	75 2a                	jne    c0011132 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011108:	83 ec 0c             	sub    esp,0xc
c001110b:	68 98 ee 02 c0       	push   0xc002ee98
c0011110:	e8 bf 7b 01 00       	call   c0028cd4 <LinkedList<UnixFile>::LinkedList()>
c0011115:	83 c4 10             	add    esp,0x10
c0011118:	83 ec 04             	sub    esp,0x4
c001111b:	68 14 db 02 c0       	push   0xc002db14
c0011120:	68 98 ee 02 c0       	push   0xc002ee98
c0011125:	68 d2 8c 02 c0       	push   0xc0028cd2
c001112a:	e8 1a 13 00 00       	call   c0012449 <__cxa_atexit>
c001112f:	83 c4 10             	add    esp,0x10
c0011132:	90                   	nop
c0011133:	83 c4 0c             	add    esp,0xc
c0011136:	c3                   	ret    

c0011137 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011137:	83 ec 0c             	sub    esp,0xc
c001113a:	83 ec 08             	sub    esp,0x8
c001113d:	68 ff ff 00 00       	push   0xffff
c0011142:	6a 01                	push   0x1
c0011144:	e8 ab ff ff ff       	call   c00110f4 <__static_initialization_and_destruction_0(int, int)>
c0011149:	83 c4 10             	add    esp,0x10
c001114c:	83 c4 0c             	add    esp,0xc
c001114f:	c3                   	ret    

c0011150 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011150:	53                   	push   ebx
c0011151:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011155:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011159:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001115f:	89 c8                	mov    eax,ecx
c0011161:	d1 e8                	shr    eax,1
c0011163:	03 05 e8 dc 02 c0    	add    eax,DWORD PTR ds:0xc002dce8
c0011169:	83 e1 01             	and    ecx,0x1
c001116c:	8a 10                	mov    dl,BYTE PTR [eax]
c001116e:	75 09                	jne    c0011179 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011170:	83 e2 f0             	and    edx,0xfffffff0
c0011173:	09 da                	or     edx,ebx
c0011175:	88 10                	mov    BYTE PTR [eax],dl
c0011177:	5b                   	pop    ebx
c0011178:	c3                   	ret    
c0011179:	c1 e3 04             	shl    ebx,0x4
c001117c:	83 e2 0f             	and    edx,0xf
c001117f:	09 da                	or     edx,ebx
c0011181:	88 10                	mov    BYTE PTR [eax],dl
c0011183:	5b                   	pop    ebx
c0011184:	c3                   	ret    

c0011185 <Virt::getPageState(unsigned long)>:
c0011185:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011189:	8b 0d e8 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dce8
c001118f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011195:	89 d0                	mov    eax,edx
c0011197:	d1 e8                	shr    eax,1
c0011199:	83 e2 01             	and    edx,0x1
c001119c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001119f:	75 04                	jne    c00111a5 <Virt::getPageState(unsigned long)+0x20>
c00111a1:	83 e0 0f             	and    eax,0xf
c00111a4:	c3                   	ret    
c00111a5:	c0 e8 04             	shr    al,0x4
c00111a8:	c3                   	ret    

c00111a9 <Virt::allocateKernelVirtualPages(int)>:
c00111a9:	55                   	push   ebp
c00111aa:	31 ed                	xor    ebp,ebp
c00111ac:	57                   	push   edi
c00111ad:	56                   	push   esi
c00111ae:	53                   	push   ebx
c00111af:	31 db                	xor    ebx,ebx
c00111b1:	83 ec 1c             	sub    esp,0x1c
c00111b4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111b8:	8b 3d e4 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dce4
c00111be:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00111c3:	57                   	push   edi
c00111c4:	e8 bc ff ff ff       	call   c0011185 <Virt::getPageState(unsigned long)>
c00111c9:	5a                   	pop    edx
c00111ca:	84 c0                	test   al,al
c00111cc:	75 3a                	jne    c0011208 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00111ce:	85 db                	test   ebx,ebx
c00111d0:	75 02                	jne    c00111d4 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00111d2:	89 fd                	mov    ebp,edi
c00111d4:	43                   	inc    ebx
c00111d5:	39 f3                	cmp    ebx,esi
c00111d7:	74 5a                	je     c0011233 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00111d9:	47                   	inc    edi
c00111da:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00111e0:	76 31                	jbe    c0011213 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00111e2:	c7 05 e4 dc 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002dce4,0xc8000
c00111ec:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00111f1:	75 28                	jne    c001121b <Virt::allocateKernelVirtualPages(int)+0x72>
c00111f3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00111f8:	bf 00 80 0c 00       	mov    edi,0xc8000
c00111fd:	57                   	push   edi
c00111fe:	e8 82 ff ff ff       	call   c0011185 <Virt::getPageState(unsigned long)>
c0011203:	5a                   	pop    edx
c0011204:	84 c0                	test   al,al
c0011206:	74 c6                	je     c00111ce <Virt::allocateKernelVirtualPages(int)+0x25>
c0011208:	31 db                	xor    ebx,ebx
c001120a:	47                   	inc    edi
c001120b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011211:	77 cf                	ja     c00111e2 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011213:	89 3d e4 dc 02 c0    	mov    DWORD PTR ds:0xc002dce4,edi
c0011219:	eb a8                	jmp    c00111c3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001121b:	83 ec 0c             	sub    esp,0xc
c001121e:	68 78 ab 02 c0       	push   0xc002ab78
c0011223:	e8 55 8e 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0011228:	8b 3d e4 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dce4
c001122e:	83 c4 10             	add    esp,0x10
c0011231:	eb 90                	jmp    c00111c3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011233:	89 2d e4 dc 02 c0    	mov    DWORD PTR ds:0xc002dce4,ebp
c0011239:	4b                   	dec    ebx
c001123a:	74 5f                	je     c001129b <Virt::allocateKernelVirtualPages(int)+0xf2>
c001123c:	85 f6                	test   esi,esi
c001123e:	74 3d                	je     c001127d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011240:	89 e8                	mov    eax,ebp
c0011242:	31 db                	xor    ebx,ebx
c0011244:	8d 7e ff             	lea    edi,[esi-0x1]
c0011247:	eb 14                	jmp    c001125d <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011249:	6a 01                	push   0x1
c001124b:	43                   	inc    ebx
c001124c:	50                   	push   eax
c001124d:	e8 fe fe ff ff       	call   c0011150 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011252:	58                   	pop    eax
c0011253:	39 f3                	cmp    ebx,esi
c0011255:	5a                   	pop    edx
c0011256:	74 25                	je     c001127d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011258:	a1 e4 dc 02 c0       	mov    eax,ds:0xc002dce4
c001125d:	8d 50 01             	lea    edx,[eax+0x1]
c0011260:	85 db                	test   ebx,ebx
c0011262:	89 15 e4 dc 02 c0    	mov    DWORD PTR ds:0xc002dce4,edx
c0011268:	74 20                	je     c001128a <Virt::allocateKernelVirtualPages(int)+0xe1>
c001126a:	39 df                	cmp    edi,ebx
c001126c:	75 db                	jne    c0011249 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001126e:	6a 03                	push   0x3
c0011270:	43                   	inc    ebx
c0011271:	50                   	push   eax
c0011272:	e8 d9 fe ff ff       	call   c0011150 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011277:	59                   	pop    ecx
c0011278:	39 f3                	cmp    ebx,esi
c001127a:	58                   	pop    eax
c001127b:	75 db                	jne    c0011258 <Virt::allocateKernelVirtualPages(int)+0xaf>
c001127d:	83 c4 1c             	add    esp,0x1c
c0011280:	89 e8                	mov    eax,ebp
c0011282:	5b                   	pop    ebx
c0011283:	c1 e0 0c             	shl    eax,0xc
c0011286:	5e                   	pop    esi
c0011287:	5f                   	pop    edi
c0011288:	5d                   	pop    ebp
c0011289:	c3                   	ret    
c001128a:	6a 02                	push   0x2
c001128c:	bb 01 00 00 00       	mov    ebx,0x1
c0011291:	50                   	push   eax
c0011292:	e8 b9 fe ff ff       	call   c0011150 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011297:	58                   	pop    eax
c0011298:	5a                   	pop    edx
c0011299:	eb bd                	jmp    c0011258 <Virt::allocateKernelVirtualPages(int)+0xaf>
c001129b:	6a 04                	push   0x4
c001129d:	8d 45 01             	lea    eax,[ebp+0x1]
c00112a0:	55                   	push   ebp
c00112a1:	a3 e4 dc 02 c0       	mov    ds:0xc002dce4,eax
c00112a6:	e8 a5 fe ff ff       	call   c0011150 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112ab:	59                   	pop    ecx
c00112ac:	89 e8                	mov    eax,ebp
c00112ae:	5b                   	pop    ebx
c00112af:	c1 e0 0c             	shl    eax,0xc
c00112b2:	83 c4 1c             	add    esp,0x1c
c00112b5:	5b                   	pop    ebx
c00112b6:	5e                   	pop    esi
c00112b7:	5f                   	pop    edi
c00112b8:	5d                   	pop    ebp
c00112b9:	c3                   	ret    

c00112ba <Virt::freeSwapfilePage(unsigned long)>:
c00112ba:	53                   	push   ebx
c00112bb:	8b 15 ac ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eeac
c00112c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112c5:	b8 01 00 00 00       	mov    eax,0x1
c00112ca:	89 cb                	mov    ebx,ecx
c00112cc:	d3 e0                	shl    eax,cl
c00112ce:	c1 eb 05             	shr    ebx,0x5
c00112d1:	f7 d0                	not    eax
c00112d3:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00112d6:	5b                   	pop    ebx
c00112d7:	c3                   	ret    

c00112d8 <Virt::swapIDToSector(unsigned long)>:
c00112d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112dc:	0f af 05 ec dc 02 c0 	imul   eax,DWORD PTR ds:0xc002dcec
c00112e3:	03 05 f4 dc 02 c0    	add    eax,DWORD PTR ds:0xc002dcf4
c00112e9:	c3                   	ret    

c00112ea <Virt::allocateSwapfilePage()>:
c00112ea:	55                   	push   ebp
c00112eb:	31 d2                	xor    edx,edx
c00112ed:	57                   	push   edi
c00112ee:	56                   	push   esi
c00112ef:	53                   	push   ebx
c00112f0:	83 ec 0c             	sub    esp,0xc
c00112f3:	8b 0d ec dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dcec
c00112f9:	a1 f0 dc 02 c0       	mov    eax,ds:0xc002dcf0
c00112fe:	f7 f1                	div    ecx
c0011300:	39 0d f0 dc 02 c0    	cmp    DWORD PTR ds:0xc002dcf0,ecx
c0011306:	72 2d                	jb     c0011335 <Virt::allocateSwapfilePage()+0x4b>
c0011308:	8b 35 ac ee 02 c0    	mov    esi,DWORD PTR ds:0xc002eeac
c001130e:	8b 16                	mov    edx,DWORD PTR [esi]
c0011310:	f6 c2 01             	test   dl,0x1
c0011313:	74 3c                	je     c0011351 <Virt::allocateSwapfilePage()+0x67>
c0011315:	31 c9                	xor    ecx,ecx
c0011317:	bf 01 00 00 00       	mov    edi,0x1
c001131c:	eb 12                	jmp    c0011330 <Virt::allocateSwapfilePage()+0x46>
c001131e:	89 fd                	mov    ebp,edi
c0011320:	89 ca                	mov    edx,ecx
c0011322:	d3 e5                	shl    ebp,cl
c0011324:	c1 ea 05             	shr    edx,0x5
c0011327:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001132a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001132c:	85 ea                	test   edx,ebp
c001132e:	74 2a                	je     c001135a <Virt::allocateSwapfilePage()+0x70>
c0011330:	41                   	inc    ecx
c0011331:	39 c8                	cmp    eax,ecx
c0011333:	77 e9                	ja     c001131e <Virt::allocateSwapfilePage()+0x34>
c0011335:	83 ec 0c             	sub    esp,0xc
c0011338:	68 ff ac 02 c0       	push   0xc002acff
c001133d:	e8 3b 8d 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0011342:	83 c4 10             	add    esp,0x10
c0011345:	31 c9                	xor    ecx,ecx
c0011347:	83 c4 0c             	add    esp,0xc
c001134a:	89 c8                	mov    eax,ecx
c001134c:	5b                   	pop    ebx
c001134d:	5e                   	pop    esi
c001134e:	5f                   	pop    edi
c001134f:	5d                   	pop    ebp
c0011350:	c3                   	ret    
c0011351:	89 f3                	mov    ebx,esi
c0011353:	bd 01 00 00 00       	mov    ebp,0x1
c0011358:	31 c9                	xor    ecx,ecx
c001135a:	09 ea                	or     edx,ebp
c001135c:	89 c8                	mov    eax,ecx
c001135e:	89 13                	mov    DWORD PTR [ebx],edx
c0011360:	83 c4 0c             	add    esp,0xc
c0011363:	5b                   	pop    ebx
c0011364:	5e                   	pop    esi
c0011365:	5f                   	pop    edi
c0011366:	5d                   	pop    ebp
c0011367:	c3                   	ret    

c0011368 <Virt::virtualMemorySetup()>:
c0011368:	53                   	push   ebx
c0011369:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001136e:	83 ec 08             	sub    esp,0x8
c0011371:	6a 0f                	push   0xf
c0011373:	53                   	push   ebx
c0011374:	43                   	inc    ebx
c0011375:	e8 d6 fd ff ff       	call   c0011150 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001137a:	59                   	pop    ecx
c001137b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011381:	58                   	pop    eax
c0011382:	75 ed                	jne    c0011371 <Virt::virtualMemorySetup()+0x9>
c0011384:	83 ec 08             	sub    esp,0x8
c0011387:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001138c:	68 00 00 00 c8       	push   0xc8000000
c0011391:	68 16 ad 02 c0       	push   0xc002ad16
c0011396:	e8 14 12 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001139b:	58                   	pop    eax
c001139c:	5a                   	pop    edx
c001139d:	68 00 f0 ff ef       	push   0xeffff000
c00113a2:	68 2a ad 02 c0       	push   0xc002ad2a
c00113a7:	e8 03 12 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00113ac:	83 c4 10             	add    esp,0x10
c00113af:	83 ec 08             	sub    esp,0x8
c00113b2:	6a 00                	push   0x0
c00113b4:	53                   	push   ebx
c00113b5:	43                   	inc    ebx
c00113b6:	e8 95 fd ff ff       	call   c0011150 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113bb:	83 c4 10             	add    esp,0x10
c00113be:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113c4:	75 e9                	jne    c00113af <Virt::virtualMemorySetup()+0x47>
c00113c6:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113cb:	83 ec 08             	sub    esp,0x8
c00113ce:	6a 0f                	push   0xf
c00113d0:	53                   	push   ebx
c00113d1:	43                   	inc    ebx
c00113d2:	e8 79 fd ff ff       	call   c0011150 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113d7:	83 c4 10             	add    esp,0x10
c00113da:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00113e0:	75 e9                	jne    c00113cb <Virt::virtualMemorySetup()+0x63>
c00113e2:	83 c4 08             	add    esp,0x8
c00113e5:	5b                   	pop    ebx
c00113e6:	c3                   	ret    

c00113e7 <Virt::setupPageSwapping(int)>:
c00113e7:	57                   	push   edi
c00113e8:	56                   	push   esi
c00113e9:	53                   	push   ebx
c00113ea:	83 ec 1c             	sub    esp,0x1c
c00113ed:	68 3e ad 02 c0       	push   0xc002ad3e
c00113f2:	e8 b8 11 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00113f7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00113fe:	e8 b3 e1 ff ff       	call   c000f5b6 <malloc>
c0011403:	83 c4 0c             	add    esp,0xc
c0011406:	89 c6                	mov    esi,eax
c0011408:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c001140e:	68 52 ad 02 c0       	push   0xc002ad52
c0011413:	50                   	push   eax
c0011414:	e8 f5 16 00 00       	call   c0012b0e <File::File(char const*, Process*)>
c0011419:	89 34 24             	mov    DWORD PTR [esp],esi
c001141c:	e8 c9 18 00 00       	call   c0012cea <File::unlink()>
c0011421:	59                   	pop    ecx
c0011422:	5b                   	pop    ebx
c0011423:	6a 12                	push   0x12
c0011425:	56                   	push   esi
c0011426:	e8 47 17 00 00       	call   c0012b72 <File::open(FileOpenMode)>
c001142b:	83 c4 10             	add    esp,0x10
c001142e:	85 c0                	test   eax,eax
c0011430:	0f 85 5b 01 00 00    	jne    c0011591 <Virt::setupPageSwapping(int)+0x1aa>
c0011436:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001143a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011442:	c1 e3 08             	shl    ebx,0x8
c0011445:	83 ec 0c             	sub    esp,0xc
c0011448:	68 00 00 01 00       	push   0x10000
c001144d:	e8 64 e1 ff ff       	call   c000f5b6 <malloc>
c0011452:	83 c4 0c             	add    esp,0xc
c0011455:	89 c7                	mov    edi,eax
c0011457:	68 00 00 01 00       	push   0x10000
c001145c:	68 ee 00 00 00       	push   0xee
c0011461:	50                   	push   eax
c0011462:	e8 e9 f2 fe ff       	call   c0000750 <memset>
c0011467:	83 c4 10             	add    esp,0x10
c001146a:	85 db                	test   ebx,ebx
c001146c:	79 03                	jns    c0011471 <Virt::setupPageSwapping(int)+0x8a>
c001146e:	83 c3 0f             	add    ebx,0xf
c0011471:	c1 fb 04             	sar    ebx,0x4
c0011474:	4b                   	dec    ebx
c0011475:	83 fb ff             	cmp    ebx,0xffffffff
c0011478:	74 4f                	je     c00114c9 <Virt::setupPageSwapping(int)+0xe2>
c001147a:	83 ec 0c             	sub    esp,0xc
c001147d:	8b 06                	mov    eax,DWORD PTR [esi]
c001147f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011483:	52                   	push   edx
c0011484:	57                   	push   edi
c0011485:	6a 00                	push   0x0
c0011487:	68 00 00 01 00       	push   0x10000
c001148c:	56                   	push   esi
c001148d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011490:	83 c4 20             	add    esp,0x20
c0011493:	85 c0                	test   eax,eax
c0011495:	0f 85 e0 00 00 00    	jne    c001157b <Virt::setupPageSwapping(int)+0x194>
c001149b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001149f:	3d 00 00 01 00       	cmp    eax,0x10000
c00114a4:	74 ce                	je     c0011474 <Virt::setupPageSwapping(int)+0x8d>
c00114a6:	83 ec 08             	sub    esp,0x8
c00114a9:	4b                   	dec    ebx
c00114aa:	50                   	push   eax
c00114ab:	68 a5 ad 02 c0       	push   0xc002ada5
c00114b0:	e8 fa 10 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00114b5:	c7 04 24 ae ad 02 c0 	mov    DWORD PTR [esp],0xc002adae
c00114bc:	e8 bc 8b 00 00       	call   c001a07d <Krnl::panic(char const*)>
c00114c1:	83 c4 10             	add    esp,0x10
c00114c4:	83 fb ff             	cmp    ebx,0xffffffff
c00114c7:	75 b1                	jne    c001147a <Virt::setupPageSwapping(int)+0x93>
c00114c9:	83 ec 0c             	sub    esp,0xc
c00114cc:	56                   	push   esi
c00114cd:	e8 fe 16 00 00       	call   c0012bd0 <File::close()>
c00114d2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114d5:	e8 fc e0 ff ff       	call   c000f5d6 <rfree>
c00114da:	83 c4 10             	add    esp,0x10
c00114dd:	85 f6                	test   esi,esi
c00114df:	74 0c                	je     c00114ed <Virt::setupPageSwapping(int)+0x106>
c00114e1:	83 ec 0c             	sub    esp,0xc
c00114e4:	8b 06                	mov    eax,DWORD PTR [esi]
c00114e6:	56                   	push   esi
c00114e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114ea:	83 c4 10             	add    esp,0x10
c00114ed:	83 ec 08             	sub    esp,0x8
c00114f0:	a1 48 f3 02 c0       	mov    eax,ds:0xc002f348
c00114f5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00114fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00114fd:	68 52 ad 02 c0       	push   0xc002ad52
c0011502:	50                   	push   eax
c0011503:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011506:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001150a:	c6 05 f8 dc 02 c0 43 	mov    BYTE PTR ds:0xc002dcf8,0x43
c0011511:	c1 e2 0b             	shl    edx,0xb
c0011514:	a3 f4 dc 02 c0       	mov    ds:0xc002dcf4,eax
c0011519:	89 15 f0 dc 02 c0    	mov    DWORD PTR ds:0xc002dcf0,edx
c001151f:	c7 05 ec dc 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002dcec,0x8
c0011529:	c1 ea 08             	shr    edx,0x8
c001152c:	89 14 24             	mov    DWORD PTR [esp],edx
c001152f:	e8 82 e0 ff ff       	call   c000f5b6 <malloc>
c0011534:	83 c4 0c             	add    esp,0xc
c0011537:	89 c1                	mov    ecx,eax
c0011539:	a3 ac ee 02 c0       	mov    ds:0xc002eeac,eax
c001153e:	31 d2                	xor    edx,edx
c0011540:	a1 f0 dc 02 c0       	mov    eax,ds:0xc002dcf0
c0011545:	f7 35 ec dc 02 c0    	div    DWORD PTR ds:0xc002dcec
c001154b:	c1 e8 05             	shr    eax,0x5
c001154e:	50                   	push   eax
c001154f:	6a 00                	push   0x0
c0011551:	51                   	push   ecx
c0011552:	e8 f9 f1 fe ff       	call   c0000750 <memset>
c0011557:	58                   	pop    eax
c0011558:	a1 f0 dc 02 c0       	mov    eax,ds:0xc002dcf0
c001155d:	5a                   	pop    edx
c001155e:	31 d2                	xor    edx,edx
c0011560:	f7 35 ec dc 02 c0    	div    DWORD PTR ds:0xc002dcec
c0011566:	c1 e8 05             	shr    eax,0x5
c0011569:	50                   	push   eax
c001156a:	68 b4 ad 02 c0       	push   0xc002adb4
c001156f:	e8 3b 10 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0011574:	83 c4 20             	add    esp,0x20
c0011577:	5b                   	pop    ebx
c0011578:	5e                   	pop    esi
c0011579:	5f                   	pop    edi
c001157a:	c3                   	ret    
c001157b:	83 ec 08             	sub    esp,0x8
c001157e:	50                   	push   eax
c001157f:	68 8d ad 02 c0       	push   0xc002ad8d
c0011584:	e8 26 10 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0011589:	83 c4 10             	add    esp,0x10
c001158c:	e9 0a ff ff ff       	jmp    c001149b <Virt::setupPageSwapping(int)+0xb4>
c0011591:	83 ec 08             	sub    esp,0x8
c0011594:	50                   	push   eax
c0011595:	68 69 ad 02 c0       	push   0xc002ad69
c001159a:	e8 10 10 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001159f:	c7 04 24 72 ad 02 c0 	mov    DWORD PTR [esp],0xc002ad72
c00115a6:	e8 d2 8a 00 00       	call   c001a07d <Krnl::panic(char const*)>
c00115ab:	83 c4 10             	add    esp,0x10
c00115ae:	e9 83 fe ff ff       	jmp    c0011436 <Virt::setupPageSwapping(int)+0x4f>
c00115b3:	90                   	nop

c00115b4 <VAS::VAS()>:
c00115b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115c3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115ce:	a3 b0 ee 02 c0       	mov    ds:0xc002eeb0,eax
c00115d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115d7:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00115db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115df:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00115e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115e6:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00115ed:	90                   	nop
c00115ee:	c3                   	ret    
c00115ef:	90                   	nop

c00115f0 <VAS::VAS(VAS*)>:
c00115f0:	83 ec 0c             	sub    esp,0xc
c00115f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011602:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011609:	83 ec 0c             	sub    esp,0xc
c001160c:	68 98 ab 02 c0       	push   0xc002ab98
c0011611:	e8 67 8a 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0011616:	83 c4 10             	add    esp,0x10
c0011619:	90                   	nop
c001161a:	83 c4 0c             	add    esp,0xc
c001161d:	c3                   	ret    

c001161e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001161e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011622:	89 c2                	mov    edx,eax
c0011624:	c1 e8 0a             	shr    eax,0xa
c0011627:	c1 ea 16             	shr    edx,0x16
c001162a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001162f:	19 c9                	sbb    ecx,ecx
c0011631:	c1 e2 0c             	shl    edx,0xc
c0011634:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001163a:	25 fc 0f 00 00       	and    eax,0xffc
c001163f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011646:	01 d0                	add    eax,edx
c0011648:	c3                   	ret    
c0011649:	90                   	nop

c001164a <VAS::getPageTableEntry(unsigned long)>:
c001164a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001164e:	89 ca                	mov    edx,ecx
c0011650:	c1 e9 0a             	shr    ecx,0xa
c0011653:	c1 ea 16             	shr    edx,0x16
c0011656:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001165c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011662:	c1 e0 0c             	shl    eax,0xc
c0011665:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011668:	c3                   	ret    

c0011669 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011669:	57                   	push   edi
c001166a:	56                   	push   esi
c001166b:	be 01 00 00 00       	mov    esi,0x1
c0011670:	53                   	push   ebx
c0011671:	83 ec 10             	sub    esp,0x10
c0011674:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011678:	c1 eb 0c             	shr    ebx,0xc
c001167b:	eb 3f                	jmp    c00116bc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001167d:	83 ec 08             	sub    esp,0x8
c0011680:	57                   	push   edi
c0011681:	ff 35 b0 ee 02 c0    	push   DWORD PTR ds:0xc002eeb0
c0011687:	e8 be ff ff ff       	call   c001164a <VAS::getPageTableEntry(unsigned long)>
c001168c:	83 c4 10             	add    esp,0x10
c001168f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011691:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011695:	f6 c4 04             	test   ah,0x4
c0011698:	75 5f                	jne    c00116f9 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001169a:	80 fa 04             	cmp    dl,0x4
c001169d:	74 78                	je     c0011717 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001169f:	80 fa 02             	cmp    dl,0x2
c00116a2:	0f 84 88 00 00 00    	je     c0011730 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00116a8:	80 fa 03             	cmp    dl,0x3
c00116ab:	0f 84 ad 00 00 00    	je     c001175e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00116b1:	fe ca                	dec    dl
c00116b3:	0f 84 92 00 00 00    	je     c001174b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116b9:	43                   	inc    ebx
c00116ba:	31 f6                	xor    esi,esi
c00116bc:	53                   	push   ebx
c00116bd:	89 df                	mov    edi,ebx
c00116bf:	e8 c1 fa ff ff       	call   c0011185 <Virt::getPageState(unsigned long)>
c00116c4:	c1 e7 0c             	shl    edi,0xc
c00116c7:	59                   	pop    ecx
c00116c8:	84 c0                	test   al,al
c00116ca:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00116ce:	75 ad                	jne    c001167d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00116d0:	83 ec 0c             	sub    esp,0xc
c00116d3:	68 cf ad 02 c0       	push   0xc002adcf
c00116d8:	e8 a0 89 00 00       	call   c001a07d <Krnl::panic(char const*)>
c00116dd:	58                   	pop    eax
c00116de:	5a                   	pop    edx
c00116df:	57                   	push   edi
c00116e0:	ff 35 b0 ee 02 c0    	push   DWORD PTR ds:0xc002eeb0
c00116e6:	e8 5f ff ff ff       	call   c001164a <VAS::getPageTableEntry(unsigned long)>
c00116eb:	83 c4 10             	add    esp,0x10
c00116ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00116f0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116f4:	f6 c4 04             	test   ah,0x4
c00116f7:	74 c0                	je     c00116b9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116f9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116fd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011702:	83 ec 0c             	sub    esp,0xc
c0011705:	50                   	push   eax
c0011706:	e8 f4 e1 ff ff       	call   c000f8ff <Phys::freePage(unsigned long)>
c001170b:	83 c4 10             	add    esp,0x10
c001170e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011712:	80 fa 04             	cmp    dl,0x4
c0011715:	75 88                	jne    c001169f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011717:	89 f0                	mov    eax,esi
c0011719:	84 c0                	test   al,al
c001171b:	75 47                	jne    c0011764 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001171d:	c7 44 24 20 bc ab 02 c0 	mov    DWORD PTR [esp+0x20],0xc002abbc
c0011725:	83 c4 10             	add    esp,0x10
c0011728:	5b                   	pop    ebx
c0011729:	5e                   	pop    esi
c001172a:	5f                   	pop    edi
c001172b:	e9 4d 89 00 00       	jmp    c001a07d <Krnl::panic(char const*)>
c0011730:	89 f0                	mov    eax,esi
c0011732:	84 c0                	test   al,al
c0011734:	75 15                	jne    c001174b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011736:	83 ec 0c             	sub    esp,0xc
c0011739:	68 eb ad 02 c0       	push   0xc002adeb
c001173e:	e8 3a 89 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0011743:	83 c4 10             	add    esp,0x10
c0011746:	e9 6e ff ff ff       	jmp    c00116b9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001174b:	83 ec 08             	sub    esp,0x8
c001174e:	6a 00                	push   0x0
c0011750:	53                   	push   ebx
c0011751:	e8 fa f9 ff ff       	call   c0011150 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011756:	83 c4 10             	add    esp,0x10
c0011759:	e9 5b ff ff ff       	jmp    c00116b9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001175e:	89 f0                	mov    eax,esi
c0011760:	84 c0                	test   al,al
c0011762:	75 15                	jne    c0011779 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011764:	83 ec 08             	sub    esp,0x8
c0011767:	6a 00                	push   0x0
c0011769:	53                   	push   ebx
c001176a:	e8 e1 f9 ff ff       	call   c0011150 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001176f:	83 c4 10             	add    esp,0x10
c0011772:	83 c4 10             	add    esp,0x10
c0011775:	5b                   	pop    ebx
c0011776:	5e                   	pop    esi
c0011777:	5f                   	pop    edi
c0011778:	c3                   	ret    
c0011779:	c7 44 24 20 07 ae 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ae07
c0011781:	83 c4 10             	add    esp,0x10
c0011784:	5b                   	pop    ebx
c0011785:	5e                   	pop    esi
c0011786:	5f                   	pop    edi
c0011787:	e9 f1 88 00 00       	jmp    c001a07d <Krnl::panic(char const*)>

c001178c <VAS::freeAllocatedPages(unsigned long)>:
c001178c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011790:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011794:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011798:	74 09                	je     c00117a3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001179a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001179e:	e9 c6 fe ff ff       	jmp    c0011669 <Virt::freeKernelVirtualPages(unsigned long)>
c00117a3:	c7 44 24 04 e0 ab 02 c0 	mov    DWORD PTR [esp+0x4],0xc002abe0
c00117ab:	e9 ff 0d 00 00       	jmp    c00125af <Dbg::kprintf(char const*, ...)>

c00117b0 <VAS::virtualToPhysical(unsigned long)>:
c00117b0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117b4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117b8:	e8 8d fe ff ff       	call   c001164a <VAS::getPageTableEntry(unsigned long)>
c00117bd:	5a                   	pop    edx
c00117be:	8b 00                	mov    eax,DWORD PTR [eax]
c00117c0:	59                   	pop    ecx
c00117c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117c6:	c3                   	ret    
c00117c7:	90                   	nop

c00117c8 <VAS::reflagRange(unsigned long, int, int, int)>:
c00117c8:	55                   	push   ebp
c00117c9:	57                   	push   edi
c00117ca:	56                   	push   esi
c00117cb:	53                   	push   ebx
c00117cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00117d0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00117d4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00117d8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00117dc:	85 db                	test   ebx,ebx
c00117de:	7e 22                	jle    c0011802 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00117e0:	c1 e3 0c             	shl    ebx,0xc
c00117e3:	01 f3                	add    ebx,esi
c00117e5:	56                   	push   esi
c00117e6:	81 c6 00 10 00 00    	add    esi,0x1000
c00117ec:	55                   	push   ebp
c00117ed:	e8 58 fe ff ff       	call   c001164a <VAS::getPageTableEntry(unsigned long)>
c00117f2:	5a                   	pop    edx
c00117f3:	59                   	pop    ecx
c00117f4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00117f6:	21 f9                	and    ecx,edi
c00117f8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00117fc:	39 f3                	cmp    ebx,esi
c00117fe:	89 08                	mov    DWORD PTR [eax],ecx
c0011800:	75 e3                	jne    c00117e5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011802:	5b                   	pop    ebx
c0011803:	5e                   	pop    esi
c0011804:	5f                   	pop    edi
c0011805:	5d                   	pop    ebp
c0011806:	c3                   	ret    
c0011807:	90                   	nop

c0011808 <VAS::setToWriteCombining(unsigned long, int)>:
c0011808:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c001180d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011813:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001181a:	75 01                	jne    c001181d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001181c:	c3                   	ret    
c001181d:	68 80 00 00 00       	push   0x80
c0011822:	6a ff                	push   0xffffffff
c0011824:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011828:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001182c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011830:	e8 93 ff ff ff       	call   c00117c8 <VAS::reflagRange(unsigned long, int, int, int)>
c0011835:	83 c4 14             	add    esp,0x14
c0011838:	c3                   	ret    
c0011839:	90                   	nop

c001183a <VAS::mapOtherVASIn(bool, VAS*)>:
c001183a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001183f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011843:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001184a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001184d:	19 c0                	sbb    eax,eax
c001184f:	83 ca 03             	or     edx,0x3
c0011852:	83 e0 fc             	and    eax,0xfffffffc
c0011855:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001185c:	0f 20 d8             	mov    eax,cr3
c001185f:	0f 22 d8             	mov    cr3,eax
c0011862:	c3                   	ret    
c0011863:	90                   	nop

c0011864 <VAS::~VAS()>:
c0011864:	83 ec 2c             	sub    esp,0x2c
c0011867:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001186f:	fa                   	cli    
c0011870:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0011875:	40                   	inc    eax
c0011876:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001187b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011880:	8b 00                	mov    eax,DWORD PTR [eax]
c0011882:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011885:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001188b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001188f:	6a 01                	push   0x1
c0011891:	50                   	push   eax
c0011892:	e8 a3 ff ff ff       	call   c001183a <VAS::mapOtherVASIn(bool, VAS*)>
c0011897:	83 c4 0c             	add    esp,0xc
c001189a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00118a2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00118aa:	0f 8f d4 00 00 00    	jg     c0011984 <VAS::~VAS()+0x120>
c00118b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00118bb:	c1 e2 02             	shl    edx,0x2
c00118be:	01 d0                	add    eax,edx
c00118c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00118c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00118c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ca:	83 e0 01             	and    eax,0x1
c00118cd:	0f 84 a8 00 00 00    	je     c001197b <VAS::~VAS()+0x117>
c00118d3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00118db:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00118e3:	7f 72                	jg     c0011957 <VAS::~VAS()+0xf3>
c00118e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118e9:	c1 e0 0a             	shl    eax,0xa
c00118ec:	89 c2                	mov    edx,eax
c00118ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118f2:	01 d0                	add    eax,edx
c00118f4:	c1 e0 0c             	shl    eax,0xc
c00118f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118fb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011900:	8b 00                	mov    eax,DWORD PTR [eax]
c0011902:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011905:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001190b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001190f:	6a 01                	push   0x1
c0011911:	50                   	push   eax
c0011912:	e8 07 fd ff ff       	call   c001161e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011917:	83 c4 0c             	add    esp,0xc
c001191a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001191e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011922:	8b 00                	mov    eax,DWORD PTR [eax]
c0011924:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011928:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001192c:	25 01 04 00 00       	and    eax,0x401
c0011931:	3d 01 04 00 00       	cmp    eax,0x401
c0011936:	75 19                	jne    c0011951 <VAS::~VAS()+0xed>
c0011938:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001193c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011941:	83 ec 0c             	sub    esp,0xc
c0011944:	50                   	push   eax
c0011945:	e8 b5 df ff ff       	call   c000f8ff <Phys::freePage(unsigned long)>
c001194a:	83 c4 10             	add    esp,0x10
c001194d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011951:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011955:	eb 84                	jmp    c00118db <VAS::~VAS()+0x77>
c0011957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001195b:	25 00 04 00 00       	and    eax,0x400
c0011960:	74 19                	je     c001197b <VAS::~VAS()+0x117>
c0011962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011966:	25 00 f0 ff ff       	and    eax,0xfffff000
c001196b:	83 ec 0c             	sub    esp,0xc
c001196e:	50                   	push   eax
c001196f:	e8 8b df ff ff       	call   c000f8ff <Phys::freePage(unsigned long)>
c0011974:	83 c4 10             	add    esp,0x10
c0011977:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001197b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001197f:	e9 1e ff ff ff       	jmp    c00118a2 <VAS::~VAS()+0x3e>
c0011984:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011988:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001198b:	83 ec 0c             	sub    esp,0xc
c001198e:	50                   	push   eax
c001198f:	e8 d5 fc ff ff       	call   c0011669 <Virt::freeKernelVirtualPages(unsigned long)>
c0011994:	83 c4 10             	add    esp,0x10
c0011997:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001199b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001199e:	83 ec 0c             	sub    esp,0xc
c00119a1:	50                   	push   eax
c00119a2:	e8 58 df ff ff       	call   c000f8ff <Phys::freePage(unsigned long)>
c00119a7:	83 c4 10             	add    esp,0x10
c00119aa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119b2:	c1 e0 02             	shl    eax,0x2
c00119b5:	83 ec 08             	sub    esp,0x8
c00119b8:	50                   	push   eax
c00119b9:	68 04 ac 02 c0       	push   0xc002ac04
c00119be:	e8 ec 0b 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00119c3:	83 c4 10             	add    esp,0x10
c00119c6:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c00119cb:	48                   	dec    eax
c00119cc:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c00119d1:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c00119d6:	85 c0                	test   eax,eax
c00119d8:	75 01                	jne    c00119db <VAS::~VAS()+0x177>
c00119da:	fb                   	sti    
c00119db:	90                   	nop
c00119dc:	83 c4 2c             	add    esp,0x2c
c00119df:	c3                   	ret    

c00119e0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00119e0:	55                   	push   ebp
c00119e1:	57                   	push   edi
c00119e2:	56                   	push   esi
c00119e3:	53                   	push   ebx
c00119e4:	83 ec 1c             	sub    esp,0x1c
c00119e7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00119eb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00119ef:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00119f5:	77 08                	ja     c00119ff <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00119f7:	0f 20 d8             	mov    eax,cr3
c00119fa:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00119fd:	75 47                	jne    c0011a46 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00119ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a03:	09 d8                	or     eax,ebx
c0011a05:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a0a:	75 57                	jne    c0011a63 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011a0c:	89 de                	mov    esi,ebx
c0011a0e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a11:	c1 ee 16             	shr    esi,0x16
c0011a14:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011a1b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011a1f:	74 54                	je     c0011a75 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011a21:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a25:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011a2b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011a2f:	c1 e6 0c             	shl    esi,0xc
c0011a32:	c1 eb 0a             	shr    ebx,0xa
c0011a35:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011a3b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011a3e:	83 c4 1c             	add    esp,0x1c
c0011a41:	5b                   	pop    ebx
c0011a42:	5e                   	pop    esi
c0011a43:	5f                   	pop    edi
c0011a44:	5d                   	pop    ebp
c0011a45:	c3                   	ret    
c0011a46:	83 ec 0c             	sub    esp,0xc
c0011a49:	68 24 ac 02 c0       	push   0xc002ac24
c0011a4e:	e8 5c 0b 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0011a53:	83 c4 10             	add    esp,0x10
c0011a56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a5a:	09 d8                	or     eax,ebx
c0011a5c:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a61:	74 a9                	je     c0011a0c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a63:	83 ec 0c             	sub    esp,0xc
c0011a66:	68 8c ac 02 c0       	push   0xc002ac8c
c0011a6b:	e8 0d 86 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0011a70:	83 c4 10             	add    esp,0x10
c0011a73:	eb 97                	jmp    c0011a0c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a79:	e8 dc de ff ff       	call   c000f95a <Phys::allocatePage()>
c0011a7e:	83 ec 0c             	sub    esp,0xc
c0011a81:	89 c5                	mov    ebp,eax
c0011a83:	8b 0d b0 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002eeb0
c0011a89:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a8d:	6a 01                	push   0x1
c0011a8f:	e8 15 f7 ff ff       	call   c00111a9 <Virt::allocateKernelVirtualPages(int)>
c0011a94:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a9b:	6a 01                	push   0x1
c0011a9d:	50                   	push   eax
c0011a9e:	55                   	push   ebp
c0011a9f:	81 cd 07 04 00 00    	or     ebp,0x407
c0011aa5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011aa9:	51                   	push   ecx
c0011aaa:	e8 27 02 00 00       	call   c0011cd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011aaf:	83 c4 1c             	add    esp,0x1c
c0011ab2:	68 00 10 00 00       	push   0x1000
c0011ab7:	6a 00                	push   0x0
c0011ab9:	50                   	push   eax
c0011aba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011abe:	e8 8d ec fe ff       	call   c0000750 <memset>
c0011ac3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011ac7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011aca:	e8 9a fb ff ff       	call   c0011669 <Virt::freeKernelVirtualPages(unsigned long)>
c0011acf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ad3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011ad6:	83 c4 10             	add    esp,0x10
c0011ad9:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011adc:	e9 40 ff ff ff       	jmp    c0011a21 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011ae1:	90                   	nop

c0011ae2 <VAS::allocatePages(int, int)>:
c0011ae2:	55                   	push   ebp
c0011ae3:	57                   	push   edi
c0011ae4:	56                   	push   esi
c0011ae5:	53                   	push   ebx
c0011ae6:	83 ec 1c             	sub    esp,0x1c
c0011ae9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011aed:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0011af2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011af8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011afe:	83 e0 01             	and    eax,0x1
c0011b01:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011b05:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b09:	0f 85 cc 00 00 00    	jne    c0011bdb <VAS::allocatePages(int, int)+0xf9>
c0011b0f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b16:	85 c0                	test   eax,eax
c0011b18:	0f 84 a1 00 00 00    	je     c0011bbf <VAS::allocatePages(int, int)+0xdd>
c0011b1e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011b22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b26:	c1 e6 0c             	shl    esi,0xc
c0011b29:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011b2d:	85 c0                	test   eax,eax
c0011b2f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011b32:	7e 33                	jle    c0011b67 <VAS::allocatePages(int, int)+0x85>
c0011b34:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011b38:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b3c:	81 cd 00 04 00 00    	or     ebp,0x400
c0011b42:	e8 13 de ff ff       	call   c000f95a <Phys::allocatePage()>
c0011b47:	55                   	push   ebp
c0011b48:	53                   	push   ebx
c0011b49:	50                   	push   eax
c0011b4a:	57                   	push   edi
c0011b4b:	e8 90 fe ff ff       	call   c00119e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b50:	83 c4 10             	add    esp,0x10
c0011b53:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b58:	74 03                	je     c0011b5d <VAS::allocatePages(int, int)+0x7b>
c0011b5a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b5d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b63:	39 de                	cmp    esi,ebx
c0011b65:	75 db                	jne    c0011b42 <VAS::allocatePages(int, int)+0x60>
c0011b67:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b6c:	75 12                	jne    c0011b80 <VAS::allocatePages(int, int)+0x9e>
c0011b6e:	0f 20 d8             	mov    eax,cr3
c0011b71:	0f 22 d8             	mov    cr3,eax
c0011b74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b78:	83 c4 1c             	add    esp,0x1c
c0011b7b:	5b                   	pop    ebx
c0011b7c:	5e                   	pop    esi
c0011b7d:	5f                   	pop    edi
c0011b7e:	5d                   	pop    ebp
c0011b7f:	c3                   	ret    
c0011b80:	c1 ee 0a             	shr    esi,0xa
c0011b83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b87:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b8d:	c1 eb 0a             	shr    ebx,0xa
c0011b90:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b96:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b9c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ba2:	39 c3                	cmp    ebx,eax
c0011ba4:	77 ce                	ja     c0011b74 <VAS::allocatePages(int, int)+0x92>
c0011ba6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ba9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011baf:	39 d8                	cmp    eax,ebx
c0011bb1:	73 f3                	jae    c0011ba6 <VAS::allocatePages(int, int)+0xc4>
c0011bb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bb7:	83 c4 1c             	add    esp,0x1c
c0011bba:	5b                   	pop    ebx
c0011bbb:	5e                   	pop    esi
c0011bbc:	5f                   	pop    edi
c0011bbd:	5d                   	pop    ebp
c0011bbe:	c3                   	ret    
c0011bbf:	83 ec 0c             	sub    esp,0xc
c0011bc2:	68 b0 ac 02 c0       	push   0xc002acb0
c0011bc7:	e8 b1 84 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0011bcc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011bcf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011bd3:	83 c4 10             	add    esp,0x10
c0011bd6:	e9 43 ff ff ff       	jmp    c0011b1e <VAS::allocatePages(int, int)+0x3c>
c0011bdb:	83 ec 0c             	sub    esp,0xc
c0011bde:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011be2:	e8 c2 f5 ff ff       	call   c00111a9 <Virt::allocateKernelVirtualPages(int)>
c0011be7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011beb:	83 c4 10             	add    esp,0x10
c0011bee:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011bf3:	0f 87 9b 00 00 00    	ja     c0011c94 <VAS::allocatePages(int, int)+0x1b2>
c0011bf9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011bfd:	85 d2                	test   edx,edx
c0011bff:	7e 3c                	jle    c0011c3d <VAS::allocatePages(int, int)+0x15b>
c0011c01:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c05:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011c09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c0d:	c1 e5 0c             	shl    ebp,0xc
c0011c10:	81 ce 00 04 00 00    	or     esi,0x400
c0011c16:	01 dd                	add    ebp,ebx
c0011c18:	e8 3d dd ff ff       	call   c000f95a <Phys::allocatePage()>
c0011c1d:	56                   	push   esi
c0011c1e:	53                   	push   ebx
c0011c1f:	50                   	push   eax
c0011c20:	57                   	push   edi
c0011c21:	e8 ba fd ff ff       	call   c00119e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c26:	83 c4 10             	add    esp,0x10
c0011c29:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c2e:	74 03                	je     c0011c33 <VAS::allocatePages(int, int)+0x151>
c0011c30:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c33:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c39:	39 dd                	cmp    ebp,ebx
c0011c3b:	75 db                	jne    c0011c18 <VAS::allocatePages(int, int)+0x136>
c0011c3d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c42:	0f 84 26 ff ff ff    	je     c0011b6e <VAS::allocatePages(int, int)+0x8c>
c0011c48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c4c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c50:	89 d3                	mov    ebx,edx
c0011c52:	c1 e0 0c             	shl    eax,0xc
c0011c55:	c1 eb 0a             	shr    ebx,0xa
c0011c58:	01 d0                	add    eax,edx
c0011c5a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c60:	c1 e8 0a             	shr    eax,0xa
c0011c63:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c69:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c6e:	2d 00 00 40 00       	sub    eax,0x400000
c0011c73:	39 c3                	cmp    ebx,eax
c0011c75:	0f 87 f9 fe ff ff    	ja     c0011b74 <VAS::allocatePages(int, int)+0x92>
c0011c7b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c7e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c84:	39 d8                	cmp    eax,ebx
c0011c86:	73 f3                	jae    c0011c7b <VAS::allocatePages(int, int)+0x199>
c0011c88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c8c:	83 c4 1c             	add    esp,0x1c
c0011c8f:	5b                   	pop    ebx
c0011c90:	5e                   	pop    esi
c0011c91:	5f                   	pop    edi
c0011c92:	5d                   	pop    ebp
c0011c93:	c3                   	ret    
c0011c94:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0011c99:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c9f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011ca6:	0f 84 4d ff ff ff    	je     c0011bf9 <VAS::allocatePages(int, int)+0x117>
c0011cac:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011cb4:	e9 40 ff ff ff       	jmp    c0011bf9 <VAS::allocatePages(int, int)+0x117>
c0011cb9:	90                   	nop

c0011cba <VAS::setCPUSpecific(unsigned long)>:
c0011cba:	83 ec 0c             	sub    esp,0xc
c0011cbd:	6a 05                	push   0x5
c0011cbf:	68 00 00 40 c2       	push   0xc2400000
c0011cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ccc:	e8 0f fd ff ff       	call   c00119e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cd1:	83 c4 1c             	add    esp,0x1c
c0011cd4:	c3                   	ret    
c0011cd5:	90                   	nop

c0011cd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011cd6:	55                   	push   ebp
c0011cd7:	57                   	push   edi
c0011cd8:	56                   	push   esi
c0011cd9:	53                   	push   ebx
c0011cda:	83 ec 1c             	sub    esp,0x1c
c0011cdd:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0011ce2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ce6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011cec:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011cf0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011cf6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011cfa:	83 e0 01             	and    eax,0x1
c0011cfd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011d01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d05:	85 c0                	test   eax,eax
c0011d07:	7e 39                	jle    c0011d42 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011d09:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d0d:	89 f3                	mov    ebx,esi
c0011d0f:	c1 e0 0c             	shl    eax,0xc
c0011d12:	01 f0                	add    eax,esi
c0011d14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d18:	55                   	push   ebp
c0011d19:	53                   	push   ebx
c0011d1a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d1e:	29 f0                	sub    eax,esi
c0011d20:	01 d8                	add    eax,ebx
c0011d22:	50                   	push   eax
c0011d23:	57                   	push   edi
c0011d24:	e8 b7 fc ff ff       	call   c00119e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d29:	83 c4 10             	add    esp,0x10
c0011d2c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d31:	74 03                	je     c0011d36 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011d33:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d36:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d3c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011d40:	75 d6                	jne    c0011d18 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011d42:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d47:	75 10                	jne    c0011d59 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011d49:	0f 20 d8             	mov    eax,cr3
c0011d4c:	0f 22 d8             	mov    cr3,eax
c0011d4f:	83 c4 1c             	add    esp,0x1c
c0011d52:	89 f0                	mov    eax,esi
c0011d54:	5b                   	pop    ebx
c0011d55:	5e                   	pop    esi
c0011d56:	5f                   	pop    edi
c0011d57:	5d                   	pop    ebp
c0011d58:	c3                   	ret    
c0011d59:	89 f3                	mov    ebx,esi
c0011d5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d5f:	c1 eb 0a             	shr    ebx,0xa
c0011d62:	c1 e0 0c             	shl    eax,0xc
c0011d65:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d6b:	01 f0                	add    eax,esi
c0011d6d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d73:	c1 e8 0a             	shr    eax,0xa
c0011d76:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d7b:	2d 00 00 40 00       	sub    eax,0x400000
c0011d80:	39 c3                	cmp    ebx,eax
c0011d82:	77 cb                	ja     c0011d4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d84:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d87:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d8d:	39 d8                	cmp    eax,ebx
c0011d8f:	73 f3                	jae    c0011d84 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d91:	83 c4 1c             	add    esp,0x1c
c0011d94:	89 f0                	mov    eax,esi
c0011d96:	5b                   	pop    ebx
c0011d97:	5e                   	pop    esi
c0011d98:	5f                   	pop    edi
c0011d99:	5d                   	pop    ebp
c0011d9a:	c3                   	ret    
c0011d9b:	90                   	nop

c0011d9c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d9c:	55                   	push   ebp
c0011d9d:	57                   	push   edi
c0011d9e:	56                   	push   esi
c0011d9f:	53                   	push   ebx
c0011da0:	83 ec 1c             	sub    esp,0x1c
c0011da3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011da7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011dab:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011daf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011db3:	a9 ff 0f 00 00       	test   eax,0xfff
c0011db8:	75 4a                	jne    c0011e04 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011dba:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011dbe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011dc1:	c1 eb 16             	shr    ebx,0x16
c0011dc4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011dcb:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011dcf:	74 4d                	je     c0011e1e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011dd1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011dd5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011dd9:	c1 e8 0a             	shr    eax,0xa
c0011ddc:	80 fa 01             	cmp    dl,0x1
c0011ddf:	19 d2                	sbb    edx,edx
c0011de1:	c1 e3 0c             	shl    ebx,0xc
c0011de4:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011de8:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011dee:	25 fc 0f 00 00       	and    eax,0xffc
c0011df3:	01 d8                	add    eax,ebx
c0011df5:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011dfc:	83 c4 1c             	add    esp,0x1c
c0011dff:	5b                   	pop    ebx
c0011e00:	5e                   	pop    esi
c0011e01:	5f                   	pop    edi
c0011e02:	5d                   	pop    ebp
c0011e03:	c3                   	ret    
c0011e04:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e08:	83 ec 0c             	sub    esp,0xc
c0011e0b:	68 dc ac 02 c0       	push   0xc002acdc
c0011e10:	e8 68 82 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0011e15:	83 c4 10             	add    esp,0x10
c0011e18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e1c:	eb 9c                	jmp    c0011dba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011e1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e22:	e8 33 db ff ff       	call   c000f95a <Phys::allocatePage()>
c0011e27:	83 ec 0c             	sub    esp,0xc
c0011e2a:	89 c5                	mov    ebp,eax
c0011e2c:	8b 0d b0 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002eeb0
c0011e32:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011e36:	6a 01                	push   0x1
c0011e38:	e8 6c f3 ff ff       	call   c00111a9 <Virt::allocateKernelVirtualPages(int)>
c0011e3d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e44:	6a 01                	push   0x1
c0011e46:	50                   	push   eax
c0011e47:	55                   	push   ebp
c0011e48:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e4e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e52:	51                   	push   ecx
c0011e53:	e8 7e fe ff ff       	call   c0011cd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e58:	83 c4 1c             	add    esp,0x1c
c0011e5b:	68 00 10 00 00       	push   0x1000
c0011e60:	6a 00                	push   0x0
c0011e62:	50                   	push   eax
c0011e63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e67:	e8 e4 e8 fe ff       	call   c0000750 <memset>
c0011e6c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e70:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e73:	e8 f1 f7 ff ff       	call   c0011669 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e78:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e7b:	83 c4 10             	add    esp,0x10
c0011e7e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e85:	e9 47 ff ff ff       	jmp    c0011dd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e8a <VAS::VAS(bool)>:
c0011e8a:	53                   	push   ebx
c0011e8b:	83 ec 28             	sub    esp,0x28
c0011e8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e92:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ea1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ea5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011eac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eb0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011eb4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011eb7:	e8 9e da ff ff       	call   c000f95a <Phys::allocatePage()>
c0011ebc:	89 c2                	mov    edx,eax
c0011ebe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ec2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011ec5:	8b 1d b0 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eeb0
c0011ecb:	83 ec 0c             	sub    esp,0xc
c0011ece:	6a 01                	push   0x1
c0011ed0:	e8 d4 f2 ff ff       	call   c00111a9 <Virt::allocateKernelVirtualPages(int)>
c0011ed5:	83 c4 10             	add    esp,0x10
c0011ed8:	89 c2                	mov    edx,eax
c0011eda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ede:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011ee1:	83 ec 0c             	sub    esp,0xc
c0011ee4:	6a 03                	push   0x3
c0011ee6:	6a 01                	push   0x1
c0011ee8:	52                   	push   edx
c0011ee9:	50                   	push   eax
c0011eea:	53                   	push   ebx
c0011eeb:	e8 e6 fd ff ff       	call   c0011cd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ef0:	83 c4 20             	add    esp,0x20
c0011ef3:	89 c2                	mov    edx,eax
c0011ef5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011efc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011f04:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011f0c:	7f 1c                	jg     c0011f2a <VAS::VAS(bool)+0xa0>
c0011f0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f12:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f15:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f19:	c1 e2 02             	shl    edx,0x2
c0011f1c:	01 d0                	add    eax,edx
c0011f1e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f24:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f28:	eb da                	jmp    c0011f04 <VAS::VAS(bool)+0x7a>
c0011f2a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011f32:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011f3a:	7f 7a                	jg     c0011fb6 <VAS::VAS(bool)+0x12c>
c0011f3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f40:	2d 00 02 00 00       	sub    eax,0x200
c0011f45:	c1 e0 0c             	shl    eax,0xc
c0011f48:	83 c8 03             	or     eax,0x3
c0011f4b:	89 c2                	mov    edx,eax
c0011f4d:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0011f52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f58:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f5e:	83 e0 10             	and    eax,0x10
c0011f61:	84 c0                	test   al,al
c0011f63:	74 07                	je     c0011f6c <VAS::VAS(bool)+0xe2>
c0011f65:	b8 00 01 00 00       	mov    eax,0x100
c0011f6a:	eb 05                	jmp    c0011f71 <VAS::VAS(bool)+0xe7>
c0011f6c:	b8 00 00 00 00       	mov    eax,0x0
c0011f71:	09 d0                	or     eax,edx
c0011f73:	89 c1                	mov    ecx,eax
c0011f75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f80:	c1 e2 02             	shl    edx,0x2
c0011f83:	01 d0                	add    eax,edx
c0011f85:	89 ca                	mov    edx,ecx
c0011f87:	89 10                	mov    DWORD PTR [eax],edx
c0011f89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f8d:	2d 40 03 00 00       	sub    eax,0x340
c0011f92:	83 f8 7f             	cmp    eax,0x7f
c0011f95:	77 16                	ja     c0011fad <VAS::VAS(bool)+0x123>
c0011f97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f9e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011fa2:	c1 e2 02             	shl    edx,0x2
c0011fa5:	01 d0                	add    eax,edx
c0011fa7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011fad:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011fb1:	e9 7c ff ff ff       	jmp    c0011f32 <VAS::VAS(bool)+0xa8>
c0011fb6:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0011fbb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fc1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fc7:	83 e0 10             	and    eax,0x10
c0011fca:	84 c0                	test   al,al
c0011fcc:	74 07                	je     c0011fd5 <VAS::VAS(bool)+0x14b>
c0011fce:	b8 03 41 00 00       	mov    eax,0x4103
c0011fd3:	eb 05                	jmp    c0011fda <VAS::VAS(bool)+0x150>
c0011fd5:	b8 03 40 00 00       	mov    eax,0x4003
c0011fda:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011fde:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011fe1:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011fe7:	89 02                	mov    DWORD PTR [edx],eax
c0011fe9:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0011fee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ff4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011ffa:	83 ec 08             	sub    esp,0x8
c0011ffd:	50                   	push   eax
c0011ffe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012002:	e8 b3 fc ff ff       	call   c0011cba <VAS::setCPUSpecific(unsigned long)>
c0012007:	83 c4 10             	add    esp,0x10
c001200a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001200e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012011:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0012016:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001201c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012022:	83 e0 10             	and    eax,0x10
c0012025:	84 c0                	test   al,al
c0012027:	74 07                	je     c0012030 <VAS::VAS(bool)+0x1a6>
c0012029:	b8 00 01 00 00       	mov    eax,0x100
c001202e:	eb 05                	jmp    c0012035 <VAS::VAS(bool)+0x1ab>
c0012030:	b8 00 00 00 00       	mov    eax,0x0
c0012035:	09 c2                	or     edx,eax
c0012037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001203b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001203e:	05 fc 0f 00 00       	add    eax,0xffc
c0012043:	83 ca 03             	or     edx,0x3
c0012046:	89 10                	mov    DWORD PTR [eax],edx
c0012048:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c001204d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012053:	83 ec 0c             	sub    esp,0xc
c0012056:	50                   	push   eax
c0012057:	e8 8c 1c 00 00       	call   c0013ce8 <Device::getName()>
c001205c:	83 c4 10             	add    esp,0x10
c001205f:	83 ec 08             	sub    esp,0x8
c0012062:	68 21 ae 02 c0       	push   0xc002ae21
c0012067:	50                   	push   eax
c0012068:	e8 2b e8 fe ff       	call   c0000898 <strcmp>
c001206d:	83 c4 10             	add    esp,0x10
c0012070:	85 c0                	test   eax,eax
c0012072:	0f 94 c0             	sete   al
c0012075:	84 c0                	test   al,al
c0012077:	0f 84 87 00 00 00    	je     c0012104 <VAS::VAS(bool)+0x27a>
c001207d:	fa                   	cli    
c001207e:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0012083:	40                   	inc    eax
c0012084:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c0012089:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c001208e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012094:	05 7c 09 00 00       	add    eax,0x97c
c0012099:	83 ec 0c             	sub    esp,0xc
c001209c:	50                   	push   eax
c001209d:	e8 96 cf ff ff       	call   c000f038 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120a2:	83 c4 10             	add    esp,0x10
c00120a5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120aa:	89 c3                	mov    ebx,eax
c00120ac:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c00120b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120b7:	05 7c 09 00 00       	add    eax,0x97c
c00120bc:	83 ec 0c             	sub    esp,0xc
c00120bf:	50                   	push   eax
c00120c0:	e8 73 cf ff ff       	call   c000f038 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120c5:	83 c4 10             	add    esp,0x10
c00120c8:	83 ec 08             	sub    esp,0x8
c00120cb:	50                   	push   eax
c00120cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120d0:	e8 75 f5 ff ff       	call   c001164a <VAS::getPageTableEntry(unsigned long)>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00120da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120df:	6a 11                	push   0x11
c00120e1:	53                   	push   ebx
c00120e2:	50                   	push   eax
c00120e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120e7:	e8 f4 f8 ff ff       	call   c00119e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120ec:	83 c4 10             	add    esp,0x10
c00120ef:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c00120f4:	48                   	dec    eax
c00120f5:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c00120fa:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c00120ff:	85 c0                	test   eax,eax
c0012101:	75 01                	jne    c0012104 <VAS::VAS(bool)+0x27a>
c0012103:	fb                   	sti    
c0012104:	90                   	nop
c0012105:	83 c4 28             	add    esp,0x28
c0012108:	5b                   	pop    ebx
c0012109:	c3                   	ret    

c001210a <VAS::evict(unsigned long)>:
c001210a:	55                   	push   ebp
c001210b:	57                   	push   edi
c001210c:	56                   	push   esi
c001210d:	53                   	push   ebx
c001210e:	83 ec 1c             	sub    esp,0x1c
c0012111:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012115:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012119:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001211d:	e8 c8 f1 ff ff       	call   c00112ea <Virt::allocateSwapfilePage()>
c0012122:	89 c7                	mov    edi,eax
c0012124:	a1 ec dc 02 c0       	mov    eax,ds:0xc002dcec
c0012129:	85 c0                	test   eax,eax
c001212b:	7e 3d                	jle    c001216a <VAS::evict(unsigned long)+0x60>
c001212d:	89 ee                	mov    esi,ebp
c001212f:	31 db                	xor    ebx,ebx
c0012131:	83 ec 0c             	sub    esp,0xc
c0012134:	57                   	push   edi
c0012135:	e8 9e f1 ff ff       	call   c00112d8 <Virt::swapIDToSector(unsigned long)>
c001213a:	89 34 24             	mov    DWORD PTR [esp],esi
c001213d:	01 d8                	add    eax,ebx
c001213f:	6a 01                	push   0x1
c0012141:	31 d2                	xor    edx,edx
c0012143:	43                   	inc    ebx
c0012144:	52                   	push   edx
c0012145:	81 c6 00 02 00 00    	add    esi,0x200
c001214b:	50                   	push   eax
c001214c:	0f be 05 f8 dc 02 c0 	movsx  eax,BYTE PTR ds:0xc002dcf8
c0012153:	ff 34 85 3c f2 02 c0 	push   DWORD PTR [eax*4-0x3ffd0dc4]
c001215a:	e8 39 3e 00 00       	call   c0015f98 <LogicalDisk::write(unsigned long long, int, void*)>
c001215f:	83 c4 20             	add    esp,0x20
c0012162:	39 1d ec dc 02 c0    	cmp    DWORD PTR ds:0xc002dcec,ebx
c0012168:	7f c7                	jg     c0012131 <VAS::evict(unsigned long)+0x27>
c001216a:	83 ec 08             	sub    esp,0x8
c001216d:	c1 e7 0b             	shl    edi,0xb
c0012170:	55                   	push   ebp
c0012171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012175:	e8 d0 f4 ff ff       	call   c001164a <VAS::getPageTableEntry(unsigned long)>
c001217a:	83 c4 0c             	add    esp,0xc
c001217d:	8b 10                	mov    edx,DWORD PTR [eax]
c001217f:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012185:	09 d7                	or     edi,edx
c0012187:	89 38                	mov    DWORD PTR [eax],edi
c0012189:	a1 a8 ee 02 c0       	mov    eax,ds:0xc002eea8
c001218e:	40                   	inc    eax
c001218f:	a3 a8 ee 02 c0       	mov    ds:0xc002eea8,eax
c0012194:	0f 20 da             	mov    edx,cr3
c0012197:	0f 22 da             	mov    cr3,edx
c001219a:	50                   	push   eax
c001219b:	55                   	push   ebp
c001219c:	68 2f ae 02 c0       	push   0xc002ae2f
c00121a1:	e8 09 04 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00121a6:	a1 a4 ee 02 c0       	mov    eax,ds:0xc002eea4
c00121ab:	c7 44 24 40 44 ae 02 c0 	mov    DWORD PTR [esp+0x40],0xc002ae44
c00121b3:	8d 50 01             	lea    edx,[eax+0x1]
c00121b6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00121ba:	89 15 a4 ee 02 c0    	mov    DWORD PTR ds:0xc002eea4,edx
c00121c0:	83 c4 2c             	add    esp,0x2c
c00121c3:	5b                   	pop    ebx
c00121c4:	5e                   	pop    esi
c00121c5:	5f                   	pop    edi
c00121c6:	5d                   	pop    ebp
c00121c7:	e9 e3 03 00 00       	jmp    c00125af <Dbg::kprintf(char const*, ...)>

c00121cc <VAS::tryLoadBackOffDisk(unsigned long)>:
c00121cc:	55                   	push   ebp
c00121cd:	57                   	push   edi
c00121ce:	56                   	push   esi
c00121cf:	53                   	push   ebx
c00121d0:	83 ec 0c             	sub    esp,0xc
c00121d3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00121d7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00121dd:	0f 84 dc 00 00 00    	je     c00122bf <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c00121e3:	56                   	push   esi
c00121e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00121e8:	e8 5d f4 ff ff       	call   c001164a <VAS::getPageTableEntry(unsigned long)>
c00121ed:	5b                   	pop    ebx
c00121ee:	85 c0                	test   eax,eax
c00121f0:	5f                   	pop    edi
c00121f1:	89 c3                	mov    ebx,eax
c00121f3:	0f 84 c6 00 00 00    	je     c00122bf <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c00121f9:	8b 38                	mov    edi,DWORD PTR [eax]
c00121fb:	31 c0                	xor    eax,eax
c00121fd:	89 fa                	mov    edx,edi
c00121ff:	81 e2 01 04 00 00    	and    edx,0x401
c0012205:	81 fa 00 04 00 00    	cmp    edx,0x400
c001220b:	0f 85 b0 00 00 00    	jne    c00122c1 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012211:	e8 44 d7 ff ff       	call   c000f95a <Phys::allocatePage()>
c0012216:	c1 ef 0b             	shr    edi,0xb
c0012219:	8b 13                	mov    edx,DWORD PTR [ebx]
c001221b:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012221:	09 c2                	or     edx,eax
c0012223:	81 ca 01 08 00 00    	or     edx,0x801
c0012229:	89 13                	mov    DWORD PTR [ebx],edx
c001222b:	8b 0d ec dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dcec
c0012231:	85 c9                	test   ecx,ecx
c0012233:	7e 3d                	jle    c0012272 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012235:	89 f5                	mov    ebp,esi
c0012237:	31 db                	xor    ebx,ebx
c0012239:	83 ec 0c             	sub    esp,0xc
c001223c:	57                   	push   edi
c001223d:	e8 96 f0 ff ff       	call   c00112d8 <Virt::swapIDToSector(unsigned long)>
c0012242:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012245:	01 d8                	add    eax,ebx
c0012247:	6a 01                	push   0x1
c0012249:	31 d2                	xor    edx,edx
c001224b:	43                   	inc    ebx
c001224c:	52                   	push   edx
c001224d:	81 c5 00 02 00 00    	add    ebp,0x200
c0012253:	50                   	push   eax
c0012254:	0f be 05 f8 dc 02 c0 	movsx  eax,BYTE PTR ds:0xc002dcf8
c001225b:	ff 34 85 3c f2 02 c0 	push   DWORD PTR [eax*4-0x3ffd0dc4]
c0012262:	e8 c5 3c 00 00       	call   c0015f2c <LogicalDisk::read(unsigned long long, int, void*)>
c0012267:	83 c4 20             	add    esp,0x20
c001226a:	39 1d ec dc 02 c0    	cmp    DWORD PTR ds:0xc002dcec,ebx
c0012270:	7f c7                	jg     c0012239 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012272:	a1 a8 ee 02 c0       	mov    eax,ds:0xc002eea8
c0012277:	48                   	dec    eax
c0012278:	52                   	push   edx
c0012279:	a3 a8 ee 02 c0       	mov    ds:0xc002eea8,eax
c001227e:	50                   	push   eax
c001227f:	56                   	push   esi
c0012280:	68 55 ae 02 c0       	push   0xc002ae55
c0012285:	e8 25 03 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001228a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001228d:	e8 28 f0 ff ff       	call   c00112ba <Virt::freeSwapfilePage(unsigned long)>
c0012292:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0012297:	83 c4 10             	add    esp,0x10
c001229a:	48                   	dec    eax
c001229b:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c00122a0:	85 c0                	test   eax,eax
c00122a2:	75 01                	jne    c00122a5 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c00122a4:	fb                   	sti    
c00122a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00122a9:	25 ff 0f 00 00       	and    eax,0xfff
c00122ae:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00122b3:	77 14                	ja     c00122c9 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c00122b5:	0f 20 d8             	mov    eax,cr3
c00122b8:	0f 22 d8             	mov    cr3,eax
c00122bb:	b0 01                	mov    al,0x1
c00122bd:	eb 02                	jmp    c00122c1 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c00122bf:	31 c0                	xor    eax,eax
c00122c1:	83 c4 0c             	add    esp,0xc
c00122c4:	5b                   	pop    ebx
c00122c5:	5e                   	pop    esi
c00122c6:	5f                   	pop    edi
c00122c7:	5d                   	pop    ebp
c00122c8:	c3                   	ret    
c00122c9:	83 ec 0c             	sub    esp,0xc
c00122cc:	68 6a ae 02 c0       	push   0xc002ae6a
c00122d1:	e8 d9 02 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00122d6:	83 c4 10             	add    esp,0x10
c00122d9:	eb da                	jmp    c00122b5 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c00122db:	90                   	nop

c00122dc <VAS::scanForEviction()>:
c00122dc:	57                   	push   edi
c00122dd:	56                   	push   esi
c00122de:	53                   	push   ebx
c00122df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00122e3:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00122e6:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00122ec:	75 0e                	jne    c00122fc <VAS::scanForEviction()+0x20>
c00122ee:	89 da                	mov    edx,ebx
c00122f0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00122f3:	c1 ea 16             	shr    edx,0x16
c00122f6:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00122fa:	74 48                	je     c0012344 <VAS::scanForEviction()+0x68>
c00122fc:	53                   	push   ebx
c00122fd:	56                   	push   esi
c00122fe:	e8 47 f3 ff ff       	call   c001164a <VAS::getPageTableEntry(unsigned long)>
c0012303:	5a                   	pop    edx
c0012304:	8b 38                	mov    edi,DWORD PTR [eax]
c0012306:	59                   	pop    ecx
c0012307:	89 fa                	mov    edx,edi
c0012309:	81 e2 00 0c 00 00    	and    edx,0xc00
c001230f:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012315:	74 3d                	je     c0012354 <VAS::scanForEviction()+0x78>
c0012317:	81 c3 00 10 00 00    	add    ebx,0x1000
c001231d:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012323:	76 2a                	jbe    c001234f <VAS::scanForEviction()+0x73>
c0012325:	31 db                	xor    ebx,ebx
c0012327:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001232e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012334:	75 c6                	jne    c00122fc <VAS::scanForEviction()+0x20>
c0012336:	89 da                	mov    edx,ebx
c0012338:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001233b:	c1 ea 16             	shr    edx,0x16
c001233e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012342:	75 b8                	jne    c00122fc <VAS::scanForEviction()+0x20>
c0012344:	81 c3 00 00 40 00    	add    ebx,0x400000
c001234a:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001234d:	eb 97                	jmp    c00122e6 <VAS::scanForEviction()+0xa>
c001234f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012352:	eb 92                	jmp    c00122e6 <VAS::scanForEviction()+0xa>
c0012354:	f7 c7 01 00 00 00    	test   edi,0x1
c001235a:	74 bb                	je     c0012317 <VAS::scanForEviction()+0x3b>
c001235c:	f7 c7 20 00 00 00    	test   edi,0x20
c0012362:	74 0a                	je     c001236e <VAS::scanForEviction()+0x92>
c0012364:	83 e7 df             	and    edi,0xffffffdf
c0012367:	89 38                	mov    DWORD PTR [eax],edi
c0012369:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001236c:	eb a9                	jmp    c0012317 <VAS::scanForEviction()+0x3b>
c001236e:	83 ec 08             	sub    esp,0x8
c0012371:	53                   	push   ebx
c0012372:	56                   	push   esi
c0012373:	e8 92 fd ff ff       	call   c001210a <VAS::evict(unsigned long)>
c0012378:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c001237f:	83 c4 10             	add    esp,0x10
c0012382:	89 f8                	mov    eax,edi
c0012384:	5b                   	pop    ebx
c0012385:	25 00 f0 ff ff       	and    eax,0xfffff000
c001238a:	5e                   	pop    esi
c001238b:	5f                   	pop    edi
c001238c:	c3                   	ret    

c001238d <mapVASFirstTime>:
c001238d:	55                   	push   ebp
c001238e:	57                   	push   edi
c001238f:	56                   	push   esi
c0012390:	53                   	push   ebx
c0012391:	83 ec 0c             	sub    esp,0xc
c0012394:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012399:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001239c:	4a                   	dec    edx
c001239d:	0f 84 8e 00 00 00    	je     c0012431 <mapVASFirstTime+0xa4>
c00123a3:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00123a6:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00123a9:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00123ae:	c1 e5 15             	shl    ebp,0x15
c00123b1:	be 00 90 e7 01       	mov    esi,0x1e79000
c00123b6:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00123bc:	29 eb                	sub    ebx,ebp
c00123be:	29 ee                	sub    esi,ebp
c00123c0:	e8 95 d5 ff ff       	call   c000f95a <Phys::allocatePage()>
c00123c5:	83 ec 0c             	sub    esp,0xc
c00123c8:	68 03 04 00 00       	push   0x403
c00123cd:	6a 01                	push   0x1
c00123cf:	53                   	push   ebx
c00123d0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00123d6:	50                   	push   eax
c00123d7:	57                   	push   edi
c00123d8:	e8 f9 f8 ff ff       	call   c0011cd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123dd:	83 c4 20             	add    esp,0x20
c00123e0:	39 f3                	cmp    ebx,esi
c00123e2:	75 dc                	jne    c00123c0 <mapVASFirstTime+0x33>
c00123e4:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00123e9:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00123ee:	29 ee                	sub    esi,ebp
c00123f0:	29 e8                	sub    eax,ebp
c00123f2:	89 c5                	mov    ebp,eax
c00123f4:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00123f8:	19 db                	sbb    ebx,ebx
c00123fa:	e8 5b d5 ff ff       	call   c000f95a <Phys::allocatePage()>
c00123ff:	83 e3 04             	and    ebx,0x4
c0012402:	83 ec 0c             	sub    esp,0xc
c0012405:	81 c3 03 04 00 00    	add    ebx,0x403
c001240b:	53                   	push   ebx
c001240c:	6a 01                	push   0x1
c001240e:	56                   	push   esi
c001240f:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012415:	50                   	push   eax
c0012416:	57                   	push   edi
c0012417:	e8 ba f8 ff ff       	call   c0011cd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001241c:	83 c4 20             	add    esp,0x20
c001241f:	39 f5                	cmp    ebp,esi
c0012421:	75 d1                	jne    c00123f4 <mapVASFirstTime+0x67>
c0012423:	0f 20 d8             	mov    eax,cr3
c0012426:	0f 22 d8             	mov    cr3,eax
c0012429:	83 c4 0c             	add    esp,0xc
c001242c:	5b                   	pop    ebx
c001242d:	5e                   	pop    esi
c001242e:	5f                   	pop    edi
c001242f:	5d                   	pop    ebp
c0012430:	c3                   	ret    
c0012431:	83 ec 0c             	sub    esp,0xc
c0012434:	68 7a ae 02 c0       	push   0xc002ae7a
c0012439:	e8 71 01 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001243e:	83 c4 10             	add    esp,0x10
c0012441:	83 c4 0c             	add    esp,0xc
c0012444:	5b                   	pop    ebx
c0012445:	5e                   	pop    esi
c0012446:	5f                   	pop    edi
c0012447:	5d                   	pop    ebp
c0012448:	c3                   	ret    

c0012449 <__cxa_atexit>:
c0012449:	31 c0                	xor    eax,eax
c001244b:	c3                   	ret    

c001244c <__cxa_finalize>:
c001244c:	c3                   	ret    

c001244d <__stack_chk_fail>:
c001244d:	55                   	push   ebp
c001244e:	89 e5                	mov    ebp,esp
c0012450:	83 ec 14             	sub    esp,0x14
c0012453:	68 93 ae 02 c0       	push   0xc002ae93
c0012458:	e8 52 01 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001245d:	58                   	pop    eax
c001245e:	5a                   	pop    edx
c001245f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012462:	68 e3 ae 02 c0       	push   0xc002aee3
c0012467:	e8 43 01 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001246c:	59                   	pop    ecx
c001246d:	58                   	pop    eax
c001246e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012471:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012474:	68 e3 ae 02 c0       	push   0xc002aee3
c0012479:	e8 31 01 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001247e:	5a                   	pop    edx
c001247f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012482:	59                   	pop    ecx
c0012483:	8b 00                	mov    eax,DWORD PTR [eax]
c0012485:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012488:	68 e3 ae 02 c0       	push   0xc002aee3
c001248d:	e8 1d 01 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0012492:	5a                   	pop    edx
c0012493:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012496:	59                   	pop    ecx
c0012497:	8b 00                	mov    eax,DWORD PTR [eax]
c0012499:	8b 00                	mov    eax,DWORD PTR [eax]
c001249b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001249e:	68 e3 ae 02 c0       	push   0xc002aee3
c00124a3:	e8 07 01 00 00       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00124a8:	c7 04 24 eb ae 02 c0 	mov    DWORD PTR [esp],0xc002aeeb
c00124af:	e8 c9 7b 00 00       	call   c001a07d <Krnl::panic(char const*)>
c00124b4:	83 c4 10             	add    esp,0x10
c00124b7:	c9                   	leave  
c00124b8:	c3                   	ret    

c00124b9 <__cxa_pure_virtual>:
c00124b9:	83 ec 18             	sub    esp,0x18
c00124bc:	68 03 af 02 c0       	push   0xc002af03
c00124c1:	e8 b7 7b 00 00       	call   c001a07d <Krnl::panic(char const*)>
c00124c6:	83 c4 1c             	add    esp,0x1c
c00124c9:	c3                   	ret    

c00124ca <operator new[](unsigned long)>:
c00124ca:	e9 e7 d0 ff ff       	jmp    c000f5b6 <malloc>

c00124cf <operator delete(void*, unsigned long)>:
c00124cf:	e9 02 d1 ff ff       	jmp    c000f5d6 <rfree>

c00124d4 <operator delete[](void*)>:
c00124d4:	e9 fd d0 ff ff       	jmp    c000f5d6 <rfree>

c00124d9 <operator delete[](void*, unsigned long)>:
c00124d9:	e9 f8 d0 ff ff       	jmp    c000f5d6 <rfree>

c00124de <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00124de:	57                   	push   edi
c00124df:	b9 3f 00 00 00       	mov    ecx,0x3f
c00124e4:	56                   	push   esi
c00124e5:	be 18 af 02 c0       	mov    esi,0xc002af18
c00124ea:	53                   	push   ebx
c00124eb:	83 ec 40             	sub    esp,0x40
c00124ee:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00124f2:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00124f6:	fc                   	cld    
c00124f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00124f9:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00124fd:	83 f9 3e             	cmp    ecx,0x3e
c0012500:	7e 05                	jle    c0012507 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012502:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012507:	89 df                	mov    edi,ebx
c0012509:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001250d:	eb 02                	jmp    c0012511 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c001250f:	89 c7                	mov    edi,eax
c0012511:	31 d2                	xor    edx,edx
c0012513:	46                   	inc    esi
c0012514:	89 f8                	mov    eax,edi
c0012516:	f7 f1                	div    ecx
c0012518:	39 cf                	cmp    edi,ecx
c001251a:	73 f3                	jae    c001250f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c001251c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001251f:	eb 02                	jmp    c0012523 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012521:	89 c3                	mov    ebx,eax
c0012523:	31 d2                	xor    edx,edx
c0012525:	4e                   	dec    esi
c0012526:	89 d8                	mov    eax,ebx
c0012528:	f7 f1                	div    ecx
c001252a:	39 cb                	cmp    ebx,ecx
c001252c:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012530:	88 16                	mov    BYTE PTR [esi],dl
c0012532:	73 ed                	jae    c0012521 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012534:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012538:	83 c4 40             	add    esp,0x40
c001253b:	5b                   	pop    ebx
c001253c:	5e                   	pop    esi
c001253d:	5f                   	pop    edi
c001253e:	c3                   	ret    

c001253f <Dbg::logc(char)>:
c001253f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012543:	ba fd 03 00 00       	mov    edx,0x3fd
c0012548:	ec                   	in     al,dx
c0012549:	a8 20                	test   al,0x20
c001254b:	74 fb                	je     c0012548 <Dbg::logc(char)+0x9>
c001254d:	ba f8 03 00 00       	mov    edx,0x3f8
c0012552:	88 c8                	mov    al,cl
c0012554:	ee                   	out    dx,al
c0012555:	c3                   	ret    

c0012556 <Dbg::logs(char*)>:
c0012556:	53                   	push   ebx
c0012557:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001255b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001255e:	84 c0                	test   al,al
c0012560:	74 0f                	je     c0012571 <Dbg::logs(char*)+0x1b>
c0012562:	50                   	push   eax
c0012563:	43                   	inc    ebx
c0012564:	e8 d6 ff ff ff       	call   c001253f <Dbg::logc(char)>
c0012569:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001256c:	5a                   	pop    edx
c001256d:	84 c0                	test   al,al
c001256f:	75 f1                	jne    c0012562 <Dbg::logs(char*)+0xc>
c0012571:	5b                   	pop    ebx
c0012572:	c3                   	ret    

c0012573 <Dbg::logWriteInt(unsigned int)>:
c0012573:	83 ec 10             	sub    esp,0x10
c0012576:	6a 0a                	push   0xa
c0012578:	8d 44 24 08          	lea    eax,[esp+0x8]
c001257c:	50                   	push   eax
c001257d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012581:	e8 58 ff ff ff       	call   c00124de <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012586:	50                   	push   eax
c0012587:	e8 ca ff ff ff       	call   c0012556 <Dbg::logs(char*)>
c001258c:	83 c4 20             	add    esp,0x20
c001258f:	c3                   	ret    

c0012590 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012590:	83 ec 10             	sub    esp,0x10
c0012593:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012597:	8d 44 24 08          	lea    eax,[esp+0x8]
c001259b:	50                   	push   eax
c001259c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125a0:	e8 39 ff ff ff       	call   c00124de <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00125a5:	50                   	push   eax
c00125a6:	e8 ab ff ff ff       	call   c0012556 <Dbg::logs(char*)>
c00125ab:	83 c4 20             	add    esp,0x20
c00125ae:	c3                   	ret    

c00125af <Dbg::kprintf(char const*, ...)>:
c00125af:	55                   	push   ebp
c00125b0:	57                   	push   edi
c00125b1:	56                   	push   esi
c00125b2:	53                   	push   ebx
c00125b3:	83 ec 0c             	sub    esp,0xc
c00125b6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00125ba:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00125be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00125c2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00125c5:	84 c0                	test   al,al
c00125c7:	74 4a                	je     c0012613 <Dbg::kprintf(char const*, ...)+0x64>
c00125c9:	31 db                	xor    ebx,ebx
c00125cb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00125ce:	3c 25                	cmp    al,0x25
c00125d0:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00125d3:	0f 85 e4 00 00 00    	jne    c00126bd <Dbg::kprintf(char const*, ...)+0x10e>
c00125d9:	83 c3 02             	add    ebx,0x2
c00125dc:	8a 07                	mov    al,BYTE PTR [edi]
c00125de:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00125e1:	83 e8 25             	sub    eax,0x25
c00125e4:	3c 53                	cmp    al,0x53
c00125e6:	0f 87 ba 00 00 00    	ja     c00126a6 <Dbg::kprintf(char const*, ...)+0xf7>
c00125ec:	0f b6 c0             	movzx  eax,al
c00125ef:	ff 24 85 58 af 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd50a8]
c00125f6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00125fa:	89 c8                	mov    eax,ecx
c00125fc:	83 c1 04             	add    ecx,0x4
c00125ff:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012603:	ff 30                	push   DWORD PTR [eax]
c0012605:	e8 4c ff ff ff       	call   c0012556 <Dbg::logs(char*)>
c001260a:	58                   	pop    eax
c001260b:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001260f:	84 c0                	test   al,al
c0012611:	75 b8                	jne    c00125cb <Dbg::kprintf(char const*, ...)+0x1c>
c0012613:	83 c4 0c             	add    esp,0xc
c0012616:	5b                   	pop    ebx
c0012617:	5e                   	pop    esi
c0012618:	5f                   	pop    edi
c0012619:	5d                   	pop    ebp
c001261a:	c3                   	ret    
c001261b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001261f:	89 d0                	mov    eax,edx
c0012621:	83 c2 04             	add    edx,0x4
c0012624:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012628:	ff 30                	push   DWORD PTR [eax]
c001262a:	e8 44 ff ff ff       	call   c0012573 <Dbg::logWriteInt(unsigned int)>
c001262f:	58                   	pop    eax
c0012630:	eb d9                	jmp    c001260b <Dbg::kprintf(char const*, ...)+0x5c>
c0012632:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012636:	89 d0                	mov    eax,edx
c0012638:	83 c2 04             	add    edx,0x4
c001263b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001263e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012642:	50                   	push   eax
c0012643:	e8 f7 fe ff ff       	call   c001253f <Dbg::logc(char)>
c0012648:	58                   	pop    eax
c0012649:	eb c0                	jmp    c001260b <Dbg::kprintf(char const*, ...)+0x5c>
c001264b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001264f:	89 c8                	mov    eax,ecx
c0012651:	83 c1 04             	add    ecx,0x4
c0012654:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012658:	ff 30                	push   DWORD PTR [eax]
c001265a:	e8 14 ff ff ff       	call   c0012573 <Dbg::logWriteInt(unsigned int)>
c001265f:	5f                   	pop    edi
c0012660:	eb a9                	jmp    c001260b <Dbg::kprintf(char const*, ...)+0x5c>
c0012662:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012666:	89 c8                	mov    eax,ecx
c0012668:	83 c1 04             	add    ecx,0x4
c001266b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001266f:	6a 10                	push   0x10
c0012671:	ff 30                	push   DWORD PTR [eax]
c0012673:	e8 18 ff ff ff       	call   c0012590 <Dbg::logWriteIntBase(unsigned int, int)>
c0012678:	59                   	pop    ecx
c0012679:	5f                   	pop    edi
c001267a:	eb 8f                	jmp    c001260b <Dbg::kprintf(char const*, ...)+0x5c>
c001267c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012680:	89 d0                	mov    eax,edx
c0012682:	83 c2 08             	add    edx,0x8
c0012685:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012689:	6a 10                	push   0x10
c001268b:	ff 30                	push   DWORD PTR [eax]
c001268d:	e8 fe fe ff ff       	call   c0012590 <Dbg::logWriteIntBase(unsigned int, int)>
c0012692:	58                   	pop    eax
c0012693:	5a                   	pop    edx
c0012694:	e9 72 ff ff ff       	jmp    c001260b <Dbg::kprintf(char const*, ...)+0x5c>
c0012699:	6a 25                	push   0x25
c001269b:	e8 9f fe ff ff       	call   c001253f <Dbg::logc(char)>
c00126a0:	58                   	pop    eax
c00126a1:	e9 65 ff ff ff       	jmp    c001260b <Dbg::kprintf(char const*, ...)+0x5c>
c00126a6:	6a 25                	push   0x25
c00126a8:	e8 92 fe ff ff       	call   c001253f <Dbg::logc(char)>
c00126ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00126b0:	50                   	push   eax
c00126b1:	e8 89 fe ff ff       	call   c001253f <Dbg::logc(char)>
c00126b6:	5a                   	pop    edx
c00126b7:	59                   	pop    ecx
c00126b8:	e9 4e ff ff ff       	jmp    c001260b <Dbg::kprintf(char const*, ...)+0x5c>
c00126bd:	50                   	push   eax
c00126be:	89 eb                	mov    ebx,ebp
c00126c0:	e8 7a fe ff ff       	call   c001253f <Dbg::logc(char)>
c00126c5:	89 fd                	mov    ebp,edi
c00126c7:	58                   	pop    eax
c00126c8:	e9 3e ff ff ff       	jmp    c001260b <Dbg::kprintf(char const*, ...)+0x5c>
c00126cd:	90                   	nop

c00126ce <File::read(unsigned long long, void*, int*)>:
c00126ce:	53                   	push   ebx
c00126cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00126d7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00126de:	3c 19                	cmp    al,0x19
c00126e0:	77 35                	ja     c0012717 <File::read(unsigned long long, void*, int*)+0x49>
c00126e2:	8b 04 85 40 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0cc0]
c00126e9:	85 c0                	test   eax,eax
c00126eb:	74 2a                	je     c0012717 <File::read(unsigned long long, void*, int*)+0x49>
c00126ed:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00126f3:	85 c0                	test   eax,eax
c00126f5:	74 20                	je     c0012717 <File::read(unsigned long long, void*, int*)+0x49>
c00126f7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00126fb:	74 21                	je     c001271e <File::read(unsigned long long, void*, int*)+0x50>
c00126fd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00126ff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012703:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012709:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001270d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012711:	5b                   	pop    ebx
c0012712:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012715:	ff e0                	jmp    eax
c0012717:	b8 0b 00 00 00       	mov    eax,0xb
c001271c:	eb 05                	jmp    c0012723 <File::read(unsigned long long, void*, int*)+0x55>
c001271e:	b8 05 00 00 00       	mov    eax,0x5
c0012723:	5b                   	pop    ebx
c0012724:	c3                   	ret    
c0012725:	90                   	nop

c0012726 <File::write(unsigned long long, void*, int*)>:
c0012726:	53                   	push   ebx
c0012727:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001272b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001272f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012736:	3c 19                	cmp    al,0x19
c0012738:	77 35                	ja     c001276f <File::write(unsigned long long, void*, int*)+0x49>
c001273a:	8b 04 85 40 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0cc0]
c0012741:	85 c0                	test   eax,eax
c0012743:	74 2a                	je     c001276f <File::write(unsigned long long, void*, int*)+0x49>
c0012745:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001274b:	85 c0                	test   eax,eax
c001274d:	74 20                	je     c001276f <File::write(unsigned long long, void*, int*)+0x49>
c001274f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012753:	74 21                	je     c0012776 <File::write(unsigned long long, void*, int*)+0x50>
c0012755:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012757:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001275b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012769:	5b                   	pop    ebx
c001276a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001276d:	ff e0                	jmp    eax
c001276f:	b8 0b 00 00 00       	mov    eax,0xb
c0012774:	eb 05                	jmp    c001277b <File::write(unsigned long long, void*, int*)+0x55>
c0012776:	b8 05 00 00 00       	mov    eax,0x5
c001277b:	5b                   	pop    ebx
c001277c:	c3                   	ret    
c001277d:	90                   	nop

c001277e <Directory::read(unsigned long long, void*, int*)>:
c001277e:	53                   	push   ebx
c001277f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012783:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012787:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001278e:	3c 19                	cmp    al,0x19
c0012790:	77 35                	ja     c00127c7 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012792:	8b 04 85 40 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0cc0]
c0012799:	85 c0                	test   eax,eax
c001279b:	74 2a                	je     c00127c7 <Directory::read(unsigned long long, void*, int*)+0x49>
c001279d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127a3:	85 c0                	test   eax,eax
c00127a5:	74 20                	je     c00127c7 <Directory::read(unsigned long long, void*, int*)+0x49>
c00127a7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127ab:	74 21                	je     c00127ce <Directory::read(unsigned long long, void*, int*)+0x50>
c00127ad:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127af:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127b3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127c1:	5b                   	pop    ebx
c00127c2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00127c5:	ff e0                	jmp    eax
c00127c7:	b8 0b 00 00 00       	mov    eax,0xb
c00127cc:	eb 05                	jmp    c00127d3 <Directory::read(unsigned long long, void*, int*)+0x55>
c00127ce:	b8 05 00 00 00       	mov    eax,0x5
c00127d3:	5b                   	pop    ebx
c00127d4:	c3                   	ret    
c00127d5:	90                   	nop

c00127d6 <Directory::write(unsigned long long, void*, int*)>:
c00127d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127da:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00127e1:	b8 0b 00 00 00       	mov    eax,0xb
c00127e6:	80 fa 19             	cmp    dl,0x19
c00127e9:	77 18                	ja     c0012803 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00127eb:	8b 14 95 40 f3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0cc0]
c00127f2:	85 d2                	test   edx,edx
c00127f4:	74 0d                	je     c0012803 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00127f6:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00127fd:	19 c0                	sbb    eax,eax
c00127ff:	83 e0 0a             	and    eax,0xa
c0012802:	40                   	inc    eax
c0012803:	c3                   	ret    

c0012804 <File::isAtty()>:
c0012804:	31 c0                	xor    eax,eax
c0012806:	c3                   	ret    
c0012807:	90                   	nop

c0012808 <Directory::isAtty()>:
c0012808:	31 c0                	xor    eax,eax
c001280a:	c3                   	ret    
c001280b:	90                   	nop

c001280c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001280c:	b8 0a 00 00 00       	mov    eax,0xa
c0012811:	c3                   	ret    

c0012812 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012812:	b8 0a 00 00 00       	mov    eax,0xa
c0012817:	c3                   	ret    

c0012818 <Filesystem::getFileFirstSector(char const*)>:
c0012818:	31 c0                	xor    eax,eax
c001281a:	31 d2                	xor    edx,edx
c001281c:	c3                   	ret    
c001281d:	90                   	nop

c001281e <File::~File()>:
c001281e:	83 ec 0c             	sub    esp,0xc
c0012821:	ba 18 b1 02 c0       	mov    edx,0xc002b118
c0012826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001282a:	89 10                	mov    DWORD PTR [eax],edx
c001282c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012830:	83 ec 0c             	sub    esp,0xc
c0012833:	50                   	push   eax
c0012834:	e8 0f e7 ff ff       	call   c0010f48 <UnixFile::~UnixFile()>
c0012839:	83 c4 10             	add    esp,0x10
c001283c:	90                   	nop
c001283d:	83 c4 0c             	add    esp,0xc
c0012840:	c3                   	ret    
c0012841:	90                   	nop

c0012842 <File::~File()>:
c0012842:	83 ec 0c             	sub    esp,0xc
c0012845:	83 ec 0c             	sub    esp,0xc
c0012848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001284c:	e8 cd ff ff ff       	call   c001281e <File::~File()>
c0012851:	83 c4 10             	add    esp,0x10
c0012854:	83 ec 08             	sub    esp,0x8
c0012857:	68 14 01 00 00       	push   0x114
c001285c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012860:	e8 6a fc ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0012865:	83 c4 10             	add    esp,0x10
c0012868:	83 c4 0c             	add    esp,0xc
c001286b:	c3                   	ret    

c001286c <Directory::~Directory()>:
c001286c:	83 ec 0c             	sub    esp,0xc
c001286f:	ba 34 b1 02 c0       	mov    edx,0xc002b134
c0012874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012878:	89 10                	mov    DWORD PTR [eax],edx
c001287a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001287e:	83 ec 0c             	sub    esp,0xc
c0012881:	50                   	push   eax
c0012882:	e8 c1 e6 ff ff       	call   c0010f48 <UnixFile::~UnixFile()>
c0012887:	83 c4 10             	add    esp,0x10
c001288a:	90                   	nop
c001288b:	83 c4 0c             	add    esp,0xc
c001288e:	c3                   	ret    
c001288f:	90                   	nop

c0012890 <Directory::~Directory()>:
c0012890:	83 ec 0c             	sub    esp,0xc
c0012893:	83 ec 0c             	sub    esp,0xc
c0012896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001289a:	e8 cd ff ff ff       	call   c001286c <Directory::~Directory()>
c001289f:	83 c4 10             	add    esp,0x10
c00128a2:	83 ec 08             	sub    esp,0x8
c00128a5:	68 14 01 00 00       	push   0x114
c00128aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128ae:	e8 1c fc ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c00128b3:	83 c4 10             	add    esp,0x10
c00128b6:	83 c4 0c             	add    esp,0xc
c00128b9:	c3                   	ret    

c00128ba <Filesystem::Filesystem()>:
c00128ba:	ba b0 b0 02 c0       	mov    edx,0xc002b0b0
c00128bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128c3:	89 10                	mov    DWORD PTR [eax],edx
c00128c5:	8b 15 b4 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eeb4
c00128cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00128d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128d6:	a3 b4 ee 02 c0       	mov    ds:0xc002eeb4,eax
c00128db:	90                   	nop
c00128dc:	c3                   	ret    
c00128dd:	90                   	nop

c00128de <Filesystem::~Filesystem()>:
c00128de:	ba b0 b0 02 c0       	mov    edx,0xc002b0b0
c00128e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128e7:	89 10                	mov    DWORD PTR [eax],edx
c00128e9:	90                   	nop
c00128ea:	c3                   	ret    
c00128eb:	90                   	nop

c00128ec <Filesystem::~Filesystem()>:
c00128ec:	83 ec 0c             	sub    esp,0xc
c00128ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00128f3:	e8 e6 ff ff ff       	call   c00128de <Filesystem::~Filesystem()>
c00128f8:	83 c4 04             	add    esp,0x4
c00128fb:	83 ec 08             	sub    esp,0x8
c00128fe:	6a 08                	push   0x8
c0012900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012904:	e8 c6 fb ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0012909:	83 c4 10             	add    esp,0x10
c001290c:	83 c4 0c             	add    esp,0xc
c001290f:	c3                   	ret    

c0012910 <Fs::getcwd(Process*, char*, int)>:
c0012910:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012914:	31 c0                	xor    eax,eax
c0012916:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012919:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001291d:	7d 15                	jge    c0012934 <Fs::getcwd(Process*, char*, int)+0x24>
c001291f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012923:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001292a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001292d:	84 c9                	test   cl,cl
c001292f:	74 06                	je     c0012937 <Fs::getcwd(Process*, char*, int)+0x27>
c0012931:	40                   	inc    eax
c0012932:	eb e2                	jmp    c0012916 <Fs::getcwd(Process*, char*, int)+0x6>
c0012934:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012937:	31 c0                	xor    eax,eax
c0012939:	c3                   	ret    

c001293a <Fs::initVFS()>:
c001293a:	83 ec 18             	sub    esp,0x18
c001293d:	6a 08                	push   0x8
c001293f:	e8 72 cc ff ff       	call   c000f5b6 <malloc>
c0012944:	89 04 24             	mov    DWORD PTR [esp],eax
c0012947:	e8 a6 e5 00 00       	call   c0020ef2 <FAT::FAT()>
c001294c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012953:	e8 5e cc ff ff       	call   c000f5b6 <malloc>
c0012958:	89 04 24             	mov    DWORD PTR [esp],eax
c001295b:	e8 ce f7 00 00       	call   c002212e <ISO9660::ISO9660()>
c0012960:	83 c4 1c             	add    esp,0x1c
c0012963:	c3                   	ret    

c0012964 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012964:	55                   	push   ebp
c0012965:	57                   	push   edi
c0012966:	56                   	push   esi
c0012967:	53                   	push   ebx
c0012968:	81 ec 10 04 00 00    	sub    esp,0x410
c001296e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012975:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001297c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012983:	68 00 04 00 00       	push   0x400
c0012988:	6a 00                	push   0x0
c001298a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001298e:	56                   	push   esi
c001298f:	e8 bc dd fe ff       	call   c0000750 <memset>
c0012994:	83 c4 10             	add    esp,0x10
c0012997:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001299b:	75 0b                	jne    c00129a8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001299d:	50                   	push   eax
c001299e:	50                   	push   eax
c001299f:	57                   	push   edi
c00129a0:	56                   	push   esi
c00129a1:	e8 66 de fe ff       	call   c000080c <strcpy>
c00129a6:	eb 41                	jmp    c00129e9 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00129a8:	8a 07                	mov    al,BYTE PTR [edi]
c00129aa:	3c 5c                	cmp    al,0x5c
c00129ac:	74 04                	je     c00129b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00129ae:	3c 2f                	cmp    al,0x2f
c00129b0:	75 18                	jne    c00129ca <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00129b2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00129b5:	3c 60                	cmp    al,0x60
c00129b7:	7e 03                	jle    c00129bc <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00129b9:	83 e8 20             	sub    eax,0x20
c00129bc:	88 04 24             	mov    BYTE PTR [esp],al
c00129bf:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00129c6:	50                   	push   eax
c00129c7:	50                   	push   eax
c00129c8:	eb 18                	jmp    c00129e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00129ca:	50                   	push   eax
c00129cb:	50                   	push   eax
c00129cc:	55                   	push   ebp
c00129cd:	56                   	push   esi
c00129ce:	e8 39 de fe ff       	call   c000080c <strcpy>
c00129d3:	5a                   	pop    edx
c00129d4:	59                   	pop    ecx
c00129d5:	68 b5 c8 02 c0       	push   0xc002c8b5
c00129da:	56                   	push   esi
c00129db:	e8 6c df fe ff       	call   c000094c <strcat>
c00129e0:	5d                   	pop    ebp
c00129e1:	58                   	pop    eax
c00129e2:	57                   	push   edi
c00129e3:	56                   	push   esi
c00129e4:	e8 63 df fe ff       	call   c000094c <strcat>
c00129e9:	83 c4 10             	add    esp,0x10
c00129ec:	8a 04 24             	mov    al,BYTE PTR [esp]
c00129ef:	3c 60                	cmp    al,0x60
c00129f1:	7e 03                	jle    c00129f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00129f3:	83 e8 20             	sub    eax,0x20
c00129f6:	88 04 24             	mov    BYTE PTR [esp],al
c00129f9:	88 03                	mov    BYTE PTR [ebx],al
c00129fb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a02:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012a08:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012a0c:	bf 03 00 00 00       	mov    edi,0x3
c0012a11:	b8 03 00 00 00       	mov    eax,0x3
c0012a16:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012a19:	84 d2                	test   dl,dl
c0012a1b:	0f 84 91 00 00 00    	je     c0012ab2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012a21:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012a24:	80 fa 5c             	cmp    dl,0x5c
c0012a27:	74 05                	je     c0012a2e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012a29:	80 fa 2f             	cmp    dl,0x2f
c0012a2c:	75 12                	jne    c0012a40 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a2e:	89 c5                	mov    ebp,eax
c0012a30:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012a35:	74 09                	je     c0012a40 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a37:	40                   	inc    eax
c0012a38:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012a3c:	89 cf                	mov    edi,ecx
c0012a3e:	eb d6                	jmp    c0012a16 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012a40:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012a45:	75 5b                	jne    c0012aa2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012a47:	80 fa 2e             	cmp    dl,0x2e
c0012a4a:	75 56                	jne    c0012aa2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012a4c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012a50:	74 19                	je     c0012a6b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012a52:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012a57:	74 53                	je     c0012aac <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012a59:	89 f9                	mov    ecx,edi
c0012a5b:	41                   	inc    ecx
c0012a5c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012a5f:	80 fa 2f             	cmp    dl,0x2f
c0012a62:	74 f7                	je     c0012a5b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012a64:	80 fa 5c             	cmp    dl,0x5c
c0012a67:	74 f2                	je     c0012a5b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012a69:	eb d1                	jmp    c0012a3c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a6b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012a70:	74 3a                	je     c0012aac <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012a72:	83 f8 03             	cmp    eax,0x3
c0012a75:	74 c5                	je     c0012a3c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a77:	41                   	inc    ecx
c0012a78:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012a7b:	80 fa 2f             	cmp    dl,0x2f
c0012a7e:	74 f7                	je     c0012a77 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012a80:	80 fa 5c             	cmp    dl,0x5c
c0012a83:	74 f2                	je     c0012a77 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012a85:	48                   	dec    eax
c0012a86:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a8a:	75 06                	jne    c0012a92 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012a8c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012a90:	eb f3                	jmp    c0012a85 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012a92:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a96:	74 07                	je     c0012a9f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012a98:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012a9c:	48                   	dec    eax
c0012a9d:	eb f3                	jmp    c0012a92 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012a9f:	40                   	inc    eax
c0012aa0:	eb 9a                	jmp    c0012a3c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012aa2:	80 fa 2f             	cmp    dl,0x2f
c0012aa5:	74 95                	je     c0012a3c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012aa7:	80 fa 5c             	cmp    dl,0x5c
c0012aaa:	74 90                	je     c0012a3c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012aac:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012aaf:	40                   	inc    eax
c0012ab0:	eb 8a                	jmp    c0012a3c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ab2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ab6:	83 ec 0c             	sub    esp,0xc
c0012ab9:	53                   	push   ebx
c0012aba:	e8 ad dc fe ff       	call   c000076c <strlen>
c0012abf:	83 c4 10             	add    esp,0x10
c0012ac2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012ac7:	75 26                	jne    c0012aef <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012ac9:	83 ec 0c             	sub    esp,0xc
c0012acc:	53                   	push   ebx
c0012acd:	e8 9a dc fe ff       	call   c000076c <strlen>
c0012ad2:	83 c4 10             	add    esp,0x10
c0012ad5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012ada:	74 26                	je     c0012b02 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012adc:	83 ec 0c             	sub    esp,0xc
c0012adf:	53                   	push   ebx
c0012ae0:	e8 87 dc fe ff       	call   c000076c <strlen>
c0012ae5:	83 c4 10             	add    esp,0x10
c0012ae8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012aed:	eb c7                	jmp    c0012ab6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012aef:	83 ec 0c             	sub    esp,0xc
c0012af2:	53                   	push   ebx
c0012af3:	e8 74 dc fe ff       	call   c000076c <strlen>
c0012af8:	83 c4 10             	add    esp,0x10
c0012afb:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b00:	74 c7                	je     c0012ac9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012b02:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012b08:	5b                   	pop    ebx
c0012b09:	5e                   	pop    esi
c0012b0a:	5f                   	pop    edi
c0012b0b:	5d                   	pop    ebp
c0012b0c:	c3                   	ret    
c0012b0d:	90                   	nop

c0012b0e <File::File(char const*, Process*)>:
c0012b0e:	83 ec 0c             	sub    esp,0xc
c0012b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b15:	83 ec 08             	sub    esp,0x8
c0012b18:	6a 00                	push   0x0
c0012b1a:	50                   	push   eax
c0012b1b:	e8 46 e2 ff ff       	call   c0010d66 <UnixFile::UnixFile(int)>
c0012b20:	83 c4 10             	add    esp,0x10
c0012b23:	ba 18 b1 02 c0       	mov    edx,0xc002b118
c0012b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b2c:	89 10                	mov    DWORD PTR [eax],edx
c0012b2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b32:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b3c:	83 c0 0d             	add    eax,0xd
c0012b3f:	83 ec 04             	sub    esp,0x4
c0012b42:	52                   	push   edx
c0012b43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b47:	50                   	push   eax
c0012b48:	e8 17 fe ff ff       	call   c0012964 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012b4d:	83 c4 10             	add    esp,0x10
c0012b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b54:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012b57:	8d 50 bf             	lea    edx,[eax-0x41]
c0012b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b5e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b68:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012b6c:	90                   	nop
c0012b6d:	83 c4 0c             	add    esp,0xc
c0012b70:	c3                   	ret    
c0012b71:	90                   	nop

c0012b72 <File::open(FileOpenMode)>:
c0012b72:	53                   	push   ebx
c0012b73:	b8 0b 00 00 00       	mov    eax,0xb
c0012b78:	83 ec 08             	sub    esp,0x8
c0012b7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b7f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012b86:	80 fa 19             	cmp    dl,0x19
c0012b89:	77 40                	ja     c0012bcb <File::open(FileOpenMode)+0x59>
c0012b8b:	8b 14 95 40 f3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0cc0]
c0012b92:	85 d2                	test   edx,edx
c0012b94:	74 35                	je     c0012bcb <File::open(FileOpenMode)+0x59>
c0012b96:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012b9c:	85 d2                	test   edx,edx
c0012b9e:	74 2b                	je     c0012bcb <File::open(FileOpenMode)+0x59>
c0012ba0:	b8 06 00 00 00       	mov    eax,0x6
c0012ba5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ba9:	75 20                	jne    c0012bcb <File::open(FileOpenMode)+0x59>
c0012bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0012bad:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012bb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012bb7:	51                   	push   ecx
c0012bb8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012bbb:	51                   	push   ecx
c0012bbc:	52                   	push   edx
c0012bbd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012bc0:	83 c4 10             	add    esp,0x10
c0012bc3:	85 c0                	test   eax,eax
c0012bc5:	75 04                	jne    c0012bcb <File::open(FileOpenMode)+0x59>
c0012bc7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012bcb:	83 c4 08             	add    esp,0x8
c0012bce:	5b                   	pop    ebx
c0012bcf:	c3                   	ret    

c0012bd0 <File::close()>:
c0012bd0:	53                   	push   ebx
c0012bd1:	b8 0b 00 00 00       	mov    eax,0xb
c0012bd6:	83 ec 08             	sub    esp,0x8
c0012bd9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012bdd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012be4:	80 fa 19             	cmp    dl,0x19
c0012be7:	77 41                	ja     c0012c2a <File::close()+0x5a>
c0012be9:	8b 1c 95 40 f3 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0cc0]
c0012bf0:	85 db                	test   ebx,ebx
c0012bf2:	74 36                	je     c0012c2a <File::close()+0x5a>
c0012bf4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012bfb:	74 2d                	je     c0012c2a <File::close()+0x5a>
c0012bfd:	b8 05 00 00 00       	mov    eax,0x5
c0012c02:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012c06:	74 22                	je     c0012c2a <File::close()+0x5a>
c0012c08:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012c0c:	8b 04 95 40 f3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0cc0]
c0012c13:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c19:	53                   	push   ebx
c0012c1a:	53                   	push   ebx
c0012c1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c1d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012c23:	50                   	push   eax
c0012c24:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012c27:	83 c4 10             	add    esp,0x10
c0012c2a:	83 c4 08             	add    esp,0x8
c0012c2d:	5b                   	pop    ebx
c0012c2e:	c3                   	ret    
c0012c2f:	90                   	nop

c0012c30 <File::seek(unsigned long long)>:
c0012c30:	56                   	push   esi
c0012c31:	53                   	push   ebx
c0012c32:	b8 0b 00 00 00       	mov    eax,0xb
c0012c37:	51                   	push   ecx
c0012c38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c3c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012c40:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012c47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012c4b:	80 fa 19             	cmp    dl,0x19
c0012c4e:	77 31                	ja     c0012c81 <File::seek(unsigned long long)+0x51>
c0012c50:	8b 14 95 40 f3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0cc0]
c0012c57:	85 d2                	test   edx,edx
c0012c59:	74 26                	je     c0012c81 <File::seek(unsigned long long)+0x51>
c0012c5b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c61:	85 d2                	test   edx,edx
c0012c63:	74 1c                	je     c0012c81 <File::seek(unsigned long long)+0x51>
c0012c65:	b8 05 00 00 00       	mov    eax,0x5
c0012c6a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012c6e:	74 11                	je     c0012c81 <File::seek(unsigned long long)+0x51>
c0012c70:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c72:	53                   	push   ebx
c0012c73:	51                   	push   ecx
c0012c74:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012c7a:	52                   	push   edx
c0012c7b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012c7e:	83 c4 10             	add    esp,0x10
c0012c81:	5a                   	pop    edx
c0012c82:	5b                   	pop    ebx
c0012c83:	5e                   	pop    esi
c0012c84:	c3                   	ret    
c0012c85:	90                   	nop

c0012c86 <File::tell(unsigned long long*)>:
c0012c86:	83 ec 0c             	sub    esp,0xc
c0012c89:	b8 0b 00 00 00       	mov    eax,0xb
c0012c8e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c92:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c99:	80 fa 19             	cmp    dl,0x19
c0012c9c:	77 34                	ja     c0012cd2 <File::tell(unsigned long long*)+0x4c>
c0012c9e:	8b 14 95 40 f3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0cc0]
c0012ca5:	85 d2                	test   edx,edx
c0012ca7:	74 29                	je     c0012cd2 <File::tell(unsigned long long*)+0x4c>
c0012ca9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012caf:	85 d2                	test   edx,edx
c0012cb1:	74 1f                	je     c0012cd2 <File::tell(unsigned long long*)+0x4c>
c0012cb3:	b8 05 00 00 00       	mov    eax,0x5
c0012cb8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012cbc:	74 14                	je     c0012cd2 <File::tell(unsigned long long*)+0x4c>
c0012cbe:	50                   	push   eax
c0012cbf:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cc5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012ccb:	52                   	push   edx
c0012ccc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012ccf:	83 c4 10             	add    esp,0x10
c0012cd2:	83 c4 0c             	add    esp,0xc
c0012cd5:	c3                   	ret    

c0012cd6 <File::rewind()>:
c0012cd6:	83 ec 10             	sub    esp,0x10
c0012cd9:	6a 00                	push   0x0
c0012cdb:	6a 00                	push   0x0
c0012cdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ce1:	e8 4a ff ff ff       	call   c0012c30 <File::seek(unsigned long long)>
c0012ce6:	83 c4 1c             	add    esp,0x1c
c0012ce9:	c3                   	ret    

c0012cea <File::unlink()>:
c0012cea:	83 ec 0c             	sub    esp,0xc
c0012ced:	b8 0b 00 00 00       	mov    eax,0xb
c0012cf2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012cf6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012cfd:	80 f9 19             	cmp    cl,0x19
c0012d00:	77 2f                	ja     c0012d31 <File::unlink()+0x47>
c0012d02:	8b 0c 8d 40 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0cc0]
c0012d09:	85 c9                	test   ecx,ecx
c0012d0b:	74 24                	je     c0012d31 <File::unlink()+0x47>
c0012d0d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d13:	85 c9                	test   ecx,ecx
c0012d15:	74 1a                	je     c0012d31 <File::unlink()+0x47>
c0012d17:	b8 06 00 00 00       	mov    eax,0x6
c0012d1c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d20:	75 0f                	jne    c0012d31 <File::unlink()+0x47>
c0012d22:	83 c2 0d             	add    edx,0xd
c0012d25:	50                   	push   eax
c0012d26:	50                   	push   eax
c0012d27:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d29:	52                   	push   edx
c0012d2a:	51                   	push   ecx
c0012d2b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012d2e:	83 c4 10             	add    esp,0x10
c0012d31:	83 c4 0c             	add    esp,0xc
c0012d34:	c3                   	ret    
c0012d35:	90                   	nop

c0012d36 <File::rename(char const*)>:
c0012d36:	83 ec 0c             	sub    esp,0xc
c0012d39:	b8 0b 00 00 00       	mov    eax,0xb
c0012d3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d42:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d49:	80 f9 19             	cmp    cl,0x19
c0012d4c:	77 32                	ja     c0012d80 <File::rename(char const*)+0x4a>
c0012d4e:	8b 0c 8d 40 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0cc0]
c0012d55:	85 c9                	test   ecx,ecx
c0012d57:	74 27                	je     c0012d80 <File::rename(char const*)+0x4a>
c0012d59:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d5f:	85 c9                	test   ecx,ecx
c0012d61:	74 1d                	je     c0012d80 <File::rename(char const*)+0x4a>
c0012d63:	b8 06 00 00 00       	mov    eax,0x6
c0012d68:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d6c:	75 12                	jne    c0012d80 <File::rename(char const*)+0x4a>
c0012d6e:	83 c2 0d             	add    edx,0xd
c0012d71:	50                   	push   eax
c0012d72:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d78:	52                   	push   edx
c0012d79:	51                   	push   ecx
c0012d7a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012d7d:	83 c4 10             	add    esp,0x10
c0012d80:	83 c4 0c             	add    esp,0xc
c0012d83:	c3                   	ret    

c0012d84 <File::chfatattr(unsigned char, unsigned char)>:
c0012d84:	57                   	push   edi
c0012d85:	b8 0b 00 00 00       	mov    eax,0xb
c0012d8a:	56                   	push   esi
c0012d8b:	53                   	push   ebx
c0012d8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d90:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012d94:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d9b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012d9f:	80 f9 19             	cmp    cl,0x19
c0012da2:	77 37                	ja     c0012ddb <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012da4:	8b 0c 8d 40 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0cc0]
c0012dab:	85 c9                	test   ecx,ecx
c0012dad:	74 2c                	je     c0012ddb <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012daf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012db5:	85 c9                	test   ecx,ecx
c0012db7:	74 22                	je     c0012ddb <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012db9:	b8 06 00 00 00       	mov    eax,0x6
c0012dbe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dc2:	75 17                	jne    c0012ddb <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012dc4:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012dc6:	89 f0                	mov    eax,esi
c0012dc8:	83 c2 0d             	add    edx,0xd
c0012dcb:	0f b6 f0             	movzx  esi,al
c0012dce:	0f b6 db             	movzx  ebx,bl
c0012dd1:	56                   	push   esi
c0012dd2:	53                   	push   ebx
c0012dd3:	52                   	push   edx
c0012dd4:	51                   	push   ecx
c0012dd5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012dd8:	83 c4 10             	add    esp,0x10
c0012ddb:	5b                   	pop    ebx
c0012ddc:	5e                   	pop    esi
c0012ddd:	5f                   	pop    edi
c0012dde:	c3                   	ret    
c0012ddf:	90                   	nop

c0012de0 <File::exists()>:
c0012de0:	83 ec 0c             	sub    esp,0xc
c0012de3:	31 c0                	xor    eax,eax
c0012de5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012de9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012df0:	80 f9 19             	cmp    cl,0x19
c0012df3:	77 24                	ja     c0012e19 <File::exists()+0x39>
c0012df5:	8b 0c 8d 40 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0cc0]
c0012dfc:	85 c9                	test   ecx,ecx
c0012dfe:	74 19                	je     c0012e19 <File::exists()+0x39>
c0012e00:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e06:	85 c9                	test   ecx,ecx
c0012e08:	74 0f                	je     c0012e19 <File::exists()+0x39>
c0012e0a:	83 c2 0d             	add    edx,0xd
c0012e0d:	50                   	push   eax
c0012e0e:	50                   	push   eax
c0012e0f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e11:	52                   	push   edx
c0012e12:	51                   	push   ecx
c0012e13:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e16:	83 c4 10             	add    esp,0x10
c0012e19:	83 c4 0c             	add    esp,0xc
c0012e1c:	c3                   	ret    
c0012e1d:	90                   	nop

c0012e1e <File::stat(unsigned long long*, bool*)>:
c0012e1e:	56                   	push   esi
c0012e1f:	53                   	push   ebx
c0012e20:	50                   	push   eax
c0012e21:	b8 0b 00 00 00       	mov    eax,0xb
c0012e26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e2a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012e2e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e35:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e39:	80 f9 19             	cmp    cl,0x19
c0012e3c:	77 3d                	ja     c0012e7b <File::stat(unsigned long long*, bool*)+0x5d>
c0012e3e:	8b 0c 8d 40 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0cc0]
c0012e45:	85 c9                	test   ecx,ecx
c0012e47:	74 32                	je     c0012e7b <File::stat(unsigned long long*, bool*)+0x5d>
c0012e49:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e4f:	85 c9                	test   ecx,ecx
c0012e51:	74 28                	je     c0012e7b <File::stat(unsigned long long*, bool*)+0x5d>
c0012e53:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e55:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e59:	74 13                	je     c0012e6e <File::stat(unsigned long long*, bool*)+0x50>
c0012e5b:	83 ec 04             	sub    esp,0x4
c0012e5e:	56                   	push   esi
c0012e5f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012e65:	51                   	push   ecx
c0012e66:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012e69:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012e6c:	eb 0a                	jmp    c0012e78 <File::stat(unsigned long long*, bool*)+0x5a>
c0012e6e:	53                   	push   ebx
c0012e6f:	83 c2 0d             	add    edx,0xd
c0012e72:	56                   	push   esi
c0012e73:	52                   	push   edx
c0012e74:	51                   	push   ecx
c0012e75:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012e78:	83 c4 10             	add    esp,0x10
c0012e7b:	5a                   	pop    edx
c0012e7c:	5b                   	pop    ebx
c0012e7d:	5e                   	pop    esi
c0012e7e:	c3                   	ret    

c0012e7f <Fs::setcwd(Process*, char*)>:
c0012e7f:	55                   	push   ebp
c0012e80:	57                   	push   edi
c0012e81:	56                   	push   esi
c0012e82:	53                   	push   ebx
c0012e83:	81 ec 20 02 00 00    	sub    esp,0x220
c0012e89:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012e90:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012e96:	57                   	push   edi
c0012e97:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012e9e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012ea2:	56                   	push   esi
c0012ea3:	e8 bc fa ff ff       	call   c0012964 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012ea8:	89 34 24             	mov    DWORD PTR [esp],esi
c0012eab:	e8 bc d8 fe ff       	call   c000076c <strlen>
c0012eb0:	83 c4 10             	add    esp,0x10
c0012eb3:	83 f8 02             	cmp    eax,0x2
c0012eb6:	77 17                	ja     c0012ecf <Fs::setcwd(Process*, char*)+0x50>
c0012eb8:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012ebd:	83 e8 41             	sub    eax,0x41
c0012ec0:	83 f8 19             	cmp    eax,0x19
c0012ec3:	76 24                	jbe    c0012ee9 <Fs::setcwd(Process*, char*)+0x6a>
c0012ec5:	b8 03 00 00 00       	mov    eax,0x3
c0012eca:	e9 e0 00 00 00       	jmp    c0012faf <Fs::setcwd(Process*, char*)+0x130>
c0012ecf:	83 ec 0c             	sub    esp,0xc
c0012ed2:	56                   	push   esi
c0012ed3:	e8 94 d8 fe ff       	call   c000076c <strlen>
c0012ed8:	83 c4 10             	add    esp,0x10
c0012edb:	83 f8 03             	cmp    eax,0x3
c0012ede:	75 34                	jne    c0012f14 <Fs::setcwd(Process*, char*)+0x95>
c0012ee0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012ee5:	75 2d                	jne    c0012f14 <Fs::setcwd(Process*, char*)+0x95>
c0012ee7:	eb cf                	jmp    c0012eb8 <Fs::setcwd(Process*, char*)+0x39>
c0012ee9:	8b 14 85 40 f3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0cc0]
c0012ef0:	b8 05 00 00 00       	mov    eax,0x5
c0012ef5:	85 d2                	test   edx,edx
c0012ef7:	0f 84 b2 00 00 00    	je     c0012faf <Fs::setcwd(Process*, char*)+0x130>
c0012efd:	b8 06 00 00 00       	mov    eax,0x6
c0012f02:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012f09:	0f 85 92 00 00 00    	jne    c0012fa1 <Fs::setcwd(Process*, char*)+0x122>
c0012f0f:	e9 9b 00 00 00       	jmp    c0012faf <Fs::setcwd(Process*, char*)+0x130>
c0012f14:	83 ec 0c             	sub    esp,0xc
c0012f17:	68 14 01 00 00       	push   0x114
c0012f1c:	e8 95 c6 ff ff       	call   c000f5b6 <malloc>
c0012f21:	83 c4 0c             	add    esp,0xc
c0012f24:	89 c3                	mov    ebx,eax
c0012f26:	55                   	push   ebp
c0012f27:	56                   	push   esi
c0012f28:	50                   	push   eax
c0012f29:	e8 e0 fb ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c0012f2e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012f33:	83 c4 0c             	add    esp,0xc
c0012f36:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012f3a:	50                   	push   eax
c0012f3b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f3f:	50                   	push   eax
c0012f40:	53                   	push   ebx
c0012f41:	e8 d8 fe ff ff       	call   c0012e1e <File::stat(unsigned long long*, bool*)>
c0012f46:	83 c4 10             	add    esp,0x10
c0012f49:	83 f8 02             	cmp    eax,0x2
c0012f4c:	74 04                	je     c0012f52 <Fs::setcwd(Process*, char*)+0xd3>
c0012f4e:	85 c0                	test   eax,eax
c0012f50:	74 1c                	je     c0012f6e <Fs::setcwd(Process*, char*)+0xef>
c0012f52:	b8 01 00 00 00       	mov    eax,0x1
c0012f57:	85 db                	test   ebx,ebx
c0012f59:	74 54                	je     c0012faf <Fs::setcwd(Process*, char*)+0x130>
c0012f5b:	83 ec 0c             	sub    esp,0xc
c0012f5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f60:	53                   	push   ebx
c0012f61:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f64:	83 c4 10             	add    esp,0x10
c0012f67:	b8 01 00 00 00       	mov    eax,0x1
c0012f6c:	eb 41                	jmp    c0012faf <Fs::setcwd(Process*, char*)+0x130>
c0012f6e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012f73:	75 1c                	jne    c0012f91 <Fs::setcwd(Process*, char*)+0x112>
c0012f75:	b8 02 00 00 00       	mov    eax,0x2
c0012f7a:	85 db                	test   ebx,ebx
c0012f7c:	74 31                	je     c0012faf <Fs::setcwd(Process*, char*)+0x130>
c0012f7e:	83 ec 0c             	sub    esp,0xc
c0012f81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f83:	53                   	push   ebx
c0012f84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f87:	83 c4 10             	add    esp,0x10
c0012f8a:	b8 02 00 00 00       	mov    eax,0x2
c0012f8f:	eb 1e                	jmp    c0012faf <Fs::setcwd(Process*, char*)+0x130>
c0012f91:	85 db                	test   ebx,ebx
c0012f93:	74 0c                	je     c0012fa1 <Fs::setcwd(Process*, char*)+0x122>
c0012f95:	83 ec 0c             	sub    esp,0xc
c0012f98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f9a:	53                   	push   ebx
c0012f9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f9e:	83 c4 10             	add    esp,0x10
c0012fa1:	50                   	push   eax
c0012fa2:	50                   	push   eax
c0012fa3:	56                   	push   esi
c0012fa4:	57                   	push   edi
c0012fa5:	e8 62 d8 fe ff       	call   c000080c <strcpy>
c0012faa:	83 c4 10             	add    esp,0x10
c0012fad:	31 c0                	xor    eax,eax
c0012faf:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012fb5:	5b                   	pop    ebx
c0012fb6:	5e                   	pop    esi
c0012fb7:	5f                   	pop    edi
c0012fb8:	5d                   	pop    ebp
c0012fb9:	c3                   	ret    

c0012fba <Directory::Directory(char const*, Process*)>:
c0012fba:	83 ec 0c             	sub    esp,0xc
c0012fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fc1:	83 ec 08             	sub    esp,0x8
c0012fc4:	6a 00                	push   0x0
c0012fc6:	50                   	push   eax
c0012fc7:	e8 9a dd ff ff       	call   c0010d66 <UnixFile::UnixFile(int)>
c0012fcc:	83 c4 10             	add    esp,0x10
c0012fcf:	ba 34 b1 02 c0       	mov    edx,0xc002b134
c0012fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd8:	89 10                	mov    DWORD PTR [eax],edx
c0012fda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012fde:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fe8:	83 c0 0d             	add    eax,0xd
c0012feb:	83 ec 04             	sub    esp,0x4
c0012fee:	52                   	push   edx
c0012fef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ff3:	50                   	push   eax
c0012ff4:	e8 6b f9 ff ff       	call   c0012964 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012ff9:	83 c4 10             	add    esp,0x10
c0012ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013000:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013003:	8d 50 bf             	lea    edx,[eax-0x41]
c0013006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001300a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013014:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013018:	90                   	nop
c0013019:	83 c4 0c             	add    esp,0xc
c001301c:	c3                   	ret    
c001301d:	90                   	nop

c001301e <Directory::open()>:
c001301e:	53                   	push   ebx
c001301f:	b8 0b 00 00 00       	mov    eax,0xb
c0013024:	83 ec 08             	sub    esp,0x8
c0013027:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001302b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013032:	80 fa 19             	cmp    dl,0x19
c0013035:	77 3d                	ja     c0013074 <Directory::open()+0x56>
c0013037:	8b 14 95 40 f3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0cc0]
c001303e:	85 d2                	test   edx,edx
c0013040:	74 32                	je     c0013074 <Directory::open()+0x56>
c0013042:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013048:	85 d2                	test   edx,edx
c001304a:	74 28                	je     c0013074 <Directory::open()+0x56>
c001304c:	b8 06 00 00 00       	mov    eax,0x6
c0013051:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013055:	75 1d                	jne    c0013074 <Directory::open()+0x56>
c0013057:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001305d:	50                   	push   eax
c001305e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013060:	51                   	push   ecx
c0013061:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013064:	51                   	push   ecx
c0013065:	52                   	push   edx
c0013066:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013069:	83 c4 10             	add    esp,0x10
c001306c:	85 c0                	test   eax,eax
c001306e:	75 04                	jne    c0013074 <Directory::open()+0x56>
c0013070:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013074:	83 c4 08             	add    esp,0x8
c0013077:	5b                   	pop    ebx
c0013078:	c3                   	ret    
c0013079:	90                   	nop

c001307a <Directory::close()>:
c001307a:	53                   	push   ebx
c001307b:	b8 0b 00 00 00       	mov    eax,0xb
c0013080:	83 ec 08             	sub    esp,0x8
c0013083:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013087:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001308e:	80 fa 19             	cmp    dl,0x19
c0013091:	77 41                	ja     c00130d4 <Directory::close()+0x5a>
c0013093:	8b 1c 95 40 f3 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0cc0]
c001309a:	85 db                	test   ebx,ebx
c001309c:	74 36                	je     c00130d4 <Directory::close()+0x5a>
c001309e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00130a5:	74 2d                	je     c00130d4 <Directory::close()+0x5a>
c00130a7:	b8 05 00 00 00       	mov    eax,0x5
c00130ac:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00130b0:	74 22                	je     c00130d4 <Directory::close()+0x5a>
c00130b2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00130b6:	8b 04 95 40 f3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0cc0]
c00130bd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130c3:	53                   	push   ebx
c00130c4:	53                   	push   ebx
c00130c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00130c7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00130cd:	50                   	push   eax
c00130ce:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00130d1:	83 c4 10             	add    esp,0x10
c00130d4:	83 c4 08             	add    esp,0x8
c00130d7:	5b                   	pop    ebx
c00130d8:	c3                   	ret    
c00130d9:	90                   	nop

c00130da <Directory::unlink()>:
c00130da:	83 ec 0c             	sub    esp,0xc
c00130dd:	b8 0b 00 00 00       	mov    eax,0xb
c00130e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130ed:	80 f9 19             	cmp    cl,0x19
c00130f0:	77 2f                	ja     c0013121 <Directory::unlink()+0x47>
c00130f2:	8b 0c 8d 40 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0cc0]
c00130f9:	85 c9                	test   ecx,ecx
c00130fb:	74 24                	je     c0013121 <Directory::unlink()+0x47>
c00130fd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013103:	85 c9                	test   ecx,ecx
c0013105:	74 1a                	je     c0013121 <Directory::unlink()+0x47>
c0013107:	b8 06 00 00 00       	mov    eax,0x6
c001310c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013110:	75 0f                	jne    c0013121 <Directory::unlink()+0x47>
c0013112:	83 c2 0d             	add    edx,0xd
c0013115:	50                   	push   eax
c0013116:	50                   	push   eax
c0013117:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013119:	52                   	push   edx
c001311a:	51                   	push   ecx
c001311b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001311e:	83 c4 10             	add    esp,0x10
c0013121:	83 c4 0c             	add    esp,0xc
c0013124:	c3                   	ret    
c0013125:	90                   	nop

c0013126 <Directory::rename(char const*)>:
c0013126:	83 ec 0c             	sub    esp,0xc
c0013129:	b8 0b 00 00 00       	mov    eax,0xb
c001312e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013132:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013139:	80 f9 19             	cmp    cl,0x19
c001313c:	77 32                	ja     c0013170 <Directory::rename(char const*)+0x4a>
c001313e:	8b 0c 8d 40 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0cc0]
c0013145:	85 c9                	test   ecx,ecx
c0013147:	74 27                	je     c0013170 <Directory::rename(char const*)+0x4a>
c0013149:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001314f:	85 c9                	test   ecx,ecx
c0013151:	74 1d                	je     c0013170 <Directory::rename(char const*)+0x4a>
c0013153:	b8 06 00 00 00       	mov    eax,0x6
c0013158:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001315c:	75 12                	jne    c0013170 <Directory::rename(char const*)+0x4a>
c001315e:	83 c2 0d             	add    edx,0xd
c0013161:	50                   	push   eax
c0013162:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013164:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013168:	52                   	push   edx
c0013169:	51                   	push   ecx
c001316a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001316d:	83 c4 10             	add    esp,0x10
c0013170:	83 c4 0c             	add    esp,0xc
c0013173:	c3                   	ret    

c0013174 <Directory::exists()>:
c0013174:	83 ec 0c             	sub    esp,0xc
c0013177:	31 c0                	xor    eax,eax
c0013179:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001317d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013184:	80 f9 19             	cmp    cl,0x19
c0013187:	77 24                	ja     c00131ad <Directory::exists()+0x39>
c0013189:	8b 0c 8d 40 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0cc0]
c0013190:	85 c9                	test   ecx,ecx
c0013192:	74 19                	je     c00131ad <Directory::exists()+0x39>
c0013194:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001319a:	85 c9                	test   ecx,ecx
c001319c:	74 0f                	je     c00131ad <Directory::exists()+0x39>
c001319e:	83 c2 0d             	add    edx,0xd
c00131a1:	50                   	push   eax
c00131a2:	50                   	push   eax
c00131a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131a5:	52                   	push   edx
c00131a6:	51                   	push   ecx
c00131a7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00131aa:	83 c4 10             	add    esp,0x10
c00131ad:	83 c4 0c             	add    esp,0xc
c00131b0:	c3                   	ret    
c00131b1:	90                   	nop

c00131b2 <Directory::read(dirent*)>:
c00131b2:	83 ec 1c             	sub    esp,0x1c
c00131b5:	b8 0b 00 00 00       	mov    eax,0xb
c00131ba:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00131be:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131c5:	80 fa 19             	cmp    dl,0x19
c00131c8:	77 30                	ja     c00131fa <Directory::read(dirent*)+0x48>
c00131ca:	8b 14 95 40 f3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0cc0]
c00131d1:	85 d2                	test   edx,edx
c00131d3:	74 25                	je     c00131fa <Directory::read(dirent*)+0x48>
c00131d5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00131dc:	74 1c                	je     c00131fa <Directory::read(dirent*)+0x48>
c00131de:	83 ec 0c             	sub    esp,0xc
c00131e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131e3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00131e7:	52                   	push   edx
c00131e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00131ec:	6a 00                	push   0x0
c00131ee:	68 10 01 00 00       	push   0x110
c00131f3:	51                   	push   ecx
c00131f4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00131f7:	83 c4 20             	add    esp,0x20
c00131fa:	83 c4 1c             	add    esp,0x1c
c00131fd:	c3                   	ret    

c00131fe <Directory::create()>:
c00131fe:	83 ec 0c             	sub    esp,0xc
c0013201:	b8 0b 00 00 00       	mov    eax,0xb
c0013206:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001320a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013211:	80 f9 19             	cmp    cl,0x19
c0013214:	77 2f                	ja     c0013245 <Directory::create()+0x47>
c0013216:	8b 0c 8d 40 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0cc0]
c001321d:	85 c9                	test   ecx,ecx
c001321f:	74 24                	je     c0013245 <Directory::create()+0x47>
c0013221:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013227:	85 c9                	test   ecx,ecx
c0013229:	74 1a                	je     c0013245 <Directory::create()+0x47>
c001322b:	b8 06 00 00 00       	mov    eax,0x6
c0013230:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013234:	75 0f                	jne    c0013245 <Directory::create()+0x47>
c0013236:	83 c2 0d             	add    edx,0xd
c0013239:	50                   	push   eax
c001323a:	50                   	push   eax
c001323b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001323d:	52                   	push   edx
c001323e:	51                   	push   ecx
c001323f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013242:	83 c4 10             	add    esp,0x10
c0013245:	83 c4 0c             	add    esp,0xc
c0013248:	c3                   	ret    
c0013249:	90                   	nop

c001324a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001324a:	b8 0a 00 00 00       	mov    eax,0xa
c001324f:	c3                   	ret    

c0013250 <Bus::Bus(char const*)>:
c0013250:	83 ec 0c             	sub    esp,0xc
c0013253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013257:	83 ec 08             	sub    esp,0x8
c001325a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001325e:	50                   	push   eax
c001325f:	e8 88 09 00 00       	call   c0013bec <Device::Device(char const*)>
c0013264:	83 c4 10             	add    esp,0x10
c0013267:	ba 50 b1 02 c0       	mov    edx,0xc002b150
c001326c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013270:	89 10                	mov    DWORD PTR [eax],edx
c0013272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013276:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013280:	90                   	nop
c0013281:	83 c4 0c             	add    esp,0xc
c0013284:	c3                   	ret    
c0013285:	90                   	nop

c0013286 <Bus::~Bus()>:
c0013286:	83 ec 0c             	sub    esp,0xc
c0013289:	ba 50 b1 02 c0       	mov    edx,0xc002b150
c001328e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013292:	89 10                	mov    DWORD PTR [eax],edx
c0013294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013298:	83 ec 0c             	sub    esp,0xc
c001329b:	50                   	push   eax
c001329c:	e8 15 06 00 00       	call   c00138b6 <Device::~Device()>
c00132a1:	83 c4 10             	add    esp,0x10
c00132a4:	90                   	nop
c00132a5:	83 c4 0c             	add    esp,0xc
c00132a8:	c3                   	ret    
c00132a9:	90                   	nop

c00132aa <Bus::~Bus()>:
c00132aa:	83 ec 0c             	sub    esp,0xc
c00132ad:	83 ec 0c             	sub    esp,0xc
c00132b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132b4:	e8 cd ff ff ff       	call   c0013286 <Bus::~Bus()>
c00132b9:	83 c4 10             	add    esp,0x10
c00132bc:	83 ec 08             	sub    esp,0x8
c00132bf:	68 58 01 00 00       	push   0x158
c00132c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132c8:	e8 02 f2 ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c00132cd:	83 c4 10             	add    esp,0x10
c00132d0:	83 c4 0c             	add    esp,0xc
c00132d3:	c3                   	ret    

c00132d4 <Buzzer::Buzzer(char const*)>:
c00132d4:	83 ec 0c             	sub    esp,0xc
c00132d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132db:	83 ec 08             	sub    esp,0x8
c00132de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132e2:	50                   	push   eax
c00132e3:	e8 04 09 00 00       	call   c0013bec <Device::Device(char const*)>
c00132e8:	83 c4 10             	add    esp,0x10
c00132eb:	ba 7c b1 02 c0       	mov    edx,0xc002b17c
c00132f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f4:	89 10                	mov    DWORD PTR [eax],edx
c00132f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132fa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013308:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013312:	90                   	nop
c0013313:	83 c4 0c             	add    esp,0xc
c0013316:	c3                   	ret    
c0013317:	90                   	nop

c0013318 <Buzzer::~Buzzer()>:
c0013318:	83 ec 0c             	sub    esp,0xc
c001331b:	ba 7c b1 02 c0       	mov    edx,0xc002b17c
c0013320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013324:	89 10                	mov    DWORD PTR [eax],edx
c0013326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001332a:	83 ec 0c             	sub    esp,0xc
c001332d:	50                   	push   eax
c001332e:	e8 83 05 00 00       	call   c00138b6 <Device::~Device()>
c0013333:	83 c4 10             	add    esp,0x10
c0013336:	90                   	nop
c0013337:	83 c4 0c             	add    esp,0xc
c001333a:	c3                   	ret    
c001333b:	90                   	nop

c001333c <Buzzer::~Buzzer()>:
c001333c:	83 ec 0c             	sub    esp,0xc
c001333f:	83 ec 0c             	sub    esp,0xc
c0013342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013346:	e8 cd ff ff ff       	call   c0013318 <Buzzer::~Buzzer()>
c001334b:	83 c4 10             	add    esp,0x10
c001334e:	83 ec 08             	sub    esp,0x8
c0013351:	68 5c 01 00 00       	push   0x15c
c0013356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001335a:	e8 70 f1 ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c001335f:	83 c4 10             	add    esp,0x10
c0013362:	83 c4 0c             	add    esp,0xc
c0013365:	c3                   	ret    

c0013366 <Buzzer::stop()>:
c0013366:	83 ec 14             	sub    esp,0x14
c0013369:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001336d:	8b 10                	mov    edx,DWORD PTR [eax]
c001336f:	6a 00                	push   0x0
c0013371:	50                   	push   eax
c0013372:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013375:	83 c4 1c             	add    esp,0x1c
c0013378:	c3                   	ret    

c0013379 <beepThread(void*)>:
c0013379:	53                   	push   ebx
c001337a:	83 ec 08             	sub    esp,0x8
c001337d:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0013382:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013386:	48                   	dec    eax
c0013387:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001338c:	75 01                	jne    c001338f <beepThread(void*)+0x16>
c001338e:	fb                   	sti    
c001338f:	50                   	push   eax
c0013390:	50                   	push   eax
c0013391:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013396:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001339c:	52                   	push   edx
c001339d:	50                   	push   eax
c001339e:	e8 96 ad 00 00       	call   c001e139 <nanoSleep(unsigned long long)>
c00133a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00133a6:	e8 bb ff ff ff       	call   c0013366 <Buzzer::stop()>
c00133ab:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00133b3:	83 c4 18             	add    esp,0x18
c00133b6:	5b                   	pop    ebx
c00133b7:	e9 79 ac 00 00       	jmp    c001e035 <blockTask(TaskState)>

c00133bc <Buzzer::beep(int, int, bool)>:
c00133bc:	57                   	push   edi
c00133bd:	56                   	push   esi
c00133be:	53                   	push   ebx
c00133bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00133c3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00133c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133cb:	52                   	push   edx
c00133cc:	52                   	push   edx
c00133cd:	8b 06                	mov    eax,DWORD PTR [esi]
c00133cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133d3:	56                   	push   esi
c00133d4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00133d7:	83 c4 10             	add    esp,0x10
c00133da:	89 f8                	mov    eax,edi
c00133dc:	84 c0                	test   al,al
c00133de:	74 1f                	je     c00133ff <Buzzer::beep(int, int, bool)+0x43>
c00133e0:	50                   	push   eax
c00133e1:	50                   	push   eax
c00133e2:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00133e8:	99                   	cdq    
c00133e9:	52                   	push   edx
c00133ea:	50                   	push   eax
c00133eb:	e8 49 ad 00 00       	call   c001e139 <nanoSleep(unsigned long long)>
c00133f0:	83 c4 10             	add    esp,0x10
c00133f3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00133f7:	5b                   	pop    ebx
c00133f8:	5e                   	pop    esi
c00133f9:	5f                   	pop    edi
c00133fa:	e9 67 ff ff ff       	jmp    c0013366 <Buzzer::stop()>
c00133ff:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013405:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001340a:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013412:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013416:	c7 44 24 14 79 33 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013379
c001341e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013422:	5b                   	pop    ebx
c0013423:	5e                   	pop    esi
c0013424:	5f                   	pop    edi
c0013425:	e9 c8 a7 00 00       	jmp    c001dbf2 <Process::createThread(void (*)(void*), void*, int)>

c001342a <User::loadClockSettings(int)>:
c001342a:	53                   	push   ebx
c001342b:	83 ec 14             	sub    esp,0x14
c001342e:	68 14 01 00 00       	push   0x114
c0013433:	e8 7e c1 ff ff       	call   c000f5b6 <malloc>
c0013438:	83 c4 0c             	add    esp,0xc
c001343b:	89 c3                	mov    ebx,eax
c001343d:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c0013443:	68 a4 b1 02 c0       	push   0xc002b1a4
c0013448:	50                   	push   eax
c0013449:	e8 c0 f6 ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c001344e:	58                   	pop    eax
c001344f:	5a                   	pop    edx
c0013450:	6a 01                	push   0x1
c0013452:	53                   	push   ebx
c0013453:	e8 1a f7 ff ff       	call   c0012b72 <File::open(FileOpenMode)>
c0013458:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001345b:	e8 70 f7 ff ff       	call   c0012bd0 <File::close()>
c0013460:	83 c4 10             	add    esp,0x10
c0013463:	85 db                	test   ebx,ebx
c0013465:	74 0f                	je     c0013476 <User::loadClockSettings(int)+0x4c>
c0013467:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013469:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001346d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013470:	83 c4 08             	add    esp,0x8
c0013473:	5b                   	pop    ebx
c0013474:	ff e0                	jmp    eax
c0013476:	83 c4 08             	add    esp,0x8
c0013479:	5b                   	pop    ebx
c001347a:	c3                   	ret    
c001347b:	90                   	nop

c001347c <Clock::Clock(char const*)>:
c001347c:	83 ec 0c             	sub    esp,0xc
c001347f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013483:	83 ec 08             	sub    esp,0x8
c0013486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001348a:	50                   	push   eax
c001348b:	e8 5c 07 00 00       	call   c0013bec <Device::Device(char const*)>
c0013490:	83 c4 10             	add    esp,0x10
c0013493:	ba cc b1 02 c0       	mov    edx,0xc002b1cc
c0013498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001349c:	89 10                	mov    DWORD PTR [eax],edx
c001349e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134a2:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00134ac:	90                   	nop
c00134ad:	83 c4 0c             	add    esp,0xc
c00134b0:	c3                   	ret    
c00134b1:	90                   	nop

c00134b2 <Clock::~Clock()>:
c00134b2:	83 ec 0c             	sub    esp,0xc
c00134b5:	ba cc b1 02 c0       	mov    edx,0xc002b1cc
c00134ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134be:	89 10                	mov    DWORD PTR [eax],edx
c00134c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c4:	83 ec 0c             	sub    esp,0xc
c00134c7:	50                   	push   eax
c00134c8:	e8 e9 03 00 00       	call   c00138b6 <Device::~Device()>
c00134cd:	83 c4 10             	add    esp,0x10
c00134d0:	90                   	nop
c00134d1:	83 c4 0c             	add    esp,0xc
c00134d4:	c3                   	ret    
c00134d5:	90                   	nop

c00134d6 <Clock::~Clock()>:
c00134d6:	83 ec 0c             	sub    esp,0xc
c00134d9:	83 ec 0c             	sub    esp,0xc
c00134dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134e0:	e8 cd ff ff ff       	call   c00134b2 <Clock::~Clock()>
c00134e5:	83 c4 10             	add    esp,0x10
c00134e8:	83 ec 08             	sub    esp,0x8
c00134eb:	68 58 01 00 00       	push   0x158
c00134f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134f4:	e8 d6 ef ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c00134f9:	83 c4 10             	add    esp,0x10
c00134fc:	83 c4 0c             	add    esp,0xc
c00134ff:	c3                   	ret    

c0013500 <Clock::timeInSecondsLocal()>:
c0013500:	53                   	push   ebx
c0013501:	83 ec 14             	sub    esp,0x14
c0013504:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013508:	8b 10                	mov    edx,DWORD PTR [eax]
c001350a:	50                   	push   eax
c001350b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001350e:	0f b6 0d bc ee 02 c0 	movzx  ecx,BYTE PTR ds:0xc002eebc
c0013515:	03 0d c0 ee 02 c0    	add    ecx,DWORD PTR ds:0xc002eec0
c001351b:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013521:	89 cb                	mov    ebx,ecx
c0013523:	c1 fb 1f             	sar    ebx,0x1f
c0013526:	01 c8                	add    eax,ecx
c0013528:	11 da                	adc    edx,ebx
c001352a:	83 c4 10             	add    esp,0x10
c001352d:	31 c9                	xor    ecx,ecx
c001352f:	80 3d bd ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eebd,0x0
c0013536:	74 05                	je     c001353d <Clock::timeInSecondsLocal()+0x3d>
c0013538:	b9 08 07 00 00       	mov    ecx,0x708
c001353d:	31 db                	xor    ebx,ebx
c001353f:	01 c8                	add    eax,ecx
c0013541:	11 da                	adc    edx,ebx
c0013543:	83 c4 08             	add    esp,0x8
c0013546:	5b                   	pop    ebx
c0013547:	c3                   	ret    

c0013548 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013548:	57                   	push   edi
c0013549:	56                   	push   esi
c001354a:	53                   	push   ebx
c001354b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001354f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013553:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013555:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013559:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001355c:	0f b6 05 bc ee 02 c0 	movzx  eax,BYTE PTR ds:0xc002eebc
c0013563:	03 05 c0 ee 02 c0    	add    eax,DWORD PTR ds:0xc002eec0
c0013569:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001356f:	99                   	cdq    
c0013570:	29 c6                	sub    esi,eax
c0013572:	19 d7                	sbb    edi,edx
c0013574:	89 f0                	mov    eax,esi
c0013576:	89 fa                	mov    edx,edi
c0013578:	31 f6                	xor    esi,esi
c001357a:	80 3d bd ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eebd,0x0
c0013581:	74 05                	je     c0013588 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013583:	be 08 07 00 00       	mov    esi,0x708
c0013588:	31 ff                	xor    edi,edi
c001358a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001358e:	29 f0                	sub    eax,esi
c0013590:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013594:	19 fa                	sbb    edx,edi
c0013596:	89 d8                	mov    eax,ebx
c0013598:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001359c:	5b                   	pop    ebx
c001359d:	5e                   	pop    esi
c001359e:	5f                   	pop    edi
c001359f:	ff e0                	jmp    eax

c00135a1 <datetimeToSeconds(datetime_t)>:
c00135a1:	55                   	push   ebp
c00135a2:	57                   	push   edi
c00135a3:	56                   	push   esi
c00135a4:	53                   	push   ebx
c00135a5:	83 ec 14             	sub    esp,0x14
c00135a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00135ac:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00135b0:	89 d3                	mov    ebx,edx
c00135b2:	0f b6 c6             	movzx  eax,dh
c00135b5:	c1 eb 10             	shr    ebx,0x10
c00135b8:	48                   	dec    eax
c00135b9:	66 81 eb 6c 07       	sub    bx,0x76c
c00135be:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00135c2:	0f b6 f5             	movzx  esi,ch
c00135c5:	89 cf                	mov    edi,ecx
c00135c7:	6b f6 3c             	imul   esi,esi,0x3c
c00135ca:	c1 ef 10             	shr    edi,0x10
c00135cd:	0f b6 c9             	movzx  ecx,cl
c00135d0:	89 f8                	mov    eax,edi
c00135d2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00135d8:	0f b6 f8             	movzx  edi,al
c00135db:	0f b6 d2             	movzx  edx,dl
c00135de:	01 fe                	add    esi,edi
c00135e0:	01 f1                	add    ecx,esi
c00135e2:	0f b7 f3             	movzx  esi,bx
c00135e5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00135e9:	c1 f9 1f             	sar    ecx,0x1f
c00135ec:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00135f1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00135f5:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00135fa:	8b 0c 8d 00 b2 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4e00]
c0013601:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013605:	76 29                	jbe    c0013630 <datetimeToSeconds(datetime_t)+0x8f>
c0013607:	f6 c3 03             	test   bl,0x3
c001360a:	75 24                	jne    c0013630 <datetimeToSeconds(datetime_t)+0x8f>
c001360c:	31 d2                	xor    edx,edx
c001360e:	bf 64 00 00 00       	mov    edi,0x64
c0013613:	89 d8                	mov    eax,ebx
c0013615:	66 f7 f7             	div    di
c0013618:	66 85 d2             	test   dx,dx
c001361b:	75 12                	jne    c001362f <datetimeToSeconds(datetime_t)+0x8e>
c001361d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013623:	bf 90 01 00 00       	mov    edi,0x190
c0013628:	99                   	cdq    
c0013629:	f7 ff                	idiv   edi
c001362b:	85 d2                	test   edx,edx
c001362d:	75 01                	jne    c0013630 <datetimeToSeconds(datetime_t)+0x8f>
c001362f:	41                   	inc    ecx
c0013630:	66 83 fb 46          	cmp    bx,0x46
c0013634:	76 45                	jbe    c001367b <datetimeToSeconds(datetime_t)+0xda>
c0013636:	bb 46 00 00 00       	mov    ebx,0x46
c001363b:	bf 64 00 00 00       	mov    edi,0x64
c0013640:	bd 90 01 00 00       	mov    ebp,0x190
c0013645:	b8 6d 01 00 00       	mov    eax,0x16d
c001364a:	f6 c3 03             	test   bl,0x3
c001364d:	75 23                	jne    c0013672 <datetimeToSeconds(datetime_t)+0xd1>
c001364f:	89 d8                	mov    eax,ebx
c0013651:	99                   	cdq    
c0013652:	f7 ff                	idiv   edi
c0013654:	b8 6e 01 00 00       	mov    eax,0x16e
c0013659:	85 d2                	test   edx,edx
c001365b:	75 15                	jne    c0013672 <datetimeToSeconds(datetime_t)+0xd1>
c001365d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013663:	99                   	cdq    
c0013664:	f7 fd                	idiv   ebp
c0013666:	83 fa 01             	cmp    edx,0x1
c0013669:	19 c0                	sbb    eax,eax
c001366b:	f7 d0                	not    eax
c001366d:	05 6e 01 00 00       	add    eax,0x16e
c0013672:	01 c1                	add    ecx,eax
c0013674:	43                   	inc    ebx
c0013675:	39 f3                	cmp    ebx,esi
c0013677:	7c cc                	jl     c0013645 <datetimeToSeconds(datetime_t)+0xa4>
c0013679:	eb 35                	jmp    c00136b0 <datetimeToSeconds(datetime_t)+0x10f>
c001367b:	74 33                	je     c00136b0 <datetimeToSeconds(datetime_t)+0x10f>
c001367d:	b8 45 00 00 00       	mov    eax,0x45
c0013682:	89 c2                	mov    edx,eax
c0013684:	83 e2 03             	and    edx,0x3
c0013687:	39 f0                	cmp    eax,esi
c0013689:	7e 0f                	jle    c001369a <datetimeToSeconds(datetime_t)+0xf9>
c001368b:	83 fa 01             	cmp    edx,0x1
c001368e:	19 d2                	sbb    edx,edx
c0013690:	48                   	dec    eax
c0013691:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013698:	eb e8                	jmp    c0013682 <datetimeToSeconds(datetime_t)+0xe1>
c001369a:	b8 6d 01 00 00       	mov    eax,0x16d
c001369f:	85 d2                	test   edx,edx
c00136a1:	75 0b                	jne    c00136ae <datetimeToSeconds(datetime_t)+0x10d>
c00136a3:	66 83 fb 01          	cmp    bx,0x1
c00136a7:	19 c0                	sbb    eax,eax
c00136a9:	05 6e 01 00 00       	add    eax,0x16e
c00136ae:	29 c1                	sub    ecx,eax
c00136b0:	b8 80 51 01 00       	mov    eax,0x15180
c00136b5:	f7 e9                	imul   ecx
c00136b7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00136bb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00136bf:	83 c4 14             	add    esp,0x14
c00136c2:	5b                   	pop    ebx
c00136c3:	5e                   	pop    esi
c00136c4:	5f                   	pop    edi
c00136c5:	5d                   	pop    ebp
c00136c6:	c3                   	ret    
c00136c7:	90                   	nop

c00136c8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00136c8:	57                   	push   edi
c00136c9:	56                   	push   esi
c00136ca:	53                   	push   ebx
c00136cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136cf:	8b 06                	mov    eax,DWORD PTR [esi]
c00136d1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00136d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136dc:	e8 c0 fe ff ff       	call   c00135a1 <datetimeToSeconds(datetime_t)>
c00136e1:	59                   	pop    ecx
c00136e2:	0f b6 0d bc ee 02 c0 	movzx  ecx,BYTE PTR ds:0xc002eebc
c00136e9:	5b                   	pop    ebx
c00136ea:	03 0d c0 ee 02 c0    	add    ecx,DWORD PTR ds:0xc002eec0
c00136f0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136f6:	89 cb                	mov    ebx,ecx
c00136f8:	c1 fb 1f             	sar    ebx,0x1f
c00136fb:	29 c8                	sub    eax,ecx
c00136fd:	19 da                	sbb    edx,ebx
c00136ff:	31 c9                	xor    ecx,ecx
c0013701:	80 3d bd ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eebd,0x0
c0013708:	74 05                	je     c001370f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001370a:	b9 08 07 00 00       	mov    ecx,0x708
c001370f:	31 db                	xor    ebx,ebx
c0013711:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013715:	29 c8                	sub    eax,ecx
c0013717:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001371b:	19 da                	sbb    edx,ebx
c001371d:	89 f8                	mov    eax,edi
c001371f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013723:	5b                   	pop    ebx
c0013724:	5e                   	pop    esi
c0013725:	5f                   	pop    edi
c0013726:	ff e0                	jmp    eax

c0013728 <secondsToDatetime(unsigned long long)>:
c0013728:	55                   	push   ebp
c0013729:	57                   	push   edi
c001372a:	56                   	push   esi
c001372b:	53                   	push   ebx
c001372c:	83 ec 1c             	sub    esp,0x1c
c001372f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013733:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013737:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001373b:	6a 00                	push   0x0
c001373d:	68 80 51 01 00       	push   0x15180
c0013742:	55                   	push   ebp
c0013743:	57                   	push   edi
c0013744:	e8 5b 38 01 00       	call   c0026fa4 <__udivdi3>
c0013749:	83 c4 10             	add    esp,0x10
c001374c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013752:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013756:	6a 00                	push   0x0
c0013758:	68 80 51 01 00       	push   0x15180
c001375d:	55                   	push   ebp
c001375e:	57                   	push   edi
c001375f:	bf 10 0e 00 00       	mov    edi,0xe10
c0013764:	e8 3b 39 01 00       	call   c00270a4 <__umoddi3>
c0013769:	83 c4 10             	add    esp,0x10
c001376c:	99                   	cdq    
c001376d:	f7 ff                	idiv   edi
c001376f:	bf 3c 00 00 00       	mov    edi,0x3c
c0013774:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013777:	89 d0                	mov    eax,edx
c0013779:	99                   	cdq    
c001377a:	f7 ff                	idiv   edi
c001377c:	85 db                	test   ebx,ebx
c001377e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013781:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013784:	79 11                	jns    c0013797 <secondsToDatetime(unsigned long long)+0x6f>
c0013786:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001378a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013790:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013795:	eb 07                	jmp    c001379e <secondsToDatetime(unsigned long long)+0x76>
c0013797:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001379c:	89 d8                	mov    eax,ebx
c001379e:	bf b4 05 00 00       	mov    edi,0x5b4
c00137a3:	99                   	cdq    
c00137a4:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00137a9:	f7 f9                	idiv   ecx
c00137ab:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00137b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137b4:	31 d2                	xor    edx,edx
c00137b6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00137be:	01 c3                	add    ebx,eax
c00137c0:	89 d8                	mov    eax,ebx
c00137c2:	f7 f1                	div    ecx
c00137c4:	31 d2                	xor    edx,edx
c00137c6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00137c9:	89 d8                	mov    eax,ebx
c00137cb:	f7 f7                	div    edi
c00137cd:	31 d2                	xor    edx,edx
c00137cf:	29 c1                	sub    ecx,eax
c00137d1:	89 d8                	mov    eax,ebx
c00137d3:	f7 f5                	div    ebp
c00137d5:	bd 6d 01 00 00       	mov    ebp,0x16d
c00137da:	29 c1                	sub    ecx,eax
c00137dc:	31 d2                	xor    edx,edx
c00137de:	89 c8                	mov    eax,ecx
c00137e0:	f7 f5                	div    ebp
c00137e2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00137e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137eb:	31 d2                	xor    edx,edx
c00137ed:	89 c8                	mov    eax,ecx
c00137ef:	f7 f5                	div    ebp
c00137f1:	31 d2                	xor    edx,edx
c00137f3:	01 c3                	add    ebx,eax
c00137f5:	89 c8                	mov    eax,ecx
c00137f7:	f7 f7                	div    edi
c00137f9:	bf 99 00 00 00       	mov    edi,0x99
c00137fe:	29 c3                	sub    ebx,eax
c0013800:	31 d2                	xor    edx,edx
c0013802:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001380a:	29 c3                	sub    ebx,eax
c001380c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001380f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013812:	bb 05 00 00 00       	mov    ebx,0x5
c0013817:	83 c1 02             	add    ecx,0x2
c001381a:	89 c8                	mov    eax,ecx
c001381c:	f7 f7                	div    edi
c001381e:	31 d2                	xor    edx,edx
c0013820:	89 c7                	mov    edi,eax
c0013822:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013828:	83 c0 02             	add    eax,0x2
c001382b:	f7 f3                	div    ebx
c001382d:	89 eb                	mov    ebx,ebp
c001382f:	29 c3                	sub    ebx,eax
c0013831:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013837:	88 1e                	mov    BYTE PTR [esi],bl
c0013839:	19 c0                	sbb    eax,eax
c001383b:	31 d2                	xor    edx,edx
c001383d:	83 e0 0c             	and    eax,0xc
c0013840:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013844:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001384c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013850:	83 f9 01             	cmp    ecx,0x1
c0013853:	0f 96 c2             	setbe  dl
c0013856:	41                   	inc    ecx
c0013857:	01 d0                	add    eax,edx
c0013859:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001385c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013860:	83 c4 1c             	add    esp,0x1c
c0013863:	89 f0                	mov    eax,esi
c0013865:	5b                   	pop    ebx
c0013866:	5e                   	pop    esi
c0013867:	5f                   	pop    edi
c0013868:	5d                   	pop    ebp
c0013869:	c2 04 00             	ret    0x4

c001386c <Clock::timeInDatetimeLocal()>:
c001386c:	53                   	push   ebx
c001386d:	83 ec 14             	sub    esp,0x14
c0013870:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013874:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013878:	e8 83 fc ff ff       	call   c0013500 <Clock::timeInSecondsLocal()>
c001387d:	83 c4 0c             	add    esp,0xc
c0013880:	52                   	push   edx
c0013881:	50                   	push   eax
c0013882:	53                   	push   ebx
c0013883:	e8 a0 fe ff ff       	call   c0013728 <secondsToDatetime(unsigned long long)>
c0013888:	89 d8                	mov    eax,ebx
c001388a:	83 c4 14             	add    esp,0x14
c001388d:	5b                   	pop    ebx
c001388e:	c2 04 00             	ret    0x4
c0013891:	90                   	nop

c0013892 <Device::hibernate()>:
c0013892:	c3                   	ret    
c0013893:	90                   	nop

c0013894 <Device::wake()>:
c0013894:	c3                   	ret    
c0013895:	90                   	nop

c0013896 <Device::detect()>:
c0013896:	c3                   	ret    
c0013897:	90                   	nop

c0013898 <Device::disableLegacy()>:
c0013898:	c3                   	ret    
c0013899:	90                   	nop

c001389a <Device::powerSaving(PowerSavingLevel)>:
c001389a:	c3                   	ret    
c001389b:	90                   	nop

c001389c <DriverlessDevice::close(int, int, void*)>:
c001389c:	31 c0                	xor    eax,eax
c001389e:	c3                   	ret    
c001389f:	90                   	nop

c00138a0 <DriverlessDevice::detect()>:
c00138a0:	c3                   	ret    
c00138a1:	90                   	nop

c00138a2 <DriverlessDevice::open(int, int, void*)>:
c00138a2:	83 ec 18             	sub    esp,0x18
c00138a5:	68 30 b2 02 c0       	push   0xc002b230
c00138aa:	e8 ce 67 00 00       	call   c001a07d <Krnl::panic(char const*)>
c00138af:	83 c8 ff             	or     eax,0xffffffff
c00138b2:	83 c4 1c             	add    esp,0x1c
c00138b5:	c3                   	ret    

c00138b6 <Device::~Device()>:
c00138b6:	ba 90 b2 02 c0       	mov    edx,0xc002b290
c00138bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138bf:	89 10                	mov    DWORD PTR [eax],edx
c00138c1:	90                   	nop
c00138c2:	c3                   	ret    
c00138c3:	90                   	nop

c00138c4 <Device::~Device()>:
c00138c4:	83 ec 0c             	sub    esp,0xc
c00138c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00138cb:	e8 e6 ff ff ff       	call   c00138b6 <Device::~Device()>
c00138d0:	83 c4 04             	add    esp,0x4
c00138d3:	83 ec 08             	sub    esp,0x8
c00138d6:	68 58 01 00 00       	push   0x158
c00138db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138df:	e8 eb eb ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c00138e4:	83 c4 10             	add    esp,0x10
c00138e7:	83 c4 0c             	add    esp,0xc
c00138ea:	c3                   	ret    
c00138eb:	90                   	nop

c00138ec <Device::findAndLoadDriver()>:
c00138ec:	c7 44 24 04 4e b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b24e
c00138f4:	e9 b6 ec ff ff       	jmp    c00125af <Dbg::kprintf(char const*, ...)>
c00138f9:	90                   	nop

c00138fa <Device::preOpenPCI(PCIDeviceInfo)>:
c00138fa:	57                   	push   edi
c00138fb:	b9 09 00 00 00       	mov    ecx,0x9
c0013900:	56                   	push   esi
c0013901:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013905:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013909:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013913:	81 c7 18 01 00 00    	add    edi,0x118
c0013919:	fc                   	cld    
c001391a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001391c:	5e                   	pop    esi
c001391d:	5f                   	pop    edi
c001391e:	c3                   	ret    
c001391f:	90                   	nop

c0013920 <Device::preOpenACPI(void*, char*, char*)>:
c0013920:	57                   	push   edi
c0013921:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013926:	56                   	push   esi
c0013927:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001392b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001392f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013939:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001393f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013945:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013949:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001394b:	b9 0e 00 00 00       	mov    ecx,0xe
c0013950:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013956:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001395a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001395c:	5e                   	pop    esi
c001395d:	5f                   	pop    edi
c001395e:	c3                   	ret    
c001395f:	90                   	nop

c0013960 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013964:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013969:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013970:	75 0b                	jne    c001397d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013972:	8b 00                	mov    eax,DWORD PTR [eax]
c0013974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013978:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001397b:	eb 1e                	jmp    c001399b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001397d:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0013982:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013988:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001398e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013990:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013994:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013998:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001399b:	ff e0                	jmp    eax
c001399d:	90                   	nop

c001399e <Device::getParent()>:
c001399e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139a2:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00139a8:	c3                   	ret    
c00139a9:	90                   	nop

c00139aa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00139aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139ae:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00139b3:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00139ba:	75 0b                	jne    c00139c7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00139bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00139be:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139c2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00139c5:	eb 1e                	jmp    c00139e5 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00139c7:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c00139cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00139d2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00139d8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00139da:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00139e2:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00139e5:	ff e0                	jmp    eax
c00139e7:	90                   	nop

c00139e8 <Device::addChild(Device*)>:
c00139e8:	53                   	push   ebx
c00139e9:	83 ec 08             	sub    esp,0x8
c00139ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00139f4:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00139fa:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013a00:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013a02:	85 d2                	test   edx,edx
c0013a04:	74 04                	je     c0013a0a <Device::addChild(Device*)+0x22>
c0013a06:	89 d3                	mov    ebx,edx
c0013a08:	eb f6                	jmp    c0013a00 <Device::addChild(Device*)+0x18>
c0013a0a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013a0d:	83 ec 0c             	sub    esp,0xc
c0013a10:	6a 08                	push   0x8
c0013a12:	e8 9f bb ff ff       	call   c000f5b6 <malloc>
c0013a17:	89 03                	mov    DWORD PTR [ebx],eax
c0013a19:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a1f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a26:	83 c4 18             	add    esp,0x18
c0013a29:	5b                   	pop    ebx
c0013a2a:	c3                   	ret    
c0013a2b:	90                   	nop

c0013a2c <Device::removeAllChildren()>:
c0013a2c:	56                   	push   esi
c0013a2d:	53                   	push   ebx
c0013a2e:	52                   	push   edx
c0013a2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a33:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013a39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a3c:	74 17                	je     c0013a55 <Device::removeAllChildren()+0x29>
c0013a3e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013a41:	85 c0                	test   eax,eax
c0013a43:	74 0c                	je     c0013a51 <Device::removeAllChildren()+0x25>
c0013a45:	83 ec 0c             	sub    esp,0xc
c0013a48:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a4a:	50                   	push   eax
c0013a4b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013a4e:	83 c4 10             	add    esp,0x10
c0013a51:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a53:	eb e4                	jmp    c0013a39 <Device::removeAllChildren()+0xd>
c0013a55:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013a5b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a61:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013a67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a6e:	58                   	pop    eax
c0013a6f:	5b                   	pop    ebx
c0013a70:	5e                   	pop    esi
c0013a71:	c3                   	ret    

c0013a72 <Device::hibernateAll()>:
c0013a72:	53                   	push   ebx
c0013a73:	83 ec 14             	sub    esp,0x14
c0013a76:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a7c:	53                   	push   ebx
c0013a7d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013a80:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a86:	83 c4 10             	add    esp,0x10
c0013a89:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a8c:	74 0f                	je     c0013a9d <Device::hibernateAll()+0x2b>
c0013a8e:	83 ec 0c             	sub    esp,0xc
c0013a91:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a94:	e8 d9 ff ff ff       	call   c0013a72 <Device::hibernateAll()>
c0013a99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a9b:	eb e9                	jmp    c0013a86 <Device::hibernateAll()+0x14>
c0013a9d:	83 c4 08             	add    esp,0x8
c0013aa0:	5b                   	pop    ebx
c0013aa1:	c3                   	ret    

c0013aa2 <Device::wakeAll()>:
c0013aa2:	53                   	push   ebx
c0013aa3:	83 ec 14             	sub    esp,0x14
c0013aa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013aaa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013aac:	53                   	push   ebx
c0013aad:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013ab0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ab6:	83 c4 10             	add    esp,0x10
c0013ab9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013abc:	74 0f                	je     c0013acd <Device::wakeAll()+0x2b>
c0013abe:	83 ec 0c             	sub    esp,0xc
c0013ac1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ac4:	e8 d9 ff ff ff       	call   c0013aa2 <Device::wakeAll()>
c0013ac9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013acb:	eb e9                	jmp    c0013ab6 <Device::wakeAll()+0x14>
c0013acd:	83 c4 08             	add    esp,0x8
c0013ad0:	5b                   	pop    ebx
c0013ad1:	c3                   	ret    

c0013ad2 <Device::detectAll()>:
c0013ad2:	53                   	push   ebx
c0013ad3:	83 ec 14             	sub    esp,0x14
c0013ad6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ada:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013adc:	53                   	push   ebx
c0013add:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013ae0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ae6:	83 c4 10             	add    esp,0x10
c0013ae9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013aec:	74 0f                	je     c0013afd <Device::detectAll()+0x2b>
c0013aee:	83 ec 0c             	sub    esp,0xc
c0013af1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013af4:	e8 d9 ff ff ff       	call   c0013ad2 <Device::detectAll()>
c0013af9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013afb:	eb e9                	jmp    c0013ae6 <Device::detectAll()+0x14>
c0013afd:	83 c4 08             	add    esp,0x8
c0013b00:	5b                   	pop    ebx
c0013b01:	c3                   	ret    

c0013b02 <Device::disableLegacyAll()>:
c0013b02:	53                   	push   ebx
c0013b03:	83 ec 14             	sub    esp,0x14
c0013b06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b0c:	53                   	push   ebx
c0013b0d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013b10:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b16:	83 c4 10             	add    esp,0x10
c0013b19:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b1c:	74 0f                	je     c0013b2d <Device::disableLegacyAll()+0x2b>
c0013b1e:	83 ec 0c             	sub    esp,0xc
c0013b21:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b24:	e8 d9 ff ff ff       	call   c0013b02 <Device::disableLegacyAll()>
c0013b29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b2b:	eb e9                	jmp    c0013b16 <Device::disableLegacyAll()+0x14>
c0013b2d:	83 c4 08             	add    esp,0x8
c0013b30:	5b                   	pop    ebx
c0013b31:	c3                   	ret    

c0013b32 <Device::loadDriversForAll()>:
c0013b32:	53                   	push   ebx
c0013b33:	83 ec 08             	sub    esp,0x8
c0013b36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b3a:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013b41:	75 0c                	jne    c0013b4f <Device::loadDriversForAll()+0x1d>
c0013b43:	83 ec 0c             	sub    esp,0xc
c0013b46:	53                   	push   ebx
c0013b47:	e8 a0 fd ff ff       	call   c00138ec <Device::findAndLoadDriver()>
c0013b4c:	83 c4 10             	add    esp,0x10
c0013b4f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b58:	74 12                	je     c0013b6c <Device::loadDriversForAll()+0x3a>
c0013b5a:	83 ec 0c             	sub    esp,0xc
c0013b5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b60:	e8 cd ff ff ff       	call   c0013b32 <Device::loadDriversForAll()>
c0013b65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b67:	83 c4 10             	add    esp,0x10
c0013b6a:	eb e9                	jmp    c0013b55 <Device::loadDriversForAll()+0x23>
c0013b6c:	83 c4 08             	add    esp,0x8
c0013b6f:	5b                   	pop    ebx
c0013b70:	c3                   	ret    
c0013b71:	90                   	nop

c0013b72 <Device::closeAll()>:
c0013b72:	53                   	push   ebx
c0013b73:	83 ec 08             	sub    esp,0x8
c0013b76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b7c:	6a 00                	push   0x0
c0013b7e:	6a 00                	push   0x0
c0013b80:	6a 00                	push   0x0
c0013b82:	53                   	push   ebx
c0013b83:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b8c:	83 c4 10             	add    esp,0x10
c0013b8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b92:	74 0f                	je     c0013ba3 <Device::closeAll()+0x31>
c0013b94:	83 ec 0c             	sub    esp,0xc
c0013b97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b9a:	e8 d3 ff ff ff       	call   c0013b72 <Device::closeAll()>
c0013b9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ba1:	eb e9                	jmp    c0013b8c <Device::closeAll()+0x1a>
c0013ba3:	83 c4 08             	add    esp,0x8
c0013ba6:	5b                   	pop    ebx
c0013ba7:	c3                   	ret    

c0013ba8 <Device::powerSavingAll(PowerSavingLevel)>:
c0013ba8:	56                   	push   esi
c0013ba9:	53                   	push   ebx
c0013baa:	83 ec 0c             	sub    esp,0xc
c0013bad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013bb1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013bb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bb7:	56                   	push   esi
c0013bb8:	53                   	push   ebx
c0013bb9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013bbc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bc2:	83 c4 10             	add    esp,0x10
c0013bc5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bc8:	74 0f                	je     c0013bd9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013bca:	52                   	push   edx
c0013bcb:	52                   	push   edx
c0013bcc:	56                   	push   esi
c0013bcd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bd0:	e8 d3 ff ff ff       	call   c0013ba8 <Device::powerSavingAll(PowerSavingLevel)>
c0013bd5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bd7:	eb e9                	jmp    c0013bc2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013bd9:	58                   	pop    eax
c0013bda:	5b                   	pop    ebx
c0013bdb:	5e                   	pop    esi
c0013bdc:	c3                   	ret    
c0013bdd:	90                   	nop

c0013bde <Device::setName(char const*)>:
c0013bde:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013be6:	e9 21 cc fe ff       	jmp    c000080c <strcpy>
c0013beb:	90                   	nop

c0013bec <Device::Device(char const*)>:
c0013bec:	83 ec 1c             	sub    esp,0x1c
c0013bef:	ba 90 b2 02 c0       	mov    edx,0xc002b290
c0013bf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bf8:	89 10                	mov    DWORD PTR [eax],edx
c0013bfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bfe:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013c08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c0c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c1a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c28:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013c32:	83 ec 08             	sub    esp,0x8
c0013c35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c3d:	e8 9c ff ff ff       	call   c0013bde <Device::setName(char const*)>
c0013c42:	83 c4 10             	add    esp,0x10
c0013c45:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013c4d:	83 ec 0c             	sub    esp,0xc
c0013c50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c54:	e8 5d b9 ff ff       	call   c000f5b6 <malloc>
c0013c59:	83 c4 10             	add    esp,0x10
c0013c5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c69:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c6d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013c73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c77:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013c7d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c87:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013c8d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c98:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013c9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ca3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cae:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013cb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cbc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013cc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cca:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013cd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cd8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013ce2:	90                   	nop
c0013ce3:	83 c4 1c             	add    esp,0x1c
c0013ce6:	c3                   	ret    
c0013ce7:	90                   	nop

c0013ce8 <Device::getName()>:
c0013ce8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cec:	05 d0 00 00 00       	add    eax,0xd0
c0013cf1:	c3                   	ret    

c0013cf2 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013cf2:	83 ec 0c             	sub    esp,0xc
c0013cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cf9:	83 ec 08             	sub    esp,0x8
c0013cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d00:	50                   	push   eax
c0013d01:	e8 e6 fe ff ff       	call   c0013bec <Device::Device(char const*)>
c0013d06:	83 c4 10             	add    esp,0x10
c0013d09:	ba bc b2 02 c0       	mov    edx,0xc002b2bc
c0013d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d12:	89 10                	mov    DWORD PTR [eax],edx
c0013d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d18:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013d22:	90                   	nop
c0013d23:	83 c4 0c             	add    esp,0xc
c0013d26:	c3                   	ret    
c0013d27:	90                   	nop

c0013d28 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013d28:	57                   	push   edi
c0013d29:	56                   	push   esi
c0013d2a:	53                   	push   ebx
c0013d2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d2f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d33:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d37:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013d3d:	75 0c                	jne    c0013d4b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013d3f:	52                   	push   edx
c0013d40:	52                   	push   edx
c0013d41:	53                   	push   ebx
c0013d42:	56                   	push   esi
c0013d43:	e8 ae 51 01 00       	call   c0028ef6 <LinkedList<Device>::addElement(Device*)>
c0013d48:	83 c4 10             	add    esp,0x10
c0013d4b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d51:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d54:	74 12                	je     c0013d68 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013d56:	50                   	push   eax
c0013d57:	57                   	push   edi
c0013d58:	56                   	push   esi
c0013d59:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d5c:	e8 c7 ff ff ff       	call   c0013d28 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013d61:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d63:	83 c4 10             	add    esp,0x10
c0013d66:	eb e9                	jmp    c0013d51 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013d68:	5b                   	pop    ebx
c0013d69:	5e                   	pop    esi
c0013d6a:	5f                   	pop    edi
c0013d6b:	c3                   	ret    

c0013d6c <getDevicesOfType(DeviceType)>:
c0013d6c:	53                   	push   ebx
c0013d6d:	83 ec 14             	sub    esp,0x14
c0013d70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d74:	53                   	push   ebx
c0013d75:	e8 58 52 01 00       	call   c0028fd2 <LinkedList<Device>::LinkedList()>
c0013d7a:	83 c4 0c             	add    esp,0xc
c0013d7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d81:	53                   	push   ebx
c0013d82:	ff 35 48 ed 02 c0    	push   DWORD PTR ds:0xc002ed48
c0013d88:	e8 9b ff ff ff       	call   c0013d28 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013d8d:	89 d8                	mov    eax,ebx
c0013d8f:	83 c4 18             	add    esp,0x18
c0013d92:	5b                   	pop    ebx
c0013d93:	c2 04 00             	ret    0x4

c0013d96 <HardDiskController::HardDiskController(char const*)>:
c0013d96:	83 ec 0c             	sub    esp,0xc
c0013d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d9d:	83 ec 08             	sub    esp,0x8
c0013da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013da4:	50                   	push   eax
c0013da5:	e8 42 fe ff ff       	call   c0013bec <Device::Device(char const*)>
c0013daa:	83 c4 10             	add    esp,0x10
c0013dad:	ba e8 b2 02 c0       	mov    edx,0xc002b2e8
c0013db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db6:	89 10                	mov    DWORD PTR [eax],edx
c0013db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dbc:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013dc6:	90                   	nop
c0013dc7:	83 c4 0c             	add    esp,0xc
c0013dca:	c3                   	ret    
c0013dcb:	90                   	nop

c0013dcc <HardDiskController::~HardDiskController()>:
c0013dcc:	83 ec 0c             	sub    esp,0xc
c0013dcf:	ba e8 b2 02 c0       	mov    edx,0xc002b2e8
c0013dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd8:	89 10                	mov    DWORD PTR [eax],edx
c0013dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dde:	83 ec 0c             	sub    esp,0xc
c0013de1:	50                   	push   eax
c0013de2:	e8 cf fa ff ff       	call   c00138b6 <Device::~Device()>
c0013de7:	83 c4 10             	add    esp,0x10
c0013dea:	90                   	nop
c0013deb:	83 c4 0c             	add    esp,0xc
c0013dee:	c3                   	ret    
c0013def:	90                   	nop

c0013df0 <HardDiskController::~HardDiskController()>:
c0013df0:	83 ec 0c             	sub    esp,0xc
c0013df3:	83 ec 0c             	sub    esp,0xc
c0013df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dfa:	e8 cd ff ff ff       	call   c0013dcc <HardDiskController::~HardDiskController()>
c0013dff:	83 c4 10             	add    esp,0x10
c0013e02:	83 ec 08             	sub    esp,0x8
c0013e05:	68 58 01 00 00       	push   0x158
c0013e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e0e:	e8 bc e6 ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0013e13:	83 c4 10             	add    esp,0x10
c0013e16:	83 c4 0c             	add    esp,0xc
c0013e19:	c3                   	ret    

c0013e1a <PhysicalDisk::eject()>:
c0013e1a:	83 ec 18             	sub    esp,0x18
c0013e1d:	68 0c b3 02 c0       	push   0xc002b30c
c0013e22:	e8 88 e7 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0013e27:	83 c8 ff             	or     eax,0xffffffff
c0013e2a:	83 c4 1c             	add    esp,0x1c
c0013e2d:	c3                   	ret    

c0013e2e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013e2e:	83 ec 0c             	sub    esp,0xc
c0013e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e35:	83 ec 08             	sub    esp,0x8
c0013e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e3c:	50                   	push   eax
c0013e3d:	e8 aa fd ff ff       	call   c0013bec <Device::Device(char const*)>
c0013e42:	83 c4 10             	add    esp,0x10
c0013e45:	ba 3c b3 02 c0       	mov    edx,0xc002b33c
c0013e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4e:	89 10                	mov    DWORD PTR [eax],edx
c0013e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e54:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013e5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e7c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e86:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013e90:	90                   	nop
c0013e91:	83 c4 0c             	add    esp,0xc
c0013e94:	c3                   	ret    
c0013e95:	90                   	nop

c0013e96 <PhysicalDisk::startCache()>:
c0013e96:	56                   	push   esi
c0013e97:	53                   	push   ebx
c0013e98:	83 ec 10             	sub    esp,0x10
c0013e9b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e9f:	6a 44                	push   0x44
c0013ea1:	e8 10 b7 ff ff       	call   c000f5b6 <malloc>
c0013ea6:	89 c6                	mov    esi,eax
c0013ea8:	58                   	pop    eax
c0013ea9:	5a                   	pop    edx
c0013eaa:	53                   	push   ebx
c0013eab:	56                   	push   esi
c0013eac:	e8 89 28 00 00       	call   c001673a <VCache::VCache(PhysicalDisk*)>
c0013eb1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013eb7:	83 c4 14             	add    esp,0x14
c0013eba:	5b                   	pop    ebx
c0013ebb:	5e                   	pop    esi
c0013ebc:	c3                   	ret    
c0013ebd:	90                   	nop

c0013ebe <PhysicalDisk::~PhysicalDisk()>:
c0013ebe:	83 ec 0c             	sub    esp,0xc
c0013ec1:	ba 3c b3 02 c0       	mov    edx,0xc002b33c
c0013ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eca:	89 10                	mov    DWORD PTR [eax],edx
c0013ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed0:	83 ec 0c             	sub    esp,0xc
c0013ed3:	50                   	push   eax
c0013ed4:	e8 dd f9 ff ff       	call   c00138b6 <Device::~Device()>
c0013ed9:	83 c4 10             	add    esp,0x10
c0013edc:	90                   	nop
c0013edd:	83 c4 0c             	add    esp,0xc
c0013ee0:	c3                   	ret    
c0013ee1:	90                   	nop

c0013ee2 <PhysicalDisk::~PhysicalDisk()>:
c0013ee2:	83 ec 0c             	sub    esp,0xc
c0013ee5:	83 ec 0c             	sub    esp,0xc
c0013ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eec:	e8 cd ff ff ff       	call   c0013ebe <PhysicalDisk::~PhysicalDisk()>
c0013ef1:	83 c4 10             	add    esp,0x10
c0013ef4:	83 ec 08             	sub    esp,0x8
c0013ef7:	68 6c 01 00 00       	push   0x16c
c0013efc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f00:	e8 ca e5 ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0013f05:	83 c4 10             	add    esp,0x10
c0013f08:	83 c4 0c             	add    esp,0xc
c0013f0b:	c3                   	ret    

c0013f0c <FPU::FPU(char const*)>:
c0013f0c:	83 ec 0c             	sub    esp,0xc
c0013f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f13:	83 ec 08             	sub    esp,0x8
c0013f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f1a:	50                   	push   eax
c0013f1b:	e8 cc fc ff ff       	call   c0013bec <Device::Device(char const*)>
c0013f20:	83 c4 10             	add    esp,0x10
c0013f23:	ba 80 b3 02 c0       	mov    edx,0xc002b380
c0013f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f2c:	89 10                	mov    DWORD PTR [eax],edx
c0013f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f32:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013f3c:	90                   	nop
c0013f3d:	83 c4 0c             	add    esp,0xc
c0013f40:	c3                   	ret    
c0013f41:	90                   	nop

c0013f42 <FPU::~FPU()>:
c0013f42:	83 ec 0c             	sub    esp,0xc
c0013f45:	ba 80 b3 02 c0       	mov    edx,0xc002b380
c0013f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f4e:	89 10                	mov    DWORD PTR [eax],edx
c0013f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f54:	83 ec 0c             	sub    esp,0xc
c0013f57:	50                   	push   eax
c0013f58:	e8 59 f9 ff ff       	call   c00138b6 <Device::~Device()>
c0013f5d:	83 c4 10             	add    esp,0x10
c0013f60:	90                   	nop
c0013f61:	83 c4 0c             	add    esp,0xc
c0013f64:	c3                   	ret    
c0013f65:	90                   	nop

c0013f66 <FPU::~FPU()>:
c0013f66:	83 ec 0c             	sub    esp,0xc
c0013f69:	83 ec 0c             	sub    esp,0xc
c0013f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f70:	e8 cd ff ff ff       	call   c0013f42 <FPU::~FPU()>
c0013f75:	83 c4 10             	add    esp,0x10
c0013f78:	83 ec 08             	sub    esp,0x8
c0013f7b:	68 58 01 00 00       	push   0x158
c0013f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f84:	e8 46 e5 ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0013f89:	83 c4 10             	add    esp,0x10
c0013f8c:	83 c4 0c             	add    esp,0xc
c0013f8f:	c3                   	ret    

c0013f90 <setupFPU()>:
c0013f90:	53                   	push   ebx
c0013f91:	83 ec 08             	sub    esp,0x8
c0013f94:	8b 15 48 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed48
c0013f9a:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013fa1:	74 19                	je     c0013fbc <setupFPU()+0x2c>
c0013fa3:	83 ec 0c             	sub    esp,0xc
c0013fa6:	68 58 01 00 00       	push   0x158
c0013fab:	e8 06 b6 ff ff       	call   c000f5b6 <malloc>
c0013fb0:	89 c3                	mov    ebx,eax
c0013fb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fb5:	e8 6c 1b 01 00       	call   c0025b26 <AVX::AVX()>
c0013fba:	eb 5b                	jmp    c0014017 <setupFPU()+0x87>
c0013fbc:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013fc2:	84 c0                	test   al,al
c0013fc4:	79 19                	jns    c0013fdf <setupFPU()+0x4f>
c0013fc6:	83 ec 0c             	sub    esp,0xc
c0013fc9:	68 58 01 00 00       	push   0x158
c0013fce:	e8 e3 b5 ff ff       	call   c000f5b6 <malloc>
c0013fd3:	89 c3                	mov    ebx,eax
c0013fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fd8:	e8 6f 1c 01 00       	call   c0025c4c <SSE::SSE()>
c0013fdd:	eb 38                	jmp    c0014017 <setupFPU()+0x87>
c0013fdf:	a8 20                	test   al,0x20
c0013fe1:	74 19                	je     c0013ffc <setupFPU()+0x6c>
c0013fe3:	83 ec 0c             	sub    esp,0xc
c0013fe6:	68 58 01 00 00       	push   0x158
c0013feb:	e8 c6 b5 ff ff       	call   c000f5b6 <malloc>
c0013ff0:	89 c3                	mov    ebx,eax
c0013ff2:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ff5:	e8 bc 1b 01 00       	call   c0025bb6 <MMX::MMX()>
c0013ffa:	eb 1b                	jmp    c0014017 <setupFPU()+0x87>
c0013ffc:	a8 10                	test   al,0x10
c0013ffe:	74 1c                	je     c001401c <setupFPU()+0x8c>
c0014000:	83 ec 0c             	sub    esp,0xc
c0014003:	68 58 01 00 00       	push   0x158
c0014008:	e8 a9 b5 ff ff       	call   c000f5b6 <malloc>
c001400d:	89 c3                	mov    ebx,eax
c001400f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014012:	e8 c3 1c 01 00       	call   c0025cda <x87::x87()>
c0014017:	83 c4 10             	add    esp,0x10
c001401a:	eb 24                	jmp    c0014040 <setupFPU()+0xb0>
c001401c:	83 e0 ef             	and    eax,0xffffffef
c001401f:	83 ec 0c             	sub    esp,0xc
c0014022:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014028:	68 6c b3 02 c0       	push   0xc002b36c
c001402d:	e8 7d e5 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0014032:	0f 20 c0             	mov    eax,cr0
c0014035:	83 c8 04             	or     eax,0x4
c0014038:	0f 22 c0             	mov    cr0,eax
c001403b:	31 db                	xor    ebx,ebx
c001403d:	83 c4 10             	add    esp,0x10
c0014040:	89 d8                	mov    eax,ebx
c0014042:	83 c4 08             	add    esp,0x8
c0014045:	5b                   	pop    ebx
c0014046:	c3                   	ret    
c0014047:	90                   	nop

c0014048 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014048:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001404c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014050:	c1 e0 04             	shl    eax,0x4
c0014053:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014057:	8d 50 10             	lea    edx,[eax+0x10]
c001405a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014060:	74 08                	je     c001406a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014062:	83 c0 04             	add    eax,0x4
c0014065:	39 d0                	cmp    eax,edx
c0014067:	75 f1                	jne    c001405a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014069:	c3                   	ret    
c001406a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014074:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001407e:	eb e2                	jmp    c0014062 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014080 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014080:	57                   	push   edi
c0014081:	31 c0                	xor    eax,eax
c0014083:	56                   	push   esi
c0014084:	53                   	push   ebx
c0014085:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014089:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001408d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014091:	89 da                	mov    edx,ebx
c0014093:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014097:	c1 e2 04             	shl    edx,0x4
c001409a:	01 ca                	add    edx,ecx
c001409c:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00140a4:	74 16                	je     c00140bc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00140a6:	40                   	inc    eax
c00140a7:	83 f8 04             	cmp    eax,0x4
c00140aa:	75 f0                	jne    c001409c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00140ac:	c7 44 24 10 b0 b3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b3b0
c00140b4:	5b                   	pop    ebx
c00140b5:	5e                   	pop    esi
c00140b6:	5f                   	pop    edi
c00140b7:	e9 c1 5f 00 00       	jmp    c001a07d <Krnl::panic(char const*)>
c00140bc:	8d 04 98             	lea    eax,[eax+ebx*4]
c00140bf:	8d 04 81             	lea    eax,[ecx+eax*4]
c00140c2:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00140c8:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00140ce:	5b                   	pop    ebx
c00140cf:	5e                   	pop    esi
c00140d0:	5f                   	pop    edi
c00140d1:	c3                   	ret    

c00140d2 <doubleFault(regs*, void*)>:
c00140d2:	55                   	push   ebp
c00140d3:	89 e5                	mov    ebp,esp
c00140d5:	83 ec 08             	sub    esp,0x8
c00140d8:	83 ec 0c             	sub    esp,0xc
c00140db:	68 eb b3 02 c0       	push   0xc002b3eb
c00140e0:	e8 98 5f 00 00       	call   c001a07d <Krnl::panic(char const*)>
c00140e5:	83 c4 10             	add    esp,0x10
c00140e8:	90                   	nop
c00140e9:	c9                   	leave  
c00140ea:	c3                   	ret    
c00140eb:	90                   	nop

c00140ec <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00140ec:	56                   	push   esi
c00140ed:	53                   	push   ebx
c00140ee:	50                   	push   eax
c00140ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140f7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00140fc:	75 35                	jne    c0014133 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00140fe:	8d 43 20             	lea    eax,[ebx+0x20]
c0014101:	31 d2                	xor    edx,edx
c0014103:	89 c1                	mov    ecx,eax
c0014105:	c1 e1 04             	shl    ecx,0x4
c0014108:	01 f1                	add    ecx,esi
c001410a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014112:	74 3e                	je     c0014152 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014114:	42                   	inc    edx
c0014115:	83 fa 04             	cmp    edx,0x4
c0014118:	75 f0                	jne    c001410a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001411a:	83 ec 0c             	sub    esp,0xc
c001411d:	68 30 b4 02 c0       	push   0xc002b430
c0014122:	e8 56 5f 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0014127:	83 c4 10             	add    esp,0x10
c001412a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001412f:	5a                   	pop    edx
c0014130:	5b                   	pop    ebx
c0014131:	5e                   	pop    esi
c0014132:	c3                   	ret    
c0014133:	83 ec 0c             	sub    esp,0xc
c0014136:	56                   	push   esi
c0014137:	e8 ac fb ff ff       	call   c0013ce8 <Device::getName()>
c001413c:	83 c4 10             	add    esp,0x10
c001413f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014142:	75 ba                	jne    c00140fe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014144:	83 fb 0f             	cmp    ebx,0xf
c0014147:	7f 29                	jg     c0014172 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014149:	0f b6 9b a0 df 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2060]
c0014150:	eb ac                	jmp    c00140fe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014152:	8d 04 82             	lea    eax,[edx+eax*4]
c0014155:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014159:	8d 04 86             	lea    eax,[esi+eax*4]
c001415c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014162:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014166:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001416c:	89 d8                	mov    eax,ebx
c001416e:	5a                   	pop    edx
c001416f:	5b                   	pop    ebx
c0014170:	5e                   	pop    esi
c0014171:	c3                   	ret    
c0014172:	83 ec 0c             	sub    esp,0xc
c0014175:	68 f8 b3 02 c0       	push   0xc002b3f8
c001417a:	e8 fe 5e 00 00       	call   c001a07d <Krnl::panic(char const*)>
c001417f:	83 c4 10             	add    esp,0x10
c0014182:	e9 77 ff ff ff       	jmp    c00140fe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014187:	90                   	nop

c0014188 <InterruptController::clearAllHandlers(int, bool)>:
c0014188:	56                   	push   esi
c0014189:	53                   	push   ebx
c001418a:	52                   	push   edx
c001418b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001418f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014193:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014198:	75 61                	jne    c00141fb <InterruptController::clearAllHandlers(int, bool)+0x73>
c001419a:	8d 46 20             	lea    eax,[esi+0x20]
c001419d:	c1 e6 04             	shl    esi,0x4
c00141a0:	c1 e0 04             	shl    eax,0x4
c00141a3:	01 de                	add    esi,ebx
c00141a5:	01 d8                	add    eax,ebx
c00141a7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00141b1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00141bb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00141c5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00141cf:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00141d9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00141e3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00141ed:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00141f7:	58                   	pop    eax
c00141f8:	5b                   	pop    ebx
c00141f9:	5e                   	pop    esi
c00141fa:	c3                   	ret    
c00141fb:	83 ec 0c             	sub    esp,0xc
c00141fe:	53                   	push   ebx
c00141ff:	e8 e4 fa ff ff       	call   c0013ce8 <Device::getName()>
c0014204:	83 c4 10             	add    esp,0x10
c0014207:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001420a:	75 8e                	jne    c001419a <InterruptController::clearAllHandlers(int, bool)+0x12>
c001420c:	83 fe 0f             	cmp    esi,0xf
c001420f:	7f 09                	jg     c001421a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014211:	0f b6 b6 a0 df 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2060]
c0014218:	eb 80                	jmp    c001419a <InterruptController::clearAllHandlers(int, bool)+0x12>
c001421a:	83 ec 0c             	sub    esp,0xc
c001421d:	68 6c b4 02 c0       	push   0xc002b46c
c0014222:	e8 56 5e 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0014227:	83 c4 10             	add    esp,0x10
c001422a:	e9 6b ff ff ff       	jmp    c001419a <InterruptController::clearAllHandlers(int, bool)+0x12>
c001422f:	90                   	nop

c0014230 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014230:	56                   	push   esi
c0014231:	53                   	push   ebx
c0014232:	52                   	push   edx
c0014233:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014237:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001423b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014240:	75 3a                	jne    c001427c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014242:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014246:	8d 50 20             	lea    edx,[eax+0x20]
c0014249:	c1 e2 04             	shl    edx,0x4
c001424c:	8d 04 16             	lea    eax,[esi+edx*1]
c001424f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014253:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014259:	74 0b                	je     c0014266 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001425b:	83 c0 04             	add    eax,0x4
c001425e:	39 d0                	cmp    eax,edx
c0014260:	75 f1                	jne    c0014253 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014262:	58                   	pop    eax
c0014263:	5b                   	pop    ebx
c0014264:	5e                   	pop    esi
c0014265:	c3                   	ret    
c0014266:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014270:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001427a:	eb df                	jmp    c001425b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001427c:	83 ec 0c             	sub    esp,0xc
c001427f:	56                   	push   esi
c0014280:	e8 63 fa ff ff       	call   c0013ce8 <Device::getName()>
c0014285:	83 c4 10             	add    esp,0x10
c0014288:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001428b:	75 b5                	jne    c0014242 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001428d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014292:	7f 11                	jg     c00142a5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014298:	0f b6 80 a0 df 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2060]
c001429f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142a3:	eb 9d                	jmp    c0014242 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142a5:	83 ec 0c             	sub    esp,0xc
c00142a8:	68 6c b4 02 c0       	push   0xc002b46c
c00142ad:	e8 cb 5d 00 00       	call   c001a07d <Krnl::panic(char const*)>
c00142b2:	83 c4 10             	add    esp,0x10
c00142b5:	eb 8b                	jmp    c0014242 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00142b7 <nmiHandler(regs*, void*)>:
c00142b7:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c00142bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142c0:	e9 3b aa ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c00142c5 <int_handler>:
c00142c5:	55                   	push   ebp
c00142c6:	57                   	push   edi
c00142c7:	56                   	push   esi
c00142c8:	53                   	push   ebx
c00142c9:	83 ec 0c             	sub    esp,0xc
c00142cc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142d0:	80 3d 84 18 03 c0 00 	cmp    BYTE PTR ds:0xc0031884,0x0
c00142d7:	74 0b                	je     c00142e4 <int_handler+0x1f>
c00142d9:	fa                   	cli    
c00142da:	f4                   	hlt    
c00142db:	80 3d 84 18 03 c0 00 	cmp    BYTE PTR ds:0xc0031884,0x0
c00142e2:	75 f5                	jne    c00142d9 <int_handler+0x14>
c00142e4:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c00142e9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00142ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142f2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00142f8:	8d 43 e0             	lea    eax,[ebx-0x20]
c00142fb:	83 f8 17             	cmp    eax,0x17
c00142fe:	77 13                	ja     c0014313 <int_handler+0x4e>
c0014300:	83 ec 08             	sub    esp,0x8
c0014303:	8b 17                	mov    edx,DWORD PTR [edi]
c0014305:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014308:	0f b6 c0             	movzx  eax,al
c001430b:	50                   	push   eax
c001430c:	57                   	push   edi
c001430d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014310:	83 c4 10             	add    esp,0x10
c0014313:	83 c3 15             	add    ebx,0x15
c0014316:	c1 e3 04             	shl    ebx,0x4
c0014319:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001431d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014324:	31 db                	xor    ebx,ebx
c0014326:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001432a:	85 c0                	test   eax,eax
c001432c:	74 13                	je     c0014341 <int_handler+0x7c>
c001432e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014331:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014335:	74 1c                	je     c0014353 <int_handler+0x8e>
c0014337:	83 ec 08             	sub    esp,0x8
c001433a:	52                   	push   edx
c001433b:	56                   	push   esi
c001433c:	ff d0                	call   eax
c001433e:	83 c4 10             	add    esp,0x10
c0014341:	43                   	inc    ebx
c0014342:	83 fb 04             	cmp    ebx,0x4
c0014345:	75 df                	jne    c0014326 <int_handler+0x61>
c0014347:	83 c4 0c             	add    esp,0xc
c001434a:	31 c0                	xor    eax,eax
c001434c:	5b                   	pop    ebx
c001434d:	31 d2                	xor    edx,edx
c001434f:	5e                   	pop    esi
c0014350:	5f                   	pop    edi
c0014351:	5d                   	pop    ebp
c0014352:	c3                   	ret    
c0014353:	83 ec 08             	sub    esp,0x8
c0014356:	52                   	push   edx
c0014357:	56                   	push   esi
c0014358:	ff d0                	call   eax
c001435a:	83 c4 10             	add    esp,0x10
c001435d:	83 c4 0c             	add    esp,0xc
c0014360:	5b                   	pop    ebx
c0014361:	5e                   	pop    esi
c0014362:	5f                   	pop    edi
c0014363:	5d                   	pop    ebp
c0014364:	c3                   	ret    
c0014365:	90                   	nop

c0014366 <InterruptController::InterruptController(char const*)>:
c0014366:	83 ec 1c             	sub    esp,0x1c
c0014369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001436d:	83 ec 08             	sub    esp,0x8
c0014370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014374:	50                   	push   eax
c0014375:	e8 72 f8 ff ff       	call   c0013bec <Device::Device(char const*)>
c001437a:	83 c4 10             	add    esp,0x10
c001437d:	ba 2c b7 02 c0       	mov    edx,0xc002b72c
c0014382:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014386:	89 10                	mov    DWORD PTR [eax],edx
c0014388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001438c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014396:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001439e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00143a6:	7f 5e                	jg     c0014406 <InterruptController::InterruptController(char const*)+0xa0>
c00143a8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00143b0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00143b5:	7f 49                	jg     c0014400 <InterruptController::InterruptController(char const*)+0x9a>
c00143b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143bf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00143c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00143ca:	01 ca                	add    edx,ecx
c00143cc:	83 c2 54             	add    edx,0x54
c00143cf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00143d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143df:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00143e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00143ea:	01 ca                	add    edx,ecx
c00143ec:	81 c2 54 04 00 00    	add    edx,0x454
c00143f2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00143fa:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00143fe:	eb b0                	jmp    c00143b0 <InterruptController::InterruptController(char const*)+0x4a>
c0014400:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014404:	eb 98                	jmp    c001439e <InterruptController::InterruptController(char const*)+0x38>
c0014406:	90                   	nop
c0014407:	83 c4 1c             	add    esp,0x1c
c001440a:	c3                   	ret    
c001440b:	90                   	nop

c001440c <InterruptController::~InterruptController()>:
c001440c:	83 ec 0c             	sub    esp,0xc
c001440f:	ba 2c b7 02 c0       	mov    edx,0xc002b72c
c0014414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014418:	89 10                	mov    DWORD PTR [eax],edx
c001441a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001441e:	83 ec 0c             	sub    esp,0xc
c0014421:	50                   	push   eax
c0014422:	e8 8f f4 ff ff       	call   c00138b6 <Device::~Device()>
c0014427:	83 c4 10             	add    esp,0x10
c001442a:	90                   	nop
c001442b:	83 c4 0c             	add    esp,0xc
c001442e:	c3                   	ret    
c001442f:	90                   	nop

c0014430 <InterruptController::~InterruptController()>:
c0014430:	83 ec 0c             	sub    esp,0xc
c0014433:	83 ec 0c             	sub    esp,0xc
c0014436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001443a:	e8 cd ff ff ff       	call   c001440c <InterruptController::~InterruptController()>
c001443f:	83 c4 10             	add    esp,0x10
c0014442:	83 ec 08             	sub    esp,0x8
c0014445:	68 58 21 00 00       	push   0x2158
c001444a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001444e:	e8 7c e0 ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0014453:	83 c4 10             	add    esp,0x10
c0014456:	83 c4 0c             	add    esp,0xc
c0014459:	c3                   	ret    

c001445a <displayDebugInfo(regs*)>:
c001445a:	55                   	push   ebp
c001445b:	57                   	push   edi
c001445c:	56                   	push   esi
c001445d:	53                   	push   ebx
c001445e:	83 ec 24             	sub    esp,0x24
c0014461:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014465:	0f 20 c2             	mov    edx,cr0
c0014468:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001446c:	0f 20 d7             	mov    edi,cr2
c001446f:	0f 20 de             	mov    esi,cr3
c0014472:	0f 20 e5             	mov    ebp,cr4
c0014475:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014478:	68 a6 b4 02 c0       	push   0xc002b4a6
c001447d:	e8 2d e1 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0014482:	59                   	pop    ecx
c0014483:	58                   	pop    eax
c0014484:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014487:	68 b1 b4 02 c0       	push   0xc002b4b1
c001448c:	e8 1e e1 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0014491:	58                   	pop    eax
c0014492:	5a                   	pop    edx
c0014493:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014496:	68 bc b4 02 c0       	push   0xc002b4bc
c001449b:	e8 0f e1 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00144a0:	59                   	pop    ecx
c00144a1:	58                   	pop    eax
c00144a2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00144a5:	68 c7 b4 02 c0       	push   0xc002b4c7
c00144aa:	e8 00 e1 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00144af:	58                   	pop    eax
c00144b0:	5a                   	pop    edx
c00144b1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00144b4:	68 d2 b4 02 c0       	push   0xc002b4d2
c00144b9:	e8 f1 e0 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00144be:	59                   	pop    ecx
c00144bf:	58                   	pop    eax
c00144c0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00144c3:	68 dd b4 02 c0       	push   0xc002b4dd
c00144c8:	e8 e2 e0 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00144cd:	58                   	pop    eax
c00144ce:	5a                   	pop    edx
c00144cf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00144d2:	68 e8 b4 02 c0       	push   0xc002b4e8
c00144d7:	e8 d3 e0 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00144dc:	59                   	pop    ecx
c00144dd:	58                   	pop    eax
c00144de:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00144e1:	68 f3 b4 02 c0       	push   0xc002b4f3
c00144e6:	e8 c4 e0 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00144eb:	58                   	pop    eax
c00144ec:	5a                   	pop    edx
c00144ed:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00144f0:	68 fe b4 02 c0       	push   0xc002b4fe
c00144f5:	e8 b5 e0 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00144fa:	59                   	pop    ecx
c00144fb:	58                   	pop    eax
c00144fc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00144ff:	68 0d b5 02 c0       	push   0xc002b50d
c0014504:	e8 a6 e0 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0014509:	58                   	pop    eax
c001450a:	5a                   	pop    edx
c001450b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001450e:	68 18 b5 02 c0       	push   0xc002b518
c0014513:	e8 97 e0 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0014518:	59                   	pop    ecx
c0014519:	58                   	pop    eax
c001451a:	57                   	push   edi
c001451b:	68 23 b5 02 c0       	push   0xc002b523
c0014520:	e8 8a e0 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0014525:	58                   	pop    eax
c0014526:	5a                   	pop    edx
c0014527:	56                   	push   esi
c0014528:	68 2e b5 02 c0       	push   0xc002b52e
c001452d:	e8 7d e0 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0014532:	59                   	pop    ecx
c0014533:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0014538:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001453e:	e8 86 bd ff ff       	call   c00102c9 <setActiveTerminal(VgaText*)>
c0014543:	58                   	pop    eax
c0014544:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014547:	5a                   	pop    edx
c0014548:	c1 e0 05             	shl    eax,0x5
c001454b:	05 00 dd 02 c0       	add    eax,0xc002dd00
c0014550:	50                   	push   eax
c0014551:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0014556:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001455c:	e8 75 c2 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c0014561:	59                   	pop    ecx
c0014562:	58                   	pop    eax
c0014563:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0014568:	68 39 b5 02 c0       	push   0xc002b539
c001456d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014573:	e8 5e c2 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c0014578:	58                   	pop    eax
c0014579:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001457e:	5a                   	pop    edx
c001457f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014582:	83 c0 0c             	add    eax,0xc
c0014585:	50                   	push   eax
c0014586:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001458b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014591:	e8 40 c2 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c0014596:	59                   	pop    ecx
c0014597:	58                   	pop    eax
c0014598:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001459d:	68 42 b5 02 c0       	push   0xc002b542
c00145a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145a8:	e8 29 c2 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c00145ad:	58                   	pop    eax
c00145ae:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00145b3:	5a                   	pop    edx
c00145b4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00145b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145bd:	e8 ce c1 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c00145c2:	59                   	pop    ecx
c00145c3:	58                   	pop    eax
c00145c4:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00145c9:	68 4a b5 02 c0       	push   0xc002b54a
c00145ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145d4:	e8 fd c1 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c00145d9:	58                   	pop    eax
c00145da:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00145df:	5a                   	pop    edx
c00145e0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145e9:	e8 a2 c1 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c00145ee:	59                   	pop    ecx
c00145ef:	58                   	pop    eax
c00145f0:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00145f5:	68 52 b5 02 c0       	push   0xc002b552
c00145fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014600:	e8 d1 c1 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c0014605:	58                   	pop    eax
c0014606:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001460b:	5a                   	pop    edx
c001460c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001460f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014615:	e8 76 c1 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c001461a:	59                   	pop    ecx
c001461b:	58                   	pop    eax
c001461c:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0014621:	68 5a b5 02 c0       	push   0xc002b55a
c0014626:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001462c:	e8 a5 c1 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c0014631:	58                   	pop    eax
c0014632:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0014637:	5a                   	pop    edx
c0014638:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001463b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014641:	e8 4a c1 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c0014646:	59                   	pop    ecx
c0014647:	58                   	pop    eax
c0014648:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001464d:	68 62 b5 02 c0       	push   0xc002b562
c0014652:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014658:	e8 79 c1 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001465d:	58                   	pop    eax
c001465e:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0014663:	5a                   	pop    edx
c0014664:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014667:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001466d:	e8 1e c1 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c0014672:	59                   	pop    ecx
c0014673:	58                   	pop    eax
c0014674:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0014679:	68 6a b5 02 c0       	push   0xc002b56a
c001467e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014684:	e8 4d c1 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c0014689:	58                   	pop    eax
c001468a:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001468f:	5a                   	pop    edx
c0014690:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014693:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014699:	e8 f2 c0 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c001469e:	59                   	pop    ecx
c001469f:	58                   	pop    eax
c00146a0:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00146a5:	68 72 b5 02 c0       	push   0xc002b572
c00146aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b0:	e8 21 c1 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c00146b5:	58                   	pop    eax
c00146b6:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00146bb:	5a                   	pop    edx
c00146bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00146c0:	52                   	push   edx
c00146c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c7:	e8 c4 c0 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c00146cc:	59                   	pop    ecx
c00146cd:	58                   	pop    eax
c00146ce:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00146d3:	68 7b b5 02 c0       	push   0xc002b57b
c00146d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146de:	e8 f3 c0 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c00146e3:	58                   	pop    eax
c00146e4:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00146e9:	5a                   	pop    edx
c00146ea:	57                   	push   edi
c00146eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f1:	e8 9a c0 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c00146f6:	59                   	pop    ecx
c00146f7:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00146fc:	5f                   	pop    edi
c00146fd:	68 83 b5 02 c0       	push   0xc002b583
c0014702:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014708:	e8 c9 c0 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001470d:	58                   	pop    eax
c001470e:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0014713:	5a                   	pop    edx
c0014714:	56                   	push   esi
c0014715:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001471b:	e8 70 c0 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c0014720:	59                   	pop    ecx
c0014721:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0014726:	5e                   	pop    esi
c0014727:	68 8b b5 02 c0       	push   0xc002b58b
c001472c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014732:	e8 9f c0 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c0014737:	5f                   	pop    edi
c0014738:	58                   	pop    eax
c0014739:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001473e:	55                   	push   ebp
c001473f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014745:	e8 46 c0 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c001474a:	58                   	pop    eax
c001474b:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0014750:	5a                   	pop    edx
c0014751:	68 93 b5 02 c0       	push   0xc002b593
c0014756:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001475c:	e8 75 c0 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c0014761:	0f 21 c0             	mov    eax,db0
c0014764:	59                   	pop    ecx
c0014765:	5e                   	pop    esi
c0014766:	50                   	push   eax
c0014767:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001476c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014772:	e8 19 c0 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c0014777:	5f                   	pop    edi
c0014778:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001477d:	5d                   	pop    ebp
c001477e:	68 9c b5 02 c0       	push   0xc002b59c
c0014783:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014789:	e8 48 c0 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001478e:	0f 21 c8             	mov    eax,db1
c0014791:	5a                   	pop    edx
c0014792:	59                   	pop    ecx
c0014793:	50                   	push   eax
c0014794:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0014799:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001479f:	e8 ec bf ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c00147a4:	5e                   	pop    esi
c00147a5:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00147aa:	5f                   	pop    edi
c00147ab:	68 a4 b5 02 c0       	push   0xc002b5a4
c00147b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b6:	e8 1b c0 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c00147bb:	0f 21 d0             	mov    eax,db2
c00147be:	5d                   	pop    ebp
c00147bf:	5a                   	pop    edx
c00147c0:	50                   	push   eax
c00147c1:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00147c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147cc:	e8 bf bf ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c00147d1:	59                   	pop    ecx
c00147d2:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00147d7:	5e                   	pop    esi
c00147d8:	68 ac b5 02 c0       	push   0xc002b5ac
c00147dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e3:	e8 ee bf ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c00147e8:	0f 21 d8             	mov    eax,db3
c00147eb:	5f                   	pop    edi
c00147ec:	5d                   	pop    ebp
c00147ed:	50                   	push   eax
c00147ee:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00147f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f9:	e8 92 bf ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c00147fe:	58                   	pop    eax
c00147ff:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0014804:	5a                   	pop    edx
c0014805:	68 b4 b5 02 c0       	push   0xc002b5b4
c001480a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014810:	e8 c1 bf ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c0014815:	0f 21 f0             	mov    eax,db6
c0014818:	59                   	pop    ecx
c0014819:	5e                   	pop    esi
c001481a:	50                   	push   eax
c001481b:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0014820:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014826:	e8 65 bf ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c001482b:	5f                   	pop    edi
c001482c:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0014831:	5d                   	pop    ebp
c0014832:	68 bc b5 02 c0       	push   0xc002b5bc
c0014837:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483d:	e8 94 bf ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c0014842:	0f 21 f8             	mov    eax,db7
c0014845:	5a                   	pop    edx
c0014846:	59                   	pop    ecx
c0014847:	50                   	push   eax
c0014848:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001484d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014853:	e8 38 bf ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c0014858:	5e                   	pop    esi
c0014859:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001485c:	e8 a5 8b 00 00       	call   c001d406 <Thr::getDriverNameFromAddress(unsigned long)>
c0014861:	83 c4 10             	add    esp,0x10
c0014864:	85 c0                	test   eax,eax
c0014866:	74 7d                	je     c00148e5 <displayDebugInfo(regs*)+0x48b>
c0014868:	89 c6                	mov    esi,eax
c001486a:	50                   	push   eax
c001486b:	50                   	push   eax
c001486c:	56                   	push   esi
c001486d:	68 c4 b5 02 c0       	push   0xc002b5c4
c0014872:	e8 38 dd ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0014877:	5a                   	pop    edx
c0014878:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001487d:	59                   	pop    ecx
c001487e:	68 d2 b5 02 c0       	push   0xc002b5d2
c0014883:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014889:	e8 48 bf ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001488e:	5f                   	pop    edi
c001488f:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0014894:	5d                   	pop    ebp
c0014895:	56                   	push   esi
c0014896:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001489c:	e8 35 bf ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c00148a1:	58                   	pop    eax
c00148a2:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00148a7:	5a                   	pop    edx
c00148a8:	68 de b5 02 c0       	push   0xc002b5de
c00148ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b3:	e8 1e bf ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c00148b8:	59                   	pop    ecx
c00148b9:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00148be:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00148c4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148c7:	e8 71 8b 00 00       	call   c001d43d <Thr::getDriverOffsetFromAddress(unsigned long)>
c00148cc:	5b                   	pop    ebx
c00148cd:	5d                   	pop    ebp
c00148ce:	50                   	push   eax
c00148cf:	57                   	push   edi
c00148d0:	e8 bb be ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c00148d5:	58                   	pop    eax
c00148d6:	5a                   	pop    edx
c00148d7:	56                   	push   esi
c00148d8:	68 ea b5 02 c0       	push   0xc002b5ea
c00148dd:	e8 cd dc ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00148e2:	83 c4 10             	add    esp,0x10
c00148e5:	fa                   	cli    
c00148e6:	f4                   	hlt    
c00148e7:	eb fe                	jmp    c00148e7 <displayDebugInfo(regs*)+0x48d>

c00148e9 <x87EmulHandler(regs*, void*)>:
c00148e9:	83 ec 0c             	sub    esp,0xc
c00148ec:	0f 20 c2             	mov    edx,cr0
c00148ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148f4:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00148f8:	75 4b                	jne    c0014945 <x87EmulHandler(regs*, void*)+0x5c>
c00148fa:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c00148ff:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014905:	85 c0                	test   eax,eax
c0014907:	74 05                	je     c001490e <x87EmulHandler(regs*, void*)+0x25>
c0014909:	83 e2 08             	and    edx,0x8
c001490c:	75 17                	jne    c0014925 <x87EmulHandler(regs*, void*)+0x3c>
c001490e:	83 ec 0c             	sub    esp,0xc
c0014911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014915:	e8 e3 af 00 00       	call   c001f8fd <Vm::x87Handler(regs*)>
c001491a:	83 c4 10             	add    esp,0x10
c001491d:	84 c0                	test   al,al
c001491f:	74 24                	je     c0014945 <x87EmulHandler(regs*, void*)+0x5c>
c0014921:	83 c4 0c             	add    esp,0xc
c0014924:	c3                   	ret    
c0014925:	83 ec 0c             	sub    esp,0xc
c0014928:	68 10 b6 02 c0       	push   0xc002b610
c001492d:	e8 7d dc ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0014932:	0f 06                	clts   
c0014934:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014939:	83 c4 10             	add    esp,0x10
c001493c:	a3 c8 ee 02 c0       	mov    ds:0xc002eec8,eax
c0014941:	83 c4 0c             	add    esp,0xc
c0014944:	c3                   	ret    
c0014945:	83 ec 0c             	sub    esp,0xc
c0014948:	68 fa b5 02 c0       	push   0xc002b5fa
c001494d:	e8 5d dc ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0014952:	5a                   	pop    edx
c0014953:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014957:	e8 fe fa ff ff       	call   c001445a <displayDebugInfo(regs*)>

c001495c <gpFault(regs*, void*)>:
c001495c:	53                   	push   ebx
c001495d:	83 ec 14             	sub    esp,0x14
c0014960:	c7 05 c4 ee 02 c0 d6 ed 01 c0 	mov    DWORD PTR ds:0xc002eec4,0xc001edd6
c001496a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001496e:	53                   	push   ebx
c001496f:	e8 62 a4 00 00       	call   c001edd6 <Vm::faultHandler(regs*)>
c0014974:	83 c4 10             	add    esp,0x10
c0014977:	84 c0                	test   al,al
c0014979:	74 05                	je     c0014980 <gpFault(regs*, void*)+0x24>
c001497b:	83 c4 08             	add    esp,0x8
c001497e:	5b                   	pop    ebx
c001497f:	c3                   	ret    
c0014980:	83 ec 0c             	sub    esp,0xc
c0014983:	68 1d b6 02 c0       	push   0xc002b61d
c0014988:	e8 22 dc ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001498d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014990:	e8 c5 fa ff ff       	call   c001445a <displayDebugInfo(regs*)>

c0014995 <pgFault(regs*, void*)>:
c0014995:	83 ec 18             	sub    esp,0x18
c0014998:	68 38 b6 02 c0       	push   0xc002b638
c001499d:	e8 0d dc ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00149a2:	58                   	pop    eax
c00149a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149a7:	e8 ae fa ff ff       	call   c001445a <displayDebugInfo(regs*)>

c00149ac <otherISRHandler(regs*, void*)>:
c00149ac:	53                   	push   ebx
c00149ad:	83 ec 0c             	sub    esp,0xc
c00149b0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149b4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00149b7:	50                   	push   eax
c00149b8:	50                   	push   eax
c00149b9:	68 45 b6 02 c0       	push   0xc002b645
c00149be:	e8 ec db ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00149c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149c6:	e8 8f fa ff ff       	call   c001445a <displayDebugInfo(regs*)>

c00149cb <opcodeFault(regs*, void*)>:
c00149cb:	55                   	push   ebp
c00149cc:	89 e5                	mov    ebp,esp
c00149ce:	56                   	push   esi
c00149cf:	53                   	push   ebx
c00149d0:	83 ec 40             	sub    esp,0x40
c00149d3:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c00149d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00149de:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00149e4:	84 c0                	test   al,al
c00149e6:	74 24                	je     c0014a0c <opcodeFault(regs*, void*)+0x41>
c00149e8:	83 ec 0c             	sub    esp,0xc
c00149eb:	68 64 b6 02 c0       	push   0xc002b664
c00149f0:	e8 ba db ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00149f5:	83 c4 10             	add    esp,0x10
c00149f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149fe:	8d 50 19             	lea    edx,[eax+0x19]
c0014a01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a04:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a07:	e9 d5 05 00 00       	jmp    c0014fe1 <opcodeFault(regs*, void*)+0x616>
c0014a0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a0f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a12:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014a15:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014a19:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a20:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a23:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014a26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a29:	8a 00                	mov    al,BYTE PTR [eax]
c0014a2b:	3c f0                	cmp    al,0xf0
c0014a2d:	75 17                	jne    c0014a46 <opcodeFault(regs*, void*)+0x7b>
c0014a2f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a35:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a38:	8d 50 01             	lea    edx,[eax+0x1]
c0014a3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a3e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a41:	e9 da 00 00 00       	jmp    c0014b20 <opcodeFault(regs*, void*)+0x155>
c0014a46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a49:	8a 00                	mov    al,BYTE PTR [eax]
c0014a4b:	3c f2                	cmp    al,0xf2
c0014a4d:	74 09                	je     c0014a58 <opcodeFault(regs*, void*)+0x8d>
c0014a4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a52:	8a 00                	mov    al,BYTE PTR [eax]
c0014a54:	3c f3                	cmp    al,0xf3
c0014a56:	75 1b                	jne    c0014a73 <opcodeFault(regs*, void*)+0xa8>
c0014a58:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a5c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a62:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a65:	8d 50 01             	lea    edx,[eax+0x1]
c0014a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a6b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a6e:	e9 ad 00 00 00       	jmp    c0014b20 <opcodeFault(regs*, void*)+0x155>
c0014a73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a76:	8a 00                	mov    al,BYTE PTR [eax]
c0014a78:	3c 66                	cmp    al,0x66
c0014a7a:	75 1f                	jne    c0014a9b <opcodeFault(regs*, void*)+0xd0>
c0014a7c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a80:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014a84:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a8a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a8d:	8d 50 01             	lea    edx,[eax+0x1]
c0014a90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a93:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a96:	e9 85 00 00 00       	jmp    c0014b20 <opcodeFault(regs*, void*)+0x155>
c0014a9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a9e:	8a 00                	mov    al,BYTE PTR [eax]
c0014aa0:	3c 67                	cmp    al,0x67
c0014aa2:	75 18                	jne    c0014abc <opcodeFault(regs*, void*)+0xf1>
c0014aa4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014aa8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ab1:	8d 50 01             	lea    edx,[eax+0x1]
c0014ab4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014aba:	eb 64                	jmp    c0014b20 <opcodeFault(regs*, void*)+0x155>
c0014abc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014abf:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac1:	3c 2e                	cmp    al,0x2e
c0014ac3:	74 09                	je     c0014ace <opcodeFault(regs*, void*)+0x103>
c0014ac5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ac8:	8a 00                	mov    al,BYTE PTR [eax]
c0014aca:	3c 3e                	cmp    al,0x3e
c0014acc:	75 18                	jne    c0014ae6 <opcodeFault(regs*, void*)+0x11b>
c0014ace:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ad2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ad5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014adb:	8d 50 01             	lea    edx,[eax+0x1]
c0014ade:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ae4:	eb 3a                	jmp    c0014b20 <opcodeFault(regs*, void*)+0x155>
c0014ae6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ae9:	8a 00                	mov    al,BYTE PTR [eax]
c0014aeb:	3c 36                	cmp    al,0x36
c0014aed:	74 1b                	je     c0014b0a <opcodeFault(regs*, void*)+0x13f>
c0014aef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014af2:	8a 00                	mov    al,BYTE PTR [eax]
c0014af4:	3c 26                	cmp    al,0x26
c0014af6:	74 12                	je     c0014b0a <opcodeFault(regs*, void*)+0x13f>
c0014af8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014afb:	8a 00                	mov    al,BYTE PTR [eax]
c0014afd:	3c 64                	cmp    al,0x64
c0014aff:	74 09                	je     c0014b0a <opcodeFault(regs*, void*)+0x13f>
c0014b01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b04:	8a 00                	mov    al,BYTE PTR [eax]
c0014b06:	3c 65                	cmp    al,0x65
c0014b08:	75 16                	jne    c0014b20 <opcodeFault(regs*, void*)+0x155>
c0014b0a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b0e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b14:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b17:	8d 50 01             	lea    edx,[eax+0x1]
c0014b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b1d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b23:	8a 00                	mov    al,BYTE PTR [eax]
c0014b25:	3c 0f                	cmp    al,0xf
c0014b27:	0f 85 ad 00 00 00    	jne    c0014bda <opcodeFault(regs*, void*)+0x20f>
c0014b2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b30:	40                   	inc    eax
c0014b31:	8a 00                	mov    al,BYTE PTR [eax]
c0014b33:	3c c2                	cmp    al,0xc2
c0014b35:	74 0e                	je     c0014b45 <opcodeFault(regs*, void*)+0x17a>
c0014b37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b3a:	40                   	inc    eax
c0014b3b:	8a 00                	mov    al,BYTE PTR [eax]
c0014b3d:	3c c3                	cmp    al,0xc3
c0014b3f:	0f 85 95 00 00 00    	jne    c0014bda <opcodeFault(regs*, void*)+0x20f>
c0014b45:	83 ec 0c             	sub    esp,0xc
c0014b48:	68 87 b6 02 c0       	push   0xc002b687
c0014b4d:	e8 5d da ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0014b52:	83 c4 10             	add    esp,0x10
c0014b55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b58:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b5b:	8d 50 01             	lea    edx,[eax+0x1]
c0014b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b61:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b64:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b6a:	8a 00                	mov    al,BYTE PTR [eax]
c0014b6c:	8d 50 fe             	lea    edx,[eax-0x2]
c0014b6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b72:	88 10                	mov    BYTE PTR [eax],dl
c0014b74:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014b77:	50                   	push   eax
c0014b78:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014b7b:	50                   	push   eax
c0014b7c:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014b7f:	50                   	push   eax
c0014b80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014b83:	e8 c2 4b 00 00       	call   c001974a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014b88:	83 c4 10             	add    esp,0x10
c0014b8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b8e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b91:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b94:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014b97:	01 d0                	add    eax,edx
c0014b99:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b9f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ba2:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ba5:	48                   	dec    eax
c0014ba6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bac:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014baf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb5:	83 ec 04             	sub    esp,0x4
c0014bb8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014bbb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014bbe:	50                   	push   eax
c0014bbf:	e8 f0 b5 fe ff       	call   c00001b4 <voodooXADD>
c0014bc4:	83 c4 10             	add    esp,0x10
c0014bc7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014bca:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014bcd:	01 c2                	add    edx,eax
c0014bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bd5:	e9 07 04 00 00       	jmp    c0014fe1 <opcodeFault(regs*, void*)+0x616>
c0014bda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bdd:	8a 00                	mov    al,BYTE PTR [eax]
c0014bdf:	3c 0f                	cmp    al,0xf
c0014be1:	0f 85 8b 01 00 00    	jne    c0014d72 <opcodeFault(regs*, void*)+0x3a7>
c0014be7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bea:	40                   	inc    eax
c0014beb:	8a 00                	mov    al,BYTE PTR [eax]
c0014bed:	3c c7                	cmp    al,0xc7
c0014bef:	0f 86 7d 01 00 00    	jbe    c0014d72 <opcodeFault(regs*, void*)+0x3a7>
c0014bf5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bf8:	40                   	inc    eax
c0014bf9:	8a 00                	mov    al,BYTE PTR [eax]
c0014bfb:	3c cf                	cmp    al,0xcf
c0014bfd:	0f 87 6f 01 00 00    	ja     c0014d72 <opcodeFault(regs*, void*)+0x3a7>
c0014c03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c06:	40                   	inc    eax
c0014c07:	8a 00                	mov    al,BYTE PTR [eax]
c0014c09:	83 c0 38             	add    eax,0x38
c0014c0c:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014c0f:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c13:	75 0b                	jne    c0014c20 <opcodeFault(regs*, void*)+0x255>
c0014c15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c18:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014c1b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c1e:	eb 75                	jmp    c0014c95 <opcodeFault(regs*, void*)+0x2ca>
c0014c20:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c24:	75 0b                	jne    c0014c31 <opcodeFault(regs*, void*)+0x266>
c0014c26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c29:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014c2c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c2f:	eb 64                	jmp    c0014c95 <opcodeFault(regs*, void*)+0x2ca>
c0014c31:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c35:	75 0b                	jne    c0014c42 <opcodeFault(regs*, void*)+0x277>
c0014c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c3a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014c3d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c40:	eb 53                	jmp    c0014c95 <opcodeFault(regs*, void*)+0x2ca>
c0014c42:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c46:	75 0b                	jne    c0014c53 <opcodeFault(regs*, void*)+0x288>
c0014c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014c4e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c51:	eb 42                	jmp    c0014c95 <opcodeFault(regs*, void*)+0x2ca>
c0014c53:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014c57:	75 0b                	jne    c0014c64 <opcodeFault(regs*, void*)+0x299>
c0014c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c5c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014c5f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c62:	eb 31                	jmp    c0014c95 <opcodeFault(regs*, void*)+0x2ca>
c0014c64:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014c68:	75 0b                	jne    c0014c75 <opcodeFault(regs*, void*)+0x2aa>
c0014c6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c6d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014c70:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c73:	eb 20                	jmp    c0014c95 <opcodeFault(regs*, void*)+0x2ca>
c0014c75:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014c79:	75 0b                	jne    c0014c86 <opcodeFault(regs*, void*)+0x2bb>
c0014c7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014c81:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c84:	eb 0f                	jmp    c0014c95 <opcodeFault(regs*, void*)+0x2ca>
c0014c86:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014c8a:	75 09                	jne    c0014c95 <opcodeFault(regs*, void*)+0x2ca>
c0014c8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c8f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014c92:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c95:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014c99:	74 10                	je     c0014cab <opcodeFault(regs*, void*)+0x2e0>
c0014c9b:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014ca2:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014ca9:	eb 2d                	jmp    c0014cd8 <opcodeFault(regs*, void*)+0x30d>
c0014cab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014cae:	c1 e0 18             	shl    eax,0x18
c0014cb1:	89 c2                	mov    edx,eax
c0014cb3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014cb6:	c1 e0 08             	shl    eax,0x8
c0014cb9:	25 00 00 ff 00       	and    eax,0xff0000
c0014cbe:	09 c2                	or     edx,eax
c0014cc0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014cc3:	c1 e8 08             	shr    eax,0x8
c0014cc6:	25 00 ff 00 00       	and    eax,0xff00
c0014ccb:	09 c2                	or     edx,eax
c0014ccd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014cd0:	c1 e8 18             	shr    eax,0x18
c0014cd3:	09 d0                	or     eax,edx
c0014cd5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cd8:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014cdc:	75 0b                	jne    c0014ce9 <opcodeFault(regs*, void*)+0x31e>
c0014cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ce4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014ce7:	eb 75                	jmp    c0014d5e <opcodeFault(regs*, void*)+0x393>
c0014ce9:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014ced:	75 0b                	jne    c0014cfa <opcodeFault(regs*, void*)+0x32f>
c0014cef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cf5:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014cf8:	eb 64                	jmp    c0014d5e <opcodeFault(regs*, void*)+0x393>
c0014cfa:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014cfe:	75 0b                	jne    c0014d0b <opcodeFault(regs*, void*)+0x340>
c0014d00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d03:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d06:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014d09:	eb 53                	jmp    c0014d5e <opcodeFault(regs*, void*)+0x393>
c0014d0b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d0f:	75 0b                	jne    c0014d1c <opcodeFault(regs*, void*)+0x351>
c0014d11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d14:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d17:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014d1a:	eb 42                	jmp    c0014d5e <opcodeFault(regs*, void*)+0x393>
c0014d1c:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d20:	75 0b                	jne    c0014d2d <opcodeFault(regs*, void*)+0x362>
c0014d22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d25:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d28:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014d2b:	eb 31                	jmp    c0014d5e <opcodeFault(regs*, void*)+0x393>
c0014d2d:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014d31:	75 0b                	jne    c0014d3e <opcodeFault(regs*, void*)+0x373>
c0014d33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d36:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d39:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014d3c:	eb 20                	jmp    c0014d5e <opcodeFault(regs*, void*)+0x393>
c0014d3e:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014d42:	75 0b                	jne    c0014d4f <opcodeFault(regs*, void*)+0x384>
c0014d44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d47:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d4a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014d4d:	eb 0f                	jmp    c0014d5e <opcodeFault(regs*, void*)+0x393>
c0014d4f:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014d53:	75 09                	jne    c0014d5e <opcodeFault(regs*, void*)+0x393>
c0014d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d58:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d5b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014d5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d61:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d64:	8d 50 02             	lea    edx,[eax+0x2]
c0014d67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d6d:	e9 6f 02 00 00       	jmp    c0014fe1 <opcodeFault(regs*, void*)+0x616>
c0014d72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d75:	8a 00                	mov    al,BYTE PTR [eax]
c0014d77:	3c 0f                	cmp    al,0xf
c0014d79:	0f 85 8d 01 00 00    	jne    c0014f0c <opcodeFault(regs*, void*)+0x541>
c0014d7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d82:	40                   	inc    eax
c0014d83:	8a 00                	mov    al,BYTE PTR [eax]
c0014d85:	3c c7                	cmp    al,0xc7
c0014d87:	0f 85 7f 01 00 00    	jne    c0014f0c <opcodeFault(regs*, void*)+0x541>
c0014d8d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d93:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d96:	8d 50 01             	lea    edx,[eax+0x1]
c0014d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d9f:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014da2:	50                   	push   eax
c0014da3:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014da6:	50                   	push   eax
c0014da7:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014daa:	50                   	push   eax
c0014dab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014dae:	e8 97 49 00 00       	call   c001974a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014db3:	83 c4 10             	add    esp,0x10
c0014db6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014db9:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014dbc:	83 f0 01             	xor    eax,0x1
c0014dbf:	84 c0                	test   al,al
c0014dc1:	0f 84 45 01 00 00    	je     c0014f0c <opcodeFault(regs*, void*)+0x541>
c0014dc7:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014dca:	3c 01                	cmp    al,0x1
c0014dcc:	0f 85 3a 01 00 00    	jne    c0014f0c <opcodeFault(regs*, void*)+0x541>
c0014dd2:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014dd5:	83 f0 01             	xor    eax,0x1
c0014dd8:	84 c0                	test   al,al
c0014dda:	0f 84 2c 01 00 00    	je     c0014f0c <opcodeFault(regs*, void*)+0x541>
c0014de0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014de6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014de9:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014df0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014df3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014df6:	89 c2                	mov    edx,eax
c0014df8:	b8 00 00 00 00       	mov    eax,0x0
c0014dfd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e00:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e06:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e09:	ba 00 00 00 00       	mov    edx,0x0
c0014e0e:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014e11:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014e14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e17:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e1a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014e1d:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014e24:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014e27:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014e2a:	89 c2                	mov    edx,eax
c0014e2c:	b8 00 00 00 00       	mov    eax,0x0
c0014e31:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014e34:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014e37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e3d:	ba 00 00 00 00       	mov    edx,0x0
c0014e42:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014e45:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014e48:	fa                   	cli    
c0014e49:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0014e4e:	40                   	inc    eax
c0014e4f:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c0014e54:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014e57:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014e5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e5c:	89 c1                	mov    ecx,eax
c0014e5e:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014e61:	89 cb                	mov    ebx,ecx
c0014e63:	89 d0                	mov    eax,edx
c0014e65:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014e68:	89 c6                	mov    esi,eax
c0014e6a:	89 f0                	mov    eax,esi
c0014e6c:	09 d8                	or     eax,ebx
c0014e6e:	85 c0                	test   eax,eax
c0014e70:	75 21                	jne    c0014e93 <opcodeFault(regs*, void*)+0x4c8>
c0014e72:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014e75:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014e78:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014e7b:	89 01                	mov    DWORD PTR [ecx],eax
c0014e7d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014e80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e83:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e86:	83 c8 40             	or     eax,0x40
c0014e89:	89 c2                	mov    edx,eax
c0014e8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8e:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e91:	eb 3e                	jmp    c0014ed1 <opcodeFault(regs*, void*)+0x506>
c0014e93:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014e96:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014e99:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e9b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e9e:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014ea1:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014ea4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea7:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014eaa:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014ead:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014eb0:	89 d0                	mov    eax,edx
c0014eb2:	31 d2                	xor    edx,edx
c0014eb4:	89 c3                	mov    ebx,eax
c0014eb6:	89 d6                	mov    esi,edx
c0014eb8:	89 da                	mov    edx,ebx
c0014eba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ebd:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ec6:	83 e0 bf             	and    eax,0xffffffbf
c0014ec9:	89 c2                	mov    edx,eax
c0014ecb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ece:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014ed1:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0014ed6:	48                   	dec    eax
c0014ed7:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c0014edc:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0014ee1:	85 c0                	test   eax,eax
c0014ee3:	75 01                	jne    c0014ee6 <opcodeFault(regs*, void*)+0x51b>
c0014ee5:	fb                   	sti    
c0014ee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eec:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014eef:	01 c2                	add    edx,eax
c0014ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ef7:	83 ec 0c             	sub    esp,0xc
c0014efa:	68 96 b6 02 c0       	push   0xc002b696
c0014eff:	e8 ab d6 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0014f04:	83 c4 10             	add    esp,0x10
c0014f07:	e9 d5 00 00 00       	jmp    c0014fe1 <opcodeFault(regs*, void*)+0x616>
c0014f0c:	83 ec 0c             	sub    esp,0xc
c0014f0f:	68 a9 b6 02 c0       	push   0xc002b6a9
c0014f14:	e8 96 d6 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0014f19:	83 c4 10             	add    esp,0x10
c0014f1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f28:	c1 e0 04             	shl    eax,0x4
c0014f2b:	01 d0                	add    eax,edx
c0014f2d:	83 c0 03             	add    eax,0x3
c0014f30:	8a 00                	mov    al,BYTE PTR [eax]
c0014f32:	0f b6 d8             	movzx  ebx,al
c0014f35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f38:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f41:	c1 e0 04             	shl    eax,0x4
c0014f44:	01 d0                	add    eax,edx
c0014f46:	83 c0 02             	add    eax,0x2
c0014f49:	8a 00                	mov    al,BYTE PTR [eax]
c0014f4b:	0f b6 c8             	movzx  ecx,al
c0014f4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f51:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f57:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f5a:	c1 e0 04             	shl    eax,0x4
c0014f5d:	01 d0                	add    eax,edx
c0014f5f:	40                   	inc    eax
c0014f60:	8a 00                	mov    al,BYTE PTR [eax]
c0014f62:	0f b6 d0             	movzx  edx,al
c0014f65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f68:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014f6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f71:	c1 e0 04             	shl    eax,0x4
c0014f74:	01 f0                	add    eax,esi
c0014f76:	8a 00                	mov    al,BYTE PTR [eax]
c0014f78:	0f b6 c0             	movzx  eax,al
c0014f7b:	83 ec 0c             	sub    esp,0xc
c0014f7e:	53                   	push   ebx
c0014f7f:	51                   	push   ecx
c0014f80:	52                   	push   edx
c0014f81:	50                   	push   eax
c0014f82:	68 bc b6 02 c0       	push   0xc002b6bc
c0014f87:	e8 23 d6 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0014f8c:	83 c4 20             	add    esp,0x20
c0014f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f92:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f95:	83 c0 03             	add    eax,0x3
c0014f98:	8a 00                	mov    al,BYTE PTR [eax]
c0014f9a:	0f b6 d8             	movzx  ebx,al
c0014f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fa3:	83 c0 02             	add    eax,0x2
c0014fa6:	8a 00                	mov    al,BYTE PTR [eax]
c0014fa8:	0f b6 c8             	movzx  ecx,al
c0014fab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fb1:	40                   	inc    eax
c0014fb2:	8a 00                	mov    al,BYTE PTR [eax]
c0014fb4:	0f b6 d0             	movzx  edx,al
c0014fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fbd:	8a 00                	mov    al,BYTE PTR [eax]
c0014fbf:	0f b6 c0             	movzx  eax,al
c0014fc2:	83 ec 0c             	sub    esp,0xc
c0014fc5:	53                   	push   ebx
c0014fc6:	51                   	push   ecx
c0014fc7:	52                   	push   edx
c0014fc8:	50                   	push   eax
c0014fc9:	68 e4 b6 02 c0       	push   0xc002b6e4
c0014fce:	e8 dc d5 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0014fd3:	83 c4 20             	add    esp,0x20
c0014fd6:	83 ec 0c             	sub    esp,0xc
c0014fd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014fdc:	e8 79 f4 ff ff       	call   c001445a <displayDebugInfo(regs*)>
c0014fe1:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014fe4:	5b                   	pop    ebx
c0014fe5:	5e                   	pop    esi
c0014fe6:	5d                   	pop    ebp
c0014fe7:	c3                   	ret    

c0014fe8 <displayProgramFault(char const*)>:
c0014fe8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ff0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014ff6:	85 c0                	test   eax,eax
c0014ff8:	74 15                	je     c001500f <displayProgramFault(char const*)+0x27>
c0014ffa:	83 ec 0c             	sub    esp,0xc
c0014ffd:	6a 04                	push   0x4
c0014fff:	6a 0f                	push   0xf
c0015001:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015005:	50                   	push   eax
c0015006:	e8 c7 b4 ff ff       	call   c00104d2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001500b:	83 c4 1c             	add    esp,0x1c
c001500e:	c3                   	ret    
c001500f:	c3                   	ret    

c0015010 <setupInterruptController()>:
c0015010:	55                   	push   ebp
c0015011:	89 e5                	mov    ebp,esp
c0015013:	53                   	push   ebx
c0015014:	83 ec 24             	sub    esp,0x24
c0015017:	b8 00 00 00 00       	mov    eax,0x0
c001501c:	85 c0                	test   eax,eax
c001501e:	0f 95 c0             	setne  al
c0015021:	84 c0                	test   al,al
c0015023:	74 5b                	je     c0015080 <setupInterruptController()+0x70>
c0015025:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001502c:	83 ec 0c             	sub    esp,0xc
c001502f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015032:	e8 7f a5 ff ff       	call   c000f5b6 <malloc>
c0015037:	83 c4 10             	add    esp,0x10
c001503a:	89 c3                	mov    ebx,eax
c001503c:	83 ec 0c             	sub    esp,0xc
c001503f:	53                   	push   ebx
c0015040:	e8 d3 0e 01 00       	call   c0025f18 <APIC::APIC()>
c0015045:	83 c4 10             	add    esp,0x10
c0015048:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001504b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001504e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015051:	8b 00                	mov    eax,DWORD PTR [eax]
c0015053:	83 c0 08             	add    eax,0x8
c0015056:	8b 00                	mov    eax,DWORD PTR [eax]
c0015058:	6a 00                	push   0x0
c001505a:	6a 00                	push   0x0
c001505c:	6a 00                	push   0x0
c001505e:	52                   	push   edx
c001505f:	ff d0                	call   eax
c0015061:	83 c4 10             	add    esp,0x10
c0015064:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0015069:	83 ec 08             	sub    esp,0x8
c001506c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001506f:	50                   	push   eax
c0015070:	e8 73 e9 ff ff       	call   c00139e8 <Device::addChild(Device*)>
c0015075:	83 c4 10             	add    esp,0x10
c0015078:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001507b:	e9 89 03 00 00       	jmp    c0015409 <setupInterruptController()+0x3f9>
c0015080:	a0 c0 16 03 c0       	mov    al,ds:0xc00316c0
c0015085:	84 c0                	test   al,al
c0015087:	75 24                	jne    c00150ad <setupInterruptController()+0x9d>
c0015089:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c001508e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015094:	83 e2 fe             	and    edx,0xfffffffe
c0015097:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001509d:	83 ec 0c             	sub    esp,0xc
c00150a0:	68 09 b7 02 c0       	push   0xc002b709
c00150a5:	e8 05 d5 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00150aa:	83 c4 10             	add    esp,0x10
c00150ad:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c00150b2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00150b8:	83 e0 01             	and    eax,0x1
c00150bb:	84 c0                	test   al,al
c00150bd:	0f 95 c0             	setne  al
c00150c0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00150c3:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00150ca:	83 ec 0c             	sub    esp,0xc
c00150cd:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00150d0:	e8 e1 a4 ff ff       	call   c000f5b6 <malloc>
c00150d5:	83 c4 10             	add    esp,0x10
c00150d8:	89 c3                	mov    ebx,eax
c00150da:	83 ec 0c             	sub    esp,0xc
c00150dd:	53                   	push   ebx
c00150de:	e8 8d 13 01 00       	call   c0026470 <PIC::PIC()>
c00150e3:	83 c4 10             	add    esp,0x10
c00150e6:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00150e9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f1:	83 c0 08             	add    eax,0x8
c00150f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f6:	6a 00                	push   0x0
c00150f8:	6a 00                	push   0x0
c00150fa:	6a 00                	push   0x0
c00150fc:	52                   	push   edx
c00150fd:	ff d0                	call   eax
c00150ff:	83 c4 10             	add    esp,0x10
c0015102:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015106:	74 73                	je     c001517b <setupInterruptController()+0x16b>
c0015108:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001510b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001510e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015110:	83 c0 0c             	add    eax,0xc
c0015113:	8b 00                	mov    eax,DWORD PTR [eax]
c0015115:	6a 00                	push   0x0
c0015117:	6a 00                	push   0x0
c0015119:	6a 00                	push   0x0
c001511b:	52                   	push   edx
c001511c:	ff d0                	call   eax
c001511e:	83 c4 10             	add    esp,0x10
c0015121:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015125:	74 15                	je     c001513c <setupInterruptController()+0x12c>
c0015127:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001512a:	8b 00                	mov    eax,DWORD PTR [eax]
c001512c:	83 c0 04             	add    eax,0x4
c001512f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015131:	83 ec 0c             	sub    esp,0xc
c0015134:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015137:	ff d0                	call   eax
c0015139:	83 c4 10             	add    esp,0x10
c001513c:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015143:	83 ec 0c             	sub    esp,0xc
c0015146:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015149:	e8 68 a4 ff ff       	call   c000f5b6 <malloc>
c001514e:	83 c4 10             	add    esp,0x10
c0015151:	89 c3                	mov    ebx,eax
c0015153:	83 ec 0c             	sub    esp,0xc
c0015156:	53                   	push   ebx
c0015157:	e8 bc 0d 01 00       	call   c0025f18 <APIC::APIC()>
c001515c:	83 c4 10             	add    esp,0x10
c001515f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015162:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015165:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015168:	8b 00                	mov    eax,DWORD PTR [eax]
c001516a:	83 c0 08             	add    eax,0x8
c001516d:	8b 00                	mov    eax,DWORD PTR [eax]
c001516f:	6a 00                	push   0x0
c0015171:	6a 00                	push   0x0
c0015173:	6a 00                	push   0x0
c0015175:	52                   	push   edx
c0015176:	ff d0                	call   eax
c0015178:	83 c4 10             	add    esp,0x10
c001517b:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0015180:	83 ec 08             	sub    esp,0x8
c0015183:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015186:	50                   	push   eax
c0015187:	e8 5c e8 ff ff       	call   c00139e8 <Device::addChild(Device*)>
c001518c:	83 c4 10             	add    esp,0x10
c001518f:	c7 05 c8 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eec8,0x0
c0015199:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001519c:	8b 00                	mov    eax,DWORD PTR [eax]
c001519e:	83 c0 24             	add    eax,0x24
c00151a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a3:	6a 00                	push   0x0
c00151a5:	68 ac 49 01 c0       	push   0xc00149ac
c00151aa:	6a 00                	push   0x0
c00151ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151af:	ff d0                	call   eax
c00151b1:	83 c4 10             	add    esp,0x10
c00151b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b9:	83 c0 24             	add    eax,0x24
c00151bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00151be:	6a 00                	push   0x0
c00151c0:	68 ac 49 01 c0       	push   0xc00149ac
c00151c5:	6a 01                	push   0x1
c00151c7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151ca:	ff d0                	call   eax
c00151cc:	83 c4 10             	add    esp,0x10
c00151cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d4:	83 c0 24             	add    eax,0x24
c00151d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d9:	6a 00                	push   0x0
c00151db:	68 b7 42 01 c0       	push   0xc00142b7
c00151e0:	6a 02                	push   0x2
c00151e2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151e5:	ff d0                	call   eax
c00151e7:	83 c4 10             	add    esp,0x10
c00151ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ef:	83 c0 24             	add    eax,0x24
c00151f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f4:	6a 00                	push   0x0
c00151f6:	68 ac 49 01 c0       	push   0xc00149ac
c00151fb:	6a 03                	push   0x3
c00151fd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015200:	ff d0                	call   eax
c0015202:	83 c4 10             	add    esp,0x10
c0015205:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015208:	8b 00                	mov    eax,DWORD PTR [eax]
c001520a:	83 c0 24             	add    eax,0x24
c001520d:	8b 00                	mov    eax,DWORD PTR [eax]
c001520f:	6a 00                	push   0x0
c0015211:	68 ac 49 01 c0       	push   0xc00149ac
c0015216:	6a 04                	push   0x4
c0015218:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001521b:	ff d0                	call   eax
c001521d:	83 c4 10             	add    esp,0x10
c0015220:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015223:	8b 00                	mov    eax,DWORD PTR [eax]
c0015225:	83 c0 24             	add    eax,0x24
c0015228:	8b 00                	mov    eax,DWORD PTR [eax]
c001522a:	6a 00                	push   0x0
c001522c:	68 ac 49 01 c0       	push   0xc00149ac
c0015231:	6a 05                	push   0x5
c0015233:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015236:	ff d0                	call   eax
c0015238:	83 c4 10             	add    esp,0x10
c001523b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001523e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015240:	83 c0 24             	add    eax,0x24
c0015243:	8b 00                	mov    eax,DWORD PTR [eax]
c0015245:	6a 00                	push   0x0
c0015247:	68 cb 49 01 c0       	push   0xc00149cb
c001524c:	6a 06                	push   0x6
c001524e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015251:	ff d0                	call   eax
c0015253:	83 c4 10             	add    esp,0x10
c0015256:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015259:	8b 00                	mov    eax,DWORD PTR [eax]
c001525b:	83 c0 24             	add    eax,0x24
c001525e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015260:	6a 00                	push   0x0
c0015262:	68 e9 48 01 c0       	push   0xc00148e9
c0015267:	6a 07                	push   0x7
c0015269:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001526c:	ff d0                	call   eax
c001526e:	83 c4 10             	add    esp,0x10
c0015271:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015274:	8b 00                	mov    eax,DWORD PTR [eax]
c0015276:	83 c0 24             	add    eax,0x24
c0015279:	8b 00                	mov    eax,DWORD PTR [eax]
c001527b:	6a 00                	push   0x0
c001527d:	68 d2 40 01 c0       	push   0xc00140d2
c0015282:	6a 08                	push   0x8
c0015284:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015287:	ff d0                	call   eax
c0015289:	83 c4 10             	add    esp,0x10
c001528c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001528f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015291:	83 c0 24             	add    eax,0x24
c0015294:	8b 00                	mov    eax,DWORD PTR [eax]
c0015296:	6a 00                	push   0x0
c0015298:	68 ac 49 01 c0       	push   0xc00149ac
c001529d:	6a 09                	push   0x9
c001529f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152a2:	ff d0                	call   eax
c00152a4:	83 c4 10             	add    esp,0x10
c00152a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ac:	83 c0 24             	add    eax,0x24
c00152af:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b1:	6a 00                	push   0x0
c00152b3:	68 ac 49 01 c0       	push   0xc00149ac
c00152b8:	6a 0a                	push   0xa
c00152ba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152bd:	ff d0                	call   eax
c00152bf:	83 c4 10             	add    esp,0x10
c00152c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c7:	83 c0 24             	add    eax,0x24
c00152ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00152cc:	6a 00                	push   0x0
c00152ce:	68 ac 49 01 c0       	push   0xc00149ac
c00152d3:	6a 0b                	push   0xb
c00152d5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152d8:	ff d0                	call   eax
c00152da:	83 c4 10             	add    esp,0x10
c00152dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e2:	83 c0 24             	add    eax,0x24
c00152e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e7:	6a 00                	push   0x0
c00152e9:	68 ac 49 01 c0       	push   0xc00149ac
c00152ee:	6a 0c                	push   0xc
c00152f0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152f3:	ff d0                	call   eax
c00152f5:	83 c4 10             	add    esp,0x10
c00152f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fd:	83 c0 24             	add    eax,0x24
c0015300:	8b 00                	mov    eax,DWORD PTR [eax]
c0015302:	6a 00                	push   0x0
c0015304:	68 5c 49 01 c0       	push   0xc001495c
c0015309:	6a 0d                	push   0xd
c001530b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001530e:	ff d0                	call   eax
c0015310:	83 c4 10             	add    esp,0x10
c0015313:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015316:	8b 00                	mov    eax,DWORD PTR [eax]
c0015318:	83 c0 24             	add    eax,0x24
c001531b:	8b 00                	mov    eax,DWORD PTR [eax]
c001531d:	6a 00                	push   0x0
c001531f:	68 95 49 01 c0       	push   0xc0014995
c0015324:	6a 0e                	push   0xe
c0015326:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015329:	ff d0                	call   eax
c001532b:	83 c4 10             	add    esp,0x10
c001532e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015331:	8b 00                	mov    eax,DWORD PTR [eax]
c0015333:	83 c0 24             	add    eax,0x24
c0015336:	8b 00                	mov    eax,DWORD PTR [eax]
c0015338:	6a 00                	push   0x0
c001533a:	68 ac 49 01 c0       	push   0xc00149ac
c001533f:	6a 0f                	push   0xf
c0015341:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015344:	ff d0                	call   eax
c0015346:	83 c4 10             	add    esp,0x10
c0015349:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534c:	8b 00                	mov    eax,DWORD PTR [eax]
c001534e:	83 c0 24             	add    eax,0x24
c0015351:	8b 00                	mov    eax,DWORD PTR [eax]
c0015353:	6a 00                	push   0x0
c0015355:	68 ac 49 01 c0       	push   0xc00149ac
c001535a:	6a 10                	push   0x10
c001535c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001535f:	ff d0                	call   eax
c0015361:	83 c4 10             	add    esp,0x10
c0015364:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015367:	8b 00                	mov    eax,DWORD PTR [eax]
c0015369:	83 c0 24             	add    eax,0x24
c001536c:	8b 00                	mov    eax,DWORD PTR [eax]
c001536e:	6a 00                	push   0x0
c0015370:	68 ac 49 01 c0       	push   0xc00149ac
c0015375:	6a 11                	push   0x11
c0015377:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001537a:	ff d0                	call   eax
c001537c:	83 c4 10             	add    esp,0x10
c001537f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015382:	8b 00                	mov    eax,DWORD PTR [eax]
c0015384:	83 c0 24             	add    eax,0x24
c0015387:	8b 00                	mov    eax,DWORD PTR [eax]
c0015389:	6a 00                	push   0x0
c001538b:	68 ac 49 01 c0       	push   0xc00149ac
c0015390:	6a 12                	push   0x12
c0015392:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015395:	ff d0                	call   eax
c0015397:	83 c4 10             	add    esp,0x10
c001539a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539d:	8b 00                	mov    eax,DWORD PTR [eax]
c001539f:	83 c0 24             	add    eax,0x24
c00153a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a4:	6a 00                	push   0x0
c00153a6:	68 ac 49 01 c0       	push   0xc00149ac
c00153ab:	6a 13                	push   0x13
c00153ad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b0:	ff d0                	call   eax
c00153b2:	83 c4 10             	add    esp,0x10
c00153b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ba:	83 c0 24             	add    eax,0x24
c00153bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153bf:	6a 00                	push   0x0
c00153c1:	68 ac 49 01 c0       	push   0xc00149ac
c00153c6:	6a 14                	push   0x14
c00153c8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153cb:	ff d0                	call   eax
c00153cd:	83 c4 10             	add    esp,0x10
c00153d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d5:	83 c0 24             	add    eax,0x24
c00153d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153da:	6a 00                	push   0x0
c00153dc:	68 ac 49 01 c0       	push   0xc00149ac
c00153e1:	6a 1e                	push   0x1e
c00153e3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153e6:	ff d0                	call   eax
c00153e8:	83 c4 10             	add    esp,0x10
c00153eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f0:	83 c0 24             	add    eax,0x24
c00153f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f5:	6a 00                	push   0x0
c00153f7:	68 7c c4 01 c0       	push   0xc001c47c
c00153fc:	6a 60                	push   0x60
c00153fe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015401:	ff d0                	call   eax
c0015403:	83 c4 10             	add    esp,0x10
c0015406:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015409:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001540c:	c9                   	leave  
c001540d:	c3                   	ret    

c001540e <InterruptController::convertLegacyIRQNumber(int)>:
c001540e:	55                   	push   ebp
c001540f:	89 e5                	mov    ebp,esp
c0015411:	83 ec 08             	sub    esp,0x8
c0015414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015417:	83 ec 0c             	sub    esp,0xc
c001541a:	50                   	push   eax
c001541b:	e8 c8 e8 ff ff       	call   c0013ce8 <Device::getName()>
c0015420:	83 c4 10             	add    esp,0x10
c0015423:	8a 00                	mov    al,BYTE PTR [eax]
c0015425:	3c 41                	cmp    al,0x41
c0015427:	0f 94 c0             	sete   al
c001542a:	84 c0                	test   al,al
c001542c:	74 28                	je     c0015456 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001542e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015432:	7f 12                	jg     c0015446 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015434:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015437:	05 a0 df 02 c0       	add    eax,0xc002dfa0
c001543c:	8a 00                	mov    al,BYTE PTR [eax]
c001543e:	0f b6 c0             	movzx  eax,al
c0015441:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015444:	eb 10                	jmp    c0015456 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015446:	83 ec 0c             	sub    esp,0xc
c0015449:	68 f8 b3 02 c0       	push   0xc002b3f8
c001544e:	e8 2a 4c 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0015453:	83 c4 10             	add    esp,0x10
c0015456:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015459:	c9                   	leave  
c001545a:	c3                   	ret    
c001545b:	90                   	nop

c001545c <startGUI(void*)>:
c001545c:	55                   	push   ebp
c001545d:	89 e5                	mov    ebp,esp
c001545f:	53                   	push   ebx
c0015460:	83 ec 04             	sub    esp,0x4
c0015463:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0015468:	48                   	dec    eax
c0015469:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001546e:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0015473:	85 c0                	test   eax,eax
c0015475:	75 01                	jne    c0015478 <startGUI(void*)+0x1c>
c0015477:	fb                   	sti    
c0015478:	8b 1d 48 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed48
c001547e:	83 ec 08             	sub    esp,0x8
c0015481:	6a 01                	push   0x1
c0015483:	68 6c b7 02 c0       	push   0xc002b76c
c0015488:	e8 ca 7f 00 00       	call   c001d457 <Thr::loadDLL(char const*, bool)>
c001548d:	83 c4 10             	add    esp,0x10
c0015490:	83 ec 08             	sub    esp,0x8
c0015493:	53                   	push   ebx
c0015494:	50                   	push   eax
c0015495:	e8 e8 81 00 00       	call   c001d682 <Thr::executeDLL(unsigned long, void*)>
c001549a:	83 c4 10             	add    esp,0x10
c001549d:	8b 1d 48 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed48
c00154a3:	83 ec 08             	sub    esp,0x8
c00154a6:	6a 01                	push   0x1
c00154a8:	68 86 b7 02 c0       	push   0xc002b786
c00154ad:	e8 a5 7f 00 00       	call   c001d457 <Thr::loadDLL(char const*, bool)>
c00154b2:	83 c4 10             	add    esp,0x10
c00154b5:	83 ec 08             	sub    esp,0x8
c00154b8:	53                   	push   ebx
c00154b9:	50                   	push   eax
c00154ba:	e8 c3 81 00 00       	call   c001d682 <Thr::executeDLL(unsigned long, void*)>
c00154bf:	83 c4 10             	add    esp,0x10
c00154c2:	90                   	nop
c00154c3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00154c6:	c9                   	leave  
c00154c7:	c3                   	ret    

c00154c8 <startGUIVESA(void*)>:
c00154c8:	55                   	push   ebp
c00154c9:	89 e5                	mov    ebp,esp
c00154cb:	53                   	push   ebx
c00154cc:	83 ec 04             	sub    esp,0x4
c00154cf:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c00154d4:	48                   	dec    eax
c00154d5:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c00154da:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c00154df:	85 c0                	test   eax,eax
c00154e1:	75 01                	jne    c00154e4 <startGUIVESA(void*)+0x1c>
c00154e3:	fb                   	sti    
c00154e4:	8b 1d 48 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed48
c00154ea:	83 ec 08             	sub    esp,0x8
c00154ed:	6a 01                	push   0x1
c00154ef:	68 a0 b7 02 c0       	push   0xc002b7a0
c00154f4:	e8 5e 7f 00 00       	call   c001d457 <Thr::loadDLL(char const*, bool)>
c00154f9:	83 c4 10             	add    esp,0x10
c00154fc:	83 ec 08             	sub    esp,0x8
c00154ff:	53                   	push   ebx
c0015500:	50                   	push   eax
c0015501:	e8 7c 81 00 00       	call   c001d682 <Thr::executeDLL(unsigned long, void*)>
c0015506:	83 c4 10             	add    esp,0x10
c0015509:	8b 1d 48 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed48
c001550f:	83 ec 08             	sub    esp,0x8
c0015512:	6a 01                	push   0x1
c0015514:	68 86 b7 02 c0       	push   0xc002b786
c0015519:	e8 39 7f 00 00       	call   c001d457 <Thr::loadDLL(char const*, bool)>
c001551e:	83 c4 10             	add    esp,0x10
c0015521:	83 ec 08             	sub    esp,0x8
c0015524:	53                   	push   ebx
c0015525:	50                   	push   eax
c0015526:	e8 57 81 00 00       	call   c001d682 <Thr::executeDLL(unsigned long, void*)>
c001552b:	83 c4 10             	add    esp,0x10
c001552e:	90                   	nop
c001552f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015532:	c9                   	leave  
c0015533:	c3                   	ret    

c0015534 <sendKeyToTerminal(unsigned char)>:
c0015534:	55                   	push   ebp
c0015535:	89 e5                	mov    ebp,esp
c0015537:	83 ec 28             	sub    esp,0x28
c001553a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015540:	a1 04 ee 02 c0       	mov    eax,ds:0xc002ee04
c0015545:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015549:	83 ec 08             	sub    esp,0x8
c001554c:	52                   	push   edx
c001554d:	50                   	push   eax
c001554e:	e8 25 b4 ff ff       	call   c0010978 <VgaText::receiveKey(unsigned char)>
c0015553:	83 c4 10             	add    esp,0x10
c0015556:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001555a:	0f 85 8f 00 00 00    	jne    c00155ef <sendKeyToTerminal(unsigned char)+0xbb>
c0015560:	fa                   	cli    
c0015561:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0015566:	40                   	inc    eax
c0015567:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001556c:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c0015571:	40                   	inc    eax
c0015572:	a3 64 22 03 c0       	mov    ds:0xc0032264,eax
c0015577:	a1 e0 ee 02 c0       	mov    eax,ds:0xc002eee0
c001557c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001557f:	c7 05 e0 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eee0,0x0
c0015589:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001558d:	74 1f                	je     c00155ae <sendKeyToTerminal(unsigned char)+0x7a>
c001558f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015592:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015595:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015598:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001559b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001559e:	83 ec 0c             	sub    esp,0xc
c00155a1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00155a4:	e8 51 8d 00 00       	call   c001e2fa <unblockTask(ThreadControlBlock*)>
c00155a9:	83 c4 10             	add    esp,0x10
c00155ac:	eb db                	jmp    c0015589 <sendKeyToTerminal(unsigned char)+0x55>
c00155ae:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c00155b3:	48                   	dec    eax
c00155b4:	a3 64 22 03 c0       	mov    ds:0xc0032264,eax
c00155b9:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c00155be:	85 c0                	test   eax,eax
c00155c0:	75 18                	jne    c00155da <sendKeyToTerminal(unsigned char)+0xa6>
c00155c2:	a1 60 22 03 c0       	mov    eax,ds:0xc0032260
c00155c7:	85 c0                	test   eax,eax
c00155c9:	74 0f                	je     c00155da <sendKeyToTerminal(unsigned char)+0xa6>
c00155cb:	c7 05 60 22 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032260,0x0
c00155d5:	e8 5c 88 00 00       	call   c001de36 <schedule()>
c00155da:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c00155df:	48                   	dec    eax
c00155e0:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c00155e5:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c00155ea:	85 c0                	test   eax,eax
c00155ec:	75 01                	jne    c00155ef <sendKeyToTerminal(unsigned char)+0xbb>
c00155ee:	fb                   	sti    
c00155ef:	90                   	nop
c00155f0:	c9                   	leave  
c00155f1:	c3                   	ret    

c00155f2 <sendKeyboardToken(KeyboardToken)>:
c00155f2:	55                   	push   ebp
c00155f3:	89 e5                	mov    ebp,esp
c00155f5:	83 ec 18             	sub    esp,0x18
c00155f8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00155fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fe:	0f b7 c0             	movzx  eax,ax
c0015601:	83 f2 01             	xor    edx,0x1
c0015604:	88 90 00 ef 02 c0    	mov    BYTE PTR [eax-0x3ffd1100],dl
c001560a:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c001560f:	85 c0                	test   eax,eax
c0015611:	74 24                	je     c0015637 <sendKeyboardToken(KeyboardToken)+0x45>
c0015613:	8b 0d e8 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002eee8
c0015619:	83 ec 04             	sub    esp,0x4
c001561c:	68 00 ef 02 c0       	push   0xc002ef00
c0015621:	83 ec 08             	sub    esp,0x8
c0015624:	89 e2                	mov    edx,esp
c0015626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015629:	89 02                	mov    DWORD PTR [edx],eax
c001562b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001562e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015632:	ff d1                	call   ecx
c0015634:	83 c4 10             	add    esp,0x10
c0015637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563a:	66 3d 03 02          	cmp    ax,0x203
c001563e:	75 07                	jne    c0015647 <sendKeyboardToken(KeyboardToken)+0x55>
c0015640:	a0 00 f0 02 c0       	mov    al,ds:0xc002f000
c0015645:	84 c0                	test   al,al
c0015647:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001564b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001564e:	a0 08 f3 02 c0       	mov    al,ds:0xc002f308
c0015653:	38 c2                	cmp    dl,al
c0015655:	74 1c                	je     c0015673 <sendKeyboardToken(KeyboardToken)+0x81>
c0015657:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001565a:	a2 08 f3 02 c0       	mov    ds:0xc002f308,al
c001565f:	a0 08 f3 02 c0       	mov    al,ds:0xc002f308
c0015664:	0f b6 c0             	movzx  eax,al
c0015667:	83 ec 0c             	sub    esp,0xc
c001566a:	50                   	push   eax
c001566b:	e8 4a a9 ff ff       	call   c000ffba <setTerminalScrollLock(bool)>
c0015670:	83 c4 10             	add    esp,0x10
c0015673:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015676:	84 c0                	test   al,al
c0015678:	0f 84 ae 00 00 00    	je     c001572c <sendKeyboardToken(KeyboardToken)+0x13a>
c001567e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015681:	66 3d 10 03          	cmp    ax,0x310
c0015685:	75 06                	jne    c001568d <sendKeyboardToken(KeyboardToken)+0x9b>
c0015687:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001568d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015690:	66 3d 11 03          	cmp    ax,0x311
c0015694:	75 06                	jne    c001569c <sendKeyboardToken(KeyboardToken)+0xaa>
c0015696:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001569c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569f:	66 3d 12 03          	cmp    ax,0x312
c00156a3:	75 06                	jne    c00156ab <sendKeyboardToken(KeyboardToken)+0xb9>
c00156a5:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00156ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ae:	66 3d 13 03          	cmp    ax,0x313
c00156b2:	75 06                	jne    c00156ba <sendKeyboardToken(KeyboardToken)+0xc8>
c00156b4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00156ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bd:	66 3d 14 03          	cmp    ax,0x314
c00156c1:	75 06                	jne    c00156c9 <sendKeyboardToken(KeyboardToken)+0xd7>
c00156c3:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00156c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156cc:	66 3d 15 03          	cmp    ax,0x315
c00156d0:	75 06                	jne    c00156d8 <sendKeyboardToken(KeyboardToken)+0xe6>
c00156d2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00156d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156db:	66 3d 16 03          	cmp    ax,0x316
c00156df:	75 06                	jne    c00156e7 <sendKeyboardToken(KeyboardToken)+0xf5>
c00156e1:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00156e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ea:	66 3d 17 03          	cmp    ax,0x317
c00156ee:	75 06                	jne    c00156f6 <sendKeyboardToken(KeyboardToken)+0x104>
c00156f0:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00156f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f9:	66 3d 18 03          	cmp    ax,0x318
c00156fd:	75 06                	jne    c0015705 <sendKeyboardToken(KeyboardToken)+0x113>
c00156ff:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015705:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015708:	66 3d 19 03          	cmp    ax,0x319
c001570c:	75 06                	jne    c0015714 <sendKeyboardToken(KeyboardToken)+0x122>
c001570e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015714:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015717:	66 3d 1a 03          	cmp    ax,0x31a
c001571b:	0f 85 c9 00 00 00    	jne    c00157ea <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015721:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015727:	e9 be 00 00 00       	jmp    c00157ea <sendKeyboardToken(KeyboardToken)+0x1f8>
c001572c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572f:	66 3d 10 03          	cmp    ax,0x310
c0015733:	75 0a                	jne    c001573f <sendKeyboardToken(KeyboardToken)+0x14d>
c0015735:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001573b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001573f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015742:	66 3d 11 03          	cmp    ax,0x311
c0015746:	75 0a                	jne    c0015752 <sendKeyboardToken(KeyboardToken)+0x160>
c0015748:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001574e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015755:	66 3d 12 03          	cmp    ax,0x312
c0015759:	75 0a                	jne    c0015765 <sendKeyboardToken(KeyboardToken)+0x173>
c001575b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015761:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015768:	66 3d 13 03          	cmp    ax,0x313
c001576c:	75 0a                	jne    c0015778 <sendKeyboardToken(KeyboardToken)+0x186>
c001576e:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015774:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015778:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577b:	66 3d 14 03          	cmp    ax,0x314
c001577f:	75 0a                	jne    c001578b <sendKeyboardToken(KeyboardToken)+0x199>
c0015781:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015787:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001578b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578e:	66 3d 15 03          	cmp    ax,0x315
c0015792:	75 0a                	jne    c001579e <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015794:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001579a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001579e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a1:	66 3d 16 03          	cmp    ax,0x316
c00157a5:	75 0a                	jne    c00157b1 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00157a7:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00157ad:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b4:	66 3d 17 03          	cmp    ax,0x317
c00157b8:	75 0a                	jne    c00157c4 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00157ba:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00157c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c7:	66 3d 18 03          	cmp    ax,0x318
c00157cb:	75 0a                	jne    c00157d7 <sendKeyboardToken(KeyboardToken)+0x1e5>
c00157cd:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00157d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157da:	66 3d 19 03          	cmp    ax,0x319
c00157de:	75 0a                	jne    c00157ea <sendKeyboardToken(KeyboardToken)+0x1f8>
c00157e0:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00157e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ed:	66 3d 00 02          	cmp    ax,0x200
c00157f1:	75 2c                	jne    c001581f <sendKeyboardToken(KeyboardToken)+0x22d>
c00157f3:	a0 00 f3 02 c0       	mov    al,ds:0xc002f300
c00157f8:	83 f0 01             	xor    eax,0x1
c00157fb:	84 c0                	test   al,al
c00157fd:	74 20                	je     c001581f <sendKeyboardToken(KeyboardToken)+0x22d>
c00157ff:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0015804:	6a 01                	push   0x1
c0015806:	6a 00                	push   0x0
c0015808:	68 5c 54 01 c0       	push   0xc001545c
c001580d:	50                   	push   eax
c001580e:	e8 df 83 00 00       	call   c001dbf2 <Process::createThread(void (*)(void*), void*, int)>
c0015813:	83 c4 10             	add    esp,0x10
c0015816:	c6 05 00 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f300,0x1
c001581d:	eb 33                	jmp    c0015852 <sendKeyboardToken(KeyboardToken)+0x260>
c001581f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015822:	66 3d 01 02          	cmp    ax,0x201
c0015826:	75 2a                	jne    c0015852 <sendKeyboardToken(KeyboardToken)+0x260>
c0015828:	a0 00 f3 02 c0       	mov    al,ds:0xc002f300
c001582d:	83 f0 01             	xor    eax,0x1
c0015830:	84 c0                	test   al,al
c0015832:	74 1e                	je     c0015852 <sendKeyboardToken(KeyboardToken)+0x260>
c0015834:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0015839:	6a 01                	push   0x1
c001583b:	6a 00                	push   0x0
c001583d:	68 c8 54 01 c0       	push   0xc00154c8
c0015842:	50                   	push   eax
c0015843:	e8 aa 83 00 00       	call   c001dbf2 <Process::createThread(void (*)(void*), void*, int)>
c0015848:	83 c4 10             	add    esp,0x10
c001584b:	c6 05 00 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f300,0x1
c0015852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015855:	66 3d 1d 03          	cmp    ax,0x31d
c0015859:	75 06                	jne    c0015861 <sendKeyboardToken(KeyboardToken)+0x26f>
c001585b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015861:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015864:	66 3d 1c 03          	cmp    ax,0x31c
c0015868:	75 06                	jne    c0015870 <sendKeyboardToken(KeyboardToken)+0x27e>
c001586a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015873:	66 3d 1b 03          	cmp    ax,0x31b
c0015877:	75 06                	jne    c001587f <sendKeyboardToken(KeyboardToken)+0x28d>
c0015879:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001587f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015882:	66 3d 1e 03          	cmp    ax,0x31e
c0015886:	75 06                	jne    c001588e <sendKeyboardToken(KeyboardToken)+0x29c>
c0015888:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001588e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015891:	66 3d 1f 03          	cmp    ax,0x31f
c0015895:	75 06                	jne    c001589d <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015897:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001589d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a0:	66 3d 1a 03          	cmp    ax,0x31a
c00158a4:	75 06                	jne    c00158ac <sendKeyboardToken(KeyboardToken)+0x2ba>
c00158a6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00158ac:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00158b0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158b3:	83 f0 01             	xor    eax,0x1
c00158b6:	84 c0                	test   al,al
c00158b8:	74 77                	je     c0015931 <sendKeyboardToken(KeyboardToken)+0x33f>
c00158ba:	a0 01 f0 02 c0       	mov    al,ds:0xc002f001
c00158bf:	84 c0                	test   al,al
c00158c1:	74 41                	je     c0015904 <sendKeyboardToken(KeyboardToken)+0x312>
c00158c3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158c7:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00158cb:	74 2b                	je     c00158f8 <sendKeyboardToken(KeyboardToken)+0x306>
c00158cd:	8b 15 04 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f304
c00158d3:	89 d0                	mov    eax,edx
c00158d5:	c1 e0 02             	shl    eax,0x2
c00158d8:	01 d0                	add    eax,edx
c00158da:	01 c0                	add    eax,eax
c00158dc:	a3 04 f3 02 c0       	mov    ds:0xc002f304,eax
c00158e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e4:	0f b7 c0             	movzx  eax,ax
c00158e7:	8d 50 d0             	lea    edx,[eax-0x30]
c00158ea:	a1 04 f3 02 c0       	mov    eax,ds:0xc002f304
c00158ef:	01 d0                	add    eax,edx
c00158f1:	a3 04 f3 02 c0       	mov    ds:0xc002f304,eax
c00158f6:	eb 6d                	jmp    c0015965 <sendKeyboardToken(KeyboardToken)+0x373>
c00158f8:	c7 05 04 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f304,0x0
c0015902:	eb 61                	jmp    c0015965 <sendKeyboardToken(KeyboardToken)+0x373>
c0015904:	a1 04 f3 02 c0       	mov    eax,ds:0xc002f304
c0015909:	85 c0                	test   eax,eax
c001590b:	74 18                	je     c0015925 <sendKeyboardToken(KeyboardToken)+0x333>
c001590d:	a1 04 f3 02 c0       	mov    eax,ds:0xc002f304
c0015912:	0f b6 c0             	movzx  eax,al
c0015915:	83 ec 0c             	sub    esp,0xc
c0015918:	50                   	push   eax
c0015919:	e8 16 fc ff ff       	call   c0015534 <sendKeyToTerminal(unsigned char)>
c001591e:	83 c4 10             	add    esp,0x10
c0015921:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015925:	c7 05 04 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f304,0x0
c001592f:	eb 34                	jmp    c0015965 <sendKeyboardToken(KeyboardToken)+0x373>
c0015931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015934:	66 3d 01 01          	cmp    ax,0x101
c0015938:	75 2b                	jne    c0015965 <sendKeyboardToken(KeyboardToken)+0x373>
c001593a:	a1 04 f3 02 c0       	mov    eax,ds:0xc002f304
c001593f:	85 c0                	test   eax,eax
c0015941:	74 18                	je     c001595b <sendKeyboardToken(KeyboardToken)+0x369>
c0015943:	a1 04 f3 02 c0       	mov    eax,ds:0xc002f304
c0015948:	0f b6 c0             	movzx  eax,al
c001594b:	83 ec 0c             	sub    esp,0xc
c001594e:	50                   	push   eax
c001594f:	e8 e0 fb ff ff       	call   c0015534 <sendKeyToTerminal(unsigned char)>
c0015954:	83 c4 10             	add    esp,0x10
c0015957:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001595b:	c7 05 04 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f304,0x0
c0015965:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015968:	83 f0 01             	xor    eax,0x1
c001596b:	84 c0                	test   al,al
c001596d:	74 4c                	je     c00159bb <sendKeyboardToken(KeyboardToken)+0x3c9>
c001596f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015972:	83 f0 01             	xor    eax,0x1
c0015975:	84 c0                	test   al,al
c0015977:	74 42                	je     c00159bb <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015979:	a0 00 f0 02 c0       	mov    al,ds:0xc002f000
c001597e:	83 f0 01             	xor    eax,0x1
c0015981:	84 c0                	test   al,al
c0015983:	74 36                	je     c00159bb <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015988:	66 83 f8 1f          	cmp    ax,0x1f
c001598c:	76 09                	jbe    c0015997 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001598e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015991:	66 83 f8 7e          	cmp    ax,0x7e
c0015995:	76 12                	jbe    c00159a9 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599a:	66 83 f8 0a          	cmp    ax,0xa
c001599e:	74 09                	je     c00159a9 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00159a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a3:	66 83 f8 08          	cmp    ax,0x8
c00159a7:	75 12                	jne    c00159bb <sendKeyboardToken(KeyboardToken)+0x3c9>
c00159a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ac:	0f b6 c0             	movzx  eax,al
c00159af:	83 ec 0c             	sub    esp,0xc
c00159b2:	50                   	push   eax
c00159b3:	e8 7c fb ff ff       	call   c0015534 <sendKeyToTerminal(unsigned char)>
c00159b8:	83 c4 10             	add    esp,0x10
c00159bb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00159be:	83 f0 01             	xor    eax,0x1
c00159c1:	84 c0                	test   al,al
c00159c3:	74 4f                	je     c0015a14 <sendKeyboardToken(KeyboardToken)+0x422>
c00159c5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159c8:	83 f0 01             	xor    eax,0x1
c00159cb:	84 c0                	test   al,al
c00159cd:	74 45                	je     c0015a14 <sendKeyboardToken(KeyboardToken)+0x422>
c00159cf:	a0 00 f0 02 c0       	mov    al,ds:0xc002f000
c00159d4:	84 c0                	test   al,al
c00159d6:	74 3c                	je     c0015a14 <sendKeyboardToken(KeyboardToken)+0x422>
c00159d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159db:	66 83 f8 3f          	cmp    ax,0x3f
c00159df:	76 33                	jbe    c0015a14 <sendKeyboardToken(KeyboardToken)+0x422>
c00159e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e4:	66 83 f8 7f          	cmp    ax,0x7f
c00159e8:	77 2a                	ja     c0015a14 <sendKeyboardToken(KeyboardToken)+0x422>
c00159ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ed:	88 c2                	mov    dl,al
c00159ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f2:	66 83 f8 5f          	cmp    ax,0x5f
c00159f6:	76 04                	jbe    c00159fc <sendKeyboardToken(KeyboardToken)+0x40a>
c00159f8:	b0 20                	mov    al,0x20
c00159fa:	eb 02                	jmp    c00159fe <sendKeyboardToken(KeyboardToken)+0x40c>
c00159fc:	b0 00                	mov    al,0x0
c00159fe:	29 c2                	sub    edx,eax
c0015a00:	88 d0                	mov    al,dl
c0015a02:	83 e8 40             	sub    eax,0x40
c0015a05:	0f b6 c0             	movzx  eax,al
c0015a08:	83 ec 0c             	sub    esp,0xc
c0015a0b:	50                   	push   eax
c0015a0c:	e8 23 fb ff ff       	call   c0015534 <sendKeyToTerminal(unsigned char)>
c0015a11:	83 c4 10             	add    esp,0x10
c0015a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a17:	66 3d 00 03          	cmp    ax,0x300
c0015a1b:	75 0f                	jne    c0015a2c <sendKeyboardToken(KeyboardToken)+0x43a>
c0015a1d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a20:	83 f0 01             	xor    eax,0x1
c0015a23:	84 c0                	test   al,al
c0015a25:	74 05                	je     c0015a2c <sendKeyboardToken(KeyboardToken)+0x43a>
c0015a27:	e8 ff a8 ff ff       	call   c001032b <doTerminalCycle()>
c0015a2c:	90                   	nop
c0015a2d:	c9                   	leave  
c0015a2e:	c3                   	ret    

c0015a2f <clearInternalKeybuffer(VgaText*)>:
c0015a2f:	55                   	push   ebp
c0015a30:	89 e5                	mov    ebp,esp
c0015a32:	83 ec 08             	sub    esp,0x8
c0015a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a38:	05 98 01 00 00       	add    eax,0x198
c0015a3d:	83 ec 0c             	sub    esp,0xc
c0015a40:	50                   	push   eax
c0015a41:	e8 26 ad fe ff       	call   c000076c <strlen>
c0015a46:	83 c4 10             	add    esp,0x10
c0015a49:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a4c:	81 c2 98 01 00 00    	add    edx,0x198
c0015a52:	83 ec 04             	sub    esp,0x4
c0015a55:	50                   	push   eax
c0015a56:	6a 00                	push   0x0
c0015a58:	52                   	push   edx
c0015a59:	e8 f2 ac fe ff       	call   c0000750 <memset>
c0015a5e:	83 c4 10             	add    esp,0x10
c0015a61:	90                   	nop
c0015a62:	c9                   	leave  
c0015a63:	c3                   	ret    

c0015a64 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015a64:	55                   	push   ebp
c0015a65:	89 e5                	mov    ebp,esp
c0015a67:	83 ec 18             	sub    esp,0x18
c0015a6a:	a1 e8 ee 02 c0       	mov    eax,ds:0xc002eee8
c0015a6f:	85 c0                	test   eax,eax
c0015a71:	74 2a                	je     c0015a9d <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015a73:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015a79:	8b 0d e8 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002eee8
c0015a7f:	83 ec 04             	sub    esp,0x4
c0015a82:	68 00 ef 02 c0       	push   0xc002ef00
c0015a87:	83 ec 08             	sub    esp,0x8
c0015a8a:	89 e2                	mov    edx,esp
c0015a8c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015a8f:	89 02                	mov    DWORD PTR [edx],eax
c0015a91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a94:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015a98:	ff d1                	call   ecx
c0015a9a:	83 c4 10             	add    esp,0x10
c0015a9d:	83 ec 0c             	sub    esp,0xc
c0015aa0:	68 bb b7 02 c0       	push   0xc002b7bb
c0015aa5:	e8 05 cb ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0015aaa:	83 c4 10             	add    esp,0x10
c0015aad:	fb                   	sti    
c0015aae:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015ab5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015ab9:	0f 84 a1 00 00 00    	je     c0015b60 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0015abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac2:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015ac8:	84 c0                	test   al,al
c0015aca:	75 28                	jne    c0015af4 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0015acc:	fa                   	cli    
c0015acd:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0015ad2:	40                   	inc    eax
c0015ad3:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c0015ad8:	e8 59 83 00 00       	call   c001de36 <schedule()>
c0015add:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0015ae2:	48                   	dec    eax
c0015ae3:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c0015ae8:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0015aed:	85 c0                	test   eax,eax
c0015aef:	75 ce                	jne    c0015abf <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015af1:	fb                   	sti    
c0015af2:	eb cb                	jmp    c0015abf <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015af4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015af7:	8d 50 01             	lea    edx,[eax+0x1]
c0015afa:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015afd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b00:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015b06:	88 10                	mov    BYTE PTR [eax],dl
c0015b08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b0b:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015b11:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b17:	05 98 01 00 00       	add    eax,0x198
c0015b1c:	83 ec 0c             	sub    esp,0xc
c0015b1f:	50                   	push   eax
c0015b20:	e8 47 ac fe ff       	call   c000076c <strlen>
c0015b25:	83 c4 10             	add    esp,0x10
c0015b28:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b2b:	81 c2 98 01 00 00    	add    edx,0x198
c0015b31:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015b34:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b37:	81 c2 98 01 00 00    	add    edx,0x198
c0015b3d:	83 ec 04             	sub    esp,0x4
c0015b40:	50                   	push   eax
c0015b41:	51                   	push   ecx
c0015b42:	52                   	push   edx
c0015b43:	e8 40 ab fe ff       	call   c0000688 <memmove>
c0015b48:	83 c4 10             	add    esp,0x10
c0015b4b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015b4e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015b51:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015b55:	0f 85 5a ff ff ff    	jne    c0015ab5 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0015b5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b5e:	eb 03                	jmp    c0015b63 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0015b60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b63:	c9                   	leave  
c0015b64:	c3                   	ret    
c0015b65:	90                   	nop

c0015b66 <Keyboard::Keyboard(char const*)>:
c0015b66:	83 ec 0c             	sub    esp,0xc
c0015b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b6d:	83 ec 08             	sub    esp,0x8
c0015b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b74:	50                   	push   eax
c0015b75:	e8 72 e0 ff ff       	call   c0013bec <Device::Device(char const*)>
c0015b7a:	83 c4 10             	add    esp,0x10
c0015b7d:	ba dc b7 02 c0       	mov    edx,0xc002b7dc
c0015b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b86:	89 10                	mov    DWORD PTR [eax],edx
c0015b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b8c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015b96:	c6 05 e4 ee 02 c0 01 	mov    BYTE PTR ds:0xc002eee4,0x1
c0015b9d:	90                   	nop
c0015b9e:	83 c4 0c             	add    esp,0xc
c0015ba1:	c3                   	ret    

c0015ba2 <Keyboard::~Keyboard()>:
c0015ba2:	83 ec 0c             	sub    esp,0xc
c0015ba5:	ba dc b7 02 c0       	mov    edx,0xc002b7dc
c0015baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bae:	89 10                	mov    DWORD PTR [eax],edx
c0015bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bb4:	83 ec 0c             	sub    esp,0xc
c0015bb7:	50                   	push   eax
c0015bb8:	e8 f9 dc ff ff       	call   c00138b6 <Device::~Device()>
c0015bbd:	83 c4 10             	add    esp,0x10
c0015bc0:	90                   	nop
c0015bc1:	83 c4 0c             	add    esp,0xc
c0015bc4:	c3                   	ret    
c0015bc5:	90                   	nop

c0015bc6 <Keyboard::~Keyboard()>:
c0015bc6:	83 ec 0c             	sub    esp,0xc
c0015bc9:	83 ec 0c             	sub    esp,0xc
c0015bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bd0:	e8 cd ff ff ff       	call   c0015ba2 <Keyboard::~Keyboard()>
c0015bd5:	83 c4 10             	add    esp,0x10
c0015bd8:	83 ec 08             	sub    esp,0x8
c0015bdb:	68 5c 01 00 00       	push   0x15c
c0015be0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015be4:	e8 e6 c8 ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0015be9:	83 c4 10             	add    esp,0x10
c0015bec:	83 c4 0c             	add    esp,0xc
c0015bef:	c3                   	ret    

c0015bf0 <LogicalDisk::close(int, int, void*)>:
c0015bf0:	83 c8 ff             	or     eax,0xffffffff
c0015bf3:	c3                   	ret    

c0015bf4 <LogicalDisk::~LogicalDisk()>:
c0015bf4:	83 ec 0c             	sub    esp,0xc
c0015bf7:	ba 8c b8 02 c0       	mov    edx,0xc002b88c
c0015bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c00:	89 10                	mov    DWORD PTR [eax],edx
c0015c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c06:	83 ec 0c             	sub    esp,0xc
c0015c09:	50                   	push   eax
c0015c0a:	e8 a7 dc ff ff       	call   c00138b6 <Device::~Device()>
c0015c0f:	83 c4 10             	add    esp,0x10
c0015c12:	90                   	nop
c0015c13:	83 c4 0c             	add    esp,0xc
c0015c16:	c3                   	ret    
c0015c17:	90                   	nop

c0015c18 <LogicalDisk::~LogicalDisk()>:
c0015c18:	83 ec 0c             	sub    esp,0xc
c0015c1b:	83 ec 0c             	sub    esp,0xc
c0015c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c22:	e8 cd ff ff ff       	call   c0015bf4 <LogicalDisk::~LogicalDisk()>
c0015c27:	83 c4 10             	add    esp,0x10
c0015c2a:	83 ec 08             	sub    esp,0x8
c0015c2d:	68 74 01 00 00       	push   0x174
c0015c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c36:	e8 94 c8 ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0015c3b:	83 c4 10             	add    esp,0x10
c0015c3e:	83 c4 0c             	add    esp,0xc
c0015c41:	c3                   	ret    

c0015c42 <LogicalDisk::open(int, int, void*)>:
c0015c42:	83 ec 18             	sub    esp,0x18
c0015c45:	68 08 b8 02 c0       	push   0xc002b808
c0015c4a:	e8 2e 44 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0015c4f:	83 c8 ff             	or     eax,0xffffffff
c0015c52:	83 c4 1c             	add    esp,0x1c
c0015c55:	c3                   	ret    

c0015c56 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015c56:	53                   	push   ebx
c0015c57:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015c5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c63:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015c69:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015c6f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015c75:	77 10                	ja     c0015c87 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015c77:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015c7d:	89 d3                	mov    ebx,edx
c0015c7f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015c85:	72 05                	jb     c0015c8c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015c87:	83 c8 ff             	or     eax,0xffffffff
c0015c8a:	89 c2                	mov    edx,eax
c0015c8c:	5b                   	pop    ebx
c0015c8d:	c3                   	ret    

c0015c8e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015c8e:	56                   	push   esi
c0015c8f:	83 c8 ff             	or     eax,0xffffffff
c0015c92:	53                   	push   ebx
c0015c93:	89 c2                	mov    edx,eax
c0015c95:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015c99:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015c9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015ca1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015ca7:	77 27                	ja     c0015cd0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015ca9:	89 d8                	mov    eax,ebx
c0015cab:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015cb1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015cb7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015cbc:	89 c2                	mov    edx,eax
c0015cbe:	73 10                	jae    c0015cd0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015cc0:	89 c8                	mov    eax,ecx
c0015cc2:	89 da                	mov    edx,ebx
c0015cc4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015cca:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015cd0:	5b                   	pop    ebx
c0015cd1:	5e                   	pop    esi
c0015cd2:	c3                   	ret    
c0015cd3:	90                   	nop

c0015cd4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015cd4:	83 ec 1c             	sub    esp,0x1c
c0015cd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015cdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015cdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ce3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ce7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ceb:	89 04 24             	mov    DWORD PTR [esp],eax
c0015cee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015cf2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015cf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cfa:	83 ec 08             	sub    esp,0x8
c0015cfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d01:	50                   	push   eax
c0015d02:	e8 e5 de ff ff       	call   c0013bec <Device::Device(char const*)>
c0015d07:	83 c4 10             	add    esp,0x10
c0015d0a:	ba 8c b8 02 c0       	mov    edx,0xc002b88c
c0015d0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d13:	89 10                	mov    DWORD PTR [eax],edx
c0015d15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d19:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015d20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d24:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015d2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d2f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015d39:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015d3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d45:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015d4b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015d51:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015d55:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015d58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d5c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015d62:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015d68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d6c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015d70:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015d76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d7a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015d84:	90                   	nop
c0015d85:	83 c4 1c             	add    esp,0x1c
c0015d88:	c3                   	ret    
c0015d89:	90                   	nop

c0015d8a <LogicalDisk::assignDriveLetter()>:
c0015d8a:	55                   	push   ebp
c0015d8b:	57                   	push   edi
c0015d8c:	56                   	push   esi
c0015d8d:	53                   	push   ebx
c0015d8e:	83 ec 14             	sub    esp,0x14
c0015d91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015d95:	8b 3d 20 f3 02 c0    	mov    edi,DWORD PTR ds:0xc002f320
c0015d9b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015da1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015da5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015dab:	8b 3d 24 f3 02 c0    	mov    edi,DWORD PTR ds:0xc002f324
c0015db1:	3c 01                	cmp    al,0x1
c0015db3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015db7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015dbb:	19 c0                	sbb    eax,eax
c0015dbd:	83 e0 02             	and    eax,0x2
c0015dc0:	83 c0 41             	add    eax,0x41
c0015dc3:	0f be e8             	movsx  ebp,al
c0015dc6:	3c 43                	cmp    al,0x43
c0015dc8:	75 10                	jne    c0015dda <LogicalDisk::assignDriveLetter()+0x50>
c0015dca:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015dd1:	75 5d                	jne    c0015e30 <LogicalDisk::assignDriveLetter()+0xa6>
c0015dd3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015dd8:	75 56                	jne    c0015e30 <LogicalDisk::assignDriveLetter()+0xa6>
c0015dda:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015ddd:	ba 01 00 00 00       	mov    edx,0x1
c0015de2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015de6:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015dea:	d3 e2                	shl    edx,cl
c0015dec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015df0:	89 d7                	mov    edi,edx
c0015df2:	89 d6                	mov    esi,edx
c0015df4:	c1 ff 1f             	sar    edi,0x1f
c0015df7:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015dfb:	21 f9                	and    ecx,edi
c0015dfd:	09 d1                	or     ecx,edx
c0015dff:	75 2f                	jne    c0015e30 <LogicalDisk::assignDriveLetter()+0xa6>
c0015e01:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015e05:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e09:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015e0f:	09 f2                	or     edx,esi
c0015e11:	89 15 20 f3 02 c0    	mov    DWORD PTR ds:0xc002f320,edx
c0015e17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e1b:	09 fa                	or     edx,edi
c0015e1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015e21:	89 15 24 f3 02 c0    	mov    DWORD PTR ds:0xc002f324,edx
c0015e27:	89 1c bd 40 f3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0cc0],ebx
c0015e2e:	eb 08                	jmp    c0015e38 <LogicalDisk::assignDriveLetter()+0xae>
c0015e30:	45                   	inc    ebp
c0015e31:	40                   	inc    eax
c0015e32:	3c 5b                	cmp    al,0x5b
c0015e34:	75 90                	jne    c0015dc6 <LogicalDisk::assignDriveLetter()+0x3c>
c0015e36:	31 c0                	xor    eax,eax
c0015e38:	83 c4 14             	add    esp,0x14
c0015e3b:	5b                   	pop    ebx
c0015e3c:	5e                   	pop    esi
c0015e3d:	5f                   	pop    edi
c0015e3e:	5d                   	pop    ebp
c0015e3f:	c3                   	ret    

c0015e40 <LogicalDisk::mount()>:
c0015e40:	56                   	push   esi
c0015e41:	53                   	push   ebx
c0015e42:	50                   	push   eax
c0015e43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e47:	8b 1d b4 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eeb4
c0015e4d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015e57:	85 db                	test   ebx,ebx
c0015e59:	74 50                	je     c0015eab <LogicalDisk::mount()+0x6b>
c0015e5b:	50                   	push   eax
c0015e5c:	50                   	push   eax
c0015e5d:	ff 35 68 22 03 c0    	push   DWORD PTR ds:0xc0032268
c0015e63:	68 2c b8 02 c0       	push   0xc002b82c
c0015e68:	e8 42 c7 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0015e6d:	83 c4 0c             	add    esp,0xc
c0015e70:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015e77:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015e79:	83 e8 41             	sub    eax,0x41
c0015e7c:	50                   	push   eax
c0015e7d:	56                   	push   esi
c0015e7e:	53                   	push   ebx
c0015e7f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015e82:	83 c4 10             	add    esp,0x10
c0015e85:	84 c0                	test   al,al
c0015e87:	74 08                	je     c0015e91 <LogicalDisk::mount()+0x51>
c0015e89:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015e8f:	eb 1c                	jmp    c0015ead <LogicalDisk::mount()+0x6d>
c0015e91:	51                   	push   ecx
c0015e92:	51                   	push   ecx
c0015e93:	ff 35 68 22 03 c0    	push   DWORD PTR ds:0xc0032268
c0015e99:	68 47 b8 02 c0       	push   0xc002b847
c0015e9e:	e8 0c c7 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0015ea3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015ea6:	83 c4 10             	add    esp,0x10
c0015ea9:	eb ac                	jmp    c0015e57 <LogicalDisk::mount()+0x17>
c0015eab:	31 c0                	xor    eax,eax
c0015ead:	5a                   	pop    edx
c0015eae:	5b                   	pop    ebx
c0015eaf:	5e                   	pop    esi
c0015eb0:	c3                   	ret    
c0015eb1:	90                   	nop

c0015eb2 <LogicalDisk::unmount()>:
c0015eb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eb6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015ec0:	c3                   	ret    
c0015ec1:	90                   	nop

c0015ec2 <LogicalDisk::eject()>:
c0015ec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ec6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015ecc:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ece:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ed2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015ed5:	90                   	nop

c0015ed6 <LogicalDisk::unassignDriveLetter()>:
c0015ed6:	57                   	push   edi
c0015ed7:	56                   	push   esi
c0015ed8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015edc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015ee3:	84 c9                	test   cl,cl
c0015ee5:	75 0f                	jne    c0015ef6 <LogicalDisk::unassignDriveLetter()+0x20>
c0015ee7:	c7 44 24 0c 62 b8 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b862
c0015eef:	5e                   	pop    esi
c0015ef0:	5f                   	pop    edi
c0015ef1:	e9 87 41 00 00       	jmp    c001a07d <Krnl::panic(char const*)>
c0015ef6:	83 e9 41             	sub    ecx,0x41
c0015ef9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015f00:	b8 01 00 00 00       	mov    eax,0x1
c0015f05:	c7 04 8d 40 f3 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0cc0],0x0
c0015f10:	d3 e0                	shl    eax,cl
c0015f12:	89 c7                	mov    edi,eax
c0015f14:	f7 d0                	not    eax
c0015f16:	c1 ff 1f             	sar    edi,0x1f
c0015f19:	21 05 20 f3 02 c0    	and    DWORD PTR ds:0xc002f320,eax
c0015f1f:	89 fe                	mov    esi,edi
c0015f21:	f7 d6                	not    esi
c0015f23:	21 35 24 f3 02 c0    	and    DWORD PTR ds:0xc002f324,esi
c0015f29:	5e                   	pop    esi
c0015f2a:	5f                   	pop    edi
c0015f2b:	c3                   	ret    

c0015f2c <LogicalDisk::read(unsigned long long, int, void*)>:
c0015f2c:	57                   	push   edi
c0015f2d:	56                   	push   esi
c0015f2e:	53                   	push   ebx
c0015f2f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015f33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015f3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f3f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015f45:	77 41                	ja     c0015f88 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015f47:	99                   	cdq    
c0015f48:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015f4e:	01 c8                	add    eax,ecx
c0015f50:	11 da                	adc    edx,ebx
c0015f52:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015f58:	19 d7                	sbb    edi,edx
c0015f5a:	72 33                	jb     c0015f8f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015f5c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015f62:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015f68:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015f6c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015f70:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015f76:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015f7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f80:	5b                   	pop    ebx
c0015f81:	5e                   	pop    esi
c0015f82:	5f                   	pop    edi
c0015f83:	e9 cc 0a 00 00       	jmp    c0016a54 <VCache::read(unsigned long long, int, void*)>
c0015f88:	b8 05 00 00 00       	mov    eax,0x5
c0015f8d:	eb 05                	jmp    c0015f94 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015f8f:	b8 07 00 00 00       	mov    eax,0x7
c0015f94:	5b                   	pop    ebx
c0015f95:	5e                   	pop    esi
c0015f96:	5f                   	pop    edi
c0015f97:	c3                   	ret    

c0015f98 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015f98:	57                   	push   edi
c0015f99:	56                   	push   esi
c0015f9a:	53                   	push   ebx
c0015f9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015f9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fa3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015fa7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fab:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015fb1:	77 41                	ja     c0015ff4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015fb3:	99                   	cdq    
c0015fb4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015fba:	01 c8                	add    eax,ecx
c0015fbc:	11 da                	adc    edx,ebx
c0015fbe:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015fc4:	19 d7                	sbb    edi,edx
c0015fc6:	72 33                	jb     c0015ffb <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015fc8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015fce:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015fd4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015fd8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015fdc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015fe2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015fe8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015fec:	5b                   	pop    ebx
c0015fed:	5e                   	pop    esi
c0015fee:	5f                   	pop    edi
c0015fef:	e9 76 09 00 00       	jmp    c001696a <VCache::write(unsigned long long, int, void*)>
c0015ff4:	b8 05 00 00 00       	mov    eax,0x5
c0015ff9:	eb 05                	jmp    c0016000 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015ffb:	b8 07 00 00 00       	mov    eax,0x7
c0016000:	5b                   	pop    ebx
c0016001:	5e                   	pop    esi
c0016002:	5f                   	pop    edi
c0016003:	c3                   	ret    

c0016004 <Mouse::Mouse(char const*)>:
c0016004:	83 ec 0c             	sub    esp,0xc
c0016007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001600b:	83 ec 08             	sub    esp,0x8
c001600e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016012:	50                   	push   eax
c0016013:	e8 d4 db ff ff       	call   c0013bec <Device::Device(char const*)>
c0016018:	83 c4 10             	add    esp,0x10
c001601b:	ba b8 b8 02 c0       	mov    edx,0xc002b8b8
c0016020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016024:	89 10                	mov    DWORD PTR [eax],edx
c0016026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001602a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016034:	90                   	nop
c0016035:	83 c4 0c             	add    esp,0xc
c0016038:	c3                   	ret    
c0016039:	90                   	nop

c001603a <Mouse::~Mouse()>:
c001603a:	83 ec 0c             	sub    esp,0xc
c001603d:	ba b8 b8 02 c0       	mov    edx,0xc002b8b8
c0016042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016046:	89 10                	mov    DWORD PTR [eax],edx
c0016048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001604c:	83 ec 0c             	sub    esp,0xc
c001604f:	50                   	push   eax
c0016050:	e8 61 d8 ff ff       	call   c00138b6 <Device::~Device()>
c0016055:	83 c4 10             	add    esp,0x10
c0016058:	90                   	nop
c0016059:	83 c4 0c             	add    esp,0xc
c001605c:	c3                   	ret    
c001605d:	90                   	nop

c001605e <Mouse::~Mouse()>:
c001605e:	83 ec 0c             	sub    esp,0xc
c0016061:	83 ec 0c             	sub    esp,0xc
c0016064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016068:	e8 cd ff ff ff       	call   c001603a <Mouse::~Mouse()>
c001606d:	83 c4 10             	add    esp,0x10
c0016070:	83 ec 08             	sub    esp,0x8
c0016073:	68 58 01 00 00       	push   0x158
c0016078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001607c:	e8 4e c4 ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0016081:	83 c4 10             	add    esp,0x10
c0016084:	83 c4 0c             	add    esp,0xc
c0016087:	c3                   	ret    

c0016088 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016088:	55                   	push   ebp
c0016089:	57                   	push   edi
c001608a:	56                   	push   esi
c001608b:	53                   	push   ebx
c001608c:	81 ec 28 01 00 00    	sub    esp,0x128
c0016092:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016099:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00160a0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00160a7:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00160ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00160b2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00160b6:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00160bd:	e8 26 dc ff ff       	call   c0013ce8 <Device::getName()>
c00160c2:	5a                   	pop    edx
c00160c3:	59                   	pop    ecx
c00160c4:	50                   	push   eax
c00160c5:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00160c9:	55                   	push   ebp
c00160ca:	e8 3d a7 fe ff       	call   c000080c <strcpy>
c00160cf:	5b                   	pop    ebx
c00160d0:	58                   	pop    eax
c00160d1:	68 dc b8 02 c0       	push   0xc002b8dc
c00160d6:	55                   	push   ebp
c00160d7:	e8 70 a8 fe ff       	call   c000094c <strcat>
c00160dc:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00160e3:	e8 ce 94 ff ff       	call   c000f5b6 <malloc>
c00160e8:	83 c4 0c             	add    esp,0xc
c00160eb:	89 c3                	mov    ebx,eax
c00160ed:	57                   	push   edi
c00160ee:	56                   	push   esi
c00160ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00160f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00160f7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00160fe:	55                   	push   ebp
c00160ff:	50                   	push   eax
c0016100:	e8 cf fb ff ff       	call   c0015cd4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016105:	83 c4 14             	add    esp,0x14
c0016108:	53                   	push   ebx
c0016109:	e8 7c fc ff ff       	call   c0015d8a <LogicalDisk::assignDriveLetter()>
c001610e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016111:	e8 2a fd ff ff       	call   c0015e40 <LogicalDisk::mount()>
c0016116:	58                   	pop    eax
c0016117:	5a                   	pop    edx
c0016118:	53                   	push   ebx
c0016119:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016120:	e8 c3 d8 ff ff       	call   c00139e8 <Device::addChild(Device*)>
c0016125:	81 c4 2c 01 00 00    	add    esp,0x12c
c001612b:	5b                   	pop    ebx
c001612c:	5e                   	pop    esi
c001612d:	5f                   	pop    edi
c001612e:	5d                   	pop    ebp
c001612f:	c3                   	ret    

c0016130 <createPartitionsForDisk(PhysicalDisk*)>:
c0016130:	55                   	push   ebp
c0016131:	57                   	push   edi
c0016132:	56                   	push   esi
c0016133:	53                   	push   ebx
c0016134:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001613a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016141:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016147:	3d 00 02 00 00       	cmp    eax,0x200
c001614c:	74 27                	je     c0016175 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001614e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016154:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001615a:	83 ec 10             	sub    esp,0x10
c001615d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016161:	99                   	cdq    
c0016162:	c1 e6 0a             	shl    esi,0xa
c0016165:	52                   	push   edx
c0016166:	89 fd                	mov    ebp,edi
c0016168:	50                   	push   eax
c0016169:	55                   	push   ebp
c001616a:	56                   	push   esi
c001616b:	e8 34 0e 01 00       	call   c0026fa4 <__udivdi3>
c0016170:	e9 b1 00 00 00       	jmp    c0016226 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016175:	83 ec 0c             	sub    esp,0xc
c0016178:	8b 03                	mov    eax,DWORD PTR [ebx]
c001617a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001617e:	56                   	push   esi
c001617f:	6a 01                	push   0x1
c0016181:	6a 00                	push   0x0
c0016183:	6a 00                	push   0x0
c0016185:	53                   	push   ebx
c0016186:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016189:	83 c4 20             	add    esp,0x20
c001618c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016194:	75 0a                	jne    c00161a0 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016196:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001619e:	74 2c                	je     c00161cc <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00161a0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00161a6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00161ac:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00161b2:	83 ec 10             	sub    esp,0x10
c00161b5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00161b9:	89 f7                	mov    edi,esi
c00161bb:	c1 e0 0a             	shl    eax,0xa
c00161be:	c1 ff 1f             	sar    edi,0x1f
c00161c1:	57                   	push   edi
c00161c2:	56                   	push   esi
c00161c3:	52                   	push   edx
c00161c4:	50                   	push   eax
c00161c5:	e8 da 0d 01 00       	call   c0026fa4 <__udivdi3>
c00161ca:	eb 5a                	jmp    c0016226 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00161cc:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00161d3:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00161da:	83 e1 7f             	and    ecx,0x7f
c00161dd:	83 e0 7f             	and    eax,0x7f
c00161e0:	01 c1                	add    ecx,eax
c00161e2:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00161e9:	83 e0 7f             	and    eax,0x7f
c00161ec:	01 c1                	add    ecx,eax
c00161ee:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00161f5:	83 e0 7f             	and    eax,0x7f
c00161f8:	00 c1                	add    cl,al
c00161fa:	74 41                	je     c001623d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00161fc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016202:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016208:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001620e:	83 ec 10             	sub    esp,0x10
c0016211:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016215:	89 f7                	mov    edi,esi
c0016217:	c1 e0 0a             	shl    eax,0xa
c001621a:	c1 ff 1f             	sar    edi,0x1f
c001621d:	57                   	push   edi
c001621e:	56                   	push   esi
c001621f:	52                   	push   edx
c0016220:	50                   	push   eax
c0016221:	e8 7e 0d 01 00       	call   c0026fa4 <__udivdi3>
c0016226:	83 c4 14             	add    esp,0x14
c0016229:	52                   	push   edx
c001622a:	50                   	push   eax
c001622b:	6a 00                	push   0x0
c001622d:	6a 00                	push   0x0
c001622f:	53                   	push   ebx
c0016230:	e8 53 fe ff ff       	call   c0016088 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016235:	83 c4 20             	add    esp,0x20
c0016238:	e9 79 01 00 00       	jmp    c00163b6 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001623d:	89 f0                	mov    eax,esi
c001623f:	31 f6                	xor    esi,esi
c0016241:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016248:	75 02                	jne    c001624c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001624a:	89 f1                	mov    ecx,esi
c001624c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016253:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001625a:	c1 e2 08             	shl    edx,0x8
c001625d:	c1 e7 10             	shl    edi,0x10
c0016260:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016268:	09 fa                	or     edx,edi
c001626a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016272:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016279:	83 c0 10             	add    eax,0x10
c001627c:	09 fa                	or     edx,edi
c001627e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016285:	c1 e7 18             	shl    edi,0x18
c0016288:	09 fa                	or     edx,edi
c001628a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016291:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016295:	c1 e7 10             	shl    edi,0x10
c0016298:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001629f:	c1 e2 08             	shl    edx,0x8
c00162a2:	09 fa                	or     edx,edi
c00162a4:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00162ab:	09 fa                	or     edx,edi
c00162ad:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00162b4:	c1 e7 18             	shl    edi,0x18
c00162b7:	09 fa                	or     edx,edi
c00162b9:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00162bd:	46                   	inc    esi
c00162be:	83 fe 04             	cmp    esi,0x4
c00162c1:	0f 85 7a ff ff ff    	jne    c0016241 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00162c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162cb:	83 f0 01             	xor    eax,0x1
c00162ce:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00162d2:	75 57                	jne    c001632b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00162d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162d8:	83 f0 01             	xor    eax,0x1
c00162db:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00162df:	75 4a                	jne    c001632b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00162e1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00162e5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00162ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00162f5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162fb:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016301:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016307:	0f a4 c2 0a          	shld   edx,eax,0xa
c001630b:	89 f7                	mov    edi,esi
c001630d:	c1 e0 0a             	shl    eax,0xa
c0016310:	c1 ff 1f             	sar    edi,0x1f
c0016313:	57                   	push   edi
c0016314:	56                   	push   esi
c0016315:	52                   	push   edx
c0016316:	50                   	push   eax
c0016317:	e8 88 0c 01 00       	call   c0026fa4 <__udivdi3>
c001631c:	83 c4 10             	add    esp,0x10
c001631f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016323:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016327:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001632b:	84 c9                	test   cl,cl
c001632d:	74 53                	je     c0016382 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001632f:	0f b6 c9             	movzx  ecx,cl
c0016332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016336:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001633a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001633e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016346:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001634a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001634e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016352:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016356:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001635a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001635e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016362:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016366:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001636a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001636e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016372:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016376:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001637a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001637e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016382:	31 ed                	xor    ebp,ebp
c0016384:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016388:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001638c:	89 f8                	mov    eax,edi
c001638e:	09 f0                	or     eax,esi
c0016390:	74 1e                	je     c00163b0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016392:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016396:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001639a:	89 d1                	mov    ecx,edx
c001639c:	09 c1                	or     ecx,eax
c001639e:	74 10                	je     c00163b0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00163a0:	83 ec 0c             	sub    esp,0xc
c00163a3:	57                   	push   edi
c00163a4:	56                   	push   esi
c00163a5:	52                   	push   edx
c00163a6:	50                   	push   eax
c00163a7:	53                   	push   ebx
c00163a8:	e8 db fc ff ff       	call   c0016088 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00163ad:	83 c4 20             	add    esp,0x20
c00163b0:	45                   	inc    ebp
c00163b1:	83 fd 04             	cmp    ebp,0x4
c00163b4:	75 ce                	jne    c0016384 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00163b6:	81 c4 5c 02 00 00    	add    esp,0x25c
c00163bc:	5b                   	pop    ebx
c00163bd:	5e                   	pop    esi
c00163be:	5f                   	pop    edi
c00163bf:	5d                   	pop    ebp
c00163c0:	c3                   	ret    
c00163c1:	90                   	nop

c00163c2 <Serial::Serial(char const*)>:
c00163c2:	83 ec 0c             	sub    esp,0xc
c00163c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c9:	83 ec 08             	sub    esp,0x8
c00163cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163d0:	50                   	push   eax
c00163d1:	e8 16 d8 ff ff       	call   c0013bec <Device::Device(char const*)>
c00163d6:	83 c4 10             	add    esp,0x10
c00163d9:	ba f0 b8 02 c0       	mov    edx,0xc002b8f0
c00163de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163e2:	89 10                	mov    DWORD PTR [eax],edx
c00163e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163e8:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00163f2:	90                   	nop
c00163f3:	83 c4 0c             	add    esp,0xc
c00163f6:	c3                   	ret    
c00163f7:	90                   	nop

c00163f8 <Serial::~Serial()>:
c00163f8:	83 ec 0c             	sub    esp,0xc
c00163fb:	ba f0 b8 02 c0       	mov    edx,0xc002b8f0
c0016400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016404:	89 10                	mov    DWORD PTR [eax],edx
c0016406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001640a:	83 ec 0c             	sub    esp,0xc
c001640d:	50                   	push   eax
c001640e:	e8 a3 d4 ff ff       	call   c00138b6 <Device::~Device()>
c0016413:	83 c4 10             	add    esp,0x10
c0016416:	90                   	nop
c0016417:	83 c4 0c             	add    esp,0xc
c001641a:	c3                   	ret    
c001641b:	90                   	nop

c001641c <Serial::~Serial()>:
c001641c:	83 ec 0c             	sub    esp,0xc
c001641f:	83 ec 0c             	sub    esp,0xc
c0016422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016426:	e8 cd ff ff ff       	call   c00163f8 <Serial::~Serial()>
c001642b:	83 c4 10             	add    esp,0x10
c001642e:	83 ec 08             	sub    esp,0x8
c0016431:	68 58 01 00 00       	push   0x158
c0016436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001643a:	e8 90 c0 ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c001643f:	83 c4 10             	add    esp,0x10
c0016442:	83 c4 0c             	add    esp,0xc
c0016445:	c3                   	ret    

c0016446 <Timer::Timer(char const*)>:
c0016446:	83 ec 0c             	sub    esp,0xc
c0016449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001644d:	83 ec 08             	sub    esp,0x8
c0016450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016454:	50                   	push   eax
c0016455:	e8 92 d7 ff ff       	call   c0013bec <Device::Device(char const*)>
c001645a:	83 c4 10             	add    esp,0x10
c001645d:	ba 34 b9 02 c0       	mov    edx,0xc002b934
c0016462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016466:	89 10                	mov    DWORD PTR [eax],edx
c0016468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001646c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016476:	90                   	nop
c0016477:	83 c4 0c             	add    esp,0xc
c001647a:	c3                   	ret    
c001647b:	90                   	nop

c001647c <Timer::~Timer()>:
c001647c:	83 ec 0c             	sub    esp,0xc
c001647f:	ba 34 b9 02 c0       	mov    edx,0xc002b934
c0016484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016488:	89 10                	mov    DWORD PTR [eax],edx
c001648a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648e:	83 ec 0c             	sub    esp,0xc
c0016491:	50                   	push   eax
c0016492:	e8 1f d4 ff ff       	call   c00138b6 <Device::~Device()>
c0016497:	83 c4 10             	add    esp,0x10
c001649a:	90                   	nop
c001649b:	83 c4 0c             	add    esp,0xc
c001649e:	c3                   	ret    
c001649f:	90                   	nop

c00164a0 <Timer::~Timer()>:
c00164a0:	83 ec 0c             	sub    esp,0xc
c00164a3:	83 ec 0c             	sub    esp,0xc
c00164a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164aa:	e8 cd ff ff ff       	call   c001647c <Timer::~Timer()>
c00164af:	83 c4 10             	add    esp,0x10
c00164b2:	83 ec 08             	sub    esp,0x8
c00164b5:	68 5c 01 00 00       	push   0x15c
c00164ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164be:	e8 0c c0 ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c00164c3:	83 c4 10             	add    esp,0x10
c00164c6:	83 c4 0c             	add    esp,0xc
c00164c9:	c3                   	ret    

c00164ca <Timer::read()>:
c00164ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00164d4:	c3                   	ret    

c00164d5 <timerHandler(unsigned long long)>:
c00164d5:	55                   	push   ebp
c00164d6:	57                   	push   edi
c00164d7:	56                   	push   esi
c00164d8:	53                   	push   ebx
c00164d9:	83 ec 0c             	sub    esp,0xc
c00164dc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00164e0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00164e4:	01 35 b0 f3 02 c0    	add    DWORD PTR ds:0xc002f3b0,esi
c00164ea:	11 3d b4 f3 02 c0    	adc    DWORD PTR ds:0xc002f3b4,edi
c00164f0:	80 3d 4d ed 02 c0 00 	cmp    BYTE PTR ds:0xc002ed4d,0x0
c00164f7:	0f 84 42 01 00 00    	je     c001663f <timerHandler(unsigned long long)+0x16a>
c00164fd:	fa                   	cli    
c00164fe:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c0016504:	83 ec 0c             	sub    esp,0xc
c0016507:	ff 05 64 22 03 c0    	inc    DWORD PTR ds:0xc0032264
c001650d:	68 78 22 03 c0       	push   0xc0032278
c0016512:	e8 13 2b 01 00       	call   c002902a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016517:	83 c4 10             	add    esp,0x10
c001651a:	84 c0                	test   al,al
c001651c:	0f 85 a2 00 00 00    	jne    c00165c4 <timerHandler(unsigned long long)+0xef>
c0016522:	83 ec 0c             	sub    esp,0xc
c0016525:	68 78 22 03 c0       	push   0xc0032278
c001652a:	e8 17 2b 01 00       	call   c0029046 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001652f:	83 c4 10             	add    esp,0x10
c0016532:	89 c3                	mov    ebx,eax
c0016534:	83 ec 0c             	sub    esp,0xc
c0016537:	68 78 22 03 c0       	push   0xc0032278
c001653c:	e8 05 2b 01 00       	call   c0029046 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016541:	c7 04 24 78 22 03 c0 	mov    DWORD PTR [esp],0xc0032278
c0016548:	89 c5                	mov    ebp,eax
c001654a:	e8 ff 2a 01 00       	call   c002904e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001654f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016552:	83 c4 10             	add    esp,0x10
c0016555:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016558:	39 15 b0 f3 02 c0    	cmp    DWORD PTR ds:0xc002f3b0,edx
c001655e:	a1 b4 f3 02 c0       	mov    eax,ds:0xc002f3b4
c0016563:	19 c8                	sbb    eax,ecx
c0016565:	72 21                	jb     c0016588 <timerHandler(unsigned long long)+0xb3>
c0016567:	83 ec 0c             	sub    esp,0xc
c001656a:	55                   	push   ebp
c001656b:	e8 8a 7d 00 00       	call   c001e2fa <unblockTask(ThreadControlBlock*)>
c0016570:	83 c4 10             	add    esp,0x10
c0016573:	39 eb                	cmp    ebx,ebp
c0016575:	75 21                	jne    c0016598 <timerHandler(unsigned long long)+0xc3>
c0016577:	83 ec 0c             	sub    esp,0xc
c001657a:	68 78 22 03 c0       	push   0xc0032278
c001657f:	e8 c2 2a 01 00       	call   c0029046 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016584:	89 c3                	mov    ebx,eax
c0016586:	eb 0d                	jmp    c0016595 <timerHandler(unsigned long long)+0xc0>
c0016588:	50                   	push   eax
c0016589:	50                   	push   eax
c001658a:	55                   	push   ebp
c001658b:	68 78 22 03 c0       	push   0xc0032278
c0016590:	e8 67 2b 01 00       	call   c00290fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016595:	83 c4 10             	add    esp,0x10
c0016598:	83 ec 0c             	sub    esp,0xc
c001659b:	68 78 22 03 c0       	push   0xc0032278
c00165a0:	e8 85 2a 01 00       	call   c002902a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00165a5:	83 c4 10             	add    esp,0x10
c00165a8:	84 c0                	test   al,al
c00165aa:	75 18                	jne    c00165c4 <timerHandler(unsigned long long)+0xef>
c00165ac:	83 ec 0c             	sub    esp,0xc
c00165af:	68 78 22 03 c0       	push   0xc0032278
c00165b4:	e8 8d 2a 01 00       	call   c0029046 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165b9:	83 c4 10             	add    esp,0x10
c00165bc:	39 d8                	cmp    eax,ebx
c00165be:	0f 85 70 ff ff ff    	jne    c0016534 <timerHandler(unsigned long long)+0x5f>
c00165c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165c9:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00165cd:	74 3d                	je     c001660c <timerHandler(unsigned long long)+0x137>
c00165cf:	80 3d 4c ed 02 c0 00 	cmp    BYTE PTR ds:0xc002ed4c,0x0
c00165d6:	74 34                	je     c001660c <timerHandler(unsigned long long)+0x137>
c00165d8:	fa                   	cli    
c00165d9:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c00165df:	31 d2                	xor    edx,edx
c00165e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165e6:	89 f9                	mov    ecx,edi
c00165e8:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00165eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00165f3:	39 c6                	cmp    esi,eax
c00165f5:	19 d1                	sbb    ecx,edx
c00165f7:	72 05                	jb     c00165fe <timerHandler(unsigned long long)+0x129>
c00165f9:	e8 38 78 00 00       	call   c001de36 <schedule()>
c00165fe:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0016603:	48                   	dec    eax
c0016604:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c0016609:	75 01                	jne    c001660c <timerHandler(unsigned long long)+0x137>
c001660b:	fb                   	sti    
c001660c:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c0016611:	48                   	dec    eax
c0016612:	a3 64 22 03 c0       	mov    ds:0xc0032264,eax
c0016617:	75 18                	jne    c0016631 <timerHandler(unsigned long long)+0x15c>
c0016619:	83 3d 60 22 03 c0 00 	cmp    DWORD PTR ds:0xc0032260,0x0
c0016620:	74 0f                	je     c0016631 <timerHandler(unsigned long long)+0x15c>
c0016622:	c7 05 60 22 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032260,0x0
c001662c:	e8 05 78 00 00       	call   c001de36 <schedule()>
c0016631:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0016636:	48                   	dec    eax
c0016637:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001663c:	75 01                	jne    c001663f <timerHandler(unsigned long long)+0x16a>
c001663e:	fb                   	sti    
c001663f:	83 c4 0c             	add    esp,0xc
c0016642:	5b                   	pop    ebx
c0016643:	5e                   	pop    esi
c0016644:	5f                   	pop    edi
c0016645:	5d                   	pop    ebp
c0016646:	c3                   	ret    

c0016647 <setupTimer(int)>:
c0016647:	57                   	push   edi
c0016648:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c001664d:	56                   	push   esi
c001664e:	53                   	push   ebx
c001664f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016653:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016659:	83 ec 0c             	sub    esp,0xc
c001665c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016662:	e8 81 d6 ff ff       	call   c0013ce8 <Device::getName()>
c0016667:	83 c4 10             	add    esp,0x10
c001666a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001666d:	0f 85 8d 00 00 00    	jne    c0016700 <setupTimer(int)+0xb9>
c0016673:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0016678:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001667f:	74 7f                	je     c0016700 <setupTimer(int)+0xb9>
c0016681:	83 ec 0c             	sub    esp,0xc
c0016684:	68 5c 01 00 00       	push   0x15c
c0016689:	e8 28 8f ff ff       	call   c000f5b6 <malloc>
c001668e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016691:	89 c3                	mov    ebx,eax
c0016693:	e8 e2 04 01 00       	call   c0026b7a <PIT::PIT()>
c0016698:	59                   	pop    ecx
c0016699:	5f                   	pop    edi
c001669a:	53                   	push   ebx
c001669b:	ff 35 48 ed 02 c0    	push   DWORD PTR ds:0xc002ed48
c00166a1:	e8 42 d3 ff ff       	call   c00139e8 <Device::addChild(Device*)>
c00166a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166a8:	6a 00                	push   0x0
c00166aa:	6a 00                	push   0x0
c00166ac:	56                   	push   esi
c00166ad:	53                   	push   ebx
c00166ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00166b1:	83 c4 14             	add    esp,0x14
c00166b4:	68 60 01 00 00       	push   0x160
c00166b9:	e8 f8 8e ff ff       	call   c000f5b6 <malloc>
c00166be:	89 04 24             	mov    DWORD PTR [esp],eax
c00166c1:	89 c7                	mov    edi,eax
c00166c3:	e8 62 03 01 00       	call   c0026a2a <APICTimer::APICTimer()>
c00166c8:	6a 00                	push   0x0
c00166ca:	6a 00                	push   0x0
c00166cc:	56                   	push   esi
c00166cd:	57                   	push   edi
c00166ce:	e8 59 02 01 00       	call   c002692c <APICTimer::open(int, int, void*)>
c00166d3:	83 c4 20             	add    esp,0x20
c00166d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166d8:	6a 00                	push   0x0
c00166da:	6a 00                	push   0x0
c00166dc:	6a 00                	push   0x0
c00166de:	53                   	push   ebx
c00166df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00166e2:	58                   	pop    eax
c00166e3:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c00166e8:	5a                   	pop    edx
c00166e9:	57                   	push   edi
c00166ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00166f0:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00166f6:	e8 ed d2 ff ff       	call   c00139e8 <Device::addChild(Device*)>
c00166fb:	83 c4 10             	add    esp,0x10
c00166fe:	eb 33                	jmp    c0016733 <setupTimer(int)+0xec>
c0016700:	83 ec 0c             	sub    esp,0xc
c0016703:	68 5c 01 00 00       	push   0x15c
c0016708:	e8 a9 8e ff ff       	call   c000f5b6 <malloc>
c001670d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016710:	89 c3                	mov    ebx,eax
c0016712:	e8 63 04 01 00       	call   c0026b7a <PIT::PIT()>
c0016717:	58                   	pop    eax
c0016718:	5a                   	pop    edx
c0016719:	53                   	push   ebx
c001671a:	ff 35 48 ed 02 c0    	push   DWORD PTR ds:0xc002ed48
c0016720:	e8 c3 d2 ff ff       	call   c00139e8 <Device::addChild(Device*)>
c0016725:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016727:	6a 00                	push   0x0
c0016729:	6a 00                	push   0x0
c001672b:	56                   	push   esi
c001672c:	53                   	push   ebx
c001672d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016730:	83 c4 20             	add    esp,0x20
c0016733:	89 d8                	mov    eax,ebx
c0016735:	5b                   	pop    ebx
c0016736:	5e                   	pop    esi
c0016737:	5f                   	pop    edi
c0016738:	c3                   	ret    
c0016739:	90                   	nop

c001673a <VCache::VCache(PhysicalDisk*)>:
c001673a:	53                   	push   ebx
c001673b:	83 ec 18             	sub    esp,0x18
c001673e:	ba 64 b9 02 c0       	mov    edx,0xc002b964
c0016743:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016747:	89 10                	mov    DWORD PTR [eax],edx
c0016749:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001674d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016758:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001675f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016763:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001676a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016771:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016775:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001677c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016783:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016787:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001678e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016792:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001679a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00167a1:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00167a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ac:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00167b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b4:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00167b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167bc:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00167c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167c4:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00167cb:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00167d3:	83 ec 0c             	sub    esp,0xc
c00167d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167da:	e8 d7 8d ff ff       	call   c000f5b6 <malloc>
c00167df:	83 c4 10             	add    esp,0x10
c00167e2:	89 c3                	mov    ebx,eax
c00167e4:	83 ec 0c             	sub    esp,0xc
c00167e7:	53                   	push   ebx
c00167e8:	e8 f3 73 00 00       	call   c001dbe0 <Mutex::Mutex()>
c00167ed:	83 c4 10             	add    esp,0x10
c00167f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167f4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00167f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00167ff:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016802:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016806:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001680d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016811:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016817:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001681b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001681e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016822:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016828:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001682e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016832:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016835:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016838:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001683c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016840:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016844:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001684a:	05 00 01 00 00       	add    eax,0x100
c001684f:	c1 e0 04             	shl    eax,0x4
c0016852:	83 ec 0c             	sub    esp,0xc
c0016855:	50                   	push   eax
c0016856:	e8 5b 8d ff ff       	call   c000f5b6 <malloc>
c001685b:	83 c4 10             	add    esp,0x10
c001685e:	89 c2                	mov    edx,eax
c0016860:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016864:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001686b:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016876:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001687a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001687e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016884:	c1 e0 07             	shl    eax,0x7
c0016887:	83 ec 0c             	sub    esp,0xc
c001688a:	50                   	push   eax
c001688b:	e8 26 8d ff ff       	call   c000f5b6 <malloc>
c0016890:	83 c4 10             	add    esp,0x10
c0016893:	89 c2                	mov    edx,eax
c0016895:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016899:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001689c:	90                   	nop
c001689d:	83 c4 18             	add    esp,0x18
c00168a0:	5b                   	pop    ebx
c00168a1:	c3                   	ret    

c00168a2 <VCache::invalidateReadBuffer()>:
c00168a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168a6:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00168ac:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00168b0:	c3                   	ret    
c00168b1:	90                   	nop

c00168b2 <VCache::writeWriteBuffer()>:
c00168b2:	53                   	push   ebx
c00168b3:	83 ec 14             	sub    esp,0x14
c00168b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00168ba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00168bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00168bf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00168c2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00168c5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00168c8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00168cb:	50                   	push   eax
c00168cc:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00168cf:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00168d6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00168dd:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00168e1:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00168e8:	83 c4 28             	add    esp,0x28
c00168eb:	5b                   	pop    ebx
c00168ec:	c3                   	ret    
c00168ed:	90                   	nop

c00168ee <VCache::~VCache()>:
c00168ee:	83 ec 0c             	sub    esp,0xc
c00168f1:	ba 64 b9 02 c0       	mov    edx,0xc002b964
c00168f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168fa:	89 10                	mov    DWORD PTR [eax],edx
c00168fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016900:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016903:	84 c0                	test   al,al
c0016905:	74 0f                	je     c0016916 <VCache::~VCache()+0x28>
c0016907:	83 ec 0c             	sub    esp,0xc
c001690a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001690e:	e8 9f ff ff ff       	call   c00168b2 <VCache::writeWriteBuffer()>
c0016913:	83 c4 10             	add    esp,0x10
c0016916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001691a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001691d:	83 ec 0c             	sub    esp,0xc
c0016920:	50                   	push   eax
c0016921:	e8 a0 8c ff ff       	call   c000f5c6 <free>
c0016926:	83 c4 10             	add    esp,0x10
c0016929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001692d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016930:	83 ec 0c             	sub    esp,0xc
c0016933:	50                   	push   eax
c0016934:	e8 8d 8c ff ff       	call   c000f5c6 <free>
c0016939:	83 c4 10             	add    esp,0x10
c001693c:	90                   	nop
c001693d:	83 c4 0c             	add    esp,0xc
c0016940:	c3                   	ret    
c0016941:	90                   	nop

c0016942 <VCache::~VCache()>:
c0016942:	83 ec 0c             	sub    esp,0xc
c0016945:	83 ec 0c             	sub    esp,0xc
c0016948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001694c:	e8 9d ff ff ff       	call   c00168ee <VCache::~VCache()>
c0016951:	83 c4 10             	add    esp,0x10
c0016954:	83 ec 08             	sub    esp,0x8
c0016957:	6a 44                	push   0x44
c0016959:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001695d:	e8 6d bb ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0016962:	83 c4 10             	add    esp,0x10
c0016965:	83 c4 0c             	add    esp,0xc
c0016968:	c3                   	ret    
c0016969:	90                   	nop

c001696a <VCache::write(unsigned long long, int, void*)>:
c001696a:	55                   	push   ebp
c001696b:	57                   	push   edi
c001696c:	56                   	push   esi
c001696d:	53                   	push   ebx
c001696e:	83 ec 18             	sub    esp,0x18
c0016971:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016975:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016979:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001697d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016980:	e8 e9 77 00 00       	call   c001e16e <Semaphore::acquire()>
c0016985:	83 c4 10             	add    esp,0x10
c0016988:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001698c:	74 0c                	je     c001699a <VCache::write(unsigned long long, int, void*)+0x30>
c001698e:	83 ec 0c             	sub    esp,0xc
c0016991:	53                   	push   ebx
c0016992:	e8 0b ff ff ff       	call   c00168a2 <VCache::invalidateReadBuffer()>
c0016997:	83 c4 10             	add    esp,0x10
c001699a:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001699e:	74 5c                	je     c00169fc <VCache::write(unsigned long long, int, void*)+0x92>
c00169a0:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c00169a3:	89 e8                	mov    eax,ebp
c00169a5:	99                   	cdq    
c00169a6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00169a9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00169ac:	89 c1                	mov    ecx,eax
c00169ae:	89 d0                	mov    eax,edx
c00169b0:	31 f1                	xor    ecx,esi
c00169b2:	31 f8                	xor    eax,edi
c00169b4:	09 c1                	or     ecx,eax
c00169b6:	75 38                	jne    c00169f0 <VCache::write(unsigned long long, int, void*)+0x86>
c00169b8:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00169bd:	75 31                	jne    c00169f0 <VCache::write(unsigned long long, int, void*)+0x86>
c00169bf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169c2:	89 ef                	mov    edi,ebp
c00169c4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00169ca:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00169ce:	0f af f9             	imul   edi,ecx
c00169d1:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c00169d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169d6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00169d9:	40                   	inc    eax
c00169da:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00169dd:	83 c0 80             	add    eax,0xffffff80
c00169e0:	75 5c                	jne    c0016a3e <VCache::write(unsigned long long, int, void*)+0xd4>
c00169e2:	83 ec 0c             	sub    esp,0xc
c00169e5:	53                   	push   ebx
c00169e6:	e8 c7 fe ff ff       	call   c00168b2 <VCache::writeWriteBuffer()>
c00169eb:	83 c4 10             	add    esp,0x10
c00169ee:	eb 4e                	jmp    c0016a3e <VCache::write(unsigned long long, int, void*)+0xd4>
c00169f0:	83 ec 0c             	sub    esp,0xc
c00169f3:	53                   	push   ebx
c00169f4:	e8 b9 fe ff ff       	call   c00168b2 <VCache::writeWriteBuffer()>
c00169f9:	83 c4 10             	add    esp,0x10
c00169fc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169ff:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016a04:	7f 22                	jg     c0016a28 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016a06:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016a09:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016a0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016a10:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016a14:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016a17:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016a1a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016a20:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a24:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a26:	eb 16                	jmp    c0016a3e <VCache::write(unsigned long long, int, void*)+0xd4>
c0016a28:	83 ec 0c             	sub    esp,0xc
c0016a2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016a31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016a35:	57                   	push   edi
c0016a36:	56                   	push   esi
c0016a37:	50                   	push   eax
c0016a38:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016a3b:	83 c4 20             	add    esp,0x20
c0016a3e:	83 ec 0c             	sub    esp,0xc
c0016a41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a44:	e8 5f 7e 00 00       	call   c001e8a8 <Semaphore::release()>
c0016a49:	83 c4 1c             	add    esp,0x1c
c0016a4c:	31 c0                	xor    eax,eax
c0016a4e:	5b                   	pop    ebx
c0016a4f:	5e                   	pop    esi
c0016a50:	5f                   	pop    edi
c0016a51:	5d                   	pop    ebp
c0016a52:	c3                   	ret    
c0016a53:	90                   	nop

c0016a54 <VCache::read(unsigned long long, int, void*)>:
c0016a54:	55                   	push   ebp
c0016a55:	57                   	push   edi
c0016a56:	56                   	push   esi
c0016a57:	53                   	push   ebx
c0016a58:	83 ec 28             	sub    esp,0x28
c0016a5b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016a5f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016a63:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016a67:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016a6b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a6e:	e8 fb 76 00 00       	call   c001e16e <Semaphore::acquire()>
c0016a73:	83 c4 10             	add    esp,0x10
c0016a76:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a7a:	74 0c                	je     c0016a88 <VCache::read(unsigned long long, int, void*)+0x34>
c0016a7c:	83 ec 0c             	sub    esp,0xc
c0016a7f:	53                   	push   ebx
c0016a80:	e8 2d fe ff ff       	call   c00168b2 <VCache::writeWriteBuffer()>
c0016a85:	83 c4 10             	add    esp,0x10
c0016a88:	83 fd 01             	cmp    ebp,0x1
c0016a8b:	0f 85 80 00 00 00    	jne    c0016b11 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016a91:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016a98:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016a9f:	75 70                	jne    c0016b11 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016aa1:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016aa4:	89 e9                	mov    ecx,ebp
c0016aa6:	f7 d9                	neg    ecx
c0016aa8:	89 c8                	mov    eax,ecx
c0016aaa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016aae:	c1 f8 1f             	sar    eax,0x1f
c0016ab1:	21 f1                	and    ecx,esi
c0016ab3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ab7:	89 c8                	mov    eax,ecx
c0016ab9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016abd:	21 f9                	and    ecx,edi
c0016abf:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016ac3:	89 ca                	mov    edx,ecx
c0016ac5:	74 0a                	je     c0016ad1 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016ac7:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016aca:	75 05                	jne    c0016ad1 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016acc:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016acf:	74 23                	je     c0016af4 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016ad1:	83 ec 0c             	sub    esp,0xc
c0016ad4:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016ad8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016adc:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016adf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016ae2:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016ae4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016ae7:	55                   	push   ebp
c0016ae8:	52                   	push   edx
c0016ae9:	50                   	push   eax
c0016aea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016aee:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016af1:	83 c4 20             	add    esp,0x20
c0016af4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016af7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016afb:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016b01:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016b04:	48                   	dec    eax
c0016b05:	21 c6                	and    esi,eax
c0016b07:	0f af f1             	imul   esi,ecx
c0016b0a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016b0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b0f:	eb 1d                	jmp    c0016b2e <VCache::read(unsigned long long, int, void*)+0xda>
c0016b11:	83 ec 0c             	sub    esp,0xc
c0016b14:	53                   	push   ebx
c0016b15:	e8 88 fd ff ff       	call   c00168a2 <VCache::invalidateReadBuffer()>
c0016b1a:	5a                   	pop    edx
c0016b1b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016b24:	55                   	push   ebp
c0016b25:	57                   	push   edi
c0016b26:	56                   	push   esi
c0016b27:	50                   	push   eax
c0016b28:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016b2b:	83 c4 20             	add    esp,0x20
c0016b2e:	83 ec 0c             	sub    esp,0xc
c0016b31:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b34:	e8 6f 7d 00 00       	call   c001e8a8 <Semaphore::release()>
c0016b39:	83 c4 2c             	add    esp,0x2c
c0016b3c:	31 c0                	xor    eax,eax
c0016b3e:	5b                   	pop    ebx
c0016b3f:	5e                   	pop    esi
c0016b40:	5f                   	pop    edi
c0016b41:	5d                   	pop    ebp
c0016b42:	c3                   	ret    
c0016b43:	90                   	nop

c0016b44 <Video::putrect(int, int, int, int, unsigned int)>:
c0016b44:	55                   	push   ebp
c0016b45:	57                   	push   edi
c0016b46:	56                   	push   esi
c0016b47:	53                   	push   ebx
c0016b48:	83 ec 1c             	sub    esp,0x1c
c0016b4b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016b4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b53:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016b57:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016b5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b63:	01 df                	add    edi,ebx
c0016b65:	39 fb                	cmp    ebx,edi
c0016b67:	7d 1f                	jge    c0016b88 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016b69:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016b6d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016b71:	7d 12                	jge    c0016b85 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016b73:	8b 16                	mov    edx,DWORD PTR [esi]
c0016b75:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016b79:	53                   	push   ebx
c0016b7a:	55                   	push   ebp
c0016b7b:	45                   	inc    ebp
c0016b7c:	56                   	push   esi
c0016b7d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016b80:	83 c4 10             	add    esp,0x10
c0016b83:	eb e8                	jmp    c0016b6d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016b85:	43                   	inc    ebx
c0016b86:	eb dd                	jmp    c0016b65 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016b88:	83 c4 1c             	add    esp,0x1c
c0016b8b:	5b                   	pop    ebx
c0016b8c:	5e                   	pop    esi
c0016b8d:	5f                   	pop    edi
c0016b8e:	5d                   	pop    ebp
c0016b8f:	c3                   	ret    

c0016b90 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016b90:	55                   	push   ebp
c0016b91:	57                   	push   edi
c0016b92:	31 ff                	xor    edi,edi
c0016b94:	56                   	push   esi
c0016b95:	53                   	push   ebx
c0016b96:	83 ec 1c             	sub    esp,0x1c
c0016b99:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016b9d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ba1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016ba8:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016bad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bb1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016bb5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016bb9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016bbc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016bc0:	01 f9                	add    ecx,edi
c0016bc2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016bc6:	7d 2f                	jge    c0016bf7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016bc8:	31 f6                	xor    esi,esi
c0016bca:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016bce:	01 f2                	add    edx,esi
c0016bd0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016bd4:	7d 1a                	jge    c0016bf0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016bd6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016bd9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016bdc:	46                   	inc    esi
c0016bdd:	51                   	push   ecx
c0016bde:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016be2:	52                   	push   edx
c0016be3:	55                   	push   ebp
c0016be4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016be7:	83 c4 10             	add    esp,0x10
c0016bea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bee:	eb da                	jmp    c0016bca <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016bf0:	47                   	inc    edi
c0016bf1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016bf5:	eb c5                	jmp    c0016bbc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016bf7:	83 c4 1c             	add    esp,0x1c
c0016bfa:	5b                   	pop    ebx
c0016bfb:	5e                   	pop    esi
c0016bfc:	5f                   	pop    edi
c0016bfd:	5d                   	pop    ebp
c0016bfe:	c3                   	ret    
c0016bff:	90                   	nop

c0016c00 <Video::blit(unsigned int*, int, int, int, int)>:
c0016c00:	55                   	push   ebp
c0016c01:	57                   	push   edi
c0016c02:	56                   	push   esi
c0016c03:	53                   	push   ebx
c0016c04:	83 ec 1c             	sub    esp,0x1c
c0016c07:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c0f:	85 c0                	test   eax,eax
c0016c11:	79 02                	jns    c0016c15 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016c13:	31 c0                	xor    eax,eax
c0016c15:	c1 e0 02             	shl    eax,0x2
c0016c18:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016c1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c20:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016c24:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016c28:	39 d8                	cmp    eax,ebx
c0016c2a:	7e 49                	jle    c0016c75 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016c2c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016c32:	7c 41                	jl     c0016c75 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016c34:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016c38:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c3c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016c40:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016c44:	39 f9                	cmp    ecx,edi
c0016c46:	7e 22                	jle    c0016c6a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016c48:	83 c5 04             	add    ebp,0x4
c0016c4b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016c51:	7c 14                	jl     c0016c67 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016c53:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016c55:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016c58:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c60:	56                   	push   esi
c0016c61:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016c64:	83 c4 10             	add    esp,0x10
c0016c67:	47                   	inc    edi
c0016c68:	eb d2                	jmp    c0016c3c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c6e:	43                   	inc    ebx
c0016c6f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016c73:	eb ab                	jmp    c0016c20 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016c75:	83 c4 1c             	add    esp,0x1c
c0016c78:	5b                   	pop    ebx
c0016c79:	5e                   	pop    esi
c0016c7a:	5f                   	pop    edi
c0016c7b:	5d                   	pop    ebp
c0016c7c:	c3                   	ret    
c0016c7d:	90                   	nop

c0016c7e <Video::clearScreen(unsigned int)>:
c0016c7e:	57                   	push   edi
c0016c7f:	56                   	push   esi
c0016c80:	53                   	push   ebx
c0016c81:	31 db                	xor    ebx,ebx
c0016c83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016c87:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016c8d:	7e 1f                	jle    c0016cae <Video::clearScreen(unsigned int)+0x30>
c0016c8f:	31 ff                	xor    edi,edi
c0016c91:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016c97:	7e 12                	jle    c0016cab <Video::clearScreen(unsigned int)+0x2d>
c0016c99:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016c9f:	53                   	push   ebx
c0016ca0:	57                   	push   edi
c0016ca1:	47                   	inc    edi
c0016ca2:	56                   	push   esi
c0016ca3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ca6:	83 c4 10             	add    esp,0x10
c0016ca9:	eb e6                	jmp    c0016c91 <Video::clearScreen(unsigned int)+0x13>
c0016cab:	43                   	inc    ebx
c0016cac:	eb d9                	jmp    c0016c87 <Video::clearScreen(unsigned int)+0x9>
c0016cae:	5b                   	pop    ebx
c0016caf:	5e                   	pop    esi
c0016cb0:	5f                   	pop    edi
c0016cb1:	c3                   	ret    

c0016cb2 <Video::putpixel(int, int, unsigned int)>:
c0016cb2:	c7 44 24 04 6c b9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b96c
c0016cba:	e9 be 33 00 00       	jmp    c001a07d <Krnl::panic(char const*)>
c0016cbf:	90                   	nop

c0016cc0 <Video::Video(char const*)>:
c0016cc0:	83 ec 0c             	sub    esp,0xc
c0016cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc7:	83 ec 08             	sub    esp,0x8
c0016cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cce:	50                   	push   eax
c0016ccf:	e8 18 cf ff ff       	call   c0013bec <Device::Device(char const*)>
c0016cd4:	83 c4 10             	add    esp,0x10
c0016cd7:	ba f0 b9 02 c0       	mov    edx,0xc002b9f0
c0016cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce0:	89 10                	mov    DWORD PTR [eax],edx
c0016ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016cf0:	90                   	nop
c0016cf1:	83 c4 0c             	add    esp,0xc
c0016cf4:	c3                   	ret    
c0016cf5:	90                   	nop

c0016cf6 <Video::~Video()>:
c0016cf6:	83 ec 0c             	sub    esp,0xc
c0016cf9:	ba f0 b9 02 c0       	mov    edx,0xc002b9f0
c0016cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d02:	89 10                	mov    DWORD PTR [eax],edx
c0016d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d08:	83 ec 0c             	sub    esp,0xc
c0016d0b:	50                   	push   eax
c0016d0c:	e8 a5 cb ff ff       	call   c00138b6 <Device::~Device()>
c0016d11:	83 c4 10             	add    esp,0x10
c0016d14:	90                   	nop
c0016d15:	83 c4 0c             	add    esp,0xc
c0016d18:	c3                   	ret    
c0016d19:	90                   	nop

c0016d1a <Video::~Video()>:
c0016d1a:	83 ec 0c             	sub    esp,0xc
c0016d1d:	83 ec 0c             	sub    esp,0xc
c0016d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d24:	e8 cd ff ff ff       	call   c0016cf6 <Video::~Video()>
c0016d29:	83 c4 10             	add    esp,0x10
c0016d2c:	83 ec 08             	sub    esp,0x8
c0016d2f:	68 64 01 00 00       	push   0x164
c0016d34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d38:	e8 92 b7 ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0016d3d:	83 c4 10             	add    esp,0x10
c0016d40:	83 c4 0c             	add    esp,0xc
c0016d43:	c3                   	ret    

c0016d44 <Video::isMonochrome()>:
c0016d44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d48:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016d4e:	c3                   	ret    
c0016d4f:	90                   	nop

c0016d50 <Video::getWidth()>:
c0016d50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d54:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d5a:	c3                   	ret    
c0016d5b:	90                   	nop

c0016d5c <Video::getHeight()>:
c0016d5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d60:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016d66:	c3                   	ret    
c0016d67:	90                   	nop

c0016d68 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016d68:	55                   	push   ebp
c0016d69:	57                   	push   edi
c0016d6a:	56                   	push   esi
c0016d6b:	53                   	push   ebx
c0016d6c:	83 ec 2c             	sub    esp,0x2c
c0016d6f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d73:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d77:	83 f8 01             	cmp    eax,0x1
c0016d7a:	19 c9                	sbb    ecx,ecx
c0016d7c:	31 db                	xor    ebx,ebx
c0016d7e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016d82:	89 cd                	mov    ebp,ecx
c0016d84:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016d8c:	f7 d5                	not    ebp
c0016d8e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016d94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016d98:	01 d8                	add    eax,ebx
c0016d9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d9e:	56                   	push   esi
c0016d9f:	e8 b8 ff ff ff       	call   c0016d5c <Video::getHeight()>
c0016da4:	59                   	pop    ecx
c0016da5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016da9:	7e 70                	jle    c0016e1b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016dab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016daf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016db3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016db6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016dbe:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016dc5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016dc9:	89 f8                	mov    eax,edi
c0016dcb:	83 c0 20             	add    eax,0x20
c0016dce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016dd2:	56                   	push   esi
c0016dd3:	e8 78 ff ff ff       	call   c0016d50 <Video::getWidth()>
c0016dd8:	5a                   	pop    edx
c0016dd9:	39 c7                	cmp    edi,eax
c0016ddb:	7d 34                	jge    c0016e11 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016ddd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016de2:	74 05                	je     c0016de9 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016de4:	8b 06                	mov    eax,DWORD PTR [esi]
c0016de6:	55                   	push   ebp
c0016de7:	eb 0d                	jmp    c0016df6 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016de9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016dee:	74 12                	je     c0016e02 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016df0:	8b 06                	mov    eax,DWORD PTR [esi]
c0016df2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016df6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016dfa:	57                   	push   edi
c0016dfb:	56                   	push   esi
c0016dfc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016dff:	83 c4 10             	add    esp,0x10
c0016e02:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016e06:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016e0a:	47                   	inc    edi
c0016e0b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016e0f:	75 c1                	jne    c0016dd2 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016e11:	43                   	inc    ebx
c0016e12:	83 fb 20             	cmp    ebx,0x20
c0016e15:	0f 85 79 ff ff ff    	jne    c0016d94 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016e1b:	83 c4 2c             	add    esp,0x2c
c0016e1e:	5b                   	pop    ebx
c0016e1f:	5e                   	pop    esi
c0016e20:	5f                   	pop    edi
c0016e21:	5d                   	pop    ebp
c0016e22:	c3                   	ret    
c0016e23:	90                   	nop

c0016e24 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016e24:	55                   	push   ebp
c0016e25:	57                   	push   edi
c0016e26:	56                   	push   esi
c0016e27:	53                   	push   ebx
c0016e28:	83 ec 28             	sub    esp,0x28
c0016e2b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016e2f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016e33:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016e37:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016e3b:	c1 e7 08             	shl    edi,0x8
c0016e3e:	01 c7                	add    edi,eax
c0016e40:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016e44:	c1 e0 08             	shl    eax,0x8
c0016e47:	01 d0                	add    eax,edx
c0016e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e51:	0f af c7             	imul   eax,edi
c0016e54:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016e5b:	50                   	push   eax
c0016e5c:	e8 55 87 ff ff       	call   c000f5b6 <malloc>
c0016e61:	83 c4 10             	add    esp,0x10
c0016e64:	89 c5                	mov    ebp,eax
c0016e66:	85 c0                	test   eax,eax
c0016e68:	75 15                	jne    c0016e7f <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016e6a:	83 ec 0c             	sub    esp,0xc
c0016e6d:	68 8d b9 02 c0       	push   0xc002b98d
c0016e72:	e8 38 b7 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0016e77:	83 c4 10             	add    esp,0x10
c0016e7a:	e9 1c 01 00 00       	jmp    c0016f9b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016e7f:	be 12 00 00 00       	mov    esi,0x12
c0016e84:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016e88:	74 11                	je     c0016e9b <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016e8a:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016e8e:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016e92:	c1 fe 03             	sar    esi,0x3
c0016e95:	0f af f0             	imul   esi,eax
c0016e98:	83 c6 12             	add    esi,0x12
c0016e9b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016e9f:	74 04                	je     c0016ea5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016ea1:	85 ff                	test   edi,edi
c0016ea3:	75 12                	jne    c0016eb7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016ea5:	83 ec 0c             	sub    esp,0xc
c0016ea8:	68 a4 b9 02 c0       	push   0xc002b9a4
c0016ead:	e8 fd b6 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0016eb2:	e9 ce 00 00 00       	jmp    c0016f85 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016eb7:	52                   	push   edx
c0016eb8:	52                   	push   edx
c0016eb9:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016ebd:	50                   	push   eax
c0016ebe:	68 b9 b9 02 c0       	push   0xc002b9b9
c0016ec3:	e8 e7 b6 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0016ec8:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016ecc:	83 c4 10             	add    esp,0x10
c0016ecf:	80 fa 02             	cmp    dl,0x2
c0016ed2:	0f 85 98 00 00 00    	jne    c0016f70 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016ed8:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016edd:	75 10                	jne    c0016eef <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016edf:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016ee3:	75 0a                	jne    c0016eef <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016ee5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016ee8:	83 e8 18             	sub    eax,0x18
c0016eeb:	a8 f7                	test   al,0xf7
c0016eed:	74 0a                	je     c0016ef9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016eef:	83 ec 0c             	sub    esp,0xc
c0016ef2:	68 c6 b9 02 c0       	push   0xc002b9c6
c0016ef7:	eb 7f                	jmp    c0016f78 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016ef9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016f01:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016f09:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016f0d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016f15:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016f19:	75 0c                	jne    c0016f27 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016f1b:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016f20:	c1 e0 18             	shl    eax,0x18
c0016f23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f27:	41                   	inc    ecx
c0016f28:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016f2d:	c1 e2 10             	shl    edx,0x10
c0016f30:	89 d0                	mov    eax,edx
c0016f32:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016f37:	c1 e2 08             	shl    edx,0x8
c0016f3a:	09 c2                	or     edx,eax
c0016f3c:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016f40:	09 c2                	or     edx,eax
c0016f42:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016f46:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016f4a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016f4e:	c1 f8 03             	sar    eax,0x3
c0016f51:	01 c6                	add    esi,eax
c0016f53:	89 c8                	mov    eax,ecx
c0016f55:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016f59:	39 c7                	cmp    edi,eax
c0016f5b:	7f b0                	jg     c0016f0d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016f5d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016f61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f65:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016f68:	7e 22                	jle    c0016f8c <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016f6a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016f6e:	eb 99                	jmp    c0016f09 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016f70:	50                   	push   eax
c0016f71:	50                   	push   eax
c0016f72:	52                   	push   edx
c0016f73:	68 d4 b9 02 c0       	push   0xc002b9d4
c0016f78:	e8 32 b6 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0016f7d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016f80:	e8 41 86 ff ff       	call   c000f5c6 <free>
c0016f85:	83 c4 10             	add    esp,0x10
c0016f88:	31 ed                	xor    ebp,ebp
c0016f8a:	eb 0f                	jmp    c0016f9b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016f8c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f90:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016f93:	89 38                	mov    DWORD PTR [eax],edi
c0016f95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f99:	89 08                	mov    DWORD PTR [eax],ecx
c0016f9b:	83 c4 1c             	add    esp,0x1c
c0016f9e:	89 e8                	mov    eax,ebp
c0016fa0:	5b                   	pop    ebx
c0016fa1:	5e                   	pop    esi
c0016fa2:	5f                   	pop    edi
c0016fa3:	5d                   	pop    ebp
c0016fa4:	c3                   	ret    
c0016fa5:	90                   	nop

c0016fa6 <Video::putTGA(int, int, unsigned char*, int)>:
c0016fa6:	55                   	push   ebp
c0016fa7:	57                   	push   edi
c0016fa8:	56                   	push   esi
c0016fa9:	53                   	push   ebx
c0016faa:	83 ec 28             	sub    esp,0x28
c0016fad:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016fb1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fb5:	50                   	push   eax
c0016fb6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fba:	50                   	push   eax
c0016fbb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016fbf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016fc3:	56                   	push   esi
c0016fc4:	e8 5b fe ff ff       	call   c0016e24 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016fc9:	83 c4 20             	add    esp,0x20
c0016fcc:	85 c0                	test   eax,eax
c0016fce:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016fd2:	74 35                	je     c0017009 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016fd4:	89 c7                	mov    edi,eax
c0016fd6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fda:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016fde:	39 d8                	cmp    eax,ebx
c0016fe0:	7e 27                	jle    c0017009 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016fe2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fe6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fea:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016fee:	39 e8                	cmp    eax,ebp
c0016ff0:	7e 14                	jle    c0017006 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016ff2:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ff4:	83 c7 04             	add    edi,0x4
c0016ff7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016ffa:	53                   	push   ebx
c0016ffb:	55                   	push   ebp
c0016ffc:	45                   	inc    ebp
c0016ffd:	56                   	push   esi
c0016ffe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017001:	83 c4 10             	add    esp,0x10
c0017004:	eb e0                	jmp    c0016fe6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017006:	43                   	inc    ebx
c0017007:	eb cd                	jmp    c0016fd6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017009:	83 c4 1c             	add    esp,0x1c
c001700c:	5b                   	pop    ebx
c001700d:	5e                   	pop    esi
c001700e:	5f                   	pop    edi
c001700f:	5d                   	pop    ebp
c0017010:	c3                   	ret    
c0017011:	90                   	nop

c0017012 <ACPI::close(int, int, void*)>:
c0017012:	83 ec 1c             	sub    esp,0x1c
c0017015:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001701d:	74 0a                	je     c0017029 <ACPI::close(int, int, void*)+0x17>
c001701f:	b8 00 00 00 00       	mov    eax,0x0
c0017024:	e9 8a 00 00 00       	jmp    c00170b3 <ACPI::close(int, int, void*)+0xa1>
c0017029:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001702e:	75 27                	jne    c0017057 <ACPI::close(int, int, void*)+0x45>
c0017030:	a1 e8 13 03 c0       	mov    eax,ds:0xc00313e8
c0017035:	85 c0                	test   eax,eax
c0017037:	74 07                	je     c0017040 <ACPI::close(int, int, void*)+0x2e>
c0017039:	a1 e8 13 03 c0       	mov    eax,ds:0xc00313e8
c001703e:	ff d0                	call   eax
c0017040:	83 ec 0c             	sub    esp,0xc
c0017043:	68 30 ba 02 c0       	push   0xc002ba30
c0017048:	e8 30 30 00 00       	call   c001a07d <Krnl::panic(char const*)>
c001704d:	83 c4 10             	add    esp,0x10
c0017050:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017055:	eb 5c                	jmp    c00170b3 <ACPI::close(int, int, void*)+0xa1>
c0017057:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001705c:	75 50                	jne    c00170ae <ACPI::close(int, int, void*)+0x9c>
c001705e:	a1 e4 13 03 c0       	mov    eax,ds:0xc00313e4
c0017063:	85 c0                	test   eax,eax
c0017065:	74 07                	je     c001706e <ACPI::close(int, int, void*)+0x5c>
c0017067:	a1 e4 13 03 c0       	mov    eax,ds:0xc00313e4
c001706c:	ff d0                	call   eax
c001706e:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017073:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017078:	83 e0 02             	and    eax,0x2
c001707b:	74 1c                	je     c0017099 <ACPI::close(int, int, void*)+0x87>
c001707d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017084:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017088:	89 c2                	mov    edx,eax
c001708a:	ec                   	in     al,dx
c001708b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001708f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017093:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017097:	eb da                	jmp    c0017073 <ACPI::close(int, int, void*)+0x61>
c0017099:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00170a0:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00170a5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00170a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170ad:	ee                   	out    dx,al
c00170ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00170b3:	83 c4 1c             	add    esp,0x1c
c00170b6:	c3                   	ret    

c00170b7 <findRSDP()>:
c00170b7:	83 ec 1c             	sub    esp,0x1c
c00170ba:	83 ec 0c             	sub    esp,0xc
c00170bd:	68 37 bb 02 c0       	push   0xc002bb37
c00170c2:	e8 e8 b4 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00170c7:	83 c4 10             	add    esp,0x10
c00170ca:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c00170cf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00170d5:	83 e0 04             	and    eax,0x4
c00170d8:	84 c0                	test   al,al
c00170da:	75 07                	jne    c00170e3 <findRSDP()+0x2c>
c00170dc:	b8 00 00 00 00       	mov    eax,0x0
c00170e1:	eb 6a                	jmp    c001714d <findRSDP()+0x96>
c00170e3:	a1 94 ed 02 c0       	mov    eax,ds:0xc002ed94
c00170e8:	3d ff 07 00 00       	cmp    eax,0x7ff
c00170ed:	7f 1b                	jg     c001710a <findRSDP()+0x53>
c00170ef:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c00170f4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00170fa:	83 e2 fb             	and    edx,0xfffffffb
c00170fd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017103:	b8 00 00 00 00       	mov    eax,0x0
c0017108:	eb 43                	jmp    c001714d <findRSDP()+0x96>
c001710a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017112:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001711a:	77 2c                	ja     c0017148 <findRSDP()+0x91>
c001711c:	83 ec 04             	sub    esp,0x4
c001711f:	6a 08                	push   0x8
c0017121:	68 45 bb 02 c0       	push   0xc002bb45
c0017126:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001712a:	e8 1d 95 fe ff       	call   c000064c <memcmp>
c001712f:	83 c4 10             	add    esp,0x10
c0017132:	85 c0                	test   eax,eax
c0017134:	0f 94 c0             	sete   al
c0017137:	84 c0                	test   al,al
c0017139:	74 06                	je     c0017141 <findRSDP()+0x8a>
c001713b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001713f:	eb 0c                	jmp    c001714d <findRSDP()+0x96>
c0017141:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017146:	eb ca                	jmp    c0017112 <findRSDP()+0x5b>
c0017148:	b8 00 00 00 00       	mov    eax,0x0
c001714d:	83 c4 1c             	add    esp,0x1c
c0017150:	c3                   	ret    

c0017151 <loadACPITables(unsigned char*)>:
c0017151:	57                   	push   edi
c0017152:	56                   	push   esi
c0017153:	53                   	push   ebx
c0017154:	83 ec 60             	sub    esp,0x60
c0017157:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c001715c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017162:	83 e0 04             	and    eax,0x4
c0017165:	84 c0                	test   al,al
c0017167:	0f 84 33 02 00 00    	je     c00173a0 <loadACPITables(unsigned char*)+0x24f>
c001716d:	a0 00 16 03 c0       	mov    al,ds:0xc0031600
c0017172:	84 c0                	test   al,al
c0017174:	74 75                	je     c00171eb <loadACPITables(unsigned char*)+0x9a>
c0017176:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001717a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001717e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017185:	83 e8 24             	sub    eax,0x24
c0017188:	c1 e8 03             	shr    eax,0x3
c001718b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001718f:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017197:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001719b:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001719f:	0f 8d b2 00 00 00    	jge    c0017257 <loadACPITables(unsigned char*)+0x106>
c00171a5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00171a9:	83 c0 24             	add    eax,0x24
c00171ac:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00171b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00171b4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00171b8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00171bc:	c1 e0 03             	shl    eax,0x3
c00171bf:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00171c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00171c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00171ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00171cc:	89 c1                	mov    ecx,eax
c00171ce:	a1 ec 13 03 c0       	mov    eax,ds:0xc00313ec
c00171d3:	8d 50 01             	lea    edx,[eax+0x1]
c00171d6:	89 15 ec 13 03 c0    	mov    DWORD PTR ds:0xc00313ec,edx
c00171dc:	89 ca                	mov    edx,ecx
c00171de:	89 14 c5 04 14 03 c0 	mov    DWORD PTR [eax*8-0x3ffcebfc],edx
c00171e5:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00171e9:	eb ac                	jmp    c0017197 <loadACPITables(unsigned char*)+0x46>
c00171eb:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00171ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00171f3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00171f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00171fa:	83 e8 24             	sub    eax,0x24
c00171fd:	c1 e8 02             	shr    eax,0x2
c0017200:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017204:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001720c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017210:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017214:	7d 41                	jge    c0017257 <loadACPITables(unsigned char*)+0x106>
c0017216:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001721a:	83 c0 24             	add    eax,0x24
c001721d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017221:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017225:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017229:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001722d:	c1 e0 02             	shl    eax,0x2
c0017230:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017234:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017238:	8b 08                	mov    ecx,DWORD PTR [eax]
c001723a:	a1 ec 13 03 c0       	mov    eax,ds:0xc00313ec
c001723f:	8d 50 01             	lea    edx,[eax+0x1]
c0017242:	89 15 ec 13 03 c0    	mov    DWORD PTR ds:0xc00313ec,edx
c0017248:	89 ca                	mov    edx,ecx
c001724a:	89 14 c5 04 14 03 c0 	mov    DWORD PTR [eax*8-0x3ffcebfc],edx
c0017251:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017255:	eb b5                	jmp    c001720c <loadACPITables(unsigned char*)+0xbb>
c0017257:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001725f:	a1 ec 13 03 c0       	mov    eax,ds:0xc00313ec
c0017264:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017268:	0f 8d 33 01 00 00    	jge    c00173a1 <loadACPITables(unsigned char*)+0x250>
c001726e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017272:	8b 04 c5 04 14 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcebfc]
c0017279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001727d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017281:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017285:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017289:	25 ff 0f 00 00       	and    eax,0xfff
c001728e:	89 c6                	mov    esi,eax
c0017290:	8b 1d b0 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eeb0
c0017296:	83 ec 0c             	sub    esp,0xc
c0017299:	6a 01                	push   0x1
c001729b:	e8 09 9f ff ff       	call   c00111a9 <Virt::allocateKernelVirtualPages(int)>
c00172a0:	83 c4 10             	add    esp,0x10
c00172a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00172a7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00172ad:	83 ec 0c             	sub    esp,0xc
c00172b0:	6a 01                	push   0x1
c00172b2:	6a 01                	push   0x1
c00172b4:	50                   	push   eax
c00172b5:	52                   	push   edx
c00172b6:	53                   	push   ebx
c00172b7:	e8 1a aa ff ff       	call   c0011cd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00172bc:	83 c4 20             	add    esp,0x20
c00172bf:	09 f0                	or     eax,esi
c00172c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172c5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00172c9:	c1 e0 03             	shl    eax,0x3
c00172cc:	05 00 14 03 c0       	add    eax,0xc0031400
c00172d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00172d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172dd:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00172e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00172e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00172ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00172f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00172f5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00172f9:	89 c6                	mov    esi,eax
c00172fb:	89 d7                	mov    edi,edx
c00172fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172ff:	89 c8                	mov    eax,ecx
c0017301:	89 fa                	mov    edx,edi
c0017303:	89 f3                	mov    ebx,esi
c0017305:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017309:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001730d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017311:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017315:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017318:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001731c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017320:	05 00 10 00 00       	add    eax,0x1000
c0017325:	c1 e8 0c             	shr    eax,0xc
c0017328:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001732c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017330:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017334:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017338:	25 ff 0f 00 00       	and    eax,0xfff
c001733d:	89 c6                	mov    esi,eax
c001733f:	8b 1d b0 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eeb0
c0017345:	83 ec 0c             	sub    esp,0xc
c0017348:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001734c:	e8 58 9e ff ff       	call   c00111a9 <Virt::allocateKernelVirtualPages(int)>
c0017351:	83 c4 10             	add    esp,0x10
c0017354:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017358:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001735e:	83 ec 0c             	sub    esp,0xc
c0017361:	6a 01                	push   0x1
c0017363:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017367:	50                   	push   eax
c0017368:	52                   	push   edx
c0017369:	53                   	push   ebx
c001736a:	e8 67 a9 ff ff       	call   c0011cd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001736f:	83 c4 20             	add    esp,0x20
c0017372:	09 f0                	or     eax,esi
c0017374:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001737c:	83 ec 0c             	sub    esp,0xc
c001737f:	50                   	push   eax
c0017380:	e8 e4 a2 ff ff       	call   c0011669 <Virt::freeKernelVirtualPages(unsigned long)>
c0017385:	83 c4 10             	add    esp,0x10
c0017388:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001738c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017390:	89 14 c5 04 14 03 c0 	mov    DWORD PTR [eax*8-0x3ffcebfc],edx
c0017397:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001739b:	e9 bf fe ff ff       	jmp    c001725f <loadACPITables(unsigned char*)+0x10e>
c00173a0:	90                   	nop
c00173a1:	83 c4 60             	add    esp,0x60
c00173a4:	5b                   	pop    ebx
c00173a5:	5e                   	pop    esi
c00173a6:	5f                   	pop    edi
c00173a7:	c3                   	ret    

c00173a8 <findRSDT(unsigned char*)>:
c00173a8:	57                   	push   edi
c00173a9:	56                   	push   esi
c00173aa:	53                   	push   ebx
c00173ab:	83 ec 50             	sub    esp,0x50
c00173ae:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c00173b3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00173b9:	83 e0 04             	and    eax,0x4
c00173bc:	84 c0                	test   al,al
c00173be:	75 0a                	jne    c00173ca <findRSDT(unsigned char*)+0x22>
c00173c0:	b8 00 00 00 00       	mov    eax,0x0
c00173c5:	e9 21 01 00 00       	jmp    c00174eb <findRSDT(unsigned char*)+0x143>
c00173ca:	89 e0                	mov    eax,esp
c00173cc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00173d0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00173d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00173d8:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00173e0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173e4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00173e8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00173ec:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00173f0:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00173f4:	89 c6                	mov    esi,eax
c00173f6:	89 d7                	mov    edi,edx
c00173f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173fa:	89 c8                	mov    eax,ecx
c00173fc:	89 fa                	mov    edx,edi
c00173fe:	89 f3                	mov    ebx,esi
c0017400:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017404:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017408:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001740c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017410:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017414:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001741c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017420:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017424:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001742c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017430:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017434:	25 ff 0f 00 00       	and    eax,0xfff
c0017439:	89 c6                	mov    esi,eax
c001743b:	8b 1d b0 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eeb0
c0017441:	83 ec 0c             	sub    esp,0xc
c0017444:	6a 02                	push   0x2
c0017446:	e8 5e 9d ff ff       	call   c00111a9 <Virt::allocateKernelVirtualPages(int)>
c001744b:	83 c4 10             	add    esp,0x10
c001744e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017452:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017458:	83 ec 0c             	sub    esp,0xc
c001745b:	6a 01                	push   0x1
c001745d:	6a 02                	push   0x2
c001745f:	50                   	push   eax
c0017460:	52                   	push   edx
c0017461:	53                   	push   ebx
c0017462:	e8 6f a8 ff ff       	call   c0011cd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017467:	83 c4 20             	add    esp,0x20
c001746a:	09 f0                	or     eax,esi
c001746c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017470:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017474:	25 ff 0f 00 00       	and    eax,0xfff
c0017479:	89 c6                	mov    esi,eax
c001747b:	8b 1d b0 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eeb0
c0017481:	83 ec 0c             	sub    esp,0xc
c0017484:	6a 02                	push   0x2
c0017486:	e8 1e 9d ff ff       	call   c00111a9 <Virt::allocateKernelVirtualPages(int)>
c001748b:	83 c4 10             	add    esp,0x10
c001748e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017492:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017498:	83 ec 0c             	sub    esp,0xc
c001749b:	6a 01                	push   0x1
c001749d:	6a 02                	push   0x2
c001749f:	50                   	push   eax
c00174a0:	52                   	push   edx
c00174a1:	53                   	push   ebx
c00174a2:	e8 2f a8 ff ff       	call   c0011cd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00174a7:	83 c4 20             	add    esp,0x20
c00174aa:	09 f0                	or     eax,esi
c00174ac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00174b0:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00174b5:	75 11                	jne    c00174c8 <findRSDT(unsigned char*)+0x120>
c00174b7:	c6 05 00 16 03 c0 00 	mov    BYTE PTR ds:0xc0031600,0x0
c00174be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174c2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00174c6:	eb 1f                	jmp    c00174e7 <findRSDT(unsigned char*)+0x13f>
c00174c8:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00174cd:	75 11                	jne    c00174e0 <findRSDT(unsigned char*)+0x138>
c00174cf:	c6 05 00 16 03 c0 01 	mov    BYTE PTR ds:0xc0031600,0x1
c00174d6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00174da:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00174de:	eb 07                	jmp    c00174e7 <findRSDT(unsigned char*)+0x13f>
c00174e0:	b8 00 00 00 00       	mov    eax,0x0
c00174e5:	eb 04                	jmp    c00174eb <findRSDT(unsigned char*)+0x143>
c00174e7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00174eb:	83 c4 50             	add    esp,0x50
c00174ee:	5b                   	pop    ebx
c00174ef:	5e                   	pop    esi
c00174f0:	5f                   	pop    edi
c00174f1:	c3                   	ret    

c00174f2 <findDataTable(unsigned char*, char*)>:
c00174f2:	83 ec 1c             	sub    esp,0x1c
c00174f5:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c00174fa:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017500:	83 e0 04             	and    eax,0x4
c0017503:	84 c0                	test   al,al
c0017505:	75 07                	jne    c001750e <findDataTable(unsigned char*, char*)+0x1c>
c0017507:	b8 00 00 00 00       	mov    eax,0x0
c001750c:	eb 7c                	jmp    c001758a <findDataTable(unsigned char*, char*)+0x98>
c001750e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017516:	a1 ec 13 03 c0       	mov    eax,ds:0xc00313ec
c001751b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001751f:	7d 3a                	jge    c001755b <findDataTable(unsigned char*, char*)+0x69>
c0017521:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017525:	c1 e0 03             	shl    eax,0x3
c0017528:	05 00 14 03 c0       	add    eax,0xc0031400
c001752d:	83 ec 04             	sub    esp,0x4
c0017530:	6a 04                	push   0x4
c0017532:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017536:	50                   	push   eax
c0017537:	e8 10 91 fe ff       	call   c000064c <memcmp>
c001753c:	83 c4 10             	add    esp,0x10
c001753f:	85 c0                	test   eax,eax
c0017541:	0f 94 c0             	sete   al
c0017544:	84 c0                	test   al,al
c0017546:	74 0d                	je     c0017555 <findDataTable(unsigned char*, char*)+0x63>
c0017548:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001754c:	8b 04 c5 04 14 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcebfc]
c0017553:	eb 35                	jmp    c001758a <findDataTable(unsigned char*, char*)+0x98>
c0017555:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017559:	eb bb                	jmp    c0017516 <findDataTable(unsigned char*, char*)+0x24>
c001755b:	a0 00 16 03 c0       	mov    al,ds:0xc0031600
c0017560:	84 c0                	test   al,al
c0017562:	74 07                	je     c001756b <findDataTable(unsigned char*, char*)+0x79>
c0017564:	b8 58 00 00 00       	mov    eax,0x58
c0017569:	eb 05                	jmp    c0017570 <findDataTable(unsigned char*, char*)+0x7e>
c001756b:	b8 52 00 00 00       	mov    eax,0x52
c0017570:	83 ec 04             	sub    esp,0x4
c0017573:	50                   	push   eax
c0017574:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017578:	68 54 ba 02 c0       	push   0xc002ba54
c001757d:	e8 2d b0 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0017582:	83 c4 10             	add    esp,0x10
c0017585:	b8 00 00 00 00       	mov    eax,0x0
c001758a:	83 c4 1c             	add    esp,0x1c
c001758d:	c3                   	ret    

c001758e <scanMADT()>:
c001758e:	53                   	push   ebx
c001758f:	83 ec 38             	sub    esp,0x38
c0017592:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0017597:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001759d:	83 e0 04             	and    eax,0x4
c00175a0:	84 c0                	test   al,al
c00175a2:	0f 84 63 04 00 00    	je     c0017a0b <scanMADT()+0x47d>
c00175a8:	e8 0a fb ff ff       	call   c00170b7 <findRSDP()>
c00175ad:	a3 0c 16 03 c0       	mov    ds:0xc003160c,eax
c00175b2:	a1 0c 16 03 c0       	mov    eax,ds:0xc003160c
c00175b7:	85 c0                	test   eax,eax
c00175b9:	75 19                	jne    c00175d4 <scanMADT()+0x46>
c00175bb:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c00175c0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00175c6:	83 e2 fb             	and    edx,0xfffffffb
c00175c9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00175cf:	e9 3b 04 00 00       	jmp    c0017a0f <scanMADT()+0x481>
c00175d4:	a1 0c 16 03 c0       	mov    eax,ds:0xc003160c
c00175d9:	83 ec 0c             	sub    esp,0xc
c00175dc:	50                   	push   eax
c00175dd:	e8 c6 fd ff ff       	call   c00173a8 <findRSDT(unsigned char*)>
c00175e2:	83 c4 10             	add    esp,0x10
c00175e5:	a3 08 16 03 c0       	mov    ds:0xc0031608,eax
c00175ea:	a1 08 16 03 c0       	mov    eax,ds:0xc0031608
c00175ef:	85 c0                	test   eax,eax
c00175f1:	75 19                	jne    c001760c <scanMADT()+0x7e>
c00175f3:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c00175f8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00175fe:	83 e2 fb             	and    edx,0xfffffffb
c0017601:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017607:	e9 03 04 00 00       	jmp    c0017a0f <scanMADT()+0x481>
c001760c:	a1 08 16 03 c0       	mov    eax,ds:0xc0031608
c0017611:	83 ec 0c             	sub    esp,0xc
c0017614:	50                   	push   eax
c0017615:	e8 37 fb ff ff       	call   c0017151 <loadACPITables(unsigned char*)>
c001761a:	83 c4 10             	add    esp,0x10
c001761d:	a1 08 16 03 c0       	mov    eax,ds:0xc0031608
c0017622:	83 ec 08             	sub    esp,0x8
c0017625:	68 4e bb 02 c0       	push   0xc002bb4e
c001762a:	50                   	push   eax
c001762b:	e8 c2 fe ff ff       	call   c00174f2 <findDataTable(unsigned char*, char*)>
c0017630:	83 c4 10             	add    esp,0x10
c0017633:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017637:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001763c:	75 19                	jne    c0017657 <scanMADT()+0xc9>
c001763e:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0017643:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017649:	83 e2 fe             	and    edx,0xfffffffe
c001764c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017652:	e9 b8 03 00 00       	jmp    c0017a0f <scanMADT()+0x481>
c0017657:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001765f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017663:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017666:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001766a:	0f 87 9f 03 00 00    	ja     c0017a0f <scanMADT()+0x481>
c0017670:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017678:	0f 87 91 03 00 00    	ja     c0017a0f <scanMADT()+0x481>
c001767e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017682:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017686:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001768a:	8d 50 01             	lea    edx,[eax+0x1]
c001768d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017691:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017695:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017699:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001769d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176a1:	8d 50 01             	lea    edx,[eax+0x1]
c00176a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176ac:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00176b0:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00176b4:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00176b9:	0f 86 4f 03 00 00    	jbe    c0017a0e <scanMADT()+0x480>
c00176bf:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00176c4:	75 57                	jne    c001771d <scanMADT()+0x18f>
c00176c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176ca:	8d 50 01             	lea    edx,[eax+0x1]
c00176cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176d1:	8a 15 00 18 03 c0    	mov    dl,BYTE PTR ds:0xc0031800
c00176d7:	0f b6 d2             	movzx  edx,dl
c00176da:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00176de:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00176e2:	88 82 40 18 03 c0    	mov    BYTE PTR [edx-0x3ffce7c0],al
c00176e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176ec:	8d 50 01             	lea    edx,[eax+0x1]
c00176ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176f3:	8a 15 00 18 03 c0    	mov    dl,BYTE PTR ds:0xc0031800
c00176f9:	8d 4a 01             	lea    ecx,[edx+0x1]
c00176fc:	88 0d 00 18 03 c0    	mov    BYTE PTR ds:0xc0031800,cl
c0017702:	0f b6 d2             	movzx  edx,dl
c0017705:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017709:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001770d:	88 82 20 18 03 c0    	mov    BYTE PTR [edx-0x3ffce7e0],al
c0017713:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017718:	e9 da 02 00 00       	jmp    c00179f7 <scanMADT()+0x469>
c001771d:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017722:	0f 85 14 01 00 00    	jne    c001783c <scanMADT()+0x2ae>
c0017728:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001772c:	8d 50 01             	lea    edx,[eax+0x1]
c001772f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017733:	8a 15 c0 16 03 c0    	mov    dl,BYTE PTR ds:0xc00316c0
c0017739:	0f b6 d2             	movzx  edx,dl
c001773c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017740:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017744:	88 82 e0 16 03 c0    	mov    BYTE PTR [edx-0x3ffce920],al
c001774a:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001774e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017752:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017756:	01 d0                	add    eax,edx
c0017758:	83 c0 2c             	add    eax,0x2c
c001775b:	8a 00                	mov    al,BYTE PTR [eax]
c001775d:	0f b6 d0             	movzx  edx,al
c0017760:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017764:	8d 48 01             	lea    ecx,[eax+0x1]
c0017767:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001776b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001776f:	0f b6 c0             	movzx  eax,al
c0017772:	c1 e0 08             	shl    eax,0x8
c0017775:	89 d1                	mov    ecx,edx
c0017777:	09 c1                	or     ecx,eax
c0017779:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001777d:	8d 50 02             	lea    edx,[eax+0x2]
c0017780:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017784:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017788:	0f b6 c0             	movzx  eax,al
c001778b:	c1 e0 10             	shl    eax,0x10
c001778e:	09 c1                	or     ecx,eax
c0017790:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017794:	8d 50 03             	lea    edx,[eax+0x3]
c0017797:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001779b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001779f:	0f b6 c0             	movzx  eax,al
c00177a2:	c1 e0 18             	shl    eax,0x18
c00177a5:	09 c1                	or     ecx,eax
c00177a7:	89 ca                	mov    edx,ecx
c00177a9:	a0 c0 16 03 c0       	mov    al,ds:0xc00316c0
c00177ae:	0f b6 c0             	movzx  eax,al
c00177b1:	89 14 85 00 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce900],edx
c00177b8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177c5:	01 d0                	add    eax,edx
c00177c7:	83 c0 2c             	add    eax,0x2c
c00177ca:	8a 00                	mov    al,BYTE PTR [eax]
c00177cc:	0f b6 d0             	movzx  edx,al
c00177cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177d3:	8d 48 01             	lea    ecx,[eax+0x1]
c00177d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177da:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00177de:	0f b6 c0             	movzx  eax,al
c00177e1:	c1 e0 08             	shl    eax,0x8
c00177e4:	89 d1                	mov    ecx,edx
c00177e6:	09 c1                	or     ecx,eax
c00177e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177ec:	8d 50 02             	lea    edx,[eax+0x2]
c00177ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177f3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00177f7:	0f b6 c0             	movzx  eax,al
c00177fa:	c1 e0 10             	shl    eax,0x10
c00177fd:	09 c1                	or     ecx,eax
c00177ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017803:	8d 50 03             	lea    edx,[eax+0x3]
c0017806:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001780a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001780e:	0f b6 c0             	movzx  eax,al
c0017811:	c1 e0 18             	shl    eax,0x18
c0017814:	09 c1                	or     ecx,eax
c0017816:	89 ca                	mov    edx,ecx
c0017818:	a0 c0 16 03 c0       	mov    al,ds:0xc00316c0
c001781d:	0f b6 c0             	movzx  eax,al
c0017820:	89 14 85 80 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce880],edx
c0017827:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001782c:	a0 c0 16 03 c0       	mov    al,ds:0xc00316c0
c0017831:	40                   	inc    eax
c0017832:	a2 c0 16 03 c0       	mov    ds:0xc00316c0,al
c0017837:	e9 bb 01 00 00       	jmp    c00179f7 <scanMADT()+0x469>
c001783c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017841:	0f 85 e9 00 00 00    	jne    c0017930 <scanMADT()+0x3a2>
c0017847:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001784b:	8d 50 01             	lea    edx,[eax+0x1]
c001784e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017852:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017856:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001785a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001785e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017862:	8d 50 01             	lea    edx,[eax+0x1]
c0017865:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017869:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001786d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017871:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017875:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017879:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001787d:	01 d0                	add    eax,edx
c001787f:	83 c0 2c             	add    eax,0x2c
c0017882:	8a 00                	mov    al,BYTE PTR [eax]
c0017884:	0f b6 d0             	movzx  edx,al
c0017887:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001788b:	8d 48 01             	lea    ecx,[eax+0x1]
c001788e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017892:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017896:	0f b6 c0             	movzx  eax,al
c0017899:	c1 e0 08             	shl    eax,0x8
c001789c:	89 d1                	mov    ecx,edx
c001789e:	09 c1                	or     ecx,eax
c00178a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178a4:	8d 50 02             	lea    edx,[eax+0x2]
c00178a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178ab:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178af:	0f b6 c0             	movzx  eax,al
c00178b2:	c1 e0 10             	shl    eax,0x10
c00178b5:	09 c1                	or     ecx,eax
c00178b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178bb:	8d 50 03             	lea    edx,[eax+0x3]
c00178be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178c2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178c6:	0f b6 c0             	movzx  eax,al
c00178c9:	c1 e0 18             	shl    eax,0x18
c00178cc:	09 c8                	or     eax,ecx
c00178ce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00178d2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178df:	01 d0                	add    eax,edx
c00178e1:	83 c0 2c             	add    eax,0x2c
c00178e4:	8a 00                	mov    al,BYTE PTR [eax]
c00178e6:	0f b6 c0             	movzx  eax,al
c00178e9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00178ed:	8d 4a 01             	lea    ecx,[edx+0x1]
c00178f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178f4:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00178f8:	0f b6 d2             	movzx  edx,dl
c00178fb:	c1 e2 08             	shl    edx,0x8
c00178fe:	09 d0                	or     eax,edx
c0017900:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017905:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001790a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001790f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017913:	88 90 a0 df 02 c0    	mov    BYTE PTR [eax-0x3ffd2060],dl
c0017919:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001791e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017923:	66 89 84 12 a0 16 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce960],ax
c001792b:	e9 c7 00 00 00       	jmp    c00179f7 <scanMADT()+0x469>
c0017930:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017935:	0f 85 b0 00 00 00    	jne    c00179eb <scanMADT()+0x45d>
c001793b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001793f:	8d 50 01             	lea    edx,[eax+0x1]
c0017942:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017946:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001794a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001794e:	0f b6 c0             	movzx  eax,al
c0017951:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017955:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017959:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001795d:	01 d0                	add    eax,edx
c001795f:	83 c0 2c             	add    eax,0x2c
c0017962:	8a 00                	mov    al,BYTE PTR [eax]
c0017964:	0f b6 d0             	movzx  edx,al
c0017967:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001796b:	8d 48 01             	lea    ecx,[eax+0x1]
c001796e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017972:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017976:	0f b6 c0             	movzx  eax,al
c0017979:	c1 e0 08             	shl    eax,0x8
c001797c:	09 d0                	or     eax,edx
c001797e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017982:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017987:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001798b:	8d 50 01             	lea    edx,[eax+0x1]
c001798e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017992:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017996:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001799a:	0f b6 c0             	movzx  eax,al
c001799d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179a5:	c1 e0 08             	shl    eax,0x8
c00179a8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00179ac:	89 c1                	mov    ecx,eax
c00179ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179b2:	c1 e0 18             	shl    eax,0x18
c00179b5:	89 c3                	mov    ebx,eax
c00179b7:	a1 10 16 03 c0       	mov    eax,ds:0xc0031610
c00179bc:	8d 50 01             	lea    edx,[eax+0x1]
c00179bf:	89 15 10 16 03 c0    	mov    DWORD PTR ds:0xc0031610,edx
c00179c5:	09 d9                	or     ecx,ebx
c00179c7:	89 ca                	mov    edx,ecx
c00179c9:	89 14 85 20 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce9e0],edx
c00179d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00179d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00179d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179dc:	68 84 ba 02 c0       	push   0xc002ba84
c00179e1:	e8 c9 ab ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00179e6:	83 c4 10             	add    esp,0x10
c00179e9:	eb 0c                	jmp    c00179f7 <scanMADT()+0x469>
c00179eb:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00179f0:	75 05                	jne    c00179f7 <scanMADT()+0x469>
c00179f2:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00179f7:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00179fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a00:	01 d0                	add    eax,edx
c0017a02:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a06:	e9 54 fc ff ff       	jmp    c001765f <scanMADT()+0xd1>
c0017a0b:	90                   	nop
c0017a0c:	eb 01                	jmp    c0017a0f <scanMADT()+0x481>
c0017a0e:	90                   	nop
c0017a0f:	83 c4 38             	add    esp,0x38
c0017a12:	5b                   	pop    ebx
c0017a13:	c3                   	ret    

c0017a14 <ACPI::ACPI()>:
c0017a14:	83 ec 0c             	sub    esp,0xc
c0017a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a1b:	83 ec 08             	sub    esp,0x8
c0017a1e:	68 53 bb 02 c0       	push   0xc002bb53
c0017a23:	50                   	push   eax
c0017a24:	e8 c3 c1 ff ff       	call   c0013bec <Device::Device(char const*)>
c0017a29:	83 c4 10             	add    esp,0x10
c0017a2c:	ba b0 bc 02 c0       	mov    edx,0xc002bcb0
c0017a31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a35:	89 10                	mov    DWORD PTR [eax],edx
c0017a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a3b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a46:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a54:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017a5e:	e8 2b fb ff ff       	call   c001758e <scanMADT()>
c0017a63:	90                   	nop
c0017a64:	83 c4 0c             	add    esp,0xc
c0017a67:	c3                   	ret    

c0017a68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017a68:	83 ec 2c             	sub    esp,0x2c
c0017a6b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017a6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a73:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017a77:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017a7b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017a80:	88 d0                	mov    al,dl
c0017a82:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017a86:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017a8b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a97:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017a9d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017aa1:	0f 8d 97 00 00 00    	jge    c0017b3e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017aa7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017aab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017aaf:	83 c2 2a             	add    edx,0x2a
c0017ab2:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017ab6:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017abb:	75 78                	jne    c0017b35 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017abd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ac1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ac5:	83 c2 2a             	add    edx,0x2a
c0017ac8:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017acc:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017ad0:	75 63                	jne    c0017b35 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017ad2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ad7:	74 3a                	je     c0017b13 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017ad9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017add:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ae1:	83 c2 2a             	add    edx,0x2a
c0017ae4:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017ae8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017aec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aef:	39 c2                	cmp    edx,eax
c0017af1:	74 10                	je     c0017b03 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017af3:	83 ec 0c             	sub    esp,0xc
c0017af6:	68 c0 ba 02 c0       	push   0xc002bac0
c0017afb:	e8 7d 25 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0017b00:	83 c4 10             	add    esp,0x10
c0017b03:	83 ec 0c             	sub    esp,0xc
c0017b06:	68 58 bb 02 c0       	push   0xc002bb58
c0017b0b:	e8 6d 25 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0017b10:	83 c4 10             	add    esp,0x10
c0017b13:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017b17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b1b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b1f:	83 c2 2a             	add    edx,0x2a
c0017b22:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017b26:	8b 02                	mov    eax,DWORD PTR [edx]
c0017b28:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017b2b:	89 01                	mov    DWORD PTR [ecx],eax
c0017b2d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017b30:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b35:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017b39:	e9 55 ff ff ff       	jmp    c0017a93 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017b3e:	90                   	nop
c0017b3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b43:	83 c4 2c             	add    esp,0x2c
c0017b46:	c2 04 00             	ret    0x4
c0017b49:	90                   	nop

c0017b4a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017b4a:	83 ec 1c             	sub    esp,0x1c
c0017b4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b51:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017b55:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b59:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017b5e:	88 c8                	mov    al,cl
c0017b60:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017b64:	88 d0                	mov    al,dl
c0017b66:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017b6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b6e:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b78:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017b7b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017b7f:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017b83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b87:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b91:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017b94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b98:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017b9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ba1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ba7:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017bab:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bb2:	83 c2 2a             	add    edx,0x2a
c0017bb5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017bb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bbd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017bc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bc7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017bca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017bce:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bd6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017bdc:	8d 50 01             	lea    edx,[eax+0x1]
c0017bdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017be3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017be9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bed:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017bf3:	3d 00 02 00 00       	cmp    eax,0x200
c0017bf8:	75 10                	jne    c0017c0a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017bfa:	83 ec 0c             	sub    esp,0xc
c0017bfd:	68 67 bb 02 c0       	push   0xc002bb67
c0017c02:	e8 76 24 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0017c07:	83 c4 10             	add    esp,0x10
c0017c0a:	90                   	nop
c0017c0b:	83 c4 1c             	add    esp,0x1c
c0017c0e:	c3                   	ret    
c0017c0f:	90                   	nop

c0017c10 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017c10:	b8 00 00 00 00       	mov    eax,0x0
c0017c15:	c3                   	ret    

c0017c16 <ACPI::detectPCI()>:
c0017c16:	53                   	push   ebx
c0017c17:	83 ec 28             	sub    esp,0x28
c0017c1a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017c1f:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017c24:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0017c29:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c2f:	83 e0 04             	and    eax,0x4
c0017c32:	84 c0                	test   al,al
c0017c34:	74 2b                	je     c0017c61 <ACPI::detectPCI()+0x4b>
c0017c36:	a1 08 16 03 c0       	mov    eax,ds:0xc0031608
c0017c3b:	83 ec 08             	sub    esp,0x8
c0017c3e:	68 84 bb 02 c0       	push   0xc002bb84
c0017c43:	50                   	push   eax
c0017c44:	e8 a9 f8 ff ff       	call   c00174f2 <findDataTable(unsigned char*, char*)>
c0017c49:	83 c4 10             	add    esp,0x10
c0017c4c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c50:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017c55:	74 0a                	je     c0017c61 <ACPI::detectPCI()+0x4b>
c0017c57:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c5c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017c61:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017c69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c6d:	8a 00                	mov    al,BYTE PTR [eax]
c0017c6f:	3c 01                	cmp    al,0x1
c0017c71:	75 0c                	jne    c0017c7f <ACPI::detectPCI()+0x69>
c0017c73:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c78:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017c7d:	eb 26                	jmp    c0017ca5 <ACPI::detectPCI()+0x8f>
c0017c7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c83:	8a 00                	mov    al,BYTE PTR [eax]
c0017c85:	3c 02                	cmp    al,0x2
c0017c87:	75 1c                	jne    c0017ca5 <ACPI::detectPCI()+0x8f>
c0017c89:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c8e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017c93:	74 10                	je     c0017ca5 <ACPI::detectPCI()+0x8f>
c0017c95:	83 ec 0c             	sub    esp,0xc
c0017c98:	68 f0 ba 02 c0       	push   0xc002baf0
c0017c9d:	e8 db 23 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0017ca2:	83 c4 10             	add    esp,0x10
c0017ca5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017ca9:	83 f0 01             	xor    eax,0x1
c0017cac:	84 c0                	test   al,al
c0017cae:	74 3f                	je     c0017cef <ACPI::detectPCI()+0xd9>
c0017cb0:	e8 9b 84 fe ff       	call   c0000150 <manualPCIProbe>
c0017cb5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cb9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017cbe:	75 0c                	jne    c0017ccc <ACPI::detectPCI()+0xb6>
c0017cc0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017cc5:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017cca:	eb 23                	jmp    c0017cef <ACPI::detectPCI()+0xd9>
c0017ccc:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017cd1:	75 1c                	jne    c0017cef <ACPI::detectPCI()+0xd9>
c0017cd3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017cd8:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017cdd:	74 10                	je     c0017cef <ACPI::detectPCI()+0xd9>
c0017cdf:	83 ec 0c             	sub    esp,0xc
c0017ce2:	68 f0 ba 02 c0       	push   0xc002baf0
c0017ce7:	e8 91 23 00 00       	call   c001a07d <Krnl::panic(char const*)>
c0017cec:	83 c4 10             	add    esp,0x10
c0017cef:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017cf4:	74 7e                	je     c0017d74 <ACPI::detectPCI()+0x15e>
c0017cf6:	83 ec 0c             	sub    esp,0xc
c0017cf9:	68 89 bb 02 c0       	push   0xc002bb89
c0017cfe:	e8 0d 79 ff ff       	call   c000f610 <Krnl::setBootMessage(char const*)>
c0017d03:	83 c4 10             	add    esp,0x10
c0017d06:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017d0e:	83 ec 0c             	sub    esp,0xc
c0017d11:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d15:	e8 9c 78 ff ff       	call   c000f5b6 <malloc>
c0017d1a:	83 c4 10             	add    esp,0x10
c0017d1d:	89 c3                	mov    ebx,eax
c0017d1f:	83 ec 0c             	sub    esp,0xc
c0017d22:	53                   	push   ebx
c0017d23:	e8 f6 ac 00 00       	call   c0022a1e <PCI::PCI()>
c0017d28:	83 c4 10             	add    esp,0x10
c0017d2b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017d2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d33:	83 ec 08             	sub    esp,0x8
c0017d36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d3a:	50                   	push   eax
c0017d3b:	e8 a8 bc ff ff       	call   c00139e8 <Device::addChild(Device*)>
c0017d40:	83 c4 10             	add    esp,0x10
c0017d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d47:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d49:	83 c0 08             	add    eax,0x8
c0017d4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d4e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d53:	74 07                	je     c0017d5c <ACPI::detectPCI()+0x146>
c0017d55:	ba 01 00 00 00       	mov    edx,0x1
c0017d5a:	eb 05                	jmp    c0017d61 <ACPI::detectPCI()+0x14b>
c0017d5c:	ba 02 00 00 00       	mov    edx,0x2
c0017d61:	6a 00                	push   0x0
c0017d63:	6a 00                	push   0x0
c0017d65:	52                   	push   edx
c0017d66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d6a:	ff d0                	call   eax
c0017d6c:	83 c4 10             	add    esp,0x10
c0017d6f:	e9 9e 00 00 00       	jmp    c0017e12 <ACPI::detectPCI()+0x1fc>
c0017d74:	83 ec 0c             	sub    esp,0xc
c0017d77:	68 a1 bb 02 c0       	push   0xc002bba1
c0017d7c:	e8 2e a8 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0017d81:	83 c4 10             	add    esp,0x10
c0017d84:	83 ec 0c             	sub    esp,0xc
c0017d87:	68 ac bb 02 c0       	push   0xc002bbac
c0017d8c:	e8 7f 78 ff ff       	call   c000f610 <Krnl::setBootMessage(char const*)>
c0017d91:	83 c4 10             	add    esp,0x10
c0017d94:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017d9b:	83 ec 0c             	sub    esp,0xc
c0017d9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017da2:	e8 0f 78 ff ff       	call   c000f5b6 <malloc>
c0017da7:	83 c4 10             	add    esp,0x10
c0017daa:	89 c3                	mov    ebx,eax
c0017dac:	83 ec 0c             	sub    esp,0xc
c0017daf:	53                   	push   ebx
c0017db0:	e8 07 b8 00 00       	call   c00235bc <IDE::IDE()>
c0017db5:	83 c4 10             	add    esp,0x10
c0017db8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017dbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017dc0:	83 ec 08             	sub    esp,0x8
c0017dc3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017dc7:	50                   	push   eax
c0017dc8:	e8 1b bc ff ff       	call   c00139e8 <Device::addChild(Device*)>
c0017dcd:	83 c4 10             	add    esp,0x10
c0017dd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017dd4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017dde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017de2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017deb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017def:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017df8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017dfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dfe:	83 c0 08             	add    eax,0x8
c0017e01:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e03:	6a 00                	push   0x0
c0017e05:	6a 00                	push   0x0
c0017e07:	6a 00                	push   0x0
c0017e09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e0d:	ff d0                	call   eax
c0017e0f:	83 c4 10             	add    esp,0x10
c0017e12:	90                   	nop
c0017e13:	83 c4 28             	add    esp,0x28
c0017e16:	5b                   	pop    ebx
c0017e17:	c3                   	ret    

c0017e18 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017e18:	83 ec 1c             	sub    esp,0x1c
c0017e1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e1f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017e22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017e26:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0017e2b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017e30:	83 ec 08             	sub    esp,0x8
c0017e33:	52                   	push   edx
c0017e34:	50                   	push   eax
c0017e35:	e8 76 6d ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017e3a:	83 c4 10             	add    esp,0x10
c0017e3d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017e41:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0017e46:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017e4b:	83 ec 04             	sub    esp,0x4
c0017e4e:	6a 01                	push   0x1
c0017e50:	52                   	push   edx
c0017e51:	50                   	push   eax
c0017e52:	e8 8b 6e ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e57:	83 c4 10             	add    esp,0x10
c0017e5a:	90                   	nop
c0017e5b:	83 c4 1c             	add    esp,0x1c
c0017e5e:	c3                   	ret    
c0017e5f:	90                   	nop

c0017e60 <ACPI::sleep()>:
c0017e60:	83 ec 0c             	sub    esp,0xc
c0017e63:	a1 e0 13 03 c0       	mov    eax,ds:0xc00313e0
c0017e68:	85 c0                	test   eax,eax
c0017e6a:	74 07                	je     c0017e73 <ACPI::sleep()+0x13>
c0017e6c:	a1 e0 13 03 c0       	mov    eax,ds:0xc00313e0
c0017e71:	ff d0                	call   eax
c0017e73:	90                   	nop
c0017e74:	83 c4 0c             	add    esp,0xc
c0017e77:	c3                   	ret    

c0017e78 <ACPI::open(int, int, void*)>:
c0017e78:	57                   	push   edi
c0017e79:	56                   	push   esi
c0017e7a:	53                   	push   ebx
c0017e7b:	81 ec 60 01 00 00    	sub    esp,0x160
c0017e81:	83 ec 0c             	sub    esp,0xc
c0017e84:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017e8b:	e8 86 fd ff ff       	call   c0017c16 <ACPI::detectPCI()>
c0017e90:	83 c4 10             	add    esp,0x10
c0017e93:	83 ec 0c             	sub    esp,0xc
c0017e96:	68 18 bb 02 c0       	push   0xc002bb18
c0017e9b:	e8 70 77 ff ff       	call   c000f610 <Krnl::setBootMessage(char const*)>
c0017ea0:	83 c4 10             	add    esp,0x10
c0017ea3:	83 ec 0c             	sub    esp,0xc
c0017ea6:	68 c1 bb 02 c0       	push   0xc002bbc1
c0017eab:	e8 30 4b 00 00       	call   c001c9e0 <Thr::loadKernelSymbolTable(char const*)>
c0017eb0:	83 c4 10             	add    esp,0x10
c0017eb3:	83 ec 0c             	sub    esp,0xc
c0017eb6:	68 df bb 02 c0       	push   0xc002bbdf
c0017ebb:	e8 50 77 ff ff       	call   c000f610 <Krnl::setBootMessage(char const*)>
c0017ec0:	83 c4 10             	add    esp,0x10
c0017ec3:	83 ec 04             	sub    esp,0x4
c0017ec6:	6a 0c                	push   0xc
c0017ec8:	68 fa bb 02 c0       	push   0xc002bbfa
c0017ecd:	68 0b bc 02 c0       	push   0xc002bc0b
c0017ed2:	e8 62 2f 00 00       	call   c001ae39 <Reg::readIntWithDefault(char*, char*, int)>
c0017ed7:	83 c4 10             	add    esp,0x10
c0017eda:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017ee1:	83 ec 0c             	sub    esp,0xc
c0017ee4:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017eeb:	e8 f7 94 ff ff       	call   c00113e7 <Virt::setupPageSwapping(int)>
c0017ef0:	83 c4 10             	add    esp,0x10
c0017ef3:	83 ec 0c             	sub    esp,0xc
c0017ef6:	68 d5 a6 02 c0       	push   0xc002a6d5
c0017efb:	e8 10 77 ff ff       	call   c000f610 <Krnl::setBootMessage(char const*)>
c0017f00:	83 c4 10             	add    esp,0x10
c0017f03:	8b 1d 48 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed48
c0017f09:	83 ec 08             	sub    esp,0x8
c0017f0c:	6a 01                	push   0x1
c0017f0e:	68 12 bc 02 c0       	push   0xc002bc12
c0017f13:	e8 3f 55 00 00       	call   c001d457 <Thr::loadDLL(char const*, bool)>
c0017f18:	83 c4 10             	add    esp,0x10
c0017f1b:	83 ec 08             	sub    esp,0x8
c0017f1e:	53                   	push   ebx
c0017f1f:	50                   	push   eax
c0017f20:	e8 5d 57 00 00       	call   c001d682 <Thr::executeDLL(unsigned long, void*)>
c0017f25:	83 c4 10             	add    esp,0x10
c0017f28:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017f2f:	83 ec 08             	sub    esp,0x8
c0017f32:	6a 12                	push   0x12
c0017f34:	50                   	push   eax
c0017f35:	e8 32 be ff ff       	call   c0013d6c <getDevicesOfType(DeviceType)>
c0017f3a:	83 c4 0c             	add    esp,0xc
c0017f3d:	83 ec 0c             	sub    esp,0xc
c0017f40:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017f47:	50                   	push   eax
c0017f48:	e8 d3 12 01 00       	call   c0029220 <LinkedList<Device>::isEmpty()>
c0017f4d:	83 c4 10             	add    esp,0x10
c0017f50:	83 f0 01             	xor    eax,0x1
c0017f53:	84 c0                	test   al,al
c0017f55:	0f 84 43 01 00 00    	je     c001809e <ACPI::open(int, int, void*)+0x226>
c0017f5b:	83 ec 0c             	sub    esp,0xc
c0017f5e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017f65:	50                   	push   eax
c0017f66:	e8 d1 12 01 00       	call   c002923c <LinkedList<Device>::getFirstElement()>
c0017f6b:	83 c4 10             	add    esp,0x10
c0017f6e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017f75:	83 ec 0c             	sub    esp,0xc
c0017f78:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017f7f:	50                   	push   eax
c0017f80:	e8 bf 12 01 00       	call   c0029244 <LinkedList<Device>::removeFirst()>
c0017f85:	83 c4 10             	add    esp,0x10
c0017f88:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0017f8f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0017f96:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0017f9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017fa1:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0017fa7:	ba 09 00 00 00       	mov    edx,0x9
c0017fac:	fc                   	cld    
c0017fad:	89 c7                	mov    edi,eax
c0017faf:	89 de                	mov    esi,ebx
c0017fb1:	89 d1                	mov    ecx,edx
c0017fb3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017fb5:	83 ec 08             	sub    esp,0x8
c0017fb8:	8d 44 24 38          	lea    eax,[esp+0x38]
c0017fbc:	50                   	push   eax
c0017fbd:	83 ec 24             	sub    esp,0x24
c0017fc0:	89 e0                	mov    eax,esp
c0017fc2:	89 c3                	mov    ebx,eax
c0017fc4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017fc8:	ba 09 00 00 00       	mov    edx,0x9
c0017fcd:	89 df                	mov    edi,ebx
c0017fcf:	89 c6                	mov    esi,eax
c0017fd1:	89 d1                	mov    ecx,edx
c0017fd3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017fd5:	e8 44 af 00 00       	call   c0022f1e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0017fda:	83 c4 30             	add    esp,0x30
c0017fdd:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0017fe4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0017fec:	0f 84 4b ff ff ff    	je     c0017f3d <ACPI::open(int, int, void*)+0xc5>
c0017ff2:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0017ffd:	83 ec 0c             	sub    esp,0xc
c0018000:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018007:	e8 aa 75 ff ff       	call   c000f5b6 <malloc>
c001800c:	83 c4 10             	add    esp,0x10
c001800f:	89 c3                	mov    ebx,eax
c0018011:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0018016:	83 ec 04             	sub    esp,0x4
c0018019:	50                   	push   eax
c001801a:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018021:	53                   	push   ebx
c0018022:	e8 e7 aa ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c0018027:	83 c4 10             	add    esp,0x10
c001802a:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018031:	83 ec 0c             	sub    esp,0xc
c0018034:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001803b:	e8 a0 ad ff ff       	call   c0012de0 <File::exists()>
c0018040:	83 c4 10             	add    esp,0x10
c0018043:	84 c0                	test   al,al
c0018045:	74 27                	je     c001806e <ACPI::open(int, int, void*)+0x1f6>
c0018047:	83 ec 08             	sub    esp,0x8
c001804a:	6a 01                	push   0x1
c001804c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018053:	e8 ff 53 00 00       	call   c001d457 <Thr::loadDLL(char const*, bool)>
c0018058:	83 c4 10             	add    esp,0x10
c001805b:	83 ec 08             	sub    esp,0x8
c001805e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018065:	50                   	push   eax
c0018066:	e8 17 56 00 00       	call   c001d682 <Thr::executeDLL(unsigned long, void*)>
c001806b:	83 c4 10             	add    esp,0x10
c001806e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018076:	0f 84 c1 fe ff ff    	je     c0017f3d <ACPI::open(int, int, void*)+0xc5>
c001807c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018083:	8b 00                	mov    eax,DWORD PTR [eax]
c0018085:	83 c0 08             	add    eax,0x8
c0018088:	8b 00                	mov    eax,DWORD PTR [eax]
c001808a:	83 ec 0c             	sub    esp,0xc
c001808d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018094:	ff d0                	call   eax
c0018096:	83 c4 10             	add    esp,0x10
c0018099:	e9 9f fe ff ff       	jmp    c0017f3d <ACPI::open(int, int, void*)+0xc5>
c001809e:	83 ec 0c             	sub    esp,0xc
c00180a1:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00180a8:	50                   	push   eax
c00180a9:	e8 70 11 01 00       	call   c002921e <LinkedList<Device>::~LinkedList()>
c00180ae:	83 c4 10             	add    esp,0x10
c00180b1:	8b 1d 48 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed48
c00180b7:	83 ec 08             	sub    esp,0x8
c00180ba:	6a 01                	push   0x1
c00180bc:	68 2d bc 02 c0       	push   0xc002bc2d
c00180c1:	e8 91 53 00 00       	call   c001d457 <Thr::loadDLL(char const*, bool)>
c00180c6:	83 c4 10             	add    esp,0x10
c00180c9:	83 ec 08             	sub    esp,0x8
c00180cc:	53                   	push   ebx
c00180cd:	50                   	push   eax
c00180ce:	e8 af 55 00 00       	call   c001d682 <Thr::executeDLL(unsigned long, void*)>
c00180d3:	83 c4 10             	add    esp,0x10
c00180d6:	8b 1d 48 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed48
c00180dc:	83 ec 08             	sub    esp,0x8
c00180df:	6a 01                	push   0x1
c00180e1:	68 4a bc 02 c0       	push   0xc002bc4a
c00180e6:	e8 6c 53 00 00       	call   c001d457 <Thr::loadDLL(char const*, bool)>
c00180eb:	83 c4 10             	add    esp,0x10
c00180ee:	83 ec 08             	sub    esp,0x8
c00180f1:	53                   	push   ebx
c00180f2:	50                   	push   eax
c00180f3:	e8 8a 55 00 00       	call   c001d682 <Thr::executeDLL(unsigned long, void*)>
c00180f8:	83 c4 10             	add    esp,0x10
c00180fb:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0018100:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018106:	83 e0 04             	and    eax,0x4
c0018109:	84 c0                	test   al,al
c001810b:	0f 84 0d 01 00 00    	je     c001821e <ACPI::open(int, int, void*)+0x3a6>
c0018111:	83 ec 0c             	sub    esp,0xc
c0018114:	68 67 bc 02 c0       	push   0xc002bc67
c0018119:	e8 f2 74 ff ff       	call   c000f610 <Krnl::setBootMessage(char const*)>
c001811e:	83 c4 10             	add    esp,0x10
c0018121:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001812c:	83 ec 0c             	sub    esp,0xc
c001812f:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018136:	e8 7b 74 ff ff       	call   c000f5b6 <malloc>
c001813b:	83 c4 10             	add    esp,0x10
c001813e:	89 c3                	mov    ebx,eax
c0018140:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c0018145:	83 ec 04             	sub    esp,0x4
c0018148:	50                   	push   eax
c0018149:	68 84 bc 02 c0       	push   0xc002bc84
c001814e:	53                   	push   ebx
c001814f:	e8 ba a9 ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c0018154:	83 c4 10             	add    esp,0x10
c0018157:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c001815e:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018166:	74 1a                	je     c0018182 <ACPI::open(int, int, void*)+0x30a>
c0018168:	83 ec 0c             	sub    esp,0xc
c001816b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018172:	e8 69 ac ff ff       	call   c0012de0 <File::exists()>
c0018177:	83 c4 10             	add    esp,0x10
c001817a:	84 c0                	test   al,al
c001817c:	74 04                	je     c0018182 <ACPI::open(int, int, void*)+0x30a>
c001817e:	b0 01                	mov    al,0x1
c0018180:	eb 02                	jmp    c0018184 <ACPI::open(int, int, void*)+0x30c>
c0018182:	b0 00                	mov    al,0x0
c0018184:	84 c0                	test   al,al
c0018186:	74 25                	je     c00181ad <ACPI::open(int, int, void*)+0x335>
c0018188:	83 ec 08             	sub    esp,0x8
c001818b:	6a 01                	push   0x1
c001818d:	68 84 bc 02 c0       	push   0xc002bc84
c0018192:	e8 c0 52 00 00       	call   c001d457 <Thr::loadDLL(char const*, bool)>
c0018197:	83 c4 10             	add    esp,0x10
c001819a:	83 ec 08             	sub    esp,0x8
c001819d:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c00181a4:	50                   	push   eax
c00181a5:	e8 d8 54 00 00       	call   c001d682 <Thr::executeDLL(unsigned long, void*)>
c00181aa:	83 c4 10             	add    esp,0x10
c00181ad:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00181b5:	74 27                	je     c00181de <ACPI::open(int, int, void*)+0x366>
c00181b7:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00181bf:	74 1d                	je     c00181de <ACPI::open(int, int, void*)+0x366>
c00181c1:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00181c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00181ca:	83 c0 08             	add    eax,0x8
c00181cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00181cf:	83 ec 0c             	sub    esp,0xc
c00181d2:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00181d9:	ff d0                	call   eax
c00181db:	83 c4 10             	add    esp,0x10
c00181de:	a1 08 16 03 c0       	mov    eax,ds:0xc0031608
c00181e3:	83 ec 08             	sub    esp,0x8
c00181e6:	68 a1 bc 02 c0       	push   0xc002bca1
c00181eb:	50                   	push   eax
c00181ec:	e8 01 f3 ff ff       	call   c00174f2 <findDataTable(unsigned char*, char*)>
c00181f1:	83 c4 10             	add    esp,0x10
c00181f4:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00181fb:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018203:	74 19                	je     c001821e <ACPI::open(int, int, void*)+0x3a6>
c0018205:	83 ec 08             	sub    esp,0x8
c0018208:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001820f:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018216:	e8 fd fb ff ff       	call   c0017e18 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001821b:	83 c4 10             	add    esp,0x10
c001821e:	b8 00 00 00 00       	mov    eax,0x0
c0018223:	81 c4 60 01 00 00    	add    esp,0x160
c0018229:	5b                   	pop    ebx
c001822a:	5e                   	pop    esi
c001822b:	5f                   	pop    edi
c001822c:	c3                   	ret    
c001822d:	90                   	nop

c001822e <CPU::close(int, int, void*)>:
c001822e:	31 c0                	xor    eax,eax
c0018230:	c3                   	ret    
c0018231:	90                   	nop

c0018232 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018232:	55                   	push   ebp
c0018233:	57                   	push   edi
c0018234:	56                   	push   esi
c0018235:	53                   	push   ebx
c0018236:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001823a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001823e:	89 ce                	mov    esi,ecx
c0018240:	89 d5                	mov    ebp,edx
c0018242:	80 f9 04             	cmp    cl,0x4
c0018245:	75 28                	jne    c001826f <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018247:	8d 42 f9             	lea    eax,[edx-0x7]
c001824a:	3c 03                	cmp    al,0x3
c001824c:	0f 86 63 01 00 00    	jbe    c00183b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018252:	80 fa 03             	cmp    dl,0x3
c0018255:	0f 84 5a 01 00 00    	je     c00183b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001825b:	8d 7a f2             	lea    edi,[edx-0xe]
c001825e:	b8 70 e1 02 c0       	mov    eax,0xc002e170
c0018263:	89 fb                	mov    ebx,edi
c0018265:	80 fb 01             	cmp    bl,0x1
c0018268:	77 4e                	ja     c00182b8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001826a:	e9 52 01 00 00       	jmp    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001826f:	80 f9 05             	cmp    cl,0x5
c0018272:	75 4d                	jne    c00182c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018274:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018279:	80 fa 03             	cmp    dl,0x3
c001827c:	0f 86 3f 01 00 00    	jbe    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018282:	8d 7a fa             	lea    edi,[edx-0x6]
c0018285:	b8 90 e1 02 c0       	mov    eax,0xc002e190
c001828a:	89 fb                	mov    ebx,edi
c001828c:	80 fb 01             	cmp    bl,0x1
c001828f:	0f 86 2c 01 00 00    	jbe    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018295:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c001829a:	80 fa 08             	cmp    dl,0x8
c001829d:	0f 84 1e 01 00 00    	je     c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182a3:	89 d7                	mov    edi,edx
c00182a5:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c00182aa:	83 e7 fb             	and    edi,0xfffffffb
c00182ad:	89 fb                	mov    ebx,edi
c00182af:	80 fb 09             	cmp    bl,0x9
c00182b2:	0f 84 09 01 00 00    	je     c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182b8:	31 c0                	xor    eax,eax
c00182ba:	89 eb                	mov    ebx,ebp
c00182bc:	0f b6 fb             	movzx  edi,bl
c00182bf:	eb 30                	jmp    c00182f1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00182c1:	31 c0                	xor    eax,eax
c00182c3:	80 f9 06             	cmp    cl,0x6
c00182c6:	75 f2                	jne    c00182ba <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00182c8:	80 fa 0a             	cmp    dl,0xa
c00182cb:	77 ed                	ja     c00182ba <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00182cd:	bf de 05 00 00       	mov    edi,0x5de
c00182d2:	0f a3 d7             	bt     edi,edx
c00182d5:	73 e3                	jae    c00182ba <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00182d7:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c00182dc:	e9 e0 00 00 00       	jmp    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182e1:	39 c7                	cmp    edi,eax
c00182e3:	0f 84 d3 00 00 00    	je     c00183bc <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00182e9:	40                   	inc    eax
c00182ea:	3d d0 00 00 00       	cmp    eax,0xd0
c00182ef:	74 09                	je     c00182fa <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00182f1:	89 f3                	mov    ebx,esi
c00182f3:	80 fb 0f             	cmp    bl,0xf
c00182f6:	75 f1                	jne    c00182e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00182f8:	eb e7                	jmp    c00182e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00182fa:	80 f9 10             	cmp    cl,0x10
c00182fd:	75 14                	jne    c0018313 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00182ff:	8d 42 fc             	lea    eax,[edx-0x4]
c0018302:	83 e0 fb             	and    eax,0xfffffffb
c0018305:	3c 02                	cmp    al,0x2
c0018307:	76 34                	jbe    c001833d <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018309:	b8 cd bf 02 c0       	mov    eax,0xc002bfcd
c001830e:	80 fa 02             	cmp    dl,0x2
c0018311:	eb 24                	jmp    c0018337 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018313:	80 f9 11             	cmp    cl,0x11
c0018316:	75 13                	jne    c001832b <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018318:	b8 cd bf 02 c0       	mov    eax,0xc002bfcd
c001831d:	80 fa 03             	cmp    dl,0x3
c0018320:	0f 85 9b 00 00 00    	jne    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018326:	e9 91 00 00 00       	jmp    c00183bc <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001832b:	80 f9 12             	cmp    cl,0x12
c001832e:	75 14                	jne    c0018344 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018330:	b8 cd bf 02 c0       	mov    eax,0xc002bfcd
c0018335:	fe ca                	dec    dl
c0018337:	0f 85 84 00 00 00    	jne    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001833d:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018342:	eb 7d                	jmp    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018344:	80 f9 14             	cmp    cl,0x14
c0018347:	75 12                	jne    c001835b <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018349:	4a                   	dec    edx
c001834a:	b8 cd bf 02 c0       	mov    eax,0xc002bfcd
c001834f:	80 fa 01             	cmp    dl,0x1
c0018352:	77 6d                	ja     c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018354:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018359:	eb 66                	jmp    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001835b:	80 f9 15             	cmp    cl,0x15
c001835e:	75 31                	jne    c0018391 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018360:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018365:	80 fa 01             	cmp    dl,0x1
c0018368:	74 57                	je     c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001836a:	b8 cd bf 02 c0       	mov    eax,0xc002bfcd
c001836f:	80 fa 13             	cmp    dl,0x13
c0018372:	76 0c                	jbe    c0018380 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018374:	80 fa 30             	cmp    dl,0x30
c0018377:	75 48                	jne    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018379:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c001837e:	eb 41                	jmp    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018380:	b9 04 00 09 00       	mov    ecx,0x90004
c0018385:	0f a3 d1             	bt     ecx,edx
c0018388:	73 37                	jae    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001838a:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c001838f:	eb 30                	jmp    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018391:	b8 cd bf 02 c0       	mov    eax,0xc002bfcd
c0018396:	80 f9 16             	cmp    cl,0x16
c0018399:	75 26                	jne    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001839b:	b8 30 e2 02 c0       	mov    eax,0xc002e230
c00183a0:	84 d2                	test   dl,dl
c00183a2:	74 1d                	je     c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183a4:	b8 cd bf 02 c0       	mov    eax,0xc002bfcd
c00183a9:	80 fa 30             	cmp    dl,0x30
c00183ac:	75 13                	jne    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183ae:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c00183b3:	eb 0c                	jmp    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183b5:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c00183ba:	eb 05                	jmp    c00183c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183bc:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c00183c1:	5b                   	pop    ebx
c00183c2:	5e                   	pop    esi
c00183c3:	5f                   	pop    edi
c00183c4:	5d                   	pop    ebp
c00183c5:	c3                   	ret    

c00183c6 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00183c6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00183ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00183ce:	80 f9 04             	cmp    cl,0x4
c00183d1:	75 6b                	jne    c001843e <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00183d3:	b8 c0 df 02 c0       	mov    eax,0xc002dfc0
c00183d8:	80 fa 01             	cmp    dl,0x1
c00183db:	0f 86 92 02 00 00    	jbe    c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183e1:	b8 d0 df 02 c0       	mov    eax,0xc002dfd0
c00183e6:	80 fa 02             	cmp    dl,0x2
c00183e9:	0f 84 84 02 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183ef:	b8 e0 df 02 c0       	mov    eax,0xc002dfe0
c00183f4:	80 fa 03             	cmp    dl,0x3
c00183f7:	0f 84 76 02 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183fd:	b8 f0 df 02 c0       	mov    eax,0xc002dff0
c0018402:	80 fa 04             	cmp    dl,0x4
c0018405:	0f 84 68 02 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001840b:	b8 00 e0 02 c0       	mov    eax,0xc002e000
c0018410:	80 fa 05             	cmp    dl,0x5
c0018413:	0f 84 5a 02 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018419:	b8 e0 df 02 c0       	mov    eax,0xc002dfe0
c001841e:	80 fa 07             	cmp    dl,0x7
c0018421:	0f 84 4c 02 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018427:	83 ea 08             	sub    edx,0x8
c001842a:	b8 cd bf 02 c0       	mov    eax,0xc002bfcd
c001842f:	80 fa 01             	cmp    dl,0x1
c0018432:	0f 87 3b 02 00 00    	ja     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018438:	b8 10 e0 02 c0       	mov    eax,0xc002e010
c001843d:	c3                   	ret    
c001843e:	80 f9 05             	cmp    cl,0x5
c0018441:	75 45                	jne    c0018488 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018443:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018446:	b8 20 e0 02 c0       	mov    eax,0xc002e020
c001844b:	80 f9 02             	cmp    cl,0x2
c001844e:	0f 86 1f 02 00 00    	jbe    c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018454:	80 fa 04             	cmp    dl,0x4
c0018457:	0f 84 f3 01 00 00    	je     c0018650 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001845d:	80 fa 07             	cmp    dl,0x7
c0018460:	0f 84 0d 02 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018466:	b8 30 e0 02 c0       	mov    eax,0xc002e030
c001846b:	80 fa 08             	cmp    dl,0x8
c001846e:	0f 84 ff 01 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018474:	b8 cd bf 02 c0       	mov    eax,0xc002bfcd
c0018479:	80 fa 09             	cmp    dl,0x9
c001847c:	0f 85 f1 01 00 00    	jne    c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018482:	b8 40 e0 02 c0       	mov    eax,0xc002e040
c0018487:	c3                   	ret    
c0018488:	80 f9 06             	cmp    cl,0x6
c001848b:	0f 85 85 01 00 00    	jne    c0018616 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018491:	b8 50 e0 02 c0       	mov    eax,0xc002e050
c0018496:	80 fa 01             	cmp    dl,0x1
c0018499:	0f 84 d4 01 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001849f:	8d 42 fb             	lea    eax,[edx-0x5]
c00184a2:	3c 01                	cmp    al,0x1
c00184a4:	0f 86 ac 01 00 00    	jbe    c0018656 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00184aa:	80 fa 03             	cmp    dl,0x3
c00184ad:	0f 84 a3 01 00 00    	je     c0018656 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00184b3:	8d 4a f9             	lea    ecx,[edx-0x7]
c00184b6:	b8 70 e0 02 c0       	mov    eax,0xc002e070
c00184bb:	80 f9 01             	cmp    cl,0x1
c00184be:	0f 86 af 01 00 00    	jbe    c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c4:	80 fa 09             	cmp    dl,0x9
c00184c7:	0f 84 8f 01 00 00    	je     c001865c <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00184cd:	8d 4a f6             	lea    ecx,[edx-0xa]
c00184d0:	80 f9 01             	cmp    cl,0x1
c00184d3:	0f 86 9a 01 00 00    	jbe    c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d9:	b8 80 e0 02 c0       	mov    eax,0xc002e080
c00184de:	80 fa 0d             	cmp    dl,0xd
c00184e1:	0f 84 8c 01 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184e7:	b8 90 e0 02 c0       	mov    eax,0xc002e090
c00184ec:	80 fa 0e             	cmp    dl,0xe
c00184ef:	0f 84 7e 01 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f5:	b8 a0 e0 02 c0       	mov    eax,0xc002e0a0
c00184fa:	80 fa 0f             	cmp    dl,0xf
c00184fd:	0f 84 70 01 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018503:	b8 80 e0 02 c0       	mov    eax,0xc002e080
c0018508:	80 fa 15             	cmp    dl,0x15
c001850b:	0f 84 62 01 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018511:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018514:	b8 a0 e0 02 c0       	mov    eax,0xc002e0a0
c0018519:	80 f9 01             	cmp    cl,0x1
c001851c:	0f 86 51 01 00 00    	jbe    c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018522:	80 fa 1a             	cmp    dl,0x1a
c0018525:	0f 84 37 01 00 00    	je     c0018662 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001852b:	80 fa 1c             	cmp    dl,0x1c
c001852e:	0f 84 34 01 00 00    	je     c0018668 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018534:	80 fa 1d             	cmp    dl,0x1d
c0018537:	0f 84 36 01 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001853d:	b8 d0 e0 02 c0       	mov    eax,0xc002e0d0
c0018542:	80 fa 25             	cmp    dl,0x25
c0018545:	0f 84 28 01 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001854b:	8d 4a da             	lea    ecx,[edx-0x26]
c001854e:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0018553:	80 f9 01             	cmp    cl,0x1
c0018556:	0f 86 17 01 00 00    	jbe    c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001855c:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0018561:	80 fa 2a             	cmp    dl,0x2a
c0018564:	0f 84 09 01 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001856a:	b8 d0 e0 02 c0       	mov    eax,0xc002e0d0
c001856f:	80 fa 2c             	cmp    dl,0x2c
c0018572:	0f 84 fb 00 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018578:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c001857d:	80 fa 2d             	cmp    dl,0x2d
c0018580:	0f 84 ed 00 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018586:	b8 b0 e0 02 c0       	mov    eax,0xc002e0b0
c001858b:	80 fa 2e             	cmp    dl,0x2e
c001858e:	0f 84 df 00 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018594:	b8 d0 e0 02 c0       	mov    eax,0xc002e0d0
c0018599:	80 fa 2f             	cmp    dl,0x2f
c001859c:	0f 84 d1 00 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a2:	8d 4a cb             	lea    ecx,[edx-0x35]
c00185a5:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c00185aa:	80 f9 01             	cmp    cl,0x1
c00185ad:	0f 86 c0 00 00 00    	jbe    c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185b3:	b8 f0 e0 02 c0       	mov    eax,0xc002e0f0
c00185b8:	80 fa 37             	cmp    dl,0x37
c00185bb:	0f 84 b2 00 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c1:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c00185c6:	80 fa 3a             	cmp    dl,0x3a
c00185c9:	0f 84 a4 00 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185cf:	b8 10 e1 02 c0       	mov    eax,0xc002e110
c00185d4:	80 fa 3c             	cmp    dl,0x3c
c00185d7:	0f 84 96 00 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185dd:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c00185e2:	80 fa 3d             	cmp    dl,0x3d
c00185e5:	0f 84 88 00 00 00    	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185eb:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c00185f0:	80 fa 3e             	cmp    dl,0x3e
c00185f3:	74 7e                	je     c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185f5:	8d 42 bb             	lea    eax,[edx-0x45]
c00185f8:	3c 01                	cmp    al,0x1
c00185fa:	76 72                	jbe    c001866e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00185fc:	80 fa 3f             	cmp    dl,0x3f
c00185ff:	74 6d                	je     c001866e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018601:	80 fa 4a             	cmp    dl,0x4a
c0018604:	74 0a                	je     c0018610 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018606:	b8 cd bf 02 c0       	mov    eax,0xc002bfcd
c001860b:	80 fa 4d             	cmp    dl,0x4d
c001860e:	75 63                	jne    c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018610:	b8 f0 e0 02 c0       	mov    eax,0xc002e0f0
c0018615:	c3                   	ret    
c0018616:	b8 cd bf 02 c0       	mov    eax,0xc002bfcd
c001861b:	80 f9 0b             	cmp    cl,0xb
c001861e:	75 0a                	jne    c001862a <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018620:	fe ca                	dec    dl
c0018622:	75 4f                	jne    c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018624:	b8 30 e1 02 c0       	mov    eax,0xc002e130
c0018629:	c3                   	ret    
c001862a:	80 f9 0f             	cmp    cl,0xf
c001862d:	75 44                	jne    c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001862f:	b8 40 e1 02 c0       	mov    eax,0xc002e140
c0018634:	80 fa 02             	cmp    dl,0x2
c0018637:	76 3a                	jbe    c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018639:	8d 42 fd             	lea    eax,[edx-0x3]
c001863c:	3c 01                	cmp    al,0x1
c001863e:	76 0a                	jbe    c001864a <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018640:	b8 cd bf 02 c0       	mov    eax,0xc002bfcd
c0018645:	80 fa 06             	cmp    dl,0x6
c0018648:	75 29                	jne    c0018673 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001864a:	b8 50 e1 02 c0       	mov    eax,0xc002e150
c001864f:	c3                   	ret    
c0018650:	b8 30 e0 02 c0       	mov    eax,0xc002e030
c0018655:	c3                   	ret    
c0018656:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c001865b:	c3                   	ret    
c001865c:	b8 80 e0 02 c0       	mov    eax,0xc002e080
c0018661:	c3                   	ret    
c0018662:	b8 b0 e0 02 c0       	mov    eax,0xc002e0b0
c0018667:	c3                   	ret    
c0018668:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c001866d:	c3                   	ret    
c001866e:	b8 10 e1 02 c0       	mov    eax,0xc002e110
c0018673:	c3                   	ret    

c0018674 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018674:	60                   	pusha  
c0018675:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018679:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001867d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018681:	9c                   	pushf  
c0018682:	fa                   	cli    
c0018683:	0f 09                	wbinvd 
c0018685:	0f 30                	wrmsr  
c0018687:	9d                   	popf   
c0018688:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001868c:	89 02                	mov    DWORD PTR [edx],eax
c001868e:	61                   	popa   
c001868f:	c3                   	ret    

c0018690 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018690:	60                   	pusha  
c0018691:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018695:	9c                   	pushf  
c0018696:	fa                   	cli    
c0018697:	0f 09                	wbinvd 
c0018699:	31 c0                	xor    eax,eax
c001869b:	31 d2                	xor    edx,edx
c001869d:	0f 32                	rdmsr  
c001869f:	9d                   	popf   
c00186a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186a4:	89 02                	mov    DWORD PTR [edx],eax
c00186a6:	61                   	popa   
c00186a7:	c3                   	ret    

c00186a8 <CPU::AMD_K6_writeback(int, int, int)>:
c00186a8:	56                   	push   esi
c00186a9:	53                   	push   ebx
c00186aa:	83 ec 10             	sub    esp,0x10
c00186ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186b1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00186b6:	75 5d                	jne    c0018715 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00186b8:	83 f8 08             	cmp    eax,0x8
c00186bb:	75 09                	jne    c00186c6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00186bd:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00186c2:	7e 13                	jle    c00186d7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00186c4:	eb 30                	jmp    c00186f6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00186c6:	83 f8 06             	cmp    eax,0x6
c00186c9:	7c 4a                	jl     c0018715 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00186cb:	83 f8 07             	cmp    eax,0x7
c00186ce:	7e 07                	jle    c00186d7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00186d0:	83 f8 09             	cmp    eax,0x9
c00186d3:	74 21                	je     c00186f6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00186d5:	eb 3e                	jmp    c0018715 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00186d7:	89 e6                	mov    esi,esp
c00186d9:	8b 1d 88 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed88
c00186df:	56                   	push   esi
c00186e0:	c1 eb 15             	shr    ebx,0x15
c00186e3:	68 82 00 00 c0       	push   0xc0000082
c00186e8:	83 e3 7e             	and    ebx,0x7e
c00186eb:	e8 a0 ff ff ff       	call   c0018690 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00186f0:	56                   	push   esi
c00186f1:	6a 00                	push   0x0
c00186f3:	53                   	push   ebx
c00186f4:	eb 12                	jmp    c0018708 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00186f6:	89 e3                	mov    ebx,esp
c00186f8:	53                   	push   ebx
c00186f9:	68 82 00 00 c0       	push   0xc0000082
c00186fe:	e8 8d ff ff ff       	call   c0018690 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018703:	53                   	push   ebx
c0018704:	6a 00                	push   0x0
c0018706:	6a 00                	push   0x0
c0018708:	68 82 00 00 c0       	push   0xc0000082
c001870d:	e8 62 ff ff ff       	call   c0018674 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018712:	83 c4 18             	add    esp,0x18
c0018715:	83 c4 10             	add    esp,0x10
c0018718:	5b                   	pop    ebx
c0018719:	5e                   	pop    esi
c001871a:	c3                   	ret    
c001871b:	90                   	nop

c001871c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001871c:	55                   	push   ebp
c001871d:	57                   	push   edi
c001871e:	56                   	push   esi
c001871f:	53                   	push   ebx
c0018720:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018724:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018728:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001872c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018730:	39 05 60 e2 02 c0    	cmp    DWORD PTR ds:0xc002e260,eax
c0018736:	75 23                	jne    c001875b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018738:	a1 6c 18 03 c0       	mov    eax,ds:0xc003186c
c001873d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018741:	89 06                	mov    DWORD PTR [esi],eax
c0018743:	a1 68 18 03 c0       	mov    eax,ds:0xc0031868
c0018748:	89 07                	mov    DWORD PTR [edi],eax
c001874a:	a1 64 18 03 c0       	mov    eax,ds:0xc0031864
c001874f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018752:	a1 60 18 03 c0       	mov    eax,ds:0xc0031860
c0018757:	89 02                	mov    DWORD PTR [edx],eax
c0018759:	eb 3f                	jmp    c001879a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001875b:	31 c9                	xor    ecx,ecx
c001875d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018761:	0f a2                	cpuid  
c0018763:	89 06                	mov    DWORD PTR [esi],eax
c0018765:	89 1f                	mov    DWORD PTR [edi],ebx
c0018767:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001876b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001876e:	89 10                	mov    DWORD PTR [eax],edx
c0018770:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018774:	a3 60 e2 02 c0       	mov    ds:0xc002e260,eax
c0018779:	8b 06                	mov    eax,DWORD PTR [esi]
c001877b:	a3 6c 18 03 c0       	mov    ds:0xc003186c,eax
c0018780:	8b 07                	mov    eax,DWORD PTR [edi]
c0018782:	a3 68 18 03 c0       	mov    ds:0xc0031868,eax
c0018787:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001878a:	a3 64 18 03 c0       	mov    ds:0xc0031864,eax
c001878f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018793:	8b 00                	mov    eax,DWORD PTR [eax]
c0018795:	a3 60 18 03 c0       	mov    ds:0xc0031860,eax
c001879a:	5b                   	pop    ebx
c001879b:	5e                   	pop    esi
c001879c:	5f                   	pop    edi
c001879d:	5d                   	pop    ebp
c001879e:	c3                   	ret    
c001879f:	90                   	nop

c00187a0 <CPU::cpuidCheckEDX(unsigned int)>:
c00187a0:	83 ec 10             	sub    esp,0x10
c00187a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187a7:	50                   	push   eax
c00187a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187ac:	50                   	push   eax
c00187ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187b1:	50                   	push   eax
c00187b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187b6:	50                   	push   eax
c00187b7:	6a 01                	push   0x1
c00187b9:	e8 5e ff ff ff       	call   c001871c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00187be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00187c2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00187c6:	0f 95 c0             	setne  al
c00187c9:	83 c4 24             	add    esp,0x24
c00187cc:	c3                   	ret    
c00187cd:	90                   	nop

c00187ce <CPU::cpuidCheckECX(unsigned int)>:
c00187ce:	83 ec 10             	sub    esp,0x10
c00187d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187d5:	50                   	push   eax
c00187d6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187da:	50                   	push   eax
c00187db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187df:	50                   	push   eax
c00187e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187e4:	50                   	push   eax
c00187e5:	6a 01                	push   0x1
c00187e7:	e8 30 ff ff ff       	call   c001871c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00187ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00187f0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00187f4:	0f 95 c0             	setne  al
c00187f7:	83 c4 24             	add    esp,0x24
c00187fa:	c3                   	ret    
c00187fb:	90                   	nop

c00187fc <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00187fc:	83 ec 10             	sub    esp,0x10
c00187ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018803:	50                   	push   eax
c0018804:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018808:	50                   	push   eax
c0018809:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001880d:	50                   	push   eax
c001880e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018812:	50                   	push   eax
c0018813:	6a 07                	push   0x7
c0018815:	e8 02 ff ff ff       	call   c001871c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001881a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001881e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018822:	0f 95 c0             	setne  al
c0018825:	83 c4 24             	add    esp,0x24
c0018828:	c3                   	ret    
c0018829:	90                   	nop

c001882a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001882a:	83 ec 10             	sub    esp,0x10
c001882d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018831:	50                   	push   eax
c0018832:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018836:	50                   	push   eax
c0018837:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001883b:	50                   	push   eax
c001883c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018840:	50                   	push   eax
c0018841:	6a 07                	push   0x7
c0018843:	e8 d4 fe ff ff       	call   c001871c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018848:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001884c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018850:	0f 95 c0             	setne  al
c0018853:	83 c4 24             	add    esp,0x24
c0018856:	c3                   	ret    
c0018857:	90                   	nop

c0018858 <CPU::CPU()>:
c0018858:	83 ec 0c             	sub    esp,0xc
c001885b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001885f:	83 ec 08             	sub    esp,0x8
c0018862:	68 cd bf 02 c0       	push   0xc002bfcd
c0018867:	50                   	push   eax
c0018868:	e8 7f b3 ff ff       	call   c0013bec <Device::Device(char const*)>
c001886d:	83 c4 10             	add    esp,0x10
c0018870:	ba a4 c0 02 c0       	mov    edx,0xc002c0a4
c0018875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018879:	89 10                	mov    DWORD PTR [eax],edx
c001887b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001887f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001888d:	05 78 01 00 00       	add    eax,0x178
c0018892:	83 ec 0c             	sub    esp,0xc
c0018895:	50                   	push   eax
c0018896:	e8 31 65 ff ff       	call   c000edcc <GDT::GDT()>
c001889b:	83 c4 10             	add    esp,0x10
c001889e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188a2:	05 7c 09 00 00       	add    eax,0x97c
c00188a7:	83 ec 0c             	sub    esp,0xc
c00188aa:	50                   	push   eax
c00188ab:	e8 86 67 ff ff       	call   c000f036 <IDT::IDT()>
c00188b0:	83 c4 10             	add    esp,0x10
c00188b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188b7:	05 7c 11 00 00       	add    eax,0x117c
c00188bc:	83 ec 0c             	sub    esp,0xc
c00188bf:	50                   	push   eax
c00188c0:	e8 15 82 ff ff       	call   c0010ada <TSS::TSS()>
c00188c5:	83 c4 10             	add    esp,0x10
c00188c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188cc:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00188d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188d7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00188e1:	90                   	nop
c00188e2:	83 c4 0c             	add    esp,0xc
c00188e5:	c3                   	ret    

c00188e6 <CPU::displayFeatures()>:
c00188e6:	53                   	push   ebx
c00188e7:	83 ec 10             	sub    esp,0x10
c00188ea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00188ee:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00188f4:	68 db bc 02 c0       	push   0xc002bcdb
c00188f9:	e8 b1 9c ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00188fe:	59                   	pop    ecx
c00188ff:	58                   	pop    eax
c0018900:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018906:	50                   	push   eax
c0018907:	68 ec bc 02 c0       	push   0xc002bcec
c001890c:	e8 9e 9c ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0018911:	58                   	pop    eax
c0018912:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018918:	5a                   	pop    edx
c0018919:	c1 e8 0e             	shr    eax,0xe
c001891c:	0f b6 c0             	movzx  eax,al
c001891f:	50                   	push   eax
c0018920:	68 fd bc 02 c0       	push   0xc002bcfd
c0018925:	e8 85 9c ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001892a:	59                   	pop    ecx
c001892b:	58                   	pop    eax
c001892c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018932:	66 c1 e8 06          	shr    ax,0x6
c0018936:	0f b6 c0             	movzx  eax,al
c0018939:	50                   	push   eax
c001893a:	68 0e bd 02 c0       	push   0xc002bd0e
c001893f:	e8 6b 9c ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0018944:	c7 04 24 b8 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1b8
c001894b:	e8 5f 9c ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0018950:	83 c4 10             	add    esp,0x10
c0018953:	b8 d8 bc 02 c0       	mov    eax,0xc002bcd8
c0018958:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001895f:	74 05                	je     c0018966 <CPU::displayFeatures()+0x80>
c0018961:	b8 d4 bc 02 c0       	mov    eax,0xc002bcd4
c0018966:	52                   	push   edx
c0018967:	52                   	push   edx
c0018968:	50                   	push   eax
c0018969:	68 1f bd 02 c0       	push   0xc002bd1f
c001896e:	e8 3c 9c ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0018973:	83 c4 10             	add    esp,0x10
c0018976:	b8 d4 bc 02 c0       	mov    eax,0xc002bcd4
c001897b:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018982:	78 05                	js     c0018989 <CPU::displayFeatures()+0xa3>
c0018984:	b8 d8 bc 02 c0       	mov    eax,0xc002bcd8
c0018989:	51                   	push   ecx
c001898a:	51                   	push   ecx
c001898b:	50                   	push   eax
c001898c:	68 36 bd 02 c0       	push   0xc002bd36
c0018991:	e8 19 9c ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0018996:	83 c4 10             	add    esp,0x10
c0018999:	b8 d4 bc 02 c0       	mov    eax,0xc002bcd4
c001899e:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00189a5:	75 05                	jne    c00189ac <CPU::displayFeatures()+0xc6>
c00189a7:	b8 d8 bc 02 c0       	mov    eax,0xc002bcd8
c00189ac:	52                   	push   edx
c00189ad:	52                   	push   edx
c00189ae:	50                   	push   eax
c00189af:	68 4d bd 02 c0       	push   0xc002bd4d
c00189b4:	e8 f6 9b ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00189b9:	83 c4 10             	add    esp,0x10
c00189bc:	b8 d4 bc 02 c0       	mov    eax,0xc002bcd4
c00189c1:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00189c8:	75 05                	jne    c00189cf <CPU::displayFeatures()+0xe9>
c00189ca:	b8 d8 bc 02 c0       	mov    eax,0xc002bcd8
c00189cf:	51                   	push   ecx
c00189d0:	51                   	push   ecx
c00189d1:	50                   	push   eax
c00189d2:	68 64 bd 02 c0       	push   0xc002bd64
c00189d7:	e8 d3 9b ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00189dc:	83 c4 10             	add    esp,0x10
c00189df:	b8 d4 bc 02 c0       	mov    eax,0xc002bcd4
c00189e4:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00189eb:	75 05                	jne    c00189f2 <CPU::displayFeatures()+0x10c>
c00189ed:	b8 d8 bc 02 c0       	mov    eax,0xc002bcd8
c00189f2:	52                   	push   edx
c00189f3:	52                   	push   edx
c00189f4:	50                   	push   eax
c00189f5:	68 7b bd 02 c0       	push   0xc002bd7b
c00189fa:	e8 b0 9b ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00189ff:	83 c4 10             	add    esp,0x10
c0018a02:	b8 d4 bc 02 c0       	mov    eax,0xc002bcd4
c0018a07:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018a0e:	75 05                	jne    c0018a15 <CPU::displayFeatures()+0x12f>
c0018a10:	b8 d8 bc 02 c0       	mov    eax,0xc002bcd8
c0018a15:	51                   	push   ecx
c0018a16:	51                   	push   ecx
c0018a17:	50                   	push   eax
c0018a18:	68 92 bd 02 c0       	push   0xc002bd92
c0018a1d:	e8 8d 9b ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0018a22:	83 c4 10             	add    esp,0x10
c0018a25:	b8 d4 bc 02 c0       	mov    eax,0xc002bcd4
c0018a2a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018a31:	75 05                	jne    c0018a38 <CPU::displayFeatures()+0x152>
c0018a33:	b8 d8 bc 02 c0       	mov    eax,0xc002bcd8
c0018a38:	52                   	push   edx
c0018a39:	52                   	push   edx
c0018a3a:	50                   	push   eax
c0018a3b:	68 a9 bd 02 c0       	push   0xc002bda9
c0018a40:	e8 6a 9b ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0018a45:	83 c4 10             	add    esp,0x10
c0018a48:	b8 d4 bc 02 c0       	mov    eax,0xc002bcd4
c0018a4d:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018a54:	75 05                	jne    c0018a5b <CPU::displayFeatures()+0x175>
c0018a56:	b8 d8 bc 02 c0       	mov    eax,0xc002bcd8
c0018a5b:	51                   	push   ecx
c0018a5c:	51                   	push   ecx
c0018a5d:	50                   	push   eax
c0018a5e:	68 c0 bd 02 c0       	push   0xc002bdc0
c0018a63:	e8 47 9b ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0018a68:	83 c4 10             	add    esp,0x10
c0018a6b:	b8 d4 bc 02 c0       	mov    eax,0xc002bcd4
c0018a70:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018a77:	75 05                	jne    c0018a7e <CPU::displayFeatures()+0x198>
c0018a79:	b8 d8 bc 02 c0       	mov    eax,0xc002bcd8
c0018a7e:	52                   	push   edx
c0018a7f:	52                   	push   edx
c0018a80:	50                   	push   eax
c0018a81:	68 d7 bd 02 c0       	push   0xc002bdd7
c0018a86:	e8 24 9b ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0018a8b:	83 c4 10             	add    esp,0x10
c0018a8e:	b8 d4 bc 02 c0       	mov    eax,0xc002bcd4
c0018a93:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018a9a:	75 05                	jne    c0018aa1 <CPU::displayFeatures()+0x1bb>
c0018a9c:	b8 d8 bc 02 c0       	mov    eax,0xc002bcd8
c0018aa1:	51                   	push   ecx
c0018aa2:	51                   	push   ecx
c0018aa3:	50                   	push   eax
c0018aa4:	68 ee bd 02 c0       	push   0xc002bdee
c0018aa9:	e8 01 9b ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0018aae:	83 c4 10             	add    esp,0x10
c0018ab1:	b8 d4 bc 02 c0       	mov    eax,0xc002bcd4
c0018ab6:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018abd:	75 05                	jne    c0018ac4 <CPU::displayFeatures()+0x1de>
c0018abf:	b8 d8 bc 02 c0       	mov    eax,0xc002bcd8
c0018ac4:	52                   	push   edx
c0018ac5:	52                   	push   edx
c0018ac6:	50                   	push   eax
c0018ac7:	68 05 be 02 c0       	push   0xc002be05
c0018acc:	e8 de 9a ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0018ad1:	83 c4 10             	add    esp,0x10
c0018ad4:	b8 d4 bc 02 c0       	mov    eax,0xc002bcd4
c0018ad9:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018ae0:	75 05                	jne    c0018ae7 <CPU::displayFeatures()+0x201>
c0018ae2:	b8 d8 bc 02 c0       	mov    eax,0xc002bcd8
c0018ae7:	51                   	push   ecx
c0018ae8:	51                   	push   ecx
c0018ae9:	50                   	push   eax
c0018aea:	68 1c be 02 c0       	push   0xc002be1c
c0018aef:	e8 bb 9a ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0018af4:	83 c4 10             	add    esp,0x10
c0018af7:	b8 d4 bc 02 c0       	mov    eax,0xc002bcd4
c0018afc:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018b03:	75 05                	jne    c0018b0a <CPU::displayFeatures()+0x224>
c0018b05:	b8 d8 bc 02 c0       	mov    eax,0xc002bcd8
c0018b0a:	52                   	push   edx
c0018b0b:	52                   	push   edx
c0018b0c:	50                   	push   eax
c0018b0d:	68 33 be 02 c0       	push   0xc002be33
c0018b12:	e8 98 9a ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0018b17:	83 c4 10             	add    esp,0x10
c0018b1a:	b8 d4 bc 02 c0       	mov    eax,0xc002bcd4
c0018b1f:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018b26:	78 05                	js     c0018b2d <CPU::displayFeatures()+0x247>
c0018b28:	b8 d8 bc 02 c0       	mov    eax,0xc002bcd8
c0018b2d:	51                   	push   ecx
c0018b2e:	51                   	push   ecx
c0018b2f:	50                   	push   eax
c0018b30:	68 4a be 02 c0       	push   0xc002be4a
c0018b35:	e8 75 9a ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0018b3a:	83 c4 10             	add    esp,0x10
c0018b3d:	b8 d4 bc 02 c0       	mov    eax,0xc002bcd4
c0018b42:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018b49:	75 05                	jne    c0018b50 <CPU::displayFeatures()+0x26a>
c0018b4b:	b8 d8 bc 02 c0       	mov    eax,0xc002bcd8
c0018b50:	52                   	push   edx
c0018b51:	52                   	push   edx
c0018b52:	50                   	push   eax
c0018b53:	68 61 be 02 c0       	push   0xc002be61
c0018b58:	e8 52 9a ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0018b5d:	83 c4 18             	add    esp,0x18
c0018b60:	5b                   	pop    ebx
c0018b61:	c3                   	ret    

c0018b62 <CPU::detectFeatures()>:
c0018b62:	55                   	push   ebp
c0018b63:	57                   	push   edi
c0018b64:	56                   	push   esi
c0018b65:	53                   	push   ebx
c0018b66:	83 ec 50             	sub    esp,0x50
c0018b69:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018b6d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018b77:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018b7e:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018b84:	6a 0d                	push   0xd
c0018b86:	6a 00                	push   0x0
c0018b88:	55                   	push   ebp
c0018b89:	e8 c2 7b fe ff       	call   c0000750 <memset>
c0018b8e:	83 c4 10             	add    esp,0x10
c0018b91:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0018b96:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018b9d:	0f 84 22 09 00 00    	je     c00194c5 <CPU::detectFeatures()+0x963>
c0018ba3:	83 ec 0c             	sub    esp,0xc
c0018ba6:	89 ef                	mov    edi,ebp
c0018ba8:	6a 10                	push   0x10
c0018baa:	e8 f1 fb ff ff       	call   c00187a0 <CPU::cpuidCheckEDX(unsigned int)>
c0018baf:	83 e0 01             	and    eax,0x1
c0018bb2:	8d 14 00             	lea    edx,[eax+eax*1]
c0018bb5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018bbb:	83 e0 fd             	and    eax,0xfffffffd
c0018bbe:	09 d0                	or     eax,edx
c0018bc0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018bc6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018bcd:	e8 ce fb ff ff       	call   c00187a0 <CPU::cpuidCheckEDX(unsigned int)>
c0018bd2:	83 e0 01             	and    eax,0x1
c0018bd5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018bdc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018be2:	83 e0 fb             	and    eax,0xfffffffb
c0018be5:	09 d0                	or     eax,edx
c0018be7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018bed:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018bf4:	e8 a7 fb ff ff       	call   c00187a0 <CPU::cpuidCheckEDX(unsigned int)>
c0018bf9:	83 e0 01             	and    eax,0x1
c0018bfc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018c03:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c09:	83 e0 f7             	and    eax,0xfffffff7
c0018c0c:	09 d0                	or     eax,edx
c0018c0e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c14:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018c1b:	e8 80 fb ff ff       	call   c00187a0 <CPU::cpuidCheckEDX(unsigned int)>
c0018c20:	83 e0 01             	and    eax,0x1
c0018c23:	c1 e0 04             	shl    eax,0x4
c0018c26:	88 c2                	mov    dl,al
c0018c28:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c2e:	83 e0 ef             	and    eax,0xffffffef
c0018c31:	09 d0                	or     eax,edx
c0018c33:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c39:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018c40:	e8 5b fb ff ff       	call   c00187a0 <CPU::cpuidCheckEDX(unsigned int)>
c0018c45:	83 e0 01             	and    eax,0x1
c0018c48:	c1 e0 05             	shl    eax,0x5
c0018c4b:	88 c2                	mov    dl,al
c0018c4d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c53:	83 e0 df             	and    eax,0xffffffdf
c0018c56:	09 d0                	or     eax,edx
c0018c58:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c5e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018c65:	e8 36 fb ff ff       	call   c00187a0 <CPU::cpuidCheckEDX(unsigned int)>
c0018c6a:	83 e0 01             	and    eax,0x1
c0018c6d:	8d 14 00             	lea    edx,[eax+eax*1]
c0018c70:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018c76:	83 e0 fd             	and    eax,0xfffffffd
c0018c79:	09 d0                	or     eax,edx
c0018c7b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018c81:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018c88:	e8 13 fb ff ff       	call   c00187a0 <CPU::cpuidCheckEDX(unsigned int)>
c0018c8d:	83 e0 01             	and    eax,0x1
c0018c90:	c1 e0 06             	shl    eax,0x6
c0018c93:	88 c2                	mov    dl,al
c0018c95:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018c9b:	83 e0 bf             	and    eax,0xffffffbf
c0018c9e:	09 d0                	or     eax,edx
c0018ca0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018ca6:	58                   	pop    eax
c0018ca7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018cab:	50                   	push   eax
c0018cac:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018cb0:	50                   	push   eax
c0018cb1:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018cb5:	56                   	push   esi
c0018cb6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018cba:	50                   	push   eax
c0018cbb:	6a 00                	push   0x0
c0018cbd:	e8 5a fa ff ff       	call   c001871c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cc2:	b8 04 00 00 00       	mov    eax,0x4
c0018cc7:	89 c1                	mov    ecx,eax
c0018cc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ccb:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018cd1:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018cd5:	89 c1                	mov    ecx,eax
c0018cd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018cd9:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018cdf:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018ce3:	89 c1                	mov    ecx,eax
c0018ce5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ce7:	83 c4 18             	add    esp,0x18
c0018cea:	68 78 be 02 c0       	push   0xc002be78
c0018cef:	55                   	push   ebp
c0018cf0:	e8 a3 7b fe ff       	call   c0000898 <strcmp>
c0018cf5:	83 c4 10             	add    esp,0x10
c0018cf8:	85 c0                	test   eax,eax
c0018cfa:	75 0f                	jne    c0018d0b <CPU::detectFeatures()+0x1a9>
c0018cfc:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018d06:	e9 22 02 00 00       	jmp    c0018f2d <CPU::detectFeatures()+0x3cb>
c0018d0b:	50                   	push   eax
c0018d0c:	50                   	push   eax
c0018d0d:	68 85 be 02 c0       	push   0xc002be85
c0018d12:	55                   	push   ebp
c0018d13:	e8 80 7b fe ff       	call   c0000898 <strcmp>
c0018d18:	83 c4 10             	add    esp,0x10
c0018d1b:	85 c0                	test   eax,eax
c0018d1d:	74 dd                	je     c0018cfc <CPU::detectFeatures()+0x19a>
c0018d1f:	50                   	push   eax
c0018d20:	50                   	push   eax
c0018d21:	68 92 be 02 c0       	push   0xc002be92
c0018d26:	55                   	push   ebp
c0018d27:	e8 6c 7b fe ff       	call   c0000898 <strcmp>
c0018d2c:	83 c4 10             	add    esp,0x10
c0018d2f:	85 c0                	test   eax,eax
c0018d31:	74 2a                	je     c0018d5d <CPU::detectFeatures()+0x1fb>
c0018d33:	50                   	push   eax
c0018d34:	50                   	push   eax
c0018d35:	68 9f be 02 c0       	push   0xc002be9f
c0018d3a:	55                   	push   ebp
c0018d3b:	e8 58 7b fe ff       	call   c0000898 <strcmp>
c0018d40:	83 c4 10             	add    esp,0x10
c0018d43:	85 c0                	test   eax,eax
c0018d45:	74 16                	je     c0018d5d <CPU::detectFeatures()+0x1fb>
c0018d47:	50                   	push   eax
c0018d48:	50                   	push   eax
c0018d49:	68 ac be 02 c0       	push   0xc002beac
c0018d4e:	55                   	push   ebp
c0018d4f:	e8 44 7b fe ff       	call   c0000898 <strcmp>
c0018d54:	83 c4 10             	add    esp,0x10
c0018d57:	85 c0                	test   eax,eax
c0018d59:	74 48                	je     c0018da3 <CPU::detectFeatures()+0x241>
c0018d5b:	eb 0f                	jmp    c0018d6c <CPU::detectFeatures()+0x20a>
c0018d5d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018d67:	e9 c1 01 00 00       	jmp    c0018f2d <CPU::detectFeatures()+0x3cb>
c0018d6c:	50                   	push   eax
c0018d6d:	50                   	push   eax
c0018d6e:	68 b9 be 02 c0       	push   0xc002beb9
c0018d73:	55                   	push   ebp
c0018d74:	e8 1f 7b fe ff       	call   c0000898 <strcmp>
c0018d79:	83 c4 10             	add    esp,0x10
c0018d7c:	85 c0                	test   eax,eax
c0018d7e:	74 23                	je     c0018da3 <CPU::detectFeatures()+0x241>
c0018d80:	57                   	push   edi
c0018d81:	57                   	push   edi
c0018d82:	68 c6 be 02 c0       	push   0xc002bec6
c0018d87:	55                   	push   ebp
c0018d88:	e8 0b 7b fe ff       	call   c0000898 <strcmp>
c0018d8d:	83 c4 10             	add    esp,0x10
c0018d90:	85 c0                	test   eax,eax
c0018d92:	75 1e                	jne    c0018db2 <CPU::detectFeatures()+0x250>
c0018d94:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018d9e:	e9 8a 01 00 00       	jmp    c0018f2d <CPU::detectFeatures()+0x3cb>
c0018da3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018dad:	e9 7b 01 00 00       	jmp    c0018f2d <CPU::detectFeatures()+0x3cb>
c0018db2:	56                   	push   esi
c0018db3:	56                   	push   esi
c0018db4:	68 d3 be 02 c0       	push   0xc002bed3
c0018db9:	55                   	push   ebp
c0018dba:	e8 d9 7a fe ff       	call   c0000898 <strcmp>
c0018dbf:	83 c4 10             	add    esp,0x10
c0018dc2:	85 c0                	test   eax,eax
c0018dc4:	75 0f                	jne    c0018dd5 <CPU::detectFeatures()+0x273>
c0018dc6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018dd0:	e9 58 01 00 00       	jmp    c0018f2d <CPU::detectFeatures()+0x3cb>
c0018dd5:	51                   	push   ecx
c0018dd6:	51                   	push   ecx
c0018dd7:	68 92 be 02 c0       	push   0xc002be92
c0018ddc:	55                   	push   ebp
c0018ddd:	e8 b6 7a fe ff       	call   c0000898 <strcmp>
c0018de2:	83 c4 10             	add    esp,0x10
c0018de5:	85 c0                	test   eax,eax
c0018de7:	75 0f                	jne    c0018df8 <CPU::detectFeatures()+0x296>
c0018de9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018df3:	e9 35 01 00 00       	jmp    c0018f2d <CPU::detectFeatures()+0x3cb>
c0018df8:	52                   	push   edx
c0018df9:	52                   	push   edx
c0018dfa:	68 e0 be 02 c0       	push   0xc002bee0
c0018dff:	55                   	push   ebp
c0018e00:	e8 93 7a fe ff       	call   c0000898 <strcmp>
c0018e05:	83 c4 10             	add    esp,0x10
c0018e08:	85 c0                	test   eax,eax
c0018e0a:	75 0f                	jne    c0018e1b <CPU::detectFeatures()+0x2b9>
c0018e0c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018e16:	e9 12 01 00 00       	jmp    c0018f2d <CPU::detectFeatures()+0x3cb>
c0018e1b:	50                   	push   eax
c0018e1c:	50                   	push   eax
c0018e1d:	68 ed be 02 c0       	push   0xc002beed
c0018e22:	55                   	push   ebp
c0018e23:	e8 70 7a fe ff       	call   c0000898 <strcmp>
c0018e28:	83 c4 10             	add    esp,0x10
c0018e2b:	85 c0                	test   eax,eax
c0018e2d:	75 0f                	jne    c0018e3e <CPU::detectFeatures()+0x2dc>
c0018e2f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018e39:	e9 ef 00 00 00       	jmp    c0018f2d <CPU::detectFeatures()+0x3cb>
c0018e3e:	50                   	push   eax
c0018e3f:	50                   	push   eax
c0018e40:	68 fa be 02 c0       	push   0xc002befa
c0018e45:	55                   	push   ebp
c0018e46:	e8 4d 7a fe ff       	call   c0000898 <strcmp>
c0018e4b:	83 c4 10             	add    esp,0x10
c0018e4e:	85 c0                	test   eax,eax
c0018e50:	75 0f                	jne    c0018e61 <CPU::detectFeatures()+0x2ff>
c0018e52:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018e5c:	e9 cc 00 00 00       	jmp    c0018f2d <CPU::detectFeatures()+0x3cb>
c0018e61:	50                   	push   eax
c0018e62:	50                   	push   eax
c0018e63:	68 07 bf 02 c0       	push   0xc002bf07
c0018e68:	55                   	push   ebp
c0018e69:	e8 2a 7a fe ff       	call   c0000898 <strcmp>
c0018e6e:	83 c4 10             	add    esp,0x10
c0018e71:	85 c0                	test   eax,eax
c0018e73:	75 0f                	jne    c0018e84 <CPU::detectFeatures()+0x322>
c0018e75:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018e7f:	e9 a9 00 00 00       	jmp    c0018f2d <CPU::detectFeatures()+0x3cb>
c0018e84:	50                   	push   eax
c0018e85:	50                   	push   eax
c0018e86:	68 14 bf 02 c0       	push   0xc002bf14
c0018e8b:	55                   	push   ebp
c0018e8c:	e8 07 7a fe ff       	call   c0000898 <strcmp>
c0018e91:	83 c4 10             	add    esp,0x10
c0018e94:	85 c0                	test   eax,eax
c0018e96:	75 0f                	jne    c0018ea7 <CPU::detectFeatures()+0x345>
c0018e98:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018ea2:	e9 86 00 00 00       	jmp    c0018f2d <CPU::detectFeatures()+0x3cb>
c0018ea7:	50                   	push   eax
c0018ea8:	50                   	push   eax
c0018ea9:	68 21 bf 02 c0       	push   0xc002bf21
c0018eae:	55                   	push   ebp
c0018eaf:	e8 e4 79 fe ff       	call   c0000898 <strcmp>
c0018eb4:	83 c4 10             	add    esp,0x10
c0018eb7:	85 c0                	test   eax,eax
c0018eb9:	75 0c                	jne    c0018ec7 <CPU::detectFeatures()+0x365>
c0018ebb:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018ec5:	eb 66                	jmp    c0018f2d <CPU::detectFeatures()+0x3cb>
c0018ec7:	50                   	push   eax
c0018ec8:	50                   	push   eax
c0018ec9:	68 2e bf 02 c0       	push   0xc002bf2e
c0018ece:	55                   	push   ebp
c0018ecf:	e8 c4 79 fe ff       	call   c0000898 <strcmp>
c0018ed4:	83 c4 10             	add    esp,0x10
c0018ed7:	85 c0                	test   eax,eax
c0018ed9:	75 0c                	jne    c0018ee7 <CPU::detectFeatures()+0x385>
c0018edb:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018ee5:	eb 46                	jmp    c0018f2d <CPU::detectFeatures()+0x3cb>
c0018ee7:	57                   	push   edi
c0018ee8:	57                   	push   edi
c0018ee9:	68 3b bf 02 c0       	push   0xc002bf3b
c0018eee:	55                   	push   ebp
c0018eef:	e8 a4 79 fe ff       	call   c0000898 <strcmp>
c0018ef4:	83 c4 10             	add    esp,0x10
c0018ef7:	85 c0                	test   eax,eax
c0018ef9:	74 e0                	je     c0018edb <CPU::detectFeatures()+0x379>
c0018efb:	56                   	push   esi
c0018efc:	56                   	push   esi
c0018efd:	68 48 bf 02 c0       	push   0xc002bf48
c0018f02:	55                   	push   ebp
c0018f03:	e8 90 79 fe ff       	call   c0000898 <strcmp>
c0018f08:	83 c4 10             	add    esp,0x10
c0018f0b:	85 c0                	test   eax,eax
c0018f0d:	74 cc                	je     c0018edb <CPU::detectFeatures()+0x379>
c0018f0f:	51                   	push   ecx
c0018f10:	51                   	push   ecx
c0018f11:	68 55 bf 02 c0       	push   0xc002bf55
c0018f16:	55                   	push   ebp
c0018f17:	e8 7c 79 fe ff       	call   c0000898 <strcmp>
c0018f1c:	83 c4 10             	add    esp,0x10
c0018f1f:	85 c0                	test   eax,eax
c0018f21:	74 b8                	je     c0018edb <CPU::detectFeatures()+0x379>
c0018f23:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018f2d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018f32:	0f 86 be 00 00 00    	jbe    c0018ff6 <CPU::detectFeatures()+0x494>
c0018f38:	83 ec 0c             	sub    esp,0xc
c0018f3b:	68 80 00 00 00       	push   0x80
c0018f40:	e8 b7 f8 ff ff       	call   c00187fc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018f45:	83 e0 01             	and    eax,0x1
c0018f48:	c1 e0 06             	shl    eax,0x6
c0018f4b:	88 c2                	mov    dl,al
c0018f4d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f53:	83 e0 bf             	and    eax,0xffffffbf
c0018f56:	09 d0                	or     eax,edx
c0018f58:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f5e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018f65:	e8 92 f8 ff ff       	call   c00187fc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018f6a:	83 e0 01             	and    eax,0x1
c0018f6d:	c1 e0 04             	shl    eax,0x4
c0018f70:	88 c2                	mov    dl,al
c0018f72:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f78:	83 e0 ef             	and    eax,0xffffffef
c0018f7b:	09 d0                	or     eax,edx
c0018f7d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f83:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018f8a:	e8 6d f8 ff ff       	call   c00187fc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018f8f:	c1 e0 07             	shl    eax,0x7
c0018f92:	88 c2                	mov    dl,al
c0018f94:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f9a:	83 e0 7f             	and    eax,0x7f
c0018f9d:	09 d0                	or     eax,edx
c0018f9f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018fa5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018fac:	e8 79 f8 ff ff       	call   c001882a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018fb1:	83 e0 01             	and    eax,0x1
c0018fb4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018fbb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018fc1:	83 e0 f7             	and    eax,0xfffffff7
c0018fc4:	09 d0                	or     eax,edx
c0018fc6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018fcc:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018fd3:	e8 52 f8 ff ff       	call   c001882a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018fd8:	83 c4 10             	add    esp,0x10
c0018fdb:	83 e0 01             	and    eax,0x1
c0018fde:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018fe5:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018feb:	83 e0 fb             	and    eax,0xfffffffb
c0018fee:	09 d0                	or     eax,edx
c0018ff0:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018ff6:	83 ec 0c             	sub    esp,0xc
c0018ff9:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ffd:	50                   	push   eax
c0018ffe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019002:	50                   	push   eax
c0019003:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019007:	56                   	push   esi
c0019008:	8d 44 24 28          	lea    eax,[esp+0x28]
c001900c:	50                   	push   eax
c001900d:	6a 01                	push   0x1
c001900f:	e8 08 f7 ff ff       	call   c001871c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019014:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019018:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001901e:	88 ca                	mov    dl,cl
c0019020:	83 e0 f0             	and    eax,0xfffffff0
c0019023:	83 e2 0f             	and    edx,0xf
c0019026:	09 d0                	or     eax,edx
c0019028:	88 ca                	mov    dl,cl
c001902a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019030:	c0 ea 04             	shr    dl,0x4
c0019033:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019037:	0f b6 c2             	movzx  eax,dl
c001903a:	83 c4 20             	add    esp,0x20
c001903d:	c1 e0 06             	shl    eax,0x6
c0019040:	89 c7                	mov    edi,eax
c0019042:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019048:	66 25 3f c0          	and    ax,0xc03f
c001904c:	09 f8                	or     eax,edi
c001904e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019055:	89 c8                	mov    eax,ecx
c0019057:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c001905e:	c1 e8 08             	shr    eax,0x8
c0019061:	83 e5 3f             	and    ebp,0x3f
c0019064:	83 e0 0f             	and    eax,0xf
c0019067:	89 c7                	mov    edi,eax
c0019069:	c1 e7 06             	shl    edi,0x6
c001906c:	09 ef                	or     edi,ebp
c001906e:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0019075:	89 fa                	mov    edx,edi
c0019077:	83 e5 c0             	and    ebp,0xffffffc0
c001907a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019080:	88 c2                	mov    dl,al
c0019082:	c0 ea 02             	shr    dl,0x2
c0019085:	89 d7                	mov    edi,edx
c0019087:	09 ef                	or     edi,ebp
c0019089:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001908f:	89 fa                	mov    edx,edi
c0019091:	83 e5 cf             	and    ebp,0xffffffcf
c0019094:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001909a:	89 cf                	mov    edi,ecx
c001909c:	c1 ef 0c             	shr    edi,0xc
c001909f:	83 e7 03             	and    edi,0x3
c00190a2:	c1 e7 04             	shl    edi,0x4
c00190a5:	09 ef                	or     edi,ebp
c00190a7:	3c 06                	cmp    al,0x6
c00190a9:	89 fa                	mov    edx,edi
c00190ab:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00190b1:	74 04                	je     c00190b7 <CPU::detectFeatures()+0x555>
c00190b3:	3c 0f                	cmp    al,0xf
c00190b5:	75 5c                	jne    c0019113 <CPU::detectFeatures()+0x5b1>
c00190b7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00190bb:	89 cf                	mov    edi,ecx
c00190bd:	c1 ef 10             	shr    edi,0x10
c00190c0:	c1 e7 04             	shl    edi,0x4
c00190c3:	09 fa                	or     edx,edi
c00190c5:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00190cb:	0f b6 d2             	movzx  edx,dl
c00190ce:	66 81 e7 3f c0       	and    di,0xc03f
c00190d3:	c1 e2 06             	shl    edx,0x6
c00190d6:	09 fa                	or     edx,edi
c00190d8:	3c 0f                	cmp    al,0xf
c00190da:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00190e1:	75 30                	jne    c0019113 <CPU::detectFeatures()+0x5b1>
c00190e3:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00190e9:	c1 e9 14             	shr    ecx,0x14
c00190ec:	83 e0 3f             	and    eax,0x3f
c00190ef:	83 c1 0f             	add    ecx,0xf
c00190f2:	88 ca                	mov    dl,cl
c00190f4:	c0 e9 02             	shr    cl,0x2
c00190f7:	c1 e2 06             	shl    edx,0x6
c00190fa:	09 d0                	or     eax,edx
c00190fc:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019102:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019108:	83 e0 c0             	and    eax,0xffffffc0
c001910b:	09 c1                	or     ecx,eax
c001910d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019113:	83 ec 0c             	sub    esp,0xc
c0019116:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001911d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019121:	50                   	push   eax
c0019122:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019126:	55                   	push   ebp
c0019127:	56                   	push   esi
c0019128:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001912c:	57                   	push   edi
c001912d:	68 00 00 00 80       	push   0x80000000
c0019132:	e8 e5 f5 ff ff       	call   c001871c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019137:	83 c4 20             	add    esp,0x20
c001913a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019142:	76 22                	jbe    c0019166 <CPU::detectFeatures()+0x604>
c0019144:	83 ec 0c             	sub    esp,0xc
c0019147:	8d 44 24 28          	lea    eax,[esp+0x28]
c001914b:	50                   	push   eax
c001914c:	55                   	push   ebp
c001914d:	56                   	push   esi
c001914e:	57                   	push   edi
c001914f:	68 01 00 00 80       	push   0x80000001
c0019154:	e8 c3 f5 ff ff       	call   c001871c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019159:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019163:	83 c4 20             	add    esp,0x20
c0019166:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001916c:	83 f8 01             	cmp    eax,0x1
c001916f:	75 6f                	jne    c00191e0 <CPU::detectFeatures()+0x67e>
c0019171:	51                   	push   ecx
c0019172:	51                   	push   ecx
c0019173:	68 61 bf 02 c0       	push   0xc002bf61
c0019178:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001917c:	56                   	push   esi
c001917d:	e8 8a 76 fe ff       	call   c000080c <strcpy>
c0019182:	5f                   	pop    edi
c0019183:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019189:	5d                   	pop    ebp
c001918a:	66 c1 e8 06          	shr    ax,0x6
c001918e:	0f b6 c0             	movzx  eax,al
c0019191:	50                   	push   eax
c0019192:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019198:	c1 e8 0e             	shr    eax,0xe
c001919b:	0f b6 c0             	movzx  eax,al
c001919e:	50                   	push   eax
c001919f:	e8 22 f2 ff ff       	call   c00183c6 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00191a4:	5a                   	pop    edx
c00191a5:	59                   	pop    ecx
c00191a6:	50                   	push   eax
c00191a7:	56                   	push   esi
c00191a8:	e8 9f 77 fe ff       	call   c000094c <strcat>
c00191ad:	5f                   	pop    edi
c00191ae:	5d                   	pop    ebp
c00191af:	56                   	push   esi
c00191b0:	53                   	push   ebx
c00191b1:	e8 28 aa ff ff       	call   c0013bde <Device::setName(char const*)>
c00191b6:	58                   	pop    eax
c00191b7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00191bd:	5a                   	pop    edx
c00191be:	68 68 bf 02 c0       	push   0xc002bf68
c00191c3:	50                   	push   eax
c00191c4:	e8 cf 76 fe ff       	call   c0000898 <strcmp>
c00191c9:	83 c4 10             	add    esp,0x10
c00191cc:	85 c0                	test   eax,eax
c00191ce:	0f 85 71 03 00 00    	jne    c0019545 <CPU::detectFeatures()+0x9e3>
c00191d4:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00191db:	e9 65 03 00 00       	jmp    c0019545 <CPU::detectFeatures()+0x9e3>
c00191e0:	83 f8 02             	cmp    eax,0x2
c00191e3:	0f 85 b5 00 00 00    	jne    c001929e <CPU::detectFeatures()+0x73c>
c00191e9:	57                   	push   edi
c00191ea:	57                   	push   edi
c00191eb:	68 7a bf 02 c0       	push   0xc002bf7a
c00191f0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00191f4:	56                   	push   esi
c00191f5:	e8 12 76 fe ff       	call   c000080c <strcpy>
c00191fa:	5d                   	pop    ebp
c00191fb:	58                   	pop    eax
c00191fc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019202:	66 c1 e8 06          	shr    ax,0x6
c0019206:	0f b6 c0             	movzx  eax,al
c0019209:	50                   	push   eax
c001920a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019210:	c1 e8 0e             	shr    eax,0xe
c0019213:	0f b6 c0             	movzx  eax,al
c0019216:	50                   	push   eax
c0019217:	e8 16 f0 ff ff       	call   c0018232 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001921c:	5a                   	pop    edx
c001921d:	59                   	pop    ecx
c001921e:	50                   	push   eax
c001921f:	56                   	push   esi
c0019220:	e8 27 77 fe ff       	call   c000094c <strcat>
c0019225:	5f                   	pop    edi
c0019226:	5d                   	pop    ebp
c0019227:	56                   	push   esi
c0019228:	53                   	push   ebx
c0019229:	e8 b0 a9 ff ff       	call   c0013bde <Device::setName(char const*)>
c001922e:	58                   	pop    eax
c001922f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019235:	5a                   	pop    edx
c0019236:	68 7f bf 02 c0       	push   0xc002bf7f
c001923b:	50                   	push   eax
c001923c:	e8 57 76 fe ff       	call   c0000898 <strcmp>
c0019241:	83 c4 10             	add    esp,0x10
c0019244:	85 c0                	test   eax,eax
c0019246:	75 20                	jne    c0019268 <CPU::detectFeatures()+0x706>
c0019248:	8b 15 48 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed48
c001924e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019254:	a8 01                	test   al,0x1
c0019256:	74 10                	je     c0019268 <CPU::detectFeatures()+0x706>
c0019258:	83 e0 fe             	and    eax,0xfffffffe
c001925b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019261:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019268:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001926e:	c1 e8 0e             	shr    eax,0xe
c0019271:	3c 05                	cmp    al,0x5
c0019273:	0f 85 cc 02 00 00    	jne    c0019545 <CPU::detectFeatures()+0x9e3>
c0019279:	56                   	push   esi
c001927a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019280:	83 e0 0f             	and    eax,0xf
c0019283:	50                   	push   eax
c0019284:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001928a:	66 c1 e8 06          	shr    ax,0x6
c001928e:	0f b6 c0             	movzx  eax,al
c0019291:	50                   	push   eax
c0019292:	6a 05                	push   0x5
c0019294:	e8 0f f4 ff ff       	call   c00186a8 <CPU::AMD_K6_writeback(int, int, int)>
c0019299:	e9 1f 02 00 00       	jmp    c00194bd <CPU::detectFeatures()+0x95b>
c001929e:	8d 50 fd             	lea    edx,[eax-0x3]
c00192a1:	83 fa 01             	cmp    edx,0x1
c00192a4:	76 09                	jbe    c00192af <CPU::detectFeatures()+0x74d>
c00192a6:	83 f8 06             	cmp    eax,0x6
c00192a9:	0f 85 91 01 00 00    	jne    c0019440 <CPU::detectFeatures()+0x8de>
c00192af:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00192b5:	c1 ea 0e             	shr    edx,0xe
c00192b8:	80 fa 05             	cmp    dl,0x5
c00192bb:	75 7b                	jne    c0019338 <CPU::detectFeatures()+0x7d6>
c00192bd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00192c3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00192c8:	66 81 fa 00 01       	cmp    dx,0x100
c00192cd:	75 0c                	jne    c00192db <CPU::detectFeatures()+0x779>
c00192cf:	51                   	push   ecx
c00192d0:	51                   	push   ecx
c00192d1:	68 86 bf 02 c0       	push   0xc002bf86
c00192d6:	e9 dc 01 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c00192db:	66 81 fa 00 02       	cmp    dx,0x200
c00192e0:	75 0c                	jne    c00192ee <CPU::detectFeatures()+0x78c>
c00192e2:	52                   	push   edx
c00192e3:	52                   	push   edx
c00192e4:	68 99 bf 02 c0       	push   0xc002bf99
c00192e9:	e9 c9 01 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c00192ee:	66 81 fa 40 02       	cmp    dx,0x240
c00192f3:	75 0c                	jne    c0019301 <CPU::detectFeatures()+0x79f>
c00192f5:	50                   	push   eax
c00192f6:	50                   	push   eax
c00192f7:	68 ab bf 02 c0       	push   0xc002bfab
c00192fc:	e9 b6 01 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c0019301:	83 f8 06             	cmp    eax,0x6
c0019304:	75 0c                	jne    c0019312 <CPU::detectFeatures()+0x7b0>
c0019306:	50                   	push   eax
c0019307:	50                   	push   eax
c0019308:	68 bd bf 02 c0       	push   0xc002bfbd
c001930d:	e9 a5 01 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c0019312:	83 f8 04             	cmp    eax,0x4
c0019315:	75 0c                	jne    c0019323 <CPU::detectFeatures()+0x7c1>
c0019317:	50                   	push   eax
c0019318:	50                   	push   eax
c0019319:	68 c9 bf 02 c0       	push   0xc002bfc9
c001931e:	e9 94 01 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c0019323:	83 f8 03             	cmp    eax,0x3
c0019326:	0f 85 19 02 00 00    	jne    c0019545 <CPU::detectFeatures()+0x9e3>
c001932c:	50                   	push   eax
c001932d:	50                   	push   eax
c001932e:	68 d1 bf 02 c0       	push   0xc002bfd1
c0019333:	e9 7f 01 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c0019338:	80 fa 06             	cmp    dl,0x6
c001933b:	0f 85 db 00 00 00    	jne    c001941c <CPU::detectFeatures()+0x8ba>
c0019341:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019347:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001934c:	66 81 fa 80 01       	cmp    dx,0x180
c0019351:	75 0c                	jne    c001935f <CPU::detectFeatures()+0x7fd>
c0019353:	50                   	push   eax
c0019354:	50                   	push   eax
c0019355:	68 dc bf 02 c0       	push   0xc002bfdc
c001935a:	e9 58 01 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c001935f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019365:	66 f7 c1 80 ff       	test   cx,0xff80
c001936a:	75 0c                	jne    c0019378 <CPU::detectFeatures()+0x816>
c001936c:	50                   	push   eax
c001936d:	50                   	push   eax
c001936e:	68 ec bf 02 c0       	push   0xc002bfec
c0019373:	e9 3f 01 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c0019378:	66 81 fa 40 02       	cmp    dx,0x240
c001937d:	75 0c                	jne    c001938b <CPU::detectFeatures()+0x829>
c001937f:	55                   	push   ebp
c0019380:	55                   	push   ebp
c0019381:	68 f3 bf 02 c0       	push   0xc002bff3
c0019386:	e9 2c 01 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c001938b:	66 81 fa 80 02       	cmp    dx,0x280
c0019390:	75 0c                	jne    c001939e <CPU::detectFeatures()+0x83c>
c0019392:	57                   	push   edi
c0019393:	57                   	push   edi
c0019394:	68 fc bf 02 c0       	push   0xc002bffc
c0019399:	e9 19 01 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c001939e:	66 81 fa 40 03       	cmp    dx,0x340
c00193a3:	74 ed                	je     c0019392 <CPU::detectFeatures()+0x830>
c00193a5:	66 81 fa c0 03       	cmp    dx,0x3c0
c00193aa:	75 0c                	jne    c00193b8 <CPU::detectFeatures()+0x856>
c00193ac:	56                   	push   esi
c00193ad:	56                   	push   esi
c00193ae:	68 03 c0 02 c0       	push   0xc002c003
c00193b3:	e9 ff 00 00 00       	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c00193b8:	83 f8 06             	cmp    eax,0x6
c00193bb:	0f 84 45 ff ff ff    	je     c0019306 <CPU::detectFeatures()+0x7a4>
c00193c1:	83 f8 04             	cmp    eax,0x4
c00193c4:	0f 84 4d ff ff ff    	je     c0019317 <CPU::detectFeatures()+0x7b5>
c00193ca:	83 f8 03             	cmp    eax,0x3
c00193cd:	0f 85 72 01 00 00    	jne    c0019545 <CPU::detectFeatures()+0x9e3>
c00193d3:	51                   	push   ecx
c00193d4:	51                   	push   ecx
c00193d5:	68 0c c0 02 c0       	push   0xc002c00c
c00193da:	53                   	push   ebx
c00193db:	e8 fe a7 ff ff       	call   c0013bde <Device::setName(char const*)>
c00193e0:	b1 c1                	mov    cl,0xc1
c00193e2:	88 c8                	mov    al,cl
c00193e4:	e6 22                	out    0x22,al
c00193e6:	e4 23                	in     al,0x23
c00193e8:	88 c2                	mov    dl,al
c00193ea:	88 c8                	mov    al,cl
c00193ec:	e6 22                	out    0x22,al
c00193ee:	88 d0                	mov    al,dl
c00193f0:	83 c8 10             	or     eax,0x10
c00193f3:	e6 23                	out    0x23,al
c00193f5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00193fc:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00193ff:	89 d0                	mov    eax,edx
c0019401:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019407:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001940b:	40                   	inc    eax
c001940c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019412:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019417:	e9 a1 00 00 00       	jmp    c00194bd <CPU::detectFeatures()+0x95b>
c001941c:	83 f8 06             	cmp    eax,0x6
c001941f:	0f 84 e1 fe ff ff    	je     c0019306 <CPU::detectFeatures()+0x7a4>
c0019425:	83 f8 04             	cmp    eax,0x4
c0019428:	0f 84 e9 fe ff ff    	je     c0019317 <CPU::detectFeatures()+0x7b5>
c001942e:	83 f8 03             	cmp    eax,0x3
c0019431:	0f 85 0e 01 00 00    	jne    c0019545 <CPU::detectFeatures()+0x9e3>
c0019437:	52                   	push   edx
c0019438:	52                   	push   edx
c0019439:	68 17 c0 02 c0       	push   0xc002c017
c001943e:	eb 77                	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c0019440:	83 f8 07             	cmp    eax,0x7
c0019443:	75 09                	jne    c001944e <CPU::detectFeatures()+0x8ec>
c0019445:	50                   	push   eax
c0019446:	50                   	push   eax
c0019447:	68 21 c0 02 c0       	push   0xc002c021
c001944c:	eb 69                	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c001944e:	83 f8 0a             	cmp    eax,0xa
c0019451:	75 09                	jne    c001945c <CPU::detectFeatures()+0x8fa>
c0019453:	50                   	push   eax
c0019454:	50                   	push   eax
c0019455:	68 2c c0 02 c0       	push   0xc002c02c
c001945a:	eb 5b                	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c001945c:	83 f8 0b             	cmp    eax,0xb
c001945f:	75 09                	jne    c001946a <CPU::detectFeatures()+0x908>
c0019461:	50                   	push   eax
c0019462:	50                   	push   eax
c0019463:	68 34 c0 02 c0       	push   0xc002c034
c0019468:	eb 4d                	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c001946a:	83 f8 08             	cmp    eax,0x8
c001946d:	75 09                	jne    c0019478 <CPU::detectFeatures()+0x916>
c001946f:	50                   	push   eax
c0019470:	50                   	push   eax
c0019471:	68 3d c0 02 c0       	push   0xc002c03d
c0019476:	eb 3f                	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c0019478:	83 f8 09             	cmp    eax,0x9
c001947b:	75 09                	jne    c0019486 <CPU::detectFeatures()+0x924>
c001947d:	50                   	push   eax
c001947e:	50                   	push   eax
c001947f:	68 45 c0 02 c0       	push   0xc002c045
c0019484:	eb 31                	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c0019486:	83 f8 05             	cmp    eax,0x5
c0019489:	75 09                	jne    c0019494 <CPU::detectFeatures()+0x932>
c001948b:	50                   	push   eax
c001948c:	50                   	push   eax
c001948d:	68 4d c0 02 c0       	push   0xc002c04d
c0019492:	eb 23                	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c0019494:	83 f8 0c             	cmp    eax,0xc
c0019497:	75 09                	jne    c00194a2 <CPU::detectFeatures()+0x940>
c0019499:	55                   	push   ebp
c001949a:	55                   	push   ebp
c001949b:	68 5b c0 02 c0       	push   0xc002c05b
c00194a0:	eb 15                	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c00194a2:	83 f8 0d             	cmp    eax,0xd
c00194a5:	75 09                	jne    c00194b0 <CPU::detectFeatures()+0x94e>
c00194a7:	57                   	push   edi
c00194a8:	57                   	push   edi
c00194a9:	68 66 c0 02 c0       	push   0xc002c066
c00194ae:	eb 07                	jmp    c00194b7 <CPU::detectFeatures()+0x955>
c00194b0:	56                   	push   esi
c00194b1:	56                   	push   esi
c00194b2:	68 7a c0 02 c0       	push   0xc002c07a
c00194b7:	53                   	push   ebx
c00194b8:	e8 21 a7 ff ff       	call   c0013bde <Device::setName(char const*)>
c00194bd:	83 c4 10             	add    esp,0x10
c00194c0:	e9 80 00 00 00       	jmp    c0019545 <CPU::detectFeatures()+0x9e3>
c00194c5:	51                   	push   ecx
c00194c6:	51                   	push   ecx
c00194c7:	68 c6 be 02 c0       	push   0xc002bec6
c00194cc:	55                   	push   ebp
c00194cd:	e8 3a 73 fe ff       	call   c000080c <strcpy>
c00194d2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00194dc:	e8 cd 6d fe ff       	call   c00002ae <is486>
c00194e1:	83 c4 10             	add    esp,0x10
c00194e4:	85 c0                	test   eax,eax
c00194e6:	74 2b                	je     c0019513 <CPU::detectFeatures()+0x9b1>
c00194e8:	52                   	push   edx
c00194e9:	52                   	push   edx
c00194ea:	68 86 c0 02 c0       	push   0xc002c086
c00194ef:	53                   	push   ebx
c00194f0:	e8 e9 a6 ff ff       	call   c0013bde <Device::setName(char const*)>
c00194f5:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00194fc:	0f 20 c0             	mov    eax,cr0
c00194ff:	83 e0 14             	and    eax,0x14
c0019502:	83 c4 10             	add    esp,0x10
c0019505:	83 f8 04             	cmp    eax,0x4
c0019508:	75 1f                	jne    c0019529 <CPU::detectFeatures()+0x9c7>
c001950a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019511:	eb 32                	jmp    c0019545 <CPU::detectFeatures()+0x9e3>
c0019513:	50                   	push   eax
c0019514:	50                   	push   eax
c0019515:	68 91 c0 02 c0       	push   0xc002c091
c001951a:	53                   	push   ebx
c001951b:	e8 be a6 ff ff       	call   c0013bde <Device::setName(char const*)>
c0019520:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019527:	eb d3                	jmp    c00194fc <CPU::detectFeatures()+0x99a>
c0019529:	e8 5b 6d fe ff       	call   c0000289 <hasLegacyFPU>
c001952e:	83 e0 01             	and    eax,0x1
c0019531:	8d 14 00             	lea    edx,[eax+eax*1]
c0019534:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001953a:	83 e0 fd             	and    eax,0xfffffffd
c001953d:	09 d0                	or     eax,edx
c001953f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019545:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001954c:	83 c4 4c             	add    esp,0x4c
c001954f:	5b                   	pop    ebx
c0019550:	5e                   	pop    esi
c0019551:	5f                   	pop    edi
c0019552:	5d                   	pop    ebp
c0019553:	c3                   	ret    

c0019554 <CPU::setupSMEP()>:
c0019554:	0f 20 e0             	mov    eax,cr4
c0019557:	0d 00 00 10 00       	or     eax,0x100000
c001955c:	0f 22 e0             	mov    cr4,eax
c001955f:	c3                   	ret    

c0019560 <CPU::setupUMIP()>:
c0019560:	0f 20 e0             	mov    eax,cr4
c0019563:	80 cc 08             	or     ah,0x8
c0019566:	0f 22 e0             	mov    cr4,eax
c0019569:	c3                   	ret    

c001956a <CPU::setupTSC()>:
c001956a:	0f 20 e0             	mov    eax,cr4
c001956d:	83 c8 04             	or     eax,0x4
c0019570:	0f 22 e0             	mov    cr4,eax
c0019573:	c3                   	ret    

c0019574 <CPU::setupLargePages()>:
c0019574:	0f 20 e0             	mov    eax,cr4
c0019577:	83 c8 10             	or     eax,0x10
c001957a:	0f 22 e0             	mov    cr4,eax
c001957d:	c3                   	ret    

c001957e <CPU::setupPAT()>:
c001957e:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0019583:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001958a:	74 2c                	je     c00195b8 <CPU::setupPAT()+0x3a>
c001958c:	53                   	push   ebx
c001958d:	83 ec 10             	sub    esp,0x10
c0019590:	68 77 02 00 00       	push   0x277
c0019595:	50                   	push   eax
c0019596:	e8 a5 55 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c001959b:	83 e2 f8             	and    edx,0xfffffff8
c001959e:	83 ca 01             	or     edx,0x1
c00195a1:	52                   	push   edx
c00195a2:	50                   	push   eax
c00195a3:	68 77 02 00 00       	push   0x277
c00195a8:	ff 35 48 ed 02 c0    	push   DWORD PTR ds:0xc002ed48
c00195ae:	e8 b9 55 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00195b3:	83 c4 28             	add    esp,0x28
c00195b6:	5b                   	pop    ebx
c00195b7:	c3                   	ret    
c00195b8:	c3                   	ret    
c00195b9:	90                   	nop

c00195ba <CPU::setupMTRR()>:
c00195ba:	c3                   	ret    
c00195bb:	90                   	nop

c00195bc <CPU::setupGlobalPages()>:
c00195bc:	0f 20 e0             	mov    eax,cr4
c00195bf:	0c 80                	or     al,0x80
c00195c1:	0f 22 e0             	mov    cr4,eax
c00195c4:	c3                   	ret    
c00195c5:	90                   	nop

c00195c6 <CPU::allowUsermodeDataAccess()>:
c00195c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195ca:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00195d1:	74 03                	je     c00195d6 <CPU::allowUsermodeDataAccess()+0x10>
c00195d3:	0f 01 cb             	stac   
c00195d6:	c3                   	ret    
c00195d7:	90                   	nop

c00195d8 <CPU::prohibitUsermodeDataAccess()>:
c00195d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195dc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00195e3:	74 03                	je     c00195e8 <CPU::prohibitUsermodeDataAccess()+0x10>
c00195e5:	0f 01 ca             	clac   
c00195e8:	c3                   	ret    
c00195e9:	90                   	nop

c00195ea <CPU::setupSMAP()>:
c00195ea:	0f 20 e0             	mov    eax,cr4
c00195ed:	0d 00 00 20 00       	or     eax,0x200000
c00195f2:	0f 22 e0             	mov    cr4,eax
c00195f5:	eb e1                	jmp    c00195d8 <CPU::prohibitUsermodeDataAccess()>
c00195f7:	90                   	nop

c00195f8 <CPU::setupFeatures()>:
c00195f8:	83 ec 0c             	sub    esp,0xc
c00195fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00195ff:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019606:	74 07                	je     c001960f <CPU::setupFeatures()+0x17>
c0019608:	52                   	push   edx
c0019609:	e8 46 ff ff ff       	call   c0019554 <CPU::setupSMEP()>
c001960e:	58                   	pop    eax
c001960f:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019616:	74 07                	je     c001961f <CPU::setupFeatures()+0x27>
c0019618:	52                   	push   edx
c0019619:	e8 cc ff ff ff       	call   c00195ea <CPU::setupSMAP()>
c001961e:	58                   	pop    eax
c001961f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019626:	74 07                	je     c001962f <CPU::setupFeatures()+0x37>
c0019628:	52                   	push   edx
c0019629:	e8 32 ff ff ff       	call   c0019560 <CPU::setupUMIP()>
c001962e:	58                   	pop    eax
c001962f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019636:	74 07                	je     c001963f <CPU::setupFeatures()+0x47>
c0019638:	52                   	push   edx
c0019639:	e8 2c ff ff ff       	call   c001956a <CPU::setupTSC()>
c001963e:	58                   	pop    eax
c001963f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019646:	74 07                	je     c001964f <CPU::setupFeatures()+0x57>
c0019648:	52                   	push   edx
c0019649:	e8 26 ff ff ff       	call   c0019574 <CPU::setupLargePages()>
c001964e:	59                   	pop    ecx
c001964f:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019656:	74 07                	je     c001965f <CPU::setupFeatures()+0x67>
c0019658:	52                   	push   edx
c0019659:	e8 5e ff ff ff       	call   c00195bc <CPU::setupGlobalPages()>
c001965e:	58                   	pop    eax
c001965f:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019666:	74 0c                	je     c0019674 <CPU::setupFeatures()+0x7c>
c0019668:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001966c:	83 c4 0c             	add    esp,0xc
c001966f:	e9 0a ff ff ff       	jmp    c001957e <CPU::setupPAT()>
c0019674:	83 c4 0c             	add    esp,0xc
c0019677:	c3                   	ret    

c0019678 <CPU::open(int, int, void*)>:
c0019678:	57                   	push   edi
c0019679:	56                   	push   esi
c001967a:	53                   	push   ebx
c001967b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001967f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019683:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019689:	83 ec 0c             	sub    esp,0xc
c001968c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019692:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019698:	50                   	push   eax
c0019699:	e8 aa 57 ff ff       	call   c000ee48 <GDT::setup()>
c001969e:	83 c4 0c             	add    esp,0xc
c00196a1:	6a 00                	push   0x0
c00196a3:	68 ef be ad de       	push   0xdeadbeef
c00196a8:	57                   	push   edi
c00196a9:	e8 6c 74 ff ff       	call   c0010b1a <TSS::setup(unsigned long, unsigned long)>
c00196ae:	89 3c 24             	mov    DWORD PTR [esp],edi
c00196b1:	e8 44 74 ff ff       	call   c0010afa <TSS::flush()>
c00196b6:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00196bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00196bf:	e8 e8 59 ff ff       	call   c000f0ac <IDT::setup()>
c00196c4:	b8 00 04 00 00       	mov    eax,0x400
c00196c9:	0f 23 f8             	mov    db7,eax
c00196cc:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00196d6:	e8 7f 62 ff ff       	call   c000f95a <Phys::allocatePage()>
c00196db:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00196e1:	89 30                	mov    DWORD PTR [eax],esi
c00196e3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00196e9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00196ec:	58                   	pop    eax
c00196ed:	5a                   	pop    edx
c00196ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00196f4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00196f8:	e8 bd 85 ff ff       	call   c0011cba <VAS::setCPUSpecific(unsigned long)>
c00196fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019700:	e8 5d f4 ff ff       	call   c0018b62 <CPU::detectFeatures()>
c0019705:	e8 06 b9 ff ff       	call   c0015010 <setupInterruptController()>
c001970a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019710:	a1 60 ed 02 c0       	mov    eax,ds:0xc002ed60
c0019715:	83 e0 10             	and    eax,0x10
c0019718:	83 f8 01             	cmp    eax,0x1
c001971b:	19 c0                	sbb    eax,eax
c001971d:	83 e0 46             	and    eax,0x46
c0019720:	83 c0 1e             	add    eax,0x1e
c0019723:	89 04 24             	mov    DWORD PTR [esp],eax
c0019726:	e8 1c cf ff ff       	call   c0016647 <setupTimer(int)>
c001972b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019731:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019734:	e8 bf fe ff ff       	call   c00195f8 <CPU::setupFeatures()>
c0019739:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001973c:	e8 a5 f1 ff ff       	call   c00188e6 <CPU::displayFeatures()>
c0019741:	83 c4 10             	add    esp,0x10
c0019744:	31 c0                	xor    eax,eax
c0019746:	5b                   	pop    ebx
c0019747:	5e                   	pop    esi
c0019748:	5f                   	pop    edi
c0019749:	c3                   	ret    

c001974a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001974a:	57                   	push   edi
c001974b:	56                   	push   esi
c001974c:	53                   	push   ebx
c001974d:	51                   	push   ecx
c001974e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019752:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019755:	0f 02 c0             	lar    eax,ax
c0019758:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001975b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001975f:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019762:	88 ca                	mov    dl,cl
c0019764:	c0 ea 06             	shr    dl,0x6
c0019767:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001976b:	89 ca                	mov    edx,ecx
c001976d:	66 c1 ea 03          	shr    dx,0x3
c0019771:	83 e2 07             	and    edx,0x7
c0019774:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019779:	88 17                	mov    BYTE PTR [edi],dl
c001977b:	0f 84 a6 01 00 00    	je     c0019927 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019781:	83 e1 07             	and    ecx,0x7
c0019784:	80 f9 04             	cmp    cl,0x4
c0019787:	0f 84 98 00 00 00    	je     c0019825 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001978d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019792:	0f 95 c0             	setne  al
c0019795:	80 f9 05             	cmp    cl,0x5
c0019798:	0f 95 c2             	setne  dl
c001979b:	08 c2                	or     dl,al
c001979d:	74 79                	je     c0019818 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001979f:	84 c9                	test   cl,cl
c00197a1:	75 05                	jne    c00197a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00197a3:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00197a6:	eb 3c                	jmp    c00197e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00197a8:	80 f9 01             	cmp    cl,0x1
c00197ab:	75 05                	jne    c00197b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00197ad:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00197b0:	eb 32                	jmp    c00197e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00197b2:	80 f9 02             	cmp    cl,0x2
c00197b5:	75 05                	jne    c00197bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00197b7:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00197ba:	eb 28                	jmp    c00197e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00197bc:	31 c0                	xor    eax,eax
c00197be:	80 f9 03             	cmp    cl,0x3
c00197c1:	75 05                	jne    c00197c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00197c3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00197c6:	eb 1c                	jmp    c00197e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00197c8:	80 f9 05             	cmp    cl,0x5
c00197cb:	75 05                	jne    c00197d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00197cd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00197d0:	eb 12                	jmp    c00197e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00197d2:	80 f9 06             	cmp    cl,0x6
c00197d5:	75 05                	jne    c00197dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00197d7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00197da:	eb 08                	jmp    c00197e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00197dc:	80 f9 07             	cmp    cl,0x7
c00197df:	75 03                	jne    c00197e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00197e1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00197e4:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00197e9:	75 10                	jne    c00197fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00197eb:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00197ef:	b9 03 00 00 00       	mov    ecx,0x3
c00197f4:	01 d0                	add    eax,edx
c00197f6:	e9 37 01 00 00       	jmp    c0019932 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00197fb:	b9 02 00 00 00       	mov    ecx,0x2
c0019800:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019805:	0f 85 27 01 00 00    	jne    c0019932 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001980b:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001980e:	b9 06 00 00 00       	mov    ecx,0x6
c0019813:	e9 1a 01 00 00       	jmp    c0019932 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019818:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001981b:	b9 06 00 00 00       	mov    ecx,0x6
c0019820:	e9 0f 01 00 00       	jmp    c0019934 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019825:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019828:	88 ca                	mov    dl,cl
c001982a:	c0 ea 06             	shr    dl,0x6
c001982d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019831:	89 ca                	mov    edx,ecx
c0019833:	66 c1 ea 03          	shr    dx,0x3
c0019837:	83 e2 07             	and    edx,0x7
c001983a:	80 e1 07             	and    cl,0x7
c001983d:	75 05                	jne    c0019844 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001983f:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019842:	eb 4c                	jmp    c0019890 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019844:	80 f9 01             	cmp    cl,0x1
c0019847:	75 05                	jne    c001984e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019849:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001984c:	eb 42                	jmp    c0019890 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001984e:	80 f9 02             	cmp    cl,0x2
c0019851:	75 05                	jne    c0019858 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019853:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019856:	eb 38                	jmp    c0019890 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019858:	80 f9 03             	cmp    cl,0x3
c001985b:	75 05                	jne    c0019862 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001985d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019860:	eb 2e                	jmp    c0019890 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019862:	80 f9 04             	cmp    cl,0x4
c0019865:	75 12                	jne    c0019879 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019867:	f6 c4 60             	test   ah,0x60
c001986a:	75 08                	jne    c0019874 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001986c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001986f:	8d 78 14             	lea    edi,[eax+0x14]
c0019872:	eb 1c                	jmp    c0019890 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019874:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019877:	eb 17                	jmp    c0019890 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019879:	80 f9 05             	cmp    cl,0x5
c001987c:	75 05                	jne    c0019883 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001987e:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019881:	eb 0d                	jmp    c0019890 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019883:	80 f9 06             	cmp    cl,0x6
c0019886:	75 05                	jne    c001988d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019888:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001988b:	eb 03                	jmp    c0019890 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001988d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019890:	84 d2                	test   dl,dl
c0019892:	75 05                	jne    c0019899 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019894:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019897:	eb 3c                	jmp    c00198d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019899:	80 fa 01             	cmp    dl,0x1
c001989c:	75 05                	jne    c00198a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001989e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00198a1:	eb 32                	jmp    c00198d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00198a3:	80 fa 02             	cmp    dl,0x2
c00198a6:	75 05                	jne    c00198ad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00198a8:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00198ab:	eb 28                	jmp    c00198d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00198ad:	80 fa 03             	cmp    dl,0x3
c00198b0:	75 05                	jne    c00198b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00198b2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00198b5:	eb 1e                	jmp    c00198d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00198b7:	31 c0                	xor    eax,eax
c00198b9:	80 fa 04             	cmp    dl,0x4
c00198bc:	74 17                	je     c00198d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00198be:	80 fa 05             	cmp    dl,0x5
c00198c1:	75 05                	jne    c00198c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00198c3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00198c6:	eb 0d                	jmp    c00198d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00198c8:	80 fa 06             	cmp    dl,0x6
c00198cb:	75 05                	jne    c00198d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00198cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00198d0:	eb 03                	jmp    c00198d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00198d2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00198d5:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00198da:	0f 94 c2             	sete   dl
c00198dd:	80 f9 05             	cmp    cl,0x5
c00198e0:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00198e4:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00198e9:	d3 e0                	shl    eax,cl
c00198eb:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00198ef:	74 0a                	je     c00198fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00198f1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00198f4:	b9 07 00 00 00       	mov    ecx,0x7
c00198f9:	eb 37                	jmp    c0019932 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00198fb:	01 f8                	add    eax,edi
c00198fd:	b9 03 00 00 00       	mov    ecx,0x3
c0019902:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019907:	74 2b                	je     c0019934 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019909:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001990e:	75 0d                	jne    c001991d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019910:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019914:	01 c8                	add    eax,ecx
c0019916:	b9 04 00 00 00       	mov    ecx,0x4
c001991b:	eb 17                	jmp    c0019934 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001991d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019920:	b9 07 00 00 00       	mov    ecx,0x7
c0019925:	eb 0d                	jmp    c0019934 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019927:	b9 02 00 00 00       	mov    ecx,0x2
c001992c:	b2 01                	mov    dl,0x1
c001992e:	31 c0                	xor    eax,eax
c0019930:	eb 02                	jmp    c0019934 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019932:	31 d2                	xor    edx,edx
c0019934:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019938:	89 0b                	mov    DWORD PTR [ebx],ecx
c001993a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001993e:	88 11                	mov    BYTE PTR [ecx],dl
c0019940:	5a                   	pop    edx
c0019941:	5b                   	pop    ebx
c0019942:	5e                   	pop    esi
c0019943:	5f                   	pop    edi
c0019944:	c3                   	ret    

c0019945 <Krnl::smpEntry()>:
c0019945:	eb fe                	jmp    c0019945 <Krnl::smpEntry()>

c0019947 <Krnl::startCPU(int)>:
c0019947:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c001994c:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019953:	0f 84 36 01 00 00    	je     c0019a8f <Krnl::startCPU(int)+0x148>
c0019959:	53                   	push   ebx
c001995a:	83 ec 10             	sub    esp,0x10
c001995d:	fa                   	cli    
c001995e:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c0019964:	6a 1b                	push   0x1b
c0019966:	ff 35 48 ed 02 c0    	push   DWORD PTR ds:0xc002ed48
c001996c:	e8 cf 51 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019971:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019976:	89 c3                	mov    ebx,eax
c0019978:	58                   	pop    eax
c0019979:	5a                   	pop    edx
c001997a:	53                   	push   ebx
c001997b:	68 c8 c0 02 c0       	push   0xc002c0c8
c0019980:	e8 2a 8c ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0019985:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001998f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019993:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001999d:	c1 e0 18             	shl    eax,0x18
c00199a0:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00199a6:	83 c4 10             	add    esp,0x10
c00199a9:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00199af:	09 c2                	or     edx,eax
c00199b1:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00199b7:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00199bd:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00199c3:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00199c9:	80 cd c5             	or     ch,0xc5
c00199cc:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00199d2:	f3 90                	pause  
c00199d4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00199d6:	0f ba e1 0c          	bt     ecx,0xc
c00199da:	72 f6                	jb     c00199d2 <Krnl::startCPU(int)+0x8b>
c00199dc:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00199e2:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00199e8:	09 c1                	or     ecx,eax
c00199ea:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00199f0:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00199f6:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00199fc:	80 cd 85             	or     ch,0x85
c00199ff:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019a05:	f3 90                	pause  
c0019a07:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019a09:	0f ba e1 0c          	bt     ecx,0xc
c0019a0d:	72 f6                	jb     c0019a05 <Krnl::startCPU(int)+0xbe>
c0019a0f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019a19:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019a1f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019a25:	09 c1                	or     ecx,eax
c0019a27:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019a2d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019a33:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019a39:	81 c9 02 06 00 00    	or     ecx,0x602
c0019a3f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019a45:	f3 90                	pause  
c0019a47:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019a49:	0f ba e1 0c          	bt     ecx,0xc
c0019a4d:	72 f6                	jb     c0019a45 <Krnl::startCPU(int)+0xfe>
c0019a4f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019a59:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019a5f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019a65:	09 c8                	or     eax,ecx
c0019a67:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019a6d:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019a73:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019a78:	0d 02 06 00 00       	or     eax,0x602
c0019a7d:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019a83:	f3 90                	pause  
c0019a85:	8b 02                	mov    eax,DWORD PTR [edx]
c0019a87:	0f ba e0 0c          	bt     eax,0xc
c0019a8b:	72 f6                	jb     c0019a83 <Krnl::startCPU(int)+0x13c>
c0019a8d:	eb fe                	jmp    c0019a8d <Krnl::startCPU(int)+0x146>
c0019a8f:	c3                   	ret    

c0019a90 <Krnl::startCPUs()>:
c0019a90:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0019a95:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019a9b:	88 c2                	mov    dl,al
c0019a9d:	83 e2 0a             	and    edx,0xa
c0019aa0:	80 fa 0a             	cmp    dl,0xa
c0019aa3:	75 09                	jne    c0019aae <Krnl::startCPUs()+0x1e>
c0019aa5:	a8 01                	test   al,0x1
c0019aa7:	74 05                	je     c0019aae <Krnl::startCPUs()+0x1e>
c0019aa9:	e9 ed 66 fe ff       	jmp    c000019b <prepareTramp>
c0019aae:	c3                   	ret    
c0019aaf:	90                   	nop

c0019ab0 <EnvVarContainer::getEnv(char const*)>:
c0019ab0:	57                   	push   edi
c0019ab1:	56                   	push   esi
c0019ab2:	53                   	push   ebx
c0019ab3:	31 db                	xor    ebx,ebx
c0019ab5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ab9:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019abb:	7e 2b                	jle    c0019ae8 <EnvVarContainer::getEnv(char const*)+0x38>
c0019abd:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019ac4:	50                   	push   eax
c0019ac5:	50                   	push   eax
c0019ac6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019ac9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019acc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019ad0:	e8 c3 6d fe ff       	call   c0000898 <strcmp>
c0019ad5:	83 c4 10             	add    esp,0x10
c0019ad8:	85 c0                	test   eax,eax
c0019ada:	75 09                	jne    c0019ae5 <EnvVarContainer::getEnv(char const*)+0x35>
c0019adc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019adf:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019ae3:	eb 05                	jmp    c0019aea <EnvVarContainer::getEnv(char const*)+0x3a>
c0019ae5:	43                   	inc    ebx
c0019ae6:	eb d1                	jmp    c0019ab9 <EnvVarContainer::getEnv(char const*)+0x9>
c0019ae8:	31 c0                	xor    eax,eax
c0019aea:	5b                   	pop    ebx
c0019aeb:	5e                   	pop    esi
c0019aec:	5f                   	pop    edi
c0019aed:	c3                   	ret    

c0019aee <EnvVarContainer::setEnv(char const*, char const*)>:
c0019aee:	55                   	push   ebp
c0019aef:	57                   	push   edi
c0019af0:	56                   	push   esi
c0019af1:	53                   	push   ebx
c0019af2:	83 ec 28             	sub    esp,0x28
c0019af5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019af9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019afd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019b01:	56                   	push   esi
c0019b02:	e8 65 6c fe ff       	call   c000076c <strlen>
c0019b07:	40                   	inc    eax
c0019b08:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b0b:	e8 a6 5a ff ff       	call   c000f5b6 <malloc>
c0019b10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019b17:	e8 50 6c fe ff       	call   c000076c <strlen>
c0019b1c:	40                   	inc    eax
c0019b1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b20:	e8 91 5a ff ff       	call   c000f5b6 <malloc>
c0019b25:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b28:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b2c:	e8 3b 6c fe ff       	call   c000076c <strlen>
c0019b31:	83 c4 0c             	add    esp,0xc
c0019b34:	40                   	inc    eax
c0019b35:	50                   	push   eax
c0019b36:	6a 00                	push   0x0
c0019b38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019b3c:	e8 0f 6c fe ff       	call   c0000750 <memset>
c0019b41:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b44:	e8 23 6c fe ff       	call   c000076c <strlen>
c0019b49:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019b4d:	8d 48 01             	lea    ecx,[eax+0x1]
c0019b50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b55:	89 de                	mov    esi,ebx
c0019b57:	e8 10 6c fe ff       	call   c000076c <strlen>
c0019b5c:	83 c4 0c             	add    esp,0xc
c0019b5f:	40                   	inc    eax
c0019b60:	50                   	push   eax
c0019b61:	6a 00                	push   0x0
c0019b63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b67:	e8 e4 6b fe ff       	call   c0000750 <memset>
c0019b6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b6f:	e8 f8 6b fe ff       	call   c000076c <strlen>
c0019b74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019b78:	8d 48 01             	lea    ecx,[eax+0x1]
c0019b7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b7d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019b80:	40                   	inc    eax
c0019b81:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019b84:	c1 e0 03             	shl    eax,0x3
c0019b87:	5a                   	pop    edx
c0019b88:	59                   	pop    ecx
c0019b89:	50                   	push   eax
c0019b8a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019b8d:	e8 10 5a ff ff       	call   c000f5a2 <realloc>
c0019b92:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019b96:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b99:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019b9c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019ba0:	b9 08 00 00 00       	mov    ecx,0x8
c0019ba5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ba7:	83 c4 2c             	add    esp,0x2c
c0019baa:	5b                   	pop    ebx
c0019bab:	5e                   	pop    esi
c0019bac:	5f                   	pop    edi
c0019bad:	5d                   	pop    ebp
c0019bae:	c3                   	ret    
c0019baf:	90                   	nop

c0019bb0 <EnvVarContainer::deleteEnv(char const*)>:
c0019bb0:	c3                   	ret    
c0019bb1:	90                   	nop

c0019bb2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019bb2:	55                   	push   ebp
c0019bb3:	57                   	push   edi
c0019bb4:	56                   	push   esi
c0019bb5:	53                   	push   ebx
c0019bb6:	81 ec 38 01 00 00    	sub    esp,0x138
c0019bbc:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c0019bc3:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019bca:	68 14 01 00 00       	push   0x114
c0019bcf:	e8 e2 59 ff ff       	call   c000f5b6 <malloc>
c0019bd4:	83 c4 0c             	add    esp,0xc
c0019bd7:	89 c5                	mov    ebp,eax
c0019bd9:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0019bdc:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019be3:	50                   	push   eax
c0019be4:	e8 25 8f ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c0019be9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019bec:	e8 ef 91 ff ff       	call   c0012de0 <File::exists()>
c0019bf1:	83 c4 10             	add    esp,0x10
c0019bf4:	84 c0                	test   al,al
c0019bf6:	75 32                	jne    c0019c2a <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c0019bf8:	51                   	push   ecx
c0019bf9:	51                   	push   ecx
c0019bfa:	6a 12                	push   0x12
c0019bfc:	55                   	push   ebp
c0019bfd:	e8 70 8f ff ff       	call   c0012b72 <File::open(FileOpenMode)>
c0019c02:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019c05:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019c08:	89 34 24             	mov    DWORD PTR [esp],esi
c0019c0b:	e8 5c 6b fe ff       	call   c000076c <strlen>
c0019c10:	5a                   	pop    edx
c0019c11:	31 d2                	xor    edx,edx
c0019c13:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019c17:	51                   	push   ecx
c0019c18:	56                   	push   esi
c0019c19:	52                   	push   edx
c0019c1a:	50                   	push   eax
c0019c1b:	55                   	push   ebp
c0019c1c:	ff d7                	call   edi
c0019c1e:	83 c4 14             	add    esp,0x14
c0019c21:	55                   	push   ebp
c0019c22:	e8 a9 8f ff ff       	call   c0012bd0 <File::close()>
c0019c27:	83 c4 10             	add    esp,0x10
c0019c2a:	31 f6                	xor    esi,esi
c0019c2c:	50                   	push   eax
c0019c2d:	68 00 01 00 00       	push   0x100
c0019c32:	6a 00                	push   0x0
c0019c34:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019c38:	50                   	push   eax
c0019c39:	e8 12 6b fe ff       	call   c0000750 <memset>
c0019c3e:	58                   	pop    eax
c0019c3f:	5a                   	pop    edx
c0019c40:	6a 01                	push   0x1
c0019c42:	55                   	push   ebp
c0019c43:	e8 2a 8f ff ff       	call   c0012b72 <File::open(FileOpenMode)>
c0019c48:	83 c4 10             	add    esp,0x10
c0019c4b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019c53:	83 ec 0c             	sub    esp,0xc
c0019c56:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019c59:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019c5d:	51                   	push   ecx
c0019c5e:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019c62:	52                   	push   edx
c0019c63:	6a 00                	push   0x0
c0019c65:	6a 01                	push   0x1
c0019c67:	55                   	push   ebp
c0019c68:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c6b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019c6f:	83 c4 20             	add    esp,0x20
c0019c72:	3c 0d                	cmp    al,0xd
c0019c74:	0f 84 16 01 00 00    	je     c0019d90 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c0019c7a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019c7f:	0f 84 fc 00 00 00    	je     c0019d81 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019c85:	3c 0a                	cmp    al,0xa
c0019c87:	74 13                	je     c0019c9c <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019c89:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019c8e:	74 0c                	je     c0019c9c <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019c90:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019c96:	0f 8e e5 00 00 00    	jle    c0019d81 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019c9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ca0:	83 ec 0c             	sub    esp,0xc
c0019ca3:	8d 78 01             	lea    edi,[eax+0x1]
c0019ca6:	57                   	push   edi
c0019ca7:	e8 0a 59 ff ff       	call   c000f5b6 <malloc>
c0019cac:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019cb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019cb4:	8d 56 04             	lea    edx,[esi+0x4]
c0019cb7:	89 14 24             	mov    DWORD PTR [esp],edx
c0019cba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019cbe:	e8 f3 58 ff ff       	call   c000f5b6 <malloc>
c0019cc3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019cc7:	83 c4 0c             	add    esp,0xc
c0019cca:	57                   	push   edi
c0019ccb:	6a 00                	push   0x0
c0019ccd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019cd1:	e8 7a 6a fe ff       	call   c0000750 <memset>
c0019cd6:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019cda:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019cde:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019ce2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ce4:	83 c4 0c             	add    esp,0xc
c0019ce7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ceb:	52                   	push   edx
c0019cec:	6a 00                	push   0x0
c0019cee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cf2:	e8 59 6a fe ff       	call   c0000750 <memset>
c0019cf7:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019cfb:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019cff:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d02:	e8 65 6a fe ff       	call   c000076c <strlen>
c0019d07:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019d0b:	89 c1                	mov    ecx,eax
c0019d0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d0f:	5e                   	pop    esi
c0019d10:	5f                   	pop    edi
c0019d11:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019d15:	68 d9 c0 02 c0       	push   0xc002c0d9
c0019d1a:	e8 90 88 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0019d1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d21:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0019d24:	40                   	inc    eax
c0019d25:	83 c4 10             	add    esp,0x10
c0019d28:	89 03                	mov    DWORD PTR [ebx],eax
c0019d2a:	85 d2                	test   edx,edx
c0019d2c:	75 0c                	jne    c0019d3a <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c0019d2e:	83 ec 0c             	sub    esp,0xc
c0019d31:	6a 08                	push   0x8
c0019d33:	e8 7e 58 ff ff       	call   c000f5b6 <malloc>
c0019d38:	eb 0c                	jmp    c0019d46 <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c0019d3a:	c1 e0 03             	shl    eax,0x3
c0019d3d:	51                   	push   ecx
c0019d3e:	51                   	push   ecx
c0019d3f:	50                   	push   eax
c0019d40:	52                   	push   edx
c0019d41:	e8 5c 58 ff ff       	call   c000f5a2 <realloc>
c0019d46:	83 c4 10             	add    esp,0x10
c0019d49:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d4c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019d4e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0019d51:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019d55:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019d59:	b9 08 00 00 00       	mov    ecx,0x8
c0019d5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d60:	31 f6                	xor    esi,esi
c0019d62:	52                   	push   edx
c0019d63:	68 00 01 00 00       	push   0x100
c0019d68:	6a 00                	push   0x0
c0019d6a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019d6e:	50                   	push   eax
c0019d6f:	e8 dc 69 fe ff       	call   c0000750 <memset>
c0019d74:	83 c4 10             	add    esp,0x10
c0019d77:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019d7f:	eb 0f                	jmp    c0019d90 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c0019d81:	3c 3d                	cmp    al,0x3d
c0019d83:	74 07                	je     c0019d8c <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c0019d85:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019d89:	46                   	inc    esi
c0019d8a:	eb 04                	jmp    c0019d90 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c0019d8c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019d90:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019d95:	0f 85 b8 fe ff ff    	jne    c0019c53 <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c0019d9b:	50                   	push   eax
c0019d9c:	50                   	push   eax
c0019d9d:	ff 33                	push   DWORD PTR [ebx]
c0019d9f:	68 e7 c0 02 c0       	push   0xc002c0e7
c0019da4:	e8 06 88 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0019da9:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019daf:	5b                   	pop    ebx
c0019db0:	5e                   	pop    esi
c0019db1:	5f                   	pop    edi
c0019db2:	5d                   	pop    ebp
c0019db3:	c3                   	ret    

c0019db4 <EnvVarContainer::__loadSystem()>:
c0019db4:	83 ec 10             	sub    esp,0x10
c0019db7:	68 80 e2 02 c0       	push   0xc002e280
c0019dbc:	68 12 c1 02 c0       	push   0xc002c112
c0019dc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019dc5:	e8 e8 fd ff ff       	call   c0019bb2 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019dca:	83 c4 1c             	add    esp,0x1c
c0019dcd:	c3                   	ret    

c0019dce <EnvVarContainer::__loadUser()>:
c0019dce:	c3                   	ret    
c0019dcf:	90                   	nop

c0019dd0 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dd4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019dda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019de2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019de5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019de9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019df0:	90                   	nop
c0019df1:	c3                   	ret    

c0019df2 <EnvVarContainer::~EnvVarContainer()>:
c0019df2:	83 ec 0c             	sub    esp,0xc
c0019df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019df9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019dfc:	85 c0                	test   eax,eax
c0019dfe:	74 1d                	je     c0019e1d <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e04:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e06:	85 c0                	test   eax,eax
c0019e08:	74 13                	je     c0019e1d <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019e11:	83 ec 0c             	sub    esp,0xc
c0019e14:	50                   	push   eax
c0019e15:	e8 ac 57 ff ff       	call   c000f5c6 <free>
c0019e1a:	83 c4 10             	add    esp,0x10
c0019e1d:	90                   	nop
c0019e1e:	83 c4 0c             	add    esp,0xc
c0019e21:	c3                   	ret    

c0019e22 <Krnl::getEnv(Process*, char const*)>:
c0019e22:	53                   	push   ebx
c0019e23:	83 ec 08             	sub    esp,0x8
c0019e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e2a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019e2e:	39 05 90 22 03 c0    	cmp    DWORD PTR ds:0xc0032290,eax
c0019e34:	74 04                	je     c0019e3a <Krnl::getEnv(Process*, char const*)+0x18>
c0019e36:	85 c0                	test   eax,eax
c0019e38:	75 0b                	jne    c0019e45 <Krnl::getEnv(Process*, char const*)+0x23>
c0019e3a:	a1 74 18 03 c0       	mov    eax,ds:0xc0031874
c0019e3f:	85 c0                	test   eax,eax
c0019e41:	75 19                	jne    c0019e5c <Krnl::getEnv(Process*, char const*)+0x3a>
c0019e43:	eb 27                	jmp    c0019e6c <Krnl::getEnv(Process*, char const*)+0x4a>
c0019e45:	52                   	push   edx
c0019e46:	52                   	push   edx
c0019e47:	53                   	push   ebx
c0019e48:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019e4e:	e8 5d fc ff ff       	call   c0019ab0 <EnvVarContainer::getEnv(char const*)>
c0019e53:	83 c4 10             	add    esp,0x10
c0019e56:	85 c0                	test   eax,eax
c0019e58:	75 28                	jne    c0019e82 <Krnl::getEnv(Process*, char const*)+0x60>
c0019e5a:	eb de                	jmp    c0019e3a <Krnl::getEnv(Process*, char const*)+0x18>
c0019e5c:	52                   	push   edx
c0019e5d:	52                   	push   edx
c0019e5e:	53                   	push   ebx
c0019e5f:	50                   	push   eax
c0019e60:	e8 4b fc ff ff       	call   c0019ab0 <EnvVarContainer::getEnv(char const*)>
c0019e65:	83 c4 10             	add    esp,0x10
c0019e68:	85 c0                	test   eax,eax
c0019e6a:	75 16                	jne    c0019e82 <Krnl::getEnv(Process*, char const*)+0x60>
c0019e6c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019e70:	a1 78 18 03 c0       	mov    eax,ds:0xc0031878
c0019e75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019e79:	83 c4 08             	add    esp,0x8
c0019e7c:	5b                   	pop    ebx
c0019e7d:	e9 2e fc ff ff       	jmp    c0019ab0 <EnvVarContainer::getEnv(char const*)>
c0019e82:	83 c4 08             	add    esp,0x8
c0019e85:	5b                   	pop    ebx
c0019e86:	c3                   	ret    

c0019e87 <Krnl::setEnvSystem(char const*, char const*)>:
c0019e87:	83 ec 10             	sub    esp,0x10
c0019e8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e92:	ff 35 78 18 03 c0    	push   DWORD PTR ds:0xc0031878
c0019e98:	e8 51 fc ff ff       	call   c0019aee <EnvVarContainer::setEnv(char const*, char const*)>
c0019e9d:	83 c4 1c             	add    esp,0x1c
c0019ea0:	c3                   	ret    

c0019ea1 <Krnl::setEnvUser(char const*, char const*)>:
c0019ea1:	a1 74 18 03 c0       	mov    eax,ds:0xc0031874
c0019ea6:	85 c0                	test   eax,eax
c0019ea8:	74 15                	je     c0019ebf <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019eaa:	83 ec 10             	sub    esp,0x10
c0019ead:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019eb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019eb5:	50                   	push   eax
c0019eb6:	e8 33 fc ff ff       	call   c0019aee <EnvVarContainer::setEnv(char const*, char const*)>
c0019ebb:	83 c4 1c             	add    esp,0x1c
c0019ebe:	c3                   	ret    
c0019ebf:	c3                   	ret    

c0019ec0 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019ec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ec4:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019eca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ece:	e9 1b fc ff ff       	jmp    c0019aee <EnvVarContainer::setEnv(char const*, char const*)>

c0019ed3 <Krnl::deleteEnvSystem(char const*)>:
c0019ed3:	c3                   	ret    

c0019ed4 <Krnl::deleteEnvUser(char const*)>:
c0019ed4:	c3                   	ret    

c0019ed5 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019ed5:	c3                   	ret    

c0019ed6 <Krnl::newProcessEnv(Process*)>:
c0019ed6:	83 ec 28             	sub    esp,0x28
c0019ed9:	6a 0c                	push   0xc
c0019edb:	e8 d6 56 ff ff       	call   c000f5b6 <malloc>
c0019ee0:	5a                   	pop    edx
c0019ee1:	59                   	pop    ecx
c0019ee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ee6:	50                   	push   eax
c0019ee7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019eeb:	e8 e0 fe ff ff       	call   c0019dd0 <EnvVarContainer::EnvVarContainer(Process*)>
c0019ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ef4:	83 c4 2c             	add    esp,0x2c
c0019ef7:	c3                   	ret    

c0019ef8 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019ef8:	57                   	push   edi
c0019ef9:	56                   	push   esi
c0019efa:	53                   	push   ebx
c0019efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eff:	83 ec 0c             	sub    esp,0xc
c0019f02:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019f08:	6a 0c                	push   0xc
c0019f0a:	e8 a7 56 ff ff       	call   c000f5b6 <malloc>
c0019f0f:	89 c3                	mov    ebx,eax
c0019f11:	58                   	pop    eax
c0019f12:	5a                   	pop    edx
c0019f13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f17:	53                   	push   ebx
c0019f18:	e8 b3 fe ff ff       	call   c0019dd0 <EnvVarContainer::EnvVarContainer(Process*)>
c0019f1d:	8b 07                	mov    eax,DWORD PTR [edi]
c0019f1f:	89 03                	mov    DWORD PTR [ebx],eax
c0019f21:	c1 e0 03             	shl    eax,0x3
c0019f24:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f27:	e8 8a 56 ff ff       	call   c000f5b6 <malloc>
c0019f2c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019f2f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019f31:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019f34:	c1 e1 03             	shl    ecx,0x3
c0019f37:	89 c7                	mov    edi,eax
c0019f39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f3b:	83 c4 10             	add    esp,0x10
c0019f3e:	89 d8                	mov    eax,ebx
c0019f40:	5b                   	pop    ebx
c0019f41:	5e                   	pop    esi
c0019f42:	5f                   	pop    edi
c0019f43:	c3                   	ret    

c0019f44 <Krnl::loadSystemEnv()>:
c0019f44:	53                   	push   ebx
c0019f45:	83 ec 14             	sub    esp,0x14
c0019f48:	6a 0c                	push   0xc
c0019f4a:	e8 67 56 ff ff       	call   c000f5b6 <malloc>
c0019f4f:	89 c3                	mov    ebx,eax
c0019f51:	58                   	pop    eax
c0019f52:	5a                   	pop    edx
c0019f53:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c0019f59:	53                   	push   ebx
c0019f5a:	e8 71 fe ff ff       	call   c0019dd0 <EnvVarContainer::EnvVarContainer(Process*)>
c0019f5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f62:	89 1d 78 18 03 c0    	mov    DWORD PTR ds:0xc0031878,ebx
c0019f68:	e8 47 fe ff ff       	call   c0019db4 <EnvVarContainer::__loadSystem()>
c0019f6d:	83 c4 18             	add    esp,0x18
c0019f70:	5b                   	pop    ebx
c0019f71:	c3                   	ret    

c0019f72 <Krnl::loadUserEnv()>:
c0019f72:	53                   	push   ebx
c0019f73:	83 ec 14             	sub    esp,0x14
c0019f76:	6a 0c                	push   0xc
c0019f78:	e8 39 56 ff ff       	call   c000f5b6 <malloc>
c0019f7d:	89 c3                	mov    ebx,eax
c0019f7f:	58                   	pop    eax
c0019f80:	5a                   	pop    edx
c0019f81:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c0019f87:	53                   	push   ebx
c0019f88:	e8 43 fe ff ff       	call   c0019dd0 <EnvVarContainer::EnvVarContainer(Process*)>
c0019f8d:	89 1d 74 18 03 c0    	mov    DWORD PTR ds:0xc0031874,ebx
c0019f93:	83 c4 18             	add    esp,0x18
c0019f96:	5b                   	pop    ebx
c0019f97:	c3                   	ret    

c0019f98 <Krnl::flushEnv()>:
c0019f98:	c3                   	ret    

c0019f99 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019f99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f9d:	8b 15 74 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031874
c0019fa3:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019fa9:	a1 78 18 03 c0       	mov    eax,ds:0xc0031878
c0019fae:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fb0:	03 01                	add    eax,DWORD PTR [ecx]
c0019fb2:	85 d2                	test   edx,edx
c0019fb4:	74 02                	je     c0019fb8 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019fb6:	03 02                	add    eax,DWORD PTR [edx]
c0019fb8:	c3                   	ret    

c0019fb9 <Krnl::getProcessEnvPair(Process*, int)>:
c0019fb9:	57                   	push   edi
c0019fba:	8b 0d 74 18 03 c0    	mov    ecx,DWORD PTR ds:0xc0031874
c0019fc0:	56                   	push   esi
c0019fc1:	85 c9                	test   ecx,ecx
c0019fc3:	53                   	push   ebx
c0019fc4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019fc8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fcc:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019fd2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019fd6:	8b 02                	mov    eax,DWORD PTR [edx]
c0019fd8:	75 47                	jne    c001a021 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019fda:	39 c3                	cmp    ebx,eax
c0019fdc:	7c 47                	jl     c001a025 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019fde:	8b 15 78 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031878
c0019fe4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fe6:	01 c1                	add    ecx,eax
c0019fe8:	39 d9                	cmp    ecx,ebx
c0019fea:	7e 6c                	jle    c001a058 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019fec:	51                   	push   ecx
c0019fed:	89 d9                	mov    ecx,ebx
c0019fef:	29 c1                	sub    ecx,eax
c0019ff1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019ff4:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019ff8:	53                   	push   ebx
c0019ff9:	68 34 c1 02 c0       	push   0xc002c134
c0019ffe:	e8 ac 85 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001a003:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a009:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a00b:	a1 78 18 03 c0       	mov    eax,ds:0xc0031878
c001a010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a013:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a017:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a01a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a01d:	89 06                	mov    DWORD PTR [esi],eax
c001a01f:	eb 51                	jmp    c001a072 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a021:	39 c3                	cmp    ebx,eax
c001a023:	7d 05                	jge    c001a02a <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a025:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a028:	eb 20                	jmp    c001a04a <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a02a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a02c:	8d 14 07             	lea    edx,[edi+eax*1]
c001a02f:	39 da                	cmp    edx,ebx
c001a031:	7e 04                	jle    c001a037 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a033:	29 c3                	sub    ebx,eax
c001a035:	eb 10                	jmp    c001a047 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a037:	8b 0d 78 18 03 c0    	mov    ecx,DWORD PTR ds:0xc0031878
c001a03d:	03 11                	add    edx,DWORD PTR [ecx]
c001a03f:	39 da                	cmp    edx,ebx
c001a041:	7e 15                	jle    c001a058 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a043:	29 c3                	sub    ebx,eax
c001a045:	29 fb                	sub    ebx,edi
c001a047:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a04a:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a04e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a051:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a054:	89 06                	mov    DWORD PTR [esi],eax
c001a056:	eb 1d                	jmp    c001a075 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a058:	83 ec 0c             	sub    esp,0xc
c001a05b:	68 48 c1 02 c0       	push   0xc002c148
c001a060:	e8 18 00 00 00       	call   c001a07d <Krnl::panic(char const*)>
c001a065:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a06b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a072:	83 c4 10             	add    esp,0x10
c001a075:	89 f0                	mov    eax,esi
c001a077:	5b                   	pop    ebx
c001a078:	5e                   	pop    esi
c001a079:	5f                   	pop    edi
c001a07a:	c2 04 00             	ret    0x4

c001a07d <Krnl::panic(char const*)>:
c001a07d:	55                   	push   ebp
c001a07e:	89 e5                	mov    ebp,esp
c001a080:	53                   	push   ebx
c001a081:	83 ec 10             	sub    esp,0x10
c001a084:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a087:	fa                   	cli    
c001a088:	c6 05 84 18 03 c0 01 	mov    BYTE PTR ds:0xc0031884,0x1
c001a08f:	53                   	push   ebx
c001a090:	e8 7b 55 ff ff       	call   c000f610 <Krnl::setBootMessage(char const*)>
c001a095:	58                   	pop    eax
c001a096:	c6 05 80 dc 02 c0 00 	mov    BYTE PTR ds:0xc002dc80,0x0
c001a09d:	5a                   	pop    edx
c001a09e:	53                   	push   ebx
c001a09f:	68 62 c1 02 c0       	push   0xc002c162
c001a0a4:	e8 06 85 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001a0a9:	59                   	pop    ecx
c001a0aa:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a0af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0b5:	e8 0f 62 ff ff       	call   c00102c9 <setActiveTerminal(VgaText*)>
c001a0ba:	83 c4 0c             	add    esp,0xc
c001a0bd:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a0c2:	6a 01                	push   0x1
c001a0c4:	6a 0f                	push   0xf
c001a0c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0cc:	e8 57 60 ff ff       	call   c0010128 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a0d1:	58                   	pop    eax
c001a0d2:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a0d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0dd:	e8 68 65 ff ff       	call   c001064a <VgaText::clearScreen()>
c001a0e2:	58                   	pop    eax
c001a0e3:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a0e8:	5a                   	pop    edx
c001a0e9:	68 7b c1 02 c0       	push   0xc002c17b
c001a0ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0f4:	e8 dd 66 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a0f9:	59                   	pop    ecx
c001a0fa:	58                   	pop    eax
c001a0fb:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a100:	68 20 c2 02 c0       	push   0xc002c220
c001a105:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a10b:	e8 c6 66 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a110:	58                   	pop    eax
c001a111:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a116:	5a                   	pop    edx
c001a117:	68 97 c1 02 c0       	push   0xc002c197
c001a11c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a122:	e8 af 66 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a127:	59                   	pop    ecx
c001a128:	58                   	pop    eax
c001a129:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a12e:	53                   	push   ebx
c001a12f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a135:	e8 9c 66 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a13a:	58                   	pop    eax
c001a13b:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a140:	5a                   	pop    edx
c001a141:	68 b7 c1 02 c0       	push   0xc002c1b7
c001a146:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a14c:	e8 85 66 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a151:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c001a156:	83 c4 10             	add    esp,0x10
c001a159:	85 c0                	test   eax,eax
c001a15b:	74 02                	je     c001a15f <Krnl::panic(char const*)+0xe2>
c001a15d:	ff d0                	call   eax
c001a15f:	83 ec 0c             	sub    esp,0xc
c001a162:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a165:	e8 9c 32 00 00       	call   c001d406 <Thr::getDriverNameFromAddress(unsigned long)>
c001a16a:	83 c4 10             	add    esp,0x10
c001a16d:	89 c3                	mov    ebx,eax
c001a16f:	85 c0                	test   eax,eax
c001a171:	0f 84 4e 02 00 00    	je     c001a3c5 <Krnl::panic(char const*)+0x348>
c001a177:	83 ec 08             	sub    esp,0x8
c001a17a:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a17f:	68 5c c2 02 c0       	push   0xc002c25c
c001a184:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a18a:	e8 47 66 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a18f:	58                   	pop    eax
c001a190:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a195:	5a                   	pop    edx
c001a196:	68 97 c1 02 c0       	push   0xc002c197
c001a19b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1a1:	e8 30 66 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a1a6:	59                   	pop    ecx
c001a1a7:	58                   	pop    eax
c001a1a8:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a1ad:	53                   	push   ebx
c001a1ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1b4:	e8 1d 66 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a1b9:	83 c4 10             	add    esp,0x10
c001a1bc:	83 ec 08             	sub    esp,0x8
c001a1bf:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a1c4:	68 b6 c1 02 c0       	push   0xc002c1b6
c001a1c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1cf:	e8 02 66 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a1d4:	58                   	pop    eax
c001a1d5:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a1da:	5a                   	pop    edx
c001a1db:	68 b4 c2 02 c0       	push   0xc002c2b4
c001a1e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1e6:	e8 eb 65 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a1eb:	59                   	pop    ecx
c001a1ec:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a1f1:	5b                   	pop    ebx
c001a1f2:	68 f4 c2 02 c0       	push   0xc002c2f4
c001a1f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1fd:	e8 d4 65 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a202:	58                   	pop    eax
c001a203:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a208:	5a                   	pop    edx
c001a209:	68 a2 c1 02 c0       	push   0xc002c1a2
c001a20e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a214:	e8 bd 65 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a219:	59                   	pop    ecx
c001a21a:	5b                   	pop    ebx
c001a21b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a21e:	68 ba c1 02 c0       	push   0xc002c1ba
c001a223:	e8 87 83 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001a228:	58                   	pop    eax
c001a229:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a22c:	5a                   	pop    edx
c001a22d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a230:	68 c3 c1 02 c0       	push   0xc002c1c3
c001a235:	e8 75 83 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001a23a:	59                   	pop    ecx
c001a23b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a23e:	5b                   	pop    ebx
c001a23f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a241:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a244:	68 cc c1 02 c0       	push   0xc002c1cc
c001a249:	e8 61 83 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001a24e:	58                   	pop    eax
c001a24f:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a254:	5a                   	pop    edx
c001a255:	68 38 c3 02 c0       	push   0xc002c338
c001a25a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a260:	e8 71 65 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a265:	59                   	pop    ecx
c001a266:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a26b:	5b                   	pop    ebx
c001a26c:	68 d5 c1 02 c0       	push   0xc002c1d5
c001a271:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a277:	e8 5a 65 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a27c:	0f 20 c0             	mov    eax,cr0
c001a27f:	5a                   	pop    edx
c001a280:	59                   	pop    ecx
c001a281:	50                   	push   eax
c001a282:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a287:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a28d:	e8 fe 64 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c001a292:	5b                   	pop    ebx
c001a293:	58                   	pop    eax
c001a294:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a299:	68 df c1 02 c0       	push   0xc002c1df
c001a29e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2a4:	e8 2d 65 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a2a9:	0f 20 d0             	mov    eax,cr2
c001a2ac:	5a                   	pop    edx
c001a2ad:	59                   	pop    ecx
c001a2ae:	50                   	push   eax
c001a2af:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a2b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2ba:	e8 d1 64 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c001a2bf:	5b                   	pop    ebx
c001a2c0:	58                   	pop    eax
c001a2c1:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a2c6:	68 e9 c1 02 c0       	push   0xc002c1e9
c001a2cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2d1:	e8 00 65 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a2d6:	0f 20 d8             	mov    eax,cr3
c001a2d9:	5a                   	pop    edx
c001a2da:	59                   	pop    ecx
c001a2db:	50                   	push   eax
c001a2dc:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a2e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2e7:	e8 a4 64 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c001a2ec:	5b                   	pop    ebx
c001a2ed:	58                   	pop    eax
c001a2ee:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a2f3:	68 fc c1 02 c0       	push   0xc002c1fc
c001a2f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2fe:	e8 d3 64 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a303:	0f 20 e0             	mov    eax,cr4
c001a306:	5a                   	pop    edx
c001a307:	59                   	pop    ecx
c001a308:	50                   	push   eax
c001a309:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a30e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a314:	e8 77 64 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c001a319:	5b                   	pop    ebx
c001a31a:	58                   	pop    eax
c001a31b:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a320:	68 06 c2 02 c0       	push   0xc002c206
c001a325:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a32b:	e8 a6 64 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a330:	5a                   	pop    edx
c001a331:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a336:	59                   	pop    ecx
c001a337:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a33d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a340:	50                   	push   eax
c001a341:	e8 4a 64 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c001a346:	5b                   	pop    ebx
c001a347:	58                   	pop    eax
c001a348:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a34d:	68 d3 d0 02 c0       	push   0xc002d0d3
c001a352:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a358:	e8 79 64 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a35d:	5a                   	pop    edx
c001a35e:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a363:	59                   	pop    ecx
c001a364:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a36a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a36d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a370:	50                   	push   eax
c001a371:	e8 1a 64 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c001a376:	5b                   	pop    ebx
c001a377:	58                   	pop    eax
c001a378:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a37d:	68 d3 d0 02 c0       	push   0xc002d0d3
c001a382:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a388:	e8 49 64 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a38d:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a392:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a395:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a39b:	8b 12                	mov    edx,DWORD PTR [edx]
c001a39d:	59                   	pop    ecx
c001a39e:	5b                   	pop    ebx
c001a39f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a3a2:	50                   	push   eax
c001a3a3:	e8 e8 63 ff ff       	call   c0010790 <VgaText::putx(unsigned int)>
c001a3a8:	83 c4 10             	add    esp,0x10
c001a3ab:	b2 fe                	mov    dl,0xfe
c001a3ad:	e4 60                	in     al,0x60
c001a3af:	3c 1c                	cmp    al,0x1c
c001a3b1:	74 04                	je     c001a3b7 <Krnl::panic(char const*)+0x33a>
c001a3b3:	3c 5a                	cmp    al,0x5a
c001a3b5:	75 f6                	jne    c001a3ad <Krnl::panic(char const*)+0x330>
c001a3b7:	e4 64                	in     al,0x64
c001a3b9:	a8 02                	test   al,0x2
c001a3bb:	75 fa                	jne    c001a3b7 <Krnl::panic(char const*)+0x33a>
c001a3bd:	88 d0                	mov    al,dl
c001a3bf:	e6 64                	out    0x64,al
c001a3c1:	fa                   	cli    
c001a3c2:	f4                   	hlt    
c001a3c3:	eb e8                	jmp    c001a3ad <Krnl::panic(char const*)+0x330>
c001a3c5:	50                   	push   eax
c001a3c6:	50                   	push   eax
c001a3c7:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a3cc:	68 88 c2 02 c0       	push   0xc002c288
c001a3d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3d7:	e8 fa 63 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a3dc:	58                   	pop    eax
c001a3dd:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a3e2:	5a                   	pop    edx
c001a3e3:	68 97 c1 02 c0       	push   0xc002c197
c001a3e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3ee:	e8 e3 63 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a3f3:	59                   	pop    ecx
c001a3f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a3f9:	5b                   	pop    ebx
c001a3fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a3fd:	83 c0 0c             	add    eax,0xc
c001a400:	50                   	push   eax
c001a401:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001a406:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a40c:	e8 c5 63 ff ff       	call   c00107d6 <VgaText::puts(char const*)>
c001a411:	83 c4 10             	add    esp,0x10
c001a414:	e9 a3 fd ff ff       	jmp    c001a1bc <Krnl::panic(char const*)+0x13f>

c001a419 <Net::switchEndian16(unsigned short)>:
c001a419:	83 ec 04             	sub    esp,0x4
c001a41c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a420:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a424:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a428:	c1 f8 08             	sar    eax,0x8
c001a42b:	89 c2                	mov    edx,eax
c001a42d:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a431:	c1 e0 08             	shl    eax,0x8
c001a434:	09 d0                	or     eax,edx
c001a436:	83 c4 04             	add    esp,0x4
c001a439:	c3                   	ret    

c001a43a <Net::switchEndian32(unsigned int)>:
c001a43a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a43e:	c1 e8 18             	shr    eax,0x18
c001a441:	89 c2                	mov    edx,eax
c001a443:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a447:	c1 e0 08             	shl    eax,0x8
c001a44a:	25 00 00 ff 00       	and    eax,0xff0000
c001a44f:	09 c2                	or     edx,eax
c001a451:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a455:	c1 e8 08             	shr    eax,0x8
c001a458:	25 00 ff 00 00       	and    eax,0xff00
c001a45d:	09 c2                	or     edx,eax
c001a45f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a463:	c1 e0 18             	shl    eax,0x18
c001a466:	09 d0                	or     eax,edx
c001a468:	c3                   	ret    

c001a469 <Net::crc32Calc(unsigned char*, int)>:
c001a469:	83 ec 10             	sub    esp,0x10
c001a46c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a471:	75 07                	jne    c001a47a <Net::crc32Calc(unsigned char*, int)+0x11>
c001a473:	b8 00 00 00 00       	mov    eax,0x0
c001a478:	eb 7c                	jmp    c001a4f6 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a47a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a47f:	7f 07                	jg     c001a488 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a481:	b8 00 00 00 00       	mov    eax,0x0
c001a486:	eb 6e                	jmp    c001a4f6 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a488:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a490:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a498:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a49c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a4a0:	7d 4e                	jge    c001a4f0 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a4a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a4a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4aa:	01 d0                	add    eax,edx
c001a4ac:	8a 00                	mov    al,BYTE PTR [eax]
c001a4ae:	0f b6 c0             	movzx  eax,al
c001a4b1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a4b5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a4bd:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a4c2:	7f 26                	jg     c001a4ea <Net::crc32Calc(unsigned char*, int)+0x81>
c001a4c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4c8:	83 e0 01             	and    eax,0x1
c001a4cb:	74 0d                	je     c001a4da <Net::crc32Calc(unsigned char*, int)+0x71>
c001a4cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4d1:	d1 e8                	shr    eax,1
c001a4d3:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a4d8:	eb 06                	jmp    c001a4e0 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a4da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4de:	d1 e8                	shr    eax,1
c001a4e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4e4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a4e8:	eb d3                	jmp    c001a4bd <Net::crc32Calc(unsigned char*, int)+0x54>
c001a4ea:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a4ee:	eb a8                	jmp    c001a498 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a4f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4f4:	f7 d0                	not    eax
c001a4f6:	83 c4 10             	add    esp,0x10
c001a4f9:	c3                   	ret    

c001a4fa <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a4fa:	57                   	push   edi
c001a4fb:	56                   	push   esi
c001a4fc:	53                   	push   ebx
c001a4fd:	83 ec 60             	sub    esp,0x60
c001a500:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a507:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a50b:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a513:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a518:	7f 1a                	jg     c001a534 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a51a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a521:	8d 50 01             	lea    edx,[eax+0x1]
c001a524:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a52b:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a52e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a532:	eb df                	jmp    c001a513 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a53b:	8d 50 01             	lea    edx,[eax+0x1]
c001a53e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a545:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a548:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a54f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a553:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a557:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a55b:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a563:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a567:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a56b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a56f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a573:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a577:	89 c6                	mov    esi,eax
c001a579:	89 d7                	mov    edi,edx
c001a57b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a57d:	89 c8                	mov    eax,ecx
c001a57f:	89 fa                	mov    edx,edi
c001a581:	89 f3                	mov    ebx,esi
c001a583:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a58b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a58e:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a596:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a59d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a5a1:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a5a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a5a9:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a5b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a5b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a5b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a5bd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a5c1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a5c5:	89 c6                	mov    esi,eax
c001a5c7:	89 d7                	mov    edi,edx
c001a5c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5cb:	89 c8                	mov    eax,ecx
c001a5cd:	89 fa                	mov    edx,edi
c001a5cf:	89 f3                	mov    ebx,esi
c001a5d1:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a5d5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a5d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a5dd:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a5e5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5ec:	0f b7 c0             	movzx  eax,ax
c001a5ef:	c1 f8 08             	sar    eax,0x8
c001a5f2:	89 c1                	mov    ecx,eax
c001a5f4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a5fb:	8d 50 01             	lea    edx,[eax+0x1]
c001a5fe:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a605:	88 ca                	mov    dl,cl
c001a607:	88 10                	mov    BYTE PTR [eax],dl
c001a609:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a610:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a617:	8d 48 01             	lea    ecx,[eax+0x1]
c001a61a:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a621:	88 10                	mov    BYTE PTR [eax],dl
c001a623:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a627:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a62b:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a632:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a636:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a63a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a63e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a642:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a646:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a64a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a64e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a652:	89 c6                	mov    esi,eax
c001a654:	89 d7                	mov    edi,edx
c001a656:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a658:	89 c8                	mov    eax,ecx
c001a65a:	89 fa                	mov    edx,edi
c001a65c:	89 f3                	mov    ebx,esi
c001a65e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a662:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a666:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a66a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a66e:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a675:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a67c:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a680:	50                   	push   eax
c001a681:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a685:	e8 df fd ff ff       	call   c001a469 <Net::crc32Calc(unsigned char*, int)>
c001a68a:	83 c4 08             	add    esp,0x8
c001a68d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a691:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a695:	c1 e8 18             	shr    eax,0x18
c001a698:	89 c1                	mov    ecx,eax
c001a69a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6a1:	8d 50 01             	lea    edx,[eax+0x1]
c001a6a4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a6ab:	88 ca                	mov    dl,cl
c001a6ad:	88 10                	mov    BYTE PTR [eax],dl
c001a6af:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a6b3:	c1 e8 10             	shr    eax,0x10
c001a6b6:	89 c1                	mov    ecx,eax
c001a6b8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6bf:	8d 50 01             	lea    edx,[eax+0x1]
c001a6c2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a6c9:	88 ca                	mov    dl,cl
c001a6cb:	88 10                	mov    BYTE PTR [eax],dl
c001a6cd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a6d1:	c1 e8 08             	shr    eax,0x8
c001a6d4:	89 c1                	mov    ecx,eax
c001a6d6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6dd:	8d 50 01             	lea    edx,[eax+0x1]
c001a6e0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a6e7:	88 ca                	mov    dl,cl
c001a6e9:	88 10                	mov    BYTE PTR [eax],dl
c001a6eb:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6f2:	8d 50 01             	lea    edx,[eax+0x1]
c001a6f5:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a6fc:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a700:	88 10                	mov    BYTE PTR [eax],dl
c001a702:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a706:	83 c4 60             	add    esp,0x60
c001a709:	5b                   	pop    ebx
c001a70a:	5e                   	pop    esi
c001a70b:	5f                   	pop    edi
c001a70c:	c3                   	ret    

c001a70d <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a70d:	57                   	push   edi
c001a70e:	56                   	push   esi
c001a70f:	53                   	push   ebx
c001a710:	83 ec 70             	sub    esp,0x70
c001a713:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a71a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a71e:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a726:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a72d:	83 c0 0e             	add    eax,0xe
c001a730:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a734:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a73b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a73f:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a747:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a74b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a74f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a753:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a757:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a75b:	89 c6                	mov    esi,eax
c001a75d:	89 d7                	mov    edi,edx
c001a75f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a761:	89 c8                	mov    eax,ecx
c001a763:	89 fa                	mov    edx,edi
c001a765:	89 f3                	mov    ebx,esi
c001a767:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a76b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a76f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a773:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a77b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a782:	83 c0 08             	add    eax,0x8
c001a785:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a789:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a790:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a794:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a79c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a7a0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a7a4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a7a8:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a7ac:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a7b0:	89 c6                	mov    esi,eax
c001a7b2:	89 d7                	mov    edi,edx
c001a7b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a7b6:	89 c8                	mov    eax,ecx
c001a7b8:	89 fa                	mov    edx,edi
c001a7ba:	89 f3                	mov    ebx,esi
c001a7bc:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a7c0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a7c4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a7c8:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a7d0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a7d7:	8d 50 01             	lea    edx,[eax+0x1]
c001a7da:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a7e1:	8a 00                	mov    al,BYTE PTR [eax]
c001a7e3:	0f b6 c0             	movzx  eax,al
c001a7e6:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a7eb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a7f2:	8d 50 01             	lea    edx,[eax+0x1]
c001a7f5:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a7fc:	8a 00                	mov    al,BYTE PTR [eax]
c001a7fe:	0f b6 c0             	movzx  eax,al
c001a801:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a806:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a80b:	c1 e0 08             	shl    eax,0x8
c001a80e:	89 c2                	mov    edx,eax
c001a810:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a814:	09 d0                	or     eax,edx
c001a816:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a81d:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a821:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a829:	75 46                	jne    c001a871 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a82b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a832:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a835:	66 3d dc 05          	cmp    ax,0x5dc
c001a839:	77 16                	ja     c001a851 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a83b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a842:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a845:	0f b7 c0             	movzx  eax,ax
c001a848:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a84f:	eb 20                	jmp    c001a871 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a851:	83 ec 0c             	sub    esp,0xc
c001a854:	68 60 c3 02 c0       	push   0xc002c360
c001a859:	e8 51 7d ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001a85e:	83 c4 10             	add    esp,0x10
c001a861:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a868:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a86c:	e9 17 01 00 00       	jmp    c001a988 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a871:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a878:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a87f:	8b 12                	mov    edx,DWORD PTR [edx]
c001a881:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a885:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a88c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a890:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a894:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a898:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a89c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a8a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a8a8:	89 c6                	mov    esi,eax
c001a8aa:	89 d7                	mov    edi,edx
c001a8ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8ae:	89 c8                	mov    eax,ecx
c001a8b0:	89 fa                	mov    edx,edi
c001a8b2:	89 f3                	mov    ebx,esi
c001a8b4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a8b8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a8bc:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8bf:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8c6:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a8cd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a8d4:	8d 50 01             	lea    edx,[eax+0x1]
c001a8d7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a8de:	8a 00                	mov    al,BYTE PTR [eax]
c001a8e0:	0f b6 c0             	movzx  eax,al
c001a8e3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a8e7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a8ee:	8d 50 01             	lea    edx,[eax+0x1]
c001a8f1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a8f8:	8a 00                	mov    al,BYTE PTR [eax]
c001a8fa:	0f b6 c0             	movzx  eax,al
c001a8fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a901:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a908:	8d 50 01             	lea    edx,[eax+0x1]
c001a90b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a912:	8a 00                	mov    al,BYTE PTR [eax]
c001a914:	0f b6 c0             	movzx  eax,al
c001a917:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a91b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a922:	8d 50 01             	lea    edx,[eax+0x1]
c001a925:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a92c:	8a 00                	mov    al,BYTE PTR [eax]
c001a92e:	0f b6 c0             	movzx  eax,al
c001a931:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a935:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a939:	c1 e0 18             	shl    eax,0x18
c001a93c:	89 c2                	mov    edx,eax
c001a93e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a942:	c1 e0 10             	shl    eax,0x10
c001a945:	09 c2                	or     edx,eax
c001a947:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a94b:	c1 e0 08             	shl    eax,0x8
c001a94e:	09 d0                	or     eax,edx
c001a950:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a954:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a958:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a95f:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a963:	83 e8 04             	sub    eax,0x4
c001a966:	83 ec 08             	sub    esp,0x8
c001a969:	50                   	push   eax
c001a96a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a96e:	e8 f6 fa ff ff       	call   c001a469 <Net::crc32Calc(unsigned char*, int)>
c001a973:	83 c4 10             	add    esp,0x10
c001a976:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a97a:	0f 94 c2             	sete   dl
c001a97d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a984:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a987:	90                   	nop
c001a988:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a98f:	83 c4 70             	add    esp,0x70
c001a992:	5b                   	pop    ebx
c001a993:	5e                   	pop    esi
c001a994:	5f                   	pop    edi
c001a995:	c2 04 00             	ret    0x4

c001a998 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a998:	55                   	push   ebp
c001a999:	57                   	push   edi
c001a99a:	56                   	push   esi
c001a99b:	53                   	push   ebx
c001a99c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a9a2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a9a9:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a9ab:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a9ae:	80 fb 40             	cmp    bl,0x40
c001a9b1:	75 1b                	jne    c001a9ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a9b3:	8a 16                	mov    dl,BYTE PTR [esi]
c001a9b5:	84 d2                	test   dl,dl
c001a9b7:	0f 84 f1 00 00 00    	je     c001aaae <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a9bd:	8d 46 01             	lea    eax,[esi+0x1]
c001a9c0:	80 fa 3a             	cmp    dl,0x3a
c001a9c3:	74 04                	je     c001a9c9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a9c5:	89 c6                	mov    esi,eax
c001a9c7:	eb ea                	jmp    c001a9b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a9c9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a9cc:	89 c6                	mov    esi,eax
c001a9ce:	50                   	push   eax
c001a9cf:	6a 40                	push   0x40
c001a9d1:	6a 00                	push   0x0
c001a9d3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a9d7:	50                   	push   eax
c001a9d8:	e8 73 5d fe ff       	call   c0000750 <memset>
c001a9dd:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a9e4:	31 c0                	xor    eax,eax
c001a9e6:	83 c4 10             	add    esp,0x10
c001a9e9:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a9eb:	84 c9                	test   cl,cl
c001a9ed:	0f 84 bb 00 00 00    	je     c001aaae <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a9f3:	3d c7 00 00 00       	cmp    eax,0xc7
c001a9f8:	0f 8f b0 00 00 00    	jg     c001aaae <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a9fe:	80 f9 0a             	cmp    cl,0xa
c001aa01:	0f 85 98 00 00 00    	jne    c001aa9f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001aa07:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001aa0c:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001aa10:	a8 df                	test   al,0xdf
c001aa12:	0f 94 c1             	sete   cl
c001aa15:	3c 23                	cmp    al,0x23
c001aa17:	0f 94 c2             	sete   dl
c001aa1a:	08 d1                	or     cl,dl
c001aa1c:	75 4a                	jne    c001aa68 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa1e:	8d 50 f7             	lea    edx,[eax-0x9]
c001aa21:	80 fa 01             	cmp    dl,0x1
c001aa24:	76 42                	jbe    c001aa68 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa26:	3c 5b                	cmp    al,0x5b
c001aa28:	75 42                	jne    c001aa6c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001aa2a:	80 fb 40             	cmp    bl,0x40
c001aa2d:	75 39                	jne    c001aa68 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa2f:	83 ec 0c             	sub    esp,0xc
c001aa32:	8d 54 24 65          	lea    edx,[esp+0x65]
c001aa36:	52                   	push   edx
c001aa37:	e8 30 5d fe ff       	call   c000076c <strlen>
c001aa3c:	83 c4 10             	add    esp,0x10
c001aa3f:	83 f8 3f             	cmp    eax,0x3f
c001aa42:	77 6a                	ja     c001aaae <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aa44:	50                   	push   eax
c001aa45:	50                   	push   eax
c001aa46:	8d 54 24 61          	lea    edx,[esp+0x61]
c001aa4a:	52                   	push   edx
c001aa4b:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aa4f:	52                   	push   edx
c001aa50:	e8 b7 5d fe ff       	call   c000080c <strcpy>
c001aa55:	58                   	pop    eax
c001aa56:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aa5a:	52                   	push   edx
c001aa5b:	e8 0c 5d fe ff       	call   c000076c <strlen>
c001aa60:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001aa65:	83 c4 10             	add    esp,0x10
c001aa68:	31 d2                	xor    edx,edx
c001aa6a:	eb 3a                	jmp    c001aaa6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001aa6c:	80 fb 40             	cmp    bl,0x40
c001aa6f:	74 06                	je     c001aa77 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001aa71:	8d 44 24 58          	lea    eax,[esp+0x58]
c001aa75:	eb 20                	jmp    c001aa97 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001aa77:	50                   	push   eax
c001aa78:	50                   	push   eax
c001aa79:	55                   	push   ebp
c001aa7a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aa7e:	50                   	push   eax
c001aa7f:	e8 14 5e fe ff       	call   c0000898 <strcmp>
c001aa84:	83 c4 10             	add    esp,0x10
c001aa87:	85 c0                	test   eax,eax
c001aa89:	75 dd                	jne    c001aa68 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa8b:	eb e4                	jmp    c001aa71 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001aa8d:	8d 50 01             	lea    edx,[eax+0x1]
c001aa90:	80 f9 3d             	cmp    cl,0x3d
c001aa93:	74 1d                	je     c001aab2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001aa95:	89 d0                	mov    eax,edx
c001aa97:	8a 08                	mov    cl,BYTE PTR [eax]
c001aa99:	84 c9                	test   cl,cl
c001aa9b:	75 f0                	jne    c001aa8d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aa9d:	eb 0f                	jmp    c001aaae <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aa9f:	8d 50 01             	lea    edx,[eax+0x1]
c001aaa2:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aaa6:	47                   	inc    edi
c001aaa7:	89 d0                	mov    eax,edx
c001aaa9:	e9 3b ff ff ff       	jmp    c001a9e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aaae:	31 c0                	xor    eax,eax
c001aab0:	eb 33                	jmp    c001aae5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aab2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aab6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001aab9:	50                   	push   eax
c001aaba:	50                   	push   eax
c001aabb:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aabf:	50                   	push   eax
c001aac0:	56                   	push   esi
c001aac1:	e8 d2 5d fe ff       	call   c0000898 <strcmp>
c001aac6:	83 c4 10             	add    esp,0x10
c001aac9:	85 c0                	test   eax,eax
c001aacb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aacf:	75 97                	jne    c001aa68 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aad1:	51                   	push   ecx
c001aad2:	51                   	push   ecx
c001aad3:	52                   	push   edx
c001aad4:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aadb:	e8 2c 5d fe ff       	call   c000080c <strcpy>
c001aae0:	83 c4 10             	add    esp,0x10
c001aae3:	b0 01                	mov    al,0x1
c001aae5:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aaeb:	5b                   	pop    ebx
c001aaec:	5e                   	pop    esi
c001aaed:	5f                   	pop    edi
c001aaee:	5d                   	pop    ebp
c001aaef:	c3                   	ret    

c001aaf0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aaf0:	57                   	push   edi
c001aaf1:	56                   	push   esi
c001aaf2:	53                   	push   ebx
c001aaf3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aaf9:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ab00:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ab07:	53                   	push   ebx
c001ab08:	e8 5f 5c fe ff       	call   c000076c <strlen>
c001ab0d:	89 34 24             	mov    DWORD PTR [esp],esi
c001ab10:	89 c7                	mov    edi,eax
c001ab12:	e8 55 5c fe ff       	call   c000076c <strlen>
c001ab17:	83 c4 10             	add    esp,0x10
c001ab1a:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ab1e:	3d ff 00 00 00       	cmp    eax,0xff
c001ab23:	0f 87 d3 00 00 00    	ja     c001abfc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ab29:	57                   	push   edi
c001ab2a:	57                   	push   edi
c001ab2b:	56                   	push   esi
c001ab2c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ab30:	56                   	push   esi
c001ab31:	e8 d6 5c fe ff       	call   c000080c <strcpy>
c001ab36:	58                   	pop    eax
c001ab37:	5a                   	pop    edx
c001ab38:	68 b5 c8 02 c0       	push   0xc002c8b5
c001ab3d:	56                   	push   esi
c001ab3e:	e8 09 5e fe ff       	call   c000094c <strcat>
c001ab43:	59                   	pop    ecx
c001ab44:	5f                   	pop    edi
c001ab45:	53                   	push   ebx
c001ab46:	56                   	push   esi
c001ab47:	e8 00 5e fe ff       	call   c000094c <strcat>
c001ab4c:	58                   	pop    eax
c001ab4d:	5a                   	pop    edx
c001ab4e:	68 ac c3 02 c0       	push   0xc002c3ac
c001ab53:	56                   	push   esi
c001ab54:	e8 f3 5d fe ff       	call   c000094c <strcat>
c001ab59:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ab60:	e8 51 4a ff ff       	call   c000f5b6 <malloc>
c001ab65:	83 c4 0c             	add    esp,0xc
c001ab68:	89 c3                	mov    ebx,eax
c001ab6a:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c001ab70:	56                   	push   esi
c001ab71:	50                   	push   eax
c001ab72:	e8 97 7f ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c001ab77:	83 c4 10             	add    esp,0x10
c001ab7a:	85 db                	test   ebx,ebx
c001ab7c:	74 7e                	je     c001abfc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ab7e:	51                   	push   ecx
c001ab7f:	51                   	push   ecx
c001ab80:	6a 01                	push   0x1
c001ab82:	53                   	push   ebx
c001ab83:	e8 ea 7f ff ff       	call   c0012b72 <File::open(FileOpenMode)>
c001ab88:	83 c4 10             	add    esp,0x10
c001ab8b:	85 c0                	test   eax,eax
c001ab8d:	74 08                	je     c001ab97 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ab8f:	83 ec 0c             	sub    esp,0xc
c001ab92:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab94:	53                   	push   ebx
c001ab95:	eb 5f                	jmp    c001abf6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ab97:	52                   	push   edx
c001ab98:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ab9c:	50                   	push   eax
c001ab9d:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aba1:	50                   	push   eax
c001aba2:	53                   	push   ebx
c001aba3:	e8 76 82 ff ff       	call   c0012e1e <File::stat(unsigned long long*, bool*)>
c001aba8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001abac:	83 c4 10             	add    esp,0x10
c001abaf:	89 c1                	mov    ecx,eax
c001abb1:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001abb5:	74 31                	je     c001abe8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001abb7:	83 ec 0c             	sub    esp,0xc
c001abba:	50                   	push   eax
c001abbb:	e8 f6 49 ff ff       	call   c000f5b6 <malloc>
c001abc0:	89 c6                	mov    esi,eax
c001abc2:	58                   	pop    eax
c001abc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abc5:	8d 54 24 20          	lea    edx,[esp+0x20]
c001abc9:	52                   	push   edx
c001abca:	56                   	push   esi
c001abcb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001abcf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001abd3:	53                   	push   ebx
c001abd4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abd7:	83 c4 20             	add    esp,0x20
c001abda:	85 c0                	test   eax,eax
c001abdc:	75 0a                	jne    c001abe8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001abde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abe2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001abe6:	74 18                	je     c001ac00 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001abe8:	83 ec 0c             	sub    esp,0xc
c001abeb:	53                   	push   ebx
c001abec:	e8 df 7f ff ff       	call   c0012bd0 <File::close()>
c001abf1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abf3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abf6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abf9:	83 c4 10             	add    esp,0x10
c001abfc:	31 c0                	xor    eax,eax
c001abfe:	eb 3b                	jmp    c001ac3b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ac00:	83 ec 0c             	sub    esp,0xc
c001ac03:	53                   	push   ebx
c001ac04:	e8 c7 7f ff ff       	call   c0012bd0 <File::close()>
c001ac09:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac0e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac11:	83 c4 0c             	add    esp,0xc
c001ac14:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ac1b:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ac22:	56                   	push   esi
c001ac23:	e8 70 fd ff ff       	call   c001a998 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ac28:	89 34 24             	mov    DWORD PTR [esp],esi
c001ac2b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ac2f:	e8 92 49 ff ff       	call   c000f5c6 <free>
c001ac34:	83 c4 10             	add    esp,0x10
c001ac37:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ac3b:	81 c4 20 01 00 00    	add    esp,0x120
c001ac41:	5b                   	pop    ebx
c001ac42:	5e                   	pop    esi
c001ac43:	5f                   	pop    edi
c001ac44:	c3                   	ret    

c001ac45 <Reg::getLine(char*, char*, char*)>:
c001ac45:	57                   	push   edi
c001ac46:	56                   	push   esi
c001ac47:	53                   	push   ebx
c001ac48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac4c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ac50:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ac54:	57                   	push   edi
c001ac55:	56                   	push   esi
c001ac56:	53                   	push   ebx
c001ac57:	68 b1 c3 02 c0       	push   0xc002c3b1
c001ac5c:	e8 8f fe ff ff       	call   c001aaf0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ac61:	83 c4 10             	add    esp,0x10
c001ac64:	84 c0                	test   al,al
c001ac66:	75 10                	jne    c001ac78 <Reg::getLine(char*, char*, char*)+0x33>
c001ac68:	57                   	push   edi
c001ac69:	56                   	push   esi
c001ac6a:	53                   	push   ebx
c001ac6b:	68 d6 c3 02 c0       	push   0xc002c3d6
c001ac70:	e8 7b fe ff ff       	call   c001aaf0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ac75:	83 c4 10             	add    esp,0x10
c001ac78:	5b                   	pop    ebx
c001ac79:	5e                   	pop    esi
c001ac7a:	5f                   	pop    edi
c001ac7b:	c3                   	ret    

c001ac7c <Reg::readInt(char*, char*, int*)>:
c001ac7c:	55                   	push   ebp
c001ac7d:	57                   	push   edi
c001ac7e:	56                   	push   esi
c001ac7f:	53                   	push   ebx
c001ac80:	81 ec f0 00 00 00    	sub    esp,0xf0
c001ac86:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ac8a:	57                   	push   edi
c001ac8b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ac92:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ac99:	e8 a7 ff ff ff       	call   c001ac45 <Reg::getLine(char*, char*, char*)>
c001ac9e:	83 c4 10             	add    esp,0x10
c001aca1:	84 c0                	test   al,al
c001aca3:	0f 84 b3 00 00 00    	je     c001ad5c <Reg::readInt(char*, char*, int*)+0xe0>
c001aca9:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001acad:	80 fa 2b             	cmp    dl,0x2b
c001acb0:	74 0c                	je     c001acbe <Reg::readInt(char*, char*, int*)+0x42>
c001acb2:	80 fa 2d             	cmp    dl,0x2d
c001acb5:	75 0e                	jne    c001acc5 <Reg::readInt(char*, char*, int*)+0x49>
c001acb7:	ba 01 00 00 00       	mov    edx,0x1
c001acbc:	eb 0b                	jmp    c001acc9 <Reg::readInt(char*, char*, int*)+0x4d>
c001acbe:	ba 01 00 00 00       	mov    edx,0x1
c001acc3:	eb 02                	jmp    c001acc7 <Reg::readInt(char*, char*, int*)+0x4b>
c001acc5:	31 d2                	xor    edx,edx
c001acc7:	31 c0                	xor    eax,eax
c001acc9:	be 0a 00 00 00       	mov    esi,0xa
c001acce:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001acd3:	75 20                	jne    c001acf5 <Reg::readInt(char*, char*, int*)+0x79>
c001acd5:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001acd9:	80 f9 78             	cmp    cl,0x78
c001acdc:	75 0a                	jne    c001ace8 <Reg::readInt(char*, char*, int*)+0x6c>
c001acde:	83 c2 02             	add    edx,0x2
c001ace1:	be 10 00 00 00       	mov    esi,0x10
c001ace6:	eb 0d                	jmp    c001acf5 <Reg::readInt(char*, char*, int*)+0x79>
c001ace8:	80 f9 62             	cmp    cl,0x62
c001aceb:	75 08                	jne    c001acf5 <Reg::readInt(char*, char*, int*)+0x79>
c001aced:	83 c2 02             	add    edx,0x2
c001acf0:	be 02 00 00 00       	mov    esi,0x2
c001acf5:	01 d7                	add    edi,edx
c001acf7:	31 d2                	xor    edx,edx
c001acf9:	8a 1f                	mov    bl,BYTE PTR [edi]
c001acfb:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001acff:	80 fb 0d             	cmp    bl,0xd
c001ad02:	0f 94 c3             	sete   bl
c001ad05:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ad0a:	0f 94 c1             	sete   cl
c001ad0d:	08 cb                	or     bl,cl
c001ad0f:	75 3a                	jne    c001ad4b <Reg::readInt(char*, char*, int*)+0xcf>
c001ad11:	0f af d6             	imul   edx,esi
c001ad14:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001ad19:	83 fe 10             	cmp    esi,0x10
c001ad1c:	75 26                	jne    c001ad44 <Reg::readInt(char*, char*, int*)+0xc8>
c001ad1e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ad22:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001ad25:	89 e9                	mov    ecx,ebp
c001ad27:	80 f9 05             	cmp    cl,0x5
c001ad2a:	77 06                	ja     c001ad32 <Reg::readInt(char*, char*, int*)+0xb6>
c001ad2c:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001ad30:	eb 16                	jmp    c001ad48 <Reg::readInt(char*, char*, int*)+0xcc>
c001ad32:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ad36:	83 e9 61             	sub    ecx,0x61
c001ad39:	80 f9 05             	cmp    cl,0x5
c001ad3c:	77 06                	ja     c001ad44 <Reg::readInt(char*, char*, int*)+0xc8>
c001ad3e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ad42:	eb 04                	jmp    c001ad48 <Reg::readInt(char*, char*, int*)+0xcc>
c001ad44:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ad48:	47                   	inc    edi
c001ad49:	eb ae                	jmp    c001acf9 <Reg::readInt(char*, char*, int*)+0x7d>
c001ad4b:	84 c0                	test   al,al
c001ad4d:	74 02                	je     c001ad51 <Reg::readInt(char*, char*, int*)+0xd5>
c001ad4f:	f7 da                	neg    edx
c001ad51:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ad58:	89 10                	mov    DWORD PTR [eax],edx
c001ad5a:	88 d8                	mov    al,bl
c001ad5c:	81 c4 ec 00 00 00    	add    esp,0xec
c001ad62:	5b                   	pop    ebx
c001ad63:	5e                   	pop    esi
c001ad64:	5f                   	pop    edi
c001ad65:	5d                   	pop    ebp
c001ad66:	c3                   	ret    

c001ad67 <Reg::readString(char*, char*, char*, int)>:
c001ad67:	57                   	push   edi
c001ad68:	56                   	push   esi
c001ad69:	53                   	push   ebx
c001ad6a:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ad70:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ad77:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ad7b:	57                   	push   edi
c001ad7c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ad83:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ad8a:	e8 b6 fe ff ff       	call   c001ac45 <Reg::getLine(char*, char*, char*)>
c001ad8f:	83 c4 10             	add    esp,0x10
c001ad92:	89 c6                	mov    esi,eax
c001ad94:	84 c0                	test   al,al
c001ad96:	74 44                	je     c001addc <Reg::readString(char*, char*, char*, int)+0x75>
c001ad98:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ad9f:	31 c0                	xor    eax,eax
c001ada1:	4a                   	dec    edx
c001ada2:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ada5:	84 c9                	test   cl,cl
c001ada7:	74 0f                	je     c001adb8 <Reg::readString(char*, char*, char*, int)+0x51>
c001ada9:	39 c2                	cmp    edx,eax
c001adab:	7e 0b                	jle    c001adb8 <Reg::readString(char*, char*, char*, int)+0x51>
c001adad:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001adb0:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001adb5:	40                   	inc    eax
c001adb6:	eb ea                	jmp    c001ada2 <Reg::readString(char*, char*, char*, int)+0x3b>
c001adb8:	83 ec 0c             	sub    esp,0xc
c001adbb:	53                   	push   ebx
c001adbc:	e8 ab 59 fe ff       	call   c000076c <strlen>
c001adc1:	83 c4 10             	add    esp,0x10
c001adc4:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001adc9:	75 11                	jne    c001addc <Reg::readString(char*, char*, char*, int)+0x75>
c001adcb:	83 ec 0c             	sub    esp,0xc
c001adce:	53                   	push   ebx
c001adcf:	e8 98 59 fe ff       	call   c000076c <strlen>
c001add4:	83 c4 10             	add    esp,0x10
c001add7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001addc:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ade2:	89 f0                	mov    eax,esi
c001ade4:	5b                   	pop    ebx
c001ade5:	5e                   	pop    esi
c001ade6:	5f                   	pop    edi
c001ade7:	c3                   	ret    

c001ade8 <Reg::readBool(char*, char*, bool*)>:
c001ade8:	83 ec 20             	sub    esp,0x20
c001adeb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001adef:	50                   	push   eax
c001adf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adf8:	e8 7f fe ff ff       	call   c001ac7c <Reg::readInt(char*, char*, int*)>
c001adfd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ae02:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ae06:	0f 95 02             	setne  BYTE PTR [edx]
c001ae09:	83 c4 2c             	add    esp,0x2c
c001ae0c:	c3                   	ret    

c001ae0d <Reg::readBoolWithDefault(char*, char*, bool)>:
c001ae0d:	53                   	push   ebx
c001ae0e:	83 ec 1c             	sub    esp,0x1c
c001ae11:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ae15:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ae19:	50                   	push   eax
c001ae1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae22:	e8 c1 ff ff ff       	call   c001ade8 <Reg::readBool(char*, char*, bool*)>
c001ae27:	83 c4 10             	add    esp,0x10
c001ae2a:	84 c0                	test   al,al
c001ae2c:	74 04                	je     c001ae32 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ae2e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ae32:	88 d8                	mov    al,bl
c001ae34:	83 c4 18             	add    esp,0x18
c001ae37:	5b                   	pop    ebx
c001ae38:	c3                   	ret    

c001ae39 <Reg::readIntWithDefault(char*, char*, int)>:
c001ae39:	53                   	push   ebx
c001ae3a:	83 ec 1c             	sub    esp,0x1c
c001ae3d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ae41:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ae45:	50                   	push   eax
c001ae46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae4a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae4e:	e8 29 fe ff ff       	call   c001ac7c <Reg::readInt(char*, char*, int*)>
c001ae53:	83 c4 10             	add    esp,0x10
c001ae56:	84 c0                	test   al,al
c001ae58:	74 04                	je     c001ae5e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ae5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ae5e:	89 d8                	mov    eax,ebx
c001ae60:	83 c4 18             	add    esp,0x18
c001ae63:	5b                   	pop    ebx
c001ae64:	c3                   	ret    

c001ae65 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ae65:	57                   	push   edi
c001ae66:	56                   	push   esi
c001ae67:	56                   	push   esi
c001ae68:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ae6c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ae70:	56                   	push   esi
c001ae71:	57                   	push   edi
c001ae72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae7a:	e8 e8 fe ff ff       	call   c001ad67 <Reg::readString(char*, char*, char*, int)>
c001ae7f:	83 c4 10             	add    esp,0x10
c001ae82:	84 c0                	test   al,al
c001ae84:	75 1a                	jne    c001aea0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ae86:	51                   	push   ecx
c001ae87:	56                   	push   esi
c001ae88:	6a 00                	push   0x0
c001ae8a:	57                   	push   edi
c001ae8b:	e8 c0 58 fe ff       	call   c0000750 <memset>
c001ae90:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ae93:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ae97:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae99:	83 c4 10             	add    esp,0x10
c001ae9c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aea0:	89 f8                	mov    eax,edi
c001aea2:	5a                   	pop    edx
c001aea3:	5e                   	pop    esi
c001aea4:	5f                   	pop    edi
c001aea5:	c3                   	ret    

c001aea6 <Sys::eject(regs*)>:
c001aea6:	83 ec 0c             	sub    esp,0xc
c001aea9:	83 ca ff             	or     edx,0xffffffff
c001aeac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeb0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001aeb3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001aeb8:	83 e9 41             	sub    ecx,0x41
c001aebb:	83 f9 19             	cmp    ecx,0x19
c001aebe:	77 18                	ja     c001aed8 <Sys::eject(regs*)+0x32>
c001aec0:	8b 0c 8d 40 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0cc0]
c001aec7:	85 c9                	test   ecx,ecx
c001aec9:	74 0d                	je     c001aed8 <Sys::eject(regs*)+0x32>
c001aecb:	83 ec 0c             	sub    esp,0xc
c001aece:	51                   	push   ecx
c001aecf:	e8 ee af ff ff       	call   c0015ec2 <LogicalDisk::eject()>
c001aed4:	83 c4 10             	add    esp,0x10
c001aed7:	99                   	cdq    
c001aed8:	83 c4 0c             	add    esp,0xc
c001aedb:	c3                   	ret    

c001aedc <Sys::exit(regs*)>:
c001aedc:	83 ec 18             	sub    esp,0x18
c001aedf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aee3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aee6:	e8 7e 38 00 00       	call   c001e769 <terminateTask(int)>
c001aeeb:	83 c8 ff             	or     eax,0xffffffff
c001aeee:	83 c4 1c             	add    esp,0x1c
c001aef1:	89 c2                	mov    edx,eax
c001aef3:	c3                   	ret    

c001aef4 <Sys::getCwd(regs*)>:
c001aef4:	83 ec 10             	sub    esp,0x10
c001aef7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aefb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001aefe:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001af01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af06:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af09:	e8 02 7a ff ff       	call   c0012910 <Fs::getcwd(Process*, char*, int)>
c001af0e:	83 c4 1c             	add    esp,0x1c
c001af11:	99                   	cdq    
c001af12:	c3                   	ret    

c001af13 <Sys::getPID(regs*)>:
c001af13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af18:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001af1d:	99                   	cdq    
c001af1e:	c3                   	ret    

c001af1f <Sys::getRAMData(regs*)>:
c001af1f:	8b 0d 94 ed 02 c0    	mov    ecx,DWORD PTR ds:0xc002ed94
c001af25:	6b 05 90 ed 02 c0 64 	imul   eax,DWORD PTR ds:0xc002ed90,0x64
c001af2c:	99                   	cdq    
c001af2d:	f7 f9                	idiv   ecx
c001af2f:	c1 e0 18             	shl    eax,0x18
c001af32:	09 c8                	or     eax,ecx
c001af34:	99                   	cdq    
c001af35:	c3                   	ret    

c001af36 <Sys::getVGAPtr(regs*)>:
c001af36:	55                   	push   ebp
c001af37:	57                   	push   edi
c001af38:	56                   	push   esi
c001af39:	53                   	push   ebx
c001af3a:	83 ec 18             	sub    esp,0x18
c001af3d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001af41:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001af44:	e8 02 33 00 00       	call   c001e24b <Thr::processFromPID(int)>
c001af49:	83 c4 10             	add    esp,0x10
c001af4c:	89 c1                	mov    ecx,eax
c001af4e:	b8 01 00 00 00       	mov    eax,0x1
c001af53:	85 c9                	test   ecx,ecx
c001af55:	74 59                	je     c001afb0 <Sys::getVGAPtr(regs*)+0x7a>
c001af57:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001af5d:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001af61:	74 0c                	je     c001af6f <Sys::getVGAPtr(regs*)+0x39>
c001af63:	83 ec 0c             	sub    esp,0xc
c001af66:	53                   	push   ebx
c001af67:	e8 5d 53 ff ff       	call   c00102c9 <setActiveTerminal(VgaText*)>
c001af6c:	83 c4 10             	add    esp,0x10
c001af6f:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001af72:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001af75:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001af7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af7c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001af7f:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001af82:	81 c3 82 00 00 00    	add    ebx,0x82
c001af88:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001af8e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001af91:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001af94:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001af9a:	50                   	push   eax
c001af9b:	50                   	push   eax
c001af9c:	53                   	push   ebx
c001af9d:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001afa0:	05 a8 0f 00 00       	add    eax,0xfa8
c001afa5:	50                   	push   eax
c001afa6:	e8 61 58 fe ff       	call   c000080c <strcpy>
c001afab:	83 c4 10             	add    esp,0x10
c001afae:	31 c0                	xor    eax,eax
c001afb0:	83 c4 0c             	add    esp,0xc
c001afb3:	31 d2                	xor    edx,edx
c001afb5:	5b                   	pop    ebx
c001afb6:	5e                   	pop    esi
c001afb7:	5f                   	pop    edi
c001afb8:	5d                   	pop    ebp
c001afb9:	c3                   	ret    

c001afba <Sys::loadDLL(regs*)>:
c001afba:	56                   	push   esi
c001afbb:	53                   	push   ebx
c001afbc:	31 d2                	xor    edx,edx
c001afbe:	51                   	push   ecx
c001afbf:	b8 01 00 00 00       	mov    eax,0x1
c001afc4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001afc8:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001afcc:	0f 84 8c 00 00 00    	je     c001b05e <Sys::loadDLL(regs*)+0xa4>
c001afd2:	83 ec 0c             	sub    esp,0xc
c001afd5:	68 14 01 00 00       	push   0x114
c001afda:	e8 d7 45 ff ff       	call   c000f5b6 <malloc>
c001afdf:	83 c4 0c             	add    esp,0xc
c001afe2:	89 c3                	mov    ebx,eax
c001afe4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afe9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001afec:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001afef:	53                   	push   ebx
c001aff0:	e8 19 7b ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c001aff5:	83 c4 10             	add    esp,0x10
c001aff8:	31 d2                	xor    edx,edx
c001affa:	b8 02 00 00 00       	mov    eax,0x2
c001afff:	85 db                	test   ebx,ebx
c001b001:	74 5b                	je     c001b05e <Sys::loadDLL(regs*)+0xa4>
c001b003:	83 ec 0c             	sub    esp,0xc
c001b006:	53                   	push   ebx
c001b007:	e8 d4 7d ff ff       	call   c0012de0 <File::exists()>
c001b00c:	83 c4 10             	add    esp,0x10
c001b00f:	84 c0                	test   al,al
c001b011:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b013:	75 11                	jne    c001b026 <Sys::loadDLL(regs*)+0x6c>
c001b015:	83 ec 0c             	sub    esp,0xc
c001b018:	53                   	push   ebx
c001b019:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b01c:	83 c4 10             	add    esp,0x10
c001b01f:	b8 03 00 00 00       	mov    eax,0x3
c001b024:	eb 36                	jmp    c001b05c <Sys::loadDLL(regs*)+0xa2>
c001b026:	83 ec 0c             	sub    esp,0xc
c001b029:	53                   	push   ebx
c001b02a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b02d:	58                   	pop    eax
c001b02e:	5a                   	pop    edx
c001b02f:	6a 00                	push   0x0
c001b031:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b034:	e8 1e 24 00 00       	call   c001d457 <Thr::loadDLL(char const*, bool)>
c001b039:	83 c4 10             	add    esp,0x10
c001b03c:	89 c1                	mov    ecx,eax
c001b03e:	31 d2                	xor    edx,edx
c001b040:	b8 04 00 00 00       	mov    eax,0x4
c001b045:	85 c9                	test   ecx,ecx
c001b047:	74 15                	je     c001b05e <Sys::loadDLL(regs*)+0xa4>
c001b049:	53                   	push   ebx
c001b04a:	53                   	push   ebx
c001b04b:	ff 35 48 ed 02 c0    	push   DWORD PTR ds:0xc002ed48
c001b051:	51                   	push   ecx
c001b052:	e8 2b 26 00 00       	call   c001d682 <Thr::executeDLL(unsigned long, void*)>
c001b057:	83 c4 10             	add    esp,0x10
c001b05a:	31 c0                	xor    eax,eax
c001b05c:	31 d2                	xor    edx,edx
c001b05e:	59                   	pop    ecx
c001b05f:	5b                   	pop    ebx
c001b060:	5e                   	pop    esi
c001b061:	c3                   	ret    

c001b062 <Sys::read(regs*)>:
c001b062:	57                   	push   edi
c001b063:	56                   	push   esi
c001b064:	53                   	push   ebx
c001b065:	83 ec 10             	sub    esp,0x10
c001b068:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b06c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b06f:	83 f8 02             	cmp    eax,0x2
c001b072:	77 10                	ja     c001b084 <Sys::read(regs*)+0x22>
c001b074:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b079:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b07c:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b082:	eb 0e                	jmp    c001b092 <Sys::read(regs*)+0x30>
c001b084:	83 ec 0c             	sub    esp,0xc
c001b087:	50                   	push   eax
c001b088:	e8 c6 5f ff ff       	call   c0011053 <getFromFileDescriptor(int)>
c001b08d:	83 c4 10             	add    esp,0x10
c001b090:	89 c1                	mov    ecx,eax
c001b092:	83 c8 ff             	or     eax,0xffffffff
c001b095:	85 c9                	test   ecx,ecx
c001b097:	89 c2                	mov    edx,eax
c001b099:	74 28                	je     c001b0c3 <Sys::read(regs*)+0x61>
c001b09b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b0a3:	31 ff                	xor    edi,edi
c001b0a5:	83 ec 0c             	sub    esp,0xc
c001b0a8:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b0aa:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b0ae:	52                   	push   edx
c001b0af:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b0b2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b0b5:	57                   	push   edi
c001b0b6:	56                   	push   esi
c001b0b7:	51                   	push   ecx
c001b0b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b0bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b0bf:	83 c4 20             	add    esp,0x20
c001b0c2:	99                   	cdq    
c001b0c3:	83 c4 10             	add    esp,0x10
c001b0c6:	5b                   	pop    ebx
c001b0c7:	5e                   	pop    esi
c001b0c8:	5f                   	pop    edi
c001b0c9:	c3                   	ret    

c001b0ca <Sys::sbrk(regs*)>:
c001b0ca:	56                   	push   esi
c001b0cb:	53                   	push   ebx
c001b0cc:	50                   	push   eax
c001b0cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b0d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0d9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b0dc:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b0e2:	85 db                	test   ebx,ebx
c001b0e4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b0e7:	74 02                	je     c001b0eb <Sys::sbrk(regs*)+0x21>
c001b0e9:	79 06                	jns    c001b0f1 <Sys::sbrk(regs*)+0x27>
c001b0eb:	89 f0                	mov    eax,esi
c001b0ed:	31 d2                	xor    edx,edx
c001b0ef:	eb 2a                	jmp    c001b11b <Sys::sbrk(regs*)+0x51>
c001b0f1:	83 c8 ff             	or     eax,0xffffffff
c001b0f4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b0fa:	89 c2                	mov    edx,eax
c001b0fc:	77 1d                	ja     c001b11b <Sys::sbrk(regs*)+0x51>
c001b0fe:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b104:	50                   	push   eax
c001b105:	c1 ea 0c             	shr    edx,0xc
c001b108:	68 07 0c 00 00       	push   0xc07
c001b10d:	52                   	push   edx
c001b10e:	51                   	push   ecx
c001b10f:	e8 ce 69 ff ff       	call   c0011ae2 <VAS::allocatePages(int, int)>
c001b114:	89 f0                	mov    eax,esi
c001b116:	31 d2                	xor    edx,edx
c001b118:	83 c4 10             	add    esp,0x10
c001b11b:	59                   	pop    ecx
c001b11c:	5b                   	pop    ebx
c001b11d:	5e                   	pop    esi
c001b11e:	c3                   	ret    

c001b11f <Sys::setCwd(regs*)>:
c001b11f:	83 ec 14             	sub    esp,0x14
c001b122:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b126:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b129:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b12e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b131:	e8 49 7d ff ff       	call   c0012e7f <Fs::setcwd(Process*, char*)>
c001b136:	83 c4 1c             	add    esp,0x1c
c001b139:	99                   	cdq    
c001b13a:	c3                   	ret    

c001b13b <Sys::setTime(regs*)>:
c001b13b:	55                   	push   ebp
c001b13c:	31 d2                	xor    edx,edx
c001b13e:	57                   	push   edi
c001b13f:	bf 18 00 00 00       	mov    edi,0x18
c001b144:	56                   	push   esi
c001b145:	53                   	push   ebx
c001b146:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b14b:	83 ec 30             	sub    esp,0x30
c001b14e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b152:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b155:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b158:	f7 f3                	div    ebx
c001b15a:	89 d6                	mov    esi,edx
c001b15c:	31 d2                	xor    edx,edx
c001b15e:	f7 f3                	div    ebx
c001b160:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b163:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b167:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b16c:	31 d2                	xor    edx,edx
c001b16e:	f7 f3                	div    ebx
c001b170:	31 d2                	xor    edx,edx
c001b172:	bb 0c 00 00 00       	mov    ebx,0xc
c001b177:	f7 f7                	div    edi
c001b179:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b17c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b180:	0f b7 cd             	movzx  ecx,bp
c001b183:	56                   	push   esi
c001b184:	89 c7                	mov    edi,eax
c001b186:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b18a:	c1 e6 10             	shl    esi,0x10
c001b18d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b191:	83 e7 1f             	and    edi,0x1f
c001b194:	51                   	push   ecx
c001b195:	47                   	inc    edi
c001b196:	c1 e8 05             	shr    eax,0x5
c001b199:	31 d2                	xor    edx,edx
c001b19b:	f7 f3                	div    ebx
c001b19d:	31 db                	xor    ebx,ebx
c001b19f:	52                   	push   edx
c001b1a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b1a4:	57                   	push   edi
c001b1a5:	68 f1 c3 02 c0       	push   0xc002c3f1
c001b1aa:	e8 00 74 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001b1af:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b1b3:	89 f8                	mov    eax,edi
c001b1b5:	31 c9                	xor    ecx,ecx
c001b1b7:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b1bb:	88 c1                	mov    cl,al
c001b1bd:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b1c3:	88 d5                	mov    ch,dl
c001b1c5:	c1 e0 10             	shl    eax,0x10
c001b1c8:	0f b7 d1             	movzx  edx,cx
c001b1cb:	09 c2                	or     edx,eax
c001b1cd:	89 d8                	mov    eax,ebx
c001b1cf:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b1d4:	09 f0                	or     eax,esi
c001b1d6:	89 c3                	mov    ebx,eax
c001b1d8:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b1dc:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b1e0:	83 c4 18             	add    esp,0x18
c001b1e3:	53                   	push   ebx
c001b1e4:	52                   	push   edx
c001b1e5:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b1e9:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b1ed:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b1f1:	e8 ab 83 ff ff       	call   c00135a1 <datetimeToSeconds(datetime_t)>
c001b1f6:	83 c4 0c             	add    esp,0xc
c001b1f9:	52                   	push   edx
c001b1fa:	50                   	push   eax
c001b1fb:	56                   	push   esi
c001b1fc:	e8 27 85 ff ff       	call   c0013728 <secondsToDatetime(unsigned long long)>
c001b201:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b205:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b209:	51                   	push   ecx
c001b20a:	89 d6                	mov    esi,edx
c001b20c:	51                   	push   ecx
c001b20d:	c1 ee 10             	shr    esi,0x10
c001b210:	89 f3                	mov    ebx,esi
c001b212:	0f b6 f3             	movzx  esi,bl
c001b215:	56                   	push   esi
c001b216:	0f b6 f6             	movzx  esi,dh
c001b219:	0f b6 d2             	movzx  edx,dl
c001b21c:	56                   	push   esi
c001b21d:	52                   	push   edx
c001b21e:	89 c2                	mov    edx,eax
c001b220:	c1 ea 10             	shr    edx,0x10
c001b223:	52                   	push   edx
c001b224:	0f b6 d4             	movzx  edx,ah
c001b227:	0f b6 c0             	movzx  eax,al
c001b22a:	52                   	push   edx
c001b22b:	50                   	push   eax
c001b22c:	68 0d c4 02 c0       	push   0xc002c40d
c001b231:	e8 79 73 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001b236:	83 c4 2c             	add    esp,0x2c
c001b239:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c001b23e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b242:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b246:	53                   	push   ebx
c001b247:	51                   	push   ecx
c001b248:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b24e:	e8 75 84 ff ff       	call   c00136c8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b253:	83 f0 01             	xor    eax,0x1
c001b256:	31 d2                	xor    edx,edx
c001b258:	0f b6 c0             	movzx  eax,al
c001b25b:	83 c4 3c             	add    esp,0x3c
c001b25e:	5b                   	pop    ebx
c001b25f:	5e                   	pop    esi
c001b260:	5f                   	pop    edi
c001b261:	5d                   	pop    ebp
c001b262:	c3                   	ret    

c001b263 <Sys::timezone(regs*)>:
c001b263:	53                   	push   ebx
c001b264:	83 ec 08             	sub    esp,0x8
c001b267:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b26b:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b26f:	75 17                	jne    c001b288 <Sys::timezone(regs*)+0x25>
c001b271:	83 ec 0c             	sub    esp,0xc
c001b274:	68 29 c4 02 c0       	push   0xc002c429
c001b279:	e8 31 73 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001b27e:	83 c8 ff             	or     eax,0xffffffff
c001b281:	83 c4 10             	add    esp,0x10
c001b284:	89 c2                	mov    edx,eax
c001b286:	eb 20                	jmp    c001b2a8 <Sys::timezone(regs*)+0x45>
c001b288:	83 ec 0c             	sub    esp,0xc
c001b28b:	68 61 c4 02 c0       	push   0xc002c461
c001b290:	e8 1a 73 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001b295:	58                   	pop    eax
c001b296:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b299:	e8 8c 81 ff ff       	call   c001342a <User::loadClockSettings(int)>
c001b29e:	83 c4 10             	add    esp,0x10
c001b2a1:	b8 01 00 00 00       	mov    eax,0x1
c001b2a6:	31 d2                	xor    edx,edx
c001b2a8:	83 c4 08             	add    esp,0x8
c001b2ab:	5b                   	pop    ebx
c001b2ac:	c3                   	ret    

c001b2ad <Sys::write(regs*)>:
c001b2ad:	57                   	push   edi
c001b2ae:	56                   	push   esi
c001b2af:	53                   	push   ebx
c001b2b0:	83 ec 10             	sub    esp,0x10
c001b2b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2ba:	83 f8 02             	cmp    eax,0x2
c001b2bd:	77 10                	ja     c001b2cf <Sys::write(regs*)+0x22>
c001b2bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2c7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b2cd:	eb 0e                	jmp    c001b2dd <Sys::write(regs*)+0x30>
c001b2cf:	83 ec 0c             	sub    esp,0xc
c001b2d2:	50                   	push   eax
c001b2d3:	e8 7b 5d ff ff       	call   c0011053 <getFromFileDescriptor(int)>
c001b2d8:	83 c4 10             	add    esp,0x10
c001b2db:	89 c1                	mov    ecx,eax
c001b2dd:	83 c8 ff             	or     eax,0xffffffff
c001b2e0:	85 c9                	test   ecx,ecx
c001b2e2:	89 c2                	mov    edx,eax
c001b2e4:	74 28                	je     c001b30e <Sys::write(regs*)+0x61>
c001b2e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b2ee:	31 ff                	xor    edi,edi
c001b2f0:	83 ec 0c             	sub    esp,0xc
c001b2f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b2f5:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b2f9:	52                   	push   edx
c001b2fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2fd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b300:	57                   	push   edi
c001b301:	56                   	push   esi
c001b302:	51                   	push   ecx
c001b303:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b306:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b30a:	83 c4 20             	add    esp,0x20
c001b30d:	99                   	cdq    
c001b30e:	83 c4 10             	add    esp,0x10
c001b311:	5b                   	pop    ebx
c001b312:	5e                   	pop    esi
c001b313:	5f                   	pop    edi
c001b314:	c3                   	ret    

c001b315 <Sys::wsbe(regs*)>:
c001b315:	57                   	push   edi
c001b316:	b9 0b 00 00 00       	mov    ecx,0xb
c001b31b:	56                   	push   esi
c001b31c:	be a0 c4 02 c0       	mov    esi,0xc002c4a0
c001b321:	53                   	push   ebx
c001b322:	83 ec 30             	sub    esp,0x30
c001b325:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b329:	fc                   	cld    
c001b32a:	83 ec 0c             	sub    esp,0xc
c001b32d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b32f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b333:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b338:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b33b:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b341:	8b 06                	mov    eax,DWORD PTR [esi]
c001b343:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b346:	57                   	push   edi
c001b347:	e8 20 54 fe ff       	call   c000076c <strlen>
c001b34c:	5a                   	pop    edx
c001b34d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b351:	52                   	push   edx
c001b352:	31 d2                	xor    edx,edx
c001b354:	57                   	push   edi
c001b355:	52                   	push   edx
c001b356:	50                   	push   eax
c001b357:	56                   	push   esi
c001b358:	ff d3                	call   ebx
c001b35a:	83 c4 14             	add    esp,0x14
c001b35d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b361:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b364:	e8 00 34 00 00       	call   c001e769 <terminateTask(int)>
c001b369:	83 c4 40             	add    esp,0x40
c001b36c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b371:	5b                   	pop    ebx
c001b372:	31 d2                	xor    edx,edx
c001b374:	5e                   	pop    esi
c001b375:	5f                   	pop    edi
c001b376:	c3                   	ret    

c001b377 <Sys::yield(regs*)>:
c001b377:	57                   	push   edi
c001b378:	56                   	push   esi
c001b379:	53                   	push   ebx
c001b37a:	fa                   	cli    
c001b37b:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001b381:	e8 b0 2a 00 00       	call   c001de36 <schedule()>
c001b386:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001b38b:	48                   	dec    eax
c001b38c:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001b391:	75 01                	jne    c001b394 <Sys::yield(regs*)+0x1d>
c001b393:	fb                   	sti    
c001b394:	8b 35 b0 f3 02 c0    	mov    esi,DWORD PTR ds:0xc002f3b0
c001b39a:	8b 3d b4 f3 02 c0    	mov    edi,DWORD PTR ds:0xc002f3b4
c001b3a0:	89 f0                	mov    eax,esi
c001b3a2:	89 fb                	mov    ebx,edi
c001b3a4:	89 f1                	mov    ecx,esi
c001b3a6:	c1 e0 07             	shl    eax,0x7
c001b3a9:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b3ad:	25 80 30 0f 00       	and    eax,0xf3080
c001b3b2:	c1 eb 17             	shr    ebx,0x17
c001b3b5:	31 c8                	xor    eax,ecx
c001b3b7:	89 da                	mov    edx,ebx
c001b3b9:	5b                   	pop    ebx
c001b3ba:	5e                   	pop    esi
c001b3bb:	5f                   	pop    edi
c001b3bc:	c3                   	ret    

c001b3bd <sysCallSeekDir(regs*)>:
c001b3bd:	31 c0                	xor    eax,eax
c001b3bf:	31 d2                	xor    edx,edx
c001b3c1:	c3                   	ret    

c001b3c2 <sysCallTellDir(regs*)>:
c001b3c2:	31 c0                	xor    eax,eax
c001b3c4:	31 d2                	xor    edx,edx
c001b3c6:	c3                   	ret    

c001b3c7 <sysCallVerify(regs*)>:
c001b3c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b3cb:	31 d2                	xor    edx,edx
c001b3cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b3d0:	c3                   	ret    

c001b3d1 <sysFormatDisk(regs*)>:
c001b3d1:	56                   	push   esi
c001b3d2:	53                   	push   ebx
c001b3d3:	53                   	push   ebx
c001b3d4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3d8:	8b 1d b4 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eeb4
c001b3de:	eb 25                	jmp    c001b405 <sysFormatDisk(regs*)+0x34>
c001b3e0:	83 ec 0c             	sub    esp,0xc
c001b3e3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b3e6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b3e8:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b3eb:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b3ee:	50                   	push   eax
c001b3ef:	ff 34 85 40 f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0cc0]
c001b3f6:	53                   	push   ebx
c001b3f7:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b3fa:	83 c4 20             	add    esp,0x20
c001b3fd:	83 f8 08             	cmp    eax,0x8
c001b400:	75 12                	jne    c001b414 <sysFormatDisk(regs*)+0x43>
c001b402:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b405:	85 db                	test   ebx,ebx
c001b407:	75 d7                	jne    c001b3e0 <sysFormatDisk(regs*)+0xf>
c001b409:	59                   	pop    ecx
c001b40a:	b8 03 00 00 00       	mov    eax,0x3
c001b40f:	31 d2                	xor    edx,edx
c001b411:	5b                   	pop    ebx
c001b412:	5e                   	pop    esi
c001b413:	c3                   	ret    
c001b414:	85 c0                	test   eax,eax
c001b416:	74 1b                	je     c001b433 <sysFormatDisk(regs*)+0x62>
c001b418:	83 f8 09             	cmp    eax,0x9
c001b41b:	74 0b                	je     c001b428 <sysFormatDisk(regs*)+0x57>
c001b41d:	59                   	pop    ecx
c001b41e:	b8 02 00 00 00       	mov    eax,0x2
c001b423:	31 d2                	xor    edx,edx
c001b425:	5b                   	pop    ebx
c001b426:	5e                   	pop    esi
c001b427:	c3                   	ret    
c001b428:	59                   	pop    ecx
c001b429:	b8 01 00 00 00       	mov    eax,0x1
c001b42e:	31 d2                	xor    edx,edx
c001b430:	5b                   	pop    ebx
c001b431:	5e                   	pop    esi
c001b432:	c3                   	ret    
c001b433:	59                   	pop    ecx
c001b434:	31 c0                	xor    eax,eax
c001b436:	31 d2                	xor    edx,edx
c001b438:	5b                   	pop    ebx
c001b439:	5e                   	pop    esi
c001b43a:	c3                   	ret    

c001b43b <sysSetDiskVolumeLabel(regs*)>:
c001b43b:	56                   	push   esi
c001b43c:	53                   	push   ebx
c001b43d:	53                   	push   ebx
c001b43e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b442:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b445:	83 f8 19             	cmp    eax,0x19
c001b448:	77 29                	ja     c001b473 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b44a:	8b 0c 85 40 f3 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0cc0]
c001b451:	85 c9                	test   ecx,ecx
c001b453:	74 1e                	je     c001b473 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b455:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b458:	85 d2                	test   edx,edx
c001b45a:	74 17                	je     c001b473 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b45c:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b462:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b464:	52                   	push   edx
c001b465:	50                   	push   eax
c001b466:	51                   	push   ecx
c001b467:	53                   	push   ebx
c001b468:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b46b:	83 c4 10             	add    esp,0x10
c001b46e:	99                   	cdq    
c001b46f:	59                   	pop    ecx
c001b470:	5b                   	pop    ebx
c001b471:	5e                   	pop    esi
c001b472:	c3                   	ret    
c001b473:	59                   	pop    ecx
c001b474:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b479:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b47e:	5b                   	pop    ebx
c001b47f:	5e                   	pop    esi
c001b480:	c3                   	ret    

c001b481 <sysGetDiskVolumeLabel(regs*)>:
c001b481:	57                   	push   edi
c001b482:	56                   	push   esi
c001b483:	53                   	push   ebx
c001b484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b488:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b48b:	83 fa 19             	cmp    edx,0x19
c001b48e:	77 34                	ja     c001b4c4 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b490:	8b 0c 95 40 f3 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0cc0]
c001b497:	85 c9                	test   ecx,ecx
c001b499:	74 29                	je     c001b4c4 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b49b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b49e:	85 db                	test   ebx,ebx
c001b4a0:	74 22                	je     c001b4c4 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b4a2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b4a5:	85 c0                	test   eax,eax
c001b4a7:	74 1b                	je     c001b4c4 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b4a9:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b4af:	83 ec 0c             	sub    esp,0xc
c001b4b2:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b4b4:	50                   	push   eax
c001b4b5:	53                   	push   ebx
c001b4b6:	52                   	push   edx
c001b4b7:	51                   	push   ecx
c001b4b8:	56                   	push   esi
c001b4b9:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b4bc:	83 c4 20             	add    esp,0x20
c001b4bf:	99                   	cdq    
c001b4c0:	5b                   	pop    ebx
c001b4c1:	5e                   	pop    esi
c001b4c2:	5f                   	pop    edi
c001b4c3:	c3                   	ret    
c001b4c4:	5b                   	pop    ebx
c001b4c5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b4ca:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4cf:	5e                   	pop    esi
c001b4d0:	5f                   	pop    edi
c001b4d1:	c3                   	ret    

c001b4d2 <sysShutdown(regs*)>:
c001b4d2:	83 ec 0c             	sub    esp,0xc
c001b4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4d9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b4dc:	85 c0                	test   eax,eax
c001b4de:	74 18                	je     c001b4f8 <sysShutdown(regs*)+0x26>
c001b4e0:	83 f8 01             	cmp    eax,0x1
c001b4e3:	74 38                	je     c001b51d <sysShutdown(regs*)+0x4b>
c001b4e5:	83 f8 02             	cmp    eax,0x2
c001b4e8:	74 24                	je     c001b50e <sysShutdown(regs*)+0x3c>
c001b4ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4f4:	83 c4 0c             	add    esp,0xc
c001b4f7:	c3                   	ret    
c001b4f8:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c001b4fd:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4ff:	6a 00                	push   0x0
c001b501:	6a 00                	push   0x0
c001b503:	6a 00                	push   0x0
c001b505:	50                   	push   eax
c001b506:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b509:	83 c4 10             	add    esp,0x10
c001b50c:	eb dc                	jmp    c001b4ea <sysShutdown(regs*)+0x18>
c001b50e:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c001b513:	8b 10                	mov    edx,DWORD PTR [eax]
c001b515:	6a 00                	push   0x0
c001b517:	6a 00                	push   0x0
c001b519:	6a 01                	push   0x1
c001b51b:	eb e8                	jmp    c001b505 <sysShutdown(regs*)+0x33>
c001b51d:	a1 e0 13 03 c0       	mov    eax,ds:0xc00313e0
c001b522:	85 c0                	test   eax,eax
c001b524:	74 02                	je     c001b528 <sysShutdown(regs*)+0x56>
c001b526:	ff d0                	call   eax
c001b528:	31 c0                	xor    eax,eax
c001b52a:	31 d2                	xor    edx,edx
c001b52c:	83 c4 0c             	add    esp,0xc
c001b52f:	c3                   	ret    

c001b530 <sysCallRealpath(regs*)>:
c001b530:	83 ec 0c             	sub    esp,0xc
c001b533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b537:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b53a:	85 d2                	test   edx,edx
c001b53c:	74 07                	je     c001b545 <sysCallRealpath(regs*)+0x15>
c001b53e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b541:	85 c0                	test   eax,eax
c001b543:	75 0b                	jne    c001b550 <sysCallRealpath(regs*)+0x20>
c001b545:	b8 01 00 00 00       	mov    eax,0x1
c001b54a:	31 d2                	xor    edx,edx
c001b54c:	83 c4 0c             	add    esp,0xc
c001b54f:	c3                   	ret    
c001b550:	51                   	push   ecx
c001b551:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b557:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b55a:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b560:	51                   	push   ecx
c001b561:	52                   	push   edx
c001b562:	50                   	push   eax
c001b563:	e8 fc 73 ff ff       	call   c0012964 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b568:	83 c4 10             	add    esp,0x10
c001b56b:	31 c0                	xor    eax,eax
c001b56d:	31 d2                	xor    edx,edx
c001b56f:	83 c4 0c             	add    esp,0xc
c001b572:	c3                   	ret    

c001b573 <sysCallGetArgc(regs*)>:
c001b573:	83 ec 14             	sub    esp,0x14
c001b576:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b57b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b57e:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b584:	68 cc c4 02 c0       	push   0xc002c4cc
c001b589:	e8 21 70 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001b58e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b593:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b596:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b59c:	83 c4 1c             	add    esp,0x1c
c001b59f:	99                   	cdq    
c001b5a0:	c3                   	ret    

c001b5a1 <sysCallReadDir(regs*)>:
c001b5a1:	53                   	push   ebx
c001b5a2:	83 ec 18             	sub    esp,0x18
c001b5a5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5a9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b5ac:	83 f8 02             	cmp    eax,0x2
c001b5af:	76 53                	jbe    c001b604 <sysCallReadDir(regs*)+0x63>
c001b5b1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b5b4:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b5ba:	77 4f                	ja     c001b60b <sysCallReadDir(regs*)+0x6a>
c001b5bc:	83 ec 0c             	sub    esp,0xc
c001b5bf:	50                   	push   eax
c001b5c0:	e8 8e 5a ff ff       	call   c0011053 <getFromFileDescriptor(int)>
c001b5c5:	83 c4 10             	add    esp,0x10
c001b5c8:	85 c0                	test   eax,eax
c001b5ca:	74 50                	je     c001b61c <sysCallReadDir(regs*)+0x7b>
c001b5cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b5d4:	83 ec 0c             	sub    esp,0xc
c001b5d7:	8b 10                	mov    edx,DWORD PTR [eax]
c001b5d9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b5dd:	51                   	push   ecx
c001b5de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5e1:	6a 00                	push   0x0
c001b5e3:	68 10 01 00 00       	push   0x110
c001b5e8:	50                   	push   eax
c001b5e9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b5ec:	83 c4 20             	add    esp,0x20
c001b5ef:	85 c0                	test   eax,eax
c001b5f1:	74 38                	je     c001b62b <sysCallReadDir(regs*)+0x8a>
c001b5f3:	83 f8 07             	cmp    eax,0x7
c001b5f6:	74 0c                	je     c001b604 <sysCallReadDir(regs*)+0x63>
c001b5f8:	b8 02 00 00 00       	mov    eax,0x2
c001b5fd:	31 d2                	xor    edx,edx
c001b5ff:	83 c4 18             	add    esp,0x18
c001b602:	5b                   	pop    ebx
c001b603:	c3                   	ret    
c001b604:	b8 01 00 00 00       	mov    eax,0x1
c001b609:	eb f2                	jmp    c001b5fd <sysCallReadDir(regs*)+0x5c>
c001b60b:	83 ec 08             	sub    esp,0x8
c001b60e:	52                   	push   edx
c001b60f:	68 f0 c5 02 c0       	push   0xc002c5f0
c001b614:	e8 96 6f ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001b619:	83 c4 10             	add    esp,0x10
c001b61c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b621:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b626:	83 c4 18             	add    esp,0x18
c001b629:	5b                   	pop    ebx
c001b62a:	c3                   	ret    
c001b62b:	31 c0                	xor    eax,eax
c001b62d:	eb ce                	jmp    c001b5fd <sysCallReadDir(regs*)+0x5c>

c001b62f <sysCallIsATTY(regs*)>:
c001b62f:	83 ec 0c             	sub    esp,0xc
c001b632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b636:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b639:	83 f8 02             	cmp    eax,0x2
c001b63c:	76 07                	jbe    c001b645 <sysCallIsATTY(regs*)+0x16>
c001b63e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b643:	75 26                	jne    c001b66b <sysCallIsATTY(regs*)+0x3c>
c001b645:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b64a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b64d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b653:	85 c0                	test   eax,eax
c001b655:	74 24                	je     c001b67b <sysCallIsATTY(regs*)+0x4c>
c001b657:	83 ec 0c             	sub    esp,0xc
c001b65a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b65c:	50                   	push   eax
c001b65d:	ff 12                	call   DWORD PTR [edx]
c001b65f:	31 d2                	xor    edx,edx
c001b661:	0f b6 c0             	movzx  eax,al
c001b664:	83 c4 10             	add    esp,0x10
c001b667:	83 c4 0c             	add    esp,0xc
c001b66a:	c3                   	ret    
c001b66b:	83 ec 0c             	sub    esp,0xc
c001b66e:	50                   	push   eax
c001b66f:	e8 df 59 ff ff       	call   c0011053 <getFromFileDescriptor(int)>
c001b674:	83 c4 10             	add    esp,0x10
c001b677:	85 c0                	test   eax,eax
c001b679:	75 dc                	jne    c001b657 <sysCallIsATTY(regs*)+0x28>
c001b67b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b680:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b685:	83 c4 0c             	add    esp,0xc
c001b688:	c3                   	ret    

c001b689 <sysCallSeek(regs*)>:
c001b689:	53                   	push   ebx
c001b68a:	83 ec 08             	sub    esp,0x8
c001b68d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b691:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b694:	83 f8 02             	cmp    eax,0x2
c001b697:	76 4a                	jbe    c001b6e3 <sysCallSeek(regs*)+0x5a>
c001b699:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b69e:	77 32                	ja     c001b6d2 <sysCallSeek(regs*)+0x49>
c001b6a0:	83 ec 0c             	sub    esp,0xc
c001b6a3:	50                   	push   eax
c001b6a4:	e8 aa 59 ff ff       	call   c0011053 <getFromFileDescriptor(int)>
c001b6a9:	83 c4 0c             	add    esp,0xc
c001b6ac:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b6af:	31 db                	xor    ebx,ebx
c001b6b1:	53                   	push   ebx
c001b6b2:	51                   	push   ecx
c001b6b3:	50                   	push   eax
c001b6b4:	e8 77 75 ff ff       	call   c0012c30 <File::seek(unsigned long long)>
c001b6b9:	83 c4 10             	add    esp,0x10
c001b6bc:	85 c0                	test   eax,eax
c001b6be:	0f 95 c0             	setne  al
c001b6c1:	31 d2                	xor    edx,edx
c001b6c3:	0f b6 c0             	movzx  eax,al
c001b6c6:	f7 d8                	neg    eax
c001b6c8:	83 d2 00             	adc    edx,0x0
c001b6cb:	83 c4 08             	add    esp,0x8
c001b6ce:	f7 da                	neg    edx
c001b6d0:	5b                   	pop    ebx
c001b6d1:	c3                   	ret    
c001b6d2:	83 ec 08             	sub    esp,0x8
c001b6d5:	50                   	push   eax
c001b6d6:	68 d7 c4 02 c0       	push   0xc002c4d7
c001b6db:	e8 cf 6e ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001b6e0:	83 c4 10             	add    esp,0x10
c001b6e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6ed:	83 c4 08             	add    esp,0x8
c001b6f0:	5b                   	pop    ebx
c001b6f1:	c3                   	ret    

c001b6f2 <sysCallTell(regs*)>:
c001b6f2:	53                   	push   ebx
c001b6f3:	83 ec 08             	sub    esp,0x8
c001b6f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b6fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6fd:	83 f8 02             	cmp    eax,0x2
c001b700:	76 5e                	jbe    c001b760 <sysCallTell(regs*)+0x6e>
c001b702:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b707:	77 2d                	ja     c001b736 <sysCallTell(regs*)+0x44>
c001b709:	83 ec 0c             	sub    esp,0xc
c001b70c:	50                   	push   eax
c001b70d:	e8 41 59 ff ff       	call   c0011053 <getFromFileDescriptor(int)>
c001b712:	5a                   	pop    edx
c001b713:	59                   	pop    ecx
c001b714:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b717:	50                   	push   eax
c001b718:	e8 69 75 ff ff       	call   c0012c86 <File::tell(unsigned long long*)>
c001b71d:	83 c4 10             	add    esp,0x10
c001b720:	85 c0                	test   eax,eax
c001b722:	0f 95 c0             	setne  al
c001b725:	31 d2                	xor    edx,edx
c001b727:	0f b6 c0             	movzx  eax,al
c001b72a:	f7 d8                	neg    eax
c001b72c:	83 d2 00             	adc    edx,0x0
c001b72f:	83 c4 08             	add    esp,0x8
c001b732:	f7 da                	neg    edx
c001b734:	5b                   	pop    ebx
c001b735:	c3                   	ret    
c001b736:	83 ec 08             	sub    esp,0x8
c001b739:	50                   	push   eax
c001b73a:	68 f1 c4 02 c0       	push   0xc002c4f1
c001b73f:	e8 6b 6e ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001b744:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b747:	83 c4 10             	add    esp,0x10
c001b74a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b750:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b757:	31 d2                	xor    edx,edx
c001b759:	31 c0                	xor    eax,eax
c001b75b:	83 c4 08             	add    esp,0x8
c001b75e:	5b                   	pop    ebx
c001b75f:	c3                   	ret    
c001b760:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b765:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b76a:	83 c4 08             	add    esp,0x8
c001b76d:	5b                   	pop    ebx
c001b76e:	c3                   	ret    

c001b76f <sysCallSize(regs*)>:
c001b76f:	53                   	push   ebx
c001b770:	83 ec 18             	sub    esp,0x18
c001b773:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b777:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b77a:	83 f8 02             	cmp    eax,0x2
c001b77d:	76 64                	jbe    c001b7e3 <sysCallSize(regs*)+0x74>
c001b77f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b784:	77 33                	ja     c001b7b9 <sysCallSize(regs*)+0x4a>
c001b786:	83 ec 0c             	sub    esp,0xc
c001b789:	50                   	push   eax
c001b78a:	e8 c4 58 ff ff       	call   c0011053 <getFromFileDescriptor(int)>
c001b78f:	83 c4 0c             	add    esp,0xc
c001b792:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b796:	52                   	push   edx
c001b797:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b79a:	50                   	push   eax
c001b79b:	e8 7e 76 ff ff       	call   c0012e1e <File::stat(unsigned long long*, bool*)>
c001b7a0:	83 c4 10             	add    esp,0x10
c001b7a3:	85 c0                	test   eax,eax
c001b7a5:	0f 95 c0             	setne  al
c001b7a8:	31 d2                	xor    edx,edx
c001b7aa:	0f b6 c0             	movzx  eax,al
c001b7ad:	f7 d8                	neg    eax
c001b7af:	83 d2 00             	adc    edx,0x0
c001b7b2:	83 c4 18             	add    esp,0x18
c001b7b5:	f7 da                	neg    edx
c001b7b7:	5b                   	pop    ebx
c001b7b8:	c3                   	ret    
c001b7b9:	83 ec 08             	sub    esp,0x8
c001b7bc:	50                   	push   eax
c001b7bd:	68 0b c5 02 c0       	push   0xc002c50b
c001b7c2:	e8 e8 6d ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001b7c7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b7ca:	83 c4 10             	add    esp,0x10
c001b7cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b7d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b7da:	31 d2                	xor    edx,edx
c001b7dc:	31 c0                	xor    eax,eax
c001b7de:	83 c4 18             	add    esp,0x18
c001b7e1:	5b                   	pop    ebx
c001b7e2:	c3                   	ret    
c001b7e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7ed:	83 c4 18             	add    esp,0x18
c001b7f0:	5b                   	pop    ebx
c001b7f1:	c3                   	ret    

c001b7f2 <sysCallSizeFromFilename(regs*)>:
c001b7f2:	57                   	push   edi
c001b7f3:	56                   	push   esi
c001b7f4:	53                   	push   ebx
c001b7f5:	83 ec 20             	sub    esp,0x20
c001b7f8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b7fc:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b7ff:	83 fb 02             	cmp    ebx,0x2
c001b802:	0f 86 99 00 00 00    	jbe    c001b8a1 <sysCallSizeFromFilename(regs*)+0xaf>
c001b808:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b80e:	77 65                	ja     c001b875 <sysCallSizeFromFilename(regs*)+0x83>
c001b810:	83 ec 0c             	sub    esp,0xc
c001b813:	68 14 01 00 00       	push   0x114
c001b818:	e8 99 3d ff ff       	call   c000f5b6 <malloc>
c001b81d:	83 c4 0c             	add    esp,0xc
c001b820:	89 c6                	mov    esi,eax
c001b822:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b827:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b82a:	53                   	push   ebx
c001b82b:	56                   	push   esi
c001b82c:	e8 dd 72 ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c001b831:	83 c4 0c             	add    esp,0xc
c001b834:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b838:	50                   	push   eax
c001b839:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b83c:	56                   	push   esi
c001b83d:	e8 dc 75 ff ff       	call   c0012e1e <File::stat(unsigned long long*, bool*)>
c001b842:	83 c4 10             	add    esp,0x10
c001b845:	85 f6                	test   esi,esi
c001b847:	74 14                	je     c001b85d <sysCallSizeFromFilename(regs*)+0x6b>
c001b849:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b84d:	8b 16                	mov    edx,DWORD PTR [esi]
c001b84f:	83 ec 0c             	sub    esp,0xc
c001b852:	56                   	push   esi
c001b853:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b856:	83 c4 10             	add    esp,0x10
c001b859:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b85d:	85 c0                	test   eax,eax
c001b85f:	0f 95 c0             	setne  al
c001b862:	31 d2                	xor    edx,edx
c001b864:	0f b6 c0             	movzx  eax,al
c001b867:	f7 d8                	neg    eax
c001b869:	83 d2 00             	adc    edx,0x0
c001b86c:	83 c4 20             	add    esp,0x20
c001b86f:	f7 da                	neg    edx
c001b871:	5b                   	pop    ebx
c001b872:	5e                   	pop    esi
c001b873:	5f                   	pop    edi
c001b874:	c3                   	ret    
c001b875:	83 ec 08             	sub    esp,0x8
c001b878:	53                   	push   ebx
c001b879:	68 0b c5 02 c0       	push   0xc002c50b
c001b87e:	e8 2c 6d ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001b883:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b886:	83 c4 10             	add    esp,0x10
c001b889:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b88f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b896:	31 d2                	xor    edx,edx
c001b898:	83 c4 20             	add    esp,0x20
c001b89b:	31 c0                	xor    eax,eax
c001b89d:	5b                   	pop    ebx
c001b89e:	5e                   	pop    esi
c001b89f:	5f                   	pop    edi
c001b8a0:	c3                   	ret    
c001b8a1:	83 c4 20             	add    esp,0x20
c001b8a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8a9:	5b                   	pop    ebx
c001b8aa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8af:	5e                   	pop    esi
c001b8b0:	5f                   	pop    edi
c001b8b1:	c3                   	ret    

c001b8b2 <sysCallClose(regs*)>:
c001b8b2:	53                   	push   ebx
c001b8b3:	83 ec 08             	sub    esp,0x8
c001b8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ba:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8bd:	83 f8 02             	cmp    eax,0x2
c001b8c0:	76 50                	jbe    c001b912 <sysCallClose(regs*)+0x60>
c001b8c2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8c7:	74 58                	je     c001b921 <sysCallClose(regs*)+0x6f>
c001b8c9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b8ce:	74 60                	je     c001b930 <sysCallClose(regs*)+0x7e>
c001b8d0:	77 2f                	ja     c001b901 <sysCallClose(regs*)+0x4f>
c001b8d2:	83 ec 0c             	sub    esp,0xc
c001b8d5:	50                   	push   eax
c001b8d6:	e8 78 57 ff ff       	call   c0011053 <getFromFileDescriptor(int)>
c001b8db:	89 c3                	mov    ebx,eax
c001b8dd:	89 04 24             	mov    DWORD PTR [esp],eax
c001b8e0:	e8 eb 72 ff ff       	call   c0012bd0 <File::close()>
c001b8e5:	83 c4 10             	add    esp,0x10
c001b8e8:	85 db                	test   ebx,ebx
c001b8ea:	74 0c                	je     c001b8f8 <sysCallClose(regs*)+0x46>
c001b8ec:	83 ec 0c             	sub    esp,0xc
c001b8ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8f1:	53                   	push   ebx
c001b8f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b8f5:	83 c4 10             	add    esp,0x10
c001b8f8:	31 c0                	xor    eax,eax
c001b8fa:	31 d2                	xor    edx,edx
c001b8fc:	83 c4 08             	add    esp,0x8
c001b8ff:	5b                   	pop    ebx
c001b900:	c3                   	ret    
c001b901:	83 ec 08             	sub    esp,0x8
c001b904:	50                   	push   eax
c001b905:	68 14 c6 02 c0       	push   0xc002c614
c001b90a:	e8 a0 6c ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001b90f:	83 c4 10             	add    esp,0x10
c001b912:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b917:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b91c:	83 c4 08             	add    esp,0x8
c001b91f:	5b                   	pop    ebx
c001b920:	c3                   	ret    
c001b921:	83 ec 0c             	sub    esp,0xc
c001b924:	68 26 c5 02 c0       	push   0xc002c526
c001b929:	e8 81 6c ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001b92e:	eb c5                	jmp    c001b8f5 <sysCallClose(regs*)+0x43>
c001b930:	83 ec 0c             	sub    esp,0xc
c001b933:	68 34 c5 02 c0       	push   0xc002c534
c001b938:	eb ef                	jmp    c001b929 <sysCallClose(regs*)+0x77>

c001b93a <sysCallOpenDir(regs*)>:
c001b93a:	56                   	push   esi
c001b93b:	53                   	push   ebx
c001b93c:	53                   	push   ebx
c001b93d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b941:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b944:	85 f6                	test   esi,esi
c001b946:	74 59                	je     c001b9a1 <sysCallOpenDir(regs*)+0x67>
c001b948:	83 ec 0c             	sub    esp,0xc
c001b94b:	68 14 01 00 00       	push   0x114
c001b950:	e8 61 3c ff ff       	call   c000f5b6 <malloc>
c001b955:	83 c4 0c             	add    esp,0xc
c001b958:	89 c6                	mov    esi,eax
c001b95a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b95f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b962:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b965:	56                   	push   esi
c001b966:	e8 4f 76 ff ff       	call   c0012fba <Directory::Directory(char const*, Process*)>
c001b96b:	83 c4 10             	add    esp,0x10
c001b96e:	85 f6                	test   esi,esi
c001b970:	74 2f                	je     c001b9a1 <sysCallOpenDir(regs*)+0x67>
c001b972:	83 ec 0c             	sub    esp,0xc
c001b975:	56                   	push   esi
c001b976:	e8 a3 76 ff ff       	call   c001301e <Directory::open()>
c001b97b:	83 c4 10             	add    esp,0x10
c001b97e:	85 c0                	test   eax,eax
c001b980:	75 1f                	jne    c001b9a1 <sysCallOpenDir(regs*)+0x67>
c001b982:	83 ec 0c             	sub    esp,0xc
c001b985:	56                   	push   esi
c001b986:	e8 d3 53 ff ff       	call   c0010d5e <UnixFile::getFileDescriptor()>
c001b98b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b98e:	83 c4 10             	add    esp,0x10
c001b991:	89 02                	mov    DWORD PTR [edx],eax
c001b993:	c1 f8 1f             	sar    eax,0x1f
c001b996:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b999:	31 c0                	xor    eax,eax
c001b99b:	59                   	pop    ecx
c001b99c:	31 d2                	xor    edx,edx
c001b99e:	5b                   	pop    ebx
c001b99f:	5e                   	pop    esi
c001b9a0:	c3                   	ret    
c001b9a1:	59                   	pop    ecx
c001b9a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9ac:	5b                   	pop    ebx
c001b9ad:	5e                   	pop    esi
c001b9ae:	c3                   	ret    

c001b9af <sysCallCloseDir(regs*)>:
c001b9af:	53                   	push   ebx
c001b9b0:	83 ec 08             	sub    esp,0x8
c001b9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b9ba:	83 f8 02             	cmp    eax,0x2
c001b9bd:	76 47                	jbe    c001ba06 <sysCallCloseDir(regs*)+0x57>
c001b9bf:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9c4:	77 2f                	ja     c001b9f5 <sysCallCloseDir(regs*)+0x46>
c001b9c6:	83 ec 0c             	sub    esp,0xc
c001b9c9:	50                   	push   eax
c001b9ca:	e8 84 56 ff ff       	call   c0011053 <getFromFileDescriptor(int)>
c001b9cf:	89 c3                	mov    ebx,eax
c001b9d1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9d4:	e8 a1 76 ff ff       	call   c001307a <Directory::close()>
c001b9d9:	83 c4 10             	add    esp,0x10
c001b9dc:	85 db                	test   ebx,ebx
c001b9de:	74 0c                	je     c001b9ec <sysCallCloseDir(regs*)+0x3d>
c001b9e0:	83 ec 0c             	sub    esp,0xc
c001b9e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b9e5:	53                   	push   ebx
c001b9e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b9e9:	83 c4 10             	add    esp,0x10
c001b9ec:	31 c0                	xor    eax,eax
c001b9ee:	31 d2                	xor    edx,edx
c001b9f0:	83 c4 08             	add    esp,0x8
c001b9f3:	5b                   	pop    ebx
c001b9f4:	c3                   	ret    
c001b9f5:	83 ec 08             	sub    esp,0x8
c001b9f8:	50                   	push   eax
c001b9f9:	68 3c c6 02 c0       	push   0xc002c63c
c001b9fe:	e8 ac 6b ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001ba03:	83 c4 10             	add    esp,0x10
c001ba06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba10:	83 c4 08             	add    esp,0x8
c001ba13:	5b                   	pop    ebx
c001ba14:	c3                   	ret    

c001ba15 <sysCallMakeDir(regs*)>:
c001ba15:	56                   	push   esi
c001ba16:	53                   	push   ebx
c001ba17:	83 ec 10             	sub    esp,0x10
c001ba1a:	68 14 01 00 00       	push   0x114
c001ba1f:	e8 92 3b ff ff       	call   c000f5b6 <malloc>
c001ba24:	83 c4 0c             	add    esp,0xc
c001ba27:	89 c3                	mov    ebx,eax
c001ba29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba2e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba35:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ba38:	53                   	push   ebx
c001ba39:	e8 7c 75 ff ff       	call   c0012fba <Directory::Directory(char const*, Process*)>
c001ba3e:	83 c4 10             	add    esp,0x10
c001ba41:	85 db                	test   ebx,ebx
c001ba43:	74 32                	je     c001ba77 <sysCallMakeDir(regs*)+0x62>
c001ba45:	83 ec 0c             	sub    esp,0xc
c001ba48:	53                   	push   ebx
c001ba49:	e8 b0 77 ff ff       	call   c00131fe <Directory::create()>
c001ba4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba51:	89 c6                	mov    esi,eax
c001ba53:	e8 22 76 ff ff       	call   c001307a <Directory::close()>
c001ba58:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ba5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ba60:	83 c4 10             	add    esp,0x10
c001ba63:	31 c0                	xor    eax,eax
c001ba65:	59                   	pop    ecx
c001ba66:	85 f6                	test   esi,esi
c001ba68:	5b                   	pop    ebx
c001ba69:	0f 95 c0             	setne  al
c001ba6c:	5e                   	pop    esi
c001ba6d:	31 d2                	xor    edx,edx
c001ba6f:	f7 d8                	neg    eax
c001ba71:	83 d2 00             	adc    edx,0x0
c001ba74:	f7 da                	neg    edx
c001ba76:	c3                   	ret    
c001ba77:	59                   	pop    ecx
c001ba78:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba7d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba82:	5b                   	pop    ebx
c001ba83:	5e                   	pop    esi
c001ba84:	c3                   	ret    

c001ba85 <sysCallWait(regs*)>:
c001ba85:	83 ec 10             	sub    esp,0x10
c001ba88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba8c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ba8f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ba92:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ba95:	e8 c8 25 00 00       	call   c001e062 <waitTask(int, int*, int)>
c001ba9a:	83 c4 1c             	add    esp,0x1c
c001ba9d:	99                   	cdq    
c001ba9e:	c3                   	ret    

c001ba9f <sysCallNotImpl(regs*)>:
c001ba9f:	83 ec 18             	sub    esp,0x18
c001baa2:	68 42 c5 02 c0       	push   0xc002c542
c001baa7:	e8 d1 e5 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001baac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bab1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bab6:	83 c4 1c             	add    esp,0x1c
c001bab9:	c3                   	ret    

c001baba <sysPanic(regs*)>:
c001baba:	83 ec 18             	sub    esp,0x18
c001babd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bac1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bac4:	e8 b4 e5 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001bac9:	c7 04 24 5c c5 02 c0 	mov    DWORD PTR [esp],0xc002c55c
c001bad0:	e8 a8 e5 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001bad5:	b8 01 00 00 00       	mov    eax,0x1
c001bada:	31 d2                	xor    edx,edx
c001badc:	83 c4 1c             	add    esp,0x1c
c001badf:	c3                   	ret    

c001bae0 <sysCallRmdir(regs*)>:
c001bae0:	56                   	push   esi
c001bae1:	53                   	push   ebx
c001bae2:	83 ec 20             	sub    esp,0x20
c001bae5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bae9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001baec:	68 14 01 00 00       	push   0x114
c001baf1:	e8 c0 3a ff ff       	call   c000f5b6 <malloc>
c001baf6:	83 c4 0c             	add    esp,0xc
c001baf9:	89 c3                	mov    ebx,eax
c001bafb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb00:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb03:	56                   	push   esi
c001bb04:	53                   	push   ebx
c001bb05:	e8 04 70 ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c001bb0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb0d:	e8 d8 71 ff ff       	call   c0012cea <File::unlink()>
c001bb12:	83 c4 10             	add    esp,0x10
c001bb15:	85 db                	test   ebx,ebx
c001bb17:	74 14                	je     c001bb2d <sysCallRmdir(regs*)+0x4d>
c001bb19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb1d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb1f:	83 ec 0c             	sub    esp,0xc
c001bb22:	53                   	push   ebx
c001bb23:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb26:	83 c4 10             	add    esp,0x10
c001bb29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb2d:	85 c0                	test   eax,eax
c001bb2f:	0f 95 c0             	setne  al
c001bb32:	31 d2                	xor    edx,edx
c001bb34:	0f b6 c0             	movzx  eax,al
c001bb37:	f7 d8                	neg    eax
c001bb39:	83 d2 00             	adc    edx,0x0
c001bb3c:	83 c4 14             	add    esp,0x14
c001bb3f:	f7 da                	neg    edx
c001bb41:	5b                   	pop    ebx
c001bb42:	5e                   	pop    esi
c001bb43:	c3                   	ret    

c001bb44 <sysCallUnlink(regs*)>:
c001bb44:	56                   	push   esi
c001bb45:	53                   	push   ebx
c001bb46:	83 ec 20             	sub    esp,0x20
c001bb49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bb4d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bb50:	68 14 01 00 00       	push   0x114
c001bb55:	e8 5c 3a ff ff       	call   c000f5b6 <malloc>
c001bb5a:	83 c4 0c             	add    esp,0xc
c001bb5d:	89 c3                	mov    ebx,eax
c001bb5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb64:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb67:	56                   	push   esi
c001bb68:	53                   	push   ebx
c001bb69:	e8 a0 6f ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c001bb6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb71:	e8 74 71 ff ff       	call   c0012cea <File::unlink()>
c001bb76:	83 c4 10             	add    esp,0x10
c001bb79:	85 db                	test   ebx,ebx
c001bb7b:	74 14                	je     c001bb91 <sysCallUnlink(regs*)+0x4d>
c001bb7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb81:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb83:	83 ec 0c             	sub    esp,0xc
c001bb86:	53                   	push   ebx
c001bb87:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb8a:	83 c4 10             	add    esp,0x10
c001bb8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb91:	85 c0                	test   eax,eax
c001bb93:	0f 95 c0             	setne  al
c001bb96:	31 d2                	xor    edx,edx
c001bb98:	0f b6 c0             	movzx  eax,al
c001bb9b:	f7 d8                	neg    eax
c001bb9d:	83 d2 00             	adc    edx,0x0
c001bba0:	83 c4 14             	add    esp,0x14
c001bba3:	f7 da                	neg    edx
c001bba5:	5b                   	pop    ebx
c001bba6:	5e                   	pop    esi
c001bba7:	c3                   	ret    

c001bba8 <sysCallGetArgv(regs*)>:
c001bba8:	83 ec 0c             	sub    esp,0xc
c001bbab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bbaf:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bbb2:	85 c0                	test   eax,eax
c001bbb4:	78 2b                	js     c001bbe1 <sysCallGetArgv(regs*)+0x39>
c001bbb6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bbbc:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bbbf:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bbc5:	7d 1a                	jge    c001bbe1 <sysCallGetArgv(regs*)+0x39>
c001bbc7:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bbce:	85 c0                	test   eax,eax
c001bbd0:	74 17                	je     c001bbe9 <sysCallGetArgv(regs*)+0x41>
c001bbd2:	83 ec 08             	sub    esp,0x8
c001bbd5:	50                   	push   eax
c001bbd6:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bbd9:	e8 2e 4c fe ff       	call   c000080c <strcpy>
c001bbde:	83 c4 10             	add    esp,0x10
c001bbe1:	31 c0                	xor    eax,eax
c001bbe3:	31 d2                	xor    edx,edx
c001bbe5:	83 c4 0c             	add    esp,0xc
c001bbe8:	c3                   	ret    
c001bbe9:	b8 01 00 00 00       	mov    eax,0x1
c001bbee:	31 d2                	xor    edx,edx
c001bbf0:	83 c4 0c             	add    esp,0xc
c001bbf3:	c3                   	ret    

c001bbf4 <sysCallTTYName(regs*)>:
c001bbf4:	56                   	push   esi
c001bbf5:	53                   	push   ebx
c001bbf6:	53                   	push   ebx
c001bbf7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bbfb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bbfe:	85 c0                	test   eax,eax
c001bc00:	74 5f                	je     c001bc61 <sysCallTTYName(regs*)+0x6d>
c001bc02:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bc05:	83 f8 02             	cmp    eax,0x2
c001bc08:	77 3e                	ja     c001bc48 <sysCallTTYName(regs*)+0x54>
c001bc0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc0f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc12:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bc18:	85 db                	test   ebx,ebx
c001bc1a:	74 45                	je     c001bc61 <sysCallTTYName(regs*)+0x6d>
c001bc1c:	83 ec 0c             	sub    esp,0xc
c001bc1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc21:	53                   	push   ebx
c001bc22:	ff 10                	call   DWORD PTR [eax]
c001bc24:	83 c4 10             	add    esp,0x10
c001bc27:	84 c0                	test   al,al
c001bc29:	74 41                	je     c001bc6c <sysCallTTYName(regs*)+0x78>
c001bc2b:	83 ec 08             	sub    esp,0x8
c001bc2e:	81 c3 82 00 00 00    	add    ebx,0x82
c001bc34:	53                   	push   ebx
c001bc35:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bc38:	e8 cf 4b fe ff       	call   c000080c <strcpy>
c001bc3d:	83 c4 10             	add    esp,0x10
c001bc40:	31 c0                	xor    eax,eax
c001bc42:	59                   	pop    ecx
c001bc43:	31 d2                	xor    edx,edx
c001bc45:	5b                   	pop    ebx
c001bc46:	5e                   	pop    esi
c001bc47:	c3                   	ret    
c001bc48:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc4d:	74 bb                	je     c001bc0a <sysCallTTYName(regs*)+0x16>
c001bc4f:	83 ec 0c             	sub    esp,0xc
c001bc52:	50                   	push   eax
c001bc53:	e8 fb 53 ff ff       	call   c0011053 <getFromFileDescriptor(int)>
c001bc58:	83 c4 10             	add    esp,0x10
c001bc5b:	89 c3                	mov    ebx,eax
c001bc5d:	85 db                	test   ebx,ebx
c001bc5f:	75 bb                	jne    c001bc1c <sysCallTTYName(regs*)+0x28>
c001bc61:	59                   	pop    ecx
c001bc62:	b8 01 00 00 00       	mov    eax,0x1
c001bc67:	31 d2                	xor    edx,edx
c001bc69:	5b                   	pop    ebx
c001bc6a:	5e                   	pop    esi
c001bc6b:	c3                   	ret    
c001bc6c:	59                   	pop    ecx
c001bc6d:	b8 02 00 00 00       	mov    eax,0x2
c001bc72:	31 d2                	xor    edx,edx
c001bc74:	5b                   	pop    ebx
c001bc75:	5e                   	pop    esi
c001bc76:	c3                   	ret    

c001bc77 <sysCallUSleep(regs*)>:
c001bc77:	83 ec 14             	sub    esp,0x14
c001bc7a:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bc7f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bc83:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bc8a:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bc8d:	01 ca                	add    edx,ecx
c001bc8f:	52                   	push   edx
c001bc90:	50                   	push   eax
c001bc91:	e8 a3 24 00 00       	call   c001e139 <nanoSleep(unsigned long long)>
c001bc96:	31 c0                	xor    eax,eax
c001bc98:	31 d2                	xor    edx,edx
c001bc9a:	83 c4 1c             	add    esp,0x1c
c001bc9d:	c3                   	ret    

c001bc9e <sysCallSpawn(regs*)>:
c001bc9e:	56                   	push   esi
c001bc9f:	53                   	push   ebx
c001bca0:	50                   	push   eax
c001bca1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bca5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bca8:	85 c0                	test   eax,eax
c001bcaa:	75 08                	jne    c001bcb4 <sysCallSpawn(regs*)+0x16>
c001bcac:	59                   	pop    ecx
c001bcad:	31 c0                	xor    eax,eax
c001bcaf:	31 d2                	xor    edx,edx
c001bcb1:	5b                   	pop    ebx
c001bcb2:	5e                   	pop    esi
c001bcb3:	c3                   	ret    
c001bcb4:	83 ec 08             	sub    esp,0x8
c001bcb7:	50                   	push   eax
c001bcb8:	68 6b c5 02 c0       	push   0xc002c56b
c001bcbd:	e8 ed 68 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001bcc2:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001bcc9:	e8 e8 38 ff ff       	call   c000f5b6 <malloc>
c001bcce:	83 c4 10             	add    esp,0x10
c001bcd1:	89 c6                	mov    esi,eax
c001bcd3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bcd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcd9:	85 c0                	test   eax,eax
c001bcdb:	75 32                	jne    c001bd0f <sysCallSpawn(regs*)+0x71>
c001bcdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bce2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bce5:	52                   	push   edx
c001bce6:	50                   	push   eax
c001bce7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcea:	56                   	push   esi
c001bceb:	e8 26 1b 00 00       	call   c001d816 <Process::Process(char const*, Process*, char**)>
c001bcf0:	83 c4 10             	add    esp,0x10
c001bcf3:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bcfa:	75 b0                	jne    c001bcac <sysCallSpawn(regs*)+0xe>
c001bcfc:	83 ec 0c             	sub    esp,0xc
c001bcff:	56                   	push   esi
c001bd00:	e8 f3 1f 00 00       	call   c001dcf8 <Process::createUserThread()>
c001bd05:	8b 06                	mov    eax,DWORD PTR [esi]
c001bd07:	83 c4 10             	add    esp,0x10
c001bd0a:	99                   	cdq    
c001bd0b:	59                   	pop    ecx
c001bd0c:	5b                   	pop    ebx
c001bd0d:	5e                   	pop    esi
c001bd0e:	c3                   	ret    
c001bd0f:	31 c0                	xor    eax,eax
c001bd11:	eb d2                	jmp    c001bce5 <sysCallSpawn(regs*)+0x47>

c001bd13 <sysCallGetEnv(regs*)>:
c001bd13:	55                   	push   ebp
c001bd14:	57                   	push   edi
c001bd15:	56                   	push   esi
c001bd16:	53                   	push   ebx
c001bd17:	83 ec 28             	sub    esp,0x28
c001bd1a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bd1e:	68 79 c5 02 c0       	push   0xc002c579
c001bd23:	e8 87 68 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001bd28:	5f                   	pop    edi
c001bd29:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bd2c:	5d                   	pop    ebp
c001bd2d:	53                   	push   ebx
c001bd2e:	68 a6 c8 02 c0       	push   0xc002c8a6
c001bd33:	e8 77 68 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001bd38:	58                   	pop    eax
c001bd39:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bd3c:	5a                   	pop    edx
c001bd3d:	57                   	push   edi
c001bd3e:	68 82 c5 02 c0       	push   0xc002c582
c001bd43:	e8 67 68 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001bd48:	59                   	pop    ecx
c001bd49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd4e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd51:	e8 43 e2 ff ff       	call   c0019f99 <Krnl::getProcessTotalEnvCount(Process*)>
c001bd56:	5a                   	pop    edx
c001bd57:	89 c5                	mov    ebp,eax
c001bd59:	59                   	pop    ecx
c001bd5a:	50                   	push   eax
c001bd5b:	68 8c c5 02 c0       	push   0xc002c58c
c001bd60:	e8 4a 68 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001bd65:	83 c4 10             	add    esp,0x10
c001bd68:	39 ef                	cmp    edi,ebp
c001bd6a:	7c 15                	jl     c001bd81 <sysCallGetEnv(regs*)+0x6e>
c001bd6c:	85 db                	test   ebx,ebx
c001bd6e:	75 0c                	jne    c001bd7c <sysCallGetEnv(regs*)+0x69>
c001bd70:	83 c4 1c             	add    esp,0x1c
c001bd73:	31 c0                	xor    eax,eax
c001bd75:	5b                   	pop    ebx
c001bd76:	31 d2                	xor    edx,edx
c001bd78:	5e                   	pop    esi
c001bd79:	5f                   	pop    edi
c001bd7a:	5d                   	pop    ebp
c001bd7b:	c3                   	ret    
c001bd7c:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bd7f:	eb ef                	jmp    c001bd70 <sysCallGetEnv(regs*)+0x5d>
c001bd81:	83 ec 0c             	sub    esp,0xc
c001bd84:	68 98 c5 02 c0       	push   0xc002c598
c001bd89:	e8 21 68 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001bd8e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd92:	83 c4 0c             	add    esp,0xc
c001bd95:	57                   	push   edi
c001bd96:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bd9c:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bd9f:	50                   	push   eax
c001bda0:	e8 14 e2 ff ff       	call   c0019fb9 <Krnl::getProcessEnvPair(Process*, int)>
c001bda5:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bda9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bdad:	68 57 c9 02 c0       	push   0xc002c957
c001bdb2:	e8 f8 67 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001bdb7:	83 c4 10             	add    esp,0x10
c001bdba:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001bdbd:	85 f6                	test   esi,esi
c001bdbf:	75 47                	jne    c001be08 <sysCallGetEnv(regs*)+0xf5>
c001bdc1:	83 ec 0c             	sub    esp,0xc
c001bdc4:	55                   	push   ebp
c001bdc5:	e8 a2 49 fe ff       	call   c000076c <strlen>
c001bdca:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bdcd:	89 c3                	mov    ebx,eax
c001bdcf:	e8 98 49 fe ff       	call   c000076c <strlen>
c001bdd4:	5a                   	pop    edx
c001bdd5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bdd9:	59                   	pop    ecx
c001bdda:	50                   	push   eax
c001bddb:	68 9b c5 02 c0       	push   0xc002c59b
c001bde0:	e8 ca 67 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001bde5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bde8:	e8 7f 49 fe ff       	call   c000076c <strlen>
c001bded:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bdf0:	89 c3                	mov    ebx,eax
c001bdf2:	e8 75 49 fe ff       	call   c000076c <strlen>
c001bdf7:	83 c4 10             	add    esp,0x10
c001bdfa:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bdfe:	83 c4 1c             	add    esp,0x1c
c001be01:	31 d2                	xor    edx,edx
c001be03:	5b                   	pop    ebx
c001be04:	5e                   	pop    esi
c001be05:	5f                   	pop    edi
c001be06:	5d                   	pop    ebp
c001be07:	c3                   	ret    
c001be08:	83 ec 0c             	sub    esp,0xc
c001be0b:	68 71 c9 02 c0       	push   0xc002c971
c001be10:	e8 9a 67 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001be15:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001be18:	58                   	pop    eax
c001be19:	5a                   	pop    edx
c001be1a:	55                   	push   ebp
c001be1b:	53                   	push   ebx
c001be1c:	e8 eb 49 fe ff       	call   c000080c <strcpy>
c001be21:	59                   	pop    ecx
c001be22:	5e                   	pop    esi
c001be23:	68 a5 c5 02 c0       	push   0xc002c5a5
c001be28:	53                   	push   ebx
c001be29:	e8 1e 4b fe ff       	call   c000094c <strcat>
c001be2e:	5d                   	pop    ebp
c001be2f:	58                   	pop    eax
c001be30:	57                   	push   edi
c001be31:	53                   	push   ebx
c001be32:	e8 15 4b fe ff       	call   c000094c <strcat>
c001be37:	c7 04 24 8b c9 02 c0 	mov    DWORD PTR [esp],0xc002c98b
c001be3e:	e8 6c 67 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001be43:	83 c4 10             	add    esp,0x10
c001be46:	e9 25 ff ff ff       	jmp    c001bd70 <sysCallGetEnv(regs*)+0x5d>

c001be4b <sysAppSettings(regs*)>:
c001be4b:	57                   	push   edi
c001be4c:	56                   	push   esi
c001be4d:	56                   	push   esi
c001be4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be52:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be55:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001be5b:	25 e0 1f 00 00       	and    eax,0x1fe0
c001be60:	66 3d c0 09          	cmp    ax,0x9c0
c001be64:	75 2e                	jne    c001be94 <sysAppSettings(regs*)+0x49>
c001be66:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001be6c:	83 e0 1f             	and    eax,0x1f
c001be6f:	3c 01                	cmp    al,0x1
c001be71:	74 2c                	je     c001be9f <sysAppSettings(regs*)+0x54>
c001be73:	3c 07                	cmp    al,0x7
c001be75:	0f 84 b3 00 00 00    	je     c001bf2e <sysAppSettings(regs*)+0xe3>
c001be7b:	84 c0                	test   al,al
c001be7d:	0f 84 d2 00 00 00    	je     c001bf55 <sysAppSettings(regs*)+0x10a>
c001be83:	3c 08                	cmp    al,0x8
c001be85:	74 63                	je     c001beea <sysAppSettings(regs*)+0x9f>
c001be87:	59                   	pop    ecx
c001be88:	0f b6 c0             	movzx  eax,al
c001be8b:	5e                   	pop    esi
c001be8c:	05 e8 03 00 00       	add    eax,0x3e8
c001be91:	5f                   	pop    edi
c001be92:	99                   	cdq    
c001be93:	c3                   	ret    
c001be94:	b8 01 00 00 00       	mov    eax,0x1
c001be99:	59                   	pop    ecx
c001be9a:	31 d2                	xor    edx,edx
c001be9c:	5e                   	pop    esi
c001be9d:	5f                   	pop    edi
c001be9e:	c3                   	ret    
c001be9f:	50                   	push   eax
c001bea0:	68 00 01 00 00       	push   0x100
c001bea5:	6a 00                	push   0x0
c001bea7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001beac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001beaf:	83 c0 0c             	add    eax,0xc
c001beb2:	50                   	push   eax
c001beb3:	e8 98 48 fe ff       	call   c0000750 <memset>
c001beb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bebd:	b9 ff 00 00 00       	mov    ecx,0xff
c001bec2:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001bec5:	83 c7 0c             	add    edi,0xc
c001bec8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001beca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001becf:	5a                   	pop    edx
c001bed0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bed3:	59                   	pop    ecx
c001bed4:	8d 50 0c             	lea    edx,[eax+0xc]
c001bed7:	52                   	push   edx
c001bed8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bede:	e8 85 42 ff ff       	call   c0010168 <VgaText::setTitle(char*)>
c001bee3:	83 c4 10             	add    esp,0x10
c001bee6:	31 c0                	xor    eax,eax
c001bee8:	eb af                	jmp    c001be99 <sysAppSettings(regs*)+0x4e>
c001beea:	83 ec 08             	sub    esp,0x8
c001beed:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bef3:	83 e0 0f             	and    eax,0xf
c001bef6:	50                   	push   eax
c001bef7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001befc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001beff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bf05:	e8 4e 42 ff ff       	call   c0010158 <VgaText::setTitleColour(VgaColour)>
c001bf0a:	5f                   	pop    edi
c001bf0b:	58                   	pop    eax
c001bf0c:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bf12:	c1 e8 04             	shr    eax,0x4
c001bf15:	83 e0 0f             	and    eax,0xf
c001bf18:	50                   	push   eax
c001bf19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf1e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bf27:	e8 1c 42 ff ff       	call   c0010148 <VgaText::setTitleTextColour(VgaColour)>
c001bf2c:	eb b5                	jmp    c001bee3 <sysAppSettings(regs*)+0x98>
c001bf2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf33:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf36:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bf3c:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bf42:	c0 e8 06             	shr    al,0x6
c001bf45:	83 e0 01             	and    eax,0x1
c001bf48:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bf4e:	31 c0                	xor    eax,eax
c001bf50:	e9 44 ff ff ff       	jmp    c001be99 <sysAppSettings(regs*)+0x4e>
c001bf55:	b8 02 00 00 00       	mov    eax,0x2
c001bf5a:	e9 3a ff ff ff       	jmp    c001be99 <sysAppSettings(regs*)+0x4e>

c001bf5f <sysSetFatAttrib(regs*)>:
c001bf5f:	57                   	push   edi
c001bf60:	56                   	push   esi
c001bf61:	53                   	push   ebx
c001bf62:	83 ec 1c             	sub    esp,0x1c
c001bf65:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bf69:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bf6c:	68 14 01 00 00       	push   0x114
c001bf71:	e8 40 36 ff ff       	call   c000f5b6 <malloc>
c001bf76:	83 c4 0c             	add    esp,0xc
c001bf79:	89 c3                	mov    ebx,eax
c001bf7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf80:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf83:	57                   	push   edi
c001bf84:	53                   	push   ebx
c001bf85:	e8 84 6b ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c001bf8a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bf8d:	83 c4 0c             	add    esp,0xc
c001bf90:	0f b6 d4             	movzx  edx,ah
c001bf93:	0f b6 c0             	movzx  eax,al
c001bf96:	52                   	push   edx
c001bf97:	50                   	push   eax
c001bf98:	53                   	push   ebx
c001bf99:	e8 e6 6d ff ff       	call   c0012d84 <File::chfatattr(unsigned char, unsigned char)>
c001bf9e:	83 c4 10             	add    esp,0x10
c001bfa1:	85 db                	test   ebx,ebx
c001bfa3:	74 14                	je     c001bfb9 <sysSetFatAttrib(regs*)+0x5a>
c001bfa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfa9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bfab:	83 ec 0c             	sub    esp,0xc
c001bfae:	53                   	push   ebx
c001bfaf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bfb2:	83 c4 10             	add    esp,0x10
c001bfb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfb9:	85 c0                	test   eax,eax
c001bfbb:	0f 95 c0             	setne  al
c001bfbe:	31 d2                	xor    edx,edx
c001bfc0:	0f b6 c0             	movzx  eax,al
c001bfc3:	f7 d8                	neg    eax
c001bfc5:	83 d2 00             	adc    edx,0x0
c001bfc8:	83 c4 10             	add    esp,0x10
c001bfcb:	f7 da                	neg    edx
c001bfcd:	5b                   	pop    ebx
c001bfce:	5e                   	pop    esi
c001bfcf:	5f                   	pop    edi
c001bfd0:	c3                   	ret    

c001bfd1 <sysPipe(regs*)>:
c001bfd1:	57                   	push   edi
c001bfd2:	56                   	push   esi
c001bfd3:	53                   	push   ebx
c001bfd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfd8:	83 ec 0c             	sub    esp,0xc
c001bfdb:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bfde:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bfe1:	6a 20                	push   0x20
c001bfe3:	e8 ce 35 ff ff       	call   c000f5b6 <malloc>
c001bfe8:	89 c3                	mov    ebx,eax
c001bfea:	58                   	pop    eax
c001bfeb:	5a                   	pop    edx
c001bfec:	68 00 50 00 00       	push   0x5000
c001bff1:	53                   	push   ebx
c001bff2:	e8 e9 3e ff ff       	call   c000fee0 <Pipe::Pipe(int)>
c001bff7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bffa:	e8 5f 4d ff ff       	call   c0010d5e <UnixFile::getFileDescriptor()>
c001bfff:	89 07                	mov    DWORD PTR [edi],eax
c001c001:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c004:	e8 55 4d ff ff       	call   c0010d5e <UnixFile::getFileDescriptor()>
c001c009:	83 c4 10             	add    esp,0x10
c001c00c:	89 06                	mov    DWORD PTR [esi],eax
c001c00e:	31 d2                	xor    edx,edx
c001c010:	5b                   	pop    ebx
c001c011:	31 c0                	xor    eax,eax
c001c013:	5e                   	pop    esi
c001c014:	5f                   	pop    edi
c001c015:	c3                   	ret    

c001c016 <sysGetUnixTime(regs*)>:
c001c016:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c001c01b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c021:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c025:	e9 d6 74 ff ff       	jmp    c0013500 <Clock::timeInSecondsLocal()>

c001c02a <string_ends_with(char const*, char const*)>:
c001c02a:	57                   	push   edi
c001c02b:	56                   	push   esi
c001c02c:	53                   	push   ebx
c001c02d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c031:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c035:	83 ec 0c             	sub    esp,0xc
c001c038:	53                   	push   ebx
c001c039:	e8 2e 47 fe ff       	call   c000076c <strlen>
c001c03e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c041:	89 c6                	mov    esi,eax
c001c043:	e8 24 47 fe ff       	call   c000076c <strlen>
c001c048:	83 c4 10             	add    esp,0x10
c001c04b:	39 c6                	cmp    esi,eax
c001c04d:	7d 06                	jge    c001c055 <string_ends_with(char const*, char const*)+0x2b>
c001c04f:	5b                   	pop    ebx
c001c050:	31 c0                	xor    eax,eax
c001c052:	5e                   	pop    esi
c001c053:	5f                   	pop    edi
c001c054:	c3                   	ret    
c001c055:	83 ec 08             	sub    esp,0x8
c001c058:	29 c6                	sub    esi,eax
c001c05a:	57                   	push   edi
c001c05b:	01 f3                	add    ebx,esi
c001c05d:	53                   	push   ebx
c001c05e:	e8 35 48 fe ff       	call   c0000898 <strcmp>
c001c063:	83 c4 10             	add    esp,0x10
c001c066:	85 c0                	test   eax,eax
c001c068:	5b                   	pop    ebx
c001c069:	0f 94 c0             	sete   al
c001c06c:	5e                   	pop    esi
c001c06d:	0f b6 c0             	movzx  eax,al
c001c070:	5f                   	pop    edi
c001c071:	c3                   	ret    

c001c072 <sysCallOpen(regs*)>:
c001c072:	56                   	push   esi
c001c073:	53                   	push   ebx
c001c074:	81 ec 04 01 00 00    	sub    esp,0x104
c001c07a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c081:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c084:	85 c9                	test   ecx,ecx
c001c086:	0f 84 b3 00 00 00    	je     c001c13f <sysCallOpen(regs*)+0xcd>
c001c08c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c08f:	85 c0                	test   eax,eax
c001c091:	0f 84 a8 00 00 00    	je     c001c13f <sysCallOpen(regs*)+0xcd>
c001c097:	52                   	push   edx
c001c098:	68 a7 c5 02 c0       	push   0xc002c5a7
c001c09d:	50                   	push   eax
c001c09e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c0a2:	56                   	push   esi
c001c0a3:	e8 bc 68 ff ff       	call   c0012964 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c0a8:	89 34 24             	mov    DWORD PTR [esp],esi
c001c0ab:	e8 bc 46 fe ff       	call   c000076c <strlen>
c001c0b0:	83 c4 10             	add    esp,0x10
c001c0b3:	48                   	dec    eax
c001c0b4:	74 1d                	je     c001c0d3 <sysCallOpen(regs*)+0x61>
c001c0b6:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c0b9:	eb 0f                	jmp    c001c0ca <sysCallOpen(regs*)+0x58>
c001c0bb:	80 fa 3a             	cmp    dl,0x3a
c001c0be:	74 0f                	je     c001c0cf <sysCallOpen(regs*)+0x5d>
c001c0c0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c0c4:	48                   	dec    eax
c001c0c5:	74 0c                	je     c001c0d3 <sysCallOpen(regs*)+0x61>
c001c0c7:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c0ca:	80 fa 2e             	cmp    dl,0x2e
c001c0cd:	75 ec                	jne    c001c0bb <sysCallOpen(regs*)+0x49>
c001c0cf:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c0d3:	83 ec 08             	sub    esp,0x8
c001c0d6:	68 ab c5 02 c0       	push   0xc002c5ab
c001c0db:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0de:	e8 47 ff ff ff       	call   c001c02a <string_ends_with(char const*, char const*)>
c001c0e3:	83 c4 10             	add    esp,0x10
c001c0e6:	85 c0                	test   eax,eax
c001c0e8:	75 17                	jne    c001c101 <sysCallOpen(regs*)+0x8f>
c001c0ea:	83 ec 08             	sub    esp,0x8
c001c0ed:	68 cc c5 02 c0       	push   0xc002c5cc
c001c0f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0f5:	e8 30 ff ff ff       	call   c001c02a <string_ends_with(char const*, char const*)>
c001c0fa:	83 c4 10             	add    esp,0x10
c001c0fd:	85 c0                	test   eax,eax
c001c0ff:	74 51                	je     c001c152 <sysCallOpen(regs*)+0xe0>
c001c101:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c104:	83 ec 08             	sub    esp,0x8
c001c107:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c10d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c114:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c117:	ff 30                	push   DWORD PTR [eax]
c001c119:	68 b0 c5 02 c0       	push   0xc002c5b0
c001c11e:	e8 8c 64 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001c123:	c7 04 24 bf c5 02 c0 	mov    DWORD PTR [esp],0xc002c5bf
c001c12a:	e8 80 64 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001c12f:	83 c4 10             	add    esp,0x10
c001c132:	81 c4 04 01 00 00    	add    esp,0x104
c001c138:	31 c0                	xor    eax,eax
c001c13a:	31 d2                	xor    edx,edx
c001c13c:	5b                   	pop    ebx
c001c13d:	5e                   	pop    esi
c001c13e:	c3                   	ret    
c001c13f:	81 c4 04 01 00 00    	add    esp,0x104
c001c145:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c14a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c14f:	5b                   	pop    ebx
c001c150:	5e                   	pop    esi
c001c151:	c3                   	ret    
c001c152:	83 ec 08             	sub    esp,0x8
c001c155:	68 ac c5 02 c0       	push   0xc002c5ac
c001c15a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c15d:	e8 36 47 fe ff       	call   c0000898 <strcmp>
c001c162:	83 c4 10             	add    esp,0x10
c001c165:	85 c0                	test   eax,eax
c001c167:	74 98                	je     c001c101 <sysCallOpen(regs*)+0x8f>
c001c169:	83 ec 08             	sub    esp,0x8
c001c16c:	68 ab c5 02 c0       	push   0xc002c5ab
c001c171:	56                   	push   esi
c001c172:	e8 b3 fe ff ff       	call   c001c02a <string_ends_with(char const*, char const*)>
c001c177:	83 c4 10             	add    esp,0x10
c001c17a:	85 c0                	test   eax,eax
c001c17c:	75 83                	jne    c001c101 <sysCallOpen(regs*)+0x8f>
c001c17e:	83 ec 08             	sub    esp,0x8
c001c181:	68 d1 c5 02 c0       	push   0xc002c5d1
c001c186:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c189:	e8 9c fe ff ff       	call   c001c02a <string_ends_with(char const*, char const*)>
c001c18e:	83 c4 10             	add    esp,0x10
c001c191:	85 c0                	test   eax,eax
c001c193:	0f 85 d9 00 00 00    	jne    c001c272 <sysCallOpen(regs*)+0x200>
c001c199:	83 ec 08             	sub    esp,0x8
c001c19c:	68 d6 c5 02 c0       	push   0xc002c5d6
c001c1a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c1a4:	e8 81 fe ff ff       	call   c001c02a <string_ends_with(char const*, char const*)>
c001c1a9:	83 c4 10             	add    esp,0x10
c001c1ac:	85 c0                	test   eax,eax
c001c1ae:	0f 85 be 00 00 00    	jne    c001c272 <sysCallOpen(regs*)+0x200>
c001c1b4:	83 ec 08             	sub    esp,0x8
c001c1b7:	68 d2 c5 02 c0       	push   0xc002c5d2
c001c1bc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c1bf:	e8 d4 46 fe ff       	call   c0000898 <strcmp>
c001c1c4:	83 c4 10             	add    esp,0x10
c001c1c7:	85 c0                	test   eax,eax
c001c1c9:	0f 84 a3 00 00 00    	je     c001c272 <sysCallOpen(regs*)+0x200>
c001c1cf:	83 ec 08             	sub    esp,0x8
c001c1d2:	68 d1 c5 02 c0       	push   0xc002c5d1
c001c1d7:	56                   	push   esi
c001c1d8:	e8 4d fe ff ff       	call   c001c02a <string_ends_with(char const*, char const*)>
c001c1dd:	83 c4 10             	add    esp,0x10
c001c1e0:	85 c0                	test   eax,eax
c001c1e2:	0f 85 8a 00 00 00    	jne    c001c272 <sysCallOpen(regs*)+0x200>
c001c1e8:	83 ec 0c             	sub    esp,0xc
c001c1eb:	68 14 01 00 00       	push   0x114
c001c1f0:	e8 c1 33 ff ff       	call   c000f5b6 <malloc>
c001c1f5:	83 c4 0c             	add    esp,0xc
c001c1f8:	89 c6                	mov    esi,eax
c001c1fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1ff:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c202:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c205:	56                   	push   esi
c001c206:	e8 03 69 ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c001c20b:	83 c4 10             	add    esp,0x10
c001c20e:	85 f6                	test   esi,esi
c001c210:	0f 84 29 ff ff ff    	je     c001c13f <sysCallOpen(regs*)+0xcd>
c001c216:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c219:	0f b6 c2             	movzx  eax,dl
c001c21c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c21f:	89 d0                	mov    eax,edx
c001c221:	83 e0 01             	and    eax,0x1
c001c224:	f6 c2 02             	test   dl,0x2
c001c227:	74 03                	je     c001c22c <sysCallOpen(regs*)+0x1ba>
c001c229:	83 c8 02             	or     eax,0x2
c001c22c:	f6 c2 04             	test   dl,0x4
c001c22f:	74 03                	je     c001c234 <sysCallOpen(regs*)+0x1c2>
c001c231:	83 c8 04             	or     eax,0x4
c001c234:	f6 c2 08             	test   dl,0x8
c001c237:	74 03                	je     c001c23c <sysCallOpen(regs*)+0x1ca>
c001c239:	83 c8 0a             	or     eax,0xa
c001c23c:	83 e2 10             	and    edx,0x10
c001c23f:	74 03                	je     c001c244 <sysCallOpen(regs*)+0x1d2>
c001c241:	83 c8 12             	or     eax,0x12
c001c244:	83 ec 08             	sub    esp,0x8
c001c247:	50                   	push   eax
c001c248:	56                   	push   esi
c001c249:	e8 24 69 ff ff       	call   c0012b72 <File::open(FileOpenMode)>
c001c24e:	83 c4 10             	add    esp,0x10
c001c251:	85 c0                	test   eax,eax
c001c253:	0f 85 e6 fe ff ff    	jne    c001c13f <sysCallOpen(regs*)+0xcd>
c001c259:	83 ec 0c             	sub    esp,0xc
c001c25c:	56                   	push   esi
c001c25d:	e8 fc 4a ff ff       	call   c0010d5e <UnixFile::getFileDescriptor()>
c001c262:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c265:	89 02                	mov    DWORD PTR [edx],eax
c001c267:	c1 f8 1f             	sar    eax,0x1f
c001c26a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c26d:	e9 bd fe ff ff       	jmp    c001c12f <sysCallOpen(regs*)+0xbd>
c001c272:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c275:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c27b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c282:	e9 ab fe ff ff       	jmp    c001c132 <sysCallOpen(regs*)+0xc0>

c001c287 <Sys::loadSyscalls()>:
c001c287:	c7 05 a0 18 03 c0 77 b3 01 c0 	mov    DWORD PTR ds:0xc00318a0,0xc001b377
c001c291:	c7 05 a4 18 03 c0 dc ae 01 c0 	mov    DWORD PTR ds:0xc00318a4,0xc001aedc
c001c29b:	c7 05 a8 18 03 c0 ca b0 01 c0 	mov    DWORD PTR ds:0xc00318a8,0xc001b0ca
c001c2a5:	c7 05 ac 18 03 c0 ad b2 01 c0 	mov    DWORD PTR ds:0xc00318ac,0xc001b2ad
c001c2af:	c7 05 b0 18 03 c0 62 b0 01 c0 	mov    DWORD PTR ds:0xc00318b0,0xc001b062
c001c2b9:	c7 05 b4 18 03 c0 13 af 01 c0 	mov    DWORD PTR ds:0xc00318b4,0xc001af13
c001c2c3:	c7 05 b8 18 03 c0 f4 ae 01 c0 	mov    DWORD PTR ds:0xc00318b8,0xc001aef4
c001c2cd:	c7 05 bc 18 03 c0 1f b1 01 c0 	mov    DWORD PTR ds:0xc00318bc,0xc001b11f
c001c2d7:	c7 05 c4 18 03 c0 b2 b8 01 c0 	mov    DWORD PTR ds:0xc00318c4,0xc001b8b2
c001c2e1:	c7 05 c0 18 03 c0 72 c0 01 c0 	mov    DWORD PTR ds:0xc00318c0,0xc001c072
c001c2eb:	c7 05 c8 18 03 c0 3a b9 01 c0 	mov    DWORD PTR ds:0xc00318c8,0xc001b93a
c001c2f5:	c7 05 cc 18 03 c0 a1 b5 01 c0 	mov    DWORD PTR ds:0xc00318cc,0xc001b5a1
c001c2ff:	c7 05 d0 18 03 c0 bd b3 01 c0 	mov    DWORD PTR ds:0xc00318d0,0xc001b3bd
c001c309:	c7 05 d4 18 03 c0 c2 b3 01 c0 	mov    DWORD PTR ds:0xc00318d4,0xc001b3c2
c001c313:	c7 05 d8 18 03 c0 15 ba 01 c0 	mov    DWORD PTR ds:0xc00318d8,0xc001ba15
c001c31d:	c7 05 dc 18 03 c0 af b9 01 c0 	mov    DWORD PTR ds:0xc00318dc,0xc001b9af
c001c327:	c7 05 e0 18 03 c0 89 b6 01 c0 	mov    DWORD PTR ds:0xc00318e0,0xc001b689
c001c331:	c7 05 e4 18 03 c0 f2 b6 01 c0 	mov    DWORD PTR ds:0xc00318e4,0xc001b6f2
c001c33b:	c7 05 e8 18 03 c0 6f b7 01 c0 	mov    DWORD PTR ds:0xc00318e8,0xc001b76f
c001c345:	c7 05 ec 18 03 c0 c7 b3 01 c0 	mov    DWORD PTR ds:0xc00318ec,0xc001b3c7
c001c34f:	c7 05 f0 18 03 c0 85 ba 01 c0 	mov    DWORD PTR ds:0xc00318f0,0xc001ba85
c001c359:	c7 05 f4 18 03 c0 9f ba 01 c0 	mov    DWORD PTR ds:0xc00318f4,0xc001ba9f
c001c363:	c7 05 f8 18 03 c0 9f ba 01 c0 	mov    DWORD PTR ds:0xc00318f8,0xc001ba9f
c001c36d:	c7 05 fc 18 03 c0 e0 ba 01 c0 	mov    DWORD PTR ds:0xc00318fc,0xc001bae0
c001c377:	c7 05 00 19 03 c0 44 bb 01 c0 	mov    DWORD PTR ds:0xc0031900,0xc001bb44
c001c381:	c7 05 04 19 03 c0 73 b5 01 c0 	mov    DWORD PTR ds:0xc0031904,0xc001b573
c001c38b:	c7 05 08 19 03 c0 a8 bb 01 c0 	mov    DWORD PTR ds:0xc0031908,0xc001bba8
c001c395:	c7 05 0c 19 03 c0 30 b5 01 c0 	mov    DWORD PTR ds:0xc003190c,0xc001b530
c001c39f:	c7 05 10 19 03 c0 f4 bb 01 c0 	mov    DWORD PTR ds:0xc0031910,0xc001bbf4
c001c3a9:	c7 05 14 19 03 c0 2f b6 01 c0 	mov    DWORD PTR ds:0xc0031914,0xc001b62f
c001c3b3:	c7 05 18 19 03 c0 77 bc 01 c0 	mov    DWORD PTR ds:0xc0031918,0xc001bc77
c001c3bd:	c7 05 1c 19 03 c0 f2 b7 01 c0 	mov    DWORD PTR ds:0xc003191c,0xc001b7f2
c001c3c7:	c7 05 20 19 03 c0 9e bc 01 c0 	mov    DWORD PTR ds:0xc0031920,0xc001bc9e
c001c3d1:	c7 05 24 19 03 c0 13 bd 01 c0 	mov    DWORD PTR ds:0xc0031924,0xc001bd13
c001c3db:	c7 05 28 19 03 c0 4b be 01 c0 	mov    DWORD PTR ds:0xc0031928,0xc001be4b
c001c3e5:	c7 05 2c 19 03 c0 d1 b3 01 c0 	mov    DWORD PTR ds:0xc003192c,0xc001b3d1
c001c3ef:	c7 05 30 19 03 c0 3b b4 01 c0 	mov    DWORD PTR ds:0xc0031930,0xc001b43b
c001c3f9:	c7 05 34 19 03 c0 81 b4 01 c0 	mov    DWORD PTR ds:0xc0031934,0xc001b481
c001c403:	c7 05 38 19 03 c0 5f bf 01 c0 	mov    DWORD PTR ds:0xc0031938,0xc001bf5f
c001c40d:	c7 05 3c 19 03 c0 ba ba 01 c0 	mov    DWORD PTR ds:0xc003193c,0xc001baba
c001c417:	c7 05 40 19 03 c0 d2 b4 01 c0 	mov    DWORD PTR ds:0xc0031940,0xc001b4d2
c001c421:	c7 05 44 19 03 c0 d1 bf 01 c0 	mov    DWORD PTR ds:0xc0031944,0xc001bfd1
c001c42b:	c7 05 48 19 03 c0 16 c0 01 c0 	mov    DWORD PTR ds:0xc0031948,0xc001c016
c001c435:	c7 05 4c 19 03 c0 ba af 01 c0 	mov    DWORD PTR ds:0xc003194c,0xc001afba
c001c43f:	c7 05 50 19 03 c0 3b b1 01 c0 	mov    DWORD PTR ds:0xc0031950,0xc001b13b
c001c449:	c7 05 54 19 03 c0 63 b2 01 c0 	mov    DWORD PTR ds:0xc0031954,0xc001b263
c001c453:	c7 05 58 19 03 c0 a6 ae 01 c0 	mov    DWORD PTR ds:0xc0031958,0xc001aea6
c001c45d:	c7 05 5c 19 03 c0 15 b3 01 c0 	mov    DWORD PTR ds:0xc003195c,0xc001b315
c001c467:	c7 05 60 19 03 c0 1f af 01 c0 	mov    DWORD PTR ds:0xc0031960,0xc001af1f
c001c471:	c7 05 64 19 03 c0 36 af 01 c0 	mov    DWORD PTR ds:0xc0031964,0xc001af36
c001c47b:	c3                   	ret    

c001c47c <Sys::systemCall(regs*, void*)>:
c001c47c:	53                   	push   ebx
c001c47d:	83 ec 08             	sub    esp,0x8
c001c480:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c484:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c487:	83 f8 7f             	cmp    eax,0x7f
c001c48a:	77 16                	ja     c001c4a2 <Sys::systemCall(regs*, void*)+0x26>
c001c48c:	8b 14 85 a0 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce760]
c001c493:	85 d2                	test   edx,edx
c001c495:	74 0b                	je     c001c4a2 <Sys::systemCall(regs*, void*)+0x26>
c001c497:	83 ec 0c             	sub    esp,0xc
c001c49a:	53                   	push   ebx
c001c49b:	ff d2                	call   edx
c001c49d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c4a0:	eb 0d                	jmp    c001c4af <Sys::systemCall(regs*, void*)+0x33>
c001c4a2:	52                   	push   edx
c001c4a3:	52                   	push   edx
c001c4a4:	50                   	push   eax
c001c4a5:	68 db c5 02 c0       	push   0xc002c5db
c001c4aa:	e8 00 61 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001c4af:	83 c4 10             	add    esp,0x10
c001c4b2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c4b7:	31 d2                	xor    edx,edx
c001c4b9:	83 c4 08             	add    esp,0x8
c001c4bc:	5b                   	pop    ebx
c001c4bd:	c3                   	ret    

c001c4be <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c4be:	55                   	push   ebp
c001c4bf:	57                   	push   edi
c001c4c0:	56                   	push   esi
c001c4c1:	53                   	push   ebx
c001c4c2:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c4c8:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c4cf:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c4d6:	85 c0                	test   eax,eax
c001c4d8:	0f 95 c1             	setne  cl
c001c4db:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c4e3:	0f 94 c2             	sete   dl
c001c4e6:	84 d1                	test   cl,dl
c001c4e8:	74 23                	je     c001c50d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c4ea:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c4f0:	74 1b                	je     c001c50d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c4f2:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c4f8:	89 da                	mov    edx,ebx
c001c4fa:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c500:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c506:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c50d:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c514:	05 ff 0f 00 00       	add    eax,0xfff
c001c519:	83 ec 0c             	sub    esp,0xc
c001c51c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c520:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c526:	c1 e8 0c             	shr    eax,0xc
c001c529:	89 fe                	mov    esi,edi
c001c52b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c52f:	c1 ee 0c             	shr    esi,0xc
c001c532:	6a 01                	push   0x1
c001c534:	e8 70 4c ff ff       	call   c00111a9 <Virt::allocateKernelVirtualPages(int)>
c001c539:	89 c5                	mov    ebp,eax
c001c53b:	58                   	pop    eax
c001c53c:	5a                   	pop    edx
c001c53d:	56                   	push   esi
c001c53e:	68 5f c6 02 c0       	push   0xc002c65f
c001c543:	e8 67 60 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001c548:	59                   	pop    ecx
c001c549:	58                   	pop    eax
c001c54a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c54e:	68 71 c6 02 c0       	push   0xc002c671
c001c553:	e8 57 60 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001c558:	83 c4 10             	add    esp,0x10
c001c55b:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c561:	0f 86 31 01 00 00    	jbe    c001c698 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c567:	c1 e6 0c             	shl    esi,0xc
c001c56a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c56d:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c570:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c574:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c57b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c57e:	01 df                	add    edi,ebx
c001c580:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c583:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c587:	0f 84 08 01 00 00    	je     c001c695 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c58d:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c593:	76 05                	jbe    c001c59a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c595:	bf 00 10 00 00       	mov    edi,0x1000
c001c59a:	83 ec 0c             	sub    esp,0xc
c001c59d:	31 d2                	xor    edx,edx
c001c59f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c5a6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c5a8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c5ac:	50                   	push   eax
c001c5ad:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c5b1:	56                   	push   esi
c001c5b2:	52                   	push   edx
c001c5b3:	57                   	push   edi
c001c5b4:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c5bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c5be:	83 c4 20             	add    esp,0x20
c001c5c1:	85 c0                	test   eax,eax
c001c5c3:	74 0a                	je     c001c5cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c5c5:	53                   	push   ebx
c001c5c6:	53                   	push   ebx
c001c5c7:	50                   	push   eax
c001c5c8:	68 83 c6 02 c0       	push   0xc002c683
c001c5cd:	eb 0f                	jmp    c001c5de <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c5cf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c5d3:	74 20                	je     c001c5f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c5d5:	51                   	push   ecx
c001c5d6:	51                   	push   ecx
c001c5d7:	6a 00                	push   0x0
c001c5d9:	68 ae c6 02 c0       	push   0xc002c6ae
c001c5de:	e8 cc 5f ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001c5e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c5e6:	e8 7e 50 ff ff       	call   c0011669 <Virt::freeKernelVirtualPages(unsigned long)>
c001c5eb:	83 c4 10             	add    esp,0x10
c001c5ee:	31 c0                	xor    eax,eax
c001c5f0:	e9 68 01 00 00       	jmp    c001c75d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c5f5:	fa                   	cli    
c001c5f6:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001c5fc:	e8 59 33 ff ff       	call   c000f95a <Phys::allocatePage()>
c001c601:	6a 07                	push   0x7
c001c603:	89 c7                	mov    edi,eax
c001c605:	55                   	push   ebp
c001c606:	50                   	push   eax
c001c607:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c60c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c60f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c615:	e8 c6 53 ff ff       	call   c00119e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c61a:	83 c4 0c             	add    esp,0xc
c001c61d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c624:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c62a:	6a 00                	push   0x0
c001c62c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c631:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c634:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c63a:	e8 fb 51 ff ff       	call   c001183a <VAS::mapOtherVASIn(bool, VAS*)>
c001c63f:	58                   	pop    eax
c001c640:	5a                   	pop    edx
c001c641:	68 07 0c 00 00       	push   0xc07
c001c646:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c64a:	57                   	push   edi
c001c64b:	89 ef                	mov    edi,ebp
c001c64d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c654:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c65a:	6a 00                	push   0x0
c001c65c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c661:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c664:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c66a:	e8 2d 57 ff ff       	call   c0011d9c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c66f:	b9 00 10 00 00       	mov    ecx,0x1000
c001c674:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c676:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001c67b:	83 c4 20             	add    esp,0x20
c001c67e:	48                   	dec    eax
c001c67f:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001c684:	85 c0                	test   eax,eax
c001c686:	75 01                	jne    c001c689 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c688:	fb                   	sti    
c001c689:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c690:	e9 df fe ff ff       	jmp    c001c574 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c695:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c698:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c6a0:	0f 86 a9 00 00 00    	jbe    c001c74f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c6a6:	fa                   	cli    
c001c6a7:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001c6ad:	51                   	push   ecx
c001c6ae:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c6b5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c6bb:	6a 00                	push   0x0
c001c6bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c6c5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c6cb:	e8 6a 51 ff ff       	call   c001183a <VAS::mapOtherVASIn(bool, VAS*)>
c001c6d0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c6d4:	c1 e6 0c             	shl    esi,0xc
c001c6d7:	01 de                	add    esi,ebx
c001c6d9:	83 c4 10             	add    esp,0x10
c001c6dc:	39 de                	cmp    esi,ebx
c001c6de:	74 61                	je     c001c741 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c6e0:	e8 75 32 ff ff       	call   c000f95a <Phys::allocatePage()>
c001c6e5:	6a 07                	push   0x7
c001c6e7:	89 c7                	mov    edi,eax
c001c6e9:	55                   	push   ebp
c001c6ea:	50                   	push   eax
c001c6eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c6f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c6f3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c6f9:	e8 e2 52 ff ff       	call   c00119e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c6fe:	58                   	pop    eax
c001c6ff:	5a                   	pop    edx
c001c700:	68 07 0c 00 00       	push   0xc07
c001c705:	53                   	push   ebx
c001c706:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c70c:	57                   	push   edi
c001c70d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c714:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c71a:	6a 00                	push   0x0
c001c71c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c721:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c724:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c72a:	e8 6d 56 ff ff       	call   c0011d9c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c72f:	83 c4 1c             	add    esp,0x1c
c001c732:	68 00 10 00 00       	push   0x1000
c001c737:	6a 00                	push   0x0
c001c739:	55                   	push   ebp
c001c73a:	e8 11 40 fe ff       	call   c0000750 <memset>
c001c73f:	eb 98                	jmp    c001c6d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c741:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001c746:	48                   	dec    eax
c001c747:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001c74c:	75 01                	jne    c001c74f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c74e:	fb                   	sti    
c001c74f:	83 ec 0c             	sub    esp,0xc
c001c752:	55                   	push   ebp
c001c753:	e8 11 4f ff ff       	call   c0011669 <Virt::freeKernelVirtualPages(unsigned long)>
c001c758:	83 c4 10             	add    esp,0x10
c001c75b:	b0 01                	mov    al,0x1
c001c75d:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c763:	5b                   	pop    ebx
c001c764:	5e                   	pop    esi
c001c765:	5f                   	pop    edi
c001c766:	5d                   	pop    ebp
c001c767:	c3                   	ret    

c001c768 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c768:	55                   	push   ebp
c001c769:	57                   	push   edi
c001c76a:	56                   	push   esi
c001c76b:	53                   	push   ebx
c001c76c:	83 ec 48             	sub    esp,0x48
c001c76f:	68 14 01 00 00       	push   0x114
c001c774:	e8 3d 2e ff ff       	call   c000f5b6 <malloc>
c001c779:	83 c4 0c             	add    esp,0xc
c001c77c:	89 c6                	mov    esi,eax
c001c77e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c782:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c786:	50                   	push   eax
c001c787:	e8 82 63 ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c001c78c:	58                   	pop    eax
c001c78d:	5a                   	pop    edx
c001c78e:	6a 01                	push   0x1
c001c790:	56                   	push   esi
c001c791:	e8 dc 63 ff ff       	call   c0012b72 <File::open(FileOpenMode)>
c001c796:	83 c4 10             	add    esp,0x10
c001c799:	85 c0                	test   eax,eax
c001c79b:	0f 85 47 01 00 00    	jne    c001c8e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c7a1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c7a9:	83 ec 0c             	sub    esp,0xc
c001c7ac:	6a 34                	push   0x34
c001c7ae:	e8 03 2e ff ff       	call   c000f5b6 <malloc>
c001c7b3:	89 c3                	mov    ebx,eax
c001c7b5:	58                   	pop    eax
c001c7b6:	8b 06                	mov    eax,DWORD PTR [esi]
c001c7b8:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c7bc:	57                   	push   edi
c001c7bd:	53                   	push   ebx
c001c7be:	6a 00                	push   0x0
c001c7c0:	6a 34                	push   0x34
c001c7c2:	56                   	push   esi
c001c7c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7c6:	83 c4 20             	add    esp,0x20
c001c7c9:	85 c0                	test   eax,eax
c001c7cb:	0f 85 17 01 00 00    	jne    c001c8e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c7d1:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c7d7:	0f 85 0b 01 00 00    	jne    c001c8e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c7dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c7e0:	85 c0                	test   eax,eax
c001c7e2:	0f 84 00 01 00 00    	je     c001c8e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c7e8:	31 d2                	xor    edx,edx
c001c7ea:	55                   	push   ebp
c001c7eb:	52                   	push   edx
c001c7ec:	50                   	push   eax
c001c7ed:	56                   	push   esi
c001c7ee:	e8 3d 64 ff ff       	call   c0012c30 <File::seek(unsigned long long)>
c001c7f3:	83 c4 10             	add    esp,0x10
c001c7f6:	85 c0                	test   eax,eax
c001c7f8:	0f 85 ea 00 00 00    	jne    c001c8e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c7fe:	83 ec 0c             	sub    esp,0xc
c001c801:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c804:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c808:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c80c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c810:	0f af c2             	imul   eax,edx
c001c813:	50                   	push   eax
c001c814:	e8 9d 2d ff ff       	call   c000f5b6 <malloc>
c001c819:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c81b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c81f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c822:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c826:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c82a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c82e:	0f af c2             	imul   eax,edx
c001c831:	99                   	cdq    
c001c832:	52                   	push   edx
c001c833:	50                   	push   eax
c001c834:	56                   	push   esi
c001c835:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c838:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c83b:	83 c4 20             	add    esp,0x20
c001c83e:	85 c0                	test   eax,eax
c001c840:	0f 84 a2 00 00 00    	je     c001c8e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c846:	31 d2                	xor    edx,edx
c001c848:	51                   	push   ecx
c001c849:	52                   	push   edx
c001c84a:	50                   	push   eax
c001c84b:	56                   	push   esi
c001c84c:	e8 df 63 ff ff       	call   c0012c30 <File::seek(unsigned long long)>
c001c851:	83 c4 10             	add    esp,0x10
c001c854:	85 c0                	test   eax,eax
c001c856:	0f 85 8c 00 00 00    	jne    c001c8e8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c85c:	83 ec 0c             	sub    esp,0xc
c001c85f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c863:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c867:	31 ed                	xor    ebp,ebp
c001c869:	0f af c2             	imul   eax,edx
c001c86c:	50                   	push   eax
c001c86d:	e8 44 2d ff ff       	call   c000f5b6 <malloc>
c001c872:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c874:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c878:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c87f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c883:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c887:	0f af c2             	imul   eax,edx
c001c88a:	99                   	cdq    
c001c88b:	52                   	push   edx
c001c88c:	50                   	push   eax
c001c88d:	56                   	push   esi
c001c88e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c891:	83 c4 20             	add    esp,0x20
c001c894:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c89c:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c8a0:	0f 86 80 00 00 00    	jbe    c001c926 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c8a6:	0f b7 fd             	movzx  edi,bp
c001c8a9:	c1 e7 05             	shl    edi,0x5
c001c8ac:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c8b0:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c8b3:	75 6b                	jne    c001c920 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c8b5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c8b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8bc:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c8bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c8c3:	52                   	push   edx
c001c8c4:	31 d2                	xor    edx,edx
c001c8c6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c8c9:	52                   	push   edx
c001c8ca:	50                   	push   eax
c001c8cb:	56                   	push   esi
c001c8cc:	e8 5f 63 ff ff       	call   c0012c30 <File::seek(unsigned long long)>
c001c8d1:	83 c4 10             	add    esp,0x10
c001c8d4:	85 c0                	test   eax,eax
c001c8d6:	74 17                	je     c001c8ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c8d8:	83 ec 0c             	sub    esp,0xc
c001c8db:	68 da c6 02 c0       	push   0xc002c6da
c001c8e0:	e8 ca 5c ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001c8e5:	83 c4 10             	add    esp,0x10
c001c8e8:	31 c0                	xor    eax,eax
c001c8ea:	e9 87 00 00 00       	jmp    c001c976 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c8ef:	83 ec 0c             	sub    esp,0xc
c001c8f2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c8f5:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c8f8:	50                   	push   eax
c001c8f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c8fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c901:	56                   	push   esi
c001c902:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c906:	e8 b3 fb ff ff       	call   c001c4be <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c90b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c90f:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c913:	83 c4 20             	add    esp,0x20
c001c916:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c91a:	73 04                	jae    c001c920 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c91c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c920:	45                   	inc    ebp
c001c921:	e9 76 ff ff ff       	jmp    c001c89c <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c926:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c92a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c92e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c932:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c938:	83 ec 0c             	sub    esp,0xc
c001c93b:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c941:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c946:	05 00 10 00 00       	add    eax,0x1000
c001c94b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c952:	e8 6f 2c ff ff       	call   c000f5c6 <free>
c001c957:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c95a:	e8 67 2c ff ff       	call   c000f5c6 <free>
c001c95f:	58                   	pop    eax
c001c960:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c964:	e8 5d 2c ff ff       	call   c000f5c6 <free>
c001c969:	89 34 24             	mov    DWORD PTR [esp],esi
c001c96c:	e8 5f 62 ff ff       	call   c0012bd0 <File::close()>
c001c971:	83 c4 10             	add    esp,0x10
c001c974:	b0 01                	mov    al,0x1
c001c976:	83 c4 3c             	add    esp,0x3c
c001c979:	5b                   	pop    ebx
c001c97a:	5e                   	pop    esi
c001c97b:	5f                   	pop    edi
c001c97c:	5d                   	pop    ebp
c001c97d:	c3                   	ret    

c001c97e <Thr::runtimeReferenceHelper()>:
c001c97e:	83 ec 18             	sub    esp,0x18
c001c981:	68 e2 c6 02 c0       	push   0xc002c6e2
c001c986:	e8 24 5c ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001c98b:	fa                   	cli    
c001c98c:	83 c4 10             	add    esp,0x10
c001c98f:	eb fe                	jmp    c001c98f <Thr::runtimeReferenceHelper()+0x11>

c001c991 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c991:	57                   	push   edi
c001c992:	56                   	push   esi
c001c993:	53                   	push   ebx
c001c994:	31 db                	xor    ebx,ebx
c001c996:	39 1d 40 22 03 c0    	cmp    DWORD PTR ds:0xc0032240,ebx
c001c99c:	7e 3c                	jle    c001c9da <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c99e:	8b 34 9d c0 21 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcde40]
c001c9a5:	31 ff                	xor    edi,edi
c001c9a7:	39 3c 9d c0 20 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdf40],edi
c001c9ae:	7e 27                	jle    c001c9d7 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c9b0:	50                   	push   eax
c001c9b1:	50                   	push   eax
c001c9b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c9b6:	8b 06                	mov    eax,DWORD PTR [esi]
c001c9b8:	03 04 9d 40 21 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdec0]
c001c9bf:	50                   	push   eax
c001c9c0:	e8 d3 3e fe ff       	call   c0000898 <strcmp>
c001c9c5:	83 c4 10             	add    esp,0x10
c001c9c8:	85 c0                	test   eax,eax
c001c9ca:	75 05                	jne    c001c9d1 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c9cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c9cf:	eb 0b                	jmp    c001c9dc <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c9d1:	83 c6 10             	add    esi,0x10
c001c9d4:	47                   	inc    edi
c001c9d5:	eb d0                	jmp    c001c9a7 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c9d7:	43                   	inc    ebx
c001c9d8:	eb bc                	jmp    c001c996 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c9da:	31 c0                	xor    eax,eax
c001c9dc:	5b                   	pop    ebx
c001c9dd:	5e                   	pop    esi
c001c9de:	5f                   	pop    edi
c001c9df:	c3                   	ret    

c001c9e0 <Thr::loadKernelSymbolTable(char const*)>:
c001c9e0:	55                   	push   ebp
c001c9e1:	57                   	push   edi
c001c9e2:	56                   	push   esi
c001c9e3:	53                   	push   ebx
c001c9e4:	83 ec 68             	sub    esp,0x68
c001c9e7:	8b 35 90 22 03 c0    	mov    esi,DWORD PTR ds:0xc0032290
c001c9ed:	68 14 01 00 00       	push   0x114
c001c9f2:	e8 bf 2b ff ff       	call   c000f5b6 <malloc>
c001c9f7:	83 c4 0c             	add    esp,0xc
c001c9fa:	89 c3                	mov    ebx,eax
c001c9fc:	56                   	push   esi
c001c9fd:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ca01:	50                   	push   eax
c001ca02:	e8 07 61 ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c001ca07:	5e                   	pop    esi
c001ca08:	5f                   	pop    edi
c001ca09:	6a 01                	push   0x1
c001ca0b:	53                   	push   ebx
c001ca0c:	e8 61 61 ff ff       	call   c0012b72 <File::open(FileOpenMode)>
c001ca11:	83 c4 10             	add    esp,0x10
c001ca14:	85 c0                	test   eax,eax
c001ca16:	74 0a                	je     c001ca22 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001ca18:	83 ec 0c             	sub    esp,0xc
c001ca1b:	68 04 c7 02 c0       	push   0xc002c704
c001ca20:	eb 34                	jmp    c001ca56 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001ca22:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001ca2a:	83 ec 0c             	sub    esp,0xc
c001ca2d:	6a 34                	push   0x34
c001ca2f:	e8 82 2b ff ff       	call   c000f5b6 <malloc>
c001ca34:	59                   	pop    ecx
c001ca35:	89 c7                	mov    edi,eax
c001ca37:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ca3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca3d:	56                   	push   esi
c001ca3e:	57                   	push   edi
c001ca3f:	6a 00                	push   0x0
c001ca41:	6a 34                	push   0x34
c001ca43:	53                   	push   ebx
c001ca44:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca47:	83 c4 20             	add    esp,0x20
c001ca4a:	85 c0                	test   eax,eax
c001ca4c:	74 17                	je     c001ca65 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ca4e:	83 ec 0c             	sub    esp,0xc
c001ca51:	68 1b c7 02 c0       	push   0xc002c71b
c001ca56:	e8 22 d6 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001ca5b:	83 c4 10             	add    esp,0x10
c001ca5e:	31 c0                	xor    eax,eax
c001ca60:	e9 31 02 00 00       	jmp    c001cc96 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001ca65:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ca6b:	75 e1                	jne    c001ca4e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ca6d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ca70:	85 c0                	test   eax,eax
c001ca72:	74 da                	je     c001ca4e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ca74:	52                   	push   edx
c001ca75:	31 d2                	xor    edx,edx
c001ca77:	52                   	push   edx
c001ca78:	50                   	push   eax
c001ca79:	53                   	push   ebx
c001ca7a:	e8 b1 61 ff ff       	call   c0012c30 <File::seek(unsigned long long)>
c001ca7f:	83 c4 10             	add    esp,0x10
c001ca82:	85 c0                	test   eax,eax
c001ca84:	75 c8                	jne    c001ca4e <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ca86:	83 ec 0c             	sub    esp,0xc
c001ca89:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ca8d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca91:	31 ed                	xor    ebp,ebp
c001ca93:	0f af c2             	imul   eax,edx
c001ca96:	50                   	push   eax
c001ca97:	e8 1a 2b ff ff       	call   c000f5b6 <malloc>
c001ca9c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ca9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001caa2:	89 34 24             	mov    DWORD PTR [esp],esi
c001caa5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001caa9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001caad:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cab1:	0f af c2             	imul   eax,edx
c001cab4:	99                   	cdq    
c001cab5:	52                   	push   edx
c001cab6:	50                   	push   eax
c001cab7:	53                   	push   ebx
c001cab8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cabb:	83 c4 20             	add    esp,0x20
c001cabe:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cac6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cace:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cad6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cade:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cae2:	0f 86 aa 00 00 00    	jbe    c001cb92 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cae8:	0f b7 f5             	movzx  esi,bp
c001caeb:	6b f6 28             	imul   esi,esi,0x28
c001caee:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001caf2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001caf5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001caf9:	50                   	push   eax
c001cafa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cafe:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cb02:	8b 16                	mov    edx,DWORD PTR [esi]
c001cb04:	6b c0 28             	imul   eax,eax,0x28
c001cb07:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cb0b:	89 d0                	mov    eax,edx
c001cb0d:	31 d2                	xor    edx,edx
c001cb0f:	52                   	push   edx
c001cb10:	50                   	push   eax
c001cb11:	53                   	push   ebx
c001cb12:	e8 19 61 ff ff       	call   c0012c30 <File::seek(unsigned long long)>
c001cb17:	83 c4 0c             	add    esp,0xc
c001cb1a:	6a 20                	push   0x20
c001cb1c:	6a 00                	push   0x0
c001cb1e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cb22:	52                   	push   edx
c001cb23:	e8 28 3c fe ff       	call   c0000750 <memset>
c001cb28:	58                   	pop    eax
c001cb29:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb2b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cb2f:	51                   	push   ecx
c001cb30:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cb34:	52                   	push   edx
c001cb35:	6a 00                	push   0x0
c001cb37:	6a 1f                	push   0x1f
c001cb39:	53                   	push   ebx
c001cb3a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb3d:	83 c4 18             	add    esp,0x18
c001cb40:	68 32 c7 02 c0       	push   0xc002c732
c001cb45:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cb49:	52                   	push   edx
c001cb4a:	e8 49 3d fe ff       	call   c0000898 <strcmp>
c001cb4f:	83 c4 10             	add    esp,0x10
c001cb52:	85 c0                	test   eax,eax
c001cb54:	75 0f                	jne    c001cb65 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cb56:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb59:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb65:	50                   	push   eax
c001cb66:	50                   	push   eax
c001cb67:	68 3a c7 02 c0       	push   0xc002c73a
c001cb6c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cb70:	50                   	push   eax
c001cb71:	e8 22 3d fe ff       	call   c0000898 <strcmp>
c001cb76:	83 c4 10             	add    esp,0x10
c001cb79:	85 c0                	test   eax,eax
c001cb7b:	75 0f                	jne    c001cb8c <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cb7d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb80:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb8c:	45                   	inc    ebp
c001cb8d:	e9 4c ff ff ff       	jmp    c001cade <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cb92:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cb97:	75 10                	jne    c001cba9 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cb99:	83 ec 0c             	sub    esp,0xc
c001cb9c:	68 42 c7 02 c0       	push   0xc002c742
c001cba1:	e8 d7 d4 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001cba6:	83 c4 10             	add    esp,0x10
c001cba9:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cbae:	75 10                	jne    c001cbc0 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cbb0:	83 ec 0c             	sub    esp,0xc
c001cbb3:	68 42 c7 02 c0       	push   0xc002c742
c001cbb8:	e8 c0 d4 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001cbbd:	83 c4 10             	add    esp,0x10
c001cbc0:	31 d2                	xor    edx,edx
c001cbc2:	50                   	push   eax
c001cbc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc7:	52                   	push   edx
c001cbc8:	50                   	push   eax
c001cbc9:	53                   	push   ebx
c001cbca:	e8 61 60 ff ff       	call   c0012c30 <File::seek(unsigned long long)>
c001cbcf:	5a                   	pop    edx
c001cbd0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cbd4:	e8 dd 29 ff ff       	call   c000f5b6 <malloc>
c001cbd9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cbdd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbe1:	31 c9                	xor    ecx,ecx
c001cbe3:	5e                   	pop    esi
c001cbe4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cbe6:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cbea:	55                   	push   ebp
c001cbeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbef:	51                   	push   ecx
c001cbf0:	52                   	push   edx
c001cbf1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cbf5:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cbf9:	53                   	push   ebx
c001cbfa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cbfd:	83 c4 14             	add    esp,0x14
c001cc00:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc04:	e8 ad 29 ff ff       	call   c000f5b6 <malloc>
c001cc09:	89 c6                	mov    esi,eax
c001cc0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc0d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cc10:	56                   	push   esi
c001cc11:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cc15:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cc19:	51                   	push   ecx
c001cc1a:	52                   	push   edx
c001cc1b:	53                   	push   ebx
c001cc1c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc23:	8b 15 40 22 03 c0    	mov    edx,DWORD PTR ds:0xc0032240
c001cc29:	83 c4 1c             	add    esp,0x1c
c001cc2c:	c1 e8 04             	shr    eax,0x4
c001cc2f:	89 04 95 c0 20 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdf40],eax
c001cc36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc3a:	31 d2                	xor    edx,edx
c001cc3c:	52                   	push   edx
c001cc3d:	50                   	push   eax
c001cc3e:	53                   	push   ebx
c001cc3f:	e8 ec 5f ff ff       	call   c0012c30 <File::seek(unsigned long long)>
c001cc44:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cc46:	31 d2                	xor    edx,edx
c001cc48:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cc4b:	56                   	push   esi
c001cc4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc50:	52                   	push   edx
c001cc51:	50                   	push   eax
c001cc52:	53                   	push   ebx
c001cc53:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc56:	83 c4 14             	add    esp,0x14
c001cc59:	53                   	push   ebx
c001cc5a:	e8 71 5f ff ff       	call   c0012bd0 <File::close()>
c001cc5f:	5d                   	pop    ebp
c001cc60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cc64:	e8 5d 29 ff ff       	call   c000f5c6 <free>
c001cc69:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc6c:	e8 55 29 ff ff       	call   c000f5c6 <free>
c001cc71:	a1 40 22 03 c0       	mov    eax,ds:0xc0032240
c001cc76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cc7a:	8d 50 01             	lea    edx,[eax+0x1]
c001cc7d:	89 0c 85 c0 21 03 c0 	mov    DWORD PTR [eax*4-0x3ffcde40],ecx
c001cc84:	89 34 85 40 21 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdec0],esi
c001cc8b:	89 15 40 22 03 c0    	mov    DWORD PTR ds:0xc0032240,edx
c001cc91:	83 c4 10             	add    esp,0x10
c001cc94:	b0 01                	mov    al,0x1
c001cc96:	83 c4 5c             	add    esp,0x5c
c001cc99:	5b                   	pop    ebx
c001cc9a:	5e                   	pop    esi
c001cc9b:	5f                   	pop    edi
c001cc9c:	5d                   	pop    ebp
c001cc9d:	c3                   	ret    

c001cc9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cc9e:	55                   	push   ebp
c001cc9f:	57                   	push   edi
c001cca0:	56                   	push   esi
c001cca1:	53                   	push   ebx
c001cca2:	81 ec 68 03 00 00    	sub    esp,0x368
c001cca8:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ccaf:	8b 1d 90 22 03 c0    	mov    ebx,DWORD PTR ds:0xc0032290
c001ccb5:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ccb9:	68 14 01 00 00       	push   0x114
c001ccbe:	e8 f3 28 ff ff       	call   c000f5b6 <malloc>
c001ccc3:	83 c4 0c             	add    esp,0xc
c001ccc6:	89 c5                	mov    ebp,eax
c001ccc8:	53                   	push   ebx
c001ccc9:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ccd0:	50                   	push   eax
c001ccd1:	e8 38 5e ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c001ccd6:	5e                   	pop    esi
c001ccd7:	5f                   	pop    edi
c001ccd8:	6a 01                	push   0x1
c001ccda:	55                   	push   ebp
c001ccdb:	e8 92 5e ff ff       	call   c0012b72 <File::open(FileOpenMode)>
c001cce0:	83 c4 10             	add    esp,0x10
c001cce3:	85 c0                	test   eax,eax
c001cce5:	0f 85 a7 06 00 00    	jne    c001d392 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cceb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ccf3:	83 ec 0c             	sub    esp,0xc
c001ccf6:	6a 34                	push   0x34
c001ccf8:	e8 b9 28 ff ff       	call   c000f5b6 <malloc>
c001ccfd:	5b                   	pop    ebx
c001ccfe:	89 c7                	mov    edi,eax
c001cd00:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cd04:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cd07:	53                   	push   ebx
c001cd08:	57                   	push   edi
c001cd09:	6a 00                	push   0x0
c001cd0b:	6a 34                	push   0x34
c001cd0d:	55                   	push   ebp
c001cd0e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd11:	83 c4 20             	add    esp,0x20
c001cd14:	85 c0                	test   eax,eax
c001cd16:	0f 85 76 06 00 00    	jne    c001d392 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cd1c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd22:	0f 85 6a 06 00 00    	jne    c001d392 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cd28:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd2b:	85 c0                	test   eax,eax
c001cd2d:	0f 84 5f 06 00 00    	je     c001d392 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cd33:	31 d2                	xor    edx,edx
c001cd35:	51                   	push   ecx
c001cd36:	52                   	push   edx
c001cd37:	50                   	push   eax
c001cd38:	55                   	push   ebp
c001cd39:	e8 f2 5e ff ff       	call   c0012c30 <File::seek(unsigned long long)>
c001cd3e:	83 c4 10             	add    esp,0x10
c001cd41:	85 c0                	test   eax,eax
c001cd43:	0f 85 49 06 00 00    	jne    c001d392 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cd49:	83 ec 0c             	sub    esp,0xc
c001cd4c:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cd4f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd53:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cd57:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd5b:	0f af c2             	imul   eax,edx
c001cd5e:	50                   	push   eax
c001cd5f:	e8 52 28 ff ff       	call   c000f5b6 <malloc>
c001cd64:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd72:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd76:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd7a:	0f af c2             	imul   eax,edx
c001cd7d:	99                   	cdq    
c001cd7e:	52                   	push   edx
c001cd7f:	50                   	push   eax
c001cd80:	55                   	push   ebp
c001cd81:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd84:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cd87:	83 c4 20             	add    esp,0x20
c001cd8a:	85 c0                	test   eax,eax
c001cd8c:	0f 84 00 06 00 00    	je     c001d392 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cd92:	52                   	push   edx
c001cd93:	31 d2                	xor    edx,edx
c001cd95:	52                   	push   edx
c001cd96:	50                   	push   eax
c001cd97:	55                   	push   ebp
c001cd98:	e8 93 5e ff ff       	call   c0012c30 <File::seek(unsigned long long)>
c001cd9d:	83 c4 10             	add    esp,0x10
c001cda0:	85 c0                	test   eax,eax
c001cda2:	0f 85 ea 05 00 00    	jne    c001d392 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cda8:	83 ec 0c             	sub    esp,0xc
c001cdab:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cdaf:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cdb3:	31 f6                	xor    esi,esi
c001cdb5:	0f af c2             	imul   eax,edx
c001cdb8:	50                   	push   eax
c001cdb9:	e8 f8 27 ff ff       	call   c000f5b6 <malloc>
c001cdbe:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cdc1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cdc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdc8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cdcc:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cdd0:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cdd4:	0f af c2             	imul   eax,edx
c001cdd7:	99                   	cdq    
c001cdd8:	52                   	push   edx
c001cdd9:	50                   	push   eax
c001cdda:	55                   	push   ebp
c001cddb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdde:	83 c4 20             	add    esp,0x20
c001cde1:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cde5:	0f 86 8a 00 00 00    	jbe    c001ce75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cdeb:	0f b7 de             	movzx  ebx,si
c001cdee:	c1 e3 05             	shl    ebx,0x5
c001cdf1:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cdf5:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cdf8:	75 75                	jne    c001ce6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cdfa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cdfd:	31 d2                	xor    edx,edx
c001cdff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce03:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ce06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce0a:	50                   	push   eax
c001ce0b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001ce0e:	52                   	push   edx
c001ce0f:	50                   	push   eax
c001ce10:	55                   	push   ebp
c001ce11:	e8 1a 5e ff ff       	call   c0012c30 <File::seek(unsigned long long)>
c001ce16:	83 c4 10             	add    esp,0x10
c001ce19:	85 c0                	test   eax,eax
c001ce1b:	0f 85 71 05 00 00    	jne    c001d392 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce21:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ce28:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ce2b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001ce2f:	31 d2                	xor    edx,edx
c001ce31:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ce35:	83 ec 0c             	sub    esp,0xc
c001ce38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce3c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce43:	50                   	push   eax
c001ce44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce4c:	52                   	push   edx
c001ce4d:	50                   	push   eax
c001ce4e:	55                   	push   ebp
c001ce4f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce52:	83 c4 1c             	add    esp,0x1c
c001ce55:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ce58:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ce5b:	50                   	push   eax
c001ce5c:	6a 00                	push   0x0
c001ce5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce62:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001ce66:	50                   	push   eax
c001ce67:	e8 e4 38 fe ff       	call   c0000750 <memset>
c001ce6c:	83 c4 10             	add    esp,0x10
c001ce6f:	46                   	inc    esi
c001ce70:	e9 6c ff ff ff       	jmp    c001cde1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001ce75:	53                   	push   ebx
c001ce76:	31 db                	xor    ebx,ebx
c001ce78:	68 00 01 00 00       	push   0x100
c001ce7d:	6a 00                	push   0x0
c001ce7f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ce83:	50                   	push   eax
c001ce84:	e8 c7 38 fe ff       	call   c0000750 <memset>
c001ce89:	83 c4 0c             	add    esp,0xc
c001ce8c:	68 00 01 00 00       	push   0x100
c001ce91:	6a 00                	push   0x0
c001ce93:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ce9a:	50                   	push   eax
c001ce9b:	e8 b0 38 fe ff       	call   c0000750 <memset>
c001cea0:	83 c4 10             	add    esp,0x10
c001cea3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ceab:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ceb3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cebb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cec3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cecb:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cecf:	0f 86 30 01 00 00    	jbe    c001d005 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ced5:	0f b7 f3             	movzx  esi,bx
c001ced8:	6b f6 28             	imul   esi,esi,0x28
c001cedb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cedf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cee2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cee6:	52                   	push   edx
c001cee7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ceeb:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001ceef:	8b 06                	mov    eax,DWORD PTR [esi]
c001cef1:	6b d2 28             	imul   edx,edx,0x28
c001cef4:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cef8:	31 d2                	xor    edx,edx
c001cefa:	52                   	push   edx
c001cefb:	50                   	push   eax
c001cefc:	55                   	push   ebp
c001cefd:	e8 2e 5d ff ff       	call   c0012c30 <File::seek(unsigned long long)>
c001cf02:	83 c4 0c             	add    esp,0xc
c001cf05:	6a 20                	push   0x20
c001cf07:	6a 00                	push   0x0
c001cf09:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cf10:	51                   	push   ecx
c001cf11:	e8 3a 38 fe ff       	call   c0000750 <memset>
c001cf16:	59                   	pop    ecx
c001cf17:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf1a:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cf1e:	52                   	push   edx
c001cf1f:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cf26:	51                   	push   ecx
c001cf27:	6a 00                	push   0x0
c001cf29:	6a 1f                	push   0x1f
c001cf2b:	55                   	push   ebp
c001cf2c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf2f:	83 c4 1c             	add    esp,0x1c
c001cf32:	6a 09                	push   0x9
c001cf34:	68 5c c7 02 c0       	push   0xc002c75c
c001cf39:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cf40:	51                   	push   ecx
c001cf41:	e8 06 37 fe ff       	call   c000064c <memcmp>
c001cf46:	83 c4 10             	add    esp,0x10
c001cf49:	85 c0                	test   eax,eax
c001cf4b:	75 21                	jne    c001cf6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cf4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cf55:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cf59:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cf5d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf60:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cf67:	89 d0                	mov    eax,edx
c001cf69:	40                   	inc    eax
c001cf6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf6e:	50                   	push   eax
c001cf6f:	6a 09                	push   0x9
c001cf71:	68 66 c7 02 c0       	push   0xc002c766
c001cf76:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf7d:	50                   	push   eax
c001cf7e:	e8 c9 36 fe ff       	call   c000064c <memcmp>
c001cf83:	83 c4 10             	add    esp,0x10
c001cf86:	85 c0                	test   eax,eax
c001cf88:	75 21                	jne    c001cfab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cf8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cf92:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cf96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cf9a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf9d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cfa4:	89 d0                	mov    eax,edx
c001cfa6:	40                   	inc    eax
c001cfa7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cfab:	50                   	push   eax
c001cfac:	50                   	push   eax
c001cfad:	68 32 c7 02 c0       	push   0xc002c732
c001cfb2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cfb9:	50                   	push   eax
c001cfba:	e8 d9 38 fe ff       	call   c0000898 <strcmp>
c001cfbf:	83 c4 10             	add    esp,0x10
c001cfc2:	85 c0                	test   eax,eax
c001cfc4:	75 0f                	jne    c001cfd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cfc6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cfc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cfcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cfd5:	50                   	push   eax
c001cfd6:	50                   	push   eax
c001cfd7:	68 3a c7 02 c0       	push   0xc002c73a
c001cfdc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cfe3:	50                   	push   eax
c001cfe4:	e8 af 38 fe ff       	call   c0000898 <strcmp>
c001cfe9:	83 c4 10             	add    esp,0x10
c001cfec:	85 c0                	test   eax,eax
c001cfee:	75 0f                	jne    c001cfff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cff0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cff3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cff7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cffb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cfff:	43                   	inc    ebx
c001d000:	e9 c6 fe ff ff       	jmp    c001cecb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d005:	31 d2                	xor    edx,edx
c001d007:	50                   	push   eax
c001d008:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d00c:	52                   	push   edx
c001d00d:	50                   	push   eax
c001d00e:	55                   	push   ebp
c001d00f:	e8 1c 5c ff ff       	call   c0012c30 <File::seek(unsigned long long)>
c001d014:	58                   	pop    eax
c001d015:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d019:	e8 98 25 ff ff       	call   c000f5b6 <malloc>
c001d01e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d021:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d025:	31 d2                	xor    edx,edx
c001d027:	58                   	pop    eax
c001d028:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d02c:	53                   	push   ebx
c001d02d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d031:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d035:	52                   	push   edx
c001d036:	50                   	push   eax
c001d037:	55                   	push   ebp
c001d038:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d03b:	83 c4 14             	add    esp,0x14
c001d03e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d042:	e8 6f 25 ff ff       	call   c000f5b6 <malloc>
c001d047:	31 d2                	xor    edx,edx
c001d049:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d04d:	83 c4 0c             	add    esp,0xc
c001d050:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d054:	52                   	push   edx
c001d055:	50                   	push   eax
c001d056:	55                   	push   ebp
c001d057:	e8 d4 5b ff ff       	call   c0012c30 <File::seek(unsigned long long)>
c001d05c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d05f:	31 d2                	xor    edx,edx
c001d061:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d064:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d068:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d06c:	52                   	push   edx
c001d06d:	50                   	push   eax
c001d06e:	55                   	push   ebp
c001d06f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d072:	83 c4 20             	add    esp,0x20
c001d075:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d07d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d081:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d085:	0f 84 0b 03 00 00    	je     c001d396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d08b:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d092:	31 d2                	xor    edx,edx
c001d094:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d098:	c1 e8 03             	shr    eax,0x3
c001d09b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d09f:	51                   	push   ecx
c001d0a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d0a4:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d0a8:	52                   	push   edx
c001d0a9:	50                   	push   eax
c001d0aa:	55                   	push   ebp
c001d0ab:	e8 80 5b ff ff       	call   c0012c30 <File::seek(unsigned long long)>
c001d0b0:	5b                   	pop    ebx
c001d0b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0b5:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d0bc:	e8 f5 24 ff ff       	call   c000f5b6 <malloc>
c001d0c1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d0c8:	31 d2                	xor    edx,edx
c001d0ca:	5e                   	pop    esi
c001d0cb:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d0cf:	50                   	push   eax
c001d0d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d0d8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d0df:	52                   	push   edx
c001d0e0:	50                   	push   eax
c001d0e1:	55                   	push   ebp
c001d0e2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0e5:	83 c4 20             	add    esp,0x20
c001d0e8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d0f0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d0f4:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d0f8:	0f 8d 7c 02 00 00    	jge    c001d37a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d0fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d102:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d106:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d10b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d10e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d112:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d116:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d11a:	89 d8                	mov    eax,ebx
c001d11c:	c1 e8 08             	shr    eax,0x8
c001d11f:	89 c6                	mov    esi,eax
c001d121:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d125:	c1 e6 04             	shl    esi,0x4
c001d128:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d12c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d12f:	85 d2                	test   edx,edx
c001d131:	0f 85 bf 00 00 00    	jne    c001d1f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d137:	83 ec 0c             	sub    esp,0xc
c001d13a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d13e:	03 06                	add    eax,DWORD PTR [esi]
c001d140:	50                   	push   eax
c001d141:	e8 4b f8 ff ff       	call   c001c991 <Thr::getAddressOfKernelSymbol(char const*)>
c001d146:	83 c4 10             	add    esp,0x10
c001d149:	89 c2                	mov    edx,eax
c001d14b:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d150:	85 c0                	test   eax,eax
c001d152:	0f 85 9e 00 00 00    	jne    c001d1f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d158:	83 ec 0c             	sub    esp,0xc
c001d15b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d15f:	03 06                	add    eax,DWORD PTR [esi]
c001d161:	50                   	push   eax
c001d162:	e8 d8 13 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001d167:	83 c4 10             	add    esp,0x10
c001d16a:	89 c2                	mov    edx,eax
c001d16c:	85 c0                	test   eax,eax
c001d16e:	0f 85 82 00 00 00    	jne    c001d1f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d174:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d178:	50                   	push   eax
c001d179:	50                   	push   eax
c001d17a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d17e:	03 06                	add    eax,DWORD PTR [esi]
c001d180:	50                   	push   eax
c001d181:	68 70 c7 02 c0       	push   0xc002c770
c001d186:	e8 24 54 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001d18b:	58                   	pop    eax
c001d18c:	5a                   	pop    edx
c001d18d:	68 8a c7 02 c0       	push   0xc002c78a
c001d192:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d199:	50                   	push   eax
c001d19a:	e8 6d 36 fe ff       	call   c000080c <strcpy>
c001d19f:	59                   	pop    ecx
c001d1a0:	58                   	pop    eax
c001d1a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1a5:	03 06                	add    eax,DWORD PTR [esi]
c001d1a7:	50                   	push   eax
c001d1a8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1af:	50                   	push   eax
c001d1b0:	e8 97 37 fe ff       	call   c000094c <strcat>
c001d1b5:	58                   	pop    eax
c001d1b6:	5a                   	pop    edx
c001d1b7:	68 20 c8 02 c0       	push   0xc002c820
c001d1bc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1c3:	50                   	push   eax
c001d1c4:	e8 83 37 fe ff       	call   c000094c <strcat>
c001d1c9:	83 c4 10             	add    esp,0x10
c001d1cc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d1d1:	0f 84 5d 01 00 00    	je     c001d334 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d1d7:	83 ec 0c             	sub    esp,0xc
c001d1da:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1e1:	50                   	push   eax
c001d1e2:	e8 96 ce ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001d1e7:	83 c4 10             	add    esp,0x10
c001d1ea:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d1ee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d1f2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d1f6:	80 fb 01             	cmp    bl,0x1
c001d1f9:	0f 85 88 00 00 00    	jne    c001d287 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d1ff:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d206:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d20a:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d20e:	01 ce                	add    esi,ecx
c001d210:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d216:	0f 94 c0             	sete   al
c001d219:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d21f:	0f 94 c3             	sete   bl
c001d222:	09 c3                	or     ebx,eax
c001d224:	8b 06                	mov    eax,DWORD PTR [esi]
c001d226:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d22b:	74 41                	je     c001d26e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d22d:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d230:	84 db                	test   bl,bl
c001d232:	75 15                	jne    c001d249 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d234:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d238:	66 83 f8 0c          	cmp    ax,0xc
c001d23c:	76 05                	jbe    c001d243 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d23e:	b8 0c 00 00 00       	mov    eax,0xc
c001d243:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d247:	76 37                	jbe    c001d280 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d249:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d24d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d252:	0f 84 dc 00 00 00    	je     c001d334 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d258:	83 ec 0c             	sub    esp,0xc
c001d25b:	68 a1 c7 02 c0       	push   0xc002c7a1
c001d260:	e8 18 ce ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001d265:	83 c4 10             	add    esp,0x10
c001d268:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d26c:	eb 12                	jmp    c001d280 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d26e:	01 c1                	add    ecx,eax
c001d270:	84 db                	test   bl,bl
c001d272:	75 0c                	jne    c001d280 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d274:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d278:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d27c:	77 02                	ja     c001d280 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d27e:	01 d1                	add    ecx,edx
c001d280:	89 0e                	mov    DWORD PTR [esi],ecx
c001d282:	e9 ea 00 00 00       	jmp    c001d371 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d287:	80 fb 02             	cmp    bl,0x2
c001d28a:	75 7c                	jne    c001d308 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d28c:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d293:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d297:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d29b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d2a1:	74 20                	je     c001d2c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d2a3:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d2a9:	74 18                	je     c001d2c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d2ab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d2af:	b9 0a 00 00 00       	mov    ecx,0xa
c001d2b4:	66 83 f8 0e          	cmp    ax,0xe
c001d2b8:	77 03                	ja     c001d2bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d2ba:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d2bd:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d2c1:	76 1f                	jbe    c001d2e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d2c3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d2c7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d2cc:	74 66                	je     c001d334 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d2ce:	83 ec 0c             	sub    esp,0xc
c001d2d1:	68 bd c7 02 c0       	push   0xc002c7bd
c001d2d6:	e8 a2 cd ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001d2db:	83 c4 10             	add    esp,0x10
c001d2de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d2e2:	8b 06                	mov    eax,DWORD PTR [esi]
c001d2e4:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d2e9:	74 13                	je     c001d2fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d2eb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d2ef:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d2f6:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d2fa:	01 c8                	add    eax,ecx
c001d2fc:	eb 04                	jmp    c001d302 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d2fe:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d302:	01 c2                	add    edx,eax
c001d304:	89 16                	mov    DWORD PTR [esi],edx
c001d306:	eb 69                	jmp    c001d371 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d308:	0f b6 db             	movzx  ebx,bl
c001d30b:	50                   	push   eax
c001d30c:	50                   	push   eax
c001d30d:	53                   	push   ebx
c001d30e:	68 d9 c7 02 c0       	push   0xc002c7d9
c001d313:	e8 97 52 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001d318:	83 c4 10             	add    esp,0x10
c001d31b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d320:	74 12                	je     c001d334 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d322:	83 ec 0c             	sub    esp,0xc
c001d325:	68 e4 c7 02 c0       	push   0xc002c7e4
c001d32a:	e8 4e cd ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001d32f:	83 c4 10             	add    esp,0x10
c001d332:	eb 3d                	jmp    c001d371 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d334:	83 ec 0c             	sub    esp,0xc
c001d337:	55                   	push   ebp
c001d338:	e8 93 58 ff ff       	call   c0012bd0 <File::close()>
c001d33d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d340:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d343:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d346:	59                   	pop    ecx
c001d347:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d34b:	e8 76 22 ff ff       	call   c000f5c6 <free>
c001d350:	5b                   	pop    ebx
c001d351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d355:	e8 6c 22 ff ff       	call   c000f5c6 <free>
c001d35a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d35d:	e8 64 22 ff ff       	call   c000f5c6 <free>
c001d362:	5e                   	pop    esi
c001d363:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d367:	e8 5a 22 ff ff       	call   c000f5c6 <free>
c001d36c:	83 c4 10             	add    esp,0x10
c001d36f:	eb 21                	jmp    c001d392 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d371:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d375:	e9 76 fd ff ff       	jmp    c001d0f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d37a:	83 ec 0c             	sub    esp,0xc
c001d37d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d381:	e8 40 22 ff ff       	call   c000f5c6 <free>
c001d386:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d38a:	83 c4 10             	add    esp,0x10
c001d38d:	e9 eb fc ff ff       	jmp    c001d07d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d392:	31 c0                	xor    eax,eax
c001d394:	eb 33                	jmp    c001d3c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d396:	83 ec 0c             	sub    esp,0xc
c001d399:	55                   	push   ebp
c001d39a:	e8 31 58 ff ff       	call   c0012bd0 <File::close()>
c001d39f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d3a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d3a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d3a8:	58                   	pop    eax
c001d3a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d3ad:	e8 14 22 ff ff       	call   c000f5c6 <free>
c001d3b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d3b5:	e8 0c 22 ff ff       	call   c000f5c6 <free>
c001d3ba:	5a                   	pop    edx
c001d3bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3bf:	e8 02 22 ff ff       	call   c000f5c6 <free>
c001d3c4:	83 c4 10             	add    esp,0x10
c001d3c7:	b0 01                	mov    al,0x1
c001d3c9:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d3cf:	5b                   	pop    ebx
c001d3d0:	5e                   	pop    esi
c001d3d1:	5f                   	pop    edi
c001d3d2:	5d                   	pop    ebp
c001d3d3:	c3                   	ret    

c001d3d4 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d3d4:	56                   	push   esi
c001d3d5:	31 d2                	xor    edx,edx
c001d3d7:	53                   	push   ebx
c001d3d8:	8b 1d a0 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031aa0
c001d3de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d3e2:	39 d3                	cmp    ebx,edx
c001d3e4:	7e 1b                	jle    c001d401 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d3e6:	8b 04 95 c0 1c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce340]
c001d3ed:	39 c8                	cmp    eax,ecx
c001d3ef:	77 0d                	ja     c001d3fe <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d3f1:	8b 34 95 c0 1a 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce540]
c001d3f8:	01 c6                	add    esi,eax
c001d3fa:	39 ce                	cmp    esi,ecx
c001d3fc:	77 05                	ja     c001d403 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d3fe:	42                   	inc    edx
c001d3ff:	eb e1                	jmp    c001d3e2 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d401:	31 c0                	xor    eax,eax
c001d403:	5b                   	pop    ebx
c001d404:	5e                   	pop    esi
c001d405:	c3                   	ret    

c001d406 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d406:	53                   	push   ebx
c001d407:	31 c0                	xor    eax,eax
c001d409:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d40d:	8b 1d a0 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031aa0
c001d413:	39 c3                	cmp    ebx,eax
c001d415:	7e 22                	jle    c001d439 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d417:	8b 14 85 c0 1c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce340]
c001d41e:	39 ca                	cmp    edx,ecx
c001d420:	77 14                	ja     c001d436 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d422:	03 14 85 c0 1a 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce540]
c001d429:	39 ca                	cmp    edx,ecx
c001d42b:	76 09                	jbe    c001d436 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d42d:	8b 04 85 c0 1e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce140]
c001d434:	eb 05                	jmp    c001d43b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d436:	40                   	inc    eax
c001d437:	eb da                	jmp    c001d413 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d439:	31 c0                	xor    eax,eax
c001d43b:	5b                   	pop    ebx
c001d43c:	c3                   	ret    

c001d43d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d43d:	53                   	push   ebx
c001d43e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d442:	53                   	push   ebx
c001d443:	e8 8c ff ff ff       	call   c001d3d4 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d448:	5a                   	pop    edx
c001d449:	31 d2                	xor    edx,edx
c001d44b:	85 c0                	test   eax,eax
c001d44d:	74 04                	je     c001d453 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d44f:	89 da                	mov    edx,ebx
c001d451:	29 c2                	sub    edx,eax
c001d453:	89 d0                	mov    eax,edx
c001d455:	5b                   	pop    ebx
c001d456:	c3                   	ret    

c001d457 <Thr::loadDLL(char const*, bool)>:
c001d457:	55                   	push   ebp
c001d458:	57                   	push   edi
c001d459:	56                   	push   esi
c001d45a:	53                   	push   ebx
c001d45b:	81 ec 34 01 00 00    	sub    esp,0x134
c001d461:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d468:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d46f:	56                   	push   esi
c001d470:	68 fc c7 02 c0       	push   0xc002c7fc
c001d475:	e8 35 51 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001d47a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d481:	e8 30 21 ff ff       	call   c000f5b6 <malloc>
c001d486:	83 c4 0c             	add    esp,0xc
c001d489:	89 c3                	mov    ebx,eax
c001d48b:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c001d491:	56                   	push   esi
c001d492:	50                   	push   eax
c001d493:	e8 76 56 ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c001d498:	83 c4 10             	add    esp,0x10
c001d49b:	85 db                	test   ebx,ebx
c001d49d:	75 3c                	jne    c001d4db <Thr::loadDLL(char const*, bool)+0x84>
c001d49f:	89 f8                	mov    eax,edi
c001d4a1:	84 c0                	test   al,al
c001d4a3:	0f 84 cc 01 00 00    	je     c001d675 <Thr::loadDLL(char const*, bool)+0x21e>
c001d4a9:	55                   	push   ebp
c001d4aa:	55                   	push   ebp
c001d4ab:	68 0d c8 02 c0       	push   0xc002c80d
c001d4b0:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d4b4:	55                   	push   ebp
c001d4b5:	e8 52 33 fe ff       	call   c000080c <strcpy>
c001d4ba:	58                   	pop    eax
c001d4bb:	5a                   	pop    edx
c001d4bc:	56                   	push   esi
c001d4bd:	55                   	push   ebp
c001d4be:	e8 89 34 fe ff       	call   c000094c <strcat>
c001d4c3:	59                   	pop    ecx
c001d4c4:	58                   	pop    eax
c001d4c5:	68 20 c8 02 c0       	push   0xc002c820
c001d4ca:	55                   	push   ebp
c001d4cb:	e8 7c 34 fe ff       	call   c000094c <strcat>
c001d4d0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4d3:	e8 a5 cb ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001d4d8:	83 c4 10             	add    esp,0x10
c001d4db:	51                   	push   ecx
c001d4dc:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d4e0:	50                   	push   eax
c001d4e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d4e5:	50                   	push   eax
c001d4e6:	53                   	push   ebx
c001d4e7:	e8 32 59 ff ff       	call   c0012e1e <File::stat(unsigned long long*, bool*)>
c001d4ec:	83 c4 10             	add    esp,0x10
c001d4ef:	85 db                	test   ebx,ebx
c001d4f1:	74 0c                	je     c001d4ff <Thr::loadDLL(char const*, bool)+0xa8>
c001d4f3:	83 ec 0c             	sub    esp,0xc
c001d4f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d4f8:	53                   	push   ebx
c001d4f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d4fc:	83 c4 10             	add    esp,0x10
c001d4ff:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d504:	75 0a                	jne    c001d510 <Thr::loadDLL(char const*, bool)+0xb9>
c001d506:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d50a:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d50e:	75 3c                	jne    c001d54c <Thr::loadDLL(char const*, bool)+0xf5>
c001d510:	89 f8                	mov    eax,edi
c001d512:	84 c0                	test   al,al
c001d514:	0f 84 43 01 00 00    	je     c001d65d <Thr::loadDLL(char const*, bool)+0x206>
c001d51a:	51                   	push   ecx
c001d51b:	51                   	push   ecx
c001d51c:	68 0d c8 02 c0       	push   0xc002c80d
c001d521:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d525:	53                   	push   ebx
c001d526:	e8 e1 32 fe ff       	call   c000080c <strcpy>
c001d52b:	5d                   	pop    ebp
c001d52c:	58                   	pop    eax
c001d52d:	56                   	push   esi
c001d52e:	53                   	push   ebx
c001d52f:	e8 18 34 fe ff       	call   c000094c <strcat>
c001d534:	58                   	pop    eax
c001d535:	5a                   	pop    edx
c001d536:	68 20 c8 02 c0       	push   0xc002c820
c001d53b:	53                   	push   ebx
c001d53c:	e8 0b 34 fe ff       	call   c000094c <strcat>
c001d541:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d544:	e8 34 cb ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001d549:	83 c4 10             	add    esp,0x10
c001d54c:	52                   	push   edx
c001d54d:	6a 03                	push   0x3
c001d54f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d553:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d557:	05 ff 0f 00 00       	add    eax,0xfff
c001d55c:	83 d2 00             	adc    edx,0x0
c001d55f:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d563:	50                   	push   eax
c001d564:	ff 35 b0 ee 02 c0    	push   DWORD PTR ds:0xc002eeb0
c001d56a:	e8 73 45 ff ff       	call   c0011ae2 <VAS::allocatePages(int, int)>
c001d56f:	59                   	pop    ecx
c001d570:	89 c3                	mov    ebx,eax
c001d572:	5d                   	pop    ebp
c001d573:	50                   	push   eax
c001d574:	68 22 c8 02 c0       	push   0xc002c822
c001d579:	e8 31 50 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001d57e:	89 34 24             	mov    DWORD PTR [esp],esi
c001d581:	e8 e6 31 fe ff       	call   c000076c <strlen>
c001d586:	8b 2d a0 1a 03 c0    	mov    ebp,DWORD PTR ds:0xc0031aa0
c001d58c:	40                   	inc    eax
c001d58d:	89 04 24             	mov    DWORD PTR [esp],eax
c001d590:	e8 21 20 ff ff       	call   c000f5b6 <malloc>
c001d595:	89 04 ad c0 1e 03 c0 	mov    DWORD PTR [ebp*4-0x3ffce140],eax
c001d59c:	58                   	pop    eax
c001d59d:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c001d5a2:	5a                   	pop    edx
c001d5a3:	56                   	push   esi
c001d5a4:	ff 34 85 c0 1e 03 c0 	push   DWORD PTR [eax*4-0x3ffce140]
c001d5ab:	e8 5c 32 fe ff       	call   c000080c <strcpy>
c001d5b0:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c001d5b5:	8d 50 01             	lea    edx,[eax+0x1]
c001d5b8:	89 1c 85 c0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce340],ebx
c001d5bf:	89 15 a0 1a 03 c0    	mov    DWORD PTR ds:0xc0031aa0,edx
c001d5c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d5c9:	83 c4 0c             	add    esp,0xc
c001d5cc:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c001d5d3:	6a 01                	push   0x1
c001d5d5:	53                   	push   ebx
c001d5d6:	56                   	push   esi
c001d5d7:	e8 c2 f6 ff ff       	call   c001cc9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d5dc:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d5e0:	83 c4 10             	add    esp,0x10
c001d5e3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d5e8:	0f 85 83 00 00 00    	jne    c001d671 <Thr::loadDLL(char const*, bool)+0x21a>
c001d5ee:	89 f8                	mov    eax,edi
c001d5f0:	84 c0                	test   al,al
c001d5f2:	74 6d                	je     c001d661 <Thr::loadDLL(char const*, bool)+0x20a>
c001d5f4:	83 ec 0c             	sub    esp,0xc
c001d5f7:	68 2f c8 02 c0       	push   0xc002c82f
c001d5fc:	e8 7c ca ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001d601:	83 c4 10             	add    esp,0x10
c001d604:	eb 5b                	jmp    c001d661 <Thr::loadDLL(char const*, bool)+0x20a>
c001d606:	89 ee                	mov    esi,ebp
c001d608:	50                   	push   eax
c001d609:	c1 e6 0c             	shl    esi,0xc
c001d60c:	50                   	push   eax
c001d60d:	01 de                	add    esi,ebx
c001d60f:	56                   	push   esi
c001d610:	ff 35 b0 ee 02 c0    	push   DWORD PTR ds:0xc002eeb0
c001d616:	e8 2f 40 ff ff       	call   c001164a <VAS::getPageTableEntry(unsigned long)>
c001d61b:	83 c4 10             	add    esp,0x10
c001d61e:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d621:	75 0c                	jne    c001d62f <Thr::loadDLL(char const*, bool)+0x1d8>
c001d623:	83 ec 0c             	sub    esp,0xc
c001d626:	56                   	push   esi
c001d627:	e8 d3 22 ff ff       	call   c000f8ff <Phys::freePage(unsigned long)>
c001d62c:	83 c4 10             	add    esp,0x10
c001d62f:	45                   	inc    ebp
c001d630:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d634:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d638:	05 ff 0f 00 00       	add    eax,0xfff
c001d63d:	bf 00 00 00 00       	mov    edi,0x0
c001d642:	83 d2 00             	adc    edx,0x0
c001d645:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d649:	c1 ea 0c             	shr    edx,0xc
c001d64c:	39 c5                	cmp    ebp,eax
c001d64e:	89 d1                	mov    ecx,edx
c001d650:	89 f8                	mov    eax,edi
c001d652:	19 c8                	sbb    eax,ecx
c001d654:	72 b0                	jb     c001d606 <Thr::loadDLL(char const*, bool)+0x1af>
c001d656:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d65b:	75 18                	jne    c001d675 <Thr::loadDLL(char const*, bool)+0x21e>
c001d65d:	31 db                	xor    ebx,ebx
c001d65f:	eb 14                	jmp    c001d675 <Thr::loadDLL(char const*, bool)+0x21e>
c001d661:	83 ec 0c             	sub    esp,0xc
c001d664:	68 4e c8 02 c0       	push   0xc002c84e
c001d669:	e8 0f ca ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001d66e:	83 c4 10             	add    esp,0x10
c001d671:	31 ed                	xor    ebp,ebp
c001d673:	eb bb                	jmp    c001d630 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d675:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d67b:	89 d8                	mov    eax,ebx
c001d67d:	5b                   	pop    ebx
c001d67e:	5e                   	pop    esi
c001d67f:	5f                   	pop    edi
c001d680:	5d                   	pop    ebp
c001d681:	c3                   	ret    

c001d682 <Thr::executeDLL(unsigned long, void*)>:
c001d682:	56                   	push   esi
c001d683:	53                   	push   ebx
c001d684:	52                   	push   edx
c001d685:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d689:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d68d:	85 db                	test   ebx,ebx
c001d68f:	75 10                	jne    c001d6a1 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d691:	83 ec 0c             	sub    esp,0xc
c001d694:	68 6a c8 02 c0       	push   0xc002c86a
c001d699:	e8 df c9 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001d69e:	83 c4 10             	add    esp,0x10
c001d6a1:	50                   	push   eax
c001d6a2:	50                   	push   eax
c001d6a3:	53                   	push   ebx
c001d6a4:	68 94 c8 02 c0       	push   0xc002c894
c001d6a9:	e8 01 4f ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001d6ae:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d6b2:	89 d8                	mov    eax,ebx
c001d6b4:	83 c4 14             	add    esp,0x14
c001d6b7:	5b                   	pop    ebx
c001d6b8:	5e                   	pop    esi
c001d6b9:	ff e0                	jmp    eax
c001d6bb:	90                   	nop

c001d6bc <userModeEntryPoint(void*)>:
c001d6bc:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001d6c1:	48                   	dec    eax
c001d6c2:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001d6c7:	75 01                	jne    c001d6ca <userModeEntryPoint(void*)+0xe>
c001d6c9:	fb                   	sti    
c001d6ca:	fb                   	sti    
c001d6cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d6d3:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d6d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d6dd:	e9 48 2c fe ff       	jmp    c000032a <goToUsermode>

c001d6e2 <changeTSS>:
c001d6e2:	83 ec 14             	sub    esp,0x14
c001d6e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6ea:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d6ed:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d6f2:	c1 e2 15             	shl    edx,0x15
c001d6f5:	29 d0                	sub    eax,edx
c001d6f7:	50                   	push   eax
c001d6f8:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c001d6fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d703:	05 7c 11 00 00       	add    eax,0x117c
c001d708:	50                   	push   eax
c001d709:	e8 da 33 ff ff       	call   c0010ae8 <TSS::setESP(unsigned long)>
c001d70e:	83 c4 1c             	add    esp,0x1c
c001d711:	c3                   	ret    

c001d712 <switchToThread(ThreadControlBlock*)>:
c001d712:	57                   	push   edi
c001d713:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c001d718:	56                   	push   esi
c001d719:	85 c0                	test   eax,eax
c001d71b:	53                   	push   ebx
c001d71c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d720:	0f 85 88 00 00 00    	jne    c001d7ae <switchToThread(ThreadControlBlock*)+0x9c>
c001d726:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d729:	3c ff                	cmp    al,0xff
c001d72b:	74 7d                	je     c001d7aa <switchToThread(ThreadControlBlock*)+0x98>
c001d72d:	0f b6 d0             	movzx  edx,al
c001d730:	b8 84 03 00 00       	mov    eax,0x384
c001d735:	29 d0                	sub    eax,edx
c001d737:	c1 e0 10             	shl    eax,0x10
c001d73a:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d73d:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d740:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c001d745:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d74b:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d752:	74 4a                	je     c001d79e <switchToThread(ThreadControlBlock*)+0x8c>
c001d754:	0f 31                	rdtsc  
c001d756:	a3 a8 22 03 c0       	mov    ds:0xc00322a8,eax
c001d75b:	89 c6                	mov    esi,eax
c001d75d:	89 d7                	mov    edi,edx
c001d75f:	2b 35 98 22 03 c0    	sub    esi,DWORD PTR ds:0xc0032298
c001d765:	89 15 ac 22 03 c0    	mov    DWORD PTR ds:0xc00322ac,edx
c001d76b:	1b 3d 9c 22 03 c0    	sbb    edi,DWORD PTR ds:0xc003229c
c001d771:	89 35 a0 22 03 c0    	mov    DWORD PTR ds:0xc00322a0,esi
c001d777:	a3 98 22 03 c0       	mov    ds:0xc0032298,eax
c001d77c:	89 3d a4 22 03 c0    	mov    DWORD PTR ds:0xc00322a4,edi
c001d782:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d788:	89 15 9c 22 03 c0    	mov    DWORD PTR ds:0xc003229c,edx
c001d78e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d791:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d794:	01 c6                	add    esi,eax
c001d796:	11 d7                	adc    edi,edx
c001d798:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d79b:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d79e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d7a2:	5b                   	pop    ebx
c001d7a3:	5e                   	pop    esi
c001d7a4:	5f                   	pop    edi
c001d7a5:	e9 b8 2b fe ff       	jmp    c0000362 <switchToThreadASM>
c001d7aa:	31 c0                	xor    eax,eax
c001d7ac:	eb 8f                	jmp    c001d73d <switchToThread(ThreadControlBlock*)+0x2b>
c001d7ae:	5b                   	pop    ebx
c001d7af:	c7 05 60 22 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032260,0x1
c001d7b9:	5e                   	pop    esi
c001d7ba:	5f                   	pop    edi
c001d7bb:	c3                   	ret    

c001d7bc <Process::addArgs(char**)>:
c001d7bc:	57                   	push   edi
c001d7bd:	56                   	push   esi
c001d7be:	53                   	push   ebx
c001d7bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d7c3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d7c7:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d7d1:	85 ff                	test   edi,edi
c001d7d3:	74 3d                	je     c001d812 <Process::addArgs(char**)+0x56>
c001d7d5:	8b 07                	mov    eax,DWORD PTR [edi]
c001d7d7:	85 c0                	test   eax,eax
c001d7d9:	74 37                	je     c001d812 <Process::addArgs(char**)+0x56>
c001d7db:	31 db                	xor    ebx,ebx
c001d7dd:	83 ec 0c             	sub    esp,0xc
c001d7e0:	50                   	push   eax
c001d7e1:	e8 86 2f fe ff       	call   c000076c <strlen>
c001d7e6:	40                   	inc    eax
c001d7e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d7ea:	e8 c7 1d ff ff       	call   c000f5b6 <malloc>
c001d7ef:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d7f6:	5a                   	pop    edx
c001d7f7:	59                   	pop    ecx
c001d7f8:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d7fb:	43                   	inc    ebx
c001d7fc:	50                   	push   eax
c001d7fd:	e8 0a 30 fe ff       	call   c000080c <strcpy>
c001d802:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d808:	83 c4 10             	add    esp,0x10
c001d80b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d80e:	85 c0                	test   eax,eax
c001d810:	75 cb                	jne    c001d7dd <Process::addArgs(char**)+0x21>
c001d812:	5b                   	pop    ebx
c001d813:	5e                   	pop    esi
c001d814:	5f                   	pop    edi
c001d815:	c3                   	ret    

c001d816 <Process::Process(char const*, Process*, char**)>:
c001d816:	56                   	push   esi
c001d817:	53                   	push   ebx
c001d818:	83 ec 14             	sub    esp,0x14
c001d81b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d81f:	05 0c 02 00 00       	add    eax,0x20c
c001d824:	bb 07 00 00 00       	mov    ebx,0x7
c001d829:	89 c6                	mov    esi,eax
c001d82b:	85 db                	test   ebx,ebx
c001d82d:	78 12                	js     c001d841 <Process::Process(char const*, Process*, char**)+0x2b>
c001d82f:	83 ec 0c             	sub    esp,0xc
c001d832:	56                   	push   esi
c001d833:	e8 0a bb 00 00       	call   c0029342 <ThreadControlBlock::ThreadControlBlock()>
c001d838:	83 c4 10             	add    esp,0x10
c001d83b:	83 c6 63             	add    esi,0x63
c001d83e:	4b                   	dec    ebx
c001d83f:	eb ea                	jmp    c001d82b <Process::Process(char const*, Process*, char**)+0x15>
c001d841:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d845:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d84c:	83 ec 0c             	sub    esp,0xc
c001d84f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d853:	e8 7e c6 ff ff       	call   c0019ed6 <Krnl::newProcessEnv(Process*)>
c001d858:	83 c4 10             	add    esp,0x10
c001d85b:	89 c2                	mov    edx,eax
c001d85d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d861:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d86b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d874:	a1 d0 e2 02 c0       	mov    eax,ds:0xc002e2d0
c001d879:	8d 50 01             	lea    edx,[eax+0x1]
c001d87c:	89 15 d0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2d0,edx
c001d882:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d886:	89 02                	mov    DWORD PTR [edx],eax
c001d888:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d890:	83 ec 0c             	sub    esp,0xc
c001d893:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d897:	e8 1a 1d ff ff       	call   c000f5b6 <malloc>
c001d89c:	83 c4 10             	add    esp,0x10
c001d89f:	89 c3                	mov    ebx,eax
c001d8a1:	83 ec 08             	sub    esp,0x8
c001d8a4:	6a 00                	push   0x0
c001d8a6:	53                   	push   ebx
c001d8a7:	e8 de 45 ff ff       	call   c0011e8a <VAS::VAS(bool)>
c001d8ac:	83 c4 10             	add    esp,0x10
c001d8af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8b3:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d8b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8bd:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d8c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8cb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8cf:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d8d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8d9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d8df:	85 c0                	test   eax,eax
c001d8e1:	74 42                	je     c001d925 <Process::Process(char const*, Process*, char**)+0x10f>
c001d8e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8e7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d8ed:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d8f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8f7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d8fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d901:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d907:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d90d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d911:	05 0c 01 00 00       	add    eax,0x10c
c001d916:	83 ec 08             	sub    esp,0x8
c001d919:	52                   	push   edx
c001d91a:	50                   	push   eax
c001d91b:	e8 ec 2e fe ff       	call   c000080c <strcpy>
c001d920:	83 c4 10             	add    esp,0x10
c001d923:	eb 63                	jmp    c001d988 <Process::Process(char const*, Process*, char**)+0x172>
c001d925:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d92d:	83 ec 0c             	sub    esp,0xc
c001d930:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d934:	e8 7d 1c ff ff       	call   c000f5b6 <malloc>
c001d939:	83 c4 10             	add    esp,0x10
c001d93c:	89 c3                	mov    ebx,eax
c001d93e:	83 ec 08             	sub    esp,0x8
c001d941:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d945:	53                   	push   ebx
c001d946:	e8 b1 2e ff ff       	call   c00107fc <VgaText::VgaText(char const*)>
c001d94b:	83 c4 10             	add    esp,0x10
c001d94e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d952:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d958:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d95c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d962:	83 ec 0c             	sub    esp,0xc
c001d965:	50                   	push   eax
c001d966:	e8 50 26 ff ff       	call   c000ffbb <addToTerminalCycle(VgaText*)>
c001d96b:	83 c4 10             	add    esp,0x10
c001d96e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d972:	05 0c 01 00 00       	add    eax,0x10c
c001d977:	83 ec 08             	sub    esp,0x8
c001d97a:	68 b3 c8 02 c0       	push   0xc002c8b3
c001d97f:	50                   	push   eax
c001d980:	e8 87 2e fe ff       	call   c000080c <strcpy>
c001d985:	83 c4 10             	add    esp,0x10
c001d988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d98c:	83 c0 0c             	add    eax,0xc
c001d98f:	83 ec 08             	sub    esp,0x8
c001d992:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d996:	50                   	push   eax
c001d997:	e8 70 2e fe ff       	call   c000080c <strcpy>
c001d99c:	83 c4 10             	add    esp,0x10
c001d99f:	83 ec 08             	sub    esp,0x8
c001d9a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d9a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d9aa:	e8 0d fe ff ff       	call   c001d7bc <Process::addArgs(char**)>
c001d9af:	83 c4 10             	add    esp,0x10
c001d9b2:	83 ec 08             	sub    esp,0x8
c001d9b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d9bd:	e8 a6 ed ff ff       	call   c001c768 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d9c2:	83 c4 10             	add    esp,0x10
c001d9c5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d9c9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d9cd:	83 f0 01             	xor    eax,0x1
c001d9d0:	88 c2                	mov    dl,al
c001d9d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9d6:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d9dc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d9e1:	83 ec 08             	sub    esp,0x8
c001d9e4:	50                   	push   eax
c001d9e5:	68 e0 c9 02 c0       	push   0xc002c9e0
c001d9ea:	e8 c0 4b ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001d9ef:	83 c4 10             	add    esp,0x10
c001d9f2:	90                   	nop
c001d9f3:	83 c4 14             	add    esp,0x14
c001d9f6:	5b                   	pop    ebx
c001d9f7:	5e                   	pop    esi
c001d9f8:	c3                   	ret    
c001d9f9:	90                   	nop

c001d9fa <Process::Process(bool, char const*, Process*, char**)>:
c001d9fa:	56                   	push   esi
c001d9fb:	53                   	push   ebx
c001d9fc:	83 ec 24             	sub    esp,0x24
c001d9ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001da03:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001da07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da0b:	05 0c 02 00 00       	add    eax,0x20c
c001da10:	bb 07 00 00 00       	mov    ebx,0x7
c001da15:	89 c6                	mov    esi,eax
c001da17:	85 db                	test   ebx,ebx
c001da19:	78 12                	js     c001da2d <Process::Process(bool, char const*, Process*, char**)+0x33>
c001da1b:	83 ec 0c             	sub    esp,0xc
c001da1e:	56                   	push   esi
c001da1f:	e8 1e b9 00 00       	call   c0029342 <ThreadControlBlock::ThreadControlBlock()>
c001da24:	83 c4 10             	add    esp,0x10
c001da27:	83 c6 63             	add    esi,0x63
c001da2a:	4b                   	dec    ebx
c001da2b:	eb ea                	jmp    c001da17 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001da2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da31:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001da38:	83 ec 0c             	sub    esp,0xc
c001da3b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da3f:	e8 92 c4 ff ff       	call   c0019ed6 <Krnl::newProcessEnv(Process*)>
c001da44:	83 c4 10             	add    esp,0x10
c001da47:	89 c2                	mov    edx,eax
c001da49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da4d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001da53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da57:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001da60:	a1 d0 e2 02 c0       	mov    eax,ds:0xc002e2d0
c001da65:	8d 50 01             	lea    edx,[eax+0x1]
c001da68:	89 15 d0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2d0,edx
c001da6e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001da72:	89 02                	mov    DWORD PTR [edx],eax
c001da74:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001da7c:	83 ec 0c             	sub    esp,0xc
c001da7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001da83:	e8 2e 1b ff ff       	call   c000f5b6 <malloc>
c001da88:	83 c4 10             	add    esp,0x10
c001da8b:	89 c3                	mov    ebx,eax
c001da8d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001da92:	83 ec 08             	sub    esp,0x8
c001da95:	50                   	push   eax
c001da96:	53                   	push   ebx
c001da97:	e8 ee 43 ff ff       	call   c0011e8a <VAS::VAS(bool)>
c001da9c:	83 c4 10             	add    esp,0x10
c001da9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001daa3:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001daa9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001daad:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dab7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dabb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dabf:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dac5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dac9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dacf:	85 c0                	test   eax,eax
c001dad1:	74 42                	je     c001db15 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dad3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dad7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dadd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dae3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dae7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001daed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001daf1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001daf7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dafd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db01:	05 0c 01 00 00       	add    eax,0x10c
c001db06:	83 ec 08             	sub    esp,0x8
c001db09:	52                   	push   edx
c001db0a:	50                   	push   eax
c001db0b:	e8 fc 2c fe ff       	call   c000080c <strcpy>
c001db10:	83 c4 10             	add    esp,0x10
c001db13:	eb 63                	jmp    c001db78 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001db15:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001db1d:	83 ec 0c             	sub    esp,0xc
c001db20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001db24:	e8 8d 1a ff ff       	call   c000f5b6 <malloc>
c001db29:	83 c4 10             	add    esp,0x10
c001db2c:	89 c3                	mov    ebx,eax
c001db2e:	83 ec 08             	sub    esp,0x8
c001db31:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001db35:	53                   	push   ebx
c001db36:	e8 c1 2c ff ff       	call   c00107fc <VgaText::VgaText(char const*)>
c001db3b:	83 c4 10             	add    esp,0x10
c001db3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db42:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001db48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db4c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db52:	83 ec 0c             	sub    esp,0xc
c001db55:	50                   	push   eax
c001db56:	e8 60 24 ff ff       	call   c000ffbb <addToTerminalCycle(VgaText*)>
c001db5b:	83 c4 10             	add    esp,0x10
c001db5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db62:	05 0c 01 00 00       	add    eax,0x10c
c001db67:	83 ec 08             	sub    esp,0x8
c001db6a:	68 b3 c8 02 c0       	push   0xc002c8b3
c001db6f:	50                   	push   eax
c001db70:	e8 97 2c fe ff       	call   c000080c <strcpy>
c001db75:	83 c4 10             	add    esp,0x10
c001db78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db7c:	83 c0 0c             	add    eax,0xc
c001db7f:	83 ec 08             	sub    esp,0x8
c001db82:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001db86:	50                   	push   eax
c001db87:	e8 80 2c fe ff       	call   c000080c <strcpy>
c001db8c:	83 c4 10             	add    esp,0x10
c001db8f:	83 ec 08             	sub    esp,0x8
c001db92:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001db96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001db9a:	e8 1d fc ff ff       	call   c001d7bc <Process::addArgs(char**)>
c001db9f:	83 c4 10             	add    esp,0x10
c001dba2:	90                   	nop
c001dba3:	83 c4 24             	add    esp,0x24
c001dba6:	5b                   	pop    ebx
c001dba7:	5e                   	pop    esi
c001dba8:	c3                   	ret    

c001dba9 <taskStartupFunction>:
c001dba9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbae:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dbb1:	c3                   	ret    

c001dbb2 <Semaphore::Semaphore(int)>:
c001dbb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dbb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dbba:	89 10                	mov    DWORD PTR [eax],edx
c001dbbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dbc0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dbc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dbcb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dbd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dbd6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dbdd:	90                   	nop
c001dbde:	c3                   	ret    
c001dbdf:	90                   	nop

c001dbe0 <Mutex::Mutex()>:
c001dbe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dbe4:	6a 01                	push   0x1
c001dbe6:	50                   	push   eax
c001dbe7:	e8 c6 ff ff ff       	call   c001dbb2 <Semaphore::Semaphore(int)>
c001dbec:	83 c4 08             	add    esp,0x8
c001dbef:	90                   	nop
c001dbf0:	c3                   	ret    
c001dbf1:	90                   	nop

c001dbf2 <Process::createThread(void (*)(void*), void*, int)>:
c001dbf2:	55                   	push   ebp
c001dbf3:	31 c9                	xor    ecx,ecx
c001dbf5:	57                   	push   edi
c001dbf6:	56                   	push   esi
c001dbf7:	53                   	push   ebx
c001dbf8:	83 ec 1c             	sub    esp,0x1c
c001dbfb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dbff:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dc06:	89 f2                	mov    edx,esi
c001dc08:	0f b7 c2             	movzx  eax,dx
c001dc0b:	83 e2 01             	and    edx,0x1
c001dc0e:	74 16                	je     c001dc26 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001dc10:	d1 f8                	sar    eax,1
c001dc12:	41                   	inc    ecx
c001dc13:	89 c2                	mov    edx,eax
c001dc15:	83 f9 10             	cmp    ecx,0x10
c001dc18:	75 ee                	jne    c001dc08 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dc1a:	83 c4 1c             	add    esp,0x1c
c001dc1d:	31 db                	xor    ebx,ebx
c001dc1f:	89 d8                	mov    eax,ebx
c001dc21:	5b                   	pop    ebx
c001dc22:	5e                   	pop    esi
c001dc23:	5f                   	pop    edi
c001dc24:	5d                   	pop    ebp
c001dc25:	c3                   	ret    
c001dc26:	b8 01 00 00 00       	mov    eax,0x1
c001dc2b:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dc2e:	d3 e0                	shl    eax,cl
c001dc30:	09 c6                	or     esi,eax
c001dc32:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001dc35:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dc3c:	89 c6                	mov    esi,eax
c001dc3e:	c1 e6 05             	shl    esi,0x5
c001dc41:	01 f0                	add    eax,esi
c001dc43:	01 d8                	add    eax,ebx
c001dc45:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001dc4c:	75 0a                	jne    c001dc58 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001dc4e:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001dc58:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dc5e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001dc62:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001dc65:	01 ca                	add    edx,ecx
c001dc67:	83 ec 08             	sub    esp,0x8
c001dc6a:	89 d0                	mov    eax,edx
c001dc6c:	c1 e0 05             	shl    eax,0x5
c001dc6f:	01 d0                	add    eax,edx
c001dc71:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001dc75:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dc79:	01 d8                	add    eax,ebx
c001dc7b:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001dc81:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001dc87:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dc8d:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dc93:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dc99:	89 cd                	mov    ebp,ecx
c001dc9b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001dc9f:	f7 dd                	neg    ebp
c001dca1:	c1 e5 15             	shl    ebp,0x15
c001dca4:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001dcaa:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001dcb0:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dcba:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001dcc0:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dcca:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dcd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dcd8:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001dcdf:	53                   	push   ebx
c001dce0:	68 84 22 03 c0       	push   0xc0032284
c001dce5:	e8 12 b4 00 00       	call   c00290fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dcea:	89 d8                	mov    eax,ebx
c001dcec:	83 c4 10             	add    esp,0x10
c001dcef:	83 c4 1c             	add    esp,0x1c
c001dcf2:	5b                   	pop    ebx
c001dcf3:	5e                   	pop    esi
c001dcf4:	5f                   	pop    edi
c001dcf5:	5d                   	pop    ebp
c001dcf6:	c3                   	ret    
c001dcf7:	90                   	nop

c001dcf8 <Process::createUserThread()>:
c001dcf8:	83 ec 0c             	sub    esp,0xc
c001dcfb:	68 80 00 00 00       	push   0x80
c001dd00:	6a 00                	push   0x0
c001dd02:	68 bc d6 01 c0       	push   0xc001d6bc
c001dd07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd0b:	e8 e2 fe ff ff       	call   c001dbf2 <Process::createThread(void (*)(void*), void*, int)>
c001dd10:	83 c4 1c             	add    esp,0x1c
c001dd13:	c3                   	ret    

c001dd14 <setupMultitasking(void (*)())>:
c001dd14:	56                   	push   esi
c001dd15:	53                   	push   ebx
c001dd16:	51                   	push   ecx
c001dd17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dd1b:	eb 10                	jmp    c001dd2d <setupMultitasking(void (*)())+0x19>
c001dd1d:	83 ec 0c             	sub    esp,0xc
c001dd20:	68 84 22 03 c0       	push   0xc0032284
c001dd25:	e8 24 b3 00 00       	call   c002904e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dd2a:	83 c4 10             	add    esp,0x10
c001dd2d:	83 ec 0c             	sub    esp,0xc
c001dd30:	68 84 22 03 c0       	push   0xc0032284
c001dd35:	e8 f0 b2 00 00       	call   c002902a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dd3a:	83 c4 10             	add    esp,0x10
c001dd3d:	84 c0                	test   al,al
c001dd3f:	74 dc                	je     c001dd1d <setupMultitasking(void (*)())+0x9>
c001dd41:	83 ec 0c             	sub    esp,0xc
c001dd44:	68 3f 07 00 00       	push   0x73f
c001dd49:	e8 68 18 ff ff       	call   c000f5b6 <malloc>
c001dd4e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dd55:	89 c3                	mov    ebx,eax
c001dd57:	6a 00                	push   0x0
c001dd59:	68 b7 c8 02 c0       	push   0xc002c8b7
c001dd5e:	6a 01                	push   0x1
c001dd60:	50                   	push   eax
c001dd61:	e8 94 fc ff ff       	call   c001d9fa <Process::Process(bool, char const*, Process*, char**)>
c001dd66:	83 c4 18             	add    esp,0x18
c001dd69:	89 1d 90 22 03 c0    	mov    DWORD PTR ds:0xc0032290,ebx
c001dd6f:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dd75:	68 08 ca 02 c0       	push   0xc002ca08
c001dd7a:	e8 30 48 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001dd7f:	58                   	pop    eax
c001dd80:	5a                   	pop    edx
c001dd81:	6a 63                	push   0x63
c001dd83:	68 3c ca 02 c0       	push   0xc002ca3c
c001dd88:	e8 22 48 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001dd8d:	59                   	pop    ecx
c001dd8e:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dd94:	e8 30 25 ff ff       	call   c00102c9 <setActiveTerminal(VgaText*)>
c001dd99:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001dda1:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001ddab:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001ddb1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ddb4:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001ddbe:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001ddc4:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001ddca:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001ddd4:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001ddde:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001dde8:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001ddee:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001ddf8:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001ddfe:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001de08:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001de0e:	58                   	pop    eax
c001de0f:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001de15:	5a                   	pop    edx
c001de16:	68 b3 c8 02 c0       	push   0xc002c8b3
c001de1b:	50                   	push   eax
c001de1c:	e8 eb 29 fe ff       	call   c000080c <strcpy>
c001de21:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001de28:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001de2c:	83 c4 14             	add    esp,0x14
c001de2f:	5b                   	pop    ebx
c001de30:	5e                   	pop    esi
c001de31:	e9 1e 25 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001de36 <schedule()>:
c001de36:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c001de3b:	85 c0                	test   eax,eax
c001de3d:	74 0b                	je     c001de4a <schedule()+0x14>
c001de3f:	c7 05 60 22 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032260,0x1
c001de49:	c3                   	ret    
c001de4a:	53                   	push   ebx
c001de4b:	83 ec 14             	sub    esp,0x14
c001de4e:	68 84 22 03 c0       	push   0xc0032284
c001de53:	e8 d2 b1 00 00       	call   c002902a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001de58:	83 c4 10             	add    esp,0x10
c001de5b:	84 c0                	test   al,al
c001de5d:	75 38                	jne    c001de97 <schedule()+0x61>
c001de5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de64:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001de67:	4a                   	dec    edx
c001de68:	74 32                	je     c001de9c <schedule()+0x66>
c001de6a:	83 ec 0c             	sub    esp,0xc
c001de6d:	68 84 22 03 c0       	push   0xc0032284
c001de72:	e8 cf b1 00 00       	call   c0029046 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de77:	c7 04 24 84 22 03 c0 	mov    DWORD PTR [esp],0xc0032284
c001de7e:	89 c3                	mov    ebx,eax
c001de80:	e8 c9 b1 00 00       	call   c002904e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de85:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001de8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001de8f:	e8 7e f8 ff ff       	call   c001d712 <switchToThread(ThreadControlBlock*)>
c001de94:	83 c4 10             	add    esp,0x10
c001de97:	83 c4 08             	add    esp,0x8
c001de9a:	5b                   	pop    ebx
c001de9b:	c3                   	ret    
c001de9c:	83 ec 08             	sub    esp,0x8
c001de9f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001dea6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001deac:	68 84 22 03 c0       	push   0xc0032284
c001deb1:	e8 46 b2 00 00       	call   c00290fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001deb6:	83 c4 10             	add    esp,0x10
c001deb9:	eb af                	jmp    c001de6a <schedule()+0x34>
c001debb:	90                   	nop

c001debc <Semaphore::tryAcquire()>:
c001debc:	53                   	push   ebx
c001debd:	83 ec 08             	sub    esp,0x8
c001dec0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dec4:	fa                   	cli    
c001dec5:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001deca:	8d 50 01             	lea    edx,[eax+0x1]
c001decd:	89 15 68 22 03 c0    	mov    DWORD PTR ds:0xc0032268,edx
c001ded3:	8b 15 64 22 03 c0    	mov    edx,DWORD PTR ds:0xc0032264
c001ded9:	8d 5a 01             	lea    ebx,[edx+0x1]
c001dedc:	89 1d 64 22 03 c0    	mov    DWORD PTR ds:0xc0032264,ebx
c001dee2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001dee5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001dee7:	7c 2a                	jl     c001df13 <Semaphore::tryAcquire()+0x57>
c001dee9:	89 15 64 22 03 c0    	mov    DWORD PTR ds:0xc0032264,edx
c001deef:	85 d2                	test   edx,edx
c001def1:	75 0a                	jne    c001defd <Semaphore::tryAcquire()+0x41>
c001def3:	8b 15 60 22 03 c0    	mov    edx,DWORD PTR ds:0xc0032260
c001def9:	85 d2                	test   edx,edx
c001defb:	75 5b                	jne    c001df58 <Semaphore::tryAcquire()+0x9c>
c001defd:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001df02:	85 c0                	test   eax,eax
c001df04:	74 07                	je     c001df0d <Semaphore::tryAcquire()+0x51>
c001df06:	31 c0                	xor    eax,eax
c001df08:	83 c4 08             	add    esp,0x8
c001df0b:	5b                   	pop    ebx
c001df0c:	c3                   	ret    
c001df0d:	fb                   	sti    
c001df0e:	83 c4 08             	add    esp,0x8
c001df11:	5b                   	pop    ebx
c001df12:	c3                   	ret    
c001df13:	43                   	inc    ebx
c001df14:	89 15 64 22 03 c0    	mov    DWORD PTR ds:0xc0032264,edx
c001df1a:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001df1d:	85 d2                	test   edx,edx
c001df1f:	75 1f                	jne    c001df40 <Semaphore::tryAcquire()+0x84>
c001df21:	8b 0d 60 22 03 c0    	mov    ecx,DWORD PTR ds:0xc0032260
c001df27:	85 c9                	test   ecx,ecx
c001df29:	74 15                	je     c001df40 <Semaphore::tryAcquire()+0x84>
c001df2b:	c7 05 60 22 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032260,0x0
c001df35:	e8 fc fe ff ff       	call   c001de36 <schedule()>
c001df3a:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001df3f:	48                   	dec    eax
c001df40:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001df45:	85 c0                	test   eax,eax
c001df47:	75 08                	jne    c001df51 <Semaphore::tryAcquire()+0x95>
c001df49:	fb                   	sti    
c001df4a:	b0 01                	mov    al,0x1
c001df4c:	83 c4 08             	add    esp,0x8
c001df4f:	5b                   	pop    ebx
c001df50:	c3                   	ret    
c001df51:	b0 01                	mov    al,0x1
c001df53:	83 c4 08             	add    esp,0x8
c001df56:	5b                   	pop    ebx
c001df57:	c3                   	ret    
c001df58:	c7 05 60 22 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032260,0x0
c001df62:	e8 cf fe ff ff       	call   c001de36 <schedule()>
c001df67:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001df6c:	48                   	dec    eax
c001df6d:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001df72:	85 c0                	test   eax,eax
c001df74:	75 90                	jne    c001df06 <Semaphore::tryAcquire()+0x4a>
c001df76:	eb 95                	jmp    c001df0d <Semaphore::tryAcquire()+0x51>

c001df78 <Semaphore::assertLocked(char const*)>:
c001df78:	83 ec 0c             	sub    esp,0xc
c001df7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001df7f:	fa                   	cli    
c001df80:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001df86:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c001df8b:	8d 48 01             	lea    ecx,[eax+0x1]
c001df8e:	89 0d 64 22 03 c0    	mov    DWORD PTR ds:0xc0032264,ecx
c001df94:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001df96:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001df99:	7c 24                	jl     c001dfbf <Semaphore::assertLocked(char const*)+0x47>
c001df9b:	a3 64 22 03 c0       	mov    ds:0xc0032264,eax
c001dfa0:	85 c0                	test   eax,eax
c001dfa2:	75 09                	jne    c001dfad <Semaphore::assertLocked(char const*)+0x35>
c001dfa4:	a1 60 22 03 c0       	mov    eax,ds:0xc0032260
c001dfa9:	85 c0                	test   eax,eax
c001dfab:	75 29                	jne    c001dfd6 <Semaphore::assertLocked(char const*)+0x5e>
c001dfad:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001dfb2:	48                   	dec    eax
c001dfb3:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001dfb8:	75 01                	jne    c001dfbb <Semaphore::assertLocked(char const*)+0x43>
c001dfba:	fb                   	sti    
c001dfbb:	83 c4 0c             	add    esp,0xc
c001dfbe:	c3                   	ret    
c001dfbf:	83 ec 0c             	sub    esp,0xc
c001dfc2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001dfc6:	e8 b2 c0 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001dfcb:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c001dfd0:	83 c4 10             	add    esp,0x10
c001dfd3:	48                   	dec    eax
c001dfd4:	eb c5                	jmp    c001df9b <Semaphore::assertLocked(char const*)+0x23>
c001dfd6:	c7 05 60 22 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032260,0x0
c001dfe0:	e8 51 fe ff ff       	call   c001de36 <schedule()>
c001dfe5:	eb c6                	jmp    c001dfad <Semaphore::assertLocked(char const*)+0x35>

c001dfe7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001dfe7:	83 ec 14             	sub    esp,0x14
c001dfea:	ff 35 68 22 03 c0    	push   DWORD PTR ds:0xc0032268
c001dff0:	68 60 ca 02 c0       	push   0xc002ca60
c001dff5:	e8 b5 45 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001dffa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e003:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e006:	e8 2b fe ff ff       	call   c001de36 <schedule()>
c001e00b:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001e010:	83 c4 10             	add    esp,0x10
c001e013:	48                   	dec    eax
c001e014:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001e019:	85 c0                	test   eax,eax
c001e01b:	75 06                	jne    c001e023 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e01d:	fb                   	sti    
c001e01e:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001e023:	83 ec 08             	sub    esp,0x8
c001e026:	50                   	push   eax
c001e027:	68 94 ca 02 c0       	push   0xc002ca94
c001e02c:	e8 7e 45 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e031:	83 c4 1c             	add    esp,0x1c
c001e034:	c3                   	ret    

c001e035 <blockTask(TaskState)>:
c001e035:	83 ec 0c             	sub    esp,0xc
c001e038:	fa                   	cli    
c001e039:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001e03f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e043:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e048:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e04b:	e8 e6 fd ff ff       	call   c001de36 <schedule()>
c001e050:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001e055:	48                   	dec    eax
c001e056:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001e05b:	75 01                	jne    c001e05e <blockTask(TaskState)+0x29>
c001e05d:	fb                   	sti    
c001e05e:	83 c4 0c             	add    esp,0xc
c001e061:	c3                   	ret    

c001e062 <waitTask(int, int*, int)>:
c001e062:	83 ec 18             	sub    esp,0x18
c001e065:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e06a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e06e:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e071:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e075:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e07a:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e07d:	6a 07                	push   0x7
c001e07f:	e8 b1 ff ff ff       	call   c001e035 <blockTask(TaskState)>
c001e084:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e089:	83 c4 10             	add    esp,0x10
c001e08c:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e08f:	85 d2                	test   edx,edx
c001e091:	74 0a                	je     c001e09d <waitTask(int, int*, int)+0x3b>
c001e093:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e096:	89 02                	mov    DWORD PTR [edx],eax
c001e098:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e09d:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e0a0:	83 c4 0c             	add    esp,0xc
c001e0a3:	c3                   	ret    

c001e0a4 <nanoSleepUntil(unsigned long long)>:
c001e0a4:	83 ec 0c             	sub    esp,0xc
c001e0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e0af:	3b 05 b0 f3 02 c0    	cmp    eax,DWORD PTR ds:0xc002f3b0
c001e0b5:	89 d1                	mov    ecx,edx
c001e0b7:	1b 0d b4 f3 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f3b4
c001e0bd:	73 04                	jae    c001e0c3 <nanoSleepUntil(unsigned long long)+0x1f>
c001e0bf:	83 c4 0c             	add    esp,0xc
c001e0c2:	c3                   	ret    
c001e0c3:	fa                   	cli    
c001e0c4:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001e0ca:	83 ec 08             	sub    esp,0x8
c001e0cd:	ff 05 64 22 03 c0    	inc    DWORD PTR ds:0xc0032264
c001e0d3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e0d9:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e0dc:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e0df:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e0e5:	68 78 22 03 c0       	push   0xc0032278
c001e0ea:	e8 0d b0 00 00       	call   c00290fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0ef:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e0f6:	e8 3a ff ff ff       	call   c001e035 <blockTask(TaskState)>
c001e0fb:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c001e100:	83 c4 10             	add    esp,0x10
c001e103:	48                   	dec    eax
c001e104:	a3 64 22 03 c0       	mov    ds:0xc0032264,eax
c001e109:	85 c0                	test   eax,eax
c001e10b:	75 09                	jne    c001e116 <nanoSleepUntil(unsigned long long)+0x72>
c001e10d:	a1 60 22 03 c0       	mov    eax,ds:0xc0032260
c001e112:	85 c0                	test   eax,eax
c001e114:	75 12                	jne    c001e128 <nanoSleepUntil(unsigned long long)+0x84>
c001e116:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001e11b:	48                   	dec    eax
c001e11c:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001e121:	75 9c                	jne    c001e0bf <nanoSleepUntil(unsigned long long)+0x1b>
c001e123:	fb                   	sti    
c001e124:	83 c4 0c             	add    esp,0xc
c001e127:	c3                   	ret    
c001e128:	c7 05 60 22 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032260,0x0
c001e132:	e8 ff fc ff ff       	call   c001de36 <schedule()>
c001e137:	eb dd                	jmp    c001e116 <nanoSleepUntil(unsigned long long)+0x72>

c001e139 <nanoSleep(unsigned long long)>:
c001e139:	a1 b0 f3 02 c0       	mov    eax,ds:0xc002f3b0
c001e13e:	8b 15 b4 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3b4
c001e144:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e148:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e14c:	e9 53 ff ff ff       	jmp    c001e0a4 <nanoSleepUntil(unsigned long long)>

c001e151 <sleep(unsigned long long)>:
c001e151:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e159:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e15e:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e162:	01 ca                	add    edx,ecx
c001e164:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e168:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e16c:	eb cb                	jmp    c001e139 <nanoSleep(unsigned long long)>

c001e16e <Semaphore::acquire()>:
c001e16e:	83 ec 0c             	sub    esp,0xc
c001e171:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e175:	fa                   	cli    
c001e176:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c001e17b:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001e181:	8d 48 01             	lea    ecx,[eax+0x1]
c001e184:	89 0d 64 22 03 c0    	mov    DWORD PTR ds:0xc0032264,ecx
c001e18a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e18d:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e18f:	7d 28                	jge    c001e1b9 <Semaphore::acquire()+0x4b>
c001e191:	41                   	inc    ecx
c001e192:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e195:	a3 64 22 03 c0       	mov    ds:0xc0032264,eax
c001e19a:	85 c0                	test   eax,eax
c001e19c:	75 09                	jne    c001e1a7 <Semaphore::acquire()+0x39>
c001e19e:	a1 60 22 03 c0       	mov    eax,ds:0xc0032260
c001e1a3:	85 c0                	test   eax,eax
c001e1a5:	75 4e                	jne    c001e1f5 <Semaphore::acquire()+0x87>
c001e1a7:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001e1ac:	48                   	dec    eax
c001e1ad:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001e1b2:	75 01                	jne    c001e1b5 <Semaphore::acquire()+0x47>
c001e1b4:	fb                   	sti    
c001e1b5:	83 c4 0c             	add    esp,0xc
c001e1b8:	c3                   	ret    
c001e1b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1be:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e1c5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e1c8:	85 c9                	test   ecx,ecx
c001e1ca:	74 3a                	je     c001e206 <Semaphore::acquire()+0x98>
c001e1cc:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e1cf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e1d5:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e1d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1dd:	83 ec 0c             	sub    esp,0xc
c001e1e0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e1e3:	6a 05                	push   0x5
c001e1e5:	e8 4b fe ff ff       	call   c001e035 <blockTask(TaskState)>
c001e1ea:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c001e1ef:	83 c4 10             	add    esp,0x10
c001e1f2:	48                   	dec    eax
c001e1f3:	eb a0                	jmp    c001e195 <Semaphore::acquire()+0x27>
c001e1f5:	c7 05 60 22 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032260,0x0
c001e1ff:	e8 32 fc ff ff       	call   c001de36 <schedule()>
c001e204:	eb a1                	jmp    c001e1a7 <Semaphore::acquire()+0x39>
c001e206:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e20b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e20e:	eb c8                	jmp    c001e1d8 <Semaphore::acquire()+0x6a>

c001e210 <taskReturned>:
c001e210:	83 ec 18             	sub    esp,0x18
c001e213:	68 c8 ca 02 c0       	push   0xc002cac8
c001e218:	e8 60 be ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001e21d:	83 c4 10             	add    esp,0x10
c001e220:	83 ec 0c             	sub    esp,0xc
c001e223:	6a 02                	push   0x2
c001e225:	e8 0b fe ff ff       	call   c001e035 <blockTask(TaskState)>
c001e22a:	fa                   	cli    
c001e22b:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001e231:	e8 00 fc ff ff       	call   c001de36 <schedule()>
c001e236:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001e23b:	83 c4 10             	add    esp,0x10
c001e23e:	48                   	dec    eax
c001e23f:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001e244:	85 c0                	test   eax,eax
c001e246:	75 d8                	jne    c001e220 <taskReturned+0x10>
c001e248:	fb                   	sti    
c001e249:	eb d5                	jmp    c001e220 <taskReturned+0x10>

c001e24b <Thr::processFromPID(int)>:
c001e24b:	57                   	push   edi
c001e24c:	56                   	push   esi
c001e24d:	53                   	push   ebx
c001e24e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e252:	83 ec 0c             	sub    esp,0xc
c001e255:	68 be c8 02 c0       	push   0xc002c8be
c001e25a:	e8 50 43 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e25f:	fa                   	cli    
c001e260:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001e266:	c7 04 24 84 22 03 c0 	mov    DWORD PTR [esp],0xc0032284
c001e26d:	e8 d4 ad 00 00       	call   c0029046 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e272:	83 c4 10             	add    esp,0x10
c001e275:	89 c7                	mov    edi,eax
c001e277:	eb 14                	jmp    c001e28d <Thr::processFromPID(int)+0x42>
c001e279:	83 ec 0c             	sub    esp,0xc
c001e27c:	68 84 22 03 c0       	push   0xc0032284
c001e281:	e8 c0 ad 00 00       	call   c0029046 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e286:	83 c4 10             	add    esp,0x10
c001e289:	39 f8                	cmp    eax,edi
c001e28b:	74 49                	je     c001e2d6 <Thr::processFromPID(int)+0x8b>
c001e28d:	83 ec 0c             	sub    esp,0xc
c001e290:	68 84 22 03 c0       	push   0xc0032284
c001e295:	e8 ac ad 00 00       	call   c0029046 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e29a:	c7 04 24 84 22 03 c0 	mov    DWORD PTR [esp],0xc0032284
c001e2a1:	89 c3                	mov    ebx,eax
c001e2a3:	e8 a6 ad 00 00       	call   c002904e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e2a8:	58                   	pop    eax
c001e2a9:	5a                   	pop    edx
c001e2aa:	53                   	push   ebx
c001e2ab:	68 84 22 03 c0       	push   0xc0032284
c001e2b0:	e8 47 ae 00 00       	call   c00290fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2b5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e2b8:	83 c4 10             	add    esp,0x10
c001e2bb:	39 30                	cmp    DWORD PTR [eax],esi
c001e2bd:	75 ba                	jne    c001e279 <Thr::processFromPID(int)+0x2e>
c001e2bf:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001e2c4:	48                   	dec    eax
c001e2c5:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001e2ca:	74 07                	je     c001e2d3 <Thr::processFromPID(int)+0x88>
c001e2cc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e2cf:	5b                   	pop    ebx
c001e2d0:	5e                   	pop    esi
c001e2d1:	5f                   	pop    edi
c001e2d2:	c3                   	ret    
c001e2d3:	fb                   	sti    
c001e2d4:	eb f6                	jmp    c001e2cc <Thr::processFromPID(int)+0x81>
c001e2d6:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001e2db:	48                   	dec    eax
c001e2dc:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001e2e1:	75 01                	jne    c001e2e4 <Thr::processFromPID(int)+0x99>
c001e2e3:	fb                   	sti    
c001e2e4:	83 ec 0c             	sub    esp,0xc
c001e2e7:	68 d9 c8 02 c0       	push   0xc002c8d9
c001e2ec:	e8 be 42 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e2f1:	83 c4 10             	add    esp,0x10
c001e2f4:	31 c0                	xor    eax,eax
c001e2f6:	5b                   	pop    ebx
c001e2f7:	5e                   	pop    esi
c001e2f8:	5f                   	pop    edi
c001e2f9:	c3                   	ret    

c001e2fa <unblockTask(ThreadControlBlock*)>:
c001e2fa:	53                   	push   ebx
c001e2fb:	83 ec 08             	sub    esp,0x8
c001e2fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e302:	fa                   	cli    
c001e303:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001e309:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e30c:	85 c0                	test   eax,eax
c001e30e:	74 66                	je     c001e376 <unblockTask(ThreadControlBlock*)+0x7c>
c001e310:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e313:	48                   	dec    eax
c001e314:	74 31                	je     c001e347 <unblockTask(ThreadControlBlock*)+0x4d>
c001e316:	83 ec 0c             	sub    esp,0xc
c001e319:	68 84 22 03 c0       	push   0xc0032284
c001e31e:	e8 23 ad 00 00       	call   c0029046 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e323:	83 c4 10             	add    esp,0x10
c001e326:	85 c0                	test   eax,eax
c001e328:	75 17                	jne    c001e341 <unblockTask(ThreadControlBlock*)+0x47>
c001e32a:	eb 68                	jmp    c001e394 <unblockTask(ThreadControlBlock*)+0x9a>
c001e32c:	83 ec 08             	sub    esp,0x8
c001e32f:	50                   	push   eax
c001e330:	68 84 22 03 c0       	push   0xc0032284
c001e335:	e8 aa b0 00 00       	call   c00293e4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e33a:	83 c4 10             	add    esp,0x10
c001e33d:	85 c0                	test   eax,eax
c001e33f:	74 53                	je     c001e394 <unblockTask(ThreadControlBlock*)+0x9a>
c001e341:	39 c3                	cmp    ebx,eax
c001e343:	75 e7                	jne    c001e32c <unblockTask(ThreadControlBlock*)+0x32>
c001e345:	eb 1c                	jmp    c001e363 <unblockTask(ThreadControlBlock*)+0x69>
c001e347:	83 ec 0c             	sub    esp,0xc
c001e34a:	68 b8 cb 02 c0       	push   0xc002cbb8
c001e34f:	e8 5b 42 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e354:	c7 04 24 44 cb 02 c0 	mov    DWORD PTR [esp],0xc002cb44
c001e35b:	e8 4f 42 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e360:	83 c4 10             	add    esp,0x10
c001e363:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001e368:	48                   	dec    eax
c001e369:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001e36e:	75 01                	jne    c001e371 <unblockTask(ThreadControlBlock*)+0x77>
c001e370:	fb                   	sti    
c001e371:	83 c4 08             	add    esp,0x8
c001e374:	5b                   	pop    ebx
c001e375:	c3                   	ret    
c001e376:	83 ec 0c             	sub    esp,0xc
c001e379:	68 fc ca 02 c0       	push   0xc002cafc
c001e37e:	e8 2c 42 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e383:	c7 04 24 44 cb 02 c0 	mov    DWORD PTR [esp],0xc002cb44
c001e38a:	e8 20 42 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e38f:	83 c4 10             	add    esp,0x10
c001e392:	eb cf                	jmp    c001e363 <unblockTask(ThreadControlBlock*)+0x69>
c001e394:	83 ec 08             	sub    esp,0x8
c001e397:	53                   	push   ebx
c001e398:	68 84 22 03 c0       	push   0xc0032284
c001e39d:	e8 5a ad 00 00       	call   c00290fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3a2:	83 c4 10             	add    esp,0x10
c001e3a5:	eb bc                	jmp    c001e363 <unblockTask(ThreadControlBlock*)+0x69>

c001e3a7 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e3a7:	55                   	push   ebp
c001e3a8:	57                   	push   edi
c001e3a9:	56                   	push   esi
c001e3aa:	53                   	push   ebx
c001e3ab:	83 ec 1c             	sub    esp,0x1c
c001e3ae:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e3b2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3b5:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e3bb:	85 ff                	test   edi,edi
c001e3bd:	7e 20                	jle    c001e3df <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e3bf:	31 f6                	xor    esi,esi
c001e3c1:	83 ec 0c             	sub    esp,0xc
c001e3c4:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e3cb:	46                   	inc    esi
c001e3cc:	e8 f5 11 ff ff       	call   c000f5c6 <free>
c001e3d1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e3d4:	83 c4 10             	add    esp,0x10
c001e3d7:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e3dd:	7f e2                	jg     c001e3c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e3df:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e3e9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e3ee:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e3f1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e3f4:	d3 c0                	rol    eax,cl
c001e3f6:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e3fd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e400:	89 f7                	mov    edi,esi
c001e402:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e40a:	0f 85 74 01 00 00    	jne    c001e584 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e410:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e416:	85 ed                	test   ebp,ebp
c001e418:	74 1b                	je     c001e435 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e41a:	83 ec 0c             	sub    esp,0xc
c001e41d:	55                   	push   ebp
c001e41e:	e8 cf b9 ff ff       	call   c0019df2 <EnvVarContainer::~EnvVarContainer()>
c001e423:	59                   	pop    ecx
c001e424:	5e                   	pop    esi
c001e425:	6a 0c                	push   0xc
c001e427:	55                   	push   ebp
c001e428:	e8 a2 40 ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c001e42d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e430:	83 c4 10             	add    esp,0x10
c001e433:	89 f7                	mov    edi,esi
c001e435:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e43b:	85 c0                	test   eax,eax
c001e43d:	0f 84 aa 00 00 00    	je     c001e4ed <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e443:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e446:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e44a:	31 c9                	xor    ecx,ecx
c001e44c:	eb 10                	jmp    c001e45e <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e44e:	41                   	inc    ecx
c001e44f:	83 f9 10             	cmp    ecx,0x10
c001e452:	0f 84 95 00 00 00    	je     c001e4ed <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e458:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e45e:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e465:	d3 fa                	sar    edx,cl
c001e467:	83 e2 01             	and    edx,0x1
c001e46a:	74 e2                	je     c001e44e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e46c:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e46f:	01 ca                	add    edx,ecx
c001e471:	89 d5                	mov    ebp,edx
c001e473:	c1 e5 05             	shl    ebp,0x5
c001e476:	01 ea                	add    edx,ebp
c001e478:	01 d0                	add    eax,edx
c001e47a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e480:	83 fd 07             	cmp    ebp,0x7
c001e483:	75 c9                	jne    c001e44e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e485:	05 40 02 00 00       	add    eax,0x240
c001e48a:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e48d:	83 fd ff             	cmp    ebp,0xffffffff
c001e490:	0f 8c 08 01 00 00    	jl     c001e59e <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e496:	0f 84 b9 01 00 00    	je     c001e655 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e49c:	85 ed                	test   ebp,ebp
c001e49e:	0f 84 a0 01 00 00    	je     c001e644 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e4a4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e4a6:	75 a6                	jne    c001e44e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4a8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e4ae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e4b2:	01 d0                	add    eax,edx
c001e4b4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e4b8:	83 ec 0c             	sub    esp,0xc
c001e4bb:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e4c1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4c4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e4ca:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e4d1:	50                   	push   eax
c001e4d2:	e8 23 fe ff ff       	call   c001e2fa <unblockTask(ThreadControlBlock*)>
c001e4d7:	83 c4 10             	add    esp,0x10
c001e4da:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e4e1:	89 f7                	mov    edi,esi
c001e4e3:	41                   	inc    ecx
c001e4e4:	83 f9 10             	cmp    ecx,0x10
c001e4e7:	0f 85 6b ff ff ff    	jne    c001e458 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e4ed:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e4f3:	85 c0                	test   eax,eax
c001e4f5:	74 5d                	je     c001e554 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e4f7:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e4fd:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e503:	74 4f                	je     c001e554 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e505:	83 ec 0c             	sub    esp,0xc
c001e508:	68 84 22 03 c0       	push   0xc0032284
c001e50d:	e8 34 ab 00 00       	call   c0029046 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e512:	c7 04 24 84 22 03 c0 	mov    DWORD PTR [esp],0xc0032284
c001e519:	89 c7                	mov    edi,eax
c001e51b:	e8 0a ab 00 00       	call   c002902a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e520:	83 c4 10             	add    esp,0x10
c001e523:	84 c0                	test   al,al
c001e525:	0f 84 e4 00 00 00    	je     c001e60f <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e52b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e52e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e534:	85 d2                	test   edx,edx
c001e536:	74 0f                	je     c001e547 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e538:	83 ec 0c             	sub    esp,0xc
c001e53b:	8b 02                	mov    eax,DWORD PTR [edx]
c001e53d:	52                   	push   edx
c001e53e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e541:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e544:	83 c4 10             	add    esp,0x10
c001e547:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e551:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e554:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e55a:	85 db                	test   ebx,ebx
c001e55c:	74 16                	je     c001e574 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e55e:	83 ec 0c             	sub    esp,0xc
c001e561:	53                   	push   ebx
c001e562:	e8 fd 32 ff ff       	call   c0011864 <VAS::~VAS()>
c001e567:	58                   	pop    eax
c001e568:	5a                   	pop    edx
c001e569:	6a 14                	push   0x14
c001e56b:	53                   	push   ebx
c001e56c:	e8 5e 3f ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c001e571:	83 c4 10             	add    esp,0x10
c001e574:	83 ec 0c             	sub    esp,0xc
c001e577:	68 f0 c8 02 c0       	push   0xc002c8f0
c001e57c:	e8 2e 40 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e581:	83 c4 10             	add    esp,0x10
c001e584:	83 ec 08             	sub    esp,0x8
c001e587:	68 3f 07 00 00       	push   0x73f
c001e58c:	68 fe c8 02 c0       	push   0xc002c8fe
c001e591:	e8 19 40 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e596:	83 c4 2c             	add    esp,0x2c
c001e599:	5b                   	pop    ebx
c001e59a:	5e                   	pop    esi
c001e59b:	5f                   	pop    edi
c001e59c:	5d                   	pop    ebp
c001e59d:	c3                   	ret    
c001e59e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5a2:	83 ec 0c             	sub    esp,0xc
c001e5a5:	68 fc cb 02 c0       	push   0xc002cbfc
c001e5aa:	e8 ce ba ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001e5af:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5b2:	83 c4 10             	add    esp,0x10
c001e5b5:	89 f7                	mov    edi,esi
c001e5b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e5bb:	e9 8e fe ff ff       	jmp    c001e44e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5c0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e5c6:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e5cc:	75 1c                	jne    c001e5ea <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e5ce:	83 ec 0c             	sub    esp,0xc
c001e5d1:	68 64 cc 02 c0       	push   0xc002cc64
c001e5d6:	e8 d4 3f ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e5db:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e5e2:	e8 4e fa ff ff       	call   c001e035 <blockTask(TaskState)>
c001e5e7:	83 c4 10             	add    esp,0x10
c001e5ea:	83 ec 08             	sub    esp,0x8
c001e5ed:	56                   	push   esi
c001e5ee:	68 84 22 03 c0       	push   0xc0032284
c001e5f3:	e8 04 ab 00 00       	call   c00290fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e5f8:	c7 04 24 84 22 03 c0 	mov    DWORD PTR [esp],0xc0032284
c001e5ff:	e8 42 aa 00 00       	call   c0029046 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e604:	83 c4 10             	add    esp,0x10
c001e607:	39 f8                	cmp    eax,edi
c001e609:	0f 84 1c ff ff ff    	je     c001e52b <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e60f:	83 ec 0c             	sub    esp,0xc
c001e612:	68 84 22 03 c0       	push   0xc0032284
c001e617:	e8 2a aa 00 00       	call   c0029046 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e61c:	c7 04 24 84 22 03 c0 	mov    DWORD PTR [esp],0xc0032284
c001e623:	89 c6                	mov    esi,eax
c001e625:	e8 24 aa 00 00       	call   c002904e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e62a:	83 c4 10             	add    esp,0x10
c001e62d:	39 f3                	cmp    ebx,esi
c001e62f:	74 b9                	je     c001e5ea <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e631:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e634:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e637:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e63d:	75 ab                	jne    c001e5ea <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e63f:	e9 7c ff ff ff       	jmp    c001e5c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e644:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e648:	83 ec 0c             	sub    esp,0xc
c001e64b:	68 30 cc 02 c0       	push   0xc002cc30
c001e650:	e9 55 ff ff ff       	jmp    c001e5aa <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e655:	8b 36                	mov    esi,DWORD PTR [esi]
c001e657:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e65b:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e65e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e661:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e667:	01 d7                	add    edi,edx
c001e669:	89 f8                	mov    eax,edi
c001e66b:	e9 44 fe ff ff       	jmp    c001e4b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e670 <cleanerTaskFunction(void*)>:
c001e670:	53                   	push   ebx
c001e671:	83 ec 08             	sub    esp,0x8
c001e674:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001e679:	48                   	dec    eax
c001e67a:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001e67f:	75 01                	jne    c001e682 <cleanerTaskFunction(void*)+0x12>
c001e681:	fb                   	sti    
c001e682:	fa                   	cli    
c001e683:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001e688:	80 3d 4c 22 03 c0 00 	cmp    BYTE PTR ds:0xc003224c,0x0
c001e68f:	8d 50 01             	lea    edx,[eax+0x1]
c001e692:	89 15 68 22 03 c0    	mov    DWORD PTR ds:0xc0032268,edx
c001e698:	0f 84 b9 00 00 00    	je     c001e757 <cleanerTaskFunction(void*)+0xe7>
c001e69e:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001e6a3:	85 c0                	test   eax,eax
c001e6a5:	75 01                	jne    c001e6a8 <cleanerTaskFunction(void*)+0x38>
c001e6a7:	fb                   	sti    
c001e6a8:	c6 05 4c 22 03 c0 00 	mov    BYTE PTR ds:0xc003224c,0x0
c001e6af:	fa                   	cli    
c001e6b0:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001e6b6:	ff 05 64 22 03 c0    	inc    DWORD PTR ds:0xc0032264
c001e6bc:	fa                   	cli    
c001e6bd:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001e6c3:	eb 3e                	jmp    c001e703 <cleanerTaskFunction(void*)+0x93>
c001e6c5:	83 ec 0c             	sub    esp,0xc
c001e6c8:	68 6c 22 03 c0       	push   0xc003226c
c001e6cd:	e8 74 a9 00 00       	call   c0029046 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6d2:	c7 04 24 6c 22 03 c0 	mov    DWORD PTR [esp],0xc003226c
c001e6d9:	89 c3                	mov    ebx,eax
c001e6db:	e8 6e a9 00 00       	call   c002904e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6e0:	c7 04 24 14 c9 02 c0 	mov    DWORD PTR [esp],0xc002c914
c001e6e7:	e8 c3 3e ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e6ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e6ef:	e8 b3 fc ff ff       	call   c001e3a7 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e6f4:	c7 04 24 2d c9 02 c0 	mov    DWORD PTR [esp],0xc002c92d
c001e6fb:	e8 af 3e ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e700:	83 c4 10             	add    esp,0x10
c001e703:	83 ec 0c             	sub    esp,0xc
c001e706:	68 6c 22 03 c0       	push   0xc003226c
c001e70b:	e8 1a a9 00 00       	call   c002902a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e710:	83 c4 10             	add    esp,0x10
c001e713:	84 c0                	test   al,al
c001e715:	74 ae                	je     c001e6c5 <cleanerTaskFunction(void*)+0x55>
c001e717:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001e71c:	48                   	dec    eax
c001e71d:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001e722:	75 01                	jne    c001e725 <cleanerTaskFunction(void*)+0xb5>
c001e724:	fb                   	sti    
c001e725:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c001e72a:	48                   	dec    eax
c001e72b:	a3 64 22 03 c0       	mov    ds:0xc0032264,eax
c001e730:	0f 85 3e ff ff ff    	jne    c001e674 <cleanerTaskFunction(void*)+0x4>
c001e736:	a1 60 22 03 c0       	mov    eax,ds:0xc0032260
c001e73b:	85 c0                	test   eax,eax
c001e73d:	0f 84 31 ff ff ff    	je     c001e674 <cleanerTaskFunction(void*)+0x4>
c001e743:	c7 05 60 22 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032260,0x0
c001e74d:	e8 e4 f6 ff ff       	call   c001de36 <schedule()>
c001e752:	e9 1d ff ff ff       	jmp    c001e674 <cleanerTaskFunction(void*)+0x4>
c001e757:	83 ec 0c             	sub    esp,0xc
c001e75a:	6a 02                	push   0x2
c001e75c:	e8 86 f8 ff ff       	call   c001dfe7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e761:	83 c4 10             	add    esp,0x10
c001e764:	e9 3f ff ff ff       	jmp    c001e6a8 <cleanerTaskFunction(void*)+0x38>

c001e769 <terminateTask(int)>:
c001e769:	83 ec 14             	sub    esp,0x14
c001e76c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e771:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e774:	83 c0 0c             	add    eax,0xc
c001e777:	50                   	push   eax
c001e778:	68 8c cc 02 c0       	push   0xc002cc8c
c001e77d:	e8 2d 3e ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e782:	fa                   	cli    
c001e783:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001e789:	ff 05 64 22 03 c0    	inc    DWORD PTR ds:0xc0032264
c001e78f:	fa                   	cli    
c001e790:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001e796:	c7 04 24 40 c9 02 c0 	mov    DWORD PTR [esp],0xc002c940
c001e79d:	e8 0d 3e ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e7a2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e7a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7ab:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e7ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7b3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e7b6:	5a                   	pop    edx
c001e7b7:	59                   	pop    ecx
c001e7b8:	50                   	push   eax
c001e7b9:	68 6c 22 03 c0       	push   0xc003226c
c001e7be:	e8 39 a9 00 00       	call   c00290fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7c8:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e7cf:	c7 04 24 5a c9 02 c0 	mov    DWORD PTR [esp],0xc002c95a
c001e7d6:	e8 d4 3d ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e7db:	83 c4 10             	add    esp,0x10
c001e7de:	a1 48 22 03 c0       	mov    eax,ds:0xc0032248
c001e7e3:	85 c0                	test   eax,eax
c001e7e5:	0f 84 8d 00 00 00    	je     c001e878 <terminateTask(int)+0x10f>
c001e7eb:	83 ec 0c             	sub    esp,0xc
c001e7ee:	68 74 c9 02 c0       	push   0xc002c974
c001e7f3:	e8 b7 3d ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e7f8:	58                   	pop    eax
c001e7f9:	c6 05 4c 22 03 c0 01 	mov    BYTE PTR ds:0xc003224c,0x1
c001e800:	ff 35 48 22 03 c0    	push   DWORD PTR ds:0xc0032248
c001e806:	e8 ef fa ff ff       	call   c001e2fa <unblockTask(ThreadControlBlock*)>
c001e80b:	c7 04 24 8e c9 02 c0 	mov    DWORD PTR [esp],0xc002c98e
c001e812:	e8 98 3d ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e817:	83 c4 10             	add    esp,0x10
c001e81a:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001e81f:	48                   	dec    eax
c001e820:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001e825:	75 01                	jne    c001e828 <terminateTask(int)+0xbf>
c001e827:	fb                   	sti    
c001e828:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c001e82d:	48                   	dec    eax
c001e82e:	a3 64 22 03 c0       	mov    ds:0xc0032264,eax
c001e833:	75 09                	jne    c001e83e <terminateTask(int)+0xd5>
c001e835:	83 3d 60 22 03 c0 00 	cmp    DWORD PTR ds:0xc0032260,0x0
c001e83c:	75 4c                	jne    c001e88a <terminateTask(int)+0x121>
c001e83e:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001e843:	48                   	dec    eax
c001e844:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001e849:	75 01                	jne    c001e84c <terminateTask(int)+0xe3>
c001e84b:	fb                   	sti    
c001e84c:	83 ec 0c             	sub    esp,0xc
c001e84f:	68 c6 c9 02 c0       	push   0xc002c9c6
c001e854:	e8 56 3d ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e859:	83 c4 10             	add    esp,0x10
c001e85c:	fa                   	cli    
c001e85d:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001e863:	e8 ce f5 ff ff       	call   c001de36 <schedule()>
c001e868:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001e86d:	48                   	dec    eax
c001e86e:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001e873:	75 e7                	jne    c001e85c <terminateTask(int)+0xf3>
c001e875:	fb                   	sti    
c001e876:	eb e4                	jmp    c001e85c <terminateTask(int)+0xf3>
c001e878:	83 ec 0c             	sub    esp,0xc
c001e87b:	68 a8 c9 02 c0       	push   0xc002c9a8
c001e880:	e8 2a 3d ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001e885:	83 c4 10             	add    esp,0x10
c001e888:	eb 90                	jmp    c001e81a <terminateTask(int)+0xb1>
c001e88a:	c7 05 60 22 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032260,0x0
c001e894:	e8 9d f5 ff ff       	call   c001de36 <schedule()>
c001e899:	eb a3                	jmp    c001e83e <terminateTask(int)+0xd5>

c001e89b <Thr::terminateFromIRQ(int)>:
c001e89b:	83 ec 18             	sub    esp,0x18
c001e89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8a2:	e8 c2 fe ff ff       	call   c001e769 <terminateTask(int)>
c001e8a7:	90                   	nop

c001e8a8 <Semaphore::release()>:
c001e8a8:	83 ec 0c             	sub    esp,0xc
c001e8ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8af:	fa                   	cli    
c001e8b0:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c001e8b5:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001e8bb:	8d 48 01             	lea    ecx,[eax+0x1]
c001e8be:	89 0d 64 22 03 c0    	mov    DWORD PTR ds:0xc0032264,ecx
c001e8c4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e8c7:	85 c9                	test   ecx,ecx
c001e8c9:	74 3c                	je     c001e907 <Semaphore::release()+0x5f>
c001e8cb:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e8ce:	83 ec 0c             	sub    esp,0xc
c001e8d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e8d4:	51                   	push   ecx
c001e8d5:	e8 20 fa ff ff       	call   c001e2fa <unblockTask(ThreadControlBlock*)>
c001e8da:	a1 64 22 03 c0       	mov    eax,ds:0xc0032264
c001e8df:	83 c4 10             	add    esp,0x10
c001e8e2:	48                   	dec    eax
c001e8e3:	a3 64 22 03 c0       	mov    ds:0xc0032264,eax
c001e8e8:	85 c0                	test   eax,eax
c001e8ea:	75 09                	jne    c001e8f5 <Semaphore::release()+0x4d>
c001e8ec:	a1 60 22 03 c0       	mov    eax,ds:0xc0032260
c001e8f1:	85 c0                	test   eax,eax
c001e8f3:	75 17                	jne    c001e90c <Semaphore::release()+0x64>
c001e8f5:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001e8fa:	48                   	dec    eax
c001e8fb:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001e900:	75 01                	jne    c001e903 <Semaphore::release()+0x5b>
c001e902:	fb                   	sti    
c001e903:	83 c4 0c             	add    esp,0xc
c001e906:	c3                   	ret    
c001e907:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e90a:	eb d7                	jmp    c001e8e3 <Semaphore::release()+0x3b>
c001e90c:	c7 05 60 22 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032260,0x0
c001e916:	e8 1b f5 ff ff       	call   c001de36 <schedule()>
c001e91b:	eb d8                	jmp    c001e8f5 <Semaphore::release()+0x4d>

c001e91d <__static_initialization_and_destruction_0(int, int)>:
c001e91d:	83 ec 0c             	sub    esp,0xc
c001e920:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e925:	0f 85 88 00 00 00    	jne    c001e9b3 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e92b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e933:	75 7e                	jne    c001e9b3 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e935:	83 ec 0c             	sub    esp,0xc
c001e938:	68 84 22 03 c0       	push   0xc0032284
c001e93d:	e8 4a aa 00 00       	call   c002938c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e942:	83 c4 10             	add    esp,0x10
c001e945:	83 ec 04             	sub    esp,0x4
c001e948:	68 14 db 02 c0       	push   0xc002db14
c001e94d:	68 84 22 03 c0       	push   0xc0032284
c001e952:	68 40 93 02 c0       	push   0xc0029340
c001e957:	e8 ed 3a ff ff       	call   c0012449 <__cxa_atexit>
c001e95c:	83 c4 10             	add    esp,0x10
c001e95f:	83 ec 0c             	sub    esp,0xc
c001e962:	68 78 22 03 c0       	push   0xc0032278
c001e967:	e8 20 aa 00 00       	call   c002938c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e96c:	83 c4 10             	add    esp,0x10
c001e96f:	83 ec 04             	sub    esp,0x4
c001e972:	68 14 db 02 c0       	push   0xc002db14
c001e977:	68 78 22 03 c0       	push   0xc0032278
c001e97c:	68 40 93 02 c0       	push   0xc0029340
c001e981:	e8 c3 3a ff ff       	call   c0012449 <__cxa_atexit>
c001e986:	83 c4 10             	add    esp,0x10
c001e989:	83 ec 0c             	sub    esp,0xc
c001e98c:	68 6c 22 03 c0       	push   0xc003226c
c001e991:	e8 f6 a9 00 00       	call   c002938c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e996:	83 c4 10             	add    esp,0x10
c001e999:	83 ec 04             	sub    esp,0x4
c001e99c:	68 14 db 02 c0       	push   0xc002db14
c001e9a1:	68 6c 22 03 c0       	push   0xc003226c
c001e9a6:	68 40 93 02 c0       	push   0xc0029340
c001e9ab:	e8 99 3a ff ff       	call   c0012449 <__cxa_atexit>
c001e9b0:	83 c4 10             	add    esp,0x10
c001e9b3:	90                   	nop
c001e9b4:	83 c4 0c             	add    esp,0xc
c001e9b7:	c3                   	ret    

c001e9b8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e9b8:	83 ec 0c             	sub    esp,0xc
c001e9bb:	83 ec 08             	sub    esp,0x8
c001e9be:	68 ff ff 00 00       	push   0xffff
c001e9c3:	6a 01                	push   0x1
c001e9c5:	e8 53 ff ff ff       	call   c001e91d <__static_initialization_and_destruction_0(int, int)>
c001e9ca:	83 c4 10             	add    esp,0x10
c001e9cd:	83 c4 0c             	add    esp,0xc
c001e9d0:	c3                   	ret    

c001e9d1 <Vm::inbv(unsigned short)>:
c001e9d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9d5:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9da:	75 06                	jne    c001e9e2 <Vm::inbv(unsigned short)+0x11>
c001e9dc:	a0 cc 22 03 c0       	mov    al,ds:0xc00322cc
c001e9e1:	c3                   	ret    
c001e9e2:	ec                   	in     al,dx
c001e9e3:	c3                   	ret    

c001e9e4 <Vm::outbv(unsigned short, unsigned char)>:
c001e9e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9ec:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9f1:	75 25                	jne    c001ea18 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e9f3:	8b 0d cc 22 03 c0    	mov    ecx,DWORD PTR ds:0xc00322cc
c001e9f9:	8d 51 01             	lea    edx,[ecx+0x1]
c001e9fc:	88 81 e0 22 03 c0    	mov    BYTE PTR [ecx-0x3ffcdd20],al
c001ea02:	89 15 cc 22 03 c0    	mov    DWORD PTR ds:0xc00322cc,edx
c001ea08:	83 fa 20             	cmp    edx,0x20
c001ea0b:	75 0c                	jne    c001ea19 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001ea0d:	c7 05 cc 22 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00322cc,0x1f
c001ea17:	c3                   	ret    
c001ea18:	ee                   	out    dx,al
c001ea19:	c3                   	ret    

c001ea1a <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea1a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea1f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea24:	c1 e0 04             	shl    eax,0x4
c001ea27:	01 d0                	add    eax,edx
c001ea29:	c3                   	ret    

c001ea2a <Vm::getSegment(unsigned int)>:
c001ea2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea2e:	c1 e8 10             	shr    eax,0x10
c001ea31:	c3                   	ret    

c001ea32 <Vm::getOffset(unsigned int)>:
c001ea32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea36:	c3                   	ret    

c001ea37 <Vm::mainloop2()>:
c001ea37:	83 ec 18             	sub    esp,0x18
c001ea3a:	fa                   	cli    
c001ea3b:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001ea41:	6a 02                	push   0x2
c001ea43:	c6 05 c5 22 03 c0 01 	mov    BYTE PTR ds:0xc00322c5,0x1
c001ea4a:	e8 98 f5 ff ff       	call   c001dfe7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea54:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea58:	52                   	push   edx
c001ea59:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ea5d:	52                   	push   edx
c001ea5e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ea62:	52                   	push   edx
c001ea63:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ea67:	50                   	push   eax
c001ea68:	e8 8d 18 fe ff       	call   c00002fa <goToVM86>
c001ea6d:	83 c4 2c             	add    esp,0x2c
c001ea70:	c3                   	ret    

c001ea71 <Vm::mainVm8086Loop(void*)>:
c001ea71:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001ea76:	48                   	dec    eax
c001ea77:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001ea7c:	75 01                	jne    c001ea7f <Vm::mainVm8086Loop(void*)+0xe>
c001ea7e:	fb                   	sti    
c001ea7f:	eb b6                	jmp    c001ea37 <Vm::mainloop2()>

c001ea81 <Vm::mainloop3(unsigned long)>:
c001ea81:	83 ec 18             	sub    esp,0x18
c001ea84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ea88:	fa                   	cli    
c001ea89:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001ea8f:	6a 02                	push   0x2
c001ea91:	c6 05 c4 22 03 c0 01 	mov    BYTE PTR ds:0xc00322c4,0x1
c001ea98:	a3 c0 22 03 c0       	mov    ds:0xc00322c0,eax
c001ea9d:	e8 45 f5 ff ff       	call   c001dfe7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eaa2:	83 c4 1c             	add    esp,0x1c
c001eaa5:	eb 90                	jmp    c001ea37 <Vm::mainloop2()>

c001eaa7 <Vm::initialise8086()>:
c001eaa7:	83 ec 0c             	sub    esp,0xc
c001eaaa:	68 80 00 00 00       	push   0x80
c001eaaf:	6a 00                	push   0x0
c001eab1:	68 71 ea 01 c0       	push   0xc001ea71
c001eab6:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c001eabc:	e8 31 f1 ff ff       	call   c001dbf2 <Process::createThread(void (*)(void*), void*, int)>
c001eac1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eac8:	a3 c8 22 03 c0       	mov    ds:0xc00322c8,eax
c001eacd:	68 00 01 00 00       	push   0x100
c001ead2:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c001ead7:	6a 00                	push   0x0
c001ead9:	6a 00                	push   0x0
c001eadb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eae1:	e8 f0 31 ff ff       	call   c0011cd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eae6:	83 c4 2c             	add    esp,0x2c
c001eae9:	c3                   	ret    

c001eaea <Vm::finish8086()>:
c001eaea:	53                   	push   ebx
c001eaeb:	83 ec 08             	sub    esp,0x8
c001eaee:	fa                   	cli    
c001eaef:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001eaf5:	80 3d c4 22 03 c0 00 	cmp    BYTE PTR ds:0xc00322c4,0x0
c001eafc:	75 15                	jne    c001eb13 <Vm::finish8086()+0x29>
c001eafe:	e8 33 f3 ff ff       	call   c001de36 <schedule()>
c001eb03:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001eb08:	48                   	dec    eax
c001eb09:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001eb0e:	75 de                	jne    c001eaee <Vm::finish8086()+0x4>
c001eb10:	fb                   	sti    
c001eb11:	eb db                	jmp    c001eaee <Vm::finish8086()+0x4>
c001eb13:	83 ec 0c             	sub    esp,0xc
c001eb16:	8b 1d c0 22 03 c0    	mov    ebx,DWORD PTR ds:0xc00322c0
c001eb1c:	ff 35 c8 22 03 c0    	push   DWORD PTR ds:0xc00322c8
c001eb22:	c6 05 c4 22 03 c0 00 	mov    BYTE PTR ds:0xc00322c4,0x0
c001eb29:	e8 cc f7 ff ff       	call   c001e2fa <unblockTask(ThreadControlBlock*)>
c001eb2e:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001eb33:	83 c4 10             	add    esp,0x10
c001eb36:	8d 50 ff             	lea    edx,[eax-0x1]
c001eb39:	89 15 68 22 03 c0    	mov    DWORD PTR ds:0xc0032268,edx
c001eb3f:	85 d2                	test   edx,edx
c001eb41:	75 01                	jne    c001eb44 <Vm::finish8086()+0x5a>
c001eb43:	fb                   	sti    
c001eb44:	89 d8                	mov    eax,ebx
c001eb46:	83 c4 08             	add    esp,0x8
c001eb49:	5b                   	pop    ebx
c001eb4a:	c3                   	ret    

c001eb4b <Vm::getOutput8086(unsigned char*)>:
c001eb4b:	57                   	push   edi
c001eb4c:	8b 0d cc 22 03 c0    	mov    ecx,DWORD PTR ds:0xc00322cc
c001eb52:	56                   	push   esi
c001eb53:	be e0 22 03 c0       	mov    esi,0xc00322e0
c001eb58:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001eb5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001eb5e:	a1 cc 22 03 c0       	mov    eax,ds:0xc00322cc
c001eb63:	5e                   	pop    esi
c001eb64:	c7 05 cc 22 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00322cc,0x0
c001eb6e:	5f                   	pop    edi
c001eb6f:	c3                   	ret    

c001eb70 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eb70:	55                   	push   ebp
c001eb71:	57                   	push   edi
c001eb72:	56                   	push   esi
c001eb73:	53                   	push   ebx
c001eb74:	83 ec 2c             	sub    esp,0x2c
c001eb77:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001eb7b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001eb7f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001eb83:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001eb87:	fa                   	cli    
c001eb88:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c001eb8e:	0f b6 35 c5 22 03 c0 	movzx  esi,BYTE PTR ds:0xc00322c5
c001eb95:	89 f0                	mov    eax,esi
c001eb97:	84 c0                	test   al,al
c001eb99:	75 1d                	jne    c001ebb8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001eb9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001eb9f:	e8 92 f2 ff ff       	call   c001de36 <schedule()>
c001eba4:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001eba9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ebad:	48                   	dec    eax
c001ebae:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001ebb3:	75 d2                	jne    c001eb87 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebb5:	fb                   	sti    
c001ebb6:	eb cf                	jmp    c001eb87 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ebb8:	a1 c8 22 03 c0       	mov    eax,ds:0xc00322c8
c001ebbd:	c7 05 cc 22 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00322cc,0x0
c001ebc7:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001ebcb:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001ebcf:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001ebd3:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001ebd7:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ebdb:	50                   	push   eax
c001ebdc:	6a 20                	push   0x20
c001ebde:	6a 00                	push   0x0
c001ebe0:	68 e0 22 03 c0       	push   0xc00322e0
c001ebe5:	e8 66 1b fe ff       	call   c0000750 <memset>
c001ebea:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ebf1:	e8 c0 09 ff ff       	call   c000f5b6 <malloc>
c001ebf6:	83 c4 0c             	add    esp,0xc
c001ebf9:	89 c3                	mov    ebx,eax
c001ebfb:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c001ec01:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec05:	50                   	push   eax
c001ec06:	e8 03 3f ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c001ec0b:	83 c4 10             	add    esp,0x10
c001ec0e:	85 db                	test   ebx,ebx
c001ec10:	75 0a                	jne    c001ec1c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001ec12:	83 ec 0c             	sub    esp,0xc
c001ec15:	68 ab cc 02 c0       	push   0xc002ccab
c001ec1a:	eb 3e                	jmp    c001ec5a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ec1c:	50                   	push   eax
c001ec1d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec21:	50                   	push   eax
c001ec22:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec26:	50                   	push   eax
c001ec27:	53                   	push   ebx
c001ec28:	e8 f1 41 ff ff       	call   c0012e1e <File::stat(unsigned long long*, bool*)>
c001ec2d:	83 c4 10             	add    esp,0x10
c001ec30:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001ec35:	74 0a                	je     c001ec41 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec37:	83 ec 0c             	sub    esp,0xc
c001ec3a:	68 bf cc 02 c0       	push   0xc002ccbf
c001ec3f:	eb 19                	jmp    c001ec5a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ec41:	51                   	push   ecx
c001ec42:	51                   	push   ecx
c001ec43:	6a 01                	push   0x1
c001ec45:	53                   	push   ebx
c001ec46:	e8 27 3f ff ff       	call   c0012b72 <File::open(FileOpenMode)>
c001ec4b:	83 c4 10             	add    esp,0x10
c001ec4e:	85 c0                	test   eax,eax
c001ec50:	74 24                	je     c001ec76 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001ec52:	83 ec 0c             	sub    esp,0xc
c001ec55:	68 d8 cc 02 c0       	push   0xc002ccd8
c001ec5a:	e8 1e b4 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001ec5f:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001ec64:	83 c4 10             	add    esp,0x10
c001ec67:	48                   	dec    eax
c001ec68:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001ec6d:	85 c0                	test   eax,eax
c001ec6f:	75 01                	jne    c001ec72 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001ec71:	fb                   	sti    
c001ec72:	31 f6                	xor    esi,esi
c001ec74:	eb 58                	jmp    c001ecce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001ec76:	0f b7 ed             	movzx  ebp,bp
c001ec79:	50                   	push   eax
c001ec7a:	0f b7 ff             	movzx  edi,di
c001ec7d:	50                   	push   eax
c001ec7e:	55                   	push   ebp
c001ec7f:	57                   	push   edi
c001ec80:	e8 95 fd ff ff       	call   c001ea1a <Vm::realToLinear(unsigned short, unsigned short)>
c001ec85:	5a                   	pop    edx
c001ec86:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ec88:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ec8c:	51                   	push   ecx
c001ec8d:	50                   	push   eax
c001ec8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec96:	53                   	push   ebx
c001ec97:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ec9a:	83 c4 14             	add    esp,0x14
c001ec9d:	53                   	push   ebx
c001ec9e:	e8 2d 3f ff ff       	call   c0012bd0 <File::close()>
c001eca3:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c001eca8:	83 c4 10             	add    esp,0x10
c001ecab:	48                   	dec    eax
c001ecac:	c6 05 c5 22 03 c0 00 	mov    BYTE PTR ds:0xc00322c5,0x0
c001ecb3:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c001ecb8:	85 c0                	test   eax,eax
c001ecba:	75 01                	jne    c001ecbd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001ecbc:	fb                   	sti    
c001ecbd:	83 ec 0c             	sub    esp,0xc
c001ecc0:	ff 35 c8 22 03 c0    	push   DWORD PTR ds:0xc00322c8
c001ecc6:	e8 2f f6 ff ff       	call   c001e2fa <unblockTask(ThreadControlBlock*)>
c001eccb:	83 c4 10             	add    esp,0x10
c001ecce:	83 c4 2c             	add    esp,0x2c
c001ecd1:	89 f0                	mov    eax,esi
c001ecd3:	5b                   	pop    ebx
c001ecd4:	5e                   	pop    esi
c001ecd5:	5f                   	pop    edi
c001ecd6:	5d                   	pop    ebp
c001ecd7:	c3                   	ret    

c001ecd8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ecd8:	57                   	push   edi
c001ecd9:	56                   	push   esi
c001ecda:	53                   	push   ebx
c001ecdb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ecdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ece3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ece7:	83 e8 06             	sub    eax,0x6
c001ecea:	0f b7 c0             	movzx  eax,ax
c001eced:	50                   	push   eax
c001ecee:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ecf3:	50                   	push   eax
c001ecf4:	e8 21 fd ff ff       	call   c001ea1a <Vm::realToLinear(unsigned short, unsigned short)>
c001ecf9:	5a                   	pop    edx
c001ecfa:	5e                   	pop    esi
c001ecfb:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ecfe:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed01:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed07:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed0a:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed0d:	83 c2 02             	add    edx,0x2
c001ed10:	66 89 10             	mov    WORD PTR [eax],dx
c001ed13:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed16:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed1a:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed1d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed21:	89 d6                	mov    esi,edx
c001ed23:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed29:	66 81 e6 ff fd       	and    si,0xfdff
c001ed2e:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed32:	74 07                	je     c001ed3b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed34:	89 d6                	mov    esi,edx
c001ed36:	66 81 ce 00 02       	or     si,0x200
c001ed3b:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed44:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed48:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ed50:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ed53:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ed5b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ed5e:	5b                   	pop    ebx
c001ed5f:	5e                   	pop    esi
c001ed60:	5f                   	pop    edi
c001ed61:	c3                   	ret    

c001ed62 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed62:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed67:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed6c:	c1 e0 04             	shl    eax,0x4
c001ed6f:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed72:	c3                   	ret    

c001ed73 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed73:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed78:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed7d:	c1 e0 04             	shl    eax,0x4
c001ed80:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ed84:	c3                   	ret    

c001ed85 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ed85:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed8a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed8f:	c1 e0 04             	shl    eax,0x4
c001ed92:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ed95:	c3                   	ret    

c001ed96 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ed96:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed9b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eda0:	c1 e0 04             	shl    eax,0x4
c001eda3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eda7:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001edaa:	c3                   	ret    

c001edab <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001edab:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edb0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edb5:	c1 e0 04             	shl    eax,0x4
c001edb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edbc:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001edc0:	c3                   	ret    

c001edc1 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001edc1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edc6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edcb:	c1 e0 04             	shl    eax,0x4
c001edce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edd2:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001edd5:	c3                   	ret    

c001edd6 <Vm::faultHandler(regs*)>:
c001edd6:	55                   	push   ebp
c001edd7:	57                   	push   edi
c001edd8:	56                   	push   esi
c001edd9:	53                   	push   ebx
c001edda:	83 ec 1c             	sub    esp,0x1c
c001eddd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ede1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001ede4:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001ede8:	0f b7 f8             	movzx  edi,ax
c001edeb:	52                   	push   edx
c001edec:	0f b7 c0             	movzx  eax,ax
c001edef:	50                   	push   eax
c001edf0:	e8 25 fc ff ff       	call   c001ea1a <Vm::realToLinear(unsigned short, unsigned short)>
c001edf5:	5a                   	pop    edx
c001edf6:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001edf9:	59                   	pop    ecx
c001edfa:	89 c1                	mov    ecx,eax
c001edfc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001edff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ee03:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee0c:	0f b7 c5             	movzx  eax,bp
c001ee0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee13:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ee17:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ee1b:	e8 fa fb ff ff       	call   c001ea1a <Vm::realToLinear(unsigned short, unsigned short)>
c001ee20:	5e                   	pop    esi
c001ee21:	be 06 00 00 00       	mov    esi,0x6
c001ee26:	5a                   	pop    edx
c001ee27:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001ee2c:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001ee31:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001ee34:	80 fa 9d             	cmp    dl,0x9d
c001ee37:	0f 84 2c 02 00 00    	je     c001f069 <Vm::faultHandler(regs*)+0x293>
c001ee3d:	0f 87 91 00 00 00    	ja     c001eed4 <Vm::faultHandler(regs*)+0xfe>
c001ee43:	80 fa 66             	cmp    dl,0x66
c001ee46:	0f 84 98 01 00 00    	je     c001efe4 <Vm::faultHandler(regs*)+0x20e>
c001ee4c:	77 47                	ja     c001ee95 <Vm::faultHandler(regs*)+0xbf>
c001ee4e:	80 fa 36             	cmp    dl,0x36
c001ee51:	0f 84 80 01 00 00    	je     c001efd7 <Vm::faultHandler(regs*)+0x201>
c001ee57:	77 1a                	ja     c001ee73 <Vm::faultHandler(regs*)+0x9d>
c001ee59:	80 fa 26             	cmp    dl,0x26
c001ee5c:	0f 84 4e 01 00 00    	je     c001efb0 <Vm::faultHandler(regs*)+0x1da>
c001ee62:	80 fa 2e             	cmp    dl,0x2e
c001ee65:	0f 85 e2 05 00 00    	jne    c001f44d <Vm::faultHandler(regs*)+0x677>
c001ee6b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee6e:	31 f6                	xor    esi,esi
c001ee70:	41                   	inc    ecx
c001ee71:	eb be                	jmp    c001ee31 <Vm::faultHandler(regs*)+0x5b>
c001ee73:	80 fa 64             	cmp    dl,0x64
c001ee76:	0f 84 41 01 00 00    	je     c001efbd <Vm::faultHandler(regs*)+0x1e7>
c001ee7c:	0f 87 48 01 00 00    	ja     c001efca <Vm::faultHandler(regs*)+0x1f4>
c001ee82:	80 fa 3e             	cmp    dl,0x3e
c001ee85:	0f 85 c2 05 00 00    	jne    c001f44d <Vm::faultHandler(regs*)+0x677>
c001ee8b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee8e:	be 01 00 00 00       	mov    esi,0x1
c001ee93:	eb db                	jmp    c001ee70 <Vm::faultHandler(regs*)+0x9a>
c001ee95:	80 fa 6d             	cmp    dl,0x6d
c001ee98:	0f 84 ec 02 00 00    	je     c001f18a <Vm::faultHandler(regs*)+0x3b4>
c001ee9e:	77 17                	ja     c001eeb7 <Vm::faultHandler(regs*)+0xe1>
c001eea0:	80 fa 67             	cmp    dl,0x67
c001eea3:	0f 84 48 01 00 00    	je     c001eff1 <Vm::faultHandler(regs*)+0x21b>
c001eea9:	80 fa 6c             	cmp    dl,0x6c
c001eeac:	0f 84 69 02 00 00    	je     c001f11b <Vm::faultHandler(regs*)+0x345>
c001eeb2:	e9 96 05 00 00       	jmp    c001f44d <Vm::faultHandler(regs*)+0x677>
c001eeb7:	80 fa 6f             	cmp    dl,0x6f
c001eeba:	0f 84 f4 03 00 00    	je     c001f2b4 <Vm::faultHandler(regs*)+0x4de>
c001eec0:	0f 82 59 03 00 00    	jb     c001f21f <Vm::faultHandler(regs*)+0x449>
c001eec6:	80 fa 9c             	cmp    dl,0x9c
c001eec9:	0f 84 2f 01 00 00    	je     c001effe <Vm::faultHandler(regs*)+0x228>
c001eecf:	e9 79 05 00 00       	jmp    c001f44d <Vm::faultHandler(regs*)+0x677>
c001eed4:	80 fa ec             	cmp    dl,0xec
c001eed7:	0f 84 14 05 00 00    	je     c001f3f1 <Vm::faultHandler(regs*)+0x61b>
c001eedd:	77 7b                	ja     c001ef5a <Vm::faultHandler(regs*)+0x184>
c001eedf:	80 fa e4             	cmp    dl,0xe4
c001eee2:	0f 84 93 04 00 00    	je     c001f37b <Vm::faultHandler(regs*)+0x5a5>
c001eee8:	77 53                	ja     c001ef3d <Vm::faultHandler(regs*)+0x167>
c001eeea:	80 fa cd             	cmp    dl,0xcd
c001eeed:	0f 84 d9 01 00 00    	je     c001f0cc <Vm::faultHandler(regs*)+0x2f6>
c001eef3:	80 fa cf             	cmp    dl,0xcf
c001eef6:	0f 85 51 05 00 00    	jne    c001f44d <Vm::faultHandler(regs*)+0x677>
c001eefc:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eeff:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001ef02:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001ef06:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001ef09:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001ef0d:	81 ca 00 02 02 00    	or     edx,0x20200
c001ef13:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ef16:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001ef1a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef20:	66 c1 e8 09          	shr    ax,0x9
c001ef24:	83 e0 01             	and    eax,0x1
c001ef27:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ef2a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ef2d:	83 c0 06             	add    eax,0x6
c001ef30:	25 ff ff 00 00       	and    eax,0xffff
c001ef35:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ef38:	e9 0c 05 00 00       	jmp    c001f449 <Vm::faultHandler(regs*)+0x673>
c001ef3d:	80 fa e6             	cmp    dl,0xe6
c001ef40:	0f 84 7f 04 00 00    	je     c001f3c5 <Vm::faultHandler(regs*)+0x5ef>
c001ef46:	0f 82 4b 04 00 00    	jb     c001f397 <Vm::faultHandler(regs*)+0x5c1>
c001ef4c:	80 fa e7             	cmp    dl,0xe7
c001ef4f:	0f 84 87 04 00 00    	je     c001f3dc <Vm::faultHandler(regs*)+0x606>
c001ef55:	e9 f3 04 00 00       	jmp    c001f44d <Vm::faultHandler(regs*)+0x677>
c001ef5a:	80 fa ef             	cmp    dl,0xef
c001ef5d:	0f 84 d1 04 00 00    	je     c001f434 <Vm::faultHandler(regs*)+0x65e>
c001ef63:	77 28                	ja     c001ef8d <Vm::faultHandler(regs*)+0x1b7>
c001ef65:	80 fa ed             	cmp    dl,0xed
c001ef68:	0f 84 9f 04 00 00    	je     c001f40d <Vm::faultHandler(regs*)+0x637>
c001ef6e:	80 fa ee             	cmp    dl,0xee
c001ef71:	0f 85 d6 04 00 00    	jne    c001f44d <Vm::faultHandler(regs*)+0x677>
c001ef77:	50                   	push   eax
c001ef78:	50                   	push   eax
c001ef79:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ef7d:	50                   	push   eax
c001ef7e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ef82:	50                   	push   eax
c001ef83:	e8 5c fa ff ff       	call   c001e9e4 <Vm::outbv(unsigned short, unsigned char)>
c001ef88:	e9 9f 04 00 00       	jmp    c001f42c <Vm::faultHandler(regs*)+0x656>
c001ef8d:	80 fa fa             	cmp    dl,0xfa
c001ef90:	0f 84 69 01 00 00    	je     c001f0ff <Vm::faultHandler(regs*)+0x329>
c001ef96:	80 fa fb             	cmp    dl,0xfb
c001ef99:	0f 84 6e 01 00 00    	je     c001f10d <Vm::faultHandler(regs*)+0x337>
c001ef9f:	80 fa f3             	cmp    dl,0xf3
c001efa2:	0f 85 a5 04 00 00    	jne    c001f44d <Vm::faultHandler(regs*)+0x677>
c001efa8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efab:	e9 c0 fe ff ff       	jmp    c001ee70 <Vm::faultHandler(regs*)+0x9a>
c001efb0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efb3:	be 02 00 00 00       	mov    esi,0x2
c001efb8:	e9 b3 fe ff ff       	jmp    c001ee70 <Vm::faultHandler(regs*)+0x9a>
c001efbd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efc0:	be 03 00 00 00       	mov    esi,0x3
c001efc5:	e9 a6 fe ff ff       	jmp    c001ee70 <Vm::faultHandler(regs*)+0x9a>
c001efca:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efcd:	be 04 00 00 00       	mov    esi,0x4
c001efd2:	e9 99 fe ff ff       	jmp    c001ee70 <Vm::faultHandler(regs*)+0x9a>
c001efd7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efda:	be 05 00 00 00       	mov    esi,0x5
c001efdf:	e9 8c fe ff ff       	jmp    c001ee70 <Vm::faultHandler(regs*)+0x9a>
c001efe4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001efe7:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001efec:	e9 7f fe ff ff       	jmp    c001ee70 <Vm::faultHandler(regs*)+0x9a>
c001eff1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eff4:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001eff9:	e9 72 fe ff ff       	jmp    c001ee70 <Vm::faultHandler(regs*)+0x9a>
c001effe:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f001:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f005:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f00a:	74 30                	je     c001f03c <Vm::faultHandler(regs*)+0x266>
c001f00c:	83 e9 04             	sub    ecx,0x4
c001f00f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f015:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f01b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f01e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f021:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f027:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f02b:	0f 84 15 04 00 00    	je     c001f446 <Vm::faultHandler(regs*)+0x670>
c001f031:	80 ce 02             	or     dh,0x2
c001f034:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f037:	e9 0a 04 00 00       	jmp    c001f446 <Vm::faultHandler(regs*)+0x670>
c001f03c:	83 e9 02             	sub    ecx,0x2
c001f03f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f045:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f048:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f04c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f052:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f056:	74 05                	je     c001f05d <Vm::faultHandler(regs*)+0x287>
c001f058:	80 ce 02             	or     dh,0x2
c001f05b:	eb 03                	jmp    c001f060 <Vm::faultHandler(regs*)+0x28a>
c001f05d:	80 e6 fd             	and    dh,0xfd
c001f060:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f064:	e9 dd 03 00 00       	jmp    c001f446 <Vm::faultHandler(regs*)+0x670>
c001f069:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f06e:	74 2a                	je     c001f09a <Vm::faultHandler(regs*)+0x2c4>
c001f070:	8b 10                	mov    edx,DWORD PTR [eax]
c001f072:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f078:	81 ca 00 02 02 00    	or     edx,0x20200
c001f07e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f081:	8b 00                	mov    eax,DWORD PTR [eax]
c001f083:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f089:	c1 e8 09             	shr    eax,0x9
c001f08c:	83 e0 01             	and    eax,0x1
c001f08f:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f092:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f095:	83 c0 04             	add    eax,0x4
c001f098:	eb 25                	jmp    c001f0bf <Vm::faultHandler(regs*)+0x2e9>
c001f09a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f09d:	81 ca 00 02 02 00    	or     edx,0x20200
c001f0a3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f0a6:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f0a9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0af:	66 c1 e8 09          	shr    ax,0x9
c001f0b3:	83 e0 01             	and    eax,0x1
c001f0b6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f0b9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f0bc:	83 c0 02             	add    eax,0x2
c001f0bf:	25 ff ff 00 00       	and    eax,0xffff
c001f0c4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f0c7:	e9 7a 03 00 00       	jmp    c001f446 <Vm::faultHandler(regs*)+0x670>
c001f0cc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f0d0:	3c ee                	cmp    al,0xee
c001f0d2:	75 10                	jne    c001f0e4 <Vm::faultHandler(regs*)+0x30e>
c001f0d4:	83 ec 0c             	sub    esp,0xc
c001f0d7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f0da:	e8 a2 f9 ff ff       	call   c001ea81 <Vm::mainloop3(unsigned long)>
c001f0df:	e9 4b 03 00 00       	jmp    c001f42f <Vm::faultHandler(regs*)+0x659>
c001f0e4:	83 ec 0c             	sub    esp,0xc
c001f0e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0ef:	51                   	push   ecx
c001f0f0:	50                   	push   eax
c001f0f1:	53                   	push   ebx
c001f0f2:	e8 e1 fb ff ff       	call   c001ecd8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f0f7:	83 c4 20             	add    esp,0x20
c001f0fa:	e9 4a 03 00 00       	jmp    c001f449 <Vm::faultHandler(regs*)+0x673>
c001f0ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f104:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f108:	e9 39 03 00 00       	jmp    c001f446 <Vm::faultHandler(regs*)+0x670>
c001f10d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f112:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f116:	e9 2b 03 00 00       	jmp    c001f446 <Vm::faultHandler(regs*)+0x670>
c001f11b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f11e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f123:	74 2b                	je     c001f150 <Vm::faultHandler(regs*)+0x37a>
c001f125:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f12c:	76 22                	jbe    c001f150 <Vm::faultHandler(regs*)+0x37a>
c001f12e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f132:	50                   	push   eax
c001f133:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f137:	50                   	push   eax
c001f138:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f13c:	50                   	push   eax
c001f13d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f141:	50                   	push   eax
c001f142:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f146:	50                   	push   eax
c001f147:	6a 6c                	push   0x6c
c001f149:	6a 6c                	push   0x6c
c001f14b:	e9 b9 01 00 00       	jmp    c001f309 <Vm::faultHandler(regs*)+0x533>
c001f150:	83 ec 0c             	sub    esp,0xc
c001f153:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f157:	0f b7 f6             	movzx  esi,si
c001f15a:	50                   	push   eax
c001f15b:	e8 71 f8 ff ff       	call   c001e9d1 <Vm::inbv(unsigned short)>
c001f160:	83 c4 0c             	add    esp,0xc
c001f163:	0f b6 c0             	movzx  eax,al
c001f166:	50                   	push   eax
c001f167:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f16b:	50                   	push   eax
c001f16c:	56                   	push   esi
c001f16d:	e8 24 fc ff ff       	call   c001ed96 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f172:	83 c4 10             	add    esp,0x10
c001f175:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f178:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f17c:	74 03                	je     c001f181 <Vm::faultHandler(regs*)+0x3ab>
c001f17e:	48                   	dec    eax
c001f17f:	eb 01                	jmp    c001f182 <Vm::faultHandler(regs*)+0x3ac>
c001f181:	40                   	inc    eax
c001f182:	0f b7 c0             	movzx  eax,ax
c001f185:	e9 8d 00 00 00       	jmp    c001f217 <Vm::faultHandler(regs*)+0x441>
c001f18a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f18d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f190:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f195:	74 29                	je     c001f1c0 <Vm::faultHandler(regs*)+0x3ea>
c001f197:	3d ff ff 00 00       	cmp    eax,0xffff
c001f19c:	76 22                	jbe    c001f1c0 <Vm::faultHandler(regs*)+0x3ea>
c001f19e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f1a2:	50                   	push   eax
c001f1a3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f1a7:	50                   	push   eax
c001f1a8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f1ac:	50                   	push   eax
c001f1ad:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f1b1:	50                   	push   eax
c001f1b2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f1b6:	50                   	push   eax
c001f1b7:	6a 6d                	push   0x6d
c001f1b9:	6a 6d                	push   0x6d
c001f1bb:	e9 49 01 00 00       	jmp    c001f309 <Vm::faultHandler(regs*)+0x533>
c001f1c0:	0f b7 c8             	movzx  ecx,ax
c001f1c3:	0f b7 f6             	movzx  esi,si
c001f1c6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f1c9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f1ce:	74 20                	je     c001f1f0 <Vm::faultHandler(regs*)+0x41a>
c001f1d0:	ed                   	in     eax,dx
c001f1d1:	55                   	push   ebp
c001f1d2:	50                   	push   eax
c001f1d3:	51                   	push   ecx
c001f1d4:	56                   	push   esi
c001f1d5:	e8 e7 fb ff ff       	call   c001edc1 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f1da:	83 c4 10             	add    esp,0x10
c001f1dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f1e0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f1e4:	74 05                	je     c001f1eb <Vm::faultHandler(regs*)+0x415>
c001f1e6:	83 e8 04             	sub    eax,0x4
c001f1e9:	eb 27                	jmp    c001f212 <Vm::faultHandler(regs*)+0x43c>
c001f1eb:	83 c0 04             	add    eax,0x4
c001f1ee:	eb 22                	jmp    c001f212 <Vm::faultHandler(regs*)+0x43c>
c001f1f0:	66 ed                	in     ax,dx
c001f1f2:	0f b7 c0             	movzx  eax,ax
c001f1f5:	57                   	push   edi
c001f1f6:	50                   	push   eax
c001f1f7:	51                   	push   ecx
c001f1f8:	56                   	push   esi
c001f1f9:	e8 ad fb ff ff       	call   c001edab <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f1fe:	83 c4 10             	add    esp,0x10
c001f201:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f204:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f208:	74 05                	je     c001f20f <Vm::faultHandler(regs*)+0x439>
c001f20a:	83 e8 02             	sub    eax,0x2
c001f20d:	eb 03                	jmp    c001f212 <Vm::faultHandler(regs*)+0x43c>
c001f20f:	83 c0 02             	add    eax,0x2
c001f212:	25 ff ff 00 00       	and    eax,0xffff
c001f217:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f21a:	e9 27 02 00 00       	jmp    c001f446 <Vm::faultHandler(regs*)+0x670>
c001f21f:	8d 46 ff             	lea    eax,[esi-0x1]
c001f222:	3c 05                	cmp    al,0x5
c001f224:	77 24                	ja     c001f24a <Vm::faultHandler(regs*)+0x474>
c001f226:	0f b6 c0             	movzx  eax,al
c001f229:	ff 24 85 4c cd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd32b4]
c001f230:	0f b7 fd             	movzx  edi,bp
c001f233:	eb 15                	jmp    c001f24a <Vm::faultHandler(regs*)+0x474>
c001f235:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f239:	eb 0f                	jmp    c001f24a <Vm::faultHandler(regs*)+0x474>
c001f23b:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f23f:	eb 09                	jmp    c001f24a <Vm::faultHandler(regs*)+0x474>
c001f241:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f245:	eb 03                	jmp    c001f24a <Vm::faultHandler(regs*)+0x474>
c001f247:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f24a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f24d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f252:	74 29                	je     c001f27d <Vm::faultHandler(regs*)+0x4a7>
c001f254:	3d ff ff 00 00       	cmp    eax,0xffff
c001f259:	76 22                	jbe    c001f27d <Vm::faultHandler(regs*)+0x4a7>
c001f25b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f25f:	50                   	push   eax
c001f260:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f264:	50                   	push   eax
c001f265:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f269:	50                   	push   eax
c001f26a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f26e:	50                   	push   eax
c001f26f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f273:	50                   	push   eax
c001f274:	6a 6e                	push   0x6e
c001f276:	6a 6e                	push   0x6e
c001f278:	e9 8c 00 00 00       	jmp    c001f309 <Vm::faultHandler(regs*)+0x533>
c001f27d:	0f b7 c0             	movzx  eax,ax
c001f280:	52                   	push   edx
c001f281:	52                   	push   edx
c001f282:	50                   	push   eax
c001f283:	57                   	push   edi
c001f284:	e8 d9 fa ff ff       	call   c001ed62 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f289:	59                   	pop    ecx
c001f28a:	0f b6 c0             	movzx  eax,al
c001f28d:	5e                   	pop    esi
c001f28e:	50                   	push   eax
c001f28f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f293:	50                   	push   eax
c001f294:	e8 4b f7 ff ff       	call   c001e9e4 <Vm::outbv(unsigned short, unsigned char)>
c001f299:	83 c4 10             	add    esp,0x10
c001f29c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f29f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f2a3:	74 03                	je     c001f2a8 <Vm::faultHandler(regs*)+0x4d2>
c001f2a5:	48                   	dec    eax
c001f2a6:	eb 01                	jmp    c001f2a9 <Vm::faultHandler(regs*)+0x4d3>
c001f2a8:	40                   	inc    eax
c001f2a9:	0f b7 c0             	movzx  eax,ax
c001f2ac:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f2af:	e9 92 01 00 00       	jmp    c001f446 <Vm::faultHandler(regs*)+0x670>
c001f2b4:	8d 46 ff             	lea    eax,[esi-0x1]
c001f2b7:	3c 05                	cmp    al,0x5
c001f2b9:	77 1f                	ja     c001f2da <Vm::faultHandler(regs*)+0x504>
c001f2bb:	0f b6 c0             	movzx  eax,al
c001f2be:	ff 24 85 64 cd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd329c]
c001f2c5:	89 ef                	mov    edi,ebp
c001f2c7:	eb 11                	jmp    c001f2da <Vm::faultHandler(regs*)+0x504>
c001f2c9:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f2cc:	eb 0c                	jmp    c001f2da <Vm::faultHandler(regs*)+0x504>
c001f2ce:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f2d1:	eb 07                	jmp    c001f2da <Vm::faultHandler(regs*)+0x504>
c001f2d3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f2d6:	eb 02                	jmp    c001f2da <Vm::faultHandler(regs*)+0x504>
c001f2d8:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f2da:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f2dd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f2e2:	74 37                	je     c001f31b <Vm::faultHandler(regs*)+0x545>
c001f2e4:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f2ea:	76 2f                	jbe    c001f31b <Vm::faultHandler(regs*)+0x545>
c001f2ec:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f2f0:	50                   	push   eax
c001f2f1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f2f5:	50                   	push   eax
c001f2f6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f2fa:	50                   	push   eax
c001f2fb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f2ff:	50                   	push   eax
c001f300:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f304:	50                   	push   eax
c001f305:	6a 6f                	push   0x6f
c001f307:	6a 6f                	push   0x6f
c001f309:	68 f1 cc 02 c0       	push   0xc002ccf1
c001f30e:	e8 9c 32 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001f313:	83 c4 20             	add    esp,0x20
c001f316:	e9 86 01 00 00       	jmp    c001f4a1 <Vm::faultHandler(regs*)+0x6cb>
c001f31b:	0f b7 d7             	movzx  edx,di
c001f31e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f321:	0f b7 c6             	movzx  eax,si
c001f324:	81 e1 00 04 00 00    	and    ecx,0x400
c001f32a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f32d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f332:	74 1d                	je     c001f351 <Vm::faultHandler(regs*)+0x57b>
c001f334:	55                   	push   ebp
c001f335:	55                   	push   ebp
c001f336:	50                   	push   eax
c001f337:	52                   	push   edx
c001f338:	e8 48 fa ff ff       	call   c001ed85 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f33d:	83 c4 10             	add    esp,0x10
c001f340:	89 fa                	mov    edx,edi
c001f342:	ef                   	out    dx,eax
c001f343:	85 c9                	test   ecx,ecx
c001f345:	74 05                	je     c001f34c <Vm::faultHandler(regs*)+0x576>
c001f347:	83 ee 04             	sub    esi,0x4
c001f34a:	eb 21                	jmp    c001f36d <Vm::faultHandler(regs*)+0x597>
c001f34c:	83 c6 04             	add    esi,0x4
c001f34f:	eb 1c                	jmp    c001f36d <Vm::faultHandler(regs*)+0x597>
c001f351:	55                   	push   ebp
c001f352:	55                   	push   ebp
c001f353:	50                   	push   eax
c001f354:	52                   	push   edx
c001f355:	e8 19 fa ff ff       	call   c001ed73 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f35a:	83 c4 10             	add    esp,0x10
c001f35d:	89 fa                	mov    edx,edi
c001f35f:	66 ef                	out    dx,ax
c001f361:	85 c9                	test   ecx,ecx
c001f363:	74 05                	je     c001f36a <Vm::faultHandler(regs*)+0x594>
c001f365:	83 ee 02             	sub    esi,0x2
c001f368:	eb 03                	jmp    c001f36d <Vm::faultHandler(regs*)+0x597>
c001f36a:	83 c6 02             	add    esi,0x2
c001f36d:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f373:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f376:	e9 cb 00 00 00       	jmp    c001f446 <Vm::faultHandler(regs*)+0x670>
c001f37b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f382:	83 ec 0c             	sub    esp,0xc
c001f385:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f389:	50                   	push   eax
c001f38a:	e8 42 f6 ff ff       	call   c001e9d1 <Vm::inbv(unsigned short)>
c001f38f:	0f b6 c0             	movzx  eax,al
c001f392:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f395:	eb 3f                	jmp    c001f3d6 <Vm::faultHandler(regs*)+0x600>
c001f397:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f39c:	74 07                	je     c001f3a5 <Vm::faultHandler(regs*)+0x5cf>
c001f39e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f3a2:	ed                   	in     eax,dx
c001f3a3:	eb 14                	jmp    c001f3b9 <Vm::faultHandler(regs*)+0x5e3>
c001f3a5:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f3a8:	66 31 f6             	xor    si,si
c001f3ab:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f3ae:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f3b2:	66 ed                	in     ax,dx
c001f3b4:	0f b7 c0             	movzx  eax,ax
c001f3b7:	09 f0                	or     eax,esi
c001f3b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f3bc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3c0:	e9 84 00 00 00       	jmp    c001f449 <Vm::faultHandler(regs*)+0x673>
c001f3c5:	52                   	push   edx
c001f3c6:	52                   	push   edx
c001f3c7:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f3cb:	50                   	push   eax
c001f3cc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f3d0:	50                   	push   eax
c001f3d1:	e8 0e f6 ff ff       	call   c001e9e4 <Vm::outbv(unsigned short, unsigned char)>
c001f3d6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3da:	eb 53                	jmp    c001f42f <Vm::faultHandler(regs*)+0x659>
c001f3dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f3df:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f3e3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f3e8:	74 03                	je     c001f3ed <Vm::faultHandler(regs*)+0x617>
c001f3ea:	ef                   	out    dx,eax
c001f3eb:	eb cf                	jmp    c001f3bc <Vm::faultHandler(regs*)+0x5e6>
c001f3ed:	66 ef                	out    dx,ax
c001f3ef:	eb cb                	jmp    c001f3bc <Vm::faultHandler(regs*)+0x5e6>
c001f3f1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f3f8:	83 ec 0c             	sub    esp,0xc
c001f3fb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f3ff:	50                   	push   eax
c001f400:	e8 cc f5 ff ff       	call   c001e9d1 <Vm::inbv(unsigned short)>
c001f405:	0f b6 c0             	movzx  eax,al
c001f408:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f40b:	eb 1f                	jmp    c001f42c <Vm::faultHandler(regs*)+0x656>
c001f40d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f410:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f415:	74 03                	je     c001f41a <Vm::faultHandler(regs*)+0x644>
c001f417:	ed                   	in     eax,dx
c001f418:	eb 0d                	jmp    c001f427 <Vm::faultHandler(regs*)+0x651>
c001f41a:	66 ed                	in     ax,dx
c001f41c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f41f:	0f b7 c0             	movzx  eax,ax
c001f422:	66 31 d2             	xor    dx,dx
c001f425:	09 d0                	or     eax,edx
c001f427:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f42a:	eb 1a                	jmp    c001f446 <Vm::faultHandler(regs*)+0x670>
c001f42c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f42f:	83 c4 10             	add    esp,0x10
c001f432:	eb 15                	jmp    c001f449 <Vm::faultHandler(regs*)+0x673>
c001f434:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f437:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f43a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f43f:	74 03                	je     c001f444 <Vm::faultHandler(regs*)+0x66e>
c001f441:	ef                   	out    dx,eax
c001f442:	eb 02                	jmp    c001f446 <Vm::faultHandler(regs*)+0x670>
c001f444:	66 ef                	out    dx,ax
c001f446:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f449:	b0 01                	mov    al,0x1
c001f44b:	eb 56                	jmp    c001f4a3 <Vm::faultHandler(regs*)+0x6cd>
c001f44d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f451:	50                   	push   eax
c001f452:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f456:	50                   	push   eax
c001f457:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f45b:	50                   	push   eax
c001f45c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f460:	50                   	push   eax
c001f461:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f465:	50                   	push   eax
c001f466:	52                   	push   edx
c001f467:	52                   	push   edx
c001f468:	68 1e cd 02 c0       	push   0xc002cd1e
c001f46d:	e8 3d 31 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c001f472:	83 c4 20             	add    esp,0x20
c001f475:	83 ec 0c             	sub    esp,0xc
c001f478:	6a 60                	push   0x60
c001f47a:	e8 52 f5 ff ff       	call   c001e9d1 <Vm::inbv(unsigned short)>
c001f47f:	83 c4 10             	add    esp,0x10
c001f482:	3c 1c                	cmp    al,0x1c
c001f484:	74 04                	je     c001f48a <Vm::faultHandler(regs*)+0x6b4>
c001f486:	3c 5a                	cmp    al,0x5a
c001f488:	75 eb                	jne    c001f475 <Vm::faultHandler(regs*)+0x69f>
c001f48a:	3c 5a                	cmp    al,0x5a
c001f48c:	74 04                	je     c001f492 <Vm::faultHandler(regs*)+0x6bc>
c001f48e:	3c 1c                	cmp    al,0x1c
c001f490:	75 0f                	jne    c001f4a1 <Vm::faultHandler(regs*)+0x6cb>
c001f492:	83 ec 0c             	sub    esp,0xc
c001f495:	6a 60                	push   0x60
c001f497:	e8 35 f5 ff ff       	call   c001e9d1 <Vm::inbv(unsigned short)>
c001f49c:	83 c4 10             	add    esp,0x10
c001f49f:	eb e9                	jmp    c001f48a <Vm::faultHandler(regs*)+0x6b4>
c001f4a1:	31 c0                	xor    eax,eax
c001f4a3:	83 c4 1c             	add    esp,0x1c
c001f4a6:	5b                   	pop    ebx
c001f4a7:	5e                   	pop    esi
c001f4a8:	5f                   	pop    edi
c001f4a9:	5d                   	pop    ebp
c001f4aa:	c3                   	ret    

c001f4ab <Vm::fpuInternalTo32(unsigned long long)>:
c001f4ab:	57                   	push   edi
c001f4ac:	56                   	push   esi
c001f4ad:	53                   	push   ebx
c001f4ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b6:	89 d6                	mov    esi,edx
c001f4b8:	89 d7                	mov    edi,edx
c001f4ba:	89 c1                	mov    ecx,eax
c001f4bc:	c1 ef 14             	shr    edi,0x14
c001f4bf:	89 d3                	mov    ebx,edx
c001f4c1:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f4c7:	31 d2                	xor    edx,edx
c001f4c9:	89 f8                	mov    eax,edi
c001f4cb:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f4d1:	bf ff 00 00 00       	mov    edi,0xff
c001f4d6:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f4db:	83 d2 ff             	adc    edx,0xffffffff
c001f4de:	39 c7                	cmp    edi,eax
c001f4e0:	bf 00 00 00 00       	mov    edi,0x0
c001f4e5:	19 d7                	sbb    edi,edx
c001f4e7:	72 15                	jb     c001f4fe <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f4e9:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f4ed:	c1 e0 17             	shl    eax,0x17
c001f4f0:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f4f6:	09 f1                	or     ecx,esi
c001f4f8:	09 c1                	or     ecx,eax
c001f4fa:	89 cf                	mov    edi,ecx
c001f4fc:	eb 02                	jmp    c001f500 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f4fe:	31 ff                	xor    edi,edi
c001f500:	89 f8                	mov    eax,edi
c001f502:	5b                   	pop    ebx
c001f503:	5e                   	pop    esi
c001f504:	5f                   	pop    edi
c001f505:	c3                   	ret    

c001f506 <Vm::fpuInternalTo64(unsigned long long)>:
c001f506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f50a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f50e:	c3                   	ret    

c001f50f <Vm::fpu32ToInternal(unsigned int)>:
c001f50f:	57                   	push   edi
c001f510:	31 ff                	xor    edi,edi
c001f512:	56                   	push   esi
c001f513:	53                   	push   ebx
c001f514:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f518:	89 cb                	mov    ebx,ecx
c001f51a:	89 ce                	mov    esi,ecx
c001f51c:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f522:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f528:	c1 e9 17             	shr    ecx,0x17
c001f52b:	89 f0                	mov    eax,esi
c001f52d:	0f b6 d1             	movzx  edx,cl
c001f530:	81 c2 80 03 00 00    	add    edx,0x380
c001f536:	89 d1                	mov    ecx,edx
c001f538:	89 fa                	mov    edx,edi
c001f53a:	c1 e1 14             	shl    ecx,0x14
c001f53d:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f541:	c1 e0 1d             	shl    eax,0x1d
c001f544:	89 d7                	mov    edi,edx
c001f546:	89 c6                	mov    esi,eax
c001f548:	89 ca                	mov    edx,ecx
c001f54a:	89 f0                	mov    eax,esi
c001f54c:	09 fa                	or     edx,edi
c001f54e:	09 da                	or     edx,ebx
c001f550:	5b                   	pop    ebx
c001f551:	5e                   	pop    esi
c001f552:	5f                   	pop    edi
c001f553:	c3                   	ret    

c001f554 <Vm::fpu64ToInternal(unsigned long long)>:
c001f554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f558:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f55c:	c3                   	ret    

c001f55d <Vm::fpuFloatToLong(unsigned long long)>:
c001f55d:	57                   	push   edi
c001f55e:	31 c0                	xor    eax,eax
c001f560:	56                   	push   esi
c001f561:	31 d2                	xor    edx,edx
c001f563:	53                   	push   ebx
c001f564:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f568:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f56c:	89 d9                	mov    ecx,ebx
c001f56e:	c1 e9 14             	shr    ecx,0x14
c001f571:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f577:	89 cf                	mov    edi,ecx
c001f579:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f57f:	78 33                	js     c001f5b4 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f581:	89 d9                	mov    ecx,ebx
c001f583:	89 f0                	mov    eax,esi
c001f585:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f58b:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f591:	89 ca                	mov    edx,ecx
c001f593:	b9 34 00 00 00       	mov    ecx,0x34
c001f598:	29 f9                	sub    ecx,edi
c001f59a:	0f ad d0             	shrd   eax,edx,cl
c001f59d:	d3 fa                	sar    edx,cl
c001f59f:	f6 c1 20             	test   cl,0x20
c001f5a2:	74 05                	je     c001f5a9 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f5a4:	89 d0                	mov    eax,edx
c001f5a6:	c1 fa 1f             	sar    edx,0x1f
c001f5a9:	85 db                	test   ebx,ebx
c001f5ab:	79 07                	jns    c001f5b4 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f5ad:	f7 d8                	neg    eax
c001f5af:	83 d2 00             	adc    edx,0x0
c001f5b2:	f7 da                	neg    edx
c001f5b4:	5b                   	pop    ebx
c001f5b5:	5e                   	pop    esi
c001f5b6:	5f                   	pop    edi
c001f5b7:	c3                   	ret    

c001f5b8 <Vm::fpuULongToFloat(unsigned long long)>:
c001f5b8:	57                   	push   edi
c001f5b9:	31 c9                	xor    ecx,ecx
c001f5bb:	56                   	push   esi
c001f5bc:	53                   	push   ebx
c001f5bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5c1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f5c5:	0f ba e7 14          	bt     edi,0x14
c001f5c9:	72 07                	jb     c001f5d2 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f5cb:	01 f6                	add    esi,esi
c001f5cd:	11 ff                	adc    edi,edi
c001f5cf:	41                   	inc    ecx
c001f5d0:	eb f3                	jmp    c001f5c5 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f5d2:	89 fa                	mov    edx,edi
c001f5d4:	89 f0                	mov    eax,esi
c001f5d6:	bb 33 04 00 00       	mov    ebx,0x433
c001f5db:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f5e1:	29 cb                	sub    ebx,ecx
c001f5e3:	89 d9                	mov    ecx,ebx
c001f5e5:	5b                   	pop    ebx
c001f5e6:	c1 e1 14             	shl    ecx,0x14
c001f5e9:	5e                   	pop    esi
c001f5ea:	09 ca                	or     edx,ecx
c001f5ec:	5f                   	pop    edi
c001f5ed:	c3                   	ret    

c001f5ee <Vm::fpuLongToFloat(long long)>:
c001f5ee:	56                   	push   esi
c001f5ef:	31 c0                	xor    eax,eax
c001f5f1:	53                   	push   ebx
c001f5f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f5f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f5fa:	39 c8                	cmp    eax,ecx
c001f5fc:	19 d8                	sbb    eax,ebx
c001f5fe:	7d 04                	jge    c001f604 <Vm::fpuLongToFloat(long long)+0x16>
c001f600:	31 f6                	xor    esi,esi
c001f602:	eb 0c                	jmp    c001f610 <Vm::fpuLongToFloat(long long)+0x22>
c001f604:	f7 d9                	neg    ecx
c001f606:	be 01 00 00 00       	mov    esi,0x1
c001f60b:	83 d3 00             	adc    ebx,0x0
c001f60e:	f7 db                	neg    ebx
c001f610:	31 c0                	xor    eax,eax
c001f612:	0f ba e3 14          	bt     ebx,0x14
c001f616:	72 07                	jb     c001f61f <Vm::fpuLongToFloat(long long)+0x31>
c001f618:	01 c9                	add    ecx,ecx
c001f61a:	11 db                	adc    ebx,ebx
c001f61c:	40                   	inc    eax
c001f61d:	eb f3                	jmp    c001f612 <Vm::fpuLongToFloat(long long)+0x24>
c001f61f:	ba 33 04 00 00       	mov    edx,0x433
c001f624:	29 c2                	sub    edx,eax
c001f626:	89 c8                	mov    eax,ecx
c001f628:	c1 e2 14             	shl    edx,0x14
c001f62b:	89 d9                	mov    ecx,ebx
c001f62d:	89 f3                	mov    ebx,esi
c001f62f:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f635:	09 ca                	or     edx,ecx
c001f637:	84 db                	test   bl,bl
c001f639:	74 06                	je     c001f641 <Vm::fpuLongToFloat(long long)+0x53>
c001f63b:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f641:	5b                   	pop    ebx
c001f642:	5e                   	pop    esi
c001f643:	c3                   	ret    

c001f644 <Vm::fpuGet0()>:
c001f644:	31 c0                	xor    eax,eax
c001f646:	31 d2                	xor    edx,edx
c001f648:	c3                   	ret    

c001f649 <Vm::fpuGet1()>:
c001f649:	b8 01 00 00 00       	mov    eax,0x1
c001f64e:	31 d2                	xor    edx,edx
c001f650:	c3                   	ret    

c001f651 <Vm::fpuGetPi()>:
c001f651:	b8 03 00 00 00       	mov    eax,0x3
c001f656:	31 d2                	xor    edx,edx
c001f658:	c3                   	ret    

c001f659 <Vm::fpuGetLog2E()>:
c001f659:	83 ec 18             	sub    esp,0x18
c001f65c:	68 7c cd 02 c0       	push   0xc002cd7c
c001f661:	e8 17 aa ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001f666:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f66b:	31 d2                	xor    edx,edx
c001f66d:	83 c4 1c             	add    esp,0x1c
c001f670:	c3                   	ret    

c001f671 <Vm::fpuGetLogE2()>:
c001f671:	83 ec 18             	sub    esp,0x18
c001f674:	68 88 cd 02 c0       	push   0xc002cd88
c001f679:	e8 ff a9 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001f67e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f683:	31 d2                	xor    edx,edx
c001f685:	83 c4 1c             	add    esp,0x1c
c001f688:	c3                   	ret    

c001f689 <Vm::fpuGetLog210()>:
c001f689:	83 ec 18             	sub    esp,0x18
c001f68c:	68 94 cd 02 c0       	push   0xc002cd94
c001f691:	e8 e7 a9 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001f696:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f69b:	31 d2                	xor    edx,edx
c001f69d:	83 c4 1c             	add    esp,0x1c
c001f6a0:	c3                   	ret    

c001f6a1 <Vm::fpuGetLog102()>:
c001f6a1:	83 ec 18             	sub    esp,0x18
c001f6a4:	68 a1 cd 02 c0       	push   0xc002cda1
c001f6a9:	e8 cf a9 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001f6ae:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6b3:	31 d2                	xor    edx,edx
c001f6b5:	83 c4 1c             	add    esp,0x1c
c001f6b8:	c3                   	ret    

c001f6b9 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f6b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6bd:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f6c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6c5:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f6c9:	0f 92 c0             	setb   al
c001f6cc:	c3                   	ret    

c001f6cd <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f6cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f6d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d5:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f6d9:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f6dd:	09 c2                	or     edx,eax
c001f6df:	0f 94 c0             	sete   al
c001f6e2:	c3                   	ret    

c001f6e3 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f6e3:	57                   	push   edi
c001f6e4:	56                   	push   esi
c001f6e5:	53                   	push   ebx
c001f6e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6ee:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f6f2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f6f6:	57                   	push   edi
c001f6f7:	56                   	push   esi
c001f6f8:	53                   	push   ebx
c001f6f9:	51                   	push   ecx
c001f6fa:	e8 ce ff ff ff       	call   c001f6cd <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f6ff:	83 c4 10             	add    esp,0x10
c001f702:	88 c2                	mov    dl,al
c001f704:	31 c0                	xor    eax,eax
c001f706:	84 d2                	test   dl,dl
c001f708:	75 0c                	jne    c001f716 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f70a:	57                   	push   edi
c001f70b:	56                   	push   esi
c001f70c:	53                   	push   ebx
c001f70d:	51                   	push   ecx
c001f70e:	e8 a6 ff ff ff       	call   c001f6b9 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f713:	83 c4 10             	add    esp,0x10
c001f716:	83 e0 01             	and    eax,0x1
c001f719:	5b                   	pop    ebx
c001f71a:	88 c1                	mov    cl,al
c001f71c:	83 e2 01             	and    edx,0x1
c001f71f:	a0 01 23 03 c0       	mov    al,ds:0xc0032301
c001f724:	c1 e2 06             	shl    edx,0x6
c001f727:	83 e0 ba             	and    eax,0xffffffba
c001f72a:	5e                   	pop    esi
c001f72b:	09 c8                	or     eax,ecx
c001f72d:	5f                   	pop    edi
c001f72e:	09 d0                	or     eax,edx
c001f730:	a2 01 23 03 c0       	mov    ds:0xc0032301,al
c001f735:	c3                   	ret    

c001f736 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f736:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f73a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f73e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f742:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f746:	c3                   	ret    

c001f747 <Vm::fpuAbs(unsigned long long)>:
c001f747:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f74b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f74f:	c3                   	ret    

c001f750 <Vm::fpuChs(unsigned long long)>:
c001f750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f754:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f758:	f7 d8                	neg    eax
c001f75a:	83 d2 00             	adc    edx,0x0
c001f75d:	f7 da                	neg    edx
c001f75f:	c3                   	ret    

c001f760 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f760:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f764:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f769:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f76d:	eb c7                	jmp    c001f736 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f76f <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f76f:	53                   	push   ebx
c001f770:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f774:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f778:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f77c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f780:	0f af ca             	imul   ecx,edx
c001f783:	0f af d8             	imul   ebx,eax
c001f786:	f7 e2                	mul    edx
c001f788:	01 d9                	add    ecx,ebx
c001f78a:	5b                   	pop    ebx
c001f78b:	01 ca                	add    edx,ecx
c001f78d:	c3                   	ret    

c001f78e <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f78e:	83 ec 0c             	sub    esp,0xc
c001f791:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f79d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7a1:	e8 fe 77 00 00       	call   c0026fa4 <__udivdi3>
c001f7a6:	83 c4 1c             	add    esp,0x1c
c001f7a9:	c3                   	ret    

c001f7aa <Vm::fpuSquare(unsigned long long)>:
c001f7aa:	50                   	push   eax
c001f7ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f7b3:	52                   	push   edx
c001f7b4:	50                   	push   eax
c001f7b5:	52                   	push   edx
c001f7b6:	50                   	push   eax
c001f7b7:	e8 b3 ff ff ff       	call   c001f76f <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7bc:	83 c4 14             	add    esp,0x14
c001f7bf:	c3                   	ret    

c001f7c0 <Vm::fpuGetReg(int)>:
c001f7c0:	83 ec 0c             	sub    esp,0xc
c001f7c3:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f7c8:	76 10                	jbe    c001f7da <Vm::fpuGetReg(int)+0x1a>
c001f7ca:	83 ec 0c             	sub    esp,0xc
c001f7cd:	68 ae cd 02 c0       	push   0xc002cdae
c001f7d2:	e8 a6 a8 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001f7d7:	83 c4 10             	add    esp,0x10
c001f7da:	a0 01 23 03 c0       	mov    al,ds:0xc0032301
c001f7df:	b9 08 00 00 00       	mov    ecx,0x8
c001f7e4:	c0 e8 03             	shr    al,0x3
c001f7e7:	83 e0 07             	and    eax,0x7
c001f7ea:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f7ee:	99                   	cdq    
c001f7ef:	f7 f9                	idiv   ecx
c001f7f1:	8b 04 d5 04 23 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcdcfc]
c001f7f8:	8b 14 d5 08 23 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcdcf8]
c001f7ff:	83 c4 0c             	add    esp,0xc
c001f802:	c3                   	ret    

c001f803 <Vm::fpuSetReg(int, unsigned long long)>:
c001f803:	57                   	push   edi
c001f804:	56                   	push   esi
c001f805:	52                   	push   edx
c001f806:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f80a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f80e:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f813:	76 10                	jbe    c001f825 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f815:	83 ec 0c             	sub    esp,0xc
c001f818:	68 c1 cd 02 c0       	push   0xc002cdc1
c001f81d:	e8 5b a8 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c001f822:	83 c4 10             	add    esp,0x10
c001f825:	a0 01 23 03 c0       	mov    al,ds:0xc0032301
c001f82a:	b9 08 00 00 00       	mov    ecx,0x8
c001f82f:	c0 e8 03             	shr    al,0x3
c001f832:	83 e0 07             	and    eax,0x7
c001f835:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f839:	99                   	cdq    
c001f83a:	f7 f9                	idiv   ecx
c001f83c:	89 34 d5 04 23 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdcfc],esi
c001f843:	89 3c d5 08 23 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdcf8],edi
c001f84a:	58                   	pop    eax
c001f84b:	5e                   	pop    esi
c001f84c:	5f                   	pop    edi
c001f84d:	c3                   	ret    

c001f84e <Vm::fpuPush(unsigned long long)>:
c001f84e:	a0 01 23 03 c0       	mov    al,ds:0xc0032301
c001f853:	c0 e8 03             	shr    al,0x3
c001f856:	83 e0 07             	and    eax,0x7
c001f859:	83 c0 07             	add    eax,0x7
c001f85c:	88 c2                	mov    dl,al
c001f85e:	83 e0 07             	and    eax,0x7
c001f861:	83 e2 07             	and    edx,0x7
c001f864:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f86b:	8a 15 01 23 03 c0    	mov    dl,BYTE PTR ds:0xc0032301
c001f871:	83 e2 c7             	and    edx,0xffffffc7
c001f874:	09 ca                	or     edx,ecx
c001f876:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f87a:	88 15 01 23 03 c0    	mov    BYTE PTR ds:0xc0032301,dl
c001f880:	89 0c c5 08 23 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdcf8],ecx
c001f887:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f88b:	89 14 c5 04 23 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdcfc],edx
c001f892:	a1 44 23 03 c0       	mov    eax,ds:0xc0032344
c001f897:	83 f8 08             	cmp    eax,0x8
c001f89a:	75 08                	jne    c001f8a4 <Vm::fpuPush(unsigned long long)+0x56>
c001f89c:	80 0d 00 23 03 c0 40 	or     BYTE PTR ds:0xc0032300,0x40
c001f8a3:	c3                   	ret    
c001f8a4:	40                   	inc    eax
c001f8a5:	a3 44 23 03 c0       	mov    ds:0xc0032344,eax
c001f8aa:	c3                   	ret    

c001f8ab <Vm::fpuPop()>:
c001f8ab:	8a 0d 01 23 03 c0    	mov    cl,BYTE PTR ds:0xc0032301
c001f8b1:	53                   	push   ebx
c001f8b2:	c0 e9 03             	shr    cl,0x3
c001f8b5:	8a 1d 01 23 03 c0    	mov    bl,BYTE PTR ds:0xc0032301
c001f8bb:	83 e1 07             	and    ecx,0x7
c001f8be:	83 e3 c7             	and    ebx,0xffffffc7
c001f8c1:	8b 04 cd 04 23 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcdcfc]
c001f8c8:	8b 14 cd 08 23 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcdcf8]
c001f8cf:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f8d6:	83 e1 38             	and    ecx,0x38
c001f8d9:	09 d9                	or     ecx,ebx
c001f8db:	88 0d 01 23 03 c0    	mov    BYTE PTR ds:0xc0032301,cl
c001f8e1:	8b 0d 44 23 03 c0    	mov    ecx,DWORD PTR ds:0xc0032344
c001f8e7:	85 c9                	test   ecx,ecx
c001f8e9:	74 09                	je     c001f8f4 <Vm::fpuPop()+0x49>
c001f8eb:	49                   	dec    ecx
c001f8ec:	89 0d 44 23 03 c0    	mov    DWORD PTR ds:0xc0032344,ecx
c001f8f2:	eb 07                	jmp    c001f8fb <Vm::fpuPop()+0x50>
c001f8f4:	80 0d 00 23 03 c0 40 	or     BYTE PTR ds:0xc0032300,0x40
c001f8fb:	5b                   	pop    ebx
c001f8fc:	c3                   	ret    

c001f8fd <Vm::x87Handler(regs*)>:
c001f8fd:	55                   	push   ebp
c001f8fe:	57                   	push   edi
c001f8ff:	56                   	push   esi
c001f900:	53                   	push   ebx
c001f901:	83 ec 1c             	sub    esp,0x1c
c001f904:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f908:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f90d:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f910:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f918:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f91c:	50                   	push   eax
c001f91d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f921:	50                   	push   eax
c001f922:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f926:	50                   	push   eax
c001f927:	53                   	push   ebx
c001f928:	e8 1d 9e ff ff       	call   c001974a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f92d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f930:	83 c4 10             	add    esp,0x10
c001f933:	89 c6                	mov    esi,eax
c001f935:	80 fa d9             	cmp    dl,0xd9
c001f938:	0f 85 52 01 00 00    	jne    c001fa90 <Vm::x87Handler(regs*)+0x193>
c001f93e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f942:	8d 50 20             	lea    edx,[eax+0x20]
c001f945:	80 fa 0e             	cmp    dl,0xe
c001f948:	0f 87 86 00 00 00    	ja     c001f9d4 <Vm::x87Handler(regs*)+0xd7>
c001f94e:	0f b6 d2             	movzx  edx,dl
c001f951:	ff 24 95 d4 cd 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd322c]
c001f958:	e8 e7 fc ff ff       	call   c001f644 <Vm::fpuGet0()>
c001f95d:	eb 05                	jmp    c001f964 <Vm::x87Handler(regs*)+0x67>
c001f95f:	e8 e5 fc ff ff       	call   c001f649 <Vm::fpuGet1()>
c001f964:	57                   	push   edi
c001f965:	57                   	push   edi
c001f966:	52                   	push   edx
c001f967:	50                   	push   eax
c001f968:	e8 e1 fe ff ff       	call   c001f84e <Vm::fpuPush(unsigned long long)>
c001f96d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f971:	83 c4 10             	add    esp,0x10
c001f974:	b0 01                	mov    al,0x1
c001f976:	e9 e3 09 00 00       	jmp    c002035e <Vm::x87Handler(regs*)+0xa61>
c001f97b:	83 ec 0c             	sub    esp,0xc
c001f97e:	6a 00                	push   0x0
c001f980:	e8 3b fe ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001f985:	59                   	pop    ecx
c001f986:	5e                   	pop    esi
c001f987:	52                   	push   edx
c001f988:	50                   	push   eax
c001f989:	e8 c2 fd ff ff       	call   c001f750 <Vm::fpuChs(unsigned long long)>
c001f98e:	eb 13                	jmp    c001f9a3 <Vm::x87Handler(regs*)+0xa6>
c001f990:	83 ec 0c             	sub    esp,0xc
c001f993:	6a 00                	push   0x0
c001f995:	e8 26 fe ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001f99a:	5f                   	pop    edi
c001f99b:	5d                   	pop    ebp
c001f99c:	52                   	push   edx
c001f99d:	50                   	push   eax
c001f99e:	e8 a4 fd ff ff       	call   c001f747 <Vm::fpuAbs(unsigned long long)>
c001f9a3:	83 c4 0c             	add    esp,0xc
c001f9a6:	52                   	push   edx
c001f9a7:	50                   	push   eax
c001f9a8:	6a 00                	push   0x0
c001f9aa:	e8 54 fe ff ff       	call   c001f803 <Vm::fpuSetReg(int, unsigned long long)>
c001f9af:	eb bc                	jmp    c001f96d <Vm::x87Handler(regs*)+0x70>
c001f9b1:	e8 d3 fc ff ff       	call   c001f689 <Vm::fpuGetLog210()>
c001f9b6:	eb ac                	jmp    c001f964 <Vm::x87Handler(regs*)+0x67>
c001f9b8:	e8 9c fc ff ff       	call   c001f659 <Vm::fpuGetLog2E()>
c001f9bd:	eb a5                	jmp    c001f964 <Vm::x87Handler(regs*)+0x67>
c001f9bf:	e8 8d fc ff ff       	call   c001f651 <Vm::fpuGetPi()>
c001f9c4:	eb 9e                	jmp    c001f964 <Vm::x87Handler(regs*)+0x67>
c001f9c6:	e8 d6 fc ff ff       	call   c001f6a1 <Vm::fpuGetLog102()>
c001f9cb:	eb 97                	jmp    c001f964 <Vm::x87Handler(regs*)+0x67>
c001f9cd:	e8 9f fc ff ff       	call   c001f671 <Vm::fpuGetLogE2()>
c001f9d2:	eb 90                	jmp    c001f964 <Vm::x87Handler(regs*)+0x67>
c001f9d4:	8d 50 40             	lea    edx,[eax+0x40]
c001f9d7:	80 fa 07             	cmp    dl,0x7
c001f9da:	77 15                	ja     c001f9f1 <Vm::x87Handler(regs*)+0xf4>
c001f9dc:	83 ec 0c             	sub    esp,0xc
c001f9df:	2d c0 00 00 00       	sub    eax,0xc0
c001f9e4:	50                   	push   eax
c001f9e5:	e8 d6 fd ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001f9ea:	59                   	pop    ecx
c001f9eb:	5e                   	pop    esi
c001f9ec:	e9 75 ff ff ff       	jmp    c001f966 <Vm::x87Handler(regs*)+0x69>
c001f9f1:	8d 50 38             	lea    edx,[eax+0x38]
c001f9f4:	80 fa 07             	cmp    dl,0x7
c001f9f7:	77 3c                	ja     c001fa35 <Vm::x87Handler(regs*)+0x138>
c001f9f9:	83 ec 0c             	sub    esp,0xc
c001f9fc:	2d c8 00 00 00       	sub    eax,0xc8
c001fa01:	50                   	push   eax
c001fa02:	e8 b9 fd ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fa07:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa0e:	89 c6                	mov    esi,eax
c001fa10:	89 d7                	mov    edi,edx
c001fa12:	e8 a9 fd ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fa17:	83 c4 0c             	add    esp,0xc
c001fa1a:	52                   	push   edx
c001fa1b:	50                   	push   eax
c001fa1c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa20:	2d c8 00 00 00       	sub    eax,0xc8
c001fa25:	50                   	push   eax
c001fa26:	e8 d8 fd ff ff       	call   c001f803 <Vm::fpuSetReg(int, unsigned long long)>
c001fa2b:	83 c4 0c             	add    esp,0xc
c001fa2e:	57                   	push   edi
c001fa2f:	56                   	push   esi
c001fa30:	e9 73 ff ff ff       	jmp    c001f9a8 <Vm::x87Handler(regs*)+0xab>
c001fa35:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa39:	84 d2                	test   dl,dl
c001fa3b:	75 0f                	jne    c001fa4c <Vm::x87Handler(regs*)+0x14f>
c001fa3d:	83 ec 0c             	sub    esp,0xc
c001fa40:	ff 36                	push   DWORD PTR [esi]
c001fa42:	e8 c8 fa ff ff       	call   c001f50f <Vm::fpu32ToInternal(unsigned int)>
c001fa47:	e9 bf 00 00 00       	jmp    c001fb0b <Vm::x87Handler(regs*)+0x20e>
c001fa4c:	80 fa 03             	cmp    dl,0x3
c001fa4f:	75 13                	jne    c001fa64 <Vm::x87Handler(regs*)+0x167>
c001fa51:	e8 55 fe ff ff       	call   c001f8ab <Vm::fpuPop()>
c001fa56:	55                   	push   ebp
c001fa57:	55                   	push   ebp
c001fa58:	52                   	push   edx
c001fa59:	50                   	push   eax
c001fa5a:	e8 4c fa ff ff       	call   c001f4ab <Vm::fpuInternalTo32(unsigned long long)>
c001fa5f:	e9 88 00 00 00       	jmp    c001faec <Vm::x87Handler(regs*)+0x1ef>
c001fa64:	80 fa 05             	cmp    dl,0x5
c001fa67:	75 0e                	jne    c001fa77 <Vm::x87Handler(regs*)+0x17a>
c001fa69:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fa6c:	66 a3 02 23 03 c0    	mov    ds:0xc0032302,ax
c001fa72:	e9 df 00 00 00       	jmp    c001fb56 <Vm::x87Handler(regs*)+0x259>
c001fa77:	31 c0                	xor    eax,eax
c001fa79:	80 fa 07             	cmp    dl,0x7
c001fa7c:	0f 85 dc 08 00 00    	jne    c002035e <Vm::x87Handler(regs*)+0xa61>
c001fa82:	66 a1 02 23 03 c0    	mov    ax,ds:0xc0032302
c001fa88:	66 89 06             	mov    WORD PTR [esi],ax
c001fa8b:	e9 c6 00 00 00       	jmp    c001fb56 <Vm::x87Handler(regs*)+0x259>
c001fa90:	80 fa d8             	cmp    dl,0xd8
c001fa93:	0f 84 c9 00 00 00    	je     c001fb62 <Vm::x87Handler(regs*)+0x265>
c001fa99:	80 fa dc             	cmp    dl,0xdc
c001fa9c:	0f 84 0d 02 00 00    	je     c001fcaf <Vm::x87Handler(regs*)+0x3b2>
c001faa2:	80 fa de             	cmp    dl,0xde
c001faa5:	0f 84 cd 02 00 00    	je     c001fd78 <Vm::x87Handler(regs*)+0x47b>
c001faab:	80 fa dd             	cmp    dl,0xdd
c001faae:	0f 84 5f 04 00 00    	je     c001ff13 <Vm::x87Handler(regs*)+0x616>
c001fab4:	80 fa da             	cmp    dl,0xda
c001fab7:	0f 84 24 05 00 00    	je     c001ffe1 <Vm::x87Handler(regs*)+0x6e4>
c001fabd:	80 fa df             	cmp    dl,0xdf
c001fac0:	0f 84 68 05 00 00    	je     c002002e <Vm::x87Handler(regs*)+0x731>
c001fac6:	31 c0                	xor    eax,eax
c001fac8:	80 fa db             	cmp    dl,0xdb
c001facb:	0f 85 8d 08 00 00    	jne    c002035e <Vm::x87Handler(regs*)+0xa61>
c001fad1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fad5:	80 fa 03             	cmp    dl,0x3
c001fad8:	0f 85 70 06 00 00    	jne    c002014e <Vm::x87Handler(regs*)+0x851>
c001fade:	e8 c8 fd ff ff       	call   c001f8ab <Vm::fpuPop()>
c001fae3:	55                   	push   ebp
c001fae4:	55                   	push   ebp
c001fae5:	52                   	push   edx
c001fae6:	50                   	push   eax
c001fae7:	e8 71 fa ff ff       	call   c001f55d <Vm::fpuFloatToLong(unsigned long long)>
c001faec:	83 c4 10             	add    esp,0x10
c001faef:	89 06                	mov    DWORD PTR [esi],eax
c001faf1:	eb 63                	jmp    c001fb56 <Vm::x87Handler(regs*)+0x259>
c001faf3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001faf7:	84 d2                	test   dl,dl
c001faf9:	0f 85 e6 05 00 00    	jne    c00200e5 <Vm::x87Handler(regs*)+0x7e8>
c001faff:	57                   	push   edi
c001fb00:	57                   	push   edi
c001fb01:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb04:	ff 36                	push   DWORD PTR [esi]
c001fb06:	e8 49 fa ff ff       	call   c001f554 <Vm::fpu64ToInternal(unsigned long long)>
c001fb0b:	5e                   	pop    esi
c001fb0c:	5f                   	pop    edi
c001fb0d:	52                   	push   edx
c001fb0e:	50                   	push   eax
c001fb0f:	e8 3a fd ff ff       	call   c001f84e <Vm::fpuPush(unsigned long long)>
c001fb14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fb18:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb1b:	e9 51 fe ff ff       	jmp    c001f971 <Vm::x87Handler(regs*)+0x74>
c001fb20:	80 fa 03             	cmp    dl,0x3
c001fb23:	0f 85 d7 06 00 00    	jne    c0020200 <Vm::x87Handler(regs*)+0x903>
c001fb29:	57                   	push   edi
c001fb2a:	57                   	push   edi
c001fb2b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb2e:	ff 36                	push   DWORD PTR [esi]
c001fb30:	e8 1f fa ff ff       	call   c001f554 <Vm::fpu64ToInternal(unsigned long long)>
c001fb35:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb3c:	89 c6                	mov    esi,eax
c001fb3e:	89 d7                	mov    edi,edx
c001fb40:	e8 7b fc ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fb45:	57                   	push   edi
c001fb46:	56                   	push   esi
c001fb47:	52                   	push   edx
c001fb48:	50                   	push   eax
c001fb49:	e8 95 fb ff ff       	call   c001f6e3 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb4e:	83 c4 20             	add    esp,0x20
c001fb51:	e8 55 fd ff ff       	call   c001f8ab <Vm::fpuPop()>
c001fb56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb5a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb5d:	e9 12 fe ff ff       	jmp    c001f974 <Vm::x87Handler(regs*)+0x77>
c001fb62:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb66:	8d 50 40             	lea    edx,[eax+0x40]
c001fb69:	80 fa 07             	cmp    dl,0x7
c001fb6c:	77 29                	ja     c001fb97 <Vm::x87Handler(regs*)+0x29a>
c001fb6e:	83 ec 0c             	sub    esp,0xc
c001fb71:	2d c0 00 00 00       	sub    eax,0xc0
c001fb76:	50                   	push   eax
c001fb77:	e8 44 fc ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fb7c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb83:	89 c6                	mov    esi,eax
c001fb85:	89 d7                	mov    edi,edx
c001fb87:	e8 34 fc ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fb8c:	57                   	push   edi
c001fb8d:	56                   	push   esi
c001fb8e:	52                   	push   edx
c001fb8f:	50                   	push   eax
c001fb90:	e8 a1 fb ff ff       	call   c001f736 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb95:	eb 2f                	jmp    c001fbc6 <Vm::x87Handler(regs*)+0x2c9>
c001fb97:	8d 50 38             	lea    edx,[eax+0x38]
c001fb9a:	80 fa 07             	cmp    dl,0x7
c001fb9d:	77 2f                	ja     c001fbce <Vm::x87Handler(regs*)+0x2d1>
c001fb9f:	83 ec 0c             	sub    esp,0xc
c001fba2:	2d c8 00 00 00       	sub    eax,0xc8
c001fba7:	50                   	push   eax
c001fba8:	e8 13 fc ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fbad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbb4:	89 c6                	mov    esi,eax
c001fbb6:	89 d7                	mov    edi,edx
c001fbb8:	e8 03 fc ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fbbd:	57                   	push   edi
c001fbbe:	56                   	push   esi
c001fbbf:	52                   	push   edx
c001fbc0:	50                   	push   eax
c001fbc1:	e8 a9 fb ff ff       	call   c001f76f <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fbc6:	83 c4 1c             	add    esp,0x1c
c001fbc9:	e9 d8 fd ff ff       	jmp    c001f9a6 <Vm::x87Handler(regs*)+0xa9>
c001fbce:	8d 50 30             	lea    edx,[eax+0x30]
c001fbd1:	80 fa 07             	cmp    dl,0x7
c001fbd4:	77 0d                	ja     c001fbe3 <Vm::x87Handler(regs*)+0x2e6>
c001fbd6:	83 ec 0c             	sub    esp,0xc
c001fbd9:	2d d0 00 00 00       	sub    eax,0xd0
c001fbde:	e9 99 03 00 00       	jmp    c001ff7c <Vm::x87Handler(regs*)+0x67f>
c001fbe3:	8d 50 28             	lea    edx,[eax+0x28]
c001fbe6:	80 fa 07             	cmp    dl,0x7
c001fbe9:	77 0d                	ja     c001fbf8 <Vm::x87Handler(regs*)+0x2fb>
c001fbeb:	83 ec 0c             	sub    esp,0xc
c001fbee:	2d d8 00 00 00       	sub    eax,0xd8
c001fbf3:	e9 c0 03 00 00       	jmp    c001ffb8 <Vm::x87Handler(regs*)+0x6bb>
c001fbf8:	8d 50 20             	lea    edx,[eax+0x20]
c001fbfb:	80 fa 07             	cmp    dl,0x7
c001fbfe:	77 1b                	ja     c001fc1b <Vm::x87Handler(regs*)+0x31e>
c001fc00:	83 ec 0c             	sub    esp,0xc
c001fc03:	2d e0 00 00 00       	sub    eax,0xe0
c001fc08:	50                   	push   eax
c001fc09:	e8 b2 fb ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fc0e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc15:	89 c6                	mov    esi,eax
c001fc17:	89 d7                	mov    edi,edx
c001fc19:	eb 22                	jmp    c001fc3d <Vm::x87Handler(regs*)+0x340>
c001fc1b:	8d 50 18             	lea    edx,[eax+0x18]
c001fc1e:	80 fa 07             	cmp    dl,0x7
c001fc21:	77 2d                	ja     c001fc50 <Vm::x87Handler(regs*)+0x353>
c001fc23:	83 ec 0c             	sub    esp,0xc
c001fc26:	6a 00                	push   0x0
c001fc28:	e8 93 fb ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fc2d:	89 c6                	mov    esi,eax
c001fc2f:	89 d7                	mov    edi,edx
c001fc31:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc35:	2d e8 00 00 00       	sub    eax,0xe8
c001fc3a:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc3d:	e8 7e fb ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fc42:	57                   	push   edi
c001fc43:	56                   	push   esi
c001fc44:	52                   	push   edx
c001fc45:	50                   	push   eax
c001fc46:	e8 15 fb ff ff       	call   c001f760 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc4b:	e9 76 ff ff ff       	jmp    c001fbc6 <Vm::x87Handler(regs*)+0x2c9>
c001fc50:	8d 50 10             	lea    edx,[eax+0x10]
c001fc53:	80 fa 07             	cmp    dl,0x7
c001fc56:	77 1b                	ja     c001fc73 <Vm::x87Handler(regs*)+0x376>
c001fc58:	83 ec 0c             	sub    esp,0xc
c001fc5b:	2d f0 00 00 00       	sub    eax,0xf0
c001fc60:	50                   	push   eax
c001fc61:	e8 5a fb ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fc66:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc6d:	89 c6                	mov    esi,eax
c001fc6f:	89 d7                	mov    edi,edx
c001fc71:	eb 22                	jmp    c001fc95 <Vm::x87Handler(regs*)+0x398>
c001fc73:	3c f7                	cmp    al,0xf7
c001fc75:	0f 86 d1 03 00 00    	jbe    c002004c <Vm::x87Handler(regs*)+0x74f>
c001fc7b:	83 ec 0c             	sub    esp,0xc
c001fc7e:	6a 00                	push   0x0
c001fc80:	e8 3b fb ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fc85:	89 c6                	mov    esi,eax
c001fc87:	89 d7                	mov    edi,edx
c001fc89:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc8d:	2d f8 00 00 00       	sub    eax,0xf8
c001fc92:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc95:	e8 26 fb ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fc9a:	57                   	push   edi
c001fc9b:	56                   	push   esi
c001fc9c:	52                   	push   edx
c001fc9d:	50                   	push   eax
c001fc9e:	e8 eb fa ff ff       	call   c001f78e <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fca3:	83 c4 1c             	add    esp,0x1c
c001fca6:	52                   	push   edx
c001fca7:	50                   	push   eax
c001fca8:	6a 00                	push   0x0
c001fcaa:	e9 51 02 00 00       	jmp    c001ff00 <Vm::x87Handler(regs*)+0x603>
c001fcaf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcb3:	8d 50 40             	lea    edx,[eax+0x40]
c001fcb6:	80 fa 07             	cmp    dl,0x7
c001fcb9:	77 37                	ja     c001fcf2 <Vm::x87Handler(regs*)+0x3f5>
c001fcbb:	83 ec 0c             	sub    esp,0xc
c001fcbe:	2d c0 00 00 00       	sub    eax,0xc0
c001fcc3:	50                   	push   eax
c001fcc4:	e8 f7 fa ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fcc9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcd0:	89 c6                	mov    esi,eax
c001fcd2:	89 d7                	mov    edi,edx
c001fcd4:	e8 e7 fa ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fcd9:	57                   	push   edi
c001fcda:	56                   	push   esi
c001fcdb:	52                   	push   edx
c001fcdc:	50                   	push   eax
c001fcdd:	e8 54 fa ff ff       	call   c001f736 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fce2:	83 c4 1c             	add    esp,0x1c
c001fce5:	52                   	push   edx
c001fce6:	50                   	push   eax
c001fce7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fceb:	2d c0 00 00 00       	sub    eax,0xc0
c001fcf0:	eb 3d                	jmp    c001fd2f <Vm::x87Handler(regs*)+0x432>
c001fcf2:	8d 50 38             	lea    edx,[eax+0x38]
c001fcf5:	80 fa 07             	cmp    dl,0x7
c001fcf8:	77 3b                	ja     c001fd35 <Vm::x87Handler(regs*)+0x438>
c001fcfa:	83 ec 0c             	sub    esp,0xc
c001fcfd:	2d c8 00 00 00       	sub    eax,0xc8
c001fd02:	50                   	push   eax
c001fd03:	e8 b8 fa ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fd08:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd0f:	89 c6                	mov    esi,eax
c001fd11:	89 d7                	mov    edi,edx
c001fd13:	e8 a8 fa ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fd18:	57                   	push   edi
c001fd19:	56                   	push   esi
c001fd1a:	52                   	push   edx
c001fd1b:	50                   	push   eax
c001fd1c:	e8 4e fa ff ff       	call   c001f76f <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd21:	83 c4 1c             	add    esp,0x1c
c001fd24:	52                   	push   edx
c001fd25:	50                   	push   eax
c001fd26:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd2a:	2d c8 00 00 00       	sub    eax,0xc8
c001fd2f:	50                   	push   eax
c001fd30:	e9 75 fc ff ff       	jmp    c001f9aa <Vm::x87Handler(regs*)+0xad>
c001fd35:	83 c0 18             	add    eax,0x18
c001fd38:	3c 07                	cmp    al,0x7
c001fd3a:	0f 87 3b 04 00 00    	ja     c002017b <Vm::x87Handler(regs*)+0x87e>
c001fd40:	83 ec 0c             	sub    esp,0xc
c001fd43:	6a 00                	push   0x0
c001fd45:	e8 76 fa ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fd4a:	89 c6                	mov    esi,eax
c001fd4c:	89 d7                	mov    edi,edx
c001fd4e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd52:	2d e8 00 00 00       	sub    eax,0xe8
c001fd57:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd5a:	e8 61 fa ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fd5f:	57                   	push   edi
c001fd60:	56                   	push   esi
c001fd61:	52                   	push   edx
c001fd62:	50                   	push   eax
c001fd63:	e8 f8 f9 ff ff       	call   c001f760 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd68:	83 c4 1c             	add    esp,0x1c
c001fd6b:	52                   	push   edx
c001fd6c:	50                   	push   eax
c001fd6d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd71:	2d e8 00 00 00       	sub    eax,0xe8
c001fd76:	eb b7                	jmp    c001fd2f <Vm::x87Handler(regs*)+0x432>
c001fd78:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd7c:	8d 50 40             	lea    edx,[eax+0x40]
c001fd7f:	80 fa 07             	cmp    dl,0x7
c001fd82:	77 3a                	ja     c001fdbe <Vm::x87Handler(regs*)+0x4c1>
c001fd84:	83 ec 0c             	sub    esp,0xc
c001fd87:	2d c0 00 00 00       	sub    eax,0xc0
c001fd8c:	50                   	push   eax
c001fd8d:	e8 2e fa ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fd92:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd99:	89 c6                	mov    esi,eax
c001fd9b:	89 d7                	mov    edi,edx
c001fd9d:	e8 1e fa ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fda2:	57                   	push   edi
c001fda3:	56                   	push   esi
c001fda4:	52                   	push   edx
c001fda5:	50                   	push   eax
c001fda6:	e8 8b f9 ff ff       	call   c001f736 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fdab:	83 c4 1c             	add    esp,0x1c
c001fdae:	52                   	push   edx
c001fdaf:	50                   	push   eax
c001fdb0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdb4:	2d c0 00 00 00       	sub    eax,0xc0
c001fdb9:	e9 9e 01 00 00       	jmp    c001ff5c <Vm::x87Handler(regs*)+0x65f>
c001fdbe:	8d 50 20             	lea    edx,[eax+0x20]
c001fdc1:	80 fa 07             	cmp    dl,0x7
c001fdc4:	77 3a                	ja     c001fe00 <Vm::x87Handler(regs*)+0x503>
c001fdc6:	83 ec 0c             	sub    esp,0xc
c001fdc9:	2d e0 00 00 00       	sub    eax,0xe0
c001fdce:	50                   	push   eax
c001fdcf:	e8 ec f9 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fdd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fddb:	89 c6                	mov    esi,eax
c001fddd:	89 d7                	mov    edi,edx
c001fddf:	e8 dc f9 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fde4:	57                   	push   edi
c001fde5:	56                   	push   esi
c001fde6:	52                   	push   edx
c001fde7:	50                   	push   eax
c001fde8:	e8 73 f9 ff ff       	call   c001f760 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fded:	83 c4 1c             	add    esp,0x1c
c001fdf0:	52                   	push   edx
c001fdf1:	50                   	push   eax
c001fdf2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdf6:	2d e0 00 00 00       	sub    eax,0xe0
c001fdfb:	e9 5c 01 00 00       	jmp    c001ff5c <Vm::x87Handler(regs*)+0x65f>
c001fe00:	8d 50 18             	lea    edx,[eax+0x18]
c001fe03:	80 fa 07             	cmp    dl,0x7
c001fe06:	77 3b                	ja     c001fe43 <Vm::x87Handler(regs*)+0x546>
c001fe08:	83 ec 0c             	sub    esp,0xc
c001fe0b:	6a 00                	push   0x0
c001fe0d:	e8 ae f9 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fe12:	89 c6                	mov    esi,eax
c001fe14:	89 d7                	mov    edi,edx
c001fe16:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe1a:	2d e8 00 00 00       	sub    eax,0xe8
c001fe1f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe22:	e8 99 f9 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fe27:	57                   	push   edi
c001fe28:	56                   	push   esi
c001fe29:	52                   	push   edx
c001fe2a:	50                   	push   eax
c001fe2b:	e8 30 f9 ff ff       	call   c001f760 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe30:	83 c4 1c             	add    esp,0x1c
c001fe33:	52                   	push   edx
c001fe34:	50                   	push   eax
c001fe35:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe39:	2d e8 00 00 00       	sub    eax,0xe8
c001fe3e:	e9 19 01 00 00       	jmp    c001ff5c <Vm::x87Handler(regs*)+0x65f>
c001fe43:	8d 50 38             	lea    edx,[eax+0x38]
c001fe46:	80 fa 07             	cmp    dl,0x7
c001fe49:	77 37                	ja     c001fe82 <Vm::x87Handler(regs*)+0x585>
c001fe4b:	83 ec 0c             	sub    esp,0xc
c001fe4e:	2d c8 00 00 00       	sub    eax,0xc8
c001fe53:	50                   	push   eax
c001fe54:	e8 67 f9 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fe59:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe60:	89 c6                	mov    esi,eax
c001fe62:	89 d7                	mov    edi,edx
c001fe64:	e8 57 f9 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fe69:	57                   	push   edi
c001fe6a:	56                   	push   esi
c001fe6b:	52                   	push   edx
c001fe6c:	50                   	push   eax
c001fe6d:	e8 fd f8 ff ff       	call   c001f76f <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe72:	83 c4 1c             	add    esp,0x1c
c001fe75:	52                   	push   edx
c001fe76:	50                   	push   eax
c001fe77:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe7b:	2d c8 00 00 00       	sub    eax,0xc8
c001fe80:	eb 7d                	jmp    c001feff <Vm::x87Handler(regs*)+0x602>
c001fe82:	3c f7                	cmp    al,0xf7
c001fe84:	76 38                	jbe    c001febe <Vm::x87Handler(regs*)+0x5c1>
c001fe86:	83 ec 0c             	sub    esp,0xc
c001fe89:	6a 00                	push   0x0
c001fe8b:	e8 30 f9 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fe90:	89 c6                	mov    esi,eax
c001fe92:	89 d7                	mov    edi,edx
c001fe94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe98:	2d f8 00 00 00       	sub    eax,0xf8
c001fe9d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fea0:	e8 1b f9 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fea5:	57                   	push   edi
c001fea6:	56                   	push   esi
c001fea7:	52                   	push   edx
c001fea8:	50                   	push   eax
c001fea9:	e8 e0 f8 ff ff       	call   c001f78e <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001feae:	83 c4 1c             	add    esp,0x1c
c001feb1:	52                   	push   edx
c001feb2:	50                   	push   eax
c001feb3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feb7:	2d f8 00 00 00       	sub    eax,0xf8
c001febc:	eb 41                	jmp    c001feff <Vm::x87Handler(regs*)+0x602>
c001febe:	8d 50 10             	lea    edx,[eax+0x10]
c001fec1:	80 fa 07             	cmp    dl,0x7
c001fec4:	0f 87 5a 01 00 00    	ja     c0020024 <Vm::x87Handler(regs*)+0x727>
c001feca:	83 ec 0c             	sub    esp,0xc
c001fecd:	2d f0 00 00 00       	sub    eax,0xf0
c001fed2:	50                   	push   eax
c001fed3:	e8 e8 f8 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fed8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fedf:	89 c6                	mov    esi,eax
c001fee1:	89 d7                	mov    edi,edx
c001fee3:	e8 d8 f8 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fee8:	57                   	push   edi
c001fee9:	56                   	push   esi
c001feea:	52                   	push   edx
c001feeb:	50                   	push   eax
c001feec:	e8 9d f8 ff ff       	call   c001f78e <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fef1:	83 c4 1c             	add    esp,0x1c
c001fef4:	52                   	push   edx
c001fef5:	50                   	push   eax
c001fef6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fefa:	2d f0 00 00 00       	sub    eax,0xf0
c001feff:	50                   	push   eax
c001ff00:	e8 fe f8 ff ff       	call   c001f803 <Vm::fpuSetReg(int, unsigned long long)>
c001ff05:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff09:	e8 9d f9 ff ff       	call   c001f8ab <Vm::fpuPop()>
c001ff0e:	e9 5e fa ff ff       	jmp    c001f971 <Vm::x87Handler(regs*)+0x74>
c001ff13:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff17:	8d 50 30             	lea    edx,[eax+0x30]
c001ff1a:	80 fa 07             	cmp    dl,0x7
c001ff1d:	77 1d                	ja     c001ff3c <Vm::x87Handler(regs*)+0x63f>
c001ff1f:	83 ec 0c             	sub    esp,0xc
c001ff22:	6a 00                	push   0x0
c001ff24:	e8 97 f8 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001ff29:	83 c4 0c             	add    esp,0xc
c001ff2c:	52                   	push   edx
c001ff2d:	50                   	push   eax
c001ff2e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff32:	2d d0 00 00 00       	sub    eax,0xd0
c001ff37:	e9 f3 fd ff ff       	jmp    c001fd2f <Vm::x87Handler(regs*)+0x432>
c001ff3c:	8d 50 28             	lea    edx,[eax+0x28]
c001ff3f:	80 fa 07             	cmp    dl,0x7
c001ff42:	77 28                	ja     c001ff6c <Vm::x87Handler(regs*)+0x66f>
c001ff44:	83 ec 0c             	sub    esp,0xc
c001ff47:	6a 00                	push   0x0
c001ff49:	e8 72 f8 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001ff4e:	83 c4 0c             	add    esp,0xc
c001ff51:	52                   	push   edx
c001ff52:	50                   	push   eax
c001ff53:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff57:	2d d8 00 00 00       	sub    eax,0xd8
c001ff5c:	50                   	push   eax
c001ff5d:	e8 a1 f8 ff ff       	call   c001f803 <Vm::fpuSetReg(int, unsigned long long)>
c001ff62:	e8 44 f9 ff ff       	call   c001f8ab <Vm::fpuPop()>
c001ff67:	e9 01 fa ff ff       	jmp    c001f96d <Vm::x87Handler(regs*)+0x70>
c001ff6c:	8d 50 20             	lea    edx,[eax+0x20]
c001ff6f:	80 fa 07             	cmp    dl,0x7
c001ff72:	77 30                	ja     c001ffa4 <Vm::x87Handler(regs*)+0x6a7>
c001ff74:	83 ec 0c             	sub    esp,0xc
c001ff77:	2d e0 00 00 00       	sub    eax,0xe0
c001ff7c:	50                   	push   eax
c001ff7d:	e8 3e f8 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001ff82:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff89:	89 c6                	mov    esi,eax
c001ff8b:	89 d7                	mov    edi,edx
c001ff8d:	e8 2e f8 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001ff92:	57                   	push   edi
c001ff93:	56                   	push   esi
c001ff94:	52                   	push   edx
c001ff95:	50                   	push   eax
c001ff96:	e8 48 f7 ff ff       	call   c001f6e3 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ff9b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff9f:	e9 54 02 00 00       	jmp    c00201f8 <Vm::x87Handler(regs*)+0x8fb>
c001ffa4:	8d 50 18             	lea    edx,[eax+0x18]
c001ffa7:	80 fa 07             	cmp    dl,0x7
c001ffaa:	0f 87 43 fb ff ff    	ja     c001faf3 <Vm::x87Handler(regs*)+0x1f6>
c001ffb0:	83 ec 0c             	sub    esp,0xc
c001ffb3:	2d e8 00 00 00       	sub    eax,0xe8
c001ffb8:	50                   	push   eax
c001ffb9:	e8 02 f8 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001ffbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffc5:	89 c6                	mov    esi,eax
c001ffc7:	89 d7                	mov    edi,edx
c001ffc9:	e8 f2 f7 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001ffce:	57                   	push   edi
c001ffcf:	56                   	push   esi
c001ffd0:	52                   	push   edx
c001ffd1:	50                   	push   eax
c001ffd2:	e8 0c f7 ff ff       	call   c001f6e3 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ffd7:	83 c4 20             	add    esp,0x20
c001ffda:	e8 cc f8 ff ff       	call   c001f8ab <Vm::fpuPop()>
c001ffdf:	eb 62                	jmp    c0020043 <Vm::x87Handler(regs*)+0x746>
c001ffe1:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001ffe5:	0f 85 0f 01 00 00    	jne    c00200fa <Vm::x87Handler(regs*)+0x7fd>
c001ffeb:	83 ec 0c             	sub    esp,0xc
c001ffee:	6a 01                	push   0x1
c001fff0:	e8 cb f7 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c001fff5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fffc:	89 c6                	mov    esi,eax
c001fffe:	89 d7                	mov    edi,edx
c0020000:	e8 bb f7 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c0020005:	57                   	push   edi
c0020006:	56                   	push   esi
c0020007:	52                   	push   edx
c0020008:	50                   	push   eax
c0020009:	e8 d5 f6 ff ff       	call   c001f6e3 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002000e:	83 c4 20             	add    esp,0x20
c0020011:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020015:	e8 91 f8 ff ff       	call   c001f8ab <Vm::fpuPop()>
c002001a:	e8 8c f8 ff ff       	call   c001f8ab <Vm::fpuPop()>
c002001f:	e9 50 f9 ff ff       	jmp    c001f974 <Vm::x87Handler(regs*)+0x77>
c0020024:	3c d9                	cmp    al,0xd9
c0020026:	0f 85 b5 02 00 00    	jne    c00202e1 <Vm::x87Handler(regs*)+0x9e4>
c002002c:	eb bd                	jmp    c001ffeb <Vm::x87Handler(regs*)+0x6ee>
c002002e:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020032:	0f 85 ea 02 00 00    	jne    c0020322 <Vm::x87Handler(regs*)+0xa25>
c0020038:	0f b7 05 00 23 03 c0 	movzx  eax,WORD PTR ds:0xc0032300
c002003f:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020043:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020047:	e9 28 f9 ff ff       	jmp    c001f974 <Vm::x87Handler(regs*)+0x77>
c002004c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020050:	84 d2                	test   dl,dl
c0020052:	75 0f                	jne    c0020063 <Vm::x87Handler(regs*)+0x766>
c0020054:	83 ec 0c             	sub    esp,0xc
c0020057:	ff 36                	push   DWORD PTR [esi]
c0020059:	e8 b1 f4 ff ff       	call   c001f50f <Vm::fpu32ToInternal(unsigned int)>
c002005e:	e9 2c 01 00 00       	jmp    c002018f <Vm::x87Handler(regs*)+0x892>
c0020063:	80 fa 01             	cmp    dl,0x1
c0020066:	75 0f                	jne    c0020077 <Vm::x87Handler(regs*)+0x77a>
c0020068:	83 ec 0c             	sub    esp,0xc
c002006b:	ff 36                	push   DWORD PTR [esi]
c002006d:	e8 9d f4 ff ff       	call   c001f50f <Vm::fpu32ToInternal(unsigned int)>
c0020072:	e9 81 02 00 00       	jmp    c00202f8 <Vm::x87Handler(regs*)+0x9fb>
c0020077:	80 fa 04             	cmp    dl,0x4
c002007a:	75 0f                	jne    c002008b <Vm::x87Handler(regs*)+0x78e>
c002007c:	83 ec 0c             	sub    esp,0xc
c002007f:	ff 36                	push   DWORD PTR [esi]
c0020081:	e8 89 f4 ff ff       	call   c001f50f <Vm::fpu32ToInternal(unsigned int)>
c0020086:	e9 86 01 00 00       	jmp    c0020211 <Vm::x87Handler(regs*)+0x914>
c002008b:	80 fa 05             	cmp    dl,0x5
c002008e:	75 1b                	jne    c00200ab <Vm::x87Handler(regs*)+0x7ae>
c0020090:	83 ec 0c             	sub    esp,0xc
c0020093:	6a 00                	push   0x0
c0020095:	e8 26 f7 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c002009a:	89 c7                	mov    edi,eax
c002009c:	89 d5                	mov    ebp,edx
c002009e:	58                   	pop    eax
c002009f:	ff 36                	push   DWORD PTR [esi]
c00200a1:	e8 69 f4 ff ff       	call   c001f50f <Vm::fpu32ToInternal(unsigned int)>
c00200a6:	e9 a3 01 00 00       	jmp    c002024e <Vm::x87Handler(regs*)+0x951>
c00200ab:	80 fa 06             	cmp    dl,0x6
c00200ae:	75 0f                	jne    c00200bf <Vm::x87Handler(regs*)+0x7c2>
c00200b0:	83 ec 0c             	sub    esp,0xc
c00200b3:	ff 36                	push   DWORD PTR [esi]
c00200b5:	e8 55 f4 ff ff       	call   c001f50f <Vm::fpu32ToInternal(unsigned int)>
c00200ba:	e9 ae 01 00 00       	jmp    c002026d <Vm::x87Handler(regs*)+0x970>
c00200bf:	31 c0                	xor    eax,eax
c00200c1:	80 fa 07             	cmp    dl,0x7
c00200c4:	0f 85 94 02 00 00    	jne    c002035e <Vm::x87Handler(regs*)+0xa61>
c00200ca:	83 ec 0c             	sub    esp,0xc
c00200cd:	6a 00                	push   0x0
c00200cf:	e8 ec f6 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c00200d4:	89 c7                	mov    edi,eax
c00200d6:	89 d5                	mov    ebp,edx
c00200d8:	58                   	pop    eax
c00200d9:	ff 36                	push   DWORD PTR [esi]
c00200db:	e8 2f f4 ff ff       	call   c001f50f <Vm::fpu32ToInternal(unsigned int)>
c00200e0:	e9 cb 01 00 00       	jmp    c00202b0 <Vm::x87Handler(regs*)+0x9b3>
c00200e5:	80 fa 03             	cmp    dl,0x3
c00200e8:	0f 85 d3 01 00 00    	jne    c00202c1 <Vm::x87Handler(regs*)+0x9c4>
c00200ee:	e8 b8 f7 ff ff       	call   c001f8ab <Vm::fpuPop()>
c00200f3:	51                   	push   ecx
c00200f4:	51                   	push   ecx
c00200f5:	e9 de 01 00 00       	jmp    c00202d8 <Vm::x87Handler(regs*)+0x9db>
c00200fa:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00200fe:	80 fa 01             	cmp    dl,0x1
c0020101:	75 09                	jne    c002010c <Vm::x87Handler(regs*)+0x80f>
c0020103:	57                   	push   edi
c0020104:	57                   	push   edi
c0020105:	8b 06                	mov    eax,DWORD PTR [esi]
c0020107:	e9 e3 01 00 00       	jmp    c00202ef <Vm::x87Handler(regs*)+0x9f2>
c002010c:	80 fa 04             	cmp    dl,0x4
c002010f:	75 12                	jne    c0020123 <Vm::x87Handler(regs*)+0x826>
c0020111:	31 d2                	xor    edx,edx
c0020113:	51                   	push   ecx
c0020114:	51                   	push   ecx
c0020115:	8b 06                	mov    eax,DWORD PTR [esi]
c0020117:	52                   	push   edx
c0020118:	50                   	push   eax
c0020119:	e8 d0 f4 ff ff       	call   c001f5ee <Vm::fpuLongToFloat(long long)>
c002011e:	e9 ee 00 00 00       	jmp    c0020211 <Vm::x87Handler(regs*)+0x914>
c0020123:	31 c0                	xor    eax,eax
c0020125:	80 fa 07             	cmp    dl,0x7
c0020128:	0f 85 30 02 00 00    	jne    c002035e <Vm::x87Handler(regs*)+0xa61>
c002012e:	83 ec 0c             	sub    esp,0xc
c0020131:	6a 00                	push   0x0
c0020133:	e8 88 f6 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c0020138:	89 c7                	mov    edi,eax
c002013a:	89 d5                	mov    ebp,edx
c002013c:	58                   	pop    eax
c002013d:	8b 06                	mov    eax,DWORD PTR [esi]
c002013f:	5a                   	pop    edx
c0020140:	31 d2                	xor    edx,edx
c0020142:	52                   	push   edx
c0020143:	50                   	push   eax
c0020144:	e8 a5 f4 ff ff       	call   c001f5ee <Vm::fpuLongToFloat(long long)>
c0020149:	e9 62 01 00 00       	jmp    c00202b0 <Vm::x87Handler(regs*)+0x9b3>
c002014e:	84 d2                	test   dl,dl
c0020150:	75 0d                	jne    c002015f <Vm::x87Handler(regs*)+0x862>
c0020152:	31 d2                	xor    edx,edx
c0020154:	55                   	push   ebp
c0020155:	55                   	push   ebp
c0020156:	8b 06                	mov    eax,DWORD PTR [esi]
c0020158:	52                   	push   edx
c0020159:	50                   	push   eax
c002015a:	e9 d3 01 00 00       	jmp    c0020332 <Vm::x87Handler(regs*)+0xa35>
c002015f:	31 c0                	xor    eax,eax
c0020161:	80 fa 02             	cmp    dl,0x2
c0020164:	0f 85 f4 01 00 00    	jne    c002035e <Vm::x87Handler(regs*)+0xa61>
c002016a:	83 ec 0c             	sub    esp,0xc
c002016d:	6a 00                	push   0x0
c002016f:	e8 4c f6 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c0020174:	59                   	pop    ecx
c0020175:	5f                   	pop    edi
c0020176:	e9 6a f9 ff ff       	jmp    c001fae5 <Vm::x87Handler(regs*)+0x1e8>
c002017b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002017f:	84 d2                	test   dl,dl
c0020181:	75 2a                	jne    c00201ad <Vm::x87Handler(regs*)+0x8b0>
c0020183:	50                   	push   eax
c0020184:	50                   	push   eax
c0020185:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020188:	ff 36                	push   DWORD PTR [esi]
c002018a:	e8 c5 f3 ff ff       	call   c001f554 <Vm::fpu64ToInternal(unsigned long long)>
c002018f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020196:	89 c6                	mov    esi,eax
c0020198:	89 d7                	mov    edi,edx
c002019a:	e8 21 f6 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c002019f:	57                   	push   edi
c00201a0:	56                   	push   esi
c00201a1:	52                   	push   edx
c00201a2:	50                   	push   eax
c00201a3:	e8 8e f5 ff ff       	call   c001f736 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00201a8:	e9 64 01 00 00       	jmp    c0020311 <Vm::x87Handler(regs*)+0xa14>
c00201ad:	80 fa 01             	cmp    dl,0x1
c00201b0:	75 11                	jne    c00201c3 <Vm::x87Handler(regs*)+0x8c6>
c00201b2:	50                   	push   eax
c00201b3:	50                   	push   eax
c00201b4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201b7:	ff 36                	push   DWORD PTR [esi]
c00201b9:	e8 96 f3 ff ff       	call   c001f554 <Vm::fpu64ToInternal(unsigned long long)>
c00201be:	e9 35 01 00 00       	jmp    c00202f8 <Vm::x87Handler(regs*)+0x9fb>
c00201c3:	80 fa 02             	cmp    dl,0x2
c00201c6:	0f 85 54 f9 ff ff    	jne    c001fb20 <Vm::x87Handler(regs*)+0x223>
c00201cc:	55                   	push   ebp
c00201cd:	55                   	push   ebp
c00201ce:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201d1:	ff 36                	push   DWORD PTR [esi]
c00201d3:	e8 7c f3 ff ff       	call   c001f554 <Vm::fpu64ToInternal(unsigned long long)>
c00201d8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201df:	89 c6                	mov    esi,eax
c00201e1:	89 d7                	mov    edi,edx
c00201e3:	e8 d8 f5 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c00201e8:	57                   	push   edi
c00201e9:	56                   	push   esi
c00201ea:	52                   	push   edx
c00201eb:	50                   	push   eax
c00201ec:	e8 f2 f4 ff ff       	call   c001f6e3 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00201f5:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00201f8:	83 c4 20             	add    esp,0x20
c00201fb:	e9 74 f7 ff ff       	jmp    c001f974 <Vm::x87Handler(regs*)+0x77>
c0020200:	80 fa 04             	cmp    dl,0x4
c0020203:	75 2a                	jne    c002022f <Vm::x87Handler(regs*)+0x932>
c0020205:	51                   	push   ecx
c0020206:	51                   	push   ecx
c0020207:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002020a:	ff 36                	push   DWORD PTR [esi]
c002020c:	e8 43 f3 ff ff       	call   c001f554 <Vm::fpu64ToInternal(unsigned long long)>
c0020211:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020218:	89 c6                	mov    esi,eax
c002021a:	89 d7                	mov    edi,edx
c002021c:	e8 9f f5 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c0020221:	57                   	push   edi
c0020222:	56                   	push   esi
c0020223:	52                   	push   edx
c0020224:	50                   	push   eax
c0020225:	e8 36 f5 ff ff       	call   c001f760 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002022a:	e9 e2 00 00 00       	jmp    c0020311 <Vm::x87Handler(regs*)+0xa14>
c002022f:	80 fa 05             	cmp    dl,0x5
c0020232:	75 28                	jne    c002025c <Vm::x87Handler(regs*)+0x95f>
c0020234:	83 ec 0c             	sub    esp,0xc
c0020237:	6a 00                	push   0x0
c0020239:	e8 82 f5 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c002023e:	89 c7                	mov    edi,eax
c0020240:	89 d5                	mov    ebp,edx
c0020242:	58                   	pop    eax
c0020243:	5a                   	pop    edx
c0020244:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020247:	ff 36                	push   DWORD PTR [esi]
c0020249:	e8 06 f3 ff ff       	call   c001f554 <Vm::fpu64ToInternal(unsigned long long)>
c002024e:	83 c4 10             	add    esp,0x10
c0020251:	55                   	push   ebp
c0020252:	57                   	push   edi
c0020253:	52                   	push   edx
c0020254:	50                   	push   eax
c0020255:	e8 06 f5 ff ff       	call   c001f760 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002025a:	eb 60                	jmp    c00202bc <Vm::x87Handler(regs*)+0x9bf>
c002025c:	80 fa 06             	cmp    dl,0x6
c002025f:	75 2a                	jne    c002028b <Vm::x87Handler(regs*)+0x98e>
c0020261:	51                   	push   ecx
c0020262:	51                   	push   ecx
c0020263:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020266:	ff 36                	push   DWORD PTR [esi]
c0020268:	e8 e7 f2 ff ff       	call   c001f554 <Vm::fpu64ToInternal(unsigned long long)>
c002026d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020274:	89 c6                	mov    esi,eax
c0020276:	89 d7                	mov    edi,edx
c0020278:	e8 43 f5 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c002027d:	57                   	push   edi
c002027e:	56                   	push   esi
c002027f:	52                   	push   edx
c0020280:	50                   	push   eax
c0020281:	e8 08 f5 ff ff       	call   c001f78e <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020286:	e9 86 00 00 00       	jmp    c0020311 <Vm::x87Handler(regs*)+0xa14>
c002028b:	31 c0                	xor    eax,eax
c002028d:	80 fa 07             	cmp    dl,0x7
c0020290:	0f 85 c8 00 00 00    	jne    c002035e <Vm::x87Handler(regs*)+0xa61>
c0020296:	83 ec 0c             	sub    esp,0xc
c0020299:	6a 00                	push   0x0
c002029b:	e8 20 f5 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c00202a0:	89 c7                	mov    edi,eax
c00202a2:	89 d5                	mov    ebp,edx
c00202a4:	58                   	pop    eax
c00202a5:	5a                   	pop    edx
c00202a6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202a9:	ff 36                	push   DWORD PTR [esi]
c00202ab:	e8 a4 f2 ff ff       	call   c001f554 <Vm::fpu64ToInternal(unsigned long long)>
c00202b0:	83 c4 10             	add    esp,0x10
c00202b3:	55                   	push   ebp
c00202b4:	57                   	push   edi
c00202b5:	52                   	push   edx
c00202b6:	50                   	push   eax
c00202b7:	e8 d2 f4 ff ff       	call   c001f78e <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202bc:	83 c4 0c             	add    esp,0xc
c00202bf:	eb 53                	jmp    c0020314 <Vm::x87Handler(regs*)+0xa17>
c00202c1:	31 c0                	xor    eax,eax
c00202c3:	80 fa 02             	cmp    dl,0x2
c00202c6:	0f 85 92 00 00 00    	jne    c002035e <Vm::x87Handler(regs*)+0xa61>
c00202cc:	83 ec 0c             	sub    esp,0xc
c00202cf:	6a 00                	push   0x0
c00202d1:	e8 ea f4 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c00202d6:	59                   	pop    ecx
c00202d7:	5f                   	pop    edi
c00202d8:	52                   	push   edx
c00202d9:	50                   	push   eax
c00202da:	e8 27 f2 ff ff       	call   c001f506 <Vm::fpuInternalTo64(unsigned long long)>
c00202df:	eb 70                	jmp    c0020351 <Vm::x87Handler(regs*)+0xa54>
c00202e1:	31 c0                	xor    eax,eax
c00202e3:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00202e8:	75 74                	jne    c002035e <Vm::x87Handler(regs*)+0xa61>
c00202ea:	50                   	push   eax
c00202eb:	50                   	push   eax
c00202ec:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00202ef:	31 d2                	xor    edx,edx
c00202f1:	52                   	push   edx
c00202f2:	50                   	push   eax
c00202f3:	e8 f6 f2 ff ff       	call   c001f5ee <Vm::fpuLongToFloat(long long)>
c00202f8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202ff:	89 c6                	mov    esi,eax
c0020301:	89 d7                	mov    edi,edx
c0020303:	e8 b8 f4 ff ff       	call   c001f7c0 <Vm::fpuGetReg(int)>
c0020308:	57                   	push   edi
c0020309:	56                   	push   esi
c002030a:	52                   	push   edx
c002030b:	50                   	push   eax
c002030c:	e8 5e f4 ff ff       	call   c001f76f <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020311:	83 c4 1c             	add    esp,0x1c
c0020314:	52                   	push   edx
c0020315:	50                   	push   eax
c0020316:	6a 00                	push   0x0
c0020318:	e8 e6 f4 ff ff       	call   c001f803 <Vm::fpuSetReg(int, unsigned long long)>
c002031d:	e9 f2 f7 ff ff       	jmp    c001fb14 <Vm::x87Handler(regs*)+0x217>
c0020322:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020326:	80 fa 05             	cmp    dl,0x5
c0020329:	75 11                	jne    c002033c <Vm::x87Handler(regs*)+0xa3f>
c002032b:	55                   	push   ebp
c002032c:	55                   	push   ebp
c002032d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020330:	ff 36                	push   DWORD PTR [esi]
c0020332:	e8 81 f2 ff ff       	call   c001f5b8 <Vm::fpuULongToFloat(unsigned long long)>
c0020337:	e9 cf f7 ff ff       	jmp    c001fb0b <Vm::x87Handler(regs*)+0x20e>
c002033c:	31 c0                	xor    eax,eax
c002033e:	80 fa 07             	cmp    dl,0x7
c0020341:	75 1b                	jne    c002035e <Vm::x87Handler(regs*)+0xa61>
c0020343:	e8 63 f5 ff ff       	call   c001f8ab <Vm::fpuPop()>
c0020348:	51                   	push   ecx
c0020349:	51                   	push   ecx
c002034a:	52                   	push   edx
c002034b:	50                   	push   eax
c002034c:	e8 0c f2 ff ff       	call   c001f55d <Vm::fpuFloatToLong(unsigned long long)>
c0020351:	83 c4 10             	add    esp,0x10
c0020354:	89 06                	mov    DWORD PTR [esi],eax
c0020356:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020359:	e9 f8 f7 ff ff       	jmp    c001fb56 <Vm::x87Handler(regs*)+0x259>
c002035e:	83 c4 1c             	add    esp,0x1c
c0020361:	5b                   	pop    ebx
c0020362:	5e                   	pop    esi
c0020363:	5f                   	pop    edi
c0020364:	5d                   	pop    ebp
c0020365:	c3                   	ret    

c0020366 <__static_initialization_and_destruction_0(int, int)>:
c0020366:	83 ec 0c             	sub    esp,0xc
c0020369:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002036e:	75 1a                	jne    c002038a <__static_initialization_and_destruction_0(int, int)+0x24>
c0020370:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020378:	75 10                	jne    c002038a <__static_initialization_and_destruction_0(int, int)+0x24>
c002037a:	83 ec 0c             	sub    esp,0xc
c002037d:	68 00 23 03 c0       	push   0xc0032300
c0020382:	e8 65 90 00 00       	call   c00293ec <Vm::_FPUState::_FPUState()>
c0020387:	83 c4 10             	add    esp,0x10
c002038a:	90                   	nop
c002038b:	83 c4 0c             	add    esp,0xc
c002038e:	c3                   	ret    

c002038f <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002038f:	83 ec 0c             	sub    esp,0xc
c0020392:	83 ec 08             	sub    esp,0x8
c0020395:	68 ff ff 00 00       	push   0xffff
c002039a:	6a 01                	push   0x1
c002039c:	e8 c5 ff ff ff       	call   c0020366 <__static_initialization_and_destruction_0(int, int)>
c00203a1:	83 c4 10             	add    esp,0x10
c00203a4:	83 c4 0c             	add    esp,0xc
c00203a7:	c3                   	ret    

c00203a8 <FAT::getName()>:
c00203a8:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c00203ad:	c3                   	ret    

c00203ae <FAT::tell(void*, unsigned long long*)>:
c00203ae:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00203b3:	75 06                	jne    c00203bb <FAT::tell(void*, unsigned long long*)+0xd>
c00203b5:	b8 04 00 00 00       	mov    eax,0x4
c00203ba:	c3                   	ret    
c00203bb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00203c0:	75 06                	jne    c00203c8 <FAT::tell(void*, unsigned long long*)+0x1a>
c00203c2:	b8 04 00 00 00       	mov    eax,0x4
c00203c7:	c3                   	ret    
c00203c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00203cc:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00203cf:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00203d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00203d6:	89 01                	mov    DWORD PTR [ecx],eax
c00203d8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00203db:	b8 00 00 00 00       	mov    eax,0x0
c00203e0:	c3                   	ret    
c00203e1:	90                   	nop

c00203e2 <FAT::stat(void*, unsigned long long*)>:
c00203e2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00203e7:	75 06                	jne    c00203ef <FAT::stat(void*, unsigned long long*)+0xd>
c00203e9:	b8 04 00 00 00       	mov    eax,0x4
c00203ee:	c3                   	ret    
c00203ef:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00203f4:	75 06                	jne    c00203fc <FAT::stat(void*, unsigned long long*)+0x1a>
c00203f6:	b8 04 00 00 00       	mov    eax,0x4
c00203fb:	c3                   	ret    
c00203fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020400:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020403:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020406:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002040a:	89 01                	mov    DWORD PTR [ecx],eax
c002040c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002040f:	b8 00 00 00 00       	mov    eax,0x0
c0020414:	c3                   	ret    
c0020415:	90                   	nop

c0020416 <FAT::~FAT()>:
c0020416:	83 ec 0c             	sub    esp,0xc
c0020419:	ba a0 ce 02 c0       	mov    edx,0xc002cea0
c002041e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020422:	89 10                	mov    DWORD PTR [eax],edx
c0020424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020428:	83 ec 0c             	sub    esp,0xc
c002042b:	50                   	push   eax
c002042c:	e8 ad 24 ff ff       	call   c00128de <Filesystem::~Filesystem()>
c0020431:	83 c4 10             	add    esp,0x10
c0020434:	90                   	nop
c0020435:	83 c4 0c             	add    esp,0xc
c0020438:	c3                   	ret    
c0020439:	90                   	nop

c002043a <FAT::~FAT()>:
c002043a:	83 ec 0c             	sub    esp,0xc
c002043d:	83 ec 0c             	sub    esp,0xc
c0020440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020444:	e8 cd ff ff ff       	call   c0020416 <FAT::~FAT()>
c0020449:	83 c4 10             	add    esp,0x10
c002044c:	83 ec 08             	sub    esp,0x8
c002044f:	6a 08                	push   0x8
c0020451:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020455:	e8 75 20 ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c002045a:	83 c4 10             	add    esp,0x10
c002045d:	83 c4 0c             	add    esp,0xc
c0020460:	c3                   	ret    
c0020461:	90                   	nop

c0020462 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020462:	83 ec 1c             	sub    esp,0x1c
c0020465:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002046c:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020471:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020475:	8b 04 85 80 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdc80]
c002047c:	83 f8 ff             	cmp    eax,0xffffffff
c002047f:	75 34                	jne    c00204b5 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020481:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020485:	88 c2                	mov    dl,al
c0020487:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c002048c:	01 d0                	add    eax,edx
c002048e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020492:	8b 15 60 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032360
c0020498:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002049c:	89 14 85 80 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc80],edx
c00204a3:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c00204a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00204ac:	89 14 85 00 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc00],edx
c00204b3:	eb 17                	jmp    c00204cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00204b5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00204b9:	88 c2                	mov    dl,al
c00204bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204bf:	8b 04 85 80 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdc80]
c00204c6:	01 d0                	add    eax,edx
c00204c8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00204cc:	83 ec 04             	sub    esp,0x4
c00204cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00204d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00204d7:	8d 44 24 15          	lea    eax,[esp+0x15]
c00204db:	50                   	push   eax
c00204dc:	e8 1d 68 fe ff       	call   c0006cfe <f_getlabel>
c00204e1:	83 c4 10             	add    esp,0x10
c00204e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204ed:	75 07                	jne    c00204f6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00204ef:	b8 00 00 00 00       	mov    eax,0x0
c00204f4:	eb 05                	jmp    c00204fb <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00204f6:	b8 01 00 00 00       	mov    eax,0x1
c00204fb:	83 c4 1c             	add    esp,0x1c
c00204fe:	c3                   	ret    
c00204ff:	90                   	nop

c0020500 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020500:	57                   	push   edi
c0020501:	83 ec 58             	sub    esp,0x58
c0020504:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002050c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020510:	b9 0f 00 00 00       	mov    ecx,0xf
c0020515:	b8 00 00 00 00       	mov    eax,0x0
c002051a:	fc                   	cld    
c002051b:	89 d7                	mov    edi,edx
c002051d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002051f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020523:	8b 04 85 80 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdc80]
c002052a:	83 f8 ff             	cmp    eax,0xffffffff
c002052d:	75 34                	jne    c0020563 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002052f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020533:	88 c2                	mov    dl,al
c0020535:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c002053a:	01 d0                	add    eax,edx
c002053c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020540:	8b 15 60 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032360
c0020546:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002054a:	89 14 85 80 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc80],edx
c0020551:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c0020556:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c002055a:	89 14 85 00 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc00],edx
c0020561:	eb 17                	jmp    c002057a <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020563:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020567:	88 c2                	mov    dl,al
c0020569:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002056d:	8b 04 85 80 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdc80]
c0020574:	01 d0                	add    eax,edx
c0020576:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002057a:	83 ec 08             	sub    esp,0x8
c002057d:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020581:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020585:	50                   	push   eax
c0020586:	e8 c1 03 fe ff       	call   c000094c <strcat>
c002058b:	83 c4 10             	add    esp,0x10
c002058e:	83 ec 0c             	sub    esp,0xc
c0020591:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020595:	50                   	push   eax
c0020596:	e8 51 69 fe ff       	call   c0006eec <f_setlabel>
c002059b:	83 c4 10             	add    esp,0x10
c002059e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00205a2:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00205a7:	75 07                	jne    c00205b0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00205a9:	b8 00 00 00 00       	mov    eax,0x0
c00205ae:	eb 05                	jmp    c00205b5 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00205b0:	b8 01 00 00 00       	mov    eax,0x1
c00205b5:	83 c4 58             	add    esp,0x58
c00205b8:	5f                   	pop    edi
c00205b9:	c3                   	ret    

c00205ba <FAT::format(LogicalDisk*, int, char const*, int)>:
c00205ba:	83 ec 2c             	sub    esp,0x2c
c00205bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00205c5:	83 ec 08             	sub    esp,0x8
c00205c8:	68 34 ce 02 c0       	push   0xc002ce34
c00205cd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00205d1:	e8 c2 02 fe ff       	call   c0000898 <strcmp>
c00205d6:	83 c4 10             	add    esp,0x10
c00205d9:	85 c0                	test   eax,eax
c00205db:	0f 94 c0             	sete   al
c00205de:	84 c0                	test   al,al
c00205e0:	74 0d                	je     c00205ef <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00205e2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00205ea:	e9 a6 00 00 00       	jmp    c0020695 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00205ef:	83 ec 08             	sub    esp,0x8
c00205f2:	68 26 ce 02 c0       	push   0xc002ce26
c00205f7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00205fb:	e8 98 02 fe ff       	call   c0000898 <strcmp>
c0020600:	83 c4 10             	add    esp,0x10
c0020603:	85 c0                	test   eax,eax
c0020605:	0f 94 c0             	sete   al
c0020608:	84 c0                	test   al,al
c002060a:	74 0a                	je     c0020616 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002060c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020614:	eb 7f                	jmp    c0020695 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020616:	83 ec 08             	sub    esp,0x8
c0020619:	68 2c ce 02 c0       	push   0xc002ce2c
c002061e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020622:	e8 71 02 fe ff       	call   c0000898 <strcmp>
c0020627:	83 c4 10             	add    esp,0x10
c002062a:	85 c0                	test   eax,eax
c002062c:	0f 94 c0             	sete   al
c002062f:	84 c0                	test   al,al
c0020631:	74 0a                	je     c002063d <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020633:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002063b:	eb 58                	jmp    c0020695 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002063d:	83 ec 08             	sub    esp,0x8
c0020640:	68 4c 9b 02 c0       	push   0xc0029b4c
c0020645:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020649:	e8 4a 02 fe ff       	call   c0000898 <strcmp>
c002064e:	83 c4 10             	add    esp,0x10
c0020651:	85 c0                	test   eax,eax
c0020653:	0f 94 c0             	sete   al
c0020656:	84 c0                	test   al,al
c0020658:	74 0a                	je     c0020664 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002065a:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020662:	eb 31                	jmp    c0020695 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020664:	83 ec 08             	sub    esp,0x8
c0020667:	68 32 ce 02 c0       	push   0xc002ce32
c002066c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020670:	e8 23 02 fe ff       	call   c0000898 <strcmp>
c0020675:	83 c4 10             	add    esp,0x10
c0020678:	85 c0                	test   eax,eax
c002067a:	0f 94 c0             	sete   al
c002067d:	84 c0                	test   al,al
c002067f:	74 0a                	je     c002068b <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020681:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020689:	eb 0a                	jmp    c0020695 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002068b:	b8 08 00 00 00       	mov    eax,0x8
c0020690:	e9 04 01 00 00       	jmp    c0020799 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020695:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002069c:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00206a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206a5:	8b 04 85 80 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdc80]
c00206ac:	83 f8 ff             	cmp    eax,0xffffffff
c00206af:	75 34                	jne    c00206e5 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00206b1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00206b5:	88 c2                	mov    dl,al
c00206b7:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c00206bc:	01 d0                	add    eax,edx
c00206be:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00206c2:	8b 15 60 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032360
c00206c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206cc:	89 14 85 80 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc80],edx
c00206d3:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c00206d8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00206dc:	89 14 85 00 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc00],edx
c00206e3:	eb 17                	jmp    c00206fc <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00206e5:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00206e9:	88 c2                	mov    dl,al
c00206eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206ef:	8b 04 85 80 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdc80]
c00206f6:	01 d0                	add    eax,edx
c00206f8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00206fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020700:	88 04 24             	mov    BYTE PTR [esp],al
c0020703:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020707:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002070b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020713:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020718:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020720:	83 ec 0c             	sub    esp,0xc
c0020723:	68 00 20 00 00       	push   0x2000
c0020728:	e8 89 ee fe ff       	call   c000f5b6 <malloc>
c002072d:	83 c4 10             	add    esp,0x10
c0020730:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020734:	68 00 20 00 00       	push   0x2000
c0020739:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002073d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020741:	50                   	push   eax
c0020742:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020746:	50                   	push   eax
c0020747:	e8 eb 6b fe ff       	call   c0007337 <f_mkfs>
c002074c:	83 c4 10             	add    esp,0x10
c002074f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020753:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020758:	75 07                	jne    c0020761 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002075a:	b8 00 00 00 00       	mov    eax,0x0
c002075f:	eb 38                	jmp    c0020799 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020761:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020766:	75 17                	jne    c002077f <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020768:	83 ec 0c             	sub    esp,0xc
c002076b:	68 70 ce 02 c0       	push   0xc002ce70
c0020770:	e8 3a 1e ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0020775:	83 c4 10             	add    esp,0x10
c0020778:	b8 09 00 00 00       	mov    eax,0x9
c002077d:	eb 1a                	jmp    c0020799 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002077f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020783:	83 ec 08             	sub    esp,0x8
c0020786:	50                   	push   eax
c0020787:	68 38 ce 02 c0       	push   0xc002ce38
c002078c:	e8 1e 1e ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0020791:	83 c4 10             	add    esp,0x10
c0020794:	b8 01 00 00 00       	mov    eax,0x1
c0020799:	83 c4 2c             	add    esp,0x2c
c002079c:	c3                   	ret    
c002079d:	90                   	nop

c002079e <FAT::tryMount(LogicalDisk*, int)>:
c002079e:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00207a4:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c00207a9:	83 f8 14             	cmp    eax,0x14
c00207ac:	75 17                	jne    c00207c5 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00207ae:	83 ec 0c             	sub    esp,0xc
c00207b1:	68 4a ce 02 c0       	push   0xc002ce4a
c00207b6:	e8 c2 98 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c00207bb:	83 c4 10             	add    esp,0x10
c00207be:	b0 00                	mov    al,0x0
c00207c0:	e9 d7 01 00 00       	jmp    c002099c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207c5:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00207cc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00207d2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00207d8:	3d 00 02 00 00       	cmp    eax,0x200
c00207dd:	74 07                	je     c00207e6 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00207df:	b0 00                	mov    al,0x0
c00207e1:	e9 b6 01 00 00       	jmp    c002099c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207e6:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00207ee:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00207f5:	8b 04 85 80 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdc80]
c00207fc:	83 f8 ff             	cmp    eax,0xffffffff
c00207ff:	74 07                	je     c0020808 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020801:	b0 01                	mov    al,0x1
c0020803:	e9 94 01 00 00       	jmp    c002099c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020808:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020812:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002081a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020821:	88 c2                	mov    dl,al
c0020823:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c0020828:	01 d0                	add    eax,edx
c002082a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020831:	8b 15 60 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032360
c0020837:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002083e:	89 14 85 80 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc80],edx
c0020845:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c002084a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020851:	89 14 85 00 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc00],edx
c0020858:	83 ec 0c             	sub    esp,0xc
c002085b:	68 54 02 00 00       	push   0x254
c0020860:	e8 51 ed fe ff       	call   c000f5b6 <malloc>
c0020865:	83 c4 10             	add    esp,0x10
c0020868:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002086f:	83 ec 04             	sub    esp,0x4
c0020872:	6a 00                	push   0x0
c0020874:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002087b:	50                   	push   eax
c002087c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020883:	e8 6d 46 fe ff       	call   c0004ef5 <f_mount>
c0020888:	83 c4 10             	add    esp,0x10
c002088b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020892:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c002089a:	74 19                	je     c00208b5 <FAT::tryMount(LogicalDisk*, int)+0x117>
c002089c:	83 ec 0c             	sub    esp,0xc
c002089f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00208a6:	e8 2b ed fe ff       	call   c000f5d6 <rfree>
c00208ab:	83 c4 10             	add    esp,0x10
c00208ae:	b0 00                	mov    al,0x0
c00208b0:	e9 e7 00 00 00       	jmp    c002099c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00208b5:	83 ec 04             	sub    esp,0x4
c00208b8:	68 00 01 00 00       	push   0x100
c00208bd:	6a 00                	push   0x0
c00208bf:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208c6:	50                   	push   eax
c00208c7:	e8 84 fe fd ff       	call   c0000750 <memset>
c00208cc:	83 c4 10             	add    esp,0x10
c00208cf:	83 ec 08             	sub    esp,0x8
c00208d2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00208d9:	50                   	push   eax
c00208da:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208e1:	50                   	push   eax
c00208e2:	e8 65 00 fe ff       	call   c000094c <strcat>
c00208e7:	83 c4 10             	add    esp,0x10
c00208ea:	83 ec 08             	sub    esp,0x8
c00208ed:	68 58 ce 02 c0       	push   0xc002ce58
c00208f2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208f9:	50                   	push   eax
c00208fa:	e8 4d 00 fe ff       	call   c000094c <strcat>
c00208ff:	83 c4 10             	add    esp,0x10
c0020902:	83 ec 04             	sub    esp,0x4
c0020905:	6a 01                	push   0x1
c0020907:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002090e:	50                   	push   eax
c002090f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020913:	50                   	push   eax
c0020914:	e8 3e 46 fe ff       	call   c0004f57 <f_open>
c0020919:	83 c4 10             	add    esp,0x10
c002091c:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020923:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002092a:	85 c0                	test   eax,eax
c002092c:	74 0a                	je     c0020938 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002092e:	78 2d                	js     c002095d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020930:	83 e8 04             	sub    eax,0x4
c0020933:	83 f8 01             	cmp    eax,0x1
c0020936:	77 25                	ja     c002095d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020938:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020940:	83 ec 0c             	sub    esp,0xc
c0020943:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020947:	50                   	push   eax
c0020948:	e8 5c 51 fe ff       	call   c0005aa9 <f_close>
c002094d:	83 c4 10             	add    esp,0x10
c0020950:	90                   	nop
c0020951:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020959:	74 3a                	je     c0020995 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c002095b:	eb 2d                	jmp    c002098a <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c002095d:	83 ec 0c             	sub    esp,0xc
c0020960:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020967:	e8 6a ec fe ff       	call   c000f5d6 <rfree>
c002096c:	83 c4 10             	add    esp,0x10
c002096f:	83 ec 04             	sub    esp,0x4
c0020972:	6a 00                	push   0x0
c0020974:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002097b:	50                   	push   eax
c002097c:	6a 00                	push   0x0
c002097e:	e8 72 45 fe ff       	call   c0004ef5 <f_mount>
c0020983:	83 c4 10             	add    esp,0x10
c0020986:	b0 00                	mov    al,0x0
c0020988:	eb 12                	jmp    c002099c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002098a:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c002098f:	40                   	inc    eax
c0020990:	a3 60 23 03 c0       	mov    ds:0xc0032360,eax
c0020995:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c002099c:	81 c4 6c 03 00 00    	add    esp,0x36c
c00209a2:	c3                   	ret    
c00209a3:	90                   	nop

c00209a4 <FAT::getFileFirstSector(char const*)>:
c00209a4:	53                   	push   ebx
c00209a5:	83 ec 28             	sub    esp,0x28
c00209a8:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c00209b0:	83 ec 0c             	sub    esp,0xc
c00209b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209b7:	e8 fa eb fe ff       	call   c000f5b6 <malloc>
c00209bc:	83 c4 10             	add    esp,0x10
c00209bf:	89 c3                	mov    ebx,eax
c00209c1:	a1 90 22 03 c0       	mov    eax,ds:0xc0032290
c00209c6:	83 ec 04             	sub    esp,0x4
c00209c9:	50                   	push   eax
c00209ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00209ce:	53                   	push   ebx
c00209cf:	e8 3a 21 ff ff       	call   c0012b0e <File::File(char const*, Process*)>
c00209d4:	83 c4 10             	add    esp,0x10
c00209d7:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00209db:	83 ec 08             	sub    esp,0x8
c00209de:	6a 01                	push   0x1
c00209e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00209e4:	e8 89 21 ff ff       	call   c0012b72 <File::open(FileOpenMode)>
c00209e9:	83 c4 10             	add    esp,0x10
c00209ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00209f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00209f2:	83 c0 0c             	add    eax,0xc
c00209f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00209f7:	83 ec 0c             	sub    esp,0xc
c00209fa:	8d 54 24 14          	lea    edx,[esp+0x14]
c00209fe:	52                   	push   edx
c00209ff:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020a03:	52                   	push   edx
c0020a04:	6a 00                	push   0x0
c0020a06:	6a 04                	push   0x4
c0020a08:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020a0c:	ff d0                	call   eax
c0020a0e:	83 c4 20             	add    esp,0x20
c0020a11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a15:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020a1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020a1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020a23:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020a26:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020a29:	83 ec 04             	sub    esp,0x4
c0020a2c:	52                   	push   edx
c0020a2d:	50                   	push   eax
c0020a2e:	68 63 ce 02 c0       	push   0xc002ce63
c0020a33:	e8 77 1b ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0020a38:	83 c4 10             	add    esp,0x10
c0020a3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020a3f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020a42:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020a45:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020a49:	83 ec 0c             	sub    esp,0xc
c0020a4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020a50:	e8 7b 21 ff ff       	call   c0012bd0 <File::close()>
c0020a55:	83 c4 10             	add    esp,0x10
c0020a58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a5c:	ba 00 00 00 00       	mov    edx,0x0
c0020a61:	83 c4 28             	add    esp,0x28
c0020a64:	5b                   	pop    ebx
c0020a65:	c3                   	ret    

c0020a66 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020a66:	57                   	push   edi
c0020a67:	56                   	push   esi
c0020a68:	53                   	push   ebx
c0020a69:	81 ec 50 02 00 00    	sub    esp,0x250
c0020a6f:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020a77:	74 0a                	je     c0020a83 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020a79:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020a81:	75 0a                	jne    c0020a8d <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020a83:	b8 04 00 00 00       	mov    eax,0x4
c0020a88:	e9 29 01 00 00       	jmp    c0020bb6 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020a8d:	83 ec 08             	sub    esp,0x8
c0020a90:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020a97:	50                   	push   eax
c0020a98:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020a9f:	e8 0f 56 fe ff       	call   c00060b3 <f_readdir>
c0020aa4:	83 c4 10             	add    esp,0x10
c0020aa7:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020aae:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020ab5:	83 ec 0c             	sub    esp,0xc
c0020ab8:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020abf:	83 c0 1a             	add    eax,0x1a
c0020ac2:	50                   	push   eax
c0020ac3:	e8 a4 fc fd ff       	call   c000076c <strlen>
c0020ac8:	83 c4 10             	add    esp,0x10
c0020acb:	ba 00 00 00 00       	mov    edx,0x0
c0020ad0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020ad4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020ad8:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020adf:	0f b6 c0             	movzx  eax,al
c0020ae2:	83 e0 10             	and    eax,0x10
c0020ae5:	74 07                	je     c0020aee <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020ae7:	b8 02 00 00 00       	mov    eax,0x2
c0020aec:	eb 05                	jmp    c0020af3 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020aee:	b8 01 00 00 00       	mov    eax,0x1
c0020af3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020af7:	83 ec 08             	sub    esp,0x8
c0020afa:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b01:	83 c0 1a             	add    eax,0x1a
c0020b04:	50                   	push   eax
c0020b05:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020b09:	83 c0 10             	add    eax,0x10
c0020b0c:	50                   	push   eax
c0020b0d:	e8 fa fc fd ff       	call   c000080c <strcpy>
c0020b12:	83 c4 10             	add    esp,0x10
c0020b15:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020b1c:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020b23:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020b27:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020b2e:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020b35:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020b3c:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020b43:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020b4a:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020b51:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020b58:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020b5f:	89 c6                	mov    esi,eax
c0020b61:	89 d7                	mov    edi,edx
c0020b63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020b65:	89 c8                	mov    eax,ecx
c0020b67:	89 fa                	mov    edx,edi
c0020b69:	89 f3                	mov    ebx,esi
c0020b6b:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020b72:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020b79:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020b80:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020b87:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020b8d:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020b94:	84 c0                	test   al,al
c0020b96:	75 07                	jne    c0020b9f <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020b98:	b8 07 00 00 00       	mov    eax,0x7
c0020b9d:	eb 17                	jmp    c0020bb6 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020b9f:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020ba6:	85 c0                	test   eax,eax
c0020ba8:	75 07                	jne    c0020bb1 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020baa:	b8 00 00 00 00       	mov    eax,0x0
c0020baf:	eb 05                	jmp    c0020bb6 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020bb1:	b8 01 00 00 00       	mov    eax,0x1
c0020bb6:	81 c4 50 02 00 00    	add    esp,0x250
c0020bbc:	5b                   	pop    ebx
c0020bbd:	5e                   	pop    esi
c0020bbe:	5f                   	pop    edi
c0020bbf:	c3                   	ret    

c0020bc0 <FAT::read(void*, unsigned long, void*, int*)>:
c0020bc0:	83 ec 1c             	sub    esp,0x1c
c0020bc3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020bc8:	74 07                	je     c0020bd1 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020bca:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020bcf:	75 07                	jne    c0020bd8 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020bd1:	b8 04 00 00 00       	mov    eax,0x4
c0020bd6:	eb 3d                	jmp    c0020c15 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020bd8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bdc:	50                   	push   eax
c0020bdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020be1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020be5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020be9:	e8 a5 47 fe ff       	call   c0005393 <f_read>
c0020bee:	83 c4 10             	add    esp,0x10
c0020bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bf5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bf9:	89 c2                	mov    edx,eax
c0020bfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020bff:	89 10                	mov    DWORD PTR [eax],edx
c0020c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c05:	85 c0                	test   eax,eax
c0020c07:	75 07                	jne    c0020c10 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c09:	b8 00 00 00 00       	mov    eax,0x0
c0020c0e:	eb 05                	jmp    c0020c15 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c10:	b8 01 00 00 00       	mov    eax,0x1
c0020c15:	83 c4 1c             	add    esp,0x1c
c0020c18:	c3                   	ret    
c0020c19:	90                   	nop

c0020c1a <FAT::write(void*, unsigned long, void*, int*)>:
c0020c1a:	83 ec 1c             	sub    esp,0x1c
c0020c1d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c22:	74 07                	je     c0020c2b <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c24:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c29:	75 07                	jne    c0020c32 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c2b:	b8 04 00 00 00       	mov    eax,0x4
c0020c30:	eb 3d                	jmp    c0020c6f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c32:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c36:	50                   	push   eax
c0020c37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c3f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c43:	e8 cb 49 fe ff       	call   c0005613 <f_write>
c0020c48:	83 c4 10             	add    esp,0x10
c0020c4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c53:	89 c2                	mov    edx,eax
c0020c55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c59:	89 10                	mov    DWORD PTR [eax],edx
c0020c5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c5f:	85 c0                	test   eax,eax
c0020c61:	75 07                	jne    c0020c6a <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020c63:	b8 00 00 00 00       	mov    eax,0x0
c0020c68:	eb 05                	jmp    c0020c6f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c6a:	b8 01 00 00 00       	mov    eax,0x1
c0020c6f:	83 c4 1c             	add    esp,0x1c
c0020c72:	c3                   	ret    
c0020c73:	90                   	nop

c0020c74 <FAT::close(void*)>:
c0020c74:	83 ec 1c             	sub    esp,0x1c
c0020c77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c7c:	75 07                	jne    c0020c85 <FAT::close(void*)+0x11>
c0020c7e:	b8 04 00 00 00       	mov    eax,0x4
c0020c83:	eb 36                	jmp    c0020cbb <FAT::close(void*)+0x47>
c0020c85:	83 ec 0c             	sub    esp,0xc
c0020c88:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c8c:	e8 18 4e fe ff       	call   c0005aa9 <f_close>
c0020c91:	83 c4 10             	add    esp,0x10
c0020c94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c98:	83 ec 0c             	sub    esp,0xc
c0020c9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c9f:	e8 22 e9 fe ff       	call   c000f5c6 <free>
c0020ca4:	83 c4 10             	add    esp,0x10
c0020ca7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cab:	85 c0                	test   eax,eax
c0020cad:	75 07                	jne    c0020cb6 <FAT::close(void*)+0x42>
c0020caf:	b8 00 00 00 00       	mov    eax,0x0
c0020cb4:	eb 05                	jmp    c0020cbb <FAT::close(void*)+0x47>
c0020cb6:	b8 01 00 00 00       	mov    eax,0x1
c0020cbb:	83 c4 1c             	add    esp,0x1c
c0020cbe:	c3                   	ret    
c0020cbf:	90                   	nop

c0020cc0 <FAT::closeDir(void*)>:
c0020cc0:	83 ec 1c             	sub    esp,0x1c
c0020cc3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cc8:	75 07                	jne    c0020cd1 <FAT::closeDir(void*)+0x11>
c0020cca:	b8 04 00 00 00       	mov    eax,0x4
c0020ccf:	eb 36                	jmp    c0020d07 <FAT::closeDir(void*)+0x47>
c0020cd1:	83 ec 0c             	sub    esp,0xc
c0020cd4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cd8:	e8 b4 53 fe ff       	call   c0006091 <f_closedir>
c0020cdd:	83 c4 10             	add    esp,0x10
c0020ce0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ce4:	83 ec 0c             	sub    esp,0xc
c0020ce7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ceb:	e8 d6 e8 fe ff       	call   c000f5c6 <free>
c0020cf0:	83 c4 10             	add    esp,0x10
c0020cf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cf7:	85 c0                	test   eax,eax
c0020cf9:	75 07                	jne    c0020d02 <FAT::closeDir(void*)+0x42>
c0020cfb:	b8 00 00 00 00       	mov    eax,0x0
c0020d00:	eb 05                	jmp    c0020d07 <FAT::closeDir(void*)+0x47>
c0020d02:	b8 01 00 00 00       	mov    eax,0x1
c0020d07:	83 c4 1c             	add    esp,0x1c
c0020d0a:	c3                   	ret    
c0020d0b:	90                   	nop

c0020d0c <FAT::seek(void*, unsigned long long)>:
c0020d0c:	83 ec 2c             	sub    esp,0x2c
c0020d0f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d17:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d1f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d24:	75 07                	jne    c0020d2d <FAT::seek(void*, unsigned long long)+0x21>
c0020d26:	b8 04 00 00 00       	mov    eax,0x4
c0020d2b:	eb 2f                	jmp    c0020d5c <FAT::seek(void*, unsigned long long)+0x50>
c0020d2d:	83 ec 04             	sub    esp,0x4
c0020d30:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d34:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d38:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020d3c:	e8 97 4d fe ff       	call   c0005ad8 <f_lseek>
c0020d41:	83 c4 10             	add    esp,0x10
c0020d44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d4c:	85 c0                	test   eax,eax
c0020d4e:	75 07                	jne    c0020d57 <FAT::seek(void*, unsigned long long)+0x4b>
c0020d50:	b8 00 00 00 00       	mov    eax,0x0
c0020d55:	eb 05                	jmp    c0020d5c <FAT::seek(void*, unsigned long long)+0x50>
c0020d57:	b8 01 00 00 00       	mov    eax,0x1
c0020d5c:	83 c4 2c             	add    esp,0x2c
c0020d5f:	c3                   	ret    

c0020d60 <fatWrapperReadDisk>:
c0020d60:	83 ec 1c             	sub    esp,0x1c
c0020d63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d67:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020d76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020d7a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d7f:	8b 04 85 40 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0cc0]
c0020d86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020d8a:	83 ec 0c             	sub    esp,0xc
c0020d8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d91:	52                   	push   edx
c0020d92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d9a:	50                   	push   eax
c0020d9b:	e8 8c 51 ff ff       	call   c0015f2c <LogicalDisk::read(unsigned long long, int, void*)>
c0020da0:	83 c4 20             	add    esp,0x20
c0020da3:	83 c4 1c             	add    esp,0x1c
c0020da6:	c3                   	ret    

c0020da7 <fatWrapperWriteDisk>:
c0020da7:	83 ec 1c             	sub    esp,0x1c
c0020daa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dae:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020db2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020db6:	89 04 24             	mov    DWORD PTR [esp],eax
c0020db9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020dbd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020dc1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dc6:	8b 04 85 40 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0cc0]
c0020dcd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020dd1:	83 ec 0c             	sub    esp,0xc
c0020dd4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dd8:	52                   	push   edx
c0020dd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ddd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020de1:	50                   	push   eax
c0020de2:	e8 b1 51 ff ff       	call   c0015f98 <LogicalDisk::write(unsigned long long, int, void*)>
c0020de7:	83 c4 20             	add    esp,0x20
c0020dea:	83 c4 1c             	add    esp,0x1c
c0020ded:	c3                   	ret    

c0020dee <fatWrapperIoctl>:
c0020dee:	53                   	push   ebx
c0020def:	83 ec 28             	sub    esp,0x28
c0020df2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020df6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020dfa:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020dfe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e02:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e07:	75 31                	jne    c0020e3a <fatWrapperIoctl+0x4c>
c0020e09:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e0d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e11:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e16:	8b 04 85 40 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0cc0]
c0020e1d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e23:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e29:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e2d:	66 89 02             	mov    WORD PTR [edx],ax
c0020e30:	b8 00 00 00 00       	mov    eax,0x0
c0020e35:	e9 b2 00 00 00       	jmp    c0020eec <fatWrapperIoctl+0xfe>
c0020e3a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020e3f:	75 6a                	jne    c0020eab <fatWrapperIoctl+0xbd>
c0020e41:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e49:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e4e:	8b 04 85 40 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0cc0]
c0020e55:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e5b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020e61:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020e67:	89 c8                	mov    eax,ecx
c0020e69:	89 da                	mov    edx,ebx
c0020e6b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020e6f:	c1 e0 0a             	shl    eax,0xa
c0020e72:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020e77:	8b 0c 8d 40 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0cc0]
c0020e7e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020e84:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020e8a:	89 cb                	mov    ebx,ecx
c0020e8c:	c1 fb 1f             	sar    ebx,0x1f
c0020e8f:	53                   	push   ebx
c0020e90:	51                   	push   ecx
c0020e91:	52                   	push   edx
c0020e92:	50                   	push   eax
c0020e93:	e8 0c 61 00 00       	call   c0026fa4 <__udivdi3>
c0020e98:	83 c4 10             	add    esp,0x10
c0020e9b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020e9f:	89 01                	mov    DWORD PTR [ecx],eax
c0020ea1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020ea4:	b8 00 00 00 00       	mov    eax,0x0
c0020ea9:	eb 41                	jmp    c0020eec <fatWrapperIoctl+0xfe>
c0020eab:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020eb0:	75 07                	jne    c0020eb9 <fatWrapperIoctl+0xcb>
c0020eb2:	b8 00 00 00 00       	mov    eax,0x0
c0020eb7:	eb 33                	jmp    c0020eec <fatWrapperIoctl+0xfe>
c0020eb9:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020ebe:	75 19                	jne    c0020ed9 <fatWrapperIoctl+0xeb>
c0020ec0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ec4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020ec8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ecc:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020ed2:	b8 00 00 00 00       	mov    eax,0x0
c0020ed7:	eb 13                	jmp    c0020eec <fatWrapperIoctl+0xfe>
c0020ed9:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020ede:	75 07                	jne    c0020ee7 <fatWrapperIoctl+0xf9>
c0020ee0:	b8 00 00 00 00       	mov    eax,0x0
c0020ee5:	eb 05                	jmp    c0020eec <fatWrapperIoctl+0xfe>
c0020ee7:	b8 04 00 00 00       	mov    eax,0x4
c0020eec:	83 c4 28             	add    esp,0x28
c0020eef:	5b                   	pop    ebx
c0020ef0:	c3                   	ret    
c0020ef1:	90                   	nop

c0020ef2 <FAT::FAT()>:
c0020ef2:	83 ec 1c             	sub    esp,0x1c
c0020ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ef9:	83 ec 0c             	sub    esp,0xc
c0020efc:	50                   	push   eax
c0020efd:	e8 b8 19 ff ff       	call   c00128ba <Filesystem::Filesystem()>
c0020f02:	83 c4 10             	add    esp,0x10
c0020f05:	ba a0 ce 02 c0       	mov    edx,0xc002cea0
c0020f0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f0e:	89 10                	mov    DWORD PTR [eax],edx
c0020f10:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c0020f1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f22:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f27:	7f 15                	jg     c0020f3e <FAT::FAT()+0x4c>
c0020f29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f2d:	c7 04 85 80 23 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcdc80],0xffffffff
c0020f38:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020f3c:	eb e4                	jmp    c0020f22 <FAT::FAT()+0x30>
c0020f3e:	90                   	nop
c0020f3f:	83 c4 1c             	add    esp,0x1c
c0020f42:	c3                   	ret    
c0020f43:	90                   	nop

c0020f44 <FAT::fixFilepath(char*)>:
c0020f44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f48:	8a 00                	mov    al,BYTE PTR [eax]
c0020f4a:	3c 40                	cmp    al,0x40
c0020f4c:	7e 2c                	jle    c0020f7a <FAT::fixFilepath(char*)+0x36>
c0020f4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f52:	8a 00                	mov    al,BYTE PTR [eax]
c0020f54:	83 e8 41             	sub    eax,0x41
c0020f57:	88 c2                	mov    dl,al
c0020f59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f5d:	88 10                	mov    BYTE PTR [eax],dl
c0020f5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f63:	8a 00                	mov    al,BYTE PTR [eax]
c0020f65:	0f be c0             	movsx  eax,al
c0020f68:	8b 04 85 80 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdc80]
c0020f6f:	83 c0 30             	add    eax,0x30
c0020f72:	88 c2                	mov    dl,al
c0020f74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f78:	88 10                	mov    BYTE PTR [eax],dl
c0020f7a:	90                   	nop
c0020f7b:	c3                   	ret    

c0020f7c <FAT::open(char const*, void**, FileOpenMode)>:
c0020f7c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f82:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f8a:	74 0a                	je     c0020f96 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020f8c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020f94:	75 0a                	jne    c0020fa0 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020f96:	b8 04 00 00 00       	mov    eax,0x4
c0020f9b:	e9 fd 00 00 00       	jmp    c002109d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020fa0:	83 ec 08             	sub    esp,0x8
c0020fa3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020faa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020fae:	50                   	push   eax
c0020faf:	e8 58 f8 fd ff       	call   c000080c <strcpy>
c0020fb4:	83 c4 10             	add    esp,0x10
c0020fb7:	83 ec 08             	sub    esp,0x8
c0020fba:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020fbe:	50                   	push   eax
c0020fbf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fc6:	e8 79 ff ff ff       	call   c0020f44 <FAT::fixFilepath(char*)>
c0020fcb:	83 c4 10             	add    esp,0x10
c0020fce:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020fd6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020fdd:	83 e0 01             	and    eax,0x1
c0020fe0:	74 08                	je     c0020fea <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020fe2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020fea:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ff1:	83 e0 04             	and    eax,0x4
c0020ff4:	74 10                	je     c0021006 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020ff6:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020ffe:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021006:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002100d:	83 e0 02             	and    eax,0x2
c0021010:	74 08                	je     c002101a <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021012:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002101a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021021:	83 e0 08             	and    eax,0x8
c0021024:	74 08                	je     c002102e <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021026:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002102e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021035:	83 e0 10             	and    eax,0x10
c0021038:	74 08                	je     c0021042 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002103a:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021042:	83 ec 0c             	sub    esp,0xc
c0021045:	68 50 02 00 00       	push   0x250
c002104a:	e8 67 e5 fe ff       	call   c000f5b6 <malloc>
c002104f:	83 c4 10             	add    esp,0x10
c0021052:	89 c2                	mov    edx,eax
c0021054:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002105b:	89 10                	mov    DWORD PTR [eax],edx
c002105d:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021065:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002106c:	8b 00                	mov    eax,DWORD PTR [eax]
c002106e:	83 ec 04             	sub    esp,0x4
c0021071:	52                   	push   edx
c0021072:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021076:	52                   	push   edx
c0021077:	50                   	push   eax
c0021078:	e8 da 3e fe ff       	call   c0004f57 <f_open>
c002107d:	83 c4 10             	add    esp,0x10
c0021080:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021087:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002108f:	74 07                	je     c0021098 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021091:	b8 01 00 00 00       	mov    eax,0x1
c0021096:	eb 05                	jmp    c002109d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021098:	b8 00 00 00 00       	mov    eax,0x0
c002109d:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210a3:	c3                   	ret    

c00210a4 <FAT::openDir(char const*, void**)>:
c00210a4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210aa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210b2:	74 0a                	je     c00210be <FAT::openDir(char const*, void**)+0x1a>
c00210b4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210bc:	75 07                	jne    c00210c5 <FAT::openDir(char const*, void**)+0x21>
c00210be:	b8 04 00 00 00       	mov    eax,0x4
c00210c3:	eb 7d                	jmp    c0021142 <FAT::openDir(char const*, void**)+0x9e>
c00210c5:	83 ec 08             	sub    esp,0x8
c00210c8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210d3:	50                   	push   eax
c00210d4:	e8 33 f7 fd ff       	call   c000080c <strcpy>
c00210d9:	83 c4 10             	add    esp,0x10
c00210dc:	83 ec 08             	sub    esp,0x8
c00210df:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210e3:	50                   	push   eax
c00210e4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210eb:	e8 54 fe ff ff       	call   c0020f44 <FAT::fixFilepath(char*)>
c00210f0:	83 c4 10             	add    esp,0x10
c00210f3:	83 ec 0c             	sub    esp,0xc
c00210f6:	6a 4c                	push   0x4c
c00210f8:	e8 b9 e4 fe ff       	call   c000f5b6 <malloc>
c00210fd:	83 c4 10             	add    esp,0x10
c0021100:	89 c2                	mov    edx,eax
c0021102:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021109:	89 10                	mov    DWORD PTR [eax],edx
c002110b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021112:	8b 00                	mov    eax,DWORD PTR [eax]
c0021114:	83 ec 08             	sub    esp,0x8
c0021117:	8d 54 24 14          	lea    edx,[esp+0x14]
c002111b:	52                   	push   edx
c002111c:	50                   	push   eax
c002111d:	e8 6d 4e fe ff       	call   c0005f8f <f_opendir>
c0021122:	83 c4 10             	add    esp,0x10
c0021125:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002112c:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021134:	74 07                	je     c002113d <FAT::openDir(char const*, void**)+0x99>
c0021136:	b8 01 00 00 00       	mov    eax,0x1
c002113b:	eb 05                	jmp    c0021142 <FAT::openDir(char const*, void**)+0x9e>
c002113d:	b8 00 00 00 00       	mov    eax,0x0
c0021142:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021148:	c3                   	ret    
c0021149:	90                   	nop

c002114a <FAT::stat(char const*, unsigned long long*, bool*)>:
c002114a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021150:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021158:	75 0a                	jne    c0021164 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002115a:	b8 04 00 00 00       	mov    eax,0x4
c002115f:	e9 c9 00 00 00       	jmp    c002122d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021164:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002116c:	75 0a                	jne    c0021178 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002116e:	b8 04 00 00 00       	mov    eax,0x4
c0021173:	e9 b5 00 00 00       	jmp    c002122d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021178:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021180:	75 0a                	jne    c002118c <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021182:	b8 04 00 00 00       	mov    eax,0x4
c0021187:	e9 a1 00 00 00       	jmp    c002122d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002118c:	83 ec 08             	sub    esp,0x8
c002118f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021196:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002119d:	50                   	push   eax
c002119e:	e8 69 f6 fd ff       	call   c000080c <strcpy>
c00211a3:	83 c4 10             	add    esp,0x10
c00211a6:	83 ec 08             	sub    esp,0x8
c00211a9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00211b0:	50                   	push   eax
c00211b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211b8:	e8 87 fd ff ff       	call   c0020f44 <FAT::fixFilepath(char*)>
c00211bd:	83 c4 10             	add    esp,0x10
c00211c0:	83 ec 08             	sub    esp,0x8
c00211c3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211c7:	50                   	push   eax
c00211c8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211cf:	50                   	push   eax
c00211d0:	e8 79 4f fe ff       	call   c000614e <f_stat>
c00211d5:	83 c4 10             	add    esp,0x10
c00211d8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00211df:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00211e6:	85 c0                	test   eax,eax
c00211e8:	74 07                	je     c00211f1 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00211ea:	83 f8 04             	cmp    eax,0x4
c00211ed:	74 32                	je     c0021221 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00211ef:	eb 37                	jmp    c0021228 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00211f1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00211f5:	0f b6 c0             	movzx  eax,al
c00211f8:	83 e0 10             	and    eax,0x10
c00211fb:	0f 95 c2             	setne  dl
c00211fe:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021205:	88 10                	mov    BYTE PTR [eax],dl
c0021207:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002120a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002120e:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021215:	89 01                	mov    DWORD PTR [ecx],eax
c0021217:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002121a:	b8 00 00 00 00       	mov    eax,0x0
c002121f:	eb 0c                	jmp    c002122d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021221:	b8 02 00 00 00       	mov    eax,0x2
c0021226:	eb 05                	jmp    c002122d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021228:	b8 01 00 00 00       	mov    eax,0x1
c002122d:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021233:	c3                   	ret    

c0021234 <FAT::unlink(char const*)>:
c0021234:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002123a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021242:	75 07                	jne    c002124b <FAT::unlink(char const*)+0x17>
c0021244:	b8 04 00 00 00       	mov    eax,0x4
c0021249:	eb 5c                	jmp    c00212a7 <FAT::unlink(char const*)+0x73>
c002124b:	83 ec 08             	sub    esp,0x8
c002124e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021255:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021259:	50                   	push   eax
c002125a:	e8 ad f5 fd ff       	call   c000080c <strcpy>
c002125f:	83 c4 10             	add    esp,0x10
c0021262:	83 ec 08             	sub    esp,0x8
c0021265:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021269:	50                   	push   eax
c002126a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021271:	e8 ce fc ff ff       	call   c0020f44 <FAT::fixFilepath(char*)>
c0021276:	83 c4 10             	add    esp,0x10
c0021279:	83 ec 0c             	sub    esp,0xc
c002127c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021280:	50                   	push   eax
c0021281:	e8 1a 52 fe ff       	call   c00064a0 <f_unlink>
c0021286:	83 c4 10             	add    esp,0x10
c0021289:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021290:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021297:	85 c0                	test   eax,eax
c0021299:	75 07                	jne    c00212a2 <FAT::unlink(char const*)+0x6e>
c002129b:	b8 00 00 00 00       	mov    eax,0x0
c00212a0:	eb 05                	jmp    c00212a7 <FAT::unlink(char const*)+0x73>
c00212a2:	b8 01 00 00 00       	mov    eax,0x1
c00212a7:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212ad:	c3                   	ret    

c00212ae <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00212ae:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00212b4:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00212bb:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00212c2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00212c6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00212ca:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00212d2:	75 0a                	jne    c00212de <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00212d4:	b8 04 00 00 00       	mov    eax,0x4
c00212d9:	e9 1c 01 00 00       	jmp    c00213fa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00212de:	83 ec 08             	sub    esp,0x8
c00212e1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00212e8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00212ec:	50                   	push   eax
c00212ed:	e8 1a f5 fd ff       	call   c000080c <strcpy>
c00212f2:	83 c4 10             	add    esp,0x10
c00212f5:	83 ec 08             	sub    esp,0x8
c00212f8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00212fc:	50                   	push   eax
c00212fd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021304:	e8 3b fc ff ff       	call   c0020f44 <FAT::fixFilepath(char*)>
c0021309:	83 c4 10             	add    esp,0x10
c002130c:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021314:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002131c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021321:	83 e0 01             	and    eax,0x1
c0021324:	74 08                	je     c002132e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021326:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002132e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021333:	83 e0 02             	and    eax,0x2
c0021336:	74 08                	je     c0021340 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021338:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021340:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021345:	83 e0 04             	and    eax,0x4
c0021348:	74 08                	je     c0021352 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c002134a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021352:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021357:	83 e0 08             	and    eax,0x8
c002135a:	74 08                	je     c0021364 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002135c:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021364:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021369:	83 e0 01             	and    eax,0x1
c002136c:	74 08                	je     c0021376 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002136e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021376:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002137b:	83 e0 02             	and    eax,0x2
c002137e:	74 08                	je     c0021388 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021380:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021388:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002138d:	83 e0 04             	and    eax,0x4
c0021390:	74 08                	je     c002139a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021392:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002139a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002139f:	83 e0 08             	and    eax,0x8
c00213a2:	74 08                	je     c00213ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00213a4:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00213ac:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00213b3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00213ba:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00213c2:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00213ca:	83 ec 04             	sub    esp,0x4
c00213cd:	52                   	push   edx
c00213ce:	50                   	push   eax
c00213cf:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213d3:	50                   	push   eax
c00213d4:	e8 69 57 fe ff       	call   c0006b42 <f_chmod>
c00213d9:	83 c4 10             	add    esp,0x10
c00213dc:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00213e3:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00213ea:	85 c0                	test   eax,eax
c00213ec:	75 07                	jne    c00213f5 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00213ee:	b8 00 00 00 00       	mov    eax,0x0
c00213f3:	eb 05                	jmp    c00213fa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00213f5:	b8 01 00 00 00       	mov    eax,0x1
c00213fa:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021400:	c3                   	ret    
c0021401:	90                   	nop

c0021402 <FAT::rename(char const*, char const*)>:
c0021402:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021408:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021410:	74 0a                	je     c002141c <FAT::rename(char const*, char const*)+0x1a>
c0021412:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002141a:	75 0a                	jne    c0021426 <FAT::rename(char const*, char const*)+0x24>
c002141c:	b8 04 00 00 00       	mov    eax,0x4
c0021421:	e9 98 00 00 00       	jmp    c00214be <FAT::rename(char const*, char const*)+0xbc>
c0021426:	83 ec 08             	sub    esp,0x8
c0021429:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021430:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021437:	50                   	push   eax
c0021438:	e8 cf f3 fd ff       	call   c000080c <strcpy>
c002143d:	83 c4 10             	add    esp,0x10
c0021440:	83 ec 08             	sub    esp,0x8
c0021443:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002144a:	50                   	push   eax
c002144b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021452:	e8 ed fa ff ff       	call   c0020f44 <FAT::fixFilepath(char*)>
c0021457:	83 c4 10             	add    esp,0x10
c002145a:	83 ec 08             	sub    esp,0x8
c002145d:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021464:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021468:	50                   	push   eax
c0021469:	e8 9e f3 fd ff       	call   c000080c <strcpy>
c002146e:	83 c4 10             	add    esp,0x10
c0021471:	83 ec 08             	sub    esp,0x8
c0021474:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021478:	50                   	push   eax
c0021479:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021480:	e8 bf fa ff ff       	call   c0020f44 <FAT::fixFilepath(char*)>
c0021485:	83 c4 10             	add    esp,0x10
c0021488:	83 ec 08             	sub    esp,0x8
c002148b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002148f:	50                   	push   eax
c0021490:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021497:	50                   	push   eax
c0021498:	e8 b2 53 fe ff       	call   c000684f <f_rename>
c002149d:	83 c4 10             	add    esp,0x10
c00214a0:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00214a7:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00214ae:	85 c0                	test   eax,eax
c00214b0:	75 07                	jne    c00214b9 <FAT::rename(char const*, char const*)+0xb7>
c00214b2:	b8 00 00 00 00       	mov    eax,0x0
c00214b7:	eb 05                	jmp    c00214be <FAT::rename(char const*, char const*)+0xbc>
c00214b9:	b8 01 00 00 00       	mov    eax,0x1
c00214be:	81 c4 1c 02 00 00    	add    esp,0x21c
c00214c4:	c3                   	ret    
c00214c5:	90                   	nop

c00214c6 <FAT::mkdir(char const*)>:
c00214c6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00214cc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00214d4:	75 07                	jne    c00214dd <FAT::mkdir(char const*)+0x17>
c00214d6:	b8 04 00 00 00       	mov    eax,0x4
c00214db:	eb 5c                	jmp    c0021539 <FAT::mkdir(char const*)+0x73>
c00214dd:	83 ec 08             	sub    esp,0x8
c00214e0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00214e7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214eb:	50                   	push   eax
c00214ec:	e8 1b f3 fd ff       	call   c000080c <strcpy>
c00214f1:	83 c4 10             	add    esp,0x10
c00214f4:	83 ec 08             	sub    esp,0x8
c00214f7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214fb:	50                   	push   eax
c00214fc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021503:	e8 3c fa ff ff       	call   c0020f44 <FAT::fixFilepath(char*)>
c0021508:	83 c4 10             	add    esp,0x10
c002150b:	83 ec 0c             	sub    esp,0xc
c002150e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021512:	50                   	push   eax
c0021513:	e8 0b 51 fe ff       	call   c0006623 <f_mkdir>
c0021518:	83 c4 10             	add    esp,0x10
c002151b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021522:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021529:	85 c0                	test   eax,eax
c002152b:	75 07                	jne    c0021534 <FAT::mkdir(char const*)+0x6e>
c002152d:	b8 00 00 00 00       	mov    eax,0x0
c0021532:	eb 05                	jmp    c0021539 <FAT::mkdir(char const*)+0x73>
c0021534:	b8 01 00 00 00       	mov    eax,0x1
c0021539:	81 c4 1c 01 00 00    	add    esp,0x11c
c002153f:	c3                   	ret    

c0021540 <FAT::exists(char const*)>:
c0021540:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021546:	83 ec 08             	sub    esp,0x8
c0021549:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021550:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021554:	50                   	push   eax
c0021555:	e8 b2 f2 fd ff       	call   c000080c <strcpy>
c002155a:	83 c4 10             	add    esp,0x10
c002155d:	83 ec 08             	sub    esp,0x8
c0021560:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021564:	50                   	push   eax
c0021565:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002156c:	e8 d3 f9 ff ff       	call   c0020f44 <FAT::fixFilepath(char*)>
c0021571:	83 c4 10             	add    esp,0x10
c0021574:	83 ec 08             	sub    esp,0x8
c0021577:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002157e:	50                   	push   eax
c002157f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021583:	50                   	push   eax
c0021584:	e8 c5 4b fe ff       	call   c000614e <f_stat>
c0021589:	83 c4 10             	add    esp,0x10
c002158c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021593:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002159a:	85 c0                	test   eax,eax
c002159c:	75 04                	jne    c00215a2 <FAT::exists(char const*)+0x62>
c002159e:	b0 01                	mov    al,0x1
c00215a0:	eb 02                	jmp    c00215a4 <FAT::exists(char const*)+0x64>
c00215a2:	b0 00                	mov    al,0x0
c00215a4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00215aa:	c3                   	ret    
c00215ab:	90                   	nop

c00215ac <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00215ac:	b8 08 00 00 00       	mov    eax,0x8
c00215b1:	c3                   	ret    

c00215b2 <ISO9660::seek(void*, unsigned long long)>:
c00215b2:	53                   	push   ebx
c00215b3:	b8 04 00 00 00       	mov    eax,0x4
c00215b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00215bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00215c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00215c4:	85 d2                	test   edx,edx
c00215c6:	74 17                	je     c00215df <ISO9660::seek(void*, unsigned long long)+0x2d>
c00215c8:	89 c8                	mov    eax,ecx
c00215ca:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00215cd:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00215d0:	b8 01 00 00 00       	mov    eax,0x1
c00215d5:	73 08                	jae    c00215df <ISO9660::seek(void*, unsigned long long)+0x2d>
c00215d7:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00215da:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00215dd:	31 c0                	xor    eax,eax
c00215df:	5b                   	pop    ebx
c00215e0:	c3                   	ret    
c00215e1:	90                   	nop

c00215e2 <ISO9660::tell(void*, unsigned long long*)>:
c00215e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00215e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215ea:	85 d2                	test   edx,edx
c00215ec:	74 12                	je     c0021600 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00215ee:	85 c0                	test   eax,eax
c00215f0:	74 0e                	je     c0021600 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00215f2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00215f5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00215f8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00215fb:	89 10                	mov    DWORD PTR [eax],edx
c00215fd:	31 c0                	xor    eax,eax
c00215ff:	c3                   	ret    
c0021600:	b8 04 00 00 00       	mov    eax,0x4
c0021605:	c3                   	ret    

c0021606 <ISO9660::getName()>:
c0021606:	b8 00 cf 02 c0       	mov    eax,0xc002cf00
c002160b:	c3                   	ret    

c002160c <ISO9660::stat(void*, unsigned long long*)>:
c002160c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021610:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021614:	85 d2                	test   edx,edx
c0021616:	74 12                	je     c002162a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021618:	85 c0                	test   eax,eax
c002161a:	74 0e                	je     c002162a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002161c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002161f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021622:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021625:	89 10                	mov    DWORD PTR [eax],edx
c0021627:	31 c0                	xor    eax,eax
c0021629:	c3                   	ret    
c002162a:	b8 04 00 00 00       	mov    eax,0x4
c002162f:	c3                   	ret    

c0021630 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021630:	b8 01 00 00 00       	mov    eax,0x1
c0021635:	c3                   	ret    

c0021636 <ISO9660::unlink(char const*)>:
c0021636:	b8 01 00 00 00       	mov    eax,0x1
c002163b:	c3                   	ret    

c002163c <ISO9660::write(void*, unsigned long, void*, int*)>:
c002163c:	b8 01 00 00 00       	mov    eax,0x1
c0021641:	c3                   	ret    

c0021642 <ISO9660::rename(char const*, char const*)>:
c0021642:	b8 01 00 00 00       	mov    eax,0x1
c0021647:	c3                   	ret    

c0021648 <ISO9660::mkdir(char const*)>:
c0021648:	b8 01 00 00 00       	mov    eax,0x1
c002164d:	c3                   	ret    

c002164e <ISO9660::close(void*)>:
c002164e:	83 ec 0c             	sub    esp,0xc
c0021651:	b8 04 00 00 00       	mov    eax,0x4
c0021656:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002165a:	85 d2                	test   edx,edx
c002165c:	74 0e                	je     c002166c <ISO9660::close(void*)+0x1e>
c002165e:	83 ec 0c             	sub    esp,0xc
c0021661:	52                   	push   edx
c0021662:	e8 5f df fe ff       	call   c000f5c6 <free>
c0021667:	83 c4 10             	add    esp,0x10
c002166a:	31 c0                	xor    eax,eax
c002166c:	83 c4 0c             	add    esp,0xc
c002166f:	c3                   	ret    

c0021670 <ISO9660::closeDir(void*)>:
c0021670:	83 ec 0c             	sub    esp,0xc
c0021673:	b8 04 00 00 00       	mov    eax,0x4
c0021678:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002167c:	85 d2                	test   edx,edx
c002167e:	74 0e                	je     c002168e <ISO9660::closeDir(void*)+0x1e>
c0021680:	83 ec 0c             	sub    esp,0xc
c0021683:	52                   	push   edx
c0021684:	e8 3d df fe ff       	call   c000f5c6 <free>
c0021689:	83 c4 10             	add    esp,0x10
c002168c:	31 c0                	xor    eax,eax
c002168e:	83 c4 0c             	add    esp,0xc
c0021691:	c3                   	ret    

c0021692 <ISO9660::~ISO9660()>:
c0021692:	83 ec 0c             	sub    esp,0xc
c0021695:	ba 64 cf 02 c0       	mov    edx,0xc002cf64
c002169a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002169e:	89 10                	mov    DWORD PTR [eax],edx
c00216a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216a4:	83 ec 0c             	sub    esp,0xc
c00216a7:	50                   	push   eax
c00216a8:	e8 31 12 ff ff       	call   c00128de <Filesystem::~Filesystem()>
c00216ad:	83 c4 10             	add    esp,0x10
c00216b0:	90                   	nop
c00216b1:	83 c4 0c             	add    esp,0xc
c00216b4:	c3                   	ret    
c00216b5:	90                   	nop

c00216b6 <ISO9660::~ISO9660()>:
c00216b6:	83 ec 0c             	sub    esp,0xc
c00216b9:	83 ec 0c             	sub    esp,0xc
c00216bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216c0:	e8 cd ff ff ff       	call   c0021692 <ISO9660::~ISO9660()>
c00216c5:	83 c4 10             	add    esp,0x10
c00216c8:	83 ec 08             	sub    esp,0x8
c00216cb:	6a 08                	push   0x8
c00216cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216d1:	e8 f9 0d ff ff       	call   c00124cf <operator delete(void*, unsigned long)>
c00216d6:	83 c4 10             	add    esp,0x10
c00216d9:	83 c4 0c             	add    esp,0xc
c00216dc:	c3                   	ret    

c00216dd <__memmem(unsigned char*, int, unsigned char*, int)>:
c00216dd:	55                   	push   ebp
c00216de:	31 c9                	xor    ecx,ecx
c00216e0:	57                   	push   edi
c00216e1:	56                   	push   esi
c00216e2:	53                   	push   ebx
c00216e3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00216e7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00216eb:	89 eb                	mov    ebx,ebp
c00216ed:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00216f1:	39 ce                	cmp    esi,ecx
c00216f3:	7e 17                	jle    c002170c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00216f5:	31 d2                	xor    edx,edx
c00216f7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00216fb:	7d 13                	jge    c0021710 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00216fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021701:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021704:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021707:	75 0d                	jne    c0021716 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021709:	42                   	inc    edx
c002170a:	eb eb                	jmp    c00216f7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002170c:	31 c0                	xor    eax,eax
c002170e:	eb 0a                	jmp    c002171a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021710:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021714:	eb 04                	jmp    c002171a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021716:	41                   	inc    ecx
c0021717:	43                   	inc    ebx
c0021718:	eb d7                	jmp    c00216f1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002171a:	5b                   	pop    ebx
c002171b:	5e                   	pop    esi
c002171c:	5f                   	pop    edi
c002171d:	5d                   	pop    ebp
c002171e:	c3                   	ret    

c002171f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002171f:	57                   	push   edi
c0021720:	56                   	push   esi
c0021721:	53                   	push   ebx
c0021722:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021726:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002172a:	39 0d 60 24 03 c0    	cmp    DWORD PTR ds:0xc0032460,ecx
c0021730:	75 08                	jne    c002173a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021732:	38 05 d4 e2 02 c0    	cmp    BYTE PTR ds:0xc002e2d4,al
c0021738:	74 2b                	je     c0021765 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c002173a:	83 ec 0c             	sub    esp,0xc
c002173d:	a2 d4 e2 02 c0       	mov    ds:0xc002e2d4,al
c0021742:	68 80 24 03 c0       	push   0xc0032480
c0021747:	0f be c0             	movsx  eax,al
c002174a:	6a 01                	push   0x1
c002174c:	89 0d 60 24 03 c0    	mov    DWORD PTR ds:0xc0032460,ecx
c0021752:	31 db                	xor    ebx,ebx
c0021754:	53                   	push   ebx
c0021755:	51                   	push   ecx
c0021756:	ff 34 85 3c f2 02 c0 	push   DWORD PTR [eax*4-0x3ffd0dc4]
c002175d:	e8 ca 47 ff ff       	call   c0015f2c <LogicalDisk::read(unsigned long long, int, void*)>
c0021762:	83 c4 20             	add    esp,0x20
c0021765:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021769:	be 80 24 03 c0       	mov    esi,0xc0032480
c002176e:	b9 00 08 00 00       	mov    ecx,0x800
c0021773:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021775:	5b                   	pop    ebx
c0021776:	5e                   	pop    esi
c0021777:	5f                   	pop    edi
c0021778:	c3                   	ret    
c0021779:	90                   	nop

c002177a <ISO9660::tryMount(LogicalDisk*, int)>:
c002177a:	81 ec 10 08 00 00    	sub    esp,0x810
c0021780:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021787:	83 c0 41             	add    eax,0x41
c002178a:	0f be c0             	movsx  eax,al
c002178d:	50                   	push   eax
c002178e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021792:	50                   	push   eax
c0021793:	6a 10                	push   0x10
c0021795:	e8 85 ff ff ff       	call   c002171f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002179a:	83 c4 10             	add    esp,0x10
c002179d:	31 c0                	xor    eax,eax
c002179f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00217a4:	75 1d                	jne    c00217c3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217a6:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00217ab:	75 16                	jne    c00217c3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217ad:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00217b2:	75 0f                	jne    c00217c3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217b4:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00217b9:	75 08                	jne    c00217c3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217bb:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00217c0:	0f 94 c0             	sete   al
c00217c3:	81 c4 0c 08 00 00    	add    esp,0x80c
c00217c9:	c3                   	ret    

c00217ca <ISO9660::read(void*, unsigned long, void*, int*)>:
c00217ca:	55                   	push   ebp
c00217cb:	57                   	push   edi
c00217cc:	56                   	push   esi
c00217cd:	53                   	push   ebx
c00217ce:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00217d4:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00217db:	85 ed                	test   ebp,ebp
c00217dd:	0f 84 da 01 00 00    	je     c00219bd <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00217e3:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00217eb:	0f 84 cc 01 00 00    	je     c00219bd <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00217f1:	b8 01 00 00 00       	mov    eax,0x1
c00217f6:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00217fa:	0f 85 c2 01 00 00    	jne    c00219c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021800:	31 d2                	xor    edx,edx
c0021802:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021809:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002180c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c002180f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021812:	89 04 24             	mov    DWORD PTR [esp],eax
c0021815:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021819:	01 c8                	add    eax,ecx
c002181b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002181e:	11 da                	adc    edx,ebx
c0021820:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021824:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021828:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002182c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021830:	19 d7                	sbb    edi,edx
c0021832:	72 11                	jb     c0021845 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021834:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021837:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002183b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002183f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021843:	eb 0c                	jmp    c0021851 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021845:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021849:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002184d:	29 ce                	sub    esi,ecx
c002184f:	19 df                	sbb    edi,ebx
c0021851:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021854:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021857:	0f a4 c2 0b          	shld   edx,eax,0xb
c002185b:	c1 e0 0b             	shl    eax,0xb
c002185e:	01 c8                	add    eax,ecx
c0021860:	11 da                	adc    edx,ebx
c0021862:	89 04 24             	mov    DWORD PTR [esp],eax
c0021865:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021869:	51                   	push   ecx
c002186a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002186e:	50                   	push   eax
c002186f:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021873:	53                   	push   ebx
c0021874:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021878:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002187c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021880:	50                   	push   eax
c0021881:	e8 99 fe ff ff       	call   c002171f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021886:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021889:	b8 00 08 00 00       	mov    eax,0x800
c002188e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021894:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021898:	29 d0                	sub    eax,edx
c002189a:	83 c4 10             	add    esp,0x10
c002189d:	89 f9                	mov    ecx,edi
c002189f:	39 c6                	cmp    esi,eax
c00218a1:	83 d9 00             	sbb    ecx,0x0
c00218a4:	7d 1b                	jge    c00218c1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00218a6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00218ab:	75 12                	jne    c00218bf <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00218ad:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218ba:	e9 fa 00 00 00       	jmp    c00219b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00218bf:	89 f0                	mov    eax,esi
c00218c1:	01 d3                	add    ebx,edx
c00218c3:	31 d2                	xor    edx,edx
c00218c5:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00218c9:	39 c2                	cmp    edx,eax
c00218cb:	7d 14                	jge    c00218e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00218cd:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00218d4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00218d8:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00218db:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00218de:	42                   	inc    edx
c00218df:	eb e8                	jmp    c00218c9 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00218e1:	89 c2                	mov    edx,eax
c00218e3:	85 c0                	test   eax,eax
c00218e5:	79 02                	jns    c00218e9 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00218e7:	31 d2                	xor    edx,edx
c00218e9:	01 c2                	add    edx,eax
c00218eb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00218ee:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00218f5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00218f9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00218fd:	99                   	cdq    
c00218fe:	01 c1                	add    ecx,eax
c0021900:	11 d3                	adc    ebx,edx
c0021902:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021906:	29 c6                	sub    esi,eax
c0021908:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002190c:	19 d7                	sbb    edi,edx
c002190e:	89 34 24             	mov    DWORD PTR [esp],esi
c0021911:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021915:	b8 ff 07 00 00       	mov    eax,0x7ff
c002191a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002191d:	b8 00 00 00 00       	mov    eax,0x0
c0021922:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021926:	7d 43                	jge    c002196b <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021928:	52                   	push   edx
c0021929:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002192d:	50                   	push   eax
c002192e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021932:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021936:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002193a:	0f ac d0 0b          	shrd   eax,edx,0xb
c002193e:	50                   	push   eax
c002193f:	e8 db fd ff ff       	call   c002171f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021944:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002194c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021951:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021959:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021961:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021966:	83 c4 10             	add    esp,0x10
c0021969:	eb aa                	jmp    c0021915 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c002196b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002196f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021972:	74 2a                	je     c002199e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021974:	50                   	push   eax
c0021975:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021979:	50                   	push   eax
c002197a:	8d 74 24 28          	lea    esi,[esp+0x28]
c002197e:	56                   	push   esi
c002197f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021983:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021987:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c002198b:	51                   	push   ecx
c002198c:	e8 8e fd ff ff       	call   c002171f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021991:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021995:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021999:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002199b:	83 c4 10             	add    esp,0x10
c002199e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219a5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00219a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219ad:	89 18                	mov    DWORD PTR [eax],ebx
c00219af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219b3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00219b6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00219b9:	31 c0                	xor    eax,eax
c00219bb:	eb 05                	jmp    c00219c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00219bd:	b8 04 00 00 00       	mov    eax,0x4
c00219c2:	81 c4 2c 08 00 00    	add    esp,0x82c
c00219c8:	5b                   	pop    ebx
c00219c9:	5e                   	pop    esi
c00219ca:	5f                   	pop    edi
c00219cb:	5d                   	pop    ebp
c00219cc:	c3                   	ret    
c00219cd:	90                   	nop

c00219ce <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00219ce:	55                   	push   ebp
c00219cf:	57                   	push   edi
c00219d0:	56                   	push   esi
c00219d1:	53                   	push   ebx
c00219d2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00219d8:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c00219df:	85 ed                	test   ebp,ebp
c00219e1:	0f 84 51 02 00 00    	je     c0021c38 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00219e7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00219ef:	0f 84 43 02 00 00    	je     c0021c38 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00219f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219f8:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c00219fb:	75 0a                	jne    c0021a07 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00219fd:	b8 07 00 00 00       	mov    eax,0x7
c0021a02:	e9 36 02 00 00       	jmp    c0021c3d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021a07:	50                   	push   eax
c0021a08:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a0c:	50                   	push   eax
c0021a0d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a14:	53                   	push   ebx
c0021a15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021a18:	c1 e0 0b             	shl    eax,0xb
c0021a1b:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021a1e:	c1 e8 0b             	shr    eax,0xb
c0021a21:	50                   	push   eax
c0021a22:	e8 f8 fc ff ff       	call   c002171f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a27:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021a2a:	83 c4 10             	add    esp,0x10
c0021a2d:	89 c1                	mov    ecx,eax
c0021a2f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021a32:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021a38:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021a3b:	84 db                	test   bl,bl
c0021a3d:	0f 85 8b 00 00 00    	jne    c0021ace <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021a43:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021a49:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021a4c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021a52:	29 c6                	sub    esi,eax
c0021a54:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021a58:	89 f3                	mov    ebx,esi
c0021a5a:	89 f1                	mov    ecx,esi
c0021a5c:	c1 fb 1f             	sar    ebx,0x1f
c0021a5f:	01 f0                	add    eax,esi
c0021a61:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021a64:	11 da                	adc    edx,ebx
c0021a66:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a69:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a6d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a70:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a73:	89 d8                	mov    eax,ebx
c0021a75:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021a79:	ba 00 00 00 00       	mov    edx,0x0
c0021a7e:	19 f8                	sbb    eax,edi
c0021a80:	b8 00 00 00 00       	mov    eax,0x0
c0021a85:	73 08                	jae    c0021a8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021a87:	89 f0                	mov    eax,esi
c0021a89:	89 fa                	mov    edx,edi
c0021a8b:	29 c8                	sub    eax,ecx
c0021a8d:	19 da                	sbb    edx,ebx
c0021a8f:	89 d7                	mov    edi,edx
c0021a91:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021a94:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021a97:	09 c7                	or     edi,eax
c0021a99:	0f 84 5e ff ff ff    	je     c00219fd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021a9f:	57                   	push   edi
c0021aa0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021aa4:	50                   	push   eax
c0021aa5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021aac:	53                   	push   ebx
c0021aad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021ab0:	c1 e0 0b             	shl    eax,0xb
c0021ab3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021ab7:	c1 e8 0b             	shr    eax,0xb
c0021aba:	50                   	push   eax
c0021abb:	e8 5f fc ff ff       	call   c002171f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ac0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021ac3:	83 c4 10             	add    esp,0x10
c0021ac6:	25 ff 07 00 00       	and    eax,0x7ff
c0021acb:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021ace:	31 ff                	xor    edi,edi
c0021ad0:	56                   	push   esi
c0021ad1:	6a 28                	push   0x28
c0021ad3:	6a 00                	push   0x0
c0021ad5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021ad9:	50                   	push   eax
c0021ada:	e8 71 ec fd ff       	call   c0000750 <memset>
c0021adf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021ae2:	25 ff 07 00 00       	and    eax,0x7ff
c0021ae7:	89 c6                	mov    esi,eax
c0021ae9:	83 c6 21             	add    esi,0x21
c0021aec:	83 d7 00             	adc    edi,0x0
c0021aef:	83 c4 10             	add    esp,0x10
c0021af2:	31 c9                	xor    ecx,ecx
c0021af4:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021afb:	83 f9 28             	cmp    ecx,0x28
c0021afe:	88 04 24             	mov    BYTE PTR [esp],al
c0021b01:	0f 94 c2             	sete   dl
c0021b04:	88 d0                	mov    al,dl
c0021b06:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b0b:	39 f2                	cmp    edx,esi
c0021b0d:	ba 00 00 00 00       	mov    edx,0x0
c0021b12:	19 fa                	sbb    edx,edi
c0021b14:	0f 92 c2             	setb   dl
c0021b17:	09 c2                	or     edx,eax
c0021b19:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b1d:	0f 94 c0             	sete   al
c0021b20:	08 d0                	or     al,dl
c0021b22:	75 16                	jne    c0021b3a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021b24:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b28:	74 10                	je     c0021b3a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021b2a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021b2d:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021b31:	41                   	inc    ecx
c0021b32:	83 c6 01             	add    esi,0x1
c0021b35:	83 d7 00             	adc    edi,0x0
c0021b38:	eb ba                	jmp    c0021af4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021b3a:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021b41:	83 ec 0c             	sub    esp,0xc
c0021b44:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021b48:	56                   	push   esi
c0021b49:	e8 1e ec fd ff       	call   c000076c <strlen>
c0021b4e:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021b55:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021b59:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021b61:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021b64:	5a                   	pop    edx
c0021b65:	25 ff 07 00 00       	and    eax,0x7ff
c0021b6a:	59                   	pop    ecx
c0021b6b:	01 f8                	add    eax,edi
c0021b6d:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021b73:	83 e0 02             	and    eax,0x2
c0021b76:	3c 01                	cmp    al,0x1
c0021b78:	19 c0                	sbb    eax,eax
c0021b7a:	83 c0 02             	add    eax,0x2
c0021b7d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021b81:	56                   	push   esi
c0021b82:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021b86:	50                   	push   eax
c0021b87:	e8 80 ec fd ff       	call   c000080c <strcpy>
c0021b8c:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021b90:	83 c4 10             	add    esp,0x10
c0021b93:	84 c0                	test   al,al
c0021b95:	75 21                	jne    c0021bb8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021b97:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021b9f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021ba7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021baf:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021bb6:	eb 28                	jmp    c0021be0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021bb8:	fe c8                	dec    al
c0021bba:	75 24                	jne    c0021be0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021bbc:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021bc4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021bcc:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021bd4:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021bdb:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021be0:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021be4:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021beb:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021bf2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021bf4:	0f b6 f3             	movzx  esi,bl
c0021bf7:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021bfe:	31 db                	xor    ebx,ebx
c0021c00:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c06:	89 df                	mov    edi,ebx
c0021c08:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c0e:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021c11:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021c14:	39 c6                	cmp    esi,eax
c0021c16:	19 d7                	sbb    edi,edx
c0021c18:	72 10                	jb     c0021c2a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021c1a:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021c21:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021c28:	eb 0a                	jmp    c0021c34 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021c2a:	29 f0                	sub    eax,esi
c0021c2c:	19 da                	sbb    edx,ebx
c0021c2e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021c31:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021c34:	31 c0                	xor    eax,eax
c0021c36:	eb 05                	jmp    c0021c3d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c38:	b8 04 00 00 00       	mov    eax,0x4
c0021c3d:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021c43:	5b                   	pop    ebx
c0021c44:	5e                   	pop    esi
c0021c45:	5f                   	pop    edi
c0021c46:	5d                   	pop    ebp
c0021c47:	c3                   	ret    

c0021c48 <readRoot(unsigned int*, unsigned int*, char)>:
c0021c48:	57                   	push   edi
c0021c49:	56                   	push   esi
c0021c4a:	81 ec 38 08 00 00    	sub    esp,0x838
c0021c50:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021c58:	50                   	push   eax
c0021c59:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021c5d:	50                   	push   eax
c0021c5e:	6a 10                	push   0x10
c0021c60:	e8 ba fa ff ff       	call   c002171f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c65:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021c6c:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021c70:	b9 22 00 00 00       	mov    ecx,0x22
c0021c75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021c77:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021c7e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021c82:	89 10                	mov    DWORD PTR [eax],edx
c0021c84:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021c8b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021c8f:	89 10                	mov    DWORD PTR [eax],edx
c0021c91:	81 c4 44 08 00 00    	add    esp,0x844
c0021c97:	b0 01                	mov    al,0x1
c0021c99:	5e                   	pop    esi
c0021c9a:	5f                   	pop    edi
c0021c9b:	c3                   	ret    

c0021c9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021c9c:	55                   	push   ebp
c0021c9d:	57                   	push   edi
c0021c9e:	56                   	push   esi
c0021c9f:	53                   	push   ebx
c0021ca0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021ca6:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021cad:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021cb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021cb8:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021cbc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021cc0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021cc4:	75 03                	jne    c0021cc9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021cc6:	83 c3 02             	add    ebx,0x2
c0021cc9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021ccc:	75 03                	jne    c0021cd1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021cce:	43                   	inc    ebx
c0021ccf:	eb f8                	jmp    c0021cc9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021cd1:	51                   	push   ecx
c0021cd2:	68 00 01 00 00       	push   0x100
c0021cd7:	6a 00                	push   0x0
c0021cd9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021cdd:	50                   	push   eax
c0021cde:	e8 6d ea fd ff       	call   c0000750 <memset>
c0021ce3:	83 c4 10             	add    esp,0x10
c0021ce6:	31 d2                	xor    edx,edx
c0021ce8:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021ceb:	84 c0                	test   al,al
c0021ced:	74 21                	je     c0021d10 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021cef:	3c 2f                	cmp    al,0x2f
c0021cf1:	75 0b                	jne    c0021cfe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021cf3:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0021cfc:	eb 14                	jmp    c0021d12 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021cfe:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d01:	80 f9 19             	cmp    cl,0x19
c0021d04:	77 03                	ja     c0021d09 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d06:	83 e8 20             	sub    eax,0x20
c0021d09:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d0d:	42                   	inc    edx
c0021d0e:	eb d8                	jmp    c0021ce8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d10:	31 ed                	xor    ebp,ebp
c0021d12:	83 ec 0c             	sub    esp,0xc
c0021d15:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d1c:	e8 95 d8 fe ff       	call   c000f5b6 <malloc>
c0021d21:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021d28:	89 c6                	mov    esi,eax
c0021d2a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021d30:	c1 ef 0b             	shr    edi,0xb
c0021d33:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021d3a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021d3e:	83 c4 10             	add    esp,0x10
c0021d41:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021d46:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021d4a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021d51:	74 28                	je     c0021d7b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021d53:	52                   	push   edx
c0021d54:	57                   	push   edi
c0021d55:	50                   	push   eax
c0021d56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d5a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021d61:	e8 b9 f9 ff ff       	call   c002171f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021d6a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021d71:	05 00 08 00 00       	add    eax,0x800
c0021d76:	83 c4 10             	add    esp,0x10
c0021d79:	eb cb                	jmp    c0021d46 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021d7b:	83 ec 0c             	sub    esp,0xc
c0021d7e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021d82:	57                   	push   edi
c0021d83:	e8 e4 e9 fd ff       	call   c000076c <strlen>
c0021d88:	50                   	push   eax
c0021d89:	57                   	push   edi
c0021d8a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021d91:	56                   	push   esi
c0021d92:	e8 46 f9 ff ff       	call   c00216dd <__memmem(unsigned char*, int, unsigned char*, int)>
c0021d97:	83 c4 20             	add    esp,0x20
c0021d9a:	85 c0                	test   eax,eax
c0021d9c:	75 13                	jne    c0021db1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021d9e:	83 ec 0c             	sub    esp,0xc
c0021da1:	56                   	push   esi
c0021da2:	e8 1f d8 fe ff       	call   c000f5c6 <free>
c0021da7:	83 c4 10             	add    esp,0x10
c0021daa:	31 c0                	xor    eax,eax
c0021dac:	e9 b3 00 00 00       	jmp    c0021e64 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021db1:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021db5:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021db9:	c1 e7 08             	shl    edi,0x8
c0021dbc:	c1 e2 10             	shl    edx,0x10
c0021dbf:	09 d7                	or     edi,edx
c0021dc1:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021dc5:	09 d7                	or     edi,edx
c0021dc7:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021dcb:	c1 e2 18             	shl    edx,0x18
c0021dce:	09 d7                	or     edi,edx
c0021dd0:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021dd4:	89 d1                	mov    ecx,edx
c0021dd6:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021dda:	c1 e1 08             	shl    ecx,0x8
c0021ddd:	c1 e2 10             	shl    edx,0x10
c0021de0:	09 ca                	or     edx,ecx
c0021de2:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021de6:	09 ca                	or     edx,ecx
c0021de8:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021dec:	c1 e1 18             	shl    ecx,0x18
c0021def:	09 ca                	or     edx,ecx
c0021df1:	89 e9                	mov    ecx,ebp
c0021df3:	84 c9                	test   cl,cl
c0021df5:	74 3c                	je     c0021e33 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021df7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021dfb:	83 ec 0c             	sub    esp,0xc
c0021dfe:	56                   	push   esi
c0021dff:	e8 c2 d7 fe ff       	call   c000f5c6 <free>
c0021e04:	83 c4 0c             	add    esp,0xc
c0021e07:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e0e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e13:	50                   	push   eax
c0021e14:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e1b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e26:	52                   	push   edx
c0021e27:	57                   	push   edi
c0021e28:	53                   	push   ebx
c0021e29:	e8 6e fe ff ff       	call   c0021c9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e2e:	83 c4 20             	add    esp,0x20
c0021e31:	eb 31                	jmp    c0021e64 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e33:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021e36:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021e3d:	d0 e8                	shr    al,1
c0021e3f:	89 3b                	mov    DWORD PTR [ebx],edi
c0021e41:	83 e0 01             	and    eax,0x1
c0021e44:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021e4b:	83 ec 0c             	sub    esp,0xc
c0021e4e:	89 13                	mov    DWORD PTR [ebx],edx
c0021e50:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021e57:	89 03                	mov    DWORD PTR [ebx],eax
c0021e59:	56                   	push   esi
c0021e5a:	e8 67 d7 fe ff       	call   c000f5c6 <free>
c0021e5f:	83 c4 10             	add    esp,0x10
c0021e62:	b0 01                	mov    al,0x1
c0021e64:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021e6a:	5b                   	pop    ebx
c0021e6b:	5e                   	pop    esi
c0021e6c:	5f                   	pop    edi
c0021e6d:	5d                   	pop    ebp
c0021e6e:	c3                   	ret    

c0021e6f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021e6f:	55                   	push   ebp
c0021e70:	57                   	push   edi
c0021e71:	56                   	push   esi
c0021e72:	53                   	push   ebx
c0021e73:	83 ec 20             	sub    esp,0x20
c0021e76:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021e7a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021e7e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021e82:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e8a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021e92:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021e97:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021e9d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021ea3:	57                   	push   edi
c0021ea4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ea8:	50                   	push   eax
c0021ea9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ead:	50                   	push   eax
c0021eae:	e8 95 fd ff ff       	call   c0021c48 <readRoot(unsigned int*, unsigned int*, char)>
c0021eb3:	5a                   	pop    edx
c0021eb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021eb8:	e8 af e8 fd ff       	call   c000076c <strlen>
c0021ebd:	83 c4 10             	add    esp,0x10
c0021ec0:	83 f8 03             	cmp    eax,0x3
c0021ec3:	77 17                	ja     c0021edc <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021ec5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ec9:	89 03                	mov    DWORD PTR [ebx],eax
c0021ecb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ecf:	89 06                	mov    DWORD PTR [esi],eax
c0021ed1:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021ed8:	b0 01                	mov    al,0x1
c0021eda:	eb 19                	jmp    c0021ef5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021edc:	50                   	push   eax
c0021edd:	55                   	push   ebp
c0021ede:	57                   	push   edi
c0021edf:	56                   	push   esi
c0021ee0:	53                   	push   ebx
c0021ee1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021ee5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021ee9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021eed:	e8 aa fd ff ff       	call   c0021c9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ef2:	83 c4 20             	add    esp,0x20
c0021ef5:	83 c4 1c             	add    esp,0x1c
c0021ef8:	5b                   	pop    ebx
c0021ef9:	5e                   	pop    esi
c0021efa:	5f                   	pop    edi
c0021efb:	5d                   	pop    ebp
c0021efc:	c3                   	ret    
c0021efd:	90                   	nop

c0021efe <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021efe:	57                   	push   edi
c0021eff:	56                   	push   esi
c0021f00:	53                   	push   ebx
c0021f01:	83 ec 10             	sub    esp,0x10
c0021f04:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f08:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f0c:	85 ff                	test   edi,edi
c0021f0e:	0f 84 9d 00 00 00    	je     c0021fb1 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f14:	85 f6                	test   esi,esi
c0021f16:	0f 84 95 00 00 00    	je     c0021fb1 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f1c:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021f21:	74 17                	je     c0021f3a <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021f23:	83 ec 0c             	sub    esp,0xc
c0021f26:	68 1b cf 02 c0       	push   0xc002cf1b
c0021f2b:	e8 7f 06 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0021f30:	83 c4 10             	add    esp,0x10
c0021f33:	b8 03 00 00 00       	mov    eax,0x3
c0021f38:	eb 7c                	jmp    c0021fb6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021f3a:	83 ec 0c             	sub    esp,0xc
c0021f3d:	6a 1c                	push   0x1c
c0021f3f:	e8 72 d6 fe ff       	call   c000f5b6 <malloc>
c0021f44:	89 07                	mov    DWORD PTR [edi],eax
c0021f46:	89 c3                	mov    ebx,eax
c0021f48:	58                   	pop    eax
c0021f49:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f4d:	50                   	push   eax
c0021f4e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021f51:	50                   	push   eax
c0021f52:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f56:	50                   	push   eax
c0021f57:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f5b:	50                   	push   eax
c0021f5c:	56                   	push   esi
c0021f5d:	e8 0d ff ff ff       	call   c0021e6f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f62:	83 c4 20             	add    esp,0x20
c0021f65:	84 c0                	test   al,al
c0021f67:	74 07                	je     c0021f70 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021f69:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021f6e:	74 0b                	je     c0021f7b <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021f70:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021f74:	b8 01 00 00 00       	mov    eax,0x1
c0021f79:	eb 3b                	jmp    c0021fb6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021f7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f7f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021f83:	89 03                	mov    DWORD PTR [ebx],eax
c0021f85:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021f8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f90:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021f97:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f9e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021fa1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021fa8:	8a 06                	mov    al,BYTE PTR [esi]
c0021faa:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021fad:	31 c0                	xor    eax,eax
c0021faf:	eb 05                	jmp    c0021fb6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fb1:	b8 04 00 00 00       	mov    eax,0x4
c0021fb6:	83 c4 10             	add    esp,0x10
c0021fb9:	5b                   	pop    ebx
c0021fba:	5e                   	pop    esi
c0021fbb:	5f                   	pop    edi
c0021fbc:	c3                   	ret    
c0021fbd:	90                   	nop

c0021fbe <ISO9660::exists(char const*)>:
c0021fbe:	83 ec 28             	sub    esp,0x28
c0021fc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021fc5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021fc9:	52                   	push   edx
c0021fca:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021fcd:	52                   	push   edx
c0021fce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021fd2:	52                   	push   edx
c0021fd3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021fd7:	52                   	push   edx
c0021fd8:	50                   	push   eax
c0021fd9:	e8 91 fe ff ff       	call   c0021e6f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fde:	83 c4 3c             	add    esp,0x3c
c0021fe1:	c3                   	ret    

c0021fe2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021fe2:	56                   	push   esi
c0021fe3:	53                   	push   ebx
c0021fe4:	83 ec 14             	sub    esp,0x14
c0021fe7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021feb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021fef:	85 db                	test   ebx,ebx
c0021ff1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021ff5:	0f 94 c2             	sete   dl
c0021ff8:	85 f6                	test   esi,esi
c0021ffa:	0f 94 c0             	sete   al
c0021ffd:	08 c2                	or     dl,al
c0021fff:	75 68                	jne    c0022069 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022001:	85 c9                	test   ecx,ecx
c0022003:	74 64                	je     c0022069 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022005:	83 ec 0c             	sub    esp,0xc
c0022008:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002200b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002200f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022015:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002201c:	50                   	push   eax
c002201d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022020:	50                   	push   eax
c0022021:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022025:	50                   	push   eax
c0022026:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002202a:	50                   	push   eax
c002202b:	51                   	push   ecx
c002202c:	e8 3e fe ff ff       	call   c0021e6f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022031:	83 c4 20             	add    esp,0x20
c0022034:	ba 01 00 00 00       	mov    edx,0x1
c0022039:	84 c0                	test   al,al
c002203b:	74 31                	je     c002206e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002203d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022041:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022048:	89 03                	mov    DWORD PTR [ebx],eax
c002204a:	ba 00 00 00 00       	mov    edx,0x0
c002204f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022053:	85 c0                	test   eax,eax
c0022055:	0f 95 06             	setne  BYTE PTR [esi]
c0022058:	74 14                	je     c002206e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002205a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022060:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022067:	eb 05                	jmp    c002206e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022069:	ba 04 00 00 00       	mov    edx,0x4
c002206e:	83 c4 14             	add    esp,0x14
c0022071:	89 d0                	mov    eax,edx
c0022073:	5b                   	pop    ebx
c0022074:	5e                   	pop    esi
c0022075:	c3                   	ret    

c0022076 <ISO9660::openDir(char const*, void**)>:
c0022076:	57                   	push   edi
c0022077:	56                   	push   esi
c0022078:	53                   	push   ebx
c0022079:	83 ec 10             	sub    esp,0x10
c002207c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022080:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022084:	85 ff                	test   edi,edi
c0022086:	0f 84 95 00 00 00    	je     c0022121 <ISO9660::openDir(char const*, void**)+0xab>
c002208c:	85 f6                	test   esi,esi
c002208e:	0f 84 8d 00 00 00    	je     c0022121 <ISO9660::openDir(char const*, void**)+0xab>
c0022094:	83 ec 0c             	sub    esp,0xc
c0022097:	6a 1c                	push   0x1c
c0022099:	e8 18 d5 fe ff       	call   c000f5b6 <malloc>
c002209e:	89 07                	mov    DWORD PTR [edi],eax
c00220a0:	89 c3                	mov    ebx,eax
c00220a2:	59                   	pop    ecx
c00220a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220a7:	50                   	push   eax
c00220a8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00220ab:	50                   	push   eax
c00220ac:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220b0:	50                   	push   eax
c00220b1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220b5:	50                   	push   eax
c00220b6:	56                   	push   esi
c00220b7:	e8 b3 fd ff ff       	call   c0021e6f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220bc:	83 c4 20             	add    esp,0x20
c00220bf:	84 c0                	test   al,al
c00220c1:	74 07                	je     c00220ca <ISO9660::openDir(char const*, void**)+0x54>
c00220c3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00220c8:	75 21                	jne    c00220eb <ISO9660::openDir(char const*, void**)+0x75>
c00220ca:	0f b6 c0             	movzx  eax,al
c00220cd:	52                   	push   edx
c00220ce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00220d2:	50                   	push   eax
c00220d3:	68 41 cf 02 c0       	push   0xc002cf41
c00220d8:	e8 d2 04 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00220dd:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00220e1:	83 c4 10             	add    esp,0x10
c00220e4:	b8 01 00 00 00       	mov    eax,0x1
c00220e9:	eb 3b                	jmp    c0022126 <ISO9660::openDir(char const*, void**)+0xb0>
c00220eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220ef:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00220f3:	89 03                	mov    DWORD PTR [ebx],eax
c00220f5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00220fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022100:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022107:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002210e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022111:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022118:	8a 06                	mov    al,BYTE PTR [esi]
c002211a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002211d:	31 c0                	xor    eax,eax
c002211f:	eb 05                	jmp    c0022126 <ISO9660::openDir(char const*, void**)+0xb0>
c0022121:	b8 04 00 00 00       	mov    eax,0x4
c0022126:	83 c4 10             	add    esp,0x10
c0022129:	5b                   	pop    ebx
c002212a:	5e                   	pop    esi
c002212b:	5f                   	pop    edi
c002212c:	c3                   	ret    
c002212d:	90                   	nop

c002212e <ISO9660::ISO9660()>:
c002212e:	83 ec 0c             	sub    esp,0xc
c0022131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022135:	83 ec 0c             	sub    esp,0xc
c0022138:	50                   	push   eax
c0022139:	e8 7c 07 ff ff       	call   c00128ba <Filesystem::Filesystem()>
c002213e:	83 c4 10             	add    esp,0x10
c0022141:	ba 64 cf 02 c0       	mov    edx,0xc002cf64
c0022146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002214a:	89 10                	mov    DWORD PTR [eax],edx
c002214c:	90                   	nop
c002214d:	83 c4 0c             	add    esp,0xc
c0022150:	c3                   	ret    
c0022151:	90                   	nop

c0022152 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022152:	83 ec 1c             	sub    esp,0x1c
c0022155:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022159:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002215d:	89 10                	mov    DWORD PTR [eax],edx
c002215f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022163:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022167:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002216a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002216e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022172:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022175:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002217a:	75 23                	jne    c002219f <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c002217c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022180:	8b 10                	mov    edx,DWORD PTR [eax]
c0022182:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022186:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022189:	0f af c2             	imul   eax,edx
c002218c:	85 c0                	test   eax,eax
c002218e:	79 03                	jns    c0022193 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0022190:	83 c0 03             	add    eax,0x3
c0022193:	c1 f8 02             	sar    eax,0x2
c0022196:	05 a0 0f 00 00       	add    eax,0xfa0
c002219b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002219f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221a3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00221a7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00221aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221ae:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00221b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221b9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00221c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00221c7:	c1 e0 02             	shl    eax,0x2
c00221ca:	83 ec 0c             	sub    esp,0xc
c00221cd:	50                   	push   eax
c00221ce:	e8 e3 d3 fe ff       	call   c000f5b6 <malloc>
c00221d3:	83 c4 10             	add    esp,0x10
c00221d6:	89 c2                	mov    edx,eax
c00221d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221dc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00221df:	83 ec 04             	sub    esp,0x4
c00221e2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00221e6:	50                   	push   eax
c00221e7:	6a 01                	push   0x1
c00221e9:	6a 04                	push   0x4
c00221eb:	e8 75 69 fe ff       	call   c0008b65 <src_new>
c00221f0:	83 c4 10             	add    esp,0x10
c00221f3:	89 c2                	mov    edx,eax
c00221f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221f9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00221fc:	83 ec 0c             	sub    esp,0xc
c00221ff:	68 c4 cf 02 c0       	push   0xc002cfc4
c0022204:	e8 a6 03 ff ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0022209:	83 c4 10             	add    esp,0x10
c002220c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022210:	85 c0                	test   eax,eax
c0022212:	74 10                	je     c0022224 <SoundChannel::SoundChannel(int, int, int, int)+0xd2>
c0022214:	83 ec 0c             	sub    esp,0xc
c0022217:	68 da cf 02 c0       	push   0xc002cfda
c002221c:	e8 5c 7e ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0022221:	83 c4 10             	add    esp,0x10
c0022224:	a0 80 30 03 c0       	mov    al,ds:0xc0033080
c0022229:	83 f0 01             	xor    eax,0x1
c002222c:	84 c0                	test   al,al
c002222e:	74 57                	je     c0022287 <SoundChannel::SoundChannel(int, int, int, int)+0x135>
c0022230:	a1 f4 cf 02 c0       	mov    eax,ds:0xc002cff4
c0022235:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022239:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022241:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022249:	7f 35                	jg     c0022280 <SoundChannel::SoundChannel(int, int, int, int)+0x12e>
c002224b:	83 ec 0c             	sub    esp,0xc
c002224e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022252:	e8 78 56 00 00       	call   c00278cf <__floatsisf>
c0022257:	83 c4 10             	add    esp,0x10
c002225a:	8b 15 f4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cff4
c0022260:	83 ec 08             	sub    esp,0x8
c0022263:	52                   	push   edx
c0022264:	50                   	push   eax
c0022265:	e8 77 52 00 00       	call   c00274e1 <__mulsf3>
c002226a:	83 c4 10             	add    esp,0x10
c002226d:	89 c2                	mov    edx,eax
c002226f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022273:	89 14 85 80 2c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd380],edx
c002227a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002227e:	eb c1                	jmp    c0022241 <SoundChannel::SoundChannel(int, int, int, int)+0xef>
c0022280:	c6 05 80 30 03 c0 01 	mov    BYTE PTR ds:0xc0033080,0x1
c0022287:	90                   	nop
c0022288:	83 c4 1c             	add    esp,0x1c
c002228b:	c3                   	ret    

c002228c <SoundChannel::~SoundChannel()>:
c002228c:	83 ec 0c             	sub    esp,0xc
c002228f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022293:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022296:	83 ec 0c             	sub    esp,0xc
c0022299:	50                   	push   eax
c002229a:	e8 27 d3 fe ff       	call   c000f5c6 <free>
c002229f:	83 c4 10             	add    esp,0x10
c00222a2:	90                   	nop
c00222a3:	83 c4 0c             	add    esp,0xc
c00222a6:	c3                   	ret    
c00222a7:	90                   	nop

c00222a8 <SoundChannel::getSampleRate()>:
c00222a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00222ae:	c3                   	ret    
c00222af:	90                   	nop

c00222b0 <SoundChannel::getBits()>:
c00222b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222b7:	c3                   	ret    

c00222b8 <SoundChannel::getBufferUsed()>:
c00222b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222bc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00222bf:	c3                   	ret    

c00222c0 <SoundChannel::getBufferSize()>:
c00222c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00222c7:	c3                   	ret    

c00222c8 <SoundChannel::unbuffer(float*, int, int)>:
c00222c8:	56                   	push   esi
c00222c9:	53                   	push   ebx
c00222ca:	83 ec 40             	sub    esp,0x40
c00222cd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00222d1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00222d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00222d8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00222db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00222df:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00222e3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00222e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00222eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00222ef:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00222f3:	e8 d7 55 00 00       	call   c00278cf <__floatsisf>
c00222f8:	5a                   	pop    edx
c00222f9:	89 c6                	mov    esi,eax
c00222fb:	ff 33                	push   DWORD PTR [ebx]
c00222fd:	e8 cd 55 00 00       	call   c00278cf <__floatsisf>
c0022302:	59                   	pop    ecx
c0022303:	5a                   	pop    edx
c0022304:	50                   	push   eax
c0022305:	56                   	push   esi
c0022306:	e8 99 53 00 00       	call   c00276a4 <__divsf3>
c002230b:	89 04 24             	mov    DWORD PTR [esp],eax
c002230e:	e8 8c 68 00 00       	call   c0028b9f <__extendsfdf2>
c0022313:	59                   	pop    ecx
c0022314:	5e                   	pop    esi
c0022315:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022319:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002231d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022325:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022329:	50                   	push   eax
c002232a:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002232d:	e8 28 64 fe ff       	call   c000875a <src_process>
c0022332:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022336:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022339:	83 c4 0c             	add    esp,0xc
c002233c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002233f:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022342:	29 d0                	sub    eax,edx
c0022344:	c1 e0 02             	shl    eax,0x2
c0022347:	50                   	push   eax
c0022348:	8d 04 91             	lea    eax,[ecx+edx*4]
c002234b:	50                   	push   eax
c002234c:	51                   	push   ecx
c002234d:	e8 36 e3 fd ff       	call   c0000688 <memmove>
c0022352:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022356:	83 c4 44             	add    esp,0x44
c0022359:	5b                   	pop    ebx
c002235a:	5e                   	pop    esi
c002235b:	c3                   	ret    

c002235c <SoundChannel::buffer16(short*, int)>:
c002235c:	55                   	push   ebp
c002235d:	57                   	push   edi
c002235e:	56                   	push   esi
c002235f:	53                   	push   ebx
c0022360:	83 ec 1c             	sub    esp,0x1c
c0022363:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022367:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c002236a:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c002236d:	0f 84 d2 00 00 00    	je     c0022445 <SoundChannel::buffer16(short*, int)+0xe9>
c0022373:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022377:	85 ed                	test   ebp,ebp
c0022379:	0f 8e c6 00 00 00    	jle    c0022445 <SoundChannel::buffer16(short*, int)+0xe9>
c002237f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022383:	bd 00 00 00 38       	mov    ebp,0x38000000
c0022388:	83 ec 0c             	sub    esp,0xc
c002238b:	0f bf 00             	movsx  eax,WORD PTR [eax]
c002238e:	50                   	push   eax
c002238f:	e8 3b 55 00 00       	call   c00278cf <__floatsisf>
c0022394:	59                   	pop    ecx
c0022395:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022398:	5f                   	pop    edi
c0022399:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c002239c:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002239f:	55                   	push   ebp
c00223a0:	50                   	push   eax
c00223a1:	e8 3b 51 00 00       	call   c00274e1 <__mulsf3>
c00223a6:	83 c4 10             	add    esp,0x10
c00223a9:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00223ac:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00223af:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00223b2:	0f 84 99 00 00 00    	je     c0022451 <SoundChannel::buffer16(short*, int)+0xf5>
c00223b8:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c00223bd:	74 78                	je     c0022437 <SoundChannel::buffer16(short*, int)+0xdb>
c00223bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00223c3:	83 ec 0c             	sub    esp,0xc
c00223c6:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c00223ca:	50                   	push   eax
c00223cb:	e8 ff 54 00 00       	call   c00278cf <__floatsisf>
c00223d0:	5f                   	pop    edi
c00223d1:	8d 4e 01             	lea    ecx,[esi+0x1]
c00223d4:	5a                   	pop    edx
c00223d5:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00223d8:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00223db:	55                   	push   ebp
c00223dc:	50                   	push   eax
c00223dd:	e8 ff 50 00 00       	call   c00274e1 <__mulsf3>
c00223e2:	83 c4 10             	add    esp,0x10
c00223e5:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00223e8:	be 02 00 00 00       	mov    esi,0x2
c00223ed:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00223f0:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c00223f3:	74 46                	je     c002243b <SoundChannel::buffer16(short*, int)+0xdf>
c00223f5:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00223f9:	eb 36                	jmp    c0022431 <SoundChannel::buffer16(short*, int)+0xd5>
c00223fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00223ff:	83 ec 0c             	sub    esp,0xc
c0022402:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0022406:	46                   	inc    esi
c0022407:	50                   	push   eax
c0022408:	e8 c2 54 00 00       	call   c00278cf <__floatsisf>
c002240d:	5a                   	pop    edx
c002240e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0022411:	59                   	pop    ecx
c0022412:	8d 4f 01             	lea    ecx,[edi+0x1]
c0022415:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022418:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002241c:	50                   	push   eax
c002241d:	e8 bf 50 00 00       	call   c00274e1 <__mulsf3>
c0022422:	83 c4 10             	add    esp,0x10
c0022425:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0022429:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c002242c:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c002242f:	74 0a                	je     c002243b <SoundChannel::buffer16(short*, int)+0xdf>
c0022431:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0022435:	75 c4                	jne    c00223fb <SoundChannel::buffer16(short*, int)+0x9f>
c0022437:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002243b:	83 c4 1c             	add    esp,0x1c
c002243e:	89 f0                	mov    eax,esi
c0022440:	5b                   	pop    ebx
c0022441:	5e                   	pop    esi
c0022442:	5f                   	pop    edi
c0022443:	5d                   	pop    ebp
c0022444:	c3                   	ret    
c0022445:	83 c4 1c             	add    esp,0x1c
c0022448:	31 f6                	xor    esi,esi
c002244a:	5b                   	pop    ebx
c002244b:	89 f0                	mov    eax,esi
c002244d:	5e                   	pop    esi
c002244e:	5f                   	pop    edi
c002244f:	5d                   	pop    ebp
c0022450:	c3                   	ret    
c0022451:	be 01 00 00 00       	mov    esi,0x1
c0022456:	eb e3                	jmp    c002243b <SoundChannel::buffer16(short*, int)+0xdf>

c0022458 <SoundChannel::buffer8(unsigned char*, int)>:
c0022458:	55                   	push   ebp
c0022459:	57                   	push   edi
c002245a:	56                   	push   esi
c002245b:	53                   	push   ebx
c002245c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022460:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022464:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022467:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002246b:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002246e:	74 7a                	je     c00224ea <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022470:	85 ff                	test   edi,edi
c0022472:	7e 76                	jle    c00224ea <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022474:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022478:	8d 70 01             	lea    esi,[eax+0x1]
c002247b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002247e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022481:	8b 1c 9d 80 2c 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd380]
c0022488:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002248b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002248e:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022491:	74 5e                	je     c00224f1 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022493:	83 ff 01             	cmp    edi,0x1
c0022496:	74 4b                	je     c00224e3 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022498:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002249c:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002249f:	8d 70 01             	lea    esi,[eax+0x1]
c00224a2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224a5:	8b 1c 9d 80 2c 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd380]
c00224ac:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224af:	b8 02 00 00 00       	mov    eax,0x2
c00224b4:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224b7:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224ba:	75 23                	jne    c00224df <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224bc:	eb 27                	jmp    c00224e5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224be:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00224c3:	8d 71 01             	lea    esi,[ecx+0x1]
c00224c6:	40                   	inc    eax
c00224c7:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224ca:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00224cd:	8b 1c 9d 80 2c 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd380]
c00224d4:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00224d7:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224da:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224dd:	74 06                	je     c00224e5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224df:	39 c7                	cmp    edi,eax
c00224e1:	75 db                	jne    c00224be <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00224e3:	89 f8                	mov    eax,edi
c00224e5:	5b                   	pop    ebx
c00224e6:	5e                   	pop    esi
c00224e7:	5f                   	pop    edi
c00224e8:	5d                   	pop    ebp
c00224e9:	c3                   	ret    
c00224ea:	5b                   	pop    ebx
c00224eb:	31 c0                	xor    eax,eax
c00224ed:	5e                   	pop    esi
c00224ee:	5f                   	pop    edi
c00224ef:	5d                   	pop    ebp
c00224f0:	c3                   	ret    
c00224f1:	b8 01 00 00 00       	mov    eax,0x1
c00224f6:	eb ed                	jmp    c00224e5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00224f8 <SoundDevice::SoundDevice(char const*)>:
c00224f8:	83 ec 1c             	sub    esp,0x1c
c00224fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224ff:	83 ec 08             	sub    esp,0x8
c0022502:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022506:	50                   	push   eax
c0022507:	e8 e0 16 ff ff       	call   c0013bec <Device::Device(char const*)>
c002250c:	83 c4 10             	add    esp,0x10
c002250f:	ba f4 d0 02 c0       	mov    edx,0xc002d0f4
c0022514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022518:	89 10                	mov    DWORD PTR [eax],edx
c002251a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002251e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002252c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022536:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002253e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022543:	7f 19                	jg     c002255e <SoundDevice::SoundDevice(char const*)+0x66>
c0022545:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022549:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002254d:	83 c2 54             	add    edx,0x54
c0022550:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022558:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002255c:	eb e0                	jmp    c002253e <SoundDevice::SoundDevice(char const*)+0x46>
c002255e:	90                   	nop
c002255f:	83 c4 1c             	add    esp,0x1c
c0022562:	c3                   	ret    
c0022563:	90                   	nop

c0022564 <SoundDevice::~SoundDevice()>:
c0022564:	53                   	push   ebx
c0022565:	83 ec 18             	sub    esp,0x18
c0022568:	ba f4 d0 02 c0       	mov    edx,0xc002d0f4
c002256d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022571:	89 10                	mov    DWORD PTR [eax],edx
c0022573:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002257b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022580:	7f 46                	jg     c00225c8 <SoundDevice::~SoundDevice()+0x64>
c0022582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022586:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002258a:	83 c2 54             	add    edx,0x54
c002258d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022591:	85 c0                	test   eax,eax
c0022593:	74 2d                	je     c00225c2 <SoundDevice::~SoundDevice()+0x5e>
c0022595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022599:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002259d:	83 c2 54             	add    edx,0x54
c00225a0:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00225a4:	85 db                	test   ebx,ebx
c00225a6:	74 1a                	je     c00225c2 <SoundDevice::~SoundDevice()+0x5e>
c00225a8:	83 ec 0c             	sub    esp,0xc
c00225ab:	53                   	push   ebx
c00225ac:	e8 db fc ff ff       	call   c002228c <SoundChannel::~SoundChannel()>
c00225b1:	83 c4 10             	add    esp,0x10
c00225b4:	83 ec 08             	sub    esp,0x8
c00225b7:	6a 2c                	push   0x2c
c00225b9:	53                   	push   ebx
c00225ba:	e8 10 ff fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c00225bf:	83 c4 10             	add    esp,0x10
c00225c2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225c6:	eb b3                	jmp    c002257b <SoundDevice::~SoundDevice()+0x17>
c00225c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225cc:	83 ec 0c             	sub    esp,0xc
c00225cf:	50                   	push   eax
c00225d0:	e8 e1 12 ff ff       	call   c00138b6 <Device::~Device()>
c00225d5:	83 c4 10             	add    esp,0x10
c00225d8:	90                   	nop
c00225d9:	83 c4 18             	add    esp,0x18
c00225dc:	5b                   	pop    ebx
c00225dd:	c3                   	ret    

c00225de <SoundDevice::~SoundDevice()>:
c00225de:	83 ec 0c             	sub    esp,0xc
c00225e1:	83 ec 0c             	sub    esp,0xc
c00225e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225e8:	e8 77 ff ff ff       	call   c0022564 <SoundDevice::~SoundDevice()>
c00225ed:	83 c4 10             	add    esp,0x10
c00225f0:	83 ec 08             	sub    esp,0x8
c00225f3:	68 e4 01 00 00       	push   0x1e4
c00225f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225fc:	e8 ce fe fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0022601:	83 c4 10             	add    esp,0x10
c0022604:	83 c4 0c             	add    esp,0xc
c0022607:	c3                   	ret    

c0022608 <SoundDevice::getFreeChannelNum()>:
c0022608:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002260c:	31 c0                	xor    eax,eax
c002260e:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022616:	74 09                	je     c0022621 <SoundDevice::getFreeChannelNum()+0x19>
c0022618:	40                   	inc    eax
c0022619:	83 f8 20             	cmp    eax,0x20
c002261c:	75 f0                	jne    c002260e <SoundDevice::getFreeChannelNum()+0x6>
c002261e:	83 c8 ff             	or     eax,0xffffffff
c0022621:	c3                   	ret    

c0022622 <SoundDevice::addChannel(SoundChannel*)>:
c0022622:	56                   	push   esi
c0022623:	53                   	push   ebx
c0022624:	51                   	push   ecx
c0022625:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022629:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002262d:	53                   	push   ebx
c002262e:	e8 d5 ff ff ff       	call   c0022608 <SoundDevice::getFreeChannelNum()>
c0022633:	5a                   	pop    edx
c0022634:	83 f8 ff             	cmp    eax,0xffffffff
c0022637:	74 51                	je     c002268a <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022639:	85 f6                	test   esi,esi
c002263b:	74 4d                	je     c002268a <SoundDevice::addChannel(SoundChannel*)+0x68>
c002263d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022644:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002264b:	75 30                	jne    c002267d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002264d:	83 ec 0c             	sub    esp,0xc
c0022650:	56                   	push   esi
c0022651:	e8 52 fc ff ff       	call   c00222a8 <SoundChannel::getSampleRate()>
c0022656:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002265c:	89 34 24             	mov    DWORD PTR [esp],esi
c002265f:	e8 4c fc ff ff       	call   c00222b0 <SoundChannel::getBits()>
c0022664:	83 c4 0c             	add    esp,0xc
c0022667:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002266d:	8b 13                	mov    edx,DWORD PTR [ebx]
c002266f:	50                   	push   eax
c0022670:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022676:	53                   	push   ebx
c0022677:	ff 52 24             	call   DWORD PTR [edx+0x24]
c002267a:	83 c4 10             	add    esp,0x10
c002267d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022683:	b8 01 00 00 00       	mov    eax,0x1
c0022688:	eb 03                	jmp    c002268d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002268a:	83 c8 ff             	or     eax,0xffffffff
c002268d:	5a                   	pop    edx
c002268e:	5b                   	pop    ebx
c002268f:	5e                   	pop    esi
c0022690:	c3                   	ret    
c0022691:	90                   	nop

c0022692 <SoundDevice::removeChannel(int)>:
c0022692:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002269a:	83 fa 1f             	cmp    edx,0x1f
c002269d:	77 23                	ja     c00226c2 <SoundDevice::removeChannel(int)+0x30>
c002269f:	8d 14 90             	lea    edx,[eax+edx*4]
c00226a2:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00226a9:	74 17                	je     c00226c2 <SoundDevice::removeChannel(int)+0x30>
c00226ab:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226b5:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226bb:	75 05                	jne    c00226c2 <SoundDevice::removeChannel(int)+0x30>
c00226bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00226bf:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00226c2:	c3                   	ret    
c00226c3:	90                   	nop

c00226c4 <SoundDevice::floatTo16(float*, short*, int)>:
c00226c4:	57                   	push   edi
c00226c5:	56                   	push   esi
c00226c6:	53                   	push   ebx
c00226c7:	31 db                	xor    ebx,ebx
c00226c9:	83 ec 10             	sub    esp,0x10
c00226cc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00226d0:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00226d4:	0f 8d d0 00 00 00    	jge    c00227aa <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00226da:	83 ec 0c             	sub    esp,0xc
c00226dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226e1:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00226e4:	e8 b6 64 00 00       	call   c0028b9f <__extendsfdf2>
c00226e9:	83 c4 10             	add    esp,0x10
c00226ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226f4:	68 00 00 f0 3f       	push   0x3ff00000
c00226f9:	6a 00                	push   0x0
c00226fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022703:	e8 23 54 00 00       	call   c0027b2b <__adddf3>
c0022708:	83 c4 10             	add    esp,0x10
c002270b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002270f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022713:	68 00 00 e0 3f       	push   0x3fe00000
c0022718:	6a 00                	push   0x0
c002271a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002271e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022722:	e8 81 5a 00 00       	call   c00281a8 <__muldf3>
c0022727:	83 c4 10             	add    esp,0x10
c002272a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002272e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022732:	68 c0 ff df 40       	push   0x40dfffc0
c0022737:	6a 00                	push   0x0
c0022739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002273d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022741:	e8 62 5a 00 00       	call   c00281a8 <__muldf3>
c0022746:	59                   	pop    ecx
c0022747:	5f                   	pop    edi
c0022748:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002274c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022754:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022758:	e8 1e 63 00 00       	call   c0028a7b <__truncdfsf2>
c002275d:	5a                   	pop    edx
c002275e:	89 c7                	mov    edi,eax
c0022760:	59                   	pop    ecx
c0022761:	68 00 fe ff 46       	push   0x46fffe00
c0022766:	50                   	push   eax
c0022767:	e8 b9 53 00 00       	call   c0027b25 <__gesf2>
c002276c:	83 c4 10             	add    esp,0x10
c002276f:	85 c0                	test   eax,eax
c0022771:	78 08                	js     c002277b <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022773:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022779:	eb 29                	jmp    c00227a4 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c002277b:	50                   	push   eax
c002277c:	50                   	push   eax
c002277d:	6a 00                	push   0x0
c002277f:	57                   	push   edi
c0022780:	e8 a4 53 00 00       	call   c0027b29 <__lesf2>
c0022785:	83 c4 10             	add    esp,0x10
c0022788:	85 c0                	test   eax,eax
c002278a:	7f 08                	jg     c0022794 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c002278c:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022792:	eb 10                	jmp    c00227a4 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022794:	83 ec 0c             	sub    esp,0xc
c0022797:	57                   	push   edi
c0022798:	e8 9f 64 00 00       	call   c0028c3c <lrintf>
c002279d:	83 c4 10             	add    esp,0x10
c00227a0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00227a4:	43                   	inc    ebx
c00227a5:	e9 26 ff ff ff       	jmp    c00226d0 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00227aa:	83 c4 10             	add    esp,0x10
c00227ad:	5b                   	pop    ebx
c00227ae:	5e                   	pop    esi
c00227af:	5f                   	pop    edi
c00227b0:	c3                   	ret    
c00227b1:	90                   	nop

c00227b2 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00227b2:	57                   	push   edi
c00227b3:	56                   	push   esi
c00227b4:	53                   	push   ebx
c00227b5:	31 db                	xor    ebx,ebx
c00227b7:	83 ec 10             	sub    esp,0x10
c00227ba:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00227be:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00227c2:	0f 8d cb 00 00 00    	jge    c0022893 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00227c8:	83 ec 0c             	sub    esp,0xc
c00227cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00227cf:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00227d2:	e8 c8 63 00 00       	call   c0028b9f <__extendsfdf2>
c00227d7:	83 c4 10             	add    esp,0x10
c00227da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227e2:	68 00 00 f0 3f       	push   0x3ff00000
c00227e7:	6a 00                	push   0x0
c00227e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227f1:	e8 35 53 00 00       	call   c0027b2b <__adddf3>
c00227f6:	83 c4 10             	add    esp,0x10
c00227f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022801:	68 00 00 e0 3f       	push   0x3fe00000
c0022806:	6a 00                	push   0x0
c0022808:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002280c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022810:	e8 93 59 00 00       	call   c00281a8 <__muldf3>
c0022815:	83 c4 10             	add    esp,0x10
c0022818:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002281c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022820:	68 00 00 60 40       	push   0x40600000
c0022825:	6a 00                	push   0x0
c0022827:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002282b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002282f:	e8 74 59 00 00       	call   c00281a8 <__muldf3>
c0022834:	59                   	pop    ecx
c0022835:	5f                   	pop    edi
c0022836:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002283a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002283e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022842:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022846:	e8 30 62 00 00       	call   c0028a7b <__truncdfsf2>
c002284b:	5a                   	pop    edx
c002284c:	89 c7                	mov    edi,eax
c002284e:	59                   	pop    ecx
c002284f:	68 00 00 fe 42       	push   0x42fe0000
c0022854:	50                   	push   eax
c0022855:	e8 cb 52 00 00       	call   c0027b25 <__gesf2>
c002285a:	83 c4 10             	add    esp,0x10
c002285d:	85 c0                	test   eax,eax
c002285f:	78 06                	js     c0022867 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022861:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022865:	eb 26                	jmp    c002288d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022867:	50                   	push   eax
c0022868:	50                   	push   eax
c0022869:	6a 00                	push   0x0
c002286b:	57                   	push   edi
c002286c:	e8 b8 52 00 00       	call   c0027b29 <__lesf2>
c0022871:	83 c4 10             	add    esp,0x10
c0022874:	85 c0                	test   eax,eax
c0022876:	7f 06                	jg     c002287e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022878:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002287c:	eb 0f                	jmp    c002288d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002287e:	83 ec 0c             	sub    esp,0xc
c0022881:	57                   	push   edi
c0022882:	e8 b5 63 00 00       	call   c0028c3c <lrintf>
c0022887:	83 c4 10             	add    esp,0x10
c002288a:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002288d:	43                   	inc    ebx
c002288e:	e9 2b ff ff ff       	jmp    c00227be <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022893:	83 c4 10             	add    esp,0x10
c0022896:	5b                   	pop    ebx
c0022897:	5e                   	pop    esi
c0022898:	5f                   	pop    edi
c0022899:	c3                   	ret    

c002289a <SoundDevice::getAudio(int, float*, float*)>:
c002289a:	55                   	push   ebp
c002289b:	57                   	push   edi
c002289c:	56                   	push   esi
c002289d:	53                   	push   ebx
c002289e:	83 ec 28             	sub    esp,0x28
c00228a1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00228a5:	68 f8 cf 02 c0       	push   0xc002cff8
c00228aa:	e8 00 fd fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00228af:	59                   	pop    ecx
c00228b0:	5e                   	pop    esi
c00228b1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00228b5:	68 0f d0 02 c0       	push   0xc002d00f
c00228ba:	e8 f0 fc fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00228bf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00228c3:	83 c4 0c             	add    esp,0xc
c00228c6:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
c00228cd:	56                   	push   esi
c00228ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00228d2:	68 31 d0 02 c0       	push   0xc002d031
c00228d7:	e8 d3 fc fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00228dc:	83 c4 0c             	add    esp,0xc
c00228df:	56                   	push   esi
c00228e0:	31 f6                	xor    esi,esi
c00228e2:	6a 00                	push   0x0
c00228e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00228e8:	e8 63 de fd ff       	call   c0000750 <memset>
c00228ed:	83 c4 10             	add    esp,0x10
c00228f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00228f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022900:	8b 84 b3 5c 01 00 00 	mov    eax,DWORD PTR [ebx+esi*4+0x15c]
c0022907:	85 c0                	test   eax,eax
c0022909:	0f 84 d7 00 00 00    	je     c00229e6 <SoundDevice::getAudio(int, float*, float*)+0x14c>
c002290f:	83 ec 0c             	sub    esp,0xc
c0022912:	50                   	push   eax
c0022913:	e8 a8 f9 ff ff       	call   c00222c0 <SoundChannel::getBufferSize()>
c0022918:	5f                   	pop    edi
c0022919:	5d                   	pop    ebp
c002291a:	50                   	push   eax
c002291b:	68 55 d0 02 c0       	push   0xc002d055
c0022920:	e8 8a fc fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0022925:	58                   	pop    eax
c0022926:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c002292d:	e8 86 f9 ff ff       	call   c00222b8 <SoundChannel::getBufferUsed()>
c0022932:	5a                   	pop    edx
c0022933:	59                   	pop    ecx
c0022934:	50                   	push   eax
c0022935:	68 68 d0 02 c0       	push   0xc002d068
c002293a:	e8 70 fc fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c002293f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022943:	99                   	cdq    
c0022944:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c002294a:	50                   	push   eax
c002294b:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022951:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022955:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c002295c:	e8 67 f9 ff ff       	call   c00222c8 <SoundChannel::unbuffer(float*, int, int)>
c0022961:	83 c4 14             	add    esp,0x14
c0022964:	89 c5                	mov    ebp,eax
c0022966:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c002296d:	e8 46 f9 ff ff       	call   c00222b8 <SoundChannel::getBufferUsed()>
c0022972:	5f                   	pop    edi
c0022973:	5a                   	pop    edx
c0022974:	50                   	push   eax
c0022975:	68 80 d0 02 c0       	push   0xc002d080
c002297a:	e8 30 fc fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c002297f:	56                   	push   esi
c0022980:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022984:	99                   	cdq    
c0022985:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c002298b:	50                   	push   eax
c002298c:	55                   	push   ebp
c002298d:	68 98 d0 02 c0       	push   0xc002d098
c0022992:	e8 18 fc fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0022997:	83 c4 20             	add    esp,0x20
c002299a:	31 c0                	xor    eax,eax
c002299c:	39 e8                	cmp    eax,ebp
c002299e:	7d 1e                	jge    c00229be <SoundDevice::getAudio(int, float*, float*)+0x124>
c00229a0:	8b 93 58 01 00 00    	mov    edx,DWORD PTR [ebx+0x158]
c00229a6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00229aa:	0f af d0             	imul   edx,eax
c00229ad:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c00229b0:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c00229b4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00229b8:	40                   	inc    eax
c00229b9:	89 0c 97             	mov    DWORD PTR [edi+edx*4],ecx
c00229bc:	eb de                	jmp    c002299c <SoundDevice::getAudio(int, float*, float*)+0x102>
c00229be:	50                   	push   eax
c00229bf:	50                   	push   eax
c00229c0:	55                   	push   ebp
c00229c1:	68 c5 d0 02 c0       	push   0xc002d0c5
c00229c6:	e8 e4 fb fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00229cb:	01 6c 24 18          	add    DWORD PTR [esp+0x18],ebp
c00229cf:	5a                   	pop    edx
c00229d0:	59                   	pop    ecx
c00229d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00229d5:	68 d6 d0 02 c0       	push   0xc002d0d6
c00229da:	e8 d0 fb fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00229df:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00229e3:	83 c4 10             	add    esp,0x10
c00229e6:	46                   	inc    esi
c00229e7:	83 fe 20             	cmp    esi,0x20
c00229ea:	0f 85 10 ff ff ff    	jne    c0022900 <SoundDevice::getAudio(int, float*, float*)+0x66>
c00229f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00229f4:	83 c4 1c             	add    esp,0x1c
c00229f7:	5b                   	pop    ebx
c00229f8:	5e                   	pop    esi
c00229f9:	5f                   	pop    edi
c00229fa:	5d                   	pop    ebp
c00229fb:	c3                   	ret    

c00229fc <PCI::open(int, int, void*)>:
c00229fc:	83 ec 18             	sub    esp,0x18
c00229ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022a03:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022a07:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022a0d:	8b 10                	mov    edx,DWORD PTR [eax]
c0022a0f:	50                   	push   eax
c0022a10:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022a13:	31 c0                	xor    eax,eax
c0022a15:	83 c4 1c             	add    esp,0x1c
c0022a18:	c3                   	ret    
c0022a19:	90                   	nop

c0022a1a <PCI::close(int, int, void*)>:
c0022a1a:	31 c0                	xor    eax,eax
c0022a1c:	c3                   	ret    
c0022a1d:	90                   	nop

c0022a1e <PCI::PCI()>:
c0022a1e:	83 ec 0c             	sub    esp,0xc
c0022a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a25:	83 ec 08             	sub    esp,0x8
c0022a28:	68 24 d1 02 c0       	push   0xc002d124
c0022a2d:	50                   	push   eax
c0022a2e:	e8 1d 08 ff ff       	call   c0013250 <Bus::Bus(char const*)>
c0022a33:	83 c4 10             	add    esp,0x10
c0022a36:	ba 38 d2 02 c0       	mov    edx,0xc002d238
c0022a3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a3f:	89 10                	mov    DWORD PTR [eax],edx
c0022a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a45:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a53:	a3 84 30 03 c0       	mov    ds:0xc0033084,eax
c0022a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a5c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a62:	0f b6 d0             	movzx  edx,al
c0022a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a69:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a74:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a7a:	0f b6 d0             	movzx  edx,al
c0022a7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a81:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a8a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a90:	8d 50 01             	lea    edx,[eax+0x1]
c0022a93:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a97:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a9d:	0f b6 d0             	movzx  edx,al
c0022aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aa4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022aa8:	83 c9 c0             	or     ecx,0xffffffc0
c0022aab:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022aaf:	90                   	nop
c0022ab0:	83 c4 0c             	add    esp,0xc
c0022ab3:	c3                   	ret    

c0022ab4 <PCI::readBAR8(unsigned int, int)>:
c0022ab4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022ab8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022abc:	f6 c2 01             	test   dl,0x1
c0022abf:	74 07                	je     c0022ac8 <PCI::readBAR8(unsigned int, int)+0x14>
c0022ac1:	83 e2 fc             	and    edx,0xfffffffc
c0022ac4:	01 c2                	add    edx,eax
c0022ac6:	ec                   	in     al,dx
c0022ac7:	c3                   	ret    
c0022ac8:	83 e2 f0             	and    edx,0xfffffff0
c0022acb:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022ace:	c3                   	ret    
c0022acf:	90                   	nop

c0022ad0 <PCI::readBAR16(unsigned int, int)>:
c0022ad0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022ad4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022ad8:	f6 c2 01             	test   dl,0x1
c0022adb:	74 08                	je     c0022ae5 <PCI::readBAR16(unsigned int, int)+0x15>
c0022add:	83 e2 fc             	and    edx,0xfffffffc
c0022ae0:	01 c2                	add    edx,eax
c0022ae2:	66 ed                	in     ax,dx
c0022ae4:	c3                   	ret    
c0022ae5:	83 e2 f0             	and    edx,0xfffffff0
c0022ae8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022aec:	c3                   	ret    
c0022aed:	90                   	nop

c0022aee <PCI::readBAR32(unsigned int, int)>:
c0022aee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022af2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022af6:	f6 c2 01             	test   dl,0x1
c0022af9:	74 07                	je     c0022b02 <PCI::readBAR32(unsigned int, int)+0x14>
c0022afb:	83 e2 fc             	and    edx,0xfffffffc
c0022afe:	01 c2                	add    edx,eax
c0022b00:	ed                   	in     eax,dx
c0022b01:	c3                   	ret    
c0022b02:	83 e2 f0             	and    edx,0xfffffff0
c0022b05:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022b08:	c3                   	ret    
c0022b09:	90                   	nop

c0022b0a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022b0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022b0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022b12:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022b16:	f6 c2 01             	test   dl,0x1
c0022b19:	74 07                	je     c0022b22 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022b1b:	83 e2 fc             	and    edx,0xfffffffc
c0022b1e:	01 ca                	add    edx,ecx
c0022b20:	ee                   	out    dx,al
c0022b21:	c3                   	ret    
c0022b22:	83 e2 f0             	and    edx,0xfffffff0
c0022b25:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022b28:	c3                   	ret    
c0022b29:	90                   	nop

c0022b2a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022b2a:	57                   	push   edi
c0022b2b:	56                   	push   esi
c0022b2c:	53                   	push   ebx
c0022b2d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b31:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022b39:	f6 c2 01             	test   dl,0x1
c0022b3c:	74 24                	je     c0022b62 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x38>
c0022b3e:	89 d3                	mov    ebx,edx
c0022b40:	83 e3 fc             	and    ebx,0xfffffffc
c0022b43:	50                   	push   eax
c0022b44:	0f b7 c7             	movzx  eax,di
c0022b47:	50                   	push   eax
c0022b48:	8d 04 33             	lea    eax,[ebx+esi*1]
c0022b4b:	50                   	push   eax
c0022b4c:	68 2c d1 02 c0       	push   0xc002d12c
c0022b51:	e8 59 fa fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0022b56:	8d 14 33             	lea    edx,[ebx+esi*1]
c0022b59:	89 f8                	mov    eax,edi
c0022b5b:	66 ef                	out    dx,ax
c0022b5d:	83 c4 10             	add    esp,0x10
c0022b60:	eb 07                	jmp    c0022b69 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x3f>
c0022b62:	83 e2 f0             	and    edx,0xfffffff0
c0022b65:	66 89 3c 32          	mov    WORD PTR [edx+esi*1],di
c0022b69:	5b                   	pop    ebx
c0022b6a:	5e                   	pop    esi
c0022b6b:	5f                   	pop    edi
c0022b6c:	c3                   	ret    
c0022b6d:	90                   	nop

c0022b6e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022b6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022b72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022b76:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022b7a:	f6 c2 01             	test   dl,0x1
c0022b7d:	74 07                	je     c0022b86 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022b7f:	83 e2 fc             	and    edx,0xfffffffc
c0022b82:	01 ca                	add    edx,ecx
c0022b84:	ef                   	out    dx,eax
c0022b85:	c3                   	ret    
c0022b86:	83 e2 f0             	and    edx,0xfffffff0
c0022b89:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022b8c:	c3                   	ret    
c0022b8d:	90                   	nop

c0022b8e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b8e:	55                   	push   ebp
c0022b8f:	57                   	push   edi
c0022b90:	56                   	push   esi
c0022b91:	53                   	push   ebx
c0022b92:	83 ec 0c             	sub    esp,0xc
c0022b95:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022b99:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022b9d:	89 f0                	mov    eax,esi
c0022b9f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022ba3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ba7:	3c 07                	cmp    al,0x7
c0022ba9:	76 10                	jbe    c0022bbb <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022bab:	83 ec 0c             	sub    esp,0xc
c0022bae:	68 43 d1 02 c0       	push   0xc002d143
c0022bb3:	e8 c5 74 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0022bb8:	83 c4 10             	add    esp,0x10
c0022bbb:	80 fb 0f             	cmp    bl,0xf
c0022bbe:	76 10                	jbe    c0022bd0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022bc0:	83 ec 0c             	sub    esp,0xc
c0022bc3:	68 73 d1 02 c0       	push   0xc002d173
c0022bc8:	e8 b0 74 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0022bcd:	83 c4 10             	add    esp,0x10
c0022bd0:	8d 04 36             	lea    eax,[esi+esi*1]
c0022bd3:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bd8:	83 c8 f0             	or     eax,0xfffffff0
c0022bdb:	ee                   	out    dx,al
c0022bdc:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022be1:	89 e8                	mov    eax,ebp
c0022be3:	ee                   	out    dx,al
c0022be4:	83 c4 0c             	add    esp,0xc
c0022be7:	89 d8                	mov    eax,ebx
c0022be9:	66 81 e7 fc 00       	and    di,0xfc
c0022bee:	5b                   	pop    ebx
c0022bef:	c1 e0 08             	shl    eax,0x8
c0022bf2:	5e                   	pop    esi
c0022bf3:	09 f8                	or     eax,edi
c0022bf5:	5f                   	pop    edi
c0022bf6:	66 0d 00 c0          	or     ax,0xc000
c0022bfa:	5d                   	pop    ebp
c0022bfb:	c3                   	ret    

c0022bfc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022bfc:	57                   	push   edi
c0022bfd:	56                   	push   esi
c0022bfe:	53                   	push   ebx
c0022bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022c03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c07:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022c0d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022c11:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022c15:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022c19:	83 ff 01             	cmp    edi,0x1
c0022c1c:	75 3e                	jne    c0022c5c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022c1e:	89 de                	mov    esi,ebx
c0022c20:	0f b6 c0             	movzx  eax,al
c0022c23:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022c29:	c1 e0 10             	shl    eax,0x10
c0022c2c:	0f b6 c9             	movzx  ecx,cl
c0022c2f:	09 f0                	or     eax,esi
c0022c31:	c1 e1 08             	shl    ecx,0x8
c0022c34:	0f b6 d2             	movzx  edx,dl
c0022c37:	09 c8                	or     eax,ecx
c0022c39:	c1 e2 0b             	shl    edx,0xb
c0022c3c:	09 d0                	or     eax,edx
c0022c3e:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c43:	0d 00 00 00 80       	or     eax,0x80000000
c0022c48:	ef                   	out    dx,eax
c0022c49:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c4e:	ed                   	in     eax,dx
c0022c4f:	83 e3 02             	and    ebx,0x2
c0022c52:	0f b6 cb             	movzx  ecx,bl
c0022c55:	c1 e1 03             	shl    ecx,0x3
c0022c58:	d3 e8                	shr    eax,cl
c0022c5a:	eb 43                	jmp    c0022c9f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022c5c:	83 ff 02             	cmp    edi,0x2
c0022c5f:	75 2c                	jne    c0022c8d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022c61:	83 ec 0c             	sub    esp,0xc
c0022c64:	0f b6 c9             	movzx  ecx,cl
c0022c67:	0f b6 d2             	movzx  edx,dl
c0022c6a:	0f b6 fb             	movzx  edi,bl
c0022c6d:	0f b6 c0             	movzx  eax,al
c0022c70:	57                   	push   edi
c0022c71:	51                   	push   ecx
c0022c72:	52                   	push   edx
c0022c73:	50                   	push   eax
c0022c74:	56                   	push   esi
c0022c75:	e8 14 ff ff ff       	call   c0022b8e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c7a:	89 c2                	mov    edx,eax
c0022c7c:	ed                   	in     eax,dx
c0022c7d:	83 e3 02             	and    ebx,0x2
c0022c80:	83 c4 20             	add    esp,0x20
c0022c83:	0f b6 cb             	movzx  ecx,bl
c0022c86:	c1 e1 03             	shl    ecx,0x3
c0022c89:	d3 e8                	shr    eax,cl
c0022c8b:	eb 12                	jmp    c0022c9f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022c8d:	83 ec 0c             	sub    esp,0xc
c0022c90:	68 a3 d1 02 c0       	push   0xc002d1a3
c0022c95:	e8 e3 73 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0022c9a:	83 c4 10             	add    esp,0x10
c0022c9d:	31 c0                	xor    eax,eax
c0022c9f:	5b                   	pop    ebx
c0022ca0:	5e                   	pop    esi
c0022ca1:	5f                   	pop    edi
c0022ca2:	c3                   	ret    
c0022ca3:	90                   	nop

c0022ca4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022ca4:	83 ec 18             	sub    esp,0x18
c0022ca7:	6a 00                	push   0x0
c0022ca9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cae:	50                   	push   eax
c0022caf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cb4:	50                   	push   eax
c0022cb5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cba:	50                   	push   eax
c0022cbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022cbf:	e8 38 ff ff ff       	call   c0022bfc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cc4:	83 c4 2c             	add    esp,0x2c
c0022cc7:	c3                   	ret    

c0022cc8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022cc8:	83 ec 18             	sub    esp,0x18
c0022ccb:	6a 0e                	push   0xe
c0022ccd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cd2:	50                   	push   eax
c0022cd3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cd8:	50                   	push   eax
c0022cd9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022cde:	50                   	push   eax
c0022cdf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ce3:	e8 14 ff ff ff       	call   c0022bfc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ce8:	83 c4 2c             	add    esp,0x2c
c0022ceb:	0f b6 c0             	movzx  eax,al
c0022cee:	c3                   	ret    
c0022cef:	90                   	nop

c0022cf0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022cf0:	55                   	push   ebp
c0022cf1:	57                   	push   edi
c0022cf2:	56                   	push   esi
c0022cf3:	53                   	push   ebx
c0022cf4:	83 ec 18             	sub    esp,0x18
c0022cf7:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022cfc:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022d01:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022d06:	6a 0a                	push   0xa
c0022d08:	56                   	push   esi
c0022d09:	55                   	push   ebp
c0022d0a:	57                   	push   edi
c0022d0b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022d0f:	e8 e8 fe ff ff       	call   c0022bfc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d14:	83 c4 14             	add    esp,0x14
c0022d17:	89 c3                	mov    ebx,eax
c0022d19:	6a 0a                	push   0xa
c0022d1b:	0f b6 db             	movzx  ebx,bl
c0022d1e:	56                   	push   esi
c0022d1f:	55                   	push   ebp
c0022d20:	57                   	push   edi
c0022d21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022d25:	e8 d2 fe ff ff       	call   c0022bfc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d2a:	83 c4 2c             	add    esp,0x2c
c0022d2d:	25 00 ff 00 00       	and    eax,0xff00
c0022d32:	09 d8                	or     eax,ebx
c0022d34:	5b                   	pop    ebx
c0022d35:	5e                   	pop    esi
c0022d36:	5f                   	pop    edi
c0022d37:	5d                   	pop    ebp
c0022d38:	c3                   	ret    
c0022d39:	90                   	nop

c0022d3a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022d3a:	83 ec 18             	sub    esp,0x18
c0022d3d:	6a 08                	push   0x8
c0022d3f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d44:	50                   	push   eax
c0022d45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d4a:	50                   	push   eax
c0022d4b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d50:	50                   	push   eax
c0022d51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022d55:	e8 a2 fe ff ff       	call   c0022bfc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d5a:	83 c4 2c             	add    esp,0x2c
c0022d5d:	0f b6 c4             	movzx  eax,ah
c0022d60:	c3                   	ret    
c0022d61:	90                   	nop

c0022d62 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022d62:	83 ec 18             	sub    esp,0x18
c0022d65:	6a 08                	push   0x8
c0022d67:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d6c:	50                   	push   eax
c0022d6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d72:	50                   	push   eax
c0022d73:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d78:	50                   	push   eax
c0022d79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022d7d:	e8 7a fe ff ff       	call   c0022bfc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d82:	83 c4 2c             	add    esp,0x2c
c0022d85:	c3                   	ret    

c0022d86 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022d86:	83 ec 18             	sub    esp,0x18
c0022d89:	6a 3c                	push   0x3c
c0022d8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d90:	50                   	push   eax
c0022d91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d96:	50                   	push   eax
c0022d97:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022d9c:	50                   	push   eax
c0022d9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022da1:	e8 56 fe ff ff       	call   c0022bfc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022da6:	83 c4 2c             	add    esp,0x2c
c0022da9:	c3                   	ret    

c0022daa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022daa:	83 ec 18             	sub    esp,0x18
c0022dad:	6a 18                	push   0x18
c0022daf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022db4:	50                   	push   eax
c0022db5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022dba:	50                   	push   eax
c0022dbb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022dc0:	50                   	push   eax
c0022dc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022dc5:	e8 32 fe ff ff       	call   c0022bfc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022dca:	83 c4 2c             	add    esp,0x2c
c0022dcd:	0f b6 c4             	movzx  eax,ah
c0022dd0:	c3                   	ret    
c0022dd1:	90                   	nop

c0022dd2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022dd2:	55                   	push   ebp
c0022dd3:	57                   	push   edi
c0022dd4:	56                   	push   esi
c0022dd5:	53                   	push   ebx
c0022dd6:	83 ec 28             	sub    esp,0x28
c0022dd9:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022ddd:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022de2:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022de7:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022dec:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022df3:	8d 43 12             	lea    eax,[ebx+0x12]
c0022df6:	83 c3 10             	add    ebx,0x10
c0022df9:	0f b6 c0             	movzx  eax,al
c0022dfc:	0f b6 db             	movzx  ebx,bl
c0022dff:	50                   	push   eax
c0022e00:	51                   	push   ecx
c0022e01:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022e05:	57                   	push   edi
c0022e06:	55                   	push   ebp
c0022e07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022e0b:	e8 ec fd ff ff       	call   c0022bfc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e10:	83 c4 14             	add    esp,0x14
c0022e13:	89 c6                	mov    esi,eax
c0022e15:	53                   	push   ebx
c0022e16:	c1 e6 10             	shl    esi,0x10
c0022e19:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022e1d:	51                   	push   ecx
c0022e1e:	57                   	push   edi
c0022e1f:	55                   	push   ebp
c0022e20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022e24:	e8 d3 fd ff ff       	call   c0022bfc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e29:	83 c4 3c             	add    esp,0x3c
c0022e2c:	0f b7 c0             	movzx  eax,ax
c0022e2f:	5b                   	pop    ebx
c0022e30:	09 f0                	or     eax,esi
c0022e32:	5e                   	pop    esi
c0022e33:	5f                   	pop    edi
c0022e34:	5d                   	pop    ebp
c0022e35:	c3                   	ret    

c0022e36 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022e36:	55                   	push   ebp
c0022e37:	57                   	push   edi
c0022e38:	56                   	push   esi
c0022e39:	53                   	push   ebx
c0022e3a:	83 ec 0c             	sub    esp,0xc
c0022e3d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022e41:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022e45:	89 f5                	mov    ebp,esi
c0022e47:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022e4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022e51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022e55:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022e59:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022e5d:	83 f9 01             	cmp    ecx,0x1
c0022e60:	75 5d                	jne    c0022ebf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022e62:	0f b6 c8             	movzx  ecx,al
c0022e65:	0f b6 d2             	movzx  edx,dl
c0022e68:	c1 e1 10             	shl    ecx,0x10
c0022e6b:	c1 e2 0b             	shl    edx,0xb
c0022e6e:	89 f0                	mov    eax,esi
c0022e70:	25 fc 00 00 00       	and    eax,0xfc
c0022e75:	09 c1                	or     ecx,eax
c0022e77:	89 e8                	mov    eax,ebp
c0022e79:	0f b6 c0             	movzx  eax,al
c0022e7c:	c1 e0 08             	shl    eax,0x8
c0022e7f:	09 c1                	or     ecx,eax
c0022e81:	09 d1                	or     ecx,edx
c0022e83:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022e88:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022e8e:	89 c8                	mov    eax,ecx
c0022e90:	ef                   	out    dx,eax
c0022e91:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022e96:	ed                   	in     eax,dx
c0022e97:	0f b7 db             	movzx  ebx,bx
c0022e9a:	83 e6 02             	and    esi,0x2
c0022e9d:	74 0a                	je     c0022ea9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022e9f:	0f b7 d0             	movzx  edx,ax
c0022ea2:	c1 e3 10             	shl    ebx,0x10
c0022ea5:	09 d3                	or     ebx,edx
c0022ea7:	eb 05                	jmp    c0022eae <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022ea9:	66 31 c0             	xor    ax,ax
c0022eac:	09 c3                	or     ebx,eax
c0022eae:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022eb3:	89 c8                	mov    eax,ecx
c0022eb5:	ef                   	out    dx,eax
c0022eb6:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ebb:	89 d8                	mov    eax,ebx
c0022ebd:	eb 41                	jmp    c0022f00 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022ebf:	83 f9 02             	cmp    ecx,0x2
c0022ec2:	75 45                	jne    c0022f09 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022ec4:	83 ec 0c             	sub    esp,0xc
c0022ec7:	0f b6 d2             	movzx  edx,dl
c0022eca:	89 f1                	mov    ecx,esi
c0022ecc:	0f b6 c0             	movzx  eax,al
c0022ecf:	0f b6 f1             	movzx  esi,cl
c0022ed2:	89 e9                	mov    ecx,ebp
c0022ed4:	56                   	push   esi
c0022ed5:	0f b6 c9             	movzx  ecx,cl
c0022ed8:	51                   	push   ecx
c0022ed9:	52                   	push   edx
c0022eda:	50                   	push   eax
c0022edb:	57                   	push   edi
c0022edc:	e8 ad fc ff ff       	call   c0022b8e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ee1:	89 c2                	mov    edx,eax
c0022ee3:	ed                   	in     eax,dx
c0022ee4:	83 c4 20             	add    esp,0x20
c0022ee7:	0f b7 db             	movzx  ebx,bx
c0022eea:	f6 c2 02             	test   dl,0x2
c0022eed:	74 0c                	je     c0022efb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022eef:	0f b7 c8             	movzx  ecx,ax
c0022ef2:	89 d8                	mov    eax,ebx
c0022ef4:	c1 e0 10             	shl    eax,0x10
c0022ef7:	09 c8                	or     eax,ecx
c0022ef9:	eb 05                	jmp    c0022f00 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022efb:	66 31 c0             	xor    ax,ax
c0022efe:	09 d8                	or     eax,ebx
c0022f00:	ef                   	out    dx,eax
c0022f01:	83 c4 0c             	add    esp,0xc
c0022f04:	5b                   	pop    ebx
c0022f05:	5e                   	pop    esi
c0022f06:	5f                   	pop    edi
c0022f07:	5d                   	pop    ebp
c0022f08:	c3                   	ret    
c0022f09:	c7 44 24 20 a3 d1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002d1a3
c0022f11:	83 c4 0c             	add    esp,0xc
c0022f14:	5b                   	pop    ebx
c0022f15:	5e                   	pop    esi
c0022f16:	5f                   	pop    edi
c0022f17:	5d                   	pop    ebp
c0022f18:	e9 60 71 ff ff       	jmp    c001a07d <Krnl::panic(char const*)>
c0022f1d:	90                   	nop

c0022f1e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022f1e:	55                   	push   ebp
c0022f1f:	57                   	push   edi
c0022f20:	56                   	push   esi
c0022f21:	53                   	push   ebx
c0022f22:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022f28:	80 3d 90 30 03 c0 00 	cmp    BYTE PTR ds:0xc0033090,0x0
c0022f2f:	0f 85 96 00 00 00    	jne    c0022fcb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c0022f35:	83 ec 0c             	sub    esp,0xc
c0022f38:	68 14 01 00 00       	push   0x114
c0022f3d:	e8 74 c6 fe ff       	call   c000f5b6 <malloc>
c0022f42:	83 c4 0c             	add    esp,0xc
c0022f45:	89 c3                	mov    ebx,eax
c0022f47:	ff 35 90 22 03 c0    	push   DWORD PTR ds:0xc0032290
c0022f4d:	68 a9 d1 02 c0       	push   0xc002d1a9
c0022f52:	50                   	push   eax
c0022f53:	e8 b6 fb fe ff       	call   c0012b0e <File::File(char const*, Process*)>
c0022f58:	5a                   	pop    edx
c0022f59:	59                   	pop    ecx
c0022f5a:	6a 01                	push   0x1
c0022f5c:	53                   	push   ebx
c0022f5d:	e8 10 fc fe ff       	call   c0012b72 <File::open(FileOpenMode)>
c0022f62:	83 c4 0c             	add    esp,0xc
c0022f65:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022f69:	50                   	push   eax
c0022f6a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022f6e:	50                   	push   eax
c0022f6f:	53                   	push   ebx
c0022f70:	e8 a9 fe fe ff       	call   c0012e1e <File::stat(unsigned long long*, bool*)>
c0022f75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022f79:	40                   	inc    eax
c0022f7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0022f7d:	e8 34 c6 fe ff       	call   c000f5b6 <malloc>
c0022f82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022f86:	a3 8c 30 03 c0       	mov    ds:0xc003308c,eax
c0022f8b:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022f8f:	5e                   	pop    esi
c0022f90:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022f92:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022f96:	51                   	push   ecx
c0022f97:	50                   	push   eax
c0022f98:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022f9c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022fa0:	53                   	push   ebx
c0022fa1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022fa4:	83 c4 14             	add    esp,0x14
c0022fa7:	53                   	push   ebx
c0022fa8:	e8 23 fc fe ff       	call   c0012bd0 <File::close()>
c0022fad:	5f                   	pop    edi
c0022fae:	5d                   	pop    ebp
c0022faf:	ff 35 8c 30 03 c0    	push   DWORD PTR ds:0xc003308c
c0022fb5:	68 c2 d1 02 c0       	push   0xc002d1c2
c0022fba:	e8 f0 f5 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0022fbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022fc3:	83 c4 10             	add    esp,0x10
c0022fc6:	a3 88 30 03 c0       	mov    ds:0xc0033088,eax
c0022fcb:	a1 88 30 03 c0       	mov    eax,ds:0xc0033088
c0022fd0:	8b 15 8c 30 03 c0    	mov    edx,DWORD PTR ds:0xc003308c
c0022fd6:	89 04 24             	mov    DWORD PTR [esp],eax
c0022fd9:	31 ff                	xor    edi,edi
c0022fdb:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022fe3:	31 f6                	xor    esi,esi
c0022fe5:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022fea:	31 db                	xor    ebx,ebx
c0022fec:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022ff4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022ff9:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0023000:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0023004:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c002300b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002300f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023012:	0f 8e 6b 01 00 00    	jle    c0023183 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c0023018:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002301b:	d4 40                	aam    0x40
c002301d:	d5 39                	aad    0x39
c002301f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0023023:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0023027:	d4 40                	aam    0x40
c0023029:	d5 39                	aad    0x39
c002302b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002302f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0023033:	d4 40                	aam    0x40
c0023035:	d5 39                	aad    0x39
c0023037:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002303b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c002303f:	d4 40                	aam    0x40
c0023041:	d5 39                	aad    0x39
c0023043:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023047:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c002304b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002304f:	3c 56                	cmp    al,0x56
c0023051:	74 45                	je     c0023098 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x17a>
c0023053:	d4 40                	aam    0x40
c0023055:	d5 39                	aad    0x39
c0023057:	8d 48 d0             	lea    ecx,[eax-0x30]
c002305a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c002305e:	0f b6 c9             	movzx  ecx,cl
c0023061:	c1 e1 04             	shl    ecx,0x4
c0023064:	d4 40                	aam    0x40
c0023066:	d5 39                	aad    0x39
c0023068:	8d 58 d0             	lea    ebx,[eax-0x30]
c002306b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c002306f:	0f b6 db             	movzx  ebx,bl
c0023072:	09 cb                	or     ebx,ecx
c0023074:	c1 e3 04             	shl    ebx,0x4
c0023077:	d4 40                	aam    0x40
c0023079:	d5 39                	aad    0x39
c002307b:	8d 48 d0             	lea    ecx,[eax-0x30]
c002307e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0023082:	0f b6 c9             	movzx  ecx,cl
c0023085:	09 cb                	or     ebx,ecx
c0023087:	c1 e3 04             	shl    ebx,0x4
c002308a:	89 d9                	mov    ecx,ebx
c002308c:	d4 40                	aam    0x40
c002308e:	d5 39                	aad    0x39
c0023090:	8d 58 d0             	lea    ebx,[eax-0x30]
c0023093:	0f b6 db             	movzx  ebx,bl
c0023096:	09 cb                	or     ebx,ecx
c0023098:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c002309c:	80 f9 44             	cmp    cl,0x44
c002309f:	74 47                	je     c00230e8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ca>
c00230a1:	88 c8                	mov    al,cl
c00230a3:	d4 40                	aam    0x40
c00230a5:	d5 39                	aad    0x39
c00230a7:	83 e8 30             	sub    eax,0x30
c00230aa:	0f b6 e8             	movzx  ebp,al
c00230ad:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00230b1:	c1 e5 04             	shl    ebp,0x4
c00230b4:	d4 40                	aam    0x40
c00230b6:	d5 39                	aad    0x39
c00230b8:	83 e8 30             	sub    eax,0x30
c00230bb:	0f b6 f0             	movzx  esi,al
c00230be:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00230c2:	09 ee                	or     esi,ebp
c00230c4:	c1 e6 04             	shl    esi,0x4
c00230c7:	d4 40                	aam    0x40
c00230c9:	d5 39                	aad    0x39
c00230cb:	83 e8 30             	sub    eax,0x30
c00230ce:	0f b6 e8             	movzx  ebp,al
c00230d1:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00230d5:	09 ee                	or     esi,ebp
c00230d7:	c1 e6 04             	shl    esi,0x4
c00230da:	89 f5                	mov    ebp,esi
c00230dc:	d4 40                	aam    0x40
c00230de:	d5 39                	aad    0x39
c00230e0:	83 e8 30             	sub    eax,0x30
c00230e3:	0f b6 f0             	movzx  esi,al
c00230e6:	09 ee                	or     esi,ebp
c00230e8:	83 c7 10             	add    edi,0x10
c00230eb:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00230ef:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00230f2:	3c 0a                	cmp    al,0xa
c00230f4:	74 09                	je     c00230ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e1>
c00230f6:	45                   	inc    ebp
c00230f7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00230fa:	75 16                	jne    c0023112 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f4>
c00230fc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00230ff:	3c 0a                	cmp    al,0xa
c0023101:	0f 94 c0             	sete   al
c0023104:	0f b6 c0             	movzx  eax,al
c0023107:	01 c7                	add    edi,eax
c0023109:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c002310e:	75 0c                	jne    c002311c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1fe>
c0023110:	eb 15                	jmp    c0023127 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c0023112:	47                   	inc    edi
c0023113:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0023116:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002311a:	eb d3                	jmp    c00230ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1d1>
c002311c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0023121:	0f 85 e8 fe ff ff    	jne    c002300f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023127:	80 f9 44             	cmp    cl,0x44
c002312a:	74 0b                	je     c0023137 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x219>
c002312c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0023131:	0f 85 d8 fe ff ff    	jne    c002300f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023137:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002313b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002313f:	c1 e1 04             	shl    ecx,0x4
c0023142:	83 e8 30             	sub    eax,0x30
c0023145:	09 c8                	or     eax,ecx
c0023147:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c002314b:	0f 85 be fe ff ff    	jne    c002300f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023151:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0023155:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023159:	c1 e1 04             	shl    ecx,0x4
c002315c:	83 e8 30             	sub    eax,0x30
c002315f:	09 c8                	or     eax,ecx
c0023161:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0023165:	0f 85 a4 fe ff ff    	jne    c002300f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c002316b:	50                   	push   eax
c002316c:	50                   	push   eax
c002316d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023171:	50                   	push   eax
c0023172:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0023179:	e8 8e d6 fd ff       	call   c000080c <strcpy>
c002317e:	83 c4 10             	add    esp,0x10
c0023181:	eb 15                	jmp    c0023198 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x27a>
c0023183:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c002318a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0023195:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0023198:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c002319f:	81 c4 2c 01 00 00    	add    esp,0x12c
c00231a5:	5b                   	pop    ebx
c00231a6:	5e                   	pop    esi
c00231a7:	5f                   	pop    edi
c00231a8:	5d                   	pop    ebp
c00231a9:	c3                   	ret    

c00231aa <PCI::checkBus(unsigned char)>:
c00231aa:	56                   	push   esi
c00231ab:	53                   	push   ebx
c00231ac:	31 db                	xor    ebx,ebx
c00231ae:	51                   	push   ecx
c00231af:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00231b4:	52                   	push   edx
c00231b5:	53                   	push   ebx
c00231b6:	43                   	inc    ebx
c00231b7:	56                   	push   esi
c00231b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231bc:	e8 37 03 00 00       	call   c00234f8 <PCI::checkDevice(unsigned char, unsigned char)>
c00231c1:	83 c4 10             	add    esp,0x10
c00231c4:	83 fb 20             	cmp    ebx,0x20
c00231c7:	75 eb                	jne    c00231b4 <PCI::checkBus(unsigned char)+0xa>
c00231c9:	58                   	pop    eax
c00231ca:	5b                   	pop    ebx
c00231cb:	5e                   	pop    esi
c00231cc:	c3                   	ret    
c00231cd:	90                   	nop

c00231ce <PCI::foundDevice(PCIDeviceInfo)>:
c00231ce:	55                   	push   ebp
c00231cf:	57                   	push   edi
c00231d0:	56                   	push   esi
c00231d1:	53                   	push   ebx
c00231d2:	83 ec 1c             	sub    esp,0x1c
c00231d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00231d9:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00231df:	0f 84 52 01 00 00    	je     c0023337 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00231e5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00231e9:	66 81 f9 06 04       	cmp    cx,0x406
c00231ee:	75 2c                	jne    c002321c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00231f0:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00231f5:	50                   	push   eax
c00231f6:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00231fb:	50                   	push   eax
c00231fc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023201:	50                   	push   eax
c0023202:	56                   	push   esi
c0023203:	e8 a2 fb ff ff       	call   c0022daa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023208:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002320c:	0f b6 c0             	movzx  eax,al
c002320f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023213:	83 c4 2c             	add    esp,0x2c
c0023216:	5b                   	pop    ebx
c0023217:	5e                   	pop    esi
c0023218:	5f                   	pop    edi
c0023219:	5d                   	pop    ebp
c002321a:	eb 8e                	jmp    c00231aa <PCI::checkBus(unsigned char)>
c002321c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023220:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0023226:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002322a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002322e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023232:	88 d3                	mov    bl,dl
c0023234:	85 c0                	test   eax,eax
c0023236:	74 33                	je     c002326b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0023238:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002323b:	85 d2                	test   edx,edx
c002323d:	74 28                	je     c0023267 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002323f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0023245:	31 ef                	xor    edi,ebp
c0023247:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002324d:	75 18                	jne    c0023267 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002324f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023253:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0023259:	75 0c                	jne    c0023267 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002325b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0023261:	0f 84 d0 00 00 00    	je     c0023337 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023267:	8b 00                	mov    eax,DWORD PTR [eax]
c0023269:	eb c9                	jmp    c0023234 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002326b:	66 81 f9 01 06       	cmp    cx,0x601
c0023270:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0023274:	75 19                	jne    c002328f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0023276:	83 ec 0c             	sub    esp,0xc
c0023279:	68 64 01 00 00       	push   0x164
c002327e:	e8 33 c3 fe ff       	call   c000f5b6 <malloc>
c0023283:	89 c5                	mov    ebp,eax
c0023285:	89 04 24             	mov    DWORD PTR [esp],eax
c0023288:	e8 cd 0f 00 00       	call   c002425a <SATABus::SATABus()>
c002328d:	eb 1e                	jmp    c00232ad <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002328f:	66 81 f9 01 01       	cmp    cx,0x101
c0023294:	75 60                	jne    c00232f6 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023296:	83 ec 0c             	sub    esp,0xc
c0023299:	68 70 02 00 00       	push   0x270
c002329e:	e8 13 c3 fe ff       	call   c000f5b6 <malloc>
c00232a3:	89 c5                	mov    ebp,eax
c00232a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00232a8:	e8 0f 03 00 00       	call   c00235bc <IDE::IDE()>
c00232ad:	58                   	pop    eax
c00232ae:	5a                   	pop    edx
c00232af:	55                   	push   ebp
c00232b0:	56                   	push   esi
c00232b1:	e8 32 07 ff ff       	call   c00139e8 <Device::addChild(Device*)>
c00232b6:	83 ec 1c             	sub    esp,0x1c
c00232b9:	b9 09 00 00 00       	mov    ecx,0x9
c00232be:	fc                   	cld    
c00232bf:	89 e7                	mov    edi,esp
c00232c1:	89 de                	mov    esi,ebx
c00232c3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00232c5:	55                   	push   ebp
c00232c6:	e8 2f 06 ff ff       	call   c00138fa <Device::preOpenPCI(PCIDeviceInfo)>
c00232cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00232ce:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00232d2:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00232da:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00232e2:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00232ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00232ed:	83 c4 4c             	add    esp,0x4c
c00232f0:	5b                   	pop    ebx
c00232f1:	5e                   	pop    esi
c00232f2:	5f                   	pop    edi
c00232f3:	5d                   	pop    ebp
c00232f4:	ff e0                	jmp    eax
c00232f6:	83 ec 0c             	sub    esp,0xc
c00232f9:	68 58 01 00 00       	push   0x158
c00232fe:	e8 b3 c2 fe ff       	call   c000f5b6 <malloc>
c0023303:	89 c5                	mov    ebp,eax
c0023305:	58                   	pop    eax
c0023306:	5a                   	pop    edx
c0023307:	68 d4 d1 02 c0       	push   0xc002d1d4
c002330c:	55                   	push   ebp
c002330d:	e8 e0 09 ff ff       	call   c0013cf2 <DriverlessDevice::DriverlessDevice(char const*)>
c0023312:	59                   	pop    ecx
c0023313:	5f                   	pop    edi
c0023314:	55                   	push   ebp
c0023315:	56                   	push   esi
c0023316:	e8 cd 06 ff ff       	call   c00139e8 <Device::addChild(Device*)>
c002331b:	b9 09 00 00 00       	mov    ecx,0x9
c0023320:	fc                   	cld    
c0023321:	89 df                	mov    edi,ebx
c0023323:	89 de                	mov    esi,ebx
c0023325:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023327:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c002332b:	83 c4 2c             	add    esp,0x2c
c002332e:	5b                   	pop    ebx
c002332f:	5e                   	pop    esi
c0023330:	5f                   	pop    edi
c0023331:	5d                   	pop    ebp
c0023332:	e9 c3 05 ff ff       	jmp    c00138fa <Device::preOpenPCI(PCIDeviceInfo)>
c0023337:	83 c4 1c             	add    esp,0x1c
c002333a:	5b                   	pop    ebx
c002333b:	5e                   	pop    esi
c002333c:	5f                   	pop    edi
c002333d:	5d                   	pop    ebp
c002333e:	c3                   	ret    
c002333f:	90                   	nop

c0023340 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0023340:	55                   	push   ebp
c0023341:	57                   	push   edi
c0023342:	56                   	push   esi
c0023343:	53                   	push   ebx
c0023344:	83 ec 68             	sub    esp,0x68
c0023347:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002334b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0023352:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023356:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002335d:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0023362:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023366:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002336d:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0023372:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023376:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c002337b:	6a 0c                	push   0xc
c002337d:	57                   	push   edi
c002337e:	53                   	push   ebx
c002337f:	56                   	push   esi
c0023380:	55                   	push   ebp
c0023381:	e8 76 f8 ff ff       	call   c0022bfc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023386:	83 c4 20             	add    esp,0x20
c0023389:	57                   	push   edi
c002338a:	53                   	push   ebx
c002338b:	56                   	push   esi
c002338c:	55                   	push   ebp
c002338d:	e8 5e f9 ff ff       	call   c0022cf0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023392:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0023397:	57                   	push   edi
c0023398:	53                   	push   ebx
c0023399:	56                   	push   esi
c002339a:	55                   	push   ebp
c002339b:	e8 e6 f9 ff ff       	call   c0022d86 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00233a0:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00233a4:	83 c4 14             	add    esp,0x14
c00233a7:	6a 3c                	push   0x3c
c00233a9:	57                   	push   edi
c00233aa:	53                   	push   ebx
c00233ab:	56                   	push   esi
c00233ac:	55                   	push   ebp
c00233ad:	e8 4a f8 ff ff       	call   c0022bfc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233b2:	0f b6 c4             	movzx  eax,ah
c00233b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00233b9:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00233bd:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00233c1:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c00233c6:	83 c4 20             	add    esp,0x20
c00233c9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00233cf:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00233d6:	74 7c                	je     c0023454 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c00233d8:	31 c0                	xor    eax,eax
c00233da:	8b 15 48 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed48
c00233e0:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00233e6:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c00233ec:	7e 66                	jle    c0023454 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c00233ee:	8d 14 c2             	lea    edx,[edx+eax*8]
c00233f1:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00233f8:	39 cb                	cmp    ebx,ecx
c00233fa:	75 55                	jne    c0023451 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c00233fc:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023403:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0023407:	75 48                	jne    c0023451 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023409:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002340d:	83 ec 0c             	sub    esp,0xc
c0023410:	68 ee d1 02 c0       	push   0xc002d1ee
c0023415:	e8 95 f1 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c002341a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002341e:	8b 15 48 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed48
c0023424:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023428:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002342e:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0023436:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c002343a:	52                   	push   edx
c002343b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002343f:	53                   	push   ebx
c0023440:	68 13 d2 02 c0       	push   0xc002d213
c0023445:	e8 65 f1 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c002344a:	83 c4 20             	add    esp,0x20
c002344d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023451:	40                   	inc    eax
c0023452:	eb 86                	jmp    c00233da <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0023454:	31 d2                	xor    edx,edx
c0023456:	83 ec 0c             	sub    esp,0xc
c0023459:	57                   	push   edi
c002345a:	53                   	push   ebx
c002345b:	56                   	push   esi
c002345c:	52                   	push   edx
c002345d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0023461:	55                   	push   ebp
c0023462:	e8 6b f9 ff ff       	call   c0022dd2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023467:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002346b:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002346f:	42                   	inc    edx
c0023470:	83 c4 20             	add    esp,0x20
c0023473:	83 fa 06             	cmp    edx,0x6
c0023476:	75 de                	jne    c0023456 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0023478:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002347d:	83 ec 0c             	sub    esp,0xc
c0023480:	86 e0                	xchg   al,ah
c0023482:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0023487:	6a 02                	push   0x2
c0023489:	57                   	push   edi
c002348a:	53                   	push   ebx
c002348b:	56                   	push   esi
c002348c:	55                   	push   ebp
c002348d:	e8 6a f7 ff ff       	call   c0022bfc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023492:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0023497:	83 c4 20             	add    esp,0x20
c002349a:	57                   	push   edi
c002349b:	53                   	push   ebx
c002349c:	56                   	push   esi
c002349d:	55                   	push   ebp
c002349e:	e8 97 f8 ff ff       	call   c0022d3a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00234a3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00234a7:	57                   	push   edi
c00234a8:	53                   	push   ebx
c00234a9:	56                   	push   esi
c00234aa:	55                   	push   ebp
c00234ab:	e8 f4 f7 ff ff       	call   c0022ca4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00234b0:	b9 09 00 00 00       	mov    ecx,0x9
c00234b5:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c00234ba:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00234be:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c00234c2:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00234c6:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c00234ca:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00234ce:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c00234d2:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c00234d6:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c00234da:	83 ec 0c             	sub    esp,0xc
c00234dd:	fc                   	cld    
c00234de:	89 e7                	mov    edi,esp
c00234e0:	8d 74 24 58          	lea    esi,[esp+0x58]
c00234e4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00234e6:	55                   	push   ebp
c00234e7:	e8 e2 fc ff ff       	call   c00231ce <PCI::foundDevice(PCIDeviceInfo)>
c00234ec:	81 c4 8c 00 00 00    	add    esp,0x8c
c00234f2:	5b                   	pop    ebx
c00234f3:	5e                   	pop    esi
c00234f4:	5f                   	pop    edi
c00234f5:	5d                   	pop    ebp
c00234f6:	c3                   	ret    
c00234f7:	90                   	nop

c00234f8 <PCI::checkDevice(unsigned char, unsigned char)>:
c00234f8:	55                   	push   ebp
c00234f9:	57                   	push   edi
c00234fa:	56                   	push   esi
c00234fb:	53                   	push   ebx
c00234fc:	83 ec 0c             	sub    esp,0xc
c00234ff:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023503:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023508:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002350d:	6a 00                	push   0x0
c002350f:	56                   	push   esi
c0023510:	57                   	push   edi
c0023511:	55                   	push   ebp
c0023512:	e8 8d f7 ff ff       	call   c0022ca4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023517:	6a 00                	push   0x0
c0023519:	56                   	push   esi
c002351a:	57                   	push   edi
c002351b:	55                   	push   ebp
c002351c:	e8 1f fe ff ff       	call   c0023340 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023521:	83 c4 20             	add    esp,0x20
c0023524:	6a 00                	push   0x0
c0023526:	56                   	push   esi
c0023527:	57                   	push   edi
c0023528:	55                   	push   ebp
c0023529:	e8 9a f7 ff ff       	call   c0022cc8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002352e:	83 c4 10             	add    esp,0x10
c0023531:	84 c0                	test   al,al
c0023533:	79 27                	jns    c002355c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023535:	bb 01 00 00 00       	mov    ebx,0x1
c002353a:	53                   	push   ebx
c002353b:	56                   	push   esi
c002353c:	57                   	push   edi
c002353d:	55                   	push   ebp
c002353e:	e8 61 f7 ff ff       	call   c0022ca4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023543:	83 c4 10             	add    esp,0x10
c0023546:	66 40                	inc    ax
c0023548:	74 0c                	je     c0023556 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002354a:	53                   	push   ebx
c002354b:	56                   	push   esi
c002354c:	57                   	push   edi
c002354d:	55                   	push   ebp
c002354e:	e8 ed fd ff ff       	call   c0023340 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023553:	83 c4 10             	add    esp,0x10
c0023556:	43                   	inc    ebx
c0023557:	83 fb 08             	cmp    ebx,0x8
c002355a:	75 de                	jne    c002353a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002355c:	83 c4 0c             	add    esp,0xc
c002355f:	5b                   	pop    ebx
c0023560:	5e                   	pop    esi
c0023561:	5f                   	pop    edi
c0023562:	5d                   	pop    ebp
c0023563:	c3                   	ret    

c0023564 <PCI::detect()>:
c0023564:	56                   	push   esi
c0023565:	53                   	push   ebx
c0023566:	53                   	push   ebx
c0023567:	31 db                	xor    ebx,ebx
c0023569:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002356d:	6a 00                	push   0x0
c002356f:	6a 00                	push   0x0
c0023571:	6a 00                	push   0x0
c0023573:	56                   	push   esi
c0023574:	e8 4f f7 ff ff       	call   c0022cc8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023579:	83 c4 10             	add    esp,0x10
c002357c:	a8 80                	test   al,0x80
c002357e:	75 21                	jne    c00235a1 <PCI::detect()+0x3d>
c0023580:	51                   	push   ecx
c0023581:	51                   	push   ecx
c0023582:	6a 00                	push   0x0
c0023584:	56                   	push   esi
c0023585:	e8 20 fc ff ff       	call   c00231aa <PCI::checkBus(unsigned char)>
c002358a:	83 c4 10             	add    esp,0x10
c002358d:	eb 24                	jmp    c00235b3 <PCI::detect()+0x4f>
c002358f:	52                   	push   edx
c0023590:	52                   	push   edx
c0023591:	53                   	push   ebx
c0023592:	43                   	inc    ebx
c0023593:	56                   	push   esi
c0023594:	e8 11 fc ff ff       	call   c00231aa <PCI::checkBus(unsigned char)>
c0023599:	83 c4 10             	add    esp,0x10
c002359c:	83 fb 08             	cmp    ebx,0x8
c002359f:	74 12                	je     c00235b3 <PCI::detect()+0x4f>
c00235a1:	53                   	push   ebx
c00235a2:	6a 00                	push   0x0
c00235a4:	6a 00                	push   0x0
c00235a6:	56                   	push   esi
c00235a7:	e8 f8 f6 ff ff       	call   c0022ca4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00235ac:	83 c4 10             	add    esp,0x10
c00235af:	66 40                	inc    ax
c00235b1:	74 dc                	je     c002358f <PCI::detect()+0x2b>
c00235b3:	58                   	pop    eax
c00235b4:	5b                   	pop    ebx
c00235b5:	5e                   	pop    esi
c00235b6:	c3                   	ret    
c00235b7:	90                   	nop

c00235b8 <IDE::close(int, int, void*)>:
c00235b8:	83 c8 ff             	or     eax,0xffffffff
c00235bb:	c3                   	ret    

c00235bc <IDE::IDE()>:
c00235bc:	83 ec 0c             	sub    esp,0xc
c00235bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235c3:	83 ec 08             	sub    esp,0x8
c00235c6:	68 5c d2 02 c0       	push   0xc002d25c
c00235cb:	50                   	push   eax
c00235cc:	e8 c5 07 ff ff       	call   c0013d96 <HardDiskController::HardDiskController(char const*)>
c00235d1:	83 c4 10             	add    esp,0x10
c00235d4:	ba ac d4 02 c0       	mov    edx,0xc002d4ac
c00235d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235dd:	89 10                	mov    DWORD PTR [eax],edx
c00235df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235e3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00235ea:	90                   	nop
c00235eb:	83 c4 0c             	add    esp,0xc
c00235ee:	c3                   	ret    
c00235ef:	90                   	nop

c00235f0 <IDE::prepareInterrupt(unsigned char)>:
c00235f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00235f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00235f9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023601:	c3                   	ret    

c0023602 <selectDrive(unsigned char, unsigned char)>:
c0023602:	c3                   	ret    
c0023603:	90                   	nop

c0023604 <IDE::getBase(unsigned char)>:
c0023604:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023609:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002360d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023615:	c3                   	ret    

c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023616:	55                   	push   ebp
c0023617:	57                   	push   edi
c0023618:	56                   	push   esi
c0023619:	53                   	push   ebx
c002361a:	83 ec 1c             	sub    esp,0x1c
c002361d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023621:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023625:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023628:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002362c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023630:	80 f9 03             	cmp    cl,0x3
c0023633:	77 51                	ja     c0023686 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023635:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023639:	0f b6 f2             	movzx  esi,dl
c002363c:	0f b6 db             	movzx  ebx,bl
c002363f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023642:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023646:	83 ca 80             	or     edx,0xffffff80
c0023649:	0f b6 d2             	movzx  edx,dl
c002364c:	52                   	push   edx
c002364d:	6a 0c                	push   0xc
c002364f:	56                   	push   esi
c0023650:	57                   	push   edi
c0023651:	e8 c0 ff ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023656:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002365b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002365f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023663:	ee                   	out    dx,al
c0023664:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023669:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002366d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023671:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023675:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002367d:	83 c4 2c             	add    esp,0x2c
c0023680:	5b                   	pop    ebx
c0023681:	5e                   	pop    esi
c0023682:	5f                   	pop    edi
c0023683:	5d                   	pop    ebp
c0023684:	eb 90                	jmp    c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023686:	80 fb 07             	cmp    bl,0x7
c0023689:	77 12                	ja     c002369d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002368b:	0f b6 d2             	movzx  edx,dl
c002368e:	0f b6 db             	movzx  ebx,bl
c0023691:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023699:	89 da                	mov    edx,ebx
c002369b:	eb 2f                	jmp    c00236cc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002369d:	80 fb 0d             	cmp    bl,0xd
c00236a0:	77 13                	ja     c00236b5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00236a2:	0f b6 d2             	movzx  edx,dl
c00236a5:	0f b6 db             	movzx  ebx,bl
c00236a8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00236af:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00236b3:	eb 17                	jmp    c00236cc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00236b5:	80 fb 15             	cmp    bl,0x15
c00236b8:	77 13                	ja     c00236cd <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00236ba:	0f b6 d2             	movzx  edx,dl
c00236bd:	0f b6 db             	movzx  ebx,bl
c00236c0:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00236c8:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00236cc:	ee                   	out    dx,al
c00236cd:	83 c4 1c             	add    esp,0x1c
c00236d0:	5b                   	pop    ebx
c00236d1:	5e                   	pop    esi
c00236d2:	5f                   	pop    edi
c00236d3:	5d                   	pop    ebp
c00236d4:	c3                   	ret    
c00236d5:	90                   	nop

c00236d6 <IDE::read(unsigned char, unsigned char)>:
c00236d6:	55                   	push   ebp
c00236d7:	57                   	push   edi
c00236d8:	56                   	push   esi
c00236d9:	53                   	push   ebx
c00236da:	83 ec 1c             	sub    esp,0x1c
c00236dd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00236e1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00236e5:	8d 43 f8             	lea    eax,[ebx-0x8]
c00236e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00236ec:	3c 03                	cmp    al,0x3
c00236ee:	77 43                	ja     c0023733 <IDE::read(unsigned char, unsigned char)+0x5d>
c00236f0:	0f b6 f2             	movzx  esi,dl
c00236f3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00236f6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00236fa:	83 c8 80             	or     eax,0xffffff80
c00236fd:	0f b6 c0             	movzx  eax,al
c0023700:	50                   	push   eax
c0023701:	6a 0c                	push   0xc
c0023703:	56                   	push   esi
c0023704:	57                   	push   edi
c0023705:	e8 0c ff ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002370a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002370f:	0f b6 c3             	movzx  eax,bl
c0023712:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023716:	ec                   	in     al,dx
c0023717:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002371b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023720:	52                   	push   edx
c0023721:	6a 0c                	push   0xc
c0023723:	56                   	push   esi
c0023724:	57                   	push   edi
c0023725:	e8 ec fe ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002372a:	83 c4 20             	add    esp,0x20
c002372d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023731:	eb 49                	jmp    c002377c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023733:	80 fb 07             	cmp    bl,0x7
c0023736:	77 12                	ja     c002374a <IDE::read(unsigned char, unsigned char)+0x74>
c0023738:	0f b6 d2             	movzx  edx,dl
c002373b:	0f b6 c3             	movzx  eax,bl
c002373e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023746:	89 c2                	mov    edx,eax
c0023748:	eb 31                	jmp    c002377b <IDE::read(unsigned char, unsigned char)+0xa5>
c002374a:	80 fb 0d             	cmp    bl,0xd
c002374d:	77 13                	ja     c0023762 <IDE::read(unsigned char, unsigned char)+0x8c>
c002374f:	0f b6 d2             	movzx  edx,dl
c0023752:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023759:	0f b6 d3             	movzx  edx,bl
c002375c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023760:	eb 19                	jmp    c002377b <IDE::read(unsigned char, unsigned char)+0xa5>
c0023762:	31 c0                	xor    eax,eax
c0023764:	80 fb 15             	cmp    bl,0x15
c0023767:	77 13                	ja     c002377c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023769:	0f b6 d2             	movzx  edx,dl
c002376c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023774:	0f b6 d3             	movzx  edx,bl
c0023777:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002377b:	ec                   	in     al,dx
c002377c:	83 c4 1c             	add    esp,0x1c
c002377f:	5b                   	pop    ebx
c0023780:	5e                   	pop    esi
c0023781:	5f                   	pop    edi
c0023782:	5d                   	pop    ebp
c0023783:	c3                   	ret    

c0023784 <IDE::waitInterrupt(unsigned char)>:
c0023784:	55                   	push   ebp
c0023785:	57                   	push   edi
c0023786:	56                   	push   esi
c0023787:	53                   	push   ebx
c0023788:	31 db                	xor    ebx,ebx
c002378a:	83 ec 0c             	sub    esp,0xc
c002378d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023791:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023796:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002379e:	89 e8                	mov    eax,ebp
c00237a0:	84 c0                	test   al,al
c00237a2:	75 34                	jne    c00237d8 <IDE::waitInterrupt(unsigned char)+0x54>
c00237a4:	52                   	push   edx
c00237a5:	6a 0c                	push   0xc
c00237a7:	56                   	push   esi
c00237a8:	57                   	push   edi
c00237a9:	e8 28 ff ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c00237ae:	83 c4 10             	add    esp,0x10
c00237b1:	a8 01                	test   al,0x1
c00237b3:	75 2b                	jne    c00237e0 <IDE::waitInterrupt(unsigned char)+0x5c>
c00237b5:	f6 c3 04             	test   bl,0x4
c00237b8:	75 16                	jne    c00237d0 <IDE::waitInterrupt(unsigned char)+0x4c>
c00237ba:	83 fb 32             	cmp    ebx,0x32
c00237bd:	7e 11                	jle    c00237d0 <IDE::waitInterrupt(unsigned char)+0x4c>
c00237bf:	50                   	push   eax
c00237c0:	50                   	push   eax
c00237c1:	6a 00                	push   0x0
c00237c3:	68 80 96 98 00       	push   0x989680
c00237c8:	e8 6c a9 ff ff       	call   c001e139 <nanoSleep(unsigned long long)>
c00237cd:	83 c4 10             	add    esp,0x10
c00237d0:	83 fb 3c             	cmp    ebx,0x3c
c00237d3:	74 0b                	je     c00237e0 <IDE::waitInterrupt(unsigned char)+0x5c>
c00237d5:	43                   	inc    ebx
c00237d6:	eb be                	jmp    c0023796 <IDE::waitInterrupt(unsigned char)+0x12>
c00237d8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00237e0:	83 c4 0c             	add    esp,0xc
c00237e3:	89 e8                	mov    eax,ebp
c00237e5:	5b                   	pop    ebx
c00237e6:	5e                   	pop    esi
c00237e7:	5f                   	pop    edi
c00237e8:	5d                   	pop    ebp
c00237e9:	c3                   	ret    

c00237ea <ideChannel0IRQHandler(regs*, void*)>:
c00237ea:	83 ec 10             	sub    esp,0x10
c00237ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00237f1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00237f8:	6a 07                	push   0x7
c00237fa:	6a 00                	push   0x0
c00237fc:	50                   	push   eax
c00237fd:	e8 d4 fe ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0023802:	83 c4 1c             	add    esp,0x1c
c0023805:	c3                   	ret    

c0023806 <ideChannel1IRQHandler(regs*, void*)>:
c0023806:	83 ec 10             	sub    esp,0x10
c0023809:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002380d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023814:	6a 07                	push   0x7
c0023816:	6a 01                	push   0x1
c0023818:	50                   	push   eax
c0023819:	e8 b8 fe ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c002381e:	83 c4 1c             	add    esp,0x1c
c0023821:	c3                   	ret    

c0023822 <IDE::enableIRQs(unsigned char, bool)>:
c0023822:	57                   	push   edi
c0023823:	56                   	push   esi
c0023824:	be 04 00 00 00       	mov    esi,0x4
c0023829:	53                   	push   ebx
c002382a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002382f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023833:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023838:	0f 94 c0             	sete   al
c002383b:	d1 e0                	shl    eax,1
c002383d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023844:	0f b6 c0             	movzx  eax,al
c0023847:	50                   	push   eax
c0023848:	6a 0c                	push   0xc
c002384a:	57                   	push   edi
c002384b:	53                   	push   ebx
c002384c:	e8 c5 fd ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023851:	83 c4 10             	add    esp,0x10
c0023854:	50                   	push   eax
c0023855:	6a 0c                	push   0xc
c0023857:	57                   	push   edi
c0023858:	53                   	push   ebx
c0023859:	e8 78 fe ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c002385e:	83 c4 10             	add    esp,0x10
c0023861:	4e                   	dec    esi
c0023862:	75 f0                	jne    c0023854 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023864:	5b                   	pop    ebx
c0023865:	5e                   	pop    esi
c0023866:	5f                   	pop    edi
c0023867:	c3                   	ret    

c0023868 <IDE::open(int, int, void*)>:
c0023868:	55                   	push   ebp
c0023869:	57                   	push   edi
c002386a:	56                   	push   esi
c002386b:	53                   	push   ebx
c002386c:	83 ec 1c             	sub    esp,0x1c
c002386f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023873:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002387c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023885:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002388c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023893:	0f 85 b0 02 00 00    	jne    c0023b49 <IDE::open(int, int, void*)+0x2e1>
c0023899:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002389f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00238a3:	83 e0 7f             	and    eax,0x7f
c00238a6:	3c 05                	cmp    al,0x5
c00238a8:	74 04                	je     c00238ae <IDE::open(int, int, void*)+0x46>
c00238aa:	3c 0f                	cmp    al,0xf
c00238ac:	75 32                	jne    c00238e0 <IDE::open(int, int, void*)+0x78>
c00238ae:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00238b4:	83 e0 fc             	and    eax,0xfffffffc
c00238b7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00238be:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00238c4:	83 e0 fc             	and    eax,0xfffffffc
c00238c7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00238ce:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00238d4:	83 e0 fc             	and    eax,0xfffffffc
c00238d7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00238de:	eb 14                	jmp    c00238f4 <IDE::open(int, int, void*)+0x8c>
c00238e0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00238ea:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00238f4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00238fb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023902:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023906:	89 c6                	mov    esi,eax
c0023908:	bf f8 0c 00 00       	mov    edi,0xcf8
c002390d:	c1 e6 10             	shl    esi,0x10
c0023910:	89 e8                	mov    eax,ebp
c0023912:	89 fa                	mov    edx,edi
c0023914:	c1 e0 0b             	shl    eax,0xb
c0023917:	09 f0                	or     eax,esi
c0023919:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023920:	c1 e6 08             	shl    esi,0x8
c0023923:	09 c6                	or     esi,eax
c0023925:	89 f0                	mov    eax,esi
c0023927:	0d 08 00 00 80       	or     eax,0x80000008
c002392c:	ef                   	out    dx,eax
c002392d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023932:	89 ca                	mov    edx,ecx
c0023934:	ed                   	in     eax,dx
c0023935:	c1 e8 10             	shr    eax,0x10
c0023938:	3d ff ff 00 00       	cmp    eax,0xffff
c002393d:	0f 84 f5 00 00 00    	je     c0023a38 <IDE::open(int, int, void*)+0x1d0>
c0023943:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023949:	89 fa                	mov    edx,edi
c002394b:	89 f0                	mov    eax,esi
c002394d:	ef                   	out    dx,eax
c002394e:	b0 fe                	mov    al,0xfe
c0023950:	89 ca                	mov    edx,ecx
c0023952:	ee                   	out    dx,al
c0023953:	89 f0                	mov    eax,esi
c0023955:	89 fa                	mov    edx,edi
c0023957:	ef                   	out    dx,eax
c0023958:	89 ca                	mov    edx,ecx
c002395a:	ed                   	in     eax,dx
c002395b:	3c fe                	cmp    al,0xfe
c002395d:	0f 85 a9 00 00 00    	jne    c0023a0c <IDE::open(int, int, void*)+0x1a4>
c0023963:	8b 15 48 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002ed48
c0023969:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023970:	74 33                	je     c00239a5 <IDE::open(int, int, void*)+0x13d>
c0023972:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023978:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002397c:	40                   	inc    eax
c002397d:	83 ec 0c             	sub    esp,0xc
c0023980:	0f b6 c0             	movzx  eax,al
c0023983:	50                   	push   eax
c0023984:	55                   	push   ebp
c0023985:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023989:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002398f:	51                   	push   ecx
c0023990:	e8 d3 40 ff ff       	call   c0017a68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023995:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002399a:	83 c4 1c             	add    esp,0x1c
c002399d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00239a3:	eb 0a                	jmp    c00239af <IDE::open(int, int, void*)+0x147>
c00239a5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00239af:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00239b6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00239bd:	c1 e1 10             	shl    ecx,0x10
c00239c0:	c1 e0 08             	shl    eax,0x8
c00239c3:	bf f8 0c 00 00       	mov    edi,0xcf8
c00239c8:	09 c1                	or     ecx,eax
c00239ca:	89 fa                	mov    edx,edi
c00239cc:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00239d3:	c1 e0 0b             	shl    eax,0xb
c00239d6:	09 c1                	or     ecx,eax
c00239d8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00239de:	89 c8                	mov    eax,ecx
c00239e0:	ef                   	out    dx,eax
c00239e1:	be fc 0c 00 00       	mov    esi,0xcfc
c00239e6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00239ec:	89 f2                	mov    edx,esi
c00239ee:	ee                   	out    dx,al
c00239ef:	89 c8                	mov    eax,ecx
c00239f1:	89 fa                	mov    edx,edi
c00239f3:	ef                   	out    dx,eax
c00239f4:	89 f2                	mov    edx,esi
c00239f6:	ed                   	in     eax,dx
c00239f7:	0f b6 c0             	movzx  eax,al
c00239fa:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023a00:	74 46                	je     c0023a48 <IDE::open(int, int, void*)+0x1e0>
c0023a02:	83 ec 0c             	sub    esp,0xc
c0023a05:	68 74 d2 02 c0       	push   0xc002d274
c0023a0a:	eb 34                	jmp    c0023a40 <IDE::open(int, int, void*)+0x1d8>
c0023a0c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023a15:	75 17                	jne    c0023a2e <IDE::open(int, int, void*)+0x1c6>
c0023a17:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023a1c:	74 07                	je     c0023a25 <IDE::open(int, int, void*)+0x1bd>
c0023a1e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023a23:	75 09                	jne    c0023a2e <IDE::open(int, int, void*)+0x1c6>
c0023a25:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023a2c:	eb 1a                	jmp    c0023a48 <IDE::open(int, int, void*)+0x1e0>
c0023a2e:	83 ec 0c             	sub    esp,0xc
c0023a31:	68 7c d2 02 c0       	push   0xc002d27c
c0023a36:	eb 08                	jmp    c0023a40 <IDE::open(int, int, void*)+0x1d8>
c0023a38:	83 ec 0c             	sub    esp,0xc
c0023a3b:	68 ad d2 02 c0       	push   0xc002d2ad
c0023a40:	e8 38 66 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0023a45:	83 c4 10             	add    esp,0x10
c0023a48:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023a4f:	79 1a                	jns    c0023a6b <IDE::open(int, int, void*)+0x203>
c0023a51:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023a57:	83 e0 fc             	and    eax,0xfffffffc
c0023a5a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023a61:	83 c0 08             	add    eax,0x8
c0023a64:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023a6b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023a71:	89 c2                	mov    edx,eax
c0023a73:	83 e2 0f             	and    edx,0xf
c0023a76:	66 83 fa 08          	cmp    dx,0x8
c0023a7a:	75 0a                	jne    c0023a86 <IDE::open(int, int, void*)+0x21e>
c0023a7c:	83 e8 02             	sub    eax,0x2
c0023a7f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023a86:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023a8c:	89 c2                	mov    edx,eax
c0023a8e:	83 e2 0f             	and    edx,0xf
c0023a91:	66 83 fa 08          	cmp    dx,0x8
c0023a95:	75 0a                	jne    c0023aa1 <IDE::open(int, int, void*)+0x239>
c0023a97:	83 e8 02             	sub    eax,0x2
c0023a9a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023aa1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023aa8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023aaf:	89 d0                	mov    eax,edx
c0023ab1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023ab4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023ab8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023abc:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023abf:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023ac4:	0f b6 c9             	movzx  ecx,cl
c0023ac7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023ace:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023ad1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023ad5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023ad9:	8d 50 02             	lea    edx,[eax+0x2]
c0023adc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023ae1:	0f b6 d2             	movzx  edx,dl
c0023ae4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023aea:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023aed:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023af1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023af5:	8d 48 03             	lea    ecx,[eax+0x3]
c0023af8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023afd:	0f b6 c9             	movzx  ecx,cl
c0023b00:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023b06:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023b09:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023b0d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023b11:	8d 50 04             	lea    edx,[eax+0x4]
c0023b14:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023b1a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023b1f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023b26:	66 85 f6             	test   si,si
c0023b29:	74 6b                	je     c0023b96 <IDE::open(int, int, void*)+0x32e>
c0023b2b:	0f b6 d2             	movzx  edx,dl
c0023b2e:	83 c0 05             	add    eax,0x5
c0023b31:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023b34:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023b38:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023b3c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023b42:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023b47:	eb 4d                	jmp    c0023b96 <IDE::open(int, int, void*)+0x32e>
c0023b49:	83 ec 0c             	sub    esp,0xc
c0023b4c:	68 d7 d2 02 c0       	push   0xc002d2d7
c0023b51:	e8 59 ea fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0023b56:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023b5c:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023b63:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023b6a:	83 c4 10             	add    esp,0x10
c0023b6d:	66 05 06 02          	add    ax,0x206
c0023b71:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023b78:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023b7f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023b86:	66 05 06 02          	add    ax,0x206
c0023b8a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023b91:	e9 d5 fe ff ff       	jmp    c0023a6b <IDE::open(int, int, void*)+0x203>
c0023b96:	52                   	push   edx
c0023b97:	52                   	push   edx
c0023b98:	6a 00                	push   0x0
c0023b9a:	53                   	push   ebx
c0023b9b:	e8 50 fa ff ff       	call   c00235f0 <IDE::prepareInterrupt(unsigned char)>
c0023ba0:	59                   	pop    ecx
c0023ba1:	5e                   	pop    esi
c0023ba2:	6a 01                	push   0x1
c0023ba4:	53                   	push   ebx
c0023ba5:	e8 46 fa ff ff       	call   c00235f0 <IDE::prepareInterrupt(unsigned char)>
c0023baa:	83 c4 0c             	add    esp,0xc
c0023bad:	6a 00                	push   0x0
c0023baf:	6a 00                	push   0x0
c0023bb1:	53                   	push   ebx
c0023bb2:	e8 6b fc ff ff       	call   c0023822 <IDE::enableIRQs(unsigned char, bool)>
c0023bb7:	83 c4 0c             	add    esp,0xc
c0023bba:	6a 00                	push   0x0
c0023bbc:	6a 01                	push   0x1
c0023bbe:	53                   	push   ebx
c0023bbf:	e8 5e fc ff ff       	call   c0023822 <IDE::enableIRQs(unsigned char, bool)>
c0023bc4:	83 c4 10             	add    esp,0x10
c0023bc7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023bce:	74 40                	je     c0023c10 <IDE::open(int, int, void*)+0x3a8>
c0023bd0:	83 ec 0c             	sub    esp,0xc
c0023bd3:	68 e8 d2 02 c0       	push   0xc002d2e8
c0023bd8:	e8 d2 e9 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0023bdd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023be0:	6a 01                	push   0x1
c0023be2:	68 ea 37 02 c0       	push   0xc00237ea
c0023be7:	6a 0e                	push   0xe
c0023be9:	53                   	push   ebx
c0023bea:	e8 71 fd fe ff       	call   c0013960 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023bef:	83 c4 14             	add    esp,0x14
c0023bf2:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023bf8:	53                   	push   ebx
c0023bf9:	6a 01                	push   0x1
c0023bfb:	68 06 38 02 c0       	push   0xc0023806
c0023c00:	6a 0f                	push   0xf
c0023c02:	53                   	push   ebx
c0023c03:	e8 58 fd fe ff       	call   c0013960 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023c08:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023c0e:	eb 4a                	jmp    c0023c5a <IDE::open(int, int, void*)+0x3f2>
c0023c10:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023c1a:	50                   	push   eax
c0023c1b:	6a 0f                	push   0xf
c0023c1d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023c23:	68 04 d3 02 c0       	push   0xc002d304
c0023c28:	e8 82 e9 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0023c2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023c30:	6a 00                	push   0x0
c0023c32:	68 ea 37 02 c0       	push   0xc00237ea
c0023c37:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023c3d:	53                   	push   ebx
c0023c3e:	e8 1d fd fe ff       	call   c0013960 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023c43:	83 c4 14             	add    esp,0x14
c0023c46:	53                   	push   ebx
c0023c47:	6a 00                	push   0x0
c0023c49:	68 06 38 02 c0       	push   0xc0023806
c0023c4e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023c54:	53                   	push   ebx
c0023c55:	e8 06 fd fe ff       	call   c0013960 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023c5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c5c:	83 c4 20             	add    esp,0x20
c0023c5f:	83 ec 0c             	sub    esp,0xc
c0023c62:	53                   	push   ebx
c0023c63:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023c66:	83 c4 0c             	add    esp,0xc
c0023c69:	6a 07                	push   0x7
c0023c6b:	6a 00                	push   0x0
c0023c6d:	53                   	push   ebx
c0023c6e:	e8 63 fa ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0023c73:	83 c4 0c             	add    esp,0xc
c0023c76:	6a 07                	push   0x7
c0023c78:	6a 01                	push   0x1
c0023c7a:	53                   	push   ebx
c0023c7b:	e8 56 fa ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0023c80:	83 c4 0c             	add    esp,0xc
c0023c83:	6a 01                	push   0x1
c0023c85:	6a 00                	push   0x0
c0023c87:	53                   	push   ebx
c0023c88:	e8 95 fb ff ff       	call   c0023822 <IDE::enableIRQs(unsigned char, bool)>
c0023c8d:	83 c4 0c             	add    esp,0xc
c0023c90:	6a 01                	push   0x1
c0023c92:	6a 01                	push   0x1
c0023c94:	53                   	push   ebx
c0023c95:	e8 88 fb ff ff       	call   c0023822 <IDE::enableIRQs(unsigned char, bool)>
c0023c9a:	83 c4 2c             	add    esp,0x2c
c0023c9d:	31 c0                	xor    eax,eax
c0023c9f:	5b                   	pop    ebx
c0023ca0:	5e                   	pop    esi
c0023ca1:	5f                   	pop    edi
c0023ca2:	5d                   	pop    ebp
c0023ca3:	c3                   	ret    

c0023ca4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023ca4:	55                   	push   ebp
c0023ca5:	57                   	push   edi
c0023ca6:	56                   	push   esi
c0023ca7:	53                   	push   ebx
c0023ca8:	83 ec 1c             	sub    esp,0x1c
c0023cab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023caf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023cb3:	8d 50 f8             	lea    edx,[eax-0x8]
c0023cb6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023cba:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023cbe:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023cc2:	80 fa 03             	cmp    dl,0x3
c0023cc5:	77 5d                	ja     c0023d24 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023cc7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023ccb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023ccf:	0f b6 db             	movzx  ebx,bl
c0023cd2:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023cd5:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023cd9:	83 ca 80             	or     edx,0xffffff80
c0023cdc:	0f b6 d2             	movzx  edx,dl
c0023cdf:	52                   	push   edx
c0023ce0:	6a 0c                	push   0xc
c0023ce2:	53                   	push   ebx
c0023ce3:	56                   	push   esi
c0023ce4:	e8 2d f9 ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ce9:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023cee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023cf2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023cf6:	0f b6 c0             	movzx  eax,al
c0023cf9:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023cfd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023cff:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023d04:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023d08:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023d0c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023d10:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023d18:	83 c4 2c             	add    esp,0x2c
c0023d1b:	5b                   	pop    ebx
c0023d1c:	5e                   	pop    esi
c0023d1d:	5f                   	pop    edi
c0023d1e:	5d                   	pop    ebp
c0023d1f:	e9 f2 f8 ff ff       	jmp    c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d24:	3c 07                	cmp    al,0x7
c0023d26:	77 10                	ja     c0023d38 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023d28:	0f b6 db             	movzx  ebx,bl
c0023d2b:	0f b6 d0             	movzx  edx,al
c0023d2e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023d36:	eb 2d                	jmp    c0023d65 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023d38:	3c 0d                	cmp    al,0xd
c0023d3a:	77 13                	ja     c0023d4f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023d3c:	0f b6 db             	movzx  ebx,bl
c0023d3f:	0f b6 c0             	movzx  eax,al
c0023d42:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023d49:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023d4d:	eb 16                	jmp    c0023d65 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023d4f:	3c 15                	cmp    al,0x15
c0023d51:	77 14                	ja     c0023d67 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023d53:	0f b6 db             	movzx  ebx,bl
c0023d56:	0f b6 c0             	movzx  eax,al
c0023d59:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023d61:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023d65:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023d67:	83 c4 1c             	add    esp,0x1c
c0023d6a:	5b                   	pop    ebx
c0023d6b:	5e                   	pop    esi
c0023d6c:	5f                   	pop    edi
c0023d6d:	5d                   	pop    ebp
c0023d6e:	c3                   	ret    
c0023d6f:	90                   	nop

c0023d70 <IDE::detect()>:
c0023d70:	55                   	push   ebp
c0023d71:	57                   	push   edi
c0023d72:	56                   	push   esi
c0023d73:	53                   	push   ebx
c0023d74:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023d7a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023d81:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023d88:	0f 85 be 02 00 00    	jne    c002404c <IDE::detect()+0x2dc>
c0023d8e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023d95:	31 f6                	xor    esi,esi
c0023d97:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023d9f:	31 ed                	xor    ebp,ebp
c0023da1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023da5:	c1 e0 06             	shl    eax,0x6
c0023da8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023db0:	89 e8                	mov    eax,ebp
c0023db2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023db6:	c1 e0 04             	shl    eax,0x4
c0023db9:	83 c8 a0             	or     eax,0xffffffa0
c0023dbc:	0f b6 c0             	movzx  eax,al
c0023dbf:	50                   	push   eax
c0023dc0:	6a 06                	push   0x6
c0023dc2:	56                   	push   esi
c0023dc3:	53                   	push   ebx
c0023dc4:	e8 4d f8 ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023dc9:	83 c4 0c             	add    esp,0xc
c0023dcc:	6a 0c                	push   0xc
c0023dce:	56                   	push   esi
c0023dcf:	53                   	push   ebx
c0023dd0:	e8 01 f9 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0023dd5:	83 c4 0c             	add    esp,0xc
c0023dd8:	6a 0c                	push   0xc
c0023dda:	56                   	push   esi
c0023ddb:	53                   	push   ebx
c0023ddc:	e8 f5 f8 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0023de1:	83 c4 0c             	add    esp,0xc
c0023de4:	6a 0c                	push   0xc
c0023de6:	56                   	push   esi
c0023de7:	53                   	push   ebx
c0023de8:	e8 e9 f8 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0023ded:	83 c4 0c             	add    esp,0xc
c0023df0:	6a 0c                	push   0xc
c0023df2:	56                   	push   esi
c0023df3:	53                   	push   ebx
c0023df4:	e8 dd f8 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0023df9:	68 ec 00 00 00       	push   0xec
c0023dfe:	6a 07                	push   0x7
c0023e00:	56                   	push   esi
c0023e01:	53                   	push   ebx
c0023e02:	e8 0f f8 ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e07:	83 c4 1c             	add    esp,0x1c
c0023e0a:	6a 0c                	push   0xc
c0023e0c:	56                   	push   esi
c0023e0d:	53                   	push   ebx
c0023e0e:	e8 c3 f8 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0023e13:	83 c4 0c             	add    esp,0xc
c0023e16:	6a 0c                	push   0xc
c0023e18:	56                   	push   esi
c0023e19:	53                   	push   ebx
c0023e1a:	e8 b7 f8 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0023e1f:	83 c4 0c             	add    esp,0xc
c0023e22:	6a 0c                	push   0xc
c0023e24:	56                   	push   esi
c0023e25:	53                   	push   ebx
c0023e26:	e8 ab f8 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0023e2b:	83 c4 0c             	add    esp,0xc
c0023e2e:	6a 0c                	push   0xc
c0023e30:	56                   	push   esi
c0023e31:	53                   	push   ebx
c0023e32:	e8 9f f8 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0023e37:	83 c4 0c             	add    esp,0xc
c0023e3a:	6a 0c                	push   0xc
c0023e3c:	56                   	push   esi
c0023e3d:	53                   	push   ebx
c0023e3e:	e8 93 f8 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0023e43:	83 c4 10             	add    esp,0x10
c0023e46:	84 c0                	test   al,al
c0023e48:	0f 84 8b 01 00 00    	je     c0023fd9 <IDE::detect()+0x269>
c0023e4e:	31 ff                	xor    edi,edi
c0023e50:	50                   	push   eax
c0023e51:	6a 0c                	push   0xc
c0023e53:	56                   	push   esi
c0023e54:	53                   	push   ebx
c0023e55:	e8 7c f8 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0023e5a:	83 c4 10             	add    esp,0x10
c0023e5d:	a8 01                	test   al,0x1
c0023e5f:	0f 85 8e 01 00 00    	jne    c0023ff3 <IDE::detect()+0x283>
c0023e65:	84 c0                	test   al,al
c0023e67:	78 04                	js     c0023e6d <IDE::detect()+0xfd>
c0023e69:	a8 08                	test   al,0x8
c0023e6b:	75 27                	jne    c0023e94 <IDE::detect()+0x124>
c0023e6d:	47                   	inc    edi
c0023e6e:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023e74:	7e da                	jle    c0023e50 <IDE::detect()+0xe0>
c0023e76:	50                   	push   eax
c0023e77:	50                   	push   eax
c0023e78:	6a 00                	push   0x0
c0023e7a:	68 40 4b 4c 00       	push   0x4c4b40
c0023e7f:	e8 b5 a2 ff ff       	call   c001e139 <nanoSleep(unsigned long long)>
c0023e84:	83 c4 10             	add    esp,0x10
c0023e87:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023e8d:	75 c1                	jne    c0023e50 <IDE::detect()+0xe0>
c0023e8f:	e9 5f 01 00 00       	jmp    c0023ff3 <IDE::detect()+0x283>
c0023e94:	31 c9                	xor    ecx,ecx
c0023e96:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023e9a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023e9e:	83 ec 0c             	sub    esp,0xc
c0023ea1:	68 80 00 00 00       	push   0x80
c0023ea6:	57                   	push   edi
c0023ea7:	6a 00                	push   0x0
c0023ea9:	56                   	push   esi
c0023eaa:	53                   	push   ebx
c0023eab:	e8 f4 fd ff ff       	call   c0023ca4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023eb0:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023eb5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023eb9:	89 d1                	mov    ecx,edx
c0023ebb:	c1 e0 06             	shl    eax,0x6
c0023ebe:	01 d8                	add    eax,ebx
c0023ec0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023ec7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023ece:	89 f2                	mov    edx,esi
c0023ed0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023ed6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023eda:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023ee0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023ee4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023eeb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023ef3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023efa:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023f02:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023f08:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023f0f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023f15:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023f19:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023f1d:	83 c4 20             	add    esp,0x20
c0023f20:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023f23:	83 c0 02             	add    eax,0x2
c0023f26:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023f2c:	83 c7 02             	add    edi,0x2
c0023f2f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023f32:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023f38:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023f3c:	75 e2                	jne    c0023f20 <IDE::detect()+0x1b0>
c0023f3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023f42:	c1 e0 06             	shl    eax,0x6
c0023f45:	01 d8                	add    eax,ebx
c0023f47:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023f4d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023f54:	66 c1 ea 09          	shr    dx,0x9
c0023f58:	83 e2 01             	and    edx,0x1
c0023f5b:	84 c9                	test   cl,cl
c0023f5d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023f63:	75 2f                	jne    c0023f94 <IDE::detect()+0x224>
c0023f65:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023f6b:	85 c0                	test   eax,eax
c0023f6d:	74 66                	je     c0023fd5 <IDE::detect()+0x265>
c0023f6f:	50                   	push   eax
c0023f70:	55                   	push   ebp
c0023f71:	56                   	push   esi
c0023f72:	68 20 d3 02 c0       	push   0xc002d320
c0023f77:	e8 33 e6 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0023f7c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023f83:	e8 2e b6 fe ff       	call   c000f5b6 <malloc>
c0023f88:	89 c7                	mov    edi,eax
c0023f8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f8d:	e8 78 06 00 00       	call   c002460a <ATA::ATA()>
c0023f92:	eb 28                	jmp    c0023fbc <IDE::detect()+0x24c>
c0023f94:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023f9a:	55                   	push   ebp
c0023f9b:	56                   	push   esi
c0023f9c:	68 4f d3 02 c0       	push   0xc002d34f
c0023fa1:	e8 09 e6 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0023fa6:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023fad:	e8 04 b6 fe ff       	call   c000f5b6 <malloc>
c0023fb2:	89 c7                	mov    edi,eax
c0023fb4:	89 04 24             	mov    DWORD PTR [esp],eax
c0023fb7:	e8 56 0c 00 00       	call   c0024c12 <ATAPI::ATAPI()>
c0023fbc:	5a                   	pop    edx
c0023fbd:	59                   	pop    ecx
c0023fbe:	57                   	push   edi
c0023fbf:	53                   	push   ebx
c0023fc0:	e8 23 fa fe ff       	call   c00139e8 <Device::addChild(Device*)>
c0023fc5:	8b 07                	mov    eax,DWORD PTR [edi]
c0023fc7:	53                   	push   ebx
c0023fc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023fcc:	6a 00                	push   0x0
c0023fce:	57                   	push   edi
c0023fcf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023fd2:	83 c4 20             	add    esp,0x20
c0023fd5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023fd9:	4d                   	dec    ebp
c0023fda:	74 0a                	je     c0023fe6 <IDE::detect()+0x276>
c0023fdc:	bd 01 00 00 00       	mov    ebp,0x1
c0023fe1:	e9 bb fd ff ff       	jmp    c0023da1 <IDE::detect()+0x31>
c0023fe6:	4e                   	dec    esi
c0023fe7:	74 63                	je     c002404c <IDE::detect()+0x2dc>
c0023fe9:	be 01 00 00 00       	mov    esi,0x1
c0023fee:	e9 ac fd ff ff       	jmp    c0023d9f <IDE::detect()+0x2f>
c0023ff3:	50                   	push   eax
c0023ff4:	6a 04                	push   0x4
c0023ff6:	56                   	push   esi
c0023ff7:	53                   	push   ebx
c0023ff8:	e8 d9 f6 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0023ffd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0024001:	83 c4 0c             	add    esp,0xc
c0024004:	6a 05                	push   0x5
c0024006:	56                   	push   esi
c0024007:	53                   	push   ebx
c0024008:	e8 c9 f6 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c002400d:	83 c4 10             	add    esp,0x10
c0024010:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0024014:	80 fa 14             	cmp    dl,0x14
c0024017:	75 04                	jne    c002401d <IDE::detect()+0x2ad>
c0024019:	3c eb                	cmp    al,0xeb
c002401b:	eb 07                	jmp    c0024024 <IDE::detect()+0x2b4>
c002401d:	3c 96                	cmp    al,0x96
c002401f:	75 b8                	jne    c0023fd9 <IDE::detect()+0x269>
c0024021:	80 fa 69             	cmp    dl,0x69
c0024024:	75 b3                	jne    c0023fd9 <IDE::detect()+0x269>
c0024026:	68 a1 00 00 00       	push   0xa1
c002402b:	6a 07                	push   0x7
c002402d:	56                   	push   esi
c002402e:	53                   	push   ebx
c002402f:	e8 e2 f5 ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024034:	5f                   	pop    edi
c0024035:	58                   	pop    eax
c0024036:	6a 00                	push   0x0
c0024038:	68 40 42 0f 00       	push   0xf4240
c002403d:	e8 f7 a0 ff ff       	call   c001e139 <nanoSleep(unsigned long long)>
c0024042:	83 c4 10             	add    esp,0x10
c0024045:	b1 01                	mov    cl,0x1
c0024047:	e9 4a fe ff ff       	jmp    c0023e96 <IDE::detect()+0x126>
c002404c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0024052:	5b                   	pop    ebx
c0024053:	5e                   	pop    esi
c0024054:	5f                   	pop    edi
c0024055:	5d                   	pop    ebp
c0024056:	c3                   	ret    
c0024057:	90                   	nop

c0024058 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0024058:	55                   	push   ebp
c0024059:	57                   	push   edi
c002405a:	56                   	push   esi
c002405b:	53                   	push   ebx
c002405c:	83 ec 1c             	sub    esp,0x1c
c002405f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024063:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0024067:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002406b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002406f:	88 c3                	mov    bl,al
c0024071:	84 c0                	test   al,al
c0024073:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024077:	0f 84 67 01 00 00    	je     c00241e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c002407d:	83 ec 0c             	sub    esp,0xc
c0024080:	68 80 d3 02 c0       	push   0xc002d380
c0024085:	e8 25 e5 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c002408a:	83 c4 10             	add    esp,0x10
c002408d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024091:	3c 01                	cmp    al,0x1
c0024093:	75 17                	jne    c00240ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0024095:	83 ec 0c             	sub    esp,0xc
c0024098:	b3 13                	mov    bl,0x13
c002409a:	68 8c d3 02 c0       	push   0xc002d38c
c002409f:	e8 0b e5 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00240a4:	83 c4 10             	add    esp,0x10
c00240a7:	e9 25 01 00 00       	jmp    c00241d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00240ac:	3c 02                	cmp    al,0x2
c00240ae:	0f 85 ef 00 00 00    	jne    c00241a3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00240b4:	d1 e6                	shl    esi,1
c00240b6:	09 ee                	or     esi,ebp
c00240b8:	52                   	push   edx
c00240b9:	89 f0                	mov    eax,esi
c00240bb:	6a 01                	push   0x1
c00240bd:	0f b6 f0             	movzx  esi,al
c00240c0:	c1 e6 06             	shl    esi,0x6
c00240c3:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00240cb:	50                   	push   eax
c00240cc:	57                   	push   edi
c00240cd:	e8 04 f6 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c00240d2:	83 c4 10             	add    esp,0x10
c00240d5:	89 c6                	mov    esi,eax
c00240d7:	a8 01                	test   al,0x1
c00240d9:	74 12                	je     c00240ed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00240db:	83 ec 0c             	sub    esp,0xc
c00240de:	b3 07                	mov    bl,0x7
c00240e0:	68 a1 d3 02 c0       	push   0xc002d3a1
c00240e5:	e8 c5 e4 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00240ea:	83 c4 10             	add    esp,0x10
c00240ed:	f7 c6 02 00 00 00    	test   esi,0x2
c00240f3:	74 12                	je     c0024107 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00240f5:	83 ec 0c             	sub    esp,0xc
c00240f8:	b3 03                	mov    bl,0x3
c00240fa:	68 bf d3 02 c0       	push   0xc002d3bf
c00240ff:	e8 ab e4 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0024104:	83 c4 10             	add    esp,0x10
c0024107:	f7 c6 04 00 00 00    	test   esi,0x4
c002410d:	74 12                	je     c0024121 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c002410f:	83 ec 0c             	sub    esp,0xc
c0024112:	b3 14                	mov    bl,0x14
c0024114:	68 df d3 02 c0       	push   0xc002d3df
c0024119:	e8 91 e4 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c002411e:	83 c4 10             	add    esp,0x10
c0024121:	f7 c6 08 00 00 00    	test   esi,0x8
c0024127:	74 12                	je     c002413b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0024129:	83 ec 0c             	sub    esp,0xc
c002412c:	b3 03                	mov    bl,0x3
c002412e:	68 bf d3 02 c0       	push   0xc002d3bf
c0024133:	e8 77 e4 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0024138:	83 c4 10             	add    esp,0x10
c002413b:	f7 c6 10 00 00 00    	test   esi,0x10
c0024141:	74 12                	je     c0024155 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024143:	83 ec 0c             	sub    esp,0xc
c0024146:	b3 15                	mov    bl,0x15
c0024148:	68 f7 d3 02 c0       	push   0xc002d3f7
c002414d:	e8 5d e4 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0024152:	83 c4 10             	add    esp,0x10
c0024155:	f7 c6 20 00 00 00    	test   esi,0x20
c002415b:	74 12                	je     c002416f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c002415d:	83 ec 0c             	sub    esp,0xc
c0024160:	b3 03                	mov    bl,0x3
c0024162:	68 bf d3 02 c0       	push   0xc002d3bf
c0024167:	e8 43 e4 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c002416c:	83 c4 10             	add    esp,0x10
c002416f:	f7 c6 40 00 00 00    	test   esi,0x40
c0024175:	74 12                	je     c0024189 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0024177:	83 ec 0c             	sub    esp,0xc
c002417a:	b3 16                	mov    bl,0x16
c002417c:	68 11 d4 02 c0       	push   0xc002d411
c0024181:	e8 29 e4 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0024186:	83 c4 10             	add    esp,0x10
c0024189:	89 f0                	mov    eax,esi
c002418b:	84 c0                	test   al,al
c002418d:	79 42                	jns    c00241d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002418f:	83 ec 0c             	sub    esp,0xc
c0024192:	b3 0d                	mov    bl,0xd
c0024194:	68 32 d4 02 c0       	push   0xc002d432
c0024199:	e8 11 e4 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c002419e:	83 c4 10             	add    esp,0x10
c00241a1:	eb 2e                	jmp    c00241d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00241a3:	3c 03                	cmp    al,0x3
c00241a5:	75 14                	jne    c00241bb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00241a7:	83 ec 0c             	sub    esp,0xc
c00241aa:	b3 17                	mov    bl,0x17
c00241ac:	68 46 d4 02 c0       	push   0xc002d446
c00241b1:	e8 f9 e3 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00241b6:	83 c4 10             	add    esp,0x10
c00241b9:	eb 16                	jmp    c00241d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00241bb:	3c 04                	cmp    al,0x4
c00241bd:	75 12                	jne    c00241d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00241bf:	83 ec 0c             	sub    esp,0xc
c00241c2:	b3 08                	mov    bl,0x8
c00241c4:	68 5c d4 02 c0       	push   0xc002d45c
c00241c9:	e8 e1 e3 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00241ce:	83 c4 10             	add    esp,0x10
c00241d1:	50                   	push   eax
c00241d2:	50                   	push   eax
c00241d3:	0f b6 c3             	movzx  eax,bl
c00241d6:	50                   	push   eax
c00241d7:	68 74 d4 02 c0       	push   0xc002d474
c00241dc:	e8 ce e3 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00241e1:	83 c4 10             	add    esp,0x10
c00241e4:	83 c4 1c             	add    esp,0x1c
c00241e7:	88 d8                	mov    al,bl
c00241e9:	5b                   	pop    ebx
c00241ea:	5e                   	pop    esi
c00241eb:	5f                   	pop    edi
c00241ec:	5d                   	pop    ebp
c00241ed:	c3                   	ret    

c00241ee <IDE::polling(unsigned char, unsigned int)>:
c00241ee:	57                   	push   edi
c00241ef:	56                   	push   esi
c00241f0:	53                   	push   ebx
c00241f1:	bb 04 00 00 00       	mov    ebx,0x4
c00241f6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00241fa:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00241ff:	52                   	push   edx
c0024200:	6a 0c                	push   0xc
c0024202:	56                   	push   esi
c0024203:	57                   	push   edi
c0024204:	e8 cd f4 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0024209:	83 c4 10             	add    esp,0x10
c002420c:	4b                   	dec    ebx
c002420d:	75 f0                	jne    c00241ff <IDE::polling(unsigned char, unsigned int)+0x11>
c002420f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024214:	50                   	push   eax
c0024215:	6a 0c                	push   0xc
c0024217:	56                   	push   esi
c0024218:	57                   	push   edi
c0024219:	e8 b8 f4 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c002421e:	83 c4 10             	add    esp,0x10
c0024221:	a8 01                	test   al,0x1
c0024223:	74 12                	je     c0024237 <IDE::polling(unsigned char, unsigned int)+0x49>
c0024225:	83 ec 0c             	sub    esp,0xc
c0024228:	68 8e d4 02 c0       	push   0xc002d48e
c002422d:	e8 7d e3 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0024232:	83 c4 10             	add    esp,0x10
c0024235:	eb 17                	jmp    c002424e <IDE::polling(unsigned char, unsigned int)+0x60>
c0024237:	a8 20                	test   al,0x20
c0024239:	75 0f                	jne    c002424a <IDE::polling(unsigned char, unsigned int)+0x5c>
c002423b:	4b                   	dec    ebx
c002423c:	74 10                	je     c002424e <IDE::polling(unsigned char, unsigned int)+0x60>
c002423e:	84 c0                	test   al,al
c0024240:	78 d2                	js     c0024214 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024242:	a8 08                	test   al,0x8
c0024244:	74 ce                	je     c0024214 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024246:	31 c0                	xor    eax,eax
c0024248:	eb 06                	jmp    c0024250 <IDE::polling(unsigned char, unsigned int)+0x62>
c002424a:	b0 01                	mov    al,0x1
c002424c:	eb 02                	jmp    c0024250 <IDE::polling(unsigned char, unsigned int)+0x62>
c002424e:	b0 02                	mov    al,0x2
c0024250:	5b                   	pop    ebx
c0024251:	5e                   	pop    esi
c0024252:	5f                   	pop    edi
c0024253:	c3                   	ret    

c0024254 <SATABus::close(int, int, void*)>:
c0024254:	31 c0                	xor    eax,eax
c0024256:	c3                   	ret    
c0024257:	90                   	nop

c0024258 <SATABus::detect()>:
c0024258:	c3                   	ret    
c0024259:	90                   	nop

c002425a <SATABus::SATABus()>:
c002425a:	83 ec 0c             	sub    esp,0xc
c002425d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024261:	83 ec 08             	sub    esp,0x8
c0024264:	68 d0 d4 02 c0       	push   0xc002d4d0
c0024269:	50                   	push   eax
c002426a:	e8 27 fb fe ff       	call   c0013d96 <HardDiskController::HardDiskController(char const*)>
c002426f:	83 c4 10             	add    esp,0x10
c0024272:	ba 8c d5 02 c0       	mov    edx,0xc002d58c
c0024277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002427b:	89 10                	mov    DWORD PTR [eax],edx
c002427d:	83 ec 0c             	sub    esp,0xc
c0024280:	6a 50                	push   0x50
c0024282:	e8 88 b7 fe ff       	call   c000fa0f <Phys::allocateContiguousPages(int)>
c0024287:	83 c4 10             	add    esp,0x10
c002428a:	89 c2                	mov    edx,eax
c002428c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024290:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024296:	83 ec 0c             	sub    esp,0xc
c0024299:	6a 50                	push   0x50
c002429b:	e8 09 cf fe ff       	call   c00111a9 <Virt::allocateKernelVirtualPages(int)>
c00242a0:	83 c4 10             	add    esp,0x10
c00242a3:	89 c2                	mov    edx,eax
c00242a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242a9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00242af:	a1 b0 ee 02 c0       	mov    eax,ds:0xc002eeb0
c00242b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00242b8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00242be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00242c2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00242c8:	83 ec 0c             	sub    esp,0xc
c00242cb:	6a 03                	push   0x3
c00242cd:	6a 50                	push   0x50
c00242cf:	51                   	push   ecx
c00242d0:	52                   	push   edx
c00242d1:	50                   	push   eax
c00242d2:	e8 ff d9 fe ff       	call   c0011cd6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00242d7:	83 c4 20             	add    esp,0x20
c00242da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242de:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00242e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242e8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00242ee:	83 ec 04             	sub    esp,0x4
c00242f1:	52                   	push   edx
c00242f2:	50                   	push   eax
c00242f3:	68 f4 d4 02 c0       	push   0xc002d4f4
c00242f8:	e8 b2 e2 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00242fd:	83 c4 10             	add    esp,0x10
c0024300:	90                   	nop
c0024301:	83 c4 0c             	add    esp,0xc
c0024304:	c3                   	ret    
c0024305:	90                   	nop

c0024306 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0024306:	83 ec 0c             	sub    esp,0xc
c0024309:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002430d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024310:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024313:	09 c2                	or     edx,eax
c0024315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024319:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002431f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024321:	31 c0                	xor    eax,eax
c0024323:	c1 e9 08             	shr    ecx,0x8
c0024326:	83 e1 0f             	and    ecx,0xf
c0024329:	39 c8                	cmp    eax,ecx
c002432b:	74 0a                	je     c0024337 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002432d:	f6 c2 01             	test   dl,0x1
c0024330:	74 18                	je     c002434a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024332:	d1 ea                	shr    edx,1
c0024334:	40                   	inc    eax
c0024335:	eb f2                	jmp    c0024329 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024337:	83 ec 0c             	sub    esp,0xc
c002433a:	68 18 d5 02 c0       	push   0xc002d518
c002433f:	e8 39 5d ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0024344:	83 c4 10             	add    esp,0x10
c0024347:	83 c8 ff             	or     eax,0xffffffff
c002434a:	83 c4 0c             	add    esp,0xc
c002434d:	c3                   	ret    

c002434e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002434e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024352:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0024355:	89 c2                	mov    edx,eax
c0024357:	c1 ea 08             	shr    edx,0x8
c002435a:	83 e2 0f             	and    edx,0xf
c002435d:	fe ca                	dec    dl
c002435f:	75 31                	jne    c0024392 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024361:	83 e0 0f             	and    eax,0xf
c0024364:	3c 03                	cmp    al,0x3
c0024366:	75 2a                	jne    c0024392 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024368:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002436b:	b8 02 00 00 00       	mov    eax,0x2
c0024370:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0024376:	74 1c                	je     c0024394 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024378:	b8 04 00 00 00       	mov    eax,0x4
c002437d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024383:	74 0f                	je     c0024394 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024385:	31 c0                	xor    eax,eax
c0024387:	83 fa 03             	cmp    edx,0x3
c002438a:	0f 94 c0             	sete   al
c002438d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024391:	c3                   	ret    
c0024392:	31 c0                	xor    eax,eax
c0024394:	c3                   	ret    
c0024395:	90                   	nop

c0024396 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0024396:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002439a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002439d:	0f ba e2 0f          	bt     edx,0xf
c00243a1:	72 f7                	jb     c002439a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00243a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00243a6:	83 ca 10             	or     edx,0x10
c00243a9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00243ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00243af:	83 ca 01             	or     edx,0x1
c00243b2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00243b5:	c3                   	ret    

c00243b6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00243b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00243ba:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00243bd:	83 e2 fe             	and    edx,0xfffffffe
c00243c0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00243c3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00243c6:	83 e2 ef             	and    edx,0xffffffef
c00243c9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00243cc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00243cf:	0f ba e2 0e          	bt     edx,0xe
c00243d3:	72 f7                	jb     c00243cc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00243d5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00243d8:	0f ba e2 0f          	bt     edx,0xf
c00243dc:	72 ee                	jb     c00243cc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00243de:	c3                   	ret    
c00243df:	90                   	nop

c00243e0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00243e0:	55                   	push   ebp
c00243e1:	57                   	push   edi
c00243e2:	56                   	push   esi
c00243e3:	53                   	push   ebx
c00243e4:	83 ec 1c             	sub    esp,0x1c
c00243e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00243eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00243ef:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00243f3:	53                   	push   ebx
c00243f4:	89 fd                	mov    ebp,edi
c00243f6:	56                   	push   esi
c00243f7:	c1 e5 0a             	shl    ebp,0xa
c00243fa:	e8 b7 ff ff ff       	call   c00243b6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00243ff:	83 ec 0c             	sub    esp,0xc
c0024402:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024408:	01 e8                	add    eax,ebp
c002440a:	89 03                	mov    DWORD PTR [ebx],eax
c002440c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002440e:	68 00 04 00 00       	push   0x400
c0024413:	6a 00                	push   0x0
c0024415:	50                   	push   eax
c0024416:	e8 35 c3 fd ff       	call   c0000750 <memset>
c002441b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024421:	89 fa                	mov    edx,edi
c0024423:	01 e8                	add    eax,ebp
c0024425:	c1 e7 0d             	shl    edi,0xd
c0024428:	89 03                	mov    DWORD PTR [ebx],eax
c002442a:	c1 e2 08             	shl    edx,0x8
c002442d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024434:	81 c2 00 80 00 00    	add    edx,0x8000
c002443a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002443e:	89 d0                	mov    eax,edx
c0024440:	83 c4 1c             	add    esp,0x1c
c0024443:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024449:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002444c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002444f:	68 00 01 00 00       	push   0x100
c0024454:	6a 00                	push   0x0
c0024456:	50                   	push   eax
c0024457:	e8 f4 c2 fd ff       	call   c0000750 <memset>
c002445c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024460:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024466:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c002446c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024470:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024473:	83 c4 10             	add    esp,0x10
c0024476:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002447d:	31 ff                	xor    edi,edi
c002447f:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024485:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002448b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002448f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024495:	83 c5 20             	add    ebp,0x20
c0024498:	01 f8                	add    eax,edi
c002449a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002449d:	52                   	push   edx
c002449e:	68 00 01 00 00       	push   0x100
c00244a3:	6a 00                	push   0x0
c00244a5:	50                   	push   eax
c00244a6:	e8 a5 c2 fd ff       	call   c0000750 <memset>
c00244ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00244af:	83 c4 10             	add    esp,0x10
c00244b2:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00244b8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00244bf:	01 f8                	add    eax,edi
c00244c1:	81 c7 00 01 00 00    	add    edi,0x100
c00244c7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00244ca:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00244d0:	75 b3                	jne    c0024485 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00244d2:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00244d6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00244da:	83 c4 1c             	add    esp,0x1c
c00244dd:	5b                   	pop    ebx
c00244de:	5e                   	pop    esi
c00244df:	5f                   	pop    edi
c00244e0:	5d                   	pop    ebp
c00244e1:	e9 b0 fe ff ff       	jmp    c0024396 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c00244e6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00244e6:	55                   	push   ebp
c00244e7:	57                   	push   edi
c00244e8:	56                   	push   esi
c00244e9:	53                   	push   ebx
c00244ea:	31 db                	xor    ebx,ebx
c00244ec:	83 ec 0c             	sub    esp,0xc
c00244ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00244f3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00244f7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00244fa:	f7 c7 01 00 00 00    	test   edi,0x1
c0024500:	0f 84 aa 00 00 00    	je     c00245b0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024506:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002450a:	89 d8                	mov    eax,ebx
c002450c:	c1 e0 07             	shl    eax,0x7
c002450f:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024516:	55                   	push   ebp
c0024517:	56                   	push   esi
c0024518:	e8 31 fe ff ff       	call   c002434e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002451d:	5a                   	pop    edx
c002451e:	83 f8 01             	cmp    eax,0x1
c0024521:	59                   	pop    ecx
c0024522:	75 30                	jne    c0024554 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024524:	50                   	push   eax
c0024525:	50                   	push   eax
c0024526:	53                   	push   ebx
c0024527:	68 3d d5 02 c0       	push   0xc002d53d
c002452c:	e8 7e e0 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0024531:	83 c4 0c             	add    esp,0xc
c0024534:	53                   	push   ebx
c0024535:	55                   	push   ebp
c0024536:	56                   	push   esi
c0024537:	e8 a4 fe ff ff       	call   c00243e0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002453c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024543:	e8 6e b0 fe ff       	call   c000f5b6 <malloc>
c0024548:	89 c5                	mov    ebp,eax
c002454a:	89 04 24             	mov    DWORD PTR [esp],eax
c002454d:	e8 24 0d 00 00       	call   c0025276 <SATA::SATA()>
c0024552:	eb 33                	jmp    c0024587 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024554:	83 f8 04             	cmp    eax,0x4
c0024557:	75 47                	jne    c00245a0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0024559:	50                   	push   eax
c002455a:	50                   	push   eax
c002455b:	53                   	push   ebx
c002455c:	68 54 d5 02 c0       	push   0xc002d554
c0024561:	e8 49 e0 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0024566:	83 c4 0c             	add    esp,0xc
c0024569:	53                   	push   ebx
c002456a:	55                   	push   ebp
c002456b:	56                   	push   esi
c002456c:	e8 6f fe ff ff       	call   c00243e0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024571:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024578:	e8 39 b0 fe ff       	call   c000f5b6 <malloc>
c002457d:	89 c5                	mov    ebp,eax
c002457f:	89 04 24             	mov    DWORD PTR [esp],eax
c0024582:	e8 65 10 00 00       	call   c00255ec <SATAPI::SATAPI()>
c0024587:	5a                   	pop    edx
c0024588:	59                   	pop    ecx
c0024589:	55                   	push   ebp
c002458a:	56                   	push   esi
c002458b:	e8 58 f4 fe ff       	call   c00139e8 <Device::addChild(Device*)>
c0024590:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024593:	56                   	push   esi
c0024594:	6a 00                	push   0x0
c0024596:	53                   	push   ebx
c0024597:	55                   	push   ebp
c0024598:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002459b:	83 c4 20             	add    esp,0x20
c002459e:	eb 10                	jmp    c00245b0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00245a0:	50                   	push   eax
c00245a1:	50                   	push   eax
c00245a2:	53                   	push   ebx
c00245a3:	68 6d d5 02 c0       	push   0xc002d56d
c00245a8:	e8 02 e0 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00245ad:	83 c4 10             	add    esp,0x10
c00245b0:	d1 ef                	shr    edi,1
c00245b2:	43                   	inc    ebx
c00245b3:	83 fb 20             	cmp    ebx,0x20
c00245b6:	0f 85 3e ff ff ff    	jne    c00244fa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00245bc:	83 c4 0c             	add    esp,0xc
c00245bf:	5b                   	pop    ebx
c00245c0:	5e                   	pop    esi
c00245c1:	5f                   	pop    edi
c00245c2:	5d                   	pop    ebp
c00245c3:	c3                   	ret    

c00245c4 <SATABus::open(int, int, void*)>:
c00245c4:	83 ec 14             	sub    esp,0x14
c00245c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00245cb:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00245d1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00245d7:	52                   	push   edx
c00245d8:	50                   	push   eax
c00245d9:	e8 08 ff ff ff       	call   c00244e6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00245de:	31 c0                	xor    eax,eax
c00245e0:	83 c4 1c             	add    esp,0x1c
c00245e3:	c3                   	ret    

c00245e4 <ATA::close(int, int, void*)>:
c00245e4:	83 ec 0c             	sub    esp,0xc
c00245e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245eb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00245f1:	85 c0                	test   eax,eax
c00245f3:	74 0c                	je     c0024601 <ATA::close(int, int, void*)+0x1d>
c00245f5:	83 ec 0c             	sub    esp,0xc
c00245f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00245fa:	50                   	push   eax
c00245fb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00245fe:	83 c4 10             	add    esp,0x10
c0024601:	31 c0                	xor    eax,eax
c0024603:	83 c4 0c             	add    esp,0xc
c0024606:	c3                   	ret    
c0024607:	90                   	nop

c0024608 <ATA::powerSaving(PowerSavingLevel)>:
c0024608:	c3                   	ret    
c0024609:	90                   	nop

c002460a <ATA::ATA()>:
c002460a:	83 ec 0c             	sub    esp,0xc
c002460d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024611:	83 ec 04             	sub    esp,0x4
c0024614:	68 00 02 00 00       	push   0x200
c0024619:	68 55 d6 02 c0       	push   0xc002d655
c002461e:	50                   	push   eax
c002461f:	e8 0a f8 fe ff       	call   c0013e2e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024624:	83 c4 10             	add    esp,0x10
c0024627:	ba d8 d5 02 c0       	mov    edx,0xc002d5d8
c002462c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024630:	89 10                	mov    DWORD PTR [eax],edx
c0024632:	90                   	nop
c0024633:	83 c4 0c             	add    esp,0xc
c0024636:	c3                   	ret    
c0024637:	90                   	nop

c0024638 <ATA::flush(bool)>:
c0024638:	53                   	push   ebx
c0024639:	83 ec 08             	sub    esp,0x8
c002463c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024641:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024645:	19 c0                	sbb    eax,eax
c0024647:	83 e0 fd             	and    eax,0xfffffffd
c002464a:	05 ea 00 00 00       	add    eax,0xea
c002464f:	50                   	push   eax
c0024650:	6a 07                	push   0x7
c0024652:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024659:	50                   	push   eax
c002465a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024660:	e8 b1 ef ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024665:	83 c4 0c             	add    esp,0xc
c0024668:	6a 00                	push   0x0
c002466a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024671:	50                   	push   eax
c0024672:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024678:	e8 71 fb ff ff       	call   c00241ee <IDE::polling(unsigned char, unsigned int)>
c002467d:	83 c4 18             	add    esp,0x18
c0024680:	5b                   	pop    ebx
c0024681:	c3                   	ret    

c0024682 <ATA::readyForCommand()>:
c0024682:	56                   	push   esi
c0024683:	53                   	push   ebx
c0024684:	31 db                	xor    ebx,ebx
c0024686:	50                   	push   eax
c0024687:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002468b:	50                   	push   eax
c002468c:	6a 0c                	push   0xc
c002468e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024695:	50                   	push   eax
c0024696:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002469c:	e8 35 f0 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c00246a1:	83 c4 10             	add    esp,0x10
c00246a4:	a8 88                	test   al,0x88
c00246a6:	74 23                	je     c00246cb <ATA::readyForCommand()+0x49>
c00246a8:	43                   	inc    ebx
c00246a9:	83 fb 63             	cmp    ebx,0x63
c00246ac:	7e dd                	jle    c002468b <ATA::readyForCommand()+0x9>
c00246ae:	51                   	push   ecx
c00246af:	51                   	push   ecx
c00246b0:	6a 00                	push   0x0
c00246b2:	68 40 42 0f 00       	push   0xf4240
c00246b7:	e8 7d 9a ff ff       	call   c001e139 <nanoSleep(unsigned long long)>
c00246bc:	83 c4 10             	add    esp,0x10
c00246bf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00246c5:	75 c4                	jne    c002468b <ATA::readyForCommand()+0x9>
c00246c7:	31 c0                	xor    eax,eax
c00246c9:	eb 02                	jmp    c00246cd <ATA::readyForCommand()+0x4b>
c00246cb:	b0 01                	mov    al,0x1
c00246cd:	5a                   	pop    edx
c00246ce:	5b                   	pop    ebx
c00246cf:	5e                   	pop    esi
c00246d0:	c3                   	ret    
c00246d1:	90                   	nop

c00246d2 <ATA::access(unsigned long long, int, void*, bool)>:
c00246d2:	55                   	push   ebp
c00246d3:	57                   	push   edi
c00246d4:	56                   	push   esi
c00246d5:	53                   	push   ebx
c00246d6:	83 ec 2c             	sub    esp,0x2c
c00246d9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00246dd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00246e1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00246e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00246e9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00246ed:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00246f1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00246f5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00246fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00246ff:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024705:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024709:	c1 e0 06             	shl    eax,0x6
c002470c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024714:	74 5d                	je     c0024773 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024716:	89 fa                	mov    edx,edi
c0024718:	89 f0                	mov    eax,esi
c002471a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002471e:	c1 ea 1c             	shr    edx,0x1c
c0024721:	89 d1                	mov    ecx,edx
c0024723:	09 c1                	or     ecx,eax
c0024725:	74 25                	je     c002474c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024727:	31 ed                	xor    ebp,ebp
c0024729:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024730:	89 fa                	mov    edx,edi
c0024732:	89 f0                	mov    eax,esi
c0024734:	0f ad d0             	shrd   eax,edx,cl
c0024737:	d3 ea                	shr    edx,cl
c0024739:	f6 c1 20             	test   cl,0x20
c002473c:	74 02                	je     c0024740 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002473e:	89 d0                	mov    eax,edx
c0024740:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024744:	45                   	inc    ebp
c0024745:	83 fd 06             	cmp    ebp,0x6
c0024748:	75 df                	jne    c0024729 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002474a:	eb 76                	jmp    c00247c2 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002474c:	89 f0                	mov    eax,esi
c002474e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024753:	89 fa                	mov    edx,edi
c0024755:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002475c:	0f ac d0 10          	shrd   eax,edx,0x10
c0024760:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024765:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024769:	c1 ee 18             	shr    esi,0x18
c002476c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024771:	eb 56                	jmp    c00247c9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024773:	6a 00                	push   0x0
c0024775:	6a 3f                	push   0x3f
c0024777:	57                   	push   edi
c0024778:	56                   	push   esi
c0024779:	e8 26 29 00 00       	call   c00270a4 <__umoddi3>
c002477e:	83 c4 10             	add    esp,0x10
c0024781:	40                   	inc    eax
c0024782:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024786:	6a 00                	push   0x0
c0024788:	68 f0 03 00 00       	push   0x3f0
c002478d:	57                   	push   edi
c002478e:	56                   	push   esi
c002478f:	e8 10 28 00 00       	call   c0026fa4 <__udivdi3>
c0024794:	83 c4 10             	add    esp,0x10
c0024797:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002479c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00247a3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00247a8:	6a 00                	push   0x0
c00247aa:	6a 3f                	push   0x3f
c00247ac:	57                   	push   edi
c00247ad:	56                   	push   esi
c00247ae:	e8 f1 27 00 00       	call   c0026fa4 <__udivdi3>
c00247b3:	83 c4 10             	add    esp,0x10
c00247b6:	89 c6                	mov    esi,eax
c00247b8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00247bd:	83 e6 0f             	and    esi,0xf
c00247c0:	eb 07                	jmp    c00247c9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00247c2:	31 f6                	xor    esi,esi
c00247c4:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00247c9:	bf 01 00 00 00       	mov    edi,0x1
c00247ce:	50                   	push   eax
c00247cf:	6a 00                	push   0x0
c00247d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00247d8:	50                   	push   eax
c00247d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00247dd:	e8 40 f0 ff ff       	call   c0023822 <IDE::enableIRQs(unsigned char, bool)>
c00247e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00247e5:	e8 98 fe ff ff       	call   c0024682 <ATA::readyForCommand()>
c00247ea:	83 c4 10             	add    esp,0x10
c00247ed:	84 c0                	test   al,al
c00247ef:	0f 84 5a 02 00 00    	je     c0024a4f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00247f5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00247fb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024801:	c1 e0 04             	shl    eax,0x4
c0024804:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002480b:	09 c6                	or     esi,eax
c002480d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024812:	75 05                	jne    c0024819 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024814:	83 ce a0             	or     esi,0xffffffa0
c0024817:	eb 03                	jmp    c002481c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024819:	83 ce e0             	or     esi,0xffffffe0
c002481c:	89 f0                	mov    eax,esi
c002481e:	0f b6 f0             	movzx  esi,al
c0024821:	56                   	push   esi
c0024822:	6a 06                	push   0x6
c0024824:	51                   	push   ecx
c0024825:	52                   	push   edx
c0024826:	e8 eb ed ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002482b:	83 c4 10             	add    esp,0x10
c002482e:	6a 00                	push   0x0
c0024830:	6a 01                	push   0x1
c0024832:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024839:	50                   	push   eax
c002483a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024840:	e8 d1 ed ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024845:	83 c4 10             	add    esp,0x10
c0024848:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002484d:	75 6e                	jne    c00248bd <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002484f:	6a 00                	push   0x0
c0024851:	6a 08                	push   0x8
c0024853:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002485a:	50                   	push   eax
c002485b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024861:	e8 b0 ed ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024866:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002486b:	50                   	push   eax
c002486c:	6a 09                	push   0x9
c002486e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024875:	50                   	push   eax
c0024876:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002487c:	e8 95 ed ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024881:	83 c4 20             	add    esp,0x20
c0024884:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024889:	50                   	push   eax
c002488a:	6a 0a                	push   0xa
c002488c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024893:	50                   	push   eax
c0024894:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002489a:	e8 77 ed ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002489f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00248a4:	50                   	push   eax
c00248a5:	6a 0b                	push   0xb
c00248a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248ae:	50                   	push   eax
c00248af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248b5:	e8 5c ed ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248ba:	83 c4 20             	add    esp,0x20
c00248bd:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00248c2:	50                   	push   eax
c00248c3:	6a 02                	push   0x2
c00248c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248cc:	50                   	push   eax
c00248cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248d3:	e8 3e ed ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248d8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00248dd:	50                   	push   eax
c00248de:	6a 03                	push   0x3
c00248e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248e7:	50                   	push   eax
c00248e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248ee:	e8 23 ed ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248f3:	83 c4 20             	add    esp,0x20
c00248f6:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00248fb:	50                   	push   eax
c00248fc:	6a 04                	push   0x4
c00248fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024905:	50                   	push   eax
c0024906:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002490c:	e8 05 ed ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024911:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024916:	50                   	push   eax
c0024917:	6a 05                	push   0x5
c0024919:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024920:	50                   	push   eax
c0024921:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024927:	e8 ea ec ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002492c:	83 c4 20             	add    esp,0x20
c002492f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024934:	0f 94 c0             	sete   al
c0024937:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002493c:	74 09                	je     c0024947 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002493e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024945:	eb 07                	jmp    c002494e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024947:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002494e:	0f b6 c0             	movzx  eax,al
c0024951:	50                   	push   eax
c0024952:	6a 07                	push   0x7
c0024954:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002495b:	50                   	push   eax
c002495c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024962:	e8 af ec ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024967:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002496b:	83 c4 10             	add    esp,0x10
c002496e:	85 f6                	test   esi,esi
c0024970:	0f 84 ba 00 00 00    	je     c0024a30 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024976:	50                   	push   eax
c0024977:	6a 01                	push   0x1
c0024979:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024980:	50                   	push   eax
c0024981:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024987:	e8 62 f8 ff ff       	call   c00241ee <IDE::polling(unsigned char, unsigned int)>
c002498c:	83 c4 10             	add    esp,0x10
c002498f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024995:	84 c0                	test   al,al
c0024997:	74 2c                	je     c00249c5 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024999:	0f b6 f8             	movzx  edi,al
c002499c:	0f b6 d2             	movzx  edx,dl
c002499f:	57                   	push   edi
c00249a0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00249a7:	50                   	push   eax
c00249a8:	52                   	push   edx
c00249a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249af:	e8 a4 f6 ff ff       	call   c0024058 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00249b4:	c7 04 24 b0 d5 02 c0 	mov    DWORD PTR [esp],0xc002d5b0
c00249bb:	e8 ef db fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00249c0:	e9 87 00 00 00       	jmp    c0024a4c <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00249c5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00249ca:	74 33                	je     c00249ff <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00249cc:	31 ed                	xor    ebp,ebp
c00249ce:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00249d2:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00249d6:	50                   	push   eax
c00249d7:	50                   	push   eax
c00249d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249df:	50                   	push   eax
c00249e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249e6:	e8 19 ec ff ff       	call   c0023604 <IDE::getBase(unsigned char)>
c00249eb:	89 c2                	mov    edx,eax
c00249ed:	89 f8                	mov    eax,edi
c00249ef:	66 ef                	out    dx,ax
c00249f1:	45                   	inc    ebp
c00249f2:	83 c4 10             	add    esp,0x10
c00249f5:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00249fb:	75 d1                	jne    c00249ce <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00249fd:	eb 23                	jmp    c0024a22 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00249ff:	0f b6 d2             	movzx  edx,dl
c0024a02:	51                   	push   ecx
c0024a03:	51                   	push   ecx
c0024a04:	52                   	push   edx
c0024a05:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a0b:	e8 f4 eb ff ff       	call   c0023604 <IDE::getBase(unsigned char)>
c0024a10:	b9 00 01 00 00       	mov    ecx,0x100
c0024a15:	89 c2                	mov    edx,eax
c0024a17:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024a1b:	fc                   	cld    
c0024a1c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024a1f:	83 c4 10             	add    esp,0x10
c0024a22:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024a2a:	4e                   	dec    esi
c0024a2b:	e9 3e ff ff ff       	jmp    c002496e <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024a30:	31 ff                	xor    edi,edi
c0024a32:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024a37:	74 16                	je     c0024a4f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024a39:	50                   	push   eax
c0024a3a:	50                   	push   eax
c0024a3b:	31 c0                	xor    eax,eax
c0024a3d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024a42:	0f 94 c0             	sete   al
c0024a45:	50                   	push   eax
c0024a46:	53                   	push   ebx
c0024a47:	e8 ec fb ff ff       	call   c0024638 <ATA::flush(bool)>
c0024a4c:	83 c4 10             	add    esp,0x10
c0024a4f:	83 c4 2c             	add    esp,0x2c
c0024a52:	89 f8                	mov    eax,edi
c0024a54:	5b                   	pop    ebx
c0024a55:	5e                   	pop    esi
c0024a56:	5f                   	pop    edi
c0024a57:	5d                   	pop    ebp
c0024a58:	c3                   	ret    
c0024a59:	90                   	nop

c0024a5a <ATA::read(unsigned long long, int, void*)>:
c0024a5a:	57                   	push   edi
c0024a5b:	b8 04 00 00 00       	mov    eax,0x4
c0024a60:	56                   	push   esi
c0024a61:	53                   	push   ebx
c0024a62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a66:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024a6a:	8d 7a ff             	lea    edi,[edx-0x1]
c0024a6d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024a71:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024a75:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024a7b:	77 25                	ja     c0024aa2 <ATA::read(unsigned long long, int, void*)+0x48>
c0024a7d:	b8 06 00 00 00       	mov    eax,0x6
c0024a82:	85 f6                	test   esi,esi
c0024a84:	74 1c                	je     c0024aa2 <ATA::read(unsigned long long, int, void*)+0x48>
c0024a86:	50                   	push   eax
c0024a87:	50                   	push   eax
c0024a88:	6a 00                	push   0x0
c0024a8a:	56                   	push   esi
c0024a8b:	52                   	push   edx
c0024a8c:	53                   	push   ebx
c0024a8d:	51                   	push   ecx
c0024a8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024a92:	e8 3b fc ff ff       	call   c00246d2 <ATA::access(unsigned long long, int, void*, bool)>
c0024a97:	83 c4 20             	add    esp,0x20
c0024a9a:	85 c0                	test   eax,eax
c0024a9c:	0f 95 c0             	setne  al
c0024a9f:	0f b6 c0             	movzx  eax,al
c0024aa2:	5b                   	pop    ebx
c0024aa3:	5e                   	pop    esi
c0024aa4:	5f                   	pop    edi
c0024aa5:	c3                   	ret    

c0024aa6 <ATA::write(unsigned long long, int, void*)>:
c0024aa6:	57                   	push   edi
c0024aa7:	b8 04 00 00 00       	mov    eax,0x4
c0024aac:	56                   	push   esi
c0024aad:	53                   	push   ebx
c0024aae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024ab2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024ab6:	8d 7a ff             	lea    edi,[edx-0x1]
c0024ab9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024abd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024ac1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024ac7:	77 25                	ja     c0024aee <ATA::write(unsigned long long, int, void*)+0x48>
c0024ac9:	b8 06 00 00 00       	mov    eax,0x6
c0024ace:	85 f6                	test   esi,esi
c0024ad0:	74 1c                	je     c0024aee <ATA::write(unsigned long long, int, void*)+0x48>
c0024ad2:	50                   	push   eax
c0024ad3:	50                   	push   eax
c0024ad4:	6a 01                	push   0x1
c0024ad6:	56                   	push   esi
c0024ad7:	52                   	push   edx
c0024ad8:	53                   	push   ebx
c0024ad9:	51                   	push   ecx
c0024ada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ade:	e8 ef fb ff ff       	call   c00246d2 <ATA::access(unsigned long long, int, void*, bool)>
c0024ae3:	83 c4 20             	add    esp,0x20
c0024ae6:	85 c0                	test   eax,eax
c0024ae8:	0f 95 c0             	setne  al
c0024aeb:	0f b6 c0             	movzx  eax,al
c0024aee:	5b                   	pop    ebx
c0024aef:	5e                   	pop    esi
c0024af0:	5f                   	pop    edi
c0024af1:	c3                   	ret    

c0024af2 <ATA::detectCHS()>:
c0024af2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024af6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024afc:	c1 e0 06             	shl    eax,0x6
c0024aff:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024b05:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024b0f:	c7 44 24 04 bb d5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d5bb
c0024b17:	e9 61 55 ff ff       	jmp    c001a07d <Krnl::panic(char const*)>

c0024b1c <ATA::open(int, int, void*)>:
c0024b1c:	53                   	push   ebx
c0024b1d:	83 ec 08             	sub    esp,0x8
c0024b20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b2c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024b32:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b38:	c1 e0 06             	shl    eax,0x6
c0024b3b:	01 d0                	add    eax,edx
c0024b3d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024b44:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024b4a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024b51:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024b5b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024b61:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024b68:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024b6f:	75 0c                	jne    c0024b7d <ATA::open(int, int, void*)+0x61>
c0024b71:	83 ec 0c             	sub    esp,0xc
c0024b74:	53                   	push   ebx
c0024b75:	e8 78 ff ff ff       	call   c0024af2 <ATA::detectCHS()>
c0024b7a:	83 c4 10             	add    esp,0x10
c0024b7d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024b83:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024b89:	c1 e0 06             	shl    eax,0x6
c0024b8c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024b93:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024b9d:	d1 e8                	shr    eax,1
c0024b9f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024ba5:	6a 04                	push   0x4
c0024ba7:	6a 0c                	push   0xc
c0024ba9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bb0:	50                   	push   eax
c0024bb1:	52                   	push   edx
c0024bb2:	e8 5f ea ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bb7:	90                   	nop
c0024bb8:	90                   	nop
c0024bb9:	6a 00                	push   0x0
c0024bbb:	6a 0c                	push   0xc
c0024bbd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bc4:	50                   	push   eax
c0024bc5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bcb:	e8 46 ea ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bd0:	83 c4 14             	add    esp,0x14
c0024bd3:	53                   	push   ebx
c0024bd4:	e8 bd f2 fe ff       	call   c0013e96 <PhysicalDisk::startCache()>
c0024bd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024bdc:	e8 4f 15 ff ff       	call   c0016130 <createPartitionsForDisk(PhysicalDisk*)>
c0024be1:	31 c0                	xor    eax,eax
c0024be3:	83 c4 18             	add    esp,0x18
c0024be6:	5b                   	pop    ebx
c0024be7:	c3                   	ret    

c0024be8 <ATAPI::write(unsigned long long, int, void*)>:
c0024be8:	b8 03 00 00 00       	mov    eax,0x3
c0024bed:	c3                   	ret    

c0024bee <ATAPI::close(int, int, void*)>:
c0024bee:	83 ec 0c             	sub    esp,0xc
c0024bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bf5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024bfb:	85 c0                	test   eax,eax
c0024bfd:	74 0c                	je     c0024c0b <ATAPI::close(int, int, void*)+0x1d>
c0024bff:	83 ec 0c             	sub    esp,0xc
c0024c02:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c04:	50                   	push   eax
c0024c05:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c08:	83 c4 10             	add    esp,0x10
c0024c0b:	31 c0                	xor    eax,eax
c0024c0d:	83 c4 0c             	add    esp,0xc
c0024c10:	c3                   	ret    
c0024c11:	90                   	nop

c0024c12 <ATAPI::ATAPI()>:
c0024c12:	83 ec 0c             	sub    esp,0xc
c0024c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c19:	83 ec 04             	sub    esp,0x4
c0024c1c:	68 00 08 00 00       	push   0x800
c0024c21:	68 f5 d6 02 c0       	push   0xc002d6f5
c0024c26:	50                   	push   eax
c0024c27:	e8 02 f2 fe ff       	call   c0013e2e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c2c:	83 c4 10             	add    esp,0x10
c0024c2f:	ba 10 d6 02 c0       	mov    edx,0xc002d610
c0024c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c38:	89 10                	mov    DWORD PTR [eax],edx
c0024c3a:	90                   	nop
c0024c3b:	83 c4 0c             	add    esp,0xc
c0024c3e:	c3                   	ret    
c0024c3f:	90                   	nop

c0024c40 <ATAPI::readyForCommand()>:
c0024c40:	56                   	push   esi
c0024c41:	53                   	push   ebx
c0024c42:	31 db                	xor    ebx,ebx
c0024c44:	50                   	push   eax
c0024c45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024c49:	50                   	push   eax
c0024c4a:	6a 0c                	push   0xc
c0024c4c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024c53:	50                   	push   eax
c0024c54:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024c5a:	e8 77 ea ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0024c5f:	83 c4 10             	add    esp,0x10
c0024c62:	a8 88                	test   al,0x88
c0024c64:	74 23                	je     c0024c89 <ATAPI::readyForCommand()+0x49>
c0024c66:	43                   	inc    ebx
c0024c67:	83 fb 63             	cmp    ebx,0x63
c0024c6a:	7e dd                	jle    c0024c49 <ATAPI::readyForCommand()+0x9>
c0024c6c:	51                   	push   ecx
c0024c6d:	51                   	push   ecx
c0024c6e:	6a 00                	push   0x0
c0024c70:	68 40 42 0f 00       	push   0xf4240
c0024c75:	e8 bf 94 ff ff       	call   c001e139 <nanoSleep(unsigned long long)>
c0024c7a:	83 c4 10             	add    esp,0x10
c0024c7d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024c83:	75 c4                	jne    c0024c49 <ATAPI::readyForCommand()+0x9>
c0024c85:	31 c0                	xor    eax,eax
c0024c87:	eb 02                	jmp    c0024c8b <ATAPI::readyForCommand()+0x4b>
c0024c89:	b0 01                	mov    al,0x1
c0024c8b:	5a                   	pop    edx
c0024c8c:	5b                   	pop    ebx
c0024c8d:	5e                   	pop    esi
c0024c8e:	c3                   	ret    
c0024c8f:	90                   	nop

c0024c90 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024c90:	55                   	push   ebp
c0024c91:	57                   	push   edi
c0024c92:	56                   	push   esi
c0024c93:	53                   	push   ebx
c0024c94:	83 ec 20             	sub    esp,0x20
c0024c97:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024c9b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024c9f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024ca3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024ca7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024cab:	6a 01                	push   0x1
c0024cad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024cb4:	50                   	push   eax
c0024cb5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024cbb:	e8 62 eb ff ff       	call   c0023822 <IDE::enableIRQs(unsigned char, bool)>
c0024cc0:	5e                   	pop    esi
c0024cc1:	58                   	pop    eax
c0024cc2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024cc9:	50                   	push   eax
c0024cca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024cd0:	e8 1b e9 ff ff       	call   c00235f0 <IDE::prepareInterrupt(unsigned char)>
c0024cd5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024cd8:	e8 63 ff ff ff       	call   c0024c40 <ATAPI::readyForCommand()>
c0024cdd:	83 c4 10             	add    esp,0x10
c0024ce0:	84 c0                	test   al,al
c0024ce2:	75 0a                	jne    c0024cee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024ce4:	bb 01 00 00 00       	mov    ebx,0x1
c0024ce9:	e9 57 02 00 00       	jmp    c0024f45 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024cee:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024cf4:	c1 e0 04             	shl    eax,0x4
c0024cf7:	0f b6 c0             	movzx  eax,al
c0024cfa:	50                   	push   eax
c0024cfb:	6a 06                	push   0x6
c0024cfd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024d04:	50                   	push   eax
c0024d05:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024d0b:	e8 06 e9 ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d10:	6a 00                	push   0x0
c0024d12:	6a 01                	push   0x1
c0024d14:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024d1b:	50                   	push   eax
c0024d1c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024d22:	e8 ef e8 ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d27:	83 c4 20             	add    esp,0x20
c0024d2a:	0f b6 c3             	movzx  eax,bl
c0024d2d:	0f b6 df             	movzx  ebx,bh
c0024d30:	50                   	push   eax
c0024d31:	6a 04                	push   0x4
c0024d33:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024d3a:	50                   	push   eax
c0024d3b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024d41:	e8 d0 e8 ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d46:	53                   	push   ebx
c0024d47:	6a 05                	push   0x5
c0024d49:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024d50:	50                   	push   eax
c0024d51:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024d57:	e8 ba e8 ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d5c:	83 c4 20             	add    esp,0x20
c0024d5f:	68 a0 00 00 00       	push   0xa0
c0024d64:	6a 07                	push   0x7
c0024d66:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024d6d:	50                   	push   eax
c0024d6e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024d74:	e8 9d e8 ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d79:	83 c4 0c             	add    esp,0xc
c0024d7c:	6a 01                	push   0x1
c0024d7e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024d85:	50                   	push   eax
c0024d86:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024d8c:	e8 5d f4 ff ff       	call   c00241ee <IDE::polling(unsigned char, unsigned int)>
c0024d91:	83 c4 10             	add    esp,0x10
c0024d94:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024d9a:	84 c0                	test   al,al
c0024d9c:	74 23                	je     c0024dc1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024d9e:	0f b6 d8             	movzx  ebx,al
c0024da1:	0f b6 d2             	movzx  edx,dl
c0024da4:	53                   	push   ebx
c0024da5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024dac:	50                   	push   eax
c0024dad:	52                   	push   edx
c0024dae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024db4:	e8 9f f2 ff ff       	call   c0024058 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024db9:	83 c4 10             	add    esp,0x10
c0024dbc:	e9 84 01 00 00       	jmp    c0024f45 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024dc1:	0f b6 d2             	movzx  edx,dl
c0024dc4:	53                   	push   ebx
c0024dc5:	53                   	push   ebx
c0024dc6:	52                   	push   edx
c0024dc7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024dcd:	e8 32 e8 ff ff       	call   c0023604 <IDE::getBase(unsigned char)>
c0024dd2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024dd6:	b9 06 00 00 00       	mov    ecx,0x6
c0024ddb:	89 c2                	mov    edx,eax
c0024ddd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024de0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024de4:	83 c4 10             	add    esp,0x10
c0024de7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024ded:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024df4:	85 db                	test   ebx,ebx
c0024df6:	0f 84 ec 00 00 00    	je     c0024ee8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024dfc:	51                   	push   ecx
c0024dfd:	51                   	push   ecx
c0024dfe:	52                   	push   edx
c0024dff:	50                   	push   eax
c0024e00:	e8 7f e9 ff ff       	call   c0023784 <IDE::waitInterrupt(unsigned char)>
c0024e05:	83 c4 10             	add    esp,0x10
c0024e08:	84 c0                	test   al,al
c0024e0a:	0f 84 d4 fe ff ff    	je     c0024ce4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024e10:	56                   	push   esi
c0024e11:	56                   	push   esi
c0024e12:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024e19:	50                   	push   eax
c0024e1a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024e20:	e8 cb e7 ff ff       	call   c00235f0 <IDE::prepareInterrupt(unsigned char)>
c0024e25:	83 c4 0c             	add    esp,0xc
c0024e28:	6a 04                	push   0x4
c0024e2a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024e31:	50                   	push   eax
c0024e32:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024e38:	e8 99 e8 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0024e3d:	83 c4 0c             	add    esp,0xc
c0024e40:	89 c6                	mov    esi,eax
c0024e42:	6a 05                	push   0x5
c0024e44:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024e4b:	50                   	push   eax
c0024e4c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024e52:	e8 7f e8 ff ff       	call   c00236d6 <IDE::read(unsigned char, unsigned char)>
c0024e57:	89 f1                	mov    ecx,esi
c0024e59:	0f b6 c0             	movzx  eax,al
c0024e5c:	0f b6 f1             	movzx  esi,cl
c0024e5f:	c1 e0 08             	shl    eax,0x8
c0024e62:	09 c6                	or     esi,eax
c0024e64:	d1 fe                	sar    esi,1
c0024e66:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024e6a:	83 c4 10             	add    esp,0x10
c0024e6d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024e72:	74 41                	je     c0024eb5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024e74:	31 c9                	xor    ecx,ecx
c0024e76:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024e7c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024e83:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024e87:	75 0a                	jne    c0024e93 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024e89:	01 c9                	add    ecx,ecx
c0024e8b:	01 cd                	add    ebp,ecx
c0024e8d:	4b                   	dec    ebx
c0024e8e:	e9 54 ff ff ff       	jmp    c0024de7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024e93:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024e98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024e9c:	51                   	push   ecx
c0024e9d:	51                   	push   ecx
c0024e9e:	52                   	push   edx
c0024e9f:	50                   	push   eax
c0024ea0:	e8 5f e7 ff ff       	call   c0023604 <IDE::getBase(unsigned char)>
c0024ea5:	89 c2                	mov    edx,eax
c0024ea7:	89 f0                	mov    eax,esi
c0024ea9:	66 ef                	out    dx,ax
c0024eab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024eaf:	83 c4 10             	add    esp,0x10
c0024eb2:	41                   	inc    ecx
c0024eb3:	eb c1                	jmp    c0024e76 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024eb5:	31 f6                	xor    esi,esi
c0024eb7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024ebd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024ec4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024ec8:	75 06                	jne    c0024ed0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024eca:	01 f6                	add    esi,esi
c0024ecc:	01 f5                	add    ebp,esi
c0024ece:	eb bd                	jmp    c0024e8d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024ed0:	51                   	push   ecx
c0024ed1:	51                   	push   ecx
c0024ed2:	52                   	push   edx
c0024ed3:	50                   	push   eax
c0024ed4:	e8 2b e7 ff ff       	call   c0023604 <IDE::getBase(unsigned char)>
c0024ed9:	89 c2                	mov    edx,eax
c0024edb:	66 ed                	in     ax,dx
c0024edd:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024ee2:	83 c4 10             	add    esp,0x10
c0024ee5:	46                   	inc    esi
c0024ee6:	eb cf                	jmp    c0024eb7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024ee8:	51                   	push   ecx
c0024ee9:	51                   	push   ecx
c0024eea:	52                   	push   edx
c0024eeb:	50                   	push   eax
c0024eec:	e8 93 e8 ff ff       	call   c0023784 <IDE::waitInterrupt(unsigned char)>
c0024ef1:	83 c4 10             	add    esp,0x10
c0024ef4:	84 c0                	test   al,al
c0024ef6:	0f 84 e8 fd ff ff    	je     c0024ce4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024efc:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024f01:	52                   	push   edx
c0024f02:	52                   	push   edx
c0024f03:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f0a:	50                   	push   eax
c0024f0b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f11:	e8 da e6 ff ff       	call   c00235f0 <IDE::prepareInterrupt(unsigned char)>
c0024f16:	83 c4 10             	add    esp,0x10
c0024f19:	50                   	push   eax
c0024f1a:	50                   	push   eax
c0024f1b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f22:	50                   	push   eax
c0024f23:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f29:	e8 d6 e6 ff ff       	call   c0023604 <IDE::getBase(unsigned char)>
c0024f2e:	8d 50 07             	lea    edx,[eax+0x7]
c0024f31:	ec                   	in     al,dx
c0024f32:	83 c4 10             	add    esp,0x10
c0024f35:	a8 88                	test   al,0x88
c0024f37:	74 0a                	je     c0024f43 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024f39:	4b                   	dec    ebx
c0024f3a:	75 dd                	jne    c0024f19 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024f3c:	bb 02 00 00 00       	mov    ebx,0x2
c0024f41:	eb 02                	jmp    c0024f45 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024f43:	31 db                	xor    ebx,ebx
c0024f45:	83 c4 1c             	add    esp,0x1c
c0024f48:	89 d8                	mov    eax,ebx
c0024f4a:	5b                   	pop    ebx
c0024f4b:	5e                   	pop    esi
c0024f4c:	5f                   	pop    edi
c0024f4d:	5d                   	pop    ebp
c0024f4e:	c3                   	ret    
c0024f4f:	90                   	nop

c0024f50 <ATAPI::diskRemoved()>:
c0024f50:	83 ec 18             	sub    esp,0x18
c0024f53:	68 01 d7 02 c0       	push   0xc002d701
c0024f58:	e8 52 d6 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0024f5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f61:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024f68:	83 c4 1c             	add    esp,0x1c
c0024f6b:	c3                   	ret    

c0024f6c <ATAPI::eject()>:
c0024f6c:	57                   	push   edi
c0024f6d:	b9 03 00 00 00       	mov    ecx,0x3
c0024f72:	53                   	push   ebx
c0024f73:	83 ec 14             	sub    esp,0x14
c0024f76:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024f7a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024f7e:	fc                   	cld    
c0024f7f:	31 c0                	xor    eax,eax
c0024f81:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024f83:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024f88:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024f8d:	50                   	push   eax
c0024f8e:	50                   	push   eax
c0024f8f:	6a 00                	push   0x0
c0024f91:	6a 00                	push   0x0
c0024f93:	6a 00                	push   0x0
c0024f95:	6a 02                	push   0x2
c0024f97:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024f9b:	50                   	push   eax
c0024f9c:	53                   	push   ebx
c0024f9d:	e8 ee fc ff ff       	call   c0024c90 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024fa2:	83 c4 14             	add    esp,0x14
c0024fa5:	53                   	push   ebx
c0024fa6:	e8 a5 ff ff ff       	call   c0024f50 <ATAPI::diskRemoved()>
c0024fab:	83 c4 24             	add    esp,0x24
c0024fae:	31 c0                	xor    eax,eax
c0024fb0:	5b                   	pop    ebx
c0024fb1:	5f                   	pop    edi
c0024fb2:	c3                   	ret    
c0024fb3:	90                   	nop

c0024fb4 <ATAPI::diskInserted()>:
c0024fb4:	53                   	push   ebx
c0024fb5:	83 ec 14             	sub    esp,0x14
c0024fb8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024fbc:	68 18 d7 02 c0       	push   0xc002d718
c0024fc1:	e8 e9 d5 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0024fc6:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024fcd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024fd0:	e8 c1 ee fe ff       	call   c0013e96 <PhysicalDisk::startCache()>
c0024fd5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024fd9:	83 c4 18             	add    esp,0x18
c0024fdc:	5b                   	pop    ebx
c0024fdd:	e9 4e 11 ff ff       	jmp    c0016130 <createPartitionsForDisk(PhysicalDisk*)>

c0024fe2 <ATAPI::detectMedia()>:
c0024fe2:	56                   	push   esi
c0024fe3:	53                   	push   ebx
c0024fe4:	83 ec 28             	sub    esp,0x28
c0024fe7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024feb:	6a 0c                	push   0xc
c0024fed:	6a 00                	push   0x0
c0024fef:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024ff3:	56                   	push   esi
c0024ff4:	e8 57 b7 fd ff       	call   c0000750 <memset>
c0024ff9:	58                   	pop    eax
c0024ffa:	5a                   	pop    edx
c0024ffb:	6a 00                	push   0x0
c0024ffd:	6a 00                	push   0x0
c0024fff:	6a 00                	push   0x0
c0025001:	6a 00                	push   0x0
c0025003:	56                   	push   esi
c0025004:	53                   	push   ebx
c0025005:	e8 86 fc ff ff       	call   c0024c90 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002500a:	83 c4 1c             	add    esp,0x1c
c002500d:	6a 0c                	push   0xc
c002500f:	6a 00                	push   0x0
c0025011:	56                   	push   esi
c0025012:	e8 39 b7 fd ff       	call   c0000750 <memset>
c0025017:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002501c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025021:	59                   	pop    ecx
c0025022:	58                   	pop    eax
c0025023:	6a 01                	push   0x1
c0025025:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0025029:	50                   	push   eax
c002502a:	6a 00                	push   0x0
c002502c:	6a 12                	push   0x12
c002502e:	56                   	push   esi
c002502f:	53                   	push   ebx
c0025030:	e8 5b fc ff ff       	call   c0024c90 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025035:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025039:	83 c4 20             	add    esp,0x20
c002503c:	83 e0 7f             	and    eax,0x7f
c002503f:	3c 70                	cmp    al,0x70
c0025041:	74 15                	je     c0025058 <ATAPI::detectMedia()+0x76>
c0025043:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002504a:	75 0c                	jne    c0025058 <ATAPI::detectMedia()+0x76>
c002504c:	83 ec 0c             	sub    esp,0xc
c002504f:	53                   	push   ebx
c0025050:	e8 5f ff ff ff       	call   c0024fb4 <ATAPI::diskInserted()>
c0025055:	83 c4 10             	add    esp,0x10
c0025058:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002505c:	83 e0 0f             	and    eax,0xf
c002505f:	3c 02                	cmp    al,0x2
c0025061:	75 1b                	jne    c002507e <ATAPI::detectMedia()+0x9c>
c0025063:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025068:	75 2d                	jne    c0025097 <ATAPI::detectMedia()+0xb5>
c002506a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025071:	74 24                	je     c0025097 <ATAPI::detectMedia()+0xb5>
c0025073:	83 ec 0c             	sub    esp,0xc
c0025076:	53                   	push   ebx
c0025077:	e8 d4 fe ff ff       	call   c0024f50 <ATAPI::diskRemoved()>
c002507c:	eb 16                	jmp    c0025094 <ATAPI::detectMedia()+0xb2>
c002507e:	84 c0                	test   al,al
c0025080:	75 15                	jne    c0025097 <ATAPI::detectMedia()+0xb5>
c0025082:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025089:	75 0c                	jne    c0025097 <ATAPI::detectMedia()+0xb5>
c002508b:	83 ec 0c             	sub    esp,0xc
c002508e:	53                   	push   ebx
c002508f:	e8 20 ff ff ff       	call   c0024fb4 <ATAPI::diskInserted()>
c0025094:	83 c4 10             	add    esp,0x10
c0025097:	83 c4 24             	add    esp,0x24
c002509a:	5b                   	pop    ebx
c002509b:	5e                   	pop    esi
c002509c:	c3                   	ret    
c002509d:	90                   	nop

c002509e <ATAPI::open(int, int, void*)>:
c002509e:	53                   	push   ebx
c002509f:	83 ec 08             	sub    esp,0x8
c00250a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00250a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00250aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00250ae:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00250b4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00250ba:	c1 e0 06             	shl    eax,0x6
c00250bd:	01 d0                	add    eax,edx
c00250bf:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00250c6:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00250cc:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00250d3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00250dd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00250e3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00250ea:	6a 04                	push   0x4
c00250ec:	6a 0c                	push   0xc
c00250ee:	51                   	push   ecx
c00250ef:	52                   	push   edx
c00250f0:	e8 21 e5 ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00250f5:	90                   	nop
c00250f6:	90                   	nop
c00250f7:	6a 00                	push   0x0
c00250f9:	6a 0c                	push   0xc
c00250fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025102:	50                   	push   eax
c0025103:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025109:	e8 08 e5 ff ff       	call   c0023616 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002510e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025115:	83 c4 14             	add    esp,0x14
c0025118:	53                   	push   ebx
c0025119:	e8 c4 fe ff ff       	call   c0024fe2 <ATAPI::detectMedia()>
c002511e:	31 c0                	xor    eax,eax
c0025120:	83 c4 18             	add    esp,0x18
c0025123:	5b                   	pop    ebx
c0025124:	c3                   	ret    
c0025125:	90                   	nop

c0025126 <ATAPI::read(unsigned long long, int, void*)>:
c0025126:	55                   	push   ebp
c0025127:	57                   	push   edi
c0025128:	56                   	push   esi
c0025129:	53                   	push   ebx
c002512a:	83 ec 1c             	sub    esp,0x1c
c002512d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025131:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025135:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025139:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025140:	74 41                	je     c0025183 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0025142:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025146:	b9 03 00 00 00       	mov    ecx,0x3
c002514b:	fc                   	cld    
c002514c:	31 c0                	xor    eax,eax
c002514e:	86 fb                	xchg   bl,bh
c0025150:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025152:	c1 c3 10             	rol    ebx,0x10
c0025155:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002515a:	89 e8                	mov    eax,ebp
c002515c:	86 fb                	xchg   bl,bh
c002515e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025162:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0025166:	50                   	push   eax
c0025167:	50                   	push   eax
c0025168:	55                   	push   ebp
c0025169:	c1 e5 0b             	shl    ebp,0xb
c002516c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025170:	6a 00                	push   0x0
c0025172:	55                   	push   ebp
c0025173:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025177:	50                   	push   eax
c0025178:	56                   	push   esi
c0025179:	e8 12 fb ff ff       	call   c0024c90 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002517e:	83 c4 20             	add    esp,0x20
c0025181:	eb 1a                	jmp    c002519d <ATAPI::read(unsigned long long, int, void*)+0x77>
c0025183:	83 ec 0c             	sub    esp,0xc
c0025186:	56                   	push   esi
c0025187:	e8 56 fe ff ff       	call   c0024fe2 <ATAPI::detectMedia()>
c002518c:	83 c4 10             	add    esp,0x10
c002518f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025196:	75 aa                	jne    c0025142 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0025198:	b8 02 00 00 00       	mov    eax,0x2
c002519d:	83 c4 1c             	add    esp,0x1c
c00251a0:	5b                   	pop    ebx
c00251a1:	5e                   	pop    esi
c00251a2:	5f                   	pop    edi
c00251a3:	5d                   	pop    ebp
c00251a4:	c3                   	ret    
c00251a5:	90                   	nop

c00251a6 <SATA::close(int, int, void*)>:
c00251a6:	83 ec 0c             	sub    esp,0xc
c00251a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00251b3:	85 c0                	test   eax,eax
c00251b5:	74 0c                	je     c00251c3 <SATA::close(int, int, void*)+0x1d>
c00251b7:	83 ec 0c             	sub    esp,0xc
c00251ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00251bc:	50                   	push   eax
c00251bd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00251c0:	83 c4 10             	add    esp,0x10
c00251c3:	31 c0                	xor    eax,eax
c00251c5:	83 c4 0c             	add    esp,0xc
c00251c8:	c3                   	ret    
c00251c9:	90                   	nop

c00251ca <SATA::powerSaving(PowerSavingLevel)>:
c00251ca:	c3                   	ret    
c00251cb:	90                   	nop

c00251cc <SATA::open(int, int, void*)>:
c00251cc:	56                   	push   esi
c00251cd:	53                   	push   ebx
c00251ce:	50                   	push   eax
c00251cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00251d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251d7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00251e1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00251e7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00251f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251f5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00251ff:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025205:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002520c:	e8 49 a7 fe ff       	call   c000f95a <Phys::allocatePage()>
c0025211:	89 c6                	mov    esi,eax
c0025213:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025219:	81 c6 00 10 00 00    	add    esi,0x1000
c002521f:	e8 36 a7 fe ff       	call   c000f95a <Phys::allocatePage()>
c0025224:	39 c6                	cmp    esi,eax
c0025226:	74 10                	je     c0025238 <SATA::open(int, int, void*)+0x6c>
c0025228:	83 ec 0c             	sub    esp,0xc
c002522b:	68 40 d6 02 c0       	push   0xc002d640
c0025230:	e8 48 4e ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0025235:	83 c4 10             	add    esp,0x10
c0025238:	83 ec 0c             	sub    esp,0xc
c002523b:	6a 02                	push   0x2
c002523d:	e8 67 bf fe ff       	call   c00111a9 <Virt::allocateKernelVirtualPages(int)>
c0025242:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025248:	6a 03                	push   0x3
c002524a:	50                   	push   eax
c002524b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0025251:	ff 35 b0 ee 02 c0    	push   DWORD PTR ds:0xc002eeb0
c0025257:	e8 84 c7 fe ff       	call   c00119e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c002525c:	83 c4 14             	add    esp,0x14
c002525f:	53                   	push   ebx
c0025260:	e8 31 ec fe ff       	call   c0013e96 <PhysicalDisk::startCache()>
c0025265:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025268:	e8 c3 0e ff ff       	call   c0016130 <createPartitionsForDisk(PhysicalDisk*)>
c002526d:	83 c4 14             	add    esp,0x14
c0025270:	31 c0                	xor    eax,eax
c0025272:	5b                   	pop    ebx
c0025273:	5e                   	pop    esi
c0025274:	c3                   	ret    
c0025275:	90                   	nop

c0025276 <SATA::SATA()>:
c0025276:	83 ec 0c             	sub    esp,0xc
c0025279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002527d:	83 ec 04             	sub    esp,0x4
c0025280:	68 00 02 00 00       	push   0x200
c0025285:	68 54 d6 02 c0       	push   0xc002d654
c002528a:	50                   	push   eax
c002528b:	e8 9e eb fe ff       	call   c0013e2e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025290:	83 c4 10             	add    esp,0x10
c0025293:	ba c4 d6 02 c0       	mov    edx,0xc002d6c4
c0025298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002529c:	89 10                	mov    DWORD PTR [eax],edx
c002529e:	90                   	nop
c002529f:	83 c4 0c             	add    esp,0xc
c00252a2:	c3                   	ret    
c00252a3:	90                   	nop

c00252a4 <SATA::access(unsigned long long, int, void*, bool)>:
c00252a4:	55                   	push   ebp
c00252a5:	57                   	push   edi
c00252a6:	56                   	push   esi
c00252a7:	53                   	push   ebx
c00252a8:	83 ec 2c             	sub    esp,0x2c
c00252ab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00252af:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00252b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00252b7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00252bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00252bf:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00252c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00252c8:	7e 10                	jle    c00252da <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00252ca:	83 ec 0c             	sub    esp,0xc
c00252cd:	68 64 d6 02 c0       	push   0xc002d664
c00252d2:	e8 a6 4d ff ff       	call   c001a07d <Krnl::panic(char const*)>
c00252d7:	83 c4 10             	add    esp,0x10
c00252da:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00252e0:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00252e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00252ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00252f0:	89 d0                	mov    eax,edx
c00252f2:	c1 e0 07             	shl    eax,0x7
c00252f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00252f9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025303:	51                   	push   ecx
c0025304:	8d 42 02             	lea    eax,[edx+0x2]
c0025307:	51                   	push   ecx
c0025308:	c1 e0 07             	shl    eax,0x7
c002530b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002530f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025313:	50                   	push   eax
c0025314:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002531a:	e8 e7 ef ff ff       	call   c0024306 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002531f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025323:	83 c4 10             	add    esp,0x10
c0025326:	b8 01 00 00 00       	mov    eax,0x1
c002532b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025330:	0f 84 cb 01 00 00    	je     c0025501 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025336:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002533a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002533e:	c1 e0 09             	shl    eax,0x9
c0025341:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025346:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002534a:	74 0e                	je     c002535a <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c002534c:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025352:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025356:	89 c1                	mov    ecx,eax
c0025358:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002535a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002535e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025364:	8d 42 02             	lea    eax,[edx+0x2]
c0025367:	c1 e0 07             	shl    eax,0x7
c002536a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002536e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025370:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025376:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002537c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025380:	c1 e1 05             	shl    ecx,0x5
c0025383:	01 c8                	add    eax,ecx
c0025385:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0025389:	83 e1 01             	and    ecx,0x1
c002538c:	89 ce                	mov    esi,ecx
c002538e:	8a 08                	mov    cl,BYTE PTR [eax]
c0025390:	c1 e6 06             	shl    esi,0x6
c0025393:	83 e1 bf             	and    ecx,0xffffffbf
c0025396:	09 f1                	or     ecx,esi
c0025398:	88 08                	mov    BYTE PTR [eax],cl
c002539a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002539c:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00253a2:	81 c9 05 00 01 00    	or     ecx,0x10005
c00253a8:	89 08                	mov    DWORD PTR [eax],ecx
c00253aa:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00253b0:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00253b6:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00253bc:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00253bf:	50                   	push   eax
c00253c0:	68 90 00 00 00       	push   0x90
c00253c5:	6a 00                	push   0x0
c00253c7:	56                   	push   esi
c00253c8:	e8 83 b3 fd ff       	call   c0000750 <memset>
c00253cd:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00253d3:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c00253d7:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00253dd:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00253e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00253e5:	83 c4 10             	add    esp,0x10
c00253e8:	48                   	dec    eax
c00253e9:	25 ff ff 3f 00       	and    eax,0x3fffff
c00253ee:	89 c1                	mov    ecx,eax
c00253f0:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00253f6:	25 00 00 c0 ff       	and    eax,0xffc00000
c00253fb:	09 c8                	or     eax,ecx
c00253fd:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025403:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025406:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c002540d:	66 25 00 7f          	and    ax,0x7f00
c0025411:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025415:	66 0d 27 80          	or     ax,0x8027
c0025419:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c002541e:	66 89 06             	mov    WORD PTR [esi],ax
c0025421:	19 c0                	sbb    eax,eax
c0025423:	83 e0 f0             	and    eax,0xfffffff0
c0025426:	83 c0 35             	add    eax,0x35
c0025429:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002542c:	89 e8                	mov    eax,ebp
c002542e:	c1 e8 10             	shr    eax,0x10
c0025431:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025434:	89 e8                	mov    eax,ebp
c0025436:	c1 e8 18             	shr    eax,0x18
c0025439:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002543c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025440:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025443:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025447:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002544a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002544e:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025452:	89 d6                	mov    esi,edx
c0025454:	31 c0                	xor    eax,eax
c0025456:	c1 e6 07             	shl    esi,0x7
c0025459:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002545d:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025463:	80 e1 88             	and    cl,0x88
c0025466:	74 0a                	je     c0025472 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0025468:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002546d:	74 0a                	je     c0025479 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c002546f:	40                   	inc    eax
c0025470:	eb eb                	jmp    c002545d <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025472:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025477:	75 0a                	jne    c0025483 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0025479:	83 ec 0c             	sub    esp,0xc
c002547c:	68 9d d6 02 c0       	push   0xc002d69d
c0025481:	eb 56                	jmp    c00254d9 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025483:	b8 01 00 00 00       	mov    eax,0x1
c0025488:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002548c:	c1 e2 07             	shl    edx,0x7
c002548f:	d3 e0                	shl    eax,cl
c0025491:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025495:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002549b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00254a1:	85 c8                	test   eax,ecx
c00254a3:	74 20                	je     c00254c5 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c00254a5:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c00254ab:	0f ba e1 1e          	bt     ecx,0x1e
c00254af:	73 ea                	jae    c002549b <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c00254b1:	83 ec 0c             	sub    esp,0xc
c00254b4:	68 ab d6 02 c0       	push   0xc002d6ab
c00254b9:	e8 bf 4b ff ff       	call   c001a07d <Krnl::panic(char const*)>
c00254be:	83 c4 10             	add    esp,0x10
c00254c1:	31 c0                	xor    eax,eax
c00254c3:	eb 3c                	jmp    c0025501 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00254c5:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c00254cb:	0f ba e0 1e          	bt     eax,0x1e
c00254cf:	73 17                	jae    c00254e8 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c00254d1:	83 ec 0c             	sub    esp,0xc
c00254d4:	68 ab d6 02 c0       	push   0xc002d6ab
c00254d9:	e8 9f 4b ff ff       	call   c001a07d <Krnl::panic(char const*)>
c00254de:	83 c4 10             	add    esp,0x10
c00254e1:	b8 01 00 00 00       	mov    eax,0x1
c00254e6:	eb 19                	jmp    c0025501 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00254e8:	31 c0                	xor    eax,eax
c00254ea:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00254ef:	75 10                	jne    c0025501 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00254f1:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00254f7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00254fb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00254ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025501:	83 c4 2c             	add    esp,0x2c
c0025504:	5b                   	pop    ebx
c0025505:	5e                   	pop    esi
c0025506:	5f                   	pop    edi
c0025507:	5d                   	pop    ebp
c0025508:	c3                   	ret    
c0025509:	90                   	nop

c002550a <SATA::read(unsigned long long, int, void*)>:
c002550a:	57                   	push   edi
c002550b:	b8 04 00 00 00       	mov    eax,0x4
c0025510:	56                   	push   esi
c0025511:	53                   	push   ebx
c0025512:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025516:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002551a:	8d 7a ff             	lea    edi,[edx-0x1]
c002551d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025521:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025525:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002552b:	77 25                	ja     c0025552 <SATA::read(unsigned long long, int, void*)+0x48>
c002552d:	b8 06 00 00 00       	mov    eax,0x6
c0025532:	85 f6                	test   esi,esi
c0025534:	74 1c                	je     c0025552 <SATA::read(unsigned long long, int, void*)+0x48>
c0025536:	50                   	push   eax
c0025537:	50                   	push   eax
c0025538:	6a 00                	push   0x0
c002553a:	56                   	push   esi
c002553b:	52                   	push   edx
c002553c:	53                   	push   ebx
c002553d:	51                   	push   ecx
c002553e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025542:	e8 5d fd ff ff       	call   c00252a4 <SATA::access(unsigned long long, int, void*, bool)>
c0025547:	83 c4 20             	add    esp,0x20
c002554a:	85 c0                	test   eax,eax
c002554c:	0f 95 c0             	setne  al
c002554f:	0f b6 c0             	movzx  eax,al
c0025552:	5b                   	pop    ebx
c0025553:	5e                   	pop    esi
c0025554:	5f                   	pop    edi
c0025555:	c3                   	ret    

c0025556 <SATA::write(unsigned long long, int, void*)>:
c0025556:	55                   	push   ebp
c0025557:	b8 04 00 00 00       	mov    eax,0x4
c002555c:	57                   	push   edi
c002555d:	56                   	push   esi
c002555e:	53                   	push   ebx
c002555f:	83 ec 0c             	sub    esp,0xc
c0025562:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025566:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002556a:	8d 73 ff             	lea    esi,[ebx-0x1]
c002556d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025571:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025575:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002557b:	77 3d                	ja     c00255ba <SATA::write(unsigned long long, int, void*)+0x64>
c002557d:	b8 06 00 00 00       	mov    eax,0x6
c0025582:	85 ed                	test   ebp,ebp
c0025584:	74 34                	je     c00255ba <SATA::write(unsigned long long, int, void*)+0x64>
c0025586:	c1 e3 09             	shl    ebx,0x9
c0025589:	01 eb                	add    ebx,ebp
c002558b:	89 d6                	mov    esi,edx
c002558d:	89 cf                	mov    edi,ecx
c002558f:	83 c6 01             	add    esi,0x1
c0025592:	83 d7 00             	adc    edi,0x0
c0025595:	50                   	push   eax
c0025596:	50                   	push   eax
c0025597:	6a 01                	push   0x1
c0025599:	55                   	push   ebp
c002559a:	81 c5 00 02 00 00    	add    ebp,0x200
c00255a0:	6a 01                	push   0x1
c00255a2:	51                   	push   ecx
c00255a3:	52                   	push   edx
c00255a4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00255a8:	e8 f7 fc ff ff       	call   c00252a4 <SATA::access(unsigned long long, int, void*, bool)>
c00255ad:	83 c4 20             	add    esp,0x20
c00255b0:	89 f2                	mov    edx,esi
c00255b2:	89 f9                	mov    ecx,edi
c00255b4:	39 dd                	cmp    ebp,ebx
c00255b6:	75 d3                	jne    c002558b <SATA::write(unsigned long long, int, void*)+0x35>
c00255b8:	31 c0                	xor    eax,eax
c00255ba:	83 c4 0c             	add    esp,0xc
c00255bd:	5b                   	pop    ebx
c00255be:	5e                   	pop    esi
c00255bf:	5f                   	pop    edi
c00255c0:	5d                   	pop    ebp
c00255c1:	c3                   	ret    

c00255c2 <SATAPI::write(unsigned long long, int, void*)>:
c00255c2:	b8 03 00 00 00       	mov    eax,0x3
c00255c7:	c3                   	ret    

c00255c8 <SATAPI::close(int, int, void*)>:
c00255c8:	83 ec 0c             	sub    esp,0xc
c00255cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255cf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00255d5:	85 c0                	test   eax,eax
c00255d7:	74 0c                	je     c00255e5 <SATAPI::close(int, int, void*)+0x1d>
c00255d9:	83 ec 0c             	sub    esp,0xc
c00255dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00255de:	50                   	push   eax
c00255df:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00255e2:	83 c4 10             	add    esp,0x10
c00255e5:	31 c0                	xor    eax,eax
c00255e7:	83 c4 0c             	add    esp,0xc
c00255ea:	c3                   	ret    
c00255eb:	90                   	nop

c00255ec <SATAPI::SATAPI()>:
c00255ec:	83 ec 0c             	sub    esp,0xc
c00255ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f3:	83 ec 04             	sub    esp,0x4
c00255f6:	68 00 08 00 00       	push   0x800
c00255fb:	68 f4 d6 02 c0       	push   0xc002d6f4
c0025600:	50                   	push   eax
c0025601:	e8 28 e8 fe ff       	call   c0013e2e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025606:	83 c4 10             	add    esp,0x10
c0025609:	ba a0 d7 02 c0       	mov    edx,0xc002d7a0
c002560e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025612:	89 10                	mov    DWORD PTR [eax],edx
c0025614:	90                   	nop
c0025615:	83 c4 0c             	add    esp,0xc
c0025618:	c3                   	ret    
c0025619:	90                   	nop

c002561a <SATAPI::diskRemoved()>:
c002561a:	83 ec 18             	sub    esp,0x18
c002561d:	68 00 d7 02 c0       	push   0xc002d700
c0025622:	e8 88 cf fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0025627:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002562b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025632:	83 c4 1c             	add    esp,0x1c
c0025635:	c3                   	ret    

c0025636 <SATAPI::diskInserted()>:
c0025636:	53                   	push   ebx
c0025637:	83 ec 14             	sub    esp,0x14
c002563a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002563e:	68 17 d7 02 c0       	push   0xc002d717
c0025643:	e8 67 cf fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0025648:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002564f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025652:	e8 3f e8 fe ff       	call   c0013e96 <PhysicalDisk::startCache()>
c0025657:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002565b:	83 c4 18             	add    esp,0x18
c002565e:	5b                   	pop    ebx
c002565f:	e9 cc 0a ff ff       	jmp    c0016130 <createPartitionsForDisk(PhysicalDisk*)>

c0025664 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025664:	55                   	push   ebp
c0025665:	57                   	push   edi
c0025666:	56                   	push   esi
c0025667:	53                   	push   ebx
c0025668:	83 ec 34             	sub    esp,0x34
c002566b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002566f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025673:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025677:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002567b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002567f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025685:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002568b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002568f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025695:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025699:	c1 e0 07             	shl    eax,0x7
c002569c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00256a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00256a4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00256ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256b2:	8d 58 02             	lea    ebx,[eax+0x2]
c00256b5:	c1 e3 07             	shl    ebx,0x7
c00256b8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00256bc:	53                   	push   ebx
c00256bd:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00256c3:	e8 3e ec ff ff       	call   c0024306 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00256c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00256cc:	83 c4 10             	add    esp,0x10
c00256cf:	b8 01 00 00 00       	mov    eax,0x1
c00256d4:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00256d9:	0f 84 85 01 00 00    	je     c0025864 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c00256df:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00256e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00256e7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00256ed:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00256f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00256f7:	c1 e1 05             	shl    ecx,0x5
c00256fa:	01 c8                	add    eax,ecx
c00256fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00256fe:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025704:	81 c9 25 00 01 00    	or     ecx,0x10025
c002570a:	89 08                	mov    DWORD PTR [eax],ecx
c002570c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025712:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025718:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002571e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025721:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025724:	50                   	push   eax
c0025725:	68 90 00 00 00       	push   0x90
c002572a:	6a 00                	push   0x0
c002572c:	53                   	push   ebx
c002572d:	e8 1e b0 fd ff       	call   c0000750 <memset>
c0025732:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025736:	b9 0c 00 00 00       	mov    ecx,0xc
c002573b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002573d:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025743:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025747:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002574d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025751:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025755:	48                   	dec    eax
c0025756:	25 ff ff 3f 00       	and    eax,0x3fffff
c002575b:	89 c1                	mov    ecx,eax
c002575d:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025763:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025768:	09 c8                	or     eax,ecx
c002576a:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025770:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025773:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002577a:	66 25 00 7f          	and    ax,0x7f00
c002577e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025782:	66 0d 27 80          	or     ax,0x8027
c0025786:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002578a:	66 89 03             	mov    WORD PTR [ebx],ax
c002578d:	89 d0                	mov    eax,edx
c002578f:	c1 ea 18             	shr    edx,0x18
c0025792:	c1 e8 10             	shr    eax,0x10
c0025795:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025798:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002579b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002579f:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00257a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00257a6:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00257a9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00257ad:	83 c4 10             	add    esp,0x10
c00257b0:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00257b4:	31 c0                	xor    eax,eax
c00257b6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00257ba:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c00257c0:	80 e2 88             	and    dl,0x88
c00257c3:	74 0a                	je     c00257cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00257c5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00257ca:	74 0a                	je     c00257d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c00257cc:	40                   	inc    eax
c00257cd:	eb eb                	jmp    c00257ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c00257cf:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00257d4:	75 0f                	jne    c00257e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c00257d6:	83 ec 0c             	sub    esp,0xc
c00257d9:	68 9d d6 02 c0       	push   0xc002d69d
c00257de:	e8 9a 48 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c00257e3:	eb 3f                	jmp    c0025824 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c00257e5:	ba 01 00 00 00       	mov    edx,0x1
c00257ea:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00257ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00257f2:	d3 e2                	shl    edx,cl
c00257f4:	c1 e0 07             	shl    eax,0x7
c00257f7:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c00257fd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025801:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025807:	85 ca                	test   edx,ecx
c0025809:	74 23                	je     c002582e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002580b:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025811:	0f ba e1 1e          	bt     ecx,0x1e
c0025815:	73 ea                	jae    c0025801 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025817:	83 ec 0c             	sub    esp,0xc
c002581a:	68 2f d7 02 c0       	push   0xc002d72f
c002581f:	e8 8b cd fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0025824:	83 c4 10             	add    esp,0x10
c0025827:	b8 01 00 00 00       	mov    eax,0x1
c002582c:	eb 36                	jmp    c0025864 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c002582e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025834:	0f ba e0 1e          	bt     eax,0x1e
c0025838:	73 0a                	jae    c0025844 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c002583a:	83 ec 0c             	sub    esp,0xc
c002583d:	68 42 d7 02 c0       	push   0xc002d742
c0025842:	eb db                	jmp    c002581f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025844:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025849:	74 17                	je     c0025862 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c002584b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025850:	74 10                	je     c0025862 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025852:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025858:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002585c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025860:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025862:	31 c0                	xor    eax,eax
c0025864:	83 c4 2c             	add    esp,0x2c
c0025867:	5b                   	pop    ebx
c0025868:	5e                   	pop    esi
c0025869:	5f                   	pop    edi
c002586a:	5d                   	pop    ebp
c002586b:	c3                   	ret    

c002586c <SATAPI::eject()>:
c002586c:	57                   	push   edi
c002586d:	b9 03 00 00 00       	mov    ecx,0x3
c0025872:	53                   	push   ebx
c0025873:	83 ec 14             	sub    esp,0x14
c0025876:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002587a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002587e:	fc                   	cld    
c002587f:	31 c0                	xor    eax,eax
c0025881:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025883:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025888:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002588d:	50                   	push   eax
c002588e:	6a 00                	push   0x0
c0025890:	6a 00                	push   0x0
c0025892:	6a 00                	push   0x0
c0025894:	6a 00                	push   0x0
c0025896:	6a 02                	push   0x2
c0025898:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002589c:	50                   	push   eax
c002589d:	53                   	push   ebx
c002589e:	e8 c1 fd ff ff       	call   c0025664 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00258a3:	83 c4 14             	add    esp,0x14
c00258a6:	53                   	push   ebx
c00258a7:	e8 6e fd ff ff       	call   c002561a <SATAPI::diskRemoved()>
c00258ac:	83 c4 24             	add    esp,0x24
c00258af:	31 c0                	xor    eax,eax
c00258b1:	5b                   	pop    ebx
c00258b2:	5f                   	pop    edi
c00258b3:	c3                   	ret    

c00258b4 <SATAPI::detectMedia()>:
c00258b4:	56                   	push   esi
c00258b5:	53                   	push   ebx
c00258b6:	83 ec 28             	sub    esp,0x28
c00258b9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00258bd:	6a 0c                	push   0xc
c00258bf:	6a 00                	push   0x0
c00258c1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00258c5:	56                   	push   esi
c00258c6:	e8 85 ae fd ff       	call   c0000750 <memset>
c00258cb:	83 c4 0c             	add    esp,0xc
c00258ce:	6a 00                	push   0x0
c00258d0:	6a 00                	push   0x0
c00258d2:	6a 00                	push   0x0
c00258d4:	6a 00                	push   0x0
c00258d6:	6a 00                	push   0x0
c00258d8:	56                   	push   esi
c00258d9:	53                   	push   ebx
c00258da:	e8 85 fd ff ff       	call   c0025664 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00258df:	83 c4 1c             	add    esp,0x1c
c00258e2:	6a 0c                	push   0xc
c00258e4:	6a 00                	push   0x0
c00258e6:	56                   	push   esi
c00258e7:	e8 64 ae fd ff       	call   c0000750 <memset>
c00258ec:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00258f1:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00258f6:	83 c4 0c             	add    esp,0xc
c00258f9:	6a 01                	push   0x1
c00258fb:	8d 44 24 16          	lea    eax,[esp+0x16]
c00258ff:	50                   	push   eax
c0025900:	6a 00                	push   0x0
c0025902:	6a 00                	push   0x0
c0025904:	6a 12                	push   0x12
c0025906:	56                   	push   esi
c0025907:	53                   	push   ebx
c0025908:	e8 57 fd ff ff       	call   c0025664 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002590d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025911:	83 c4 20             	add    esp,0x20
c0025914:	83 e0 7f             	and    eax,0x7f
c0025917:	3c 70                	cmp    al,0x70
c0025919:	74 15                	je     c0025930 <SATAPI::detectMedia()+0x7c>
c002591b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025922:	75 0c                	jne    c0025930 <SATAPI::detectMedia()+0x7c>
c0025924:	83 ec 0c             	sub    esp,0xc
c0025927:	53                   	push   ebx
c0025928:	e8 09 fd ff ff       	call   c0025636 <SATAPI::diskInserted()>
c002592d:	83 c4 10             	add    esp,0x10
c0025930:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025934:	83 e0 0f             	and    eax,0xf
c0025937:	3c 02                	cmp    al,0x2
c0025939:	75 1b                	jne    c0025956 <SATAPI::detectMedia()+0xa2>
c002593b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025940:	75 2d                	jne    c002596f <SATAPI::detectMedia()+0xbb>
c0025942:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025949:	74 24                	je     c002596f <SATAPI::detectMedia()+0xbb>
c002594b:	83 ec 0c             	sub    esp,0xc
c002594e:	53                   	push   ebx
c002594f:	e8 c6 fc ff ff       	call   c002561a <SATAPI::diskRemoved()>
c0025954:	eb 16                	jmp    c002596c <SATAPI::detectMedia()+0xb8>
c0025956:	84 c0                	test   al,al
c0025958:	75 15                	jne    c002596f <SATAPI::detectMedia()+0xbb>
c002595a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025961:	75 0c                	jne    c002596f <SATAPI::detectMedia()+0xbb>
c0025963:	83 ec 0c             	sub    esp,0xc
c0025966:	53                   	push   ebx
c0025967:	e8 ca fc ff ff       	call   c0025636 <SATAPI::diskInserted()>
c002596c:	83 c4 10             	add    esp,0x10
c002596f:	83 c4 24             	add    esp,0x24
c0025972:	5b                   	pop    ebx
c0025973:	5e                   	pop    esi
c0025974:	c3                   	ret    
c0025975:	90                   	nop

c0025976 <SATAPI::open(int, int, void*)>:
c0025976:	56                   	push   esi
c0025977:	53                   	push   ebx
c0025978:	50                   	push   eax
c0025979:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002597d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025981:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002598b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025991:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002599b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002599f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00259a9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00259af:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00259b6:	e8 9f 9f fe ff       	call   c000f95a <Phys::allocatePage()>
c00259bb:	89 c6                	mov    esi,eax
c00259bd:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00259c3:	81 c6 00 10 00 00    	add    esi,0x1000
c00259c9:	e8 8c 9f fe ff       	call   c000f95a <Phys::allocatePage()>
c00259ce:	39 c6                	cmp    esi,eax
c00259d0:	74 10                	je     c00259e2 <SATAPI::open(int, int, void*)+0x6c>
c00259d2:	83 ec 0c             	sub    esp,0xc
c00259d5:	68 57 d7 02 c0       	push   0xc002d757
c00259da:	e8 9e 46 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c00259df:	83 c4 10             	add    esp,0x10
c00259e2:	83 ec 0c             	sub    esp,0xc
c00259e5:	6a 02                	push   0x2
c00259e7:	e8 bd b7 fe ff       	call   c00111a9 <Virt::allocateKernelVirtualPages(int)>
c00259ec:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00259f2:	6a 03                	push   0x3
c00259f4:	50                   	push   eax
c00259f5:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00259fb:	ff 35 b0 ee 02 c0    	push   DWORD PTR ds:0xc002eeb0
c0025a01:	e8 da bf fe ff       	call   c00119e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025a06:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025a0d:	83 c4 14             	add    esp,0x14
c0025a10:	53                   	push   ebx
c0025a11:	e8 9e fe ff ff       	call   c00258b4 <SATAPI::detectMedia()>
c0025a16:	83 c4 14             	add    esp,0x14
c0025a19:	31 c0                	xor    eax,eax
c0025a1b:	5b                   	pop    ebx
c0025a1c:	5e                   	pop    esi
c0025a1d:	c3                   	ret    

c0025a1e <SATAPI::read(unsigned long long, int, void*)>:
c0025a1e:	55                   	push   ebp
c0025a1f:	57                   	push   edi
c0025a20:	56                   	push   esi
c0025a21:	53                   	push   ebx
c0025a22:	83 ec 1c             	sub    esp,0x1c
c0025a25:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025a29:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025a2d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025a31:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025a38:	74 19                	je     c0025a53 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025a3a:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025a3f:	7e 2e                	jle    c0025a6f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025a41:	83 ec 0c             	sub    esp,0xc
c0025a44:	68 6d d7 02 c0       	push   0xc002d76d
c0025a49:	e8 2f 46 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0025a4e:	83 c4 10             	add    esp,0x10
c0025a51:	eb 1c                	jmp    c0025a6f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025a53:	83 ec 0c             	sub    esp,0xc
c0025a56:	55                   	push   ebp
c0025a57:	e8 58 fe ff ff       	call   c00258b4 <SATAPI::detectMedia()>
c0025a5c:	83 c4 10             	add    esp,0x10
c0025a5f:	b8 02 00 00 00       	mov    eax,0x2
c0025a64:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025a6b:	75 cd                	jne    c0025a3a <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025a6d:	eb 49                	jmp    c0025ab8 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025a6f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025a73:	b9 03 00 00 00       	mov    ecx,0x3
c0025a78:	fc                   	cld    
c0025a79:	31 c0                	xor    eax,eax
c0025a7b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025a7d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025a82:	89 d8                	mov    eax,ebx
c0025a84:	86 e0                	xchg   al,ah
c0025a86:	c1 c0 10             	rol    eax,0x10
c0025a89:	86 e0                	xchg   al,ah
c0025a8b:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025a8f:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025a93:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025a97:	50                   	push   eax
c0025a98:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025a9c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025aa0:	56                   	push   esi
c0025aa1:	53                   	push   ebx
c0025aa2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025aa6:	c1 e0 0b             	shl    eax,0xb
c0025aa9:	50                   	push   eax
c0025aaa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025aae:	50                   	push   eax
c0025aaf:	55                   	push   ebp
c0025ab0:	e8 af fb ff ff       	call   c0025664 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025ab5:	83 c4 20             	add    esp,0x20
c0025ab8:	83 c4 1c             	add    esp,0x1c
c0025abb:	5b                   	pop    ebx
c0025abc:	5e                   	pop    esi
c0025abd:	5f                   	pop    edi
c0025abe:	5d                   	pop    ebp
c0025abf:	c3                   	ret    

c0025ac0 <AVX::open(int, int, void*)>:
c0025ac0:	83 ec 0c             	sub    esp,0xc
c0025ac3:	e8 40 11 00 00       	call   c0026c08 <avxInit>
c0025ac8:	b8 00 00 00 00       	mov    eax,0x0
c0025acd:	83 c4 0c             	add    esp,0xc
c0025ad0:	c3                   	ret    
c0025ad1:	90                   	nop

c0025ad2 <AVX::close(int, int, void*)>:
c0025ad2:	83 ec 0c             	sub    esp,0xc
c0025ad5:	e8 2f 11 00 00       	call   c0026c09 <avxClose>
c0025ada:	b8 00 00 00 00       	mov    eax,0x0
c0025adf:	83 c4 0c             	add    esp,0xc
c0025ae2:	c3                   	ret    
c0025ae3:	90                   	nop

c0025ae4 <AVX::available()>:
c0025ae4:	83 ec 0c             	sub    esp,0xc
c0025ae7:	e8 14 11 00 00       	call   c0026c00 <avxDetect>
c0025aec:	85 c0                	test   eax,eax
c0025aee:	0f 95 c0             	setne  al
c0025af1:	83 c4 0c             	add    esp,0xc
c0025af4:	c3                   	ret    
c0025af5:	90                   	nop

c0025af6 <AVX::save(void*)>:
c0025af6:	83 ec 0c             	sub    esp,0xc
c0025af9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025afd:	83 ec 0c             	sub    esp,0xc
c0025b00:	50                   	push   eax
c0025b01:	e8 00 11 00 00       	call   c0026c06 <avxSave>
c0025b06:	83 c4 10             	add    esp,0x10
c0025b09:	90                   	nop
c0025b0a:	83 c4 0c             	add    esp,0xc
c0025b0d:	c3                   	ret    

c0025b0e <AVX::load(void*)>:
c0025b0e:	83 ec 0c             	sub    esp,0xc
c0025b11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025b15:	83 ec 0c             	sub    esp,0xc
c0025b18:	50                   	push   eax
c0025b19:	e8 e9 10 00 00       	call   c0026c07 <avxLoad>
c0025b1e:	83 c4 10             	add    esp,0x10
c0025b21:	90                   	nop
c0025b22:	83 c4 0c             	add    esp,0xc
c0025b25:	c3                   	ret    

c0025b26 <AVX::AVX()>:
c0025b26:	83 ec 0c             	sub    esp,0xc
c0025b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b2d:	83 ec 08             	sub    esp,0x8
c0025b30:	68 d0 d7 02 c0       	push   0xc002d7d0
c0025b35:	50                   	push   eax
c0025b36:	e8 d1 e3 fe ff       	call   c0013f0c <FPU::FPU(char const*)>
c0025b3b:	83 c4 10             	add    esp,0x10
c0025b3e:	ba e0 d7 02 c0       	mov    edx,0xc002d7e0
c0025b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b47:	89 10                	mov    DWORD PTR [eax],edx
c0025b49:	90                   	nop
c0025b4a:	83 c4 0c             	add    esp,0xc
c0025b4d:	c3                   	ret    

c0025b4e <MMX::available()>:
c0025b4e:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0025b53:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025b59:	83 e0 20             	and    eax,0x20
c0025b5c:	84 c0                	test   al,al
c0025b5e:	0f 95 c0             	setne  al
c0025b61:	c3                   	ret    

c0025b62 <MMX::open(int, int, void*)>:
c0025b62:	83 ec 0c             	sub    esp,0xc
c0025b65:	e8 28 11 00 00       	call   c0026c92 <x87Init>
c0025b6a:	b8 00 00 00 00       	mov    eax,0x0
c0025b6f:	83 c4 0c             	add    esp,0xc
c0025b72:	c3                   	ret    
c0025b73:	90                   	nop

c0025b74 <MMX::close(int, int, void*)>:
c0025b74:	83 ec 0c             	sub    esp,0xc
c0025b77:	e8 30 11 00 00       	call   c0026cac <x87Close>
c0025b7c:	b8 00 00 00 00       	mov    eax,0x0
c0025b81:	83 c4 0c             	add    esp,0xc
c0025b84:	c3                   	ret    
c0025b85:	90                   	nop

c0025b86 <MMX::save(void*)>:
c0025b86:	83 ec 0c             	sub    esp,0xc
c0025b89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025b8d:	83 ec 0c             	sub    esp,0xc
c0025b90:	50                   	push   eax
c0025b91:	e8 eb 10 00 00       	call   c0026c81 <x87Save>
c0025b96:	83 c4 10             	add    esp,0x10
c0025b99:	90                   	nop
c0025b9a:	83 c4 0c             	add    esp,0xc
c0025b9d:	c3                   	ret    

c0025b9e <MMX::load(void*)>:
c0025b9e:	83 ec 0c             	sub    esp,0xc
c0025ba1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ba5:	83 ec 0c             	sub    esp,0xc
c0025ba8:	50                   	push   eax
c0025ba9:	e8 dc 10 00 00       	call   c0026c8a <x87Load>
c0025bae:	83 c4 10             	add    esp,0x10
c0025bb1:	90                   	nop
c0025bb2:	83 c4 0c             	add    esp,0xc
c0025bb5:	c3                   	ret    

c0025bb6 <MMX::MMX()>:
c0025bb6:	83 ec 0c             	sub    esp,0xc
c0025bb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bbd:	83 ec 08             	sub    esp,0x8
c0025bc0:	68 10 d8 02 c0       	push   0xc002d810
c0025bc5:	50                   	push   eax
c0025bc6:	e8 41 e3 fe ff       	call   c0013f0c <FPU::FPU(char const*)>
c0025bcb:	83 c4 10             	add    esp,0x10
c0025bce:	ba 20 d8 02 c0       	mov    edx,0xc002d820
c0025bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bd7:	89 10                	mov    DWORD PTR [eax],edx
c0025bd9:	90                   	nop
c0025bda:	83 c4 0c             	add    esp,0xc
c0025bdd:	c3                   	ret    

c0025bde <SSE::open(int, int, void*)>:
c0025bde:	83 ec 0c             	sub    esp,0xc
c0025be1:	e8 5e 10 00 00       	call   c0026c44 <sseInit>
c0025be6:	b8 00 00 00 00       	mov    eax,0x0
c0025beb:	83 c4 0c             	add    esp,0xc
c0025bee:	c3                   	ret    
c0025bef:	90                   	nop

c0025bf0 <SSE::close(int, int, void*)>:
c0025bf0:	83 ec 0c             	sub    esp,0xc
c0025bf3:	e8 5c 10 00 00       	call   c0026c54 <sseClose>
c0025bf8:	b8 00 00 00 00       	mov    eax,0x0
c0025bfd:	83 c4 0c             	add    esp,0xc
c0025c00:	c3                   	ret    
c0025c01:	90                   	nop

c0025c02 <SSE::available()>:
c0025c02:	83 ec 1c             	sub    esp,0x1c
c0025c05:	e8 16 10 00 00       	call   c0026c20 <absolutelyNoChanceInHell>
c0025c0a:	85 c0                	test   eax,eax
c0025c0c:	0f 95 c0             	setne  al
c0025c0f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025c13:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025c17:	83 c4 1c             	add    esp,0x1c
c0025c1a:	c3                   	ret    
c0025c1b:	90                   	nop

c0025c1c <SSE::save(void*)>:
c0025c1c:	83 ec 0c             	sub    esp,0xc
c0025c1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025c23:	83 ec 0c             	sub    esp,0xc
c0025c26:	50                   	push   eax
c0025c27:	e8 0c 10 00 00       	call   c0026c38 <sseSave>
c0025c2c:	83 c4 10             	add    esp,0x10
c0025c2f:	90                   	nop
c0025c30:	83 c4 0c             	add    esp,0xc
c0025c33:	c3                   	ret    

c0025c34 <SSE::load(void*)>:
c0025c34:	83 ec 0c             	sub    esp,0xc
c0025c37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025c3b:	83 ec 0c             	sub    esp,0xc
c0025c3e:	50                   	push   eax
c0025c3f:	e8 fa 0f 00 00       	call   c0026c3e <sseLoad>
c0025c44:	83 c4 10             	add    esp,0x10
c0025c47:	90                   	nop
c0025c48:	83 c4 0c             	add    esp,0xc
c0025c4b:	c3                   	ret    

c0025c4c <SSE::SSE()>:
c0025c4c:	83 ec 0c             	sub    esp,0xc
c0025c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c53:	83 ec 08             	sub    esp,0x8
c0025c56:	68 50 d8 02 c0       	push   0xc002d850
c0025c5b:	50                   	push   eax
c0025c5c:	e8 ab e2 fe ff       	call   c0013f0c <FPU::FPU(char const*)>
c0025c61:	83 c4 10             	add    esp,0x10
c0025c64:	ba 60 d8 02 c0       	mov    edx,0xc002d860
c0025c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c6d:	89 10                	mov    DWORD PTR [eax],edx
c0025c6f:	90                   	nop
c0025c70:	83 c4 0c             	add    esp,0xc
c0025c73:	c3                   	ret    

c0025c74 <x87::open(int, int, void*)>:
c0025c74:	83 ec 0c             	sub    esp,0xc
c0025c77:	e8 16 10 00 00       	call   c0026c92 <x87Init>
c0025c7c:	b8 00 00 00 00       	mov    eax,0x0
c0025c81:	83 c4 0c             	add    esp,0xc
c0025c84:	c3                   	ret    
c0025c85:	90                   	nop

c0025c86 <x87::close(int, int, void*)>:
c0025c86:	83 ec 0c             	sub    esp,0xc
c0025c89:	e8 1e 10 00 00       	call   c0026cac <x87Close>
c0025c8e:	b8 00 00 00 00       	mov    eax,0x0
c0025c93:	83 c4 0c             	add    esp,0xc
c0025c96:	c3                   	ret    
c0025c97:	90                   	nop

c0025c98 <x87::available()>:
c0025c98:	83 ec 0c             	sub    esp,0xc
c0025c9b:	e8 c6 0f 00 00       	call   c0026c66 <x87Detect>
c0025ca0:	85 c0                	test   eax,eax
c0025ca2:	0f 95 c0             	setne  al
c0025ca5:	83 c4 0c             	add    esp,0xc
c0025ca8:	c3                   	ret    
c0025ca9:	90                   	nop

c0025caa <x87::save(void*)>:
c0025caa:	83 ec 0c             	sub    esp,0xc
c0025cad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025cb1:	83 ec 0c             	sub    esp,0xc
c0025cb4:	50                   	push   eax
c0025cb5:	e8 c7 0f 00 00       	call   c0026c81 <x87Save>
c0025cba:	83 c4 10             	add    esp,0x10
c0025cbd:	90                   	nop
c0025cbe:	83 c4 0c             	add    esp,0xc
c0025cc1:	c3                   	ret    

c0025cc2 <x87::load(void*)>:
c0025cc2:	83 ec 0c             	sub    esp,0xc
c0025cc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025cc9:	83 ec 0c             	sub    esp,0xc
c0025ccc:	50                   	push   eax
c0025ccd:	e8 b8 0f 00 00       	call   c0026c8a <x87Load>
c0025cd2:	83 c4 10             	add    esp,0x10
c0025cd5:	90                   	nop
c0025cd6:	83 c4 0c             	add    esp,0xc
c0025cd9:	c3                   	ret    

c0025cda <x87::x87()>:
c0025cda:	83 ec 0c             	sub    esp,0xc
c0025cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ce1:	83 ec 08             	sub    esp,0x8
c0025ce4:	68 90 d8 02 c0       	push   0xc002d890
c0025ce9:	50                   	push   eax
c0025cea:	e8 1d e2 fe ff       	call   c0013f0c <FPU::FPU(char const*)>
c0025cef:	83 c4 10             	add    esp,0x10
c0025cf2:	ba a0 d8 02 c0       	mov    edx,0xc002d8a0
c0025cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cfb:	89 10                	mov    DWORD PTR [eax],edx
c0025cfd:	90                   	nop
c0025cfe:	83 c4 0c             	add    esp,0xc
c0025d01:	c3                   	ret    

c0025d02 <APIC::disable()>:
c0025d02:	90                   	nop
c0025d03:	c3                   	ret    

c0025d04 <APIC::close(int, int, void*)>:
c0025d04:	55                   	push   ebp
c0025d05:	89 e5                	mov    ebp,esp
c0025d07:	83 ec 08             	sub    esp,0x8
c0025d0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d0f:	83 c0 3c             	add    eax,0x3c
c0025d12:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d14:	83 ec 0c             	sub    esp,0xc
c0025d17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d1a:	ff d0                	call   eax
c0025d1c:	83 c4 10             	add    esp,0x10
c0025d1f:	b8 00 00 00 00       	mov    eax,0x0
c0025d24:	c9                   	leave  
c0025d25:	c3                   	ret    

c0025d26 <IOAPIC::close(int, int, void*)>:
c0025d26:	b8 00 00 00 00       	mov    eax,0x0
c0025d2b:	c3                   	ret    

c0025d2c <APIC::io_wait()>:
c0025d2c:	eb 00                	jmp    c0025d2e <APIC::io_wait()+0x2>
c0025d2e:	eb 00                	jmp    c0025d30 <APIC::io_wait()+0x4>
c0025d30:	90                   	nop
c0025d31:	c3                   	ret    

c0025d32 <APIC::getBase()>:
c0025d32:	55                   	push   ebp
c0025d33:	89 e5                	mov    ebp,esp
c0025d35:	83 ec 18             	sub    esp,0x18
c0025d38:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0025d3d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025d43:	83 e0 08             	and    eax,0x8
c0025d46:	84 c0                	test   al,al
c0025d48:	75 07                	jne    c0025d51 <APIC::getBase()+0x1f>
c0025d4a:	b8 00 00 00 00       	mov    eax,0x0
c0025d4f:	eb 21                	jmp    c0025d72 <APIC::getBase()+0x40>
c0025d51:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0025d56:	83 ec 08             	sub    esp,0x8
c0025d59:	6a 1b                	push   0x1b
c0025d5b:	50                   	push   eax
c0025d5c:	e8 df 8d fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0025d61:	83 c4 10             	add    esp,0x10
c0025d64:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025d67:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025d6a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d6d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025d72:	c9                   	leave  
c0025d73:	c3                   	ret    

c0025d74 <APIC::eoi(unsigned char)>:
c0025d74:	55                   	push   ebp
c0025d75:	89 e5                	mov    ebp,esp
c0025d77:	83 ec 28             	sub    esp,0x28
c0025d7a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d7d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025d80:	83 ec 0c             	sub    esp,0xc
c0025d83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d86:	e8 a7 ff ff ff       	call   c0025d32 <APIC::getBase()>
c0025d8b:	83 c4 10             	add    esp,0x10
c0025d8e:	05 b0 00 00 00       	add    eax,0xb0
c0025d93:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025d96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025d99:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025d9f:	90                   	nop
c0025da0:	c9                   	leave  
c0025da1:	c3                   	ret    

c0025da2 <APIC::open(int, int, void*)>:
c0025da2:	55                   	push   ebp
c0025da3:	89 e5                	mov    ebp,esp
c0025da5:	57                   	push   edi
c0025da6:	56                   	push   esi
c0025da7:	53                   	push   ebx
c0025da8:	83 ec 2c             	sub    esp,0x2c
c0025dab:	83 ec 0c             	sub    esp,0xc
c0025dae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025db1:	e8 7c ff ff ff       	call   c0025d32 <APIC::getBase()>
c0025db6:	83 c4 10             	add    esp,0x10
c0025db9:	89 c2                	mov    edx,eax
c0025dbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dbe:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025dc4:	0f b6 f8             	movzx  edi,al
c0025dc7:	89 d0                	mov    eax,edx
c0025dc9:	ba 00 00 00 00       	mov    edx,0x0
c0025dce:	89 c1                	mov    ecx,eax
c0025dd0:	80 e5 ff             	and    ch,0xff
c0025dd3:	89 cb                	mov    ebx,ecx
c0025dd5:	0f b6 f2             	movzx  esi,dl
c0025dd8:	89 d8                	mov    eax,ebx
c0025dda:	89 f2                	mov    edx,esi
c0025ddc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ddf:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025de2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025de6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025dea:	83 e0 00             	and    eax,0x0
c0025ded:	09 d0                	or     eax,edx
c0025def:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025df3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025df6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025dfc:	8d 50 01             	lea    edx,[eax+0x1]
c0025dff:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025e02:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025e08:	0f b6 d0             	movzx  edx,al
c0025e0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e0e:	83 c2 08             	add    edx,0x8
c0025e11:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025e15:	0f b6 c9             	movzx  ecx,cl
c0025e18:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025e1e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025e22:	83 ec 0c             	sub    esp,0xc
c0025e25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e28:	e8 05 ff ff ff       	call   c0025d32 <APIC::getBase()>
c0025e2d:	83 c4 10             	add    esp,0x10
c0025e30:	05 f0 00 00 00       	add    eax,0xf0
c0025e35:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025e38:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e3d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025e40:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025e47:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025e4e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e51:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e54:	89 10                	mov    DWORD PTR [eax],edx
c0025e56:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025e5d:	a1 10 16 03 c0       	mov    eax,ds:0xc0031610
c0025e62:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025e65:	7d 7c                	jge    c0025ee3 <APIC::open(int, int, void*)+0x141>
c0025e67:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025e6a:	8b 04 85 20 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce9e0]
c0025e71:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025e74:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025e77:	8b 04 85 20 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce9e0]
c0025e7e:	c1 e8 08             	shr    eax,0x8
c0025e81:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025e85:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025e88:	8b 04 85 20 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce9e0]
c0025e8f:	c1 e8 18             	shr    eax,0x18
c0025e92:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025e95:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025e99:	75 40                	jne    c0025edb <APIC::open(int, int, void*)+0x139>
c0025e9b:	83 ec 0c             	sub    esp,0xc
c0025e9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ea1:	e8 8c fe ff ff       	call   c0025d32 <APIC::getBase()>
c0025ea6:	83 c4 10             	add    esp,0x10
c0025ea9:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025ead:	75 07                	jne    c0025eb6 <APIC::open(int, int, void*)+0x114>
c0025eaf:	ba 60 03 00 00       	mov    edx,0x360
c0025eb4:	eb 05                	jmp    c0025ebb <APIC::open(int, int, void*)+0x119>
c0025eb6:	ba 50 03 00 00       	mov    edx,0x350
c0025ebb:	01 d0                	add    eax,edx
c0025ebd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025ec0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025ec3:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ec5:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025ec8:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025ecf:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025ed3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025ed6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025ed9:	89 10                	mov    DWORD PTR [eax],edx
c0025edb:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025ede:	e9 7a ff ff ff       	jmp    c0025e5d <APIC::open(int, int, void*)+0xbb>
c0025ee3:	b8 00 00 00 00       	mov    eax,0x0
c0025ee8:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025eeb:	5b                   	pop    ebx
c0025eec:	5e                   	pop    esi
c0025eed:	5f                   	pop    edi
c0025eee:	5d                   	pop    ebp
c0025eef:	c3                   	ret    

c0025ef0 <IOAPIC::IOAPIC()>:
c0025ef0:	83 ec 0c             	sub    esp,0xc
c0025ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef7:	83 ec 08             	sub    esp,0x8
c0025efa:	68 d0 d8 02 c0       	push   0xc002d8d0
c0025eff:	50                   	push   eax
c0025f00:	e8 e7 dc fe ff       	call   c0013bec <Device::Device(char const*)>
c0025f05:	83 c4 10             	add    esp,0x10
c0025f08:	ba f8 d9 02 c0       	mov    edx,0xc002d9f8
c0025f0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f11:	89 10                	mov    DWORD PTR [eax],edx
c0025f13:	90                   	nop
c0025f14:	83 c4 0c             	add    esp,0xc
c0025f17:	c3                   	ret    

c0025f18 <APIC::APIC()>:
c0025f18:	53                   	push   ebx
c0025f19:	83 ec 18             	sub    esp,0x18
c0025f1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025f20:	83 ec 08             	sub    esp,0x8
c0025f23:	68 d8 d8 02 c0       	push   0xc002d8d8
c0025f28:	50                   	push   eax
c0025f29:	e8 38 e4 fe ff       	call   c0014366 <InterruptController::InterruptController(char const*)>
c0025f2e:	83 c4 10             	add    esp,0x10
c0025f31:	ba b0 d9 02 c0       	mov    edx,0xc002d9b0
c0025f36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025f3a:	89 10                	mov    DWORD PTR [eax],edx
c0025f3c:	a0 e0 30 03 c0       	mov    al,ds:0xc00330e0
c0025f41:	83 f0 01             	xor    eax,0x1
c0025f44:	84 c0                	test   al,al
c0025f46:	0f 84 a1 00 00 00    	je     c0025fed <APIC::APIC()+0xd5>
c0025f4c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025f51:	a0 c0 16 03 c0       	mov    al,ds:0xc00316c0
c0025f56:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025f5a:	0f 83 86 00 00 00    	jae    c0025fe6 <APIC::APIC()+0xce>
c0025f60:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025f68:	83 ec 0c             	sub    esp,0xc
c0025f6b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025f6f:	e8 42 96 fe ff       	call   c000f5b6 <malloc>
c0025f74:	83 c4 10             	add    esp,0x10
c0025f77:	89 c3                	mov    ebx,eax
c0025f79:	83 ec 0c             	sub    esp,0xc
c0025f7c:	53                   	push   ebx
c0025f7d:	e8 6e ff ff ff       	call   c0025ef0 <IOAPIC::IOAPIC()>
c0025f82:	83 c4 10             	add    esp,0x10
c0025f85:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025f89:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025f8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025f92:	89 14 85 c0 30 03 c0 	mov    DWORD PTR [eax*4-0x3ffccf40],edx
c0025f99:	a1 a0 30 03 c0       	mov    eax,ds:0xc00330a0
c0025f9e:	40                   	inc    eax
c0025f9f:	a3 a0 30 03 c0       	mov    ds:0xc00330a0,eax
c0025fa4:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c0025fa9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025faf:	83 ec 08             	sub    esp,0x8
c0025fb2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025fb6:	50                   	push   eax
c0025fb7:	e8 2c da fe ff       	call   c00139e8 <Device::addChild(Device*)>
c0025fbc:	83 c4 10             	add    esp,0x10
c0025fbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025fc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fc5:	83 c0 08             	add    eax,0x8
c0025fc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fca:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025fcf:	6a 00                	push   0x0
c0025fd1:	6a 00                	push   0x0
c0025fd3:	52                   	push   edx
c0025fd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025fd8:	ff d0                	call   eax
c0025fda:	83 c4 10             	add    esp,0x10
c0025fdd:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025fe1:	e9 6b ff ff ff       	jmp    c0025f51 <APIC::APIC()+0x39>
c0025fe6:	c6 05 e0 30 03 c0 01 	mov    BYTE PTR ds:0xc00330e0,0x1
c0025fed:	90                   	nop
c0025fee:	83 c4 18             	add    esp,0x18
c0025ff1:	5b                   	pop    ebx
c0025ff2:	c3                   	ret    
c0025ff3:	90                   	nop

c0025ff4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025ff4:	55                   	push   ebp
c0025ff5:	89 e5                	mov    ebp,esp
c0025ff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ffa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026000:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026003:	72 1d                	jb     c0026022 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026008:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002600e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026011:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0026017:	01 d0                	add    eax,edx
c0026019:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002601c:	73 04                	jae    c0026022 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002601e:	b0 01                	mov    al,0x1
c0026020:	eb 02                	jmp    c0026024 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026022:	b0 00                	mov    al,0x0
c0026024:	5d                   	pop    ebp
c0026025:	c3                   	ret    

c0026026 <IOAPIC::read(int)>:
c0026026:	55                   	push   ebp
c0026027:	89 e5                	mov    ebp,esp
c0026029:	83 ec 10             	sub    esp,0x10
c002602c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002602f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026035:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026038:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002603b:	0f b6 d0             	movzx  edx,al
c002603e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026041:	89 10                	mov    DWORD PTR [eax],edx
c0026043:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026046:	83 c0 10             	add    eax,0x10
c0026049:	8b 00                	mov    eax,DWORD PTR [eax]
c002604b:	c9                   	leave  
c002604c:	c3                   	ret    
c002604d:	90                   	nop

c002604e <IOAPIC::open(int, int, void*)>:
c002604e:	55                   	push   ebp
c002604f:	89 e5                	mov    ebp,esp
c0026051:	57                   	push   edi
c0026052:	56                   	push   esi
c0026053:	53                   	push   ebx
c0026054:	83 ec 0c             	sub    esp,0xc
c0026057:	83 ec 0c             	sub    esp,0xc
c002605a:	68 03 d9 02 c0       	push   0xc002d903
c002605f:	e8 4b c5 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0026064:	83 c4 10             	add    esp,0x10
c0026067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002606a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002606d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026073:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026076:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002607c:	8b 14 85 00 17 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce900]
c0026083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026086:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002608c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002608f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026095:	8b 14 85 80 17 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce880]
c002609c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002609f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00260a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00260a8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00260ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00260b1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260b7:	0f b6 f8             	movzx  edi,al
c00260ba:	89 d0                	mov    eax,edx
c00260bc:	ba 00 00 00 00       	mov    edx,0x0
c00260c1:	89 c1                	mov    ecx,eax
c00260c3:	80 e5 ff             	and    ch,0xff
c00260c6:	89 cb                	mov    ebx,ecx
c00260c8:	0f b6 f2             	movzx  esi,dl
c00260cb:	89 d8                	mov    eax,ebx
c00260cd:	89 f2                	mov    edx,esi
c00260cf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00260d2:	8d 5f 08             	lea    ebx,[edi+0x8]
c00260d5:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00260d9:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00260dd:	83 e0 00             	and    eax,0x0
c00260e0:	09 d0                	or     eax,edx
c00260e2:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00260e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00260e9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260ef:	8d 50 01             	lea    edx,[eax+0x1]
c00260f2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00260f5:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00260fb:	0f b6 d0             	movzx  edx,al
c00260fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026101:	83 c2 08             	add    edx,0x8
c0026104:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026108:	0f b6 c9             	movzx  ecx,cl
c002610b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026111:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026115:	83 ec 08             	sub    esp,0x8
c0026118:	6a 01                	push   0x1
c002611a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002611d:	e8 04 ff ff ff       	call   c0026026 <IOAPIC::read(int)>
c0026122:	83 c4 10             	add    esp,0x10
c0026125:	c1 f8 10             	sar    eax,0x10
c0026128:	0f b6 c0             	movzx  eax,al
c002612b:	8d 50 01             	lea    edx,[eax+0x1]
c002612e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026131:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0026137:	b8 00 00 00 00       	mov    eax,0x0
c002613c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002613f:	5b                   	pop    ebx
c0026140:	5e                   	pop    esi
c0026141:	5f                   	pop    edi
c0026142:	5d                   	pop    ebp
c0026143:	c3                   	ret    

c0026144 <IOAPIC::write(int, int)>:
c0026144:	55                   	push   ebp
c0026145:	89 e5                	mov    ebp,esp
c0026147:	83 ec 10             	sub    esp,0x10
c002614a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002614d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026153:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026156:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026159:	0f b6 d0             	movzx  edx,al
c002615c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002615f:	89 10                	mov    DWORD PTR [eax],edx
c0026161:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026164:	8d 50 10             	lea    edx,[eax+0x10]
c0026167:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002616a:	89 02                	mov    DWORD PTR [edx],eax
c002616c:	90                   	nop
c002616d:	c9                   	leave  
c002616e:	c3                   	ret    
c002616f:	90                   	nop

c0026170 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0026170:	55                   	push   ebp
c0026171:	89 e5                	mov    ebp,esp
c0026173:	53                   	push   ebx
c0026174:	83 ec 2c             	sub    esp,0x2c
c0026177:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002617a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002617d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0026180:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0026183:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026186:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026189:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002618c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002618f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026192:	88 d8                	mov    al,bl
c0026194:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026197:	88 c8                	mov    al,cl
c0026199:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002619c:	88 d0                	mov    al,dl
c002619e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00261a1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00261a5:	83 c0 08             	add    eax,0x8
c00261a8:	01 c0                	add    eax,eax
c00261aa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00261ad:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00261b1:	83 c0 08             	add    eax,0x8
c00261b4:	01 c0                	add    eax,eax
c00261b6:	40                   	inc    eax
c00261b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00261ba:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00261bd:	50                   	push   eax
c00261be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261c1:	e8 60 fe ff ff       	call   c0026026 <IOAPIC::read(int)>
c00261c6:	83 c4 08             	add    esp,0x8
c00261c9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00261cc:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00261d3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00261d6:	c1 e0 18             	shl    eax,0x18
c00261d9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00261dc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00261df:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00261e2:	52                   	push   edx
c00261e3:	50                   	push   eax
c00261e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261e7:	e8 58 ff ff ff       	call   c0026144 <IOAPIC::write(int, int)>
c00261ec:	83 c4 0c             	add    esp,0xc
c00261ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00261f2:	50                   	push   eax
c00261f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261f6:	e8 2b fe ff ff       	call   c0026026 <IOAPIC::read(int)>
c00261fb:	83 c4 08             	add    esp,0x8
c00261fe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026201:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0026208:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002620f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026216:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002621a:	74 09                	je     c0026225 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002621c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026223:	eb 07                	jmp    c002622c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026225:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002622c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026230:	74 09                	je     c002623b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026232:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026239:	eb 07                	jmp    c0026242 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002623b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026242:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026249:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002624d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0026250:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026253:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026256:	52                   	push   edx
c0026257:	50                   	push   eax
c0026258:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002625b:	e8 e4 fe ff ff       	call   c0026144 <IOAPIC::write(int, int)>
c0026260:	83 c4 0c             	add    esp,0xc
c0026263:	90                   	nop
c0026264:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0026267:	c9                   	leave  
c0026268:	c3                   	ret    
c0026269:	90                   	nop

c002626a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002626a:	55                   	push   ebp
c002626b:	89 e5                	mov    ebp,esp
c002626d:	57                   	push   edi
c002626e:	56                   	push   esi
c002626f:	53                   	push   ebx
c0026270:	83 ec 2c             	sub    esp,0x2c
c0026273:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026276:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026279:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002627d:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0026281:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026285:	74 5a                	je     c00262e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026287:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002628b:	7f 44                	jg     c00262d1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002628d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026290:	05 a0 df 02 c0       	add    eax,0xc002dfa0
c0026295:	8a 00                	mov    al,BYTE PTR [eax]
c0026297:	0f b6 c0             	movzx  eax,al
c002629a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002629d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00262a0:	66 8b 84 00 a0 16 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce960]
c00262a8:	0f b7 c0             	movzx  eax,ax
c00262ab:	83 e0 02             	and    eax,0x2
c00262ae:	85 c0                	test   eax,eax
c00262b0:	74 04                	je     c00262b6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00262b2:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00262b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00262b9:	66 8b 84 00 a0 16 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce960]
c00262c1:	0f b7 c0             	movzx  eax,ax
c00262c4:	83 e0 08             	and    eax,0x8
c00262c7:	85 c0                	test   eax,eax
c00262c9:	74 16                	je     c00262e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00262cb:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00262cf:	eb 10                	jmp    c00262e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00262d1:	83 ec 0c             	sub    esp,0xc
c00262d4:	68 14 d9 02 c0       	push   0xc002d914
c00262d9:	e8 9f 3d ff ff       	call   c001a07d <Krnl::panic(char const*)>
c00262de:	83 c4 10             	add    esp,0x10
c00262e1:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00262e5:	a1 a0 30 03 c0       	mov    eax,ds:0xc00330a0
c00262ea:	83 ec 08             	sub    esp,0x8
c00262ed:	50                   	push   eax
c00262ee:	68 4c d9 02 c0       	push   0xc002d94c
c00262f3:	e8 b7 c2 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00262f8:	83 c4 10             	add    esp,0x10
c00262fb:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026302:	a1 a0 30 03 c0       	mov    eax,ds:0xc00330a0
c0026307:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002630a:	7d 67                	jge    c0026373 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002630c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002630f:	8b 04 85 c0 30 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccf40]
c0026316:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026319:	83 ec 08             	sub    esp,0x8
c002631c:	52                   	push   edx
c002631d:	50                   	push   eax
c002631e:	e8 d1 fc ff ff       	call   c0025ff4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026323:	83 c4 10             	add    esp,0x10
c0026326:	84 c0                	test   al,al
c0026328:	74 44                	je     c002636e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002632a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002632d:	8b 1c 85 c0 30 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccf40]
c0026334:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026338:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002633b:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002633f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026342:	83 c0 20             	add    eax,0x20
c0026345:	0f b6 f0             	movzx  esi,al
c0026348:	b8 00 00 00 00       	mov    eax,0x0
c002634d:	99                   	cdq    
c002634e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026351:	0f b6 c9             	movzx  ecx,cl
c0026354:	83 ec 04             	sub    esp,0x4
c0026357:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002635a:	57                   	push   edi
c002635b:	56                   	push   esi
c002635c:	52                   	push   edx
c002635d:	50                   	push   eax
c002635e:	51                   	push   ecx
c002635f:	53                   	push   ebx
c0026360:	e8 0b fe ff ff       	call   c0026170 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026365:	83 c4 20             	add    esp,0x20
c0026368:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002636c:	eb 05                	jmp    c0026373 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002636e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0026371:	eb 8f                	jmp    c0026302 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026373:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026376:	83 f0 01             	xor    eax,0x1
c0026379:	84 c0                	test   al,al
c002637b:	74 10                	je     c002638d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002637d:	83 ec 0c             	sub    esp,0xc
c0026380:	68 63 d9 02 c0       	push   0xc002d963
c0026385:	e8 f3 3c ff ff       	call   c001a07d <Krnl::panic(char const*)>
c002638a:	83 c4 10             	add    esp,0x10
c002638d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026391:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026398:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002639c:	7f 65                	jg     c0026403 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002639e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263a1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00263a4:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00263ab:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00263ae:	01 ca                	add    edx,ecx
c00263b0:	83 c2 54             	add    edx,0x54
c00263b3:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00263b7:	85 c0                	test   eax,eax
c00263b9:	75 43                	jne    c00263fe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00263bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263be:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00263c1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00263c8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00263cb:	01 ca                	add    edx,ecx
c00263cd:	8d 4a 54             	lea    ecx,[edx+0x54]
c00263d0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00263d3:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00263d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263da:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00263dd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00263e4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00263e7:	01 ca                	add    edx,ecx
c00263e9:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00263ef:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00263f2:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00263f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263f9:	83 e8 20             	sub    eax,0x20
c00263fc:	eb 1a                	jmp    c0026418 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00263fe:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026401:	eb 95                	jmp    c0026398 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026403:	83 ec 0c             	sub    esp,0xc
c0026406:	68 70 d9 02 c0       	push   0xc002d970
c002640b:	e8 6d 3c ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0026410:	83 c4 10             	add    esp,0x10
c0026413:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026418:	8d 65 f4             	lea    esp,[ebp-0xc]
c002641b:	5b                   	pop    ebx
c002641c:	5e                   	pop    esi
c002641d:	5f                   	pop    edi
c002641e:	5d                   	pop    ebp
c002641f:	c3                   	ret    

c0026420 <PIC::disable()>:
c0026420:	55                   	push   ebp
c0026421:	89 e5                	mov    ebp,esp
c0026423:	83 ec 10             	sub    esp,0x10
c0026426:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002642c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026430:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026433:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026437:	ee                   	out    dx,al
c0026438:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002643e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026442:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026445:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026449:	ee                   	out    dx,al
c002644a:	90                   	nop
c002644b:	c9                   	leave  
c002644c:	c3                   	ret    
c002644d:	90                   	nop

c002644e <PIC::close(int, int, void*)>:
c002644e:	55                   	push   ebp
c002644f:	89 e5                	mov    ebp,esp
c0026451:	83 ec 08             	sub    esp,0x8
c0026454:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026457:	8b 00                	mov    eax,DWORD PTR [eax]
c0026459:	83 c0 3c             	add    eax,0x3c
c002645c:	8b 00                	mov    eax,DWORD PTR [eax]
c002645e:	83 ec 0c             	sub    esp,0xc
c0026461:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026464:	ff d0                	call   eax
c0026466:	83 c4 10             	add    esp,0x10
c0026469:	b8 00 00 00 00       	mov    eax,0x0
c002646e:	c9                   	leave  
c002646f:	c3                   	ret    

c0026470 <PIC::PIC()>:
c0026470:	83 ec 0c             	sub    esp,0xc
c0026473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026477:	83 ec 08             	sub    esp,0x8
c002647a:	68 1c da 02 c0       	push   0xc002da1c
c002647f:	50                   	push   eax
c0026480:	e8 e1 de fe ff       	call   c0014366 <InterruptController::InterruptController(char const*)>
c0026485:	83 c4 10             	add    esp,0x10
c0026488:	ba 48 da 02 c0       	mov    edx,0xc002da48
c002648d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026491:	89 10                	mov    DWORD PTR [eax],edx
c0026493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026497:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002649d:	0f b6 d0             	movzx  edx,al
c00264a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264a4:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00264ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00264b5:	0f b6 d0             	movzx  edx,al
c00264b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264bc:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00264c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00264cb:	8d 50 01             	lea    edx,[eax+0x1]
c00264ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00264d8:	0f b6 d0             	movzx  edx,al
c00264db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00264e3:	83 e1 3f             	and    ecx,0x3f
c00264e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00264ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00264f4:	0f b6 d0             	movzx  edx,al
c00264f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264fb:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026506:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002650c:	0f b6 d0             	movzx  edx,al
c002650f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026513:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002651c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026522:	8d 50 01             	lea    edx,[eax+0x1]
c0026525:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026529:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002652f:	0f b6 d0             	movzx  edx,al
c0026532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026536:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002653a:	83 e1 3f             	and    ecx,0x3f
c002653d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026541:	90                   	nop
c0026542:	83 c4 0c             	add    esp,0xc
c0026545:	c3                   	ret    

c0026546 <PIC::ioWait()>:
c0026546:	eb 00                	jmp    c0026548 <PIC::ioWait()+0x2>
c0026548:	eb 00                	jmp    c002654a <PIC::ioWait()+0x4>
c002654a:	90                   	nop
c002654b:	c3                   	ret    

c002654c <PIC::getIRQReg(int)>:
c002654c:	55                   	push   ebp
c002654d:	89 e5                	mov    ebp,esp
c002654f:	83 ec 10             	sub    esp,0x10
c0026552:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026555:	0f b6 c0             	movzx  eax,al
c0026558:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002655e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026561:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026564:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026568:	ee                   	out    dx,al
c0026569:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002656c:	0f b6 c0             	movzx  eax,al
c002656f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026575:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026578:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002657b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002657f:	ee                   	out    dx,al
c0026580:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026586:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002658a:	89 c2                	mov    edx,eax
c002658c:	ec                   	in     al,dx
c002658d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026590:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026593:	0f b6 c0             	movzx  eax,al
c0026596:	c1 e0 08             	shl    eax,0x8
c0026599:	89 c1                	mov    ecx,eax
c002659b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00265a1:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00265a5:	89 c2                	mov    edx,eax
c00265a7:	ec                   	in     al,dx
c00265a8:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00265ab:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00265ae:	0f b6 c0             	movzx  eax,al
c00265b1:	09 c8                	or     eax,ecx
c00265b3:	c9                   	leave  
c00265b4:	c3                   	ret    
c00265b5:	90                   	nop

c00265b6 <PIC::eoi(unsigned char)>:
c00265b6:	55                   	push   ebp
c00265b7:	89 e5                	mov    ebp,esp
c00265b9:	83 ec 14             	sub    esp,0x14
c00265bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265bf:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00265c2:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00265c6:	75 1e                	jne    c00265e6 <PIC::eoi(unsigned char)+0x30>
c00265c8:	6a 0b                	push   0xb
c00265ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265cd:	e8 7a ff ff ff       	call   c002654c <PIC::getIRQReg(int)>
c00265d2:	83 c4 08             	add    esp,0x8
c00265d5:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00265d9:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00265dd:	25 80 00 00 00       	and    eax,0x80
c00265e2:	85 c0                	test   eax,eax
c00265e4:	74 5f                	je     c0026645 <PIC::eoi(unsigned char)+0x8f>
c00265e6:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00265ea:	75 2d                	jne    c0026619 <PIC::eoi(unsigned char)+0x63>
c00265ec:	6a 0b                	push   0xb
c00265ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265f1:	e8 56 ff ff ff       	call   c002654c <PIC::getIRQReg(int)>
c00265f6:	83 c4 08             	add    esp,0x8
c00265f9:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00265fd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026600:	66 85 c0             	test   ax,ax
c0026603:	78 14                	js     c0026619 <PIC::eoi(unsigned char)+0x63>
c0026605:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002660b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002660f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026612:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026616:	ee                   	out    dx,al
c0026617:	eb 2d                	jmp    c0026646 <PIC::eoi(unsigned char)+0x90>
c0026619:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002661d:	76 12                	jbe    c0026631 <PIC::eoi(unsigned char)+0x7b>
c002661f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026625:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026629:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002662c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026630:	ee                   	out    dx,al
c0026631:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026637:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002663b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002663e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026642:	ee                   	out    dx,al
c0026643:	eb 01                	jmp    c0026646 <PIC::eoi(unsigned char)+0x90>
c0026645:	90                   	nop
c0026646:	c9                   	leave  
c0026647:	c3                   	ret    

c0026648 <PIC::remap()>:
c0026648:	55                   	push   ebp
c0026649:	89 e5                	mov    ebp,esp
c002664b:	83 ec 48             	sub    esp,0x48
c002664e:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026655:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002665c:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026662:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026665:	89 c2                	mov    edx,eax
c0026667:	ec                   	in     al,dx
c0026668:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002666b:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002666e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026671:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026677:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002667a:	89 c2                	mov    edx,eax
c002667c:	ec                   	in     al,dx
c002667d:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026680:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026683:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026686:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002668c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026690:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026693:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026696:	ee                   	out    dx,al
c0026697:	83 ec 0c             	sub    esp,0xc
c002669a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002669d:	e8 a4 fe ff ff       	call   c0026546 <PIC::ioWait()>
c00266a2:	83 c4 10             	add    esp,0x10
c00266a5:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00266ab:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00266af:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00266b2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00266b5:	ee                   	out    dx,al
c00266b6:	83 ec 0c             	sub    esp,0xc
c00266b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266bc:	e8 85 fe ff ff       	call   c0026546 <PIC::ioWait()>
c00266c1:	83 c4 10             	add    esp,0x10
c00266c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00266c7:	0f b6 c0             	movzx  eax,al
c00266ca:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00266d0:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00266d3:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00266d6:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00266d9:	ee                   	out    dx,al
c00266da:	83 ec 0c             	sub    esp,0xc
c00266dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266e0:	e8 61 fe ff ff       	call   c0026546 <PIC::ioWait()>
c00266e5:	83 c4 10             	add    esp,0x10
c00266e8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00266eb:	0f b6 c0             	movzx  eax,al
c00266ee:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00266f4:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00266f7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00266fa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00266fd:	ee                   	out    dx,al
c00266fe:	83 ec 0c             	sub    esp,0xc
c0026701:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026704:	e8 3d fe ff ff       	call   c0026546 <PIC::ioWait()>
c0026709:	83 c4 10             	add    esp,0x10
c002670c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026712:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026716:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026719:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002671c:	ee                   	out    dx,al
c002671d:	83 ec 0c             	sub    esp,0xc
c0026720:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026723:	e8 1e fe ff ff       	call   c0026546 <PIC::ioWait()>
c0026728:	83 c4 10             	add    esp,0x10
c002672b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026731:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026735:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026738:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002673b:	ee                   	out    dx,al
c002673c:	83 ec 0c             	sub    esp,0xc
c002673f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026742:	e8 ff fd ff ff       	call   c0026546 <PIC::ioWait()>
c0026747:	83 c4 10             	add    esp,0x10
c002674a:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026750:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026754:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026757:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002675a:	ee                   	out    dx,al
c002675b:	83 ec 0c             	sub    esp,0xc
c002675e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026761:	e8 e0 fd ff ff       	call   c0026546 <PIC::ioWait()>
c0026766:	83 c4 10             	add    esp,0x10
c0026769:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002676f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026773:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026776:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026779:	ee                   	out    dx,al
c002677a:	83 ec 0c             	sub    esp,0xc
c002677d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026780:	e8 c1 fd ff ff       	call   c0026546 <PIC::ioWait()>
c0026785:	83 c4 10             	add    esp,0x10
c0026788:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002678c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026792:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026795:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026798:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002679b:	ee                   	out    dx,al
c002679c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00267a0:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00267a6:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00267a9:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00267ac:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00267af:	ee                   	out    dx,al
c00267b0:	90                   	nop
c00267b1:	c9                   	leave  
c00267b2:	c3                   	ret    
c00267b3:	90                   	nop

c00267b4 <PIC::open(int, int, void*)>:
c00267b4:	55                   	push   ebp
c00267b5:	89 e5                	mov    ebp,esp
c00267b7:	83 ec 18             	sub    esp,0x18
c00267ba:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00267c0:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00267c4:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00267c7:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00267cb:	ee                   	out    dx,al
c00267cc:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00267d2:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00267d6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00267d9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00267dd:	ee                   	out    dx,al
c00267de:	83 ec 0c             	sub    esp,0xc
c00267e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00267e4:	e8 5f fe ff ff       	call   c0026648 <PIC::remap()>
c00267e9:	83 c4 10             	add    esp,0x10
c00267ec:	b8 00 00 00 00       	mov    eax,0x0
c00267f1:	c9                   	leave  
c00267f2:	c3                   	ret    
c00267f3:	90                   	nop

c00267f4 <APICTimer::close(int, int, void*)>:
c00267f4:	b8 00 00 00 00       	mov    eax,0x0
c00267f9:	c3                   	ret    

c00267fa <apicTimerHandler(regs*, void*)>:
c00267fa:	83 ec 0c             	sub    esp,0xc
c00267fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026801:	8b 00                	mov    eax,DWORD PTR [eax]
c0026803:	99                   	cdq    
c0026804:	52                   	push   edx
c0026805:	50                   	push   eax
c0026806:	6a 00                	push   0x0
c0026808:	68 00 ca 9a 3b       	push   0x3b9aca00
c002680d:	e8 92 07 00 00       	call   c0026fa4 <__udivdi3>
c0026812:	83 c4 10             	add    esp,0x10
c0026815:	83 ec 08             	sub    esp,0x8
c0026818:	52                   	push   edx
c0026819:	50                   	push   eax
c002681a:	e8 b6 fc fe ff       	call   c00164d5 <timerHandler(unsigned long long)>
c002681f:	83 c4 10             	add    esp,0x10
c0026822:	90                   	nop
c0026823:	83 c4 0c             	add    esp,0xc
c0026826:	c3                   	ret    
c0026827:	90                   	nop

c0026828 <APICTimer::write(int)>:
c0026828:	53                   	push   ebx
c0026829:	83 ec 28             	sub    esp,0x28
c002682c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026830:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026834:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002683a:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c002683f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026845:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002684b:	83 ec 0c             	sub    esp,0xc
c002684e:	50                   	push   eax
c002684f:	e8 de f4 ff ff       	call   c0025d32 <APIC::getBase()>
c0026854:	83 c4 10             	add    esp,0x10
c0026857:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002685b:	a1 b0 f3 02 c0       	mov    eax,ds:0xc002f3b0
c0026860:	8b 15 b4 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3b4
c0026866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002686a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002686e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026872:	05 e0 03 00 00       	add    eax,0x3e0
c0026877:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002687d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026881:	05 80 03 00 00       	add    eax,0x380
c0026886:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002688c:	fb                   	sti    
c002688d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026891:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026895:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002689a:	83 d2 00             	adc    edx,0x0
c002689d:	89 c1                	mov    ecx,eax
c002689f:	89 d3                	mov    ebx,edx
c00268a1:	a1 b0 f3 02 c0       	mov    eax,ds:0xc002f3b0
c00268a6:	8b 15 b4 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3b4
c00268ac:	39 c8                	cmp    eax,ecx
c00268ae:	89 d0                	mov    eax,edx
c00268b0:	19 d8                	sbb    eax,ebx
c00268b2:	73 02                	jae    c00268b6 <APICTimer::write(int)+0x8e>
c00268b4:	eb d7                	jmp    c002688d <APICTimer::write(int)+0x65>
c00268b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00268ba:	05 20 03 00 00       	add    eax,0x320
c00268bf:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00268c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00268c9:	05 90 03 00 00       	add    eax,0x390
c00268ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00268d0:	f7 d0                	not    eax
c00268d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268d6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00268da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00268de:	ba 00 00 00 00       	mov    edx,0x0
c00268e3:	f7 f3                	div    ebx
c00268e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00268e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00268ed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00268f3:	0d 00 00 02 00       	or     eax,0x20000
c00268f8:	89 c2                	mov    edx,eax
c00268fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00268fe:	05 20 03 00 00       	add    eax,0x320
c0026903:	89 10                	mov    DWORD PTR [eax],edx
c0026905:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026909:	05 e0 03 00 00       	add    eax,0x3e0
c002690e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026914:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026918:	05 80 03 00 00       	add    eax,0x380
c002691d:	89 c2                	mov    edx,eax
c002691f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026923:	89 02                	mov    DWORD PTR [edx],eax
c0026925:	90                   	nop
c0026926:	83 c4 28             	add    esp,0x28
c0026929:	5b                   	pop    ebx
c002692a:	c3                   	ret    
c002692b:	90                   	nop

c002692c <APICTimer::open(int, int, void*)>:
c002692c:	57                   	push   edi
c002692d:	56                   	push   esi
c002692e:	53                   	push   ebx
c002692f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026933:	8b 00                	mov    eax,DWORD PTR [eax]
c0026935:	83 c0 24             	add    eax,0x24
c0026938:	8b 00                	mov    eax,DWORD PTR [eax]
c002693a:	83 ec 08             	sub    esp,0x8
c002693d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026941:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026945:	ff d0                	call   eax
c0026947:	83 c4 10             	add    esp,0x10
c002694a:	a1 48 ed 02 c0       	mov    eax,ds:0xc002ed48
c002694f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026955:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002695b:	83 ec 0c             	sub    esp,0xc
c002695e:	50                   	push   eax
c002695f:	e8 ce f3 ff ff       	call   c0025d32 <APIC::getBase()>
c0026964:	83 c4 10             	add    esp,0x10
c0026967:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002696d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026971:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026977:	0f b6 f8             	movzx  edi,al
c002697a:	89 d0                	mov    eax,edx
c002697c:	ba 00 00 00 00       	mov    edx,0x0
c0026981:	89 c1                	mov    ecx,eax
c0026983:	80 e5 ff             	and    ch,0xff
c0026986:	89 cb                	mov    ebx,ecx
c0026988:	0f b6 f2             	movzx  esi,dl
c002698b:	89 d8                	mov    eax,ebx
c002698d:	89 f2                	mov    edx,esi
c002698f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026993:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026996:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002699a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002699e:	83 e0 00             	and    eax,0x0
c00269a1:	09 d0                	or     eax,edx
c00269a3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00269a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269ab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00269b1:	8d 50 01             	lea    edx,[eax+0x1]
c00269b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00269b8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00269be:	0f b6 d0             	movzx  edx,al
c00269c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269c5:	83 c2 08             	add    edx,0x8
c00269c8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00269cc:	0f b6 c9             	movzx  ecx,cl
c00269cf:	81 c9 00 00 01 00    	or     ecx,0x10000
c00269d5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00269d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00269e1:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00269e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00269ef:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00269f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00269f9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00269ff:	83 ec 0c             	sub    esp,0xc
c0026a02:	51                   	push   ecx
c0026a03:	6a 01                	push   0x1
c0026a05:	68 fa 67 02 c0       	push   0xc00267fa
c0026a0a:	52                   	push   edx
c0026a0b:	50                   	push   eax
c0026a0c:	e8 4f cf fe ff       	call   c0013960 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026a11:	83 c4 20             	add    esp,0x20
c0026a14:	89 c2                	mov    edx,eax
c0026a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a1a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026a20:	b8 00 00 00 00       	mov    eax,0x0
c0026a25:	5b                   	pop    ebx
c0026a26:	5e                   	pop    esi
c0026a27:	5f                   	pop    edi
c0026a28:	c3                   	ret    
c0026a29:	90                   	nop

c0026a2a <APICTimer::APICTimer()>:
c0026a2a:	83 ec 0c             	sub    esp,0xc
c0026a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a31:	83 ec 08             	sub    esp,0x8
c0026a34:	68 88 da 02 c0       	push   0xc002da88
c0026a39:	50                   	push   eax
c0026a3a:	e8 07 fa fe ff       	call   c0016446 <Timer::Timer(char const*)>
c0026a3f:	83 c4 10             	add    esp,0x10
c0026a42:	ba 9c da 02 c0       	mov    edx,0xc002da9c
c0026a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a4b:	89 10                	mov    DWORD PTR [eax],edx
c0026a4d:	90                   	nop
c0026a4e:	83 c4 0c             	add    esp,0xc
c0026a51:	c3                   	ret    

c0026a52 <PIT::write(int)>:
c0026a52:	83 ec 10             	sub    esp,0x10
c0026a55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a59:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026a5d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026a63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026a67:	a3 e4 30 03 c0       	mov    ds:0xc00330e4,eax
c0026a6c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026a71:	99                   	cdq    
c0026a72:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026a76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026a7a:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026a81:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026a86:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026a8a:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026a8f:	ee                   	out    dx,al
c0026a90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026a94:	0f b6 c0             	movzx  eax,al
c0026a97:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026a9e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026aa2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026aa6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026aab:	ee                   	out    dx,al
c0026aac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026ab0:	c1 f8 08             	sar    eax,0x8
c0026ab3:	0f b6 c0             	movzx  eax,al
c0026ab6:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026abd:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026ac1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026ac5:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026aca:	ee                   	out    dx,al
c0026acb:	90                   	nop
c0026acc:	83 c4 10             	add    esp,0x10
c0026acf:	c3                   	ret    

c0026ad0 <pitHandler(regs*, void*)>:
c0026ad0:	83 ec 0c             	sub    esp,0xc
c0026ad3:	a1 e4 30 03 c0       	mov    eax,ds:0xc00330e4
c0026ad8:	99                   	cdq    
c0026ad9:	52                   	push   edx
c0026ada:	50                   	push   eax
c0026adb:	6a 00                	push   0x0
c0026add:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026ae2:	e8 bd 04 00 00       	call   c0026fa4 <__udivdi3>
c0026ae7:	83 c4 10             	add    esp,0x10
c0026aea:	83 ec 08             	sub    esp,0x8
c0026aed:	52                   	push   edx
c0026aee:	50                   	push   eax
c0026aef:	e8 e1 f9 fe ff       	call   c00164d5 <timerHandler(unsigned long long)>
c0026af4:	83 c4 10             	add    esp,0x10
c0026af7:	90                   	nop
c0026af8:	83 c4 0c             	add    esp,0xc
c0026afb:	c3                   	ret    

c0026afc <PIT::open(int, int, void*)>:
c0026afc:	83 ec 0c             	sub    esp,0xc
c0026aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b03:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b05:	83 c0 24             	add    eax,0x24
c0026b08:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b0a:	83 ec 08             	sub    esp,0x8
c0026b0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b15:	ff d0                	call   eax
c0026b17:	83 c4 10             	add    esp,0x10
c0026b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b1e:	83 ec 0c             	sub    esp,0xc
c0026b21:	6a 00                	push   0x0
c0026b23:	6a 01                	push   0x1
c0026b25:	68 d0 6a 02 c0       	push   0xc0026ad0
c0026b2a:	6a 00                	push   0x0
c0026b2c:	50                   	push   eax
c0026b2d:	e8 2e ce fe ff       	call   c0013960 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026b32:	83 c4 20             	add    esp,0x20
c0026b35:	89 c2                	mov    edx,eax
c0026b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b3b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026b41:	b8 00 00 00 00       	mov    eax,0x0
c0026b46:	83 c4 0c             	add    esp,0xc
c0026b49:	c3                   	ret    

c0026b4a <PIT::close(int, int, void*)>:
c0026b4a:	83 ec 0c             	sub    esp,0xc
c0026b4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b51:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b5f:	6a 01                	push   0x1
c0026b61:	68 d0 6a 02 c0       	push   0xc0026ad0
c0026b66:	6a 00                	push   0x0
c0026b68:	50                   	push   eax
c0026b69:	e8 3c ce fe ff       	call   c00139aa <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026b6e:	83 c4 10             	add    esp,0x10
c0026b71:	b8 00 00 00 00       	mov    eax,0x0
c0026b76:	83 c4 0c             	add    esp,0xc
c0026b79:	c3                   	ret    

c0026b7a <PIT::PIT()>:
c0026b7a:	83 ec 0c             	sub    esp,0xc
c0026b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b81:	83 ec 08             	sub    esp,0x8
c0026b84:	68 c4 da 02 c0       	push   0xc002dac4
c0026b89:	50                   	push   eax
c0026b8a:	e8 b7 f8 fe ff       	call   c0016446 <Timer::Timer(char const*)>
c0026b8f:	83 c4 10             	add    esp,0x10
c0026b92:	ba ec da 02 c0       	mov    edx,0xc002daec
c0026b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b9b:	89 10                	mov    DWORD PTR [eax],edx
c0026b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026ba7:	0f b6 d0             	movzx  edx,al
c0026baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bae:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bb9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026bbf:	0f b6 d0             	movzx  edx,al
c0026bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bc6:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bcf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026bd5:	8d 50 01             	lea    edx,[eax+0x1]
c0026bd8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026bdc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026be2:	0f b6 d0             	movzx  edx,al
c0026be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026be9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026bed:	83 e1 3f             	and    ecx,0x3f
c0026bf0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026bf4:	90                   	nop
c0026bf5:	83 c4 0c             	add    esp,0xc
c0026bf8:	c3                   	ret    
c0026bf9:	66 90                	xchg   ax,ax
c0026bfb:	66 90                	xchg   ax,ax
c0026bfd:	66 90                	xchg   ax,ax
c0026bff:	90                   	nop

c0026c00 <avxDetect>:
c0026c00:	b8 00 00 00 00       	mov    eax,0x0
c0026c05:	c3                   	ret    

c0026c06 <avxSave>:
c0026c06:	c3                   	ret    

c0026c07 <avxLoad>:
c0026c07:	c3                   	ret    

c0026c08 <avxInit>:
c0026c08:	c3                   	ret    

c0026c09 <avxClose>:
c0026c09:	c3                   	ret    

c0026c0a <wouldSheSayYes>:
c0026c0a:	c3                   	ret    
c0026c0b:	49                   	dec    ecx
c0026c0c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026c10:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026c14:	75 20                	jne    c0026c36 <sseDetect.noSSE+0x1>
c0026c16:	4e                   	dec    esi
c0026c17:	79 61                	jns    c0026c7a <x87Detect+0x14>
c0026c19:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026c1e:	66 90                	xchg   ax,ax

c0026c20 <absolutelyNoChanceInHell>:
c0026c20:	b8 01 00 00 00       	mov    eax,0x1
c0026c25:	0f a2                	cpuid  
c0026c27:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026c2d:	74 06                	je     c0026c35 <sseDetect.noSSE>
c0026c2f:	b8 01 00 00 00       	mov    eax,0x1
c0026c34:	c3                   	ret    

c0026c35 <sseDetect.noSSE>:
c0026c35:	31 c0                	xor    eax,eax
c0026c37:	c3                   	ret    

c0026c38 <sseSave>:
c0026c38:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026c3d:	c3                   	ret    

c0026c3e <sseLoad>:
c0026c3e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026c43:	c3                   	ret    

c0026c44 <sseInit>:
c0026c44:	e8 49 00 00 00       	call   c0026c92 <x87Init>
c0026c49:	0f 20 e0             	mov    eax,cr4
c0026c4c:	66 0d 00 06          	or     ax,0x600
c0026c50:	0f 22 e0             	mov    cr4,eax
c0026c53:	c3                   	ret    

c0026c54 <sseClose>:
c0026c54:	c3                   	ret    
c0026c55:	66 90                	xchg   ax,ax
c0026c57:	66 90                	xchg   ax,ax
c0026c59:	66 90                	xchg   ax,ax
c0026c5b:	66 90                	xchg   ax,ax
c0026c5d:	66 90                	xchg   ax,ax
c0026c5f:	90                   	nop

c0026c60 <value_37F>:
c0026c60:	7f 03                	jg     c0026c65 <value_37A+0x1>

c0026c62 <value_37E>:
c0026c62:	7e 03                	jle    c0026c67 <x87Detect+0x1>

c0026c64 <value_37A>:
c0026c64:	7a 03                	jp     c0026c69 <x87Detect+0x3>

c0026c66 <x87Detect>:
c0026c66:	b8 01 00 00 00       	mov    eax,0x1
c0026c6b:	0f a2                	cpuid  
c0026c6d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026c73:	74 06                	je     c0026c7b <x87Detect.nox87>
c0026c75:	b8 01 00 00 00       	mov    eax,0x1
c0026c7a:	c3                   	ret    

c0026c7b <x87Detect.nox87>:
c0026c7b:	b8 00 00 00 00       	mov    eax,0x0
c0026c80:	c3                   	ret    

c0026c81 <x87Save>:
c0026c81:	55                   	push   ebp
c0026c82:	89 e5                	mov    ebp,esp
c0026c84:	9b dd 75 08          	fsave  [ebp+0x8]
c0026c88:	c9                   	leave  
c0026c89:	c3                   	ret    

c0026c8a <x87Load>:
c0026c8a:	55                   	push   ebp
c0026c8b:	89 e5                	mov    ebp,esp
c0026c8d:	dd 65 08             	frstor [ebp+0x8]
c0026c90:	c9                   	leave  
c0026c91:	c3                   	ret    

c0026c92 <x87Init>:
c0026c92:	9b db e3             	finit  
c0026c95:	0f 20 c0             	mov    eax,cr0
c0026c98:	66 25 fb ff          	and    ax,0xfffb
c0026c9c:	66 0d 22 00          	or     ax,0x22
c0026ca0:	0f 22 c0             	mov    cr0,eax
c0026ca3:	0f 06                	clts   
c0026ca5:	d9 2d 64 6c 02 c0    	fldcw  WORD PTR ds:0xc0026c64
c0026cab:	c3                   	ret    

c0026cac <x87Close>:
c0026cac:	c3                   	ret    
c0026cad:	66 90                	xchg   ax,ax
c0026caf:	90                   	nop

c0026cb0 <__do_global_ctors_aux>:
c0026cb0:	a1 e8 98 02 c0       	mov    eax,ds:0xc00298e8
c0026cb5:	83 f8 ff             	cmp    eax,0xffffffff
c0026cb8:	74 1a                	je     c0026cd4 <__do_global_ctors_aux+0x24>
c0026cba:	55                   	push   ebp
c0026cbb:	89 e5                	mov    ebp,esp
c0026cbd:	53                   	push   ebx
c0026cbe:	52                   	push   edx
c0026cbf:	bb e8 98 02 c0       	mov    ebx,0xc00298e8
c0026cc4:	ff d0                	call   eax
c0026cc6:	83 eb 04             	sub    ebx,0x4
c0026cc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0026cce:	75 f4                	jne    c0026cc4 <__do_global_ctors_aux+0x14>
c0026cd0:	58                   	pop    eax
c0026cd1:	5b                   	pop    ebx
c0026cd2:	5d                   	pop    ebp
c0026cd3:	c3                   	ret    
c0026cd4:	c3                   	ret    
c0026cd5:	66 90                	xchg   ax,ax
c0026cd7:	90                   	nop

c0026cd8 <__divdi3>:
c0026cd8:	55                   	push   ebp
c0026cd9:	57                   	push   edi
c0026cda:	56                   	push   esi
c0026cdb:	53                   	push   ebx
c0026cdc:	83 ec 1c             	sub    esp,0x1c
c0026cdf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026ce3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026ce7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026cea:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026cee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026cf2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026cf6:	85 db                	test   ebx,ebx
c0026cf8:	0f 88 8e 00 00 00    	js     c0026d8c <__divdi3+0xb4>
c0026cfe:	89 dd                	mov    ebp,ebx
c0026d00:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026d08:	89 d3                	mov    ebx,edx
c0026d0a:	85 d2                	test   edx,edx
c0026d0c:	79 0d                	jns    c0026d1b <__divdi3+0x43>
c0026d0e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026d12:	f7 d8                	neg    eax
c0026d14:	83 d2 00             	adc    edx,0x0
c0026d17:	f7 da                	neg    edx
c0026d19:	89 d3                	mov    ebx,edx
c0026d1b:	89 c7                	mov    edi,eax
c0026d1d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026d20:	85 db                	test   ebx,ebx
c0026d22:	75 48                	jne    c0026d6c <__divdi3+0x94>
c0026d24:	39 ef                	cmp    edi,ebp
c0026d26:	76 24                	jbe    c0026d4c <__divdi3+0x74>
c0026d28:	89 ea                	mov    edx,ebp
c0026d2a:	f7 f7                	div    edi
c0026d2c:	89 c1                	mov    ecx,eax
c0026d2e:	31 f6                	xor    esi,esi
c0026d30:	89 c8                	mov    eax,ecx
c0026d32:	89 f2                	mov    edx,esi
c0026d34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026d38:	85 c9                	test   ecx,ecx
c0026d3a:	74 07                	je     c0026d43 <__divdi3+0x6b>
c0026d3c:	f7 d8                	neg    eax
c0026d3e:	83 d2 00             	adc    edx,0x0
c0026d41:	f7 da                	neg    edx
c0026d43:	83 c4 1c             	add    esp,0x1c
c0026d46:	5b                   	pop    ebx
c0026d47:	5e                   	pop    esi
c0026d48:	5f                   	pop    edi
c0026d49:	5d                   	pop    ebp
c0026d4a:	c3                   	ret    
c0026d4b:	90                   	nop
c0026d4c:	85 ff                	test   edi,edi
c0026d4e:	75 0b                	jne    c0026d5b <__divdi3+0x83>
c0026d50:	b8 01 00 00 00       	mov    eax,0x1
c0026d55:	31 d2                	xor    edx,edx
c0026d57:	f7 f3                	div    ebx
c0026d59:	89 c7                	mov    edi,eax
c0026d5b:	31 d2                	xor    edx,edx
c0026d5d:	89 e8                	mov    eax,ebp
c0026d5f:	f7 f7                	div    edi
c0026d61:	89 c6                	mov    esi,eax
c0026d63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026d66:	f7 f7                	div    edi
c0026d68:	89 c1                	mov    ecx,eax
c0026d6a:	eb c4                	jmp    c0026d30 <__divdi3+0x58>
c0026d6c:	39 eb                	cmp    ebx,ebp
c0026d6e:	77 3c                	ja     c0026dac <__divdi3+0xd4>
c0026d70:	0f bd f3             	bsr    esi,ebx
c0026d73:	83 f6 1f             	xor    esi,0x1f
c0026d76:	75 40                	jne    c0026db8 <__divdi3+0xe0>
c0026d78:	39 eb                	cmp    ebx,ebp
c0026d7a:	72 09                	jb     c0026d85 <__divdi3+0xad>
c0026d7c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026d7f:	0f 87 97 00 00 00    	ja     c0026e1c <__divdi3+0x144>
c0026d85:	b9 01 00 00 00       	mov    ecx,0x1
c0026d8a:	eb a4                	jmp    c0026d30 <__divdi3+0x58>
c0026d8c:	f7 d9                	neg    ecx
c0026d8e:	83 d3 00             	adc    ebx,0x0
c0026d91:	f7 db                	neg    ebx
c0026d93:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026d96:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026d9a:	89 dd                	mov    ebp,ebx
c0026d9c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026da4:	e9 5f ff ff ff       	jmp    c0026d08 <__divdi3+0x30>
c0026da9:	8d 76 00             	lea    esi,[esi+0x0]
c0026dac:	31 f6                	xor    esi,esi
c0026dae:	31 c9                	xor    ecx,ecx
c0026db0:	e9 7b ff ff ff       	jmp    c0026d30 <__divdi3+0x58>
c0026db5:	8d 76 00             	lea    esi,[esi+0x0]
c0026db8:	b8 20 00 00 00       	mov    eax,0x20
c0026dbd:	29 f0                	sub    eax,esi
c0026dbf:	89 f1                	mov    ecx,esi
c0026dc1:	d3 e3                	shl    ebx,cl
c0026dc3:	89 fa                	mov    edx,edi
c0026dc5:	88 c1                	mov    cl,al
c0026dc7:	d3 ea                	shr    edx,cl
c0026dc9:	09 da                	or     edx,ebx
c0026dcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026dcf:	89 f1                	mov    ecx,esi
c0026dd1:	d3 e7                	shl    edi,cl
c0026dd3:	89 eb                	mov    ebx,ebp
c0026dd5:	88 c1                	mov    cl,al
c0026dd7:	d3 eb                	shr    ebx,cl
c0026dd9:	89 f1                	mov    ecx,esi
c0026ddb:	d3 e5                	shl    ebp,cl
c0026ddd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026de0:	88 c1                	mov    cl,al
c0026de2:	d3 ea                	shr    edx,cl
c0026de4:	09 d5                	or     ebp,edx
c0026de6:	89 e8                	mov    eax,ebp
c0026de8:	89 da                	mov    edx,ebx
c0026dea:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026dee:	89 d3                	mov    ebx,edx
c0026df0:	89 c5                	mov    ebp,eax
c0026df2:	f7 e7                	mul    edi
c0026df4:	39 d3                	cmp    ebx,edx
c0026df6:	72 18                	jb     c0026e10 <__divdi3+0x138>
c0026df8:	74 0a                	je     c0026e04 <__divdi3+0x12c>
c0026dfa:	89 e9                	mov    ecx,ebp
c0026dfc:	31 f6                	xor    esi,esi
c0026dfe:	e9 2d ff ff ff       	jmp    c0026d30 <__divdi3+0x58>
c0026e03:	90                   	nop
c0026e04:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026e07:	89 f1                	mov    ecx,esi
c0026e09:	d3 e7                	shl    edi,cl
c0026e0b:	39 c7                	cmp    edi,eax
c0026e0d:	73 eb                	jae    c0026dfa <__divdi3+0x122>
c0026e0f:	90                   	nop
c0026e10:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026e13:	31 f6                	xor    esi,esi
c0026e15:	e9 16 ff ff ff       	jmp    c0026d30 <__divdi3+0x58>
c0026e1a:	66 90                	xchg   ax,ax
c0026e1c:	31 c9                	xor    ecx,ecx
c0026e1e:	e9 0d ff ff ff       	jmp    c0026d30 <__divdi3+0x58>
c0026e23:	90                   	nop

c0026e24 <__moddi3>:
c0026e24:	55                   	push   ebp
c0026e25:	57                   	push   edi
c0026e26:	56                   	push   esi
c0026e27:	53                   	push   ebx
c0026e28:	83 ec 2c             	sub    esp,0x2c
c0026e2b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026e2f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026e33:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026e37:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026e3b:	85 db                	test   ebx,ebx
c0026e3d:	0f 88 85 00 00 00    	js     c0026ec8 <__moddi3+0xa4>
c0026e43:	89 de                	mov    esi,ebx
c0026e45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026e4d:	89 d7                	mov    edi,edx
c0026e4f:	85 d2                	test   edx,edx
c0026e51:	79 09                	jns    c0026e5c <__moddi3+0x38>
c0026e53:	f7 d8                	neg    eax
c0026e55:	83 d2 00             	adc    edx,0x0
c0026e58:	f7 da                	neg    edx
c0026e5a:	89 d7                	mov    edi,edx
c0026e5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026e60:	89 cd                	mov    ebp,ecx
c0026e62:	85 ff                	test   edi,edi
c0026e64:	75 52                	jne    c0026eb8 <__moddi3+0x94>
c0026e66:	89 c3                	mov    ebx,eax
c0026e68:	39 f0                	cmp    eax,esi
c0026e6a:	76 24                	jbe    c0026e90 <__moddi3+0x6c>
c0026e6c:	89 c8                	mov    eax,ecx
c0026e6e:	89 f2                	mov    edx,esi
c0026e70:	f7 f3                	div    ebx
c0026e72:	89 d6                	mov    esi,edx
c0026e74:	89 f0                	mov    eax,esi
c0026e76:	31 d2                	xor    edx,edx
c0026e78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e7c:	85 c9                	test   ecx,ecx
c0026e7e:	74 07                	je     c0026e87 <__moddi3+0x63>
c0026e80:	f7 d8                	neg    eax
c0026e82:	83 d2 00             	adc    edx,0x0
c0026e85:	f7 da                	neg    edx
c0026e87:	83 c4 2c             	add    esp,0x2c
c0026e8a:	5b                   	pop    ebx
c0026e8b:	5e                   	pop    esi
c0026e8c:	5f                   	pop    edi
c0026e8d:	5d                   	pop    ebp
c0026e8e:	c3                   	ret    
c0026e8f:	90                   	nop
c0026e90:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026e94:	85 db                	test   ebx,ebx
c0026e96:	75 0d                	jne    c0026ea5 <__moddi3+0x81>
c0026e98:	b8 01 00 00 00       	mov    eax,0x1
c0026e9d:	31 d2                	xor    edx,edx
c0026e9f:	f7 f7                	div    edi
c0026ea1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026ea5:	89 f0                	mov    eax,esi
c0026ea7:	31 d2                	xor    edx,edx
c0026ea9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026ead:	f7 f7                	div    edi
c0026eaf:	89 e8                	mov    eax,ebp
c0026eb1:	f7 f7                	div    edi
c0026eb3:	89 d6                	mov    esi,edx
c0026eb5:	eb bd                	jmp    c0026e74 <__moddi3+0x50>
c0026eb7:	90                   	nop
c0026eb8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026ebc:	39 f7                	cmp    edi,esi
c0026ebe:	76 20                	jbe    c0026ee0 <__moddi3+0xbc>
c0026ec0:	89 c8                	mov    eax,ecx
c0026ec2:	89 f2                	mov    edx,esi
c0026ec4:	eb b2                	jmp    c0026e78 <__moddi3+0x54>
c0026ec6:	66 90                	xchg   ax,ax
c0026ec8:	f7 d9                	neg    ecx
c0026eca:	83 d3 00             	adc    ebx,0x0
c0026ecd:	f7 db                	neg    ebx
c0026ecf:	89 de                	mov    esi,ebx
c0026ed1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026ed9:	e9 6f ff ff ff       	jmp    c0026e4d <__moddi3+0x29>
c0026ede:	66 90                	xchg   ax,ax
c0026ee0:	0f bd c7             	bsr    eax,edi
c0026ee3:	83 f0 1f             	xor    eax,0x1f
c0026ee6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026eea:	75 24                	jne    c0026f10 <__moddi3+0xec>
c0026eec:	39 f7                	cmp    edi,esi
c0026eee:	72 06                	jb     c0026ef6 <__moddi3+0xd2>
c0026ef0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026ef4:	77 0c                	ja     c0026f02 <__moddi3+0xde>
c0026ef6:	89 e9                	mov    ecx,ebp
c0026ef8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026efc:	19 fe                	sbb    esi,edi
c0026efe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026f02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026f06:	89 f2                	mov    edx,esi
c0026f08:	e9 6b ff ff ff       	jmp    c0026e78 <__moddi3+0x54>
c0026f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0026f10:	b8 20 00 00 00       	mov    eax,0x20
c0026f15:	89 c2                	mov    edx,eax
c0026f17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026f1b:	29 da                	sub    edx,ebx
c0026f1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026f21:	88 d9                	mov    cl,bl
c0026f23:	d3 e7                	shl    edi,cl
c0026f25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026f29:	88 d1                	mov    cl,dl
c0026f2b:	d3 e8                	shr    eax,cl
c0026f2d:	09 c7                	or     edi,eax
c0026f2f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026f33:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026f37:	89 d8                	mov    eax,ebx
c0026f39:	88 d9                	mov    cl,bl
c0026f3b:	d3 e7                	shl    edi,cl
c0026f3d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026f41:	89 f3                	mov    ebx,esi
c0026f43:	88 d1                	mov    cl,dl
c0026f45:	d3 eb                	shr    ebx,cl
c0026f47:	89 c7                	mov    edi,eax
c0026f49:	88 c1                	mov    cl,al
c0026f4b:	d3 e6                	shl    esi,cl
c0026f4d:	89 e8                	mov    eax,ebp
c0026f4f:	88 d1                	mov    cl,dl
c0026f51:	d3 e8                	shr    eax,cl
c0026f53:	09 f0                	or     eax,esi
c0026f55:	89 f9                	mov    ecx,edi
c0026f57:	d3 e5                	shl    ebp,cl
c0026f59:	89 da                	mov    edx,ebx
c0026f5b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026f5f:	89 d3                	mov    ebx,edx
c0026f61:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026f65:	89 c6                	mov    esi,eax
c0026f67:	89 d1                	mov    ecx,edx
c0026f69:	39 d3                	cmp    ebx,edx
c0026f6b:	72 27                	jb     c0026f94 <__moddi3+0x170>
c0026f6d:	74 21                	je     c0026f90 <__moddi3+0x16c>
c0026f6f:	29 f5                	sub    ebp,esi
c0026f71:	19 cb                	sbb    ebx,ecx
c0026f73:	89 de                	mov    esi,ebx
c0026f75:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026f79:	d3 e6                	shl    esi,cl
c0026f7b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026f7f:	89 f9                	mov    ecx,edi
c0026f81:	d3 ed                	shr    ebp,cl
c0026f83:	09 ee                	or     esi,ebp
c0026f85:	89 f0                	mov    eax,esi
c0026f87:	d3 eb                	shr    ebx,cl
c0026f89:	89 da                	mov    edx,ebx
c0026f8b:	e9 e8 fe ff ff       	jmp    c0026e78 <__moddi3+0x54>
c0026f90:	39 c5                	cmp    ebp,eax
c0026f92:	73 db                	jae    c0026f6f <__moddi3+0x14b>
c0026f94:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026f98:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026f9c:	89 d1                	mov    ecx,edx
c0026f9e:	89 c6                	mov    esi,eax
c0026fa0:	eb cd                	jmp    c0026f6f <__moddi3+0x14b>
c0026fa2:	66 90                	xchg   ax,ax

c0026fa4 <__udivdi3>:
c0026fa4:	55                   	push   ebp
c0026fa5:	57                   	push   edi
c0026fa6:	56                   	push   esi
c0026fa7:	53                   	push   ebx
c0026fa8:	83 ec 1c             	sub    esp,0x1c
c0026fab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026faf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026fb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026fb7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026fbb:	85 d2                	test   edx,edx
c0026fbd:	75 41                	jne    c0027000 <__udivdi3+0x5c>
c0026fbf:	39 f7                	cmp    edi,esi
c0026fc1:	76 15                	jbe    c0026fd8 <__udivdi3+0x34>
c0026fc3:	89 e8                	mov    eax,ebp
c0026fc5:	89 f2                	mov    edx,esi
c0026fc7:	f7 f7                	div    edi
c0026fc9:	31 db                	xor    ebx,ebx
c0026fcb:	89 da                	mov    edx,ebx
c0026fcd:	83 c4 1c             	add    esp,0x1c
c0026fd0:	5b                   	pop    ebx
c0026fd1:	5e                   	pop    esi
c0026fd2:	5f                   	pop    edi
c0026fd3:	5d                   	pop    ebp
c0026fd4:	c3                   	ret    
c0026fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0026fd8:	89 f9                	mov    ecx,edi
c0026fda:	85 ff                	test   edi,edi
c0026fdc:	75 0b                	jne    c0026fe9 <__udivdi3+0x45>
c0026fde:	b8 01 00 00 00       	mov    eax,0x1
c0026fe3:	31 d2                	xor    edx,edx
c0026fe5:	f7 f7                	div    edi
c0026fe7:	89 c1                	mov    ecx,eax
c0026fe9:	31 d2                	xor    edx,edx
c0026feb:	89 f0                	mov    eax,esi
c0026fed:	f7 f1                	div    ecx
c0026fef:	89 c3                	mov    ebx,eax
c0026ff1:	89 e8                	mov    eax,ebp
c0026ff3:	f7 f1                	div    ecx
c0026ff5:	89 da                	mov    edx,ebx
c0026ff7:	83 c4 1c             	add    esp,0x1c
c0026ffa:	5b                   	pop    ebx
c0026ffb:	5e                   	pop    esi
c0026ffc:	5f                   	pop    edi
c0026ffd:	5d                   	pop    ebp
c0026ffe:	c3                   	ret    
c0026fff:	90                   	nop
c0027000:	39 f2                	cmp    edx,esi
c0027002:	77 1c                	ja     c0027020 <__udivdi3+0x7c>
c0027004:	0f bd da             	bsr    ebx,edx
c0027007:	83 f3 1f             	xor    ebx,0x1f
c002700a:	75 24                	jne    c0027030 <__udivdi3+0x8c>
c002700c:	39 f2                	cmp    edx,esi
c002700e:	72 08                	jb     c0027018 <__udivdi3+0x74>
c0027010:	39 ef                	cmp    edi,ebp
c0027012:	0f 87 84 00 00 00    	ja     c002709c <__udivdi3+0xf8>
c0027018:	b8 01 00 00 00       	mov    eax,0x1
c002701d:	eb ac                	jmp    c0026fcb <__udivdi3+0x27>
c002701f:	90                   	nop
c0027020:	31 db                	xor    ebx,ebx
c0027022:	31 c0                	xor    eax,eax
c0027024:	89 da                	mov    edx,ebx
c0027026:	83 c4 1c             	add    esp,0x1c
c0027029:	5b                   	pop    ebx
c002702a:	5e                   	pop    esi
c002702b:	5f                   	pop    edi
c002702c:	5d                   	pop    ebp
c002702d:	c3                   	ret    
c002702e:	66 90                	xchg   ax,ax
c0027030:	b8 20 00 00 00       	mov    eax,0x20
c0027035:	29 d8                	sub    eax,ebx
c0027037:	88 d9                	mov    cl,bl
c0027039:	d3 e2                	shl    edx,cl
c002703b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002703f:	89 fa                	mov    edx,edi
c0027041:	88 c1                	mov    cl,al
c0027043:	d3 ea                	shr    edx,cl
c0027045:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027049:	09 d1                	or     ecx,edx
c002704b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002704f:	88 d9                	mov    cl,bl
c0027051:	d3 e7                	shl    edi,cl
c0027053:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027057:	89 f7                	mov    edi,esi
c0027059:	88 c1                	mov    cl,al
c002705b:	d3 ef                	shr    edi,cl
c002705d:	88 d9                	mov    cl,bl
c002705f:	d3 e6                	shl    esi,cl
c0027061:	89 ea                	mov    edx,ebp
c0027063:	88 c1                	mov    cl,al
c0027065:	d3 ea                	shr    edx,cl
c0027067:	09 d6                	or     esi,edx
c0027069:	89 f0                	mov    eax,esi
c002706b:	89 fa                	mov    edx,edi
c002706d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027071:	89 d7                	mov    edi,edx
c0027073:	89 c6                	mov    esi,eax
c0027075:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027079:	39 d7                	cmp    edi,edx
c002707b:	72 13                	jb     c0027090 <__udivdi3+0xec>
c002707d:	74 09                	je     c0027088 <__udivdi3+0xe4>
c002707f:	89 f0                	mov    eax,esi
c0027081:	31 db                	xor    ebx,ebx
c0027083:	e9 43 ff ff ff       	jmp    c0026fcb <__udivdi3+0x27>
c0027088:	88 d9                	mov    cl,bl
c002708a:	d3 e5                	shl    ebp,cl
c002708c:	39 c5                	cmp    ebp,eax
c002708e:	73 ef                	jae    c002707f <__udivdi3+0xdb>
c0027090:	8d 46 ff             	lea    eax,[esi-0x1]
c0027093:	31 db                	xor    ebx,ebx
c0027095:	e9 31 ff ff ff       	jmp    c0026fcb <__udivdi3+0x27>
c002709a:	66 90                	xchg   ax,ax
c002709c:	31 c0                	xor    eax,eax
c002709e:	e9 28 ff ff ff       	jmp    c0026fcb <__udivdi3+0x27>
c00270a3:	90                   	nop

c00270a4 <__umoddi3>:
c00270a4:	55                   	push   ebp
c00270a5:	57                   	push   edi
c00270a6:	56                   	push   esi
c00270a7:	53                   	push   ebx
c00270a8:	83 ec 1c             	sub    esp,0x1c
c00270ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00270af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00270b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00270b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00270bb:	89 da                	mov    edx,ebx
c00270bd:	85 c0                	test   eax,eax
c00270bf:	75 37                	jne    c00270f8 <__umoddi3+0x54>
c00270c1:	39 df                	cmp    edi,ebx
c00270c3:	76 13                	jbe    c00270d8 <__umoddi3+0x34>
c00270c5:	89 f0                	mov    eax,esi
c00270c7:	f7 f7                	div    edi
c00270c9:	89 d0                	mov    eax,edx
c00270cb:	31 d2                	xor    edx,edx
c00270cd:	83 c4 1c             	add    esp,0x1c
c00270d0:	5b                   	pop    ebx
c00270d1:	5e                   	pop    esi
c00270d2:	5f                   	pop    edi
c00270d3:	5d                   	pop    ebp
c00270d4:	c3                   	ret    
c00270d5:	8d 76 00             	lea    esi,[esi+0x0]
c00270d8:	89 fd                	mov    ebp,edi
c00270da:	85 ff                	test   edi,edi
c00270dc:	75 0b                	jne    c00270e9 <__umoddi3+0x45>
c00270de:	b8 01 00 00 00       	mov    eax,0x1
c00270e3:	31 d2                	xor    edx,edx
c00270e5:	f7 f7                	div    edi
c00270e7:	89 c5                	mov    ebp,eax
c00270e9:	89 d8                	mov    eax,ebx
c00270eb:	31 d2                	xor    edx,edx
c00270ed:	f7 f5                	div    ebp
c00270ef:	89 f0                	mov    eax,esi
c00270f1:	f7 f5                	div    ebp
c00270f3:	89 d0                	mov    eax,edx
c00270f5:	eb d4                	jmp    c00270cb <__umoddi3+0x27>
c00270f7:	90                   	nop
c00270f8:	89 f1                	mov    ecx,esi
c00270fa:	39 d8                	cmp    eax,ebx
c00270fc:	76 0a                	jbe    c0027108 <__umoddi3+0x64>
c00270fe:	89 f0                	mov    eax,esi
c0027100:	83 c4 1c             	add    esp,0x1c
c0027103:	5b                   	pop    ebx
c0027104:	5e                   	pop    esi
c0027105:	5f                   	pop    edi
c0027106:	5d                   	pop    ebp
c0027107:	c3                   	ret    
c0027108:	0f bd e8             	bsr    ebp,eax
c002710b:	83 f5 1f             	xor    ebp,0x1f
c002710e:	75 1c                	jne    c002712c <__umoddi3+0x88>
c0027110:	39 d8                	cmp    eax,ebx
c0027112:	72 04                	jb     c0027118 <__umoddi3+0x74>
c0027114:	39 f7                	cmp    edi,esi
c0027116:	77 08                	ja     c0027120 <__umoddi3+0x7c>
c0027118:	89 da                	mov    edx,ebx
c002711a:	29 fe                	sub    esi,edi
c002711c:	19 c2                	sbb    edx,eax
c002711e:	89 f1                	mov    ecx,esi
c0027120:	89 c8                	mov    eax,ecx
c0027122:	83 c4 1c             	add    esp,0x1c
c0027125:	5b                   	pop    ebx
c0027126:	5e                   	pop    esi
c0027127:	5f                   	pop    edi
c0027128:	5d                   	pop    ebp
c0027129:	c3                   	ret    
c002712a:	66 90                	xchg   ax,ax
c002712c:	ba 20 00 00 00       	mov    edx,0x20
c0027131:	29 ea                	sub    edx,ebp
c0027133:	89 e9                	mov    ecx,ebp
c0027135:	d3 e0                	shl    eax,cl
c0027137:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002713b:	89 f8                	mov    eax,edi
c002713d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027141:	88 d1                	mov    cl,dl
c0027143:	d3 e8                	shr    eax,cl
c0027145:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027149:	09 c1                	or     ecx,eax
c002714b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002714f:	89 e9                	mov    ecx,ebp
c0027151:	d3 e7                	shl    edi,cl
c0027153:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027157:	89 d8                	mov    eax,ebx
c0027159:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002715d:	88 d1                	mov    cl,dl
c002715f:	d3 e8                	shr    eax,cl
c0027161:	89 c7                	mov    edi,eax
c0027163:	89 e9                	mov    ecx,ebp
c0027165:	d3 e3                	shl    ebx,cl
c0027167:	89 f0                	mov    eax,esi
c0027169:	88 d1                	mov    cl,dl
c002716b:	d3 e8                	shr    eax,cl
c002716d:	09 d8                	or     eax,ebx
c002716f:	89 e9                	mov    ecx,ebp
c0027171:	d3 e6                	shl    esi,cl
c0027173:	89 f3                	mov    ebx,esi
c0027175:	89 fa                	mov    edx,edi
c0027177:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002717b:	89 d1                	mov    ecx,edx
c002717d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027181:	89 c6                	mov    esi,eax
c0027183:	89 d7                	mov    edi,edx
c0027185:	39 d1                	cmp    ecx,edx
c0027187:	72 27                	jb     c00271b0 <__umoddi3+0x10c>
c0027189:	74 21                	je     c00271ac <__umoddi3+0x108>
c002718b:	89 ca                	mov    edx,ecx
c002718d:	29 f3                	sub    ebx,esi
c002718f:	19 fa                	sbb    edx,edi
c0027191:	89 d0                	mov    eax,edx
c0027193:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027197:	d3 e0                	shl    eax,cl
c0027199:	89 e9                	mov    ecx,ebp
c002719b:	d3 eb                	shr    ebx,cl
c002719d:	09 d8                	or     eax,ebx
c002719f:	d3 ea                	shr    edx,cl
c00271a1:	83 c4 1c             	add    esp,0x1c
c00271a4:	5b                   	pop    ebx
c00271a5:	5e                   	pop    esi
c00271a6:	5f                   	pop    edi
c00271a7:	5d                   	pop    ebp
c00271a8:	c3                   	ret    
c00271a9:	8d 76 00             	lea    esi,[esi+0x0]
c00271ac:	39 c3                	cmp    ebx,eax
c00271ae:	73 db                	jae    c002718b <__umoddi3+0xe7>
c00271b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00271b4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00271b8:	89 d7                	mov    edi,edx
c00271ba:	89 c6                	mov    esi,eax
c00271bc:	eb cd                	jmp    c002718b <__umoddi3+0xe7>

c00271be <__addsf3>:
c00271be:	55                   	push   ebp
c00271bf:	89 e5                	mov    ebp,esp
c00271c1:	57                   	push   edi
c00271c2:	56                   	push   esi
c00271c3:	53                   	push   ebx
c00271c4:	83 ec 08             	sub    esp,0x8
c00271c7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00271ca:	89 fa                	mov    edx,edi
c00271cc:	89 f8                	mov    eax,edi
c00271ce:	c1 f8 17             	sar    eax,0x17
c00271d1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00271d4:	c1 e2 08             	shl    edx,0x8
c00271d7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00271dd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00271e0:	89 de                	mov    esi,ebx
c00271e2:	c1 fe 17             	sar    esi,0x17
c00271e5:	c1 e3 08             	shl    ebx,0x8
c00271e8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271ee:	31 f0                	xor    eax,esi
c00271f0:	0f 88 3b 01 00 00    	js     c0027331 <__addsf3+0x173>
c00271f6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00271f9:	29 f1                	sub    ecx,esi
c00271fb:	85 c9                	test   ecx,ecx
c00271fd:	7e 54                	jle    c0027253 <__addsf3+0x95>
c00271ff:	89 f0                	mov    eax,esi
c0027201:	84 c0                	test   al,al
c0027203:	75 10                	jne    c0027215 <__addsf3+0x57>
c0027205:	85 db                	test   ebx,ebx
c0027207:	0f 84 aa 02 00 00    	je     c00274b7 <__addsf3+0x2f9>
c002720d:	49                   	dec    ecx
c002720e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027211:	74 38                	je     c002724b <__addsf3+0x8d>
c0027213:	eb 13                	jmp    c0027228 <__addsf3+0x6a>
c0027215:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027218:	f7 d0                	not    eax
c002721a:	84 c0                	test   al,al
c002721c:	0f 84 95 02 00 00    	je     c00274b7 <__addsf3+0x2f9>
c0027222:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027228:	83 f9 1f             	cmp    ecx,0x1f
c002722b:	0f 8f 86 02 00 00    	jg     c00274b7 <__addsf3+0x2f9>
c0027231:	89 de                	mov    esi,ebx
c0027233:	d3 ee                	shr    esi,cl
c0027235:	b8 20 00 00 00       	mov    eax,0x20
c002723a:	29 c8                	sub    eax,ecx
c002723c:	89 c1                	mov    ecx,eax
c002723e:	d3 e3                	shl    ebx,cl
c0027240:	31 c0                	xor    eax,eax
c0027242:	85 db                	test   ebx,ebx
c0027244:	0f 95 c0             	setne  al
c0027247:	09 f0                	or     eax,esi
c0027249:	01 d0                	add    eax,edx
c002724b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002724e:	e9 b6 00 00 00       	jmp    c0027309 <__addsf3+0x14b>
c0027253:	74 5c                	je     c00272b1 <__addsf3+0xf3>
c0027255:	89 f1                	mov    ecx,esi
c0027257:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002725a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002725d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027261:	75 14                	jne    c0027277 <__addsf3+0xb9>
c0027263:	85 d2                	test   edx,edx
c0027265:	0f 84 4c 02 00 00    	je     c00274b7 <__addsf3+0x2f9>
c002726b:	49                   	dec    ecx
c002726c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002726f:	0f 84 94 00 00 00    	je     c0027309 <__addsf3+0x14b>
c0027275:	eb 12                	jmp    c0027289 <__addsf3+0xcb>
c0027277:	89 f0                	mov    eax,esi
c0027279:	f7 d0                	not    eax
c002727b:	84 c0                	test   al,al
c002727d:	0f 84 34 02 00 00    	je     c00274b7 <__addsf3+0x2f9>
c0027283:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027289:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002728c:	83 f9 1f             	cmp    ecx,0x1f
c002728f:	0f 8f 22 02 00 00    	jg     c00274b7 <__addsf3+0x2f9>
c0027295:	89 d7                	mov    edi,edx
c0027297:	d3 ef                	shr    edi,cl
c0027299:	b8 20 00 00 00       	mov    eax,0x20
c002729e:	29 c8                	sub    eax,ecx
c00272a0:	89 c1                	mov    ecx,eax
c00272a2:	d3 e2                	shl    edx,cl
c00272a4:	31 c0                	xor    eax,eax
c00272a6:	85 d2                	test   edx,edx
c00272a8:	0f 95 c0             	setne  al
c00272ab:	09 f8                	or     eax,edi
c00272ad:	01 d8                	add    eax,ebx
c00272af:	eb 58                	jmp    c0027309 <__addsf3+0x14b>
c00272b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00272b4:	8d 70 01             	lea    esi,[eax+0x1]
c00272b7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00272bd:	75 32                	jne    c00272f1 <__addsf3+0x133>
c00272bf:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00272c3:	75 1f                	jne    c00272e4 <__addsf3+0x126>
c00272c5:	85 d2                	test   edx,edx
c00272c7:	0f 84 e0 01 00 00    	je     c00274ad <__addsf3+0x2ef>
c00272cd:	85 db                	test   ebx,ebx
c00272cf:	0f 84 e2 01 00 00    	je     c00274b7 <__addsf3+0x2f9>
c00272d5:	89 d0                	mov    eax,edx
c00272d7:	01 d8                	add    eax,ebx
c00272d9:	0f 89 a9 01 00 00    	jns    c0027488 <__addsf3+0x2ca>
c00272df:	e9 9d 01 00 00       	jmp    c0027481 <__addsf3+0x2c3>
c00272e4:	85 d2                	test   edx,edx
c00272e6:	0f 85 cb 01 00 00    	jne    c00274b7 <__addsf3+0x2f9>
c00272ec:	e9 bc 01 00 00       	jmp    c00274ad <__addsf3+0x2ef>
c00272f1:	31 c0                	xor    eax,eax
c00272f3:	89 f1                	mov    ecx,esi
c00272f5:	f7 d1                	not    ecx
c00272f7:	84 c9                	test   cl,cl
c00272f9:	0f 84 90 01 00 00    	je     c002748f <__addsf3+0x2d1>
c00272ff:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027302:	d1 e8                	shr    eax,1
c0027304:	e9 86 01 00 00       	jmp    c002748f <__addsf3+0x2d1>
c0027309:	85 c0                	test   eax,eax
c002730b:	0f 89 7e 01 00 00    	jns    c002748f <__addsf3+0x2d1>
c0027311:	46                   	inc    esi
c0027312:	89 f2                	mov    edx,esi
c0027314:	f7 d2                	not    edx
c0027316:	84 d2                	test   dl,dl
c0027318:	0f 84 6f 01 00 00    	je     c002748d <__addsf3+0x2cf>
c002731e:	89 c2                	mov    edx,eax
c0027320:	83 e2 01             	and    edx,0x1
c0027323:	d1 e8                	shr    eax,1
c0027325:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002732a:	09 d0                	or     eax,edx
c002732c:	e9 5e 01 00 00       	jmp    c002748f <__addsf3+0x2d1>
c0027331:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027335:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027338:	89 f0                	mov    eax,esi
c002733a:	0f b6 c0             	movzx  eax,al
c002733d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027340:	29 c1                	sub    ecx,eax
c0027342:	85 c9                	test   ecx,ecx
c0027344:	7e 55                	jle    c002739b <__addsf3+0x1dd>
c0027346:	85 c0                	test   eax,eax
c0027348:	75 11                	jne    c002735b <__addsf3+0x19d>
c002734a:	85 db                	test   ebx,ebx
c002734c:	0f 84 65 01 00 00    	je     c00274b7 <__addsf3+0x2f9>
c0027352:	49                   	dec    ecx
c0027353:	75 19                	jne    c002736e <__addsf3+0x1b0>
c0027355:	89 d0                	mov    eax,edx
c0027357:	29 d8                	sub    eax,ebx
c0027359:	eb 38                	jmp    c0027393 <__addsf3+0x1d5>
c002735b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002735e:	f7 d0                	not    eax
c0027360:	84 c0                	test   al,al
c0027362:	0f 84 4f 01 00 00    	je     c00274b7 <__addsf3+0x2f9>
c0027368:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002736e:	83 f9 1f             	cmp    ecx,0x1f
c0027371:	0f 8f 40 01 00 00    	jg     c00274b7 <__addsf3+0x2f9>
c0027377:	89 de                	mov    esi,ebx
c0027379:	d3 ee                	shr    esi,cl
c002737b:	b8 20 00 00 00       	mov    eax,0x20
c0027380:	29 c8                	sub    eax,ecx
c0027382:	89 c1                	mov    ecx,eax
c0027384:	d3 e3                	shl    ebx,cl
c0027386:	31 c0                	xor    eax,eax
c0027388:	85 db                	test   ebx,ebx
c002738a:	0f 95 c0             	setne  al
c002738d:	09 f0                	or     eax,esi
c002738f:	29 c2                	sub    edx,eax
c0027391:	89 d0                	mov    eax,edx
c0027393:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027396:	e9 af 00 00 00       	jmp    c002744a <__addsf3+0x28c>
c002739b:	74 5c                	je     c00273f9 <__addsf3+0x23b>
c002739d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00273a0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00273a3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00273a7:	75 14                	jne    c00273bd <__addsf3+0x1ff>
c00273a9:	85 d2                	test   edx,edx
c00273ab:	0f 84 06 01 00 00    	je     c00274b7 <__addsf3+0x2f9>
c00273b1:	48                   	dec    eax
c00273b2:	75 1b                	jne    c00273cf <__addsf3+0x211>
c00273b4:	89 d8                	mov    eax,ebx
c00273b6:	29 d0                	sub    eax,edx
c00273b8:	e9 8d 00 00 00       	jmp    c002744a <__addsf3+0x28c>
c00273bd:	89 f1                	mov    ecx,esi
c00273bf:	f7 d1                	not    ecx
c00273c1:	84 c9                	test   cl,cl
c00273c3:	0f 84 ee 00 00 00    	je     c00274b7 <__addsf3+0x2f9>
c00273c9:	81 ca 00 00 00 80    	or     edx,0x80000000
c00273cf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00273d2:	83 f8 1f             	cmp    eax,0x1f
c00273d5:	0f 8f dc 00 00 00    	jg     c00274b7 <__addsf3+0x2f9>
c00273db:	89 d7                	mov    edi,edx
c00273dd:	88 c1                	mov    cl,al
c00273df:	d3 ef                	shr    edi,cl
c00273e1:	b9 20 00 00 00       	mov    ecx,0x20
c00273e6:	29 c1                	sub    ecx,eax
c00273e8:	d3 e2                	shl    edx,cl
c00273ea:	31 c0                	xor    eax,eax
c00273ec:	85 d2                	test   edx,edx
c00273ee:	0f 95 c0             	setne  al
c00273f1:	09 f8                	or     eax,edi
c00273f3:	29 c3                	sub    ebx,eax
c00273f5:	89 d8                	mov    eax,ebx
c00273f7:	eb 51                	jmp    c002744a <__addsf3+0x28c>
c00273f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00273fc:	40                   	inc    eax
c00273fd:	a8 fe                	test   al,0xfe
c00273ff:	75 3d                	jne    c002743e <__addsf3+0x280>
c0027401:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027405:	0f 85 a7 00 00 00    	jne    c00274b2 <__addsf3+0x2f4>
c002740b:	85 d2                	test   edx,edx
c002740d:	75 12                	jne    c0027421 <__addsf3+0x263>
c002740f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027412:	85 db                	test   ebx,ebx
c0027414:	0f 85 9d 00 00 00    	jne    c00274b7 <__addsf3+0x2f9>
c002741a:	31 ff                	xor    edi,edi
c002741c:	e9 96 00 00 00       	jmp    c00274b7 <__addsf3+0x2f9>
c0027421:	85 db                	test   ebx,ebx
c0027423:	0f 84 8e 00 00 00    	je     c00274b7 <__addsf3+0x2f9>
c0027429:	89 d0                	mov    eax,edx
c002742b:	29 d8                	sub    eax,ebx
c002742d:	79 06                	jns    c0027435 <__addsf3+0x277>
c002742f:	89 d8                	mov    eax,ebx
c0027431:	29 d0                	sub    eax,edx
c0027433:	eb 5a                	jmp    c002748f <__addsf3+0x2d1>
c0027435:	bf 00 00 00 00       	mov    edi,0x0
c002743a:	74 7b                	je     c00274b7 <__addsf3+0x2f9>
c002743c:	eb 4a                	jmp    c0027488 <__addsf3+0x2ca>
c002743e:	89 d0                	mov    eax,edx
c0027440:	29 d8                	sub    eax,ebx
c0027442:	79 12                	jns    c0027456 <__addsf3+0x298>
c0027444:	89 d8                	mov    eax,ebx
c0027446:	29 d0                	sub    eax,edx
c0027448:	eb 09                	jmp    c0027453 <__addsf3+0x295>
c002744a:	85 c0                	test   eax,eax
c002744c:	79 41                	jns    c002748f <__addsf3+0x2d1>
c002744e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027453:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027456:	31 f6                	xor    esi,esi
c0027458:	85 c0                	test   eax,eax
c002745a:	74 33                	je     c002748f <__addsf3+0x2d1>
c002745c:	0f bd c8             	bsr    ecx,eax
c002745f:	83 f1 1f             	xor    ecx,0x1f
c0027462:	d3 e0                	shl    eax,cl
c0027464:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027468:	39 ca                	cmp    edx,ecx
c002746a:	7f 10                	jg     c002747c <__addsf3+0x2be>
c002746c:	29 d1                	sub    ecx,edx
c002746e:	41                   	inc    ecx
c002746f:	d3 e8                	shr    eax,cl
c0027471:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027474:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002747a:	eb 13                	jmp    c002748f <__addsf3+0x2d1>
c002747c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002747f:	29 ce                	sub    esi,ecx
c0027481:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027486:	eb 07                	jmp    c002748f <__addsf3+0x2d1>
c0027488:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002748b:	eb 02                	jmp    c002748f <__addsf3+0x2d1>
c002748d:	31 c0                	xor    eax,eax
c002748f:	89 c2                	mov    edx,eax
c0027491:	c1 ea 08             	shr    edx,0x8
c0027494:	a8 7f                	test   al,0x7f
c0027496:	0f 95 c1             	setne  cl
c0027499:	09 d1                	or     ecx,edx
c002749b:	83 e1 01             	and    ecx,0x1
c002749e:	c1 e8 07             	shr    eax,0x7
c00274a1:	21 c8                	and    eax,ecx
c00274a3:	c1 e6 17             	shl    esi,0x17
c00274a6:	09 d6                	or     esi,edx
c00274a8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00274ab:	eb 0a                	jmp    c00274b7 <__addsf3+0x2f9>
c00274ad:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00274b0:	eb 05                	jmp    c00274b7 <__addsf3+0x2f9>
c00274b2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00274b7:	89 f8                	mov    eax,edi
c00274b9:	5a                   	pop    edx
c00274ba:	59                   	pop    ecx
c00274bb:	5b                   	pop    ebx
c00274bc:	5e                   	pop    esi
c00274bd:	5f                   	pop    edi
c00274be:	5d                   	pop    ebp
c00274bf:	c3                   	ret    

c00274c0 <__subsf3>:
c00274c0:	55                   	push   ebp
c00274c1:	89 e5                	mov    ebp,esp
c00274c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00274c6:	05 00 00 00 80       	add    eax,0x80000000
c00274cb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00274ce:	5d                   	pop    ebp
c00274cf:	e9 ea fc ff ff       	jmp    c00271be <__addsf3>

c00274d4 <__negsf2>:
c00274d4:	55                   	push   ebp
c00274d5:	89 e5                	mov    ebp,esp
c00274d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00274da:	05 00 00 00 80       	add    eax,0x80000000
c00274df:	5d                   	pop    ebp
c00274e0:	c3                   	ret    

c00274e1 <__mulsf3>:
c00274e1:	55                   	push   ebp
c00274e2:	89 e5                	mov    ebp,esp
c00274e4:	57                   	push   edi
c00274e5:	56                   	push   esi
c00274e6:	53                   	push   ebx
c00274e7:	83 ec 1c             	sub    esp,0x1c
c00274ea:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00274ed:	89 f0                	mov    eax,esi
c00274ef:	89 f1                	mov    ecx,esi
c00274f1:	c1 f9 17             	sar    ecx,0x17
c00274f4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00274f7:	c1 e0 08             	shl    eax,0x8
c00274fa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274ff:	89 c1                	mov    ecx,eax
c0027501:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027504:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027507:	89 c7                	mov    edi,eax
c0027509:	c1 ff 17             	sar    edi,0x17
c002750c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027510:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027513:	89 f8                	mov    eax,edi
c0027515:	0f b6 c0             	movzx  eax,al
c0027518:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002751b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002751f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027522:	42                   	inc    edx
c0027523:	80 e2 fe             	and    dl,0xfe
c0027526:	75 7b                	jne    c00275a3 <__mulsf3+0xc2>
c0027528:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002752c:	74 54                	je     c0027582 <__mulsf3+0xa1>
c002752e:	85 c9                	test   ecx,ecx
c0027530:	0f 85 64 01 00 00    	jne    c002769a <__mulsf3+0x1b9>
c0027536:	8d 57 01             	lea    edx,[edi+0x1]
c0027539:	80 e2 fe             	and    dl,0xfe
c002753c:	75 1f                	jne    c002755d <__mulsf3+0x7c>
c002753e:	85 c0                	test   eax,eax
c0027540:	b8 00 00 00 00       	mov    eax,0x0
c0027545:	74 29                	je     c0027570 <__mulsf3+0x8f>
c0027547:	53                   	push   ebx
c0027548:	53                   	push   ebx
c0027549:	50                   	push   eax
c002754a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002754d:	e8 96 05 00 00       	call   c0027ae8 <__nesf2>
c0027552:	83 c4 10             	add    esp,0x10
c0027555:	85 c0                	test   eax,eax
c0027557:	0f 85 3a 01 00 00    	jne    c0027697 <__mulsf3+0x1b6>
c002755d:	85 ff                	test   edi,edi
c002755f:	0f 89 35 01 00 00    	jns    c002769a <__mulsf3+0x1b9>
c0027565:	81 c6 00 00 00 80    	add    esi,0x80000000
c002756b:	e9 2a 01 00 00       	jmp    c002769a <__mulsf3+0x1b9>
c0027570:	51                   	push   ecx
c0027571:	51                   	push   ecx
c0027572:	50                   	push   eax
c0027573:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027576:	e8 6d 05 00 00       	call   c0027ae8 <__nesf2>
c002757b:	83 c4 10             	add    esp,0x10
c002757e:	85 c0                	test   eax,eax
c0027580:	eb 15                	jmp    c0027597 <__mulsf3+0xb6>
c0027582:	85 c9                	test   ecx,ecx
c0027584:	74 0b                	je     c0027591 <__mulsf3+0xb0>
c0027586:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027589:	01 c9                	add    ecx,ecx
c002758b:	78 16                	js     c00275a3 <__mulsf3+0xc2>
c002758d:	89 d3                	mov    ebx,edx
c002758f:	eb f5                	jmp    c0027586 <__mulsf3+0xa5>
c0027591:	89 f8                	mov    eax,edi
c0027593:	f7 d0                	not    eax
c0027595:	84 c0                	test   al,al
c0027597:	75 c4                	jne    c002755d <__mulsf3+0x7c>
c0027599:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002759e:	e9 f7 00 00 00       	jmp    c002769a <__mulsf3+0x1b9>
c00275a3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00275a6:	c1 e6 08             	shl    esi,0x8
c00275a9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00275af:	8d 57 01             	lea    edx,[edi+0x1]
c00275b2:	80 e2 fe             	and    dl,0xfe
c00275b5:	75 63                	jne    c002761a <__mulsf3+0x139>
c00275b7:	85 c0                	test   eax,eax
c00275b9:	74 2f                	je     c00275ea <__mulsf3+0x109>
c00275bb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00275bf:	0f 89 d2 00 00 00    	jns    c0027697 <__mulsf3+0x1b6>
c00275c5:	52                   	push   edx
c00275c6:	52                   	push   edx
c00275c7:	6a 00                	push   0x0
c00275c9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275cc:	e8 dc 04 00 00       	call   c0027aad <__eqsf2>
c00275d1:	83 c4 10             	add    esp,0x10
c00275d4:	85 c0                	test   eax,eax
c00275d6:	0f 85 bb 00 00 00    	jne    c0027697 <__mulsf3+0x1b6>
c00275dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00275df:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00275e5:	e9 b0 00 00 00       	jmp    c002769a <__mulsf3+0x1b9>
c00275ea:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00275ed:	50                   	push   eax
c00275ee:	50                   	push   eax
c00275ef:	6a 00                	push   0x0
c00275f1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275f4:	e8 b4 04 00 00       	call   c0027aad <__eqsf2>
c00275f9:	83 c4 10             	add    esp,0x10
c00275fc:	85 c0                	test   eax,eax
c00275fe:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027601:	75 0c                	jne    c002760f <__mulsf3+0x12e>
c0027603:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027607:	0f 89 8a 00 00 00    	jns    c0027697 <__mulsf3+0x1b6>
c002760d:	eb cd                	jmp    c00275dc <__mulsf3+0xfb>
c002760f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027612:	01 f6                	add    esi,esi
c0027614:	78 04                	js     c002761a <__mulsf3+0x139>
c0027616:	89 c3                	mov    ebx,eax
c0027618:	eb f5                	jmp    c002760f <__mulsf3+0x12e>
c002761a:	89 c8                	mov    eax,ecx
c002761c:	0d 00 00 00 80       	or     eax,0x80000000
c0027621:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027627:	f7 e6                	mul    esi
c0027629:	85 c0                	test   eax,eax
c002762b:	0f 95 c0             	setne  al
c002762e:	0f b6 c0             	movzx  eax,al
c0027631:	09 c2                	or     edx,eax
c0027633:	78 03                	js     c0027638 <__mulsf3+0x157>
c0027635:	01 d2                	add    edx,edx
c0027637:	4b                   	dec    ebx
c0027638:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002763e:	7f 22                	jg     c0027662 <__mulsf3+0x181>
c0027640:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027646:	85 db                	test   ebx,ebx
c0027648:	7f 23                	jg     c002766d <__mulsf3+0x18c>
c002764a:	83 fb e9             	cmp    ebx,0xffffffe9
c002764d:	7c 1a                	jl     c0027669 <__mulsf3+0x188>
c002764f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027655:	b9 01 00 00 00       	mov    ecx,0x1
c002765a:	29 d9                	sub    ecx,ebx
c002765c:	d3 ea                	shr    edx,cl
c002765e:	31 db                	xor    ebx,ebx
c0027660:	eb 0b                	jmp    c002766d <__mulsf3+0x18c>
c0027662:	bb ff 00 00 00       	mov    ebx,0xff
c0027667:	eb 02                	jmp    c002766b <__mulsf3+0x18a>
c0027669:	31 db                	xor    ebx,ebx
c002766b:	31 d2                	xor    edx,edx
c002766d:	89 d0                	mov    eax,edx
c002766f:	c1 e8 08             	shr    eax,0x8
c0027672:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027675:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002767b:	09 fb                	or     ebx,edi
c002767d:	c1 e3 17             	shl    ebx,0x17
c0027680:	09 c3                	or     ebx,eax
c0027682:	f6 c2 7f             	test   dl,0x7f
c0027685:	0f 95 c1             	setne  cl
c0027688:	09 c8                	or     eax,ecx
c002768a:	83 e0 01             	and    eax,0x1
c002768d:	c1 ea 07             	shr    edx,0x7
c0027690:	21 c2                	and    edx,eax
c0027692:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027695:	eb 03                	jmp    c002769a <__mulsf3+0x1b9>
c0027697:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002769a:	89 f0                	mov    eax,esi
c002769c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002769f:	5b                   	pop    ebx
c00276a0:	5e                   	pop    esi
c00276a1:	5f                   	pop    edi
c00276a2:	5d                   	pop    ebp
c00276a3:	c3                   	ret    

c00276a4 <__divsf3>:
c00276a4:	55                   	push   ebp
c00276a5:	89 e5                	mov    ebp,esp
c00276a7:	57                   	push   edi
c00276a8:	56                   	push   esi
c00276a9:	53                   	push   ebx
c00276aa:	83 ec 1c             	sub    esp,0x1c
c00276ad:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00276b0:	89 d8                	mov    eax,ebx
c00276b2:	89 d9                	mov    ecx,ebx
c00276b4:	c1 f9 17             	sar    ecx,0x17
c00276b7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00276ba:	c1 e0 08             	shl    eax,0x8
c00276bd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00276c2:	89 c1                	mov    ecx,eax
c00276c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00276c7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00276ca:	89 c7                	mov    edi,eax
c00276cc:	c1 ff 17             	sar    edi,0x17
c00276cf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00276d3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00276d6:	89 f8                	mov    eax,edi
c00276d8:	0f b6 c0             	movzx  eax,al
c00276db:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00276de:	29 c6                	sub    esi,eax
c00276e0:	83 c6 7f             	add    esi,0x7f
c00276e3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00276e6:	42                   	inc    edx
c00276e7:	80 e2 fe             	and    dl,0xfe
c00276ea:	0f 85 9c 00 00 00    	jne    c002778c <__divsf3+0xe8>
c00276f0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00276f4:	74 33                	je     c0027729 <__divsf3+0x85>
c00276f6:	85 c9                	test   ecx,ecx
c00276f8:	0f 85 c7 01 00 00    	jne    c00278c5 <__divsf3+0x221>
c00276fe:	8d 57 01             	lea    edx,[edi+0x1]
c0027701:	80 e2 fe             	and    dl,0xfe
c0027704:	75 2f                	jne    c0027735 <__divsf3+0x91>
c0027706:	85 c0                	test   eax,eax
c0027708:	74 2b                	je     c0027735 <__divsf3+0x91>
c002770a:	51                   	push   ecx
c002770b:	51                   	push   ecx
c002770c:	6a 00                	push   0x0
c002770e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027711:	e8 d2 03 00 00       	call   c0027ae8 <__nesf2>
c0027716:	83 c4 10             	add    esp,0x10
c0027719:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002771c:	85 c0                	test   eax,eax
c002771e:	0f 85 a1 01 00 00    	jne    c00278c5 <__divsf3+0x221>
c0027724:	e9 92 01 00 00       	jmp    c00278bb <__divsf3+0x217>
c0027729:	85 c9                	test   ecx,ecx
c002772b:	75 1b                	jne    c0027748 <__divsf3+0xa4>
c002772d:	8d 57 01             	lea    edx,[edi+0x1]
c0027730:	80 e2 fe             	and    dl,0xfe
c0027733:	74 1e                	je     c0027753 <__divsf3+0xaf>
c0027735:	85 ff                	test   edi,edi
c0027737:	0f 89 88 01 00 00    	jns    c00278c5 <__divsf3+0x221>
c002773d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027743:	e9 7d 01 00 00       	jmp    c00278c5 <__divsf3+0x221>
c0027748:	8d 56 ff             	lea    edx,[esi-0x1]
c002774b:	01 c9                	add    ecx,ecx
c002774d:	78 3d                	js     c002778c <__divsf3+0xe8>
c002774f:	89 d6                	mov    esi,edx
c0027751:	eb f5                	jmp    c0027748 <__divsf3+0xa4>
c0027753:	85 c0                	test   eax,eax
c0027755:	b8 00 00 00 00       	mov    eax,0x0
c002775a:	74 18                	je     c0027774 <__divsf3+0xd0>
c002775c:	52                   	push   edx
c002775d:	52                   	push   edx
c002775e:	50                   	push   eax
c002775f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027762:	e8 81 03 00 00       	call   c0027ae8 <__nesf2>
c0027767:	83 c4 10             	add    esp,0x10
c002776a:	85 c0                	test   eax,eax
c002776c:	0f 85 50 01 00 00    	jne    c00278c2 <__divsf3+0x21e>
c0027772:	eb c1                	jmp    c0027735 <__divsf3+0x91>
c0027774:	56                   	push   esi
c0027775:	56                   	push   esi
c0027776:	50                   	push   eax
c0027777:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002777a:	e8 69 03 00 00       	call   c0027ae8 <__nesf2>
c002777f:	83 c4 10             	add    esp,0x10
c0027782:	85 c0                	test   eax,eax
c0027784:	0f 84 31 01 00 00    	je     c00278bb <__divsf3+0x217>
c002778a:	eb a9                	jmp    c0027735 <__divsf3+0x91>
c002778c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002778f:	c1 e3 08             	shl    ebx,0x8
c0027792:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027798:	8d 57 01             	lea    edx,[edi+0x1]
c002779b:	80 e2 fe             	and    dl,0xfe
c002779e:	75 71                	jne    c0027811 <__divsf3+0x16d>
c00277a0:	85 c0                	test   eax,eax
c00277a2:	ba 00 00 00 00       	mov    edx,0x0
c00277a7:	74 2f                	je     c00277d8 <__divsf3+0x134>
c00277a9:	51                   	push   ecx
c00277aa:	51                   	push   ecx
c00277ab:	52                   	push   edx
c00277ac:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277af:	e8 f9 02 00 00       	call   c0027aad <__eqsf2>
c00277b4:	83 c4 10             	add    esp,0x10
c00277b7:	85 c0                	test   eax,eax
c00277b9:	0f 85 03 01 00 00    	jne    c00278c2 <__divsf3+0x21e>
c00277bf:	31 d2                	xor    edx,edx
c00277c1:	89 d3                	mov    ebx,edx
c00277c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277c6:	31 f8                	xor    eax,edi
c00277c8:	0f 89 f7 00 00 00    	jns    c00278c5 <__divsf3+0x221>
c00277ce:	bb 00 00 00 80       	mov    ebx,0x80000000
c00277d3:	e9 ed 00 00 00       	jmp    c00278c5 <__divsf3+0x221>
c00277d8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00277db:	50                   	push   eax
c00277dc:	50                   	push   eax
c00277dd:	52                   	push   edx
c00277de:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277e1:	e8 c7 02 00 00       	call   c0027aad <__eqsf2>
c00277e6:	83 c4 10             	add    esp,0x10
c00277e9:	85 c0                	test   eax,eax
c00277eb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00277ee:	75 16                	jne    c0027806 <__divsf3+0x162>
c00277f0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00277f3:	31 fb                	xor    ebx,edi
c00277f5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00277fb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027801:	e9 bf 00 00 00       	jmp    c00278c5 <__divsf3+0x221>
c0027806:	8d 46 01             	lea    eax,[esi+0x1]
c0027809:	01 db                	add    ebx,ebx
c002780b:	78 04                	js     c0027811 <__divsf3+0x16d>
c002780d:	89 c6                	mov    esi,eax
c002780f:	eb f5                	jmp    c0027806 <__divsf3+0x162>
c0027811:	89 c8                	mov    eax,ecx
c0027813:	0d 00 00 00 80       	or     eax,0x80000000
c0027818:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002781e:	31 d2                	xor    edx,edx
c0027820:	39 d8                	cmp    eax,ebx
c0027822:	72 07                	jb     c002782b <__divsf3+0x187>
c0027824:	29 d8                	sub    eax,ebx
c0027826:	ba 01 00 00 00       	mov    edx,0x1
c002782b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027832:	01 d2                	add    edx,edx
c0027834:	89 c1                	mov    ecx,eax
c0027836:	01 c0                	add    eax,eax
c0027838:	85 c9                	test   ecx,ecx
c002783a:	78 04                	js     c0027840 <__divsf3+0x19c>
c002783c:	39 c3                	cmp    ebx,eax
c002783e:	77 05                	ja     c0027845 <__divsf3+0x1a1>
c0027840:	29 d8                	sub    eax,ebx
c0027842:	83 ca 01             	or     edx,0x1
c0027845:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027848:	75 e8                	jne    c0027832 <__divsf3+0x18e>
c002784a:	85 c0                	test   eax,eax
c002784c:	0f 95 c0             	setne  al
c002784f:	0f b6 c0             	movzx  eax,al
c0027852:	c1 e2 06             	shl    edx,0x6
c0027855:	09 c2                	or     edx,eax
c0027857:	78 03                	js     c002785c <__divsf3+0x1b8>
c0027859:	01 d2                	add    edx,edx
c002785b:	4e                   	dec    esi
c002785c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027862:	7f 22                	jg     c0027886 <__divsf3+0x1e2>
c0027864:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002786a:	85 f6                	test   esi,esi
c002786c:	7f 23                	jg     c0027891 <__divsf3+0x1ed>
c002786e:	83 fe e9             	cmp    esi,0xffffffe9
c0027871:	7c 1a                	jl     c002788d <__divsf3+0x1e9>
c0027873:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027879:	b9 01 00 00 00       	mov    ecx,0x1
c002787e:	29 f1                	sub    ecx,esi
c0027880:	d3 ea                	shr    edx,cl
c0027882:	31 f6                	xor    esi,esi
c0027884:	eb 0b                	jmp    c0027891 <__divsf3+0x1ed>
c0027886:	be ff 00 00 00       	mov    esi,0xff
c002788b:	eb 02                	jmp    c002788f <__divsf3+0x1eb>
c002788d:	31 f6                	xor    esi,esi
c002788f:	31 d2                	xor    edx,edx
c0027891:	89 d0                	mov    eax,edx
c0027893:	c1 e8 08             	shr    eax,0x8
c0027896:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027899:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002789f:	09 fe                	or     esi,edi
c00278a1:	c1 e6 17             	shl    esi,0x17
c00278a4:	09 c6                	or     esi,eax
c00278a6:	f6 c2 7f             	test   dl,0x7f
c00278a9:	0f 95 c1             	setne  cl
c00278ac:	09 c8                	or     eax,ecx
c00278ae:	83 e0 01             	and    eax,0x1
c00278b1:	c1 ea 07             	shr    edx,0x7
c00278b4:	21 c2                	and    edx,eax
c00278b6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00278b9:	eb 0a                	jmp    c00278c5 <__divsf3+0x221>
c00278bb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00278c0:	eb 03                	jmp    c00278c5 <__divsf3+0x221>
c00278c2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00278c5:	89 d8                	mov    eax,ebx
c00278c7:	8d 65 f4             	lea    esp,[ebp-0xc]
c00278ca:	5b                   	pop    ebx
c00278cb:	5e                   	pop    esi
c00278cc:	5f                   	pop    edi
c00278cd:	5d                   	pop    ebp
c00278ce:	c3                   	ret    

c00278cf <__floatsisf>:
c00278cf:	55                   	push   ebp
c00278d0:	89 e5                	mov    ebp,esp
c00278d2:	53                   	push   ebx
c00278d3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00278d6:	85 d2                	test   edx,edx
c00278d8:	7e 2b                	jle    c0027905 <__floatsisf+0x36>
c00278da:	0f bd ca             	bsr    ecx,edx
c00278dd:	83 f1 1f             	xor    ecx,0x1f
c00278e0:	d3 e2                	shl    edx,cl
c00278e2:	89 d0                	mov    eax,edx
c00278e4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00278e9:	89 c3                	mov    ebx,eax
c00278eb:	c1 eb 08             	shr    ebx,0x8
c00278ee:	80 e2 7f             	and    dl,0x7f
c00278f1:	0f 95 c2             	setne  dl
c00278f4:	09 da                	or     edx,ebx
c00278f6:	83 e2 01             	and    edx,0x1
c00278f9:	c1 e8 07             	shr    eax,0x7
c00278fc:	21 c2                	and    edx,eax
c00278fe:	b8 9e 00 00 00       	mov    eax,0x9e
c0027903:	eb 32                	jmp    c0027937 <__floatsisf+0x68>
c0027905:	b8 00 00 00 00       	mov    eax,0x0
c002790a:	74 34                	je     c0027940 <__floatsisf+0x71>
c002790c:	f7 da                	neg    edx
c002790e:	0f bd ca             	bsr    ecx,edx
c0027911:	83 f1 1f             	xor    ecx,0x1f
c0027914:	d3 e2                	shl    edx,cl
c0027916:	89 d0                	mov    eax,edx
c0027918:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002791d:	89 c3                	mov    ebx,eax
c002791f:	c1 eb 08             	shr    ebx,0x8
c0027922:	80 e2 7f             	and    dl,0x7f
c0027925:	0f 95 c2             	setne  dl
c0027928:	09 da                	or     edx,ebx
c002792a:	83 e2 01             	and    edx,0x1
c002792d:	c1 e8 07             	shr    eax,0x7
c0027930:	21 c2                	and    edx,eax
c0027932:	b8 9e 01 00 00       	mov    eax,0x19e
c0027937:	29 c8                	sub    eax,ecx
c0027939:	c1 e0 17             	shl    eax,0x17
c002793c:	09 d8                	or     eax,ebx
c002793e:	01 d0                	add    eax,edx
c0027940:	5b                   	pop    ebx
c0027941:	5d                   	pop    ebp
c0027942:	c3                   	ret    

c0027943 <__floatunsisf>:
c0027943:	55                   	push   ebp
c0027944:	89 e5                	mov    ebp,esp
c0027946:	53                   	push   ebx
c0027947:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002794a:	31 c0                	xor    eax,eax
c002794c:	85 d2                	test   edx,edx
c002794e:	74 32                	je     c0027982 <__floatunsisf+0x3f>
c0027950:	0f bd ca             	bsr    ecx,edx
c0027953:	83 f1 1f             	xor    ecx,0x1f
c0027956:	d3 e2                	shl    edx,cl
c0027958:	89 d0                	mov    eax,edx
c002795a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002795f:	89 c3                	mov    ebx,eax
c0027961:	c1 eb 08             	shr    ebx,0x8
c0027964:	80 e2 7f             	and    dl,0x7f
c0027967:	0f 95 c2             	setne  dl
c002796a:	09 da                	or     edx,ebx
c002796c:	83 e2 01             	and    edx,0x1
c002796f:	c1 e8 07             	shr    eax,0x7
c0027972:	21 c2                	and    edx,eax
c0027974:	b8 9e 00 00 00       	mov    eax,0x9e
c0027979:	29 c8                	sub    eax,ecx
c002797b:	c1 e0 17             	shl    eax,0x17
c002797e:	09 d8                	or     eax,ebx
c0027980:	01 d0                	add    eax,edx
c0027982:	5b                   	pop    ebx
c0027983:	5d                   	pop    ebp
c0027984:	c3                   	ret    

c0027985 <__fixsfsi>:
c0027985:	55                   	push   ebp
c0027986:	89 e5                	mov    ebp,esp
c0027988:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002798b:	89 d1                	mov    ecx,edx
c002798d:	c1 e1 08             	shl    ecx,0x8
c0027990:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027996:	c1 fa 17             	sar    edx,0x17
c0027999:	78 1c                	js     c00279b7 <__fixsfsi+0x32>
c002799b:	83 ea 7f             	sub    edx,0x7f
c002799e:	31 c0                	xor    eax,eax
c00279a0:	83 fa 1e             	cmp    edx,0x1e
c00279a3:	77 40                	ja     c00279e5 <__fixsfsi+0x60>
c00279a5:	89 c8                	mov    eax,ecx
c00279a7:	0d 00 00 00 80       	or     eax,0x80000000
c00279ac:	b9 1f 00 00 00       	mov    ecx,0x1f
c00279b1:	29 d1                	sub    ecx,edx
c00279b3:	d3 e8                	shr    eax,cl
c00279b5:	eb 2e                	jmp    c00279e5 <__fixsfsi+0x60>
c00279b7:	31 c0                	xor    eax,eax
c00279b9:	81 c2 81 00 00 00    	add    edx,0x81
c00279bf:	78 24                	js     c00279e5 <__fixsfsi+0x60>
c00279c1:	83 fa 1e             	cmp    edx,0x1e
c00279c4:	7e 09                	jle    c00279cf <__fixsfsi+0x4a>
c00279c6:	83 fa 1f             	cmp    edx,0x1f
c00279c9:	75 18                	jne    c00279e3 <__fixsfsi+0x5e>
c00279cb:	85 c9                	test   ecx,ecx
c00279cd:	75 14                	jne    c00279e3 <__fixsfsi+0x5e>
c00279cf:	89 c8                	mov    eax,ecx
c00279d1:	0d 00 00 00 80       	or     eax,0x80000000
c00279d6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00279db:	29 d1                	sub    ecx,edx
c00279dd:	d3 e8                	shr    eax,cl
c00279df:	f7 d8                	neg    eax
c00279e1:	eb 02                	jmp    c00279e5 <__fixsfsi+0x60>
c00279e3:	31 c0                	xor    eax,eax
c00279e5:	5d                   	pop    ebp
c00279e6:	c3                   	ret    

c00279e7 <__fixunssfsi>:
c00279e7:	55                   	push   ebp
c00279e8:	89 e5                	mov    ebp,esp
c00279ea:	53                   	push   ebx
c00279eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00279ee:	89 d3                	mov    ebx,edx
c00279f0:	c1 fb 17             	sar    ebx,0x17
c00279f3:	83 eb 7f             	sub    ebx,0x7f
c00279f6:	31 c0                	xor    eax,eax
c00279f8:	83 fb 1f             	cmp    ebx,0x1f
c00279fb:	77 18                	ja     c0027a15 <__fixunssfsi+0x2e>
c00279fd:	89 d0                	mov    eax,edx
c00279ff:	c1 e0 08             	shl    eax,0x8
c0027a02:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027a07:	0d 00 00 00 80       	or     eax,0x80000000
c0027a0c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027a11:	29 d9                	sub    ecx,ebx
c0027a13:	d3 e8                	shr    eax,cl
c0027a15:	5b                   	pop    ebx
c0027a16:	5d                   	pop    ebp
c0027a17:	c3                   	ret    

c0027a18 <__cmpsf2>:
c0027a18:	55                   	push   ebp
c0027a19:	89 e5                	mov    ebp,esp
c0027a1b:	57                   	push   edi
c0027a1c:	56                   	push   esi
c0027a1d:	53                   	push   ebx
c0027a1e:	83 ec 24             	sub    esp,0x24
c0027a21:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027a27:	e8 4f 10 00 00       	call   c0028a7b <__truncdfsf2>
c0027a2c:	5a                   	pop    edx
c0027a2d:	59                   	pop    ecx
c0027a2e:	89 c3                	mov    ebx,eax
c0027a30:	c1 e8 17             	shr    eax,0x17
c0027a33:	0f b6 f0             	movzx  esi,al
c0027a36:	89 d8                	mov    eax,ebx
c0027a38:	c1 e8 1f             	shr    eax,0x1f
c0027a3b:	31 c6                	xor    esi,eax
c0027a3d:	c1 e3 08             	shl    ebx,0x8
c0027a40:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027a43:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027a46:	e8 30 10 00 00       	call   c0028a7b <__truncdfsf2>
c0027a4b:	83 c4 10             	add    esp,0x10
c0027a4e:	89 c1                	mov    ecx,eax
c0027a50:	c1 e9 17             	shr    ecx,0x17
c0027a53:	0f b6 c9             	movzx  ecx,cl
c0027a56:	89 c7                	mov    edi,eax
c0027a58:	c1 ef 1f             	shr    edi,0x1f
c0027a5b:	89 ca                	mov    edx,ecx
c0027a5d:	31 fa                	xor    edx,edi
c0027a5f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027a62:	c1 e0 08             	shl    eax,0x8
c0027a65:	89 c2                	mov    edx,eax
c0027a67:	89 d8                	mov    eax,ebx
c0027a69:	09 d0                	or     eax,edx
c0027a6b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027a70:	09 f0                	or     eax,esi
c0027a72:	75 08                	jne    c0027a7c <__cmpsf2+0x64>
c0027a74:	31 c0                	xor    eax,eax
c0027a76:	39 f9                	cmp    ecx,edi
c0027a78:	75 0c                	jne    c0027a86 <__cmpsf2+0x6e>
c0027a7a:	eb 29                	jmp    c0027aa5 <__cmpsf2+0x8d>
c0027a7c:	b8 01 00 00 00       	mov    eax,0x1
c0027a81:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027a84:	7f 1f                	jg     c0027aa5 <__cmpsf2+0x8d>
c0027a86:	83 c8 ff             	or     eax,0xffffffff
c0027a89:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027a8c:	7c 17                	jl     c0027aa5 <__cmpsf2+0x8d>
c0027a8e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027a94:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027a9a:	b8 01 00 00 00       	mov    eax,0x1
c0027a9f:	39 d3                	cmp    ebx,edx
c0027aa1:	77 02                	ja     c0027aa5 <__cmpsf2+0x8d>
c0027aa3:	19 c0                	sbb    eax,eax
c0027aa5:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027aa8:	5b                   	pop    ebx
c0027aa9:	5e                   	pop    esi
c0027aaa:	5f                   	pop    edi
c0027aab:	5d                   	pop    ebp
c0027aac:	c3                   	ret    

c0027aad <__eqsf2>:
c0027aad:	55                   	push   ebp
c0027aae:	89 e5                	mov    ebp,esp
c0027ab0:	83 ec 24             	sub    esp,0x24
c0027ab3:	6a 01                	push   0x1
c0027ab5:	83 ec 0c             	sub    esp,0xc
c0027ab8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027abb:	e8 df 10 00 00       	call   c0028b9f <__extendsfdf2>
c0027ac0:	83 c4 10             	add    esp,0x10
c0027ac3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027ac6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027ac9:	52                   	push   edx
c0027aca:	50                   	push   eax
c0027acb:	50                   	push   eax
c0027acc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027acf:	e8 cb 10 00 00       	call   c0028b9f <__extendsfdf2>
c0027ad4:	59                   	pop    ecx
c0027ad5:	59                   	pop    ecx
c0027ad6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027ad9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027adc:	52                   	push   edx
c0027add:	50                   	push   eax
c0027ade:	e8 35 ff ff ff       	call   c0027a18 <__cmpsf2>
c0027ae3:	83 c4 20             	add    esp,0x20
c0027ae6:	c9                   	leave  
c0027ae7:	c3                   	ret    

c0027ae8 <__nesf2>:
c0027ae8:	eb c3                	jmp    c0027aad <__eqsf2>

c0027aea <__gtsf2>:
c0027aea:	55                   	push   ebp
c0027aeb:	89 e5                	mov    ebp,esp
c0027aed:	83 ec 24             	sub    esp,0x24
c0027af0:	6a ff                	push   0xffffffff
c0027af2:	83 ec 0c             	sub    esp,0xc
c0027af5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027af8:	e8 a2 10 00 00       	call   c0028b9f <__extendsfdf2>
c0027afd:	83 c4 10             	add    esp,0x10
c0027b00:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027b03:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027b06:	52                   	push   edx
c0027b07:	50                   	push   eax
c0027b08:	50                   	push   eax
c0027b09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027b0c:	e8 8e 10 00 00       	call   c0028b9f <__extendsfdf2>
c0027b11:	59                   	pop    ecx
c0027b12:	59                   	pop    ecx
c0027b13:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027b16:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027b19:	52                   	push   edx
c0027b1a:	50                   	push   eax
c0027b1b:	e8 f8 fe ff ff       	call   c0027a18 <__cmpsf2>
c0027b20:	83 c4 20             	add    esp,0x20
c0027b23:	c9                   	leave  
c0027b24:	c3                   	ret    

c0027b25 <__gesf2>:
c0027b25:	eb c3                	jmp    c0027aea <__gtsf2>

c0027b27 <__ltsf2>:
c0027b27:	eb 84                	jmp    c0027aad <__eqsf2>

c0027b29 <__lesf2>:
c0027b29:	eb 82                	jmp    c0027aad <__eqsf2>

c0027b2b <__adddf3>:
c0027b2b:	55                   	push   ebp
c0027b2c:	89 e5                	mov    ebp,esp
c0027b2e:	57                   	push   edi
c0027b2f:	56                   	push   esi
c0027b30:	53                   	push   ebx
c0027b31:	83 ec 24             	sub    esp,0x24
c0027b34:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027b37:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b3a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b3d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b40:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027b43:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027b46:	89 c8                	mov    eax,ecx
c0027b48:	89 ce                	mov    esi,ecx
c0027b4a:	c1 fe 14             	sar    esi,0x14
c0027b4d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027b50:	89 fb                	mov    ebx,edi
c0027b52:	89 fa                	mov    edx,edi
c0027b54:	c1 e2 0b             	shl    edx,0xb
c0027b57:	c1 e0 0b             	shl    eax,0xb
c0027b5a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027b5f:	c1 eb 15             	shr    ebx,0x15
c0027b62:	09 d8                	or     eax,ebx
c0027b64:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027b67:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027b6a:	c1 fe 14             	sar    esi,0x14
c0027b6d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027b70:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027b73:	89 f3                	mov    ebx,esi
c0027b75:	c1 e3 0b             	shl    ebx,0xb
c0027b78:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027b7b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027b7e:	c1 e3 0b             	shl    ebx,0xb
c0027b81:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027b87:	c1 ee 15             	shr    esi,0x15
c0027b8a:	09 f3                	or     ebx,esi
c0027b8c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027b8f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027b92:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027b95:	0f 88 5f 02 00 00    	js     c0027dfa <__adddf3+0x2cf>
c0027b9b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b9e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027ba1:	85 db                	test   ebx,ebx
c0027ba3:	0f 8e c7 00 00 00    	jle    c0027c70 <__adddf3+0x145>
c0027ba9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027bb0:	75 1a                	jne    c0027bcc <__adddf3+0xa1>
c0027bb2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027bb5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027bb8:	0f 84 b2 05 00 00    	je     c0028170 <__adddf3+0x645>
c0027bbe:	4b                   	dec    ebx
c0027bbf:	75 23                	jne    c0027be4 <__adddf3+0xb9>
c0027bc1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027bc4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027bc7:	e9 99 00 00 00       	jmp    c0027c65 <__adddf3+0x13a>
c0027bcc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027bcf:	f7 d6                	not    esi
c0027bd1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027bd7:	0f 84 93 05 00 00    	je     c0028170 <__adddf3+0x645>
c0027bdd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027be4:	83 fb 1f             	cmp    ebx,0x1f
c0027be7:	7e 42                	jle    c0027c2b <__adddf3+0x100>
c0027be9:	83 fb 3f             	cmp    ebx,0x3f
c0027bec:	0f 8f 7e 05 00 00    	jg     c0028170 <__adddf3+0x645>
c0027bf2:	83 e3 1f             	and    ebx,0x1f
c0027bf5:	89 d9                	mov    ecx,ebx
c0027bf7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027bfa:	d3 ef                	shr    edi,cl
c0027bfc:	31 db                	xor    ebx,ebx
c0027bfe:	85 c9                	test   ecx,ecx
c0027c00:	74 15                	je     c0027c17 <__adddf3+0xec>
c0027c02:	be 20 00 00 00       	mov    esi,0x20
c0027c07:	29 ce                	sub    esi,ecx
c0027c09:	89 f1                	mov    ecx,esi
c0027c0b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c0e:	d3 e6                	shl    esi,cl
c0027c10:	31 db                	xor    ebx,ebx
c0027c12:	85 f6                	test   esi,esi
c0027c14:	0f 95 c3             	setne  bl
c0027c17:	31 c9                	xor    ecx,ecx
c0027c19:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027c1d:	0f 95 c1             	setne  cl
c0027c20:	09 cf                	or     edi,ecx
c0027c22:	09 fb                	or     ebx,edi
c0027c24:	01 da                	add    edx,ebx
c0027c26:	83 d0 00             	adc    eax,0x0
c0027c29:	eb 3a                	jmp    c0027c65 <__adddf3+0x13a>
c0027c2b:	bf 20 00 00 00       	mov    edi,0x20
c0027c30:	29 df                	sub    edi,ebx
c0027c32:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c35:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c38:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027c3b:	d3 e6                	shl    esi,cl
c0027c3d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027c40:	88 d9                	mov    cl,bl
c0027c42:	d3 ef                	shr    edi,cl
c0027c44:	09 fe                	or     esi,edi
c0027c46:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027c49:	88 d9                	mov    cl,bl
c0027c4b:	d3 ef                	shr    edi,cl
c0027c4d:	89 fb                	mov    ebx,edi
c0027c4f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027c52:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027c55:	d3 e7                	shl    edi,cl
c0027c57:	85 ff                	test   edi,edi
c0027c59:	0f 95 c1             	setne  cl
c0027c5c:	0f b6 c9             	movzx  ecx,cl
c0027c5f:	09 ce                	or     esi,ecx
c0027c61:	01 f2                	add    edx,esi
c0027c63:	11 d8                	adc    eax,ebx
c0027c65:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c68:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c6b:	e9 52 01 00 00       	jmp    c0027dc2 <__adddf3+0x297>
c0027c70:	0f 84 d5 00 00 00    	je     c0027d4b <__adddf3+0x220>
c0027c76:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027c79:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027c7c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c7f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c82:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027c89:	75 20                	jne    c0027cab <__adddf3+0x180>
c0027c8b:	89 d6                	mov    esi,edx
c0027c8d:	09 c6                	or     esi,eax
c0027c8f:	0f 84 db 04 00 00    	je     c0028170 <__adddf3+0x645>
c0027c95:	4b                   	dec    ebx
c0027c96:	75 29                	jne    c0027cc1 <__adddf3+0x196>
c0027c98:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c9b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c9e:	01 d1                	add    ecx,edx
c0027ca0:	11 c6                	adc    esi,eax
c0027ca2:	89 f0                	mov    eax,esi
c0027ca4:	89 ca                	mov    edx,ecx
c0027ca6:	e9 17 01 00 00       	jmp    c0027dc2 <__adddf3+0x297>
c0027cab:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027cae:	f7 d6                	not    esi
c0027cb0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027cb6:	0f 84 b4 04 00 00    	je     c0028170 <__adddf3+0x645>
c0027cbc:	0d 00 00 00 80       	or     eax,0x80000000
c0027cc1:	83 fb 1f             	cmp    ebx,0x1f
c0027cc4:	7e 48                	jle    c0027d0e <__adddf3+0x1e3>
c0027cc6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027cc9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ccc:	83 fb 3f             	cmp    ebx,0x3f
c0027ccf:	0f 8f 9b 04 00 00    	jg     c0028170 <__adddf3+0x645>
c0027cd5:	83 e3 1f             	and    ebx,0x1f
c0027cd8:	89 d9                	mov    ecx,ebx
c0027cda:	89 c7                	mov    edi,eax
c0027cdc:	d3 ef                	shr    edi,cl
c0027cde:	31 db                	xor    ebx,ebx
c0027ce0:	85 c9                	test   ecx,ecx
c0027ce2:	74 12                	je     c0027cf6 <__adddf3+0x1cb>
c0027ce4:	be 20 00 00 00       	mov    esi,0x20
c0027ce9:	29 ce                	sub    esi,ecx
c0027ceb:	89 f1                	mov    ecx,esi
c0027ced:	d3 e0                	shl    eax,cl
c0027cef:	31 db                	xor    ebx,ebx
c0027cf1:	85 c0                	test   eax,eax
c0027cf3:	0f 95 c3             	setne  bl
c0027cf6:	31 c0                	xor    eax,eax
c0027cf8:	85 d2                	test   edx,edx
c0027cfa:	0f 95 c0             	setne  al
c0027cfd:	09 c7                	or     edi,eax
c0027cff:	09 fb                	or     ebx,edi
c0027d01:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d04:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d07:	01 da                	add    edx,ebx
c0027d09:	83 d6 00             	adc    esi,0x0
c0027d0c:	eb 39                	jmp    c0027d47 <__adddf3+0x21c>
c0027d0e:	be 20 00 00 00       	mov    esi,0x20
c0027d13:	29 de                	sub    esi,ebx
c0027d15:	89 c7                	mov    edi,eax
c0027d17:	89 f1                	mov    ecx,esi
c0027d19:	d3 e7                	shl    edi,cl
c0027d1b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027d1e:	89 d7                	mov    edi,edx
c0027d20:	88 d9                	mov    cl,bl
c0027d22:	d3 ef                	shr    edi,cl
c0027d24:	89 f9                	mov    ecx,edi
c0027d26:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d29:	09 cf                	or     edi,ecx
c0027d2b:	88 d9                	mov    cl,bl
c0027d2d:	d3 e8                	shr    eax,cl
c0027d2f:	89 f1                	mov    ecx,esi
c0027d31:	d3 e2                	shl    edx,cl
c0027d33:	85 d2                	test   edx,edx
c0027d35:	0f 95 c2             	setne  dl
c0027d38:	0f b6 d2             	movzx  edx,dl
c0027d3b:	09 d7                	or     edi,edx
c0027d3d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d40:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d43:	01 fa                	add    edx,edi
c0027d45:	11 c6                	adc    esi,eax
c0027d47:	89 f0                	mov    eax,esi
c0027d49:	eb 77                	jmp    c0027dc2 <__adddf3+0x297>
c0027d4b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027d4e:	46                   	inc    esi
c0027d4f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027d52:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027d58:	75 41                	jne    c0027d9b <__adddf3+0x270>
c0027d5a:	89 d3                	mov    ebx,edx
c0027d5c:	09 c3                	or     ebx,eax
c0027d5e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027d65:	75 27                	jne    c0027d8e <__adddf3+0x263>
c0027d67:	85 db                	test   ebx,ebx
c0027d69:	0f 84 fb 03 00 00    	je     c002816a <__adddf3+0x63f>
c0027d6f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027d72:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027d75:	0f 84 f5 03 00 00    	je     c0028170 <__adddf3+0x645>
c0027d7b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027d7e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027d81:	85 c0                	test   eax,eax
c0027d83:	0f 89 91 03 00 00    	jns    c002811a <__adddf3+0x5ef>
c0027d89:	e9 85 03 00 00       	jmp    c0028113 <__adddf3+0x5e8>
c0027d8e:	85 db                	test   ebx,ebx
c0027d90:	0f 85 da 03 00 00    	jne    c0028170 <__adddf3+0x645>
c0027d96:	e9 cf 03 00 00       	jmp    c002816a <__adddf3+0x63f>
c0027d9b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027d9e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027da1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027da4:	f7 d1                	not    ecx
c0027da6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027dac:	0f 84 70 03 00 00    	je     c0028122 <__adddf3+0x5f7>
c0027db2:	d1 ea                	shr    edx,1
c0027db4:	89 c1                	mov    ecx,eax
c0027db6:	c1 e1 1f             	shl    ecx,0x1f
c0027db9:	09 ca                	or     edx,ecx
c0027dbb:	d1 e8                	shr    eax,1
c0027dbd:	e9 6f 03 00 00       	jmp    c0028131 <__adddf3+0x606>
c0027dc2:	85 c0                	test   eax,eax
c0027dc4:	0f 89 67 03 00 00    	jns    c0028131 <__adddf3+0x606>
c0027dca:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027dcd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027dd0:	f7 d1                	not    ecx
c0027dd2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027dd8:	0f 84 44 03 00 00    	je     c0028122 <__adddf3+0x5f7>
c0027dde:	89 d1                	mov    ecx,edx
c0027de0:	d1 e9                	shr    ecx,1
c0027de2:	83 e2 01             	and    edx,0x1
c0027de5:	09 ca                	or     edx,ecx
c0027de7:	89 c1                	mov    ecx,eax
c0027de9:	c1 e1 1f             	shl    ecx,0x1f
c0027dec:	09 ca                	or     edx,ecx
c0027dee:	d1 e8                	shr    eax,1
c0027df0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027df5:	e9 37 03 00 00       	jmp    c0028131 <__adddf3+0x606>
c0027dfa:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027dfd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027e03:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027e06:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e09:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027e0f:	29 de                	sub    esi,ebx
c0027e11:	85 f6                	test   esi,esi
c0027e13:	0f 8e bd 00 00 00    	jle    c0027ed6 <__adddf3+0x3ab>
c0027e19:	85 db                	test   ebx,ebx
c0027e1b:	75 17                	jne    c0027e34 <__adddf3+0x309>
c0027e1d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027e20:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027e23:	0f 84 47 03 00 00    	je     c0028170 <__adddf3+0x645>
c0027e29:	4e                   	dec    esi
c0027e2a:	75 20                	jne    c0027e4c <__adddf3+0x321>
c0027e2c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027e2f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027e32:	eb 5b                	jmp    c0027e8f <__adddf3+0x364>
c0027e34:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027e37:	f7 d3                	not    ebx
c0027e39:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027e3f:	0f 84 2b 03 00 00    	je     c0028170 <__adddf3+0x645>
c0027e45:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027e4c:	83 fe 1f             	cmp    esi,0x1f
c0027e4f:	7e 49                	jle    c0027e9a <__adddf3+0x36f>
c0027e51:	83 fe 3f             	cmp    esi,0x3f
c0027e54:	0f 8f 16 03 00 00    	jg     c0028170 <__adddf3+0x645>
c0027e5a:	83 e6 1f             	and    esi,0x1f
c0027e5d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e60:	89 f1                	mov    ecx,esi
c0027e62:	d3 ef                	shr    edi,cl
c0027e64:	31 db                	xor    ebx,ebx
c0027e66:	85 f6                	test   esi,esi
c0027e68:	74 13                	je     c0027e7d <__adddf3+0x352>
c0027e6a:	b9 20 00 00 00       	mov    ecx,0x20
c0027e6f:	29 f1                	sub    ecx,esi
c0027e71:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e74:	d3 e6                	shl    esi,cl
c0027e76:	31 db                	xor    ebx,ebx
c0027e78:	85 f6                	test   esi,esi
c0027e7a:	0f 95 c3             	setne  bl
c0027e7d:	31 c9                	xor    ecx,ecx
c0027e7f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027e83:	0f 95 c1             	setne  cl
c0027e86:	09 cf                	or     edi,ecx
c0027e88:	09 fb                	or     ebx,edi
c0027e8a:	29 da                	sub    edx,ebx
c0027e8c:	83 d8 00             	sbb    eax,0x0
c0027e8f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e92:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e95:	e9 aa 01 00 00       	jmp    c0028044 <__adddf3+0x519>
c0027e9a:	bf 20 00 00 00       	mov    edi,0x20
c0027e9f:	29 f7                	sub    edi,esi
c0027ea1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ea4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027ea7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027eaa:	d3 e3                	shl    ebx,cl
c0027eac:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027eaf:	89 f1                	mov    ecx,esi
c0027eb1:	d3 ef                	shr    edi,cl
c0027eb3:	09 fb                	or     ebx,edi
c0027eb5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027eb8:	89 f1                	mov    ecx,esi
c0027eba:	d3 ef                	shr    edi,cl
c0027ebc:	89 fe                	mov    esi,edi
c0027ebe:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027ec1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027ec4:	d3 e7                	shl    edi,cl
c0027ec6:	85 ff                	test   edi,edi
c0027ec8:	0f 95 c1             	setne  cl
c0027ecb:	0f b6 c9             	movzx  ecx,cl
c0027ece:	09 cb                	or     ebx,ecx
c0027ed0:	29 da                	sub    edx,ebx
c0027ed2:	19 f0                	sbb    eax,esi
c0027ed4:	eb b9                	jmp    c0027e8f <__adddf3+0x364>
c0027ed6:	0f 84 cd 00 00 00    	je     c0027fa9 <__adddf3+0x47e>
c0027edc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027edf:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ee2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ee5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027ee9:	75 1b                	jne    c0027f06 <__adddf3+0x3db>
c0027eeb:	89 d6                	mov    esi,edx
c0027eed:	09 c6                	or     esi,eax
c0027eef:	0f 84 7b 02 00 00    	je     c0028170 <__adddf3+0x645>
c0027ef5:	4b                   	dec    ebx
c0027ef6:	75 24                	jne    c0027f1c <__adddf3+0x3f1>
c0027ef8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027efb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027efe:	29 d1                	sub    ecx,edx
c0027f00:	19 c6                	sbb    esi,eax
c0027f02:	89 ca                	mov    edx,ecx
c0027f04:	eb 61                	jmp    c0027f67 <__adddf3+0x43c>
c0027f06:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f09:	f7 d6                	not    esi
c0027f0b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f11:	0f 84 59 02 00 00    	je     c0028170 <__adddf3+0x645>
c0027f17:	0d 00 00 00 80       	or     eax,0x80000000
c0027f1c:	83 fb 1f             	cmp    ebx,0x1f
c0027f1f:	7e 4d                	jle    c0027f6e <__adddf3+0x443>
c0027f21:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027f24:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027f27:	83 fb 3f             	cmp    ebx,0x3f
c0027f2a:	0f 8f 40 02 00 00    	jg     c0028170 <__adddf3+0x645>
c0027f30:	83 e3 1f             	and    ebx,0x1f
c0027f33:	89 d9                	mov    ecx,ebx
c0027f35:	89 c7                	mov    edi,eax
c0027f37:	d3 ef                	shr    edi,cl
c0027f39:	31 db                	xor    ebx,ebx
c0027f3b:	85 c9                	test   ecx,ecx
c0027f3d:	74 12                	je     c0027f51 <__adddf3+0x426>
c0027f3f:	be 20 00 00 00       	mov    esi,0x20
c0027f44:	29 ce                	sub    esi,ecx
c0027f46:	89 f1                	mov    ecx,esi
c0027f48:	d3 e0                	shl    eax,cl
c0027f4a:	31 db                	xor    ebx,ebx
c0027f4c:	85 c0                	test   eax,eax
c0027f4e:	0f 95 c3             	setne  bl
c0027f51:	31 c0                	xor    eax,eax
c0027f53:	85 d2                	test   edx,edx
c0027f55:	0f 95 c0             	setne  al
c0027f58:	09 c7                	or     edi,eax
c0027f5a:	09 fb                	or     ebx,edi
c0027f5c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f5f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f62:	29 da                	sub    edx,ebx
c0027f64:	83 de 00             	sbb    esi,0x0
c0027f67:	89 f0                	mov    eax,esi
c0027f69:	e9 d6 00 00 00       	jmp    c0028044 <__adddf3+0x519>
c0027f6e:	be 20 00 00 00       	mov    esi,0x20
c0027f73:	29 de                	sub    esi,ebx
c0027f75:	89 c7                	mov    edi,eax
c0027f77:	89 f1                	mov    ecx,esi
c0027f79:	d3 e7                	shl    edi,cl
c0027f7b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027f7e:	89 d7                	mov    edi,edx
c0027f80:	88 d9                	mov    cl,bl
c0027f82:	d3 ef                	shr    edi,cl
c0027f84:	89 f9                	mov    ecx,edi
c0027f86:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f89:	09 cf                	or     edi,ecx
c0027f8b:	88 d9                	mov    cl,bl
c0027f8d:	d3 e8                	shr    eax,cl
c0027f8f:	89 f1                	mov    ecx,esi
c0027f91:	d3 e2                	shl    edx,cl
c0027f93:	85 d2                	test   edx,edx
c0027f95:	0f 95 c2             	setne  dl
c0027f98:	0f b6 d2             	movzx  edx,dl
c0027f9b:	09 d7                	or     edi,edx
c0027f9d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fa0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027fa3:	29 fa                	sub    edx,edi
c0027fa5:	19 c6                	sbb    esi,eax
c0027fa7:	eb be                	jmp    c0027f67 <__adddf3+0x43c>
c0027fa9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027fac:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027faf:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027fb5:	75 6a                	jne    c0028021 <__adddf3+0x4f6>
c0027fb7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027fbb:	75 58                	jne    c0028015 <__adddf3+0x4ea>
c0027fbd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027fc0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027fc3:	89 d6                	mov    esi,edx
c0027fc5:	09 c6                	or     esi,eax
c0027fc7:	75 17                	jne    c0027fe0 <__adddf3+0x4b5>
c0027fc9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027fcc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027fcf:	85 db                	test   ebx,ebx
c0027fd1:	0f 85 99 01 00 00    	jne    c0028170 <__adddf3+0x645>
c0027fd7:	31 ff                	xor    edi,edi
c0027fd9:	31 c9                	xor    ecx,ecx
c0027fdb:	e9 90 01 00 00       	jmp    c0028170 <__adddf3+0x645>
c0027fe0:	85 db                	test   ebx,ebx
c0027fe2:	0f 84 88 01 00 00    	je     c0028170 <__adddf3+0x645>
c0027fe8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027feb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027fee:	85 c0                	test   eax,eax
c0027ff0:	79 10                	jns    c0028002 <__adddf3+0x4d7>
c0027ff2:	31 c9                	xor    ecx,ecx
c0027ff4:	f7 da                	neg    edx
c0027ff6:	0f 95 c1             	setne  cl
c0027ff9:	01 c8                	add    eax,ecx
c0027ffb:	f7 d8                	neg    eax
c0027ffd:	e9 2f 01 00 00       	jmp    c0028131 <__adddf3+0x606>
c0028002:	31 ff                	xor    edi,edi
c0028004:	31 c9                	xor    ecx,ecx
c0028006:	89 c3                	mov    ebx,eax
c0028008:	09 d3                	or     ebx,edx
c002800a:	0f 84 60 01 00 00    	je     c0028170 <__adddf3+0x645>
c0028010:	e9 05 01 00 00       	jmp    c002811a <__adddf3+0x5ef>
c0028015:	31 ff                	xor    edi,edi
c0028017:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002801c:	e9 4f 01 00 00       	jmp    c0028170 <__adddf3+0x645>
c0028021:	89 c1                	mov    ecx,eax
c0028023:	89 d0                	mov    eax,edx
c0028025:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028028:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002802b:	89 ca                	mov    edx,ecx
c002802d:	85 c9                	test   ecx,ecx
c002802f:	79 2c                	jns    c002805d <__adddf3+0x532>
c0028031:	31 c9                	xor    ecx,ecx
c0028033:	f7 d8                	neg    eax
c0028035:	0f 95 c1             	setne  cl
c0028038:	01 ca                	add    edx,ecx
c002803a:	f7 da                	neg    edx
c002803c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002803f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028042:	eb 19                	jmp    c002805d <__adddf3+0x532>
c0028044:	85 c0                	test   eax,eax
c0028046:	0f 89 e5 00 00 00    	jns    c0028131 <__adddf3+0x606>
c002804c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028051:	89 c1                	mov    ecx,eax
c0028053:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028056:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028059:	89 d0                	mov    eax,edx
c002805b:	89 ca                	mov    edx,ecx
c002805d:	85 d2                	test   edx,edx
c002805f:	74 59                	je     c00280ba <__adddf3+0x58f>
c0028061:	0f bd da             	bsr    ebx,edx
c0028064:	83 f3 1f             	xor    ebx,0x1f
c0028067:	88 d9                	mov    cl,bl
c0028069:	d3 e2                	shl    edx,cl
c002806b:	bf 20 00 00 00       	mov    edi,0x20
c0028070:	89 f9                	mov    ecx,edi
c0028072:	29 d9                	sub    ecx,ebx
c0028074:	89 c6                	mov    esi,eax
c0028076:	d3 ee                	shr    esi,cl
c0028078:	09 d6                	or     esi,edx
c002807a:	88 d9                	mov    cl,bl
c002807c:	d3 e0                	shl    eax,cl
c002807e:	89 c2                	mov    edx,eax
c0028080:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028083:	25 ff 07 00 00       	and    eax,0x7ff
c0028088:	39 d8                	cmp    eax,ebx
c002808a:	7f 22                	jg     c00280ae <__adddf3+0x583>
c002808c:	29 c3                	sub    ebx,eax
c002808e:	43                   	inc    ebx
c002808f:	88 d9                	mov    cl,bl
c0028091:	d3 ea                	shr    edx,cl
c0028093:	29 df                	sub    edi,ebx
c0028095:	89 f9                	mov    ecx,edi
c0028097:	89 f0                	mov    eax,esi
c0028099:	d3 e0                	shl    eax,cl
c002809b:	09 c2                	or     edx,eax
c002809d:	89 f0                	mov    eax,esi
c002809f:	88 d9                	mov    cl,bl
c00280a1:	d3 e8                	shr    eax,cl
c00280a3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280a6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00280ac:	eb 6f                	jmp    c002811d <__adddf3+0x5f2>
c00280ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00280b1:	29 d8                	sub    eax,ebx
c00280b3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00280b6:	89 f0                	mov    eax,esi
c00280b8:	eb 59                	jmp    c0028113 <__adddf3+0x5e8>
c00280ba:	85 c0                	test   eax,eax
c00280bc:	74 6a                	je     c0028128 <__adddf3+0x5fd>
c00280be:	0f bd c8             	bsr    ecx,eax
c00280c1:	83 f1 1f             	xor    ecx,0x1f
c00280c4:	d3 e0                	shl    eax,cl
c00280c6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00280c9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00280cf:	83 c1 20             	add    ecx,0x20
c00280d2:	39 cb                	cmp    ebx,ecx
c00280d4:	7f 35                	jg     c002810b <__adddf3+0x5e0>
c00280d6:	29 d9                	sub    ecx,ebx
c00280d8:	8d 71 01             	lea    esi,[ecx+0x1]
c00280db:	83 fe 1f             	cmp    esi,0x1f
c00280de:	7e 09                	jle    c00280e9 <__adddf3+0x5be>
c00280e0:	83 e9 1f             	sub    ecx,0x1f
c00280e3:	d3 e8                	shr    eax,cl
c00280e5:	89 c3                	mov    ebx,eax
c00280e7:	eb 11                	jmp    c00280fa <__adddf3+0x5cf>
c00280e9:	b9 20 00 00 00       	mov    ecx,0x20
c00280ee:	29 f1                	sub    ecx,esi
c00280f0:	89 c3                	mov    ebx,eax
c00280f2:	d3 e3                	shl    ebx,cl
c00280f4:	89 f1                	mov    ecx,esi
c00280f6:	d3 e8                	shr    eax,cl
c00280f8:	89 c2                	mov    edx,eax
c00280fa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00280fd:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028102:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028105:	89 d0                	mov    eax,edx
c0028107:	89 da                	mov    edx,ebx
c0028109:	eb 26                	jmp    c0028131 <__adddf3+0x606>
c002810b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002810e:	29 cf                	sub    edi,ecx
c0028110:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028113:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028118:	eb 17                	jmp    c0028131 <__adddf3+0x606>
c002811a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002811d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028120:	eb 0f                	jmp    c0028131 <__adddf3+0x606>
c0028122:	31 d2                	xor    edx,edx
c0028124:	31 c0                	xor    eax,eax
c0028126:	eb 09                	jmp    c0028131 <__adddf3+0x606>
c0028128:	89 c2                	mov    edx,eax
c002812a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028131:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028134:	c1 e1 14             	shl    ecx,0x14
c0028137:	89 c3                	mov    ebx,eax
c0028139:	c1 eb 0b             	shr    ebx,0xb
c002813c:	09 d9                	or     ecx,ebx
c002813e:	89 d3                	mov    ebx,edx
c0028140:	c1 eb 0b             	shr    ebx,0xb
c0028143:	c1 e0 15             	shl    eax,0x15
c0028146:	09 d8                	or     eax,ebx
c0028148:	89 c7                	mov    edi,eax
c002814a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028150:	0f 95 c0             	setne  al
c0028153:	89 c6                	mov    esi,eax
c0028155:	09 f3                	or     ebx,esi
c0028157:	83 e3 01             	and    ebx,0x1
c002815a:	c1 ea 0a             	shr    edx,0xa
c002815d:	21 da                	and    edx,ebx
c002815f:	89 f8                	mov    eax,edi
c0028161:	01 d0                	add    eax,edx
c0028163:	83 d1 00             	adc    ecx,0x0
c0028166:	89 c7                	mov    edi,eax
c0028168:	eb 06                	jmp    c0028170 <__adddf3+0x645>
c002816a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002816d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028170:	89 f8                	mov    eax,edi
c0028172:	89 ca                	mov    edx,ecx
c0028174:	83 c4 24             	add    esp,0x24
c0028177:	5b                   	pop    ebx
c0028178:	5e                   	pop    esi
c0028179:	5f                   	pop    edi
c002817a:	5d                   	pop    ebp
c002817b:	c3                   	ret    

c002817c <__subdf3>:
c002817c:	55                   	push   ebp
c002817d:	89 e5                	mov    ebp,esp
c002817f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028182:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028185:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002818b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002818e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028191:	5d                   	pop    ebp
c0028192:	e9 94 f9 ff ff       	jmp    c0027b2b <__adddf3>

c0028197 <__negdf2>:
c0028197:	55                   	push   ebp
c0028198:	89 e5                	mov    ebp,esp
c002819a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002819d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00281a0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00281a6:	5d                   	pop    ebp
c00281a7:	c3                   	ret    

c00281a8 <__muldf3>:
c00281a8:	55                   	push   ebp
c00281a9:	89 e5                	mov    ebp,esp
c00281ab:	57                   	push   edi
c00281ac:	56                   	push   esi
c00281ad:	53                   	push   ebx
c00281ae:	83 ec 24             	sub    esp,0x24
c00281b1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00281b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00281b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00281ba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00281bd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00281c0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00281c3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281c6:	89 c8                	mov    eax,ecx
c00281c8:	c1 f8 14             	sar    eax,0x14
c00281cb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00281ce:	89 f8                	mov    eax,edi
c00281d0:	89 fb                	mov    ebx,edi
c00281d2:	c1 e3 0b             	shl    ebx,0xb
c00281d5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00281d8:	c1 e1 0b             	shl    ecx,0xb
c00281db:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00281e1:	c1 e8 15             	shr    eax,0x15
c00281e4:	09 c1                	or     ecx,eax
c00281e6:	89 d6                	mov    esi,edx
c00281e8:	89 d0                	mov    eax,edx
c00281ea:	c1 f8 14             	sar    eax,0x14
c00281ed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00281f0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00281f3:	89 c3                	mov    ebx,eax
c00281f5:	c1 e3 0b             	shl    ebx,0xb
c00281f8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00281fb:	c1 e6 0b             	shl    esi,0xb
c00281fe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028204:	c1 e8 15             	shr    eax,0x15
c0028207:	09 c6                	or     esi,eax
c0028209:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002820c:	25 ff 07 00 00       	and    eax,0x7ff
c0028211:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028214:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028217:	25 ff 07 00 00       	and    eax,0x7ff
c002821c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002821f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028222:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028225:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002822c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002822f:	40                   	inc    eax
c0028230:	a9 fe 07 00 00       	test   eax,0x7fe
c0028235:	0f 85 8d 00 00 00    	jne    c00282c8 <__muldf3+0x120>
c002823b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002823e:	09 c8                	or     eax,ecx
c0028240:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028244:	74 44                	je     c002828a <__muldf3+0xe2>
c0028246:	85 c0                	test   eax,eax
c0028248:	0f 85 31 02 00 00    	jne    c002847f <__muldf3+0x2d7>
c002824e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028251:	40                   	inc    eax
c0028252:	a9 fe 07 00 00       	test   eax,0x7fe
c0028257:	75 13                	jne    c002826c <__muldf3+0xc4>
c0028259:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002825c:	09 f1                	or     ecx,esi
c002825e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028262:	74 22                	je     c0028286 <__muldf3+0xde>
c0028264:	85 c9                	test   ecx,ecx
c0028266:	0f 85 0d 02 00 00    	jne    c0028479 <__muldf3+0x2d1>
c002826c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028270:	0f 89 09 02 00 00    	jns    c002847f <__muldf3+0x2d7>
c0028276:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028279:	05 00 00 00 80       	add    eax,0x80000000
c002827e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028281:	e9 f9 01 00 00       	jmp    c002847f <__muldf3+0x2d7>
c0028286:	85 c9                	test   ecx,ecx
c0028288:	eb 2e                	jmp    c00282b8 <__muldf3+0x110>
c002828a:	85 c0                	test   eax,eax
c002828c:	74 20                	je     c00282ae <__muldf3+0x106>
c002828e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028291:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028294:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028297:	c1 ef 1f             	shr    edi,0x1f
c002829a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002829d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00282a0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00282a3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00282a6:	09 f9                	or     ecx,edi
c00282a8:	78 1e                	js     c00282c8 <__muldf3+0x120>
c00282aa:	89 c3                	mov    ebx,eax
c00282ac:	eb e0                	jmp    c002828e <__muldf3+0xe6>
c00282ae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00282b1:	f7 d0                	not    eax
c00282b3:	a9 ff 07 00 00       	test   eax,0x7ff
c00282b8:	75 b2                	jne    c002826c <__muldf3+0xc4>
c00282ba:	31 ff                	xor    edi,edi
c00282bc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00282c3:	e9 b7 01 00 00       	jmp    c002847f <__muldf3+0x2d7>
c00282c8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00282cb:	40                   	inc    eax
c00282cc:	a9 fe 07 00 00       	test   eax,0x7fe
c00282d1:	75 57                	jne    c002832a <__muldf3+0x182>
c00282d3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00282d6:	09 f0                	or     eax,esi
c00282d8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00282dc:	74 23                	je     c0028301 <__muldf3+0x159>
c00282de:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00282e2:	0f 89 91 01 00 00    	jns    c0028479 <__muldf3+0x2d1>
c00282e8:	85 c0                	test   eax,eax
c00282ea:	0f 85 89 01 00 00    	jne    c0028479 <__muldf3+0x2d1>
c00282f0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00282f3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00282f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00282fc:	e9 7e 01 00 00       	jmp    c002847f <__muldf3+0x2d7>
c0028301:	85 c0                	test   eax,eax
c0028303:	75 0c                	jne    c0028311 <__muldf3+0x169>
c0028305:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028309:	0f 89 6a 01 00 00    	jns    c0028479 <__muldf3+0x2d1>
c002830f:	eb df                	jmp    c00282f0 <__muldf3+0x148>
c0028311:	01 f6                	add    esi,esi
c0028313:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028316:	c1 ea 1f             	shr    edx,0x1f
c0028319:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002831c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002831f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028322:	09 d6                	or     esi,edx
c0028324:	78 04                	js     c002832a <__muldf3+0x182>
c0028326:	89 c3                	mov    ebx,eax
c0028328:	eb e7                	jmp    c0028311 <__muldf3+0x169>
c002832a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028330:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028336:	89 c8                	mov    eax,ecx
c0028338:	f7 e6                	mul    esi
c002833a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002833d:	89 c7                	mov    edi,eax
c002833f:	89 c8                	mov    eax,ecx
c0028341:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028344:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028347:	89 c1                	mov    ecx,eax
c0028349:	89 f0                	mov    eax,esi
c002834b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002834e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028351:	89 c6                	mov    esi,eax
c0028353:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028356:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028359:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002835c:	31 c0                	xor    eax,eax
c002835e:	01 f1                	add    ecx,esi
c0028360:	0f 92 c0             	setb   al
c0028363:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028366:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028369:	83 d6 00             	adc    esi,0x0
c002836c:	01 c7                	add    edi,eax
c002836e:	83 d6 00             	adc    esi,0x0
c0028371:	01 ca                	add    edx,ecx
c0028373:	0f 92 c1             	setb   cl
c0028376:	0f b6 c9             	movzx  ecx,cl
c0028379:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002837c:	83 d6 00             	adc    esi,0x0
c002837f:	01 cf                	add    edi,ecx
c0028381:	83 d6 00             	adc    esi,0x0
c0028384:	31 c9                	xor    ecx,ecx
c0028386:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028389:	0f 95 c1             	setne  cl
c002838c:	09 cf                	or     edi,ecx
c002838e:	85 f6                	test   esi,esi
c0028390:	78 0c                	js     c002839e <__muldf3+0x1f6>
c0028392:	01 f6                	add    esi,esi
c0028394:	89 f8                	mov    eax,edi
c0028396:	c1 e8 1f             	shr    eax,0x1f
c0028399:	09 c6                	or     esi,eax
c002839b:	01 ff                	add    edi,edi
c002839d:	4b                   	dec    ebx
c002839e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00283a4:	0f 8f 85 00 00 00    	jg     c002842f <__muldf3+0x287>
c00283aa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00283b0:	85 db                	test   ebx,ebx
c00283b2:	0f 8f 84 00 00 00    	jg     c002843c <__muldf3+0x294>
c00283b8:	83 fb cc             	cmp    ebx,0xffffffcc
c00283bb:	7c 79                	jl     c0028436 <__muldf3+0x28e>
c00283bd:	ba 01 00 00 00       	mov    edx,0x1
c00283c2:	29 da                	sub    edx,ebx
c00283c4:	81 ce 00 00 00 80    	or     esi,0x80000000
c00283ca:	83 fa 1f             	cmp    edx,0x1f
c00283cd:	7e 30                	jle    c00283ff <__muldf3+0x257>
c00283cf:	83 fa 20             	cmp    edx,0x20
c00283d2:	75 0b                	jne    c00283df <__muldf3+0x237>
c00283d4:	31 c0                	xor    eax,eax
c00283d6:	85 ff                	test   edi,edi
c00283d8:	0f 95 c0             	setne  al
c00283db:	89 c7                	mov    edi,eax
c00283dd:	eb 1a                	jmp    c00283f9 <__muldf3+0x251>
c00283df:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00283e2:	89 f0                	mov    eax,esi
c00283e4:	d3 e0                	shl    eax,cl
c00283e6:	09 f8                	or     eax,edi
c00283e8:	0f 95 c0             	setne  al
c00283eb:	0f b6 c0             	movzx  eax,al
c00283ee:	89 c7                	mov    edi,eax
c00283f0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00283f5:	29 d9                	sub    ecx,ebx
c00283f7:	d3 ee                	shr    esi,cl
c00283f9:	09 f7                	or     edi,esi
c00283fb:	31 db                	xor    ebx,ebx
c00283fd:	eb 3b                	jmp    c002843a <__muldf3+0x292>
c00283ff:	83 c3 1f             	add    ebx,0x1f
c0028402:	89 f0                	mov    eax,esi
c0028404:	88 d9                	mov    cl,bl
c0028406:	d3 e0                	shl    eax,cl
c0028408:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002840b:	89 f8                	mov    eax,edi
c002840d:	88 d1                	mov    cl,dl
c002840f:	d3 e8                	shr    eax,cl
c0028411:	89 c1                	mov    ecx,eax
c0028413:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028416:	09 c8                	or     eax,ecx
c0028418:	88 d9                	mov    cl,bl
c002841a:	d3 e7                	shl    edi,cl
c002841c:	31 db                	xor    ebx,ebx
c002841e:	85 ff                	test   edi,edi
c0028420:	0f 95 c3             	setne  bl
c0028423:	89 df                	mov    edi,ebx
c0028425:	09 c7                	or     edi,eax
c0028427:	88 d1                	mov    cl,dl
c0028429:	d3 ee                	shr    esi,cl
c002842b:	31 db                	xor    ebx,ebx
c002842d:	eb 0d                	jmp    c002843c <__muldf3+0x294>
c002842f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028434:	eb 02                	jmp    c0028438 <__muldf3+0x290>
c0028436:	31 db                	xor    ebx,ebx
c0028438:	31 ff                	xor    edi,edi
c002843a:	31 f6                	xor    esi,esi
c002843c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002843f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028442:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028447:	09 c3                	or     ebx,eax
c0028449:	c1 e3 14             	shl    ebx,0x14
c002844c:	89 f0                	mov    eax,esi
c002844e:	c1 e8 0b             	shr    eax,0xb
c0028451:	09 c3                	or     ebx,eax
c0028453:	89 f8                	mov    eax,edi
c0028455:	c1 e8 0b             	shr    eax,0xb
c0028458:	c1 e6 15             	shl    esi,0x15
c002845b:	09 c6                	or     esi,eax
c002845d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028463:	0f 95 c1             	setne  cl
c0028466:	09 c8                	or     eax,ecx
c0028468:	83 e0 01             	and    eax,0x1
c002846b:	c1 ef 0a             	shr    edi,0xa
c002846e:	21 c7                	and    edi,eax
c0028470:	01 f7                	add    edi,esi
c0028472:	83 d3 00             	adc    ebx,0x0
c0028475:	89 da                	mov    edx,ebx
c0028477:	eb 03                	jmp    c002847c <__muldf3+0x2d4>
c0028479:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002847c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002847f:	89 f8                	mov    eax,edi
c0028481:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028484:	83 c4 24             	add    esp,0x24
c0028487:	5b                   	pop    ebx
c0028488:	5e                   	pop    esi
c0028489:	5f                   	pop    edi
c002848a:	5d                   	pop    ebp
c002848b:	c3                   	ret    

c002848c <__divdf3>:
c002848c:	55                   	push   ebp
c002848d:	89 e5                	mov    ebp,esp
c002848f:	57                   	push   edi
c0028490:	56                   	push   esi
c0028491:	53                   	push   ebx
c0028492:	83 ec 2c             	sub    esp,0x2c
c0028495:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028498:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002849b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002849e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00284a1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00284a4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00284a7:	89 ce                	mov    esi,ecx
c00284a9:	89 c8                	mov    eax,ecx
c00284ab:	c1 f8 14             	sar    eax,0x14
c00284ae:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00284b1:	89 f8                	mov    eax,edi
c00284b3:	89 fb                	mov    ebx,edi
c00284b5:	c1 e3 0b             	shl    ebx,0xb
c00284b8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00284bb:	c1 e6 0b             	shl    esi,0xb
c00284be:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00284c4:	c1 e8 15             	shr    eax,0x15
c00284c7:	09 c6                	or     esi,eax
c00284c9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00284cc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00284cf:	89 c2                	mov    edx,eax
c00284d1:	c1 fa 14             	sar    edx,0x14
c00284d4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00284d7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00284da:	89 de                	mov    esi,ebx
c00284dc:	c1 e6 0b             	shl    esi,0xb
c00284df:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00284e2:	c1 e0 0b             	shl    eax,0xb
c00284e5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00284ea:	c1 eb 15             	shr    ebx,0x15
c00284ed:	09 d8                	or     eax,ebx
c00284ef:	89 c2                	mov    edx,eax
c00284f1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00284f4:	25 ff 07 00 00       	and    eax,0x7ff
c00284f9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00284fc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00284ff:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028505:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028508:	29 d8                	sub    eax,ebx
c002850a:	05 ff 03 00 00       	add    eax,0x3ff
c002850f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028512:	46                   	inc    esi
c0028513:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028519:	0f 85 a5 00 00 00    	jne    c00285c4 <__divdf3+0x138>
c002851f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028522:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028525:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028529:	74 2a                	je     c0028555 <__divdf3+0xc9>
c002852b:	85 f6                	test   esi,esi
c002852d:	0f 85 cc 02 00 00    	jne    c00287ff <__divdf3+0x373>
c0028533:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028536:	40                   	inc    eax
c0028537:	a9 fe 07 00 00       	test   eax,0x7fe
c002853c:	75 26                	jne    c0028564 <__divdf3+0xd8>
c002853e:	85 db                	test   ebx,ebx
c0028540:	74 22                	je     c0028564 <__divdf3+0xd8>
c0028542:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028545:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028548:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002854b:	09 d0                	or     eax,edx
c002854d:	0f 85 ac 02 00 00    	jne    c00287ff <__divdf3+0x373>
c0028553:	eb 63                	jmp    c00285b8 <__divdf3+0x12c>
c0028555:	85 f6                	test   esi,esi
c0028557:	75 22                	jne    c002857b <__divdf3+0xef>
c0028559:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002855c:	40                   	inc    eax
c002855d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028562:	74 36                	je     c002859a <__divdf3+0x10e>
c0028564:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028568:	0f 89 91 02 00 00    	jns    c00287ff <__divdf3+0x373>
c002856e:	89 f8                	mov    eax,edi
c0028570:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028576:	e9 80 02 00 00       	jmp    c00287fb <__divdf3+0x36f>
c002857b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002857e:	01 f6                	add    esi,esi
c0028580:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028583:	c1 ef 1f             	shr    edi,0x1f
c0028586:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028589:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002858c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002858f:	09 f7                	or     edi,esi
c0028591:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028594:	78 2e                	js     c00285c4 <__divdf3+0x138>
c0028596:	89 c8                	mov    eax,ecx
c0028598:	eb e1                	jmp    c002857b <__divdf3+0xef>
c002859a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002859d:	09 d0                	or     eax,edx
c002859f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00285a3:	74 0f                	je     c00285b4 <__divdf3+0x128>
c00285a5:	85 c0                	test   eax,eax
c00285a7:	74 bb                	je     c0028564 <__divdf3+0xd8>
c00285a9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00285ac:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00285af:	e9 4b 02 00 00       	jmp    c00287ff <__divdf3+0x373>
c00285b4:	85 c0                	test   eax,eax
c00285b6:	75 ac                	jne    c0028564 <__divdf3+0xd8>
c00285b8:	31 ff                	xor    edi,edi
c00285ba:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00285bf:	e9 3b 02 00 00       	jmp    c00287ff <__divdf3+0x373>
c00285c4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285c7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00285ca:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00285d0:	75 6b                	jne    c002863d <__divdf3+0x1b1>
c00285d2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00285d5:	09 d6                	or     esi,edx
c00285d7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00285db:	74 28                	je     c0028605 <__divdf3+0x179>
c00285dd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00285e0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00285e3:	85 f6                	test   esi,esi
c00285e5:	0f 85 14 02 00 00    	jne    c00287ff <__divdf3+0x373>
c00285eb:	31 ff                	xor    edi,edi
c00285ed:	31 c9                	xor    ecx,ecx
c00285ef:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00285f2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00285f5:	0f 89 04 02 00 00    	jns    c00287ff <__divdf3+0x373>
c00285fb:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028600:	e9 fa 01 00 00       	jmp    c00287ff <__divdf3+0x373>
c0028605:	85 f6                	test   esi,esi
c0028607:	75 1b                	jne    c0028624 <__divdf3+0x198>
c0028609:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002860c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002860f:	25 00 00 00 80       	and    eax,0x80000000
c0028614:	31 c9                	xor    ecx,ecx
c0028616:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002861b:	89 cf                	mov    edi,ecx
c002861d:	89 c1                	mov    ecx,eax
c002861f:	e9 db 01 00 00       	jmp    c00287ff <__divdf3+0x373>
c0028624:	01 d2                	add    edx,edx
c0028626:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028629:	c1 eb 1f             	shr    ebx,0x1f
c002862c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002862f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028632:	8d 48 01             	lea    ecx,[eax+0x1]
c0028635:	09 da                	or     edx,ebx
c0028637:	78 04                	js     c002863d <__divdf3+0x1b1>
c0028639:	89 c8                	mov    eax,ecx
c002863b:	eb e7                	jmp    c0028624 <__divdf3+0x198>
c002863d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028640:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028646:	81 ca 00 00 00 80    	or     edx,0x80000000
c002864c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002864f:	39 d6                	cmp    esi,edx
c0028651:	77 0d                	ja     c0028660 <__divdf3+0x1d4>
c0028653:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028656:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028659:	72 1b                	jb     c0028676 <__divdf3+0x1ea>
c002865b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002865e:	75 16                	jne    c0028676 <__divdf3+0x1ea>
c0028660:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028663:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028666:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028669:	83 de 00             	sbb    esi,0x0
c002866c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002866f:	ba 01 00 00 00       	mov    edx,0x1
c0028674:	eb 02                	jmp    c0028678 <__divdf3+0x1ec>
c0028676:	31 d2                	xor    edx,edx
c0028678:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002867f:	31 ff                	xor    edi,edi
c0028681:	01 ff                	add    edi,edi
c0028683:	89 d1                	mov    ecx,edx
c0028685:	c1 e9 1f             	shr    ecx,0x1f
c0028688:	09 cf                	or     edi,ecx
c002868a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002868d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028690:	89 da                	mov    edx,ebx
c0028692:	89 f3                	mov    ebx,esi
c0028694:	8d 34 36             	lea    esi,[esi+esi*1]
c0028697:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002869a:	c1 e9 1f             	shr    ecx,0x1f
c002869d:	09 ce                	or     esi,ecx
c002869f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00286a2:	01 c9                	add    ecx,ecx
c00286a4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00286a7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00286aa:	85 db                	test   ebx,ebx
c00286ac:	78 29                	js     c00286d7 <__divdf3+0x24b>
c00286ae:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00286b1:	72 07                	jb     c00286ba <__divdf3+0x22e>
c00286b3:	75 3c                	jne    c00286f1 <__divdf3+0x265>
c00286b5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00286b8:	77 37                	ja     c00286f1 <__divdf3+0x265>
c00286ba:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00286bd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00286c0:	31 d2                	xor    edx,edx
c00286c2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00286c5:	0f 97 c2             	seta   dl
c00286c8:	29 d6                	sub    esi,edx
c00286ca:	89 d9                	mov    ecx,ebx
c00286cc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00286cf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00286d2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00286d5:	eb 17                	jmp    c00286ee <__divdf3+0x262>
c00286d7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00286da:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00286dd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00286e0:	0f 97 c1             	seta   cl
c00286e3:	0f b6 c9             	movzx  ecx,cl
c00286e6:	29 ce                	sub    esi,ecx
c00286e8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00286eb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00286ee:	83 ca 01             	or     edx,0x1
c00286f1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00286f4:	75 8b                	jne    c0028681 <__divdf3+0x1f5>
c00286f6:	c1 e7 09             	shl    edi,0x9
c00286f9:	89 d1                	mov    ecx,edx
c00286fb:	c1 e9 17             	shr    ecx,0x17
c00286fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028701:	09 f3                	or     ebx,esi
c0028703:	0f 95 c3             	setne  bl
c0028706:	0f b6 db             	movzx  ebx,bl
c0028709:	c1 e2 09             	shl    edx,0x9
c002870c:	09 d3                	or     ebx,edx
c002870e:	89 ca                	mov    edx,ecx
c0028710:	09 fa                	or     edx,edi
c0028712:	78 0c                	js     c0028720 <__divdf3+0x294>
c0028714:	01 d2                	add    edx,edx
c0028716:	89 d9                	mov    ecx,ebx
c0028718:	c1 e9 1f             	shr    ecx,0x1f
c002871b:	09 ca                	or     edx,ecx
c002871d:	01 db                	add    ebx,ebx
c002871f:	48                   	dec    eax
c0028720:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028725:	0f 8f 83 00 00 00    	jg     c00287ae <__divdf3+0x322>
c002872b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028731:	85 c0                	test   eax,eax
c0028733:	0f 8f 82 00 00 00    	jg     c00287bb <__divdf3+0x32f>
c0028739:	83 f8 cc             	cmp    eax,0xffffffcc
c002873c:	7c 77                	jl     c00287b5 <__divdf3+0x329>
c002873e:	be 01 00 00 00       	mov    esi,0x1
c0028743:	29 c6                	sub    esi,eax
c0028745:	81 ca 00 00 00 80    	or     edx,0x80000000
c002874b:	83 fe 1f             	cmp    esi,0x1f
c002874e:	7e 2f                	jle    c002877f <__divdf3+0x2f3>
c0028750:	83 fe 20             	cmp    esi,0x20
c0028753:	75 0a                	jne    c002875f <__divdf3+0x2d3>
c0028755:	85 db                	test   ebx,ebx
c0028757:	0f 95 c3             	setne  bl
c002875a:	0f b6 db             	movzx  ebx,bl
c002875d:	eb 1a                	jmp    c0028779 <__divdf3+0x2ed>
c002875f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028762:	89 d7                	mov    edi,edx
c0028764:	d3 e7                	shl    edi,cl
c0028766:	89 f9                	mov    ecx,edi
c0028768:	09 d9                	or     ecx,ebx
c002876a:	0f 95 c3             	setne  bl
c002876d:	0f b6 db             	movzx  ebx,bl
c0028770:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028775:	29 c1                	sub    ecx,eax
c0028777:	d3 ea                	shr    edx,cl
c0028779:	09 d3                	or     ebx,edx
c002877b:	31 c0                	xor    eax,eax
c002877d:	eb 3a                	jmp    c00287b9 <__divdf3+0x32d>
c002877f:	83 c0 1f             	add    eax,0x1f
c0028782:	89 d7                	mov    edi,edx
c0028784:	88 c1                	mov    cl,al
c0028786:	d3 e7                	shl    edi,cl
c0028788:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002878b:	89 df                	mov    edi,ebx
c002878d:	89 f1                	mov    ecx,esi
c002878f:	d3 ef                	shr    edi,cl
c0028791:	89 f9                	mov    ecx,edi
c0028793:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028796:	09 cf                	or     edi,ecx
c0028798:	88 c1                	mov    cl,al
c002879a:	d3 e3                	shl    ebx,cl
c002879c:	85 db                	test   ebx,ebx
c002879e:	0f 95 c3             	setne  bl
c00287a1:	0f b6 db             	movzx  ebx,bl
c00287a4:	09 fb                	or     ebx,edi
c00287a6:	89 f1                	mov    ecx,esi
c00287a8:	d3 ea                	shr    edx,cl
c00287aa:	31 c0                	xor    eax,eax
c00287ac:	eb 0d                	jmp    c00287bb <__divdf3+0x32f>
c00287ae:	b8 ff 07 00 00       	mov    eax,0x7ff
c00287b3:	eb 02                	jmp    c00287b7 <__divdf3+0x32b>
c00287b5:	31 c0                	xor    eax,eax
c00287b7:	31 db                	xor    ebx,ebx
c00287b9:	31 d2                	xor    edx,edx
c00287bb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00287be:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00287c1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00287c7:	09 c8                	or     eax,ecx
c00287c9:	c1 e0 14             	shl    eax,0x14
c00287cc:	89 d1                	mov    ecx,edx
c00287ce:	c1 e9 0b             	shr    ecx,0xb
c00287d1:	09 c8                	or     eax,ecx
c00287d3:	89 c6                	mov    esi,eax
c00287d5:	89 d9                	mov    ecx,ebx
c00287d7:	c1 e9 0b             	shr    ecx,0xb
c00287da:	c1 e2 15             	shl    edx,0x15
c00287dd:	09 ca                	or     edx,ecx
c00287df:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00287e5:	0f 95 c0             	setne  al
c00287e8:	09 c1                	or     ecx,eax
c00287ea:	83 e1 01             	and    ecx,0x1
c00287ed:	c1 eb 0a             	shr    ebx,0xa
c00287f0:	21 cb                	and    ebx,ecx
c00287f2:	01 d3                	add    ebx,edx
c00287f4:	89 d8                	mov    eax,ebx
c00287f6:	83 d6 00             	adc    esi,0x0
c00287f9:	89 f2                	mov    edx,esi
c00287fb:	89 c7                	mov    edi,eax
c00287fd:	89 d1                	mov    ecx,edx
c00287ff:	89 f8                	mov    eax,edi
c0028801:	89 ca                	mov    edx,ecx
c0028803:	83 c4 2c             	add    esp,0x2c
c0028806:	5b                   	pop    ebx
c0028807:	5e                   	pop    esi
c0028808:	5f                   	pop    edi
c0028809:	5d                   	pop    ebp
c002880a:	c3                   	ret    

c002880b <__floatsidf>:
c002880b:	55                   	push   ebp
c002880c:	89 e5                	mov    ebp,esp
c002880e:	56                   	push   esi
c002880f:	53                   	push   ebx
c0028810:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028813:	85 db                	test   ebx,ebx
c0028815:	7e 15                	jle    c002882c <__floatsidf+0x21>
c0028817:	0f bd cb             	bsr    ecx,ebx
c002881a:	83 f1 1f             	xor    ecx,0x1f
c002881d:	d3 e3                	shl    ebx,cl
c002881f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028825:	b8 1e 04 00 00       	mov    eax,0x41e
c002882a:	eb 21                	jmp    c002884d <__floatsidf+0x42>
c002882c:	b8 00 00 00 00       	mov    eax,0x0
c0028831:	ba 00 00 00 00       	mov    edx,0x0
c0028836:	74 2a                	je     c0028862 <__floatsidf+0x57>
c0028838:	f7 db                	neg    ebx
c002883a:	0f bd cb             	bsr    ecx,ebx
c002883d:	83 f1 1f             	xor    ecx,0x1f
c0028840:	d3 e3                	shl    ebx,cl
c0028842:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028848:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002884d:	29 c8                	sub    eax,ecx
c002884f:	c1 e0 14             	shl    eax,0x14
c0028852:	89 c1                	mov    ecx,eax
c0028854:	89 de                	mov    esi,ebx
c0028856:	c1 ee 0b             	shr    esi,0xb
c0028859:	09 f1                	or     ecx,esi
c002885b:	89 ca                	mov    edx,ecx
c002885d:	c1 e3 15             	shl    ebx,0x15
c0028860:	89 d8                	mov    eax,ebx
c0028862:	5b                   	pop    ebx
c0028863:	5e                   	pop    esi
c0028864:	5d                   	pop    ebp
c0028865:	c3                   	ret    

c0028866 <__floatunsidf>:
c0028866:	55                   	push   ebp
c0028867:	89 e5                	mov    ebp,esp
c0028869:	56                   	push   esi
c002886a:	53                   	push   ebx
c002886b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002886e:	85 db                	test   ebx,ebx
c0028870:	74 2a                	je     c002889c <__floatunsidf+0x36>
c0028872:	0f bd cb             	bsr    ecx,ebx
c0028875:	83 f1 1f             	xor    ecx,0x1f
c0028878:	d3 e3                	shl    ebx,cl
c002887a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028880:	b8 1e 04 00 00       	mov    eax,0x41e
c0028885:	29 c8                	sub    eax,ecx
c0028887:	c1 e0 14             	shl    eax,0x14
c002888a:	89 c1                	mov    ecx,eax
c002888c:	89 de                	mov    esi,ebx
c002888e:	c1 ee 0b             	shr    esi,0xb
c0028891:	09 f1                	or     ecx,esi
c0028893:	89 ca                	mov    edx,ecx
c0028895:	c1 e3 15             	shl    ebx,0x15
c0028898:	89 d8                	mov    eax,ebx
c002889a:	eb 04                	jmp    c00288a0 <__floatunsidf+0x3a>
c002889c:	31 c0                	xor    eax,eax
c002889e:	31 d2                	xor    edx,edx
c00288a0:	5b                   	pop    ebx
c00288a1:	5e                   	pop    esi
c00288a2:	5d                   	pop    ebp
c00288a3:	c3                   	ret    

c00288a4 <__fixdfsi>:
c00288a4:	55                   	push   ebp
c00288a5:	89 e5                	mov    ebp,esp
c00288a7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00288aa:	89 d1                	mov    ecx,edx
c00288ac:	c1 e1 0b             	shl    ecx,0xb
c00288af:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00288b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00288b8:	c1 e8 15             	shr    eax,0x15
c00288bb:	09 c1                	or     ecx,eax
c00288bd:	c1 fa 14             	sar    edx,0x14
c00288c0:	78 1f                	js     c00288e1 <__fixdfsi+0x3d>
c00288c2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00288c8:	31 c0                	xor    eax,eax
c00288ca:	83 fa 1e             	cmp    edx,0x1e
c00288cd:	77 40                	ja     c002890f <__fixdfsi+0x6b>
c00288cf:	89 c8                	mov    eax,ecx
c00288d1:	0d 00 00 00 80       	or     eax,0x80000000
c00288d6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00288db:	29 d1                	sub    ecx,edx
c00288dd:	d3 e8                	shr    eax,cl
c00288df:	eb 2e                	jmp    c002890f <__fixdfsi+0x6b>
c00288e1:	31 c0                	xor    eax,eax
c00288e3:	81 c2 01 04 00 00    	add    edx,0x401
c00288e9:	78 24                	js     c002890f <__fixdfsi+0x6b>
c00288eb:	83 fa 1e             	cmp    edx,0x1e
c00288ee:	7e 09                	jle    c00288f9 <__fixdfsi+0x55>
c00288f0:	83 fa 1f             	cmp    edx,0x1f
c00288f3:	75 18                	jne    c002890d <__fixdfsi+0x69>
c00288f5:	85 c9                	test   ecx,ecx
c00288f7:	75 14                	jne    c002890d <__fixdfsi+0x69>
c00288f9:	89 c8                	mov    eax,ecx
c00288fb:	0d 00 00 00 80       	or     eax,0x80000000
c0028900:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028905:	29 d1                	sub    ecx,edx
c0028907:	d3 e8                	shr    eax,cl
c0028909:	f7 d8                	neg    eax
c002890b:	eb 02                	jmp    c002890f <__fixdfsi+0x6b>
c002890d:	31 c0                	xor    eax,eax
c002890f:	5d                   	pop    ebp
c0028910:	c3                   	ret    

c0028911 <__fixunsdfsi>:
c0028911:	55                   	push   ebp
c0028912:	89 e5                	mov    ebp,esp
c0028914:	53                   	push   ebx
c0028915:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028918:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002891b:	89 d3                	mov    ebx,edx
c002891d:	c1 fb 14             	sar    ebx,0x14
c0028920:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028926:	31 c0                	xor    eax,eax
c0028928:	83 fb 1f             	cmp    ebx,0x1f
c002892b:	77 1d                	ja     c002894a <__fixunsdfsi+0x39>
c002892d:	89 d0                	mov    eax,edx
c002892f:	c1 e0 0b             	shl    eax,0xb
c0028932:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028937:	c1 e9 15             	shr    ecx,0x15
c002893a:	09 c8                	or     eax,ecx
c002893c:	0d 00 00 00 80       	or     eax,0x80000000
c0028941:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028946:	29 d9                	sub    ecx,ebx
c0028948:	d3 e8                	shr    eax,cl
c002894a:	5b                   	pop    ebx
c002894b:	5d                   	pop    ebp
c002894c:	c3                   	ret    

c002894d <__cmpdf2>:
c002894d:	55                   	push   ebp
c002894e:	89 e5                	mov    ebp,esp
c0028950:	57                   	push   edi
c0028951:	56                   	push   esi
c0028952:	53                   	push   ebx
c0028953:	83 ec 0c             	sub    esp,0xc
c0028956:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028959:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002895c:	89 ca                	mov    edx,ecx
c002895e:	c1 ea 14             	shr    edx,0x14
c0028961:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028967:	89 cb                	mov    ebx,ecx
c0028969:	c1 fb 1f             	sar    ebx,0x1f
c002896c:	31 da                	xor    edx,ebx
c002896e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028971:	89 df                	mov    edi,ebx
c0028973:	c1 e7 0b             	shl    edi,0xb
c0028976:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028979:	c1 e1 0b             	shl    ecx,0xb
c002897c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028982:	c1 eb 15             	shr    ebx,0x15
c0028985:	09 d9                	or     ecx,ebx
c0028987:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002898a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002898d:	89 ce                	mov    esi,ecx
c002898f:	c1 ee 14             	shr    esi,0x14
c0028992:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028998:	89 cb                	mov    ebx,ecx
c002899a:	c1 fb 1f             	sar    ebx,0x1f
c002899d:	31 de                	xor    esi,ebx
c002899f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00289a2:	89 df                	mov    edi,ebx
c00289a4:	c1 e7 0b             	shl    edi,0xb
c00289a7:	c1 e1 0b             	shl    ecx,0xb
c00289aa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00289b0:	c1 eb 15             	shr    ebx,0x15
c00289b3:	09 d9                	or     ecx,ebx
c00289b5:	89 d3                	mov    ebx,edx
c00289b7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00289bd:	43                   	inc    ebx
c00289be:	83 fb 01             	cmp    ebx,0x1
c00289c1:	77 08                	ja     c00289cb <__cmpdf2+0x7e>
c00289c3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00289c6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00289c9:	75 68                	jne    c0028a33 <__cmpdf2+0xe6>
c00289cb:	89 f3                	mov    ebx,esi
c00289cd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00289d3:	43                   	inc    ebx
c00289d4:	83 fb 01             	cmp    ebx,0x1
c00289d7:	77 06                	ja     c00289df <__cmpdf2+0x92>
c00289d9:	89 fb                	mov    ebx,edi
c00289db:	09 cb                	or     ebx,ecx
c00289dd:	75 54                	jne    c0028a33 <__cmpdf2+0xe6>
c00289df:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00289e2:	09 f8                	or     eax,edi
c00289e4:	09 c8                	or     eax,ecx
c00289e6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00289e9:	75 12                	jne    c00289fd <__cmpdf2+0xb0>
c00289eb:	8d 42 01             	lea    eax,[edx+0x1]
c00289ee:	83 f8 01             	cmp    eax,0x1
c00289f1:	77 0a                	ja     c00289fd <__cmpdf2+0xb0>
c00289f3:	8d 5e 01             	lea    ebx,[esi+0x1]
c00289f6:	31 c0                	xor    eax,eax
c00289f8:	83 fb 01             	cmp    ebx,0x1
c00289fb:	76 36                	jbe    c0028a33 <__cmpdf2+0xe6>
c00289fd:	b8 01 00 00 00       	mov    eax,0x1
c0028a02:	39 f2                	cmp    edx,esi
c0028a04:	7f 2d                	jg     c0028a33 <__cmpdf2+0xe6>
c0028a06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028a0b:	7c 26                	jl     c0028a33 <__cmpdf2+0xe6>
c0028a0d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028a10:	77 07                	ja     c0028a19 <__cmpdf2+0xcc>
c0028a12:	72 16                	jb     c0028a2a <__cmpdf2+0xdd>
c0028a14:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028a17:	76 0a                	jbe    c0028a23 <__cmpdf2+0xd6>
c0028a19:	89 d0                	mov    eax,edx
c0028a1b:	c1 f8 1f             	sar    eax,0x1f
c0028a1e:	83 c8 01             	or     eax,0x1
c0028a21:	eb 10                	jmp    c0028a33 <__cmpdf2+0xe6>
c0028a23:	b8 00 00 00 00       	mov    eax,0x0
c0028a28:	73 09                	jae    c0028a33 <__cmpdf2+0xe6>
c0028a2a:	89 d0                	mov    eax,edx
c0028a2c:	c1 f8 1f             	sar    eax,0x1f
c0028a2f:	83 e0 02             	and    eax,0x2
c0028a32:	48                   	dec    eax
c0028a33:	83 c4 0c             	add    esp,0xc
c0028a36:	5b                   	pop    ebx
c0028a37:	5e                   	pop    esi
c0028a38:	5f                   	pop    edi
c0028a39:	5d                   	pop    ebp
c0028a3a:	c3                   	ret    

c0028a3b <__eqdf2>:
c0028a3b:	55                   	push   ebp
c0028a3c:	89 e5                	mov    ebp,esp
c0028a3e:	50                   	push   eax
c0028a3f:	6a 01                	push   0x1
c0028a41:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028a44:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028a47:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028a4a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028a4d:	e8 fb fe ff ff       	call   c002894d <__cmpdf2>
c0028a52:	83 c4 18             	add    esp,0x18
c0028a55:	c9                   	leave  
c0028a56:	c3                   	ret    

c0028a57 <__nedf2>:
c0028a57:	eb e2                	jmp    c0028a3b <__eqdf2>

c0028a59 <__gtdf2>:
c0028a59:	55                   	push   ebp
c0028a5a:	89 e5                	mov    ebp,esp
c0028a5c:	50                   	push   eax
c0028a5d:	6a ff                	push   0xffffffff
c0028a5f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028a62:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028a65:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028a68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028a6b:	e8 dd fe ff ff       	call   c002894d <__cmpdf2>
c0028a70:	83 c4 18             	add    esp,0x18
c0028a73:	c9                   	leave  
c0028a74:	c3                   	ret    

c0028a75 <__gedf2>:
c0028a75:	eb e2                	jmp    c0028a59 <__gtdf2>

c0028a77 <__ltdf2>:
c0028a77:	eb c2                	jmp    c0028a3b <__eqdf2>

c0028a79 <__ledf2>:
c0028a79:	eb c0                	jmp    c0028a3b <__eqdf2>

c0028a7b <__truncdfsf2>:
c0028a7b:	55                   	push   ebp
c0028a7c:	89 e5                	mov    ebp,esp
c0028a7e:	57                   	push   edi
c0028a7f:	56                   	push   esi
c0028a80:	53                   	push   ebx
c0028a81:	83 ec 0c             	sub    esp,0xc
c0028a84:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028a87:	89 d1                	mov    ecx,edx
c0028a89:	c1 f9 14             	sar    ecx,0x14
c0028a8c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a8f:	89 df                	mov    edi,ebx
c0028a91:	c1 e7 0b             	shl    edi,0xb
c0028a94:	89 d0                	mov    eax,edx
c0028a96:	c1 e0 0b             	shl    eax,0xb
c0028a99:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028a9e:	c1 eb 15             	shr    ebx,0x15
c0028aa1:	09 d8                	or     eax,ebx
c0028aa3:	89 cb                	mov    ebx,ecx
c0028aa5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028aab:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028ab1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028ab7:	0f 86 9e 00 00 00    	jbe    c0028b5b <__truncdfsf2+0xe0>
c0028abd:	85 db                	test   ebx,ebx
c0028abf:	75 0a                	jne    c0028acb <__truncdfsf2+0x50>
c0028ac1:	c1 fa 17             	sar    edx,0x17
c0028ac4:	30 d2                	xor    dl,dl
c0028ac6:	e9 84 00 00 00       	jmp    c0028b4f <__truncdfsf2+0xd4>
c0028acb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028ad1:	83 fe 83             	cmp    esi,0xffffff83
c0028ad4:	7d 4b                	jge    c0028b21 <__truncdfsf2+0xa6>
c0028ad6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028adb:	29 f1                	sub    ecx,esi
c0028add:	83 f9 1f             	cmp    ecx,0x1f
c0028ae0:	7f 6b                	jg     c0028b4d <__truncdfsf2+0xd2>
c0028ae2:	0d 00 00 00 80       	or     eax,0x80000000
c0028ae7:	89 c3                	mov    ebx,eax
c0028ae9:	d3 eb                	shr    ebx,cl
c0028aeb:	be 01 00 00 00       	mov    esi,0x1
c0028af0:	d3 e6                	shl    esi,cl
c0028af2:	4e                   	dec    esi
c0028af3:	21 f0                	and    eax,esi
c0028af5:	09 f8                	or     eax,edi
c0028af7:	0f 95 c0             	setne  al
c0028afa:	0f b6 c0             	movzx  eax,al
c0028afd:	09 c3                	or     ebx,eax
c0028aff:	89 d9                	mov    ecx,ebx
c0028b01:	c1 e9 08             	shr    ecx,0x8
c0028b04:	f6 c3 7f             	test   bl,0x7f
c0028b07:	0f 95 c0             	setne  al
c0028b0a:	09 c8                	or     eax,ecx
c0028b0c:	83 e0 01             	and    eax,0x1
c0028b0f:	c1 eb 07             	shr    ebx,0x7
c0028b12:	21 c3                	and    ebx,eax
c0028b14:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028b1a:	09 d1                	or     ecx,edx
c0028b1c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028b1f:	eb 76                	jmp    c0028b97 <__truncdfsf2+0x11c>
c0028b21:	83 c6 80             	add    esi,0xffffff80
c0028b24:	7e 1d                	jle    c0028b43 <__truncdfsf2+0xc8>
c0028b26:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028b2c:	75 0b                	jne    c0028b39 <__truncdfsf2+0xbe>
c0028b2e:	09 f8                	or     eax,edi
c0028b30:	74 09                	je     c0028b3b <__truncdfsf2+0xc0>
c0028b32:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028b37:	eb 02                	jmp    c0028b3b <__truncdfsf2+0xc0>
c0028b39:	31 c0                	xor    eax,eax
c0028b3b:	c1 fa 17             	sar    edx,0x17
c0028b3e:	80 ca ff             	or     dl,0xff
c0028b41:	eb 0e                	jmp    c0028b51 <__truncdfsf2+0xd6>
c0028b43:	c1 fa 1f             	sar    edx,0x1f
c0028b46:	c1 e2 08             	shl    edx,0x8
c0028b49:	09 ca                	or     edx,ecx
c0028b4b:	eb 04                	jmp    c0028b51 <__truncdfsf2+0xd6>
c0028b4d:	31 d2                	xor    edx,edx
c0028b4f:	31 c0                	xor    eax,eax
c0028b51:	c1 e2 17             	shl    edx,0x17
c0028b54:	c1 e8 08             	shr    eax,0x8
c0028b57:	09 d0                	or     eax,edx
c0028b59:	eb 3c                	jmp    c0028b97 <__truncdfsf2+0x11c>
c0028b5b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028b61:	89 ca                	mov    edx,ecx
c0028b63:	c1 fa 0b             	sar    edx,0xb
c0028b66:	c1 e2 08             	shl    edx,0x8
c0028b69:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028b6c:	31 db                	xor    ebx,ebx
c0028b6e:	85 ff                	test   edi,edi
c0028b70:	0f 95 c3             	setne  bl
c0028b73:	09 d8                	or     eax,ebx
c0028b75:	89 c3                	mov    ebx,eax
c0028b77:	c1 eb 08             	shr    ebx,0x8
c0028b7a:	a8 7f                	test   al,0x7f
c0028b7c:	0f 95 c2             	setne  dl
c0028b7f:	89 d6                	mov    esi,edx
c0028b81:	09 de                	or     esi,ebx
c0028b83:	83 e6 01             	and    esi,0x1
c0028b86:	c1 e8 07             	shr    eax,0x7
c0028b89:	21 f0                	and    eax,esi
c0028b8b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028b8e:	09 ca                	or     edx,ecx
c0028b90:	c1 e2 17             	shl    edx,0x17
c0028b93:	09 da                	or     edx,ebx
c0028b95:	01 d0                	add    eax,edx
c0028b97:	83 c4 0c             	add    esp,0xc
c0028b9a:	5b                   	pop    ebx
c0028b9b:	5e                   	pop    esi
c0028b9c:	5f                   	pop    edi
c0028b9d:	5d                   	pop    ebp
c0028b9e:	c3                   	ret    

c0028b9f <__extendsfdf2>:
c0028b9f:	55                   	push   ebp
c0028ba0:	89 e5                	mov    ebp,esp
c0028ba2:	57                   	push   edi
c0028ba3:	56                   	push   esi
c0028ba4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028ba7:	89 d1                	mov    ecx,edx
c0028ba9:	c1 f9 17             	sar    ecx,0x17
c0028bac:	c1 e2 08             	shl    edx,0x8
c0028baf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028bb5:	89 c8                	mov    eax,ecx
c0028bb7:	80 e4 f8             	and    ah,0xf8
c0028bba:	8d 71 01             	lea    esi,[ecx+0x1]
c0028bbd:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028bc3:	75 27                	jne    c0028bec <__extendsfdf2+0x4d>
c0028bc5:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028bcb:	75 18                	jne    c0028be5 <__extendsfdf2+0x46>
c0028bcd:	85 d2                	test   edx,edx
c0028bcf:	74 20                	je     c0028bf1 <__extendsfdf2+0x52>
c0028bd1:	41                   	inc    ecx
c0028bd2:	01 d2                	add    edx,edx
c0028bd4:	79 fb                	jns    c0028bd1 <__extendsfdf2+0x32>
c0028bd6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028bdc:	29 c8                	sub    eax,ecx
c0028bde:	05 81 03 00 00       	add    eax,0x381
c0028be3:	eb 0c                	jmp    c0028bf1 <__extendsfdf2+0x52>
c0028be5:	05 00 07 00 00       	add    eax,0x700
c0028bea:	eb 05                	jmp    c0028bf1 <__extendsfdf2+0x52>
c0028bec:	05 80 03 00 00       	add    eax,0x380
c0028bf1:	c1 e0 14             	shl    eax,0x14
c0028bf4:	89 c1                	mov    ecx,eax
c0028bf6:	89 d0                	mov    eax,edx
c0028bf8:	c1 e8 0b             	shr    eax,0xb
c0028bfb:	09 c1                	or     ecx,eax
c0028bfd:	c1 e2 15             	shl    edx,0x15
c0028c00:	89 d0                	mov    eax,edx
c0028c02:	89 ca                	mov    edx,ecx
c0028c04:	5e                   	pop    esi
c0028c05:	5f                   	pop    edi
c0028c06:	5d                   	pop    ebp
c0028c07:	c3                   	ret    
c0028c08:	66 90                	xchg   ax,ax
c0028c0a:	66 90                	xchg   ax,ax
c0028c0c:	66 90                	xchg   ax,ax
c0028c0e:	66 90                	xchg   ax,ax

c0028c10 <fabs>:
c0028c10:	83 ec 0c             	sub    esp,0xc
c0028c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c17:	89 04 24             	mov    DWORD PTR [esp],eax
c0028c1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028c1e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028c27:	dd 04 24             	fld    QWORD PTR [esp]
c0028c2a:	83 c4 0c             	add    esp,0xc
c0028c2d:	c3                   	ret    
c0028c2e:	66 90                	xchg   ax,ax

c0028c30 <lrint>:
c0028c30:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028c34:	83 ec 04             	sub    esp,0x4
c0028c37:	db 1c 24             	fistp  DWORD PTR [esp]
c0028c3a:	58                   	pop    eax
c0028c3b:	c3                   	ret    

c0028c3c <lrintf>:
c0028c3c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028c40:	83 ec 04             	sub    esp,0x4
c0028c43:	db 1c 24             	fistp  DWORD PTR [esp]
c0028c46:	58                   	pop    eax
c0028c47:	c3                   	ret    

Disassembly of section .init:

c0028c48 <_init>:
c0028c48:	55                   	push   ebp
c0028c49:	89 e5                	mov    ebp,esp
c0028c4b:	e8 c8 74 fd ff       	call   c0000118 <frame_dummy>
c0028c50:	e8 5b e0 ff ff       	call   c0026cb0 <__do_global_ctors_aux>
c0028c55:	5d                   	pop    ebp
c0028c56:	c3                   	ret    

Disassembly of section .fini:

c0028c57 <_fini>:
c0028c57:	55                   	push   ebp
c0028c58:	89 e5                	mov    ebp,esp
c0028c5a:	e8 49 74 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028c5f:	5d                   	pop    ebp
c0028c60:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028c62 <Computer::~Computer()>:
c0028c62:	83 ec 0c             	sub    esp,0xc
c0028c65:	ba 1c a8 02 c0       	mov    edx,0xc002a81c
c0028c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6e:	89 10                	mov    DWORD PTR [eax],edx
c0028c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c74:	83 ec 0c             	sub    esp,0xc
c0028c77:	50                   	push   eax
c0028c78:	e8 39 ac fe ff       	call   c00138b6 <Device::~Device()>
c0028c7d:	83 c4 10             	add    esp,0x10
c0028c80:	90                   	nop
c0028c81:	83 c4 0c             	add    esp,0xc
c0028c84:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028c86 <Computer::~Computer()>:
c0028c86:	83 ec 0c             	sub    esp,0xc
c0028c89:	83 ec 0c             	sub    esp,0xc
c0028c8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c90:	e8 cd ff ff ff       	call   c0028c62 <Computer::~Computer()>
c0028c95:	83 c4 10             	add    esp,0x10
c0028c98:	83 ec 08             	sub    esp,0x8
c0028c9b:	68 ec 01 00 00       	push   0x1ec
c0028ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca4:	e8 26 98 fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0028ca9:	83 c4 10             	add    esp,0x10
c0028cac:	83 c4 0c             	add    esp,0xc
c0028caf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028cb0 <idleCommon()>:
c0028cb0:	83 ec 0c             	sub    esp,0xc
c0028cb3:	fa                   	cli    
c0028cb4:	ff 05 68 22 03 c0    	inc    DWORD PTR ds:0xc0032268
c0028cba:	e8 77 51 ff ff       	call   c001de36 <schedule()>
c0028cbf:	a1 68 22 03 c0       	mov    eax,ds:0xc0032268
c0028cc4:	48                   	dec    eax
c0028cc5:	a3 68 22 03 c0       	mov    ds:0xc0032268,eax
c0028cca:	75 01                	jne    c0028ccd <idleCommon()+0x1d>
c0028ccc:	fb                   	sti    
c0028ccd:	83 c4 0c             	add    esp,0xc
c0028cd0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028cd2 <LinkedList<UnixFile>::~LinkedList()>:
c0028cd2:	90                   	nop
c0028cd3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028cd4 <LinkedList<UnixFile>::LinkedList()>:
c0028cd4:	83 ec 0c             	sub    esp,0xc
c0028cd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cfb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d10:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d17:	83 ec 0c             	sub    esp,0xc
c0028d1a:	68 7a aa 02 c0       	push   0xc002aa7a
c0028d1f:	e8 8b 98 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0028d24:	83 c4 10             	add    esp,0x10
c0028d27:	90                   	nop
c0028d28:	83 c4 0c             	add    esp,0xc
c0028d2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028d2c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028d2c:	83 ec 0c             	sub    esp,0xc
c0028d2f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028d34:	75 10                	jne    c0028d46 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028d36:	83 ec 0c             	sub    esp,0xc
c0028d39:	68 94 aa 02 c0       	push   0xc002aa94
c0028d3e:	e8 3a 13 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0028d43:	83 c4 10             	add    esp,0x10
c0028d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d4c:	85 c0                	test   eax,eax
c0028d4e:	74 34                	je     c0028d84 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d57:	85 c0                	test   eax,eax
c0028d59:	74 29                	je     c0028d84 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d66:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d6d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028d71:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d7b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d82:	eb 65                	jmp    c0028de9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d88:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d8a:	85 c0                	test   eax,eax
c0028d8c:	75 4b                	jne    c0028dd9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d95:	85 c0                	test   eax,eax
c0028d97:	75 40                	jne    c0028dd9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028da1:	89 10                	mov    DWORD PTR [eax],edx
c0028da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028dab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028db5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028dc3:	85 c0                	test   eax,eax
c0028dc5:	74 22                	je     c0028de9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028dc7:	83 ec 0c             	sub    esp,0xc
c0028dca:	68 b6 aa 02 c0       	push   0xc002aab6
c0028dcf:	e8 a9 12 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0028dd4:	83 c4 10             	add    esp,0x10
c0028dd7:	eb 10                	jmp    c0028de9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028dd9:	83 ec 0c             	sub    esp,0xc
c0028ddc:	68 c0 aa 02 c0       	push   0xc002aac0
c0028de1:	e8 97 12 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0028de6:	83 c4 10             	add    esp,0x10
c0028de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ded:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028df0:	8d 50 01             	lea    edx,[eax+0x1]
c0028df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028dfa:	90                   	nop
c0028dfb:	83 c4 0c             	add    esp,0xc
c0028dfe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028e00 <LinkedList<UnixFile>::getFirstElement()>:
c0028e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e04:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e06:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028e08 <LinkedList<UnixFile>::removeFirst()>:
c0028e08:	83 ec 0c             	sub    esp,0xc
c0028e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e11:	85 c0                	test   eax,eax
c0028e13:	75 12                	jne    c0028e27 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028e15:	83 ec 0c             	sub    esp,0xc
c0028e18:	68 cc aa 02 c0       	push   0xc002aacc
c0028e1d:	e8 5b 12 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0028e22:	83 c4 10             	add    esp,0x10
c0028e25:	eb 7e                	jmp    c0028ea5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028e27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028e2e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e31:	85 c0                	test   eax,eax
c0028e33:	74 10                	je     c0028e45 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028e35:	83 ec 0c             	sub    esp,0xc
c0028e38:	68 17 ab 02 c0       	push   0xc002ab17
c0028e3d:	e8 3b 12 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0028e42:	83 c4 10             	add    esp,0x10
c0028e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e49:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e4b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e4e:	85 c0                	test   eax,eax
c0028e50:	75 33                	jne    c0028e85 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e60:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e6e:	83 f8 01             	cmp    eax,0x1
c0028e71:	74 21                	je     c0028e94 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028e73:	83 ec 0c             	sub    esp,0xc
c0028e76:	68 f0 aa 02 c0       	push   0xc002aaf0
c0028e7b:	e8 fd 11 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0028e80:	83 c4 10             	add    esp,0x10
c0028e83:	eb 0f                	jmp    c0028e94 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028e85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e89:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e8b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e92:	89 10                	mov    DWORD PTR [eax],edx
c0028e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028e9b:	8d 50 ff             	lea    edx,[eax-0x1]
c0028e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ea5:	83 c4 0c             	add    esp,0xc
c0028ea8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028eaa <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028eaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028eae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028eb1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028eb2 <DriverlessDevice::~DriverlessDevice()>:
c0028eb2:	ba bc b2 02 c0       	mov    edx,0xc002b2bc
c0028eb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ebb:	89 10                	mov    DWORD PTR [eax],edx
c0028ebd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ec1:	50                   	push   eax
c0028ec2:	e8 ef a9 fe ff       	call   c00138b6 <Device::~Device()>
c0028ec7:	83 c4 04             	add    esp,0x4
c0028eca:	90                   	nop
c0028ecb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028ecc <DriverlessDevice::~DriverlessDevice()>:
c0028ecc:	83 ec 0c             	sub    esp,0xc
c0028ecf:	83 ec 0c             	sub    esp,0xc
c0028ed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed6:	e8 d7 ff ff ff       	call   c0028eb2 <DriverlessDevice::~DriverlessDevice()>
c0028edb:	83 c4 10             	add    esp,0x10
c0028ede:	83 ec 08             	sub    esp,0x8
c0028ee1:	68 58 01 00 00       	push   0x158
c0028ee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eea:	e8 e0 95 fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0028eef:	83 c4 10             	add    esp,0x10
c0028ef2:	83 c4 0c             	add    esp,0xc
c0028ef5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028ef6 <LinkedList<Device>::addElement(Device*)>:
c0028ef6:	83 ec 0c             	sub    esp,0xc
c0028ef9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028efe:	75 10                	jne    c0028f10 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028f00:	83 ec 0c             	sub    esp,0xc
c0028f03:	68 94 aa 02 c0       	push   0xc002aa94
c0028f08:	e8 70 11 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0028f0d:	83 c4 10             	add    esp,0x10
c0028f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f14:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f16:	85 c0                	test   eax,eax
c0028f18:	74 3a                	je     c0028f54 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f21:	85 c0                	test   eax,eax
c0028f23:	74 2f                	je     c0028f54 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f29:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f30:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f3e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f48:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028f52:	eb 68                	jmp    c0028fbc <LinkedList<Device>::addElement(Device*)+0xc6>
c0028f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f58:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f5a:	85 c0                	test   eax,eax
c0028f5c:	75 4e                	jne    c0028fac <LinkedList<Device>::addElement(Device*)+0xb6>
c0028f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f65:	85 c0                	test   eax,eax
c0028f67:	75 43                	jne    c0028fac <LinkedList<Device>::addElement(Device*)+0xb6>
c0028f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f71:	89 10                	mov    DWORD PTR [eax],edx
c0028f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f77:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f7b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f85:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f93:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f96:	85 c0                	test   eax,eax
c0028f98:	74 22                	je     c0028fbc <LinkedList<Device>::addElement(Device*)+0xc6>
c0028f9a:	83 ec 0c             	sub    esp,0xc
c0028f9d:	68 b6 aa 02 c0       	push   0xc002aab6
c0028fa2:	e8 d6 10 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0028fa7:	83 c4 10             	add    esp,0x10
c0028faa:	eb 10                	jmp    c0028fbc <LinkedList<Device>::addElement(Device*)+0xc6>
c0028fac:	83 ec 0c             	sub    esp,0xc
c0028faf:	68 c0 aa 02 c0       	push   0xc002aac0
c0028fb4:	e8 c4 10 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0028fb9:	83 c4 10             	add    esp,0x10
c0028fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028fc3:	8d 50 01             	lea    edx,[eax+0x1]
c0028fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fca:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028fcd:	90                   	nop
c0028fce:	83 c4 0c             	add    esp,0xc
c0028fd1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028fd2 <LinkedList<Device>::LinkedList()>:
c0028fd2:	83 ec 0c             	sub    esp,0xc
c0028fd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fee:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029003:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002900a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029015:	83 ec 0c             	sub    esp,0xc
c0029018:	68 7a aa 02 c0       	push   0xc002aa7a
c002901d:	e8 8d 95 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c0029022:	83 c4 10             	add    esp,0x10
c0029025:	90                   	nop
c0029026:	83 c4 0c             	add    esp,0xc
c0029029:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002902a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002902a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002902e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029030:	85 c0                	test   eax,eax
c0029032:	75 0e                	jne    c0029042 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002903b:	85 c0                	test   eax,eax
c002903d:	75 03                	jne    c0029042 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002903f:	b0 01                	mov    al,0x1
c0029041:	c3                   	ret    
c0029042:	b0 00                	mov    al,0x0
c0029044:	90                   	nop
c0029045:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029046 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029046:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002904a:	8b 00                	mov    eax,DWORD PTR [eax]
c002904c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002904e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002904e:	83 ec 0c             	sub    esp,0xc
c0029051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029055:	8b 00                	mov    eax,DWORD PTR [eax]
c0029057:	85 c0                	test   eax,eax
c0029059:	75 15                	jne    c0029070 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002905b:	83 ec 0c             	sub    esp,0xc
c002905e:	68 cc aa 02 c0       	push   0xc002aacc
c0029063:	e8 15 10 ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0029068:	83 c4 10             	add    esp,0x10
c002906b:	e9 88 00 00 00       	jmp    c00290f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029074:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029077:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002907a:	85 c0                	test   eax,eax
c002907c:	0f 95 c0             	setne  al
c002907f:	84 c0                	test   al,al
c0029081:	74 10                	je     c0029093 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029083:	83 ec 0c             	sub    esp,0xc
c0029086:	68 17 ab 02 c0       	push   0xc002ab17
c002908b:	e8 ed 0f ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0029090:	83 c4 10             	add    esp,0x10
c0029093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029097:	8b 00                	mov    eax,DWORD PTR [eax]
c0029099:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002909c:	85 c0                	test   eax,eax
c002909e:	0f 94 c0             	sete   al
c00290a1:	84 c0                	test   al,al
c00290a3:	74 33                	je     c00290d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00290a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00290af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00290ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290c1:	83 f8 01             	cmp    eax,0x1
c00290c4:	74 21                	je     c00290e7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00290c6:	83 ec 0c             	sub    esp,0xc
c00290c9:	68 f0 aa 02 c0       	push   0xc002aaf0
c00290ce:	e8 aa 0f ff ff       	call   c001a07d <Krnl::panic(char const*)>
c00290d3:	83 c4 10             	add    esp,0x10
c00290d6:	eb 0f                	jmp    c00290e7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00290d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00290de:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00290e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e5:	89 10                	mov    DWORD PTR [eax],edx
c00290e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290ee:	8d 50 ff             	lea    edx,[eax-0x1]
c00290f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290f8:	83 c4 0c             	add    esp,0xc
c00290fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00290fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00290fc:	83 ec 0c             	sub    esp,0xc
c00290ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029104:	75 10                	jne    c0029116 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029106:	83 ec 0c             	sub    esp,0xc
c0029109:	68 94 aa 02 c0       	push   0xc002aa94
c002910e:	e8 6a 0f ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0029113:	83 c4 10             	add    esp,0x10
c0029116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911a:	8b 00                	mov    eax,DWORD PTR [eax]
c002911c:	85 c0                	test   eax,eax
c002911e:	74 34                	je     c0029154 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029124:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029127:	85 c0                	test   eax,eax
c0029129:	74 29                	je     c0029154 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002912b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002912f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029132:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029136:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029141:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029148:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002914b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029152:	eb 65                	jmp    c00291b9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029158:	8b 00                	mov    eax,DWORD PTR [eax]
c002915a:	85 c0                	test   eax,eax
c002915c:	75 4b                	jne    c00291a9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002915e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029162:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029165:	85 c0                	test   eax,eax
c0029167:	75 40                	jne    c00291a9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0029169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029171:	89 10                	mov    DWORD PTR [eax],edx
c0029173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029177:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002917b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002917e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029185:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002918c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029190:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029193:	85 c0                	test   eax,eax
c0029195:	74 22                	je     c00291b9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029197:	83 ec 0c             	sub    esp,0xc
c002919a:	68 b6 aa 02 c0       	push   0xc002aab6
c002919f:	e8 d9 0e ff ff       	call   c001a07d <Krnl::panic(char const*)>
c00291a4:	83 c4 10             	add    esp,0x10
c00291a7:	eb 10                	jmp    c00291b9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00291a9:	83 ec 0c             	sub    esp,0xc
c00291ac:	68 c0 aa 02 c0       	push   0xc002aac0
c00291b1:	e8 c7 0e ff ff       	call   c001a07d <Krnl::panic(char const*)>
c00291b6:	83 c4 10             	add    esp,0x10
c00291b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291c0:	8d 50 01             	lea    edx,[eax+0x1]
c00291c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00291ca:	90                   	nop
c00291cb:	83 c4 0c             	add    esp,0xc
c00291ce:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00291d0 <ACPI::~ACPI()>:
c00291d0:	83 ec 0c             	sub    esp,0xc
c00291d3:	ba b0 bc 02 c0       	mov    edx,0xc002bcb0
c00291d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291dc:	89 10                	mov    DWORD PTR [eax],edx
c00291de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e2:	83 ec 0c             	sub    esp,0xc
c00291e5:	50                   	push   eax
c00291e6:	e8 cb a6 fe ff       	call   c00138b6 <Device::~Device()>
c00291eb:	83 c4 10             	add    esp,0x10
c00291ee:	90                   	nop
c00291ef:	83 c4 0c             	add    esp,0xc
c00291f2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00291f4 <ACPI::~ACPI()>:
c00291f4:	83 ec 0c             	sub    esp,0xc
c00291f7:	83 ec 0c             	sub    esp,0xc
c00291fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291fe:	e8 cd ff ff ff       	call   c00291d0 <ACPI::~ACPI()>
c0029203:	83 c4 10             	add    esp,0x10
c0029206:	83 ec 08             	sub    esp,0x8
c0029209:	68 64 12 00 00       	push   0x1264
c002920e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029212:	e8 b8 92 fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0029217:	83 c4 10             	add    esp,0x10
c002921a:	83 c4 0c             	add    esp,0xc
c002921d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002921e <LinkedList<Device>::~LinkedList()>:
c002921e:	90                   	nop
c002921f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029220 <LinkedList<Device>::isEmpty()>:
c0029220:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029224:	8b 00                	mov    eax,DWORD PTR [eax]
c0029226:	85 c0                	test   eax,eax
c0029228:	75 0e                	jne    c0029238 <LinkedList<Device>::isEmpty()+0x18>
c002922a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002922e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029231:	85 c0                	test   eax,eax
c0029233:	75 03                	jne    c0029238 <LinkedList<Device>::isEmpty()+0x18>
c0029235:	b0 01                	mov    al,0x1
c0029237:	c3                   	ret    
c0029238:	b0 00                	mov    al,0x0
c002923a:	90                   	nop
c002923b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002923c <LinkedList<Device>::getFirstElement()>:
c002923c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029240:	8b 00                	mov    eax,DWORD PTR [eax]
c0029242:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029244 <LinkedList<Device>::removeFirst()>:
c0029244:	83 ec 0c             	sub    esp,0xc
c0029247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002924b:	8b 00                	mov    eax,DWORD PTR [eax]
c002924d:	85 c0                	test   eax,eax
c002924f:	75 15                	jne    c0029266 <LinkedList<Device>::removeFirst()+0x22>
c0029251:	83 ec 0c             	sub    esp,0xc
c0029254:	68 cc aa 02 c0       	push   0xc002aacc
c0029259:	e8 1f 0e ff ff       	call   c001a07d <Krnl::panic(char const*)>
c002925e:	83 c4 10             	add    esp,0x10
c0029261:	e9 87 00 00 00       	jmp    c00292ed <LinkedList<Device>::removeFirst()+0xa9>
c0029266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002926a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002926d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029273:	85 c0                	test   eax,eax
c0029275:	74 10                	je     c0029287 <LinkedList<Device>::removeFirst()+0x43>
c0029277:	83 ec 0c             	sub    esp,0xc
c002927a:	68 17 ab 02 c0       	push   0xc002ab17
c002927f:	e8 f9 0d ff ff       	call   c001a07d <Krnl::panic(char const*)>
c0029284:	83 c4 10             	add    esp,0x10
c0029287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002928b:	8b 00                	mov    eax,DWORD PTR [eax]
c002928d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029293:	85 c0                	test   eax,eax
c0029295:	75 33                	jne    c00292ca <LinkedList<Device>::removeFirst()+0x86>
c0029297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002929b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00292a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00292ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292b3:	83 f8 01             	cmp    eax,0x1
c00292b6:	74 24                	je     c00292dc <LinkedList<Device>::removeFirst()+0x98>
c00292b8:	83 ec 0c             	sub    esp,0xc
c00292bb:	68 f0 aa 02 c0       	push   0xc002aaf0
c00292c0:	e8 b8 0d ff ff       	call   c001a07d <Krnl::panic(char const*)>
c00292c5:	83 c4 10             	add    esp,0x10
c00292c8:	eb 12                	jmp    c00292dc <LinkedList<Device>::removeFirst()+0x98>
c00292ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00292d0:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00292d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292da:	89 10                	mov    DWORD PTR [eax],edx
c00292dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292e3:	8d 50 ff             	lea    edx,[eax-0x1]
c00292e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00292ed:	83 c4 0c             	add    esp,0xc
c00292f0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00292f2 <CPU::~CPU()>:
c00292f2:	83 ec 0c             	sub    esp,0xc
c00292f5:	ba a4 c0 02 c0       	mov    edx,0xc002c0a4
c00292fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292fe:	89 10                	mov    DWORD PTR [eax],edx
c0029300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029304:	83 ec 0c             	sub    esp,0xc
c0029307:	50                   	push   eax
c0029308:	e8 a9 a5 fe ff       	call   c00138b6 <Device::~Device()>
c002930d:	83 c4 10             	add    esp,0x10
c0029310:	90                   	nop
c0029311:	83 c4 0c             	add    esp,0xc
c0029314:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029316 <CPU::~CPU()>:
c0029316:	83 ec 0c             	sub    esp,0xc
c0029319:	83 ec 0c             	sub    esp,0xc
c002931c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029320:	e8 cd ff ff ff       	call   c00292f2 <CPU::~CPU()>
c0029325:	83 c4 10             	add    esp,0x10
c0029328:	83 ec 08             	sub    esp,0x8
c002932b:	68 98 11 00 00       	push   0x1198
c0029330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029334:	e8 96 91 fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0029339:	83 c4 10             	add    esp,0x10
c002933c:	83 c4 0c             	add    esp,0xc
c002933f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029340 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029340:	90                   	nop
c0029341:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029342 <ThreadControlBlock::ThreadControlBlock()>:
c0029342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029346:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002934d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029351:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002935c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029363:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029367:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002936e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029372:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029379:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002937d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029381:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029385:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029389:	90                   	nop
c002938a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002938c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002938c:	83 ec 0c             	sub    esp,0xc
c002938f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029393:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002939d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00293a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00293af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00293b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00293c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00293cf:	83 ec 0c             	sub    esp,0xc
c00293d2:	68 7a aa 02 c0       	push   0xc002aa7a
c00293d7:	e8 d3 91 fe ff       	call   c00125af <Dbg::kprintf(char const*, ...)>
c00293dc:	83 c4 10             	add    esp,0x10
c00293df:	90                   	nop
c00293e0:	83 c4 0c             	add    esp,0xc
c00293e3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00293e4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00293e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00293e8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00293eb:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00293ec <Vm::_FPUState::_FPUState()>:
c00293ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00293f0:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00293f7:	90                   	nop
c00293f8:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00293fa <PCI::~PCI()>:
c00293fa:	83 ec 0c             	sub    esp,0xc
c00293fd:	ba 38 d2 02 c0       	mov    edx,0xc002d238
c0029402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029406:	89 10                	mov    DWORD PTR [eax],edx
c0029408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002940c:	83 ec 0c             	sub    esp,0xc
c002940f:	50                   	push   eax
c0029410:	e8 71 9e fe ff       	call   c0013286 <Bus::~Bus()>
c0029415:	83 c4 10             	add    esp,0x10
c0029418:	90                   	nop
c0029419:	83 c4 0c             	add    esp,0xc
c002941c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002941e <PCI::~PCI()>:
c002941e:	83 ec 0c             	sub    esp,0xc
c0029421:	83 ec 0c             	sub    esp,0xc
c0029424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029428:	e8 cd ff ff ff       	call   c00293fa <PCI::~PCI()>
c002942d:	83 c4 10             	add    esp,0x10
c0029430:	83 ec 08             	sub    esp,0x8
c0029433:	68 5c 01 00 00       	push   0x15c
c0029438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002943c:	e8 8e 90 fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0029441:	83 c4 10             	add    esp,0x10
c0029444:	83 c4 0c             	add    esp,0xc
c0029447:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029448 <IDE::~IDE()>:
c0029448:	83 ec 0c             	sub    esp,0xc
c002944b:	ba ac d4 02 c0       	mov    edx,0xc002d4ac
c0029450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029454:	89 10                	mov    DWORD PTR [eax],edx
c0029456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002945a:	83 ec 0c             	sub    esp,0xc
c002945d:	50                   	push   eax
c002945e:	e8 69 a9 fe ff       	call   c0013dcc <HardDiskController::~HardDiskController()>
c0029463:	83 c4 10             	add    esp,0x10
c0029466:	90                   	nop
c0029467:	83 c4 0c             	add    esp,0xc
c002946a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002946c <IDE::~IDE()>:
c002946c:	83 ec 0c             	sub    esp,0xc
c002946f:	83 ec 0c             	sub    esp,0xc
c0029472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029476:	e8 cd ff ff ff       	call   c0029448 <IDE::~IDE()>
c002947b:	83 c4 10             	add    esp,0x10
c002947e:	83 ec 08             	sub    esp,0x8
c0029481:	68 70 02 00 00       	push   0x270
c0029486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002948a:	e8 40 90 fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c002948f:	83 c4 10             	add    esp,0x10
c0029492:	83 c4 0c             	add    esp,0xc
c0029495:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029496 <SATABus::~SATABus()>:
c0029496:	83 ec 0c             	sub    esp,0xc
c0029499:	ba 8c d5 02 c0       	mov    edx,0xc002d58c
c002949e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a2:	89 10                	mov    DWORD PTR [eax],edx
c00294a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a8:	83 ec 0c             	sub    esp,0xc
c00294ab:	50                   	push   eax
c00294ac:	e8 1b a9 fe ff       	call   c0013dcc <HardDiskController::~HardDiskController()>
c00294b1:	83 c4 10             	add    esp,0x10
c00294b4:	90                   	nop
c00294b5:	83 c4 0c             	add    esp,0xc
c00294b8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00294ba <SATABus::~SATABus()>:
c00294ba:	83 ec 0c             	sub    esp,0xc
c00294bd:	83 ec 0c             	sub    esp,0xc
c00294c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294c4:	e8 cd ff ff ff       	call   c0029496 <SATABus::~SATABus()>
c00294c9:	83 c4 10             	add    esp,0x10
c00294cc:	83 ec 08             	sub    esp,0x8
c00294cf:	68 64 01 00 00       	push   0x164
c00294d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294d8:	e8 f2 8f fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c00294dd:	83 c4 10             	add    esp,0x10
c00294e0:	83 c4 0c             	add    esp,0xc
c00294e3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00294e4 <ATA::~ATA()>:
c00294e4:	83 ec 0c             	sub    esp,0xc
c00294e7:	ba d8 d5 02 c0       	mov    edx,0xc002d5d8
c00294ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f0:	89 10                	mov    DWORD PTR [eax],edx
c00294f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f6:	83 ec 0c             	sub    esp,0xc
c00294f9:	50                   	push   eax
c00294fa:	e8 bf a9 fe ff       	call   c0013ebe <PhysicalDisk::~PhysicalDisk()>
c00294ff:	83 c4 10             	add    esp,0x10
c0029502:	90                   	nop
c0029503:	83 c4 0c             	add    esp,0xc
c0029506:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029508 <ATA::~ATA()>:
c0029508:	83 ec 0c             	sub    esp,0xc
c002950b:	83 ec 0c             	sub    esp,0xc
c002950e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029512:	e8 cd ff ff ff       	call   c00294e4 <ATA::~ATA()>
c0029517:	83 c4 10             	add    esp,0x10
c002951a:	83 ec 08             	sub    esp,0x8
c002951d:	68 7c 01 00 00       	push   0x17c
c0029522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029526:	e8 a4 8f fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c002952b:	83 c4 10             	add    esp,0x10
c002952e:	83 c4 0c             	add    esp,0xc
c0029531:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029532 <ATAPI::~ATAPI()>:
c0029532:	83 ec 0c             	sub    esp,0xc
c0029535:	ba 10 d6 02 c0       	mov    edx,0xc002d610
c002953a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002953e:	89 10                	mov    DWORD PTR [eax],edx
c0029540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029544:	83 ec 0c             	sub    esp,0xc
c0029547:	50                   	push   eax
c0029548:	e8 71 a9 fe ff       	call   c0013ebe <PhysicalDisk::~PhysicalDisk()>
c002954d:	83 c4 10             	add    esp,0x10
c0029550:	90                   	nop
c0029551:	83 c4 0c             	add    esp,0xc
c0029554:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029556 <ATAPI::~ATAPI()>:
c0029556:	83 ec 0c             	sub    esp,0xc
c0029559:	83 ec 0c             	sub    esp,0xc
c002955c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029560:	e8 cd ff ff ff       	call   c0029532 <ATAPI::~ATAPI()>
c0029565:	83 c4 10             	add    esp,0x10
c0029568:	83 ec 08             	sub    esp,0x8
c002956b:	68 80 01 00 00       	push   0x180
c0029570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029574:	e8 56 8f fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0029579:	83 c4 10             	add    esp,0x10
c002957c:	83 c4 0c             	add    esp,0xc
c002957f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029580 <SATA::~SATA()>:
c0029580:	83 ec 0c             	sub    esp,0xc
c0029583:	ba c4 d6 02 c0       	mov    edx,0xc002d6c4
c0029588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002958c:	89 10                	mov    DWORD PTR [eax],edx
c002958e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029592:	83 ec 0c             	sub    esp,0xc
c0029595:	50                   	push   eax
c0029596:	e8 23 a9 fe ff       	call   c0013ebe <PhysicalDisk::~PhysicalDisk()>
c002959b:	83 c4 10             	add    esp,0x10
c002959e:	90                   	nop
c002959f:	83 c4 0c             	add    esp,0xc
c00295a2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00295a4 <SATA::~SATA()>:
c00295a4:	83 ec 0c             	sub    esp,0xc
c00295a7:	83 ec 0c             	sub    esp,0xc
c00295aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295ae:	e8 cd ff ff ff       	call   c0029580 <SATA::~SATA()>
c00295b3:	83 c4 10             	add    esp,0x10
c00295b6:	83 ec 08             	sub    esp,0x8
c00295b9:	68 7c 01 00 00       	push   0x17c
c00295be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295c2:	e8 08 8f fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c00295c7:	83 c4 10             	add    esp,0x10
c00295ca:	83 c4 0c             	add    esp,0xc
c00295cd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00295ce <SATAPI::~SATAPI()>:
c00295ce:	83 ec 0c             	sub    esp,0xc
c00295d1:	ba a0 d7 02 c0       	mov    edx,0xc002d7a0
c00295d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295da:	89 10                	mov    DWORD PTR [eax],edx
c00295dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e0:	83 ec 0c             	sub    esp,0xc
c00295e3:	50                   	push   eax
c00295e4:	e8 d5 a8 fe ff       	call   c0013ebe <PhysicalDisk::~PhysicalDisk()>
c00295e9:	83 c4 10             	add    esp,0x10
c00295ec:	90                   	nop
c00295ed:	83 c4 0c             	add    esp,0xc
c00295f0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00295f2 <SATAPI::~SATAPI()>:
c00295f2:	83 ec 0c             	sub    esp,0xc
c00295f5:	83 ec 0c             	sub    esp,0xc
c00295f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295fc:	e8 cd ff ff ff       	call   c00295ce <SATAPI::~SATAPI()>
c0029601:	83 c4 10             	add    esp,0x10
c0029604:	83 ec 08             	sub    esp,0x8
c0029607:	68 80 01 00 00       	push   0x180
c002960c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029610:	e8 ba 8e fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0029615:	83 c4 10             	add    esp,0x10
c0029618:	83 c4 0c             	add    esp,0xc
c002961b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002961c <AVX::~AVX()>:
c002961c:	83 ec 0c             	sub    esp,0xc
c002961f:	ba e0 d7 02 c0       	mov    edx,0xc002d7e0
c0029624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029628:	89 10                	mov    DWORD PTR [eax],edx
c002962a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002962e:	83 ec 0c             	sub    esp,0xc
c0029631:	50                   	push   eax
c0029632:	e8 0b a9 fe ff       	call   c0013f42 <FPU::~FPU()>
c0029637:	83 c4 10             	add    esp,0x10
c002963a:	90                   	nop
c002963b:	83 c4 0c             	add    esp,0xc
c002963e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029640 <AVX::~AVX()>:
c0029640:	83 ec 0c             	sub    esp,0xc
c0029643:	83 ec 0c             	sub    esp,0xc
c0029646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002964a:	e8 cd ff ff ff       	call   c002961c <AVX::~AVX()>
c002964f:	83 c4 10             	add    esp,0x10
c0029652:	83 ec 08             	sub    esp,0x8
c0029655:	68 58 01 00 00       	push   0x158
c002965a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002965e:	e8 6c 8e fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0029663:	83 c4 10             	add    esp,0x10
c0029666:	83 c4 0c             	add    esp,0xc
c0029669:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002966a <MMX::~MMX()>:
c002966a:	83 ec 0c             	sub    esp,0xc
c002966d:	ba 20 d8 02 c0       	mov    edx,0xc002d820
c0029672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029676:	89 10                	mov    DWORD PTR [eax],edx
c0029678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002967c:	83 ec 0c             	sub    esp,0xc
c002967f:	50                   	push   eax
c0029680:	e8 bd a8 fe ff       	call   c0013f42 <FPU::~FPU()>
c0029685:	83 c4 10             	add    esp,0x10
c0029688:	90                   	nop
c0029689:	83 c4 0c             	add    esp,0xc
c002968c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002968e <MMX::~MMX()>:
c002968e:	83 ec 0c             	sub    esp,0xc
c0029691:	83 ec 0c             	sub    esp,0xc
c0029694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029698:	e8 cd ff ff ff       	call   c002966a <MMX::~MMX()>
c002969d:	83 c4 10             	add    esp,0x10
c00296a0:	83 ec 08             	sub    esp,0x8
c00296a3:	68 58 01 00 00       	push   0x158
c00296a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296ac:	e8 1e 8e fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c00296b1:	83 c4 10             	add    esp,0x10
c00296b4:	83 c4 0c             	add    esp,0xc
c00296b7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00296b8 <SSE::~SSE()>:
c00296b8:	83 ec 0c             	sub    esp,0xc
c00296bb:	ba 60 d8 02 c0       	mov    edx,0xc002d860
c00296c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296c4:	89 10                	mov    DWORD PTR [eax],edx
c00296c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296ca:	83 ec 0c             	sub    esp,0xc
c00296cd:	50                   	push   eax
c00296ce:	e8 6f a8 fe ff       	call   c0013f42 <FPU::~FPU()>
c00296d3:	83 c4 10             	add    esp,0x10
c00296d6:	90                   	nop
c00296d7:	83 c4 0c             	add    esp,0xc
c00296da:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00296dc <SSE::~SSE()>:
c00296dc:	83 ec 0c             	sub    esp,0xc
c00296df:	83 ec 0c             	sub    esp,0xc
c00296e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296e6:	e8 cd ff ff ff       	call   c00296b8 <SSE::~SSE()>
c00296eb:	83 c4 10             	add    esp,0x10
c00296ee:	83 ec 08             	sub    esp,0x8
c00296f1:	68 58 01 00 00       	push   0x158
c00296f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296fa:	e8 d0 8d fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c00296ff:	83 c4 10             	add    esp,0x10
c0029702:	83 c4 0c             	add    esp,0xc
c0029705:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029706 <x87::~x87()>:
c0029706:	83 ec 0c             	sub    esp,0xc
c0029709:	ba a0 d8 02 c0       	mov    edx,0xc002d8a0
c002970e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029712:	89 10                	mov    DWORD PTR [eax],edx
c0029714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029718:	83 ec 0c             	sub    esp,0xc
c002971b:	50                   	push   eax
c002971c:	e8 21 a8 fe ff       	call   c0013f42 <FPU::~FPU()>
c0029721:	83 c4 10             	add    esp,0x10
c0029724:	90                   	nop
c0029725:	83 c4 0c             	add    esp,0xc
c0029728:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002972a <x87::~x87()>:
c002972a:	83 ec 0c             	sub    esp,0xc
c002972d:	83 ec 0c             	sub    esp,0xc
c0029730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029734:	e8 cd ff ff ff       	call   c0029706 <x87::~x87()>
c0029739:	83 c4 10             	add    esp,0x10
c002973c:	83 ec 08             	sub    esp,0x8
c002973f:	68 58 01 00 00       	push   0x158
c0029744:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029748:	e8 82 8d fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c002974d:	83 c4 10             	add    esp,0x10
c0029750:	83 c4 0c             	add    esp,0xc
c0029753:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029754 <IOAPIC::~IOAPIC()>:
c0029754:	83 ec 0c             	sub    esp,0xc
c0029757:	ba f8 d9 02 c0       	mov    edx,0xc002d9f8
c002975c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029760:	89 10                	mov    DWORD PTR [eax],edx
c0029762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029766:	83 ec 0c             	sub    esp,0xc
c0029769:	50                   	push   eax
c002976a:	e8 47 a1 fe ff       	call   c00138b6 <Device::~Device()>
c002976f:	83 c4 10             	add    esp,0x10
c0029772:	90                   	nop
c0029773:	83 c4 0c             	add    esp,0xc
c0029776:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029778 <IOAPIC::~IOAPIC()>:
c0029778:	83 ec 0c             	sub    esp,0xc
c002977b:	83 ec 0c             	sub    esp,0xc
c002977e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029782:	e8 cd ff ff ff       	call   c0029754 <IOAPIC::~IOAPIC()>
c0029787:	83 c4 10             	add    esp,0x10
c002978a:	83 ec 08             	sub    esp,0x8
c002978d:	68 68 01 00 00       	push   0x168
c0029792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029796:	e8 34 8d fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c002979b:	83 c4 10             	add    esp,0x10
c002979e:	83 c4 0c             	add    esp,0xc
c00297a1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00297a2 <APIC::~APIC()>:
c00297a2:	83 ec 0c             	sub    esp,0xc
c00297a5:	ba b0 d9 02 c0       	mov    edx,0xc002d9b0
c00297aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ae:	89 10                	mov    DWORD PTR [eax],edx
c00297b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b4:	83 ec 0c             	sub    esp,0xc
c00297b7:	50                   	push   eax
c00297b8:	e8 4f ac fe ff       	call   c001440c <InterruptController::~InterruptController()>
c00297bd:	83 c4 10             	add    esp,0x10
c00297c0:	90                   	nop
c00297c1:	83 c4 0c             	add    esp,0xc
c00297c4:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00297c6 <APIC::~APIC()>:
c00297c6:	83 ec 0c             	sub    esp,0xc
c00297c9:	83 ec 0c             	sub    esp,0xc
c00297cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297d0:	e8 cd ff ff ff       	call   c00297a2 <APIC::~APIC()>
c00297d5:	83 c4 10             	add    esp,0x10
c00297d8:	83 ec 08             	sub    esp,0x8
c00297db:	68 58 21 00 00       	push   0x2158
c00297e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297e4:	e8 e6 8c fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c00297e9:	83 c4 10             	add    esp,0x10
c00297ec:	83 c4 0c             	add    esp,0xc
c00297ef:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00297f0 <PIC::~PIC()>:
c00297f0:	83 ec 0c             	sub    esp,0xc
c00297f3:	ba 48 da 02 c0       	mov    edx,0xc002da48
c00297f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297fc:	89 10                	mov    DWORD PTR [eax],edx
c00297fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029802:	83 ec 0c             	sub    esp,0xc
c0029805:	50                   	push   eax
c0029806:	e8 01 ac fe ff       	call   c001440c <InterruptController::~InterruptController()>
c002980b:	83 c4 10             	add    esp,0x10
c002980e:	90                   	nop
c002980f:	83 c4 0c             	add    esp,0xc
c0029812:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029814 <PIC::~PIC()>:
c0029814:	83 ec 0c             	sub    esp,0xc
c0029817:	83 ec 0c             	sub    esp,0xc
c002981a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002981e:	e8 cd ff ff ff       	call   c00297f0 <PIC::~PIC()>
c0029823:	83 c4 10             	add    esp,0x10
c0029826:	83 ec 08             	sub    esp,0x8
c0029829:	68 58 21 00 00       	push   0x2158
c002982e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029832:	e8 98 8c fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0029837:	83 c4 10             	add    esp,0x10
c002983a:	83 c4 0c             	add    esp,0xc
c002983d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002983e <APICTimer::~APICTimer()>:
c002983e:	83 ec 0c             	sub    esp,0xc
c0029841:	ba 9c da 02 c0       	mov    edx,0xc002da9c
c0029846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002984a:	89 10                	mov    DWORD PTR [eax],edx
c002984c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029850:	83 ec 0c             	sub    esp,0xc
c0029853:	50                   	push   eax
c0029854:	e8 23 cc fe ff       	call   c001647c <Timer::~Timer()>
c0029859:	83 c4 10             	add    esp,0x10
c002985c:	90                   	nop
c002985d:	83 c4 0c             	add    esp,0xc
c0029860:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029862 <APICTimer::~APICTimer()>:
c0029862:	83 ec 0c             	sub    esp,0xc
c0029865:	83 ec 0c             	sub    esp,0xc
c0029868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002986c:	e8 cd ff ff ff       	call   c002983e <APICTimer::~APICTimer()>
c0029871:	83 c4 10             	add    esp,0x10
c0029874:	83 ec 08             	sub    esp,0x8
c0029877:	68 60 01 00 00       	push   0x160
c002987c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029880:	e8 4a 8c fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c0029885:	83 c4 10             	add    esp,0x10
c0029888:	83 c4 0c             	add    esp,0xc
c002988b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002988c <PIT::~PIT()>:
c002988c:	83 ec 0c             	sub    esp,0xc
c002988f:	ba ec da 02 c0       	mov    edx,0xc002daec
c0029894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029898:	89 10                	mov    DWORD PTR [eax],edx
c002989a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002989e:	83 ec 0c             	sub    esp,0xc
c00298a1:	50                   	push   eax
c00298a2:	e8 d5 cb fe ff       	call   c001647c <Timer::~Timer()>
c00298a7:	83 c4 10             	add    esp,0x10
c00298aa:	90                   	nop
c00298ab:	83 c4 0c             	add    esp,0xc
c00298ae:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00298b0 <PIT::~PIT()>:
c00298b0:	83 ec 0c             	sub    esp,0xc
c00298b3:	83 ec 0c             	sub    esp,0xc
c00298b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298ba:	e8 cd ff ff ff       	call   c002988c <PIT::~PIT()>
c00298bf:	83 c4 10             	add    esp,0x10
c00298c2:	83 ec 08             	sub    esp,0x8
c00298c5:	68 5c 01 00 00       	push   0x15c
c00298ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298ce:	e8 fc 8b fe ff       	call   c00124cf <operator delete(void*, unsigned long)>
c00298d3:	83 c4 10             	add    esp,0x10
c00298d6:	83 c4 0c             	add    esp,0xc
c00298d9:	c3                   	ret    
