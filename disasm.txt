
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 eb fb 00 00       	call   c000fc0b <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b3 8d 02 00       	call   c0028dd8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 6e 9a 02 c0       	mov    ebx,0xc0029a6e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 7c 9a 02 c0    	cmp    ebx,0xc0029a7c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 e3 02 c0       	mov    eax,0xc002e358
c0000049:	3d 58 e3 02 c0       	cmp    eax,0xc002e358
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 e3 02 c0       	push   0xc002e358
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 e3 02 c0       	mov    eax,0xc002e358
c0000075:	2d 58 e3 02 c0       	sub    eax,0xc002e358
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 e3 02 c0       	push   0xc002e358
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 e9 02 c0 00 	cmp    BYTE PTR ds:0xc002e988,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 84 9a 02 c0       	mov    ebx,0xc0029a84
c00000bb:	81 eb 80 9a 02 c0    	sub    ebx,0xc0029a80
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 80 9a 02 c0       	mov    esi,0xc0029a80
c00000ca:	a1 8c e9 02 c0       	mov    eax,ds:0xc002e98c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c e9 02 c0       	mov    ds:0xc002e98c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c e9 02 c0       	mov    eax,ds:0xc002e98c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 e3 02 c0       	push   0xc002e358
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e988,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 e9 02 c0       	push   0xc002e990
c000012c:	68 58 e3 02 c0       	push   0xc002e358
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 0f d9 01 00       	call   c001dcb2 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 68 28 01 00       	call   c0012c23 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 ed d8 01 00       	call   c001dcb2 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 95 dd 01 00       	call   c001e179 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 f3 e3 01 00       	call   c001e7e0 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 d0 ed 02 c0 	lgdtd  ds:0xc002edd0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 62 45 01 00       	call   c0014b43 <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000645 <hexStrToInt>:
c0000645:	56                   	push   esi
c0000646:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000064a:	31 d2                	xor    edx,edx

c000064c <hexStrToInt.looping>:
c000064c:	ac                   	lods   al,BYTE PTR ds:[esi]
c000064d:	84 c0                	test   al,al
c000064f:	74 0d                	je     c000065e <hexStrToInt.end>
c0000651:	d4 40                	aam    0x40
c0000653:	d5 39                	aad    0x39
c0000655:	2c 30                	sub    al,0x30
c0000657:	c1 e2 04             	shl    edx,0x4
c000065a:	08 c2                	or     dl,al
c000065c:	eb ee                	jmp    c000064c <hexStrToInt.looping>

c000065e <hexStrToInt.end>:
c000065e:	89 d0                	mov    eax,edx
c0000660:	5e                   	pop    esi
c0000661:	c3                   	ret    
c0000662:	66 90                	xchg   ax,ax

c0000664 <memcmp>:
c0000664:	56                   	push   esi
c0000665:	53                   	push   ebx
c0000666:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000066a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000672:	85 f6                	test   esi,esi
c0000674:	74 1d                	je     c0000693 <memcmp+0x2f>
c0000676:	8a 08                	mov    cl,BYTE PTR [eax]
c0000678:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000067b:	38 cb                	cmp    bl,cl
c000067d:	75 19                	jne    c0000698 <memcmp+0x34>
c000067f:	01 c6                	add    esi,eax
c0000681:	eb 0a                	jmp    c000068d <memcmp+0x29>
c0000683:	90                   	nop
c0000684:	8a 08                	mov    cl,BYTE PTR [eax]
c0000686:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000689:	38 d9                	cmp    cl,bl
c000068b:	75 0b                	jne    c0000698 <memcmp+0x34>
c000068d:	40                   	inc    eax
c000068e:	42                   	inc    edx
c000068f:	39 f0                	cmp    eax,esi
c0000691:	75 f1                	jne    c0000684 <memcmp+0x20>
c0000693:	31 c0                	xor    eax,eax
c0000695:	5b                   	pop    ebx
c0000696:	5e                   	pop    esi
c0000697:	c3                   	ret    
c0000698:	0f b6 c1             	movzx  eax,cl
c000069b:	29 d8                	sub    eax,ebx
c000069d:	5b                   	pop    ebx
c000069e:	5e                   	pop    esi
c000069f:	c3                   	ret    

c00006a0 <memmove>:
c00006a0:	55                   	push   ebp
c00006a1:	57                   	push   edi
c00006a2:	56                   	push   esi
c00006a3:	53                   	push   ebx
c00006a4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00006a8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00006b0:	39 dd                	cmp    ebp,ebx
c00006b2:	0f 83 80 00 00 00    	jae    c0000738 <memmove+0x98>
c00006b8:	85 d2                	test   edx,edx
c00006ba:	74 74                	je     c0000730 <memmove+0x90>
c00006bc:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006bf:	8d 75 04             	lea    esi,[ebp+0x4]
c00006c2:	39 cd                	cmp    ebp,ecx
c00006c4:	0f 93 c1             	setae  cl
c00006c7:	39 f3                	cmp    ebx,esi
c00006c9:	0f 93 c0             	setae  al
c00006cc:	89 c6                	mov    esi,eax
c00006ce:	09 ce                	or     esi,ecx
c00006d0:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006d3:	89 f0                	mov    eax,esi
c00006d5:	83 f9 0c             	cmp    ecx,0xc
c00006d8:	0f 97 c1             	seta   cl
c00006db:	84 c8                	test   al,cl
c00006dd:	74 75                	je     c0000754 <memmove+0xb4>
c00006df:	89 e9                	mov    ecx,ebp
c00006e1:	09 d9                	or     ecx,ebx
c00006e3:	83 e1 03             	and    ecx,0x3
c00006e6:	75 6c                	jne    c0000754 <memmove+0xb4>
c00006e8:	89 d7                	mov    edi,edx
c00006ea:	89 d9                	mov    ecx,ebx
c00006ec:	83 e7 fc             	and    edi,0xfffffffc
c00006ef:	89 ee                	mov    esi,ebp
c00006f1:	01 df                	add    edi,ebx
c00006f3:	90                   	nop
c00006f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006f6:	83 c6 04             	add    esi,0x4
c00006f9:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006fc:	83 c1 04             	add    ecx,0x4
c00006ff:	39 f9                	cmp    ecx,edi
c0000701:	75 f1                	jne    c00006f4 <memmove+0x54>
c0000703:	89 d1                	mov    ecx,edx
c0000705:	89 d7                	mov    edi,edx
c0000707:	83 e1 fc             	and    ecx,0xfffffffc
c000070a:	29 cf                	sub    edi,ecx
c000070c:	01 cb                	add    ebx,ecx
c000070e:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000712:	39 ca                	cmp    edx,ecx
c0000714:	74 1a                	je     c0000730 <memmove+0x90>
c0000716:	8a 03                	mov    al,BYTE PTR [ebx]
c0000718:	83 ff 01             	cmp    edi,0x1
c000071b:	88 06                	mov    BYTE PTR [esi],al
c000071d:	74 11                	je     c0000730 <memmove+0x90>
c000071f:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000722:	83 ff 02             	cmp    edi,0x2
c0000725:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000728:	74 06                	je     c0000730 <memmove+0x90>
c000072a:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c000072d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000730:	5b                   	pop    ebx
c0000731:	89 e8                	mov    eax,ebp
c0000733:	5e                   	pop    esi
c0000734:	5f                   	pop    edi
c0000735:	5d                   	pop    ebp
c0000736:	c3                   	ret    
c0000737:	90                   	nop
c0000738:	76 f6                	jbe    c0000730 <memmove+0x90>
c000073a:	85 d2                	test   edx,edx
c000073c:	74 f2                	je     c0000730 <memmove+0x90>
c000073e:	4b                   	dec    ebx
c000073f:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000742:	66 90                	xchg   ax,ax
c0000744:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000747:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000074a:	4a                   	dec    edx
c000074b:	75 f7                	jne    c0000744 <memmove+0xa4>
c000074d:	5b                   	pop    ebx
c000074e:	89 e8                	mov    eax,ebp
c0000750:	5e                   	pop    esi
c0000751:	5f                   	pop    edi
c0000752:	5d                   	pop    ebp
c0000753:	c3                   	ret    
c0000754:	01 ea                	add    edx,ebp
c0000756:	89 e9                	mov    ecx,ebp
c0000758:	8a 03                	mov    al,BYTE PTR [ebx]
c000075a:	41                   	inc    ecx
c000075b:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000075e:	43                   	inc    ebx
c000075f:	39 d1                	cmp    ecx,edx
c0000761:	75 f5                	jne    c0000758 <memmove+0xb8>
c0000763:	eb cb                	jmp    c0000730 <memmove+0x90>
c0000765:	8d 76 00             	lea    esi,[esi+0x0]

c0000768 <memcpy>:
c0000768:	57                   	push   edi
c0000769:	56                   	push   esi
c000076a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000076e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000772:	a8 03                	test   al,0x3
c0000774:	74 12                	je     c0000788 <memcpy+0x20>
c0000776:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000077a:	89 c1                	mov    ecx,eax
c000077c:	fc                   	cld    
c000077d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000077f:	29 c7                	sub    edi,eax
c0000781:	5e                   	pop    esi
c0000782:	89 f8                	mov    eax,edi
c0000784:	5f                   	pop    edi
c0000785:	c3                   	ret    
c0000786:	66 90                	xchg   ax,ax
c0000788:	89 c1                	mov    ecx,eax
c000078a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078e:	c1 e9 02             	shr    ecx,0x2
c0000791:	fc                   	cld    
c0000792:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000794:	29 c7                	sub    edi,eax
c0000796:	5e                   	pop    esi
c0000797:	89 f8                	mov    eax,edi
c0000799:	5f                   	pop    edi
c000079a:	c3                   	ret    
c000079b:	90                   	nop

c000079c <memset>:
c000079c:	57                   	push   edi
c000079d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007a1:	85 c9                	test   ecx,ecx
c00007a3:	74 0b                	je     c00007b0 <memset+0x14>
c00007a5:	fc                   	cld    
c00007a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007aa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00007ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007b4:	5f                   	pop    edi
c00007b5:	c3                   	ret    
c00007b6:	66 90                	xchg   ax,ax

c00007b8 <strlen>:
c00007b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00007bc:	31 c0                	xor    eax,eax
c00007be:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00007c1:	74 09                	je     c00007cc <strlen+0x14>
c00007c3:	90                   	nop
c00007c4:	40                   	inc    eax
c00007c5:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007c9:	75 f9                	jne    c00007c4 <strlen+0xc>
c00007cb:	c3                   	ret    
c00007cc:	c3                   	ret    
c00007cd:	8d 76 00             	lea    esi,[esi+0x0]

c00007d0 <strpbrk>:
c00007d0:	57                   	push   edi
c00007d1:	56                   	push   esi
c00007d2:	53                   	push   ebx
c00007d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007db:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007dd:	84 db                	test   bl,bl
c00007df:	74 21                	je     c0000802 <strpbrk+0x32>
c00007e1:	8a 07                	mov    al,BYTE PTR [edi]
c00007e3:	84 c0                	test   al,al
c00007e5:	74 14                	je     c00007fb <strpbrk+0x2b>
c00007e7:	38 d8                	cmp    al,bl
c00007e9:	74 19                	je     c0000804 <strpbrk+0x34>
c00007eb:	89 fa                	mov    edx,edi
c00007ed:	eb 05                	jmp    c00007f4 <strpbrk+0x24>
c00007ef:	90                   	nop
c00007f0:	38 d9                	cmp    cl,bl
c00007f2:	74 10                	je     c0000804 <strpbrk+0x34>
c00007f4:	42                   	inc    edx
c00007f5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007f7:	84 c9                	test   cl,cl
c00007f9:	75 f5                	jne    c00007f0 <strpbrk+0x20>
c00007fb:	46                   	inc    esi
c00007fc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007fe:	84 db                	test   bl,bl
c0000800:	75 e1                	jne    c00007e3 <strpbrk+0x13>
c0000802:	31 f6                	xor    esi,esi
c0000804:	89 f0                	mov    eax,esi
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	5f                   	pop    edi
c0000809:	c3                   	ret    
c000080a:	66 90                	xchg   ax,ax

c000080c <strtok>:
c000080c:	56                   	push   esi
c000080d:	53                   	push   ebx
c000080e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000812:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000816:	85 db                	test   ebx,ebx
c0000818:	75 07                	jne    c0000821 <strtok+0x15>
c000081a:	eb 2c                	jmp    c0000848 <strtok+0x3c>
c000081c:	43                   	inc    ebx
c000081d:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000821:	56                   	push   esi
c0000822:	53                   	push   ebx
c0000823:	e8 a8 ff ff ff       	call   c00007d0 <strpbrk>
c0000828:	5a                   	pop    edx
c0000829:	a3 a8 e9 02 c0       	mov    ds:0xc002e9a8,eax
c000082e:	59                   	pop    ecx
c000082f:	39 d8                	cmp    eax,ebx
c0000831:	74 e9                	je     c000081c <strtok+0x10>
c0000833:	85 c0                	test   eax,eax
c0000835:	74 1b                	je     c0000852 <strtok+0x46>
c0000837:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000083a:	8d 50 01             	lea    edx,[eax+0x1]
c000083d:	89 d8                	mov    eax,ebx
c000083f:	89 15 a8 e9 02 c0    	mov    DWORD PTR ds:0xc002e9a8,edx
c0000845:	5b                   	pop    ebx
c0000846:	5e                   	pop    esi
c0000847:	c3                   	ret    
c0000848:	8b 1d a8 e9 02 c0    	mov    ebx,DWORD PTR ds:0xc002e9a8
c000084e:	85 db                	test   ebx,ebx
c0000850:	75 cf                	jne    c0000821 <strtok+0x15>
c0000852:	31 c0                	xor    eax,eax
c0000854:	5b                   	pop    ebx
c0000855:	5e                   	pop    esi
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strcpy>:
c0000858:	53                   	push   ebx
c0000859:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000085d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000861:	89 c3                	mov    ebx,eax
c0000863:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000865:	84 d2                	test   dl,dl
c0000867:	74 0d                	je     c0000876 <strcpy+0x1e>
c0000869:	8d 76 00             	lea    esi,[esi+0x0]
c000086c:	88 13                	mov    BYTE PTR [ebx],dl
c000086e:	41                   	inc    ecx
c000086f:	43                   	inc    ebx
c0000870:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000872:	84 d2                	test   dl,dl
c0000874:	75 f6                	jne    c000086c <strcpy+0x14>
c0000876:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000879:	5b                   	pop    ebx
c000087a:	c3                   	ret    
c000087b:	90                   	nop

c000087c <strncpy>:
c000087c:	55                   	push   ebp
c000087d:	57                   	push   edi
c000087e:	56                   	push   esi
c000087f:	53                   	push   ebx
c0000880:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000884:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000888:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000088c:	85 c0                	test   eax,eax
c000088e:	74 39                	je     c00008c9 <strncpy+0x4d>
c0000890:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000892:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000895:	8d 55 01             	lea    edx,[ebp+0x1]
c0000898:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000089b:	84 db                	test   bl,bl
c000089d:	74 31                	je     c00008d0 <strncpy+0x54>
c000089f:	85 c9                	test   ecx,ecx
c00008a1:	74 26                	je     c00008c9 <strncpy+0x4d>
c00008a3:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c00008a6:	8d 48 fe             	lea    ecx,[eax-0x2]
c00008a9:	8d 55 02             	lea    edx,[ebp+0x2]
c00008ac:	8d 46 02             	lea    eax,[esi+0x2]
c00008af:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00008b2:	84 db                	test   bl,bl
c00008b4:	75 0f                	jne    c00008c5 <strncpy+0x49>
c00008b6:	eb 18                	jmp    c00008d0 <strncpy+0x54>
c00008b8:	40                   	inc    eax
c00008b9:	42                   	inc    edx
c00008ba:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00008bd:	49                   	dec    ecx
c00008be:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008c1:	84 db                	test   bl,bl
c00008c3:	74 0b                	je     c00008d0 <strncpy+0x54>
c00008c5:	85 c9                	test   ecx,ecx
c00008c7:	75 ef                	jne    c00008b8 <strncpy+0x3c>
c00008c9:	5b                   	pop    ebx
c00008ca:	89 e8                	mov    eax,ebp
c00008cc:	5e                   	pop    esi
c00008cd:	5f                   	pop    edi
c00008ce:	5d                   	pop    ebp
c00008cf:	c3                   	ret    
c00008d0:	85 c9                	test   ecx,ecx
c00008d2:	74 f5                	je     c00008c9 <strncpy+0x4d>
c00008d4:	fc                   	cld    
c00008d5:	31 c0                	xor    eax,eax
c00008d7:	89 d7                	mov    edi,edx
c00008d9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008db:	89 e8                	mov    eax,ebp
c00008dd:	5b                   	pop    ebx
c00008de:	5e                   	pop    esi
c00008df:	5f                   	pop    edi
c00008e0:	5d                   	pop    ebp
c00008e1:	c3                   	ret    
c00008e2:	66 90                	xchg   ax,ax

c00008e4 <strcmp>:
c00008e4:	56                   	push   esi
c00008e5:	53                   	push   ebx
c00008e6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ee:	8a 16                	mov    dl,BYTE PTR [esi]
c00008f0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008f3:	38 d1                	cmp    cl,dl
c00008f5:	75 1d                	jne    c0000914 <strcmp+0x30>
c00008f7:	84 c9                	test   cl,cl
c00008f9:	74 21                	je     c000091c <strcmp+0x38>
c00008fb:	b8 01 00 00 00       	mov    eax,0x1
c0000900:	eb 07                	jmp    c0000909 <strcmp+0x25>
c0000902:	66 90                	xchg   ax,ax
c0000904:	40                   	inc    eax
c0000905:	84 d2                	test   dl,dl
c0000907:	74 13                	je     c000091c <strcmp+0x38>
c0000909:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c000090c:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c0000910:	38 ca                	cmp    dl,cl
c0000912:	74 f0                	je     c0000904 <strcmp+0x20>
c0000914:	0f b6 c2             	movzx  eax,dl
c0000917:	5b                   	pop    ebx
c0000918:	29 c8                	sub    eax,ecx
c000091a:	5e                   	pop    esi
c000091b:	c3                   	ret    
c000091c:	31 c0                	xor    eax,eax
c000091e:	5b                   	pop    ebx
c000091f:	5e                   	pop    esi
c0000920:	c3                   	ret    
c0000921:	8d 76 00             	lea    esi,[esi+0x0]

c0000924 <strchr>:
c0000924:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000928:	8a 10                	mov    dl,BYTE PTR [eax]
c000092a:	84 d2                	test   dl,dl
c000092c:	74 15                	je     c0000943 <strchr+0x1f>
c000092e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000932:	38 ca                	cmp    dl,cl
c0000934:	75 06                	jne    c000093c <strchr+0x18>
c0000936:	eb 0e                	jmp    c0000946 <strchr+0x22>
c0000938:	38 ca                	cmp    dl,cl
c000093a:	74 09                	je     c0000945 <strchr+0x21>
c000093c:	40                   	inc    eax
c000093d:	8a 10                	mov    dl,BYTE PTR [eax]
c000093f:	84 d2                	test   dl,dl
c0000941:	75 f5                	jne    c0000938 <strchr+0x14>
c0000943:	31 c0                	xor    eax,eax
c0000945:	c3                   	ret    
c0000946:	c3                   	ret    
c0000947:	90                   	nop

c0000948 <strncmp>:
c0000948:	57                   	push   edi
c0000949:	56                   	push   esi
c000094a:	53                   	push   ebx
c000094b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000094f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000953:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000957:	85 ff                	test   edi,edi
c0000959:	74 28                	je     c0000983 <strncmp+0x3b>
c000095b:	8a 16                	mov    dl,BYTE PTR [esi]
c000095d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000960:	38 d1                	cmp    cl,dl
c0000962:	75 28                	jne    c000098c <strncmp+0x44>
c0000964:	8d 46 01             	lea    eax,[esi+0x1]
c0000967:	84 c9                	test   cl,cl
c0000969:	74 18                	je     c0000983 <strncmp+0x3b>
c000096b:	01 fe                	add    esi,edi
c000096d:	eb 0f                	jmp    c000097e <strncmp+0x36>
c000096f:	90                   	nop
c0000970:	8a 10                	mov    dl,BYTE PTR [eax]
c0000972:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000975:	38 ca                	cmp    dl,cl
c0000977:	75 13                	jne    c000098c <strncmp+0x44>
c0000979:	40                   	inc    eax
c000097a:	84 d2                	test   dl,dl
c000097c:	74 05                	je     c0000983 <strncmp+0x3b>
c000097e:	43                   	inc    ebx
c000097f:	39 c6                	cmp    esi,eax
c0000981:	75 ed                	jne    c0000970 <strncmp+0x28>
c0000983:	5b                   	pop    ebx
c0000984:	31 c0                	xor    eax,eax
c0000986:	5e                   	pop    esi
c0000987:	5f                   	pop    edi
c0000988:	c3                   	ret    
c0000989:	8d 76 00             	lea    esi,[esi+0x0]
c000098c:	5b                   	pop    ebx
c000098d:	0f b6 c2             	movzx  eax,dl
c0000990:	5e                   	pop    esi
c0000991:	29 c8                	sub    eax,ecx
c0000993:	5f                   	pop    edi
c0000994:	c3                   	ret    
c0000995:	8d 76 00             	lea    esi,[esi+0x0]

c0000998 <strcat>:
c0000998:	56                   	push   esi
c0000999:	53                   	push   ebx
c000099a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000099e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00009a2:	89 c3                	mov    ebx,eax
c00009a4:	eb 04                	jmp    c00009aa <strcat+0x12>
c00009a6:	66 90                	xchg   ax,ax
c00009a8:	89 d3                	mov    ebx,edx
c00009aa:	8d 53 01             	lea    edx,[ebx+0x1]
c00009ad:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009b1:	75 f5                	jne    c00009a8 <strcat+0x10>
c00009b3:	31 d2                	xor    edx,edx
c00009b5:	8d 76 00             	lea    esi,[esi+0x0]
c00009b8:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00009bb:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00009be:	42                   	inc    edx
c00009bf:	84 c9                	test   cl,cl
c00009c1:	75 f5                	jne    c00009b8 <strcat+0x20>
c00009c3:	5b                   	pop    ebx
c00009c4:	5e                   	pop    esi
c00009c5:	c3                   	ret    
c00009c6:	66 90                	xchg   ax,ax

c00009c8 <strncat>:
c00009c8:	56                   	push   esi
c00009c9:	53                   	push   ebx
c00009ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009d6:	85 f6                	test   esi,esi
c00009d8:	74 1e                	je     c00009f8 <strncat+0x30>
c00009da:	89 c2                	mov    edx,eax
c00009dc:	42                   	inc    edx
c00009dd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009e1:	75 f9                	jne    c00009dc <strncat+0x14>
c00009e3:	01 ce                	add    esi,ecx
c00009e5:	eb 06                	jmp    c00009ed <strncat+0x25>
c00009e7:	90                   	nop
c00009e8:	39 f1                	cmp    ecx,esi
c00009ea:	74 10                	je     c00009fc <strncat+0x34>
c00009ec:	42                   	inc    edx
c00009ed:	41                   	inc    ecx
c00009ee:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009f1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009f4:	84 db                	test   bl,bl
c00009f6:	75 f0                	jne    c00009e8 <strncat+0x20>
c00009f8:	5b                   	pop    ebx
c00009f9:	5e                   	pop    esi
c00009fa:	c3                   	ret    
c00009fb:	90                   	nop
c00009fc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009ff:	5b                   	pop    ebx
c0000a00:	5e                   	pop    esi
c0000a01:	c3                   	ret    
c0000a02:	66 90                	xchg   ax,ax

c0000a04 <strstr>:
c0000a04:	57                   	push   edi
c0000a05:	56                   	push   esi
c0000a06:	53                   	push   ebx
c0000a07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000a0b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000a0f:	57                   	push   edi
c0000a10:	e8 a3 fd ff ff       	call   c00007b8 <strlen>
c0000a15:	59                   	pop    ecx
c0000a16:	85 c0                	test   eax,eax
c0000a18:	74 2a                	je     c0000a44 <strstr+0x40>
c0000a1a:	89 c6                	mov    esi,eax
c0000a1c:	eb 12                	jmp    c0000a30 <strstr+0x2c>
c0000a1e:	66 90                	xchg   ax,ax
c0000a20:	56                   	push   esi
c0000a21:	57                   	push   edi
c0000a22:	53                   	push   ebx
c0000a23:	e8 3c fc ff ff       	call   c0000664 <memcmp>
c0000a28:	83 c4 0c             	add    esp,0xc
c0000a2b:	85 c0                	test   eax,eax
c0000a2d:	74 15                	je     c0000a44 <strstr+0x40>
c0000a2f:	43                   	inc    ebx
c0000a30:	53                   	push   ebx
c0000a31:	e8 82 fd ff ff       	call   c00007b8 <strlen>
c0000a36:	5a                   	pop    edx
c0000a37:	39 f0                	cmp    eax,esi
c0000a39:	73 e5                	jae    c0000a20 <strstr+0x1c>
c0000a3b:	5b                   	pop    ebx
c0000a3c:	31 c0                	xor    eax,eax
c0000a3e:	5e                   	pop    esi
c0000a3f:	5f                   	pop    edi
c0000a40:	c3                   	ret    
c0000a41:	8d 76 00             	lea    esi,[esi+0x0]
c0000a44:	89 d8                	mov    eax,ebx
c0000a46:	5b                   	pop    ebx
c0000a47:	5e                   	pop    esi
c0000a48:	5f                   	pop    edi
c0000a49:	c3                   	ret    
c0000a4a:	66 90                	xchg   ax,ax

c0000a4c <toupper>:
c0000a4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a50:	0f b6 d0             	movzx  edx,al
c0000a53:	f6 82 a0 9a 02 c0 02 	test   BYTE PTR [edx-0x3ffd6560],0x2
c0000a5a:	74 03                	je     c0000a5f <toupper+0x13>
c0000a5c:	83 e8 20             	sub    eax,0x20
c0000a5f:	c3                   	ret    

c0000a60 <tolower>:
c0000a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a64:	0f b6 d0             	movzx  edx,al
c0000a67:	f6 82 a0 9a 02 c0 01 	test   BYTE PTR [edx-0x3ffd6560],0x1
c0000a6e:	74 03                	je     c0000a73 <tolower+0x13>
c0000a70:	83 c0 20             	add    eax,0x20
c0000a73:	c3                   	ret    

c0000a74 <simple_strtoul>:
c0000a74:	55                   	push   ebp
c0000a75:	57                   	push   edi
c0000a76:	56                   	push   esi
c0000a77:	53                   	push   ebx
c0000a78:	83 ec 08             	sub    esp,0x8
c0000a7b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a7f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a83:	90                   	nop
c0000a84:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a87:	f6 82 a0 9a 02 c0 08 	test   BYTE PTR [edx-0x3ffd6560],0x8
c0000a8e:	75 05                	jne    c0000a95 <simple_strtoul+0x21>
c0000a90:	80 fa 09             	cmp    dl,0x9
c0000a93:	75 03                	jne    c0000a98 <simple_strtoul+0x24>
c0000a95:	41                   	inc    ecx
c0000a96:	eb ec                	jmp    c0000a84 <simple_strtoul+0x10>
c0000a98:	80 fa 2d             	cmp    dl,0x2d
c0000a9b:	0f 84 1b 01 00 00    	je     c0000bbc <simple_strtoul+0x148>
c0000aa1:	80 fa 2b             	cmp    dl,0x2b
c0000aa4:	0f 84 c2 00 00 00    	je     c0000b6c <simple_strtoul+0xf8>
c0000aaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000ab2:	85 f6                	test   esi,esi
c0000ab4:	0f 85 c3 00 00 00    	jne    c0000b7d <simple_strtoul+0x109>
c0000aba:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000abc:	80 fa 30             	cmp    dl,0x30
c0000abf:	0f 84 47 01 00 00    	je     c0000c0c <simple_strtoul+0x198>
c0000ac5:	be 0a 00 00 00       	mov    esi,0xa
c0000aca:	84 d2                	test   dl,dl
c0000acc:	0f 84 6f 01 00 00    	je     c0000c41 <simple_strtoul+0x1cd>
c0000ad2:	31 ed                	xor    ebp,ebp
c0000ad4:	31 ff                	xor    edi,edi
c0000ad6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000add:	eb 2b                	jmp    c0000b0a <simple_strtoul+0x96>
c0000adf:	90                   	nop
c0000ae0:	83 eb 30             	sub    ebx,0x30
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	73 4d                	jae    c0000b34 <simple_strtoul+0xc0>
c0000ae7:	31 d2                	xor    edx,edx
c0000ae9:	89 d8                	mov    eax,ebx
c0000aeb:	f7 d0                	not    eax
c0000aed:	f7 f6                	div    esi
c0000aef:	39 f8                	cmp    eax,edi
c0000af1:	0f 82 b1 00 00 00    	jb     c0000ba8 <simple_strtoul+0x134>
c0000af7:	0f af fe             	imul   edi,esi
c0000afa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000b01:	01 df                	add    edi,ebx
c0000b03:	41                   	inc    ecx
c0000b04:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b06:	84 d2                	test   dl,dl
c0000b08:	74 2a                	je     c0000b34 <simple_strtoul+0xc0>
c0000b0a:	0f b6 da             	movzx  ebx,dl
c0000b0d:	f6 83 a0 9a 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6560],0x4
c0000b14:	75 ca                	jne    c0000ae0 <simple_strtoul+0x6c>
c0000b16:	0f be d2             	movsx  edx,dl
c0000b19:	52                   	push   edx
c0000b1a:	e8 2d ff ff ff       	call   c0000a4c <toupper>
c0000b1f:	5b                   	pop    ebx
c0000b20:	0f b6 d0             	movzx  edx,al
c0000b23:	f6 82 a0 9a 02 c0 01 	test   BYTE PTR [edx-0x3ffd6560],0x1
c0000b2a:	74 08                	je     c0000b34 <simple_strtoul+0xc0>
c0000b2c:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b2f:	39 f3                	cmp    ebx,esi
c0000b31:	72 b4                	jb     c0000ae7 <simple_strtoul+0x73>
c0000b33:	90                   	nop
c0000b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b38:	85 c0                	test   eax,eax
c0000b3a:	74 14                	je     c0000b50 <simple_strtoul+0xdc>
c0000b3c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b3f:	09 f8                	or     eax,edi
c0000b41:	75 71                	jne    c0000bb4 <simple_strtoul+0x140>
c0000b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b47:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b4b:	31 ff                	xor    edi,edi
c0000b4d:	89 30                	mov    DWORD PTR [eax],esi
c0000b4f:	90                   	nop
c0000b50:	4d                   	dec    ebp
c0000b51:	75 05                	jne    c0000b58 <simple_strtoul+0xe4>
c0000b53:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b58:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b5d:	75 02                	jne    c0000b61 <simple_strtoul+0xed>
c0000b5f:	f7 df                	neg    edi
c0000b61:	83 c4 08             	add    esp,0x8
c0000b64:	89 f8                	mov    eax,edi
c0000b66:	5b                   	pop    ebx
c0000b67:	5e                   	pop    esi
c0000b68:	5f                   	pop    edi
c0000b69:	5d                   	pop    ebp
c0000b6a:	c3                   	ret    
c0000b6b:	90                   	nop
c0000b6c:	41                   	inc    ecx
c0000b6d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b75:	85 f6                	test   esi,esi
c0000b77:	0f 84 3d ff ff ff    	je     c0000aba <simple_strtoul+0x46>
c0000b7d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b80:	83 f8 22             	cmp    eax,0x22
c0000b83:	77 6a                	ja     c0000bef <simple_strtoul+0x17b>
c0000b85:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b87:	83 fe 08             	cmp    esi,0x8
c0000b8a:	0f 84 a2 00 00 00    	je     c0000c32 <simple_strtoul+0x1be>
c0000b90:	83 fe 10             	cmp    esi,0x10
c0000b93:	0f 85 31 ff ff ff    	jne    c0000aca <simple_strtoul+0x56>
c0000b99:	80 fa 30             	cmp    dl,0x30
c0000b9c:	74 2c                	je     c0000bca <simple_strtoul+0x156>
c0000b9e:	be 10 00 00 00       	mov    esi,0x10
c0000ba3:	e9 22 ff ff ff       	jmp    c0000aca <simple_strtoul+0x56>
c0000ba8:	bd 01 00 00 00       	mov    ebp,0x1
c0000bad:	31 ff                	xor    edi,edi
c0000baf:	e9 4f ff ff ff       	jmp    c0000b03 <simple_strtoul+0x8f>
c0000bb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb8:	89 08                	mov    DWORD PTR [eax],ecx
c0000bba:	eb 94                	jmp    c0000b50 <simple_strtoul+0xdc>
c0000bbc:	41                   	inc    ecx
c0000bbd:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000bc5:	e9 e8 fe ff ff       	jmp    c0000ab2 <simple_strtoul+0x3e>
c0000bca:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bce:	88 04 24             	mov    BYTE PTR [esp],al
c0000bd1:	50                   	push   eax
c0000bd2:	e8 89 fe ff ff       	call   c0000a60 <tolower>
c0000bd7:	5e                   	pop    esi
c0000bd8:	83 f8 78             	cmp    eax,0x78
c0000bdb:	0f 84 84 00 00 00    	je     c0000c65 <simple_strtoul+0x1f1>
c0000be1:	41                   	inc    ecx
c0000be2:	be 10 00 00 00       	mov    esi,0x10
c0000be7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bea:	e9 db fe ff ff       	jmp    c0000aca <simple_strtoul+0x56>
c0000bef:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bf3:	85 ff                	test   edi,edi
c0000bf5:	74 5c                	je     c0000c53 <simple_strtoul+0x1df>
c0000bf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bfb:	85 c9                	test   ecx,ecx
c0000bfd:	75 4e                	jne    c0000c4d <simple_strtoul+0x1d9>
c0000bff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000c05:	31 ff                	xor    edi,edi
c0000c07:	e9 4c ff ff ff       	jmp    c0000b58 <simple_strtoul+0xe4>
c0000c0c:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000c10:	88 04 24             	mov    BYTE PTR [esp],al
c0000c13:	50                   	push   eax
c0000c14:	e8 47 fe ff ff       	call   c0000a60 <tolower>
c0000c19:	5d                   	pop    ebp
c0000c1a:	83 f8 78             	cmp    eax,0x78
c0000c1d:	74 3b                	je     c0000c5a <simple_strtoul+0x1e6>
c0000c1f:	41                   	inc    ecx
c0000c20:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000c23:	80 fa 30             	cmp    dl,0x30
c0000c26:	74 13                	je     c0000c3b <simple_strtoul+0x1c7>
c0000c28:	be 08 00 00 00       	mov    esi,0x8
c0000c2d:	e9 98 fe ff ff       	jmp    c0000aca <simple_strtoul+0x56>
c0000c32:	80 fa 30             	cmp    dl,0x30
c0000c35:	0f 85 8f fe ff ff    	jne    c0000aca <simple_strtoul+0x56>
c0000c3b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c3e:	41                   	inc    ecx
c0000c3f:	eb e7                	jmp    c0000c28 <simple_strtoul+0x1b4>
c0000c41:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c45:	85 d2                	test   edx,edx
c0000c47:	74 0a                	je     c0000c53 <simple_strtoul+0x1df>
c0000c49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c4d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c51:	89 30                	mov    DWORD PTR [eax],esi
c0000c53:	31 ff                	xor    edi,edi
c0000c55:	e9 fe fe ff ff       	jmp    c0000b58 <simple_strtoul+0xe4>
c0000c5a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c5d:	83 c1 02             	add    ecx,0x2
c0000c60:	e9 34 ff ff ff       	jmp    c0000b99 <simple_strtoul+0x125>
c0000c65:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c68:	be 10 00 00 00       	mov    esi,0x10
c0000c6d:	83 c1 02             	add    ecx,0x2
c0000c70:	e9 55 fe ff ff       	jmp    c0000aca <simple_strtoul+0x56>

c0000c75 <largebin_index>:
c0000c75:	89 c2                	mov    edx,eax
c0000c77:	c1 ea 08             	shr    edx,0x8
c0000c7a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c80:	77 10                	ja     c0000c92 <largebin_index+0x1d>
c0000c82:	0f bd d2             	bsr    edx,edx
c0000c85:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c88:	d3 e8                	shr    eax,cl
c0000c8a:	83 e0 03             	and    eax,0x3
c0000c8d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c91:	c3                   	ret    
c0000c92:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c97:	c3                   	ret    

c0000c98 <malloc_init_state>:
c0000c98:	53                   	push   ebx
c0000c99:	8d 50 34             	lea    edx,[eax+0x34]
c0000c9c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000ca2:	89 d1                	mov    ecx,edx
c0000ca4:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000ca7:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000caa:	83 c2 08             	add    edx,0x8
c0000cad:	39 da                	cmp    edx,ebx
c0000caf:	75 f3                	jne    c0000ca4 <malloc_init_state+0xc>
c0000cb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cb3:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000cbd:	83 e2 03             	and    edx,0x3
c0000cc0:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cca:	83 ca 48             	or     edx,0x48
c0000ccd:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cd7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ce1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ce8:	89 10                	mov    DWORD PTR [eax],edx
c0000cea:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ced:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cf7:	5b                   	pop    ebx
c0000cf8:	c3                   	ret    

c0000cf9 <malloc_consolidate>:
c0000cf9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cfb:	85 d2                	test   edx,edx
c0000cfd:	0f 84 d8 00 00 00    	je     c0000ddb <malloc_consolidate+0xe2>
c0000d03:	55                   	push   ebp
c0000d04:	83 e2 fd             	and    edx,0xfffffffd
c0000d07:	57                   	push   edi
c0000d08:	89 c5                	mov    ebp,eax
c0000d0a:	56                   	push   esi
c0000d0b:	8d 78 34             	lea    edi,[eax+0x34]
c0000d0e:	53                   	push   ebx
c0000d0f:	83 ec 10             	sub    esp,0x10
c0000d12:	89 10                	mov    DWORD PTR [eax],edx
c0000d14:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d18:	c1 ea 03             	shr    edx,0x3
c0000d1b:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d1f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d23:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d26:	85 d2                	test   edx,edx
c0000d28:	0f 84 98 00 00 00    	je     c0000dc6 <malloc_consolidate+0xcd>
c0000d2e:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d35:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d38:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d3b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d3f:	89 f9                	mov    ecx,edi
c0000d41:	83 e1 fe             	and    ecx,0xfffffffe
c0000d44:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d47:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d4a:	83 e3 fc             	and    ebx,0xfffffffc
c0000d4d:	83 e7 01             	and    edi,0x1
c0000d50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d53:	75 14                	jne    c0000d69 <malloc_consolidate+0x70>
c0000d55:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d57:	29 fa                	sub    edx,edi
c0000d59:	01 f9                	add    ecx,edi
c0000d5b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d5e:	89 fb                	mov    ebx,edi
c0000d60:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d63:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d66:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d69:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d6c:	74 40                	je     c0000dae <malloc_consolidate+0xb5>
c0000d6e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d71:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d74:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d78:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d7b:	83 e7 01             	and    edi,0x1
c0000d7e:	75 0e                	jne    c0000d8e <malloc_consolidate+0x95>
c0000d80:	01 d9                	add    ecx,ebx
c0000d82:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d85:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d88:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d8b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d8e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d91:	89 ce                	mov    esi,ecx
c0000d93:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d96:	83 ce 01             	or     esi,0x1
c0000d99:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d9c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d9f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000da2:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000da6:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000da9:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000dac:	eb 0c                	jmp    c0000dba <malloc_consolidate+0xc1>
c0000dae:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000db1:	83 c9 01             	or     ecx,0x1
c0000db4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000db7:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000dba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000dbe:	85 d2                	test   edx,edx
c0000dc0:	0f 85 6f ff ff ff    	jne    c0000d35 <malloc_consolidate+0x3c>
c0000dc6:	83 c5 04             	add    ebp,0x4
c0000dc9:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000dcd:	0f 85 50 ff ff ff    	jne    c0000d23 <malloc_consolidate+0x2a>
c0000dd3:	83 c4 10             	add    esp,0x10
c0000dd6:	5b                   	pop    ebx
c0000dd7:	5e                   	pop    esi
c0000dd8:	5f                   	pop    edi
c0000dd9:	5d                   	pop    ebp
c0000dda:	c3                   	ret    
c0000ddb:	e9 b8 fe ff ff       	jmp    c0000c98 <malloc_init_state>

c0000de0 <dlfree>:
c0000de0:	57                   	push   edi
c0000de1:	56                   	push   esi
c0000de2:	53                   	push   ebx
c0000de3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000de7:	85 db                	test   ebx,ebx
c0000de9:	0f 84 e2 00 00 00    	je     c0000ed1 <dlfree+0xf1>
c0000def:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000df2:	8b 0d c0 e9 02 c0    	mov    ecx,DWORD PTR ds:0xc002e9c0
c0000df8:	89 f0                	mov    eax,esi
c0000dfa:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dfd:	83 e0 fc             	and    eax,0xfffffffc
c0000e00:	39 c1                	cmp    ecx,eax
c0000e02:	72 24                	jb     c0000e28 <dlfree+0x48>
c0000e04:	83 c9 03             	or     ecx,0x3
c0000e07:	c1 e8 03             	shr    eax,0x3
c0000e0a:	89 0d c0 e9 02 c0    	mov    DWORD PTR ds:0xc002e9c0,ecx
c0000e10:	83 e8 02             	sub    eax,0x2
c0000e13:	8b 0c 85 c4 e9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd163c]
c0000e1a:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e1c:	89 14 85 c4 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd163c],edx
c0000e23:	e9 a9 00 00 00       	jmp    c0000ed1 <dlfree+0xf1>
c0000e28:	83 e6 02             	and    esi,0x2
c0000e2b:	0f 85 a0 00 00 00    	jne    c0000ed1 <dlfree+0xf1>
c0000e31:	83 c9 01             	or     ecx,0x1
c0000e34:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e37:	89 0d c0 e9 02 c0    	mov    DWORD PTR ds:0xc002e9c0,ecx
c0000e3d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e40:	83 e1 fc             	and    ecx,0xfffffffc
c0000e43:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e47:	75 13                	jne    c0000e5c <dlfree+0x7c>
c0000e49:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e4c:	29 da                	sub    edx,ebx
c0000e4e:	01 d8                	add    eax,ebx
c0000e50:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e53:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e56:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e59:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5c:	39 35 ec e9 02 c0    	cmp    DWORD PTR ds:0xc002e9ec,esi
c0000e62:	74 40                	je     c0000ea4 <dlfree+0xc4>
c0000e64:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e68:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e6b:	80 e3 01             	and    bl,0x1
c0000e6e:	75 0e                	jne    c0000e7e <dlfree+0x9e>
c0000e70:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e73:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e76:	01 c8                	add    eax,ecx
c0000e78:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e7b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e7e:	8b 0d fc e9 02 c0    	mov    ecx,DWORD PTR ds:0xc002e9fc
c0000e84:	c7 42 0c f4 e9 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e9f4
c0000e8b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e8e:	89 15 fc e9 02 c0    	mov    DWORD PTR ds:0xc002e9fc,edx
c0000e94:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e97:	89 c1                	mov    ecx,eax
c0000e99:	83 c9 01             	or     ecx,0x1
c0000e9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e9f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000ea2:	eb 10                	jmp    c0000eb4 <dlfree+0xd4>
c0000ea4:	01 c8                	add    eax,ecx
c0000ea6:	89 c1                	mov    ecx,eax
c0000ea8:	83 c9 01             	or     ecx,0x1
c0000eab:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000eae:	89 15 ec e9 02 c0    	mov    DWORD PTR ds:0xc002e9ec,edx
c0000eb4:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000eb9:	76 16                	jbe    c0000ed1 <dlfree+0xf1>
c0000ebb:	f6 05 c0 e9 02 c0 02 	test   BYTE PTR ds:0xc002e9c0,0x2
c0000ec2:	74 0d                	je     c0000ed1 <dlfree+0xf1>
c0000ec4:	5b                   	pop    ebx
c0000ec5:	b8 c0 e9 02 c0       	mov    eax,0xc002e9c0
c0000eca:	5e                   	pop    esi
c0000ecb:	5f                   	pop    edi
c0000ecc:	e9 28 fe ff ff       	jmp    c0000cf9 <malloc_consolidate>
c0000ed1:	5b                   	pop    ebx
c0000ed2:	5e                   	pop    esi
c0000ed3:	5f                   	pop    edi
c0000ed4:	c3                   	ret    

c0000ed5 <sYSMALLOc>:
c0000ed5:	55                   	push   ebp
c0000ed6:	57                   	push   edi
c0000ed7:	56                   	push   esi
c0000ed8:	53                   	push   ebx
c0000ed9:	89 d3                	mov    ebx,edx
c0000edb:	83 ec 2c             	sub    esp,0x2c
c0000ede:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ee2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ee8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000eeb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef2:	74 1f                	je     c0000f13 <sYSMALLOc+0x3e>
c0000ef4:	89 d8                	mov    eax,ebx
c0000ef6:	e8 fe fd ff ff       	call   c0000cf9 <malloc_consolidate>
c0000efb:	83 ec 0c             	sub    esp,0xc
c0000efe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000f02:	83 e8 07             	sub    eax,0x7
c0000f05:	50                   	push   eax
c0000f06:	e8 30 02 00 00       	call   c000113b <dlmalloc>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	e9 20 02 00 00       	jmp    c0001133 <sYSMALLOc+0x25e>
c0000f13:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000f16:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f1c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f1f:	83 e0 fc             	and    eax,0xfffffffc
c0000f22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f2a:	83 c0 10             	add    eax,0x10
c0000f2d:	01 c1                	add    ecx,eax
c0000f2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f33:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f3a:	74 04                	je     c0000f40 <sYSMALLOc+0x6b>
c0000f3c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f40:	f7 da                	neg    edx
c0000f42:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f4a:	21 d1                	and    ecx,edx
c0000f4c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f50:	7f 07                	jg     c0000f59 <sYSMALLOc+0x84>
c0000f52:	31 c0                	xor    eax,eax
c0000f54:	e9 da 01 00 00       	jmp    c0001133 <sYSMALLOc+0x25e>
c0000f59:	83 ec 0c             	sub    esp,0xc
c0000f5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f60:	e8 76 e7 00 00       	call   c000f6db <sbrk>
c0000f65:	83 c4 10             	add    esp,0x10
c0000f68:	89 c6                	mov    esi,eax
c0000f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0000f6d:	74 e3                	je     c0000f52 <sYSMALLOc+0x7d>
c0000f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f73:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f77:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f7a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f80:	39 f1                	cmp    ecx,esi
c0000f82:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f88:	75 13                	jne    c0000f9d <sYSMALLOc+0xc8>
c0000f8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f8e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f92:	83 c8 01             	or     eax,0x1
c0000f95:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f98:	e9 3e 01 00 00       	jmp    c00010db <sYSMALLOc+0x206>
c0000f9d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000fa3:	88 d0                	mov    al,dl
c0000fa5:	83 e0 01             	and    eax,0x1
c0000fa8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000fad:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000fb1:	0f 95 c0             	setne  al
c0000fb4:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000fb8:	39 f1                	cmp    ecx,esi
c0000fba:	76 12                	jbe    c0000fce <sYSMALLOc+0xf9>
c0000fbc:	84 c0                	test   al,al
c0000fbe:	74 0e                	je     c0000fce <sYSMALLOc+0xf9>
c0000fc0:	83 e2 fe             	and    edx,0xfffffffe
c0000fc3:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fc9:	e9 83 00 00 00       	jmp    c0001051 <sYSMALLOc+0x17c>
c0000fce:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fd3:	74 7c                	je     c0001051 <sYSMALLOc+0x17c>
c0000fd5:	84 c0                	test   al,al
c0000fd7:	74 0c                	je     c0000fe5 <sYSMALLOc+0x110>
c0000fd9:	89 f0                	mov    eax,esi
c0000fdb:	29 c8                	sub    eax,ecx
c0000fdd:	01 e8                	add    eax,ebp
c0000fdf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fe5:	89 f2                	mov    edx,esi
c0000fe7:	83 e2 07             	and    edx,0x7
c0000fea:	74 0c                	je     c0000ff8 <sYSMALLOc+0x123>
c0000fec:	b8 08 00 00 00       	mov    eax,0x8
c0000ff1:	29 d0                	sub    eax,edx
c0000ff3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ff6:	eb 04                	jmp    c0000ffc <sYSMALLOc+0x127>
c0000ff8:	89 f5                	mov    ebp,esi
c0000ffa:	31 c0                	xor    eax,eax
c0000ffc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001000:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001004:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001008:	01 c1                	add    ecx,eax
c000100a:	83 ec 0c             	sub    esp,0xc
c000100d:	01 f1                	add    ecx,esi
c000100f:	01 ca                	add    edx,ecx
c0001011:	29 c8                	sub    eax,ecx
c0001013:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0001017:	01 c2                	add    edx,eax
c0001019:	52                   	push   edx
c000101a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000101e:	e8 b8 e6 00 00       	call   c000f6db <sbrk>
c0001023:	83 c4 10             	add    esp,0x10
c0001026:	83 f8 ff             	cmp    eax,0xffffffff
c0001029:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000102d:	75 0f                	jne    c000103e <sYSMALLOc+0x169>
c000102f:	83 ec 0c             	sub    esp,0xc
c0001032:	6a 00                	push   0x0
c0001034:	e8 a2 e6 00 00       	call   c000f6db <sbrk>
c0001039:	83 c4 10             	add    esp,0x10
c000103c:	eb 30                	jmp    c000106e <sYSMALLOc+0x199>
c000103e:	39 c6                	cmp    esi,eax
c0001040:	76 33                	jbe    c0001075 <sYSMALLOc+0x1a0>
c0001042:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001046:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000104d:	01 f0                	add    eax,esi
c000104f:	eb 1d                	jmp    c000106e <sYSMALLOc+0x199>
c0001051:	83 ec 0c             	sub    esp,0xc
c0001054:	89 f5                	mov    ebp,esi
c0001056:	6a 00                	push   0x0
c0001058:	e8 7e e6 00 00       	call   c000f6db <sbrk>
c000105d:	89 c2                	mov    edx,eax
c000105f:	29 f2                	sub    edx,esi
c0001061:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001065:	83 c4 10             	add    esp,0x10
c0001068:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000106e:	31 d2                	xor    edx,edx
c0001070:	83 f8 ff             	cmp    eax,0xffffffff
c0001073:	74 66                	je     c00010db <sYSMALLOc+0x206>
c0001075:	29 e8                	sub    eax,ebp
c0001077:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000107a:	01 d0                	add    eax,edx
c000107c:	83 c8 01             	or     eax,0x1
c000107f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001082:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001088:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000108d:	74 4c                	je     c00010db <sYSMALLOc+0x206>
c000108f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001093:	83 e8 0c             	sub    eax,0xc
c0001096:	83 e0 f8             	and    eax,0xfffffff8
c0001099:	89 c2                	mov    edx,eax
c000109b:	83 ca 01             	or     edx,0x1
c000109e:	83 f8 0f             	cmp    eax,0xf
c00010a1:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c00010a4:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c00010ac:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c00010b4:	76 25                	jbe    c00010db <sYSMALLOc+0x206>
c00010b6:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010bc:	83 ec 0c             	sub    esp,0xc
c00010bf:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010c9:	83 c7 08             	add    edi,0x8
c00010cc:	57                   	push   edi
c00010cd:	e8 0e fd ff ff       	call   c0000de0 <dlfree>
c00010d2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010d8:	83 c4 10             	add    esp,0x10
c00010db:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010e1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010e7:	73 06                	jae    c00010ef <sYSMALLOc+0x21a>
c00010e9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010ef:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010f5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010fb:	73 06                	jae    c0001103 <sYSMALLOc+0x22e>
c00010fd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001103:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001106:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001109:	83 e2 fc             	and    edx,0xfffffffc
c000110c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001110:	0f 82 3c fe ff ff    	jb     c0000f52 <sYSMALLOc+0x7d>
c0001116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000111a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000111d:	29 fa                	sub    edx,edi
c000111f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001122:	83 ca 01             	or     edx,0x1
c0001125:	89 fb                	mov    ebx,edi
c0001127:	83 c0 08             	add    eax,0x8
c000112a:	83 cb 01             	or     ebx,0x1
c000112d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001130:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001133:	83 c4 2c             	add    esp,0x2c
c0001136:	5b                   	pop    ebx
c0001137:	5e                   	pop    esi
c0001138:	5f                   	pop    edi
c0001139:	5d                   	pop    ebp
c000113a:	c3                   	ret    

c000113b <dlmalloc>:
c000113b:	55                   	push   ebp
c000113c:	57                   	push   edi
c000113d:	56                   	push   esi
c000113e:	53                   	push   ebx
c000113f:	83 ec 1c             	sub    esp,0x1c
c0001142:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001146:	83 f8 df             	cmp    eax,0xffffffdf
c0001149:	0f 87 70 03 00 00    	ja     c00014bf <dlmalloc+0x384>
c000114f:	83 c0 0b             	add    eax,0xb
c0001152:	be 10 00 00 00       	mov    esi,0x10
c0001157:	83 f8 0f             	cmp    eax,0xf
c000115a:	76 05                	jbe    c0001161 <dlmalloc+0x26>
c000115c:	83 e0 f8             	and    eax,0xfffffff8
c000115f:	89 c6                	mov    esi,eax
c0001161:	8b 3d c0 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e9c0
c0001167:	f7 c7 01 00 00 00    	test   edi,0x1
c000116d:	75 17                	jne    c0001186 <dlmalloc+0x4b>
c000116f:	85 ff                	test   edi,edi
c0001171:	0f 85 05 03 00 00    	jne    c000147c <dlmalloc+0x341>
c0001177:	b8 c0 e9 02 c0       	mov    eax,0xc002e9c0
c000117c:	e8 78 fb ff ff       	call   c0000cf9 <malloc_consolidate>
c0001181:	e9 f6 02 00 00       	jmp    c000147c <dlmalloc+0x341>
c0001186:	39 f7                	cmp    edi,esi
c0001188:	72 1f                	jb     c00011a9 <dlmalloc+0x6e>
c000118a:	89 f2                	mov    edx,esi
c000118c:	c1 ea 03             	shr    edx,0x3
c000118f:	83 ea 02             	sub    edx,0x2
c0001192:	8b 04 95 c4 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd163c]
c0001199:	85 c0                	test   eax,eax
c000119b:	74 0c                	je     c00011a9 <dlmalloc+0x6e>
c000119d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00011a0:	89 0c 95 c4 e9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd163c],ecx
c00011a7:	eb 30                	jmp    c00011d9 <dlmalloc+0x9e>
c00011a9:	89 f0                	mov    eax,esi
c00011ab:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011b1:	77 2e                	ja     c00011e1 <dlmalloc+0xa6>
c00011b3:	c1 e8 03             	shr    eax,0x3
c00011b6:	8d 14 c5 f4 e9 02 c0 	lea    edx,[eax*8-0x3ffd160c]
c00011bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011c4:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011c7:	39 c3                	cmp    ebx,eax
c00011c9:	74 2e                	je     c00011f9 <dlmalloc+0xbe>
c00011cb:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011ce:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011d3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011d6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011d9:	83 c0 08             	add    eax,0x8
c00011dc:	e9 e0 02 00 00       	jmp    c00014c1 <dlmalloc+0x386>
c00011e1:	e8 8f fa ff ff       	call   c0000c75 <largebin_index>
c00011e6:	83 e7 02             	and    edi,0x2
c00011e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011ed:	74 0a                	je     c00011f9 <dlmalloc+0xbe>
c00011ef:	b8 c0 e9 02 c0       	mov    eax,0xc002e9c0
c00011f4:	e8 00 fb ff ff       	call   c0000cf9 <malloc_consolidate>
c00011f9:	8d 46 10             	lea    eax,[esi+0x10]
c00011fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001200:	8b 1d 00 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea00
c0001206:	81 fb f4 e9 02 c0    	cmp    ebx,0xc002e9f4
c000120c:	0f 84 13 01 00 00    	je     c0001325 <dlmalloc+0x1ea>
c0001212:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001215:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001218:	83 e7 fc             	and    edi,0xfffffffc
c000121b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001221:	77 4c                	ja     c000126f <dlmalloc+0x134>
c0001223:	3d f4 e9 02 c0       	cmp    eax,0xc002e9f4
c0001228:	75 45                	jne    c000126f <dlmalloc+0x134>
c000122a:	39 1d f0 e9 02 c0    	cmp    DWORD PTR ds:0xc002e9f0,ebx
c0001230:	75 3d                	jne    c000126f <dlmalloc+0x134>
c0001232:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001236:	73 37                	jae    c000126f <dlmalloc+0x134>
c0001238:	8d 04 33             	lea    eax,[ebx+esi*1]
c000123b:	89 fa                	mov    edx,edi
c000123d:	a3 fc e9 02 c0       	mov    ds:0xc002e9fc,eax
c0001242:	a3 00 ea 02 c0       	mov    ds:0xc002ea00,eax
c0001247:	a3 f0 e9 02 c0       	mov    ds:0xc002e9f0,eax
c000124c:	29 f2                	sub    edx,esi
c000124e:	c7 40 08 f4 e9 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e9f4
c0001255:	c7 40 0c f4 e9 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e9f4
c000125c:	83 ce 01             	or     esi,0x1
c000125f:	89 d1                	mov    ecx,edx
c0001261:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001264:	83 c9 01             	or     ecx,0x1
c0001267:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000126a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000126d:	eb 15                	jmp    c0001284 <dlmalloc+0x149>
c000126f:	a3 00 ea 02 c0       	mov    ds:0xc002ea00,eax
c0001274:	39 fe                	cmp    esi,edi
c0001276:	c7 40 08 f4 e9 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e9f4
c000127d:	75 0d                	jne    c000128c <dlmalloc+0x151>
c000127f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001284:	8d 43 08             	lea    eax,[ebx+0x8]
c0001287:	e9 35 02 00 00       	jmp    c00014c1 <dlmalloc+0x386>
c000128c:	89 f8                	mov    eax,edi
c000128e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001294:	77 19                	ja     c00012af <dlmalloc+0x174>
c0001296:	c1 e8 03             	shr    eax,0x3
c0001299:	8d 14 00             	lea    edx,[eax+eax*1]
c000129c:	83 c2 0d             	add    edx,0xd
c000129f:	8d 2c 95 b8 e9 02 c0 	lea    ebp,[edx*4-0x3ffd1648]
c00012a6:	8b 14 95 c0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1640]
c00012ad:	eb 46                	jmp    c00012f5 <dlmalloc+0x1ba>
c00012af:	e8 c1 f9 ff ff       	call   c0000c75 <largebin_index>
c00012b4:	8d 14 00             	lea    edx,[eax+eax*1]
c00012b7:	83 c2 0d             	add    edx,0xd
c00012ba:	8d 0c 95 c0 e9 02 c0 	lea    ecx,[edx*4-0x3ffd1640]
c00012c1:	8b 14 95 c0 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1640]
c00012c8:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012cb:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012cf:	89 d5                	mov    ebp,edx
c00012d1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012d5:	74 1e                	je     c00012f5 <dlmalloc+0x1ba>
c00012d7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012da:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012dd:	77 12                	ja     c00012f1 <dlmalloc+0x1b6>
c00012df:	83 cf 01             	or     edi,0x1
c00012e2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012e5:	76 05                	jbe    c00012ec <dlmalloc+0x1b1>
c00012e7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ea:	eb f6                	jmp    c00012e2 <dlmalloc+0x1a7>
c00012ec:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012ef:	eb 04                	jmp    c00012f5 <dlmalloc+0x1ba>
c00012f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012f5:	89 c7                	mov    edi,eax
c00012f7:	88 c1                	mov    cl,al
c00012f9:	c1 ff 05             	sar    edi,0x5
c00012fc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001300:	bf 01 00 00 00       	mov    edi,0x1
c0001305:	d3 e7                	shl    edi,cl
c0001307:	89 f8                	mov    eax,edi
c0001309:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000130d:	09 04 bd f4 ec 02 c0 	or     DWORD PTR [edi*4-0x3ffd130c],eax
c0001314:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001317:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000131a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000131d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001320:	e9 db fe ff ff       	jmp    c0001200 <dlmalloc+0xc5>
c0001325:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132b:	76 78                	jbe    c00013a5 <dlmalloc+0x26a>
c000132d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001331:	8d 04 c5 f4 e9 02 c0 	lea    eax,[eax*8-0x3ffd160c]
c0001338:	8d 48 f8             	lea    ecx,[eax-0x8]
c000133b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000133e:	39 ca                	cmp    edx,ecx
c0001340:	74 63                	je     c00013a5 <dlmalloc+0x26a>
c0001342:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001345:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001348:	83 e3 fc             	and    ebx,0xfffffffc
c000134b:	39 de                	cmp    esi,ebx
c000134d:	77 52                	ja     c00013a1 <dlmalloc+0x266>
c000134f:	89 df                	mov    edi,ebx
c0001351:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001354:	29 f7                	sub    edi,esi
c0001356:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001359:	01 d3                	add    ebx,edx
c000135b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000135e:	83 ff 0f             	cmp    edi,0xf
c0001361:	8d 42 08             	lea    eax,[edx+0x8]
c0001364:	77 09                	ja     c000136f <dlmalloc+0x234>
c0001366:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000136a:	e9 52 01 00 00       	jmp    c00014c1 <dlmalloc+0x386>
c000136f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001372:	83 ce 01             	or     esi,0x1
c0001375:	89 0d fc e9 02 c0    	mov    DWORD PTR ds:0xc002e9fc,ecx
c000137b:	89 0d 00 ea 02 c0    	mov    DWORD PTR ds:0xc002ea00,ecx
c0001381:	c7 41 08 f4 e9 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e9f4
c0001388:	c7 41 0c f4 e9 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e9f4
c000138f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001392:	89 fa                	mov    edx,edi
c0001394:	83 ca 01             	or     edx,0x1
c0001397:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000139a:	89 3b                	mov    DWORD PTR [ebx],edi
c000139c:	e9 20 01 00 00       	jmp    c00014c1 <dlmalloc+0x386>
c00013a1:	89 c2                	mov    edx,eax
c00013a3:	eb 99                	jmp    c000133e <dlmalloc+0x203>
c00013a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00013a9:	b8 01 00 00 00       	mov    eax,0x1
c00013ae:	41                   	inc    ecx
c00013af:	89 cb                	mov    ebx,ecx
c00013b1:	8d 14 cd ec e9 02 c0 	lea    edx,[ecx*8-0x3ffd1614]
c00013b8:	c1 eb 05             	shr    ebx,0x5
c00013bb:	d3 e0                	shl    eax,cl
c00013bd:	8b 3c 9d f4 ec 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd130c]
c00013c4:	39 f8                	cmp    eax,edi
c00013c6:	77 04                	ja     c00013cc <dlmalloc+0x291>
c00013c8:	85 c0                	test   eax,eax
c00013ca:	75 26                	jne    c00013f2 <dlmalloc+0x2b7>
c00013cc:	43                   	inc    ebx
c00013cd:	83 fb 02             	cmp    ebx,0x2
c00013d0:	0f 87 a6 00 00 00    	ja     c000147c <dlmalloc+0x341>
c00013d6:	8b 3c 9d f4 ec 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd130c]
c00013dd:	85 ff                	test   edi,edi
c00013df:	74 eb                	je     c00013cc <dlmalloc+0x291>
c00013e1:	89 d8                	mov    eax,ebx
c00013e3:	c1 e0 06             	shl    eax,0x6
c00013e6:	8d 14 85 ec e9 02 c0 	lea    edx,[eax*4-0x3ffd1614]
c00013ed:	b8 01 00 00 00       	mov    eax,0x1
c00013f2:	85 f8                	test   eax,edi
c00013f4:	75 07                	jne    c00013fd <dlmalloc+0x2c2>
c00013f6:	83 c2 08             	add    edx,0x8
c00013f9:	01 c0                	add    eax,eax
c00013fb:	eb f5                	jmp    c00013f2 <dlmalloc+0x2b7>
c00013fd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001400:	39 ca                	cmp    edx,ecx
c0001402:	75 14                	jne    c0001418 <dlmalloc+0x2dd>
c0001404:	89 c1                	mov    ecx,eax
c0001406:	83 c2 08             	add    edx,0x8
c0001409:	f7 d1                	not    ecx
c000140b:	01 c0                	add    eax,eax
c000140d:	21 cf                	and    edi,ecx
c000140f:	89 3c 9d f4 ec 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd130c],edi
c0001416:	eb ac                	jmp    c00013c4 <dlmalloc+0x289>
c0001418:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000141b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000141e:	83 e0 fc             	and    eax,0xfffffffc
c0001421:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001424:	89 c3                	mov    ebx,eax
c0001426:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001429:	29 f3                	sub    ebx,esi
c000142b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000142e:	83 fb 0f             	cmp    ebx,0xf
c0001431:	8d 41 08             	lea    eax,[ecx+0x8]
c0001434:	77 09                	ja     c000143f <dlmalloc+0x304>
c0001436:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000143a:	e9 82 00 00 00       	jmp    c00014c1 <dlmalloc+0x386>
c000143f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001442:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001448:	89 3d fc e9 02 c0    	mov    DWORD PTR ds:0xc002e9fc,edi
c000144e:	89 3d 00 ea 02 c0    	mov    DWORD PTR ds:0xc002ea00,edi
c0001454:	c7 47 08 f4 e9 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e9f4
c000145b:	c7 47 0c f4 e9 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e9f4
c0001462:	77 06                	ja     c000146a <dlmalloc+0x32f>
c0001464:	89 3d f0 e9 02 c0    	mov    DWORD PTR ds:0xc002e9f0,edi
c000146a:	83 ce 01             	or     esi,0x1
c000146d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001470:	89 d9                	mov    ecx,ebx
c0001472:	83 c9 01             	or     ecx,0x1
c0001475:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001478:	89 1a                	mov    DWORD PTR [edx],ebx
c000147a:	eb 45                	jmp    c00014c1 <dlmalloc+0x386>
c000147c:	a1 ec e9 02 c0       	mov    eax,ds:0xc002e9ec
c0001481:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001484:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001487:	83 e2 fc             	and    edx,0xfffffffc
c000148a:	39 d1                	cmp    ecx,edx
c000148c:	77 1e                	ja     c00014ac <dlmalloc+0x371>
c000148e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001491:	89 f3                	mov    ebx,esi
c0001493:	89 0d ec e9 02 c0    	mov    DWORD PTR ds:0xc002e9ec,ecx
c0001499:	83 cb 01             	or     ebx,0x1
c000149c:	29 f2                	sub    edx,esi
c000149e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	e9 2d fd ff ff       	jmp    c00011d9 <dlmalloc+0x9e>
c00014ac:	83 c4 1c             	add    esp,0x1c
c00014af:	89 f0                	mov    eax,esi
c00014b1:	5b                   	pop    ebx
c00014b2:	ba c0 e9 02 c0       	mov    edx,0xc002e9c0
c00014b7:	5e                   	pop    esi
c00014b8:	5f                   	pop    edi
c00014b9:	5d                   	pop    ebp
c00014ba:	e9 16 fa ff ff       	jmp    c0000ed5 <sYSMALLOc>
c00014bf:	31 c0                	xor    eax,eax
c00014c1:	83 c4 1c             	add    esp,0x1c
c00014c4:	5b                   	pop    ebx
c00014c5:	5e                   	pop    esi
c00014c6:	5f                   	pop    edi
c00014c7:	5d                   	pop    ebp
c00014c8:	c3                   	ret    

c00014c9 <iALLOc>:
c00014c9:	55                   	push   ebp
c00014ca:	89 c5                	mov    ebp,eax
c00014cc:	57                   	push   edi
c00014cd:	56                   	push   esi
c00014ce:	53                   	push   ebx
c00014cf:	83 ec 2c             	sub    esp,0x2c
c00014d2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014d6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014de:	83 3d c0 e9 02 c0 00 	cmp    DWORD PTR ds:0xc002e9c0,0x0
c00014e5:	75 12                	jne    c00014f9 <iALLOc+0x30>
c00014e7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014eb:	b8 c0 e9 02 c0       	mov    eax,0xc002e9c0
c00014f0:	e8 04 f8 ff ff       	call   c0000cf9 <malloc_consolidate>
c00014f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014fe:	74 12                	je     c0001512 <iALLOc+0x49>
c0001500:	85 ed                	test   ebp,ebp
c0001502:	0f 84 64 01 00 00    	je     c000166c <iALLOc+0x1a3>
c0001508:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001510:	eb 33                	jmp    c0001545 <iALLOc+0x7c>
c0001512:	85 ed                	test   ebp,ebp
c0001514:	75 14                	jne    c000152a <iALLOc+0x61>
c0001516:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000151e:	83 c4 2c             	add    esp,0x2c
c0001521:	5b                   	pop    ebx
c0001522:	5e                   	pop    esi
c0001523:	5f                   	pop    edi
c0001524:	5d                   	pop    ebp
c0001525:	e9 11 fc ff ff       	jmp    c000113b <dlmalloc>
c000152a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001531:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001539:	83 f8 0f             	cmp    eax,0xf
c000153c:	76 07                	jbe    c0001545 <iALLOc+0x7c>
c000153e:	83 e0 f8             	and    eax,0xfffffff8
c0001541:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001545:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000154a:	75 09                	jne    c0001555 <iALLOc+0x8c>
c000154c:	89 d0                	mov    eax,edx
c000154e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001551:	31 f6                	xor    esi,esi
c0001553:	eb 3b                	jmp    c0001590 <iALLOc+0xc7>
c0001555:	8b 02                	mov    eax,DWORD PTR [edx]
c0001557:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000155f:	83 c0 0b             	add    eax,0xb
c0001562:	83 f8 0f             	cmp    eax,0xf
c0001565:	76 07                	jbe    c000156e <iALLOc+0xa5>
c0001567:	83 e0 f8             	and    eax,0xfffffff8
c000156a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000156e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001572:	0f af f5             	imul   esi,ebp
c0001575:	eb 25                	jmp    c000159c <iALLOc+0xd3>
c0001577:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001579:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000157c:	bb 10 00 00 00       	mov    ebx,0x10
c0001581:	83 f9 0f             	cmp    ecx,0xf
c0001584:	76 05                	jbe    c000158b <iALLOc+0xc2>
c0001586:	83 e1 f8             	and    ecx,0xfffffff8
c0001589:	89 cb                	mov    ebx,ecx
c000158b:	01 de                	add    esi,ebx
c000158d:	83 c0 04             	add    eax,0x4
c0001590:	39 c7                	cmp    edi,eax
c0001592:	75 e3                	jne    c0001577 <iALLOc+0xae>
c0001594:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000159c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00015a0:	8b 1d 14 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed14
c00015a6:	83 ec 0c             	sub    esp,0xc
c00015a9:	c7 05 14 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed14,0x0
c00015b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00015b7:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00015bb:	50                   	push   eax
c00015bc:	e8 7a fb ff ff       	call   c000113b <dlmalloc>
c00015c1:	83 c4 10             	add    esp,0x10
c00015c4:	89 1d 14 ed 02 c0    	mov    DWORD PTR ds:0xc002ed14,ebx
c00015ca:	85 c0                	test   eax,eax
c00015cc:	0f 84 92 00 00 00    	je     c0001664 <iALLOc+0x19b>
c00015d2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015d5:	8d 78 f8             	lea    edi,[eax-0x8]
c00015d8:	83 e3 fc             	and    ebx,0xfffffffc
c00015db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015df:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015e4:	74 1e                	je     c0001604 <iALLOc+0x13b>
c00015e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ea:	89 d9                	mov    ecx,ebx
c00015ec:	52                   	push   edx
c00015ed:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015f1:	83 e9 04             	sub    ecx,0x4
c00015f4:	51                   	push   ecx
c00015f5:	6a 00                	push   0x0
c00015f7:	50                   	push   eax
c00015f8:	e8 9f f1 ff ff       	call   c000079c <memset>
c00015fd:	83 c4 10             	add    esp,0x10
c0001600:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001604:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001609:	75 14                	jne    c000161f <iALLOc+0x156>
c000160b:	8d 04 37             	lea    eax,[edi+esi*1]
c000160e:	29 f3                	sub    ebx,esi
c0001610:	8d 48 08             	lea    ecx,[eax+0x8]
c0001613:	83 cb 01             	or     ebx,0x1
c0001616:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000161a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000161d:	89 f3                	mov    ebx,esi
c000161f:	31 c0                	xor    eax,eax
c0001621:	4d                   	dec    ebp
c0001622:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001625:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001629:	39 c5                	cmp    ebp,eax
c000162b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000162e:	74 2c                	je     c000165c <iALLOc+0x193>
c0001630:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001634:	85 c9                	test   ecx,ecx
c0001636:	75 15                	jne    c000164d <iALLOc+0x184>
c0001638:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000163b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000163e:	b9 10 00 00 00       	mov    ecx,0x10
c0001643:	83 fe 0f             	cmp    esi,0xf
c0001646:	76 05                	jbe    c000164d <iALLOc+0x184>
c0001648:	83 e6 f8             	and    esi,0xfffffff8
c000164b:	89 f1                	mov    ecx,esi
c000164d:	89 ce                	mov    esi,ecx
c000164f:	29 cb                	sub    ebx,ecx
c0001651:	83 ce 01             	or     esi,0x1
c0001654:	40                   	inc    eax
c0001655:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001658:	01 cf                	add    edi,ecx
c000165a:	eb c6                	jmp    c0001622 <iALLOc+0x159>
c000165c:	83 cb 01             	or     ebx,0x1
c000165f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001662:	eb 08                	jmp    c000166c <iALLOc+0x1a3>
c0001664:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000166c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001670:	83 c4 2c             	add    esp,0x2c
c0001673:	5b                   	pop    ebx
c0001674:	5e                   	pop    esi
c0001675:	5f                   	pop    edi
c0001676:	5d                   	pop    ebp
c0001677:	c3                   	ret    

c0001678 <dlrealloc>:
c0001678:	55                   	push   ebp
c0001679:	57                   	push   edi
c000167a:	56                   	push   esi
c000167b:	53                   	push   ebx
c000167c:	83 ec 1c             	sub    esp,0x1c
c000167f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001683:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001687:	85 db                	test   ebx,ebx
c0001689:	75 10                	jne    c000169b <dlrealloc+0x23>
c000168b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000168f:	83 c4 1c             	add    esp,0x1c
c0001692:	5b                   	pop    ebx
c0001693:	5e                   	pop    esi
c0001694:	5f                   	pop    edi
c0001695:	5d                   	pop    ebp
c0001696:	e9 a0 fa ff ff       	jmp    c000113b <dlmalloc>
c000169b:	83 f8 df             	cmp    eax,0xffffffdf
c000169e:	76 07                	jbe    c00016a7 <dlrealloc+0x2f>
c00016a0:	31 db                	xor    ebx,ebx
c00016a2:	e9 7c 01 00 00       	jmp    c0001823 <dlrealloc+0x1ab>
c00016a7:	83 c0 0b             	add    eax,0xb
c00016aa:	bf 10 00 00 00       	mov    edi,0x10
c00016af:	83 f8 0f             	cmp    eax,0xf
c00016b2:	76 05                	jbe    c00016b9 <dlrealloc+0x41>
c00016b4:	83 e0 f8             	and    eax,0xfffffff8
c00016b7:	89 c7                	mov    edi,eax
c00016b9:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016bc:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016bf:	89 c6                	mov    esi,eax
c00016c1:	83 e6 fc             	and    esi,0xfffffffc
c00016c4:	a8 02                	test   al,0x2
c00016c6:	75 d8                	jne    c00016a0 <dlrealloc+0x28>
c00016c8:	39 f7                	cmp    edi,esi
c00016ca:	0f 86 15 01 00 00    	jbe    c00017e5 <dlrealloc+0x16d>
c00016d0:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016d4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016d7:	39 15 ec e9 02 c0    	cmp    DWORD PTR ds:0xc002e9ec,edx
c00016dd:	75 33                	jne    c0001712 <dlrealloc+0x9a>
c00016df:	83 e1 fc             	and    ecx,0xfffffffc
c00016e2:	01 f1                	add    ecx,esi
c00016e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016e8:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016eb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016ef:	77 49                	ja     c000173a <dlrealloc+0xc2>
c00016f1:	01 fd                	add    ebp,edi
c00016f3:	83 e0 01             	and    eax,0x1
c00016f6:	09 f8                	or     eax,edi
c00016f8:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016fb:	89 2d ec e9 02 c0    	mov    DWORD PTR ds:0xc002e9ec,ebp
c0001701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001705:	29 f8                	sub    eax,edi
c0001707:	83 c8 01             	or     eax,0x1
c000170a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000170d:	e9 11 01 00 00       	jmp    c0001823 <dlrealloc+0x1ab>
c0001712:	89 c8                	mov    eax,ecx
c0001714:	83 e0 fe             	and    eax,0xfffffffe
c0001717:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000171c:	75 1c                	jne    c000173a <dlrealloc+0xc2>
c000171e:	83 e1 fc             	and    ecx,0xfffffffc
c0001721:	01 f1                	add    ecx,esi
c0001723:	39 cf                	cmp    edi,ecx
c0001725:	77 13                	ja     c000173a <dlrealloc+0xc2>
c0001727:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000172a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000172d:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001730:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001733:	89 ce                	mov    esi,ecx
c0001735:	e9 ab 00 00 00       	jmp    c00017e5 <dlrealloc+0x16d>
c000173a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000173e:	8d 47 f9             	lea    eax,[edi-0x7]
c0001741:	83 ec 0c             	sub    esp,0xc
c0001744:	50                   	push   eax
c0001745:	e8 f1 f9 ff ff       	call   c000113b <dlmalloc>
c000174a:	83 c4 10             	add    esp,0x10
c000174d:	89 c1                	mov    ecx,eax
c000174f:	85 c0                	test   eax,eax
c0001751:	0f 84 49 ff ff ff    	je     c00016a0 <dlrealloc+0x28>
c0001757:	8d 40 f8             	lea    eax,[eax-0x8]
c000175a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000175e:	39 c2                	cmp    edx,eax
c0001760:	75 0a                	jne    c000176c <dlrealloc+0xf4>
c0001762:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001765:	83 e0 fc             	and    eax,0xfffffffc
c0001768:	01 c6                	add    esi,eax
c000176a:	eb 79                	jmp    c00017e5 <dlrealloc+0x16d>
c000176c:	83 ee 04             	sub    esi,0x4
c000176f:	83 fe 27             	cmp    esi,0x27
c0001772:	76 16                	jbe    c000178a <dlrealloc+0x112>
c0001774:	50                   	push   eax
c0001775:	56                   	push   esi
c0001776:	53                   	push   ebx
c0001777:	51                   	push   ecx
c0001778:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000177c:	e8 e7 ef ff ff       	call   c0000768 <memcpy>
c0001781:	83 c4 10             	add    esp,0x10
c0001784:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001788:	eb 43                	jmp    c00017cd <dlrealloc+0x155>
c000178a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000178c:	83 fe 13             	cmp    esi,0x13
c000178f:	89 01                	mov    DWORD PTR [ecx],eax
c0001791:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001794:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001797:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000179a:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000179d:	76 2e                	jbe    c00017cd <dlrealloc+0x155>
c000179f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00017a2:	83 fe 1b             	cmp    esi,0x1b
c00017a5:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00017a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00017ab:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00017ae:	76 1d                	jbe    c00017cd <dlrealloc+0x155>
c00017b0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00017b3:	83 fe 23             	cmp    esi,0x23
c00017b6:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00017b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017bc:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017bf:	76 0c                	jbe    c00017cd <dlrealloc+0x155>
c00017c1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017c4:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017ca:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017d1:	83 ec 0c             	sub    esp,0xc
c00017d4:	53                   	push   ebx
c00017d5:	e8 06 f6 ff ff       	call   c0000de0 <dlfree>
c00017da:	83 c4 10             	add    esp,0x10
c00017dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017e1:	89 cb                	mov    ebx,ecx
c00017e3:	eb 3e                	jmp    c0001823 <dlrealloc+0x1ab>
c00017e5:	89 f2                	mov    edx,esi
c00017e7:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017ea:	29 fa                	sub    edx,edi
c00017ec:	83 e1 01             	and    ecx,0x1
c00017ef:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017f3:	83 fa 0f             	cmp    edx,0xf
c00017f6:	77 0b                	ja     c0001803 <dlrealloc+0x18b>
c00017f8:	09 ce                	or     esi,ecx
c00017fa:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017fd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001801:	eb 20                	jmp    c0001823 <dlrealloc+0x1ab>
c0001803:	01 fd                	add    ebp,edi
c0001805:	83 ec 0c             	sub    esp,0xc
c0001808:	09 cf                	or     edi,ecx
c000180a:	83 ca 01             	or     edx,0x1
c000180d:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001810:	83 c5 08             	add    ebp,0x8
c0001813:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0001816:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000181a:	55                   	push   ebp
c000181b:	e8 c0 f5 ff ff       	call   c0000de0 <dlfree>
c0001820:	83 c4 10             	add    esp,0x10
c0001823:	83 c4 1c             	add    esp,0x1c
c0001826:	89 d8                	mov    eax,ebx
c0001828:	5b                   	pop    ebx
c0001829:	5e                   	pop    esi
c000182a:	5f                   	pop    edi
c000182b:	5d                   	pop    ebp
c000182c:	c3                   	ret    

c000182d <dlmemalign>:
c000182d:	55                   	push   ebp
c000182e:	57                   	push   edi
c000182f:	56                   	push   esi
c0001830:	53                   	push   ebx
c0001831:	83 ec 0c             	sub    esp,0xc
c0001834:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001838:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000183c:	83 fa 08             	cmp    edx,0x8
c000183f:	77 10                	ja     c0001851 <dlmemalign+0x24>
c0001841:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001845:	83 c4 0c             	add    esp,0xc
c0001848:	5b                   	pop    ebx
c0001849:	5e                   	pop    esi
c000184a:	5f                   	pop    edi
c000184b:	5d                   	pop    ebp
c000184c:	e9 ea f8 ff ff       	jmp    c000113b <dlmalloc>
c0001851:	bf 10 00 00 00       	mov    edi,0x10
c0001856:	83 fa 0f             	cmp    edx,0xf
c0001859:	76 13                	jbe    c000186e <dlmemalign+0x41>
c000185b:	8d 4a ff             	lea    ecx,[edx-0x1]
c000185e:	85 d1                	test   ecx,edx
c0001860:	75 04                	jne    c0001866 <dlmemalign+0x39>
c0001862:	89 d7                	mov    edi,edx
c0001864:	eb 08                	jmp    c000186e <dlmemalign+0x41>
c0001866:	39 d7                	cmp    edi,edx
c0001868:	73 04                	jae    c000186e <dlmemalign+0x41>
c000186a:	01 ff                	add    edi,edi
c000186c:	eb f8                	jmp    c0001866 <dlmemalign+0x39>
c000186e:	83 f8 df             	cmp    eax,0xffffffdf
c0001871:	76 07                	jbe    c000187a <dlmemalign+0x4d>
c0001873:	31 c0                	xor    eax,eax
c0001875:	e9 ce 00 00 00       	jmp    c0001948 <dlmemalign+0x11b>
c000187a:	83 c0 0b             	add    eax,0xb
c000187d:	bd 10 00 00 00       	mov    ebp,0x10
c0001882:	83 f8 0f             	cmp    eax,0xf
c0001885:	76 05                	jbe    c000188c <dlmemalign+0x5f>
c0001887:	83 e0 f8             	and    eax,0xfffffff8
c000188a:	89 c5                	mov    ebp,eax
c000188c:	83 ec 0c             	sub    esp,0xc
c000188f:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001893:	50                   	push   eax
c0001894:	e8 a2 f8 ff ff       	call   c000113b <dlmalloc>
c0001899:	83 c4 10             	add    esp,0x10
c000189c:	89 c1                	mov    ecx,eax
c000189e:	85 c0                	test   eax,eax
c00018a0:	74 d1                	je     c0001873 <dlmemalign+0x46>
c00018a2:	31 d2                	xor    edx,edx
c00018a4:	8d 70 f8             	lea    esi,[eax-0x8]
c00018a7:	f7 f7                	div    edi
c00018a9:	85 d2                	test   edx,edx
c00018ab:	74 62                	je     c000190f <dlmemalign+0xe2>
c00018ad:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00018b1:	89 f8                	mov    eax,edi
c00018b3:	f7 d8                	neg    eax
c00018b5:	21 c3                	and    ebx,eax
c00018b7:	83 eb 08             	sub    ebx,0x8
c00018ba:	89 d8                	mov    eax,ebx
c00018bc:	29 f0                	sub    eax,esi
c00018be:	83 f8 0f             	cmp    eax,0xf
c00018c1:	77 02                	ja     c00018c5 <dlmemalign+0x98>
c00018c3:	01 fb                	add    ebx,edi
c00018c5:	89 d8                	mov    eax,ebx
c00018c7:	29 f0                	sub    eax,esi
c00018c9:	89 c6                	mov    esi,eax
c00018cb:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018ce:	89 c2                	mov    edx,eax
c00018d0:	83 e2 fc             	and    edx,0xfffffffc
c00018d3:	29 f2                	sub    edx,esi
c00018d5:	a8 02                	test   al,0x2
c00018d7:	74 10                	je     c00018e9 <dlmemalign+0xbc>
c00018d9:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018dc:	83 ca 02             	or     edx,0x2
c00018df:	8d 43 08             	lea    eax,[ebx+0x8]
c00018e2:	89 33                	mov    DWORD PTR [ebx],esi
c00018e4:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018e7:	eb 5f                	jmp    c0001948 <dlmemalign+0x11b>
c00018e9:	83 ec 0c             	sub    esp,0xc
c00018ec:	89 d0                	mov    eax,edx
c00018ee:	83 c8 01             	or     eax,0x1
c00018f1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018f4:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018f9:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018fc:	83 e0 01             	and    eax,0x1
c00018ff:	09 f0                	or     eax,esi
c0001901:	89 de                	mov    esi,ebx
c0001903:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001906:	51                   	push   ecx
c0001907:	e8 d4 f4 ff ff       	call   c0000de0 <dlfree>
c000190c:	83 c4 10             	add    esp,0x10
c000190f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001912:	a8 02                	test   al,0x2
c0001914:	75 2f                	jne    c0001945 <dlmemalign+0x118>
c0001916:	83 e0 fc             	and    eax,0xfffffffc
c0001919:	8d 55 10             	lea    edx,[ebp+0x10]
c000191c:	39 c2                	cmp    edx,eax
c000191e:	73 25                	jae    c0001945 <dlmemalign+0x118>
c0001920:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001923:	83 ec 0c             	sub    esp,0xc
c0001926:	29 e8                	sub    eax,ebp
c0001928:	83 c2 08             	add    edx,0x8
c000192b:	83 c8 01             	or     eax,0x1
c000192e:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001931:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001934:	83 e0 01             	and    eax,0x1
c0001937:	09 c5                	or     ebp,eax
c0001939:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000193c:	52                   	push   edx
c000193d:	e8 9e f4 ff ff       	call   c0000de0 <dlfree>
c0001942:	83 c4 10             	add    esp,0x10
c0001945:	8d 46 08             	lea    eax,[esi+0x8]
c0001948:	83 c4 0c             	add    esp,0xc
c000194b:	5b                   	pop    ebx
c000194c:	5e                   	pop    esi
c000194d:	5f                   	pop    edi
c000194e:	5d                   	pop    ebp
c000194f:	c3                   	ret    

c0001950 <dlcalloc>:
c0001950:	53                   	push   ebx
c0001951:	83 ec 14             	sub    esp,0x14
c0001954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001958:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000195d:	50                   	push   eax
c000195e:	e8 d8 f7 ff ff       	call   c000113b <dlmalloc>
c0001963:	83 c4 10             	add    esp,0x10
c0001966:	89 c3                	mov    ebx,eax
c0001968:	85 c0                	test   eax,eax
c000196a:	74 77                	je     c00019e3 <dlcalloc+0x93>
c000196c:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000196f:	89 d0                	mov    eax,edx
c0001971:	83 e0 fc             	and    eax,0xfffffffc
c0001974:	80 e2 02             	and    dl,0x2
c0001977:	75 5a                	jne    c00019d3 <dlcalloc+0x83>
c0001979:	83 e8 04             	sub    eax,0x4
c000197c:	83 f8 27             	cmp    eax,0x27
c000197f:	76 03                	jbe    c0001984 <dlcalloc+0x34>
c0001981:	51                   	push   ecx
c0001982:	eb 53                	jmp    c00019d7 <dlcalloc+0x87>
c0001984:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000198a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001991:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001998:	83 f8 13             	cmp    eax,0x13
c000199b:	76 46                	jbe    c00019e3 <dlcalloc+0x93>
c000199d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00019a4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00019ab:	83 f8 1b             	cmp    eax,0x1b
c00019ae:	76 33                	jbe    c00019e3 <dlcalloc+0x93>
c00019b0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00019b7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019be:	83 f8 23             	cmp    eax,0x23
c00019c1:	76 20                	jbe    c00019e3 <dlcalloc+0x93>
c00019c3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019ca:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019d1:	eb 10                	jmp    c00019e3 <dlcalloc+0x93>
c00019d3:	83 e8 08             	sub    eax,0x8
c00019d6:	52                   	push   edx
c00019d7:	50                   	push   eax
c00019d8:	6a 00                	push   0x0
c00019da:	53                   	push   ebx
c00019db:	e8 bc ed ff ff       	call   c000079c <memset>
c00019e0:	83 c4 10             	add    esp,0x10
c00019e3:	89 d8                	mov    eax,ebx
c00019e5:	83 c4 08             	add    esp,0x8
c00019e8:	5b                   	pop    ebx
c00019e9:	c3                   	ret    

c00019ea <dlcfree>:
c00019ea:	e9 f1 f3 ff ff       	jmp    c0000de0 <dlfree>

c00019ef <dlindependent_calloc>:
c00019ef:	83 ec 28             	sub    esp,0x28
c00019f2:	b9 03 00 00 00       	mov    ecx,0x3
c00019f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a03:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a0b:	e8 b9 fa ff ff       	call   c00014c9 <iALLOc>
c0001a10:	83 c4 2c             	add    esp,0x2c
c0001a13:	c3                   	ret    

c0001a14 <dlindependent_comalloc>:
c0001a14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a1c:	31 c9                	xor    ecx,ecx
c0001a1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a26:	e9 9e fa ff ff       	jmp    c00014c9 <iALLOc>

c0001a2b <dlvalloc>:
c0001a2b:	83 ec 0c             	sub    esp,0xc
c0001a2e:	83 3d c0 e9 02 c0 00 	cmp    DWORD PTR ds:0xc002e9c0,0x0
c0001a35:	75 0a                	jne    c0001a41 <dlvalloc+0x16>
c0001a37:	b8 c0 e9 02 c0       	mov    eax,0xc002e9c0
c0001a3c:	e8 b8 f2 ff ff       	call   c0000cf9 <malloc_consolidate>
c0001a41:	50                   	push   eax
c0001a42:	50                   	push   eax
c0001a43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a47:	ff 35 1c ed 02 c0    	push   DWORD PTR ds:0xc002ed1c
c0001a4d:	e8 db fd ff ff       	call   c000182d <dlmemalign>
c0001a52:	83 c4 1c             	add    esp,0x1c
c0001a55:	c3                   	ret    

c0001a56 <dlpvalloc>:
c0001a56:	83 ec 0c             	sub    esp,0xc
c0001a59:	83 3d c0 e9 02 c0 00 	cmp    DWORD PTR ds:0xc002e9c0,0x0
c0001a60:	75 0a                	jne    c0001a6c <dlpvalloc+0x16>
c0001a62:	b8 c0 e9 02 c0       	mov    eax,0xc002e9c0
c0001a67:	e8 8d f2 ff ff       	call   c0000cf9 <malloc_consolidate>
c0001a6c:	a1 1c ed 02 c0       	mov    eax,ds:0xc002ed1c
c0001a71:	89 c1                	mov    ecx,eax
c0001a73:	52                   	push   edx
c0001a74:	f7 d9                	neg    ecx
c0001a76:	52                   	push   edx
c0001a77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a7b:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a7f:	21 ca                	and    edx,ecx
c0001a81:	52                   	push   edx
c0001a82:	50                   	push   eax
c0001a83:	e8 a5 fd ff ff       	call   c000182d <dlmemalign>
c0001a88:	83 c4 1c             	add    esp,0x1c
c0001a8b:	c3                   	ret    

c0001a8c <dlmalloc_trim>:
c0001a8c:	b8 c0 e9 02 c0       	mov    eax,0xc002e9c0
c0001a91:	e8 63 f2 ff ff       	call   c0000cf9 <malloc_consolidate>
c0001a96:	31 c0                	xor    eax,eax
c0001a98:	c3                   	ret    

c0001a99 <dlmalloc_usable_size>:
c0001a99:	53                   	push   ebx
c0001a9a:	31 c0                	xor    eax,eax
c0001a9c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001aa0:	85 c9                	test   ecx,ecx
c0001aa2:	74 24                	je     c0001ac8 <dlmalloc_usable_size+0x2f>
c0001aa4:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001aa7:	f6 c2 02             	test   dl,0x2
c0001aaa:	74 08                	je     c0001ab4 <dlmalloc_usable_size+0x1b>
c0001aac:	83 e2 fc             	and    edx,0xfffffffc
c0001aaf:	8d 42 f8             	lea    eax,[edx-0x8]
c0001ab2:	eb 14                	jmp    c0001ac8 <dlmalloc_usable_size+0x2f>
c0001ab4:	89 d3                	mov    ebx,edx
c0001ab6:	31 c0                	xor    eax,eax
c0001ab8:	83 e3 fe             	and    ebx,0xfffffffe
c0001abb:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001ac0:	74 06                	je     c0001ac8 <dlmalloc_usable_size+0x2f>
c0001ac2:	83 e2 fc             	and    edx,0xfffffffc
c0001ac5:	8d 42 fc             	lea    eax,[edx-0x4]
c0001ac8:	5b                   	pop    ebx
c0001ac9:	c3                   	ret    

c0001aca <dlmallinfo>:
c0001aca:	55                   	push   ebp
c0001acb:	57                   	push   edi
c0001acc:	56                   	push   esi
c0001acd:	53                   	push   ebx
c0001ace:	83 ec 08             	sub    esp,0x8
c0001ad1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ad5:	83 3d ec e9 02 c0 00 	cmp    DWORD PTR ds:0xc002e9ec,0x0
c0001adc:	75 0a                	jne    c0001ae8 <dlmallinfo+0x1e>
c0001ade:	b8 c0 e9 02 c0       	mov    eax,0xc002e9c0
c0001ae3:	e8 11 f2 ff ff       	call   c0000cf9 <malloc_consolidate>
c0001ae8:	a1 ec e9 02 c0       	mov    eax,ds:0xc002e9ec
c0001aed:	31 ed                	xor    ebp,ebp
c0001aef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001af2:	31 c9                	xor    ecx,ecx
c0001af4:	83 e0 fc             	and    eax,0xfffffffc
c0001af7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001afb:	31 c0                	xor    eax,eax
c0001afd:	8b 14 85 c4 e9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd163c]
c0001b04:	85 d2                	test   edx,edx
c0001b06:	74 0e                	je     c0001b16 <dlmallinfo+0x4c>
c0001b08:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b0b:	45                   	inc    ebp
c0001b0c:	83 e6 fc             	and    esi,0xfffffffc
c0001b0f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b12:	01 f1                	add    ecx,esi
c0001b14:	eb ee                	jmp    c0001b04 <dlmallinfo+0x3a>
c0001b16:	40                   	inc    eax
c0001b17:	83 f8 0a             	cmp    eax,0xa
c0001b1a:	75 e1                	jne    c0001afd <dlmallinfo+0x33>
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b27:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b2a:	b8 f4 e9 02 c0       	mov    eax,0xc002e9f4
c0001b2f:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b32:	39 f0                	cmp    eax,esi
c0001b34:	74 10                	je     c0001b46 <dlmallinfo+0x7c>
c0001b36:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b39:	ff 04 24             	inc    DWORD PTR [esp]
c0001b3c:	83 e7 fc             	and    edi,0xfffffffc
c0001b3f:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b42:	01 fa                	add    edx,edi
c0001b44:	eb ec                	jmp    c0001b32 <dlmallinfo+0x68>
c0001b46:	83 c0 08             	add    eax,0x8
c0001b49:	3d ec ec 02 c0       	cmp    eax,0xc002ecec
c0001b4e:	75 df                	jne    c0001b2f <dlmallinfo+0x65>
c0001b50:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b53:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b56:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b59:	a1 28 ed 02 c0       	mov    eax,ds:0xc002ed28
c0001b5e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b61:	89 03                	mov    DWORD PTR [ebx],eax
c0001b63:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b66:	8b 35 10 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed10
c0001b6c:	29 d0                	sub    eax,edx
c0001b6e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b71:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b74:	8b 35 24 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed24
c0001b7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b7e:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b81:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b84:	8b 35 34 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed34
c0001b8a:	89 d8                	mov    eax,ebx
c0001b8c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b8f:	83 c4 08             	add    esp,0x8
c0001b92:	5b                   	pop    ebx
c0001b93:	5e                   	pop    esi
c0001b94:	5f                   	pop    edi
c0001b95:	5d                   	pop    ebp
c0001b96:	c2 04 00             	ret    0x4

c0001b99 <dlmalloc_stats>:
c0001b99:	83 ec 30             	sub    esp,0x30
c0001b9c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ba0:	50                   	push   eax
c0001ba1:	e8 24 ff ff ff       	call   c0001aca <dlmallinfo>
c0001ba6:	83 c4 30             	add    esp,0x30
c0001ba9:	c3                   	ret    

c0001baa <dlmallopt>:
c0001baa:	56                   	push   esi
c0001bab:	b8 c0 e9 02 c0       	mov    eax,0xc002e9c0
c0001bb0:	53                   	push   ebx
c0001bb1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001bb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001bb9:	e8 3b f1 ff ff       	call   c0000cf9 <malloc_consolidate>
c0001bbe:	8d 46 04             	lea    eax,[esi+0x4]
c0001bc1:	83 f8 05             	cmp    eax,0x5
c0001bc4:	77 67                	ja     c0001c2d <dlmallopt+0x83>
c0001bc6:	ff 24 85 a4 9b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd645c]
c0001bcd:	83 fb 50             	cmp    ebx,0x50
c0001bd0:	77 5b                	ja     c0001c2d <dlmallopt+0x83>
c0001bd2:	ba 08 00 00 00       	mov    edx,0x8
c0001bd7:	85 db                	test   ebx,ebx
c0001bd9:	74 12                	je     c0001bed <dlmallopt+0x43>
c0001bdb:	83 c3 0b             	add    ebx,0xb
c0001bde:	ba 10 00 00 00       	mov    edx,0x10
c0001be3:	83 fb 0f             	cmp    ebx,0xf
c0001be6:	76 05                	jbe    c0001bed <dlmallopt+0x43>
c0001be8:	89 da                	mov    edx,ebx
c0001bea:	83 e2 f8             	and    edx,0xfffffff8
c0001bed:	a1 c0 e9 02 c0       	mov    eax,ds:0xc002e9c0
c0001bf2:	83 e0 03             	and    eax,0x3
c0001bf5:	09 d0                	or     eax,edx
c0001bf7:	a3 c0 e9 02 c0       	mov    ds:0xc002e9c0,eax
c0001bfc:	eb 31                	jmp    c0001c2f <dlmallopt+0x85>
c0001bfe:	89 1d 04 ed 02 c0    	mov    DWORD PTR ds:0xc002ed04,ebx
c0001c04:	eb 06                	jmp    c0001c0c <dlmallopt+0x62>
c0001c06:	89 1d 08 ed 02 c0    	mov    DWORD PTR ds:0xc002ed08,ebx
c0001c0c:	be 01 00 00 00       	mov    esi,0x1
c0001c11:	eb 1c                	jmp    c0001c2f <dlmallopt+0x85>
c0001c13:	89 1d 0c ed 02 c0    	mov    DWORD PTR ds:0xc002ed0c,ebx
c0001c19:	eb f1                	jmp    c0001c0c <dlmallopt+0x62>
c0001c1b:	31 f6                	xor    esi,esi
c0001c1d:	85 db                	test   ebx,ebx
c0001c1f:	75 0e                	jne    c0001c2f <dlmallopt+0x85>
c0001c21:	c7 05 14 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed14,0x0
c0001c2b:	eb df                	jmp    c0001c0c <dlmallopt+0x62>
c0001c2d:	31 f6                	xor    esi,esi
c0001c2f:	89 f0                	mov    eax,esi
c0001c31:	5b                   	pop    ebx
c0001c32:	5e                   	pop    esi
c0001c33:	c3                   	ret    

c0001c34 <disk_status>:
c0001c34:	31 c0                	xor    eax,eax
c0001c36:	c3                   	ret    

c0001c37 <disk_initialize>:
c0001c37:	31 c0                	xor    eax,eax
c0001c39:	c3                   	ret    

c0001c3a <disk_read>:
c0001c3a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c3f:	0f b6 04 85 a0 24 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdb60]
c0001c47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c4b:	e9 0a f8 01 00       	jmp    c002145a <fatWrapperReadDisk>

c0001c50 <disk_write>:
c0001c50:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c55:	0f b6 04 85 a0 24 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdb60]
c0001c5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c61:	e9 3b f8 01 00       	jmp    c00214a1 <fatWrapperWriteDisk>

c0001c66 <disk_ioctl>:
c0001c66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c6f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c74:	0f b6 04 85 a0 24 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdb60]
c0001c7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c80:	e9 63 f8 01 00       	jmp    c00214e8 <fatWrapperIoctl>

c0001c85 <ld_word>:
c0001c85:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c89:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c8c:	c1 e2 08             	shl    edx,0x8
c0001c8f:	09 d0                	or     eax,edx
c0001c91:	c3                   	ret    

c0001c92 <ld_dword>:
c0001c92:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c96:	89 d1                	mov    ecx,edx
c0001c98:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c9c:	c1 e1 08             	shl    ecx,0x8
c0001c9f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ca2:	09 ca                	or     edx,ecx
c0001ca4:	c1 e2 08             	shl    edx,0x8
c0001ca7:	09 d0                	or     eax,edx
c0001ca9:	c3                   	ret    

c0001caa <ld_qword>:
c0001caa:	57                   	push   edi
c0001cab:	56                   	push   esi
c0001cac:	53                   	push   ebx
c0001cad:	31 db                	xor    ebx,ebx
c0001caf:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001cb2:	89 df                	mov    edi,ebx
c0001cb4:	89 ce                	mov    esi,ecx
c0001cb6:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001cba:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cbe:	c1 e6 08             	shl    esi,0x8
c0001cc1:	09 f2                	or     edx,esi
c0001cc3:	89 d6                	mov    esi,edx
c0001cc5:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cc9:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ccd:	c1 e6 08             	shl    esi,0x8
c0001cd0:	09 f2                	or     edx,esi
c0001cd2:	89 d6                	mov    esi,edx
c0001cd4:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cd8:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cdc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cdf:	c1 e6 08             	shl    esi,0x8
c0001ce2:	89 fb                	mov    ebx,edi
c0001ce4:	09 f2                	or     edx,esi
c0001ce6:	89 d1                	mov    ecx,edx
c0001ce8:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cec:	c1 e1 08             	shl    ecx,0x8
c0001cef:	89 da                	mov    edx,ebx
c0001cf1:	09 c8                	or     eax,ecx
c0001cf3:	5b                   	pop    ebx
c0001cf4:	5e                   	pop    esi
c0001cf5:	5f                   	pop    edi
c0001cf6:	c3                   	ret    

c0001cf7 <st_word>:
c0001cf7:	66 89 10             	mov    WORD PTR [eax],dx
c0001cfa:	c3                   	ret    

c0001cfb <st_dword>:
c0001cfb:	89 10                	mov    DWORD PTR [eax],edx
c0001cfd:	c3                   	ret    

c0001cfe <st_qword>:
c0001cfe:	89 10                	mov    DWORD PTR [eax],edx
c0001d00:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001d03:	c3                   	ret    

c0001d04 <mem_cpy>:
c0001d04:	85 c9                	test   ecx,ecx
c0001d06:	74 10                	je     c0001d18 <mem_cpy+0x14>
c0001d08:	57                   	push   edi
c0001d09:	01 c1                	add    ecx,eax
c0001d0b:	56                   	push   esi
c0001d0c:	89 c7                	mov    edi,eax
c0001d0e:	89 d6                	mov    esi,edx
c0001d10:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d11:	39 f9                	cmp    ecx,edi
c0001d13:	75 fb                	jne    c0001d10 <mem_cpy+0xc>
c0001d15:	5e                   	pop    esi
c0001d16:	5f                   	pop    edi
c0001d17:	c3                   	ret    
c0001d18:	c3                   	ret    

c0001d19 <mem_set>:
c0001d19:	01 c1                	add    ecx,eax
c0001d1b:	40                   	inc    eax
c0001d1c:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d1f:	39 c8                	cmp    eax,ecx
c0001d21:	75 f8                	jne    c0001d1b <mem_set+0x2>
c0001d23:	c3                   	ret    

c0001d24 <mem_cmp>:
c0001d24:	57                   	push   edi
c0001d25:	56                   	push   esi
c0001d26:	89 c6                	mov    esi,eax
c0001d28:	53                   	push   ebx
c0001d29:	46                   	inc    esi
c0001d2a:	42                   	inc    edx
c0001d2b:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d2f:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d33:	29 fb                	sub    ebx,edi
c0001d35:	89 cf                	mov    edi,ecx
c0001d37:	29 f7                	sub    edi,esi
c0001d39:	01 c7                	add    edi,eax
c0001d3b:	74 04                	je     c0001d41 <mem_cmp+0x1d>
c0001d3d:	85 db                	test   ebx,ebx
c0001d3f:	74 e8                	je     c0001d29 <mem_cmp+0x5>
c0001d41:	89 d8                	mov    eax,ebx
c0001d43:	5b                   	pop    ebx
c0001d44:	5e                   	pop    esi
c0001d45:	5f                   	pop    edi
c0001d46:	c3                   	ret    

c0001d47 <chk_chr>:
c0001d47:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d4a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d4d:	74 07                	je     c0001d56 <chk_chr+0xf>
c0001d4f:	39 d1                	cmp    ecx,edx
c0001d51:	74 03                	je     c0001d56 <chk_chr+0xf>
c0001d53:	40                   	inc    eax
c0001d54:	eb f1                	jmp    c0001d47 <chk_chr>
c0001d56:	89 c8                	mov    eax,ecx
c0001d58:	c3                   	ret    

c0001d59 <dbc_1st>:
c0001d59:	31 c0                	xor    eax,eax
c0001d5b:	c3                   	ret    

c0001d5c <dbc_2nd>:
c0001d5c:	31 c0                	xor    eax,eax
c0001d5e:	c3                   	ret    

c0001d5f <tchar2uni>:
c0001d5f:	57                   	push   edi
c0001d60:	89 c7                	mov    edi,eax
c0001d62:	56                   	push   esi
c0001d63:	53                   	push   ebx
c0001d64:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d66:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d68:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d6b:	84 c9                	test   cl,cl
c0001d6d:	78 0a                	js     c0001d79 <tchar2uni+0x1a>
c0001d6f:	0f b6 d1             	movzx  edx,cl
c0001d72:	89 f3                	mov    ebx,esi
c0001d74:	e9 9f 00 00 00       	jmp    c0001e18 <tchar2uni+0xb9>
c0001d79:	88 ca                	mov    dl,cl
c0001d7b:	83 e2 e0             	and    edx,0xffffffe0
c0001d7e:	80 fa c0             	cmp    dl,0xc0
c0001d81:	75 0c                	jne    c0001d8f <tchar2uni+0x30>
c0001d83:	89 ca                	mov    edx,ecx
c0001d85:	b9 01 00 00 00       	mov    ecx,0x1
c0001d8a:	83 e2 1f             	and    edx,0x1f
c0001d8d:	eb 2e                	jmp    c0001dbd <tchar2uni+0x5e>
c0001d8f:	88 ca                	mov    dl,cl
c0001d91:	83 e2 f0             	and    edx,0xfffffff0
c0001d94:	80 fa e0             	cmp    dl,0xe0
c0001d97:	75 0c                	jne    c0001da5 <tchar2uni+0x46>
c0001d99:	89 ca                	mov    edx,ecx
c0001d9b:	b9 02 00 00 00       	mov    ecx,0x2
c0001da0:	83 e2 0f             	and    edx,0xf
c0001da3:	eb 18                	jmp    c0001dbd <tchar2uni+0x5e>
c0001da5:	88 ca                	mov    dl,cl
c0001da7:	83 e2 f8             	and    edx,0xfffffff8
c0001daa:	88 d0                	mov    al,dl
c0001dac:	83 ca ff             	or     edx,0xffffffff
c0001daf:	3c f0                	cmp    al,0xf0
c0001db1:	75 6c                	jne    c0001e1f <tchar2uni+0xc0>
c0001db3:	89 ca                	mov    edx,ecx
c0001db5:	b9 03 00 00 00       	mov    ecx,0x3
c0001dba:	83 e2 07             	and    edx,0x7
c0001dbd:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001dc1:	46                   	inc    esi
c0001dc2:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001dc5:	88 c8                	mov    al,cl
c0001dc7:	83 e0 c0             	and    eax,0xffffffc0
c0001dca:	3c 80                	cmp    al,0x80
c0001dcc:	75 4e                	jne    c0001e1c <tchar2uni+0xbd>
c0001dce:	c1 e2 06             	shl    edx,0x6
c0001dd1:	83 e1 3f             	and    ecx,0x3f
c0001dd4:	09 ca                	or     edx,ecx
c0001dd6:	39 de                	cmp    esi,ebx
c0001dd8:	75 e7                	jne    c0001dc1 <tchar2uni+0x62>
c0001dda:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ddd:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001de3:	77 37                	ja     c0001e1c <tchar2uni+0xbd>
c0001de5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001deb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001df1:	76 29                	jbe    c0001e1c <tchar2uni+0xbd>
c0001df3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001df9:	76 1d                	jbe    c0001e18 <tchar2uni+0xb9>
c0001dfb:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e01:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e07:	c1 e1 06             	shl    ecx,0x6
c0001e0a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e10:	09 ca                	or     edx,ecx
c0001e12:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e18:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e1a:	eb 03                	jmp    c0001e1f <tchar2uni+0xc0>
c0001e1c:	83 ca ff             	or     edx,0xffffffff
c0001e1f:	5b                   	pop    ebx
c0001e20:	89 d0                	mov    eax,edx
c0001e22:	5e                   	pop    esi
c0001e23:	5f                   	pop    edi
c0001e24:	c3                   	ret    

c0001e25 <put_utf>:
c0001e25:	53                   	push   ebx
c0001e26:	83 f8 7f             	cmp    eax,0x7f
c0001e29:	89 c3                	mov    ebx,eax
c0001e2b:	b0 00                	mov    al,0x0
c0001e2d:	77 11                	ja     c0001e40 <put_utf+0x1b>
c0001e2f:	85 c9                	test   ecx,ecx
c0001e31:	0f 84 e5 00 00 00    	je     c0001f1c <put_utf+0xf7>
c0001e37:	88 1a                	mov    BYTE PTR [edx],bl
c0001e39:	b0 01                	mov    al,0x1
c0001e3b:	e9 dc 00 00 00       	jmp    c0001f1c <put_utf+0xf7>
c0001e40:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e46:	77 23                	ja     c0001e6b <put_utf+0x46>
c0001e48:	83 f9 01             	cmp    ecx,0x1
c0001e4b:	0f 86 cb 00 00 00    	jbe    c0001f1c <put_utf+0xf7>
c0001e51:	89 d8                	mov    eax,ebx
c0001e53:	83 e3 3f             	and    ebx,0x3f
c0001e56:	c1 e8 06             	shr    eax,0x6
c0001e59:	83 cb 80             	or     ebx,0xffffff80
c0001e5c:	83 c8 c0             	or     eax,0xffffffc0
c0001e5f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e62:	88 02                	mov    BYTE PTR [edx],al
c0001e64:	b0 02                	mov    al,0x2
c0001e66:	e9 b1 00 00 00       	jmp    c0001f1c <put_utf+0xf7>
c0001e6b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e71:	77 40                	ja     c0001eb3 <put_utf+0x8e>
c0001e73:	83 f9 02             	cmp    ecx,0x2
c0001e76:	0f 86 a0 00 00 00    	jbe    c0001f1c <put_utf+0xf7>
c0001e7c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e82:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e88:	0f 86 8e 00 00 00    	jbe    c0001f1c <put_utf+0xf7>
c0001e8e:	89 d8                	mov    eax,ebx
c0001e90:	c1 e8 0c             	shr    eax,0xc
c0001e93:	83 c8 e0             	or     eax,0xffffffe0
c0001e96:	88 02                	mov    BYTE PTR [edx],al
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 e0 3f             	and    eax,0x3f
c0001ea6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ea9:	83 c8 80             	or     eax,0xffffff80
c0001eac:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001eaf:	b0 03                	mov    al,0x3
c0001eb1:	eb 69                	jmp    c0001f1c <put_utf+0xf7>
c0001eb3:	83 f9 03             	cmp    ecx,0x3
c0001eb6:	76 64                	jbe    c0001f1c <put_utf+0xf7>
c0001eb8:	89 d9                	mov    ecx,ebx
c0001eba:	0f b7 c3             	movzx  eax,bx
c0001ebd:	66 31 c9             	xor    cx,cx
c0001ec0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ec6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ecc:	c1 e9 06             	shr    ecx,0x6
c0001ecf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001ed5:	77 43                	ja     c0001f1a <put_utf+0xf5>
c0001ed7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001edd:	77 3b                	ja     c0001f1a <put_utf+0xf5>
c0001edf:	09 cb                	or     ebx,ecx
c0001ee1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ee7:	89 d8                	mov    eax,ebx
c0001ee9:	c1 e8 12             	shr    eax,0x12
c0001eec:	83 c8 f0             	or     eax,0xfffffff0
c0001eef:	88 02                	mov    BYTE PTR [edx],al
c0001ef1:	89 d8                	mov    eax,ebx
c0001ef3:	c1 e8 0c             	shr    eax,0xc
c0001ef6:	83 e0 3f             	and    eax,0x3f
c0001ef9:	83 c8 80             	or     eax,0xffffff80
c0001efc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f16:	b0 04                	mov    al,0x4
c0001f18:	eb 02                	jmp    c0001f1c <put_utf+0xf7>
c0001f1a:	31 c0                	xor    eax,eax
c0001f1c:	5b                   	pop    ebx
c0001f1d:	c3                   	ret    

c0001f1e <clst2sect>:
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	83 ea 02             	sub    edx,0x2
c0001f23:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f26:	83 e8 02             	sub    eax,0x2
c0001f29:	39 d0                	cmp    eax,edx
c0001f2b:	76 0d                	jbe    c0001f3a <clst2sect+0x1c>
c0001f2d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f31:	f7 e2                	mul    edx
c0001f33:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f36:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f39:	c3                   	ret    
c0001f3a:	31 c0                	xor    eax,eax
c0001f3c:	31 d2                	xor    edx,edx
c0001f3e:	c3                   	ret    

c0001f3f <clmt_clust>:
c0001f3f:	57                   	push   edi
c0001f40:	89 cf                	mov    edi,ecx
c0001f42:	56                   	push   esi
c0001f43:	89 d6                	mov    esi,edx
c0001f45:	53                   	push   ebx
c0001f46:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f4a:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f4d:	89 f2                	mov    edx,esi
c0001f4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f51:	c1 ef 09             	shr    edi,0x9
c0001f54:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f58:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f5b:	89 f9                	mov    ecx,edi
c0001f5d:	31 ff                	xor    edi,edi
c0001f5f:	57                   	push   edi
c0001f60:	56                   	push   esi
c0001f61:	51                   	push   ecx
c0001f62:	52                   	push   edx
c0001f63:	e8 cc 51 02 00       	call   c0027134 <__udivdi3>
c0001f68:	83 c4 10             	add    esp,0x10
c0001f6b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f6d:	85 d2                	test   edx,edx
c0001f6f:	74 10                	je     c0001f81 <clmt_clust+0x42>
c0001f71:	39 d0                	cmp    eax,edx
c0001f73:	72 07                	jb     c0001f7c <clmt_clust+0x3d>
c0001f75:	29 d0                	sub    eax,edx
c0001f77:	83 c3 08             	add    ebx,0x8
c0001f7a:	eb ef                	jmp    c0001f6b <clmt_clust+0x2c>
c0001f7c:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f7f:	89 c2                	mov    edx,eax
c0001f81:	5b                   	pop    ebx
c0001f82:	89 d0                	mov    eax,edx
c0001f84:	5e                   	pop    esi
c0001f85:	5f                   	pop    edi
c0001f86:	c3                   	ret    

c0001f87 <pick_lfn>:
c0001f87:	55                   	push   ebp
c0001f88:	57                   	push   edi
c0001f89:	56                   	push   esi
c0001f8a:	89 d6                	mov    esi,edx
c0001f8c:	53                   	push   ebx
c0001f8d:	89 c3                	mov    ebx,eax
c0001f8f:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f92:	e8 ee fc ff ff       	call   c0001c85 <ld_word>
c0001f97:	66 85 c0             	test   ax,ax
c0001f9a:	74 04                	je     c0001fa0 <pick_lfn+0x19>
c0001f9c:	31 c0                	xor    eax,eax
c0001f9e:	eb 5c                	jmp    c0001ffc <pick_lfn+0x75>
c0001fa0:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fa3:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa8:	83 e1 bf             	and    ecx,0xffffffbf
c0001fab:	31 ff                	xor    edi,edi
c0001fad:	49                   	dec    ecx
c0001fae:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fb1:	0f b6 87 c0 9c 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6340]
c0001fb8:	01 f0                	add    eax,esi
c0001fba:	e8 c6 fc ff ff       	call   c0001c85 <ld_word>
c0001fbf:	66 85 ed             	test   bp,bp
c0001fc2:	74 11                	je     c0001fd5 <pick_lfn+0x4e>
c0001fc4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fca:	77 d0                	ja     c0001f9c <pick_lfn+0x15>
c0001fcc:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fd0:	89 c5                	mov    ebp,eax
c0001fd2:	41                   	inc    ecx
c0001fd3:	eb 04                	jmp    c0001fd9 <pick_lfn+0x52>
c0001fd5:	66 40                	inc    ax
c0001fd7:	75 c3                	jne    c0001f9c <pick_lfn+0x15>
c0001fd9:	47                   	inc    edi
c0001fda:	83 ff 0d             	cmp    edi,0xd
c0001fdd:	75 d2                	jne    c0001fb1 <pick_lfn+0x2a>
c0001fdf:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fe2:	74 13                	je     c0001ff7 <pick_lfn+0x70>
c0001fe4:	66 85 ed             	test   bp,bp
c0001fe7:	74 0e                	je     c0001ff7 <pick_lfn+0x70>
c0001fe9:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fef:	77 ab                	ja     c0001f9c <pick_lfn+0x15>
c0001ff1:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff7:	b8 01 00 00 00       	mov    eax,0x1
c0001ffc:	5b                   	pop    ebx
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	5d                   	pop    ebp
c0002000:	c3                   	ret    

c0002001 <put_lfn>:
c0002001:	55                   	push   ebp
c0002002:	31 ed                	xor    ebp,ebp
c0002004:	57                   	push   edi
c0002005:	89 d7                	mov    edi,edx
c0002007:	56                   	push   esi
c0002008:	31 f6                	xor    esi,esi
c000200a:	53                   	push   ebx
c000200b:	83 ec 08             	sub    esp,0x8
c000200e:	89 04 24             	mov    DWORD PTR [esp],eax
c0002011:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002019:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002022:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002025:	31 d2                	xor    edx,edx
c0002027:	e8 cb fc ff ff       	call   c0001cf7 <st_word>
c000202c:	0f b6 d9             	movzx  ebx,cl
c000202f:	4b                   	dec    ebx
c0002030:	6b db 0d             	imul   ebx,ebx,0xd
c0002033:	66 83 fe ff          	cmp    si,0xffff
c0002037:	74 08                	je     c0002041 <put_lfn+0x40>
c0002039:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000203c:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002040:	43                   	inc    ebx
c0002041:	0f b6 85 c0 9c 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6340]
c0002048:	0f b7 d6             	movzx  edx,si
c000204b:	01 f8                	add    eax,edi
c000204d:	e8 a5 fc ff ff       	call   c0001cf7 <st_word>
c0002052:	66 85 f6             	test   si,si
c0002055:	75 03                	jne    c000205a <put_lfn+0x59>
c0002057:	83 ce ff             	or     esi,0xffffffff
c000205a:	45                   	inc    ebp
c000205b:	83 fd 0d             	cmp    ebp,0xd
c000205e:	75 d3                	jne    c0002033 <put_lfn+0x32>
c0002060:	66 46                	inc    si
c0002062:	74 0a                	je     c000206e <put_lfn+0x6d>
c0002064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002067:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000206c:	75 09                	jne    c0002077 <put_lfn+0x76>
c000206e:	88 c8                	mov    al,cl
c0002070:	83 c8 40             	or     eax,0x40
c0002073:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002077:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000207b:	88 07                	mov    BYTE PTR [edi],al
c000207d:	83 c4 08             	add    esp,0x8
c0002080:	5b                   	pop    ebx
c0002081:	5e                   	pop    esi
c0002082:	5f                   	pop    edi
c0002083:	5d                   	pop    ebp
c0002084:	c3                   	ret    

c0002085 <gen_numname>:
c0002085:	57                   	push   edi
c0002086:	89 cf                	mov    edi,ecx
c0002088:	56                   	push   esi
c0002089:	b9 0b 00 00 00       	mov    ecx,0xb
c000208e:	53                   	push   ebx
c000208f:	89 c6                	mov    esi,eax
c0002091:	83 ec 10             	sub    esp,0x10
c0002094:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002098:	e8 67 fc ff ff       	call   c0001d04 <mem_cpy>
c000209d:	83 fb 05             	cmp    ebx,0x5
c00020a0:	76 2d                	jbe    c00020cf <gen_numname+0x4a>
c00020a2:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a5:	66 85 c0             	test   ax,ax
c00020a8:	74 25                	je     c00020cf <gen_numname+0x4a>
c00020aa:	83 c7 02             	add    edi,0x2
c00020ad:	ba 10 00 00 00       	mov    edx,0x10
c00020b2:	01 db                	add    ebx,ebx
c00020b4:	89 c1                	mov    ecx,eax
c00020b6:	66 d1 e8             	shr    ax,1
c00020b9:	83 e1 01             	and    ecx,0x1
c00020bc:	01 cb                	add    ebx,ecx
c00020be:	0f ba e3 10          	bt     ebx,0x10
c00020c2:	73 06                	jae    c00020ca <gen_numname+0x45>
c00020c4:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020ca:	4a                   	dec    edx
c00020cb:	75 e5                	jne    c00020b2 <gen_numname+0x2d>
c00020cd:	eb d3                	jmp    c00020a2 <gen_numname+0x1d>
c00020cf:	b8 07 00 00 00       	mov    eax,0x7
c00020d4:	88 d9                	mov    cl,bl
c00020d6:	83 e1 0f             	and    ecx,0xf
c00020d9:	8d 51 30             	lea    edx,[ecx+0x30]
c00020dc:	80 fa 39             	cmp    dl,0x39
c00020df:	76 03                	jbe    c00020e4 <gen_numname+0x5f>
c00020e1:	8d 51 37             	lea    edx,[ecx+0x37]
c00020e4:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e7:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020eb:	89 da                	mov    edx,ebx
c00020ed:	c1 ea 04             	shr    edx,0x4
c00020f0:	83 fb 0f             	cmp    ebx,0xf
c00020f3:	76 06                	jbe    c00020fb <gen_numname+0x76>
c00020f5:	89 c8                	mov    eax,ecx
c00020f7:	89 d3                	mov    ebx,edx
c00020f9:	eb d9                	jmp    c00020d4 <gen_numname+0x4f>
c00020fb:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002100:	31 d2                	xor    edx,edx
c0002102:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002105:	8d 04 16             	lea    eax,[esi+edx*1]
c0002108:	39 ca                	cmp    edx,ecx
c000210a:	73 18                	jae    c0002124 <gen_numname+0x9f>
c000210c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210f:	3c 20                	cmp    al,0x20
c0002111:	74 11                	je     c0002124 <gen_numname+0x9f>
c0002113:	e8 41 fc ff ff       	call   c0001d59 <dbc_1st>
c0002118:	85 c0                	test   eax,eax
c000211a:	74 05                	je     c0002121 <gen_numname+0x9c>
c000211c:	39 d3                	cmp    ebx,edx
c000211e:	74 04                	je     c0002124 <gen_numname+0x9f>
c0002120:	42                   	inc    edx
c0002121:	42                   	inc    edx
c0002122:	eb e1                	jmp    c0002105 <gen_numname+0x80>
c0002124:	b0 20                	mov    al,0x20
c0002126:	83 f9 07             	cmp    ecx,0x7
c0002129:	77 05                	ja     c0002130 <gen_numname+0xab>
c000212b:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212f:	41                   	inc    ecx
c0002130:	42                   	inc    edx
c0002131:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002135:	83 fa 07             	cmp    edx,0x7
c0002138:	76 ea                	jbe    c0002124 <gen_numname+0x9f>
c000213a:	83 c4 10             	add    esp,0x10
c000213d:	5b                   	pop    ebx
c000213e:	5e                   	pop    esi
c000213f:	5f                   	pop    edi
c0002140:	c3                   	ret    

c0002141 <sum_sfn>:
c0002141:	31 c9                	xor    ecx,ecx
c0002143:	31 d2                	xor    edx,edx
c0002145:	d0 ca                	ror    dl,1
c0002147:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c000214a:	41                   	inc    ecx
c000214b:	83 f9 0b             	cmp    ecx,0xb
c000214e:	75 f5                	jne    c0002145 <sum_sfn+0x4>
c0002150:	88 d0                	mov    al,dl
c0002152:	c3                   	ret    

c0002153 <xdir_sum>:
c0002153:	56                   	push   esi
c0002154:	31 c9                	xor    ecx,ecx
c0002156:	53                   	push   ebx
c0002157:	31 d2                	xor    edx,edx
c0002159:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000215d:	43                   	inc    ebx
c000215e:	c1 e3 05             	shl    ebx,0x5
c0002161:	83 fa 02             	cmp    edx,0x2
c0002164:	74 0b                	je     c0002171 <xdir_sum+0x1e>
c0002166:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000216a:	66 d1 c9             	ror    cx,1
c000216d:	01 f1                	add    ecx,esi
c000216f:	eb 05                	jmp    c0002176 <xdir_sum+0x23>
c0002171:	ba 03 00 00 00       	mov    edx,0x3
c0002176:	42                   	inc    edx
c0002177:	39 d3                	cmp    ebx,edx
c0002179:	77 e6                	ja     c0002161 <xdir_sum+0xe>
c000217b:	89 c8                	mov    eax,ecx
c000217d:	5b                   	pop    ebx
c000217e:	5e                   	pop    esi
c000217f:	c3                   	ret    

c0002180 <xsum32>:
c0002180:	d1 ca                	ror    edx,1
c0002182:	0f b6 c0             	movzx  eax,al
c0002185:	01 d0                	add    eax,edx
c0002187:	c3                   	ret    

c0002188 <get_xfileinfo>:
c0002188:	55                   	push   ebp
c0002189:	31 c9                	xor    ecx,ecx
c000218b:	57                   	push   edi
c000218c:	bd 40 00 00 00       	mov    ebp,0x40
c0002191:	56                   	push   esi
c0002192:	31 ff                	xor    edi,edi
c0002194:	53                   	push   ebx
c0002195:	89 c6                	mov    esi,eax
c0002197:	83 ec 0c             	sub    esp,0xc
c000219a:	89 d3                	mov    ebx,edx
c000219c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00021a3:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c00021a7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00021aa:	76 6d                	jbe    c0002219 <get_xfileinfo+0x91>
c00021ac:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00021b2:	76 0b                	jbe    c00021bf <get_xfileinfo+0x37>
c00021b4:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c00021b8:	bf 01 00 00 00       	mov    edi,0x1
c00021bd:	eb 63                	jmp    c0002222 <get_xfileinfo+0x9a>
c00021bf:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021c5:	75 03                	jne    c00021ca <get_xfileinfo+0x42>
c00021c7:	83 c5 02             	add    ebp,0x2
c00021ca:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021cd:	83 c5 02             	add    ebp,0x2
c00021d0:	e8 b0 fa ff ff       	call   c0001c85 <ld_word>
c00021d5:	ff 04 24             	inc    DWORD PTR [esp]
c00021d8:	66 85 c9             	test   cx,cx
c00021db:	75 0d                	jne    c00021ea <get_xfileinfo+0x62>
c00021dd:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021e3:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021e8:	76 2b                	jbe    c0002215 <get_xfileinfo+0x8d>
c00021ea:	c1 e1 10             	shl    ecx,0x10
c00021ed:	ba ff 00 00 00       	mov    edx,0xff
c00021f2:	0f b7 c0             	movzx  eax,ax
c00021f5:	29 fa                	sub    edx,edi
c00021f7:	09 c8                	or     eax,ecx
c00021f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021fd:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0002201:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0002205:	e8 1b fc ff ff       	call   c0001e25 <put_utf>
c000220a:	84 c0                	test   al,al
c000220c:	74 a6                	je     c00021b4 <get_xfileinfo+0x2c>
c000220e:	0f b6 c0             	movzx  eax,al
c0002211:	01 c7                	add    edi,eax
c0002213:	31 c0                	xor    eax,eax
c0002215:	89 c1                	mov    ecx,eax
c0002217:	eb 8a                	jmp    c00021a3 <get_xfileinfo+0x1b>
c0002219:	85 ff                	test   edi,edi
c000221b:	74 97                	je     c00021b4 <get_xfileinfo+0x2c>
c000221d:	66 85 c9             	test   cx,cx
c0002220:	75 92                	jne    c00021b4 <get_xfileinfo+0x2c>
c0002222:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002227:	31 c0                	xor    eax,eax
c0002229:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c000222d:	31 d2                	xor    edx,edx
c000222f:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002232:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002235:	80 e1 10             	and    cl,0x10
c0002238:	75 08                	jne    c0002242 <get_xfileinfo+0xba>
c000223a:	8d 46 38             	lea    eax,[esi+0x38]
c000223d:	e8 68 fa ff ff       	call   c0001caa <ld_qword>
c0002242:	89 03                	mov    DWORD PTR [ebx],eax
c0002244:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002247:	8d 46 0c             	lea    eax,[esi+0xc]
c000224a:	e8 36 fa ff ff       	call   c0001c85 <ld_word>
c000224f:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002253:	8d 46 0e             	lea    eax,[esi+0xe]
c0002256:	e8 2a fa ff ff       	call   c0001c85 <ld_word>
c000225b:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000225f:	83 c4 0c             	add    esp,0xc
c0002262:	5b                   	pop    ebx
c0002263:	5e                   	pop    esi
c0002264:	5f                   	pop    edi
c0002265:	5d                   	pop    ebp
c0002266:	c3                   	ret    

c0002267 <get_ldnumber>:
c0002267:	8b 10                	mov    edx,DWORD PTR [eax]
c0002269:	85 d2                	test   edx,edx
c000226b:	74 14                	je     c0002281 <get_ldnumber+0x1a>
c000226d:	56                   	push   esi
c000226e:	53                   	push   ebx
c000226f:	89 d3                	mov    ebx,edx
c0002271:	43                   	inc    ebx
c0002272:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002275:	80 f9 1f             	cmp    cl,0x1f
c0002278:	76 0d                	jbe    c0002287 <get_ldnumber+0x20>
c000227a:	80 f9 3a             	cmp    cl,0x3a
c000227d:	75 f2                	jne    c0002271 <get_ldnumber+0xa>
c000227f:	eb 0a                	jmp    c000228b <get_ldnumber+0x24>
c0002281:	83 c9 ff             	or     ecx,0xffffffff
c0002284:	89 c8                	mov    eax,ecx
c0002286:	c3                   	ret    
c0002287:	31 c9                	xor    ecx,ecx
c0002289:	eb 24                	jmp    c00022af <get_ldnumber+0x48>
c000228b:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000228e:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002291:	80 f9 09             	cmp    cl,0x9
c0002294:	77 16                	ja     c00022ac <get_ldnumber+0x45>
c0002296:	83 c2 02             	add    edx,0x2
c0002299:	83 c9 ff             	or     ecx,0xffffffff
c000229c:	39 d3                	cmp    ebx,edx
c000229e:	75 0f                	jne    c00022af <get_ldnumber+0x48>
c00022a0:	89 f2                	mov    edx,esi
c00022a2:	89 18                	mov    DWORD PTR [eax],ebx
c00022a4:	0f be ca             	movsx  ecx,dl
c00022a7:	83 e9 30             	sub    ecx,0x30
c00022aa:	eb 03                	jmp    c00022af <get_ldnumber+0x48>
c00022ac:	83 c9 ff             	or     ecx,0xffffffff
c00022af:	89 c8                	mov    eax,ecx
c00022b1:	5b                   	pop    ebx
c00022b2:	5e                   	pop    esi
c00022b3:	c3                   	ret    

c00022b4 <crc32>:
c00022b4:	56                   	push   esi
c00022b5:	89 d6                	mov    esi,edx
c00022b7:	53                   	push   ebx
c00022b8:	b2 01                	mov    dl,0x1
c00022ba:	bb 08 00 00 00       	mov    ebx,0x8
c00022bf:	89 f1                	mov    ecx,esi
c00022c1:	84 d1                	test   cl,dl
c00022c3:	0f 95 c1             	setne  cl
c00022c6:	0f b6 c9             	movzx  ecx,cl
c00022c9:	31 c1                	xor    ecx,eax
c00022cb:	89 c8                	mov    eax,ecx
c00022cd:	d1 e8                	shr    eax,1
c00022cf:	80 e1 01             	and    cl,0x1
c00022d2:	74 05                	je     c00022d9 <crc32+0x25>
c00022d4:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022d9:	d1 e2                	shl    edx,1
c00022db:	4b                   	dec    ebx
c00022dc:	75 e1                	jne    c00022bf <crc32+0xb>
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	c3                   	ret    

c00022e1 <test_gpt_header>:
c00022e1:	55                   	push   ebp
c00022e2:	b9 10 00 00 00       	mov    ecx,0x10
c00022e7:	57                   	push   edi
c00022e8:	ba c0 9b 02 c0       	mov    edx,0xc0029bc0
c00022ed:	56                   	push   esi
c00022ee:	31 ff                	xor    edi,edi
c00022f0:	53                   	push   ebx
c00022f1:	89 c3                	mov    ebx,eax
c00022f3:	e8 2c fa ff ff       	call   c0001d24 <mem_cmp>
c00022f8:	85 c0                	test   eax,eax
c00022fa:	75 55                	jne    c0002351 <test_gpt_header+0x70>
c00022fc:	89 c7                	mov    edi,eax
c00022fe:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002303:	83 ce ff             	or     esi,0xffffffff
c0002306:	31 d2                	xor    edx,edx
c0002308:	83 fd 03             	cmp    ebp,0x3
c000230b:	76 05                	jbe    c0002312 <test_gpt_header+0x31>
c000230d:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002312:	89 f0                	mov    eax,esi
c0002314:	45                   	inc    ebp
c0002315:	e8 9a ff ff ff       	call   c00022b4 <crc32>
c000231a:	83 fd 4c             	cmp    ebp,0x4c
c000231d:	89 c6                	mov    esi,eax
c000231f:	75 e5                	jne    c0002306 <test_gpt_header+0x25>
c0002321:	8d 43 10             	lea    eax,[ebx+0x10]
c0002324:	f7 d6                	not    esi
c0002326:	e8 67 f9 ff ff       	call   c0001c92 <ld_dword>
c000232b:	39 c6                	cmp    esi,eax
c000232d:	75 22                	jne    c0002351 <test_gpt_header+0x70>
c000232f:	8d 43 54             	lea    eax,[ebx+0x54]
c0002332:	e8 5b f9 ff ff       	call   c0001c92 <ld_dword>
c0002337:	83 c0 80             	add    eax,0xffffff80
c000233a:	75 15                	jne    c0002351 <test_gpt_header+0x70>
c000233c:	8d 43 50             	lea    eax,[ebx+0x50]
c000233f:	e8 4e f9 ff ff       	call   c0001c92 <ld_dword>
c0002344:	3d 80 00 00 00       	cmp    eax,0x80
c0002349:	0f 96 c0             	setbe  al
c000234c:	0f b6 c0             	movzx  eax,al
c000234f:	89 c7                	mov    edi,eax
c0002351:	5b                   	pop    ebx
c0002352:	89 f8                	mov    eax,edi
c0002354:	5e                   	pop    esi
c0002355:	5f                   	pop    edi
c0002356:	5d                   	pop    ebp
c0002357:	c3                   	ret    

c0002358 <make_rand>:
c0002358:	56                   	push   esi
c0002359:	85 c0                	test   eax,eax
c000235b:	53                   	push   ebx
c000235c:	75 05                	jne    c0002363 <make_rand+0xb>
c000235e:	b8 01 00 00 00       	mov    eax,0x1
c0002363:	01 d1                	add    ecx,edx
c0002365:	bb 08 00 00 00       	mov    ebx,0x8
c000236a:	89 c6                	mov    esi,eax
c000236c:	d1 e8                	shr    eax,1
c000236e:	83 e6 01             	and    esi,0x1
c0002371:	85 f6                	test   esi,esi
c0002373:	74 05                	je     c000237a <make_rand+0x22>
c0002375:	35 00 00 00 a3       	xor    eax,0xa3000000
c000237a:	4b                   	dec    ebx
c000237b:	75 ed                	jne    c000236a <make_rand+0x12>
c000237d:	42                   	inc    edx
c000237e:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002381:	39 ca                	cmp    edx,ecx
c0002383:	75 e0                	jne    c0002365 <make_rand+0xd>
c0002385:	5b                   	pop    ebx
c0002386:	5e                   	pop    esi
c0002387:	c3                   	ret    

c0002388 <validate>:
c0002388:	56                   	push   esi
c0002389:	53                   	push   ebx
c000238a:	89 d6                	mov    esi,edx
c000238c:	51                   	push   ecx
c000238d:	85 c0                	test   eax,eax
c000238f:	75 09                	jne    c000239a <validate+0x12>
c0002391:	b8 09 00 00 00       	mov    eax,0x9
c0002396:	31 c9                	xor    ecx,ecx
c0002398:	eb 2f                	jmp    c00023c9 <validate+0x41>
c000239a:	89 c3                	mov    ebx,eax
c000239c:	8b 00                	mov    eax,DWORD PTR [eax]
c000239e:	85 c0                	test   eax,eax
c00023a0:	74 ef                	je     c0002391 <validate+0x9>
c00023a2:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00023a5:	74 ea                	je     c0002391 <validate+0x9>
c00023a7:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00023ab:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00023af:	75 e0                	jne    c0002391 <validate+0x9>
c00023b1:	83 ec 0c             	sub    esp,0xc
c00023b4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023b8:	50                   	push   eax
c00023b9:	e8 76 f8 ff ff       	call   c0001c34 <disk_status>
c00023be:	83 c4 10             	add    esp,0x10
c00023c1:	a8 01                	test   al,0x1
c00023c3:	75 cc                	jne    c0002391 <validate+0x9>
c00023c5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023c7:	31 c0                	xor    eax,eax
c00023c9:	89 0e                	mov    DWORD PTR [esi],ecx
c00023cb:	5a                   	pop    edx
c00023cc:	5b                   	pop    ebx
c00023cd:	5e                   	pop    esi
c00023ce:	c3                   	ret    

c00023cf <sync_window>:
c00023cf:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023d3:	0f 84 85 00 00 00    	je     c000245e <sync_window+0x8f>
c00023d9:	55                   	push   ebp
c00023da:	8d 68 54             	lea    ebp,[eax+0x54]
c00023dd:	57                   	push   edi
c00023de:	56                   	push   esi
c00023df:	53                   	push   ebx
c00023e0:	89 c3                	mov    ebx,eax
c00023e2:	83 ec 28             	sub    esp,0x28
c00023e5:	6a 01                	push   0x1
c00023e7:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023ea:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023ed:	55                   	push   ebp
c00023ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023f2:	50                   	push   eax
c00023f3:	e8 58 f8 ff ff       	call   c0001c50 <disk_write>
c00023f8:	83 c4 20             	add    esp,0x20
c00023fb:	ba 01 00 00 00       	mov    edx,0x1
c0002400:	85 c0                	test   eax,eax
c0002402:	75 50                	jne    c0002454 <sync_window+0x85>
c0002404:	31 ff                	xor    edi,edi
c0002406:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002409:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000240d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0002411:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002414:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002417:	89 c6                	mov    esi,eax
c0002419:	89 d7                	mov    edi,edx
c000241b:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000241e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002422:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002425:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002429:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c000242d:	73 23                	jae    c0002452 <sync_window+0x83>
c000242f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002433:	75 1d                	jne    c0002452 <sync_window+0x83>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	6a 01                	push   0x1
c000243a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000243e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002442:	52                   	push   edx
c0002443:	50                   	push   eax
c0002444:	55                   	push   ebp
c0002445:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002449:	50                   	push   eax
c000244a:	e8 01 f8 ff ff       	call   c0001c50 <disk_write>
c000244f:	83 c4 20             	add    esp,0x20
c0002452:	31 d2                	xor    edx,edx
c0002454:	83 c4 1c             	add    esp,0x1c
c0002457:	89 d0                	mov    eax,edx
c0002459:	5b                   	pop    ebx
c000245a:	5e                   	pop    esi
c000245b:	5f                   	pop    edi
c000245c:	5d                   	pop    ebp
c000245d:	c3                   	ret    
c000245e:	31 d2                	xor    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	c3                   	ret    

c0002463 <move_window>:
c0002463:	56                   	push   esi
c0002464:	53                   	push   ebx
c0002465:	89 c3                	mov    ebx,eax
c0002467:	83 ec 14             	sub    esp,0x14
c000246a:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000246d:	75 07                	jne    c0002476 <move_window+0x13>
c000246f:	31 f6                	xor    esi,esi
c0002471:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002474:	74 59                	je     c00024cf <move_window+0x6c>
c0002476:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000247a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000247e:	89 d8                	mov    eax,ebx
c0002480:	e8 4a ff ff ff       	call   c00023cf <sync_window>
c0002485:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002489:	89 c6                	mov    esi,eax
c000248b:	85 c0                	test   eax,eax
c000248d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002491:	75 3c                	jne    c00024cf <move_window+0x6c>
c0002493:	83 ec 0c             	sub    esp,0xc
c0002496:	8d 43 54             	lea    eax,[ebx+0x54]
c0002499:	6a 01                	push   0x1
c000249b:	51                   	push   ecx
c000249c:	52                   	push   edx
c000249d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00024a1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00024a5:	50                   	push   eax
c00024a6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00024aa:	50                   	push   eax
c00024ab:	e8 8a f7 ff ff       	call   c0001c3a <disk_read>
c00024b0:	83 c4 20             	add    esp,0x20
c00024b3:	85 c0                	test   eax,eax
c00024b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024bd:	74 0a                	je     c00024c9 <move_window+0x66>
c00024bf:	83 ca ff             	or     edx,0xffffffff
c00024c2:	be 01 00 00 00       	mov    esi,0x1
c00024c7:	89 d1                	mov    ecx,edx
c00024c9:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024cc:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024cf:	89 f0                	mov    eax,esi
c00024d1:	83 c4 14             	add    esp,0x14
c00024d4:	5b                   	pop    ebx
c00024d5:	5e                   	pop    esi
c00024d6:	c3                   	ret    

c00024d7 <check_fs>:
c00024d7:	53                   	push   ebx
c00024d8:	89 c3                	mov    ebx,eax
c00024da:	83 ec 08             	sub    esp,0x8
c00024dd:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024e1:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024e8:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024ef:	e8 6f ff ff ff       	call   c0002463 <move_window>
c00024f4:	ba 04 00 00 00       	mov    edx,0x4
c00024f9:	85 c0                	test   eax,eax
c00024fb:	0f 85 89 00 00 00    	jne    c000258a <check_fs+0xb3>
c0002501:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002507:	e8 79 f7 ff ff       	call   c0001c85 <ld_word>
c000250c:	ba 03 00 00 00       	mov    edx,0x3
c0002511:	66 3d 55 aa          	cmp    ax,0xaa55
c0002515:	75 73                	jne    c000258a <check_fs+0xb3>
c0002517:	ba e0 9c 02 c0       	mov    edx,0xc0029ce0
c000251c:	8d 43 54             	lea    eax,[ebx+0x54]
c000251f:	b9 0b 00 00 00       	mov    ecx,0xb
c0002524:	e8 fb f7 ff ff       	call   c0001d24 <mem_cmp>
c0002529:	ba 01 00 00 00       	mov    edx,0x1
c000252e:	85 c0                	test   eax,eax
c0002530:	74 58                	je     c000258a <check_fs+0xb3>
c0002532:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002535:	8d 50 18             	lea    edx,[eax+0x18]
c0002538:	80 fa 01             	cmp    dl,0x1
c000253b:	76 09                	jbe    c0002546 <check_fs+0x6f>
c000253d:	ba 02 00 00 00       	mov    edx,0x2
c0002542:	3c eb                	cmp    al,0xeb
c0002544:	75 44                	jne    c000258a <check_fs+0xb3>
c0002546:	ba b0 d1 02 c0       	mov    edx,0xc002d1b0
c000254b:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002551:	b9 03 00 00 00       	mov    ecx,0x3
c0002556:	e8 c9 f7 ff ff       	call   c0001d24 <mem_cmp>
c000255b:	31 d2                	xor    edx,edx
c000255d:	85 c0                	test   eax,eax
c000255f:	74 29                	je     c000258a <check_fs+0xb3>
c0002561:	ba ec 9c 02 c0       	mov    edx,0xc0029cec
c0002566:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000256c:	b9 05 00 00 00       	mov    ecx,0x5
c0002571:	e8 ae f7 ff ff       	call   c0001d24 <mem_cmp>
c0002576:	31 d2                	xor    edx,edx
c0002578:	85 c0                	test   eax,eax
c000257a:	74 0e                	je     c000258a <check_fs+0xb3>
c000257c:	31 d2                	xor    edx,edx
c000257e:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002585:	0f 95 c2             	setne  dl
c0002588:	01 d2                	add    edx,edx
c000258a:	89 d0                	mov    eax,edx
c000258c:	83 c4 08             	add    esp,0x8
c000258f:	5b                   	pop    ebx
c0002590:	c3                   	ret    

c0002591 <find_volume>:
c0002591:	55                   	push   ebp
c0002592:	31 c9                	xor    ecx,ecx
c0002594:	57                   	push   edi
c0002595:	56                   	push   esi
c0002596:	89 d6                	mov    esi,edx
c0002598:	53                   	push   ebx
c0002599:	31 d2                	xor    edx,edx
c000259b:	83 ec 3c             	sub    esp,0x3c
c000259e:	89 c3                	mov    ebx,eax
c00025a0:	e8 32 ff ff ff       	call   c00024d7 <check_fs>
c00025a5:	83 f8 02             	cmp    eax,0x2
c00025a8:	74 0e                	je     c00025b8 <find_volume+0x27>
c00025aa:	0f 87 5d 01 00 00    	ja     c000270d <find_volume+0x17c>
c00025b0:	85 f6                	test   esi,esi
c00025b2:	0f 84 55 01 00 00    	je     c000270d <find_volume+0x17c>
c00025b8:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025bf:	0f 85 dd 00 00 00    	jne    c00026a2 <find_volume+0x111>
c00025c5:	31 c9                	xor    ecx,ecx
c00025c7:	ba 01 00 00 00       	mov    edx,0x1
c00025cc:	89 d8                	mov    eax,ebx
c00025ce:	e8 90 fe ff ff       	call   c0002463 <move_window>
c00025d3:	85 c0                	test   eax,eax
c00025d5:	74 0a                	je     c00025e1 <find_volume+0x50>
c00025d7:	b8 04 00 00 00       	mov    eax,0x4
c00025dc:	e9 2c 01 00 00       	jmp    c000270d <find_volume+0x17c>
c00025e1:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025e4:	89 e8                	mov    eax,ebp
c00025e6:	e8 f6 fc ff ff       	call   c00022e1 <test_gpt_header>
c00025eb:	85 c0                	test   eax,eax
c00025ed:	75 0a                	jne    c00025f9 <find_volume+0x68>
c00025ef:	b8 03 00 00 00       	mov    eax,0x3
c00025f4:	e9 14 01 00 00       	jmp    c000270d <find_volume+0x17c>
c00025f9:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025ff:	e8 8e f6 ff ff       	call   c0001c92 <ld_dword>
c0002604:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002608:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000260e:	e8 97 f6 ff ff       	call   c0001caa <ld_qword>
c0002613:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000261b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000261f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002623:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000262b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000262f:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002633:	74 ba                	je     c00025ef <find_volume+0x5e>
c0002635:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002639:	31 c9                	xor    ecx,ecx
c000263b:	c1 e7 07             	shl    edi,0x7
c000263e:	89 d8                	mov    eax,ebx
c0002640:	89 fa                	mov    edx,edi
c0002642:	c1 ea 09             	shr    edx,0x9
c0002645:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002649:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000264d:	e8 11 fe ff ff       	call   c0002463 <move_window>
c0002652:	85 c0                	test   eax,eax
c0002654:	75 81                	jne    c00025d7 <find_volume+0x46>
c0002656:	81 e7 80 01 00 00    	and    edi,0x180
c000265c:	b9 10 00 00 00       	mov    ecx,0x10
c0002661:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002665:	ba d0 9c 02 c0       	mov    edx,0xc0029cd0
c000266a:	e8 b5 f6 ff ff       	call   c0001d24 <mem_cmp>
c000266f:	85 c0                	test   eax,eax
c0002671:	75 29                	jne    c000269c <find_volume+0x10b>
c0002673:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002677:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000267b:	e8 2a f6 ff ff       	call   c0001caa <ld_qword>
c0002680:	89 d1                	mov    ecx,edx
c0002682:	89 c2                	mov    edx,eax
c0002684:	89 d8                	mov    eax,ebx
c0002686:	e8 4c fe ff ff       	call   c00024d7 <check_fs>
c000268b:	85 f6                	test   esi,esi
c000268d:	75 07                	jne    c0002696 <find_volume+0x105>
c000268f:	83 f8 01             	cmp    eax,0x1
c0002692:	77 08                	ja     c000269c <find_volume+0x10b>
c0002694:	eb 77                	jmp    c000270d <find_volume+0x17c>
c0002696:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000269a:	74 71                	je     c000270d <find_volume+0x17c>
c000269c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00026a0:	eb 89                	jmp    c000262b <find_volume+0x9a>
c00026a2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00026a6:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00026ac:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00026b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026b6:	89 cd                	mov    ebp,ecx
c00026b8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026bc:	89 f8                	mov    eax,edi
c00026be:	83 c7 10             	add    edi,0x10
c00026c1:	e8 cc f5 ff ff       	call   c0001c92 <ld_dword>
c00026c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026ca:	89 01                	mov    DWORD PTR [ecx],eax
c00026cc:	83 c1 04             	add    ecx,0x4
c00026cf:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026d3:	75 e3                	jne    c00026b8 <find_volume+0x127>
c00026d5:	31 ff                	xor    edi,edi
c00026d7:	85 f6                	test   esi,esi
c00026d9:	74 03                	je     c00026de <find_volume+0x14d>
c00026db:	8d 7e ff             	lea    edi,[esi-0x1]
c00026de:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026e2:	85 d2                	test   edx,edx
c00026e4:	74 14                	je     c00026fa <find_volume+0x169>
c00026e6:	31 c9                	xor    ecx,ecx
c00026e8:	89 d8                	mov    eax,ebx
c00026ea:	e8 e8 fd ff ff       	call   c00024d7 <check_fs>
c00026ef:	83 f8 01             	cmp    eax,0x1
c00026f2:	76 19                	jbe    c000270d <find_volume+0x17c>
c00026f4:	85 f6                	test   esi,esi
c00026f6:	74 0f                	je     c0002707 <find_volume+0x176>
c00026f8:	eb 13                	jmp    c000270d <find_volume+0x17c>
c00026fa:	85 f6                	test   esi,esi
c00026fc:	0f 85 ed fe ff ff    	jne    c00025ef <find_volume+0x5e>
c0002702:	b8 03 00 00 00       	mov    eax,0x3
c0002707:	47                   	inc    edi
c0002708:	83 ff 03             	cmp    edi,0x3
c000270b:	76 d1                	jbe    c00026de <find_volume+0x14d>
c000270d:	83 c4 3c             	add    esp,0x3c
c0002710:	5b                   	pop    ebx
c0002711:	5e                   	pop    esi
c0002712:	5f                   	pop    edi
c0002713:	5d                   	pop    ebp
c0002714:	c3                   	ret    

c0002715 <mount_volume>:
c0002715:	55                   	push   ebp
c0002716:	57                   	push   edi
c0002717:	89 cf                	mov    edi,ecx
c0002719:	56                   	push   esi
c000271a:	53                   	push   ebx
c000271b:	bb 0b 00 00 00       	mov    ebx,0xb
c0002720:	83 ec 3c             	sub    esp,0x3c
c0002723:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002729:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000272d:	e8 35 fb ff ff       	call   c0002267 <get_ldnumber>
c0002732:	85 c0                	test   eax,eax
c0002734:	0f 88 3a 05 00 00    	js     c0002c74 <mount_volume+0x55f>
c000273a:	8b 2c 85 60 ed 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd12a0]
c0002741:	89 c6                	mov    esi,eax
c0002743:	bb 0c 00 00 00       	mov    ebx,0xc
c0002748:	85 ed                	test   ebp,ebp
c000274a:	0f 84 24 05 00 00    	je     c0002c74 <mount_volume+0x55f>
c0002750:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002754:	83 e7 fe             	and    edi,0xfffffffe
c0002757:	89 2a                	mov    DWORD PTR [edx],ebp
c0002759:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000275d:	74 32                	je     c0002791 <mount_volume+0x7c>
c000275f:	83 ec 0c             	sub    esp,0xc
c0002762:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002766:	50                   	push   eax
c0002767:	e8 c8 f4 ff ff       	call   c0001c34 <disk_status>
c000276c:	83 c4 10             	add    esp,0x10
c000276f:	a8 01                	test   al,0x1
c0002771:	75 1e                	jne    c0002791 <mount_volume+0x7c>
c0002773:	31 db                	xor    ebx,ebx
c0002775:	89 f9                	mov    ecx,edi
c0002777:	84 c9                	test   cl,cl
c0002779:	0f 84 f5 04 00 00    	je     c0002c74 <mount_volume+0x55f>
c000277f:	a8 04                	test   al,0x4
c0002781:	0f 84 ed 04 00 00    	je     c0002c74 <mount_volume+0x55f>
c0002787:	bb 0a 00 00 00       	mov    ebx,0xa
c000278c:	e9 e3 04 00 00       	jmp    c0002c74 <mount_volume+0x55f>
c0002791:	83 ec 0c             	sub    esp,0xc
c0002794:	89 f0                	mov    eax,esi
c0002796:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000279a:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000279d:	0f b6 f0             	movzx  esi,al
c00027a0:	bb 03 00 00 00       	mov    ebx,0x3
c00027a5:	56                   	push   esi
c00027a6:	e8 8c f4 ff ff       	call   c0001c37 <disk_initialize>
c00027ab:	83 c4 10             	add    esp,0x10
c00027ae:	a8 01                	test   al,0x1
c00027b0:	0f 85 be 04 00 00    	jne    c0002c74 <mount_volume+0x55f>
c00027b6:	89 f9                	mov    ecx,edi
c00027b8:	84 c9                	test   cl,cl
c00027ba:	74 04                	je     c00027c0 <mount_volume+0xab>
c00027bc:	a8 04                	test   al,0x4
c00027be:	75 c7                	jne    c0002787 <mount_volume+0x72>
c00027c0:	31 d2                	xor    edx,edx
c00027c2:	89 e8                	mov    eax,ebp
c00027c4:	e8 c8 fd ff ff       	call   c0002591 <find_volume>
c00027c9:	83 f8 04             	cmp    eax,0x4
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0xc3>
c00027ce:	bb 01 00 00 00       	mov    ebx,0x1
c00027d3:	e9 9c 04 00 00       	jmp    c0002c74 <mount_volume+0x55f>
c00027d8:	83 f8 01             	cmp    eax,0x1
c00027db:	76 0a                	jbe    c00027e7 <mount_volume+0xd2>
c00027dd:	bb 0d 00 00 00       	mov    ebx,0xd
c00027e2:	e9 8d 04 00 00       	jmp    c0002c74 <mount_volume+0x55f>
c00027e7:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027ea:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f5:	75 17                	jne    c000280e <mount_volume+0xf9>
c00027f7:	b8 0b 00 00 00       	mov    eax,0xb
c00027fc:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c0002801:	75 da                	jne    c00027dd <mount_volume+0xc8>
c0002803:	40                   	inc    eax
c0002804:	83 f8 40             	cmp    eax,0x40
c0002807:	75 f3                	jne    c00027fc <mount_volume+0xe7>
c0002809:	e9 5a 02 00 00       	jmp    c0002a68 <mount_volume+0x353>
c000280e:	8d 45 5f             	lea    eax,[ebp+0x5f]
c0002811:	e8 6f f4 ff ff       	call   c0001c85 <ld_word>
c0002816:	66 3d 00 02          	cmp    ax,0x200
c000281a:	75 c1                	jne    c00027dd <mount_volume+0xc8>
c000281c:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000281f:	e8 61 f4 ff ff       	call   c0001c85 <ld_word>
c0002824:	0f b7 c0             	movzx  eax,ax
c0002827:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000282b:	85 c0                	test   eax,eax
c000282d:	75 0c                	jne    c000283b <mount_volume+0x126>
c000282f:	8d 45 78             	lea    eax,[ebp+0x78]
c0002832:	e8 5b f4 ff ff       	call   c0001c92 <ld_dword>
c0002837:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000283b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000283f:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002842:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002845:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002849:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000284c:	48                   	dec    eax
c000284d:	3c 01                	cmp    al,0x1
c000284f:	77 8c                	ja     c00027dd <mount_volume+0xc8>
c0002851:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002855:	89 c3                	mov    ebx,eax
c0002857:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000285b:	66 85 c0             	test   ax,ax
c000285e:	0f 84 79 ff ff ff    	je     c00027dd <mount_volume+0xc8>
c0002864:	8d 40 ff             	lea    eax,[eax-0x1]
c0002867:	85 d8                	test   eax,ebx
c0002869:	0f 85 6e ff ff ff    	jne    c00027dd <mount_volume+0xc8>
c000286f:	8d 45 65             	lea    eax,[ebp+0x65]
c0002872:	e8 0e f4 ff ff       	call   c0001c85 <ld_word>
c0002877:	89 c7                	mov    edi,eax
c0002879:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000287d:	a8 0f                	test   al,0xf
c000287f:	0f 85 58 ff ff ff    	jne    c00027dd <mount_volume+0xc8>
c0002885:	8d 45 67             	lea    eax,[ebp+0x67]
c0002888:	e8 f8 f3 ff ff       	call   c0001c85 <ld_word>
c000288d:	0f b7 f0             	movzx  esi,ax
c0002890:	85 f6                	test   esi,esi
c0002892:	75 0a                	jne    c000289e <mount_volume+0x189>
c0002894:	8d 45 74             	lea    eax,[ebp+0x74]
c0002897:	e8 f6 f3 ff ff       	call   c0001c92 <ld_dword>
c000289c:	89 c6                	mov    esi,eax
c000289e:	8d 45 62             	lea    eax,[ebp+0x62]
c00028a1:	e8 df f3 ff ff       	call   c0001c85 <ld_word>
c00028a6:	66 85 c0             	test   ax,ax
c00028a9:	0f 84 2e ff ff ff    	je     c00027dd <mount_volume+0xc8>
c00028af:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00028b4:	0f b7 c8             	movzx  ecx,ax
c00028b7:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028c0:	89 fa                	mov    edx,edi
c00028c2:	66 c1 ea 04          	shr    dx,0x4
c00028c6:	0f b7 d2             	movzx  edx,dx
c00028c9:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028cd:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028d4:	39 c6                	cmp    esi,eax
c00028d6:	0f 82 01 ff ff ff    	jb     c00027dd <mount_volume+0xc8>
c00028dc:	29 c6                	sub    esi,eax
c00028de:	31 d2                	xor    edx,edx
c00028e0:	89 f0                	mov    eax,esi
c00028e2:	f7 f3                	div    ebx
c00028e4:	39 de                	cmp    esi,ebx
c00028e6:	0f 82 f1 fe ff ff    	jb     c00027dd <mount_volume+0xc8>
c00028ec:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028f1:	0f 87 e6 fe ff ff    	ja     c00027dd <mount_volume+0xc8>
c00028f7:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028fc:	0f 86 63 03 00 00    	jbe    c0002c65 <mount_volume+0x550>
c0002902:	bb 03 00 00 00       	mov    ebx,0x3
c0002907:	8d 70 02             	lea    esi,[eax+0x2]
c000290a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000290e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002912:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002915:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002918:	31 d2                	xor    edx,edx
c000291a:	89 c8                	mov    eax,ecx
c000291c:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000291f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002923:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002927:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000292b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000292f:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002932:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002935:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002939:	31 d2                	xor    edx,edx
c000293b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000293f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002943:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002946:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002949:	83 fb 03             	cmp    ebx,0x3
c000294c:	75 2b                	jne    c0002979 <mount_volume+0x264>
c000294e:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002951:	e8 2f f3 ff ff       	call   c0001c85 <ld_word>
c0002956:	66 09 c7             	or     di,ax
c0002959:	0f 85 7e fe ff ff    	jne    c00027dd <mount_volume+0xc8>
c000295f:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002965:	c1 e6 02             	shl    esi,0x2
c0002968:	e8 25 f3 ff ff       	call   c0001c92 <ld_dword>
c000296d:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002974:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002977:	eb 30                	jmp    c00029a9 <mount_volume+0x294>
c0002979:	66 85 ff             	test   di,di
c000297c:	0f 84 5b fe ff ff    	je     c00027dd <mount_volume+0xc8>
c0002982:	31 d2                	xor    edx,edx
c0002984:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002988:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000298c:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002990:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002993:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002996:	83 fb 02             	cmp    ebx,0x2
c0002999:	75 04                	jne    c000299f <mount_volume+0x28a>
c000299b:	01 f6                	add    esi,esi
c000299d:	eb 0a                	jmp    c00029a9 <mount_volume+0x294>
c000299f:	8d 04 76             	lea    eax,[esi+esi*2]
c00029a2:	83 e6 01             	and    esi,0x1
c00029a5:	d1 e8                	shr    eax,1
c00029a7:	01 c6                	add    esi,eax
c00029a9:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00029af:	c1 ee 09             	shr    esi,0x9
c00029b2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00029b6:	0f 87 21 fe ff ff    	ja     c00027dd <mount_volume+0xc8>
c00029bc:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029c3:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029ca:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029ce:	83 fb 03             	cmp    ebx,0x3
c00029d1:	75 7a                	jne    c0002a4d <mount_volume+0x338>
c00029d3:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029d9:	e8 a7 f2 ff ff       	call   c0001c85 <ld_word>
c00029de:	66 48                	dec    ax
c00029e0:	75 6b                	jne    c0002a4d <mount_volume+0x338>
c00029e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029ea:	83 c2 01             	add    edx,0x1
c00029ed:	89 e8                	mov    eax,ebp
c00029ef:	83 d1 00             	adc    ecx,0x0
c00029f2:	e8 6c fa ff ff       	call   c0002463 <move_window>
c00029f7:	85 c0                	test   eax,eax
c00029f9:	75 52                	jne    c0002a4d <mount_volume+0x338>
c00029fb:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029ff:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002a05:	e8 7b f2 ff ff       	call   c0001c85 <ld_word>
c0002a0a:	66 3d 55 aa          	cmp    ax,0xaa55
c0002a0e:	75 3d                	jne    c0002a4d <mount_volume+0x338>
c0002a10:	8d 45 54             	lea    eax,[ebp+0x54]
c0002a13:	e8 7a f2 ff ff       	call   c0001c92 <ld_dword>
c0002a18:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a1d:	75 2e                	jne    c0002a4d <mount_volume+0x338>
c0002a1f:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a25:	e8 68 f2 ff ff       	call   c0001c92 <ld_dword>
c0002a2a:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a2f:	75 1c                	jne    c0002a4d <mount_volume+0x338>
c0002a31:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a37:	e8 56 f2 ff ff       	call   c0001c92 <ld_dword>
c0002a3c:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a3f:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a45:	e8 48 f2 ff ff       	call   c0001c92 <ld_dword>
c0002a4a:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a4d:	66 a1 40 ed 02 c0    	mov    ax,ds:0xc002ed40
c0002a53:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a56:	40                   	inc    eax
c0002a57:	31 db                	xor    ebx,ebx
c0002a59:	66 a3 40 ed 02 c0    	mov    ds:0xc002ed40,ax
c0002a5f:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a63:	e9 0c 02 00 00       	jmp    c0002c74 <mount_volume+0x55f>
c0002a68:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a6e:	e8 12 f2 ff ff       	call   c0001c85 <ld_word>
c0002a73:	66 3d 00 01          	cmp    ax,0x100
c0002a77:	0f 85 60 fd ff ff    	jne    c00027dd <mount_volume+0xc8>
c0002a7d:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a84:	0f 85 53 fd ff ff    	jne    c00027dd <mount_volume+0xc8>
c0002a8a:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a90:	e8 15 f2 ff ff       	call   c0001caa <ld_qword>
c0002a95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a9d:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002aa3:	e8 ea f1 ff ff       	call   c0001c92 <ld_dword>
c0002aa8:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002aab:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002ab1:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002ab4:	fe c8                	dec    al
c0002ab6:	0f 85 21 fd ff ff    	jne    c00027dd <mount_volume+0xc8>
c0002abc:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002ac3:	bb 01 00 00 00       	mov    ebx,0x1
c0002ac8:	d3 e3                	shl    ebx,cl
c0002aca:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002ace:	66 85 db             	test   bx,bx
c0002ad1:	0f 84 06 fd ff ff    	je     c00027dd <mount_volume+0xc8>
c0002ad7:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002add:	e8 b0 f1 ff ff       	call   c0001c92 <ld_dword>
c0002ae2:	89 c6                	mov    esi,eax
c0002ae4:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ae9:	0f 87 ee fc ff ff    	ja     c00027dd <mount_volume+0xc8>
c0002aef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002af3:	8d 40 02             	lea    eax,[eax+0x2]
c0002af6:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002af9:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002afc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b00:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002b03:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002b09:	e8 84 f1 ff ff       	call   c0001c92 <ld_dword>
c0002b0e:	31 d2                	xor    edx,edx
c0002b10:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b14:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b20:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b23:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b26:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b2c:	e8 61 f1 ff ff       	call   c0001c92 <ld_dword>
c0002b31:	31 d2                	xor    edx,edx
c0002b33:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b37:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b3b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b3f:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b42:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b45:	0f b7 c3             	movzx  eax,bx
c0002b48:	31 d2                	xor    edx,edx
c0002b4a:	0f af f0             	imul   esi,eax
c0002b4d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b51:	89 f0                	mov    eax,esi
c0002b53:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b57:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b5b:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b5f:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b63:	39 c1                	cmp    ecx,eax
c0002b65:	89 df                	mov    edi,ebx
c0002b67:	19 d7                	sbb    edi,edx
c0002b69:	0f 82 6e fc ff ff    	jb     c00027dd <mount_volume+0xc8>
c0002b6f:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b75:	31 db                	xor    ebx,ebx
c0002b77:	e8 16 f1 ff ff       	call   c0001c92 <ld_dword>
c0002b7c:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b83:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b86:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b8e:	85 db                	test   ebx,ebx
c0002b90:	75 39                	jne    c0002bcb <mount_volume+0x4b6>
c0002b92:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b96:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b9a:	0f 86 3d fc ff ff    	jbe    c00027dd <mount_volume+0xc8>
c0002ba0:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002ba3:	31 ff                	xor    edi,edi
c0002ba5:	89 e8                	mov    eax,ebp
c0002ba7:	e8 72 f3 ff ff       	call   c0001f1e <clst2sect>
c0002bac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002bb0:	01 c6                	add    esi,eax
c0002bb2:	89 e8                	mov    eax,ebp
c0002bb4:	11 d7                	adc    edi,edx
c0002bb6:	89 f2                	mov    edx,esi
c0002bb8:	89 f9                	mov    ecx,edi
c0002bba:	e8 a4 f8 ff ff       	call   c0002463 <move_window>
c0002bbf:	85 c0                	test   eax,eax
c0002bc1:	0f 85 07 fc ff ff    	jne    c00027ce <mount_volume+0xb9>
c0002bc7:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002bcb:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bd0:	74 0b                	je     c0002bdd <mount_volume+0x4c8>
c0002bd2:	83 c3 20             	add    ebx,0x20
c0002bd5:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bdb:	eb b1                	jmp    c0002b8e <mount_volume+0x479>
c0002bdd:	8d 75 54             	lea    esi,[ebp+0x54]
c0002be0:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002be4:	e8 a9 f0 ff ff       	call   c0001c92 <ld_dword>
c0002be9:	89 c3                	mov    ebx,eax
c0002beb:	83 f8 01             	cmp    eax,0x1
c0002bee:	0f 86 e9 fb ff ff    	jbe    c00027dd <mount_volume+0xc8>
c0002bf4:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bf7:	0f 86 e0 fb ff ff    	jbe    c00027dd <mount_volume+0xc8>
c0002bfd:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002c00:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002c04:	0f af c2             	imul   eax,edx
c0002c07:	31 d2                	xor    edx,edx
c0002c09:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002c0c:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002c0f:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002c12:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002c15:	31 c9                	xor    ecx,ecx
c0002c17:	89 da                	mov    edx,ebx
c0002c19:	89 e8                	mov    eax,ebp
c0002c1b:	c1 ea 07             	shr    edx,0x7
c0002c1e:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c21:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c24:	e8 3a f8 ff ff       	call   c0002463 <move_window>
c0002c29:	85 c0                	test   eax,eax
c0002c2b:	0f 85 9d fb ff ff    	jne    c00027ce <mount_volume+0xb9>
c0002c31:	89 d8                	mov    eax,ebx
c0002c33:	83 e0 7f             	and    eax,0x7f
c0002c36:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c39:	e8 54 f0 ff ff       	call   c0001c92 <ld_dword>
c0002c3e:	83 f8 ff             	cmp    eax,0xffffffff
c0002c41:	74 0a                	je     c0002c4d <mount_volume+0x538>
c0002c43:	43                   	inc    ebx
c0002c44:	39 d8                	cmp    eax,ebx
c0002c46:	74 cd                	je     c0002c15 <mount_volume+0x500>
c0002c48:	e9 90 fb ff ff       	jmp    c00027dd <mount_volume+0xc8>
c0002c4d:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c54:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c5b:	bb 04 00 00 00       	mov    ebx,0x4
c0002c60:	e9 e8 fd ff ff       	jmp    c0002a4d <mount_volume+0x338>
c0002c65:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c6a:	19 db                	sbb    ebx,ebx
c0002c6c:	83 c3 02             	add    ebx,0x2
c0002c6f:	e9 93 fc ff ff       	jmp    c0002907 <mount_volume+0x1f2>
c0002c74:	83 c4 3c             	add    esp,0x3c
c0002c77:	89 d8                	mov    eax,ebx
c0002c79:	5b                   	pop    ebx
c0002c7a:	5e                   	pop    esi
c0002c7b:	5f                   	pop    edi
c0002c7c:	5d                   	pop    ebp
c0002c7d:	c3                   	ret    

c0002c7e <find_bitmap>:
c0002c7e:	55                   	push   ebp
c0002c7f:	57                   	push   edi
c0002c80:	89 c7                	mov    edi,eax
c0002c82:	56                   	push   esi
c0002c83:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c86:	53                   	push   ebx
c0002c87:	83 ec 1c             	sub    esp,0x1c
c0002c8a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c8d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c91:	83 e8 02             	sub    eax,0x2
c0002c94:	39 f0                	cmp    eax,esi
c0002c96:	77 02                	ja     c0002c9a <find_bitmap+0x1c>
c0002c98:	31 f6                	xor    esi,esi
c0002c9a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c9e:	89 f3                	mov    ebx,esi
c0002ca0:	31 ed                	xor    ebp,ebp
c0002ca2:	31 c9                	xor    ecx,ecx
c0002ca4:	89 da                	mov    edx,ebx
c0002ca6:	89 f8                	mov    eax,edi
c0002ca8:	c1 ea 0c             	shr    edx,0xc
c0002cab:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002cae:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002cb1:	e8 ad f7 ff ff       	call   c0002463 <move_window>
c0002cb6:	85 c0                	test   eax,eax
c0002cb8:	75 68                	jne    c0002d22 <find_bitmap+0xa4>
c0002cba:	89 da                	mov    edx,ebx
c0002cbc:	89 d9                	mov    ecx,ebx
c0002cbe:	c1 ea 03             	shr    edx,0x3
c0002cc1:	83 e1 07             	and    ecx,0x7
c0002cc4:	b8 01 00 00 00       	mov    eax,0x1
c0002cc9:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ccf:	d3 e0                	shl    eax,cl
c0002cd1:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cd4:	83 e9 02             	sub    ecx,0x2
c0002cd7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cdb:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cdf:	43                   	inc    ebx
c0002ce0:	21 c1                	and    ecx,eax
c0002ce2:	d1 e0                	shl    eax,1
c0002ce4:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ce8:	77 09                	ja     c0002cf3 <find_bitmap+0x75>
c0002cea:	31 db                	xor    ebx,ebx
c0002cec:	ba 00 02 00 00       	mov    edx,0x200
c0002cf1:	31 c0                	xor    eax,eax
c0002cf3:	84 c9                	test   cl,cl
c0002cf5:	75 10                	jne    c0002d07 <find_bitmap+0x89>
c0002cf7:	45                   	inc    ebp
c0002cf8:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cfc:	75 0f                	jne    c0002d0d <find_bitmap+0x8f>
c0002cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d02:	83 c0 02             	add    eax,0x2
c0002d05:	eb 22                	jmp    c0002d29 <find_bitmap+0xab>
c0002d07:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002d0b:	31 ed                	xor    ebp,ebp
c0002d0d:	39 de                	cmp    esi,ebx
c0002d0f:	74 16                	je     c0002d27 <find_bitmap+0xa9>
c0002d11:	84 c0                	test   al,al
c0002d13:	75 c6                	jne    c0002cdb <find_bitmap+0x5d>
c0002d15:	42                   	inc    edx
c0002d16:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d1c:	77 84                	ja     c0002ca2 <find_bitmap+0x24>
c0002d1e:	b0 01                	mov    al,0x1
c0002d20:	eb b9                	jmp    c0002cdb <find_bitmap+0x5d>
c0002d22:	83 c8 ff             	or     eax,0xffffffff
c0002d25:	eb 02                	jmp    c0002d29 <find_bitmap+0xab>
c0002d27:	31 c0                	xor    eax,eax
c0002d29:	83 c4 1c             	add    esp,0x1c
c0002d2c:	5b                   	pop    ebx
c0002d2d:	5e                   	pop    esi
c0002d2e:	5f                   	pop    edi
c0002d2f:	5d                   	pop    ebp
c0002d30:	c3                   	ret    

c0002d31 <change_bitmap>:
c0002d31:	55                   	push   ebp
c0002d32:	89 cd                	mov    ebp,ecx
c0002d34:	57                   	push   edi
c0002d35:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d38:	56                   	push   esi
c0002d39:	89 c7                	mov    edi,eax
c0002d3b:	53                   	push   ebx
c0002d3c:	89 c8                	mov    eax,ecx
c0002d3e:	83 ec 1c             	sub    esp,0x1c
c0002d41:	31 d2                	xor    edx,edx
c0002d43:	89 ce                	mov    esi,ecx
c0002d45:	c1 e8 0c             	shr    eax,0xc
c0002d48:	bb 01 00 00 00       	mov    ebx,0x1
c0002d4d:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d50:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d53:	c1 ee 03             	shr    esi,0x3
c0002d56:	83 e1 07             	and    ecx,0x7
c0002d59:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d5f:	d3 e3                	shl    ebx,cl
c0002d61:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d65:	89 c1                	mov    ecx,eax
c0002d67:	89 d3                	mov    ebx,edx
c0002d69:	83 c1 01             	add    ecx,0x1
c0002d6c:	83 d3 00             	adc    ebx,0x0
c0002d6f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d73:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d77:	89 d1                	mov    ecx,edx
c0002d79:	89 c2                	mov    edx,eax
c0002d7b:	89 f8                	mov    eax,edi
c0002d7d:	e8 e1 f6 ff ff       	call   c0002463 <move_window>
c0002d82:	89 c1                	mov    ecx,eax
c0002d84:	85 c0                	test   eax,eax
c0002d86:	75 48                	jne    c0002dd0 <change_bitmap+0x9f>
c0002d88:	31 d2                	xor    edx,edx
c0002d8a:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d8e:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d92:	0f 95 c2             	setne  dl
c0002d95:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d99:	74 3c                	je     c0002dd7 <change_bitmap+0xa6>
c0002d9b:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d9f:	4d                   	dec    ebp
c0002da0:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002da4:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002da8:	74 32                	je     c0002ddc <change_bitmap+0xab>
c0002daa:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002dae:	75 d8                	jne    c0002d88 <change_bitmap+0x57>
c0002db0:	8d 46 01             	lea    eax,[esi+0x1]
c0002db3:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002db8:	89 c3                	mov    ebx,eax
c0002dba:	31 f6                	xor    esi,esi
c0002dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002dc4:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002dca:	74 99                	je     c0002d65 <change_bitmap+0x34>
c0002dcc:	89 de                	mov    esi,ebx
c0002dce:	eb b8                	jmp    c0002d88 <change_bitmap+0x57>
c0002dd0:	b9 01 00 00 00       	mov    ecx,0x1
c0002dd5:	eb 05                	jmp    c0002ddc <change_bitmap+0xab>
c0002dd7:	b9 02 00 00 00       	mov    ecx,0x2
c0002ddc:	83 c4 1c             	add    esp,0x1c
c0002ddf:	89 c8                	mov    eax,ecx
c0002de1:	5b                   	pop    ebx
c0002de2:	5e                   	pop    esi
c0002de3:	5f                   	pop    edi
c0002de4:	5d                   	pop    ebp
c0002de5:	c3                   	ret    

c0002de6 <put_fat>:
c0002de6:	83 fa 01             	cmp    edx,0x1
c0002de9:	0f 86 7b 01 00 00    	jbe    c0002f6a <put_fat+0x184>
c0002def:	55                   	push   ebp
c0002df0:	57                   	push   edi
c0002df1:	89 cf                	mov    edi,ecx
c0002df3:	56                   	push   esi
c0002df4:	b9 02 00 00 00       	mov    ecx,0x2
c0002df9:	53                   	push   ebx
c0002dfa:	89 c6                	mov    esi,eax
c0002dfc:	83 ec 1c             	sub    esp,0x1c
c0002dff:	89 d3                	mov    ebx,edx
c0002e01:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002e04:	0f 86 68 01 00 00    	jbe    c0002f72 <put_fat+0x18c>
c0002e0a:	8a 00                	mov    al,BYTE PTR [eax]
c0002e0c:	3c 02                	cmp    al,0x2
c0002e0e:	0f 84 c7 00 00 00    	je     c0002edb <put_fat+0xf5>
c0002e14:	77 09                	ja     c0002e1f <put_fat+0x39>
c0002e16:	fe c8                	dec    al
c0002e18:	74 17                	je     c0002e31 <put_fat+0x4b>
c0002e1a:	e9 53 01 00 00       	jmp    c0002f72 <put_fat+0x18c>
c0002e1f:	b9 02 00 00 00       	mov    ecx,0x2
c0002e24:	3c 04                	cmp    al,0x4
c0002e26:	0f 86 e1 00 00 00    	jbe    c0002f0d <put_fat+0x127>
c0002e2c:	e9 41 01 00 00       	jmp    c0002f72 <put_fat+0x18c>
c0002e31:	89 d5                	mov    ebp,edx
c0002e33:	31 c9                	xor    ecx,ecx
c0002e35:	d1 ed                	shr    ebp,1
c0002e37:	89 f0                	mov    eax,esi
c0002e39:	01 d5                	add    ebp,edx
c0002e3b:	89 ea                	mov    edx,ebp
c0002e3d:	c1 ea 09             	shr    edx,0x9
c0002e40:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e43:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e46:	e8 18 f6 ff ff       	call   c0002463 <move_window>
c0002e4b:	89 c1                	mov    ecx,eax
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 85 1d 01 00 00    	jne    c0002f72 <put_fat+0x18c>
c0002e55:	8d 46 54             	lea    eax,[esi+0x54]
c0002e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e5c:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e5f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e69:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e6d:	89 f8                	mov    eax,edi
c0002e6f:	83 e3 01             	and    ebx,0x1
c0002e72:	74 0d                	je     c0002e81 <put_fat+0x9b>
c0002e74:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e77:	89 fa                	mov    edx,edi
c0002e79:	83 e0 0f             	and    eax,0xf
c0002e7c:	c1 e2 04             	shl    edx,0x4
c0002e7f:	09 d0                	or     eax,edx
c0002e81:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e88:	31 c9                	xor    ecx,ecx
c0002e8a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e8e:	c1 ea 09             	shr    edx,0x9
c0002e91:	89 f0                	mov    eax,esi
c0002e93:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e96:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e99:	e8 c5 f5 ff ff       	call   c0002463 <move_window>
c0002e9e:	89 c1                	mov    ecx,eax
c0002ea0:	85 c0                	test   eax,eax
c0002ea2:	0f 85 ca 00 00 00    	jne    c0002f72 <put_fat+0x18c>
c0002ea8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002eac:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002eb2:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002eb6:	85 db                	test   ebx,ebx
c0002eb8:	74 07                	je     c0002ec1 <put_fat+0xdb>
c0002eba:	c1 ef 04             	shr    edi,0x4
c0002ebd:	89 fa                	mov    edx,edi
c0002ebf:	eb 0e                	jmp    c0002ecf <put_fat+0xe9>
c0002ec1:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ec4:	c1 ef 08             	shr    edi,0x8
c0002ec7:	83 e2 f0             	and    edx,0xfffffff0
c0002eca:	83 e7 0f             	and    edi,0xf
c0002ecd:	09 fa                	or     edx,edi
c0002ecf:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002ed2:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ed6:	e9 97 00 00 00       	jmp    c0002f72 <put_fat+0x18c>
c0002edb:	31 c9                	xor    ecx,ecx
c0002edd:	c1 ea 08             	shr    edx,0x8
c0002ee0:	89 f0                	mov    eax,esi
c0002ee2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ee5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ee8:	e8 76 f5 ff ff       	call   c0002463 <move_window>
c0002eed:	89 c1                	mov    ecx,eax
c0002eef:	85 c0                	test   eax,eax
c0002ef1:	75 7f                	jne    c0002f72 <put_fat+0x18c>
c0002ef3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ef7:	01 db                	add    ebx,ebx
c0002ef9:	0f b7 d7             	movzx  edx,di
c0002efc:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002f02:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002f06:	e8 ec ed ff ff       	call   c0001cf7 <st_word>
c0002f0b:	eb 53                	jmp    c0002f60 <put_fat+0x17a>
c0002f0d:	31 c9                	xor    ecx,ecx
c0002f0f:	c1 ea 07             	shr    edx,0x7
c0002f12:	89 f0                	mov    eax,esi
c0002f14:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002f17:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002f1a:	e8 44 f5 ff ff       	call   c0002463 <move_window>
c0002f1f:	89 c1                	mov    ecx,eax
c0002f21:	85 c0                	test   eax,eax
c0002f23:	75 4d                	jne    c0002f72 <put_fat+0x18c>
c0002f25:	c1 e3 02             	shl    ebx,0x2
c0002f28:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f2e:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f31:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f35:	74 1c                	je     c0002f53 <put_fat+0x16d>
c0002f37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f3b:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f41:	89 d8                	mov    eax,ebx
c0002f43:	e8 4a ed ff ff       	call   c0001c92 <ld_dword>
c0002f48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f4c:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f51:	09 c7                	or     edi,eax
c0002f53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f57:	89 fa                	mov    edx,edi
c0002f59:	89 d8                	mov    eax,ebx
c0002f5b:	e8 9b ed ff ff       	call   c0001cfb <st_dword>
c0002f60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f68:	eb 08                	jmp    c0002f72 <put_fat+0x18c>
c0002f6a:	b9 02 00 00 00       	mov    ecx,0x2
c0002f6f:	89 c8                	mov    eax,ecx
c0002f71:	c3                   	ret    
c0002f72:	83 c4 1c             	add    esp,0x1c
c0002f75:	89 c8                	mov    eax,ecx
c0002f77:	5b                   	pop    ebx
c0002f78:	5e                   	pop    esi
c0002f79:	5f                   	pop    edi
c0002f7a:	5d                   	pop    ebp
c0002f7b:	c3                   	ret    

c0002f7c <fill_last_frag>:
c0002f7c:	57                   	push   edi
c0002f7d:	89 cf                	mov    edi,ecx
c0002f7f:	56                   	push   esi
c0002f80:	89 d6                	mov    esi,edx
c0002f82:	53                   	push   ebx
c0002f83:	89 c3                	mov    ebx,eax
c0002f85:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f88:	85 c0                	test   eax,eax
c0002f8a:	74 21                	je     c0002fad <fill_last_frag+0x31>
c0002f8c:	89 f9                	mov    ecx,edi
c0002f8e:	83 f8 01             	cmp    eax,0x1
c0002f91:	76 05                	jbe    c0002f98 <fill_last_frag+0x1c>
c0002f93:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f96:	29 c1                	sub    ecx,eax
c0002f98:	8d 56 01             	lea    edx,[esi+0x1]
c0002f9b:	29 c2                	sub    edx,eax
c0002f9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f9f:	e8 42 fe ff ff       	call   c0002de6 <put_fat>
c0002fa4:	85 c0                	test   eax,eax
c0002fa6:	75 05                	jne    c0002fad <fill_last_frag+0x31>
c0002fa8:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002fab:	eb d8                	jmp    c0002f85 <fill_last_frag+0x9>
c0002fad:	5b                   	pop    ebx
c0002fae:	5e                   	pop    esi
c0002faf:	5f                   	pop    edi
c0002fb0:	c3                   	ret    

c0002fb1 <fill_first_frag>:
c0002fb1:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002fb5:	75 2d                	jne    c0002fe4 <fill_first_frag+0x33>
c0002fb7:	57                   	push   edi
c0002fb8:	56                   	push   esi
c0002fb9:	53                   	push   ebx
c0002fba:	89 c3                	mov    ebx,eax
c0002fbc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fbf:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fc2:	01 d7                	add    edi,edx
c0002fc4:	39 fa                	cmp    edx,edi
c0002fc6:	74 14                	je     c0002fdc <fill_first_frag+0x2b>
c0002fc8:	8d 72 01             	lea    esi,[edx+0x1]
c0002fcb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fcd:	89 f1                	mov    ecx,esi
c0002fcf:	e8 12 fe ff ff       	call   c0002de6 <put_fat>
c0002fd4:	89 f2                	mov    edx,esi
c0002fd6:	85 c0                	test   eax,eax
c0002fd8:	74 ea                	je     c0002fc4 <fill_first_frag+0x13>
c0002fda:	eb 0b                	jmp    c0002fe7 <fill_first_frag+0x36>
c0002fdc:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fe0:	31 c0                	xor    eax,eax
c0002fe2:	eb 03                	jmp    c0002fe7 <fill_first_frag+0x36>
c0002fe4:	31 c0                	xor    eax,eax
c0002fe6:	c3                   	ret    
c0002fe7:	5b                   	pop    ebx
c0002fe8:	5e                   	pop    esi
c0002fe9:	5f                   	pop    edi
c0002fea:	c3                   	ret    

c0002feb <get_fat>:
c0002feb:	83 fa 01             	cmp    edx,0x1
c0002fee:	0f 86 db 01 00 00    	jbe    c00031cf <get_fat+0x1e4>
c0002ff4:	55                   	push   ebp
c0002ff5:	b9 01 00 00 00       	mov    ecx,0x1
c0002ffa:	57                   	push   edi
c0002ffb:	56                   	push   esi
c0002ffc:	53                   	push   ebx
c0002ffd:	83 ec 1c             	sub    esp,0x1c
c0003000:	8b 38                	mov    edi,DWORD PTR [eax]
c0003002:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0003005:	0f 86 cc 01 00 00    	jbe    c00031d7 <get_fat+0x1ec>
c000300b:	89 c3                	mov    ebx,eax
c000300d:	89 d6                	mov    esi,edx
c000300f:	8a 07                	mov    al,BYTE PTR [edi]
c0003011:	3c 02                	cmp    al,0x2
c0003013:	0f 84 99 00 00 00    	je     c00030b2 <get_fat+0xc7>
c0003019:	77 09                	ja     c0003024 <get_fat+0x39>
c000301b:	fe c8                	dec    al
c000301d:	74 1a                	je     c0003039 <get_fat+0x4e>
c000301f:	e9 b3 01 00 00       	jmp    c00031d7 <get_fat+0x1ec>
c0003024:	3c 03                	cmp    al,0x3
c0003026:	0f 84 b5 00 00 00    	je     c00030e1 <get_fat+0xf6>
c000302c:	3c 04                	cmp    al,0x4
c000302e:	0f 84 e3 00 00 00    	je     c0003117 <get_fat+0x12c>
c0003034:	e9 9e 01 00 00       	jmp    c00031d7 <get_fat+0x1ec>
c0003039:	89 d3                	mov    ebx,edx
c000303b:	31 c9                	xor    ecx,ecx
c000303d:	d1 eb                	shr    ebx,1
c000303f:	89 f8                	mov    eax,edi
c0003041:	01 d3                	add    ebx,edx
c0003043:	89 da                	mov    edx,ebx
c0003045:	c1 ea 09             	shr    edx,0x9
c0003048:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000304b:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000304e:	e8 10 f4 ff ff       	call   c0002463 <move_window>
c0003053:	85 c0                	test   eax,eax
c0003055:	74 08                	je     c000305f <get_fat+0x74>
c0003057:	83 c9 ff             	or     ecx,0xffffffff
c000305a:	e9 78 01 00 00       	jmp    c00031d7 <get_fat+0x1ec>
c000305f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003062:	31 c9                	xor    ecx,ecx
c0003064:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000306a:	89 ea                	mov    edx,ebp
c000306c:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003070:	c1 ea 09             	shr    edx,0x9
c0003073:	89 f8                	mov    eax,edi
c0003075:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003078:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307b:	e8 e3 f3 ff ff       	call   c0002463 <move_window>
c0003080:	85 c0                	test   eax,eax
c0003082:	75 d3                	jne    c0003057 <get_fat+0x6c>
c0003084:	0f b6 c3             	movzx  eax,bl
c0003087:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000308d:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003092:	c1 e3 08             	shl    ebx,0x8
c0003095:	09 c3                	or     ebx,eax
c0003097:	89 d9                	mov    ecx,ebx
c0003099:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000309f:	83 e6 01             	and    esi,0x1
c00030a2:	0f 84 2f 01 00 00    	je     c00031d7 <get_fat+0x1ec>
c00030a8:	89 d9                	mov    ecx,ebx
c00030aa:	c1 e9 04             	shr    ecx,0x4
c00030ad:	e9 25 01 00 00       	jmp    c00031d7 <get_fat+0x1ec>
c00030b2:	31 c9                	xor    ecx,ecx
c00030b4:	c1 ea 08             	shr    edx,0x8
c00030b7:	89 f8                	mov    eax,edi
c00030b9:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030bc:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030bf:	e8 9f f3 ff ff       	call   c0002463 <move_window>
c00030c4:	85 c0                	test   eax,eax
c00030c6:	75 8f                	jne    c0003057 <get_fat+0x6c>
c00030c8:	01 f6                	add    esi,esi
c00030ca:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030d0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030d4:	e8 ac eb ff ff       	call   c0001c85 <ld_word>
c00030d9:	0f b7 c8             	movzx  ecx,ax
c00030dc:	e9 f6 00 00 00       	jmp    c00031d7 <get_fat+0x1ec>
c00030e1:	31 c9                	xor    ecx,ecx
c00030e3:	c1 ea 07             	shr    edx,0x7
c00030e6:	89 f8                	mov    eax,edi
c00030e8:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030eb:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ee:	e8 70 f3 ff ff       	call   c0002463 <move_window>
c00030f3:	85 c0                	test   eax,eax
c00030f5:	0f 85 5c ff ff ff    	jne    c0003057 <get_fat+0x6c>
c00030fb:	c1 e6 02             	shl    esi,0x2
c00030fe:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003104:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003108:	e8 85 eb ff ff       	call   c0001c92 <ld_dword>
c000310d:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003112:	e9 b4 00 00 00       	jmp    c00031cb <get_fat+0x1e0>
c0003117:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000311a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000311d:	89 d1                	mov    ecx,edx
c000311f:	09 c1                	or     ecx,eax
c0003121:	74 06                	je     c0003129 <get_fat+0x13e>
c0003123:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003127:	75 0f                	jne    c0003138 <get_fat+0x14d>
c0003129:	b9 01 00 00 00       	mov    ecx,0x1
c000312e:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003132:	0f 85 9f 00 00 00    	jne    c00031d7 <get_fat+0x1ec>
c0003138:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c000313c:	89 f5                	mov    ebp,esi
c000313e:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003143:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003146:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003149:	80 f9 02             	cmp    cl,0x2
c000314c:	75 35                	jne    c0003183 <get_fat+0x198>
c000314e:	83 c0 ff             	add    eax,0xffffffff
c0003151:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003156:	83 d2 ff             	adc    edx,0xffffffff
c0003159:	31 db                	xor    ebx,ebx
c000315b:	0f ac d0 09          	shrd   eax,edx,0x9
c000315f:	53                   	push   ebx
c0003160:	c1 ea 09             	shr    edx,0x9
c0003163:	51                   	push   ecx
c0003164:	52                   	push   edx
c0003165:	50                   	push   eax
c0003166:	e8 c9 3f 02 00       	call   c0027134 <__udivdi3>
c000316b:	83 c4 10             	add    esp,0x10
c000316e:	b9 01 00 00 00       	mov    ecx,0x1
c0003173:	39 c5                	cmp    ebp,eax
c0003175:	77 60                	ja     c00031d7 <get_fat+0x1ec>
c0003177:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000317c:	74 59                	je     c00031d7 <get_fat+0x1ec>
c000317e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003181:	eb 54                	jmp    c00031d7 <get_fat+0x1ec>
c0003183:	80 f9 03             	cmp    cl,0x3
c0003186:	75 05                	jne    c000318d <get_fat+0x1a2>
c0003188:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000318b:	77 f1                	ja     c000317e <get_fat+0x193>
c000318d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003192:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003196:	75 3f                	jne    c00031d7 <get_fat+0x1ec>
c0003198:	31 c9                	xor    ecx,ecx
c000319a:	89 f2                	mov    edx,esi
c000319c:	89 f8                	mov    eax,edi
c000319e:	c1 ea 07             	shr    edx,0x7
c00031a1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00031a4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00031a7:	e8 b7 f2 ff ff       	call   c0002463 <move_window>
c00031ac:	85 c0                	test   eax,eax
c00031ae:	0f 85 a3 fe ff ff    	jne    c0003057 <get_fat+0x6c>
c00031b4:	c1 e6 02             	shl    esi,0x2
c00031b7:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031bd:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031c1:	e8 cc ea ff ff       	call   c0001c92 <ld_dword>
c00031c6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031cb:	89 c1                	mov    ecx,eax
c00031cd:	eb 08                	jmp    c00031d7 <get_fat+0x1ec>
c00031cf:	b9 01 00 00 00       	mov    ecx,0x1
c00031d4:	89 c8                	mov    eax,ecx
c00031d6:	c3                   	ret    
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 c8                	mov    eax,ecx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <dir_sdi>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	89 c3                	mov    ebx,eax
c00031e7:	83 ec 1c             	sub    esp,0x1c
c00031ea:	8b 38                	mov    edi,DWORD PTR [eax]
c00031ec:	31 c0                	xor    eax,eax
c00031ee:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031f1:	0f 94 c0             	sete   al
c00031f4:	48                   	dec    eax
c00031f5:	25 00 00 20 f0       	and    eax,0xf0200000
c00031fa:	05 00 00 00 10       	add    eax,0x10000000
c00031ff:	39 d0                	cmp    eax,edx
c0003201:	77 0a                	ja     c000320d <dir_sdi+0x2c>
c0003203:	b8 02 00 00 00       	mov    eax,0x2
c0003208:	e9 c4 00 00 00       	jmp    c00032d1 <dir_sdi+0xf0>
c000320d:	89 d6                	mov    esi,edx
c000320f:	f6 c2 1f             	test   dl,0x1f
c0003212:	75 ef                	jne    c0003203 <dir_sdi+0x22>
c0003214:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0003217:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c000321a:	85 c9                	test   ecx,ecx
c000321c:	75 2d                	jne    c000324b <dir_sdi+0x6a>
c000321e:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003221:	77 1b                	ja     c000323e <dir_sdi+0x5d>
c0003223:	89 f2                	mov    edx,esi
c0003225:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003229:	c1 ea 05             	shr    edx,0x5
c000322c:	39 c2                	cmp    edx,eax
c000322e:	73 d3                	jae    c0003203 <dir_sdi+0x22>
c0003230:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003233:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003236:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003239:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000323c:	eb 4b                	jmp    c0003289 <dir_sdi+0xa8>
c000323e:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003241:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003245:	85 c0                	test   eax,eax
c0003247:	74 da                	je     c0003223 <dir_sdi+0x42>
c0003249:	89 c1                	mov    ecx,eax
c000324b:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000324f:	c1 e5 09             	shl    ebp,0x9
c0003252:	89 ca                	mov    edx,ecx
c0003254:	39 ee                	cmp    esi,ebp
c0003256:	72 1c                	jb     c0003274 <dir_sdi+0x93>
c0003258:	89 d8                	mov    eax,ebx
c000325a:	e8 8c fd ff ff       	call   c0002feb <get_fat>
c000325f:	89 c1                	mov    ecx,eax
c0003261:	83 f8 ff             	cmp    eax,0xffffffff
c0003264:	74 66                	je     c00032cc <dir_sdi+0xeb>
c0003266:	83 f8 01             	cmp    eax,0x1
c0003269:	76 98                	jbe    c0003203 <dir_sdi+0x22>
c000326b:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000326e:	76 93                	jbe    c0003203 <dir_sdi+0x22>
c0003270:	29 ee                	sub    esi,ebp
c0003272:	eb de                	jmp    c0003252 <dir_sdi+0x71>
c0003274:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003278:	89 f8                	mov    eax,edi
c000327a:	e8 9f ec ff ff       	call   c0001f1e <clst2sect>
c000327f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003283:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003286:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003289:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000328c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000328f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003292:	89 d1                	mov    ecx,edx
c0003294:	09 c1                	or     ecx,eax
c0003296:	0f 84 67 ff ff ff    	je     c0003203 <dir_sdi+0x22>
c000329c:	89 f1                	mov    ecx,esi
c000329e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00032a6:	c1 e9 09             	shr    ecx,0x9
c00032a9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032ad:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00032b1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00032b5:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00032b8:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032be:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032c1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032c5:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032c8:	31 c0                	xor    eax,eax
c00032ca:	eb 05                	jmp    c00032d1 <dir_sdi+0xf0>
c00032cc:	b8 01 00 00 00       	mov    eax,0x1
c00032d1:	83 c4 1c             	add    esp,0x1c
c00032d4:	5b                   	pop    ebx
c00032d5:	5e                   	pop    esi
c00032d6:	5f                   	pop    edi
c00032d7:	5d                   	pop    ebp
c00032d8:	c3                   	ret    

c00032d9 <create_chain>:
c00032d9:	55                   	push   ebp
c00032da:	89 c5                	mov    ebp,eax
c00032dc:	57                   	push   edi
c00032dd:	56                   	push   esi
c00032de:	53                   	push   ebx
c00032df:	83 ec 1c             	sub    esp,0x1c
c00032e2:	85 d2                	test   edx,edx
c00032e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x21>
c00032ec:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032ef:	85 ff                	test   edi,edi
c00032f1:	74 39                	je     c000332c <create_chain+0x53>
c00032f3:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032f6:	77 39                	ja     c0003331 <create_chain+0x58>
c00032f8:	eb 32                	jmp    c000332c <create_chain+0x53>
c00032fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032fe:	e8 e8 fc ff ff       	call   c0002feb <get_fat>
c0003303:	89 c3                	mov    ebx,eax
c0003305:	83 f8 01             	cmp    eax,0x1
c0003308:	77 0a                	ja     c0003314 <create_chain+0x3b>
c000330a:	bb 01 00 00 00       	mov    ebx,0x1
c000330f:	e9 ba 01 00 00       	jmp    c00034ce <create_chain+0x1f5>
c0003314:	83 f8 ff             	cmp    eax,0xffffffff
c0003317:	0f 84 62 01 00 00    	je     c000347f <create_chain+0x1a6>
c000331d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003320:	0f 87 a8 01 00 00    	ja     c00034ce <create_chain+0x1f5>
c0003326:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000332a:	eb 05                	jmp    c0003331 <create_chain+0x58>
c000332c:	bf 01 00 00 00       	mov    edi,0x1
c0003331:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003335:	75 07                	jne    c000333e <create_chain+0x65>
c0003337:	31 db                	xor    ebx,ebx
c0003339:	e9 90 01 00 00       	jmp    c00034ce <create_chain+0x1f5>
c000333e:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003341:	75 74                	jne    c00033b7 <create_chain+0xde>
c0003343:	b9 01 00 00 00       	mov    ecx,0x1
c0003348:	89 fa                	mov    edx,edi
c000334a:	89 f0                	mov    eax,esi
c000334c:	e8 2d f9 ff ff       	call   c0002c7e <find_bitmap>
c0003351:	89 c3                	mov    ebx,eax
c0003353:	8d 40 ff             	lea    eax,[eax-0x1]
c0003356:	83 f8 fd             	cmp    eax,0xfffffffd
c0003359:	0f 87 6f 01 00 00    	ja     c00034ce <create_chain+0x1f5>
c000335f:	83 ec 0c             	sub    esp,0xc
c0003362:	b9 01 00 00 00       	mov    ecx,0x1
c0003367:	6a 01                	push   0x1
c0003369:	89 da                	mov    edx,ebx
c000336b:	89 f0                	mov    eax,esi
c000336d:	e8 bf f9 ff ff       	call   c0002d31 <change_bitmap>
c0003372:	83 c4 10             	add    esp,0x10
c0003375:	83 f8 02             	cmp    eax,0x2
c0003378:	74 90                	je     c000330a <create_chain+0x31>
c000337a:	83 f8 01             	cmp    eax,0x1
c000337d:	0f 84 fc 00 00 00    	je     c000347f <create_chain+0x1a6>
c0003383:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003388:	75 09                	jne    c0003393 <create_chain+0xba>
c000338a:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000338e:	e9 0c 01 00 00       	jmp    c000349f <create_chain+0x1c6>
c0003393:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003397:	0f 85 e7 00 00 00    	jne    c0003484 <create_chain+0x1ab>
c000339d:	8d 57 01             	lea    edx,[edi+0x1]
c00033a0:	39 da                	cmp    edx,ebx
c00033a2:	0f 84 f7 00 00 00    	je     c000349f <create_chain+0x1c6>
c00033a8:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00033ab:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00033af:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00033b2:	e9 cd 00 00 00       	jmp    c0003484 <create_chain+0x1ab>
c00033b7:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00033bb:	75 41                	jne    c00033fe <create_chain+0x125>
c00033bd:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033c0:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033c3:	77 05                	ja     c00033ca <create_chain+0xf1>
c00033c5:	bb 02 00 00 00       	mov    ebx,0x2
c00033ca:	89 da                	mov    edx,ebx
c00033cc:	89 e8                	mov    eax,ebp
c00033ce:	e8 18 fc ff ff       	call   c0002feb <get_fat>
c00033d3:	83 f8 01             	cmp    eax,0x1
c00033d6:	0f 84 2e ff ff ff    	je     c000330a <create_chain+0x31>
c00033dc:	83 f8 ff             	cmp    eax,0xffffffff
c00033df:	0f 84 9a 00 00 00    	je     c000347f <create_chain+0x1a6>
c00033e5:	85 c0                	test   eax,eax
c00033e7:	74 11                	je     c00033fa <create_chain+0x121>
c00033e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033ec:	83 f8 01             	cmp    eax,0x1
c00033ef:	76 0d                	jbe    c00033fe <create_chain+0x125>
c00033f1:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033f4:	76 08                	jbe    c00033fe <create_chain+0x125>
c00033f6:	89 c7                	mov    edi,eax
c00033f8:	eb 04                	jmp    c00033fe <create_chain+0x125>
c00033fa:	85 db                	test   ebx,ebx
c00033fc:	75 38                	jne    c0003436 <create_chain+0x15d>
c00033fe:	89 fb                	mov    ebx,edi
c0003400:	43                   	inc    ebx
c0003401:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003404:	77 0e                	ja     c0003414 <create_chain+0x13b>
c0003406:	83 ff 01             	cmp    edi,0x1
c0003409:	0f 86 28 ff ff ff    	jbe    c0003337 <create_chain+0x5e>
c000340f:	bb 02 00 00 00       	mov    ebx,0x2
c0003414:	89 da                	mov    edx,ebx
c0003416:	89 e8                	mov    eax,ebp
c0003418:	e8 ce fb ff ff       	call   c0002feb <get_fat>
c000341d:	85 c0                	test   eax,eax
c000341f:	74 15                	je     c0003436 <create_chain+0x15d>
c0003421:	83 f8 01             	cmp    eax,0x1
c0003424:	0f 84 e0 fe ff ff    	je     c000330a <create_chain+0x31>
c000342a:	40                   	inc    eax
c000342b:	74 52                	je     c000347f <create_chain+0x1a6>
c000342d:	39 fb                	cmp    ebx,edi
c000342f:	75 cf                	jne    c0003400 <create_chain+0x127>
c0003431:	e9 01 ff ff ff       	jmp    c0003337 <create_chain+0x5e>
c0003436:	83 c9 ff             	or     ecx,0xffffffff
c0003439:	89 da                	mov    edx,ebx
c000343b:	89 f0                	mov    eax,esi
c000343d:	e8 a4 f9 ff ff       	call   c0002de6 <put_fat>
c0003442:	85 c0                	test   eax,eax
c0003444:	75 32                	jne    c0003478 <create_chain+0x19f>
c0003446:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000344b:	74 11                	je     c000345e <create_chain+0x185>
c000344d:	89 d9                	mov    ecx,ebx
c000344f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003453:	89 f0                	mov    eax,esi
c0003455:	e8 8c f9 ff ff       	call   c0002de6 <put_fat>
c000345a:	85 c0                	test   eax,eax
c000345c:	75 1a                	jne    c0003478 <create_chain+0x19f>
c000345e:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003461:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003464:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003467:	8d 51 fe             	lea    edx,[ecx-0x2]
c000346a:	39 d0                	cmp    eax,edx
c000346c:	77 04                	ja     c0003472 <create_chain+0x199>
c000346e:	48                   	dec    eax
c000346f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003472:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003476:	eb 56                	jmp    c00034ce <create_chain+0x1f5>
c0003478:	48                   	dec    eax
c0003479:	0f 85 8b fe ff ff    	jne    c000330a <create_chain+0x31>
c000347f:	83 cb ff             	or     ebx,0xffffffff
c0003482:	eb 4a                	jmp    c00034ce <create_chain+0x1f5>
c0003484:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003488:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000348b:	41                   	inc    ecx
c000348c:	39 d9                	cmp    ecx,ebx
c000348e:	75 19                	jne    c00034a9 <create_chain+0x1d0>
c0003490:	b9 02 00 00 00       	mov    ecx,0x2
c0003495:	85 d2                	test   edx,edx
c0003497:	74 03                	je     c000349c <create_chain+0x1c3>
c0003499:	8d 4a 01             	lea    ecx,[edx+0x1]
c000349c:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000349f:	85 c0                	test   eax,eax
c00034a1:	0f 85 63 fe ff ff    	jne    c000330a <create_chain+0x31>
c00034a7:	eb b5                	jmp    c000345e <create_chain+0x185>
c00034a9:	85 d2                	test   edx,edx
c00034ab:	75 07                	jne    c00034b4 <create_chain+0x1db>
c00034ad:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034b4:	89 d9                	mov    ecx,ebx
c00034b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00034ba:	89 e8                	mov    eax,ebp
c00034bc:	e8 bb fa ff ff       	call   c0002f7c <fill_last_frag>
c00034c1:	85 c0                	test   eax,eax
c00034c3:	75 b3                	jne    c0003478 <create_chain+0x19f>
c00034c5:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034cc:	eb 90                	jmp    c000345e <create_chain+0x185>
c00034ce:	83 c4 1c             	add    esp,0x1c
c00034d1:	89 d8                	mov    eax,ebx
c00034d3:	5b                   	pop    ebx
c00034d4:	5e                   	pop    esi
c00034d5:	5f                   	pop    edi
c00034d6:	5d                   	pop    ebp
c00034d7:	c3                   	ret    

c00034d8 <remove_chain>:
c00034d8:	55                   	push   ebp
c00034d9:	57                   	push   edi
c00034da:	56                   	push   esi
c00034db:	53                   	push   ebx
c00034dc:	83 ec 1c             	sub    esp,0x1c
c00034df:	83 fa 01             	cmp    edx,0x1
c00034e2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034e6:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034e8:	77 0a                	ja     c00034f4 <remove_chain+0x1c>
c00034ea:	b8 02 00 00 00       	mov    eax,0x2
c00034ef:	e9 24 01 00 00       	jmp    c0003618 <remove_chain+0x140>
c00034f4:	89 d6                	mov    esi,edx
c00034f6:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034f9:	76 ef                	jbe    c00034ea <remove_chain+0x12>
c00034fb:	89 c7                	mov    edi,eax
c00034fd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003502:	75 06                	jne    c000350a <remove_chain+0x32>
c0003504:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003508:	eb 54                	jmp    c000355e <remove_chain+0x86>
c000350a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000350d:	75 06                	jne    c0003515 <remove_chain+0x3d>
c000350f:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003513:	74 ef                	je     c0003504 <remove_chain+0x2c>
c0003515:	83 c9 ff             	or     ecx,0xffffffff
c0003518:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000351c:	89 d8                	mov    eax,ebx
c000351e:	e8 c3 f8 ff ff       	call   c0002de6 <put_fat>
c0003523:	85 c0                	test   eax,eax
c0003525:	74 dd                	je     c0003504 <remove_chain+0x2c>
c0003527:	e9 ec 00 00 00       	jmp    c0003618 <remove_chain+0x140>
c000352c:	83 f8 01             	cmp    eax,0x1
c000352f:	74 b9                	je     c00034ea <remove_chain+0x12>
c0003531:	83 f8 ff             	cmp    eax,0xffffffff
c0003534:	74 6d                	je     c00035a3 <remove_chain+0xcb>
c0003536:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003539:	75 6f                	jne    c00035aa <remove_chain+0xd2>
c000353b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000353e:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003541:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003544:	39 d0                	cmp    eax,edx
c0003546:	73 08                	jae    c0003550 <remove_chain+0x78>
c0003548:	40                   	inc    eax
c0003549:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000354d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003550:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003553:	39 e9                	cmp    ecx,ebp
c0003555:	75 64                	jne    c00035bb <remove_chain+0xe3>
c0003557:	89 ee                	mov    esi,ebp
c0003559:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000355c:	76 0f                	jbe    c000356d <remove_chain+0x95>
c000355e:	89 f2                	mov    edx,esi
c0003560:	89 f8                	mov    eax,edi
c0003562:	e8 84 fa ff ff       	call   c0002feb <get_fat>
c0003567:	89 c5                	mov    ebp,eax
c0003569:	85 c0                	test   eax,eax
c000356b:	75 bf                	jne    c000352c <remove_chain+0x54>
c000356d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003570:	0f 85 a0 00 00 00    	jne    c0003616 <remove_chain+0x13e>
c0003576:	eb 6c                	jmp    c00035e4 <remove_chain+0x10c>
c0003578:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000357b:	84 c0                	test   al,al
c000357d:	75 7d                	jne    c00035fc <remove_chain+0x124>
c000357f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003582:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003586:	0f 84 86 00 00 00    	je     c0003612 <remove_chain+0x13a>
c000358c:	89 da                	mov    edx,ebx
c000358e:	89 f8                	mov    eax,edi
c0003590:	e8 56 fa ff ff       	call   c0002feb <get_fat>
c0003595:	83 f8 01             	cmp    eax,0x1
c0003598:	0f 86 4c ff ff ff    	jbe    c00034ea <remove_chain+0x12>
c000359e:	83 f8 ff             	cmp    eax,0xffffffff
c00035a1:	75 4e                	jne    c00035f1 <remove_chain+0x119>
c00035a3:	b8 01 00 00 00       	mov    eax,0x1
c00035a8:	eb 6e                	jmp    c0003618 <remove_chain+0x140>
c00035aa:	31 c9                	xor    ecx,ecx
c00035ac:	89 f2                	mov    edx,esi
c00035ae:	89 d8                	mov    eax,ebx
c00035b0:	e8 31 f8 ff ff       	call   c0002de6 <put_fat>
c00035b5:	85 c0                	test   eax,eax
c00035b7:	74 82                	je     c000353b <remove_chain+0x63>
c00035b9:	eb 5d                	jmp    c0003618 <remove_chain+0x140>
c00035bb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035be:	75 1b                	jne    c00035db <remove_chain+0x103>
c00035c0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035c4:	89 d8                	mov    eax,ebx
c00035c6:	83 ec 0c             	sub    esp,0xc
c00035c9:	6a 00                	push   0x0
c00035cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035cf:	e8 5d f7 ff ff       	call   c0002d31 <change_bitmap>
c00035d4:	83 c4 10             	add    esp,0x10
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 3d                	jne    c0003618 <remove_chain+0x140>
c00035db:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035df:	e9 73 ff ff ff       	jmp    c0003557 <remove_chain+0x7f>
c00035e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035e9:	75 8d                	jne    c0003578 <remove_chain+0xa0>
c00035eb:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035ef:	eb 25                	jmp    c0003616 <remove_chain+0x13e>
c00035f1:	8d 53 01             	lea    edx,[ebx+0x1]
c00035f4:	89 c3                	mov    ebx,eax
c00035f6:	39 c2                	cmp    edx,eax
c00035f8:	74 88                	je     c0003582 <remove_chain+0xaa>
c00035fa:	eb 1a                	jmp    c0003616 <remove_chain+0x13e>
c00035fc:	3c 03                	cmp    al,0x3
c00035fe:	75 16                	jne    c0003616 <remove_chain+0x13e>
c0003600:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003603:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003607:	77 0d                	ja     c0003616 <remove_chain+0x13e>
c0003609:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c000360c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003610:	72 04                	jb     c0003616 <remove_chain+0x13e>
c0003612:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003616:	31 c0                	xor    eax,eax
c0003618:	83 c4 1c             	add    esp,0x1c
c000361b:	5b                   	pop    ebx
c000361c:	5e                   	pop    esi
c000361d:	5f                   	pop    edi
c000361e:	5d                   	pop    ebp
c000361f:	c3                   	ret    

c0003620 <dir_clear>:
c0003620:	55                   	push   ebp
c0003621:	57                   	push   edi
c0003622:	56                   	push   esi
c0003623:	89 c6                	mov    esi,eax
c0003625:	53                   	push   ebx
c0003626:	83 ec 1c             	sub    esp,0x1c
c0003629:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000362d:	e8 9d ed ff ff       	call   c00023cf <sync_window>
c0003632:	85 c0                	test   eax,eax
c0003634:	0f 85 de 00 00 00    	jne    c0003718 <dir_clear+0xf8>
c000363a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000363e:	89 f0                	mov    eax,esi
c0003640:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003643:	e8 d6 e8 ff ff       	call   c0001f1e <clst2sect>
c0003648:	b9 00 02 00 00       	mov    ecx,0x200
c000364d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003651:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003655:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003658:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000365b:	89 e8                	mov    eax,ebp
c000365d:	31 d2                	xor    edx,edx
c000365f:	e8 b5 e6 ff ff       	call   c0001d19 <mem_set>
c0003664:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003668:	c1 e3 09             	shl    ebx,0x9
c000366b:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003671:	76 1f                	jbe    c0003692 <dir_clear+0x72>
c0003673:	bb 00 80 00 00       	mov    ebx,0x8000
c0003678:	eb 18                	jmp    c0003692 <dir_clear+0x72>
c000367a:	83 ec 0c             	sub    esp,0xc
c000367d:	53                   	push   ebx
c000367e:	e8 35 4e 00 00       	call   c00084b8 <ff_memalloc>
c0003683:	83 c4 10             	add    esp,0x10
c0003686:	89 c7                	mov    edi,eax
c0003688:	85 c0                	test   eax,eax
c000368a:	0f 85 8f 00 00 00    	jne    c000371f <dir_clear+0xff>
c0003690:	d1 eb                	shr    ebx,1
c0003692:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003698:	77 e0                	ja     c000367a <dir_clear+0x5a>
c000369a:	31 db                	xor    ebx,ebx
c000369c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036a0:	39 d8                	cmp    eax,ebx
c00036a2:	76 66                	jbe    c000370a <dir_clear+0xea>
c00036a4:	83 ec 0c             	sub    esp,0xc
c00036a7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036ab:	6a 01                	push   0x1
c00036ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036b5:	55                   	push   ebp
c00036b6:	50                   	push   eax
c00036b7:	e8 94 e5 ff ff       	call   c0001c50 <disk_write>
c00036bc:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036c1:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036c6:	83 c4 20             	add    esp,0x20
c00036c9:	85 c0                	test   eax,eax
c00036cb:	75 3d                	jne    c000370a <dir_clear+0xea>
c00036cd:	43                   	inc    ebx
c00036ce:	eb cc                	jmp    c000369c <dir_clear+0x7c>
c00036d0:	83 ec 0c             	sub    esp,0xc
c00036d3:	31 d2                	xor    edx,edx
c00036d5:	55                   	push   ebp
c00036d6:	89 d8                	mov    eax,ebx
c00036d8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036dc:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036e0:	52                   	push   edx
c00036e1:	50                   	push   eax
c00036e2:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036e6:	57                   	push   edi
c00036e7:	50                   	push   eax
c00036e8:	e8 63 e5 ff ff       	call   c0001c50 <disk_write>
c00036ed:	83 c4 20             	add    esp,0x20
c00036f0:	85 c0                	test   eax,eax
c00036f2:	75 0a                	jne    c00036fe <dir_clear+0xde>
c00036f4:	01 eb                	add    ebx,ebp
c00036f6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036fa:	39 d8                	cmp    eax,ebx
c00036fc:	77 d2                	ja     c00036d0 <dir_clear+0xb0>
c00036fe:	83 ec 0c             	sub    esp,0xc
c0003701:	57                   	push   edi
c0003702:	e8 c7 4d 00 00       	call   c00084ce <ff_memfree>
c0003707:	83 c4 10             	add    esp,0x10
c000370a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000370e:	39 d8                	cmp    eax,ebx
c0003710:	0f 95 c0             	setne  al
c0003713:	0f b6 c0             	movzx  eax,al
c0003716:	eb 19                	jmp    c0003731 <dir_clear+0x111>
c0003718:	b8 01 00 00 00       	mov    eax,0x1
c000371d:	eb 12                	jmp    c0003731 <dir_clear+0x111>
c000371f:	89 d9                	mov    ecx,ebx
c0003721:	31 d2                	xor    edx,edx
c0003723:	c1 eb 09             	shr    ebx,0x9
c0003726:	e8 ee e5 ff ff       	call   c0001d19 <mem_set>
c000372b:	89 dd                	mov    ebp,ebx
c000372d:	31 db                	xor    ebx,ebx
c000372f:	eb c5                	jmp    c00036f6 <dir_clear+0xd6>
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <dir_next>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	53                   	push   ebx
c000373d:	89 c3                	mov    ebx,eax
c000373f:	83 ec 1c             	sub    esp,0x1c
c0003742:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003744:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003748:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000374b:	8d 78 20             	lea    edi,[eax+0x20]
c000374e:	31 c0                	xor    eax,eax
c0003750:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003754:	0f 94 c0             	sete   al
c0003757:	48                   	dec    eax
c0003758:	25 00 00 20 f0       	and    eax,0xf0200000
c000375d:	05 00 00 00 10       	add    eax,0x10000000
c0003762:	39 f8                	cmp    eax,edi
c0003764:	77 0e                	ja     c0003774 <dir_next+0x3b>
c0003766:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000376d:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003774:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003777:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000377a:	b8 04 00 00 00       	mov    eax,0x4
c000377f:	89 ce                	mov    esi,ecx
c0003781:	09 d6                	or     esi,edx
c0003783:	0f 84 da 00 00 00    	je     c0003863 <dir_next+0x12a>
c0003789:	89 f8                	mov    eax,edi
c000378b:	25 ff 01 00 00       	and    eax,0x1ff
c0003790:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003794:	0f 85 b9 00 00 00    	jne    c0003853 <dir_next+0x11a>
c000379a:	83 c2 01             	add    edx,0x1
c000379d:	83 d1 00             	adc    ecx,0x0
c00037a0:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00037a3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00037a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037a9:	85 d2                	test   edx,edx
c00037ab:	75 29                	jne    c00037d6 <dir_next+0x9d>
c00037ad:	89 fa                	mov    edx,edi
c00037af:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037b3:	c1 ea 05             	shr    edx,0x5
c00037b6:	39 c2                	cmp    edx,eax
c00037b8:	0f 82 95 00 00 00    	jb     c0003853 <dir_next+0x11a>
c00037be:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037c5:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037cc:	b8 04 00 00 00       	mov    eax,0x4
c00037d1:	e9 8d 00 00 00       	jmp    c0003863 <dir_next+0x12a>
c00037d6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037da:	89 f9                	mov    ecx,edi
c00037dc:	48                   	dec    eax
c00037dd:	c1 e9 09             	shr    ecx,0x9
c00037e0:	85 c8                	test   eax,ecx
c00037e2:	75 6f                	jne    c0003853 <dir_next+0x11a>
c00037e4:	89 d8                	mov    eax,ebx
c00037e6:	e8 00 f8 ff ff       	call   c0002feb <get_fat>
c00037eb:	89 c6                	mov    esi,eax
c00037ed:	83 f8 01             	cmp    eax,0x1
c00037f0:	77 07                	ja     c00037f9 <dir_next+0xc0>
c00037f2:	b8 02 00 00 00       	mov    eax,0x2
c00037f7:	eb 6a                	jmp    c0003863 <dir_next+0x12a>
c00037f9:	83 f8 ff             	cmp    eax,0xffffffff
c00037fc:	75 07                	jne    c0003805 <dir_next+0xcc>
c00037fe:	b8 01 00 00 00       	mov    eax,0x1
c0003803:	eb 5e                	jmp    c0003863 <dir_next+0x12a>
c0003805:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003808:	77 37                	ja     c0003841 <dir_next+0x108>
c000380a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000380f:	74 ad                	je     c00037be <dir_next+0x85>
c0003811:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003814:	89 d8                	mov    eax,ebx
c0003816:	e8 be fa ff ff       	call   c00032d9 <create_chain>
c000381b:	89 c6                	mov    esi,eax
c000381d:	b8 07 00 00 00       	mov    eax,0x7
c0003822:	85 f6                	test   esi,esi
c0003824:	74 3d                	je     c0003863 <dir_next+0x12a>
c0003826:	83 fe 01             	cmp    esi,0x1
c0003829:	74 c7                	je     c00037f2 <dir_next+0xb9>
c000382b:	83 fe ff             	cmp    esi,0xffffffff
c000382e:	74 ce                	je     c00037fe <dir_next+0xc5>
c0003830:	89 f2                	mov    edx,esi
c0003832:	89 e8                	mov    eax,ebp
c0003834:	e8 e7 fd ff ff       	call   c0003620 <dir_clear>
c0003839:	85 c0                	test   eax,eax
c000383b:	75 c1                	jne    c00037fe <dir_next+0xc5>
c000383d:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003841:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003844:	89 f2                	mov    edx,esi
c0003846:	89 e8                	mov    eax,ebp
c0003848:	e8 d1 e6 ff ff       	call   c0001f1e <clst2sect>
c000384d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003850:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003853:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003857:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000385a:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000385e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003861:	31 c0                	xor    eax,eax
c0003863:	83 c4 1c             	add    esp,0x1c
c0003866:	5b                   	pop    ebx
c0003867:	5e                   	pop    esi
c0003868:	5f                   	pop    edi
c0003869:	5d                   	pop    ebp
c000386a:	c3                   	ret    

c000386b <load_xdir>:
c000386b:	55                   	push   ebp
c000386c:	57                   	push   edi
c000386d:	56                   	push   esi
c000386e:	89 c6                	mov    esi,eax
c0003870:	53                   	push   ebx
c0003871:	83 ec 1c             	sub    esp,0x1c
c0003874:	8b 00                	mov    eax,DWORD PTR [eax]
c0003876:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003879:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000387c:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000387f:	e8 df eb ff ff       	call   c0002463 <move_window>
c0003884:	89 c3                	mov    ebx,eax
c0003886:	85 c0                	test   eax,eax
c0003888:	0f 85 0c 01 00 00    	jne    c000399a <load_xdir+0x12f>
c000388e:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003891:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003894:	0f 85 fb 00 00 00    	jne    c0003995 <load_xdir+0x12a>
c000389a:	89 f8                	mov    eax,edi
c000389c:	b9 20 00 00 00       	mov    ecx,0x20
c00038a1:	e8 5e e4 ff ff       	call   c0001d04 <mem_cpy>
c00038a6:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00038aa:	40                   	inc    eax
c00038ab:	c1 e0 05             	shl    eax,0x5
c00038ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038b2:	83 e8 60             	sub    eax,0x60
c00038b5:	3d 00 02 00 00       	cmp    eax,0x200
c00038ba:	0f 87 d5 00 00 00    	ja     c0003995 <load_xdir+0x12a>
c00038c0:	31 d2                	xor    edx,edx
c00038c2:	89 f0                	mov    eax,esi
c00038c4:	e8 70 fe ff ff       	call   c0003739 <dir_next>
c00038c9:	89 c3                	mov    ebx,eax
c00038cb:	83 f8 04             	cmp    eax,0x4
c00038ce:	0f 84 c1 00 00 00    	je     c0003995 <load_xdir+0x12a>
c00038d4:	85 c0                	test   eax,eax
c00038d6:	0f 85 be 00 00 00    	jne    c000399a <load_xdir+0x12f>
c00038dc:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038df:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e2:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e4:	e8 7a eb ff ff       	call   c0002463 <move_window>
c00038e9:	89 c3                	mov    ebx,eax
c00038eb:	85 c0                	test   eax,eax
c00038ed:	0f 85 a7 00 00 00    	jne    c000399a <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038f9:	0f 85 96 00 00 00    	jne    c0003995 <load_xdir+0x12a>
c00038ff:	8d 47 20             	lea    eax,[edi+0x20]
c0003902:	b9 20 00 00 00       	mov    ecx,0x20
c0003907:	e8 f8 e3 ff ff       	call   c0001d04 <mem_cpy>
c000390c:	31 d2                	xor    edx,edx
c000390e:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003912:	b9 0f 00 00 00       	mov    ecx,0xf
c0003917:	83 c0 2c             	add    eax,0x2c
c000391a:	f7 f1                	div    ecx
c000391c:	c1 e0 05             	shl    eax,0x5
c000391f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003923:	77 70                	ja     c0003995 <load_xdir+0x12a>
c0003925:	bd 40 00 00 00       	mov    ebp,0x40
c000392a:	31 d2                	xor    edx,edx
c000392c:	89 f0                	mov    eax,esi
c000392e:	e8 06 fe ff ff       	call   c0003739 <dir_next>
c0003933:	89 c3                	mov    ebx,eax
c0003935:	83 f8 04             	cmp    eax,0x4
c0003938:	74 5b                	je     c0003995 <load_xdir+0x12a>
c000393a:	85 c0                	test   eax,eax
c000393c:	75 5c                	jne    c000399a <load_xdir+0x12f>
c000393e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003941:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003944:	8b 06                	mov    eax,DWORD PTR [esi]
c0003946:	e8 18 eb ff ff       	call   c0002463 <move_window>
c000394b:	89 c3                	mov    ebx,eax
c000394d:	85 c0                	test   eax,eax
c000394f:	75 49                	jne    c000399a <load_xdir+0x12f>
c0003951:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003954:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003957:	75 3c                	jne    c0003995 <load_xdir+0x12a>
c0003959:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000395f:	77 0d                	ja     c000396e <load_xdir+0x103>
c0003961:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003964:	b9 20 00 00 00       	mov    ecx,0x20
c0003969:	e8 96 e3 ff ff       	call   c0001d04 <mem_cpy>
c000396e:	83 c5 20             	add    ebp,0x20
c0003971:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003975:	77 b3                	ja     c000392a <load_xdir+0xbf>
c0003977:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000397d:	77 1b                	ja     c000399a <load_xdir+0x12f>
c000397f:	89 f8                	mov    eax,edi
c0003981:	e8 cd e7 ff ff       	call   c0002153 <xdir_sum>
c0003986:	89 c1                	mov    ecx,eax
c0003988:	8d 47 02             	lea    eax,[edi+0x2]
c000398b:	e8 f5 e2 ff ff       	call   c0001c85 <ld_word>
c0003990:	66 39 c1             	cmp    cx,ax
c0003993:	74 05                	je     c000399a <load_xdir+0x12f>
c0003995:	bb 02 00 00 00       	mov    ebx,0x2
c000399a:	83 c4 1c             	add    esp,0x1c
c000399d:	89 d8                	mov    eax,ebx
c000399f:	5b                   	pop    ebx
c00039a0:	5e                   	pop    esi
c00039a1:	5f                   	pop    edi
c00039a2:	5d                   	pop    ebp
c00039a3:	c3                   	ret    

c00039a4 <load_obj_xdir>:
c00039a4:	53                   	push   ebx
c00039a5:	89 c3                	mov    ebx,eax
c00039a7:	83 ec 08             	sub    esp,0x8
c00039aa:	8b 02                	mov    eax,DWORD PTR [edx]
c00039ac:	89 03                	mov    DWORD PTR [ebx],eax
c00039ae:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00039b1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00039b4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039b7:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00039ba:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039bd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039c4:	30 c0                	xor    al,al
c00039c6:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039cd:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039d0:	89 d8                	mov    eax,ebx
c00039d2:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039d5:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039d8:	e8 04 f8 ff ff       	call   c00031e1 <dir_sdi>
c00039dd:	85 c0                	test   eax,eax
c00039df:	75 0b                	jne    c00039ec <load_obj_xdir+0x48>
c00039e1:	89 d8                	mov    eax,ebx
c00039e3:	83 c4 08             	add    esp,0x8
c00039e6:	5b                   	pop    ebx
c00039e7:	e9 7f fe ff ff       	jmp    c000386b <load_xdir>
c00039ec:	83 c4 08             	add    esp,0x8
c00039ef:	5b                   	pop    ebx
c00039f0:	c3                   	ret    

c00039f1 <dir_read>:
c00039f1:	55                   	push   ebp
c00039f2:	bd 04 00 00 00       	mov    ebp,0x4
c00039f7:	57                   	push   edi
c00039f8:	56                   	push   esi
c00039f9:	be ff ff ff ff       	mov    esi,0xffffffff
c00039fe:	53                   	push   ebx
c00039ff:	89 c3                	mov    ebx,eax
c0003a01:	83 ec 1c             	sub    esp,0x1c
c0003a04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a08:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a0a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 c8                	mov    eax,ecx
c0003a17:	09 d0                	or     eax,edx
c0003a19:	0f 84 25 01 00 00    	je     c0003b44 <dir_read+0x153>
c0003a1f:	89 f8                	mov    eax,edi
c0003a21:	e8 3d ea ff ff       	call   c0002463 <move_window>
c0003a26:	89 c5                	mov    ebp,eax
c0003a28:	85 c0                	test   eax,eax
c0003a2a:	0f 85 23 01 00 00    	jne    c0003b53 <dir_read+0x162>
c0003a30:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a33:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a35:	84 c9                	test   cl,cl
c0003a37:	0f 84 11 01 00 00    	je     c0003b4e <dir_read+0x15d>
c0003a3d:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a40:	75 48                	jne    c0003a8a <dir_read+0x99>
c0003a42:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a47:	74 10                	je     c0003a59 <dir_read+0x68>
c0003a49:	80 f9 83             	cmp    cl,0x83
c0003a4c:	0f 85 dd 00 00 00    	jne    c0003b2f <dir_read+0x13e>
c0003a52:	31 ed                	xor    ebp,ebp
c0003a54:	e9 08 01 00 00       	jmp    c0003b61 <dir_read+0x170>
c0003a59:	80 f9 85             	cmp    cl,0x85
c0003a5c:	0f 85 cd 00 00 00    	jne    c0003b2f <dir_read+0x13e>
c0003a62:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a65:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a68:	89 d8                	mov    eax,ebx
c0003a6a:	e8 fc fd ff ff       	call   c000386b <load_xdir>
c0003a6f:	89 c5                	mov    ebp,eax
c0003a71:	85 c0                	test   eax,eax
c0003a73:	0f 85 da 00 00 00    	jne    c0003b53 <dir_read+0x162>
c0003a79:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a7c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a7f:	83 e0 3f             	and    eax,0x3f
c0003a82:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a85:	e9 d7 00 00 00       	jmp    c0003b61 <dir_read+0x170>
c0003a8a:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a8d:	83 e0 3f             	and    eax,0x3f
c0003a90:	80 f9 2e             	cmp    cl,0x2e
c0003a93:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a97:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a9a:	0f 84 8a 00 00 00    	je     c0003b2a <dir_read+0x139>
c0003aa0:	80 f9 e5             	cmp    cl,0xe5
c0003aa3:	0f 84 81 00 00 00    	je     c0003b2a <dir_read+0x139>
c0003aa9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003aad:	83 e0 1f             	and    eax,0x1f
c0003ab0:	83 f8 08             	cmp    eax,0x8
c0003ab3:	0f 94 c0             	sete   al
c0003ab6:	0f b6 c0             	movzx  eax,al
c0003ab9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003abd:	75 6b                	jne    c0003b2a <dir_read+0x139>
c0003abf:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003ac4:	75 44                	jne    c0003b0a <dir_read+0x119>
c0003ac6:	f6 c1 40             	test   cl,0x40
c0003ac9:	74 12                	je     c0003add <dir_read+0xec>
c0003acb:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003ace:	83 e1 bf             	and    ecx,0xffffffbf
c0003ad1:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ad5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ad8:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003adb:	eb 06                	jmp    c0003ae3 <dir_read+0xf2>
c0003add:	89 f0                	mov    eax,esi
c0003adf:	38 c8                	cmp    al,cl
c0003ae1:	75 47                	jne    c0003b2a <dir_read+0x139>
c0003ae3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ae7:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aec:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003aef:	75 3e                	jne    c0003b2f <dir_read+0x13e>
c0003af1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003af5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003af8:	e8 8a e4 ff ff       	call   c0001f87 <pick_lfn>
c0003afd:	85 c0                	test   eax,eax
c0003aff:	74 2e                	je     c0003b2f <dir_read+0x13e>
c0003b01:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b05:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003b08:	eb 25                	jmp    c0003b2f <dir_read+0x13e>
c0003b0a:	89 f0                	mov    eax,esi
c0003b0c:	84 c0                	test   al,al
c0003b0e:	75 11                	jne    c0003b21 <dir_read+0x130>
c0003b10:	89 d0                	mov    eax,edx
c0003b12:	e8 2a e6 ff ff       	call   c0002141 <sum_sfn>
c0003b17:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003b1b:	0f 84 31 ff ff ff    	je     c0003a52 <dir_read+0x61>
c0003b21:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b28:	eb 37                	jmp    c0003b61 <dir_read+0x170>
c0003b2a:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b2f:	31 d2                	xor    edx,edx
c0003b31:	89 d8                	mov    eax,ebx
c0003b33:	e8 01 fc ff ff       	call   c0003739 <dir_next>
c0003b38:	89 c5                	mov    ebp,eax
c0003b3a:	85 c0                	test   eax,eax
c0003b3c:	0f 84 cd fe ff ff    	je     c0003a0f <dir_read+0x1e>
c0003b42:	eb 0f                	jmp    c0003b53 <dir_read+0x162>
c0003b44:	85 ed                	test   ebp,ebp
c0003b46:	0f 84 06 ff ff ff    	je     c0003a52 <dir_read+0x61>
c0003b4c:	eb 05                	jmp    c0003b53 <dir_read+0x162>
c0003b4e:	bd 04 00 00 00       	mov    ebp,0x4
c0003b53:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b5a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b61:	83 c4 1c             	add    esp,0x1c
c0003b64:	89 e8                	mov    eax,ebp
c0003b66:	5b                   	pop    ebx
c0003b67:	5e                   	pop    esi
c0003b68:	5f                   	pop    edi
c0003b69:	5d                   	pop    ebp
c0003b6a:	c3                   	ret    

c0003b6b <dir_alloc>:
c0003b6b:	55                   	push   ebp
c0003b6c:	89 d5                	mov    ebp,edx
c0003b6e:	57                   	push   edi
c0003b6f:	31 d2                	xor    edx,edx
c0003b71:	56                   	push   esi
c0003b72:	53                   	push   ebx
c0003b73:	89 c3                	mov    ebx,eax
c0003b75:	83 ec 0c             	sub    esp,0xc
c0003b78:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b7a:	e8 62 f6 ff ff       	call   c00031e1 <dir_sdi>
c0003b7f:	85 c0                	test   eax,eax
c0003b81:	75 4e                	jne    c0003bd1 <dir_alloc+0x66>
c0003b83:	31 f6                	xor    esi,esi
c0003b85:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b88:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b8b:	89 f8                	mov    eax,edi
c0003b8d:	e8 d1 e8 ff ff       	call   c0002463 <move_window>
c0003b92:	85 c0                	test   eax,eax
c0003b94:	75 3b                	jne    c0003bd1 <dir_alloc+0x66>
c0003b96:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b99:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b9c:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b9e:	75 07                	jne    c0003ba7 <dir_alloc+0x3c>
c0003ba0:	f7 d2                	not    edx
c0003ba2:	c0 ea 07             	shr    dl,0x7
c0003ba5:	eb 0d                	jmp    c0003bb4 <dir_alloc+0x49>
c0003ba7:	84 d2                	test   dl,dl
c0003ba9:	0f 94 c1             	sete   cl
c0003bac:	80 fa e5             	cmp    dl,0xe5
c0003baf:	0f 94 c2             	sete   dl
c0003bb2:	09 ca                	or     edx,ecx
c0003bb4:	84 d2                	test   dl,dl
c0003bb6:	74 07                	je     c0003bbf <dir_alloc+0x54>
c0003bb8:	46                   	inc    esi
c0003bb9:	39 ee                	cmp    esi,ebp
c0003bbb:	75 04                	jne    c0003bc1 <dir_alloc+0x56>
c0003bbd:	eb 1c                	jmp    c0003bdb <dir_alloc+0x70>
c0003bbf:	31 f6                	xor    esi,esi
c0003bc1:	ba 01 00 00 00       	mov    edx,0x1
c0003bc6:	89 d8                	mov    eax,ebx
c0003bc8:	e8 6c fb ff ff       	call   c0003739 <dir_next>
c0003bcd:	85 c0                	test   eax,eax
c0003bcf:	74 b4                	je     c0003b85 <dir_alloc+0x1a>
c0003bd1:	83 f8 04             	cmp    eax,0x4
c0003bd4:	75 05                	jne    c0003bdb <dir_alloc+0x70>
c0003bd6:	b8 07 00 00 00       	mov    eax,0x7
c0003bdb:	83 c4 0c             	add    esp,0xc
c0003bde:	5b                   	pop    ebx
c0003bdf:	5e                   	pop    esi
c0003be0:	5f                   	pop    edi
c0003be1:	5d                   	pop    ebp
c0003be2:	c3                   	ret    

c0003be3 <store_xdir>:
c0003be3:	55                   	push   ebp
c0003be4:	57                   	push   edi
c0003be5:	89 c7                	mov    edi,eax
c0003be7:	56                   	push   esi
c0003be8:	53                   	push   ebx
c0003be9:	83 ec 0c             	sub    esp,0xc
c0003bec:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bee:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bf1:	89 e8                	mov    eax,ebp
c0003bf3:	e8 5b e5 ff ff       	call   c0002153 <xdir_sum>
c0003bf8:	0f b7 d0             	movzx  edx,ax
c0003bfb:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bfe:	e8 f4 e0 ff ff       	call   c0001cf7 <st_word>
c0003c03:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003c07:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003c0a:	89 f8                	mov    eax,edi
c0003c0c:	e8 d0 f5 ff ff       	call   c00031e1 <dir_sdi>
c0003c11:	89 c6                	mov    esi,eax
c0003c13:	85 f6                	test   esi,esi
c0003c15:	75 3d                	jne    c0003c54 <store_xdir+0x71>
c0003c17:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003c1a:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c1d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c1f:	e8 3f e8 ff ff       	call   c0002463 <move_window>
c0003c24:	89 c6                	mov    esi,eax
c0003c26:	85 c0                	test   eax,eax
c0003c28:	75 2a                	jne    c0003c54 <store_xdir+0x71>
c0003c2a:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c2d:	b9 20 00 00 00       	mov    ecx,0x20
c0003c32:	89 ea                	mov    edx,ebp
c0003c34:	e8 cb e0 ff ff       	call   c0001d04 <mem_cpy>
c0003c39:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c3b:	85 db                	test   ebx,ebx
c0003c3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c41:	74 11                	je     c0003c54 <store_xdir+0x71>
c0003c43:	31 d2                	xor    edx,edx
c0003c45:	89 f8                	mov    eax,edi
c0003c47:	83 c5 20             	add    ebp,0x20
c0003c4a:	e8 ea fa ff ff       	call   c0003739 <dir_next>
c0003c4f:	4b                   	dec    ebx
c0003c50:	89 c6                	mov    esi,eax
c0003c52:	eb bf                	jmp    c0003c13 <store_xdir+0x30>
c0003c54:	89 f0                	mov    eax,esi
c0003c56:	83 fe 02             	cmp    esi,0x2
c0003c59:	76 05                	jbe    c0003c60 <store_xdir+0x7d>
c0003c5b:	b8 02 00 00 00       	mov    eax,0x2
c0003c60:	83 c4 0c             	add    esp,0xc
c0003c63:	5b                   	pop    ebx
c0003c64:	5e                   	pop    esi
c0003c65:	5f                   	pop    edi
c0003c66:	5d                   	pop    ebp
c0003c67:	c3                   	ret    

c0003c68 <dir_remove>:
c0003c68:	57                   	push   edi
c0003c69:	56                   	push   esi
c0003c6a:	53                   	push   ebx
c0003c6b:	89 c3                	mov    ebx,eax
c0003c6d:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c70:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c72:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c75:	83 fa ff             	cmp    edx,0xffffffff
c0003c78:	74 09                	je     c0003c83 <dir_remove+0x1b>
c0003c7a:	e8 62 f5 ff ff       	call   c00031e1 <dir_sdi>
c0003c7f:	85 c0                	test   eax,eax
c0003c81:	75 41                	jne    c0003cc4 <dir_remove+0x5c>
c0003c83:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c86:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c89:	89 f0                	mov    eax,esi
c0003c8b:	e8 d3 e7 ff ff       	call   c0002463 <move_window>
c0003c90:	85 c0                	test   eax,eax
c0003c92:	75 26                	jne    c0003cba <dir_remove+0x52>
c0003c94:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c97:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c9a:	75 05                	jne    c0003ca1 <dir_remove+0x39>
c0003c9c:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c9f:	eb 03                	jmp    c0003ca4 <dir_remove+0x3c>
c0003ca1:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003ca4:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003ca8:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003cab:	73 17                	jae    c0003cc4 <dir_remove+0x5c>
c0003cad:	31 d2                	xor    edx,edx
c0003caf:	89 d8                	mov    eax,ebx
c0003cb1:	e8 83 fa ff ff       	call   c0003739 <dir_next>
c0003cb6:	85 c0                	test   eax,eax
c0003cb8:	74 c9                	je     c0003c83 <dir_remove+0x1b>
c0003cba:	83 f8 04             	cmp    eax,0x4
c0003cbd:	75 05                	jne    c0003cc4 <dir_remove+0x5c>
c0003cbf:	b8 02 00 00 00       	mov    eax,0x2
c0003cc4:	5b                   	pop    ebx
c0003cc5:	5e                   	pop    esi
c0003cc6:	5f                   	pop    edi
c0003cc7:	c3                   	ret    

c0003cc8 <create_name>:
c0003cc8:	55                   	push   ebp
c0003cc9:	89 d5                	mov    ebp,edx
c0003ccb:	57                   	push   edi
c0003ccc:	89 c7                	mov    edi,eax
c0003cce:	56                   	push   esi
c0003ccf:	31 f6                	xor    esi,esi
c0003cd1:	53                   	push   ebx
c0003cd2:	83 ec 3c             	sub    esp,0x3c
c0003cd5:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cd7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cdd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003ce0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003ce4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ce8:	e8 72 e0 ff ff       	call   c0001d5f <tchar2uni>
c0003ced:	89 c3                	mov    ebx,eax
c0003cef:	83 f8 ff             	cmp    eax,0xffffffff
c0003cf2:	75 0a                	jne    c0003cfe <create_name+0x36>
c0003cf4:	b8 06 00 00 00       	mov    eax,0x6
c0003cf9:	e9 9e 02 00 00       	jmp    c0003f9c <create_name+0x2d4>
c0003cfe:	3d ff ff 00 00       	cmp    eax,0xffff
c0003d03:	76 0c                	jbe    c0003d11 <create_name+0x49>
c0003d05:	c1 e8 10             	shr    eax,0x10
c0003d08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003d0c:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003d10:	46                   	inc    esi
c0003d11:	66 83 fb 1f          	cmp    bx,0x1f
c0003d15:	76 4f                	jbe    c0003d66 <create_name+0x9e>
c0003d17:	66 83 fb 5c          	cmp    bx,0x5c
c0003d1b:	74 35                	je     c0003d52 <create_name+0x8a>
c0003d1d:	66 83 fb 2f          	cmp    bx,0x2f
c0003d21:	74 2f                	je     c0003d52 <create_name+0x8a>
c0003d23:	66 83 fb 7f          	cmp    bx,0x7f
c0003d27:	77 11                	ja     c0003d3a <create_name+0x72>
c0003d29:	0f b7 d3             	movzx  edx,bx
c0003d2c:	b8 f2 9c 02 c0       	mov    eax,0xc0029cf2
c0003d31:	e8 11 e0 ff ff       	call   c0001d47 <chk_chr>
c0003d36:	85 c0                	test   eax,eax
c0003d38:	75 ba                	jne    c0003cf4 <create_name+0x2c>
c0003d3a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d40:	77 b2                	ja     c0003cf4 <create_name+0x2c>
c0003d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d46:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d4a:	46                   	inc    esi
c0003d4b:	eb 97                	jmp    c0003ce4 <create_name+0x1c>
c0003d4d:	40                   	inc    eax
c0003d4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d56:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d58:	80 fa 2f             	cmp    dl,0x2f
c0003d5b:	74 f0                	je     c0003d4d <create_name+0x85>
c0003d5d:	80 fa 5c             	cmp    dl,0x5c
c0003d60:	74 eb                	je     c0003d4d <create_name+0x85>
c0003d62:	31 db                	xor    ebx,ebx
c0003d64:	eb 02                	jmp    c0003d68 <create_name+0xa0>
c0003d66:	b3 04                	mov    bl,0x4
c0003d68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d6c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d6f:	85 f6                	test   esi,esi
c0003d71:	74 18                	je     c0003d8b <create_name+0xc3>
c0003d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d77:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d7c:	66 83 f8 20          	cmp    ax,0x20
c0003d80:	74 06                	je     c0003d88 <create_name+0xc0>
c0003d82:	66 83 f8 2e          	cmp    ax,0x2e
c0003d86:	75 03                	jne    c0003d8b <create_name+0xc3>
c0003d88:	4e                   	dec    esi
c0003d89:	eb e4                	jmp    c0003d6f <create_name+0xa7>
c0003d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d8f:	31 ed                	xor    ebp,ebp
c0003d91:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d97:	85 f6                	test   esi,esi
c0003d99:	0f 84 55 ff ff ff    	je     c0003cf4 <create_name+0x2c>
c0003d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da3:	8d 55 01             	lea    edx,[ebp+0x1]
c0003da6:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003daa:	66 83 f8 20          	cmp    ax,0x20
c0003dae:	75 04                	jne    c0003db4 <create_name+0xec>
c0003db0:	89 d5                	mov    ebp,edx
c0003db2:	eb eb                	jmp    c0003d9f <create_name+0xd7>
c0003db4:	85 ed                	test   ebp,ebp
c0003db6:	75 06                	jne    c0003dbe <create_name+0xf6>
c0003db8:	66 83 f8 2e          	cmp    ax,0x2e
c0003dbc:	75 08                	jne    c0003dc6 <create_name+0xfe>
c0003dbe:	83 cb 03             	or     ebx,0x3
c0003dc1:	eb 03                	jmp    c0003dc6 <create_name+0xfe>
c0003dc3:	4e                   	dec    esi
c0003dc4:	74 0c                	je     c0003dd2 <create_name+0x10a>
c0003dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dca:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dd0:	75 f1                	jne    c0003dc3 <create_name+0xfb>
c0003dd2:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dd7:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003dda:	ba 20 00 00 00       	mov    edx,0x20
c0003ddf:	e8 35 df ff ff       	call   c0001d19 <mem_set>
c0003de4:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dec:	31 c9                	xor    ecx,ecx
c0003dee:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003df3:	8d 45 01             	lea    eax,[ebp+0x1]
c0003df6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dfe:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003e02:	66 85 ed             	test   bp,bp
c0003e05:	0f 84 30 01 00 00    	je     c0003f3b <create_name+0x273>
c0003e0b:	66 83 fd 20          	cmp    bp,0x20
c0003e0f:	74 10                	je     c0003e21 <create_name+0x159>
c0003e11:	66 83 fd 2e          	cmp    bp,0x2e
c0003e15:	75 13                	jne    c0003e2a <create_name+0x162>
c0003e17:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e1b:	0f 84 6b 01 00 00    	je     c0003f8c <create_name+0x2c4>
c0003e21:	83 cb 03             	or     ebx,0x3
c0003e24:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e28:	eb c9                	jmp    c0003df3 <create_name+0x12b>
c0003e2a:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e2e:	73 0b                	jae    c0003e3b <create_name+0x173>
c0003e30:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e34:	75 47                	jne    c0003e7d <create_name+0x1b5>
c0003e36:	e9 51 01 00 00       	jmp    c0003f8c <create_name+0x2c4>
c0003e3b:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e40:	75 10                	jne    c0003e52 <create_name+0x18a>
c0003e42:	83 cb 03             	or     ebx,0x3
c0003e45:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e4d:	e9 e9 00 00 00       	jmp    c0003f3b <create_name+0x273>
c0003e52:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e56:	74 0d                	je     c0003e65 <create_name+0x19d>
c0003e58:	83 cb 03             	or     ebx,0x3
c0003e5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e5f:	0f 87 d6 00 00 00    	ja     c0003f3b <create_name+0x273>
c0003e65:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e6a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e6e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e76:	b9 08 00 00 00       	mov    ecx,0x8
c0003e7b:	eb a7                	jmp    c0003e24 <create_name+0x15c>
c0003e7d:	66 83 fd 7f          	cmp    bp,0x7f
c0003e81:	76 68                	jbe    c0003eeb <create_name+0x223>
c0003e83:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e87:	88 da                	mov    dl,bl
c0003e89:	83 ca 02             	or     edx,0x2
c0003e8c:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e90:	50                   	push   eax
c0003e91:	50                   	push   eax
c0003e92:	68 b5 01 00 00       	push   0x1b5
c0003e97:	55                   	push   ebp
c0003e98:	e8 48 46 00 00       	call   c00084e5 <ff_uni2oem>
c0003e9d:	83 c4 10             	add    esp,0x10
c0003ea0:	89 c5                	mov    ebp,eax
c0003ea2:	a8 80                	test   al,0x80
c0003ea4:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ea8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003eac:	74 0c                	je     c0003eba <create_name+0x1f2>
c0003eae:	83 e5 7f             	and    ebp,0x7f
c0003eb1:	0f b6 ad 40 9c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd63c0]
c0003eb8:	eb 2a                	jmp    c0003ee4 <create_name+0x21c>
c0003eba:	66 3d ff 00          	cmp    ax,0xff
c0003ebe:	76 24                	jbe    c0003ee4 <create_name+0x21c>
c0003ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ec4:	48                   	dec    eax
c0003ec5:	39 c8                	cmp    eax,ecx
c0003ec7:	77 0c                	ja     c0003ed5 <create_name+0x20d>
c0003ec9:	83 cb 03             	or     ebx,0x3
c0003ecc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ed0:	e9 4f ff ff ff       	jmp    c0003e24 <create_name+0x15c>
c0003ed5:	89 e8                	mov    eax,ebp
c0003ed7:	88 d3                	mov    bl,dl
c0003ed9:	66 c1 e8 08          	shr    ax,0x8
c0003edd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ee1:	41                   	inc    ecx
c0003ee2:	eb 4b                	jmp    c0003f2f <create_name+0x267>
c0003ee4:	88 d3                	mov    bl,dl
c0003ee6:	66 85 ed             	test   bp,bp
c0003ee9:	74 19                	je     c0003f04 <create_name+0x23c>
c0003eeb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003eef:	0f b7 d5             	movzx  edx,bp
c0003ef2:	b8 fb 9c 02 c0       	mov    eax,0xc0029cfb
c0003ef7:	e8 4b de ff ff       	call   c0001d47 <chk_chr>
c0003efc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003f00:	85 c0                	test   eax,eax
c0003f02:	74 0a                	je     c0003f0e <create_name+0x246>
c0003f04:	83 cb 03             	or     ebx,0x3
c0003f07:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003f0c:	eb 21                	jmp    c0003f2f <create_name+0x267>
c0003f0e:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003f11:	66 83 f8 19          	cmp    ax,0x19
c0003f15:	77 07                	ja     c0003f1e <create_name+0x256>
c0003f17:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f1c:	eb 11                	jmp    c0003f2f <create_name+0x267>
c0003f1e:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f21:	66 83 f8 19          	cmp    ax,0x19
c0003f25:	77 08                	ja     c0003f2f <create_name+0x267>
c0003f27:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f2c:	83 ed 20             	sub    ebp,0x20
c0003f2f:	89 e8                	mov    eax,ebp
c0003f31:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f35:	41                   	inc    ecx
c0003f36:	e9 e9 fe ff ff       	jmp    c0003e24 <create_name+0x15c>
c0003f3b:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f3f:	75 04                	jne    c0003f45 <create_name+0x27d>
c0003f41:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f45:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f4a:	75 05                	jne    c0003f51 <create_name+0x289>
c0003f4c:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f51:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f55:	83 e0 0c             	and    eax,0xc
c0003f58:	3c 0c                	cmp    al,0xc
c0003f5a:	74 0b                	je     c0003f67 <create_name+0x29f>
c0003f5c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f60:	83 e0 03             	and    eax,0x3
c0003f63:	3c 03                	cmp    al,0x3
c0003f65:	75 05                	jne    c0003f6c <create_name+0x2a4>
c0003f67:	83 cb 02             	or     ebx,0x2
c0003f6a:	eb 19                	jmp    c0003f85 <create_name+0x2bd>
c0003f6c:	f6 c3 02             	test   bl,0x2
c0003f6f:	75 14                	jne    c0003f85 <create_name+0x2bd>
c0003f71:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f76:	74 03                	je     c0003f7b <create_name+0x2b3>
c0003f78:	83 cb 10             	or     ebx,0x10
c0003f7b:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f80:	74 03                	je     c0003f85 <create_name+0x2bd>
c0003f82:	83 cb 08             	or     ebx,0x8
c0003f85:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f88:	31 c0                	xor    eax,eax
c0003f8a:	eb 10                	jmp    c0003f9c <create_name+0x2d4>
c0003f8c:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f91:	0f 85 ce fe ff ff    	jne    c0003e65 <create_name+0x19d>
c0003f97:	e9 a6 fe ff ff       	jmp    c0003e42 <create_name+0x17a>
c0003f9c:	83 c4 3c             	add    esp,0x3c
c0003f9f:	5b                   	pop    ebx
c0003fa0:	5e                   	pop    esi
c0003fa1:	5f                   	pop    edi
c0003fa2:	5d                   	pop    ebp
c0003fa3:	c3                   	ret    

c0003fa4 <xname_sum>:
c0003fa4:	56                   	push   esi
c0003fa5:	53                   	push   ebx
c0003fa6:	89 c6                	mov    esi,eax
c0003fa8:	51                   	push   ecx
c0003fa9:	31 db                	xor    ebx,ebx
c0003fab:	83 c6 02             	add    esi,0x2
c0003fae:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003fb2:	66 85 c0             	test   ax,ax
c0003fb5:	74 1f                	je     c0003fd6 <xname_sum+0x32>
c0003fb7:	83 ec 0c             	sub    esp,0xc
c0003fba:	66 d1 cb             	ror    bx,1
c0003fbd:	50                   	push   eax
c0003fbe:	e8 1e 46 00 00       	call   c00085e1 <ff_wtoupper>
c0003fc3:	83 c4 10             	add    esp,0x10
c0003fc6:	0f b6 d0             	movzx  edx,al
c0003fc9:	66 c1 e8 08          	shr    ax,0x8
c0003fcd:	01 d3                	add    ebx,edx
c0003fcf:	66 d1 cb             	ror    bx,1
c0003fd2:	01 c3                	add    ebx,eax
c0003fd4:	eb d5                	jmp    c0003fab <xname_sum+0x7>
c0003fd6:	89 d8                	mov    eax,ebx
c0003fd8:	5a                   	pop    edx
c0003fd9:	5b                   	pop    ebx
c0003fda:	5e                   	pop    esi
c0003fdb:	c3                   	ret    

c0003fdc <create_xdir>:
c0003fdc:	55                   	push   ebp
c0003fdd:	b9 40 00 00 00       	mov    ecx,0x40
c0003fe2:	57                   	push   edi
c0003fe3:	bd 01 00 00 00       	mov    ebp,0x1
c0003fe8:	56                   	push   esi
c0003fe9:	31 ff                	xor    edi,edi
c0003feb:	53                   	push   ebx
c0003fec:	be 40 00 00 00       	mov    esi,0x40
c0003ff1:	89 c3                	mov    ebx,eax
c0003ff3:	83 ec 1c             	sub    esp,0x1c
c0003ff6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ffa:	31 d2                	xor    edx,edx
c0003ffc:	e8 18 dd ff ff       	call   c0001d19 <mem_set>
c0004001:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0004004:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0004008:	31 c9                	xor    ecx,ecx
c000400a:	8d 46 01             	lea    eax,[esi+0x1]
c000400d:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0004018:	66 85 ed             	test   bp,bp
c000401b:	74 12                	je     c000402f <create_xdir+0x53>
c000401d:	0f b6 c1             	movzx  eax,cl
c0004020:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004024:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004028:	66 83 fd 01          	cmp    bp,0x1
c000402c:	80 d9 ff             	sbb    cl,0xff
c000402f:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004032:	0f b7 d5             	movzx  edx,bp
c0004035:	83 c6 02             	add    esi,0x2
c0004038:	e8 ba dc ff ff       	call   c0001cf7 <st_word>
c000403d:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004043:	75 d3                	jne    c0004018 <create_xdir+0x3c>
c0004045:	8d 47 01             	lea    eax,[edi+0x1]
c0004048:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000404c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004050:	0f b6 c1             	movzx  eax,cl
c0004053:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004058:	74 07                	je     c0004061 <create_xdir+0x85>
c000405a:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000405f:	eb a9                	jmp    c000400a <create_xdir+0x2e>
c0004061:	8d 47 02             	lea    eax,[edi+0x2]
c0004064:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004067:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000406a:	89 d0                	mov    eax,edx
c000406c:	e8 33 ff ff ff       	call   c0003fa4 <xname_sum>
c0004071:	83 c4 1c             	add    esp,0x1c
c0004074:	0f b7 d0             	movzx  edx,ax
c0004077:	8d 43 24             	lea    eax,[ebx+0x24]
c000407a:	5b                   	pop    ebx
c000407b:	5e                   	pop    esi
c000407c:	5f                   	pop    edi
c000407d:	5d                   	pop    ebp
c000407e:	e9 74 dc ff ff       	jmp    c0001cf7 <st_word>

c0004083 <cmp_lfn>:
c0004083:	55                   	push   ebp
c0004084:	57                   	push   edi
c0004085:	89 d7                	mov    edi,edx
c0004087:	56                   	push   esi
c0004088:	53                   	push   ebx
c0004089:	83 ec 1c             	sub    esp,0x1c
c000408c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004090:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004093:	e8 ed db ff ff       	call   c0001c85 <ld_word>
c0004098:	66 85 c0             	test   ax,ax
c000409b:	74 07                	je     c00040a4 <cmp_lfn+0x21>
c000409d:	31 c0                	xor    eax,eax
c000409f:	e9 9a 00 00 00       	jmp    c000413e <cmp_lfn+0xbb>
c00040a4:	8a 1f                	mov    bl,BYTE PTR [edi]
c00040a6:	bd 01 00 00 00       	mov    ebp,0x1
c00040ab:	83 e3 3f             	and    ebx,0x3f
c00040ae:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00040b6:	4b                   	dec    ebx
c00040b7:	6b db 0d             	imul   ebx,ebx,0xd
c00040ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040be:	0f b6 80 c0 9c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6340]
c00040c5:	01 f8                	add    eax,edi
c00040c7:	e8 b9 db ff ff       	call   c0001c85 <ld_word>
c00040cc:	66 85 ed             	test   bp,bp
c00040cf:	89 c6                	mov    esi,eax
c00040d1:	74 3c                	je     c000410f <cmp_lfn+0x8c>
c00040d3:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040d9:	77 c2                	ja     c000409d <cmp_lfn+0x1a>
c00040db:	83 ec 0c             	sub    esp,0xc
c00040de:	0f b7 c0             	movzx  eax,ax
c00040e1:	50                   	push   eax
c00040e2:	e8 fa 44 00 00       	call   c00085e1 <ff_wtoupper>
c00040e7:	89 c5                	mov    ebp,eax
c00040e9:	8d 43 01             	lea    eax,[ebx+0x1]
c00040ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040f4:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fb:	e8 e1 44 00 00       	call   c00085e1 <ff_wtoupper>
c0004100:	83 c4 10             	add    esp,0x10
c0004103:	39 c5                	cmp    ebp,eax
c0004105:	75 96                	jne    c000409d <cmp_lfn+0x1a>
c0004107:	89 f5                	mov    ebp,esi
c0004109:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000410d:	eb 04                	jmp    c0004113 <cmp_lfn+0x90>
c000410f:	66 46                	inc    si
c0004111:	75 8a                	jne    c000409d <cmp_lfn+0x1a>
c0004113:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0004117:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c000411c:	75 9c                	jne    c00040ba <cmp_lfn+0x37>
c000411e:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004121:	74 16                	je     c0004139 <cmp_lfn+0xb6>
c0004123:	66 85 ed             	test   bp,bp
c0004126:	74 11                	je     c0004139 <cmp_lfn+0xb6>
c0004128:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000412c:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004131:	0f 94 c0             	sete   al
c0004134:	0f b6 c0             	movzx  eax,al
c0004137:	eb 05                	jmp    c000413e <cmp_lfn+0xbb>
c0004139:	b8 01 00 00 00       	mov    eax,0x1
c000413e:	83 c4 1c             	add    esp,0x1c
c0004141:	5b                   	pop    ebx
c0004142:	5e                   	pop    esi
c0004143:	5f                   	pop    edi
c0004144:	5d                   	pop    ebp
c0004145:	c3                   	ret    

c0004146 <dir_find>:
c0004146:	55                   	push   ebp
c0004147:	31 d2                	xor    edx,edx
c0004149:	57                   	push   edi
c000414a:	56                   	push   esi
c000414b:	53                   	push   ebx
c000414c:	89 c3                	mov    ebx,eax
c000414e:	83 ec 1c             	sub    esp,0x1c
c0004151:	8b 30                	mov    esi,DWORD PTR [eax]
c0004153:	e8 89 f0 ff ff       	call   c00031e1 <dir_sdi>
c0004158:	89 04 24             	mov    DWORD PTR [esp],eax
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 9e 01 00 00    	jne    c0004301 <dir_find+0x1bb>
c0004163:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004166:	0f 85 8d 00 00 00    	jne    c00041f9 <dir_find+0xb3>
c000416c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000416f:	e8 30 fe ff ff       	call   c0003fa4 <xname_sum>
c0004174:	89 c7                	mov    edi,eax
c0004176:	31 d2                	xor    edx,edx
c0004178:	89 d8                	mov    eax,ebx
c000417a:	e8 72 f8 ff ff       	call   c00039f1 <dir_read>
c000417f:	85 c0                	test   eax,eax
c0004181:	0f 85 5e 01 00 00    	jne    c00042e5 <dir_find+0x19f>
c0004187:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000418a:	8d 41 24             	lea    eax,[ecx+0x24]
c000418d:	e8 f3 da ff ff       	call   c0001c85 <ld_word>
c0004192:	66 39 f8             	cmp    ax,di
c0004195:	75 df                	jne    c0004176 <dir_find+0x30>
c0004197:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000419a:	31 ed                	xor    ebp,ebp
c000419c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00041a0:	ba 40 00 00 00       	mov    edx,0x40
c00041a5:	89 e9                	mov    ecx,ebp
c00041a7:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c00041ab:	0f 84 42 01 00 00    	je     c00042f3 <dir_find+0x1ad>
c00041b1:	f6 c2 1f             	test   dl,0x1f
c00041b4:	75 03                	jne    c00041b9 <dir_find+0x73>
c00041b6:	83 c2 02             	add    edx,0x2
c00041b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041bd:	89 d0                	mov    eax,edx
c00041bf:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041c2:	e8 be da ff ff       	call   c0001c85 <ld_word>
c00041c7:	83 ec 0c             	sub    esp,0xc
c00041ca:	0f b7 c0             	movzx  eax,ax
c00041cd:	50                   	push   eax
c00041ce:	e8 0e 44 00 00       	call   c00085e1 <ff_wtoupper>
c00041d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041d7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041da:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041de:	89 04 24             	mov    DWORD PTR [esp],eax
c00041e1:	e8 fb 43 00 00       	call   c00085e1 <ff_wtoupper>
c00041e6:	83 c4 10             	add    esp,0x10
c00041e9:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041ed:	75 87                	jne    c0004176 <dir_find+0x30>
c00041ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041f3:	45                   	inc    ebp
c00041f4:	83 c2 02             	add    edx,0x2
c00041f7:	eb ac                	jmp    c00041a5 <dir_find+0x5f>
c00041f9:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004200:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0004205:	bf ff ff ff ff       	mov    edi,0xffffffff
c000420a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000420d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004210:	89 f0                	mov    eax,esi
c0004212:	e8 4c e2 ff ff       	call   c0002463 <move_window>
c0004217:	85 c0                	test   eax,eax
c0004219:	0f 85 c6 00 00 00    	jne    c00042e5 <dir_find+0x19f>
c000421f:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004222:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004225:	84 c9                	test   cl,cl
c0004227:	0f 84 bd 00 00 00    	je     c00042ea <dir_find+0x1a4>
c000422d:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004230:	88 d0                	mov    al,dl
c0004232:	83 e0 3f             	and    eax,0x3f
c0004235:	80 f9 e5             	cmp    cl,0xe5
c0004238:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000423b:	0f 84 87 00 00 00    	je     c00042c8 <dir_find+0x182>
c0004241:	80 e2 08             	and    dl,0x8
c0004244:	74 06                	je     c000424c <dir_find+0x106>
c0004246:	3c 0f                	cmp    al,0xf
c0004248:	75 7e                	jne    c00042c8 <dir_find+0x182>
c000424a:	eb 04                	jmp    c0004250 <dir_find+0x10a>
c000424c:	3c 0f                	cmp    al,0xf
c000424e:	75 4c                	jne    c000429c <dir_find+0x156>
c0004250:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004254:	75 7e                	jne    c00042d4 <dir_find+0x18e>
c0004256:	f6 c1 40             	test   cl,0x40
c0004259:	74 12                	je     c000426d <dir_find+0x127>
c000425b:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000425e:	83 e1 bf             	and    ecx,0xffffffbf
c0004261:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004265:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004268:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000426b:	eb 06                	jmp    c0004273 <dir_find+0x12d>
c000426d:	89 f8                	mov    eax,edi
c000426f:	38 c8                	cmp    al,cl
c0004271:	75 5c                	jne    c00042cf <dir_find+0x189>
c0004273:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004277:	bf ff ff ff ff       	mov    edi,0xffffffff
c000427c:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000427f:	75 53                	jne    c00042d4 <dir_find+0x18e>
c0004281:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004285:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004288:	89 ea                	mov    edx,ebp
c000428a:	e8 f4 fd ff ff       	call   c0004083 <cmp_lfn>
c000428f:	85 c0                	test   eax,eax
c0004291:	74 41                	je     c00042d4 <dir_find+0x18e>
c0004293:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004297:	8d 79 ff             	lea    edi,[ecx-0x1]
c000429a:	eb 38                	jmp    c00042d4 <dir_find+0x18e>
c000429c:	89 f8                	mov    eax,edi
c000429e:	84 c0                	test   al,al
c00042a0:	75 0d                	jne    c00042af <dir_find+0x169>
c00042a2:	89 e8                	mov    eax,ebp
c00042a4:	e8 98 de ff ff       	call   c0002141 <sum_sfn>
c00042a9:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c00042ad:	74 52                	je     c0004301 <dir_find+0x1bb>
c00042af:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c00042b3:	75 13                	jne    c00042c8 <dir_find+0x182>
c00042b5:	8d 53 3c             	lea    edx,[ebx+0x3c]
c00042b8:	b9 0b 00 00 00       	mov    ecx,0xb
c00042bd:	89 e8                	mov    eax,ebp
c00042bf:	e8 60 da ff ff       	call   c0001d24 <mem_cmp>
c00042c4:	85 c0                	test   eax,eax
c00042c6:	74 39                	je     c0004301 <dir_find+0x1bb>
c00042c8:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042cf:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042d4:	31 d2                	xor    edx,edx
c00042d6:	89 d8                	mov    eax,ebx
c00042d8:	e8 5c f4 ff ff       	call   c0003739 <dir_next>
c00042dd:	85 c0                	test   eax,eax
c00042df:	0f 84 25 ff ff ff    	je     c000420a <dir_find+0xc4>
c00042e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00042e8:	eb 17                	jmp    c0004301 <dir_find+0x1bb>
c00042ea:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042f1:	eb 0e                	jmp    c0004301 <dir_find+0x1bb>
c00042f3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042f6:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042fb:	0f 85 75 fe ff ff    	jne    c0004176 <dir_find+0x30>
c0004301:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004304:	83 c4 1c             	add    esp,0x1c
c0004307:	5b                   	pop    ebx
c0004308:	5e                   	pop    esi
c0004309:	5f                   	pop    edi
c000430a:	5d                   	pop    ebp
c000430b:	c3                   	ret    

c000430c <dir_register>:
c000430c:	55                   	push   ebp
c000430d:	57                   	push   edi
c000430e:	56                   	push   esi
c000430f:	be 06 00 00 00       	mov    esi,0x6
c0004314:	53                   	push   ebx
c0004315:	83 ec 6c             	sub    esp,0x6c
c0004318:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c000431c:	0f 85 62 02 00 00    	jne    c0004584 <dir_register+0x278>
c0004322:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004324:	31 ff                	xor    edi,edi
c0004326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004329:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000432e:	74 03                	je     c0004333 <dir_register+0x27>
c0004330:	47                   	inc    edi
c0004331:	eb f6                	jmp    c0004329 <dir_register+0x1d>
c0004333:	89 c3                	mov    ebx,eax
c0004335:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004339:	0f 85 e1 00 00 00    	jne    c0004420 <dir_register+0x114>
c000433f:	83 c7 0e             	add    edi,0xe
c0004342:	b9 0f 00 00 00       	mov    ecx,0xf
c0004347:	89 f8                	mov    eax,edi
c0004349:	31 d2                	xor    edx,edx
c000434b:	f7 f1                	div    ecx
c000434d:	8d 50 02             	lea    edx,[eax+0x2]
c0004350:	89 c7                	mov    edi,eax
c0004352:	89 d8                	mov    eax,ebx
c0004354:	e8 12 f8 ff ff       	call   c0003b6b <dir_alloc>
c0004359:	89 c6                	mov    esi,eax
c000435b:	85 c0                	test   eax,eax
c000435d:	0f 85 21 02 00 00    	jne    c0004584 <dir_register+0x278>
c0004363:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004369:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000436c:	c1 e7 05             	shl    edi,0x5
c000436f:	29 f8                	sub    eax,edi
c0004371:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004374:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004377:	a8 04                	test   al,0x4
c0004379:	0f 84 91 00 00 00    	je     c0004410 <dir_register+0x104>
c000437f:	83 e0 fb             	and    eax,0xfffffffb
c0004382:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004385:	89 d8                	mov    eax,ebx
c0004387:	e8 25 ec ff ff       	call   c0002fb1 <fill_first_frag>
c000438c:	85 c0                	test   eax,eax
c000438e:	0f 85 ee 01 00 00    	jne    c0004582 <dir_register+0x276>
c0004394:	83 c9 ff             	or     ecx,0xffffffff
c0004397:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000439a:	89 d8                	mov    eax,ebx
c000439c:	e8 db eb ff ff       	call   c0002f7c <fill_last_frag>
c00043a1:	85 c0                	test   eax,eax
c00043a3:	0f 85 d9 01 00 00    	jne    c0004582 <dir_register+0x276>
c00043a9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00043ad:	74 61                	je     c0004410 <dir_register+0x104>
c00043af:	89 da                	mov    edx,ebx
c00043b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043b5:	e8 ea f5 ff ff       	call   c00039a4 <load_obj_xdir>
c00043ba:	85 c0                	test   eax,eax
c00043bc:	0f 85 c0 01 00 00    	jne    c0004582 <dir_register+0x276>
c00043c2:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043c6:	31 c9                	xor    ecx,ecx
c00043c8:	c1 e2 09             	shl    edx,0x9
c00043cb:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043ce:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043d4:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043d7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043da:	83 c0 38             	add    eax,0x38
c00043dd:	e8 1c d9 ff ff       	call   c0001cfe <st_qword>
c00043e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043e5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043e8:	83 c0 28             	add    eax,0x28
c00043eb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ee:	e8 0b d9 ff ff       	call   c0001cfe <st_qword>
c00043f3:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043f6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043f9:	83 c8 01             	or     eax,0x1
c00043fc:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043ff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004403:	e8 db f7 ff ff       	call   c0003be3 <store_xdir>
c0004408:	85 c0                	test   eax,eax
c000440a:	0f 85 72 01 00 00    	jne    c0004582 <dir_register+0x276>
c0004410:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004413:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004416:	e8 c1 fb ff ff       	call   c0003fdc <create_xdir>
c000441b:	e9 64 01 00 00       	jmp    c0004584 <dir_register+0x278>
c0004420:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004423:	b9 0c 00 00 00       	mov    ecx,0xc
c0004428:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000442c:	89 c2                	mov    edx,eax
c000442e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004432:	e8 cd d8 ff ff       	call   c0001d04 <mem_cpy>
c0004437:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c000443c:	74 58                	je     c0004496 <dir_register+0x18a>
c000443e:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004442:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000444a:	83 ec 0c             	sub    esp,0xc
c000444d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004450:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004454:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004458:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000445c:	e8 24 dc ff ff       	call   c0002085 <gen_numname>
c0004461:	89 d8                	mov    eax,ebx
c0004463:	e8 de fc ff ff       	call   c0004146 <dir_find>
c0004468:	83 c4 10             	add    esp,0x10
c000446b:	89 c6                	mov    esi,eax
c000446d:	85 c0                	test   eax,eax
c000446f:	75 15                	jne    c0004486 <dir_register+0x17a>
c0004471:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004475:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000447a:	75 ce                	jne    c000444a <dir_register+0x13e>
c000447c:	be 07 00 00 00       	mov    esi,0x7
c0004481:	e9 fe 00 00 00       	jmp    c0004584 <dir_register+0x278>
c0004486:	83 f8 04             	cmp    eax,0x4
c0004489:	0f 85 f5 00 00 00    	jne    c0004584 <dir_register+0x278>
c000448f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004493:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004496:	b9 01 00 00 00       	mov    ecx,0x1
c000449b:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00044a0:	74 0f                	je     c00044b1 <dir_register+0x1a5>
c00044a2:	b9 0d 00 00 00       	mov    ecx,0xd
c00044a7:	8d 47 0c             	lea    eax,[edi+0xc]
c00044aa:	31 d2                	xor    edx,edx
c00044ac:	f7 f1                	div    ecx
c00044ae:	8d 48 01             	lea    ecx,[eax+0x1]
c00044b1:	89 ca                	mov    edx,ecx
c00044b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044b7:	89 d8                	mov    eax,ebx
c00044b9:	e8 ad f6 ff ff       	call   c0003b6b <dir_alloc>
c00044be:	89 c6                	mov    esi,eax
c00044c0:	85 c0                	test   eax,eax
c00044c2:	0f 85 bc 00 00 00    	jne    c0004584 <dir_register+0x278>
c00044c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044cc:	49                   	dec    ecx
c00044cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044d1:	74 6a                	je     c000453d <dir_register+0x231>
c00044d3:	89 c8                	mov    eax,ecx
c00044d5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044d8:	c1 e0 05             	shl    eax,0x5
c00044db:	29 c2                	sub    edx,eax
c00044dd:	89 d8                	mov    eax,ebx
c00044df:	e8 fd ec ff ff       	call   c00031e1 <dir_sdi>
c00044e4:	89 c6                	mov    esi,eax
c00044e6:	85 c0                	test   eax,eax
c00044e8:	0f 85 96 00 00 00    	jne    c0004584 <dir_register+0x278>
c00044ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044f2:	e8 4a dc ff ff       	call   c0002141 <sum_sfn>
c00044f7:	0f b6 f8             	movzx  edi,al
c00044fa:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044fd:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004500:	89 e8                	mov    eax,ebp
c0004502:	e8 5c df ff ff       	call   c0002463 <move_window>
c0004507:	89 c6                	mov    esi,eax
c0004509:	85 c0                	test   eax,eax
c000450b:	75 77                	jne    c0004584 <dir_register+0x278>
c000450d:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004512:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004515:	83 ec 0c             	sub    esp,0xc
c0004518:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000451b:	57                   	push   edi
c000451c:	e8 e0 da ff ff       	call   c0002001 <put_lfn>
c0004521:	31 d2                	xor    edx,edx
c0004523:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004527:	89 d8                	mov    eax,ebx
c0004529:	e8 0b f2 ff ff       	call   c0003739 <dir_next>
c000452e:	83 c4 10             	add    esp,0x10
c0004531:	89 c6                	mov    esi,eax
c0004533:	85 c0                	test   eax,eax
c0004535:	75 4d                	jne    c0004584 <dir_register+0x278>
c0004537:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c000453b:	75 bd                	jne    c00044fa <dir_register+0x1ee>
c000453d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004540:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004543:	89 e8                	mov    eax,ebp
c0004545:	e8 19 df ff ff       	call   c0002463 <move_window>
c000454a:	89 c6                	mov    esi,eax
c000454c:	85 c0                	test   eax,eax
c000454e:	75 34                	jne    c0004584 <dir_register+0x278>
c0004550:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004553:	b9 20 00 00 00       	mov    ecx,0x20
c0004558:	31 d2                	xor    edx,edx
c000455a:	e8 ba d7 ff ff       	call   c0001d19 <mem_set>
c000455f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004562:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004566:	b9 0b 00 00 00       	mov    ecx,0xb
c000456b:	e8 94 d7 ff ff       	call   c0001d04 <mem_cpy>
c0004570:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004573:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004576:	83 e0 18             	and    eax,0x18
c0004579:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000457c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004580:	eb 02                	jmp    c0004584 <dir_register+0x278>
c0004582:	89 c6                	mov    esi,eax
c0004584:	83 c4 6c             	add    esp,0x6c
c0004587:	89 f0                	mov    eax,esi
c0004589:	5b                   	pop    ebx
c000458a:	5e                   	pop    esi
c000458b:	5f                   	pop    edi
c000458c:	5d                   	pop    ebp
c000458d:	c3                   	ret    

c000458e <sync_fs>:
c000458e:	56                   	push   esi
c000458f:	53                   	push   ebx
c0004590:	53                   	push   ebx
c0004591:	89 c3                	mov    ebx,eax
c0004593:	e8 37 de ff ff       	call   c00023cf <sync_window>
c0004598:	85 c0                	test   eax,eax
c000459a:	0f 85 b1 00 00 00    	jne    c0004651 <sync_fs+0xc3>
c00045a0:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00045a3:	0f 85 8e 00 00 00    	jne    c0004637 <sync_fs+0xa9>
c00045a9:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00045ad:	0f 85 84 00 00 00    	jne    c0004637 <sync_fs+0xa9>
c00045b3:	b9 00 02 00 00       	mov    ecx,0x200
c00045b8:	8d 73 54             	lea    esi,[ebx+0x54]
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	89 f0                	mov    eax,esi
c00045bf:	e8 55 d7 ff ff       	call   c0001d19 <mem_set>
c00045c4:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045ca:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045cf:	e8 23 d7 ff ff       	call   c0001cf7 <st_word>
c00045d4:	ba 52 52 61 41       	mov    edx,0x41615252
c00045d9:	89 f0                	mov    eax,esi
c00045db:	e8 1b d7 ff ff       	call   c0001cfb <st_dword>
c00045e0:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045e6:	ba 72 72 41 61       	mov    edx,0x61417272
c00045eb:	e8 0b d7 ff ff       	call   c0001cfb <st_dword>
c00045f0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045f3:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045f9:	e8 fd d6 ff ff       	call   c0001cfb <st_dword>
c00045fe:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004601:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004607:	e8 ef d6 ff ff       	call   c0001cfb <st_dword>
c000460c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000460f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004612:	83 c0 01             	add    eax,0x1
c0004615:	83 d2 00             	adc    edx,0x0
c0004618:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c000461b:	83 ec 0c             	sub    esp,0xc
c000461e:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004621:	6a 01                	push   0x1
c0004623:	52                   	push   edx
c0004624:	50                   	push   eax
c0004625:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004629:	56                   	push   esi
c000462a:	50                   	push   eax
c000462b:	e8 20 d6 ff ff       	call   c0001c50 <disk_write>
c0004630:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004634:	83 c4 20             	add    esp,0x20
c0004637:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000463b:	51                   	push   ecx
c000463c:	6a 00                	push   0x0
c000463e:	6a 00                	push   0x0
c0004640:	50                   	push   eax
c0004641:	e8 20 d6 ff ff       	call   c0001c66 <disk_ioctl>
c0004646:	83 c4 10             	add    esp,0x10
c0004649:	85 c0                	test   eax,eax
c000464b:	0f 95 c0             	setne  al
c000464e:	0f b6 c0             	movzx  eax,al
c0004651:	5a                   	pop    edx
c0004652:	5b                   	pop    ebx
c0004653:	5e                   	pop    esi
c0004654:	c3                   	ret    

c0004655 <create_partition>:
c0004655:	55                   	push   ebp
c0004656:	0f b6 c0             	movzx  eax,al
c0004659:	57                   	push   edi
c000465a:	56                   	push   esi
c000465b:	53                   	push   ebx
c000465c:	83 ec 60             	sub    esp,0x60
c000465f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004663:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004667:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000466b:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000466f:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004673:	50                   	push   eax
c0004674:	6a 01                	push   0x1
c0004676:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000467a:	e8 e7 d5 ff ff       	call   c0001c66 <disk_ioctl>
c000467f:	83 c4 10             	add    esp,0x10
c0004682:	85 c0                	test   eax,eax
c0004684:	74 0a                	je     c0004690 <create_partition+0x3b>
c0004686:	b8 01 00 00 00       	mov    eax,0x1
c000468b:	e9 67 05 00 00       	jmp    c0004bf7 <create_partition+0x5a2>
c0004690:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004694:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004698:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000469c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00046a0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00046a5:	0f 86 ed 03 00 00    	jbe    c0004a98 <create_partition+0x443>
c00046ab:	83 c0 df             	add    eax,0xffffffdf
c00046ae:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00046b6:	83 d2 ff             	adc    edx,0xffffffff
c00046b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046bd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046c9:	83 c0 bd             	add    eax,0xffffffbd
c00046cc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046d3:	83 d2 ff             	adc    edx,0xffffffff
c00046d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046da:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046de:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046e6:	be 22 00 00 00       	mov    esi,0x22
c00046eb:	31 ff                	xor    edi,edi
c00046ed:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046f5:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046fd:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004705:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004709:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000470f:	75 0e                	jne    c000471f <create_partition+0xca>
c0004711:	b9 00 02 00 00       	mov    ecx,0x200
c0004716:	31 d2                	xor    edx,edx
c0004718:	89 d8                	mov    eax,ebx
c000471a:	e8 fa d5 ff ff       	call   c0001d19 <mem_set>
c000471f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004723:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004727:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000472b:	0b 04 24             	or     eax,DWORD PTR [esp]
c000472e:	0f 84 23 01 00 00    	je     c0004857 <create_partition+0x202>
c0004734:	89 f0                	mov    eax,esi
c0004736:	89 fa                	mov    edx,edi
c0004738:	05 ff 07 00 00       	add    eax,0x7ff
c000473d:	83 d2 00             	adc    edx,0x0
c0004740:	89 c1                	mov    ecx,eax
c0004742:	89 d7                	mov    edi,edx
c0004744:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000474a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000474e:	89 ce                	mov    esi,ecx
c0004750:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004754:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004758:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000475c:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000475f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004763:	89 04 24             	mov    DWORD PTR [esp],eax
c0004766:	b8 64 00 00 00       	mov    eax,0x64
c000476b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000476e:	b8 00 00 00 00       	mov    eax,0x0
c0004773:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004777:	72 41                	jb     c00047ba <create_partition+0x165>
c0004779:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000477d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004781:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004785:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000478a:	01 c1                	add    ecx,eax
c000478c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004790:	f7 24 24             	mul    DWORD PTR [esp]
c0004793:	6a 00                	push   0x0
c0004795:	01 ca                	add    edx,ecx
c0004797:	6a 64                	push   0x64
c0004799:	52                   	push   edx
c000479a:	50                   	push   eax
c000479b:	e8 94 29 02 00       	call   c0027134 <__udivdi3>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	05 ff 07 00 00       	add    eax,0x7ff
c00047a8:	83 d2 00             	adc    edx,0x0
c00047ab:	89 c1                	mov    ecx,eax
c00047ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047b1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00047b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00047ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047c1:	01 f0                	add    eax,esi
c00047c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047c7:	11 fa                	adc    edx,edi
c00047c9:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047cd:	19 d1                	sbb    ecx,edx
c00047cf:	73 2e                	jae    c00047ff <create_partition+0x1aa>
c00047d1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047d5:	89 f8                	mov    eax,edi
c00047d7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047de:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047e2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047ea:	73 6b                	jae    c0004857 <create_partition+0x202>
c00047ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047f4:	29 f0                	sub    eax,esi
c00047f6:	19 fa                	sbb    edx,edi
c00047f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00047fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004803:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004806:	74 4f                	je     c0004857 <create_partition+0x202>
c0004808:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c000480b:	b9 10 00 00 00       	mov    ecx,0x10
c0004810:	ba d0 9c 02 c0       	mov    edx,0xc0029cd0
c0004815:	e8 ea d4 ff ff       	call   c0001d04 <mem_cpy>
c000481a:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c000481e:	b9 10 00 00 00       	mov    ecx,0x10
c0004823:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004827:	e8 2c db ff ff       	call   c0002358 <make_rand>
c000482c:	89 f2                	mov    edx,esi
c000482e:	89 f9                	mov    ecx,edi
c0004830:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004834:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004838:	e8 c1 d4 ff ff       	call   c0001cfe <st_qword>
c000483d:	03 34 24             	add    esi,DWORD PTR [esp]
c0004840:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004844:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004848:	89 f2                	mov    edx,esi
c000484a:	89 f9                	mov    ecx,edi
c000484c:	83 c2 ff             	add    edx,0xffffffff
c000484f:	83 d1 ff             	adc    ecx,0xffffffff
c0004852:	e8 a7 d4 ff ff       	call   c0001cfe <st_qword>
c0004857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000485b:	83 e8 80             	sub    eax,0xffffff80
c000485e:	89 c5                	mov    ebp,eax
c0004860:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004864:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000486a:	75 6b                	jne    c00048d7 <create_partition+0x282>
c000486c:	45                   	inc    ebp
c000486d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004871:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004876:	e8 39 da ff ff       	call   c00022b4 <crc32>
c000487b:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004881:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004885:	75 e5                	jne    c000486c <create_partition+0x217>
c0004887:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000488b:	31 d2                	xor    edx,edx
c000488d:	83 ec 0c             	sub    esp,0xc
c0004890:	c1 ed 09             	shr    ebp,0x9
c0004893:	6a 01                	push   0x1
c0004895:	8d 45 02             	lea    eax,[ebp+0x2]
c0004898:	52                   	push   edx
c0004899:	50                   	push   eax
c000489a:	53                   	push   ebx
c000489b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000489f:	e8 ac d3 ff ff       	call   c0001c50 <disk_write>
c00048a4:	83 c4 20             	add    esp,0x20
c00048a7:	85 c0                	test   eax,eax
c00048a9:	0f 85 d7 fd ff ff    	jne    c0004686 <create_partition+0x31>
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	31 d2                	xor    edx,edx
c00048b4:	6a 01                	push   0x1
c00048b6:	89 e8                	mov    eax,ebp
c00048b8:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048bc:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048c0:	52                   	push   edx
c00048c1:	50                   	push   eax
c00048c2:	53                   	push   ebx
c00048c3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048c7:	e8 84 d3 ff ff       	call   c0001c50 <disk_write>
c00048cc:	83 c4 20             	add    esp,0x20
c00048cf:	85 c0                	test   eax,eax
c00048d1:	0f 85 af fd ff ff    	jne    c0004686 <create_partition+0x31>
c00048d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048df:	3d 00 40 00 00       	cmp    eax,0x4000
c00048e4:	74 0d                	je     c00048f3 <create_partition+0x29e>
c00048e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ee:	e9 12 fe ff ff       	jmp    c0004705 <create_partition+0xb0>
c00048f3:	31 d2                	xor    edx,edx
c00048f5:	b9 00 02 00 00       	mov    ecx,0x200
c00048fa:	89 d8                	mov    eax,ebx
c00048fc:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048ff:	e8 15 d4 ff ff       	call   c0001d19 <mem_set>
c0004904:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004907:	b9 10 00 00 00       	mov    ecx,0x10
c000490c:	ba c0 9b 02 c0       	mov    edx,0xc0029bc0
c0004911:	89 d8                	mov    eax,ebx
c0004913:	e8 ec d3 ff ff       	call   c0001d04 <mem_cpy>
c0004918:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000491c:	8d 43 58             	lea    eax,[ebx+0x58]
c000491f:	f7 d2                	not    edx
c0004921:	e8 d5 d3 ff ff       	call   c0001cfb <st_dword>
c0004926:	8d 43 18             	lea    eax,[ebx+0x18]
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	89 04 24             	mov    DWORD PTR [esp],eax
c000492e:	ba 01 00 00 00       	mov    edx,0x1
c0004933:	e8 c6 d3 ff ff       	call   c0001cfe <st_qword>
c0004938:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000493c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004940:	83 c2 ff             	add    edx,0xffffffff
c0004943:	89 e8                	mov    eax,ebp
c0004945:	83 d1 ff             	adc    ecx,0xffffffff
c0004948:	e8 b1 d3 ff ff       	call   c0001cfe <st_qword>
c000494d:	31 c9                	xor    ecx,ecx
c000494f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004952:	ba 22 00 00 00       	mov    edx,0x22
c0004957:	e8 a2 d3 ff ff       	call   c0001cfe <st_qword>
c000495c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004960:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004964:	83 c2 de             	add    edx,0xffffffde
c0004967:	8d 43 30             	lea    eax,[ebx+0x30]
c000496a:	83 d1 ff             	adc    ecx,0xffffffff
c000496d:	31 f6                	xor    esi,esi
c000496f:	e8 8a d3 ff ff       	call   c0001cfe <st_qword>
c0004974:	8d 43 54             	lea    eax,[ebx+0x54]
c0004977:	ba 80 00 00 00       	mov    edx,0x80
c000497c:	e8 7a d3 ff ff       	call   c0001cfb <st_dword>
c0004981:	8d 43 50             	lea    eax,[ebx+0x50]
c0004984:	ba 80 00 00 00       	mov    edx,0x80
c0004989:	e8 6d d3 ff ff       	call   c0001cfb <st_dword>
c000498e:	ba 02 00 00 00       	mov    edx,0x2
c0004993:	89 f8                	mov    eax,edi
c0004995:	e8 61 d3 ff ff       	call   c0001cfb <st_dword>
c000499a:	8d 53 38             	lea    edx,[ebx+0x38]
c000499d:	b9 10 00 00 00       	mov    ecx,0x10
c00049a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00049a6:	e8 ad d9 ff ff       	call   c0002358 <make_rand>
c00049ab:	83 c8 ff             	or     eax,0xffffffff
c00049ae:	46                   	inc    esi
c00049af:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00049b4:	e8 fb d8 ff ff       	call   c00022b4 <crc32>
c00049b9:	83 fe 5c             	cmp    esi,0x5c
c00049bc:	75 f0                	jne    c00049ae <create_partition+0x359>
c00049be:	f7 d0                	not    eax
c00049c0:	8d 73 10             	lea    esi,[ebx+0x10]
c00049c3:	89 c2                	mov    edx,eax
c00049c5:	89 f0                	mov    eax,esi
c00049c7:	e8 2f d3 ff ff       	call   c0001cfb <st_dword>
c00049cc:	83 ec 0c             	sub    esp,0xc
c00049cf:	6a 01                	push   0x1
c00049d1:	6a 00                	push   0x0
c00049d3:	6a 01                	push   0x1
c00049d5:	53                   	push   ebx
c00049d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049da:	e8 71 d2 ff ff       	call   c0001c50 <disk_write>
c00049df:	83 c4 20             	add    esp,0x20
c00049e2:	85 c0                	test   eax,eax
c00049e4:	0f 85 9c fc ff ff    	jne    c0004686 <create_partition+0x31>
c00049ea:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ee:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049f2:	83 c2 ff             	add    edx,0xffffffff
c00049f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049f8:	83 d1 ff             	adc    ecx,0xffffffff
c00049fb:	e8 fe d2 ff ff       	call   c0001cfe <st_qword>
c0004a00:	ba 01 00 00 00       	mov    edx,0x1
c0004a05:	31 c9                	xor    ecx,ecx
c0004a07:	89 e8                	mov    eax,ebp
c0004a09:	e8 f0 d2 ff ff       	call   c0001cfe <st_qword>
c0004a0e:	89 f8                	mov    eax,edi
c0004a10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004a14:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004a18:	31 ff                	xor    edi,edi
c0004a1a:	e8 df d2 ff ff       	call   c0001cfe <st_qword>
c0004a1f:	89 f0                	mov    eax,esi
c0004a21:	31 d2                	xor    edx,edx
c0004a23:	e8 d3 d2 ff ff       	call   c0001cfb <st_dword>
c0004a28:	83 c8 ff             	or     eax,0xffffffff
c0004a2b:	47                   	inc    edi
c0004a2c:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a31:	e8 7e d8 ff ff       	call   c00022b4 <crc32>
c0004a36:	83 ff 5c             	cmp    edi,0x5c
c0004a39:	75 f0                	jne    c0004a2b <create_partition+0x3d6>
c0004a3b:	f7 d0                	not    eax
c0004a3d:	89 c2                	mov    edx,eax
c0004a3f:	89 f0                	mov    eax,esi
c0004a41:	e8 b5 d2 ff ff       	call   c0001cfb <st_dword>
c0004a46:	83 ec 0c             	sub    esp,0xc
c0004a49:	6a 01                	push   0x1
c0004a4b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a4f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a53:	83 c0 ff             	add    eax,0xffffffff
c0004a56:	83 d2 ff             	adc    edx,0xffffffff
c0004a59:	52                   	push   edx
c0004a5a:	50                   	push   eax
c0004a5b:	53                   	push   ebx
c0004a5c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a60:	e8 eb d1 ff ff       	call   c0001c50 <disk_write>
c0004a65:	83 c4 20             	add    esp,0x20
c0004a68:	85 c0                	test   eax,eax
c0004a6a:	0f 85 16 fc ff ff    	jne    c0004686 <create_partition+0x31>
c0004a70:	31 d2                	xor    edx,edx
c0004a72:	89 d8                	mov    eax,ebx
c0004a74:	b9 00 02 00 00       	mov    ecx,0x200
c0004a79:	e8 9b d2 ff ff       	call   c0001d19 <mem_set>
c0004a7e:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a84:	b9 10 00 00 00       	mov    ecx,0x10
c0004a89:	ba d0 9b 02 c0       	mov    edx,0xc0029bd0
c0004a8e:	e8 71 d2 ff ff       	call   c0001d04 <mem_cpy>
c0004a93:	e9 21 01 00 00       	jmp    c0004bb9 <create_partition+0x564>
c0004a98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a9c:	b9 05 00 00 00       	mov    ecx,0x5
c0004aa1:	89 04 24             	mov    DWORD PTR [esp],eax
c0004aa4:	bf 08 00 00 00       	mov    edi,0x8
c0004aa9:	89 f8                	mov    eax,edi
c0004aab:	31 d2                	xor    edx,edx
c0004aad:	0f b6 f0             	movzx  esi,al
c0004ab0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ab3:	f7 f6                	div    esi
c0004ab5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004aba:	76 0a                	jbe    c0004ac6 <create_partition+0x471>
c0004abc:	d1 e7                	shl    edi,1
c0004abe:	49                   	dec    ecx
c0004abf:	75 e8                	jne    c0004aa9 <create_partition+0x454>
c0004ac1:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004ac6:	b9 00 02 00 00       	mov    ecx,0x200
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	89 d8                	mov    eax,ebx
c0004acf:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ad5:	e8 3f d2 ff ff       	call   c0001d19 <mem_set>
c0004ada:	b9 64 00 00 00       	mov    ecx,0x64
c0004adf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ae2:	31 d2                	xor    edx,edx
c0004ae4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004aec:	f7 f1                	div    ecx
c0004aee:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004af3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004af7:	89 f8                	mov    eax,edi
c0004af9:	0f b6 c0             	movzx  eax,al
c0004afc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004b00:	e9 80 00 00 00       	jmp    c0004b85 <create_partition+0x530>
c0004b05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b08:	29 cf                	sub    edi,ecx
c0004b0a:	89 ca                	mov    edx,ecx
c0004b0c:	89 f0                	mov    eax,esi
c0004b0e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b13:	e8 e3 d1 ff ff       	call   c0001cfb <st_dword>
c0004b18:	8d 46 04             	lea    eax,[esi+0x4]
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	83 c6 10             	add    esi,0x10
c0004b20:	e8 d6 d1 ff ff       	call   c0001cfb <st_dword>
c0004b25:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b29:	31 d2                	xor    edx,edx
c0004b2b:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b2e:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b32:	89 c8                	mov    eax,ecx
c0004b34:	01 f9                	add    ecx,edi
c0004b36:	f7 f5                	div    ebp
c0004b38:	89 d5                	mov    ebp,edx
c0004b3a:	31 d2                	xor    edx,edx
c0004b3c:	45                   	inc    ebp
c0004b3d:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b41:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b44:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b47:	89 c2                	mov    edx,eax
c0004b49:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b4c:	c1 ea 02             	shr    edx,0x2
c0004b4f:	83 e2 c0             	and    edx,0xffffffc0
c0004b52:	09 ea                	or     edx,ebp
c0004b54:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b59:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b5c:	31 d2                	xor    edx,edx
c0004b5e:	f7 f5                	div    ebp
c0004b60:	89 d7                	mov    edi,edx
c0004b62:	31 d2                	xor    edx,edx
c0004b64:	47                   	inc    edi
c0004b65:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b69:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b6c:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b6f:	89 c5                	mov    ebp,eax
c0004b71:	c1 ed 02             	shr    ebp,0x2
c0004b74:	83 e5 c0             	and    ebp,0xffffffc0
c0004b77:	09 ef                	or     edi,ebp
c0004b79:	89 fa                	mov    edx,edi
c0004b7b:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b7e:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b83:	74 34                	je     c0004bb9 <create_partition+0x564>
c0004b85:	85 c9                	test   ecx,ecx
c0004b87:	74 30                	je     c0004bb9 <create_partition+0x564>
c0004b89:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b8c:	76 2b                	jbe    c0004bb9 <create_partition+0x564>
c0004b8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b92:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b96:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b99:	83 ff 64             	cmp    edi,0x64
c0004b9c:	76 4b                	jbe    c0004be9 <create_partition+0x594>
c0004b9e:	89 f8                	mov    eax,edi
c0004ba0:	01 c8                	add    eax,ecx
c0004ba2:	0f 82 5d ff ff ff    	jb     c0004b05 <create_partition+0x4b0>
c0004ba8:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004bab:	0f 87 54 ff ff ff    	ja     c0004b05 <create_partition+0x4b0>
c0004bb1:	85 ff                	test   edi,edi
c0004bb3:	0f 85 51 ff ff ff    	jne    c0004b0a <create_partition+0x4b5>
c0004bb9:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004bbf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004bc4:	e8 2e d1 ff ff       	call   c0001cf7 <st_word>
c0004bc9:	83 ec 0c             	sub    esp,0xc
c0004bcc:	6a 01                	push   0x1
c0004bce:	6a 00                	push   0x0
c0004bd0:	6a 00                	push   0x0
c0004bd2:	53                   	push   ebx
c0004bd3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bd7:	e8 74 d0 ff ff       	call   c0001c50 <disk_write>
c0004bdc:	83 c4 20             	add    esp,0x20
c0004bdf:	85 c0                	test   eax,eax
c0004be1:	0f 95 c0             	setne  al
c0004be4:	0f b6 c0             	movzx  eax,al
c0004be7:	eb 0e                	jmp    c0004bf7 <create_partition+0x5a2>
c0004be9:	74 07                	je     c0004bf2 <create_partition+0x59d>
c0004beb:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bf0:	eb ac                	jmp    c0004b9e <create_partition+0x549>
c0004bf2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bf5:	eb a7                	jmp    c0004b9e <create_partition+0x549>
c0004bf7:	83 c4 5c             	add    esp,0x5c
c0004bfa:	5b                   	pop    ebx
c0004bfb:	5e                   	pop    esi
c0004bfc:	5f                   	pop    edi
c0004bfd:	5d                   	pop    ebp
c0004bfe:	c3                   	ret    

c0004bff <get_fileinfo>:
c0004bff:	55                   	push   ebp
c0004c00:	57                   	push   edi
c0004c01:	56                   	push   esi
c0004c02:	53                   	push   ebx
c0004c03:	83 ec 1c             	sub    esp,0x1c
c0004c06:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c08:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004c0c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004c10:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004c13:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004c16:	0f 84 dc 01 00 00    	je     c0004df8 <get_fileinfo+0x1f9>
c0004c1c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c1f:	75 0f                	jne    c0004c30 <get_fileinfo+0x31>
c0004c21:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c24:	83 c4 1c             	add    esp,0x1c
c0004c27:	5b                   	pop    ebx
c0004c28:	5e                   	pop    esi
c0004c29:	5f                   	pop    edi
c0004c2a:	5d                   	pop    ebp
c0004c2b:	e9 58 d5 ff ff       	jmp    c0002188 <get_xfileinfo>
c0004c30:	89 d3                	mov    ebx,edx
c0004c32:	89 c6                	mov    esi,eax
c0004c34:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c38:	74 6a                	je     c0004ca4 <get_fileinfo+0xa5>
c0004c3a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c42:	31 ed                	xor    ebp,ebp
c0004c44:	31 ff                	xor    edi,edi
c0004c46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c4e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c51:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c55:	66 85 d2             	test   dx,dx
c0004c58:	74 3e                	je     c0004c98 <get_fileinfo+0x99>
c0004c5a:	66 85 ed             	test   bp,bp
c0004c5d:	75 0c                	jne    c0004c6b <get_fileinfo+0x6c>
c0004c5f:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c65:	66 3d ff 07          	cmp    ax,0x7ff
c0004c69:	76 22                	jbe    c0004c8d <get_fileinfo+0x8e>
c0004c6b:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c70:	89 e8                	mov    eax,ebp
c0004c72:	29 f9                	sub    ecx,edi
c0004c74:	c1 e0 10             	shl    eax,0x10
c0004c77:	09 d0                	or     eax,edx
c0004c79:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c7d:	e8 a3 d1 ff ff       	call   c0001e25 <put_utf>
c0004c82:	84 c0                	test   al,al
c0004c84:	74 10                	je     c0004c96 <get_fileinfo+0x97>
c0004c86:	0f b6 c0             	movzx  eax,al
c0004c89:	31 d2                	xor    edx,edx
c0004c8b:	01 c7                	add    edi,eax
c0004c8d:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c92:	89 d5                	mov    ebp,edx
c0004c94:	eb b0                	jmp    c0004c46 <get_fileinfo+0x47>
c0004c96:	31 ff                	xor    edi,edi
c0004c98:	66 85 ed             	test   bp,bp
c0004c9b:	74 02                	je     c0004c9f <get_fileinfo+0xa0>
c0004c9d:	31 ff                	xor    edi,edi
c0004c9f:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004ca4:	31 ff                	xor    edi,edi
c0004ca6:	31 c9                	xor    ecx,ecx
c0004ca8:	83 f9 0a             	cmp    ecx,0xa
c0004cab:	0f 87 ad 00 00 00    	ja     c0004d5e <get_fileinfo+0x15f>
c0004cb1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb4:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004cb7:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004cbb:	66 83 fa 20          	cmp    dx,0x20
c0004cbf:	0f 84 92 00 00 00    	je     c0004d57 <get_fileinfo+0x158>
c0004cc5:	66 83 fa 05          	cmp    dx,0x5
c0004cc9:	75 05                	jne    c0004cd0 <get_fileinfo+0xd1>
c0004ccb:	ba e5 00 00 00       	mov    edx,0xe5
c0004cd0:	83 ff 0b             	cmp    edi,0xb
c0004cd3:	77 0b                	ja     c0004ce0 <get_fileinfo+0xe1>
c0004cd5:	83 fd 09             	cmp    ebp,0x9
c0004cd8:	75 06                	jne    c0004ce0 <get_fileinfo+0xe1>
c0004cda:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cdf:	47                   	inc    edi
c0004ce0:	0f b7 c2             	movzx  eax,dx
c0004ce3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce7:	e8 6d d0 ff ff       	call   c0001d59 <dbc_1st>
c0004cec:	85 c0                	test   eax,eax
c0004cee:	74 2f                	je     c0004d1f <get_fileinfo+0x120>
c0004cf0:	83 fd 08             	cmp    ebp,0x8
c0004cf3:	74 2a                	je     c0004d1f <get_fileinfo+0x120>
c0004cf5:	83 fd 0b             	cmp    ebp,0xb
c0004cf8:	74 25                	je     c0004d1f <get_fileinfo+0x120>
c0004cfa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cfd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004d01:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004d05:	e8 52 d0 ff ff       	call   c0001d5c <dbc_2nd>
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 11                	je     c0004d1f <get_fileinfo+0x120>
c0004d0e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004d12:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004d17:	c1 e2 08             	shl    edx,0x8
c0004d1a:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d1d:	09 c2                	or     edx,eax
c0004d1f:	0f b7 d2             	movzx  edx,dx
c0004d22:	50                   	push   eax
c0004d23:	50                   	push   eax
c0004d24:	68 b5 01 00 00       	push   0x1b5
c0004d29:	52                   	push   edx
c0004d2a:	e8 46 38 00 00       	call   c0008575 <ff_oem2uni>
c0004d2f:	83 c4 10             	add    esp,0x10
c0004d32:	66 85 c0             	test   ax,ax
c0004d35:	75 04                	jne    c0004d3b <get_fileinfo+0x13c>
c0004d37:	31 ff                	xor    edi,edi
c0004d39:	eb 23                	jmp    c0004d5e <get_fileinfo+0x15f>
c0004d3b:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d40:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d44:	29 f9                	sub    ecx,edi
c0004d46:	0f b7 c0             	movzx  eax,ax
c0004d49:	e8 d7 d0 ff ff       	call   c0001e25 <put_utf>
c0004d4e:	84 c0                	test   al,al
c0004d50:	74 e5                	je     c0004d37 <get_fileinfo+0x138>
c0004d52:	0f b6 c0             	movzx  eax,al
c0004d55:	01 c7                	add    edi,eax
c0004d57:	89 e9                	mov    ecx,ebp
c0004d59:	e9 4a ff ff ff       	jmp    c0004ca8 <get_fileinfo+0xa9>
c0004d5e:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d63:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d67:	75 54                	jne    c0004dbd <get_fileinfo+0x1be>
c0004d69:	85 ff                	test   edi,edi
c0004d6b:	75 0b                	jne    c0004d78 <get_fileinfo+0x179>
c0004d6d:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d71:	ba 01 00 00 00       	mov    edx,0x1
c0004d76:	eb 33                	jmp    c0004dab <get_fileinfo+0x1ac>
c0004d78:	b1 08                	mov    cl,0x8
c0004d7a:	31 d2                	xor    edx,edx
c0004d7c:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d82:	84 c0                	test   al,al
c0004d84:	74 25                	je     c0004dab <get_fileinfo+0x1ac>
c0004d86:	66 83 f8 2e          	cmp    ax,0x2e
c0004d8a:	74 16                	je     c0004da2 <get_fileinfo+0x1a3>
c0004d8c:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d8f:	66 83 ff 19          	cmp    di,0x19
c0004d93:	77 0f                	ja     c0004da4 <get_fileinfo+0x1a5>
c0004d95:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d98:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d9b:	74 07                	je     c0004da4 <get_fileinfo+0x1a5>
c0004d9d:	83 c0 20             	add    eax,0x20
c0004da0:	eb 02                	jmp    c0004da4 <get_fileinfo+0x1a5>
c0004da2:	b1 10                	mov    cl,0x10
c0004da4:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004da8:	42                   	inc    edx
c0004da9:	eb d1                	jmp    c0004d7c <get_fileinfo+0x17d>
c0004dab:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004db0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db3:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004db7:	75 04                	jne    c0004dbd <get_fileinfo+0x1be>
c0004db9:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004dbd:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc0:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004dc3:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004dc6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc9:	83 c0 1c             	add    eax,0x1c
c0004dcc:	e8 c1 ce ff ff       	call   c0001c92 <ld_dword>
c0004dd1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dd8:	89 03                	mov    DWORD PTR [ebx],eax
c0004dda:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ddd:	83 c0 16             	add    eax,0x16
c0004de0:	e8 a0 ce ff ff       	call   c0001c85 <ld_word>
c0004de5:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004de9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dec:	83 c0 18             	add    eax,0x18
c0004def:	e8 91 ce ff ff       	call   c0001c85 <ld_word>
c0004df4:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004df8:	83 c4 1c             	add    esp,0x1c
c0004dfb:	5b                   	pop    ebx
c0004dfc:	5e                   	pop    esi
c0004dfd:	5f                   	pop    edi
c0004dfe:	5d                   	pop    ebp
c0004dff:	c3                   	ret    

c0004e00 <ld_clust.isra.0>:
c0004e00:	56                   	push   esi
c0004e01:	89 c6                	mov    esi,eax
c0004e03:	53                   	push   ebx
c0004e04:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004e07:	89 d3                	mov    ebx,edx
c0004e09:	e8 77 ce ff ff       	call   c0001c85 <ld_word>
c0004e0e:	0f b7 c8             	movzx  ecx,ax
c0004e11:	89 f0                	mov    eax,esi
c0004e13:	3c 03                	cmp    al,0x3
c0004e15:	75 0d                	jne    c0004e24 <ld_clust.isra.0+0x24>
c0004e17:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e1a:	e8 66 ce ff ff       	call   c0001c85 <ld_word>
c0004e1f:	c1 e0 10             	shl    eax,0x10
c0004e22:	09 c1                	or     ecx,eax
c0004e24:	89 c8                	mov    eax,ecx
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <st_clust.isra.1>:
c0004e29:	56                   	push   esi
c0004e2a:	89 c6                	mov    esi,eax
c0004e2c:	53                   	push   ebx
c0004e2d:	89 d3                	mov    ebx,edx
c0004e2f:	0f b7 d1             	movzx  edx,cx
c0004e32:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e35:	e8 bd ce ff ff       	call   c0001cf7 <st_word>
c0004e3a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e3d:	75 0f                	jne    c0004e4e <st_clust.isra.1+0x25>
c0004e3f:	c1 e9 10             	shr    ecx,0x10
c0004e42:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e45:	89 ca                	mov    edx,ecx
c0004e47:	5b                   	pop    ebx
c0004e48:	5e                   	pop    esi
c0004e49:	e9 a9 ce ff ff       	jmp    c0001cf7 <st_word>
c0004e4e:	5b                   	pop    ebx
c0004e4f:	5e                   	pop    esi
c0004e50:	c3                   	ret    

c0004e51 <init_alloc_info.isra.2>:
c0004e51:	56                   	push   esi
c0004e52:	53                   	push   ebx
c0004e53:	89 c6                	mov    esi,eax
c0004e55:	89 d3                	mov    ebx,edx
c0004e57:	51                   	push   ecx
c0004e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e5a:	83 c0 34             	add    eax,0x34
c0004e5d:	e8 30 ce ff ff       	call   c0001c92 <ld_dword>
c0004e62:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e65:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e67:	83 c0 38             	add    eax,0x38
c0004e6a:	e8 3b ce ff ff       	call   c0001caa <ld_qword>
c0004e6f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e72:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e75:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e77:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e7a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e81:	83 e0 02             	and    eax,0x2
c0004e84:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e87:	5b                   	pop    ebx
c0004e88:	5b                   	pop    ebx
c0004e89:	5e                   	pop    esi
c0004e8a:	c3                   	ret    

c0004e8b <follow_path>:
c0004e8b:	56                   	push   esi
c0004e8c:	53                   	push   ebx
c0004e8d:	89 c3                	mov    ebx,eax
c0004e8f:	83 ec 14             	sub    esp,0x14
c0004e92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e96:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9c:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e9e:	80 fa 5c             	cmp    dl,0x5c
c0004ea1:	75 07                	jne    c0004eaa <follow_path+0x1f>
c0004ea3:	40                   	inc    eax
c0004ea4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ea8:	eb ee                	jmp    c0004e98 <follow_path+0xd>
c0004eaa:	80 fa 2f             	cmp    dl,0x2f
c0004ead:	74 f4                	je     c0004ea3 <follow_path+0x18>
c0004eaf:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004eb6:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ebd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ec0:	77 52                	ja     c0004f14 <follow_path+0x89>
c0004ec2:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ec6:	31 d2                	xor    edx,edx
c0004ec8:	89 d8                	mov    eax,ebx
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <dir_sdi>
c0004ecf:	eb 7c                	jmp    c0004f4d <follow_path+0xc2>
c0004ed1:	89 d8                	mov    eax,ebx
c0004ed3:	e8 6e f2 ff ff       	call   c0004146 <dir_find>
c0004ed8:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004edb:	85 c0                	test   eax,eax
c0004edd:	75 46                	jne    c0004f25 <follow_path+0x9a>
c0004edf:	80 e2 04             	and    dl,0x4
c0004ee2:	75 69                	jne    c0004f4d <follow_path+0xc2>
c0004ee4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ee8:	74 5e                	je     c0004f48 <follow_path+0xbd>
c0004eea:	8a 06                	mov    al,BYTE PTR [esi]
c0004eec:	3c 04                	cmp    al,0x4
c0004eee:	75 41                	jne    c0004f31 <follow_path+0xa6>
c0004ef0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ef3:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ef7:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004efa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004efd:	30 c0                	xor    al,al
c0004eff:	09 d0                	or     eax,edx
c0004f01:	89 da                	mov    edx,ebx
c0004f03:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f06:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004f09:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f0c:	8d 46 10             	lea    eax,[esi+0x10]
c0004f0f:	e8 3d ff ff ff       	call   c0004e51 <init_alloc_info.isra.2>
c0004f14:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004f18:	89 d8                	mov    eax,ebx
c0004f1a:	e8 a9 ed ff ff       	call   c0003cc8 <create_name>
c0004f1f:	85 c0                	test   eax,eax
c0004f21:	74 ae                	je     c0004ed1 <follow_path+0x46>
c0004f23:	eb 28                	jmp    c0004f4d <follow_path+0xc2>
c0004f25:	83 f8 04             	cmp    eax,0x4
c0004f28:	75 23                	jne    c0004f4d <follow_path+0xc2>
c0004f2a:	80 e2 04             	and    dl,0x4
c0004f2d:	74 19                	je     c0004f48 <follow_path+0xbd>
c0004f2f:	eb 1c                	jmp    c0004f4d <follow_path+0xc2>
c0004f31:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f34:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f3a:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f3e:	e8 bd fe ff ff       	call   c0004e00 <ld_clust.isra.0>
c0004f43:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f46:	eb cc                	jmp    c0004f14 <follow_path+0x89>
c0004f48:	b8 05 00 00 00       	mov    eax,0x5
c0004f4d:	83 c4 14             	add    esp,0x14
c0004f50:	5b                   	pop    ebx
c0004f51:	5e                   	pop    esi
c0004f52:	c3                   	ret    

c0004f53 <f_mount>:
c0004f53:	53                   	push   ebx
c0004f54:	83 ec 18             	sub    esp,0x18
c0004f57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f67:	e8 fb d2 ff ff       	call   c0002267 <get_ldnumber>
c0004f6c:	89 c2                	mov    edx,eax
c0004f6e:	b8 0b 00 00 00       	mov    eax,0xb
c0004f73:	85 d2                	test   edx,edx
c0004f75:	78 39                	js     c0004fb0 <f_mount+0x5d>
c0004f77:	8b 04 95 60 ed 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd12a0]
c0004f7e:	85 c0                	test   eax,eax
c0004f80:	74 03                	je     c0004f85 <f_mount+0x32>
c0004f82:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f89:	85 c0                	test   eax,eax
c0004f8b:	74 03                	je     c0004f90 <f_mount+0x3d>
c0004f8d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f94:	89 04 95 60 ed 02 c0 	mov    DWORD PTR [edx*4-0x3ffd12a0],eax
c0004f9b:	31 c0                	xor    eax,eax
c0004f9d:	84 db                	test   bl,bl
c0004f9f:	74 0f                	je     c0004fb0 <f_mount+0x5d>
c0004fa1:	31 c9                	xor    ecx,ecx
c0004fa3:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fab:	e8 65 d7 ff ff       	call   c0002715 <mount_volume>
c0004fb0:	83 c4 18             	add    esp,0x18
c0004fb3:	5b                   	pop    ebx
c0004fb4:	c3                   	ret    

c0004fb5 <f_open>:
c0004fb5:	55                   	push   ebp
c0004fb6:	bd 09 00 00 00       	mov    ebp,0x9
c0004fbb:	57                   	push   edi
c0004fbc:	56                   	push   esi
c0004fbd:	53                   	push   ebx
c0004fbe:	83 ec 7c             	sub    esp,0x7c
c0004fc1:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fc8:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fcf:	85 db                	test   ebx,ebx
c0004fd1:	0f 84 10 04 00 00    	je     c00053e7 <f_open+0x432>
c0004fd7:	89 fe                	mov    esi,edi
c0004fd9:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fdd:	83 e6 3f             	and    esi,0x3f
c0004fe0:	89 f0                	mov    eax,esi
c0004fe2:	0f b6 c8             	movzx  ecx,al
c0004fe5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fec:	e8 24 d7 ff ff       	call   c0002715 <mount_volume>
c0004ff1:	89 c5                	mov    ebp,eax
c0004ff3:	85 c0                	test   eax,eax
c0004ff5:	0f 85 e6 03 00 00    	jne    c00053e1 <f_open+0x42c>
c0004ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fff:	bd 11 00 00 00       	mov    ebp,0x11
c0005004:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005008:	83 ec 0c             	sub    esp,0xc
c000500b:	68 60 04 00 00       	push   0x460
c0005010:	e8 a3 34 00 00       	call   c00084b8 <ff_memalloc>
c0005015:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005019:	83 c4 10             	add    esp,0x10
c000501c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005021:	0f 84 c0 03 00 00    	je     c00053e7 <f_open+0x432>
c0005027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000502b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000502f:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005035:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005038:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000503b:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005042:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005046:	e8 40 fe ff ff       	call   c0004e8b <follow_path>
c000504b:	89 c5                	mov    ebp,eax
c000504d:	85 c0                	test   eax,eax
c000504f:	75 0c                	jne    c000505d <f_open+0xa8>
c0005051:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005056:	79 05                	jns    c000505d <f_open+0xa8>
c0005058:	bd 06 00 00 00       	mov    ebp,0x6
c000505d:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005063:	0f 84 84 01 00 00    	je     c00051ed <f_open+0x238>
c0005069:	85 ed                	test   ebp,ebp
c000506b:	74 20                	je     c000508d <f_open+0xd8>
c000506d:	83 fd 04             	cmp    ebp,0x4
c0005070:	0f 85 58 03 00 00    	jne    c00053ce <f_open+0x419>
c0005076:	8d 44 24 24          	lea    eax,[esp+0x24]
c000507a:	83 ce 08             	or     esi,0x8
c000507d:	e8 8a f2 ff ff       	call   c000430c <dir_register>
c0005082:	89 c5                	mov    ebp,eax
c0005084:	85 c0                	test   eax,eax
c0005086:	74 2f                	je     c00050b7 <f_open+0x102>
c0005088:	e9 41 03 00 00       	jmp    c00053ce <f_open+0x419>
c000508d:	bd 07 00 00 00       	mov    ebp,0x7
c0005092:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005097:	0f 85 31 03 00 00    	jne    c00053ce <f_open+0x419>
c000509d:	bd 08 00 00 00       	mov    ebp,0x8
c00050a2:	f7 c7 04 00 00 00    	test   edi,0x4
c00050a8:	0f 85 20 03 00 00    	jne    c00053ce <f_open+0x419>
c00050ae:	83 e7 08             	and    edi,0x8
c00050b1:	0f 84 65 01 00 00    	je     c000521c <f_open+0x267>
c00050b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050bb:	8a 02                	mov    al,BYTE PTR [edx]
c00050bd:	3c 04                	cmp    al,0x4
c00050bf:	0f 85 97 00 00 00    	jne    c000515c <f_open+0x1a7>
c00050c5:	8d 42 10             	lea    eax,[edx+0x10]
c00050c8:	89 13                	mov    DWORD PTR [ebx],edx
c00050ca:	89 da                	mov    edx,ebx
c00050cc:	e8 80 fd ff ff       	call   c0004e51 <init_alloc_info.isra.2>
c00050d1:	31 d2                	xor    edx,edx
c00050d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d7:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050df:	83 c0 02             	add    eax,0x2
c00050e2:	e8 32 cc ff ff       	call   c0001d19 <mem_set>
c00050e7:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050ec:	31 d2                	xor    edx,edx
c00050ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050f5:	83 c0 26             	add    eax,0x26
c00050f8:	e8 1c cc ff ff       	call   c0001d19 <mem_set>
c00050fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005101:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005104:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0005108:	ba 00 00 21 50       	mov    edx,0x50210000
c000510d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005110:	83 c0 08             	add    eax,0x8
c0005113:	e8 e3 cb ff ff       	call   c0001cfb <st_dword>
c0005118:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000511c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000511f:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005123:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005127:	e8 b7 ea ff ff       	call   c0003be3 <store_xdir>
c000512c:	89 c5                	mov    ebp,eax
c000512e:	85 c0                	test   eax,eax
c0005130:	0f 85 98 02 00 00    	jne    c00053ce <f_open+0x419>
c0005136:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005139:	85 d2                	test   edx,edx
c000513b:	0f 84 db 00 00 00    	je     c000521c <f_open+0x267>
c0005141:	31 c9                	xor    ecx,ecx
c0005143:	89 d8                	mov    eax,ebx
c0005145:	e8 8e e3 ff ff       	call   c00034d8 <remove_chain>
c000514a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000514e:	89 c5                	mov    ebp,eax
c0005150:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005153:	48                   	dec    eax
c0005154:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005157:	e9 b8 00 00 00       	jmp    c0005214 <f_open+0x25f>
c000515c:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005160:	89 ea                	mov    edx,ebp
c0005162:	e8 99 fc ff ff       	call   c0004e00 <ld_clust.isra.0>
c0005167:	ba 00 00 21 50       	mov    edx,0x50210000
c000516c:	89 c7                	mov    edi,eax
c000516e:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005171:	e8 85 cb ff ff       	call   c0001cfb <st_dword>
c0005176:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000517a:	31 c9                	xor    ecx,ecx
c000517c:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005180:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005184:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005188:	e8 9c fc ff ff       	call   c0004e29 <st_clust.isra.1>
c000518d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005191:	31 d2                	xor    edx,edx
c0005193:	83 c0 1c             	add    eax,0x1c
c0005196:	e8 60 cb ff ff       	call   c0001cfb <st_dword>
c000519b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000519f:	85 ff                	test   edi,edi
c00051a1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051a5:	74 75                	je     c000521c <f_open+0x267>
c00051a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051ab:	31 c9                	xor    ecx,ecx
c00051ad:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c00051b0:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c00051b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051bb:	89 fa                	mov    edx,edi
c00051bd:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051c1:	e8 12 e3 ff ff       	call   c00034d8 <remove_chain>
c00051c6:	89 c5                	mov    ebp,eax
c00051c8:	85 c0                	test   eax,eax
c00051ca:	0f 85 fe 01 00 00    	jne    c00053ce <f_open+0x419>
c00051d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051dc:	4f                   	dec    edi
c00051dd:	e8 81 d2 ff ff       	call   c0002463 <move_window>
c00051e2:	89 c5                	mov    ebp,eax
c00051e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e8:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051eb:	eb 27                	jmp    c0005214 <f_open+0x25f>
c00051ed:	85 ed                	test   ebp,ebp
c00051ef:	0f 85 d9 01 00 00    	jne    c00053ce <f_open+0x419>
c00051f5:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051f9:	bd 04 00 00 00       	mov    ebp,0x4
c00051fe:	a8 10                	test   al,0x10
c0005200:	0f 85 c8 01 00 00    	jne    c00053ce <f_open+0x419>
c0005206:	83 e7 02             	and    edi,0x2
c0005209:	74 11                	je     c000521c <f_open+0x267>
c000520b:	bd 07 00 00 00       	mov    ebp,0x7
c0005210:	a8 01                	test   al,0x1
c0005212:	eb 02                	jmp    c0005216 <f_open+0x261>
c0005214:	85 ed                	test   ebp,ebp
c0005216:	0f 85 b2 01 00 00    	jne    c00053ce <f_open+0x419>
c000521c:	f7 c6 08 00 00 00    	test   esi,0x8
c0005222:	74 03                	je     c0005227 <f_open+0x272>
c0005224:	83 ce 40             	or     esi,0x40
c0005227:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000522b:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000522e:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005231:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005234:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005237:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000523b:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000523e:	8a 02                	mov    al,BYTE PTR [edx]
c0005240:	3c 04                	cmp    al,0x4
c0005242:	75 2a                	jne    c000526e <f_open+0x2b9>
c0005244:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005248:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000524d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005254:	30 c0                	xor    al,al
c0005256:	09 c8                	or     eax,ecx
c0005258:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000525b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000525f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005262:	8d 42 10             	lea    eax,[edx+0x10]
c0005265:	89 da                	mov    edx,ebx
c0005267:	e8 e5 fb ff ff       	call   c0004e51 <init_alloc_info.isra.2>
c000526c:	eb 1c                	jmp    c000528a <f_open+0x2d5>
c000526e:	89 fa                	mov    edx,edi
c0005270:	e8 8b fb ff ff       	call   c0004e00 <ld_clust.isra.0>
c0005275:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005278:	8d 47 1c             	lea    eax,[edi+0x1c]
c000527b:	e8 12 ca ff ff       	call   c0001c92 <ld_dword>
c0005280:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005287:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000528e:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005295:	89 03                	mov    DWORD PTR [ebx],eax
c0005297:	31 d2                	xor    edx,edx
c0005299:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000529d:	b9 00 02 00 00       	mov    ecx,0x200
c00052a2:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00052a6:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00052b3:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c00052b6:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052c0:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052d2:	e8 42 ca ff ff       	call   c0001d19 <mem_set>
c00052d7:	83 e6 20             	and    esi,0x20
c00052da:	75 07                	jne    c00052e3 <f_open+0x32e>
c00052dc:	31 ed                	xor    ebp,ebp
c00052de:	e9 eb 00 00 00       	jmp    c00053ce <f_open+0x419>
c00052e3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052e6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052f5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052f9:	74 e1                	je     c00052dc <f_open+0x327>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005303:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005306:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005309:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000530d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005310:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0005314:	31 ff                	xor    edi,edi
c0005316:	c1 e5 09             	shl    ebp,0x9
c0005319:	89 ee                	mov    esi,ebp
c000531b:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000531f:	89 f8                	mov    eax,edi
c0005321:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005325:	73 22                	jae    c0005349 <f_open+0x394>
c0005327:	89 d8                	mov    eax,ebx
c0005329:	e8 bd dc ff ff       	call   c0002feb <get_fat>
c000532e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005332:	89 c2                	mov    edx,eax
c0005334:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005338:	83 f8 01             	cmp    eax,0x1
c000533b:	76 10                	jbe    c000534d <f_open+0x398>
c000533d:	83 f8 ff             	cmp    eax,0xffffffff
c0005340:	75 d9                	jne    c000531b <f_open+0x366>
c0005342:	bd 01 00 00 00       	mov    ebp,0x1
c0005347:	eb 09                	jmp    c0005352 <f_open+0x39d>
c0005349:	31 ed                	xor    ebp,ebp
c000534b:	eb 05                	jmp    c0005352 <f_open+0x39d>
c000534d:	bd 02 00 00 00       	mov    ebp,0x2
c0005352:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005355:	85 ed                	test   ebp,ebp
c0005357:	75 75                	jne    c00053ce <f_open+0x419>
c0005359:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000535d:	25 ff 01 00 00       	and    eax,0x1ff
c0005362:	0f 84 74 ff ff ff    	je     c00052dc <f_open+0x327>
c0005368:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000536c:	bd 02 00 00 00       	mov    ebp,0x2
c0005371:	89 c8                	mov    eax,ecx
c0005373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005377:	e8 a2 cb ff ff       	call   c0001f1e <clst2sect>
c000537c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005380:	89 d7                	mov    edi,edx
c0005382:	09 c7                	or     edi,eax
c0005384:	74 48                	je     c00053ce <f_open+0x419>
c0005386:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000538a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000538e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005396:	0f ac fe 09          	shrd   esi,edi,0x9
c000539a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000539e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00053a2:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00053a5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00053a9:	83 ec 0c             	sub    esp,0xc
c00053ac:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00053af:	6a 01                	push   0x1
c00053b1:	52                   	push   edx
c00053b2:	50                   	push   eax
c00053b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00053b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053bb:	50                   	push   eax
c00053bc:	e8 79 c8 ff ff       	call   c0001c3a <disk_read>
c00053c1:	83 c4 20             	add    esp,0x20
c00053c4:	85 c0                	test   eax,eax
c00053c6:	0f 95 c0             	setne  al
c00053c9:	0f b6 c0             	movzx  eax,al
c00053cc:	89 c5                	mov    ebp,eax
c00053ce:	83 ec 0c             	sub    esp,0xc
c00053d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053d5:	e8 f4 30 00 00       	call   c00084ce <ff_memfree>
c00053da:	83 c4 10             	add    esp,0x10
c00053dd:	85 ed                	test   ebp,ebp
c00053df:	74 06                	je     c00053e7 <f_open+0x432>
c00053e1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053e7:	83 c4 7c             	add    esp,0x7c
c00053ea:	89 e8                	mov    eax,ebp
c00053ec:	5b                   	pop    ebx
c00053ed:	5e                   	pop    esi
c00053ee:	5f                   	pop    edi
c00053ef:	5d                   	pop    ebp
c00053f0:	c3                   	ret    

c00053f1 <f_read>:
c00053f1:	55                   	push   ebp
c00053f2:	57                   	push   edi
c00053f3:	56                   	push   esi
c00053f4:	53                   	push   ebx
c00053f5:	83 ec 2c             	sub    esp,0x2c
c00053f8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053fc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005400:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005406:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000540a:	89 d8                	mov    eax,ebx
c000540c:	e8 77 cf ff ff       	call   c0002388 <validate>
c0005411:	89 c5                	mov    ebp,eax
c0005413:	85 c0                	test   eax,eax
c0005415:	0f 85 4c 02 00 00    	jne    c0005667 <f_read+0x276>
c000541b:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000541f:	85 ed                	test   ebp,ebp
c0005421:	0f 85 40 02 00 00    	jne    c0005667 <f_read+0x276>
c0005427:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000542b:	0f 84 31 02 00 00    	je     c0005662 <f_read+0x271>
c0005431:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005434:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005437:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000543a:	bf 00 00 00 00       	mov    edi,0x0
c000543f:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005442:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005446:	89 d1                	mov    ecx,edx
c0005448:	19 f9                	sbb    ecx,edi
c000544a:	0f 83 cf 00 00 00    	jae    c000551f <f_read+0x12e>
c0005450:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005454:	e9 c6 00 00 00       	jmp    c000551f <f_read+0x12e>
c0005459:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000545c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000545f:	89 d0                	mov    eax,edx
c0005461:	25 ff 01 00 00       	and    eax,0x1ff
c0005466:	0f 85 c9 01 00 00    	jne    c0005635 <f_read+0x244>
c000546c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005470:	89 d6                	mov    esi,edx
c0005472:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005476:	89 cf                	mov    edi,ecx
c0005478:	48                   	dec    eax
c0005479:	0f ac fe 09          	shrd   esi,edi,0x9
c000547d:	21 f0                	and    eax,esi
c000547f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005483:	0f 84 a6 00 00 00    	je     c000552f <f_read+0x13e>
c0005489:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000548d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005490:	89 c8                	mov    eax,ecx
c0005492:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005495:	e8 84 ca ff ff       	call   c0001f1e <clst2sect>
c000549a:	89 d7                	mov    edi,edx
c000549c:	09 c7                	or     edi,eax
c000549e:	0f 84 b4 00 00 00    	je     c0005558 <f_read+0x167>
c00054a4:	31 ff                	xor    edi,edi
c00054a6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054aa:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00054ad:	01 c6                	add    esi,eax
c00054af:	11 d7                	adc    edi,edx
c00054b1:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054b9:	0f 86 fd 00 00 00    	jbe    c00055bc <f_read+0x1cb>
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054c7:	c1 e8 09             	shr    eax,0x9
c00054ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00054cd:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054d1:	03 14 24             	add    edx,DWORD PTR [esp]
c00054d4:	39 c2                	cmp    edx,eax
c00054d6:	76 07                	jbe    c00054df <f_read+0xee>
c00054d8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00054df:	83 ec 0c             	sub    esp,0xc
c00054e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054ec:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054f0:	50                   	push   eax
c00054f1:	e8 44 c7 ff ff       	call   c0001c3a <disk_read>
c00054f6:	83 c4 20             	add    esp,0x20
c00054f9:	85 c0                	test   eax,eax
c00054fb:	75 6e                	jne    c000556b <f_read+0x17a>
c00054fd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005501:	78 7e                	js     c0005581 <f_read+0x190>
c0005503:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005506:	c1 e6 09             	shl    esi,0x9
c0005509:	31 ff                	xor    edi,edi
c000550b:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000550f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005513:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005517:	01 30                	add    DWORD PTR [eax],esi
c0005519:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c000551c:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000551f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005524:	0f 85 2f ff ff ff    	jne    c0005459 <f_read+0x68>
c000552a:	e9 38 01 00 00       	jmp    c0005667 <f_read+0x276>
c000552f:	89 c8                	mov    eax,ecx
c0005531:	09 d0                	or     eax,edx
c0005533:	75 05                	jne    c000553a <f_read+0x149>
c0005535:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005538:	eb 19                	jmp    c0005553 <f_read+0x162>
c000553a:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000553e:	74 09                	je     c0005549 <f_read+0x158>
c0005540:	89 d8                	mov    eax,ebx
c0005542:	e8 f8 c9 ff ff       	call   c0001f3f <clmt_clust>
c0005547:	eb 0a                	jmp    c0005553 <f_read+0x162>
c0005549:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000554c:	89 d8                	mov    eax,ebx
c000554e:	e8 98 da ff ff       	call   c0002feb <get_fat>
c0005553:	83 f8 01             	cmp    eax,0x1
c0005556:	77 0e                	ja     c0005566 <f_read+0x175>
c0005558:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000555c:	bd 02 00 00 00       	mov    ebp,0x2
c0005561:	e9 01 01 00 00       	jmp    c0005667 <f_read+0x276>
c0005566:	83 f8 ff             	cmp    eax,0xffffffff
c0005569:	75 0e                	jne    c0005579 <f_read+0x188>
c000556b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556f:	bd 01 00 00 00       	mov    ebp,0x1
c0005574:	e9 ee 00 00 00       	jmp    c0005667 <f_read+0x276>
c0005579:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000557c:	e9 08 ff ff ff       	jmp    c0005489 <f_read+0x98>
c0005581:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005584:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005587:	29 f0                	sub    eax,esi
c0005589:	19 fa                	sbb    edx,edi
c000558b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000558e:	89 d7                	mov    edi,edx
c0005590:	ba 00 00 00 00       	mov    edx,0x0
c0005595:	89 f9                	mov    ecx,edi
c0005597:	19 d1                	sbb    ecx,edx
c0005599:	0f 83 64 ff ff ff    	jae    c0005503 <f_read+0x112>
c000559f:	89 c7                	mov    edi,eax
c00055a1:	8d 53 50             	lea    edx,[ebx+0x50]
c00055a4:	c1 e7 09             	shl    edi,0x9
c00055a7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ab:	b9 00 02 00 00       	mov    ecx,0x200
c00055b0:	01 f8                	add    eax,edi
c00055b2:	e8 4d c7 ff ff       	call   c0001d04 <mem_cpy>
c00055b7:	e9 47 ff ff ff       	jmp    c0005503 <f_read+0x112>
c00055bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055bf:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00055c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055c9:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055cd:	75 05                	jne    c00055d4 <f_read+0x1e3>
c00055cf:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055d2:	74 5b                	je     c000562f <f_read+0x23e>
c00055d4:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d7:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055df:	79 2a                	jns    c000560b <f_read+0x21a>
c00055e1:	83 ec 0c             	sub    esp,0xc
c00055e4:	6a 01                	push   0x1
c00055e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055f6:	50                   	push   eax
c00055f7:	e8 54 c6 ff ff       	call   c0001c50 <disk_write>
c00055fc:	83 c4 20             	add    esp,0x20
c00055ff:	85 c0                	test   eax,eax
c0005601:	0f 85 64 ff ff ff    	jne    c000556b <f_read+0x17a>
c0005607:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000560b:	83 ec 0c             	sub    esp,0xc
c000560e:	6a 01                	push   0x1
c0005610:	57                   	push   edi
c0005611:	56                   	push   esi
c0005612:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005616:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000561e:	50                   	push   eax
c000561f:	e8 16 c6 ff ff       	call   c0001c3a <disk_read>
c0005624:	83 c4 20             	add    esp,0x20
c0005627:	85 c0                	test   eax,eax
c0005629:	0f 85 3c ff ff ff    	jne    c000556b <f_read+0x17a>
c000562f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005632:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005635:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005638:	ba 00 02 00 00       	mov    edx,0x200
c000563d:	25 ff 01 00 00       	and    eax,0x1ff
c0005642:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005646:	29 c2                	sub    edx,eax
c0005648:	39 d6                	cmp    esi,edx
c000564a:	76 02                	jbe    c000564e <f_read+0x25d>
c000564c:	89 d6                	mov    esi,edx
c000564e:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005652:	89 f1                	mov    ecx,esi
c0005654:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005658:	e8 a7 c6 ff ff       	call   c0001d04 <mem_cpy>
c000565d:	e9 a7 fe ff ff       	jmp    c0005509 <f_read+0x118>
c0005662:	bd 07 00 00 00       	mov    ebp,0x7
c0005667:	83 c4 2c             	add    esp,0x2c
c000566a:	89 e8                	mov    eax,ebp
c000566c:	5b                   	pop    ebx
c000566d:	5e                   	pop    esi
c000566e:	5f                   	pop    edi
c000566f:	5d                   	pop    ebp
c0005670:	c3                   	ret    

c0005671 <f_write>:
c0005671:	55                   	push   ebp
c0005672:	57                   	push   edi
c0005673:	56                   	push   esi
c0005674:	53                   	push   ebx
c0005675:	83 ec 2c             	sub    esp,0x2c
c0005678:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000567c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005680:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005686:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000568a:	89 d8                	mov    eax,ebx
c000568c:	e8 f7 cc ff ff       	call   c0002388 <validate>
c0005691:	89 c5                	mov    ebp,eax
c0005693:	85 c0                	test   eax,eax
c0005695:	0f 85 86 02 00 00    	jne    c0005921 <f_write+0x2b0>
c000569b:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000569f:	85 ed                	test   ebp,ebp
c00056a1:	0f 85 7a 02 00 00    	jne    c0005921 <f_write+0x2b0>
c00056a7:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00056ab:	0f 84 6b 02 00 00    	je     c000591c <f_write+0x2ab>
c00056b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056b5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00056b8:	0f 84 43 01 00 00    	je     c0005801 <f_write+0x190>
c00056be:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056c1:	89 c1                	mov    ecx,eax
c00056c3:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056c7:	0f 83 34 01 00 00    	jae    c0005801 <f_write+0x190>
c00056cd:	f7 d0                	not    eax
c00056cf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056d3:	e9 29 01 00 00       	jmp    c0005801 <f_write+0x190>
c00056d8:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056db:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056de:	89 d0                	mov    eax,edx
c00056e0:	25 ff 01 00 00       	and    eax,0x1ff
c00056e5:	0f 85 00 02 00 00    	jne    c00058eb <f_write+0x27a>
c00056eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056ef:	89 d6                	mov    esi,edx
c00056f1:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056f5:	89 cf                	mov    edi,ecx
c00056f7:	48                   	dec    eax
c00056f8:	0f ac fe 09          	shrd   esi,edi,0x9
c00056fc:	21 f0                	and    eax,esi
c00056fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005702:	0f 84 06 01 00 00    	je     c000580e <f_write+0x19d>
c0005708:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000570c:	0f 88 6e 01 00 00    	js     c0005880 <f_write+0x20f>
c0005712:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005716:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005719:	89 c8                	mov    eax,ecx
c000571b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000571f:	e8 fa c7 ff ff       	call   c0001f1e <clst2sect>
c0005724:	89 d1                	mov    ecx,edx
c0005726:	09 c1                	or     ecx,eax
c0005728:	0f 84 1c 01 00 00    	je     c000584a <f_write+0x1d9>
c000572e:	31 ff                	xor    edi,edi
c0005730:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005734:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005738:	01 c6                	add    esi,eax
c000573a:	11 d7                	adc    edi,edx
c000573c:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005744:	0f 86 63 01 00 00    	jbe    c00058ad <f_write+0x23c>
c000574a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000574e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005752:	c1 e8 09             	shr    eax,0x9
c0005755:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005759:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000575d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005761:	39 c2                	cmp    edx,eax
c0005763:	76 08                	jbe    c000576d <f_write+0xfc>
c0005765:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005769:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000576d:	83 ec 0c             	sub    esp,0xc
c0005770:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005774:	57                   	push   edi
c0005775:	56                   	push   esi
c0005776:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000577a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000577e:	50                   	push   eax
c000577f:	e8 cc c4 ff ff       	call   c0001c50 <disk_write>
c0005784:	83 c4 20             	add    esp,0x20
c0005787:	85 c0                	test   eax,eax
c0005789:	0f 85 ce 00 00 00    	jne    c000585d <f_write+0x1ec>
c000578f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005792:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005795:	29 f0                	sub    eax,esi
c0005797:	19 fa                	sbb    edx,edi
c0005799:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000579d:	89 d7                	mov    edi,edx
c000579f:	ba 00 00 00 00       	mov    edx,0x0
c00057a4:	89 f9                	mov    ecx,edi
c00057a6:	19 d1                	sbb    ecx,edx
c00057a8:	73 1c                	jae    c00057c6 <f_write+0x155>
c00057aa:	89 c7                	mov    edi,eax
c00057ac:	b9 00 02 00 00       	mov    ecx,0x200
c00057b1:	c1 e7 09             	shl    edi,0x9
c00057b4:	8d 43 50             	lea    eax,[ebx+0x50]
c00057b7:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00057bb:	89 fa                	mov    edx,edi
c00057bd:	e8 42 c5 ff ff       	call   c0001d04 <mem_cpy>
c00057c2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057c6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057ca:	c1 e6 09             	shl    esi,0x9
c00057cd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057d1:	31 ff                	xor    edi,edi
c00057d3:	01 30                	add    DWORD PTR [eax],esi
c00057d5:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057d9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057dd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057e0:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057e3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057e6:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057e9:	89 c1                	mov    ecx,eax
c00057eb:	39 f2                	cmp    edx,esi
c00057ed:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057f0:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057f3:	19 f9                	sbb    ecx,edi
c00057f5:	73 04                	jae    c00057fb <f_write+0x18a>
c00057f7:	89 f2                	mov    edx,esi
c00057f9:	89 f8                	mov    eax,edi
c00057fb:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0005801:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005806:	0f 85 cc fe ff ff    	jne    c00056d8 <f_write+0x67>
c000580c:	eb 2e                	jmp    c000583c <f_write+0x1cb>
c000580e:	89 c8                	mov    eax,ecx
c0005810:	09 d0                	or     eax,edx
c0005812:	75 0b                	jne    c000581f <f_write+0x1ae>
c0005814:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005817:	31 d2                	xor    edx,edx
c0005819:	85 c0                	test   eax,eax
c000581b:	75 28                	jne    c0005845 <f_write+0x1d4>
c000581d:	eb 12                	jmp    c0005831 <f_write+0x1c0>
c000581f:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005823:	74 09                	je     c000582e <f_write+0x1bd>
c0005825:	89 d8                	mov    eax,ebx
c0005827:	e8 13 c7 ff ff       	call   c0001f3f <clmt_clust>
c000582c:	eb 0a                	jmp    c0005838 <f_write+0x1c7>
c000582e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 a1 da ff ff       	call   c00032d9 <create_chain>
c0005838:	85 c0                	test   eax,eax
c000583a:	75 09                	jne    c0005845 <f_write+0x1d4>
c000583c:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005840:	e9 dc 00 00 00       	jmp    c0005921 <f_write+0x2b0>
c0005845:	83 f8 01             	cmp    eax,0x1
c0005848:	75 0e                	jne    c0005858 <f_write+0x1e7>
c000584a:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000584e:	bd 02 00 00 00       	mov    ebp,0x2
c0005853:	e9 c9 00 00 00       	jmp    c0005921 <f_write+0x2b0>
c0005858:	83 f8 ff             	cmp    eax,0xffffffff
c000585b:	75 0e                	jne    c000586b <f_write+0x1fa>
c000585d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005861:	bd 01 00 00 00       	mov    ebp,0x1
c0005866:	e9 b6 00 00 00       	jmp    c0005921 <f_write+0x2b0>
c000586b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000586e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005872:	0f 85 90 fe ff ff    	jne    c0005708 <f_write+0x97>
c0005878:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000587b:	e9 88 fe ff ff       	jmp    c0005708 <f_write+0x97>
c0005880:	83 ec 0c             	sub    esp,0xc
c0005883:	8d 43 50             	lea    eax,[ebx+0x50]
c0005886:	6a 01                	push   0x1
c0005888:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000588b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000588e:	50                   	push   eax
c000588f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005893:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005897:	50                   	push   eax
c0005898:	e8 b3 c3 ff ff       	call   c0001c50 <disk_write>
c000589d:	83 c4 20             	add    esp,0x20
c00058a0:	85 c0                	test   eax,eax
c00058a2:	75 b9                	jne    c000585d <f_write+0x1ec>
c00058a4:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00058a8:	e9 65 fe ff ff       	jmp    c0005712 <f_write+0xa1>
c00058ad:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00058b0:	75 05                	jne    c00058b7 <f_write+0x246>
c00058b2:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00058b5:	74 2e                	je     c00058e5 <f_write+0x274>
c00058b7:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00058ba:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058bd:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058c0:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058c3:	73 20                	jae    c00058e5 <f_write+0x274>
c00058c5:	83 ec 0c             	sub    esp,0xc
c00058c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00058cb:	6a 01                	push   0x1
c00058cd:	57                   	push   edi
c00058ce:	56                   	push   esi
c00058cf:	50                   	push   eax
c00058d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058d4:	50                   	push   eax
c00058d5:	e8 60 c3 ff ff       	call   c0001c3a <disk_read>
c00058da:	83 c4 20             	add    esp,0x20
c00058dd:	85 c0                	test   eax,eax
c00058df:	0f 85 78 ff ff ff    	jne    c000585d <f_write+0x1ec>
c00058e5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058e8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058eb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ee:	ba 00 02 00 00       	mov    edx,0x200
c00058f3:	25 ff 01 00 00       	and    eax,0x1ff
c00058f8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058fc:	29 c2                	sub    edx,eax
c00058fe:	39 d6                	cmp    esi,edx
c0005900:	76 02                	jbe    c0005904 <f_write+0x293>
c0005902:	89 d6                	mov    esi,edx
c0005904:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005908:	89 f1                	mov    ecx,esi
c000590a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000590e:	e8 f1 c3 ff ff       	call   c0001d04 <mem_cpy>
c0005913:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005917:	e9 b1 fe ff ff       	jmp    c00057cd <f_write+0x15c>
c000591c:	bd 07 00 00 00       	mov    ebp,0x7
c0005921:	83 c4 2c             	add    esp,0x2c
c0005924:	89 e8                	mov    eax,ebp
c0005926:	5b                   	pop    ebx
c0005927:	5e                   	pop    esi
c0005928:	5f                   	pop    edi
c0005929:	5d                   	pop    ebp
c000592a:	c3                   	ret    

c000592b <f_sync>:
c000592b:	56                   	push   esi
c000592c:	53                   	push   ebx
c000592d:	83 ec 64             	sub    esp,0x64
c0005930:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005934:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005938:	89 d8                	mov    eax,ebx
c000593a:	e8 49 ca ff ff       	call   c0002388 <validate>
c000593f:	85 c0                	test   eax,eax
c0005941:	0f 85 ba 01 00 00    	jne    c0005b01 <f_sync+0x1d6>
c0005947:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000594a:	f6 c2 40             	test   dl,0x40
c000594d:	0f 84 ae 01 00 00    	je     c0005b01 <f_sync+0x1d6>
c0005953:	84 d2                	test   dl,dl
c0005955:	79 33                	jns    c000598a <f_sync+0x5f>
c0005957:	83 ec 0c             	sub    esp,0xc
c000595a:	8d 43 50             	lea    eax,[ebx+0x50]
c000595d:	6a 01                	push   0x1
c000595f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005962:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005965:	50                   	push   eax
c0005966:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000596a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000596e:	50                   	push   eax
c000596f:	e8 dc c2 ff ff       	call   c0001c50 <disk_write>
c0005974:	83 c4 20             	add    esp,0x20
c0005977:	89 c2                	mov    edx,eax
c0005979:	b8 01 00 00 00       	mov    eax,0x1
c000597e:	85 d2                	test   edx,edx
c0005980:	0f 85 7b 01 00 00    	jne    c0005b01 <f_sync+0x1d6>
c0005986:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000598a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000598e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005991:	0f 85 11 01 00 00    	jne    c0005aa8 <f_sync+0x17d>
c0005997:	89 d8                	mov    eax,ebx
c0005999:	e8 13 d6 ff ff       	call   c0002fb1 <fill_first_frag>
c000599e:	85 c0                	test   eax,eax
c00059a0:	0f 85 5b 01 00 00    	jne    c0005b01 <f_sync+0x1d6>
c00059a6:	83 c9 ff             	or     ecx,0xffffffff
c00059a9:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00059ac:	89 d8                	mov    eax,ebx
c00059ae:	e8 c9 d5 ff ff       	call   c0002f7c <fill_last_frag>
c00059b3:	85 c0                	test   eax,eax
c00059b5:	0f 85 46 01 00 00    	jne    c0005b01 <f_sync+0x1d6>
c00059bb:	83 ec 0c             	sub    esp,0xc
c00059be:	68 60 04 00 00       	push   0x460
c00059c3:	e8 f0 2a 00 00       	call   c00084b8 <ff_memalloc>
c00059c8:	83 c4 10             	add    esp,0x10
c00059cb:	89 c6                	mov    esi,eax
c00059cd:	b8 11 00 00 00       	mov    eax,0x11
c00059d2:	85 f6                	test   esi,esi
c00059d4:	0f 84 27 01 00 00    	je     c0005b01 <f_sync+0x1d6>
c00059da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059de:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059e4:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059e7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059ea:	89 da                	mov    edx,ebx
c00059ec:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059f0:	e8 af df ff ff       	call   c00039a4 <load_obj_xdir>
c00059f5:	85 c0                	test   eax,eax
c00059f7:	0f 85 95 00 00 00    	jne    c0005a92 <f_sync+0x167>
c00059fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a01:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a04:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005a08:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005a0b:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005a0e:	83 ca 01             	or     edx,0x1
c0005a11:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005a14:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005a17:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a1a:	83 c0 34             	add    eax,0x34
c0005a1d:	e8 d9 c2 ff ff       	call   c0001cfb <st_dword>
c0005a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a26:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a29:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a2c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a2f:	83 c0 38             	add    eax,0x38
c0005a32:	e8 c7 c2 ff ff       	call   c0001cfe <st_qword>
c0005a37:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a3e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a41:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a44:	83 c0 28             	add    eax,0x28
c0005a47:	e8 b2 c2 ff ff       	call   c0001cfe <st_qword>
c0005a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a50:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a55:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a58:	83 c0 0c             	add    eax,0xc
c0005a5b:	e8 9b c2 ff ff       	call   c0001cfb <st_dword>
c0005a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a64:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a67:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a6b:	31 d2                	xor    edx,edx
c0005a6d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a70:	83 c0 10             	add    eax,0x10
c0005a73:	e8 83 c2 ff ff       	call   c0001cfb <st_dword>
c0005a78:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a7c:	e8 62 e1 ff ff       	call   c0003be3 <store_xdir>
c0005a81:	85 c0                	test   eax,eax
c0005a83:	75 0d                	jne    c0005a92 <f_sync+0x167>
c0005a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a89:	e8 00 eb ff ff       	call   c000458e <sync_fs>
c0005a8e:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a96:	83 ec 0c             	sub    esp,0xc
c0005a99:	56                   	push   esi
c0005a9a:	e8 2f 2a 00 00       	call   c00084ce <ff_memfree>
c0005a9f:	83 c4 10             	add    esp,0x10
c0005aa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005aa6:	eb 59                	jmp    c0005b01 <f_sync+0x1d6>
c0005aa8:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005aab:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005aae:	e8 b0 c9 ff ff       	call   c0002463 <move_window>
c0005ab3:	85 c0                	test   eax,eax
c0005ab5:	75 4a                	jne    c0005b01 <f_sync+0x1d6>
c0005ab7:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005aba:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005abe:	89 f2                	mov    edx,esi
c0005ac0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005ac3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005ac5:	e8 5f f3 ff ff       	call   c0004e29 <st_clust.isra.1>
c0005aca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005acd:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005ad0:	e8 26 c2 ff ff       	call   c0001cfb <st_dword>
c0005ad5:	8d 46 16             	lea    eax,[esi+0x16]
c0005ad8:	ba 00 00 21 50       	mov    edx,0x50210000
c0005add:	e8 19 c2 ff ff       	call   c0001cfb <st_dword>
c0005ae2:	8d 46 12             	lea    eax,[esi+0x12]
c0005ae5:	31 d2                	xor    edx,edx
c0005ae7:	e8 0b c2 ff ff       	call   c0001cf7 <st_word>
c0005aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af8:	e8 91 ea ff ff       	call   c000458e <sync_fs>
c0005afd:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005b01:	83 c4 64             	add    esp,0x64
c0005b04:	5b                   	pop    ebx
c0005b05:	5e                   	pop    esi
c0005b06:	c3                   	ret    

c0005b07 <f_close>:
c0005b07:	53                   	push   ebx
c0005b08:	83 ec 24             	sub    esp,0x24
c0005b0b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005b0f:	53                   	push   ebx
c0005b10:	e8 16 fe ff ff       	call   c000592b <f_sync>
c0005b15:	83 c4 10             	add    esp,0x10
c0005b18:	85 c0                	test   eax,eax
c0005b1a:	75 15                	jne    c0005b31 <f_close+0x2a>
c0005b1c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b20:	89 d8                	mov    eax,ebx
c0005b22:	e8 61 c8 ff ff       	call   c0002388 <validate>
c0005b27:	85 c0                	test   eax,eax
c0005b29:	75 06                	jne    c0005b31 <f_close+0x2a>
c0005b2b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b31:	83 c4 18             	add    esp,0x18
c0005b34:	5b                   	pop    ebx
c0005b35:	c3                   	ret    

c0005b36 <f_lseek>:
c0005b36:	55                   	push   ebp
c0005b37:	57                   	push   edi
c0005b38:	56                   	push   esi
c0005b39:	53                   	push   ebx
c0005b3a:	83 ec 3c             	sub    esp,0x3c
c0005b3d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b41:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b45:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b4c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b50:	89 d8                	mov    eax,ebx
c0005b52:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b56:	e8 2d c8 ff ff       	call   c0002388 <validate>
c0005b5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	0f 85 7a 04 00 00    	jne    c0005fe1 <f_lseek+0x4ab>
c0005b67:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b6f:	85 c0                	test   eax,eax
c0005b71:	0f 85 6a 04 00 00    	jne    c0005fe1 <f_lseek+0x4ab>
c0005b77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b7e:	74 0c                	je     c0005b8c <f_lseek+0x56>
c0005b80:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b83:	85 c0                	test   eax,eax
c0005b85:	75 1f                	jne    c0005ba6 <f_lseek+0x70>
c0005b87:	e9 b5 01 00 00       	jmp    c0005d41 <f_lseek+0x20b>
c0005b8c:	83 c9 ff             	or     ecx,0xffffffff
c0005b8f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b92:	89 d8                	mov    eax,ebx
c0005b94:	e8 e3 d3 ff ff       	call   c0002f7c <fill_last_frag>
c0005b99:	85 c0                	test   eax,eax
c0005b9b:	74 e3                	je     c0005b80 <f_lseek+0x4a>
c0005b9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005ba1:	e9 3b 04 00 00       	jmp    c0005fe1 <f_lseek+0x4ab>
c0005ba6:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005bab:	0f 85 ac 00 00 00    	jne    c0005c5d <f_lseek+0x127>
c0005bb1:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005bb5:	0f 85 a2 00 00 00    	jne    c0005c5d <f_lseek+0x127>
c0005bbb:	8d 78 04             	lea    edi,[eax+0x4]
c0005bbe:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005bc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0005bc3:	be 02 00 00 00       	mov    esi,0x2
c0005bc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bcc:	85 ed                	test   ebp,ebp
c0005bce:	74 73                	je     c0005c43 <f_lseek+0x10d>
c0005bd0:	89 e9                	mov    ecx,ebp
c0005bd2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bd9:	ff 04 24             	inc    DWORD PTR [esp]
c0005bdc:	89 ca                	mov    edx,ecx
c0005bde:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005be2:	89 d8                	mov    eax,ebx
c0005be4:	e8 02 d4 ff ff       	call   c0002feb <get_fat>
c0005be9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bed:	83 f8 01             	cmp    eax,0x1
c0005bf0:	77 11                	ja     c0005c03 <f_lseek+0xcd>
c0005bf2:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bf6:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bfe:	e9 de 03 00 00       	jmp    c0005fe1 <f_lseek+0x4ab>
c0005c03:	83 f8 ff             	cmp    eax,0xffffffff
c0005c06:	75 11                	jne    c0005c19 <f_lseek+0xe3>
c0005c08:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005c0c:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005c14:	e9 c8 03 00 00       	jmp    c0005fe1 <f_lseek+0x4ab>
c0005c19:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c1c:	89 c1                	mov    ecx,eax
c0005c1e:	39 c2                	cmp    edx,eax
c0005c20:	74 b7                	je     c0005bd9 <f_lseek+0xa3>
c0005c22:	83 c6 02             	add    esi,0x2
c0005c25:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c29:	72 0b                	jb     c0005c36 <f_lseek+0x100>
c0005c2b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c2e:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c31:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c33:	83 c7 08             	add    edi,0x8
c0005c36:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c3a:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c3d:	76 04                	jbe    c0005c43 <f_lseek+0x10d>
c0005c3f:	89 c5                	mov    ebp,eax
c0005c41:	eb 8d                	jmp    c0005bd0 <f_lseek+0x9a>
c0005c43:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c46:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c4a:	89 30                	mov    DWORD PTR [eax],esi
c0005c4c:	0f 87 87 03 00 00    	ja     c0005fd9 <f_lseek+0x4a3>
c0005c52:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c58:	e9 84 03 00 00       	jmp    c0005fe1 <f_lseek+0x4ab>
c0005c5d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c60:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c76:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c7a:	73 0f                	jae    c0005c8b <f_lseek+0x155>
c0005c7c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c7f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c93:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c96:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c9d:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005ca1:	0f 84 3a 03 00 00    	je     c0005fe1 <f_lseek+0x4ab>
c0005ca7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005cab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005caf:	83 c6 ff             	add    esi,0xffffffff
c0005cb2:	89 d8                	mov    eax,ebx
c0005cb4:	83 d7 ff             	adc    edi,0xffffffff
c0005cb7:	89 f2                	mov    edx,esi
c0005cb9:	89 f9                	mov    ecx,edi
c0005cbb:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005cbf:	89 34 24             	mov    DWORD PTR [esp],esi
c0005cc2:	e8 78 c2 ff ff       	call   c0001f3f <clmt_clust>
c0005cc7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ccb:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cce:	89 c2                	mov    edx,eax
c0005cd0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cd4:	89 c8                	mov    eax,ecx
c0005cd6:	e8 43 c2 ff ff       	call   c0001f1e <clst2sect>
c0005cdb:	89 d7                	mov    edi,edx
c0005cdd:	09 c7                	or     edi,eax
c0005cdf:	0f 84 0d ff ff ff    	je     c0005bf2 <f_lseek+0xbc>
c0005ce5:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ce9:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cef:	0f 84 ec 02 00 00    	je     c0005fe1 <f_lseek+0x4ab>
c0005cf5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cf9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cfd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d00:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005d04:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d08:	4d                   	dec    ebp
c0005d09:	31 ff                	xor    edi,edi
c0005d0b:	21 ee                	and    esi,ebp
c0005d0d:	01 c6                	add    esi,eax
c0005d0f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d12:	11 d7                	adc    edi,edx
c0005d14:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d17:	39 fa                	cmp    edx,edi
c0005d19:	75 08                	jne    c0005d23 <f_lseek+0x1ed>
c0005d1b:	39 f0                	cmp    eax,esi
c0005d1d:	0f 84 be 02 00 00    	je     c0005fe1 <f_lseek+0x4ab>
c0005d23:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d26:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d2a:	0f 89 80 02 00 00    	jns    c0005fb0 <f_lseek+0x47a>
c0005d30:	83 ec 0c             	sub    esp,0xc
c0005d33:	6a 01                	push   0x1
c0005d35:	52                   	push   edx
c0005d36:	50                   	push   eax
c0005d37:	55                   	push   ebp
c0005d38:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d3c:	e9 5a 02 00 00       	jmp    c0005f9b <f_lseek+0x465>
c0005d41:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d45:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d48:	74 16                	je     c0005d60 <f_lseek+0x22a>
c0005d4a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d4f:	76 0f                	jbe    c0005d60 <f_lseek+0x22a>
c0005d51:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d58:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d60:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d63:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d66:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d69:	89 c7                	mov    edi,eax
c0005d6b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d6f:	73 0d                	jae    c0005d7e <f_lseek+0x248>
c0005d71:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d75:	75 07                	jne    c0005d7e <f_lseek+0x248>
c0005d77:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d7e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d81:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d84:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d88:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d8f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d96:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d99:	75 09                	jne    c0005da4 <f_lseek+0x26e>
c0005d9b:	31 f6                	xor    esi,esi
c0005d9d:	31 ff                	xor    edi,edi
c0005d9f:	e9 af 01 00 00       	jmp    c0005f53 <f_lseek+0x41d>
c0005da4:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005da8:	89 d7                	mov    edi,edx
c0005daa:	c1 e1 09             	shl    ecx,0x9
c0005dad:	09 c7                	or     edi,eax
c0005daf:	89 cd                	mov    ebp,ecx
c0005db1:	74 6d                	je     c0005e20 <f_lseek+0x2ea>
c0005db3:	83 c0 ff             	add    eax,0xffffffff
c0005db6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005dba:	83 d2 ff             	adc    edx,0xffffffff
c0005dbd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005dc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005dc4:	83 c0 ff             	add    eax,0xffffffff
c0005dc7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005dcb:	83 d2 ff             	adc    edx,0xffffffff
c0005dce:	31 ff                	xor    edi,edi
c0005dd0:	57                   	push   edi
c0005dd1:	51                   	push   ecx
c0005dd2:	52                   	push   edx
c0005dd3:	50                   	push   eax
c0005dd4:	e8 5b 13 02 00       	call   c0027134 <__udivdi3>
c0005dd9:	83 c4 10             	add    esp,0x10
c0005ddc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005de0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005de4:	57                   	push   edi
c0005de5:	55                   	push   ebp
c0005de6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dee:	e8 41 13 02 00       	call   c0027134 <__udivdi3>
c0005df3:	83 c4 10             	add    esp,0x10
c0005df6:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dfa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dfe:	19 d1                	sbb    ecx,edx
c0005e00:	72 1e                	jb     c0005e20 <f_lseek+0x2ea>
c0005e02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005e06:	89 e9                	mov    ecx,ebp
c0005e08:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005e0b:	f7 d9                	neg    ecx
c0005e0d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005e10:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005e14:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005e17:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005e1a:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e1e:	eb 28                	jmp    c0005e48 <f_lseek+0x312>
c0005e20:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e23:	85 c0                	test   eax,eax
c0005e25:	75 1e                	jne    c0005e45 <f_lseek+0x30f>
c0005e27:	31 d2                	xor    edx,edx
c0005e29:	89 d8                	mov    eax,ebx
c0005e2b:	e8 a9 d4 ff ff       	call   c00032d9 <create_chain>
c0005e30:	83 f8 01             	cmp    eax,0x1
c0005e33:	0f 84 b9 fd ff ff    	je     c0005bf2 <f_lseek+0xbc>
c0005e39:	83 f8 ff             	cmp    eax,0xffffffff
c0005e3c:	0f 84 c6 fd ff ff    	je     c0005c08 <f_lseek+0xd2>
c0005e42:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e45:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e48:	85 c0                	test   eax,eax
c0005e4a:	0f 84 4b ff ff ff    	je     c0005d9b <f_lseek+0x265>
c0005e50:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e54:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e5c:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e5f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e63:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e66:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e69:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e6d:	0f 83 9d 00 00 00    	jae    c0005f10 <f_lseek+0x3da>
c0005e73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e77:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e7b:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e7e:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e82:	01 f2                	add    edx,esi
c0005e84:	11 f9                	adc    ecx,edi
c0005e86:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e8a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e8e:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e91:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e94:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e97:	f6 c1 02             	test   cl,0x2
c0005e9a:	74 35                	je     c0005ed1 <f_lseek+0x39b>
c0005e9c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ea0:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005ea3:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005ea6:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005eaa:	73 16                	jae    c0005ec2 <f_lseek+0x38c>
c0005eac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005eb0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005eb4:	88 ca                	mov    dl,cl
c0005eb6:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005eb9:	83 ca 40             	or     edx,0x40
c0005ebc:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ebf:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ec2:	89 c2                	mov    edx,eax
c0005ec4:	89 d8                	mov    eax,ebx
c0005ec6:	e8 0e d4 ff ff       	call   c00032d9 <create_chain>
c0005ecb:	85 c0                	test   eax,eax
c0005ecd:	75 0b                	jne    c0005eda <f_lseek+0x3a4>
c0005ecf:	eb 30                	jmp    c0005f01 <f_lseek+0x3cb>
c0005ed1:	89 c2                	mov    edx,eax
c0005ed3:	89 d8                	mov    eax,ebx
c0005ed5:	e8 11 d1 ff ff       	call   c0002feb <get_fat>
c0005eda:	83 f8 ff             	cmp    eax,0xffffffff
c0005edd:	0f 84 25 fd ff ff    	je     c0005c08 <f_lseek+0xd2>
c0005ee3:	83 f8 01             	cmp    eax,0x1
c0005ee6:	0f 86 06 fd ff ff    	jbe    c0005bf2 <f_lseek+0xbc>
c0005eec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ef0:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ef3:	0f 86 f9 fc ff ff    	jbe    c0005bf2 <f_lseek+0xbc>
c0005ef9:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005efc:	e9 5b ff ff ff       	jmp    c0005e5c <f_lseek+0x326>
c0005f01:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005f08:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005f10:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005f13:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005f17:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005f1a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f1d:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f20:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f26:	0f 84 6f fe ff ff    	je     c0005d9b <f_lseek+0x265>
c0005f2c:	89 c2                	mov    edx,eax
c0005f2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f32:	e8 e7 bf ff ff       	call   c0001f1e <clst2sect>
c0005f37:	89 d7                	mov    edi,edx
c0005f39:	09 c7                	or     edi,eax
c0005f3b:	0f 84 b1 fc ff ff    	je     c0005bf2 <f_lseek+0xbc>
c0005f41:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f45:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f48:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f4c:	c1 ef 09             	shr    edi,0x9
c0005f4f:	01 c6                	add    esi,eax
c0005f51:	11 d7                	adc    edi,edx
c0005f53:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f56:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f59:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f5c:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f5f:	19 d1                	sbb    ecx,edx
c0005f61:	73 0a                	jae    c0005f6d <f_lseek+0x437>
c0005f63:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f66:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f69:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f6d:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f72:	74 6d                	je     c0005fe1 <f_lseek+0x4ab>
c0005f74:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f77:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f7a:	39 fa                	cmp    edx,edi
c0005f7c:	75 04                	jne    c0005f82 <f_lseek+0x44c>
c0005f7e:	39 f0                	cmp    eax,esi
c0005f80:	74 5f                	je     c0005fe1 <f_lseek+0x4ab>
c0005f82:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f85:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f89:	79 25                	jns    c0005fb0 <f_lseek+0x47a>
c0005f8b:	83 ec 0c             	sub    esp,0xc
c0005f8e:	6a 01                	push   0x1
c0005f90:	52                   	push   edx
c0005f91:	50                   	push   eax
c0005f92:	55                   	push   ebp
c0005f93:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f97:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9b:	50                   	push   eax
c0005f9c:	e8 af bc ff ff       	call   c0001c50 <disk_write>
c0005fa1:	83 c4 20             	add    esp,0x20
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 85 5c fc ff ff    	jne    c0005c08 <f_lseek+0xd2>
c0005fac:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005fb0:	83 ec 0c             	sub    esp,0xc
c0005fb3:	6a 01                	push   0x1
c0005fb5:	57                   	push   edi
c0005fb6:	56                   	push   esi
c0005fb7:	55                   	push   ebp
c0005fb8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fbc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fc0:	50                   	push   eax
c0005fc1:	e8 74 bc ff ff       	call   c0001c3a <disk_read>
c0005fc6:	83 c4 20             	add    esp,0x20
c0005fc9:	85 c0                	test   eax,eax
c0005fcb:	0f 85 37 fc ff ff    	jne    c0005c08 <f_lseek+0xd2>
c0005fd1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fd4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fd7:	eb 08                	jmp    c0005fe1 <f_lseek+0x4ab>
c0005fd9:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fe1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fe5:	83 c4 3c             	add    esp,0x3c
c0005fe8:	5b                   	pop    ebx
c0005fe9:	5e                   	pop    esi
c0005fea:	5f                   	pop    edi
c0005feb:	5d                   	pop    ebp
c0005fec:	c3                   	ret    

c0005fed <f_opendir>:
c0005fed:	56                   	push   esi
c0005fee:	b8 09 00 00 00       	mov    eax,0x9
c0005ff3:	53                   	push   ebx
c0005ff4:	83 ec 24             	sub    esp,0x24
c0005ff7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ffb:	85 db                	test   ebx,ebx
c0005ffd:	0f 84 e6 00 00 00    	je     c00060e9 <f_opendir+0xfc>
c0006003:	31 c9                	xor    ecx,ecx
c0006005:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006009:	8d 44 24 34          	lea    eax,[esp+0x34]
c000600d:	e8 03 c7 ff ff       	call   c0002715 <mount_volume>
c0006012:	85 c0                	test   eax,eax
c0006014:	0f 85 c9 00 00 00    	jne    c00060e3 <f_opendir+0xf6>
c000601a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601e:	83 ec 0c             	sub    esp,0xc
c0006021:	89 03                	mov    DWORD PTR [ebx],eax
c0006023:	68 60 04 00 00       	push   0x460
c0006028:	e8 8b 24 00 00       	call   c00084b8 <ff_memalloc>
c000602d:	83 c4 10             	add    esp,0x10
c0006030:	89 c6                	mov    esi,eax
c0006032:	b8 11 00 00 00       	mov    eax,0x11
c0006037:	85 f6                	test   esi,esi
c0006039:	0f 84 aa 00 00 00    	je     c00060e9 <f_opendir+0xfc>
c000603f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006043:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006049:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000604c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000604f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006053:	89 d8                	mov    eax,ebx
c0006055:	e8 31 ee ff ff       	call   c0004e8b <follow_path>
c000605a:	85 c0                	test   eax,eax
c000605c:	75 61                	jne    c00060bf <f_opendir+0xd2>
c000605e:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006062:	78 46                	js     c00060aa <f_opendir+0xbd>
c0006064:	b8 05 00 00 00       	mov    eax,0x5
c0006069:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000606d:	74 50                	je     c00060bf <f_opendir+0xd2>
c000606f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006073:	8a 01                	mov    al,BYTE PTR [ecx]
c0006075:	3c 04                	cmp    al,0x4
c0006077:	75 26                	jne    c000609f <f_opendir+0xb2>
c0006079:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000607c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000607f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006082:	30 d2                	xor    dl,dl
c0006084:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006088:	09 c2                	or     edx,eax
c000608a:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000608d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006090:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006093:	89 da                	mov    edx,ebx
c0006095:	8d 41 10             	lea    eax,[ecx+0x10]
c0006098:	e8 b4 ed ff ff       	call   c0004e51 <init_alloc_info.isra.2>
c000609d:	eb 0b                	jmp    c00060aa <f_opendir+0xbd>
c000609f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00060a2:	e8 59 ed ff ff       	call   c0004e00 <ld_clust.isra.0>
c00060a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00060aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060ae:	31 d2                	xor    edx,edx
c00060b0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00060b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00060b8:	89 d8                	mov    eax,ebx
c00060ba:	e8 22 d1 ff ff       	call   c00031e1 <dir_sdi>
c00060bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060c3:	83 ec 0c             	sub    esp,0xc
c00060c6:	56                   	push   esi
c00060c7:	e8 02 24 00 00       	call   c00084ce <ff_memfree>
c00060cc:	83 c4 10             	add    esp,0x10
c00060cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060d3:	83 f8 04             	cmp    eax,0x4
c00060d6:	74 06                	je     c00060de <f_opendir+0xf1>
c00060d8:	85 c0                	test   eax,eax
c00060da:	74 0d                	je     c00060e9 <f_opendir+0xfc>
c00060dc:	eb 05                	jmp    c00060e3 <f_opendir+0xf6>
c00060de:	b8 05 00 00 00       	mov    eax,0x5
c00060e3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e9:	83 c4 24             	add    esp,0x24
c00060ec:	5b                   	pop    ebx
c00060ed:	5e                   	pop    esi
c00060ee:	c3                   	ret    

c00060ef <f_closedir>:
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 18             	sub    esp,0x18
c00060f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060f7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060fb:	89 d8                	mov    eax,ebx
c00060fd:	e8 86 c2 ff ff       	call   c0002388 <validate>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 06                	jne    c000610c <f_closedir+0x1d>
c0006106:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000610c:	83 c4 18             	add    esp,0x18
c000610f:	5b                   	pop    ebx
c0006110:	c3                   	ret    

c0006111 <f_readdir>:
c0006111:	57                   	push   edi
c0006112:	56                   	push   esi
c0006113:	53                   	push   ebx
c0006114:	83 ec 20             	sub    esp,0x20
c0006117:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000611b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000611f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006123:	89 d8                	mov    eax,ebx
c0006125:	e8 5e c2 ff ff       	call   c0002388 <validate>
c000612a:	85 c0                	test   eax,eax
c000612c:	75 77                	jne    c00061a5 <f_readdir+0x94>
c000612e:	85 ff                	test   edi,edi
c0006130:	75 0b                	jne    c000613d <f_readdir+0x2c>
c0006132:	31 d2                	xor    edx,edx
c0006134:	89 d8                	mov    eax,ebx
c0006136:	e8 a6 d0 ff ff       	call   c00031e1 <dir_sdi>
c000613b:	eb 68                	jmp    c00061a5 <f_readdir+0x94>
c000613d:	83 ec 0c             	sub    esp,0xc
c0006140:	68 60 04 00 00       	push   0x460
c0006145:	e8 6e 23 00 00       	call   c00084b8 <ff_memalloc>
c000614a:	83 c4 10             	add    esp,0x10
c000614d:	89 c6                	mov    esi,eax
c000614f:	b8 11 00 00 00       	mov    eax,0x11
c0006154:	85 f6                	test   esi,esi
c0006156:	74 4d                	je     c00061a5 <f_readdir+0x94>
c0006158:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000615c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006162:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006165:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006168:	31 d2                	xor    edx,edx
c000616a:	89 d8                	mov    eax,ebx
c000616c:	e8 80 d8 ff ff       	call   c00039f1 <dir_read>
c0006171:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006176:	75 19                	jne    c0006191 <f_readdir+0x80>
c0006178:	89 fa                	mov    edx,edi
c000617a:	89 d8                	mov    eax,ebx
c000617c:	e8 7e ea ff ff       	call   c0004bff <get_fileinfo>
c0006181:	31 d2                	xor    edx,edx
c0006183:	89 d8                	mov    eax,ebx
c0006185:	e8 af d5 ff ff       	call   c0003739 <dir_next>
c000618a:	83 f8 04             	cmp    eax,0x4
c000618d:	75 02                	jne    c0006191 <f_readdir+0x80>
c000618f:	31 c0                	xor    eax,eax
c0006191:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006195:	83 ec 0c             	sub    esp,0xc
c0006198:	56                   	push   esi
c0006199:	e8 30 23 00 00       	call   c00084ce <ff_memfree>
c000619e:	83 c4 10             	add    esp,0x10
c00061a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061a5:	83 c4 20             	add    esp,0x20
c00061a8:	5b                   	pop    ebx
c00061a9:	5e                   	pop    esi
c00061aa:	5f                   	pop    edi
c00061ab:	c3                   	ret    

c00061ac <f_stat>:
c00061ac:	57                   	push   edi
c00061ad:	31 c9                	xor    ecx,ecx
c00061af:	56                   	push   esi
c00061b0:	53                   	push   ebx
c00061b1:	83 ec 50             	sub    esp,0x50
c00061b4:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00061b8:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061bc:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061c0:	e8 50 c5 ff ff       	call   c0002715 <mount_volume>
c00061c5:	89 c3                	mov    ebx,eax
c00061c7:	85 c0                	test   eax,eax
c00061c9:	75 67                	jne    c0006232 <f_stat+0x86>
c00061cb:	83 ec 0c             	sub    esp,0xc
c00061ce:	bb 11 00 00 00       	mov    ebx,0x11
c00061d3:	68 60 04 00 00       	push   0x460
c00061d8:	e8 db 22 00 00       	call   c00084b8 <ff_memalloc>
c00061dd:	83 c4 10             	add    esp,0x10
c00061e0:	89 c6                	mov    esi,eax
c00061e2:	85 c0                	test   eax,eax
c00061e4:	74 4c                	je     c0006232 <f_stat+0x86>
c00061e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061ea:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061f0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061f3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061f6:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061fa:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061fe:	e8 88 ec ff ff       	call   c0004e8b <follow_path>
c0006203:	89 c3                	mov    ebx,eax
c0006205:	85 c0                	test   eax,eax
c0006207:	75 1d                	jne    c0006226 <f_stat+0x7a>
c0006209:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000620e:	78 11                	js     c0006221 <f_stat+0x75>
c0006210:	85 ff                	test   edi,edi
c0006212:	74 12                	je     c0006226 <f_stat+0x7a>
c0006214:	89 fa                	mov    edx,edi
c0006216:	8d 44 24 04          	lea    eax,[esp+0x4]
c000621a:	e8 e0 e9 ff ff       	call   c0004bff <get_fileinfo>
c000621f:	eb 05                	jmp    c0006226 <f_stat+0x7a>
c0006221:	bb 06 00 00 00       	mov    ebx,0x6
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	56                   	push   esi
c000622a:	e8 9f 22 00 00       	call   c00084ce <ff_memfree>
c000622f:	83 c4 10             	add    esp,0x10
c0006232:	83 c4 50             	add    esp,0x50
c0006235:	89 d8                	mov    eax,ebx
c0006237:	5b                   	pop    ebx
c0006238:	5e                   	pop    esi
c0006239:	5f                   	pop    edi
c000623a:	c3                   	ret    

c000623b <f_getfree>:
c000623b:	55                   	push   ebp
c000623c:	31 c9                	xor    ecx,ecx
c000623e:	57                   	push   edi
c000623f:	56                   	push   esi
c0006240:	53                   	push   ebx
c0006241:	83 ec 5c             	sub    esp,0x5c
c0006244:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006248:	8d 44 24 70          	lea    eax,[esp+0x70]
c000624c:	e8 c4 c4 ff ff       	call   c0002715 <mount_volume>
c0006251:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006255:	85 c0                	test   eax,eax
c0006257:	0f 85 9d 01 00 00    	jne    c00063fa <f_getfree+0x1bf>
c000625d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006261:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006265:	89 02                	mov    DWORD PTR [edx],eax
c0006267:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000626a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000626d:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006270:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006274:	39 f2                	cmp    edx,esi
c0006276:	77 0b                	ja     c0006283 <f_getfree+0x48>
c0006278:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000627c:	89 10                	mov    DWORD PTR [eax],edx
c000627e:	e9 77 01 00 00       	jmp    c00063fa <f_getfree+0x1bf>
c0006283:	8a 10                	mov    dl,BYTE PTR [eax]
c0006285:	80 fa 01             	cmp    dl,0x1
c0006288:	75 3a                	jne    c00062c4 <f_getfree+0x89>
c000628a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000628e:	be 02 00 00 00       	mov    esi,0x2
c0006293:	31 db                	xor    ebx,ebx
c0006295:	89 f2                	mov    edx,esi
c0006297:	8d 44 24 28          	lea    eax,[esp+0x28]
c000629b:	e8 4b cd ff ff       	call   c0002feb <get_fat>
c00062a0:	83 f8 ff             	cmp    eax,0xffffffff
c00062a3:	0f 84 28 01 00 00    	je     c00063d1 <f_getfree+0x196>
c00062a9:	83 f8 01             	cmp    eax,0x1
c00062ac:	0f 84 29 01 00 00    	je     c00063db <f_getfree+0x1a0>
c00062b2:	83 d3 00             	adc    ebx,0x0
c00062b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062b9:	46                   	inc    esi
c00062ba:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062bd:	77 d6                	ja     c0006295 <f_getfree+0x5a>
c00062bf:	e9 25 01 00 00       	jmp    c00063e9 <f_getfree+0x1ae>
c00062c4:	80 fa 04             	cmp    dl,0x4
c00062c7:	0f 85 88 00 00 00    	jne    c0006355 <f_getfree+0x11a>
c00062cd:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062d0:	31 ed                	xor    ebp,ebp
c00062d2:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062dd:	31 db                	xor    ebx,ebx
c00062df:	85 ed                	test   ebp,ebp
c00062e1:	75 3f                	jne    c0006322 <f_getfree+0xe7>
c00062e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062eb:	83 c0 01             	add    eax,0x1
c00062ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062f2:	83 d2 00             	adc    edx,0x0
c00062f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006301:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006305:	e8 59 c1 ff ff       	call   c0002463 <move_window>
c000630a:	85 c0                	test   eax,eax
c000630c:	0f 85 d3 00 00 00    	jne    c00063e5 <f_getfree+0x1aa>
c0006312:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006316:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000631a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000631e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006322:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006326:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006329:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c000632d:	89 cf                	mov    edi,ecx
c000632f:	85 f6                	test   esi,esi
c0006331:	74 12                	je     c0006345 <f_getfree+0x10a>
c0006333:	88 c1                	mov    cl,al
c0006335:	83 e1 01             	and    ecx,0x1
c0006338:	80 f9 01             	cmp    cl,0x1
c000633b:	83 d3 00             	adc    ebx,0x0
c000633e:	d0 e8                	shr    al,1
c0006340:	4e                   	dec    esi
c0006341:	39 fe                	cmp    esi,edi
c0006343:	75 ea                	jne    c000632f <f_getfree+0xf4>
c0006345:	45                   	inc    ebp
c0006346:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000634c:	85 f6                	test   esi,esi
c000634e:	75 8f                	jne    c00062df <f_getfree+0xa4>
c0006350:	e9 94 00 00 00       	jmp    c00063e9 <f_getfree+0x1ae>
c0006355:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006358:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000635b:	31 f6                	xor    esi,esi
c000635d:	31 db                	xor    ebx,ebx
c000635f:	85 f6                	test   esi,esi
c0006361:	75 1b                	jne    c000637e <f_getfree+0x143>
c0006363:	89 d7                	mov    edi,edx
c0006365:	89 cd                	mov    ebp,ecx
c0006367:	83 c7 01             	add    edi,0x1
c000636a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000636e:	83 d5 00             	adc    ebp,0x0
c0006371:	e8 ed c0 ff ff       	call   c0002463 <move_window>
c0006376:	85 c0                	test   eax,eax
c0006378:	75 6b                	jne    c00063e5 <f_getfree+0x1aa>
c000637a:	89 fa                	mov    edx,edi
c000637c:	89 e9                	mov    ecx,ebp
c000637e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006382:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006386:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000638a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000638d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006391:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006395:	75 11                	jne    c00063a8 <f_getfree+0x16d>
c0006397:	e8 e9 b8 ff ff       	call   c0001c85 <ld_word>
c000639c:	66 83 f8 01          	cmp    ax,0x1
c00063a0:	83 d3 00             	adc    ebx,0x0
c00063a3:	83 c6 02             	add    esi,0x2
c00063a6:	eb 13                	jmp    c00063bb <f_getfree+0x180>
c00063a8:	e8 e5 b8 ff ff       	call   c0001c92 <ld_dword>
c00063ad:	25 ff ff ff 0f       	and    eax,0xfffffff
c00063b2:	83 f8 01             	cmp    eax,0x1
c00063b5:	83 d3 00             	adc    ebx,0x0
c00063b8:	83 c6 04             	add    esi,0x4
c00063bb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063c9:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063cd:	75 90                	jne    c000635f <f_getfree+0x124>
c00063cf:	eb 18                	jmp    c00063e9 <f_getfree+0x1ae>
c00063d1:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063d9:	eb 0e                	jmp    c00063e9 <f_getfree+0x1ae>
c00063db:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063e3:	eb 04                	jmp    c00063e9 <f_getfree+0x1ae>
c00063e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063e9:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063ed:	89 18                	mov    DWORD PTR [eax],ebx
c00063ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063f3:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063f6:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063fe:	83 c4 5c             	add    esp,0x5c
c0006401:	5b                   	pop    ebx
c0006402:	5e                   	pop    esi
c0006403:	5f                   	pop    edi
c0006404:	5d                   	pop    ebp
c0006405:	c3                   	ret    

c0006406 <f_truncate>:
c0006406:	56                   	push   esi
c0006407:	53                   	push   ebx
c0006408:	83 ec 14             	sub    esp,0x14
c000640b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000640f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006413:	89 d8                	mov    eax,ebx
c0006415:	e8 6e bf ff ff       	call   c0002388 <validate>
c000641a:	89 c6                	mov    esi,eax
c000641c:	85 c0                	test   eax,eax
c000641e:	0f 85 d2 00 00 00    	jne    c00064f6 <f_truncate+0xf0>
c0006424:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006428:	85 f6                	test   esi,esi
c000642a:	0f 85 c6 00 00 00    	jne    c00064f6 <f_truncate+0xf0>
c0006430:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006434:	0f 84 b7 00 00 00    	je     c00064f1 <f_truncate+0xeb>
c000643a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000643d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006440:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006443:	89 d1                	mov    ecx,edx
c0006445:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006448:	0f 83 a8 00 00 00    	jae    c00064f6 <f_truncate+0xf0>
c000644e:	09 c2                	or     edx,eax
c0006450:	75 15                	jne    c0006467 <f_truncate+0x61>
c0006452:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006455:	31 c9                	xor    ecx,ecx
c0006457:	89 d8                	mov    eax,ebx
c0006459:	e8 7a d0 ff ff       	call   c00034d8 <remove_chain>
c000645e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006465:	eb 35                	jmp    c000649c <f_truncate+0x96>
c0006467:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000646a:	89 d8                	mov    eax,ebx
c000646c:	e8 7a cb ff ff       	call   c0002feb <get_fat>
c0006471:	89 c2                	mov    edx,eax
c0006473:	b8 01 00 00 00       	mov    eax,0x1
c0006478:	83 fa ff             	cmp    edx,0xffffffff
c000647b:	74 1f                	je     c000649c <f_truncate+0x96>
c000647d:	b8 02 00 00 00       	mov    eax,0x2
c0006482:	83 fa 01             	cmp    edx,0x1
c0006485:	74 15                	je     c000649c <f_truncate+0x96>
c0006487:	31 c0                	xor    eax,eax
c0006489:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000648d:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006490:	76 0a                	jbe    c000649c <f_truncate+0x96>
c0006492:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006495:	89 d8                	mov    eax,ebx
c0006497:	e8 3c d0 ff ff       	call   c00034d8 <remove_chain>
c000649c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000649f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00064a2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00064a5:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00064a8:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00064ab:	83 ca 40             	or     edx,0x40
c00064ae:	85 c0                	test   eax,eax
c00064b0:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00064b3:	75 35                	jne    c00064ea <f_truncate+0xe4>
c00064b5:	84 d2                	test   dl,dl
c00064b7:	79 3d                	jns    c00064f6 <f_truncate+0xf0>
c00064b9:	83 ec 0c             	sub    esp,0xc
c00064bc:	8d 43 50             	lea    eax,[ebx+0x50]
c00064bf:	6a 01                	push   0x1
c00064c1:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064c4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064c7:	50                   	push   eax
c00064c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064d0:	50                   	push   eax
c00064d1:	e8 7a b7 ff ff       	call   c0001c50 <disk_write>
c00064d6:	83 c4 20             	add    esp,0x20
c00064d9:	85 c0                	test   eax,eax
c00064db:	75 08                	jne    c00064e5 <f_truncate+0xdf>
c00064dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064e1:	31 f6                	xor    esi,esi
c00064e3:	eb 11                	jmp    c00064f6 <f_truncate+0xf0>
c00064e5:	b8 01 00 00 00       	mov    eax,0x1
c00064ea:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064ed:	89 c6                	mov    esi,eax
c00064ef:	eb 05                	jmp    c00064f6 <f_truncate+0xf0>
c00064f1:	be 07 00 00 00       	mov    esi,0x7
c00064f6:	89 f0                	mov    eax,esi
c00064f8:	83 c4 14             	add    esp,0x14
c00064fb:	5b                   	pop    ebx
c00064fc:	5e                   	pop    esi
c00064fd:	c3                   	ret    

c00064fe <f_unlink>:
c00064fe:	56                   	push   esi
c00064ff:	b9 02 00 00 00       	mov    ecx,0x2
c0006504:	53                   	push   ebx
c0006505:	81 ec e4 00 00 00    	sub    esp,0xe4
c000650b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000650f:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006516:	e8 fa c1 ff ff       	call   c0002715 <mount_volume>
c000651b:	85 c0                	test   eax,eax
c000651d:	0f 85 55 01 00 00    	jne    c0006678 <f_unlink+0x17a>
c0006523:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006527:	83 ec 0c             	sub    esp,0xc
c000652a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000652e:	68 60 04 00 00       	push   0x460
c0006533:	e8 80 1f 00 00       	call   c00084b8 <ff_memalloc>
c0006538:	83 c4 10             	add    esp,0x10
c000653b:	89 c3                	mov    ebx,eax
c000653d:	b8 11 00 00 00       	mov    eax,0x11
c0006542:	85 db                	test   ebx,ebx
c0006544:	0f 84 2e 01 00 00    	je     c0006678 <f_unlink+0x17a>
c000654a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000654e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006554:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006557:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000655a:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006561:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006565:	e8 21 e9 ff ff       	call   c0004e8b <follow_path>
c000656a:	85 c0                	test   eax,eax
c000656c:	0f 85 f2 00 00 00    	jne    c0006664 <f_unlink+0x166>
c0006572:	b8 06 00 00 00       	mov    eax,0x6
c0006577:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000657f:	0f 88 df 00 00 00    	js     c0006664 <f_unlink+0x166>
c0006585:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000658a:	74 0a                	je     c0006596 <f_unlink+0x98>
c000658c:	b8 07 00 00 00       	mov    eax,0x7
c0006591:	e9 ce 00 00 00       	jmp    c0006664 <f_unlink+0x166>
c0006596:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000659a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000659e:	8a 02                	mov    al,BYTE PTR [edx]
c00065a0:	3c 04                	cmp    al,0x4
c00065a2:	75 12                	jne    c00065b6 <f_unlink+0xb8>
c00065a4:	8d 42 10             	lea    eax,[edx+0x10]
c00065a7:	8d 54 24 20          	lea    edx,[esp+0x20]
c00065ab:	e8 a1 e8 ff ff       	call   c0004e51 <init_alloc_info.isra.2>
c00065b0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00065b4:	eb 0e                	jmp    c00065c4 <f_unlink+0xc6>
c00065b6:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065bd:	e8 3e e8 ff ff       	call   c0004e00 <ld_clust.isra.0>
c00065c2:	89 c6                	mov    esi,eax
c00065c4:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065c9:	75 12                	jne    c00065dd <f_unlink+0xdf>
c00065cb:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065cf:	e8 94 d6 ff ff       	call   c0003c68 <dir_remove>
c00065d4:	85 c0                	test   eax,eax
c00065d6:	74 6c                	je     c0006644 <f_unlink+0x146>
c00065d8:	e9 87 00 00 00       	jmp    c0006664 <f_unlink+0x166>
c00065dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065e1:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065e8:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065ef:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065f2:	75 21                	jne    c0006615 <f_unlink+0x117>
c00065f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065fc:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006603:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c000660a:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000660e:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006615:	31 d2                	xor    edx,edx
c0006617:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000661e:	e8 be cb ff ff       	call   c00031e1 <dir_sdi>
c0006623:	85 c0                	test   eax,eax
c0006625:	75 3d                	jne    c0006664 <f_unlink+0x166>
c0006627:	31 d2                	xor    edx,edx
c0006629:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006630:	e8 bc d3 ff ff       	call   c00039f1 <dir_read>
c0006635:	85 c0                	test   eax,eax
c0006637:	0f 84 4f ff ff ff    	je     c000658c <f_unlink+0x8e>
c000663d:	83 f8 04             	cmp    eax,0x4
c0006640:	75 22                	jne    c0006664 <f_unlink+0x166>
c0006642:	eb 87                	jmp    c00065cb <f_unlink+0xcd>
c0006644:	85 f6                	test   esi,esi
c0006646:	75 0b                	jne    c0006653 <f_unlink+0x155>
c0006648:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000664c:	e8 3d df ff ff       	call   c000458e <sync_fs>
c0006651:	eb 11                	jmp    c0006664 <f_unlink+0x166>
c0006653:	31 c9                	xor    ecx,ecx
c0006655:	89 f2                	mov    edx,esi
c0006657:	8d 44 24 20          	lea    eax,[esp+0x20]
c000665b:	e8 78 ce ff ff       	call   c00034d8 <remove_chain>
c0006660:	85 c0                	test   eax,eax
c0006662:	74 e4                	je     c0006648 <f_unlink+0x14a>
c0006664:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006668:	83 ec 0c             	sub    esp,0xc
c000666b:	53                   	push   ebx
c000666c:	e8 5d 1e 00 00       	call   c00084ce <ff_memfree>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006678:	81 c4 e4 00 00 00    	add    esp,0xe4
c000667e:	5b                   	pop    ebx
c000667f:	5e                   	pop    esi
c0006680:	c3                   	ret    

c0006681 <f_mkdir>:
c0006681:	57                   	push   edi
c0006682:	b9 02 00 00 00       	mov    ecx,0x2
c0006687:	56                   	push   esi
c0006688:	53                   	push   ebx
c0006689:	83 c4 80             	add    esp,0xffffff80
c000668c:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006690:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006697:	e8 79 c0 ff ff       	call   c0002715 <mount_volume>
c000669c:	89 c3                	mov    ebx,eax
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 85 fe 01 00 00    	jne    c00068a4 <f_mkdir+0x223>
c00066a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066aa:	bb 11 00 00 00       	mov    ebx,0x11
c00066af:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00066b3:	83 ec 0c             	sub    esp,0xc
c00066b6:	68 60 04 00 00       	push   0x460
c00066bb:	e8 f8 1d 00 00       	call   c00084b8 <ff_memalloc>
c00066c0:	83 c4 10             	add    esp,0x10
c00066c3:	89 c7                	mov    edi,eax
c00066c5:	85 c0                	test   eax,eax
c00066c7:	0f 84 d7 01 00 00    	je     c00068a4 <f_mkdir+0x223>
c00066cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d1:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066d7:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066da:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066dd:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066e4:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066e8:	e8 9e e7 ff ff       	call   c0004e8b <follow_path>
c00066ed:	89 c3                	mov    ebx,eax
c00066ef:	85 c0                	test   eax,eax
c00066f1:	74 3e                	je     c0006731 <f_mkdir+0xb0>
c00066f3:	83 f8 04             	cmp    eax,0x4
c00066f6:	75 3e                	jne    c0006736 <f_mkdir+0xb5>
c00066f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066fc:	31 d2                	xor    edx,edx
c00066fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 ce cb ff ff       	call   c00032d9 <create_chain>
c000670b:	89 c6                	mov    esi,eax
c000670d:	85 c0                	test   eax,eax
c000670f:	74 0c                	je     c000671d <f_mkdir+0x9c>
c0006711:	bb 02 00 00 00       	mov    ebx,0x2
c0006716:	83 f8 01             	cmp    eax,0x1
c0006719:	74 07                	je     c0006722 <f_mkdir+0xa1>
c000671b:	eb 2a                	jmp    c0006747 <f_mkdir+0xc6>
c000671d:	bb 07 00 00 00       	mov    ebx,0x7
c0006722:	31 c9                	xor    ecx,ecx
c0006724:	89 f2                	mov    edx,esi
c0006726:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000672a:	e8 a9 cd ff ff       	call   c00034d8 <remove_chain>
c000672f:	eb 05                	jmp    c0006736 <f_mkdir+0xb5>
c0006731:	bb 08 00 00 00       	mov    ebx,0x8
c0006736:	83 ec 0c             	sub    esp,0xc
c0006739:	57                   	push   edi
c000673a:	e8 8f 1d 00 00       	call   c00084ce <ff_memfree>
c000673f:	83 c4 10             	add    esp,0x10
c0006742:	e9 5d 01 00 00       	jmp    c00068a4 <f_mkdir+0x223>
c0006747:	bb 01 00 00 00       	mov    ebx,0x1
c000674c:	83 f8 ff             	cmp    eax,0xffffffff
c000674f:	74 d1                	je     c0006722 <f_mkdir+0xa1>
c0006751:	89 f2                	mov    edx,esi
c0006753:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006757:	e8 c4 ce ff ff       	call   c0003620 <dir_clear>
c000675c:	89 c3                	mov    ebx,eax
c000675e:	85 c0                	test   eax,eax
c0006760:	75 c0                	jne    c0006722 <f_mkdir+0xa1>
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006769:	74 69                	je     c00067d4 <f_mkdir+0x153>
c000676b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006770:	83 c0 54             	add    eax,0x54
c0006773:	ba 20 00 00 00       	mov    edx,0x20
c0006778:	e8 9c b5 ff ff       	call   c0001d19 <mem_set>
c000677d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006781:	ba 00 00 21 50       	mov    edx,0x50210000
c0006786:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000678a:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000678e:	83 c0 6a             	add    eax,0x6a
c0006791:	e8 65 b5 ff ff       	call   c0001cfb <st_dword>
c0006796:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000679a:	89 f1                	mov    ecx,esi
c000679c:	8d 50 54             	lea    edx,[eax+0x54]
c000679f:	e8 85 e6 ff ff       	call   c0004e29 <st_clust.isra.1>
c00067a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a8:	b9 20 00 00 00       	mov    ecx,0x20
c00067ad:	8d 50 54             	lea    edx,[eax+0x54]
c00067b0:	83 c0 74             	add    eax,0x74
c00067b3:	e8 4c b5 ff ff       	call   c0001d04 <mem_cpy>
c00067b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067bc:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067c0:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067c4:	8d 50 74             	lea    edx,[eax+0x74]
c00067c7:	e8 5d e6 ff ff       	call   c0004e29 <st_clust.isra.1>
c00067cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067d0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067d4:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067d8:	e8 2f db ff ff       	call   c000430c <dir_register>
c00067dd:	89 c3                	mov    ebx,eax
c00067df:	85 c0                	test   eax,eax
c00067e1:	0f 85 3b ff ff ff    	jne    c0006722 <f_mkdir+0xa1>
c00067e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067eb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ee:	75 74                	jne    c0006864 <f_mkdir+0x1e3>
c00067f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f3:	ba 00 00 21 50       	mov    edx,0x50210000
c00067f8:	83 c0 0c             	add    eax,0xc
c00067fb:	e8 fb b4 ff ff       	call   c0001cfb <st_dword>
c0006800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006804:	89 f2                	mov    edx,esi
c0006806:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006809:	83 c0 34             	add    eax,0x34
c000680c:	e8 ea b4 ff ff       	call   c0001cfb <st_dword>
c0006811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006815:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006819:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000681c:	c1 e2 09             	shl    edx,0x9
c000681f:	83 c0 38             	add    eax,0x38
c0006822:	e8 d4 b4 ff ff       	call   c0001cfb <st_dword>
c0006827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000682b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000682f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006832:	c1 e2 09             	shl    edx,0x9
c0006835:	83 c0 28             	add    eax,0x28
c0006838:	e8 be b4 ff ff       	call   c0001cfb <st_dword>
c000683d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006841:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006844:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006848:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000684b:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000684f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006853:	e8 8b d3 ff ff       	call   c0003be3 <store_xdir>
c0006858:	89 c3                	mov    ebx,eax
c000685a:	85 c0                	test   eax,eax
c000685c:	0f 85 d4 fe ff ff    	jne    c0006736 <f_mkdir+0xb5>
c0006862:	eb 30                	jmp    c0006894 <f_mkdir+0x213>
c0006864:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006868:	ba 00 00 21 50       	mov    edx,0x50210000
c000686d:	83 c0 16             	add    eax,0x16
c0006870:	e8 86 b4 ff ff       	call   c0001cfb <st_dword>
c0006875:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006879:	89 f1                	mov    ecx,esi
c000687b:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000687f:	e8 a5 e5 ff ff       	call   c0004e29 <st_clust.isra.1>
c0006884:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006888:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000688c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006890:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006894:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006898:	e8 f1 dc ff ff       	call   c000458e <sync_fs>
c000689d:	89 c3                	mov    ebx,eax
c000689f:	e9 92 fe ff ff       	jmp    c0006736 <f_mkdir+0xb5>
c00068a4:	83 ec 80             	sub    esp,0xffffff80
c00068a7:	89 d8                	mov    eax,ebx
c00068a9:	5b                   	pop    ebx
c00068aa:	5e                   	pop    esi
c00068ab:	5f                   	pop    edi
c00068ac:	c3                   	ret    

c00068ad <f_rename>:
c00068ad:	55                   	push   ebp
c00068ae:	57                   	push   edi
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	81 ec fc 00 00 00    	sub    esp,0xfc
c00068b7:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068be:	e8 a4 b9 ff ff       	call   c0002267 <get_ldnumber>
c00068c3:	b9 02 00 00 00       	mov    ecx,0x2
c00068c8:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068cc:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068d3:	e8 3d be ff ff       	call   c0002715 <mount_volume>
c00068d8:	85 c0                	test   eax,eax
c00068da:	0f 85 b5 02 00 00    	jne    c0006b95 <f_rename+0x2e8>
c00068e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e4:	83 ec 0c             	sub    esp,0xc
c00068e7:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068eb:	68 60 04 00 00       	push   0x460
c00068f0:	e8 c3 1b 00 00       	call   c00084b8 <ff_memalloc>
c00068f5:	83 c4 10             	add    esp,0x10
c00068f8:	89 c3                	mov    ebx,eax
c00068fa:	b8 11 00 00 00       	mov    eax,0x11
c00068ff:	85 db                	test   ebx,ebx
c0006901:	0f 84 8e 02 00 00    	je     c0006b95 <f_rename+0x2e8>
c0006907:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000690b:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006911:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006914:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006917:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000691e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006922:	e8 64 e5 ff ff       	call   c0004e8b <follow_path>
c0006927:	85 c0                	test   eax,eax
c0006929:	0f 85 52 02 00 00    	jne    c0006b81 <f_rename+0x2d4>
c000692f:	b8 06 00 00 00       	mov    eax,0x6
c0006934:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c000693c:	0f 85 3f 02 00 00    	jne    c0006b81 <f_rename+0x2d4>
c0006942:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006946:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006949:	0f 85 05 01 00 00    	jne    c0006a54 <f_rename+0x1a7>
c000694f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006952:	b9 40 00 00 00       	mov    ecx,0x40
c0006957:	8d 44 24 18          	lea    eax,[esp+0x18]
c000695b:	e8 a4 b3 ff ff       	call   c0001d04 <mem_cpy>
c0006960:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006965:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006969:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006970:	e8 8f b3 ff ff       	call   c0001d04 <mem_cpy>
c0006975:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000697c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006983:	e8 03 e5 ff ff       	call   c0004e8b <follow_path>
c0006988:	85 c0                	test   eax,eax
c000698a:	75 29                	jne    c00069b5 <f_rename+0x108>
c000698c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006990:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006997:	74 0a                	je     c00069a3 <f_rename+0xf6>
c0006999:	b8 08 00 00 00       	mov    eax,0x8
c000699e:	e9 de 01 00 00       	jmp    c0006b81 <f_rename+0x2d4>
c00069a3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00069aa:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00069b1:	75 e6                	jne    c0006999 <f_rename+0xec>
c00069b3:	eb 09                	jmp    c00069be <f_rename+0x111>
c00069b5:	83 f8 04             	cmp    eax,0x4
c00069b8:	0f 85 c3 01 00 00    	jne    c0006b81 <f_rename+0x2d4>
c00069be:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069c5:	e8 42 d9 ff ff       	call   c000430c <dir_register>
c00069ca:	85 c0                	test   eax,eax
c00069cc:	0f 85 af 01 00 00    	jne    c0006b81 <f_rename+0x2d4>
c00069d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d6:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069d9:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069dc:	89 c5                	mov    ebp,eax
c00069de:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069e1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069e5:	8d 46 24             	lea    eax,[esi+0x24]
c00069e8:	e8 98 b2 ff ff       	call   c0001c85 <ld_word>
c00069ed:	b9 40 00 00 00       	mov    ecx,0x40
c00069f2:	89 c7                	mov    edi,eax
c00069f4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069f8:	89 f0                	mov    eax,esi
c00069fa:	e8 05 b3 ff ff       	call   c0001d04 <mem_cpy>
c00069ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a03:	89 e9                	mov    ecx,ebp
c0006a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a08:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006a0b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006a0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a13:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a16:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006a19:	0f b7 d7             	movzx  edx,di
c0006a1c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a1f:	83 c0 24             	add    eax,0x24
c0006a22:	e8 d0 b2 ff ff       	call   c0001cf7 <st_word>
c0006a27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a2b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a2e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a31:	a8 10                	test   al,0x10
c0006a33:	75 06                	jne    c0006a3b <f_rename+0x18e>
c0006a35:	83 c8 20             	or     eax,0x20
c0006a38:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a3b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a42:	e8 9c d1 ff ff       	call   c0003be3 <store_xdir>
c0006a47:	85 c0                	test   eax,eax
c0006a49:	0f 84 1c 01 00 00    	je     c0006b6b <f_rename+0x2be>
c0006a4f:	e9 2d 01 00 00       	jmp    c0006b81 <f_rename+0x2d4>
c0006a54:	b9 20 00 00 00       	mov    ecx,0x20
c0006a59:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a60:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a64:	e8 9b b2 ff ff       	call   c0001d04 <mem_cpy>
c0006a69:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a6e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a72:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a79:	e8 86 b2 ff ff       	call   c0001d04 <mem_cpy>
c0006a7e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a85:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a8c:	e8 fa e3 ff ff       	call   c0004e8b <follow_path>
c0006a91:	85 c0                	test   eax,eax
c0006a93:	75 27                	jne    c0006abc <f_rename+0x20f>
c0006a95:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a99:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006aa0:	0f 85 f3 fe ff ff    	jne    c0006999 <f_rename+0xec>
c0006aa6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006aad:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006ab4:	0f 85 df fe ff ff    	jne    c0006999 <f_rename+0xec>
c0006aba:	eb 09                	jmp    c0006ac5 <f_rename+0x218>
c0006abc:	83 f8 04             	cmp    eax,0x4
c0006abf:	0f 85 bc 00 00 00    	jne    c0006b81 <f_rename+0x2d4>
c0006ac5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006acc:	e8 3b d8 ff ff       	call   c000430c <dir_register>
c0006ad1:	85 c0                	test   eax,eax
c0006ad3:	0f 85 a8 00 00 00    	jne    c0006b81 <f_rename+0x2d4>
c0006ad9:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006ae0:	b9 13 00 00 00       	mov    ecx,0x13
c0006ae5:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ae8:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006aec:	e8 13 b2 ff ff       	call   c0001d04 <mem_cpy>
c0006af1:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006af5:	a8 10                	test   al,0x10
c0006af7:	75 03                	jne    c0006afc <f_rename+0x24f>
c0006af9:	83 c8 20             	or     eax,0x20
c0006afc:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b03:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b07:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006b0b:	74 5e                	je     c0006b6b <f_rename+0x2be>
c0006b0d:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006b14:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006b18:	74 51                	je     c0006b6b <f_rename+0x2be>
c0006b1a:	89 f2                	mov    edx,esi
c0006b1c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b20:	8a 07                	mov    al,BYTE PTR [edi]
c0006b22:	e8 d9 e2 ff ff       	call   c0004e00 <ld_clust.isra.0>
c0006b27:	89 c2                	mov    edx,eax
c0006b29:	89 f8                	mov    eax,edi
c0006b2b:	e8 ee b3 ff ff       	call   c0001f1e <clst2sect>
c0006b30:	89 c6                	mov    esi,eax
c0006b32:	89 d1                	mov    ecx,edx
c0006b34:	b8 02 00 00 00       	mov    eax,0x2
c0006b39:	09 f2                	or     edx,esi
c0006b3b:	74 44                	je     c0006b81 <f_rename+0x2d4>
c0006b3d:	89 f2                	mov    edx,esi
c0006b3f:	89 f8                	mov    eax,edi
c0006b41:	e8 1d b9 ff ff       	call   c0002463 <move_window>
c0006b46:	85 c0                	test   eax,eax
c0006b48:	75 37                	jne    c0006b81 <f_rename+0x2d4>
c0006b4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b4e:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b52:	75 17                	jne    c0006b6b <f_rename+0x2be>
c0006b54:	8d 50 74             	lea    edx,[eax+0x74]
c0006b57:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b5e:	e8 c6 e2 ff ff       	call   c0004e29 <st_clust.isra.1>
c0006b63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b67:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b6b:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b6f:	e8 f4 d0 ff ff       	call   c0003c68 <dir_remove>
c0006b74:	85 c0                	test   eax,eax
c0006b76:	75 09                	jne    c0006b81 <f_rename+0x2d4>
c0006b78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b7c:	e8 0d da ff ff       	call   c000458e <sync_fs>
c0006b81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b85:	83 ec 0c             	sub    esp,0xc
c0006b88:	53                   	push   ebx
c0006b89:	e8 40 19 00 00       	call   c00084ce <ff_memfree>
c0006b8e:	83 c4 10             	add    esp,0x10
c0006b91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b95:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b9b:	5b                   	pop    ebx
c0006b9c:	5e                   	pop    esi
c0006b9d:	5f                   	pop    edi
c0006b9e:	5d                   	pop    ebp
c0006b9f:	c3                   	ret    

c0006ba0 <f_chmod>:
c0006ba0:	57                   	push   edi
c0006ba1:	b9 02 00 00 00       	mov    ecx,0x2
c0006ba6:	56                   	push   esi
c0006ba7:	53                   	push   ebx
c0006ba8:	83 ec 60             	sub    esp,0x60
c0006bab:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006baf:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006bb3:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006bb7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006bbb:	e8 55 bb ff ff       	call   c0002715 <mount_volume>
c0006bc0:	85 c0                	test   eax,eax
c0006bc2:	0f 85 af 00 00 00    	jne    c0006c77 <f_chmod+0xd7>
c0006bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bd3:	68 60 04 00 00       	push   0x460
c0006bd8:	e8 db 18 00 00       	call   c00084b8 <ff_memalloc>
c0006bdd:	83 c4 10             	add    esp,0x10
c0006be0:	89 c6                	mov    esi,eax
c0006be2:	b8 11 00 00 00       	mov    eax,0x11
c0006be7:	85 f6                	test   esi,esi
c0006be9:	0f 84 88 00 00 00    	je     c0006c77 <f_chmod+0xd7>
c0006bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bf9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bfc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bff:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c03:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c07:	e8 7f e2 ff ff       	call   c0004e8b <follow_path>
c0006c0c:	85 c0                	test   eax,eax
c0006c0e:	75 53                	jne    c0006c63 <f_chmod+0xc3>
c0006c10:	b8 06 00 00 00       	mov    eax,0x6
c0006c15:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c1a:	75 47                	jne    c0006c63 <f_chmod+0xc3>
c0006c1c:	89 f9                	mov    ecx,edi
c0006c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c22:	83 e1 27             	and    ecx,0x27
c0006c25:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c28:	75 1d                	jne    c0006c47 <f_chmod+0xa7>
c0006c2a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c2d:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c30:	21 cb                	and    ebx,ecx
c0006c32:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c35:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c38:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c3c:	e8 a2 cf ff ff       	call   c0003be3 <store_xdir>
c0006c41:	85 c0                	test   eax,eax
c0006c43:	75 1e                	jne    c0006c63 <f_chmod+0xc3>
c0006c45:	eb 13                	jmp    c0006c5a <f_chmod+0xba>
c0006c47:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c4b:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c4e:	21 cb                	and    ebx,ecx
c0006c50:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c53:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c56:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5e:	e8 2b d9 ff ff       	call   c000458e <sync_fs>
c0006c63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c67:	83 ec 0c             	sub    esp,0xc
c0006c6a:	56                   	push   esi
c0006c6b:	e8 5e 18 00 00       	call   c00084ce <ff_memfree>
c0006c70:	83 c4 10             	add    esp,0x10
c0006c73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c77:	83 c4 60             	add    esp,0x60
c0006c7a:	5b                   	pop    ebx
c0006c7b:	5e                   	pop    esi
c0006c7c:	5f                   	pop    edi
c0006c7d:	c3                   	ret    

c0006c7e <f_utime>:
c0006c7e:	56                   	push   esi
c0006c7f:	b9 02 00 00 00       	mov    ecx,0x2
c0006c84:	53                   	push   ebx
c0006c85:	83 ec 64             	sub    esp,0x64
c0006c88:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c8c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c94:	e8 7c ba ff ff       	call   c0002715 <mount_volume>
c0006c99:	85 c0                	test   eax,eax
c0006c9b:	0f 85 b5 00 00 00    	jne    c0006d56 <f_utime+0xd8>
c0006ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca5:	83 ec 0c             	sub    esp,0xc
c0006ca8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006cac:	68 60 04 00 00       	push   0x460
c0006cb1:	e8 02 18 00 00       	call   c00084b8 <ff_memalloc>
c0006cb6:	83 c4 10             	add    esp,0x10
c0006cb9:	89 c3                	mov    ebx,eax
c0006cbb:	b8 11 00 00 00       	mov    eax,0x11
c0006cc0:	85 db                	test   ebx,ebx
c0006cc2:	0f 84 8e 00 00 00    	je     c0006d56 <f_utime+0xd8>
c0006cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ccc:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cd2:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cd5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cd8:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cdc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ce0:	e8 a6 e1 ff ff       	call   c0004e8b <follow_path>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	75 59                	jne    c0006d42 <f_utime+0xc4>
c0006ce9:	b8 06 00 00 00       	mov    eax,0x6
c0006cee:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cf3:	75 4d                	jne    c0006d42 <f_utime+0xc4>
c0006cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf9:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cfd:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006d01:	c1 e2 10             	shl    edx,0x10
c0006d04:	09 ca                	or     edx,ecx
c0006d06:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d09:	75 1a                	jne    c0006d25 <f_utime+0xa7>
c0006d0b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006d0e:	83 c0 0c             	add    eax,0xc
c0006d11:	e8 e5 af ff ff       	call   c0001cfb <st_dword>
c0006d16:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d1a:	e8 c4 ce ff ff       	call   c0003be3 <store_xdir>
c0006d1f:	85 c0                	test   eax,eax
c0006d21:	75 1f                	jne    c0006d42 <f_utime+0xc4>
c0006d23:	eb 14                	jmp    c0006d39 <f_utime+0xbb>
c0006d25:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d29:	83 c0 16             	add    eax,0x16
c0006d2c:	e8 ca af ff ff       	call   c0001cfb <st_dword>
c0006d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d35:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d3d:	e8 4c d8 ff ff       	call   c000458e <sync_fs>
c0006d42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d46:	83 ec 0c             	sub    esp,0xc
c0006d49:	53                   	push   ebx
c0006d4a:	e8 7f 17 00 00       	call   c00084ce <ff_memfree>
c0006d4f:	83 c4 10             	add    esp,0x10
c0006d52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d56:	83 c4 64             	add    esp,0x64
c0006d59:	5b                   	pop    ebx
c0006d5a:	5e                   	pop    esi
c0006d5b:	c3                   	ret    

c0006d5c <f_getlabel>:
c0006d5c:	55                   	push   ebp
c0006d5d:	31 c9                	xor    ecx,ecx
c0006d5f:	57                   	push   edi
c0006d60:	56                   	push   esi
c0006d61:	53                   	push   ebx
c0006d62:	83 ec 6c             	sub    esp,0x6c
c0006d65:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d69:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d70:	e8 a0 b9 ff ff       	call   c0002715 <mount_volume>
c0006d75:	89 c6                	mov    esi,eax
c0006d77:	85 c0                	test   eax,eax
c0006d79:	0f 85 c1 01 00 00    	jne    c0006f40 <f_getlabel+0x1e4>
c0006d7f:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d87:	0f 84 5f 01 00 00    	je     c0006eec <f_getlabel+0x190>
c0006d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d91:	31 d2                	xor    edx,edx
c0006d93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d97:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006da3:	e8 39 c4 ff ff       	call   c00031e1 <dir_sdi>
c0006da8:	85 c0                	test   eax,eax
c0006daa:	0f 85 2d 01 00 00    	jne    c0006edd <f_getlabel+0x181>
c0006db0:	ba 01 00 00 00       	mov    edx,0x1
c0006db5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006db9:	e8 33 cc ff ff       	call   c00039f1 <dir_read>
c0006dbe:	85 c0                	test   eax,eax
c0006dc0:	0f 85 17 01 00 00    	jne    c0006edd <f_getlabel+0x181>
c0006dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dca:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006dcd:	74 09                	je     c0006dd8 <f_getlabel+0x7c>
c0006dcf:	31 db                	xor    ebx,ebx
c0006dd1:	31 c9                	xor    ecx,ecx
c0006dd3:	e9 c8 00 00 00       	jmp    c0006ea0 <f_getlabel+0x144>
c0006dd8:	31 ed                	xor    ebp,ebp
c0006dda:	31 db                	xor    ebx,ebx
c0006ddc:	31 ff                	xor    edi,edi
c0006dde:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006de2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006de6:	39 fa                	cmp    edx,edi
c0006de8:	76 4b                	jbe    c0006e35 <f_getlabel+0xd9>
c0006dea:	47                   	inc    edi
c0006deb:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dee:	01 d0                	add    eax,edx
c0006df0:	e8 90 ae ff ff       	call   c0001c85 <ld_word>
c0006df5:	66 85 ed             	test   bp,bp
c0006df8:	75 0d                	jne    c0006e07 <f_getlabel+0xab>
c0006dfa:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006e00:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006e05:	76 28                	jbe    c0006e2f <f_getlabel+0xd3>
c0006e07:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e0e:	89 e9                	mov    ecx,ebp
c0006e10:	01 da                	add    edx,ebx
c0006e12:	c1 e1 10             	shl    ecx,0x10
c0006e15:	0f b7 c0             	movzx  eax,ax
c0006e18:	09 c8                	or     eax,ecx
c0006e1a:	b9 04 00 00 00       	mov    ecx,0x4
c0006e1f:	e8 01 b0 ff ff       	call   c0001e25 <put_utf>
c0006e24:	84 c0                	test   al,al
c0006e26:	74 0b                	je     c0006e33 <f_getlabel+0xd7>
c0006e28:	0f b6 c0             	movzx  eax,al
c0006e2b:	01 c3                	add    ebx,eax
c0006e2d:	31 c0                	xor    eax,eax
c0006e2f:	89 c5                	mov    ebp,eax
c0006e31:	eb ab                	jmp    c0006dde <f_getlabel+0x82>
c0006e33:	31 db                	xor    ebx,ebx
c0006e35:	66 85 ed             	test   bp,bp
c0006e38:	74 02                	je     c0006e3c <f_getlabel+0xe0>
c0006e3a:	31 db                	xor    ebx,ebx
c0006e3c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e43:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e47:	e9 a0 00 00 00       	jmp    c0006eec <f_getlabel+0x190>
c0006e4c:	83 ff 0b             	cmp    edi,0xb
c0006e4f:	74 11                	je     c0006e62 <f_getlabel+0x106>
c0006e51:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e5a:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e5d:	c1 e0 08             	shl    eax,0x8
c0006e60:	09 c2                	or     edx,eax
c0006e62:	0f b7 d2             	movzx  edx,dx
c0006e65:	50                   	push   eax
c0006e66:	50                   	push   eax
c0006e67:	68 b5 01 00 00       	push   0x1b5
c0006e6c:	52                   	push   edx
c0006e6d:	e8 03 17 00 00       	call   c0008575 <ff_oem2uni>
c0006e72:	83 c4 10             	add    esp,0x10
c0006e75:	66 85 c0             	test   ax,ax
c0006e78:	74 46                	je     c0006ec0 <f_getlabel+0x164>
c0006e7a:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e81:	0f b7 c0             	movzx  eax,ax
c0006e84:	01 da                	add    edx,ebx
c0006e86:	b9 04 00 00 00       	mov    ecx,0x4
c0006e8b:	e8 95 af ff ff       	call   c0001e25 <put_utf>
c0006e90:	84 c0                	test   al,al
c0006e92:	74 2c                	je     c0006ec0 <f_getlabel+0x164>
c0006e94:	0f b6 c0             	movzx  eax,al
c0006e97:	01 c3                	add    ebx,eax
c0006e99:	83 ff 0b             	cmp    edi,0xb
c0006e9c:	74 24                	je     c0006ec2 <f_getlabel+0x166>
c0006e9e:	89 f9                	mov    ecx,edi
c0006ea0:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006ea4:	8d 79 01             	lea    edi,[ecx+0x1]
c0006ea7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006eac:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006eb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006eb5:	e8 9f ae ff ff       	call   c0001d59 <dbc_1st>
c0006eba:	85 c0                	test   eax,eax
c0006ebc:	74 a4                	je     c0006e62 <f_getlabel+0x106>
c0006ebe:	eb 8c                	jmp    c0006e4c <f_getlabel+0xf0>
c0006ec0:	31 db                	xor    ebx,ebx
c0006ec2:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ec9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ecc:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006ed3:	74 17                	je     c0006eec <f_getlabel+0x190>
c0006ed5:	4b                   	dec    ebx
c0006ed6:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ed9:	74 ee                	je     c0006ec9 <f_getlabel+0x16d>
c0006edb:	eb 0f                	jmp    c0006eec <f_getlabel+0x190>
c0006edd:	83 f8 04             	cmp    eax,0x4
c0006ee0:	75 5c                	jne    c0006f3e <f_getlabel+0x1e2>
c0006ee2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ee9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006eec:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ef4:	74 4a                	je     c0006f40 <f_getlabel+0x1e4>
c0006ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006efa:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006efd:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006f00:	e8 5e b5 ff ff       	call   c0002463 <move_window>
c0006f05:	89 c6                	mov    esi,eax
c0006f07:	85 c0                	test   eax,eax
c0006f09:	75 35                	jne    c0006f40 <f_getlabel+0x1e4>
c0006f0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006f0f:	b8 43 00 00 00       	mov    eax,0x43
c0006f14:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006f16:	80 f9 03             	cmp    cl,0x3
c0006f19:	74 0f                	je     c0006f2a <f_getlabel+0x1ce>
c0006f1b:	31 c0                	xor    eax,eax
c0006f1d:	80 f9 04             	cmp    cl,0x4
c0006f20:	0f 94 c0             	sete   al
c0006f23:	48                   	dec    eax
c0006f24:	83 e0 c3             	and    eax,0xffffffc3
c0006f27:	83 c0 64             	add    eax,0x64
c0006f2a:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f2e:	e8 5f ad ff ff       	call   c0001c92 <ld_dword>
c0006f33:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f3a:	89 07                	mov    DWORD PTR [edi],eax
c0006f3c:	eb 02                	jmp    c0006f40 <f_getlabel+0x1e4>
c0006f3e:	89 c6                	mov    esi,eax
c0006f40:	83 c4 6c             	add    esp,0x6c
c0006f43:	89 f0                	mov    eax,esi
c0006f45:	5b                   	pop    ebx
c0006f46:	5e                   	pop    esi
c0006f47:	5f                   	pop    edi
c0006f48:	5d                   	pop    ebp
c0006f49:	c3                   	ret    

c0006f4a <f_setlabel>:
c0006f4a:	56                   	push   esi
c0006f4b:	b9 02 00 00 00       	mov    ecx,0x2
c0006f50:	53                   	push   ebx
c0006f51:	83 ec 74             	sub    esp,0x74
c0006f54:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f58:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f5f:	e8 b1 b7 ff ff       	call   c0002715 <mount_volume>
c0006f64:	89 c6                	mov    esi,eax
c0006f66:	85 c0                	test   eax,eax
c0006f68:	0f 85 41 02 00 00    	jne    c00071af <f_setlabel+0x265>
c0006f6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f72:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f75:	0f 85 8e 00 00 00    	jne    c0007009 <f_setlabel+0xbf>
c0006f7b:	b9 16 00 00 00       	mov    ecx,0x16
c0006f80:	31 d2                	xor    edx,edx
c0006f82:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f86:	31 db                	xor    ebx,ebx
c0006f88:	e8 8c ad ff ff       	call   c0001d19 <mem_set>
c0006f8d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f94:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f97:	0f 86 0a 01 00 00    	jbe    c00070a7 <f_setlabel+0x15d>
c0006f9d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fa4:	e8 b6 ad ff ff       	call   c0001d5f <tchar2uni>
c0006fa9:	89 c6                	mov    esi,eax
c0006fab:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fb0:	76 2a                	jbe    c0006fdc <f_setlabel+0x92>
c0006fb2:	83 f8 ff             	cmp    eax,0xffffffff
c0006fb5:	74 05                	je     c0006fbc <f_setlabel+0x72>
c0006fb7:	83 fb 09             	cmp    ebx,0x9
c0006fba:	76 0a                	jbe    c0006fc6 <f_setlabel+0x7c>
c0006fbc:	be 06 00 00 00       	mov    esi,0x6
c0006fc1:	e9 e9 01 00 00       	jmp    c00071af <f_setlabel+0x265>
c0006fc6:	89 c2                	mov    edx,eax
c0006fc8:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fcc:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fcf:	c1 ea 10             	shr    edx,0x10
c0006fd2:	01 c8                	add    eax,ecx
c0006fd4:	43                   	inc    ebx
c0006fd5:	e8 1d ad ff ff       	call   c0001cf7 <st_word>
c0006fda:	eb 04                	jmp    c0006fe0 <f_setlabel+0x96>
c0006fdc:	85 c0                	test   eax,eax
c0006fde:	74 dc                	je     c0006fbc <f_setlabel+0x72>
c0006fe0:	89 f2                	mov    edx,esi
c0006fe2:	b8 17 9c 02 c0       	mov    eax,0xc0029c17
c0006fe7:	e8 5b ad ff ff       	call   c0001d47 <chk_chr>
c0006fec:	85 c0                	test   eax,eax
c0006fee:	75 cc                	jne    c0006fbc <f_setlabel+0x72>
c0006ff0:	83 fb 0a             	cmp    ebx,0xa
c0006ff3:	77 c7                	ja     c0006fbc <f_setlabel+0x72>
c0006ff5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ff8:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ffc:	0f b7 d6             	movzx  edx,si
c0006fff:	01 c8                	add    eax,ecx
c0007001:	43                   	inc    ebx
c0007002:	e8 f0 ac ff ff       	call   c0001cf7 <st_word>
c0007007:	eb 84                	jmp    c0006f8d <f_setlabel+0x43>
c0007009:	b9 0b 00 00 00       	mov    ecx,0xb
c000700e:	ba 20 00 00 00       	mov    edx,0x20
c0007013:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0007017:	31 db                	xor    ebx,ebx
c0007019:	e8 fb ac ff ff       	call   c0001d19 <mem_set>
c000701e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007025:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007028:	76 60                	jbe    c000708a <f_setlabel+0x140>
c000702a:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007031:	e8 29 ad ff ff       	call   c0001d5f <tchar2uni>
c0007036:	3d ff ff 00 00       	cmp    eax,0xffff
c000703b:	0f 87 7b ff ff ff    	ja     c0006fbc <f_setlabel+0x72>
c0007041:	83 ec 0c             	sub    esp,0xc
c0007044:	50                   	push   eax
c0007045:	e8 97 15 00 00       	call   c00085e1 <ff_wtoupper>
c000704a:	5a                   	pop    edx
c000704b:	59                   	pop    ecx
c000704c:	68 b5 01 00 00       	push   0x1b5
c0007051:	50                   	push   eax
c0007052:	e8 8e 14 00 00       	call   c00084e5 <ff_uni2oem>
c0007057:	83 c4 10             	add    esp,0x10
c000705a:	89 c6                	mov    esi,eax
c000705c:	66 85 c0             	test   ax,ax
c000705f:	0f 84 57 ff ff ff    	je     c0006fbc <f_setlabel+0x72>
c0007065:	0f b7 d0             	movzx  edx,ax
c0007068:	b8 10 9c 02 c0       	mov    eax,0xc0029c10
c000706d:	e8 d5 ac ff ff       	call   c0001d47 <chk_chr>
c0007072:	85 c0                	test   eax,eax
c0007074:	0f 85 42 ff ff ff    	jne    c0006fbc <f_setlabel+0x72>
c000707a:	66 81 fe ff 00       	cmp    si,0xff
c000707f:	0f 87 14 01 00 00    	ja     c0007199 <f_setlabel+0x24f>
c0007085:	e9 fa 00 00 00       	jmp    c0007184 <f_setlabel+0x23a>
c000708a:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000708f:	0f 84 27 ff ff ff    	je     c0006fbc <f_setlabel+0x72>
c0007095:	85 db                	test   ebx,ebx
c0007097:	74 0e                	je     c00070a7 <f_setlabel+0x15d>
c0007099:	8d 43 ff             	lea    eax,[ebx-0x1]
c000709c:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c00070a1:	75 04                	jne    c00070a7 <f_setlabel+0x15d>
c00070a3:	89 c3                	mov    ebx,eax
c00070a5:	eb ee                	jmp    c0007095 <f_setlabel+0x14b>
c00070a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070ab:	31 d2                	xor    edx,edx
c00070ad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00070b1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00070b9:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070bd:	e8 1f c1 ff ff       	call   c00031e1 <dir_sdi>
c00070c2:	89 c6                	mov    esi,eax
c00070c4:	85 c0                	test   eax,eax
c00070c6:	0f 85 e3 00 00 00    	jne    c00071af <f_setlabel+0x265>
c00070cc:	ba 01 00 00 00       	mov    edx,0x1
c00070d1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070d5:	e8 17 c9 ff ff       	call   c00039f1 <dir_read>
c00070da:	85 c0                	test   eax,eax
c00070dc:	75 21                	jne    c00070ff <f_setlabel+0x1b5>
c00070de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070e2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e6:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070e9:	74 5d                	je     c0007148 <f_setlabel+0x1fe>
c00070eb:	85 db                	test   ebx,ebx
c00070ed:	74 0b                	je     c00070fa <f_setlabel+0x1b0>
c00070ef:	b9 0b 00 00 00       	mov    ecx,0xb
c00070f4:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070f8:	eb 70                	jmp    c000716a <f_setlabel+0x220>
c00070fa:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070fd:	eb 70                	jmp    c000716f <f_setlabel+0x225>
c00070ff:	83 f8 04             	cmp    eax,0x4
c0007102:	75 7c                	jne    c0007180 <f_setlabel+0x236>
c0007104:	85 db                	test   ebx,ebx
c0007106:	0f 84 a3 00 00 00    	je     c00071af <f_setlabel+0x265>
c000710c:	ba 01 00 00 00       	mov    edx,0x1
c0007111:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007115:	e8 51 ca ff ff       	call   c0003b6b <dir_alloc>
c000711a:	89 c6                	mov    esi,eax
c000711c:	85 c0                	test   eax,eax
c000711e:	0f 85 8b 00 00 00    	jne    c00071af <f_setlabel+0x265>
c0007124:	31 d2                	xor    edx,edx
c0007126:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000712a:	b9 20 00 00 00       	mov    ecx,0x20
c000712f:	e8 e5 ab ff ff       	call   c0001d19 <mem_set>
c0007134:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007138:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000713b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000713f:	75 18                	jne    c0007159 <f_setlabel+0x20f>
c0007141:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007144:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007148:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c000714b:	b9 16 00 00 00       	mov    ecx,0x16
c0007150:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007154:	83 c0 02             	add    eax,0x2
c0007157:	eb 9b                	jmp    c00070f4 <f_setlabel+0x1aa>
c0007159:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000715d:	b9 0b 00 00 00       	mov    ecx,0xb
c0007162:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007166:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000716a:	e8 95 ab ff ff       	call   c0001d04 <mem_cpy>
c000716f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007173:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007177:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000717b:	e8 0e d4 ff ff       	call   c000458e <sync_fs>
c0007180:	89 c6                	mov    esi,eax
c0007182:	eb 2b                	jmp    c00071af <f_setlabel+0x265>
c0007184:	83 fb 0a             	cmp    ebx,0xa
c0007187:	0f 87 2f fe ff ff    	ja     c0006fbc <f_setlabel+0x72>
c000718d:	89 f0                	mov    eax,esi
c000718f:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007193:	43                   	inc    ebx
c0007194:	e9 85 fe ff ff       	jmp    c000701e <f_setlabel+0xd4>
c0007199:	83 fb 09             	cmp    ebx,0x9
c000719c:	0f 87 1a fe ff ff    	ja     c0006fbc <f_setlabel+0x72>
c00071a2:	89 f0                	mov    eax,esi
c00071a4:	66 c1 e8 08          	shr    ax,0x8
c00071a8:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c00071ac:	43                   	inc    ebx
c00071ad:	eb de                	jmp    c000718d <f_setlabel+0x243>
c00071af:	89 f0                	mov    eax,esi
c00071b1:	83 c4 74             	add    esp,0x74
c00071b4:	5b                   	pop    ebx
c00071b5:	5e                   	pop    esi
c00071b6:	c3                   	ret    

c00071b7 <f_forward>:
c00071b7:	55                   	push   ebp
c00071b8:	57                   	push   edi
c00071b9:	56                   	push   esi
c00071ba:	53                   	push   ebx
c00071bb:	83 ec 2c             	sub    esp,0x2c
c00071be:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071c2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071cc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071d0:	89 d8                	mov    eax,ebx
c00071d2:	e8 b1 b1 ff ff       	call   c0002388 <validate>
c00071d7:	89 c5                	mov    ebp,eax
c00071d9:	85 c0                	test   eax,eax
c00071db:	0f 85 aa 01 00 00    	jne    c000738b <f_forward+0x1d4>
c00071e1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071e5:	85 ed                	test   ebp,ebp
c00071e7:	0f 85 9e 01 00 00    	jne    c000738b <f_forward+0x1d4>
c00071ed:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071f1:	0f 84 8f 01 00 00    	je     c0007386 <f_forward+0x1cf>
c00071f7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071fa:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071fd:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007200:	bf 00 00 00 00       	mov    edi,0x0
c0007205:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007208:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000720c:	89 d1                	mov    ecx,edx
c000720e:	19 f9                	sbb    ecx,edi
c0007210:	0f 83 cf 00 00 00    	jae    c00072e5 <f_forward+0x12e>
c0007216:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000721a:	e9 c6 00 00 00       	jmp    c00072e5 <f_forward+0x12e>
c000721f:	50                   	push   eax
c0007220:	50                   	push   eax
c0007221:	6a 00                	push   0x0
c0007223:	6a 00                	push   0x0
c0007225:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007229:	83 c4 10             	add    esp,0x10
c000722c:	85 c0                	test   eax,eax
c000722e:	0f 84 57 01 00 00    	je     c000738b <f_forward+0x1d4>
c0007234:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007237:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000723e:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007242:	89 d7                	mov    edi,edx
c0007244:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007247:	89 c6                	mov    esi,eax
c0007249:	0f ac fe 09          	shrd   esi,edi,0x9
c000724d:	21 ce                	and    esi,ecx
c000724f:	89 c1                	mov    ecx,eax
c0007251:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007257:	0f 84 98 00 00 00    	je     c00072f5 <f_forward+0x13e>
c000725d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007261:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007264:	89 c8                	mov    eax,ecx
c0007266:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000726a:	e8 af ac ff ff       	call   c0001f1e <clst2sect>
c000726f:	89 d7                	mov    edi,edx
c0007271:	09 c7                	or     edi,eax
c0007273:	0f 84 9e 00 00 00    	je     c0007317 <f_forward+0x160>
c0007279:	31 ff                	xor    edi,edi
c000727b:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000727e:	01 c6                	add    esi,eax
c0007280:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007284:	11 d7                	adc    edi,edx
c0007286:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007289:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000728c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007290:	39 fa                	cmp    edx,edi
c0007292:	0f 85 a2 00 00 00    	jne    c000733a <f_forward+0x183>
c0007298:	39 f0                	cmp    eax,esi
c000729a:	0f 85 9a 00 00 00    	jne    c000733a <f_forward+0x183>
c00072a0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00072a3:	ba 00 02 00 00       	mov    edx,0x200
c00072a8:	25 ff 01 00 00       	and    eax,0x1ff
c00072ad:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00072b1:	29 c2                	sub    edx,eax
c00072b3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00072b6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00072b9:	39 d1                	cmp    ecx,edx
c00072bb:	76 02                	jbe    c00072bf <f_forward+0x108>
c00072bd:	89 d1                	mov    ecx,edx
c00072bf:	8d 73 50             	lea    esi,[ebx+0x50]
c00072c2:	52                   	push   edx
c00072c3:	01 c6                	add    esi,eax
c00072c5:	52                   	push   edx
c00072c6:	51                   	push   ecx
c00072c7:	56                   	push   esi
c00072c8:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	85 c0                	test   eax,eax
c00072d1:	74 44                	je     c0007317 <f_forward+0x160>
c00072d3:	31 ff                	xor    edi,edi
c00072d5:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072d8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072db:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072df:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072e3:	01 07                	add    DWORD PTR [edi],eax
c00072e5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072ea:	0f 85 2f ff ff ff    	jne    c000721f <f_forward+0x68>
c00072f0:	e9 96 00 00 00       	jmp    c000738b <f_forward+0x1d4>
c00072f5:	85 f6                	test   esi,esi
c00072f7:	0f 85 60 ff ff ff    	jne    c000725d <f_forward+0xa6>
c00072fd:	89 d7                	mov    edi,edx
c00072ff:	09 c7                	or     edi,eax
c0007301:	75 05                	jne    c0007308 <f_forward+0x151>
c0007303:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007306:	eb 0a                	jmp    c0007312 <f_forward+0x15b>
c0007308:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000730b:	89 d8                	mov    eax,ebx
c000730d:	e8 d9 bc ff ff       	call   c0002feb <get_fat>
c0007312:	83 f8 01             	cmp    eax,0x1
c0007315:	77 0b                	ja     c0007322 <f_forward+0x16b>
c0007317:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000731b:	bd 02 00 00 00       	mov    ebp,0x2
c0007320:	eb 69                	jmp    c000738b <f_forward+0x1d4>
c0007322:	83 f8 ff             	cmp    eax,0xffffffff
c0007325:	75 0b                	jne    c0007332 <f_forward+0x17b>
c0007327:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000732b:	bd 01 00 00 00       	mov    ebp,0x1
c0007330:	eb 59                	jmp    c000738b <f_forward+0x1d4>
c0007332:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007335:	e9 23 ff ff ff       	jmp    c000725d <f_forward+0xa6>
c000733a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000733e:	79 20                	jns    c0007360 <f_forward+0x1a9>
c0007340:	83 ec 0c             	sub    esp,0xc
c0007343:	6a 01                	push   0x1
c0007345:	52                   	push   edx
c0007346:	50                   	push   eax
c0007347:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000734b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 fb a8 ff ff       	call   c0001c50 <disk_write>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	75 cb                	jne    c0007327 <f_forward+0x170>
c000735c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007360:	83 ec 0c             	sub    esp,0xc
c0007363:	6a 01                	push   0x1
c0007365:	57                   	push   edi
c0007366:	56                   	push   esi
c0007367:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000736b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000736f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007373:	50                   	push   eax
c0007374:	e8 c1 a8 ff ff       	call   c0001c3a <disk_read>
c0007379:	83 c4 20             	add    esp,0x20
c000737c:	85 c0                	test   eax,eax
c000737e:	0f 84 1c ff ff ff    	je     c00072a0 <f_forward+0xe9>
c0007384:	eb a1                	jmp    c0007327 <f_forward+0x170>
c0007386:	bd 07 00 00 00       	mov    ebp,0x7
c000738b:	83 c4 2c             	add    esp,0x2c
c000738e:	89 e8                	mov    eax,ebp
c0007390:	5b                   	pop    ebx
c0007391:	5e                   	pop    esi
c0007392:	5f                   	pop    edi
c0007393:	5d                   	pop    ebp
c0007394:	c3                   	ret    

c0007395 <f_mkfs>:
c0007395:	55                   	push   ebp
c0007396:	57                   	push   edi
c0007397:	56                   	push   esi
c0007398:	53                   	push   ebx
c0007399:	bb 0b 00 00 00       	mov    ebx,0xb
c000739e:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00073a4:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00073ab:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00073b2:	e8 b0 ae ff ff       	call   c0002267 <get_ldnumber>
c00073b7:	85 c0                	test   eax,eax
c00073b9:	0f 88 ec 10 00 00    	js     c00084ab <f_mkfs+0x1116>
c00073bf:	8b 14 85 60 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd12a0]
c00073c6:	85 d2                	test   edx,edx
c00073c8:	74 03                	je     c00073cd <f_mkfs+0x38>
c00073ca:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073cd:	85 f6                	test   esi,esi
c00073cf:	75 05                	jne    c00073d6 <f_mkfs+0x41>
c00073d1:	be 00 9c 02 c0       	mov    esi,0xc0029c00
c00073d6:	83 ec 0c             	sub    esp,0xc
c00073d9:	0f b6 c0             	movzx  eax,al
c00073dc:	bb 03 00 00 00       	mov    ebx,0x3
c00073e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073e9:	e8 49 a8 ff ff       	call   c0001c37 <disk_initialize>
c00073ee:	83 c4 10             	add    esp,0x10
c00073f1:	a8 01                	test   al,0x1
c00073f3:	0f 85 b2 10 00 00    	jne    c00084ab <f_mkfs+0x1116>
c00073f9:	bb 0a 00 00 00       	mov    ebx,0xa
c00073fe:	a8 04                	test   al,0x4
c0007400:	0f 85 a5 10 00 00    	jne    c00084ab <f_mkfs+0x1116>
c0007406:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007409:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000740d:	85 c0                	test   eax,eax
c000740f:	75 20                	jne    c0007431 <f_mkfs+0x9c>
c0007411:	51                   	push   ecx
c0007412:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007416:	50                   	push   eax
c0007417:	6a 03                	push   0x3
c0007419:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000741d:	e8 44 a8 ff ff       	call   c0001c66 <disk_ioctl>
c0007422:	83 c4 10             	add    esp,0x10
c0007425:	85 c0                	test   eax,eax
c0007427:	74 08                	je     c0007431 <f_mkfs+0x9c>
c0007429:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007431:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007435:	8d 42 ff             	lea    eax,[edx-0x1]
c0007438:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000743d:	77 04                	ja     c0007443 <f_mkfs+0xae>
c000743f:	85 c2                	test   edx,eax
c0007441:	74 08                	je     c000744b <f_mkfs+0xb6>
c0007443:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000744b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000744e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007452:	48                   	dec    eax
c0007453:	3c 01                	cmp    al,0x1
c0007455:	76 05                	jbe    c000745c <f_mkfs+0xc7>
c0007457:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c000745c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000745f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007463:	48                   	dec    eax
c0007464:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007469:	77 07                	ja     c0007472 <f_mkfs+0xdd>
c000746b:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007470:	74 08                	je     c000747a <f_mkfs+0xe5>
c0007472:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000747a:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000747d:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007483:	77 07                	ja     c000748c <f_mkfs+0xf7>
c0007485:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007488:	85 d8                	test   eax,ebx
c000748a:	74 02                	je     c000748e <f_mkfs+0xf9>
c000748c:	31 db                	xor    ebx,ebx
c000748e:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007499:	77 0a                	ja     c00074a5 <f_mkfs+0x110>
c000749b:	bb 11 00 00 00       	mov    ebx,0x11
c00074a0:	e9 06 10 00 00       	jmp    c00084ab <f_mkfs+0x1116>
c00074a5:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00074ac:	8b 36                	mov    esi,DWORD PTR [esi]
c00074ae:	85 ed                	test   ebp,ebp
c00074b0:	75 1e                	jne    c00074d0 <f_mkfs+0x13b>
c00074b2:	83 ec 0c             	sub    esp,0xc
c00074b5:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074bc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074c1:	50                   	push   eax
c00074c2:	e8 f1 0f 00 00       	call   c00084b8 <ff_memalloc>
c00074c7:	83 c4 10             	add    esp,0x10
c00074ca:	89 c5                	mov    ebp,eax
c00074cc:	85 c0                	test   eax,eax
c00074ce:	74 cb                	je     c000749b <f_mkfs+0x106>
c00074d0:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074d8:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074e0:	52                   	push   edx
c00074e1:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074e5:	50                   	push   eax
c00074e6:	6a 01                	push   0x1
c00074e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ec:	e8 75 a7 ff ff       	call   c0001c66 <disk_ioctl>
c00074f1:	83 c4 10             	add    esp,0x10
c00074f4:	85 c0                	test   eax,eax
c00074f6:	0f 85 4a 0f 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c00074fc:	89 f1                	mov    ecx,esi
c00074fe:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007506:	83 e1 0f             	and    ecx,0xf
c0007509:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007511:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007515:	83 e6 08             	and    esi,0x8
c0007518:	75 56                	jne    c0007570 <f_mkfs+0x1db>
c000751a:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000751e:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007522:	83 ff 00             	cmp    edi,0x0
c0007525:	76 20                	jbe    c0007547 <f_mkfs+0x1b2>
c0007527:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c000752c:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007534:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000753a:	83 d7 ff             	adc    edi,0xffffffff
c000753d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007541:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007545:	eb 21                	jmp    c0007568 <f_mkfs+0x1d3>
c0007547:	ba 3f 00 00 00       	mov    edx,0x3f
c000754c:	39 f2                	cmp    edx,esi
c000754e:	19 f8                	sbb    eax,edi
c0007550:	73 1e                	jae    c0007570 <f_mkfs+0x1db>
c0007552:	83 c6 c1             	add    esi,0xffffffc1
c0007555:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000755d:	83 d7 ff             	adc    edi,0xffffffff
c0007560:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007564:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007568:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007570:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007574:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007578:	89 04 24             	mov    DWORD PTR [esp],eax
c000757b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000757f:	31 c0                	xor    eax,eax
c0007581:	ba 7f 00 00 00       	mov    edx,0x7f
c0007586:	89 c7                	mov    edi,eax
c0007588:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000758b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000758f:	0f 83 c5 0a 00 00    	jae    c000805a <f_mkfs+0xcc5>
c0007595:	89 df                	mov    edi,ebx
c0007597:	c1 ef 09             	shr    edi,0x9
c000759a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000759e:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00075a5:	c1 ef 09             	shr    edi,0x9
c00075a8:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00075ad:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00075b1:	74 29                	je     c00075dc <f_mkfs+0x247>
c00075b3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075b9:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075be:	0f 97 c2             	seta   dl
c00075c1:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075c4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075c8:	0f 92 c0             	setb   al
c00075cb:	08 c2                	or     dl,al
c00075cd:	75 5b                	jne    c000762a <f_mkfs+0x295>
c00075cf:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d3:	83 e0 07             	and    eax,0x7
c00075d6:	3c 04                	cmp    al,0x4
c00075d8:	74 50                	je     c000762a <f_mkfs+0x295>
c00075da:	eb 1b                	jmp    c00075f7 <f_mkfs+0x262>
c00075dc:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075e1:	0f 87 73 0a 00 00    	ja     c000805a <f_mkfs+0xcc5>
c00075e7:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075ed:	76 08                	jbe    c00075f7 <f_mkfs+0x262>
c00075ef:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075f7:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075fb:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075ff:	83 e0 01             	and    eax,0x1
c0007602:	80 e1 02             	and    cl,0x2
c0007605:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007609:	74 0d                	je     c0007618 <f_mkfs+0x283>
c000760b:	84 c0                	test   al,al
c000760d:	0f 84 53 09 00 00    	je     c0007f66 <f_mkfs+0xbd1>
c0007613:	e9 12 08 00 00       	jmp    c0007e2a <f_mkfs+0xa95>
c0007618:	bb 13 00 00 00       	mov    ebx,0x13
c000761d:	84 c0                	test   al,al
c000761f:	0f 85 05 08 00 00    	jne    c0007e2a <f_mkfs+0xa95>
c0007625:	e9 39 0e 00 00       	jmp    c0008463 <f_mkfs+0x10ce>
c000762a:	31 c0                	xor    eax,eax
c000762c:	ba ff 0f 00 00       	mov    edx,0xfff
c0007631:	89 c7                	mov    edi,eax
c0007633:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007636:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000763a:	0f 83 1a 0a 00 00    	jae    c000805a <f_mkfs+0xcc5>
c0007640:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007646:	77 39                	ja     c0007681 <f_mkfs+0x2ec>
c0007648:	ba ff ff 07 00       	mov    edx,0x7ffff
c000764d:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007655:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007658:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000765c:	73 08                	jae    c0007666 <f_mkfs+0x2d1>
c000765e:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007666:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000766b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000766e:	b8 00 00 00 00       	mov    eax,0x0
c0007673:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007677:	73 08                	jae    c0007681 <f_mkfs+0x2ec>
c0007679:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007685:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007689:	83 c0 20             	add    eax,0x20
c000768c:	83 d2 00             	adc    edx,0x0
c000768f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007693:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007697:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000769b:	31 d2                	xor    edx,edx
c000769d:	31 ff                	xor    edi,edi
c000769f:	52                   	push   edx
c00076a0:	89 fb                	mov    ebx,edi
c00076a2:	50                   	push   eax
c00076a3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076ab:	e8 84 fa 01 00       	call   c0027134 <__udivdi3>
c00076b0:	83 c4 10             	add    esp,0x10
c00076b3:	c1 e0 02             	shl    eax,0x2
c00076b6:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00076ba:	05 07 02 00 00       	add    eax,0x207
c00076bf:	89 f1                	mov    ecx,esi
c00076c1:	c1 e8 09             	shr    eax,0x9
c00076c4:	83 c1 ff             	add    ecx,0xffffffff
c00076c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076cb:	83 d3 ff             	adc    ebx,0xffffffff
c00076ce:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076d2:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076d6:	31 d2                	xor    edx,edx
c00076d8:	01 c8                	add    eax,ecx
c00076da:	11 da                	adc    edx,ebx
c00076dc:	89 c1                	mov    ecx,eax
c00076de:	f7 de                	neg    esi
c00076e0:	89 d0                	mov    eax,edx
c00076e2:	83 d7 00             	adc    edi,0x0
c00076e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076e9:	f7 df                	neg    edi
c00076eb:	21 f1                	and    ecx,esi
c00076ed:	21 f8                	and    eax,edi
c00076ef:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076f7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076fb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076ff:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007703:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007706:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000770a:	0f ac d0 01          	shrd   eax,edx,0x1
c000770e:	89 df                	mov    edi,ebx
c0007710:	d1 ea                	shr    edx,1
c0007712:	39 c1                	cmp    ecx,eax
c0007714:	19 d7                	sbb    edi,edx
c0007716:	0f 83 3e 09 00 00    	jae    c000805a <f_mkfs+0xcc5>
c000771c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007720:	31 d2                	xor    edx,edx
c0007722:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007726:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000772a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000772e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007731:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007735:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007739:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000773d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007741:	83 f8 0f             	cmp    eax,0xf
c0007744:	0f 86 10 09 00 00    	jbe    c000805a <f_mkfs+0xcc5>
c000774a:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007752:	0f 87 02 09 00 00    	ja     c000805a <f_mkfs+0xcc5>
c0007758:	31 d2                	xor    edx,edx
c000775a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000775e:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007766:	83 c0 07             	add    eax,0x7
c0007769:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007771:	c1 e8 03             	shr    eax,0x3
c0007774:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000777b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000777f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007783:	c1 e0 09             	shl    eax,0x9
c0007786:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000778a:	48                   	dec    eax
c000778b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000778f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007793:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007797:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000779b:	31 d2                	xor    edx,edx
c000779d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00077a1:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00077a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077ac:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00077b1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00077b5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00077b9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077c1:	31 ff                	xor    edi,edi
c00077c3:	31 f6                	xor    esi,esi
c00077c5:	31 db                	xor    ebx,ebx
c00077c7:	85 ff                	test   edi,edi
c00077c9:	74 05                	je     c00077d0 <f_mkfs+0x43b>
c00077cb:	4f                   	dec    edi
c00077cc:	74 44                	je     c0007812 <f_mkfs+0x47d>
c00077ce:	eb 4f                	jmp    c000781f <f_mkfs+0x48a>
c00077d0:	83 ec 0c             	sub    esp,0xc
c00077d3:	0f b7 c3             	movzx  eax,bx
c00077d6:	50                   	push   eax
c00077d7:	e8 05 0e 00 00       	call   c00085e1 <ff_wtoupper>
c00077dc:	83 c4 10             	add    esp,0x10
c00077df:	89 c1                	mov    ecx,eax
c00077e1:	8d 53 01             	lea    edx,[ebx+0x1]
c00077e4:	66 39 c3             	cmp    bx,ax
c00077e7:	75 3e                	jne    c0007827 <f_mkfs+0x492>
c00077e9:	be 01 00 00 00       	mov    esi,0x1
c00077ee:	89 df                	mov    edi,ebx
c00077f0:	66 01 f7             	add    di,si
c00077f3:	75 07                	jne    c00077fc <f_mkfs+0x467>
c00077f5:	83 fe 7f             	cmp    esi,0x7f
c00077f8:	77 31                	ja     c000782b <f_mkfs+0x496>
c00077fa:	eb 16                	jmp    c0007812 <f_mkfs+0x47d>
c00077fc:	83 ec 0c             	sub    esp,0xc
c00077ff:	0f b7 ff             	movzx  edi,di
c0007802:	57                   	push   edi
c0007803:	e8 d9 0d 00 00       	call   c00085e1 <ff_wtoupper>
c0007808:	83 c4 10             	add    esp,0x10
c000780b:	39 c7                	cmp    edi,eax
c000780d:	75 e6                	jne    c00077f5 <f_mkfs+0x460>
c000780f:	46                   	inc    esi
c0007810:	eb dc                	jmp    c00077ee <f_mkfs+0x459>
c0007812:	31 c0                	xor    eax,eax
c0007814:	89 d9                	mov    ecx,ebx
c0007816:	4e                   	dec    esi
c0007817:	0f 95 c0             	setne  al
c000781a:	43                   	inc    ebx
c000781b:	89 c7                	mov    edi,eax
c000781d:	eb 14                	jmp    c0007833 <f_mkfs+0x49e>
c000781f:	89 f1                	mov    ecx,esi
c0007821:	01 f3                	add    ebx,esi
c0007823:	31 ff                	xor    edi,edi
c0007825:	eb 0c                	jmp    c0007833 <f_mkfs+0x49e>
c0007827:	89 d3                	mov    ebx,edx
c0007829:	eb 08                	jmp    c0007833 <f_mkfs+0x49e>
c000782b:	bf 02 00 00 00       	mov    edi,0x2
c0007830:	83 c9 ff             	or     ecx,0xffffffff
c0007833:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007837:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783a:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000783e:	0f b6 c1             	movzx  eax,cl
c0007841:	e8 3a a9 ff ff       	call   c0002180 <xsum32>
c0007846:	66 c1 e9 08          	shr    cx,0x8
c000784a:	89 c2                	mov    edx,eax
c000784c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000784f:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007853:	0f b7 c1             	movzx  eax,cx
c0007856:	e8 25 a9 ff ff       	call   c0002180 <xsum32>
c000785b:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007860:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007864:	66 85 db             	test   bx,bx
c0007867:	74 1f                	je     c0007888 <f_mkfs+0x4f3>
c0007869:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000786c:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007873:	83 c0 02             	add    eax,0x2
c0007876:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000787c:	39 c2                	cmp    edx,eax
c000787e:	74 08                	je     c0007888 <f_mkfs+0x4f3>
c0007880:	89 04 24             	mov    DWORD PTR [esp],eax
c0007883:	e9 3f ff ff ff       	jmp    c00077c7 <f_mkfs+0x432>
c0007888:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000788b:	83 ec 0c             	sub    esp,0xc
c000788e:	05 01 02 00 00       	add    eax,0x201
c0007893:	c1 e8 09             	shr    eax,0x9
c0007896:	50                   	push   eax
c0007897:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000789b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000789f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00078a3:	55                   	push   ebp
c00078a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078a8:	e8 a3 a3 ff ff       	call   c0001c50 <disk_write>
c00078ad:	83 c4 20             	add    esp,0x20
c00078b0:	85 c0                	test   eax,eax
c00078b2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00078b5:	0f 85 8b 0b 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c00078bb:	89 d0                	mov    eax,edx
c00078bd:	31 d2                	xor    edx,edx
c00078bf:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078c3:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078c7:	66 85 db             	test   bx,bx
c00078ca:	74 04                	je     c00078d0 <f_mkfs+0x53b>
c00078cc:	31 c0                	xor    eax,eax
c00078ce:	eb b0                	jmp    c0007880 <f_mkfs+0x4eb>
c00078d0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078d4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078d8:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078dc:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078e2:	31 d2                	xor    edx,edx
c00078e4:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078ef:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078f3:	c1 eb 09             	shr    ebx,0x9
c00078f6:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007901:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007905:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007909:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000790d:	8d 70 01             	lea    esi,[eax+0x1]
c0007910:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007914:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007918:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000791f:	31 d2                	xor    edx,edx
c0007921:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007926:	89 04 24             	mov    DWORD PTR [esp],eax
c0007929:	89 c1                	mov    ecx,eax
c000792b:	89 e8                	mov    eax,ebp
c000792d:	e8 e7 a3 ff ff       	call   c0001d19 <mem_set>
c0007932:	31 c0                	xor    eax,eax
c0007934:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007937:	76 10                	jbe    c0007949 <f_mkfs+0x5b4>
c0007939:	83 fe 07             	cmp    esi,0x7
c000793c:	76 0b                	jbe    c0007949 <f_mkfs+0x5b4>
c000793e:	40                   	inc    eax
c000793f:	83 ee 08             	sub    esi,0x8
c0007942:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007947:	eb eb                	jmp    c0007934 <f_mkfs+0x59f>
c0007949:	b2 01                	mov    dl,0x1
c000794b:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000794f:	85 f6                	test   esi,esi
c0007951:	74 0c                	je     c000795f <f_mkfs+0x5ca>
c0007953:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007956:	76 07                	jbe    c000795f <f_mkfs+0x5ca>
c0007958:	08 11                	or     BYTE PTR [ecx],dl
c000795a:	4e                   	dec    esi
c000795b:	d1 e2                	shl    edx,1
c000795d:	eb f0                	jmp    c000794f <f_mkfs+0x5ba>
c000795f:	89 df                	mov    edi,ebx
c0007961:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007965:	76 04                	jbe    c000796b <f_mkfs+0x5d6>
c0007967:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000796b:	83 ec 0c             	sub    esp,0xc
c000796e:	57                   	push   edi
c000796f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007973:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007977:	55                   	push   ebp
c0007978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000797c:	e8 cf a2 ff ff       	call   c0001c50 <disk_write>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	85 c0                	test   eax,eax
c0007986:	0f 85 ba 0a 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c000798c:	31 d2                	xor    edx,edx
c000798e:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007992:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007996:	29 fb                	sub    ebx,edi
c0007998:	0f 85 7a ff ff ff    	jne    c0007918 <f_mkfs+0x583>
c000799e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00079a2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00079aa:	31 f6                	xor    esi,esi
c00079ac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00079b0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00079b3:	31 d2                	xor    edx,edx
c00079b5:	89 e8                	mov    eax,ebp
c00079b7:	e8 5d a3 ff ff       	call   c0001d19 <mem_set>
c00079bc:	31 c9                	xor    ecx,ecx
c00079be:	85 db                	test   ebx,ebx
c00079c0:	75 40                	jne    c0007a02 <f_mkfs+0x66d>
c00079c2:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079c7:	89 e8                	mov    eax,ebp
c00079c9:	bb 02 00 00 00       	mov    ebx,0x2
c00079ce:	e8 28 a3 ff ff       	call   c0001cfb <st_dword>
c00079d3:	8d 45 04             	lea    eax,[ebp+0x4]
c00079d6:	83 ca ff             	or     edx,0xffffffff
c00079d9:	e8 1d a3 ff ff       	call   c0001cfb <st_dword>
c00079de:	b9 08 00 00 00       	mov    ecx,0x8
c00079e3:	eb 1d                	jmp    c0007a02 <f_mkfs+0x66d>
c00079e5:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079e8:	76 3b                	jbe    c0007a25 <f_mkfs+0x690>
c00079ea:	43                   	inc    ebx
c00079eb:	83 fe 01             	cmp    esi,0x1
c00079ee:	89 da                	mov    edx,ebx
c00079f0:	77 03                	ja     c00079f5 <f_mkfs+0x660>
c00079f2:	83 ca ff             	or     edx,0xffffffff
c00079f5:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079f9:	4e                   	dec    esi
c00079fa:	e8 fc a2 ff ff       	call   c0001cfb <st_dword>
c00079ff:	83 c1 04             	add    ecx,0x4
c0007a02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a06:	85 f6                	test   esi,esi
c0007a08:	75 db                	jne    c00079e5 <f_mkfs+0x650>
c0007a0a:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007a0f:	77 14                	ja     c0007a25 <f_mkfs+0x690>
c0007a11:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007a15:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a1c:	85 f6                	test   esi,esi
c0007a1e:	74 05                	je     c0007a25 <f_mkfs+0x690>
c0007a20:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a23:	77 dd                	ja     c0007a02 <f_mkfs+0x66d>
c0007a25:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a29:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a2d:	39 cf                	cmp    edi,ecx
c0007a2f:	76 02                	jbe    c0007a33 <f_mkfs+0x69e>
c0007a31:	89 cf                	mov    edi,ecx
c0007a33:	83 ec 0c             	sub    esp,0xc
c0007a36:	57                   	push   edi
c0007a37:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a3b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a3f:	55                   	push   ebp
c0007a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a44:	e8 07 a2 ff ff       	call   c0001c50 <disk_write>
c0007a49:	83 c4 20             	add    esp,0x20
c0007a4c:	85 c0                	test   eax,eax
c0007a4e:	0f 85 f2 09 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007a54:	31 d2                	xor    edx,edx
c0007a56:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a5a:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a5e:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a62:	0f 85 48 ff ff ff    	jne    c00079b0 <f_mkfs+0x61b>
c0007a68:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a6b:	31 d2                	xor    edx,edx
c0007a6d:	89 e8                	mov    eax,ebp
c0007a6f:	31 ff                	xor    edi,edi
c0007a71:	e8 a3 a2 ff ff       	call   c0001d19 <mem_set>
c0007a76:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a79:	ba 02 00 00 00       	mov    edx,0x2
c0007a7e:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a82:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a86:	e8 70 a2 ff ff       	call   c0001cfb <st_dword>
c0007a8b:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a8e:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a92:	e8 64 a2 ff ff       	call   c0001cfb <st_dword>
c0007a97:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a9a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a9e:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007aa2:	e8 54 a2 ff ff       	call   c0001cfb <st_dword>
c0007aa7:	8d 45 54             	lea    eax,[ebp+0x54]
c0007aaa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007aae:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ab2:	83 c2 02             	add    edx,0x2
c0007ab5:	e8 41 a2 ff ff       	call   c0001cfb <st_dword>
c0007aba:	8d 45 58             	lea    eax,[ebp+0x58]
c0007abd:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007ac1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007ac5:	e8 31 a2 ff ff       	call   c0001cfb <st_dword>
c0007aca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ace:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007ad3:	89 c6                	mov    esi,eax
c0007ad5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ad9:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007add:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ae0:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ae4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ae7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007aeb:	39 cb                	cmp    ebx,ecx
c0007aed:	76 02                	jbe    c0007af1 <f_mkfs+0x75c>
c0007aef:	89 cb                	mov    ebx,ecx
c0007af1:	83 ec 0c             	sub    esp,0xc
c0007af4:	53                   	push   ebx
c0007af5:	57                   	push   edi
c0007af6:	56                   	push   esi
c0007af7:	55                   	push   ebp
c0007af8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afc:	e8 4f a1 ff ff       	call   c0001c50 <disk_write>
c0007b01:	83 c4 20             	add    esp,0x20
c0007b04:	85 c0                	test   eax,eax
c0007b06:	0f 85 3a 09 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007b0c:	31 d2                	xor    edx,edx
c0007b0e:	b9 00 02 00 00       	mov    ecx,0x200
c0007b13:	89 e8                	mov    eax,ebp
c0007b15:	e8 ff a1 ff ff       	call   c0001d19 <mem_set>
c0007b1a:	31 d2                	xor    edx,edx
c0007b1c:	01 de                	add    esi,ebx
c0007b1e:	11 d7                	adc    edi,edx
c0007b20:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b23:	75 bf                	jne    c0007ae4 <f_mkfs+0x74f>
c0007b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b29:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b2d:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b35:	b9 00 02 00 00       	mov    ecx,0x200
c0007b3a:	31 d2                	xor    edx,edx
c0007b3c:	89 e8                	mov    eax,ebp
c0007b3e:	e8 d6 a1 ff ff       	call   c0001d19 <mem_set>
c0007b43:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b48:	ba e0 9c 02 c0       	mov    edx,0xc0029ce0
c0007b4d:	89 e8                	mov    eax,ebp
c0007b4f:	e8 b0 a1 ff ff       	call   c0001d04 <mem_cpy>
c0007b54:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b5b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b5f:	e8 9a a1 ff ff       	call   c0001cfe <st_qword>
c0007b64:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b68:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b6b:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b6f:	e8 8a a1 ff ff       	call   c0001cfe <st_qword>
c0007b74:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b77:	ba 20 00 00 00       	mov    edx,0x20
c0007b7c:	e8 7a a1 ff ff       	call   c0001cfb <st_dword>
c0007b81:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b89:	e8 6d a1 ff ff       	call   c0001cfb <st_dword>
c0007b8e:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b92:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b96:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b9a:	e8 5c a1 ff ff       	call   c0001cfb <st_dword>
c0007b9f:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ba2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ba6:	e8 50 a1 ff ff       	call   c0001cfb <st_dword>
c0007bab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007baf:	8d 50 02             	lea    edx,[eax+0x2]
c0007bb2:	8d 45 60             	lea    eax,[ebp+0x60]
c0007bb5:	e8 41 a1 ff ff       	call   c0001cfb <st_dword>
c0007bba:	8d 45 64             	lea    eax,[ebp+0x64]
c0007bbd:	ba 00 00 21 50       	mov    edx,0x50210000
c0007bc2:	e8 34 a1 ff ff       	call   c0001cfb <st_dword>
c0007bc7:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bca:	ba 00 01 00 00       	mov    edx,0x100
c0007bcf:	e8 23 a1 ff ff       	call   c0001cf7 <st_word>
c0007bd4:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bd8:	b8 0a 00 00 00       	mov    eax,0xa
c0007bdd:	48                   	dec    eax
c0007bde:	74 05                	je     c0007be5 <f_mkfs+0x850>
c0007be0:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007be3:	eb f8                	jmp    c0007bdd <f_mkfs+0x848>
c0007be5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be9:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bf1:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bf5:	74 05                	je     c0007bfc <f_mkfs+0x867>
c0007bf7:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bfa:	eb f5                	jmp    c0007bf1 <f_mkfs+0x85c>
c0007bfc:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bff:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007c04:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007c0a:	31 db                	xor    ebx,ebx
c0007c0c:	e8 e6 a0 ff ff       	call   c0001cf7 <st_word>
c0007c11:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007c17:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c1f:	e8 d3 a0 ff ff       	call   c0001cf7 <st_word>
c0007c24:	31 c9                	xor    ecx,ecx
c0007c26:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c29:	83 f8 01             	cmp    eax,0x1
c0007c2c:	76 13                	jbe    c0007c41 <f_mkfs+0x8ac>
c0007c2e:	83 f9 70             	cmp    ecx,0x70
c0007c31:	74 0e                	je     c0007c41 <f_mkfs+0x8ac>
c0007c33:	89 da                	mov    edx,ebx
c0007c35:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c3a:	e8 41 a5 ff ff       	call   c0002180 <xsum32>
c0007c3f:	89 c3                	mov    ebx,eax
c0007c41:	41                   	inc    ecx
c0007c42:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c48:	75 dc                	jne    c0007c26 <f_mkfs+0x891>
c0007c4a:	89 f0                	mov    eax,esi
c0007c4c:	89 fa                	mov    edx,edi
c0007c4e:	83 c0 01             	add    eax,0x1
c0007c51:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c55:	83 d2 00             	adc    edx,0x0
c0007c58:	83 ec 0c             	sub    esp,0xc
c0007c5b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c5f:	6a 01                	push   0x1
c0007c61:	57                   	push   edi
c0007c62:	56                   	push   esi
c0007c63:	55                   	push   ebp
c0007c64:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c68:	e8 e3 9f ff ff       	call   c0001c50 <disk_write>
c0007c6d:	83 c4 20             	add    esp,0x20
c0007c70:	85 c0                	test   eax,eax
c0007c72:	0f 85 ce 07 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007c78:	31 d2                	xor    edx,edx
c0007c7a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c7f:	89 e8                	mov    eax,ebp
c0007c81:	e8 93 a0 ff ff       	call   c0001d19 <mem_set>
c0007c86:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c8e:	e8 64 a0 ff ff       	call   c0001cf7 <st_word>
c0007c93:	89 f0                	mov    eax,esi
c0007c95:	89 fa                	mov    edx,edi
c0007c97:	83 c0 09             	add    eax,0x9
c0007c9a:	83 d2 00             	adc    edx,0x0
c0007c9d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ca0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007ca4:	31 c9                	xor    ecx,ecx
c0007ca6:	41                   	inc    ecx
c0007ca7:	89 da                	mov    edx,ebx
c0007ca9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007cae:	e8 cd a4 ff ff       	call   c0002180 <xsum32>
c0007cb3:	89 c3                	mov    ebx,eax
c0007cb5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cbb:	75 e9                	jne    c0007ca6 <f_mkfs+0x911>
c0007cbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007cc1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007cc5:	83 c0 01             	add    eax,0x1
c0007cc8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ccc:	83 d2 00             	adc    edx,0x0
c0007ccf:	83 ec 0c             	sub    esp,0xc
c0007cd2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cd6:	6a 01                	push   0x1
c0007cd8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ce0:	55                   	push   ebp
c0007ce1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ce5:	e8 66 9f ff ff       	call   c0001c50 <disk_write>
c0007cea:	83 c4 20             	add    esp,0x20
c0007ced:	85 c0                	test   eax,eax
c0007cef:	0f 85 51 07 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007cf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cf9:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cfd:	75 09                	jne    c0007d08 <f_mkfs+0x973>
c0007cff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d02:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007d06:	74 12                	je     c0007d1a <f_mkfs+0x985>
c0007d08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d0c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007d10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007d18:	eb 8a                	jmp    c0007ca4 <f_mkfs+0x90f>
c0007d1a:	31 d2                	xor    edx,edx
c0007d1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007d21:	89 e8                	mov    eax,ebp
c0007d23:	e8 f1 9f ff ff       	call   c0001d19 <mem_set>
c0007d28:	83 c6 0b             	add    esi,0xb
c0007d2b:	83 d7 00             	adc    edi,0x0
c0007d2e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d32:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d36:	31 c9                	xor    ecx,ecx
c0007d38:	41                   	inc    ecx
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d40:	e8 3b a4 ff ff       	call   c0002180 <xsum32>
c0007d45:	89 c3                	mov    ebx,eax
c0007d47:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d4d:	75 e9                	jne    c0007d38 <f_mkfs+0x9a3>
c0007d4f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d52:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d56:	83 c6 01             	add    esi,0x1
c0007d59:	83 d7 00             	adc    edi,0x0
c0007d5c:	83 ec 0c             	sub    esp,0xc
c0007d5f:	6a 01                	push   0x1
c0007d61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d69:	55                   	push   ebp
c0007d6a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d6e:	e8 dd 9e ff ff       	call   c0001c50 <disk_write>
c0007d73:	83 c4 20             	add    esp,0x20
c0007d76:	85 c0                	test   eax,eax
c0007d78:	0f 85 c8 06 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007d7e:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d82:	75 06                	jne    c0007d8a <f_mkfs+0x9f5>
c0007d84:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d88:	74 09                	je     c0007d93 <f_mkfs+0x9fe>
c0007d8a:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d8d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d91:	eb a3                	jmp    c0007d36 <f_mkfs+0x9a1>
c0007d93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d97:	89 da                	mov    edx,ebx
c0007d99:	01 e8                	add    eax,ebp
c0007d9b:	e8 5b 9f ff ff       	call   c0001cfb <st_dword>
c0007da0:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007da5:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007dad:	75 e4                	jne    c0007d93 <f_mkfs+0x9fe>
c0007daf:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007db2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007db6:	83 c6 02             	add    esi,0x2
c0007db9:	83 d7 00             	adc    edi,0x0
c0007dbc:	83 ec 0c             	sub    esp,0xc
c0007dbf:	6a 01                	push   0x1
c0007dc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dc9:	55                   	push   ebp
c0007dca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007dce:	e8 7d 9e ff ff       	call   c0001c50 <disk_write>
c0007dd3:	83 c4 20             	add    esp,0x20
c0007dd6:	85 c0                	test   eax,eax
c0007dd8:	0f 85 68 06 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007dde:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007de3:	74 0d                	je     c0007df2 <f_mkfs+0xa5d>
c0007de5:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ded:	e9 43 fd ff ff       	jmp    c0007b35 <f_mkfs+0x7a0>
c0007df2:	b1 07                	mov    cl,0x7
c0007df4:	e9 e3 05 00 00       	jmp    c00083dc <f_mkfs+0x1047>
c0007df9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dfe:	0f 85 4f 02 00 00    	jne    c0008053 <f_mkfs+0xcbe>
c0007e04:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007e09:	0f 86 22 02 00 00    	jbe    c0008031 <f_mkfs+0xc9c>
c0007e0f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e14:	0f 85 81 06 00 00    	jne    c000849b <f_mkfs+0x1106>
c0007e1a:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e21:	83 f8 40             	cmp    eax,0x40
c0007e24:	0f 87 51 06 00 00    	ja     c000847b <f_mkfs+0x10e6>
c0007e2a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e2e:	85 ff                	test   edi,edi
c0007e30:	75 1c                	jne    c0007e4e <f_mkfs+0xab9>
c0007e32:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e35:	ba e0 9b 02 c0       	mov    edx,0xc0029be0
c0007e3a:	c1 e9 0c             	shr    ecx,0xc
c0007e3d:	bf 01 00 00 00       	mov    edi,0x1
c0007e42:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e45:	66 85 c0             	test   ax,ax
c0007e48:	0f 85 95 01 00 00    	jne    c0007fe3 <f_mkfs+0xc4e>
c0007e4e:	31 d2                	xor    edx,edx
c0007e50:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e53:	f7 f7                	div    edi
c0007e55:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e5a:	0f 86 95 01 00 00    	jbe    c0007ff5 <f_mkfs+0xc60>
c0007e60:	83 c0 02             	add    eax,0x2
c0007e63:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e68:	01 c0                	add    eax,eax
c0007e6a:	05 ff 01 00 00       	add    eax,0x1ff
c0007e6f:	be 01 00 00 00       	mov    esi,0x1
c0007e74:	c1 e8 09             	shr    eax,0x9
c0007e77:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e7f:	c1 e0 05             	shl    eax,0x5
c0007e82:	c1 e8 09             	shr    eax,0x9
c0007e85:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e89:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e8e:	31 d2                	xor    edx,edx
c0007e90:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e94:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e98:	89 f0                	mov    eax,esi
c0007e9a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e9e:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007ea2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007ea6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007eaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007eae:	31 d2                	xor    edx,edx
c0007eb0:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007eb5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007eb9:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ebd:	31 db                	xor    ebx,ebx
c0007ebf:	01 c8                	add    eax,ecx
c0007ec1:	11 da                	adc    edx,ebx
c0007ec3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ec7:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ecb:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007ecf:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007ed3:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ed7:	f7 da                	neg    edx
c0007ed9:	21 d1                	and    ecx,edx
c0007edb:	29 d9                	sub    ecx,ebx
c0007edd:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ee2:	0f 85 20 01 00 00    	jne    c0008008 <f_mkfs+0xc73>
c0007ee8:	31 db                	xor    ebx,ebx
c0007eea:	01 ce                	add    esi,ecx
c0007eec:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ef0:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ef4:	31 d2                	xor    edx,edx
c0007ef6:	89 f8                	mov    eax,edi
c0007ef8:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007efc:	c1 e0 04             	shl    eax,0x4
c0007eff:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007f03:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007f07:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007f0b:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007f0f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007f12:	19 d3                	sbb    ebx,edx
c0007f14:	0f 82 40 01 00 00    	jb     c000805a <f_mkfs+0xcc5>
c0007f1a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f1d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f21:	89 c8                	mov    eax,ecx
c0007f23:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f28:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f2c:	29 f0                	sub    eax,esi
c0007f2e:	29 d0                	sub    eax,edx
c0007f30:	31 d2                	xor    edx,edx
c0007f32:	f7 f7                	div    edi
c0007f34:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f39:	89 c3                	mov    ebx,eax
c0007f3b:	0f 85 b8 fe ff ff    	jne    c0007df9 <f_mkfs+0xa64>
c0007f41:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f46:	0f 87 1d 01 00 00    	ja     c0008069 <f_mkfs+0xcd4>
c0007f4c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f51:	0f 85 03 01 00 00    	jne    c000805a <f_mkfs+0xcc5>
c0007f57:	83 ff 01             	cmp    edi,0x1
c0007f5a:	0f 86 fa 00 00 00    	jbe    c000805a <f_mkfs+0xcc5>
c0007f60:	d1 ef                	shr    edi,1
c0007f62:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f66:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f6a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f6d:	85 db                	test   ebx,ebx
c0007f6f:	75 2d                	jne    c0007f9e <f_mkfs+0xc09>
c0007f71:	89 cb                	mov    ebx,ecx
c0007f73:	ba f0 9b 02 c0       	mov    edx,0xc0029bf0
c0007f78:	c1 eb 11             	shr    ebx,0x11
c0007f7b:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f83:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f86:	66 85 c0             	test   ax,ax
c0007f89:	74 11                	je     c0007f9c <f_mkfs+0xc07>
c0007f8b:	83 c2 02             	add    edx,0x2
c0007f8e:	39 d8                	cmp    eax,ebx
c0007f90:	77 0a                	ja     c0007f9c <f_mkfs+0xc07>
c0007f92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f96:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f9a:	eb e7                	jmp    c0007f83 <f_mkfs+0xbee>
c0007f9c:	31 db                	xor    ebx,ebx
c0007f9e:	31 d2                	xor    edx,edx
c0007fa0:	89 c8                	mov    eax,ecx
c0007fa2:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007fa6:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007fad:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007fb2:	c1 ea 09             	shr    edx,0x9
c0007fb5:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007fba:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fbe:	0f 87 96 00 00 00    	ja     c000805a <f_mkfs+0xcc5>
c0007fc4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fc8:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fd0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fd4:	be 20 00 00 00       	mov    esi,0x20
c0007fd9:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fde:	e9 a6 fe ff ff       	jmp    c0007e89 <f_mkfs+0xaf4>
c0007fe3:	83 c2 02             	add    edx,0x2
c0007fe6:	39 c8                	cmp    eax,ecx
c0007fe8:	0f 87 60 fe ff ff    	ja     c0007e4e <f_mkfs+0xab9>
c0007fee:	01 ff                	add    edi,edi
c0007ff0:	e9 4d fe ff ff       	jmp    c0007e42 <f_mkfs+0xaad>
c0007ff5:	8d 04 40             	lea    eax,[eax+eax*2]
c0007ff8:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007ffd:	40                   	inc    eax
c0007ffe:	d1 e8                	shr    eax,1
c0008000:	83 c0 03             	add    eax,0x3
c0008003:	e9 62 fe ff ff       	jmp    c0007e6a <f_mkfs+0xad5>
c0008008:	31 d2                	xor    edx,edx
c000800a:	89 c8                	mov    eax,ecx
c000800c:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008010:	85 d2                	test   edx,edx
c0008012:	74 0c                	je     c0008020 <f_mkfs+0xc8b>
c0008014:	49                   	dec    ecx
c0008015:	46                   	inc    esi
c0008016:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c000801b:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008020:	89 c8                	mov    eax,ecx
c0008022:	31 d2                	xor    edx,edx
c0008024:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008028:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c000802c:	e9 c3 fe ff ff       	jmp    c0007ef4 <f_mkfs+0xb5f>
c0008031:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008036:	77 31                	ja     c0008069 <f_mkfs+0xcd4>
c0008038:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000803d:	75 1b                	jne    c000805a <f_mkfs+0xcc5>
c000803f:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008042:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008046:	3d 80 00 00 00       	cmp    eax,0x80
c000804b:	0f 86 d9 fd ff ff    	jbe    c0007e2a <f_mkfs+0xa95>
c0008051:	eb 07                	jmp    c000805a <f_mkfs+0xcc5>
c0008053:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008058:	76 0a                	jbe    c0008064 <f_mkfs+0xccf>
c000805a:	bb 0e 00 00 00       	mov    ebx,0xe
c000805f:	e9 ff 03 00 00       	jmp    c0008463 <f_mkfs+0x10ce>
c0008064:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008069:	31 d2                	xor    edx,edx
c000806b:	b9 00 02 00 00       	mov    ecx,0x200
c0008070:	89 e8                	mov    eax,ebp
c0008072:	e8 a2 9c ff ff       	call   c0001d19 <mem_set>
c0008077:	b9 0b 00 00 00       	mov    ecx,0xb
c000807c:	ba 02 9d 02 c0       	mov    edx,0xc0029d02
c0008081:	89 e8                	mov    eax,ebp
c0008083:	e8 7c 9c ff ff       	call   c0001d04 <mem_cpy>
c0008088:	8d 45 0b             	lea    eax,[ebp+0xb]
c000808b:	ba 00 02 00 00       	mov    edx,0x200
c0008090:	e8 62 9c ff ff       	call   c0001cf7 <st_word>
c0008095:	89 f8                	mov    eax,edi
c0008097:	0f b7 d6             	movzx  edx,si
c000809a:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000809d:	8d 45 0e             	lea    eax,[ebp+0xe]
c00080a0:	e8 52 9c ff ff       	call   c0001cf7 <st_word>
c00080a5:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00080a9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ae:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00080b1:	75 08                	jne    c00080bb <f_mkfs+0xd26>
c00080b3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00080bb:	8d 45 11             	lea    eax,[ebp+0x11]
c00080be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080c2:	e8 30 9c ff ff       	call   c0001cf7 <st_word>
c00080c7:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cc:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080d0:	39 d0                	cmp    eax,edx
c00080d2:	b8 00 00 00 00       	mov    eax,0x0
c00080d7:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080db:	72 0a                	jb     c00080e7 <f_mkfs+0xd52>
c00080dd:	8d 45 13             	lea    eax,[ebp+0x13]
c00080e0:	e8 12 9c ff ff       	call   c0001cf7 <st_word>
c00080e5:	eb 08                	jmp    c00080ef <f_mkfs+0xd5a>
c00080e7:	8d 45 20             	lea    eax,[ebp+0x20]
c00080ea:	e8 0c 9c ff ff       	call   c0001cfb <st_dword>
c00080ef:	8d 45 18             	lea    eax,[ebp+0x18]
c00080f2:	ba 3f 00 00 00       	mov    edx,0x3f
c00080f7:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080fb:	e8 f7 9b ff ff       	call   c0001cf7 <st_word>
c0008100:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008103:	ba ff 00 00 00       	mov    edx,0xff
c0008108:	e8 ea 9b ff ff       	call   c0001cf7 <st_word>
c000810d:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008110:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008114:	e8 e2 9b ff ff       	call   c0001cfb <st_dword>
c0008119:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000811e:	75 57                	jne    c0008177 <f_mkfs+0xde2>
c0008120:	8d 45 43             	lea    eax,[ebp+0x43]
c0008123:	ba 00 00 21 50       	mov    edx,0x50210000
c0008128:	e8 ce 9b ff ff       	call   c0001cfb <st_dword>
c000812d:	8d 45 24             	lea    eax,[ebp+0x24]
c0008130:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008134:	e8 c2 9b ff ff       	call   c0001cfb <st_dword>
c0008139:	8d 45 2c             	lea    eax,[ebp+0x2c]
c000813c:	ba 02 00 00 00       	mov    edx,0x2
c0008141:	e8 b5 9b ff ff       	call   c0001cfb <st_dword>
c0008146:	8d 45 30             	lea    eax,[ebp+0x30]
c0008149:	ba 01 00 00 00       	mov    edx,0x1
c000814e:	e8 a4 9b ff ff       	call   c0001cf7 <st_word>
c0008153:	8d 45 32             	lea    eax,[ebp+0x32]
c0008156:	ba 06 00 00 00       	mov    edx,0x6
c000815b:	e8 97 9b ff ff       	call   c0001cf7 <st_word>
c0008160:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008164:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008168:	8d 45 47             	lea    eax,[ebp+0x47]
c000816b:	b9 13 00 00 00       	mov    ecx,0x13
c0008170:	ba 0e 9d 02 c0       	mov    edx,0xc0029d0e
c0008175:	eb 2f                	jmp    c00081a6 <f_mkfs+0xe11>
c0008177:	8d 45 27             	lea    eax,[ebp+0x27]
c000817a:	ba 00 00 21 50       	mov    edx,0x50210000
c000817f:	e8 77 9b ff ff       	call   c0001cfb <st_dword>
c0008184:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008189:	8d 45 16             	lea    eax,[ebp+0x16]
c000818c:	e8 66 9b ff ff       	call   c0001cf7 <st_word>
c0008191:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008195:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008199:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000819c:	b9 13 00 00 00       	mov    ecx,0x13
c00081a1:	ba 22 9d 02 c0       	mov    edx,0xc0029d22
c00081a6:	e8 59 9b ff ff       	call   c0001d04 <mem_cpy>
c00081ab:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00081b1:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081b6:	89 f0                	mov    eax,esi
c00081b8:	e8 3a 9b ff ff       	call   c0001cf7 <st_word>
c00081bd:	83 ec 0c             	sub    esp,0xc
c00081c0:	6a 01                	push   0x1
c00081c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ca:	55                   	push   ebp
c00081cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081cf:	e8 7c 9a ff ff       	call   c0001c50 <disk_write>
c00081d4:	83 c4 20             	add    esp,0x20
c00081d7:	85 c0                	test   eax,eax
c00081d9:	0f 85 67 02 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c00081df:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081e4:	0f 85 b7 00 00 00    	jne    c00082a1 <f_mkfs+0xf0c>
c00081ea:	83 ec 0c             	sub    esp,0xc
c00081ed:	6a 01                	push   0x1
c00081ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081f7:	83 c0 06             	add    eax,0x6
c00081fa:	83 d2 00             	adc    edx,0x0
c00081fd:	52                   	push   edx
c00081fe:	50                   	push   eax
c00081ff:	55                   	push   ebp
c0008200:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008204:	e8 47 9a ff ff       	call   c0001c50 <disk_write>
c0008209:	83 c4 20             	add    esp,0x20
c000820c:	b9 00 02 00 00       	mov    ecx,0x200
c0008211:	31 d2                	xor    edx,edx
c0008213:	89 e8                	mov    eax,ebp
c0008215:	e8 ff 9a ff ff       	call   c0001d19 <mem_set>
c000821a:	ba 52 52 61 41       	mov    edx,0x41615252
c000821f:	89 e8                	mov    eax,ebp
c0008221:	e8 d5 9a ff ff       	call   c0001cfb <st_dword>
c0008226:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c000822c:	ba 72 72 41 61       	mov    edx,0x61417272
c0008231:	e8 c5 9a ff ff       	call   c0001cfb <st_dword>
c0008236:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008239:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000823f:	e8 b7 9a ff ff       	call   c0001cfb <st_dword>
c0008244:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000824a:	ba 02 00 00 00       	mov    edx,0x2
c000824f:	e8 a7 9a ff ff       	call   c0001cfb <st_dword>
c0008254:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008259:	89 f0                	mov    eax,esi
c000825b:	e8 97 9a ff ff       	call   c0001cf7 <st_word>
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	6a 01                	push   0x1
c0008265:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008269:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000826d:	83 c0 07             	add    eax,0x7
c0008270:	83 d2 00             	adc    edx,0x0
c0008273:	52                   	push   edx
c0008274:	50                   	push   eax
c0008275:	55                   	push   ebp
c0008276:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000827a:	e8 d1 99 ff ff       	call   c0001c50 <disk_write>
c000827f:	83 c4 14             	add    esp,0x14
c0008282:	6a 01                	push   0x1
c0008284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008288:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000828c:	83 c0 01             	add    eax,0x1
c000828f:	83 d2 00             	adc    edx,0x0
c0008292:	52                   	push   edx
c0008293:	50                   	push   eax
c0008294:	55                   	push   ebp
c0008295:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008299:	e8 b2 99 ff ff       	call   c0001c50 <disk_write>
c000829e:	83 c4 20             	add    esp,0x20
c00082a1:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00082a8:	31 d2                	xor    edx,edx
c00082aa:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00082b0:	31 db                	xor    ebx,ebx
c00082b2:	89 e8                	mov    eax,ebp
c00082b4:	e8 60 9a ff ff       	call   c0001d19 <mem_set>
c00082b9:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082c5:	0f 94 c3             	sete   bl
c00082c8:	4b                   	dec    ebx
c00082c9:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082cf:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082d5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082da:	75 21                	jne    c00082fd <f_mkfs+0xf68>
c00082dc:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082e1:	89 e8                	mov    eax,ebp
c00082e3:	e8 13 9a ff ff       	call   c0001cfb <st_dword>
c00082e8:	8d 45 04             	lea    eax,[ebp+0x4]
c00082eb:	83 ca ff             	or     edx,0xffffffff
c00082ee:	e8 08 9a ff ff       	call   c0001cfb <st_dword>
c00082f3:	8d 45 08             	lea    eax,[ebp+0x8]
c00082f6:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082fb:	eb 04                	jmp    c0008301 <f_mkfs+0xf6c>
c00082fd:	89 da                	mov    edx,ebx
c00082ff:	89 e8                	mov    eax,ebp
c0008301:	e8 f5 99 ff ff       	call   c0001cfb <st_dword>
c0008306:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000830a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000830e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008312:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008316:	39 ce                	cmp    esi,ecx
c0008318:	76 02                	jbe    c000831c <f_mkfs+0xf87>
c000831a:	89 ce                	mov    esi,ecx
c000831c:	83 ec 0c             	sub    esp,0xc
c000831f:	56                   	push   esi
c0008320:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008324:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008328:	55                   	push   ebp
c0008329:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000832d:	e8 1e 99 ff ff       	call   c0001c50 <disk_write>
c0008332:	83 c4 20             	add    esp,0x20
c0008335:	85 c0                	test   eax,eax
c0008337:	0f 85 09 01 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c000833d:	31 d2                	xor    edx,edx
c000833f:	b9 00 02 00 00       	mov    ecx,0x200
c0008344:	89 e8                	mov    eax,ebp
c0008346:	e8 ce 99 ff ff       	call   c0001d19 <mem_set>
c000834b:	31 d2                	xor    edx,edx
c000834d:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008351:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008355:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008359:	75 b3                	jne    c000830e <f_mkfs+0xf79>
c000835b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000835e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008365:	40                   	inc    eax
c0008366:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000836a:	0f 87 65 ff ff ff    	ja     c00082d5 <f_mkfs+0xf40>
c0008370:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008375:	74 04                	je     c000837b <f_mkfs+0xfe6>
c0008377:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000837b:	89 fb                	mov    ebx,edi
c000837d:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008381:	76 04                	jbe    c0008387 <f_mkfs+0xff2>
c0008383:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008387:	83 ec 0c             	sub    esp,0xc
c000838a:	53                   	push   ebx
c000838b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000838f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008393:	55                   	push   ebp
c0008394:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008398:	e8 b3 98 ff ff       	call   c0001c50 <disk_write>
c000839d:	83 c4 20             	add    esp,0x20
c00083a0:	85 c0                	test   eax,eax
c00083a2:	0f 85 9e 00 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c00083a8:	31 d2                	xor    edx,edx
c00083aa:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00083ae:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00083b2:	29 df                	sub    edi,ebx
c00083b4:	75 c5                	jne    c000837b <f_mkfs+0xfe6>
c00083b6:	b1 0c                	mov    cl,0xc
c00083b8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083bd:	74 1d                	je     c00083dc <f_mkfs+0x1047>
c00083bf:	b8 ff ff 00 00       	mov    eax,0xffff
c00083c4:	b1 06                	mov    cl,0x6
c00083c6:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083ca:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083ce:	72 0c                	jb     c00083dc <f_mkfs+0x1047>
c00083d0:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083d5:	0f 94 c1             	sete   cl
c00083d8:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083dc:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083e1:	75 4c                	jne    c000842f <f_mkfs+0x109a>
c00083e3:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083e7:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083eb:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083f2:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083f9:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008404:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000840f:	0f b6 c9             	movzx  ecx,cl
c0008412:	83 ec 0c             	sub    esp,0xc
c0008415:	55                   	push   ebp
c0008416:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000841d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008421:	e8 2f c2 ff ff       	call   c0004655 <create_partition>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 c3                	mov    ebx,eax
c000842b:	85 c0                	test   eax,eax
c000842d:	75 34                	jne    c0008463 <f_mkfs+0x10ce>
c000842f:	31 db                	xor    ebx,ebx
c0008431:	50                   	push   eax
c0008432:	6a 00                	push   0x0
c0008434:	6a 00                	push   0x0
c0008436:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000843a:	e8 27 98 ff ff       	call   c0001c66 <disk_ioctl>
c000843f:	83 c4 10             	add    esp,0x10
c0008442:	85 c0                	test   eax,eax
c0008444:	74 1d                	je     c0008463 <f_mkfs+0x10ce>
c0008446:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000844e:	75 0c                	jne    c000845c <f_mkfs+0x10c7>
c0008450:	83 ec 0c             	sub    esp,0xc
c0008453:	55                   	push   ebp
c0008454:	e8 75 00 00 00       	call   c00084ce <ff_memfree>
c0008459:	83 c4 10             	add    esp,0x10
c000845c:	bb 01 00 00 00       	mov    ebx,0x1
c0008461:	eb 48                	jmp    c00084ab <f_mkfs+0x1116>
c0008463:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000846b:	75 3e                	jne    c00084ab <f_mkfs+0x1116>
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	55                   	push   ebp
c0008471:	e8 58 00 00 00       	call   c00084ce <ff_memfree>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	eb 30                	jmp    c00084ab <f_mkfs+0x1116>
c000847b:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008480:	0f 85 eb fa ff ff    	jne    c0007f71 <f_mkfs+0xbdc>
c0008486:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000848a:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008490:	0f 86 b8 f9 ff ff    	jbe    c0007e4e <f_mkfs+0xab9>
c0008496:	e9 bf fb ff ff       	jmp    c000805a <f_mkfs+0xcc5>
c000849b:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00084a0:	0f 85 c0 fa ff ff    	jne    c0007f66 <f_mkfs+0xbd1>
c00084a6:	e9 af fb ff ff       	jmp    c000805a <f_mkfs+0xcc5>
c00084ab:	81 c4 9c 00 00 00    	add    esp,0x9c
c00084b1:	89 d8                	mov    eax,ebx
c00084b3:	5b                   	pop    ebx
c00084b4:	5e                   	pop    esi
c00084b5:	5f                   	pop    edi
c00084b6:	5d                   	pop    ebp
c00084b7:	c3                   	ret    

c00084b8 <ff_memalloc>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 bf 73 00 00       	call   c000f886 <malloc>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 c4 0c             	add    esp,0xc
c00084cd:	c3                   	ret    

c00084ce <ff_memfree>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 b9 73 00 00       	call   c000f896 <free>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	90                   	nop
c00084e1:	83 c4 0c             	add    esp,0xc
c00084e4:	c3                   	ret    

c00084e5 <ff_uni2oem>:
c00084e5:	83 ec 14             	sub    esp,0x14
c00084e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084ec:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084f0:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084f7:	c7 44 24 0c 40 a0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a040
c00084ff:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008504:	77 0b                	ja     c0008511 <ff_uni2oem+0x2c>
c0008506:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000850a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850f:	eb 5b                	jmp    c000856c <ff_uni2oem+0x87>
c0008511:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008519:	77 51                	ja     c000856c <ff_uni2oem+0x87>
c000851b:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008521:	75 49                	jne    c000856c <ff_uni2oem+0x87>
c0008523:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000852a:	eb 0b                	jmp    c0008537 <ff_uni2oem+0x52>
c000852c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008531:	40                   	inc    eax
c0008532:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008537:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000853d:	77 1b                	ja     c000855a <ff_uni2oem+0x75>
c000853f:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008544:	01 c0                	add    eax,eax
c0008546:	89 c2                	mov    edx,eax
c0008548:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000854c:	01 d0                	add    eax,edx
c000854e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008551:	0f b7 c0             	movzx  eax,ax
c0008554:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008558:	75 d2                	jne    c000852c <ff_uni2oem+0x47>
c000855a:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000855f:	83 e8 80             	sub    eax,0xffffff80
c0008562:	25 ff 00 00 00       	and    eax,0xff
c0008567:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000856c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008571:	83 c4 14             	add    esp,0x14
c0008574:	c3                   	ret    

c0008575 <ff_oem2uni>:
c0008575:	83 ec 18             	sub    esp,0x18
c0008578:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000857c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008580:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008585:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008589:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008590:	c7 44 24 10 40 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a040
c0008598:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000859e:	77 0b                	ja     c00085ab <ff_oem2uni+0x36>
c00085a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085a9:	eb 2d                	jmp    c00085d8 <ff_oem2uni+0x63>
c00085ab:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00085b1:	75 25                	jne    c00085d8 <ff_oem2uni+0x63>
c00085b3:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00085ba:	77 1c                	ja     c00085d8 <ff_oem2uni+0x63>
c00085bc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085c1:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085c6:	01 c0                	add    eax,eax
c00085c8:	89 c2                	mov    edx,eax
c00085ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085ce:	01 d0                	add    eax,edx
c00085d0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085d3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085d8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085dd:	83 c4 18             	add    esp,0x18
c00085e0:	c3                   	ret    

c00085e1 <ff_wtoupper>:
c00085e1:	83 ec 10             	sub    esp,0x10
c00085e4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085ec:	0f 87 3e 01 00 00    	ja     c0008730 <ff_wtoupper+0x14f>
c00085f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085fb:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008602:	77 07                	ja     c000860b <ff_wtoupper+0x2a>
c0008604:	b8 40 9e 02 c0       	mov    eax,0xc0029e40
c0008609:	eb 05                	jmp    c0008610 <ff_wtoupper+0x2f>
c000860b:	b8 80 9d 02 c0       	mov    eax,0xc0029d80
c0008610:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008614:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008618:	8d 50 02             	lea    edx,[eax+0x2]
c000861b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000861f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008622:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008627:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c000862d:	0f 84 f4 00 00 00    	je     c0008727 <ff_wtoupper+0x146>
c0008633:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008638:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c000863d:	0f 82 e4 00 00 00    	jb     c0008727 <ff_wtoupper+0x146>
c0008643:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008647:	8d 50 02             	lea    edx,[eax+0x2]
c000864a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000864e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008651:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008656:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000865b:	66 c1 e8 08          	shr    ax,0x8
c000865f:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008664:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000866b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008670:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008675:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000867a:	01 ca                	add    edx,ecx
c000867c:	39 d0                	cmp    eax,edx
c000867e:	0f 8d 86 00 00 00    	jge    c000870a <ff_wtoupper+0x129>
c0008684:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008689:	83 f8 08             	cmp    eax,0x8
c000868c:	0f 87 94 00 00 00    	ja     c0008726 <ff_wtoupper+0x145>
c0008692:	8b 04 85 40 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd62c0]
c0008699:	ff e0                	jmp    eax
c000869b:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00086a0:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00086a5:	29 c2                	sub    edx,eax
c00086a7:	89 d0                	mov    eax,edx
c00086a9:	01 c0                	add    eax,eax
c00086ab:	89 c2                	mov    edx,eax
c00086ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086b1:	01 d0                	add    eax,edx
c00086b3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086b6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00086bb:	eb 4b                	jmp    c0008708 <ff_wtoupper+0x127>
c00086bd:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086c2:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086c6:	83 e0 01             	and    eax,0x1
c00086c9:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086ce:	eb 38                	jmp    c0008708 <ff_wtoupper+0x127>
c00086d0:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086d6:	eb 30                	jmp    c0008708 <ff_wtoupper+0x127>
c00086d8:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086de:	eb 28                	jmp    c0008708 <ff_wtoupper+0x127>
c00086e0:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086e6:	eb 20                	jmp    c0008708 <ff_wtoupper+0x127>
c00086e8:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ee:	eb 18                	jmp    c0008708 <ff_wtoupper+0x127>
c00086f0:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086f6:	eb 10                	jmp    c0008708 <ff_wtoupper+0x127>
c00086f8:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086fe:	eb 08                	jmp    c0008708 <ff_wtoupper+0x127>
c0008700:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008707:	90                   	nop
c0008708:	eb 1c                	jmp    c0008726 <ff_wtoupper+0x145>
c000870a:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008710:	0f 85 fe fe ff ff    	jne    c0008614 <ff_wtoupper+0x33>
c0008716:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000871b:	01 c0                	add    eax,eax
c000871d:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008721:	e9 ee fe ff ff       	jmp    c0008614 <ff_wtoupper+0x33>
c0008726:	90                   	nop
c0008727:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000872c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	c3                   	ret    

c0008738 <psrc_set_converter>:
c0008738:	56                   	push   esi
c0008739:	89 d6                	mov    esi,edx
c000873b:	53                   	push   ebx
c000873c:	89 c3                	mov    ebx,eax
c000873e:	83 ec 0c             	sub    esp,0xc
c0008741:	52                   	push   edx
c0008742:	50                   	push   eax
c0008743:	e8 6f 55 00 00       	call   c000dcb7 <sinc_set_converter>
c0008748:	83 c4 10             	add    esp,0x10
c000874b:	85 c0                	test   eax,eax
c000874d:	74 25                	je     c0008774 <psrc_set_converter+0x3c>
c000874f:	50                   	push   eax
c0008750:	50                   	push   eax
c0008751:	56                   	push   esi
c0008752:	53                   	push   ebx
c0008753:	e8 17 5d 00 00       	call   c000e46f <zoh_set_converter>
c0008758:	83 c4 10             	add    esp,0x10
c000875b:	85 c0                	test   eax,eax
c000875d:	74 15                	je     c0008774 <psrc_set_converter+0x3c>
c000875f:	51                   	push   ecx
c0008760:	51                   	push   ecx
c0008761:	56                   	push   esi
c0008762:	53                   	push   ebx
c0008763:	e8 0f 11 00 00       	call   c0009877 <linear_set_converter>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	ba 0a 00 00 00       	mov    edx,0xa
c0008770:	85 c0                	test   eax,eax
c0008772:	75 02                	jne    c0008776 <psrc_set_converter+0x3e>
c0008774:	31 d2                	xor    edx,edx
c0008776:	89 d0                	mov    eax,edx
c0008778:	5a                   	pop    edx
c0008779:	5b                   	pop    ebx
c000877a:	5e                   	pop    esi
c000877b:	c3                   	ret    

c000877c <src_delete>:
c000877c:	53                   	push   ebx
c000877d:	83 ec 08             	sub    esp,0x8
c0008780:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008784:	85 db                	test   ebx,ebx
c0008786:	74 29                	je     c00087b1 <src_delete+0x35>
c0008788:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000878b:	85 c0                	test   eax,eax
c000878d:	74 0c                	je     c000879b <src_delete+0x1f>
c000878f:	83 ec 0c             	sub    esp,0xc
c0008792:	50                   	push   eax
c0008793:	e8 fe 70 00 00       	call   c000f896 <free>
c0008798:	83 c4 10             	add    esp,0x10
c000879b:	50                   	push   eax
c000879c:	6a 3c                	push   0x3c
c000879e:	6a 00                	push   0x0
c00087a0:	53                   	push   ebx
c00087a1:	e8 f6 7f ff ff       	call   c000079c <memset>
c00087a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00087a9:	e8 e8 70 00 00       	call   c000f896 <free>
c00087ae:	83 c4 10             	add    esp,0x10
c00087b1:	31 c0                	xor    eax,eax
c00087b3:	83 c4 08             	add    esp,0x8
c00087b6:	5b                   	pop    ebx
c00087b7:	c3                   	ret    

c00087b8 <src_process>:
c00087b8:	55                   	push   ebp
c00087b9:	57                   	push   edi
c00087ba:	56                   	push   esi
c00087bb:	53                   	push   ebx
c00087bc:	83 ec 1c             	sub    esp,0x1c
c00087bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00087c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087c7:	85 ed                	test   ebp,ebp
c00087c9:	0f 84 6f 01 00 00    	je     c000893e <src_process+0x186>
c00087cf:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087d3:	0f 84 6c 01 00 00    	je     c0008945 <src_process+0x18d>
c00087d9:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087dd:	0f 84 62 01 00 00    	je     c0008945 <src_process+0x18d>
c00087e3:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087ea:	0f 85 5c 01 00 00    	jne    c000894c <src_process+0x194>
c00087f0:	85 db                	test   ebx,ebx
c00087f2:	0f 84 5b 01 00 00    	je     c0008953 <src_process+0x19b>
c00087f8:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087fa:	85 f6                	test   esi,esi
c00087fc:	0f 84 58 01 00 00    	je     c000895a <src_process+0x1a2>
c0008802:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008805:	85 ff                	test   edi,edi
c0008807:	0f 84 4d 01 00 00    	je     c000895a <src_process+0x1a2>
c000880d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008810:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0008813:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008817:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000881b:	68 00 00 70 3f       	push   0x3f700000
c0008820:	6a 00                	push   0x0
c0008822:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008826:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000882a:	e8 d8 03 02 00       	call   c0028c07 <__ltdf2>
c000882f:	83 c4 10             	add    esp,0x10
c0008832:	85 c0                	test   eax,eax
c0008834:	0f 88 27 01 00 00    	js     c0008961 <src_process+0x1a9>
c000883a:	68 00 00 70 40       	push   0x40700000
c000883f:	6a 00                	push   0x0
c0008841:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008845:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008849:	e8 9b 03 02 00       	call   c0028be9 <__gtdf2>
c000884e:	83 c4 10             	add    esp,0x10
c0008851:	85 c0                	test   eax,eax
c0008853:	0f 8f 08 01 00 00    	jg     c0008961 <src_process+0x1a9>
c0008859:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000885d:	79 07                	jns    c0008866 <src_process+0xae>
c000885f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008866:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008869:	85 c0                	test   eax,eax
c000886b:	79 50                	jns    c00088bd <src_process+0x105>
c000886d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008874:	39 fe                	cmp    esi,edi
c0008876:	72 37                	jb     c00088af <src_process+0xf7>
c0008878:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000887f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008886:	68 00 00 70 3f       	push   0x3f700000
c000888b:	6a 00                	push   0x0
c000888d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008890:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008893:	e8 6f 03 02 00       	call   c0028c07 <__ltdf2>
c0008898:	83 c4 10             	add    esp,0x10
c000889b:	85 c0                	test   eax,eax
c000889d:	79 37                	jns    c00088d6 <src_process+0x11e>
c000889f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00088a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00088a7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00088aa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00088ad:	eb 27                	jmp    c00088d6 <src_process+0x11e>
c00088af:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00088b2:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088b6:	8d 04 86             	lea    eax,[esi+eax*4]
c00088b9:	39 c7                	cmp    edi,eax
c00088bb:	eb 0d                	jmp    c00088ca <src_process+0x112>
c00088bd:	39 fe                	cmp    esi,edi
c00088bf:	72 ee                	jb     c00088af <src_process+0xf7>
c00088c1:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088c5:	8d 04 87             	lea    eax,[edi+eax*4]
c00088c8:	39 c6                	cmp    esi,eax
c00088ca:	73 ac                	jae    c0008878 <src_process+0xc0>
c00088cc:	b8 10 00 00 00       	mov    eax,0x10
c00088d1:	e9 90 00 00 00       	jmp    c0008966 <src_process+0x1ae>
c00088d6:	83 ec 10             	sub    esp,0x10
c00088d9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088dc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088df:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088e2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088e5:	e8 22 fa 01 00       	call   c002830c <__subdf3>
c00088ea:	83 c4 18             	add    esp,0x18
c00088ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088f5:	52                   	push   edx
c00088f6:	50                   	push   eax
c00088f7:	e8 a4 04 02 00       	call   c0028da0 <fabs>
c00088fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008900:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008904:	83 c4 10             	add    esp,0x10
c0008907:	68 af 03 d2 3c       	push   0x3cd203af
c000890c:	68 16 56 e7 9e       	push   0x9ee75616
c0008911:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008919:	e8 e9 02 02 00       	call   c0028c07 <__ltdf2>
c000891e:	83 c4 10             	add    esp,0x10
c0008921:	85 c0                	test   eax,eax
c0008923:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008927:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c000892b:	79 05                	jns    c0008932 <src_process+0x17a>
c000892d:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008930:	eb 03                	jmp    c0008935 <src_process+0x17d>
c0008932:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008935:	83 c4 1c             	add    esp,0x1c
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	5f                   	pop    edi
c000893b:	5d                   	pop    ebp
c000893c:	ff e0                	jmp    eax
c000893e:	b8 02 00 00 00       	mov    eax,0x2
c0008943:	eb 21                	jmp    c0008966 <src_process+0x1ae>
c0008945:	b8 07 00 00 00       	mov    eax,0x7
c000894a:	eb 1a                	jmp    c0008966 <src_process+0x1ae>
c000894c:	b8 12 00 00 00       	mov    eax,0x12
c0008951:	eb 13                	jmp    c0008966 <src_process+0x1ae>
c0008953:	b8 03 00 00 00       	mov    eax,0x3
c0008958:	eb 0c                	jmp    c0008966 <src_process+0x1ae>
c000895a:	b8 04 00 00 00       	mov    eax,0x4
c000895f:	eb 05                	jmp    c0008966 <src_process+0x1ae>
c0008961:	b8 06 00 00 00       	mov    eax,0x6
c0008966:	83 c4 1c             	add    esp,0x1c
c0008969:	5b                   	pop    ebx
c000896a:	5e                   	pop    esi
c000896b:	5f                   	pop    edi
c000896c:	5d                   	pop    ebp
c000896d:	c3                   	ret    

c000896e <src_callback_read>:
c000896e:	55                   	push   ebp
c000896f:	57                   	push   edi
c0008970:	56                   	push   esi
c0008971:	53                   	push   ebx
c0008972:	83 ec 3c             	sub    esp,0x3c
c0008975:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008979:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000897d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008981:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008985:	85 ed                	test   ebp,ebp
c0008987:	0f 8e 52 01 00 00    	jle    c0008adf <src_callback_read+0x171>
c000898d:	85 db                	test   ebx,ebx
c000898f:	0f 84 4a 01 00 00    	je     c0008adf <src_callback_read+0x171>
c0008995:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000899c:	74 0c                	je     c00089aa <src_callback_read+0x3c>
c000899e:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c00089a5:	e9 35 01 00 00       	jmp    c0008adf <src_callback_read+0x171>
c00089aa:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c00089ae:	75 0c                	jne    c00089bc <src_callback_read+0x4e>
c00089b0:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c00089b7:	e9 23 01 00 00       	jmp    c0008adf <src_callback_read+0x171>
c00089bc:	51                   	push   ecx
c00089bd:	6a 24                	push   0x24
c00089bf:	6a 00                	push   0x0
c00089c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089c5:	50                   	push   eax
c00089c6:	e8 d1 7d ff ff       	call   c000079c <memset>
c00089cb:	83 c4 10             	add    esp,0x10
c00089ce:	68 00 00 70 3f       	push   0x3f700000
c00089d3:	6a 00                	push   0x0
c00089d5:	57                   	push   edi
c00089d6:	56                   	push   esi
c00089d7:	e8 2b 02 02 00       	call   c0028c07 <__ltdf2>
c00089dc:	83 c4 10             	add    esp,0x10
c00089df:	85 c0                	test   eax,eax
c00089e1:	78 3e                	js     c0008a21 <src_callback_read+0xb3>
c00089e3:	68 00 00 70 40       	push   0x40700000
c00089e8:	6a 00                	push   0x0
c00089ea:	57                   	push   edi
c00089eb:	56                   	push   esi
c00089ec:	e8 f8 01 02 00       	call   c0028be9 <__gtdf2>
c00089f1:	83 c4 10             	add    esp,0x10
c00089f4:	85 c0                	test   eax,eax
c00089f6:	7f 29                	jg     c0008a21 <src_callback_read+0xb3>
c00089f8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089fc:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0008a00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a04:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008a08:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008a0b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0008a0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008a13:	31 f6                	xor    esi,esi
c0008a15:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008a18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a1c:	e9 97 00 00 00       	jmp    c0008ab8 <src_callback_read+0x14a>
c0008a21:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a28:	e9 b2 00 00 00       	jmp    c0008adf <src_callback_read+0x171>
c0008a2d:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a35:	52                   	push   edx
c0008a36:	52                   	push   edx
c0008a37:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a3b:	50                   	push   eax
c0008a3c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a3f:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a42:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a46:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a4a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a4e:	83 c4 10             	add    esp,0x10
c0008a51:	85 c0                	test   eax,eax
c0008a53:	75 08                	jne    c0008a5d <src_callback_read+0xef>
c0008a55:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a5d:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a64:	50                   	push   eax
c0008a65:	50                   	push   eax
c0008a66:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a6a:	50                   	push   eax
c0008a6b:	53                   	push   ebx
c0008a6c:	e8 47 fd ff ff       	call   c00087b8 <src_process>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a7b:	85 c0                	test   eax,eax
c0008a7d:	75 49                	jne    c0008ac8 <src_callback_read+0x15a>
c0008a7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a86:	89 f9                	mov    ecx,edi
c0008a88:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a8c:	0f af ca             	imul   ecx,edx
c0008a8f:	c1 e1 02             	shl    ecx,0x2
c0008a92:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a96:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a9a:	0f af d1             	imul   edx,ecx
c0008a9d:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008aa1:	c1 e2 02             	shl    edx,0x2
c0008aa4:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008aa8:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008aab:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008ab0:	74 12                	je     c0008ac4 <src_callback_read+0x156>
c0008ab2:	39 d5                	cmp    ebp,edx
c0008ab4:	7e 14                	jle    c0008aca <src_callback_read+0x15c>
c0008ab6:	89 d6                	mov    esi,edx
c0008ab8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008abd:	75 9e                	jne    c0008a5d <src_callback_read+0xef>
c0008abf:	e9 69 ff ff ff       	jmp    c0008a2d <src_callback_read+0xbf>
c0008ac4:	85 c9                	test   ecx,ecx
c0008ac6:	75 ea                	jne    c0008ab2 <src_callback_read+0x144>
c0008ac8:	89 f2                	mov    edx,esi
c0008aca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ace:	85 c0                	test   eax,eax
c0008ad0:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008ad3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad7:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ada:	74 05                	je     c0008ae1 <src_callback_read+0x173>
c0008adc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008adf:	31 d2                	xor    edx,edx
c0008ae1:	83 c4 3c             	add    esp,0x3c
c0008ae4:	89 d0                	mov    eax,edx
c0008ae6:	5b                   	pop    ebx
c0008ae7:	5e                   	pop    esi
c0008ae8:	5f                   	pop    edi
c0008ae9:	5d                   	pop    ebp
c0008aea:	c3                   	ret    

c0008aeb <src_set_ratio>:
c0008aeb:	57                   	push   edi
c0008aec:	ba 02 00 00 00       	mov    edx,0x2
c0008af1:	56                   	push   esi
c0008af2:	53                   	push   ebx
c0008af3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008af7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008afb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aff:	85 db                	test   ebx,ebx
c0008b01:	74 4c                	je     c0008b4f <src_set_ratio+0x64>
c0008b03:	ba 07 00 00 00       	mov    edx,0x7
c0008b08:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008b0c:	74 41                	je     c0008b4f <src_set_ratio+0x64>
c0008b0e:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008b12:	74 3b                	je     c0008b4f <src_set_ratio+0x64>
c0008b14:	68 00 00 70 3f       	push   0x3f700000
c0008b19:	6a 00                	push   0x0
c0008b1b:	57                   	push   edi
c0008b1c:	56                   	push   esi
c0008b1d:	e8 e5 00 02 00       	call   c0028c07 <__ltdf2>
c0008b22:	83 c4 10             	add    esp,0x10
c0008b25:	ba 06 00 00 00       	mov    edx,0x6
c0008b2a:	85 c0                	test   eax,eax
c0008b2c:	78 21                	js     c0008b4f <src_set_ratio+0x64>
c0008b2e:	68 00 00 70 40       	push   0x40700000
c0008b33:	6a 00                	push   0x0
c0008b35:	57                   	push   edi
c0008b36:	56                   	push   esi
c0008b37:	e8 ad 00 02 00       	call   c0028be9 <__gtdf2>
c0008b3c:	83 c4 10             	add    esp,0x10
c0008b3f:	ba 06 00 00 00       	mov    edx,0x6
c0008b44:	85 c0                	test   eax,eax
c0008b46:	7f 07                	jg     c0008b4f <src_set_ratio+0x64>
c0008b48:	89 33                	mov    DWORD PTR [ebx],esi
c0008b4a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b4d:	31 d2                	xor    edx,edx
c0008b4f:	5b                   	pop    ebx
c0008b50:	89 d0                	mov    eax,edx
c0008b52:	5e                   	pop    esi
c0008b53:	5f                   	pop    edi
c0008b54:	c3                   	ret    

c0008b55 <src_get_channels>:
c0008b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b59:	b8 02 00 00 00       	mov    eax,0x2
c0008b5e:	85 d2                	test   edx,edx
c0008b60:	74 14                	je     c0008b76 <src_get_channels+0x21>
c0008b62:	b8 07 00 00 00       	mov    eax,0x7
c0008b67:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b6b:	74 09                	je     c0008b76 <src_get_channels+0x21>
c0008b6d:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b71:	74 03                	je     c0008b76 <src_get_channels+0x21>
c0008b73:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b76:	c3                   	ret    

c0008b77 <src_reset>:
c0008b77:	53                   	push   ebx
c0008b78:	b8 02 00 00 00       	mov    eax,0x2
c0008b7d:	83 ec 08             	sub    esp,0x8
c0008b80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b84:	85 db                	test   ebx,ebx
c0008b86:	74 36                	je     c0008bbe <src_reset+0x47>
c0008b88:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b8b:	85 c0                	test   eax,eax
c0008b8d:	74 09                	je     c0008b98 <src_reset+0x21>
c0008b8f:	83 ec 0c             	sub    esp,0xc
c0008b92:	53                   	push   ebx
c0008b93:	ff d0                	call   eax
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	31 d2                	xor    edx,edx
c0008b9c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b9f:	89 03                	mov    DWORD PTR [ebx],eax
c0008ba1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008ba4:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008ba7:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008bae:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008bb5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008bbc:	31 c0                	xor    eax,eax
c0008bbe:	83 c4 08             	add    esp,0x8
c0008bc1:	5b                   	pop    ebx
c0008bc2:	c3                   	ret    

c0008bc3 <src_new>:
c0008bc3:	57                   	push   edi
c0008bc4:	56                   	push   esi
c0008bc5:	53                   	push   ebx
c0008bc6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008bca:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008bce:	85 f6                	test   esi,esi
c0008bd0:	74 73                	je     c0008c45 <src_new+0x82>
c0008bd2:	85 ff                	test   edi,edi
c0008bd4:	7f 08                	jg     c0008bde <src_new+0x1b>
c0008bd6:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bdc:	eb 1e                	jmp    c0008bfc <src_new+0x39>
c0008bde:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008be4:	50                   	push   eax
c0008be5:	50                   	push   eax
c0008be6:	6a 3c                	push   0x3c
c0008be8:	6a 01                	push   0x1
c0008bea:	e8 c7 6c 00 00       	call   c000f8b6 <calloc>
c0008bef:	83 c4 10             	add    esp,0x10
c0008bf2:	89 c3                	mov    ebx,eax
c0008bf4:	85 c0                	test   eax,eax
c0008bf6:	75 10                	jne    c0008c08 <src_new+0x45>
c0008bf8:	85 f6                	test   esi,esi
c0008bfa:	75 04                	jne    c0008c00 <src_new+0x3d>
c0008bfc:	31 db                	xor    ebx,ebx
c0008bfe:	eb 4b                	jmp    c0008c4b <src_new+0x88>
c0008c00:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008c06:	eb 43                	jmp    c0008c4b <src_new+0x88>
c0008c08:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008c0b:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008c12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008c16:	e8 1d fb ff ff       	call   c0008738 <psrc_set_converter>
c0008c1b:	85 c0                	test   eax,eax
c0008c1d:	74 18                	je     c0008c37 <src_new+0x74>
c0008c1f:	85 f6                	test   esi,esi
c0008c21:	74 06                	je     c0008c29 <src_new+0x66>
c0008c23:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c29:	83 ec 0c             	sub    esp,0xc
c0008c2c:	53                   	push   ebx
c0008c2d:	31 db                	xor    ebx,ebx
c0008c2f:	e8 62 6c 00 00       	call   c000f896 <free>
c0008c34:	83 c4 10             	add    esp,0x10
c0008c37:	83 ec 0c             	sub    esp,0xc
c0008c3a:	53                   	push   ebx
c0008c3b:	e8 37 ff ff ff       	call   c0008b77 <src_reset>
c0008c40:	83 c4 10             	add    esp,0x10
c0008c43:	eb 06                	jmp    c0008c4b <src_new+0x88>
c0008c45:	85 ff                	test   edi,edi
c0008c47:	7f 9b                	jg     c0008be4 <src_new+0x21>
c0008c49:	eb b1                	jmp    c0008bfc <src_new+0x39>
c0008c4b:	89 d8                	mov    eax,ebx
c0008c4d:	5b                   	pop    ebx
c0008c4e:	5e                   	pop    esi
c0008c4f:	5f                   	pop    edi
c0008c50:	c3                   	ret    

c0008c51 <src_callback_new>:
c0008c51:	56                   	push   esi
c0008c52:	53                   	push   ebx
c0008c53:	53                   	push   ebx
c0008c54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c5c:	85 f6                	test   esi,esi
c0008c5e:	75 0e                	jne    c0008c6e <src_callback_new+0x1d>
c0008c60:	31 db                	xor    ebx,ebx
c0008c62:	85 c0                	test   eax,eax
c0008c64:	74 47                	je     c0008cad <src_callback_new+0x5c>
c0008c66:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c6c:	eb 3f                	jmp    c0008cad <src_callback_new+0x5c>
c0008c6e:	85 c0                	test   eax,eax
c0008c70:	74 06                	je     c0008c78 <src_callback_new+0x27>
c0008c72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c78:	51                   	push   ecx
c0008c79:	50                   	push   eax
c0008c7a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c7e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c82:	e8 3c ff ff ff       	call   c0008bc3 <src_new>
c0008c87:	83 c4 10             	add    esp,0x10
c0008c8a:	89 c3                	mov    ebx,eax
c0008c8c:	85 c0                	test   eax,eax
c0008c8e:	74 1d                	je     c0008cad <src_callback_new+0x5c>
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 de fe ff ff       	call   c0008b77 <src_reset>
c0008c99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c9d:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008ca4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008ca7:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	89 d8                	mov    eax,ebx
c0008caf:	5a                   	pop    edx
c0008cb0:	5b                   	pop    ebx
c0008cb1:	5e                   	pop    esi
c0008cb2:	c3                   	ret    

c0008cb3 <src_get_name>:
c0008cb3:	53                   	push   ebx
c0008cb4:	83 ec 14             	sub    esp,0x14
c0008cb7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cbb:	53                   	push   ebx
c0008cbc:	e8 d0 4f 00 00       	call   c000dc91 <sinc_get_name>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	85 c0                	test   eax,eax
c0008cc6:	75 1d                	jne    c0008ce5 <src_get_name+0x32>
c0008cc8:	83 ec 0c             	sub    esp,0xc
c0008ccb:	53                   	push   ebx
c0008ccc:	e8 80 57 00 00       	call   c000e451 <zoh_get_name>
c0008cd1:	83 c4 10             	add    esp,0x10
c0008cd4:	85 c0                	test   eax,eax
c0008cd6:	75 0d                	jne    c0008ce5 <src_get_name+0x32>
c0008cd8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cdc:	83 c4 08             	add    esp,0x8
c0008cdf:	5b                   	pop    ebx
c0008ce0:	e9 74 0b 00 00       	jmp    c0009859 <linear_get_name>
c0008ce5:	83 c4 08             	add    esp,0x8
c0008ce8:	5b                   	pop    ebx
c0008ce9:	c3                   	ret    

c0008cea <src_get_description>:
c0008cea:	53                   	push   ebx
c0008ceb:	83 ec 14             	sub    esp,0x14
c0008cee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cf2:	53                   	push   ebx
c0008cf3:	e8 ac 4f 00 00       	call   c000dca4 <sinc_get_description>
c0008cf8:	83 c4 10             	add    esp,0x10
c0008cfb:	85 c0                	test   eax,eax
c0008cfd:	75 1d                	jne    c0008d1c <src_get_description+0x32>
c0008cff:	83 ec 0c             	sub    esp,0xc
c0008d02:	53                   	push   ebx
c0008d03:	e8 58 57 00 00       	call   c000e460 <zoh_get_description>
c0008d08:	83 c4 10             	add    esp,0x10
c0008d0b:	85 c0                	test   eax,eax
c0008d0d:	75 0d                	jne    c0008d1c <src_get_description+0x32>
c0008d0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008d13:	83 c4 08             	add    esp,0x8
c0008d16:	5b                   	pop    ebx
c0008d17:	e9 4c 0b 00 00       	jmp    c0009868 <linear_get_description>
c0008d1c:	83 c4 08             	add    esp,0x8
c0008d1f:	5b                   	pop    ebx
c0008d20:	c3                   	ret    

c0008d21 <src_get_version>:
c0008d21:	b8 40 a1 02 c0       	mov    eax,0xc002a140
c0008d26:	c3                   	ret    

c0008d27 <src_is_valid_ratio>:
c0008d27:	83 ec 1c             	sub    esp,0x1c
c0008d2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d3a:	68 00 00 70 3f       	push   0x3f700000
c0008d3f:	6a 00                	push   0x0
c0008d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d49:	e8 b9 fe 01 00       	call   c0028c07 <__ltdf2>
c0008d4e:	83 c4 10             	add    esp,0x10
c0008d51:	31 d2                	xor    edx,edx
c0008d53:	85 c0                	test   eax,eax
c0008d55:	78 1e                	js     c0008d75 <src_is_valid_ratio+0x4e>
c0008d57:	68 00 00 70 40       	push   0x40700000
c0008d5c:	6a 00                	push   0x0
c0008d5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d66:	e8 7e fe 01 00       	call   c0028be9 <__gtdf2>
c0008d6b:	31 d2                	xor    edx,edx
c0008d6d:	83 c4 10             	add    esp,0x10
c0008d70:	85 c0                	test   eax,eax
c0008d72:	0f 9e c2             	setle  dl
c0008d75:	89 d0                	mov    eax,edx
c0008d77:	83 c4 1c             	add    esp,0x1c
c0008d7a:	c3                   	ret    

c0008d7b <src_error>:
c0008d7b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d7f:	31 c0                	xor    eax,eax
c0008d81:	85 d2                	test   edx,edx
c0008d83:	74 03                	je     c0008d88 <src_error+0xd>
c0008d85:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d88:	c3                   	ret    

c0008d89 <src_strerror>:
c0008d89:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d8d:	31 c0                	xor    eax,eax
c0008d8f:	83 fa 17             	cmp    edx,0x17
c0008d92:	77 07                	ja     c0008d9b <src_strerror+0x12>
c0008d94:	8b 04 95 a0 a5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5a60]
c0008d9b:	c3                   	ret    

c0008d9c <src_simple>:
c0008d9c:	56                   	push   esi
c0008d9d:	53                   	push   ebx
c0008d9e:	83 ec 18             	sub    esp,0x18
c0008da1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008da5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008da9:	50                   	push   eax
c0008daa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008dae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008db2:	e8 0c fe ff ff       	call   c0008bc3 <src_new>
c0008db7:	83 c4 10             	add    esp,0x10
c0008dba:	85 c0                	test   eax,eax
c0008dbc:	75 06                	jne    c0008dc4 <src_simple+0x28>
c0008dbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dc2:	eb 25                	jmp    c0008de9 <src_simple+0x4d>
c0008dc4:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008dcb:	89 c3                	mov    ebx,eax
c0008dcd:	50                   	push   eax
c0008dce:	50                   	push   eax
c0008dcf:	56                   	push   esi
c0008dd0:	53                   	push   ebx
c0008dd1:	e8 e2 f9 ff ff       	call   c00087b8 <src_process>
c0008dd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008dd9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ddd:	e8 9a f9 ff ff       	call   c000877c <src_delete>
c0008de2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008de6:	83 c4 10             	add    esp,0x10
c0008de9:	83 c4 14             	add    esp,0x14
c0008dec:	5b                   	pop    ebx
c0008ded:	5e                   	pop    esi
c0008dee:	c3                   	ret    

c0008def <src_short_to_float_array>:
c0008def:	53                   	push   ebx
c0008df0:	83 ec 18             	sub    esp,0x18
c0008df3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008df7:	85 db                	test   ebx,ebx
c0008df9:	74 54                	je     c0008e4f <src_short_to_float_array+0x60>
c0008dfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dff:	4b                   	dec    ebx
c0008e00:	83 ec 0c             	sub    esp,0xc
c0008e03:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008e07:	50                   	push   eax
c0008e08:	e8 8e fb 01 00       	call   c002899b <__floatsidf>
c0008e0d:	83 c4 10             	add    esp,0x10
c0008e10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e18:	68 00 00 00 3f       	push   0x3f000000
c0008e1d:	6a 00                	push   0x0
c0008e1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e27:	e8 0c f5 01 00       	call   c0028338 <__muldf3>
c0008e2c:	59                   	pop    ecx
c0008e2d:	59                   	pop    ecx
c0008e2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e32:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e3e:	e8 c8 fd 01 00       	call   c0028c0b <__truncdfsf2>
c0008e43:	83 c4 10             	add    esp,0x10
c0008e46:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e4a:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e4d:	eb a8                	jmp    c0008df7 <src_short_to_float_array+0x8>
c0008e4f:	83 c4 18             	add    esp,0x18
c0008e52:	5b                   	pop    ebx
c0008e53:	c3                   	ret    

c0008e54 <src_float_to_short_array>:
c0008e54:	56                   	push   esi
c0008e55:	53                   	push   ebx
c0008e56:	83 ec 14             	sub    esp,0x14
c0008e59:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e5d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e61:	85 db                	test   ebx,ebx
c0008e63:	0f 84 a4 00 00 00    	je     c0008f0d <src_float_to_short_array+0xb9>
c0008e69:	83 ec 0c             	sub    esp,0xc
c0008e6c:	4b                   	dec    ebx
c0008e6d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e71:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e74:	e8 b6 fe 01 00       	call   c0028d2f <__extendsfdf2>
c0008e79:	83 c4 10             	add    esp,0x10
c0008e7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e84:	68 00 00 e0 41       	push   0x41e00000
c0008e89:	6a 00                	push   0x0
c0008e8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e93:	e8 a0 f4 01 00       	call   c0028338 <__muldf3>
c0008e98:	83 c4 10             	add    esp,0x10
c0008e9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ea3:	68 ff ff df 41       	push   0x41dfffff
c0008ea8:	68 00 00 c0 ff       	push   0xffc00000
c0008ead:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb5:	e8 4b fd 01 00       	call   c0028c05 <__gedf2>
c0008eba:	83 c4 10             	add    esp,0x10
c0008ebd:	85 c0                	test   eax,eax
c0008ebf:	78 08                	js     c0008ec9 <src_float_to_short_array+0x75>
c0008ec1:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ec7:	eb 98                	jmp    c0008e61 <src_float_to_short_array+0xd>
c0008ec9:	68 00 00 e0 c1       	push   0xc1e00000
c0008ece:	6a 00                	push   0x0
c0008ed0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed8:	e8 2c fd 01 00       	call   c0028c09 <__ledf2>
c0008edd:	83 c4 10             	add    esp,0x10
c0008ee0:	85 c0                	test   eax,eax
c0008ee2:	7f 0b                	jg     c0008eef <src_float_to_short_array+0x9b>
c0008ee4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008eea:	e9 72 ff ff ff       	jmp    c0008e61 <src_float_to_short_array+0xd>
c0008eef:	50                   	push   eax
c0008ef0:	50                   	push   eax
c0008ef1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ef5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ef9:	e8 c2 fe 01 00       	call   c0028dc0 <lrint>
c0008efe:	83 c4 10             	add    esp,0x10
c0008f01:	c1 f8 10             	sar    eax,0x10
c0008f04:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008f08:	e9 54 ff ff ff       	jmp    c0008e61 <src_float_to_short_array+0xd>
c0008f0d:	83 c4 14             	add    esp,0x14
c0008f10:	5b                   	pop    ebx
c0008f11:	5e                   	pop    esi
c0008f12:	c3                   	ret    

c0008f13 <src_int_to_float_array>:
c0008f13:	53                   	push   ebx
c0008f14:	83 ec 18             	sub    esp,0x18
c0008f17:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f1b:	85 db                	test   ebx,ebx
c0008f1d:	74 52                	je     c0008f71 <src_int_to_float_array+0x5e>
c0008f1f:	83 ec 0c             	sub    esp,0xc
c0008f22:	4b                   	dec    ebx
c0008f23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f27:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f2a:	e8 6c fa 01 00       	call   c002899b <__floatsidf>
c0008f2f:	83 c4 10             	add    esp,0x10
c0008f32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f3a:	68 00 00 00 3e       	push   0x3e000000
c0008f3f:	6a 00                	push   0x0
c0008f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f49:	e8 ea f3 01 00       	call   c0028338 <__muldf3>
c0008f4e:	59                   	pop    ecx
c0008f4f:	59                   	pop    ecx
c0008f50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f54:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f60:	e8 a6 fc 01 00       	call   c0028c0b <__truncdfsf2>
c0008f65:	83 c4 10             	add    esp,0x10
c0008f68:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f6c:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f6f:	eb aa                	jmp    c0008f1b <src_int_to_float_array+0x8>
c0008f71:	83 c4 18             	add    esp,0x18
c0008f74:	5b                   	pop    ebx
c0008f75:	c3                   	ret    

c0008f76 <src_float_to_int_array>:
c0008f76:	56                   	push   esi
c0008f77:	53                   	push   ebx
c0008f78:	83 ec 14             	sub    esp,0x14
c0008f7b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f83:	85 db                	test   ebx,ebx
c0008f85:	0f 84 a2 00 00 00    	je     c000902d <src_float_to_int_array+0xb7>
c0008f8b:	83 ec 0c             	sub    esp,0xc
c0008f8e:	4b                   	dec    ebx
c0008f8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f93:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f96:	e8 94 fd 01 00       	call   c0028d2f <__extendsfdf2>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fa2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa6:	68 00 00 e0 41       	push   0x41e00000
c0008fab:	6a 00                	push   0x0
c0008fad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb5:	e8 7e f3 01 00       	call   c0028338 <__muldf3>
c0008fba:	83 c4 10             	add    esp,0x10
c0008fbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fc1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fc5:	68 ff ff df 41       	push   0x41dfffff
c0008fca:	68 00 00 c0 ff       	push   0xffc00000
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 29 fc 01 00       	call   c0028c05 <__gedf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	78 09                	js     c0008fec <src_float_to_int_array+0x76>
c0008fe3:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fea:	eb 97                	jmp    c0008f83 <src_float_to_int_array+0xd>
c0008fec:	68 00 00 e0 c1       	push   0xc1e00000
c0008ff1:	6a 00                	push   0x0
c0008ff3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffb:	e8 09 fc 01 00       	call   c0028c09 <__ledf2>
c0009000:	83 c4 10             	add    esp,0x10
c0009003:	85 c0                	test   eax,eax
c0009005:	7f 0c                	jg     c0009013 <src_float_to_int_array+0x9d>
c0009007:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c000900e:	e9 70 ff ff ff       	jmp    c0008f83 <src_float_to_int_array+0xd>
c0009013:	50                   	push   eax
c0009014:	50                   	push   eax
c0009015:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009019:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000901d:	e8 9e fd 01 00       	call   c0028dc0 <lrint>
c0009022:	83 c4 10             	add    esp,0x10
c0009025:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009028:	e9 56 ff ff ff       	jmp    c0008f83 <src_float_to_int_array+0xd>
c000902d:	83 c4 14             	add    esp,0x14
c0009030:	5b                   	pop    ebx
c0009031:	5e                   	pop    esi
c0009032:	c3                   	ret    

c0009033 <linear_vari_process>:
c0009033:	55                   	push   ebp
c0009034:	31 d2                	xor    edx,edx
c0009036:	57                   	push   edi
c0009037:	56                   	push   esi
c0009038:	53                   	push   ebx
c0009039:	83 ec 3c             	sub    esp,0x3c
c000903c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009040:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009044:	0f 8e d3 07 00 00    	jle    c000981d <linear_vari_process+0x7ea>
c000904a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000904e:	ba 05 00 00 00       	mov    edx,0x5
c0009053:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009056:	85 db                	test   ebx,ebx
c0009058:	0f 84 bf 07 00 00    	je     c000981d <linear_vari_process+0x7ea>
c000905e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009061:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009065:	74 19                	je     c0009080 <linear_vari_process+0x4d>
c0009067:	31 d2                	xor    edx,edx
c0009069:	39 c2                	cmp    edx,eax
c000906b:	7d 0c                	jge    c0009079 <linear_vari_process+0x46>
c000906d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000906f:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009072:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009076:	42                   	inc    edx
c0009077:	eb f0                	jmp    c0009069 <linear_vari_process+0x36>
c0009079:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009080:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009083:	0f af d0             	imul   edx,eax
c0009086:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009089:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000908d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009094:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009097:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000909e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090a2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00090a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00090a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00090ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00090af:	68 00 00 70 3f       	push   0x3f700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 44 fb 01 00       	call   c0028c07 <__ltdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 88 4a 07 00 00    	js     c000981d <linear_vari_process+0x7ea>
c00090d3:	68 00 00 70 40       	push   0x40700000
c00090d8:	6a 00                	push   0x0
c00090da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e2:	e8 02 fb 01 00       	call   c0028be9 <__gtdf2>
c00090e7:	83 c4 10             	add    esp,0x10
c00090ea:	ba 16 00 00 00       	mov    edx,0x16
c00090ef:	85 c0                	test   eax,eax
c00090f1:	0f 8f 26 07 00 00    	jg     c000981d <linear_vari_process+0x7ea>
c00090f7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090fb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009101:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009105:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009109:	68 00 00 f0 3f       	push   0x3ff00000
c000910e:	6a 00                	push   0x0
c0009110:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009114:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009118:	e8 ea fa 01 00       	call   c0028c07 <__ltdf2>
c000911d:	83 c4 10             	add    esp,0x10
c0009120:	85 c0                	test   eax,eax
c0009122:	0f 89 89 02 00 00    	jns    c00093b1 <linear_vari_process+0x37e>
c0009128:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000912b:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000912e:	0f 8d 7d 02 00 00    	jge    c00093b1 <linear_vari_process+0x37e>
c0009134:	83 ec 0c             	sub    esp,0xc
c0009137:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000913a:	e8 5c f8 01 00       	call   c002899b <__floatsidf>
c000913f:	83 c4 10             	add    esp,0x10
c0009142:	89 04 24             	mov    DWORD PTR [esp],eax
c0009145:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009149:	68 00 00 f0 3f       	push   0x3ff00000
c000914e:	6a 00                	push   0x0
c0009150:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009154:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009158:	e8 5e eb 01 00       	call   c0027cbb <__adddf3>
c000915d:	83 c4 10             	add    esp,0x10
c0009160:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009164:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009168:	52                   	push   edx
c0009169:	50                   	push   eax
c000916a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009172:	e8 c1 f1 01 00       	call   c0028338 <__muldf3>
c0009177:	5d                   	pop    ebp
c0009178:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000917c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009180:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009183:	e8 13 f8 01 00       	call   c002899b <__floatsidf>
c0009188:	83 c4 10             	add    esp,0x10
c000918b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000918f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009193:	52                   	push   edx
c0009194:	50                   	push   eax
c0009195:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	e8 19 eb 01 00       	call   c0027cbb <__adddf3>
c00091a2:	59                   	pop    ecx
c00091a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00091a7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00091ab:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00091ae:	e8 e8 f7 01 00       	call   c002899b <__floatsidf>
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00091ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00091be:	52                   	push   edx
c00091bf:	50                   	push   eax
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 38 fa 01 00       	call   c0028c05 <__gedf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 89 d9 01 00 00    	jns    c00093b1 <linear_vari_process+0x37e>
c00091d8:	85 ff                	test   edi,edi
c00091da:	0f 8e f4 00 00 00    	jle    c00092d4 <linear_vari_process+0x2a1>
c00091e0:	83 ec 10             	sub    esp,0x10
c00091e3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091e6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091e9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091ed:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091f0:	ff 30                	push   DWORD PTR [eax]
c00091f2:	e8 15 f1 01 00       	call   c002830c <__subdf3>
c00091f7:	83 c4 18             	add    esp,0x18
c00091fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009202:	52                   	push   edx
c0009203:	50                   	push   eax
c0009204:	e8 97 fb 01 00       	call   c0028da0 <fabs>
c0009209:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000920d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009219:	68 23 42 92 0c       	push   0xc924223
c000921e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009222:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009226:	e8 be f9 01 00       	call   c0028be9 <__gtdf2>
c000922b:	83 c4 10             	add    esp,0x10
c000922e:	85 c0                	test   eax,eax
c0009230:	0f 8e 9e 00 00 00    	jle    c00092d4 <linear_vari_process+0x2a1>
c0009236:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000923a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000923d:	8b 00                	mov    eax,DWORD PTR [eax]
c000923f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009243:	89 04 24             	mov    DWORD PTR [esp],eax
c0009246:	52                   	push   edx
c0009247:	50                   	push   eax
c0009248:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000924b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000924e:	e8 b9 f0 01 00       	call   c002830c <__subdf3>
c0009253:	59                   	pop    ecx
c0009254:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009258:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000925c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000925f:	e8 37 f7 01 00       	call   c002899b <__floatsidf>
c0009264:	83 c4 10             	add    esp,0x10
c0009267:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000926b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926f:	52                   	push   edx
c0009270:	50                   	push   eax
c0009271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009279:	e8 ba f0 01 00       	call   c0028338 <__muldf3>
c000927e:	5f                   	pop    edi
c000927f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009283:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009287:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000928a:	e8 0c f7 01 00       	call   c002899b <__floatsidf>
c000928f:	83 c4 10             	add    esp,0x10
c0009292:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009296:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000929a:	52                   	push   edx
c000929b:	50                   	push   eax
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a4:	e8 73 f3 01 00       	call   c002861c <__divdf3>
c00092a9:	83 c4 10             	add    esp,0x10
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092b8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092c4:	e8 f2 e9 01 00       	call   c0027cbb <__adddf3>
c00092c9:	83 c4 10             	add    esp,0x10
c00092cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092d0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092d4:	31 ff                	xor    edi,edi
c00092d6:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092d9:	0f 8e 9d 00 00 00    	jle    c000937c <linear_vari_process+0x349>
c00092df:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092e2:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092e9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00092f0:	8b 06                	mov    eax,DWORD PTR [esi]
c00092f2:	52                   	push   edx
c00092f3:	52                   	push   edx
c00092f4:	55                   	push   ebp
c00092f5:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092f8:	47                   	inc    edi
c00092f9:	e8 52 e3 01 00       	call   c0027650 <__subsf3>
c00092fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009301:	e8 29 fa 01 00       	call   c0028d2f <__extendsfdf2>
c0009306:	83 c4 10             	add    esp,0x10
c0009309:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000930d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009311:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009315:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009319:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000931d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009321:	e8 12 f0 01 00       	call   c0028338 <__muldf3>
c0009326:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009329:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000932d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009331:	e8 f9 f9 01 00       	call   c0028d2f <__extendsfdf2>
c0009336:	83 c4 10             	add    esp,0x10
c0009339:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000933d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009341:	52                   	push   edx
c0009342:	50                   	push   eax
c0009343:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009347:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000934b:	e8 6b e9 01 00       	call   c0027cbb <__adddf3>
c0009350:	59                   	pop    ecx
c0009351:	5d                   	pop    ebp
c0009352:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009356:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000935a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000935e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009362:	e8 a4 f8 01 00       	call   c0028c0b <__truncdfsf2>
c0009367:	83 c4 10             	add    esp,0x10
c000936a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000936d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009371:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009374:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009377:	e9 5a ff ff ff       	jmp    c00092d6 <linear_vari_process+0x2a3>
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009384:	68 00 00 f0 3f       	push   0x3ff00000
c0009389:	6a 00                	push   0x0
c000938b:	e8 8c f2 01 00       	call   c002861c <__divdf3>
c0009390:	83 c4 10             	add    esp,0x10
c0009393:	89 04 24             	mov    DWORD PTR [esp],eax
c0009396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000939a:	52                   	push   edx
c000939b:	50                   	push   eax
c000939c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093a4:	e8 12 e9 01 00       	call   c0027cbb <__adddf3>
c00093a9:	83 c4 10             	add    esp,0x10
c00093ac:	e9 50 fd ff ff       	jmp    c0009101 <linear_vari_process+0xce>
c00093b1:	50                   	push   eax
c00093b2:	50                   	push   eax
c00093b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093bb:	e8 00 fa 01 00       	call   c0028dc0 <lrint>
c00093c0:	83 ec 0c             	sub    esp,0xc
c00093c3:	50                   	push   eax
c00093c4:	e8 d2 f5 01 00       	call   c002899b <__floatsidf>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093d0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093d4:	52                   	push   edx
c00093d5:	50                   	push   eax
c00093d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093de:	e8 29 ef 01 00       	call   c002830c <__subdf3>
c00093e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093e7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093eb:	83 c4 20             	add    esp,0x20
c00093ee:	6a 00                	push   0x0
c00093f0:	6a 00                	push   0x0
c00093f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fa:	e8 08 f8 01 00       	call   c0028c07 <__ltdf2>
c00093ff:	83 c4 10             	add    esp,0x10
c0009402:	85 c0                	test   eax,eax
c0009404:	79 1e                	jns    c0009424 <linear_vari_process+0x3f1>
c0009406:	68 00 00 f0 3f       	push   0x3ff00000
c000940b:	6a 00                	push   0x0
c000940d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009411:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009415:	e8 a1 e8 01 00       	call   c0027cbb <__adddf3>
c000941a:	83 c4 10             	add    esp,0x10
c000941d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009420:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009424:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009427:	83 ec 10             	sub    esp,0x10
c000942a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000942e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009432:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009436:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000943a:	e8 cd ee 01 00       	call   c002830c <__subdf3>
c000943f:	83 c4 18             	add    esp,0x18
c0009442:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009446:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000944a:	52                   	push   edx
c000944b:	50                   	push   eax
c000944c:	e8 6f f9 01 00       	call   c0028dc0 <lrint>
c0009451:	83 c4 10             	add    esp,0x10
c0009454:	0f af f8             	imul   edi,eax
c0009457:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000945a:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000945d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009460:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009463:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009466:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000946a:	0f 8d 13 03 00 00    	jge    c0009783 <linear_vari_process+0x750>
c0009470:	83 ec 0c             	sub    esp,0xc
c0009473:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009476:	e8 20 f5 01 00       	call   c002899b <__floatsidf>
c000947b:	83 c4 10             	add    esp,0x10
c000947e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009482:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009486:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000948a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000948e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009492:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009496:	e8 9d ee 01 00       	call   c0028338 <__muldf3>
c000949b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000949e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094a6:	e8 f0 f4 01 00       	call   c002899b <__floatsidf>
c00094ab:	83 c4 10             	add    esp,0x10
c00094ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094b6:	52                   	push   edx
c00094b7:	50                   	push   eax
c00094b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c0:	e8 f6 e7 01 00       	call   c0027cbb <__adddf3>
c00094c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094cc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d0:	e8 c6 f4 01 00       	call   c002899b <__floatsidf>
c00094d5:	83 c4 10             	add    esp,0x10
c00094d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094e0:	52                   	push   edx
c00094e1:	50                   	push   eax
c00094e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	e8 18 f7 01 00       	call   c0028c07 <__ltdf2>
c00094ef:	83 c4 10             	add    esp,0x10
c00094f2:	85 c0                	test   eax,eax
c00094f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094f8:	0f 89 85 02 00 00    	jns    c0009783 <linear_vari_process+0x750>
c00094fe:	85 c9                	test   ecx,ecx
c0009500:	0f 8e f5 00 00 00    	jle    c00095fb <linear_vari_process+0x5c8>
c0009506:	83 ec 10             	sub    esp,0x10
c0009509:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000950c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000950f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009513:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009516:	ff 30                	push   DWORD PTR [eax]
c0009518:	e8 ef ed 01 00       	call   c002830c <__subdf3>
c000951d:	83 c4 18             	add    esp,0x18
c0009520:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009524:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009528:	52                   	push   edx
c0009529:	50                   	push   eax
c000952a:	e8 71 f8 01 00       	call   c0028da0 <fabs>
c000952f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009533:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009537:	83 c4 10             	add    esp,0x10
c000953a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000953f:	68 23 42 92 0c       	push   0xc924223
c0009544:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009548:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000954c:	e8 98 f6 01 00       	call   c0028be9 <__gtdf2>
c0009551:	83 c4 10             	add    esp,0x10
c0009554:	85 c0                	test   eax,eax
c0009556:	0f 8e 9f 00 00 00    	jle    c00095fb <linear_vari_process+0x5c8>
c000955c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009560:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009563:	8b 00                	mov    eax,DWORD PTR [eax]
c0009565:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009569:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000956d:	52                   	push   edx
c000956e:	50                   	push   eax
c000956f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009572:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009575:	e8 92 ed 01 00       	call   c002830c <__subdf3>
c000957a:	5f                   	pop    edi
c000957b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000957f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009583:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009586:	e8 10 f4 01 00       	call   c002899b <__floatsidf>
c000958b:	83 c4 10             	add    esp,0x10
c000958e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009592:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009596:	52                   	push   edx
c0009597:	50                   	push   eax
c0009598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000959c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a0:	e8 93 ed 01 00       	call   c0028338 <__muldf3>
c00095a5:	5d                   	pop    ebp
c00095a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00095aa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00095ae:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00095b1:	e8 e5 f3 01 00       	call   c002899b <__floatsidf>
c00095b6:	83 c4 10             	add    esp,0x10
c00095b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095c1:	52                   	push   edx
c00095c2:	50                   	push   eax
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cb:	e8 4c f0 01 00       	call   c002861c <__divdf3>
c00095d0:	83 c4 10             	add    esp,0x10
c00095d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095eb:	e8 cb e6 01 00       	call   c0027cbb <__adddf3>
c00095f0:	83 c4 10             	add    esp,0x10
c00095f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095fb:	31 ff                	xor    edi,edi
c00095fd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009600:	39 f8                	cmp    eax,edi
c0009602:	0f 8e ac 00 00 00    	jle    c00096b4 <linear_vari_process+0x681>
c0009608:	8b 16                	mov    edx,DWORD PTR [esi]
c000960a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000960d:	29 c1                	sub    ecx,eax
c000960f:	89 c8                	mov    eax,ecx
c0009611:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009614:	01 f8                	add    eax,edi
c0009616:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000961a:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000961d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009620:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009624:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009627:	51                   	push   ecx
c0009628:	01 f8                	add    eax,edi
c000962a:	51                   	push   ecx
c000962b:	47                   	inc    edi
c000962c:	55                   	push   ebp
c000962d:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009630:	e8 1b e0 01 00       	call   c0027650 <__subsf3>
c0009635:	89 04 24             	mov    DWORD PTR [esp],eax
c0009638:	e8 f2 f6 01 00       	call   c0028d2f <__extendsfdf2>
c000963d:	83 c4 10             	add    esp,0x10
c0009640:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009644:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009648:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000964c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009650:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009654:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009658:	e8 db ec 01 00       	call   c0028338 <__muldf3>
c000965d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009660:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009664:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009668:	e8 c2 f6 01 00       	call   c0028d2f <__extendsfdf2>
c000966d:	83 c4 10             	add    esp,0x10
c0009670:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009674:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009678:	52                   	push   edx
c0009679:	50                   	push   eax
c000967a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000967e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009682:	e8 34 e6 01 00       	call   c0027cbb <__adddf3>
c0009687:	5d                   	pop    ebp
c0009688:	59                   	pop    ecx
c0009689:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000968d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009691:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009695:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009699:	e8 6d f5 01 00       	call   c0028c0b <__truncdfsf2>
c000969e:	83 c4 10             	add    esp,0x10
c00096a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096a5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00096a9:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00096ac:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00096af:	e9 49 ff ff ff       	jmp    c00095fd <linear_vari_process+0x5ca>
c00096b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bc:	68 00 00 f0 3f       	push   0x3ff00000
c00096c1:	6a 00                	push   0x0
c00096c3:	e8 54 ef 01 00       	call   c002861c <__divdf3>
c00096c8:	83 c4 10             	add    esp,0x10
c00096cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096d3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096d7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096e3:	e8 d3 e5 01 00       	call   c0027cbb <__adddf3>
c00096e8:	59                   	pop    ecx
c00096e9:	5f                   	pop    edi
c00096ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096fa:	e8 c1 f6 01 00       	call   c0028dc0 <lrint>
c00096ff:	83 ec 0c             	sub    esp,0xc
c0009702:	50                   	push   eax
c0009703:	e8 93 f2 01 00       	call   c002899b <__floatsidf>
c0009708:	83 c4 10             	add    esp,0x10
c000970b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000970f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009713:	52                   	push   edx
c0009714:	50                   	push   eax
c0009715:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009719:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971d:	e8 ea eb 01 00       	call   c002830c <__subdf3>
c0009722:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009726:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000972a:	83 c4 20             	add    esp,0x20
c000972d:	6a 00                	push   0x0
c000972f:	6a 00                	push   0x0
c0009731:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009735:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009739:	e8 c9 f4 01 00       	call   c0028c07 <__ltdf2>
c000973e:	83 c4 10             	add    esp,0x10
c0009741:	85 c0                	test   eax,eax
c0009743:	79 1e                	jns    c0009763 <linear_vari_process+0x730>
c0009745:	68 00 00 f0 3f       	push   0x3ff00000
c000974a:	6a 00                	push   0x0
c000974c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009750:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009754:	e8 62 e5 01 00       	call   c0027cbb <__adddf3>
c0009759:	83 c4 10             	add    esp,0x10
c000975c:	89 04 24             	mov    DWORD PTR [esp],eax
c000975f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009763:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009766:	83 ec 10             	sub    esp,0x10
c0009769:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000976d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009771:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009775:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009779:	e8 8e eb 01 00       	call   c002830c <__subdf3>
c000977e:	e9 bc fc ff ff       	jmp    c000943f <linear_vari_process+0x40c>
c0009783:	39 fd                	cmp    ebp,edi
c0009785:	7d 38                	jge    c00097bf <linear_vari_process+0x78c>
c0009787:	83 ec 0c             	sub    esp,0xc
c000978a:	89 f8                	mov    eax,edi
c000978c:	29 e8                	sub    eax,ebp
c000978e:	99                   	cdq    
c000978f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009792:	50                   	push   eax
c0009793:	e8 03 f2 01 00       	call   c002899b <__floatsidf>
c0009798:	83 c4 10             	add    esp,0x10
c000979b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000979f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097a3:	52                   	push   edx
c00097a4:	50                   	push   eax
c00097a5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097ad:	e8 09 e5 01 00       	call   c0027cbb <__adddf3>
c00097b2:	83 c4 10             	add    esp,0x10
c00097b5:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c00097b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00097bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097bf:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097ca:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097cd:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097d0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	7f 29                	jg     c0009800 <linear_vari_process+0x7cd>
c00097d7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097e3:	89 01                	mov    DWORD PTR [ecx],eax
c00097e5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097eb:	99                   	cdq    
c00097ec:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097ef:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097f2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097f5:	99                   	cdq    
c00097f6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097f9:	31 d2                	xor    edx,edx
c00097fb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097fe:	eb 1d                	jmp    c000981d <linear_vari_process+0x7ea>
c0009800:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009803:	31 d2                	xor    edx,edx
c0009805:	29 c8                	sub    eax,ecx
c0009807:	c1 e0 02             	shl    eax,0x2
c000980a:	39 d1                	cmp    ecx,edx
c000980c:	7e c9                	jle    c00097d7 <linear_vari_process+0x7a4>
c000980e:	8b 3e                	mov    edi,DWORD PTR [esi]
c0009810:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c0009813:	83 c0 04             	add    eax,0x4
c0009816:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c000981a:	42                   	inc    edx
c000981b:	eb ed                	jmp    c000980a <linear_vari_process+0x7d7>
c000981d:	83 c4 3c             	add    esp,0x3c
c0009820:	89 d0                	mov    eax,edx
c0009822:	5b                   	pop    ebx
c0009823:	5e                   	pop    esi
c0009824:	5f                   	pop    edi
c0009825:	5d                   	pop    ebp
c0009826:	c3                   	ret    

c0009827 <linear_reset>:
c0009827:	83 ec 0c             	sub    esp,0xc
c000982a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000982e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009831:	85 c0                	test   eax,eax
c0009833:	74 20                	je     c0009855 <linear_reset+0x2e>
c0009835:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009838:	83 c0 1c             	add    eax,0x1c
c000983b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000983e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009845:	c1 e2 02             	shl    edx,0x2
c0009848:	51                   	push   ecx
c0009849:	52                   	push   edx
c000984a:	6a 00                	push   0x0
c000984c:	50                   	push   eax
c000984d:	e8 4a 6f ff ff       	call   c000079c <memset>
c0009852:	83 c4 10             	add    esp,0x10
c0009855:	83 c4 0c             	add    esp,0xc
c0009858:	c3                   	ret    

c0009859 <linear_get_name>:
c0009859:	31 c0                	xor    eax,eax
c000985b:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009860:	75 05                	jne    c0009867 <linear_get_name+0xe>
c0009862:	b8 00 a6 02 c0       	mov    eax,0xc002a600
c0009867:	c3                   	ret    

c0009868 <linear_get_description>:
c0009868:	31 c0                	xor    eax,eax
c000986a:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000986f:	75 05                	jne    c0009876 <linear_get_description+0xe>
c0009871:	b8 14 a6 02 c0       	mov    eax,0xc002a614
c0009876:	c3                   	ret    

c0009877 <linear_set_converter>:
c0009877:	53                   	push   ebx
c0009878:	b8 0a 00 00 00       	mov    eax,0xa
c000987d:	83 ec 08             	sub    esp,0x8
c0009880:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009884:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009889:	75 6e                	jne    c00098f9 <linear_set_converter+0x82>
c000988b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000988e:	85 c0                	test   eax,eax
c0009890:	74 13                	je     c00098a5 <linear_set_converter+0x2e>
c0009892:	83 ec 0c             	sub    esp,0xc
c0009895:	50                   	push   eax
c0009896:	e8 fb 5f 00 00       	call   c000f896 <free>
c000989b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	50                   	push   eax
c00098a6:	50                   	push   eax
c00098a7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098aa:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00098b1:	50                   	push   eax
c00098b2:	6a 01                	push   0x1
c00098b4:	e8 fd 5f 00 00       	call   c000f8b6 <calloc>
c00098b9:	83 c4 10             	add    esp,0x10
c00098bc:	89 c2                	mov    edx,eax
c00098be:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00098c1:	85 d2                	test   edx,edx
c00098c3:	b8 01 00 00 00       	mov    eax,0x1
c00098c8:	74 2f                	je     c00098f9 <linear_set_converter+0x82>
c00098ca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098cd:	83 ec 0c             	sub    esp,0xc
c00098d0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098d3:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098d9:	c7 43 24 33 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009033
c00098e0:	c7 43 20 33 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009033
c00098e7:	c7 43 28 27 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009827
c00098ee:	53                   	push   ebx
c00098ef:	e8 33 ff ff ff       	call   c0009827 <linear_reset>
c00098f4:	83 c4 10             	add    esp,0x10
c00098f7:	31 c0                	xor    eax,eax
c00098f9:	83 c4 08             	add    esp,0x8
c00098fc:	5b                   	pop    ebx
c00098fd:	c3                   	ret    

c00098fe <int_to_fp>:
c00098fe:	c1 e0 0c             	shl    eax,0xc
c0009901:	c3                   	ret    

c0009902 <fp_to_int>:
c0009902:	c1 f8 0c             	sar    eax,0xc
c0009905:	c3                   	ret    

c0009906 <fp_fraction_part>:
c0009906:	25 ff 0f 00 00       	and    eax,0xfff
c000990b:	c3                   	ret    

c000990c <fp_to_double>:
c000990c:	83 ec 1c             	sub    esp,0x1c
c000990f:	e8 f2 ff ff ff       	call   c0009906 <fp_fraction_part>
c0009914:	83 ec 0c             	sub    esp,0xc
c0009917:	50                   	push   eax
c0009918:	e8 7e f0 01 00       	call   c002899b <__floatsidf>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009924:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009928:	68 00 00 30 3f       	push   0x3f300000
c000992d:	6a 00                	push   0x0
c000992f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009933:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009937:	e8 fc e9 01 00       	call   c0028338 <__muldf3>
c000993c:	83 c4 2c             	add    esp,0x2c
c000993f:	c3                   	ret    

c0009940 <calc_output_single>:
c0009940:	55                   	push   ebp
c0009941:	57                   	push   edi
c0009942:	56                   	push   esi
c0009943:	89 c6                	mov    esi,eax
c0009945:	53                   	push   ebx
c0009946:	89 d3                	mov    ebx,edx
c0009948:	83 ec 4c             	sub    esp,0x4c
c000994b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000994f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009952:	e8 a7 ff ff ff       	call   c00098fe <int_to_fp>
c0009957:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000995a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000995e:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009962:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009966:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009969:	99                   	cdq    
c000996a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009972:	f7 fb                	idiv   ebx
c0009974:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000997c:	89 da                	mov    edx,ebx
c000997e:	0f af d0             	imul   edx,eax
c0009981:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009985:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009989:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000998d:	29 c2                	sub    edx,eax
c000998f:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009996:	83 c5 04             	add    ebp,0x4
c0009999:	e8 6e ff ff ff       	call   c000990c <fp_to_double>
c000999e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099aa:	e8 53 ff ff ff       	call   c0009902 <fp_to_int>
c00099af:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00099b2:	52                   	push   edx
c00099b3:	52                   	push   edx
c00099b4:	51                   	push   ecx
c00099b5:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c00099b9:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00099bd:	e8 8e dc 01 00       	call   c0027650 <__subsf3>
c00099c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00099c5:	e8 65 f3 01 00       	call   c0028d2f <__extendsfdf2>
c00099ca:	83 c4 10             	add    esp,0x10
c00099cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099e5:	e8 4e e9 01 00       	call   c0028338 <__muldf3>
c00099ea:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099f2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099f5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099f9:	e8 31 f3 01 00       	call   c0028d2f <__extendsfdf2>
c00099fe:	83 c4 10             	add    esp,0x10
c0009a01:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a09:	52                   	push   edx
c0009a0a:	50                   	push   eax
c0009a0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a13:	e8 a3 e2 01 00       	call   c0027cbb <__adddf3>
c0009a18:	59                   	pop    ecx
c0009a19:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009a1d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009a21:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a27:	e8 03 f3 01 00       	call   c0028d2f <__extendsfdf2>
c0009a2c:	83 c4 10             	add    esp,0x10
c0009a2f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a33:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a37:	52                   	push   edx
c0009a38:	50                   	push   eax
c0009a39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a41:	e8 f2 e8 01 00       	call   c0028338 <__muldf3>
c0009a46:	83 c4 10             	add    esp,0x10
c0009a49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a4d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a51:	52                   	push   edx
c0009a52:	50                   	push   eax
c0009a53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a5b:	e8 5b e2 01 00       	call   c0027cbb <__adddf3>
c0009a60:	83 c4 10             	add    esp,0x10
c0009a63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a6b:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a6f:	0f 89 1d ff ff ff    	jns    c0009992 <calc_output_single+0x52>
c0009a75:	89 d9                	mov    ecx,ebx
c0009a77:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a7b:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a7f:	89 dd                	mov    ebp,ebx
c0009a81:	29 c8                	sub    eax,ecx
c0009a83:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a8b:	99                   	cdq    
c0009a8c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a94:	f7 fb                	idiv   ebx
c0009a96:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a9a:	0f af e8             	imul   ebp,eax
c0009a9d:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009aa1:	01 cd                	add    ebp,ecx
c0009aa3:	8d 34 86             	lea    esi,[esi+eax*4]
c0009aa6:	89 e8                	mov    eax,ebp
c0009aa8:	83 ee 04             	sub    esi,0x4
c0009aab:	e8 5c fe ff ff       	call   c000990c <fp_to_double>
c0009ab0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ab4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ab8:	89 e8                	mov    eax,ebp
c0009aba:	29 dd                	sub    ebp,ebx
c0009abc:	e8 41 fe ff ff       	call   c0009902 <fp_to_int>
c0009ac1:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009ac4:	52                   	push   edx
c0009ac5:	52                   	push   edx
c0009ac6:	51                   	push   ecx
c0009ac7:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009acb:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009acf:	e8 7c db 01 00       	call   c0027650 <__subsf3>
c0009ad4:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ad7:	e8 53 f2 01 00       	call   c0028d2f <__extendsfdf2>
c0009adc:	83 c4 10             	add    esp,0x10
c0009adf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ae7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009af3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009af7:	e8 3c e8 01 00       	call   c0028338 <__muldf3>
c0009afc:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009b00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009b04:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009b07:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009b0b:	e8 1f f2 01 00       	call   c0028d2f <__extendsfdf2>
c0009b10:	83 c4 10             	add    esp,0x10
c0009b13:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b17:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b1b:	52                   	push   edx
c0009b1c:	50                   	push   eax
c0009b1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b25:	e8 91 e1 01 00       	call   c0027cbb <__adddf3>
c0009b2a:	59                   	pop    ecx
c0009b2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b2f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b33:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b39:	e8 f1 f1 01 00       	call   c0028d2f <__extendsfdf2>
c0009b3e:	83 c4 10             	add    esp,0x10
c0009b41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b49:	52                   	push   edx
c0009b4a:	50                   	push   eax
c0009b4b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b53:	e8 e0 e7 01 00       	call   c0028338 <__muldf3>
c0009b58:	83 c4 10             	add    esp,0x10
c0009b5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b63:	52                   	push   edx
c0009b64:	50                   	push   eax
c0009b65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b6d:	e8 49 e1 01 00       	call   c0027cbb <__adddf3>
c0009b72:	83 c4 10             	add    esp,0x10
c0009b75:	85 ed                	test   ebp,ebp
c0009b77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b7f:	0f 8f 21 ff ff ff    	jg     c0009aa6 <calc_output_single+0x166>
c0009b85:	52                   	push   edx
c0009b86:	50                   	push   eax
c0009b87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b8f:	e8 27 e1 01 00       	call   c0027cbb <__adddf3>
c0009b94:	83 c4 5c             	add    esp,0x5c
c0009b97:	5b                   	pop    ebx
c0009b98:	5e                   	pop    esi
c0009b99:	5f                   	pop    edi
c0009b9a:	5d                   	pop    ebp
c0009b9b:	c3                   	ret    

c0009b9c <calc_output_stereo>:
c0009b9c:	55                   	push   ebp
c0009b9d:	89 cd                	mov    ebp,ecx
c0009b9f:	57                   	push   edi
c0009ba0:	56                   	push   esi
c0009ba1:	53                   	push   ebx
c0009ba2:	89 c3                	mov    ebx,eax
c0009ba4:	83 ec 6c             	sub    esp,0x6c
c0009ba7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009bab:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009bb2:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009bb9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009bbd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009bc1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009bc4:	e8 35 fd ff ff       	call   c00098fe <int_to_fp>
c0009bc9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bd1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd5:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bdd:	29 c8                	sub    eax,ecx
c0009bdf:	99                   	cdq    
c0009be0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009be4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009be8:	0f af d0             	imul   edx,eax
c0009beb:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bee:	31 d2                	xor    edx,edx
c0009bf0:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bf4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bf8:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bfb:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bff:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009c02:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009c06:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009c0a:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009c0d:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009c12:	29 c1                	sub    ecx,eax
c0009c14:	31 c0                	xor    eax,eax
c0009c16:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009c19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c21:	83 c7 08             	add    edi,0x8
c0009c24:	e8 e3 fc ff ff       	call   c000990c <fp_to_double>
c0009c29:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c2d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c35:	e8 c8 fc ff ff       	call   c0009902 <fp_to_int>
c0009c3a:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c3d:	52                   	push   edx
c0009c3e:	52                   	push   edx
c0009c3f:	51                   	push   ecx
c0009c40:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c44:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c48:	e8 03 da 01 00       	call   c0027650 <__subsf3>
c0009c4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c50:	e8 da f0 01 00       	call   c0028d2f <__extendsfdf2>
c0009c55:	83 c4 10             	add    esp,0x10
c0009c58:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c5c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	e8 c3 e6 01 00       	call   c0028338 <__muldf3>
c0009c75:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c79:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c7d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c80:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c84:	e8 a6 f0 01 00       	call   c0028d2f <__extendsfdf2>
c0009c89:	83 c4 10             	add    esp,0x10
c0009c8c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c90:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c94:	52                   	push   edx
c0009c95:	50                   	push   eax
c0009c96:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c9a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c9e:	e8 18 e0 01 00       	call   c0027cbb <__adddf3>
c0009ca3:	59                   	pop    ecx
c0009ca4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009ca8:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009cac:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009cb2:	e8 78 f0 01 00       	call   c0028d2f <__extendsfdf2>
c0009cb7:	83 c4 10             	add    esp,0x10
c0009cba:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cbe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cc2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cc6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cca:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cd2:	e8 61 e6 01 00       	call   c0028338 <__muldf3>
c0009cd7:	83 c4 10             	add    esp,0x10
c0009cda:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cde:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ce2:	52                   	push   edx
c0009ce3:	50                   	push   eax
c0009ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cec:	e8 ca df 01 00       	call   c0027cbb <__adddf3>
c0009cf1:	59                   	pop    ecx
c0009cf2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cf6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cfa:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009d00:	e8 2a f0 01 00       	call   c0028d2f <__extendsfdf2>
c0009d05:	83 c4 10             	add    esp,0x10
c0009d08:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009d0c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009d10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009d14:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009d18:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d1c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d20:	e8 13 e6 01 00       	call   c0028338 <__muldf3>
c0009d25:	83 c4 10             	add    esp,0x10
c0009d28:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d2c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d30:	52                   	push   edx
c0009d31:	50                   	push   eax
c0009d32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d3a:	e8 7c df 01 00       	call   c0027cbb <__adddf3>
c0009d3f:	83 c4 10             	add    esp,0x10
c0009d42:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d46:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d4a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d4e:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d52:	0f 89 c5 fe ff ff    	jns    c0009c1d <calc_output_stereo+0x81>
c0009d58:	29 e9                	sub    ecx,ebp
c0009d5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d5e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d62:	29 c8                	sub    eax,ecx
c0009d64:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d6c:	99                   	cdq    
c0009d6d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d71:	31 d2                	xor    edx,edx
c0009d73:	0f af f8             	imul   edi,eax
c0009d76:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d7a:	40                   	inc    eax
c0009d7b:	01 cf                	add    edi,ecx
c0009d7d:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d82:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d86:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d8e:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d91:	31 c0                	xor    eax,eax
c0009d93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d97:	89 f8                	mov    eax,edi
c0009d99:	83 eb 08             	sub    ebx,0x8
c0009d9c:	e8 6b fb ff ff       	call   c000990c <fp_to_double>
c0009da1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009da5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009da9:	89 f8                	mov    eax,edi
c0009dab:	e8 52 fb ff ff       	call   c0009902 <fp_to_int>
c0009db0:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009db3:	52                   	push   edx
c0009db4:	52                   	push   edx
c0009db5:	55                   	push   ebp
c0009db6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009dba:	e8 91 d8 01 00       	call   c0027650 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 68 ef 01 00       	call   c0028d2f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 51 e5 01 00       	call   c0028338 <__muldf3>
c0009de7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dee:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009df2:	e8 38 ef 01 00       	call   c0028d2f <__extendsfdf2>
c0009df7:	83 c4 10             	add    esp,0x10
c0009dfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e02:	52                   	push   edx
c0009e03:	50                   	push   eax
c0009e04:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009e08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009e0c:	e8 aa de 01 00       	call   c0027cbb <__adddf3>
c0009e11:	59                   	pop    ecx
c0009e12:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009e16:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009e1a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009e20:	e8 0a ef 01 00       	call   c0028d2f <__extendsfdf2>
c0009e25:	83 c4 10             	add    esp,0x10
c0009e28:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e2c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e38:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e3c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e40:	e8 f3 e4 01 00       	call   c0028338 <__muldf3>
c0009e45:	83 c4 10             	add    esp,0x10
c0009e48:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e4c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e50:	52                   	push   edx
c0009e51:	50                   	push   eax
c0009e52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e5a:	e8 5c de 01 00       	call   c0027cbb <__adddf3>
c0009e5f:	5d                   	pop    ebp
c0009e60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e64:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e68:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e6e:	e8 bc ee 01 00       	call   c0028d2f <__extendsfdf2>
c0009e73:	83 c4 10             	add    esp,0x10
c0009e76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	e8 a5 e4 01 00       	call   c0028338 <__muldf3>
c0009e93:	83 c4 10             	add    esp,0x10
c0009e96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e9e:	52                   	push   edx
c0009e9f:	50                   	push   eax
c0009ea0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009ea4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009ea8:	e8 0e de 01 00       	call   c0027cbb <__adddf3>
c0009ead:	83 c4 10             	add    esp,0x10
c0009eb0:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009eb4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009eb8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ebc:	85 ff                	test   edi,edi
c0009ebe:	0f 8f d3 fe ff ff    	jg     c0009d97 <calc_output_stereo+0x1fb>
c0009ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	e8 e2 dd 01 00       	call   c0027cbb <__adddf3>
c0009ed9:	83 c4 10             	add    esp,0x10
c0009edc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ee0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ef0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ef4:	e8 3f e4 01 00       	call   c0028338 <__muldf3>
c0009ef9:	59                   	pop    ecx
c0009efa:	5b                   	pop    ebx
c0009efb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009eff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f0b:	e8 fb ec 01 00       	call   c0028c0b <__truncdfsf2>
c0009f10:	83 c4 10             	add    esp,0x10
c0009f13:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009f1a:	89 03                	mov    DWORD PTR [ebx],eax
c0009f1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f2c:	e8 8a dd 01 00       	call   c0027cbb <__adddf3>
c0009f31:	83 c4 10             	add    esp,0x10
c0009f34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f3c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f40:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f4c:	e8 e7 e3 01 00       	call   c0028338 <__muldf3>
c0009f51:	5e                   	pop    esi
c0009f52:	5f                   	pop    edi
c0009f53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f63:	e8 a3 ec 01 00       	call   c0028c0b <__truncdfsf2>
c0009f68:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f6f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f72:	83 c4 7c             	add    esp,0x7c
c0009f75:	5b                   	pop    ebx
c0009f76:	5e                   	pop    esi
c0009f77:	5f                   	pop    edi
c0009f78:	5d                   	pop    ebp
c0009f79:	c3                   	ret    

c0009f7a <calc_output_quad>:
c0009f7a:	55                   	push   ebp
c0009f7b:	57                   	push   edi
c0009f7c:	56                   	push   esi
c0009f7d:	89 c6                	mov    esi,eax
c0009f7f:	53                   	push   ebx
c0009f80:	83 ec 7c             	sub    esp,0x7c
c0009f83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f87:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f8b:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f92:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009fa1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009fa4:	e8 55 f9 ff ff       	call   c00098fe <int_to_fp>
c0009fa9:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009fac:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fb7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009fbb:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009fbf:	99                   	cdq    
c0009fc0:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fc4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fc8:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fcb:	31 d2                	xor    edx,edx
c0009fcd:	0f af d8             	imul   ebx,eax
c0009fd0:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fd8:	0f af c7             	imul   eax,edi
c0009fdb:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fdf:	29 c1                	sub    ecx,eax
c0009fe1:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fe9:	31 c0                	xor    eax,eax
c0009feb:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009ff2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009ff6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009ffa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009ffe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a002:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a006:	89 d8                	mov    eax,ebx
c000a008:	83 c7 10             	add    edi,0x10
c000a00b:	e8 fc f8 ff ff       	call   c000990c <fp_to_double>
c000a010:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a014:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a018:	89 d8                	mov    eax,ebx
c000a01a:	e8 e3 f8 ff ff       	call   c0009902 <fp_to_int>
c000a01f:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a023:	52                   	push   edx
c000a024:	52                   	push   edx
c000a025:	51                   	push   ecx
c000a026:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a02a:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a02e:	e8 1d d6 01 00       	call   c0027650 <__subsf3>
c000a033:	89 04 24             	mov    DWORD PTR [esp],eax
c000a036:	e8 f4 ec 01 00       	call   c0028d2f <__extendsfdf2>
c000a03b:	83 c4 10             	add    esp,0x10
c000a03e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a042:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	e8 dd e2 01 00       	call   c0028338 <__muldf3>
c000a05b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a05f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a063:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a066:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a06a:	e8 c0 ec 01 00       	call   c0028d2f <__extendsfdf2>
c000a06f:	83 c4 10             	add    esp,0x10
c000a072:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a076:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a07a:	52                   	push   edx
c000a07b:	50                   	push   eax
c000a07c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a080:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a084:	e8 32 dc 01 00       	call   c0027cbb <__adddf3>
c000a089:	59                   	pop    ecx
c000a08a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a08e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a092:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a098:	e8 92 ec 01 00       	call   c0028d2f <__extendsfdf2>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0b0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0b4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0b8:	e8 7b e2 01 00       	call   c0028338 <__muldf3>
c000a0bd:	83 c4 10             	add    esp,0x10
c000a0c0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0c4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0c8:	52                   	push   edx
c000a0c9:	50                   	push   eax
c000a0ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0d2:	e8 e4 db 01 00       	call   c0027cbb <__adddf3>
c000a0d7:	59                   	pop    ecx
c000a0d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0dc:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0e0:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0e6:	e8 44 ec 01 00       	call   c0028d2f <__extendsfdf2>
c000a0eb:	83 c4 10             	add    esp,0x10
c000a0ee:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0fe:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a102:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a106:	e8 2d e2 01 00       	call   c0028338 <__muldf3>
c000a10b:	83 c4 10             	add    esp,0x10
c000a10e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a112:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a116:	52                   	push   edx
c000a117:	50                   	push   eax
c000a118:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a11c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a120:	e8 96 db 01 00       	call   c0027cbb <__adddf3>
c000a125:	59                   	pop    ecx
c000a126:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a12a:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a12e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a134:	e8 f6 eb 01 00       	call   c0028d2f <__extendsfdf2>
c000a139:	83 c4 10             	add    esp,0x10
c000a13c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a140:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a14c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a150:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a154:	e8 df e1 01 00       	call   c0028338 <__muldf3>
c000a159:	83 c4 10             	add    esp,0x10
c000a15c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a160:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a164:	52                   	push   edx
c000a165:	50                   	push   eax
c000a166:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a16a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a16e:	e8 48 db 01 00       	call   c0027cbb <__adddf3>
c000a173:	59                   	pop    ecx
c000a174:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a178:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a17c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a182:	e8 a8 eb 01 00       	call   c0028d2f <__extendsfdf2>
c000a187:	83 c4 10             	add    esp,0x10
c000a18a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a18e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a19a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a19e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1a2:	e8 91 e1 01 00       	call   c0028338 <__muldf3>
c000a1a7:	83 c4 10             	add    esp,0x10
c000a1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1b2:	52                   	push   edx
c000a1b3:	50                   	push   eax
c000a1b4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1bc:	e8 fa da 01 00       	call   c0027cbb <__adddf3>
c000a1c1:	83 c4 10             	add    esp,0x10
c000a1c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1c8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1cc:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1d0:	0f 89 30 fe ff ff    	jns    c000a006 <calc_output_quad+0x8c>
c000a1d6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1de:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1e2:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1e6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ee:	29 c8                	sub    eax,ecx
c000a1f0:	99                   	cdq    
c000a1f1:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1f5:	31 d2                	xor    edx,edx
c000a1f7:	0f af d8             	imul   ebx,eax
c000a1fa:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1fe:	40                   	inc    eax
c000a1ff:	01 cb                	add    ebx,ecx
c000a201:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a206:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a20a:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a20e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a212:	8d 34 86             	lea    esi,[esi+eax*4]
c000a215:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a21d:	31 c0                	xor    eax,eax
c000a21f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a223:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a227:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a22b:	89 d8                	mov    eax,ebx
c000a22d:	83 ee 10             	sub    esi,0x10
c000a230:	e8 d7 f6 ff ff       	call   c000990c <fp_to_double>
c000a235:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a239:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a23d:	89 d8                	mov    eax,ebx
c000a23f:	e8 be f6 ff ff       	call   c0009902 <fp_to_int>
c000a244:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a248:	52                   	push   edx
c000a249:	52                   	push   edx
c000a24a:	57                   	push   edi
c000a24b:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a24f:	e8 fc d3 01 00       	call   c0027650 <__subsf3>
c000a254:	89 04 24             	mov    DWORD PTR [esp],eax
c000a257:	e8 d3 ea 01 00       	call   c0028d2f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 bc e0 01 00       	call   c0028338 <__muldf3>
c000a27c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a27f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a283:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a287:	e8 a3 ea 01 00       	call   c0028d2f <__extendsfdf2>
c000a28c:	83 c4 10             	add    esp,0x10
c000a28f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a293:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a297:	52                   	push   edx
c000a298:	50                   	push   eax
c000a299:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a29d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a2a1:	e8 15 da 01 00       	call   c0027cbb <__adddf3>
c000a2a6:	59                   	pop    ecx
c000a2a7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a2ab:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a2af:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a2b5:	e8 75 ea 01 00       	call   c0028d2f <__extendsfdf2>
c000a2ba:	83 c4 10             	add    esp,0x10
c000a2bd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2c1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2cd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2d1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2d5:	e8 5e e0 01 00       	call   c0028338 <__muldf3>
c000a2da:	83 c4 10             	add    esp,0x10
c000a2dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2e5:	52                   	push   edx
c000a2e6:	50                   	push   eax
c000a2e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2ef:	e8 c7 d9 01 00       	call   c0027cbb <__adddf3>
c000a2f4:	5f                   	pop    edi
c000a2f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2fd:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a303:	e8 27 ea 01 00       	call   c0028d2f <__extendsfdf2>
c000a308:	83 c4 10             	add    esp,0x10
c000a30b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a313:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a317:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a31b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a31f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a323:	e8 10 e0 01 00       	call   c0028338 <__muldf3>
c000a328:	83 c4 10             	add    esp,0x10
c000a32b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a32f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a333:	52                   	push   edx
c000a334:	50                   	push   eax
c000a335:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a339:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a33d:	e8 79 d9 01 00       	call   c0027cbb <__adddf3>
c000a342:	59                   	pop    ecx
c000a343:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a347:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a34b:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a351:	e8 d9 e9 01 00       	call   c0028d2f <__extendsfdf2>
c000a356:	83 c4 10             	add    esp,0x10
c000a359:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a35d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a365:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a369:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a36d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a371:	e8 c2 df 01 00       	call   c0028338 <__muldf3>
c000a376:	83 c4 10             	add    esp,0x10
c000a379:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a37d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a381:	52                   	push   edx
c000a382:	50                   	push   eax
c000a383:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a387:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a38b:	e8 2b d9 01 00       	call   c0027cbb <__adddf3>
c000a390:	5f                   	pop    edi
c000a391:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a395:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a399:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a39f:	e8 8b e9 01 00       	call   c0028d2f <__extendsfdf2>
c000a3a4:	83 c4 10             	add    esp,0x10
c000a3a7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3ab:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3b7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3bb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3bf:	e8 74 df 01 00       	call   c0028338 <__muldf3>
c000a3c4:	83 c4 10             	add    esp,0x10
c000a3c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3cf:	52                   	push   edx
c000a3d0:	50                   	push   eax
c000a3d1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3d5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3d9:	e8 dd d8 01 00       	call   c0027cbb <__adddf3>
c000a3de:	83 c4 10             	add    esp,0x10
c000a3e1:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3e5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3e9:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3ed:	85 db                	test   ebx,ebx
c000a3ef:	0f 8f 36 fe ff ff    	jg     c000a22b <calc_output_quad+0x2b1>
c000a3f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a401:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a405:	e8 b1 d8 01 00       	call   c0027cbb <__adddf3>
c000a40a:	83 c4 10             	add    esp,0x10
c000a40d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a419:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a421:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a425:	e8 0e df 01 00       	call   c0028338 <__muldf3>
c000a42a:	59                   	pop    ecx
c000a42b:	5b                   	pop    ebx
c000a42c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a430:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a438:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43c:	e8 ca e7 01 00       	call   c0028c0b <__truncdfsf2>
c000a441:	83 c4 10             	add    esp,0x10
c000a444:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a44b:	89 06                	mov    DWORD PTR [esi],eax
c000a44d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a451:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a455:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a459:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a45d:	e8 59 d8 01 00       	call   c0027cbb <__adddf3>
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a469:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a46d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a47d:	e8 b6 de 01 00       	call   c0028338 <__muldf3>
c000a482:	5e                   	pop    esi
c000a483:	5f                   	pop    edi
c000a484:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a488:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a494:	e8 72 e7 01 00       	call   c0028c0b <__truncdfsf2>
c000a499:	83 c4 10             	add    esp,0x10
c000a49c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4a3:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a4a6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a4aa:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a4b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a4b6:	e8 00 d8 01 00       	call   c0027cbb <__adddf3>
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d6:	e8 5d de 01 00       	call   c0028338 <__muldf3>
c000a4db:	5d                   	pop    ebp
c000a4dc:	59                   	pop    ecx
c000a4dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ed:	e8 19 e7 01 00       	call   c0028c0b <__truncdfsf2>
c000a4f2:	83 c4 10             	add    esp,0x10
c000a4f5:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4fc:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a503:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a507:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a50b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a50f:	e8 a7 d7 01 00       	call   c0027cbb <__adddf3>
c000a514:	83 c4 10             	add    esp,0x10
c000a517:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a51b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a527:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52f:	e8 04 de 01 00       	call   c0028338 <__muldf3>
c000a534:	5b                   	pop    ebx
c000a535:	5e                   	pop    esi
c000a536:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a53a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a53e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a542:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a546:	e8 c0 e6 01 00       	call   c0028c0b <__truncdfsf2>
c000a54b:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a552:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a555:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a55b:	5b                   	pop    ebx
c000a55c:	5e                   	pop    esi
c000a55d:	5f                   	pop    edi
c000a55e:	5d                   	pop    ebp
c000a55f:	c3                   	ret    

c000a560 <calc_output_hex>:
c000a560:	55                   	push   ebp
c000a561:	89 cd                	mov    ebp,ecx
c000a563:	57                   	push   edi
c000a564:	56                   	push   esi
c000a565:	53                   	push   ebx
c000a566:	89 c3                	mov    ebx,eax
c000a568:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a56e:	89 14 24             	mov    DWORD PTR [esp],edx
c000a571:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a578:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a57f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a583:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a587:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a58a:	e8 6f f3 ff ff       	call   c00098fe <int_to_fp>
c000a58f:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a592:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a596:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a599:	29 c8                	sub    eax,ecx
c000a59b:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a59f:	99                   	cdq    
c000a5a0:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a5a8:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a5ab:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a5b3:	0f af f8             	imul   edi,eax
c000a5b6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a5b9:	01 cf                	add    edi,ecx
c000a5bb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a5bf:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a5c2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5c6:	0f af c2             	imul   eax,edx
c000a5c9:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5cd:	29 c1                	sub    ecx,eax
c000a5cf:	31 d2                	xor    edx,edx
c000a5d1:	31 c0                	xor    eax,eax
c000a5d3:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5e2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5ea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5f2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5fe:	89 f8                	mov    eax,edi
c000a600:	e8 07 f3 ff ff       	call   c000990c <fp_to_double>
c000a605:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a609:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a60d:	89 f8                	mov    eax,edi
c000a60f:	e8 ee f2 ff ff       	call   c0009902 <fp_to_int>
c000a614:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a618:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a61b:	52                   	push   edx
c000a61c:	52                   	push   edx
c000a61d:	51                   	push   ecx
c000a61e:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a622:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a629:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a62d:	e8 1e d0 01 00       	call   c0027650 <__subsf3>
c000a632:	89 04 24             	mov    DWORD PTR [esp],eax
c000a635:	e8 f5 e6 01 00       	call   c0028d2f <__extendsfdf2>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a641:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	e8 de dc 01 00       	call   c0028338 <__muldf3>
c000a65a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a65e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a662:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a665:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a669:	e8 c1 e6 01 00       	call   c0028d2f <__extendsfdf2>
c000a66e:	83 c4 10             	add    esp,0x10
c000a671:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a675:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a679:	52                   	push   edx
c000a67a:	50                   	push   eax
c000a67b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a67f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a683:	e8 33 d6 01 00       	call   c0027cbb <__adddf3>
c000a688:	59                   	pop    ecx
c000a689:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a68d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a691:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a697:	e8 93 e6 01 00       	call   c0028d2f <__extendsfdf2>
c000a69c:	83 c4 10             	add    esp,0x10
c000a69f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6a3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6af:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6b3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6b7:	e8 7c dc 01 00       	call   c0028338 <__muldf3>
c000a6bc:	83 c4 10             	add    esp,0x10
c000a6bf:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6c3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6c7:	52                   	push   edx
c000a6c8:	50                   	push   eax
c000a6c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6d1:	e8 e5 d5 01 00       	call   c0027cbb <__adddf3>
c000a6d6:	59                   	pop    ecx
c000a6d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6db:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6df:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6e5:	e8 45 e6 01 00       	call   c0028d2f <__extendsfdf2>
c000a6ea:	83 c4 10             	add    esp,0x10
c000a6ed:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6f1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6fd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a701:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a705:	e8 2e dc 01 00       	call   c0028338 <__muldf3>
c000a70a:	83 c4 10             	add    esp,0x10
c000a70d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a711:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a715:	52                   	push   edx
c000a716:	50                   	push   eax
c000a717:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a71b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a71f:	e8 97 d5 01 00       	call   c0027cbb <__adddf3>
c000a724:	59                   	pop    ecx
c000a725:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a729:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a72d:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a733:	e8 f7 e5 01 00       	call   c0028d2f <__extendsfdf2>
c000a738:	83 c4 10             	add    esp,0x10
c000a73b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a743:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a747:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a74b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a74f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a753:	e8 e0 db 01 00       	call   c0028338 <__muldf3>
c000a758:	83 c4 10             	add    esp,0x10
c000a75b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a75f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a763:	52                   	push   edx
c000a764:	50                   	push   eax
c000a765:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a769:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a76d:	e8 49 d5 01 00       	call   c0027cbb <__adddf3>
c000a772:	59                   	pop    ecx
c000a773:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a777:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a77b:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a781:	e8 a9 e5 01 00       	call   c0028d2f <__extendsfdf2>
c000a786:	83 c4 10             	add    esp,0x10
c000a789:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a78d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a799:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a79d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7a1:	e8 92 db 01 00       	call   c0028338 <__muldf3>
c000a7a6:	83 c4 10             	add    esp,0x10
c000a7a9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ad:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7b1:	52                   	push   edx
c000a7b2:	50                   	push   eax
c000a7b3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a7b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a7bb:	e8 fb d4 01 00       	call   c0027cbb <__adddf3>
c000a7c0:	59                   	pop    ecx
c000a7c1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7c5:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7c9:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7cf:	e8 5b e5 01 00       	call   c0028d2f <__extendsfdf2>
c000a7d4:	83 c4 10             	add    esp,0x10
c000a7d7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7db:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7e7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7eb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7ef:	e8 44 db 01 00       	call   c0028338 <__muldf3>
c000a7f4:	83 c4 10             	add    esp,0x10
c000a7f7:	83 c6 18             	add    esi,0x18
c000a7fa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7fe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a802:	52                   	push   edx
c000a803:	50                   	push   eax
c000a804:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a808:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a80c:	e8 aa d4 01 00       	call   c0027cbb <__adddf3>
c000a811:	59                   	pop    ecx
c000a812:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a816:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a81a:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a820:	e8 0a e5 01 00       	call   c0028d2f <__extendsfdf2>
c000a825:	83 c4 10             	add    esp,0x10
c000a828:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a82c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a830:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a838:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a83c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a840:	e8 f3 da 01 00       	call   c0028338 <__muldf3>
c000a845:	83 c4 10             	add    esp,0x10
c000a848:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a84c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a850:	52                   	push   edx
c000a851:	50                   	push   eax
c000a852:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a856:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a85a:	e8 5c d4 01 00       	call   c0027cbb <__adddf3>
c000a85f:	83 c4 10             	add    esp,0x10
c000a862:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a866:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a86a:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a86d:	0f 89 8b fd ff ff    	jns    c000a5fe <calc_output_hex+0x9e>
c000a873:	31 f6                	xor    esi,esi
c000a875:	31 ff                	xor    edi,edi
c000a877:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a87b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a87e:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a882:	29 e9                	sub    ecx,ebp
c000a884:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a888:	29 c8                	sub    eax,ecx
c000a88a:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a88d:	99                   	cdq    
c000a88e:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a892:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a895:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a899:	0f af e8             	imul   ebp,eax
c000a89c:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a8a0:	40                   	inc    eax
c000a8a1:	01 cd                	add    ebp,ecx
c000a8a3:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a8a8:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a8ac:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a8b0:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a8b4:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a8b7:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a8bb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a8bf:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a8c3:	89 e8                	mov    eax,ebp
c000a8c5:	e8 42 f0 ff ff       	call   c000990c <fp_to_double>
c000a8ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8d2:	89 e8                	mov    eax,ebp
c000a8d4:	e8 29 f0 ff ff       	call   c0009902 <fp_to_int>
c000a8d9:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8dd:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8e0:	52                   	push   edx
c000a8e1:	52                   	push   edx
c000a8e2:	51                   	push   ecx
c000a8e3:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8ea:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8f1:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8f5:	e8 56 cd 01 00       	call   c0027650 <__subsf3>
c000a8fa:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8fd:	e8 2d e4 01 00       	call   c0028d2f <__extendsfdf2>
c000a902:	83 c4 10             	add    esp,0x10
c000a905:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a909:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a90d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a911:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a915:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a919:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a91d:	e8 16 da 01 00       	call   c0028338 <__muldf3>
c000a922:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a929:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a92d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a930:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a934:	e8 f6 e3 01 00       	call   c0028d2f <__extendsfdf2>
c000a939:	83 c4 10             	add    esp,0x10
c000a93c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a940:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a944:	52                   	push   edx
c000a945:	50                   	push   eax
c000a946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a94e:	e8 68 d3 01 00       	call   c0027cbb <__adddf3>
c000a953:	59                   	pop    ecx
c000a954:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a958:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a95c:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a962:	e8 c8 e3 01 00       	call   c0028d2f <__extendsfdf2>
c000a967:	83 c4 10             	add    esp,0x10
c000a96a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a972:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a97a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a97e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a982:	e8 b1 d9 01 00       	call   c0028338 <__muldf3>
c000a987:	83 c4 10             	add    esp,0x10
c000a98a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a98e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a992:	52                   	push   edx
c000a993:	50                   	push   eax
c000a994:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a998:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a99c:	e8 1a d3 01 00       	call   c0027cbb <__adddf3>
c000a9a1:	59                   	pop    ecx
c000a9a2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a9a6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a9aa:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a9b0:	e8 7a e3 01 00       	call   c0028d2f <__extendsfdf2>
c000a9b5:	83 c4 10             	add    esp,0x10
c000a9b8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9bc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9c8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9cc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9d0:	e8 63 d9 01 00       	call   c0028338 <__muldf3>
c000a9d5:	83 c4 10             	add    esp,0x10
c000a9d8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9dc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9e0:	52                   	push   edx
c000a9e1:	50                   	push   eax
c000a9e2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9e6:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ea:	e8 cc d2 01 00       	call   c0027cbb <__adddf3>
c000a9ef:	59                   	pop    ecx
c000a9f0:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9f4:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9f8:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9fe:	e8 2c e3 01 00       	call   c0028d2f <__extendsfdf2>
c000aa03:	83 c4 10             	add    esp,0x10
c000aa06:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa0a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa16:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa1a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa1e:	e8 15 d9 01 00       	call   c0028338 <__muldf3>
c000aa23:	83 c4 10             	add    esp,0x10
c000aa26:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa2a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa2e:	52                   	push   edx
c000aa2f:	50                   	push   eax
c000aa30:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa34:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa38:	e8 7e d2 01 00       	call   c0027cbb <__adddf3>
c000aa3d:	59                   	pop    ecx
c000aa3e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa42:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa46:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa4c:	e8 de e2 01 00       	call   c0028d2f <__extendsfdf2>
c000aa51:	83 c4 10             	add    esp,0x10
c000aa54:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa58:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa64:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa68:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa6c:	e8 c7 d8 01 00       	call   c0028338 <__muldf3>
c000aa71:	83 c4 10             	add    esp,0x10
c000aa74:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa78:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa7c:	52                   	push   edx
c000aa7d:	50                   	push   eax
c000aa7e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa82:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa86:	e8 30 d2 01 00       	call   c0027cbb <__adddf3>
c000aa8b:	59                   	pop    ecx
c000aa8c:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa90:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa94:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa9a:	e8 90 e2 01 00       	call   c0028d2f <__extendsfdf2>
c000aa9f:	83 c4 10             	add    esp,0x10
c000aaa2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aab2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aab6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaba:	e8 79 d8 01 00       	call   c0028338 <__muldf3>
c000aabf:	83 c4 10             	add    esp,0x10
c000aac2:	83 eb 18             	sub    ebx,0x18
c000aac5:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aac9:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aacd:	52                   	push   edx
c000aace:	50                   	push   eax
c000aacf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aad3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aad7:	e8 df d1 01 00       	call   c0027cbb <__adddf3>
c000aadc:	59                   	pop    ecx
c000aadd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aae1:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aae5:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aaeb:	e8 3f e2 01 00       	call   c0028d2f <__extendsfdf2>
c000aaf0:	83 c4 10             	add    esp,0x10
c000aaf3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaf7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aafb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab03:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab07:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab0b:	e8 28 d8 01 00       	call   c0028338 <__muldf3>
c000ab10:	83 c4 10             	add    esp,0x10
c000ab13:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab17:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ab1b:	52                   	push   edx
c000ab1c:	50                   	push   eax
c000ab1d:	57                   	push   edi
c000ab1e:	56                   	push   esi
c000ab1f:	e8 97 d1 01 00       	call   c0027cbb <__adddf3>
c000ab24:	83 c4 10             	add    esp,0x10
c000ab27:	89 c6                	mov    esi,eax
c000ab29:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab2c:	89 d7                	mov    edi,edx
c000ab2e:	85 ed                	test   ebp,ebp
c000ab30:	0f 8f 8d fd ff ff    	jg     c000a8c3 <calc_output_hex+0x363>
c000ab36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab3e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab46:	e8 70 d1 01 00       	call   c0027cbb <__adddf3>
c000ab4b:	83 c4 10             	add    esp,0x10
c000ab4e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab51:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab55:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab59:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab65:	e8 ce d7 01 00       	call   c0028338 <__muldf3>
c000ab6a:	59                   	pop    ecx
c000ab6b:	5b                   	pop    ebx
c000ab6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab7c:	e8 8a e0 01 00       	call   c0028c0b <__truncdfsf2>
c000ab81:	83 c4 10             	add    esp,0x10
c000ab84:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab8b:	89 03                	mov    DWORD PTR [ebx],eax
c000ab8d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab91:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab95:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab99:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab9d:	e8 19 d1 01 00       	call   c0027cbb <__adddf3>
c000aba2:	83 c4 10             	add    esp,0x10
c000aba5:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abbc:	e8 77 d7 01 00       	call   c0028338 <__muldf3>
c000abc1:	5d                   	pop    ebp
c000abc2:	59                   	pop    ecx
c000abc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd3:	e8 33 e0 01 00       	call   c0028c0b <__truncdfsf2>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abe2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abe5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abe9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abed:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abf1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abf5:	e8 c1 d0 01 00       	call   c0027cbb <__adddf3>
c000abfa:	83 c4 10             	add    esp,0x10
c000abfd:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac00:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac04:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac08:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac10:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac14:	e8 1f d7 01 00       	call   c0028338 <__muldf3>
c000ac19:	5b                   	pop    ebx
c000ac1a:	5d                   	pop    ebp
c000ac1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac2b:	e8 db df 01 00       	call   c0028c0b <__truncdfsf2>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac3a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac3d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac41:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac49:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac4d:	e8 69 d0 01 00       	call   c0027cbb <__adddf3>
c000ac52:	83 c4 10             	add    esp,0x10
c000ac55:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac58:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac60:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac64:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac6c:	e8 c7 d6 01 00       	call   c0028338 <__muldf3>
c000ac71:	59                   	pop    ecx
c000ac72:	5b                   	pop    ebx
c000ac73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac83:	e8 83 df 01 00       	call   c0028c0b <__truncdfsf2>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac92:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac95:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac99:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aca1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aca5:	e8 11 d0 01 00       	call   c0027cbb <__adddf3>
c000acaa:	83 c4 10             	add    esp,0x10
c000acad:	89 04 24             	mov    DWORD PTR [esp],eax
c000acb0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acc0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acc4:	e8 6f d6 01 00       	call   c0028338 <__muldf3>
c000acc9:	5d                   	pop    ebp
c000acca:	59                   	pop    ecx
c000accb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000accf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acdb:	e8 2b df 01 00       	call   c0028c0b <__truncdfsf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acea:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aced:	57                   	push   edi
c000acee:	56                   	push   esi
c000acef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acf3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acf7:	e8 bf cf 01 00       	call   c0027cbb <__adddf3>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad16:	e8 1d d6 01 00       	call   c0028338 <__muldf3>
c000ad1b:	5b                   	pop    ebx
c000ad1c:	5e                   	pop    esi
c000ad1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad2d:	e8 d9 de 01 00       	call   c0028c0b <__truncdfsf2>
c000ad32:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad39:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad3c:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad42:	5b                   	pop    ebx
c000ad43:	5e                   	pop    esi
c000ad44:	5f                   	pop    edi
c000ad45:	5d                   	pop    ebp
c000ad46:	c3                   	ret    

c000ad47 <sinc_reset>:
c000ad47:	56                   	push   esi
c000ad48:	53                   	push   ebx
c000ad49:	51                   	push   ecx
c000ad4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad4e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad51:	85 db                	test   ebx,ebx
c000ad53:	74 59                	je     c000adae <sinc_reset+0x67>
c000ad55:	31 d2                	xor    edx,edx
c000ad57:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad5e:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad61:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad64:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad6b:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad72:	31 c0                	xor    eax,eax
c000ad74:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad7a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad7d:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad80:	52                   	push   edx
c000ad81:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad84:	c1 e0 02             	shl    eax,0x2
c000ad87:	50                   	push   eax
c000ad88:	6a 00                	push   0x0
c000ad8a:	56                   	push   esi
c000ad8b:	e8 0c 5a ff ff       	call   c000079c <memset>
c000ad90:	83 c4 0c             	add    esp,0xc
c000ad93:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad96:	c1 e0 02             	shl    eax,0x2
c000ad99:	50                   	push   eax
c000ad9a:	68 aa 00 00 00       	push   0xaa
c000ad9f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ada2:	8d 04 86             	lea    eax,[esi+eax*4]
c000ada5:	50                   	push   eax
c000ada6:	e8 f1 59 ff ff       	call   c000079c <memset>
c000adab:	83 c4 10             	add    esp,0x10
c000adae:	58                   	pop    eax
c000adaf:	5b                   	pop    ebx
c000adb0:	5e                   	pop    esi
c000adb1:	c3                   	ret    

c000adb2 <calc_output_multi>:
c000adb2:	55                   	push   ebp
c000adb3:	57                   	push   edi
c000adb4:	56                   	push   esi
c000adb5:	89 c6                	mov    esi,eax
c000adb7:	53                   	push   ebx
c000adb8:	83 ec 4c             	sub    esp,0x4c
c000adbb:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000adbf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000adc3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000adc7:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000adcb:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adcf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000add3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000add7:	8d 46 44             	lea    eax,[esi+0x44]
c000adda:	89 04 24             	mov    DWORD PTR [esp],eax
c000addd:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ade3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ade7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adea:	e8 0f eb ff ff       	call   c00098fe <int_to_fp>
c000adef:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adf2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adf6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adfa:	99                   	cdq    
c000adfb:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000adff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ae03:	0f af d0             	imul   edx,eax
c000ae06:	0f af c3             	imul   eax,ebx
c000ae09:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ae0d:	29 c1                	sub    ecx,eax
c000ae0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae13:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ae17:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ae1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae22:	57                   	push   edi
c000ae23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae27:	6a 00                	push   0x0
c000ae29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae2d:	e8 6a 59 ff ff       	call   c000079c <memset>
c000ae32:	83 c4 10             	add    esp,0x10
c000ae35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae39:	89 df                	mov    edi,ebx
c000ae3b:	e8 cc ea ff ff       	call   c000990c <fp_to_double>
c000ae40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae44:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae4c:	e8 b1 ea ff ff       	call   c0009902 <fp_to_int>
c000ae51:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae54:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae57:	51                   	push   ecx
c000ae58:	51                   	push   ecx
c000ae59:	55                   	push   ebp
c000ae5a:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae5e:	e8 ed c7 01 00       	call   c0027650 <__subsf3>
c000ae63:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae66:	e8 c4 de 01 00       	call   c0028d2f <__extendsfdf2>
c000ae6b:	83 c4 10             	add    esp,0x10
c000ae6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae72:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae7e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae82:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae86:	e8 ad d4 01 00       	call   c0028338 <__muldf3>
c000ae8b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae92:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae96:	e8 94 de 01 00       	call   c0028d2f <__extendsfdf2>
c000ae9b:	83 c4 10             	add    esp,0x10
c000ae9e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aea2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea6:	52                   	push   edx
c000aea7:	50                   	push   eax
c000aea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb0:	e8 06 ce 01 00       	call   c0027cbb <__adddf3>
c000aeb5:	83 c4 10             	add    esp,0x10
c000aeb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aebc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aec0:	89 f8                	mov    eax,edi
c000aec2:	b9 08 00 00 00       	mov    ecx,0x8
c000aec7:	99                   	cdq    
c000aec8:	f7 f9                	idiv   ecx
c000aeca:	4a                   	dec    edx
c000aecb:	83 fa 06             	cmp    edx,0x6
c000aece:	77 07                	ja     c000aed7 <calc_output_multi+0x125>
c000aed0:	ff 24 95 44 a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd59bc]
c000aed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeda:	4f                   	dec    edi
c000aedb:	83 ec 0c             	sub    esp,0xc
c000aede:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee5:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeec:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef0:	e8 3a de 01 00       	call   c0028d2f <__extendsfdf2>
c000aef5:	83 c4 10             	add    esp,0x10
c000aef8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af08:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af10:	e8 23 d4 01 00       	call   c0028338 <__muldf3>
c000af15:	83 c4 10             	add    esp,0x10
c000af18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af20:	52                   	push   edx
c000af21:	50                   	push   eax
c000af22:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af25:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af28:	e8 8e cd 01 00       	call   c0027cbb <__adddf3>
c000af2d:	83 c4 10             	add    esp,0x10
c000af30:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af33:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af36:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af39:	4f                   	dec    edi
c000af3a:	83 ec 0c             	sub    esp,0xc
c000af3d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af44:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af4f:	e8 db dd 01 00       	call   c0028d2f <__extendsfdf2>
c000af54:	83 c4 10             	add    esp,0x10
c000af57:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af67:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6f:	e8 c4 d3 01 00       	call   c0028338 <__muldf3>
c000af74:	83 c4 10             	add    esp,0x10
c000af77:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7f:	52                   	push   edx
c000af80:	50                   	push   eax
c000af81:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af84:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af87:	e8 2f cd 01 00       	call   c0027cbb <__adddf3>
c000af8c:	83 c4 10             	add    esp,0x10
c000af8f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af92:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af95:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af98:	4f                   	dec    edi
c000af99:	83 ec 0c             	sub    esp,0xc
c000af9c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa3:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afaa:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afae:	e8 7c dd 01 00       	call   c0028d2f <__extendsfdf2>
c000afb3:	83 c4 10             	add    esp,0x10
c000afb6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afce:	e8 65 d3 01 00       	call   c0028338 <__muldf3>
c000afd3:	83 c4 10             	add    esp,0x10
c000afd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afde:	52                   	push   edx
c000afdf:	50                   	push   eax
c000afe0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe6:	e8 d0 cc 01 00       	call   c0027cbb <__adddf3>
c000afeb:	83 c4 10             	add    esp,0x10
c000afee:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff7:	4f                   	dec    edi
c000aff8:	83 ec 0c             	sub    esp,0xc
c000affb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000affe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b002:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b009:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00d:	e8 1d dd 01 00       	call   c0028d2f <__extendsfdf2>
c000b012:	83 c4 10             	add    esp,0x10
c000b015:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b019:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b021:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b025:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02d:	e8 06 d3 01 00       	call   c0028338 <__muldf3>
c000b032:	83 c4 10             	add    esp,0x10
c000b035:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b039:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03d:	52                   	push   edx
c000b03e:	50                   	push   eax
c000b03f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b042:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b045:	e8 71 cc 01 00       	call   c0027cbb <__adddf3>
c000b04a:	83 c4 10             	add    esp,0x10
c000b04d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b050:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b053:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b056:	4f                   	dec    edi
c000b057:	83 ec 0c             	sub    esp,0xc
c000b05a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b061:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b068:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06c:	e8 be dc 01 00       	call   c0028d2f <__extendsfdf2>
c000b071:	83 c4 10             	add    esp,0x10
c000b074:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b078:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b080:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b084:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b088:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08c:	e8 a7 d2 01 00       	call   c0028338 <__muldf3>
c000b091:	83 c4 10             	add    esp,0x10
c000b094:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b098:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09c:	52                   	push   edx
c000b09d:	50                   	push   eax
c000b09e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a4:	e8 12 cc 01 00       	call   c0027cbb <__adddf3>
c000b0a9:	83 c4 10             	add    esp,0x10
c000b0ac:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0af:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 5f dc 01 00       	call   c0028d2f <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0eb:	e8 48 d2 01 00       	call   c0028338 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 b3 cb 01 00       	call   c0027cbb <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b114:	4f                   	dec    edi
c000b115:	83 ec 0c             	sub    esp,0xc
c000b118:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b11f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b126:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12a:	e8 00 dc 01 00       	call   c0028d2f <__extendsfdf2>
c000b12f:	83 c4 10             	add    esp,0x10
c000b132:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b136:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b142:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b146:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14a:	e8 e9 d1 01 00       	call   c0028338 <__muldf3>
c000b14f:	83 c4 10             	add    esp,0x10
c000b152:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b156:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15a:	52                   	push   edx
c000b15b:	50                   	push   eax
c000b15c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b15f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b162:	e8 54 cb 01 00       	call   c0027cbb <__adddf3>
c000b167:	83 c4 10             	add    esp,0x10
c000b16a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b170:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b173:	4f                   	dec    edi
c000b174:	83 ec 0c             	sub    esp,0xc
c000b177:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b17e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b185:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b189:	e8 a1 db 01 00       	call   c0028d2f <__extendsfdf2>
c000b18e:	83 c4 10             	add    esp,0x10
c000b191:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b195:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b199:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a9:	e8 8a d1 01 00       	call   c0028338 <__muldf3>
c000b1ae:	83 c4 10             	add    esp,0x10
c000b1b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1b9:	52                   	push   edx
c000b1ba:	50                   	push   eax
c000b1bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c1:	e8 f5 ca 01 00       	call   c0027cbb <__adddf3>
c000b1c6:	83 c4 10             	add    esp,0x10
c000b1c9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1cc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1cf:	85 ff                	test   edi,edi
c000b1d1:	0f 8f e9 fc ff ff    	jg     c000aec0 <calc_output_multi+0x10e>
c000b1d7:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1db:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1df:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1e3:	0f 89 4c fc ff ff    	jns    c000ae35 <calc_output_multi+0x83>
c000b1e9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1f1:	29 c8                	sub    eax,ecx
c000b1f3:	99                   	cdq    
c000b1f4:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1fc:	0f af d0             	imul   edx,eax
c000b1ff:	40                   	inc    eax
c000b200:	01 d1                	add    ecx,edx
c000b202:	0f af c3             	imul   eax,ebx
c000b205:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b209:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b20c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b210:	55                   	push   ebp
c000b211:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b215:	6a 00                	push   0x0
c000b217:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21b:	e8 7c 55 ff ff       	call   c000079c <memset>
c000b220:	83 c4 10             	add    esp,0x10
c000b223:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b227:	e8 e0 e6 ff ff       	call   c000990c <fp_to_double>
c000b22c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b230:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b234:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b238:	e8 c5 e6 ff ff       	call   c0009902 <fp_to_int>
c000b23d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b240:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b243:	57                   	push   edi
c000b244:	57                   	push   edi
c000b245:	89 df                	mov    edi,ebx
c000b247:	55                   	push   ebp
c000b248:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b24c:	e8 ff c3 01 00       	call   c0027650 <__subsf3>
c000b251:	89 04 24             	mov    DWORD PTR [esp],eax
c000b254:	e8 d6 da 01 00       	call   c0028d2f <__extendsfdf2>
c000b259:	83 c4 10             	add    esp,0x10
c000b25c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b260:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b264:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b268:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b26c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b270:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b274:	e8 bf d0 01 00       	call   c0028338 <__muldf3>
c000b279:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b27c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b280:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b284:	e8 a6 da 01 00       	call   c0028d2f <__extendsfdf2>
c000b289:	83 c4 10             	add    esp,0x10
c000b28c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b290:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b294:	52                   	push   edx
c000b295:	50                   	push   eax
c000b296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b29a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b29e:	e8 18 ca 01 00       	call   c0027cbb <__adddf3>
c000b2a3:	83 c4 10             	add    esp,0x10
c000b2a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b2aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b2ae:	89 f8                	mov    eax,edi
c000b2b0:	b9 08 00 00 00       	mov    ecx,0x8
c000b2b5:	99                   	cdq    
c000b2b6:	f7 f9                	idiv   ecx
c000b2b8:	4a                   	dec    edx
c000b2b9:	83 fa 06             	cmp    edx,0x6
c000b2bc:	77 07                	ja     c000b2c5 <calc_output_multi+0x513>
c000b2be:	ff 24 95 60 a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd59a0]
c000b2c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2c9:	4f                   	dec    edi
c000b2ca:	83 ec 0c             	sub    esp,0xc
c000b2cd:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2db:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2df:	e8 4b da 01 00       	call   c0028d2f <__extendsfdf2>
c000b2e4:	83 c4 10             	add    esp,0x10
c000b2e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2ff:	e8 34 d0 01 00       	call   c0028338 <__muldf3>
c000b304:	83 c4 10             	add    esp,0x10
c000b307:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30f:	52                   	push   edx
c000b310:	50                   	push   eax
c000b311:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b314:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b317:	e8 9f c9 01 00       	call   c0027cbb <__adddf3>
c000b31c:	83 c4 10             	add    esp,0x10
c000b31f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b322:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b329:	4f                   	dec    edi
c000b32a:	83 ec 0c             	sub    esp,0xc
c000b32d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b330:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b334:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b33f:	e8 eb d9 01 00       	call   c0028d2f <__extendsfdf2>
c000b344:	83 c4 10             	add    esp,0x10
c000b347:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b353:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b357:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35f:	e8 d4 cf 01 00       	call   c0028338 <__muldf3>
c000b364:	83 c4 10             	add    esp,0x10
c000b367:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b36f:	52                   	push   edx
c000b370:	50                   	push   eax
c000b371:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b374:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b377:	e8 3f c9 01 00       	call   c0027cbb <__adddf3>
c000b37c:	83 c4 10             	add    esp,0x10
c000b37f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b382:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b385:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b389:	4f                   	dec    edi
c000b38a:	83 ec 0c             	sub    esp,0xc
c000b38d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b390:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b394:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b39f:	e8 8b d9 01 00       	call   c0028d2f <__extendsfdf2>
c000b3a4:	83 c4 10             	add    esp,0x10
c000b3a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bf:	e8 74 cf 01 00       	call   c0028338 <__muldf3>
c000b3c4:	83 c4 10             	add    esp,0x10
c000b3c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3cf:	52                   	push   edx
c000b3d0:	50                   	push   eax
c000b3d1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d7:	e8 df c8 01 00       	call   c0027cbb <__adddf3>
c000b3dc:	83 c4 10             	add    esp,0x10
c000b3df:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e9:	4f                   	dec    edi
c000b3ea:	83 ec 0c             	sub    esp,0xc
c000b3ed:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3ff:	e8 2b d9 01 00       	call   c0028d2f <__extendsfdf2>
c000b404:	83 c4 10             	add    esp,0x10
c000b407:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41f:	e8 14 cf 01 00       	call   c0028338 <__muldf3>
c000b424:	83 c4 10             	add    esp,0x10
c000b427:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b42f:	52                   	push   edx
c000b430:	50                   	push   eax
c000b431:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b434:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b437:	e8 7f c8 01 00       	call   c0027cbb <__adddf3>
c000b43c:	83 c4 10             	add    esp,0x10
c000b43f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b442:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b445:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b449:	4f                   	dec    edi
c000b44a:	83 ec 0c             	sub    esp,0xc
c000b44d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b450:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b454:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b45f:	e8 cb d8 01 00       	call   c0028d2f <__extendsfdf2>
c000b464:	83 c4 10             	add    esp,0x10
c000b467:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b473:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47f:	e8 b4 ce 01 00       	call   c0028338 <__muldf3>
c000b484:	83 c4 10             	add    esp,0x10
c000b487:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b48f:	52                   	push   edx
c000b490:	50                   	push   eax
c000b491:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b494:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b497:	e8 1f c8 01 00       	call   c0027cbb <__adddf3>
c000b49c:	83 c4 10             	add    esp,0x10
c000b49f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a9:	4f                   	dec    edi
c000b4aa:	83 ec 0c             	sub    esp,0xc
c000b4ad:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4bf:	e8 6b d8 01 00       	call   c0028d2f <__extendsfdf2>
c000b4c4:	83 c4 10             	add    esp,0x10
c000b4c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4df:	e8 54 ce 01 00       	call   c0028338 <__muldf3>
c000b4e4:	83 c4 10             	add    esp,0x10
c000b4e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ef:	52                   	push   edx
c000b4f0:	50                   	push   eax
c000b4f1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f7:	e8 bf c7 01 00       	call   c0027cbb <__adddf3>
c000b4fc:	83 c4 10             	add    esp,0x10
c000b4ff:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b502:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b505:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b509:	4f                   	dec    edi
c000b50a:	83 ec 0c             	sub    esp,0xc
c000b50d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b510:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b514:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b51f:	e8 0b d8 01 00       	call   c0028d2f <__extendsfdf2>
c000b524:	83 c4 10             	add    esp,0x10
c000b527:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b533:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b537:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53f:	e8 f4 cd 01 00       	call   c0028338 <__muldf3>
c000b544:	83 c4 10             	add    esp,0x10
c000b547:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b54f:	52                   	push   edx
c000b550:	50                   	push   eax
c000b551:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b554:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b557:	e8 5f c7 01 00       	call   c0027cbb <__adddf3>
c000b55c:	83 c4 10             	add    esp,0x10
c000b55f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b562:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b565:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b569:	4f                   	dec    edi
c000b56a:	83 ec 0c             	sub    esp,0xc
c000b56d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b570:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b574:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b57b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b57f:	e8 ab d7 01 00       	call   c0028d2f <__extendsfdf2>
c000b584:	83 c4 10             	add    esp,0x10
c000b587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b593:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b597:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b59b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b59f:	e8 94 cd 01 00       	call   c0028338 <__muldf3>
c000b5a4:	83 c4 10             	add    esp,0x10
c000b5a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5af:	52                   	push   edx
c000b5b0:	50                   	push   eax
c000b5b1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b5b4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b5b7:	e8 ff c6 01 00       	call   c0027cbb <__adddf3>
c000b5bc:	83 c4 10             	add    esp,0x10
c000b5bf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5c2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5c5:	85 ff                	test   edi,edi
c000b5c7:	0f 8f e1 fc ff ff    	jg     c000b2ae <calc_output_multi+0x4fc>
c000b5cd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5d1:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5d5:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5de:	0f 8f 3f fc ff ff    	jg     c000b223 <calc_output_multi+0x471>
c000b5e4:	be 08 00 00 00       	mov    esi,0x8
c000b5e9:	89 d8                	mov    eax,ebx
c000b5eb:	99                   	cdq    
c000b5ec:	f7 fe                	idiv   esi
c000b5ee:	4a                   	dec    edx
c000b5ef:	83 fa 06             	cmp    edx,0x6
c000b5f2:	77 07                	ja     c000b5fb <calc_output_multi+0x849>
c000b5f4:	ff 24 95 7c a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5984]
c000b5fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5ff:	4b                   	dec    ebx
c000b600:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b604:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b607:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b612:	e8 a4 c6 01 00       	call   c0027cbb <__adddf3>
c000b617:	83 c4 10             	add    esp,0x10
c000b61a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b62a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b632:	e8 01 cd 01 00       	call   c0028338 <__muldf3>
c000b637:	5d                   	pop    ebp
c000b638:	59                   	pop    ecx
c000b639:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 bd d5 01 00       	call   c0028c0b <__truncdfsf2>
c000b64e:	83 c4 10             	add    esp,0x10
c000b651:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b655:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65c:	4b                   	dec    ebx
c000b65d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b661:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b668:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66f:	e8 47 c6 01 00       	call   c0027cbb <__adddf3>
c000b674:	83 c4 10             	add    esp,0x10
c000b677:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b683:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68f:	e8 a4 cc 01 00       	call   c0028338 <__muldf3>
c000b694:	59                   	pop    ecx
c000b695:	5f                   	pop    edi
c000b696:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b69a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a6:	e8 60 d5 01 00       	call   c0028c0b <__truncdfsf2>
c000b6ab:	83 c4 10             	add    esp,0x10
c000b6ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b9:	4b                   	dec    ebx
c000b6ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cc:	e8 ea c5 01 00       	call   c0027cbb <__adddf3>
c000b6d1:	83 c4 10             	add    esp,0x10
c000b6d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ec:	e8 47 cc 01 00       	call   c0028338 <__muldf3>
c000b6f1:	5f                   	pop    edi
c000b6f2:	5d                   	pop    ebp
c000b6f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b703:	e8 03 d5 01 00       	call   c0028c0b <__truncdfsf2>
c000b708:	83 c4 10             	add    esp,0x10
c000b70b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b716:	4b                   	dec    ebx
c000b717:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b722:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b726:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b729:	e8 8d c5 01 00       	call   c0027cbb <__adddf3>
c000b72e:	83 c4 10             	add    esp,0x10
c000b731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b735:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b739:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b741:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b749:	e8 ea cb 01 00       	call   c0028338 <__muldf3>
c000b74e:	5d                   	pop    ebp
c000b74f:	59                   	pop    ecx
c000b750:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b754:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b758:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b760:	e8 a6 d4 01 00       	call   c0028c0b <__truncdfsf2>
c000b765:	83 c4 10             	add    esp,0x10
c000b768:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76c:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b773:	4b                   	dec    ebx
c000b774:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b778:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b783:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b786:	e8 30 c5 01 00       	call   c0027cbb <__adddf3>
c000b78b:	83 c4 10             	add    esp,0x10
c000b78e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b792:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a6:	e8 8d cb 01 00       	call   c0028338 <__muldf3>
c000b7ab:	59                   	pop    ecx
c000b7ac:	5f                   	pop    edi
c000b7ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bd:	e8 49 d4 01 00       	call   c0028c0b <__truncdfsf2>
c000b7c2:	83 c4 10             	add    esp,0x10
c000b7c5:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c9:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d0:	4b                   	dec    ebx
c000b7d1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e3:	e8 d3 c4 01 00       	call   c0027cbb <__adddf3>
c000b7e8:	83 c4 10             	add    esp,0x10
c000b7eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b803:	e8 30 cb 01 00       	call   c0028338 <__muldf3>
c000b808:	5f                   	pop    edi
c000b809:	5d                   	pop    ebp
c000b80a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b816:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81a:	e8 ec d3 01 00       	call   c0028c0b <__truncdfsf2>
c000b81f:	83 c4 10             	add    esp,0x10
c000b822:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b826:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b829:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82d:	4b                   	dec    ebx
c000b82e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b832:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b839:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b840:	e8 76 c4 01 00       	call   c0027cbb <__adddf3>
c000b845:	83 c4 10             	add    esp,0x10
c000b848:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b858:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b860:	e8 d3 ca 01 00       	call   c0028338 <__muldf3>
c000b865:	5d                   	pop    ebp
c000b866:	59                   	pop    ecx
c000b867:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b873:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b877:	e8 8f d3 01 00       	call   c0028c0b <__truncdfsf2>
c000b87c:	83 c4 10             	add    esp,0x10
c000b87f:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b883:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b88a:	4b                   	dec    ebx
c000b88b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b88f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b892:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b896:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b89a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b89d:	e8 19 c4 01 00       	call   c0027cbb <__adddf3>
c000b8a2:	83 c4 10             	add    esp,0x10
c000b8a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8bd:	e8 76 ca 01 00       	call   c0028338 <__muldf3>
c000b8c2:	59                   	pop    ecx
c000b8c3:	5f                   	pop    edi
c000b8c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8c8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d4:	e8 32 d3 01 00       	call   c0028c0b <__truncdfsf2>
c000b8d9:	83 c4 10             	add    esp,0x10
c000b8dc:	85 db                	test   ebx,ebx
c000b8de:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8e2:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8e5:	0f 8f fe fc ff ff    	jg     c000b5e9 <calc_output_multi+0x837>
c000b8eb:	83 c4 4c             	add    esp,0x4c
c000b8ee:	5b                   	pop    ebx
c000b8ef:	5e                   	pop    esi
c000b8f0:	5f                   	pop    edi
c000b8f1:	5d                   	pop    ebp
c000b8f2:	c3                   	ret    

c000b8f3 <double_to_fp>:
c000b8f3:	83 ec 0c             	sub    esp,0xc
c000b8f6:	68 00 00 b0 40       	push   0x40b00000
c000b8fb:	6a 00                	push   0x0
c000b8fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b901:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b905:	e8 2e ca 01 00       	call   c0028338 <__muldf3>
c000b90a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b90e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b912:	83 c4 1c             	add    esp,0x1c
c000b915:	e9 a6 d4 01 00       	jmp    c0028dc0 <lrint>

c000b91a <prepare_data>:
c000b91a:	55                   	push   ebp
c000b91b:	57                   	push   edi
c000b91c:	56                   	push   esi
c000b91d:	53                   	push   ebx
c000b91e:	83 ec 1c             	sub    esp,0x1c
c000b921:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b925:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b929:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b92d:	0f 89 57 01 00 00    	jns    c000ba8a <prepare_data+0x170>
c000b933:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b936:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b939:	85 d2                	test   edx,edx
c000b93b:	75 0d                	jne    c000b94a <prepare_data+0x30>
c000b93d:	8d 14 36             	lea    edx,[esi+esi*1]
c000b940:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b943:	29 d0                	sub    eax,edx
c000b945:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b948:	eb 44                	jmp    c000b98e <prepare_data+0x74>
c000b94a:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b94d:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b950:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b953:	39 c1                	cmp    ecx,eax
c000b955:	7d 04                	jge    c000b95b <prepare_data+0x41>
c000b957:	29 d0                	sub    eax,edx
c000b959:	eb 2d                	jmp    c000b988 <prepare_data+0x6e>
c000b95b:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b961:	29 d7                	sub    edi,edx
c000b963:	01 f7                	add    edi,esi
c000b965:	51                   	push   ecx
c000b966:	29 f2                	sub    edx,esi
c000b968:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b96f:	8d 14 90             	lea    edx,[eax+edx*4]
c000b972:	51                   	push   ecx
c000b973:	52                   	push   edx
c000b974:	50                   	push   eax
c000b975:	e8 26 4d ff ff       	call   c00006a0 <memmove>
c000b97a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b97d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b980:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b983:	29 f0                	sub    eax,esi
c000b985:	83 c4 10             	add    esp,0x10
c000b988:	29 f0                	sub    eax,esi
c000b98a:	79 02                	jns    c000b98e <prepare_data+0x74>
c000b98c:	31 c0                	xor    eax,eax
c000b98e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b991:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b994:	29 ef                	sub    edi,ebp
c000b996:	39 c7                	cmp    edi,eax
c000b998:	7e 02                	jle    c000b99c <prepare_data+0x82>
c000b99a:	89 c7                	mov    edi,eax
c000b99c:	89 f8                	mov    eax,edi
c000b99e:	99                   	cdq    
c000b99f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b9a2:	b8 15 00 00 00       	mov    eax,0x15
c000b9a7:	29 d7                	sub    edi,edx
c000b9a9:	0f 88 dd 00 00 00    	js     c000ba8c <prepare_data+0x172>
c000b9af:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b9b2:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b9b5:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b9b8:	0f 8f ce 00 00 00    	jg     c000ba8c <prepare_data+0x172>
c000b9be:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9c4:	50                   	push   eax
c000b9c5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9cc:	50                   	push   eax
c000b9cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9d1:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9d3:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9d6:	50                   	push   eax
c000b9d7:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9da:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9de:	50                   	push   eax
c000b9df:	e8 84 4d ff ff       	call   c0000768 <memcpy>
c000b9e4:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9e7:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9ea:	01 fd                	add    ebp,edi
c000b9ec:	01 f9                	add    ecx,edi
c000b9ee:	83 c4 10             	add    esp,0x10
c000b9f1:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9f4:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9f7:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9fe:	0f 85 86 00 00 00    	jne    c000ba8a <prepare_data+0x170>
c000ba04:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000ba07:	89 e8                	mov    eax,ebp
c000ba09:	8d 3c 36             	lea    edi,[esi+esi*1]
c000ba0c:	29 c8                	sub    eax,ecx
c000ba0e:	39 f8                	cmp    eax,edi
c000ba10:	7d 78                	jge    c000ba8a <prepare_data+0x170>
c000ba12:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ba16:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000ba1a:	74 6e                	je     c000ba8a <prepare_data+0x170>
c000ba1c:	8d 7e 04             	lea    edi,[esi+0x4]
c000ba1f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ba23:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba26:	29 ef                	sub    edi,ebp
c000ba28:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba2c:	7c 29                	jl     c000ba57 <prepare_data+0x13d>
c000ba2e:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba31:	29 f1                	sub    ecx,esi
c000ba33:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba3a:	55                   	push   ebp
c000ba3b:	50                   	push   eax
c000ba3c:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba3f:	50                   	push   eax
c000ba40:	52                   	push   edx
c000ba41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba45:	e8 56 4c ff ff       	call   c00006a0 <memmove>
c000ba4a:	83 c4 10             	add    esp,0x10
c000ba4d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba50:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba57:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba5a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba5d:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba60:	83 c6 05             	add    esi,0x5
c000ba63:	78 07                	js     c000ba6c <prepare_data+0x152>
c000ba65:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba68:	39 cf                	cmp    edi,ecx
c000ba6a:	7e 04                	jle    c000ba70 <prepare_data+0x156>
c000ba6c:	89 ce                	mov    esi,ecx
c000ba6e:	29 c6                	sub    esi,eax
c000ba70:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba73:	51                   	push   ecx
c000ba74:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba7b:	51                   	push   ecx
c000ba7c:	6a 00                	push   0x0
c000ba7e:	50                   	push   eax
c000ba7f:	e8 18 4d ff ff       	call   c000079c <memset>
c000ba84:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba87:	83 c4 10             	add    esp,0x10
c000ba8a:	31 c0                	xor    eax,eax
c000ba8c:	83 c4 1c             	add    esp,0x1c
c000ba8f:	5b                   	pop    ebx
c000ba90:	5e                   	pop    esi
c000ba91:	5f                   	pop    edi
c000ba92:	5d                   	pop    ebp
c000ba93:	c3                   	ret    

c000ba94 <sinc_multichan_vari_process>:
c000ba94:	55                   	push   ebp
c000ba95:	ba 05 00 00 00       	mov    edx,0x5
c000ba9a:	57                   	push   edi
c000ba9b:	56                   	push   esi
c000ba9c:	53                   	push   ebx
c000ba9d:	83 ec 4c             	sub    esp,0x4c
c000baa0:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000baa4:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000baa8:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000baab:	85 db                	test   ebx,ebx
c000baad:	0f 84 9b 06 00 00    	je     c000c14e <sinc_multichan_vari_process+0x6ba>
c000bab3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bab6:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bab9:	0f af c5             	imul   eax,ebp
c000babc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000babf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bac2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bac9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bad0:	0f af c5             	imul   eax,ebp
c000bad3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bad6:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bad9:	8b 06                	mov    eax,DWORD PTR [esi]
c000badb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000badf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bae3:	68 00 00 70 3f       	push   0x3f700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 10 d1 01 00       	call   c0028c07 <__ltdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 88 47 06 00 00    	js     c000c14e <sinc_multichan_vari_process+0x6ba>
c000bb07:	68 00 00 70 40       	push   0x40700000
c000bb0c:	6a 00                	push   0x0
c000bb0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb16:	e8 ce d0 01 00       	call   c0028be9 <__gtdf2>
c000bb1b:	83 c4 10             	add    esp,0x10
c000bb1e:	ba 16 00 00 00       	mov    edx,0x16
c000bb23:	85 c0                	test   eax,eax
c000bb25:	0f 8f 23 06 00 00    	jg     c000c14e <sinc_multichan_vari_process+0x6ba>
c000bb2b:	83 ec 0c             	sub    esp,0xc
c000bb2e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb31:	e8 65 ce 01 00       	call   c002899b <__floatsidf>
c000bb36:	83 c4 10             	add    esp,0x10
c000bb39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb41:	68 00 00 00 40       	push   0x40000000
c000bb46:	6a 00                	push   0x0
c000bb48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb50:	e8 66 c1 01 00       	call   c0027cbb <__adddf3>
c000bb55:	59                   	pop    ecx
c000bb56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb5a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb5e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb61:	e8 35 ce 01 00       	call   c002899b <__floatsidf>
c000bb66:	83 c4 10             	add    esp,0x10
c000bb69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb71:	52                   	push   edx
c000bb72:	50                   	push   eax
c000bb73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7b:	e8 9c ca 01 00       	call   c002861c <__divdf3>
c000bb80:	83 c4 10             	add    esp,0x10
c000bb83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb87:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb8b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb8e:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb95:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bba1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bba5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bba9:	e8 3b d0 01 00       	call   c0028be9 <__gtdf2>
c000bbae:	83 c4 10             	add    esp,0x10
c000bbb1:	85 c0                	test   eax,eax
c000bbb3:	7e 2d                	jle    c000bbe2 <sinc_multichan_vari_process+0x14e>
c000bbb5:	68 00 00 f0 3f       	push   0x3ff00000
c000bbba:	6a 00                	push   0x0
c000bbbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbc4:	e8 3e d0 01 00       	call   c0028c07 <__ltdf2>
c000bbc9:	83 c4 10             	add    esp,0x10
c000bbcc:	85 c0                	test   eax,eax
c000bbce:	79 4d                	jns    c000bc1d <sinc_multichan_vari_process+0x189>
c000bbd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbdc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbe0:	eb 1b                	jmp    c000bbfd <sinc_multichan_vari_process+0x169>
c000bbe2:	68 00 00 f0 3f       	push   0x3ff00000
c000bbe7:	6a 00                	push   0x0
c000bbe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbf1:	e8 11 d0 01 00       	call   c0028c07 <__ltdf2>
c000bbf6:	83 c4 10             	add    esp,0x10
c000bbf9:	85 c0                	test   eax,eax
c000bbfb:	79 20                	jns    c000bc1d <sinc_multichan_vari_process+0x189>
c000bbfd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bc01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bc05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0d:	e8 0a ca 01 00       	call   c002861c <__divdf3>
c000bc12:	83 c4 10             	add    esp,0x10
c000bc15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1d:	50                   	push   eax
c000bc1e:	50                   	push   eax
c000bc1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc27:	e8 94 d1 01 00       	call   c0028dc0 <lrint>
c000bc2c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc2f:	40                   	inc    eax
c000bc30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc34:	0f af c5             	imul   eax,ebp
c000bc37:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc3b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc3e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc42:	58                   	pop    eax
c000bc43:	5a                   	pop    edx
c000bc44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc4c:	e8 6f d1 01 00       	call   c0028dc0 <lrint>
c000bc51:	83 ec 0c             	sub    esp,0xc
c000bc54:	50                   	push   eax
c000bc55:	e8 41 cd 01 00       	call   c002899b <__floatsidf>
c000bc5a:	83 c4 10             	add    esp,0x10
c000bc5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc61:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc65:	52                   	push   edx
c000bc66:	50                   	push   eax
c000bc67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc6f:	e8 98 c6 01 00       	call   c002830c <__subdf3>
c000bc74:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc78:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc7c:	83 c4 20             	add    esp,0x20
c000bc7f:	6a 00                	push   0x0
c000bc81:	6a 00                	push   0x0
c000bc83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc8b:	e8 77 cf 01 00       	call   c0028c07 <__ltdf2>
c000bc90:	83 c4 10             	add    esp,0x10
c000bc93:	85 c0                	test   eax,eax
c000bc95:	79 1f                	jns    c000bcb6 <sinc_multichan_vari_process+0x222>
c000bc97:	68 00 00 f0 3f       	push   0x3ff00000
c000bc9c:	6a 00                	push   0x0
c000bc9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bca2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bca6:	e8 10 c0 01 00       	call   c0027cbb <__adddf3>
c000bcab:	83 c4 10             	add    esp,0x10
c000bcae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bcb6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bcb9:	83 ec 10             	sub    esp,0x10
c000bcbc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bcc0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bcc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bccb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcd3:	e8 34 c6 01 00       	call   c002830c <__subdf3>
c000bcd8:	83 c4 18             	add    esp,0x18
c000bcdb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcdf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bce3:	52                   	push   edx
c000bce4:	50                   	push   eax
c000bce5:	e8 d6 d0 01 00       	call   c0028dc0 <lrint>
c000bcea:	0f af e8             	imul   ebp,eax
c000bced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcf1:	01 e8                	add    eax,ebp
c000bcf3:	99                   	cdq    
c000bcf4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcf7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd02:	68 00 00 f0 3f       	push   0x3ff00000
c000bd07:	6a 00                	push   0x0
c000bd09:	e8 0e c9 01 00       	call   c002861c <__divdf3>
c000bd0e:	83 c4 10             	add    esp,0x10
c000bd11:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd15:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd19:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bd1e:	68 23 42 92 0c       	push   0xc924223
c000bd23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd2b:	e8 8b bf 01 00       	call   c0027cbb <__adddf3>
c000bd30:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd34:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd38:	83 c4 20             	add    esp,0x20
c000bd3b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd43:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd4b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd4e:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd51:	7d 50                	jge    c000bda3 <sinc_multichan_vari_process+0x30f>
c000bd53:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd56:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd59:	01 c8                	add    eax,ecx
c000bd5b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd5e:	99                   	cdq    
c000bd5f:	f7 f9                	idiv   ecx
c000bd61:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd65:	7d 0c                	jge    c000bd73 <sinc_multichan_vari_process+0x2df>
c000bd67:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd6a:	85 ed                	test   ebp,ebp
c000bd6c:	79 6b                	jns    c000bdd9 <sinc_multichan_vari_process+0x345>
c000bd6e:	e9 e6 00 00 00       	jmp    c000be59 <sinc_multichan_vari_process+0x3c5>
c000bd73:	50                   	push   eax
c000bd74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd78:	57                   	push   edi
c000bd79:	53                   	push   ebx
c000bd7a:	e8 9b fb ff ff       	call   c000b91a <prepare_data>
c000bd7f:	83 c4 10             	add    esp,0x10
c000bd82:	89 c2                	mov    edx,eax
c000bd84:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd87:	85 c0                	test   eax,eax
c000bd89:	0f 85 bf 03 00 00    	jne    c000c14e <sinc_multichan_vari_process+0x6ba>
c000bd8f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd92:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd95:	01 c8                	add    eax,ecx
c000bd97:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd9a:	99                   	cdq    
c000bd9b:	f7 f9                	idiv   ecx
c000bd9d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bda1:	7c c4                	jl     c000bd67 <sinc_multichan_vari_process+0x2d3>
c000bda3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bda7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdab:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bdae:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bdb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bdb9:	89 06                	mov    DWORD PTR [esi],eax
c000bdbb:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bdbe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bdc1:	99                   	cdq    
c000bdc2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdc5:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bdc8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bdcb:	99                   	cdq    
c000bdcc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdcf:	31 d2                	xor    edx,edx
c000bdd1:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdd4:	e9 75 03 00 00       	jmp    c000c14e <sinc_multichan_vari_process+0x6ba>
c000bdd9:	83 ec 0c             	sub    esp,0xc
c000bddc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bddf:	e8 b7 cb 01 00       	call   c002899b <__floatsidf>
c000bde4:	83 c4 10             	add    esp,0x10
c000bde7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdf3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	e8 b7 be 01 00       	call   c0027cbb <__adddf3>
c000be04:	83 c4 10             	add    esp,0x10
c000be07:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000be0b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000be0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	e8 97 be 01 00       	call   c0027cbb <__adddf3>
c000be24:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be27:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be2f:	e8 67 cb 01 00       	call   c002899b <__floatsidf>
c000be34:	83 c4 10             	add    esp,0x10
c000be37:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be3f:	52                   	push   edx
c000be40:	50                   	push   eax
c000be41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be49:	e8 b7 cd 01 00       	call   c0028c05 <__gedf2>
c000be4e:	83 c4 10             	add    esp,0x10
c000be51:	85 c0                	test   eax,eax
c000be53:	0f 89 4a ff ff ff    	jns    c000bda3 <sinc_multichan_vari_process+0x30f>
c000be59:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be5d:	0f 8e ed 00 00 00    	jle    c000bf50 <sinc_multichan_vari_process+0x4bc>
c000be63:	83 ec 10             	sub    esp,0x10
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be6f:	ff 36                	push   DWORD PTR [esi]
c000be71:	e8 96 c4 01 00       	call   c002830c <__subdf3>
c000be76:	83 c4 18             	add    esp,0x18
c000be79:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be81:	52                   	push   edx
c000be82:	50                   	push   eax
c000be83:	e8 18 cf 01 00       	call   c0028da0 <fabs>
c000be88:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be8c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be90:	83 c4 10             	add    esp,0x10
c000be93:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be98:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bea5:	e8 3f cd 01 00       	call   c0028be9 <__gtdf2>
c000beaa:	83 c4 10             	add    esp,0x10
c000bead:	85 c0                	test   eax,eax
c000beaf:	0f 8e 9b 00 00 00    	jle    c000bf50 <sinc_multichan_vari_process+0x4bc>
c000beb5:	8b 06                	mov    eax,DWORD PTR [esi]
c000beb7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000beba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bebe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bec2:	52                   	push   edx
c000bec3:	50                   	push   eax
c000bec4:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bec7:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000beca:	e8 3d c4 01 00       	call   c002830c <__subdf3>
c000becf:	59                   	pop    ecx
c000bed0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bed4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bed8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bedb:	e8 bb ca 01 00       	call   c002899b <__floatsidf>
c000bee0:	83 c4 10             	add    esp,0x10
c000bee3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bee7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beeb:	52                   	push   edx
c000beec:	50                   	push   eax
c000beed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef5:	e8 3e c4 01 00       	call   c0028338 <__muldf3>
c000befa:	5d                   	pop    ebp
c000befb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beff:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bf03:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bf06:	e8 90 ca 01 00       	call   c002899b <__floatsidf>
c000bf0b:	83 c4 10             	add    esp,0x10
c000bf0e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf16:	52                   	push   edx
c000bf17:	50                   	push   eax
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf20:	e8 f7 c6 01 00       	call   c002861c <__divdf3>
c000bf25:	83 c4 10             	add    esp,0x10
c000bf28:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf2c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf40:	e8 76 bd 01 00       	call   c0027cbb <__adddf3>
c000bf45:	83 c4 10             	add    esp,0x10
c000bf48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf4c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf50:	83 ec 0c             	sub    esp,0xc
c000bf53:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf56:	e8 40 ca 01 00       	call   c002899b <__floatsidf>
c000bf5b:	83 c4 10             	add    esp,0x10
c000bf5e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf62:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf76:	e8 8c cc 01 00       	call   c0028c07 <__ltdf2>
c000bf7b:	83 c4 10             	add    esp,0x10
c000bf7e:	85 c0                	test   eax,eax
c000bf80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf88:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf8c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf90:	78 10                	js     c000bfa2 <sinc_multichan_vari_process+0x50e>
c000bf92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf9a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf9e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfa2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfa6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb2:	e8 81 c3 01 00       	call   c0028338 <__muldf3>
c000bfb7:	59                   	pop    ecx
c000bfb8:	5d                   	pop    ebp
c000bfb9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfbd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bfc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfc9:	e8 25 f9 ff ff       	call   c000b8f3 <double_to_fp>
c000bfce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfd2:	89 c5                	mov    ebp,eax
c000bfd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfd8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfdc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfe0:	e8 53 c3 01 00       	call   c0028338 <__muldf3>
c000bfe5:	83 c4 18             	add    esp,0x18
c000bfe8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bff0:	52                   	push   edx
c000bff1:	50                   	push   eax
c000bff2:	e8 fc f8 ff ff       	call   c000b8f3 <double_to_fp>
c000bff7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bffa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bffe:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c001:	8d 04 90             	lea    eax,[eax+edx*4]
c000c004:	50                   	push   eax
c000c005:	50                   	push   eax
c000c006:	50                   	push   eax
c000c007:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c00a:	e8 8c c9 01 00       	call   c002899b <__floatsidf>
c000c00f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c013:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000c017:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c023:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c027:	e8 f0 c5 01 00       	call   c002861c <__divdf3>
c000c02c:	83 c4 1c             	add    esp,0x1c
c000c02f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c033:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c037:	52                   	push   edx
c000c038:	89 ea                	mov    edx,ebp
c000c03a:	50                   	push   eax
c000c03b:	89 d8                	mov    eax,ebx
c000c03d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c040:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c044:	e8 69 ed ff ff       	call   c000adb2 <calc_output_multi>
c000c049:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c04c:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c04f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c053:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c057:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c05b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c05f:	e8 b8 c5 01 00       	call   c002861c <__divdf3>
c000c064:	83 c4 10             	add    esp,0x10
c000c067:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c06b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c077:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c07b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c07f:	e8 37 bc 01 00       	call   c0027cbb <__adddf3>
c000c084:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c088:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c08c:	83 c4 28             	add    esp,0x28
c000c08f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c093:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c097:	e8 24 cd 01 00       	call   c0028dc0 <lrint>
c000c09c:	83 ec 0c             	sub    esp,0xc
c000c09f:	50                   	push   eax
c000c0a0:	e8 f6 c8 01 00       	call   c002899b <__floatsidf>
c000c0a5:	83 c4 10             	add    esp,0x10
c000c0a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0ac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b0:	52                   	push   edx
c000c0b1:	50                   	push   eax
c000c0b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0ba:	e8 4d c2 01 00       	call   c002830c <__subdf3>
c000c0bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0c7:	83 c4 20             	add    esp,0x20
c000c0ca:	6a 00                	push   0x0
c000c0cc:	6a 00                	push   0x0
c000c0ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d6:	e8 2c cb 01 00       	call   c0028c07 <__ltdf2>
c000c0db:	83 c4 10             	add    esp,0x10
c000c0de:	85 c0                	test   eax,eax
c000c0e0:	79 20                	jns    c000c102 <sinc_multichan_vari_process+0x66e>
c000c0e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f2:	e8 c4 bb 01 00       	call   c0027cbb <__adddf3>
c000c0f7:	83 c4 10             	add    esp,0x10
c000c0fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c102:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c105:	83 ec 10             	sub    esp,0x10
c000c108:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c10c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c10f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c113:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c117:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c11b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c11f:	e8 e8 c1 01 00       	call   c002830c <__subdf3>
c000c124:	83 c4 18             	add    esp,0x18
c000c127:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c12b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c12f:	52                   	push   edx
c000c130:	50                   	push   eax
c000c131:	e8 8a cc 01 00       	call   c0028dc0 <lrint>
c000c136:	0f af e8             	imul   ebp,eax
c000c139:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c13d:	83 c4 10             	add    esp,0x10
c000c140:	01 e8                	add    eax,ebp
c000c142:	99                   	cdq    
c000c143:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c146:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c149:	e9 fd fb ff ff       	jmp    c000bd4b <sinc_multichan_vari_process+0x2b7>
c000c14e:	83 c4 4c             	add    esp,0x4c
c000c151:	89 d0                	mov    eax,edx
c000c153:	5b                   	pop    ebx
c000c154:	5e                   	pop    esi
c000c155:	5f                   	pop    edi
c000c156:	5d                   	pop    ebp
c000c157:	c3                   	ret    

c000c158 <sinc_hex_vari_process>:
c000c158:	55                   	push   ebp
c000c159:	ba 05 00 00 00       	mov    edx,0x5
c000c15e:	57                   	push   edi
c000c15f:	56                   	push   esi
c000c160:	53                   	push   ebx
c000c161:	83 ec 4c             	sub    esp,0x4c
c000c164:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c168:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c16c:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c16f:	85 db                	test   ebx,ebx
c000c171:	0f 84 9c 06 00 00    	je     c000c813 <sinc_hex_vari_process+0x6bb>
c000c177:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c17a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c17d:	0f af c7             	imul   eax,edi
c000c180:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c183:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c186:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c18d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c194:	0f af c7             	imul   eax,edi
c000c197:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c19a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c19d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c1a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c1a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1a8:	68 00 00 70 3f       	push   0x3f700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 4b ca 01 00       	call   c0028c07 <__ltdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 88 47 06 00 00    	js     c000c813 <sinc_hex_vari_process+0x6bb>
c000c1cc:	68 00 00 70 40       	push   0x40700000
c000c1d1:	6a 00                	push   0x0
c000c1d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1db:	e8 09 ca 01 00       	call   c0028be9 <__gtdf2>
c000c1e0:	83 c4 10             	add    esp,0x10
c000c1e3:	ba 16 00 00 00       	mov    edx,0x16
c000c1e8:	85 c0                	test   eax,eax
c000c1ea:	0f 8f 23 06 00 00    	jg     c000c813 <sinc_hex_vari_process+0x6bb>
c000c1f0:	83 ec 0c             	sub    esp,0xc
c000c1f3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1f6:	e8 a0 c7 01 00       	call   c002899b <__floatsidf>
c000c1fb:	83 c4 10             	add    esp,0x10
c000c1fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c202:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c206:	68 00 00 00 40       	push   0x40000000
c000c20b:	6a 00                	push   0x0
c000c20d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c211:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c215:	e8 a1 ba 01 00       	call   c0027cbb <__adddf3>
c000c21a:	59                   	pop    ecx
c000c21b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c21f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c223:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c226:	e8 70 c7 01 00       	call   c002899b <__floatsidf>
c000c22b:	83 c4 10             	add    esp,0x10
c000c22e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c232:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c236:	52                   	push   edx
c000c237:	50                   	push   eax
c000c238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c240:	e8 d7 c3 01 00       	call   c002861c <__divdf3>
c000c245:	83 c4 10             	add    esp,0x10
c000c248:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c24c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c250:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c253:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c256:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c25a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c262:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c266:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c26a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c26e:	e8 76 c9 01 00       	call   c0028be9 <__gtdf2>
c000c273:	83 c4 10             	add    esp,0x10
c000c276:	85 c0                	test   eax,eax
c000c278:	7e 2d                	jle    c000c2a7 <sinc_hex_vari_process+0x14f>
c000c27a:	68 00 00 f0 3f       	push   0x3ff00000
c000c27f:	6a 00                	push   0x0
c000c281:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c289:	e8 79 c9 01 00       	call   c0028c07 <__ltdf2>
c000c28e:	83 c4 10             	add    esp,0x10
c000c291:	85 c0                	test   eax,eax
c000c293:	79 4d                	jns    c000c2e2 <sinc_hex_vari_process+0x18a>
c000c295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c299:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c29d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2a5:	eb 1b                	jmp    c000c2c2 <sinc_hex_vari_process+0x16a>
c000c2a7:	68 00 00 f0 3f       	push   0x3ff00000
c000c2ac:	6a 00                	push   0x0
c000c2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2b6:	e8 4c c9 01 00       	call   c0028c07 <__ltdf2>
c000c2bb:	83 c4 10             	add    esp,0x10
c000c2be:	85 c0                	test   eax,eax
c000c2c0:	79 20                	jns    c000c2e2 <sinc_hex_vari_process+0x18a>
c000c2c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d2:	e8 45 c3 01 00       	call   c002861c <__divdf3>
c000c2d7:	83 c4 10             	add    esp,0x10
c000c2da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2e2:	50                   	push   eax
c000c2e3:	50                   	push   eax
c000c2e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ec:	e8 cf ca 01 00       	call   c0028dc0 <lrint>
c000c2f1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2f4:	40                   	inc    eax
c000c2f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2f9:	0f af c7             	imul   eax,edi
c000c2fc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c307:	58                   	pop    eax
c000c308:	5a                   	pop    edx
c000c309:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c311:	e8 aa ca 01 00       	call   c0028dc0 <lrint>
c000c316:	83 ec 0c             	sub    esp,0xc
c000c319:	50                   	push   eax
c000c31a:	e8 7c c6 01 00       	call   c002899b <__floatsidf>
c000c31f:	83 c4 10             	add    esp,0x10
c000c322:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c326:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c32a:	52                   	push   edx
c000c32b:	50                   	push   eax
c000c32c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c330:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c334:	e8 d3 bf 01 00       	call   c002830c <__subdf3>
c000c339:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c341:	83 c4 20             	add    esp,0x20
c000c344:	6a 00                	push   0x0
c000c346:	6a 00                	push   0x0
c000c348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c350:	e8 b2 c8 01 00       	call   c0028c07 <__ltdf2>
c000c355:	83 c4 10             	add    esp,0x10
c000c358:	85 c0                	test   eax,eax
c000c35a:	79 1f                	jns    c000c37b <sinc_hex_vari_process+0x223>
c000c35c:	68 00 00 f0 3f       	push   0x3ff00000
c000c361:	6a 00                	push   0x0
c000c363:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c367:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c36b:	e8 4b b9 01 00       	call   c0027cbb <__adddf3>
c000c370:	83 c4 10             	add    esp,0x10
c000c373:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c377:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c37b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c37e:	83 ec 10             	sub    esp,0x10
c000c381:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c385:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c390:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c394:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c398:	e8 6f bf 01 00       	call   c002830c <__subdf3>
c000c39d:	83 c4 18             	add    esp,0x18
c000c3a0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3a8:	52                   	push   edx
c000c3a9:	50                   	push   eax
c000c3aa:	e8 11 ca 01 00       	call   c0028dc0 <lrint>
c000c3af:	0f af f8             	imul   edi,eax
c000c3b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3b6:	01 f8                	add    eax,edi
c000c3b8:	99                   	cdq    
c000c3b9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c3bc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c3bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3c7:	68 00 00 f0 3f       	push   0x3ff00000
c000c3cc:	6a 00                	push   0x0
c000c3ce:	e8 49 c2 01 00       	call   c002861c <__divdf3>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3de:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3e3:	68 23 42 92 0c       	push   0xc924223
c000c3e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3f0:	e8 c6 b8 01 00       	call   c0027cbb <__adddf3>
c000c3f5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3f9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3fd:	83 c4 20             	add    esp,0x20
c000c400:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c408:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c410:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c413:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c416:	7d 50                	jge    c000c468 <sinc_hex_vari_process+0x310>
c000c418:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c41b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c41e:	01 c8                	add    eax,ecx
c000c420:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c423:	99                   	cdq    
c000c424:	f7 f9                	idiv   ecx
c000c426:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c42a:	7d 0c                	jge    c000c438 <sinc_hex_vari_process+0x2e0>
c000c42c:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c42f:	85 ff                	test   edi,edi
c000c431:	79 6c                	jns    c000c49f <sinc_hex_vari_process+0x347>
c000c433:	e9 e7 00 00 00       	jmp    c000c51f <sinc_hex_vari_process+0x3c7>
c000c438:	50                   	push   eax
c000c439:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c43d:	56                   	push   esi
c000c43e:	53                   	push   ebx
c000c43f:	e8 d6 f4 ff ff       	call   c000b91a <prepare_data>
c000c444:	83 c4 10             	add    esp,0x10
c000c447:	89 c2                	mov    edx,eax
c000c449:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c44c:	85 c0                	test   eax,eax
c000c44e:	0f 85 bf 03 00 00    	jne    c000c813 <sinc_hex_vari_process+0x6bb>
c000c454:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c45a:	01 c8                	add    eax,ecx
c000c45c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c45f:	99                   	cdq    
c000c460:	f7 f9                	idiv   ecx
c000c462:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c466:	7c c4                	jl     c000c42c <sinc_hex_vari_process+0x2d4>
c000c468:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c46c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c470:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c473:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c47a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c47e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c481:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c484:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c487:	99                   	cdq    
c000c488:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c48b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c48e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c491:	99                   	cdq    
c000c492:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c495:	31 d2                	xor    edx,edx
c000c497:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c49a:	e9 74 03 00 00       	jmp    c000c813 <sinc_hex_vari_process+0x6bb>
c000c49f:	83 ec 0c             	sub    esp,0xc
c000c4a2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c4a5:	e8 f1 c4 01 00       	call   c002899b <__floatsidf>
c000c4aa:	83 c4 10             	add    esp,0x10
c000c4ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4b9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c5:	e8 f1 b7 01 00       	call   c0027cbb <__adddf3>
c000c4ca:	83 c4 10             	add    esp,0x10
c000c4cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e5:	e8 d1 b7 01 00       	call   c0027cbb <__adddf3>
c000c4ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f5:	e8 a1 c4 01 00       	call   c002899b <__floatsidf>
c000c4fa:	83 c4 10             	add    esp,0x10
c000c4fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c501:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c505:	52                   	push   edx
c000c506:	50                   	push   eax
c000c507:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50f:	e8 f1 c6 01 00       	call   c0028c05 <__gedf2>
c000c514:	83 c4 10             	add    esp,0x10
c000c517:	85 c0                	test   eax,eax
c000c519:	0f 89 49 ff ff ff    	jns    c000c468 <sinc_hex_vari_process+0x310>
c000c51f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c523:	0f 8e ef 00 00 00    	jle    c000c618 <sinc_hex_vari_process+0x4c0>
c000c529:	83 ec 10             	sub    esp,0x10
c000c52c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c52f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c532:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c535:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c538:	e8 cf bd 01 00       	call   c002830c <__subdf3>
c000c53d:	83 c4 18             	add    esp,0x18
c000c540:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c544:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c548:	52                   	push   edx
c000c549:	50                   	push   eax
c000c54a:	e8 51 c8 01 00       	call   c0028da0 <fabs>
c000c54f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c553:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c557:	83 c4 10             	add    esp,0x10
c000c55a:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c55f:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c564:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c568:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c56c:	e8 78 c6 01 00       	call   c0028be9 <__gtdf2>
c000c571:	83 c4 10             	add    esp,0x10
c000c574:	85 c0                	test   eax,eax
c000c576:	0f 8e 9c 00 00 00    	jle    c000c618 <sinc_hex_vari_process+0x4c0>
c000c57c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c57f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c582:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c586:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c58a:	52                   	push   edx
c000c58b:	50                   	push   eax
c000c58c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c58f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c592:	e8 75 bd 01 00       	call   c002830c <__subdf3>
c000c597:	59                   	pop    ecx
c000c598:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c59c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c5a3:	e8 f3 c3 01 00       	call   c002899b <__floatsidf>
c000c5a8:	83 c4 10             	add    esp,0x10
c000c5ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b3:	52                   	push   edx
c000c5b4:	50                   	push   eax
c000c5b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5bd:	e8 76 bd 01 00       	call   c0028338 <__muldf3>
c000c5c2:	5f                   	pop    edi
c000c5c3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5c7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5cb:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5ce:	e8 c8 c3 01 00       	call   c002899b <__floatsidf>
c000c5d3:	83 c4 10             	add    esp,0x10
c000c5d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5de:	52                   	push   edx
c000c5df:	50                   	push   eax
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e8:	e8 2f c0 01 00       	call   c002861c <__divdf3>
c000c5ed:	83 c4 10             	add    esp,0x10
c000c5f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5f4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c600:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c604:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c608:	e8 ae b6 01 00       	call   c0027cbb <__adddf3>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c614:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c618:	83 ec 0c             	sub    esp,0xc
c000c61b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c61e:	e8 78 c3 01 00       	call   c002899b <__floatsidf>
c000c623:	83 c4 10             	add    esp,0x10
c000c626:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c63a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c63e:	e8 c4 c5 01 00       	call   c0028c07 <__ltdf2>
c000c643:	83 c4 10             	add    esp,0x10
c000c646:	85 c0                	test   eax,eax
c000c648:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c64c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c650:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c654:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c658:	78 10                	js     c000c66a <sinc_hex_vari_process+0x512>
c000c65a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c65e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c662:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c666:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c66a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c66e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67a:	e8 b9 bc 01 00       	call   c0028338 <__muldf3>
c000c67f:	59                   	pop    ecx
c000c680:	5f                   	pop    edi
c000c681:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c685:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c689:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c68d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c691:	e8 5d f2 ff ff       	call   c000b8f3 <double_to_fp>
c000c696:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c69a:	89 c7                	mov    edi,eax
c000c69c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6a8:	e8 8b bc 01 00       	call   c0028338 <__muldf3>
c000c6ad:	83 c4 18             	add    esp,0x18
c000c6b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6b4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6b8:	52                   	push   edx
c000c6b9:	50                   	push   eax
c000c6ba:	e8 34 f2 ff ff       	call   c000b8f3 <double_to_fp>
c000c6bf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c6c2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6c6:	83 c4 0c             	add    esp,0xc
c000c6c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6cc:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6cf:	50                   	push   eax
c000c6d0:	50                   	push   eax
c000c6d1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6d4:	e8 c2 c2 01 00       	call   c002899b <__floatsidf>
c000c6d9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6dd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6f1:	e8 26 bf 01 00       	call   c002861c <__divdf3>
c000c6f6:	83 c4 18             	add    esp,0x18
c000c6f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c701:	52                   	push   edx
c000c702:	89 fa                	mov    edx,edi
c000c704:	50                   	push   eax
c000c705:	89 d8                	mov    eax,ebx
c000c707:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c70b:	e8 50 de ff ff       	call   c000a560 <calc_output_hex>
c000c710:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c714:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c718:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c720:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c724:	e8 f3 be 01 00       	call   c002861c <__divdf3>
c000c729:	83 c4 10             	add    esp,0x10
c000c72c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c730:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c73c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c740:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c744:	e8 72 b5 01 00       	call   c0027cbb <__adddf3>
c000c749:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c74d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c751:	83 c4 18             	add    esp,0x18
c000c754:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c758:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c75c:	e8 5f c6 01 00       	call   c0028dc0 <lrint>
c000c761:	83 ec 0c             	sub    esp,0xc
c000c764:	50                   	push   eax
c000c765:	e8 31 c2 01 00       	call   c002899b <__floatsidf>
c000c76a:	83 c4 10             	add    esp,0x10
c000c76d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c771:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c775:	52                   	push   edx
c000c776:	50                   	push   eax
c000c777:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c77b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c77f:	e8 88 bb 01 00       	call   c002830c <__subdf3>
c000c784:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c788:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c78c:	83 c4 20             	add    esp,0x20
c000c78f:	6a 00                	push   0x0
c000c791:	6a 00                	push   0x0
c000c793:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c797:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79b:	e8 67 c4 01 00       	call   c0028c07 <__ltdf2>
c000c7a0:	83 c4 10             	add    esp,0x10
c000c7a3:	85 c0                	test   eax,eax
c000c7a5:	79 20                	jns    c000c7c7 <sinc_hex_vari_process+0x66f>
c000c7a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b7:	e8 ff b4 01 00       	call   c0027cbb <__adddf3>
c000c7bc:	83 c4 10             	add    esp,0x10
c000c7bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7c7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7ca:	83 ec 10             	sub    esp,0x10
c000c7cd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7e4:	e8 23 bb 01 00       	call   c002830c <__subdf3>
c000c7e9:	83 c4 18             	add    esp,0x18
c000c7ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7f4:	52                   	push   edx
c000c7f5:	50                   	push   eax
c000c7f6:	e8 c5 c5 01 00       	call   c0028dc0 <lrint>
c000c7fb:	0f af f8             	imul   edi,eax
c000c7fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c802:	83 c4 10             	add    esp,0x10
c000c805:	01 f8                	add    eax,edi
c000c807:	99                   	cdq    
c000c808:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c80e:	e9 fd fb ff ff       	jmp    c000c410 <sinc_hex_vari_process+0x2b8>
c000c813:	83 c4 4c             	add    esp,0x4c
c000c816:	89 d0                	mov    eax,edx
c000c818:	5b                   	pop    ebx
c000c819:	5e                   	pop    esi
c000c81a:	5f                   	pop    edi
c000c81b:	5d                   	pop    ebp
c000c81c:	c3                   	ret    

c000c81d <sinc_quad_vari_process>:
c000c81d:	55                   	push   ebp
c000c81e:	ba 05 00 00 00       	mov    edx,0x5
c000c823:	57                   	push   edi
c000c824:	56                   	push   esi
c000c825:	53                   	push   ebx
c000c826:	83 ec 4c             	sub    esp,0x4c
c000c829:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c82d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c831:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c834:	85 db                	test   ebx,ebx
c000c836:	0f 84 9c 06 00 00    	je     c000ced8 <sinc_quad_vari_process+0x6bb>
c000c83c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c83f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c842:	0f af c7             	imul   eax,edi
c000c845:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c848:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c84b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c852:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c859:	0f af c7             	imul   eax,edi
c000c85c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c85f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c862:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c865:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c869:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c86d:	68 00 00 70 3f       	push   0x3f700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 86 c3 01 00       	call   c0028c07 <__ltdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 88 47 06 00 00    	js     c000ced8 <sinc_quad_vari_process+0x6bb>
c000c891:	68 00 00 70 40       	push   0x40700000
c000c896:	6a 00                	push   0x0
c000c898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c89c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8a0:	e8 44 c3 01 00       	call   c0028be9 <__gtdf2>
c000c8a5:	83 c4 10             	add    esp,0x10
c000c8a8:	ba 16 00 00 00       	mov    edx,0x16
c000c8ad:	85 c0                	test   eax,eax
c000c8af:	0f 8f 23 06 00 00    	jg     c000ced8 <sinc_quad_vari_process+0x6bb>
c000c8b5:	83 ec 0c             	sub    esp,0xc
c000c8b8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c8bb:	e8 db c0 01 00       	call   c002899b <__floatsidf>
c000c8c0:	83 c4 10             	add    esp,0x10
c000c8c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8cb:	68 00 00 00 40       	push   0x40000000
c000c8d0:	6a 00                	push   0x0
c000c8d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8da:	e8 dc b3 01 00       	call   c0027cbb <__adddf3>
c000c8df:	59                   	pop    ecx
c000c8e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8e4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8e8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8eb:	e8 ab c0 01 00       	call   c002899b <__floatsidf>
c000c8f0:	83 c4 10             	add    esp,0x10
c000c8f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8fb:	52                   	push   edx
c000c8fc:	50                   	push   eax
c000c8fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c901:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c905:	e8 12 bd 01 00       	call   c002861c <__divdf3>
c000c90a:	83 c4 10             	add    esp,0x10
c000c90d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c911:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c915:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c918:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c91b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c91f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c923:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c927:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c92b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c92f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c933:	e8 b1 c2 01 00       	call   c0028be9 <__gtdf2>
c000c938:	83 c4 10             	add    esp,0x10
c000c93b:	85 c0                	test   eax,eax
c000c93d:	7e 2d                	jle    c000c96c <sinc_quad_vari_process+0x14f>
c000c93f:	68 00 00 f0 3f       	push   0x3ff00000
c000c944:	6a 00                	push   0x0
c000c946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c94e:	e8 b4 c2 01 00       	call   c0028c07 <__ltdf2>
c000c953:	83 c4 10             	add    esp,0x10
c000c956:	85 c0                	test   eax,eax
c000c958:	79 4d                	jns    c000c9a7 <sinc_quad_vari_process+0x18a>
c000c95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c95e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c962:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c966:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c96a:	eb 1b                	jmp    c000c987 <sinc_quad_vari_process+0x16a>
c000c96c:	68 00 00 f0 3f       	push   0x3ff00000
c000c971:	6a 00                	push   0x0
c000c973:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c977:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c97b:	e8 87 c2 01 00       	call   c0028c07 <__ltdf2>
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	85 c0                	test   eax,eax
c000c985:	79 20                	jns    c000c9a7 <sinc_quad_vari_process+0x18a>
c000c987:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c98b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c98f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c993:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c997:	e8 80 bc 01 00       	call   c002861c <__divdf3>
c000c99c:	83 c4 10             	add    esp,0x10
c000c99f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9a7:	50                   	push   eax
c000c9a8:	50                   	push   eax
c000c9a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b1:	e8 0a c4 01 00       	call   c0028dc0 <lrint>
c000c9b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c9b9:	40                   	inc    eax
c000c9ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9be:	0f af c7             	imul   eax,edi
c000c9c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9cc:	58                   	pop    eax
c000c9cd:	5a                   	pop    edx
c000c9ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9d6:	e8 e5 c3 01 00       	call   c0028dc0 <lrint>
c000c9db:	83 ec 0c             	sub    esp,0xc
c000c9de:	50                   	push   eax
c000c9df:	e8 b7 bf 01 00       	call   c002899b <__floatsidf>
c000c9e4:	83 c4 10             	add    esp,0x10
c000c9e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9ef:	52                   	push   edx
c000c9f0:	50                   	push   eax
c000c9f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f9:	e8 0e b9 01 00       	call   c002830c <__subdf3>
c000c9fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca02:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca06:	83 c4 20             	add    esp,0x20
c000ca09:	6a 00                	push   0x0
c000ca0b:	6a 00                	push   0x0
c000ca0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca15:	e8 ed c1 01 00       	call   c0028c07 <__ltdf2>
c000ca1a:	83 c4 10             	add    esp,0x10
c000ca1d:	85 c0                	test   eax,eax
c000ca1f:	79 1f                	jns    c000ca40 <sinc_quad_vari_process+0x223>
c000ca21:	68 00 00 f0 3f       	push   0x3ff00000
c000ca26:	6a 00                	push   0x0
c000ca28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca30:	e8 86 b2 01 00       	call   c0027cbb <__adddf3>
c000ca35:	83 c4 10             	add    esp,0x10
c000ca38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca40:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca43:	83 ec 10             	sub    esp,0x10
c000ca46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca4a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca55:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca5d:	e8 aa b8 01 00       	call   c002830c <__subdf3>
c000ca62:	83 c4 18             	add    esp,0x18
c000ca65:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca69:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca6d:	52                   	push   edx
c000ca6e:	50                   	push   eax
c000ca6f:	e8 4c c3 01 00       	call   c0028dc0 <lrint>
c000ca74:	0f af f8             	imul   edi,eax
c000ca77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca7b:	01 f8                	add    eax,edi
c000ca7d:	99                   	cdq    
c000ca7e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca81:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca84:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca8c:	68 00 00 f0 3f       	push   0x3ff00000
c000ca91:	6a 00                	push   0x0
c000ca93:	e8 84 bb 01 00       	call   c002861c <__divdf3>
c000ca98:	83 c4 10             	add    esp,0x10
c000ca9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca9f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000caa3:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000caa8:	68 23 42 92 0c       	push   0xc924223
c000caad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cab1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cab5:	e8 01 b2 01 00       	call   c0027cbb <__adddf3>
c000caba:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cabe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cac2:	83 c4 20             	add    esp,0x20
c000cac5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cacd:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cad5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cad8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cadb:	7d 50                	jge    c000cb2d <sinc_quad_vari_process+0x310>
c000cadd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cae0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cae3:	01 c8                	add    eax,ecx
c000cae5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cae8:	99                   	cdq    
c000cae9:	f7 f9                	idiv   ecx
c000caeb:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000caef:	7d 0c                	jge    c000cafd <sinc_quad_vari_process+0x2e0>
c000caf1:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000caf4:	85 ff                	test   edi,edi
c000caf6:	79 6c                	jns    c000cb64 <sinc_quad_vari_process+0x347>
c000caf8:	e9 e7 00 00 00       	jmp    c000cbe4 <sinc_quad_vari_process+0x3c7>
c000cafd:	50                   	push   eax
c000cafe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb02:	56                   	push   esi
c000cb03:	53                   	push   ebx
c000cb04:	e8 11 ee ff ff       	call   c000b91a <prepare_data>
c000cb09:	83 c4 10             	add    esp,0x10
c000cb0c:	89 c2                	mov    edx,eax
c000cb0e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cb11:	85 c0                	test   eax,eax
c000cb13:	0f 85 bf 03 00 00    	jne    c000ced8 <sinc_quad_vari_process+0x6bb>
c000cb19:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cb1c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cb1f:	01 c8                	add    eax,ecx
c000cb21:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb24:	99                   	cdq    
c000cb25:	f7 f9                	idiv   ecx
c000cb27:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb2b:	7c c4                	jl     c000caf1 <sinc_quad_vari_process+0x2d4>
c000cb2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb35:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb38:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb43:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb46:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb49:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb4c:	99                   	cdq    
c000cb4d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb50:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb53:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb56:	99                   	cdq    
c000cb57:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb5a:	31 d2                	xor    edx,edx
c000cb5c:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb5f:	e9 74 03 00 00       	jmp    c000ced8 <sinc_quad_vari_process+0x6bb>
c000cb64:	83 ec 0c             	sub    esp,0xc
c000cb67:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb6a:	e8 2c be 01 00       	call   c002899b <__floatsidf>
c000cb6f:	83 c4 10             	add    esp,0x10
c000cb72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb7a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb7e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8a:	e8 2c b1 01 00       	call   c0027cbb <__adddf3>
c000cb8f:	83 c4 10             	add    esp,0x10
c000cb92:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb96:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb9a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cba2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbaa:	e8 0c b1 01 00       	call   c0027cbb <__adddf3>
c000cbaf:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cbb2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbb6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbba:	e8 dc bd 01 00       	call   c002899b <__floatsidf>
c000cbbf:	83 c4 10             	add    esp,0x10
c000cbc2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbc6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbca:	52                   	push   edx
c000cbcb:	50                   	push   eax
c000cbcc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd4:	e8 2c c0 01 00       	call   c0028c05 <__gedf2>
c000cbd9:	83 c4 10             	add    esp,0x10
c000cbdc:	85 c0                	test   eax,eax
c000cbde:	0f 89 49 ff ff ff    	jns    c000cb2d <sinc_quad_vari_process+0x310>
c000cbe4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbe8:	0f 8e ef 00 00 00    	jle    c000ccdd <sinc_quad_vari_process+0x4c0>
c000cbee:	83 ec 10             	sub    esp,0x10
c000cbf1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbfa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbfd:	e8 0a b7 01 00       	call   c002830c <__subdf3>
c000cc02:	83 c4 18             	add    esp,0x18
c000cc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc0d:	52                   	push   edx
c000cc0e:	50                   	push   eax
c000cc0f:	e8 8c c1 01 00       	call   c0028da0 <fabs>
c000cc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cc1c:	83 c4 10             	add    esp,0x10
c000cc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc31:	e8 b3 bf 01 00       	call   c0028be9 <__gtdf2>
c000cc36:	83 c4 10             	add    esp,0x10
c000cc39:	85 c0                	test   eax,eax
c000cc3b:	0f 8e 9c 00 00 00    	jle    c000ccdd <sinc_quad_vari_process+0x4c0>
c000cc41:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc44:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc4b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc4f:	52                   	push   edx
c000cc50:	50                   	push   eax
c000cc51:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc54:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc57:	e8 b0 b6 01 00       	call   c002830c <__subdf3>
c000cc5c:	59                   	pop    ecx
c000cc5d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc61:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc65:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc68:	e8 2e bd 01 00       	call   c002899b <__floatsidf>
c000cc6d:	83 c4 10             	add    esp,0x10
c000cc70:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc74:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc78:	52                   	push   edx
c000cc79:	50                   	push   eax
c000cc7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc82:	e8 b1 b6 01 00       	call   c0028338 <__muldf3>
c000cc87:	5f                   	pop    edi
c000cc88:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc8c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc90:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc93:	e8 03 bd 01 00       	call   c002899b <__floatsidf>
c000cc98:	83 c4 10             	add    esp,0x10
c000cc9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc9f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cca3:	52                   	push   edx
c000cca4:	50                   	push   eax
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccad:	e8 6a b9 01 00       	call   c002861c <__divdf3>
c000ccb2:	83 c4 10             	add    esp,0x10
c000ccb5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ccb9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cccd:	e8 e9 af 01 00       	call   c0027cbb <__adddf3>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccd9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccdd:	83 ec 0c             	sub    esp,0xc
c000cce0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cce3:	e8 b3 bc 01 00       	call   c002899b <__floatsidf>
c000cce8:	83 c4 10             	add    esp,0x10
c000cceb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd03:	e8 ff be 01 00       	call   c0028c07 <__ltdf2>
c000cd08:	83 c4 10             	add    esp,0x10
c000cd0b:	85 c0                	test   eax,eax
c000cd0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cd11:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd15:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cd19:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cd1d:	78 10                	js     c000cd2f <sinc_quad_vari_process+0x512>
c000cd1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd27:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd2b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3f:	e8 f4 b5 01 00       	call   c0028338 <__muldf3>
c000cd44:	59                   	pop    ecx
c000cd45:	5f                   	pop    edi
c000cd46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd56:	e8 98 eb ff ff       	call   c000b8f3 <double_to_fp>
c000cd5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd5f:	89 c7                	mov    edi,eax
c000cd61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd6d:	e8 c6 b5 01 00       	call   c0028338 <__muldf3>
c000cd72:	83 c4 18             	add    esp,0x18
c000cd75:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd7d:	52                   	push   edx
c000cd7e:	50                   	push   eax
c000cd7f:	e8 6f eb ff ff       	call   c000b8f3 <double_to_fp>
c000cd84:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd87:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd8b:	83 c4 0c             	add    esp,0xc
c000cd8e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd91:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd94:	50                   	push   eax
c000cd95:	50                   	push   eax
c000cd96:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd99:	e8 fd bb 01 00       	call   c002899b <__floatsidf>
c000cd9e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cda2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cda6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdaa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdb2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdb6:	e8 61 b8 01 00       	call   c002861c <__divdf3>
c000cdbb:	83 c4 18             	add    esp,0x18
c000cdbe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdc2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdc6:	52                   	push   edx
c000cdc7:	89 fa                	mov    edx,edi
c000cdc9:	50                   	push   eax
c000cdca:	89 d8                	mov    eax,ebx
c000cdcc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdd0:	e8 a5 d1 ff ff       	call   c0009f7a <calc_output_quad>
c000cdd5:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdd9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cddd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cde5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cde9:	e8 2e b8 01 00       	call   c002861c <__divdf3>
c000cdee:	83 c4 10             	add    esp,0x10
c000cdf1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdf5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce09:	e8 ad ae 01 00       	call   c0027cbb <__adddf3>
c000ce0e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ce12:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ce16:	83 c4 18             	add    esp,0x18
c000ce19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce21:	e8 9a bf 01 00       	call   c0028dc0 <lrint>
c000ce26:	83 ec 0c             	sub    esp,0xc
c000ce29:	50                   	push   eax
c000ce2a:	e8 6c bb 01 00       	call   c002899b <__floatsidf>
c000ce2f:	83 c4 10             	add    esp,0x10
c000ce32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce36:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce3a:	52                   	push   edx
c000ce3b:	50                   	push   eax
c000ce3c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce40:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce44:	e8 c3 b4 01 00       	call   c002830c <__subdf3>
c000ce49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce51:	83 c4 20             	add    esp,0x20
c000ce54:	6a 00                	push   0x0
c000ce56:	6a 00                	push   0x0
c000ce58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce60:	e8 a2 bd 01 00       	call   c0028c07 <__ltdf2>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	85 c0                	test   eax,eax
c000ce6a:	79 20                	jns    c000ce8c <sinc_quad_vari_process+0x66f>
c000ce6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7c:	e8 3a ae 01 00       	call   c0027cbb <__adddf3>
c000ce81:	83 c4 10             	add    esp,0x10
c000ce84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce8c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce8f:	83 ec 10             	sub    esp,0x10
c000ce92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce96:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cea5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cea9:	e8 5e b4 01 00       	call   c002830c <__subdf3>
c000ceae:	83 c4 18             	add    esp,0x18
c000ceb1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ceb5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ceb9:	52                   	push   edx
c000ceba:	50                   	push   eax
c000cebb:	e8 00 bf 01 00       	call   c0028dc0 <lrint>
c000cec0:	0f af f8             	imul   edi,eax
c000cec3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cec7:	83 c4 10             	add    esp,0x10
c000ceca:	01 f8                	add    eax,edi
c000cecc:	99                   	cdq    
c000cecd:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced3:	e9 fd fb ff ff       	jmp    c000cad5 <sinc_quad_vari_process+0x2b8>
c000ced8:	83 c4 4c             	add    esp,0x4c
c000cedb:	89 d0                	mov    eax,edx
c000cedd:	5b                   	pop    ebx
c000cede:	5e                   	pop    esi
c000cedf:	5f                   	pop    edi
c000cee0:	5d                   	pop    ebp
c000cee1:	c3                   	ret    

c000cee2 <sinc_stereo_vari_process>:
c000cee2:	55                   	push   ebp
c000cee3:	ba 05 00 00 00       	mov    edx,0x5
c000cee8:	57                   	push   edi
c000cee9:	56                   	push   esi
c000ceea:	53                   	push   ebx
c000ceeb:	83 ec 4c             	sub    esp,0x4c
c000ceee:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cef2:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cef6:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cef9:	85 db                	test   ebx,ebx
c000cefb:	0f 84 9c 06 00 00    	je     c000d59d <sinc_stereo_vari_process+0x6bb>
c000cf01:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cf04:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cf07:	0f af c7             	imul   eax,edi
c000cf0a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cf0d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cf10:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cf17:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cf1e:	0f af c7             	imul   eax,edi
c000cf21:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf24:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf27:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf32:	68 00 00 70 3f       	push   0x3f700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 c1 bc 01 00       	call   c0028c07 <__ltdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 88 47 06 00 00    	js     c000d59d <sinc_stereo_vari_process+0x6bb>
c000cf56:	68 00 00 70 40       	push   0x40700000
c000cf5b:	6a 00                	push   0x0
c000cf5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf65:	e8 7f bc 01 00       	call   c0028be9 <__gtdf2>
c000cf6a:	83 c4 10             	add    esp,0x10
c000cf6d:	ba 16 00 00 00       	mov    edx,0x16
c000cf72:	85 c0                	test   eax,eax
c000cf74:	0f 8f 23 06 00 00    	jg     c000d59d <sinc_stereo_vari_process+0x6bb>
c000cf7a:	83 ec 0c             	sub    esp,0xc
c000cf7d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf80:	e8 16 ba 01 00       	call   c002899b <__floatsidf>
c000cf85:	83 c4 10             	add    esp,0x10
c000cf88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf90:	68 00 00 00 40       	push   0x40000000
c000cf95:	6a 00                	push   0x0
c000cf97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9f:	e8 17 ad 01 00       	call   c0027cbb <__adddf3>
c000cfa4:	59                   	pop    ecx
c000cfa5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cfa9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cfad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cfb0:	e8 e6 b9 01 00       	call   c002899b <__floatsidf>
c000cfb5:	83 c4 10             	add    esp,0x10
c000cfb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfc0:	52                   	push   edx
c000cfc1:	50                   	push   eax
c000cfc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfca:	e8 4d b6 01 00       	call   c002861c <__divdf3>
c000cfcf:	83 c4 10             	add    esp,0x10
c000cfd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfd6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfda:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfdd:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfe0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cff8:	e8 ec bb 01 00       	call   c0028be9 <__gtdf2>
c000cffd:	83 c4 10             	add    esp,0x10
c000d000:	85 c0                	test   eax,eax
c000d002:	7e 2d                	jle    c000d031 <sinc_stereo_vari_process+0x14f>
c000d004:	68 00 00 f0 3f       	push   0x3ff00000
c000d009:	6a 00                	push   0x0
c000d00b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d00f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d013:	e8 ef bb 01 00       	call   c0028c07 <__ltdf2>
c000d018:	83 c4 10             	add    esp,0x10
c000d01b:	85 c0                	test   eax,eax
c000d01d:	79 4d                	jns    c000d06c <sinc_stereo_vari_process+0x18a>
c000d01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d023:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d027:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d02b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d02f:	eb 1b                	jmp    c000d04c <sinc_stereo_vari_process+0x16a>
c000d031:	68 00 00 f0 3f       	push   0x3ff00000
c000d036:	6a 00                	push   0x0
c000d038:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d03c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d040:	e8 c2 bb 01 00       	call   c0028c07 <__ltdf2>
c000d045:	83 c4 10             	add    esp,0x10
c000d048:	85 c0                	test   eax,eax
c000d04a:	79 20                	jns    c000d06c <sinc_stereo_vari_process+0x18a>
c000d04c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d050:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d054:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05c:	e8 bb b5 01 00       	call   c002861c <__divdf3>
c000d061:	83 c4 10             	add    esp,0x10
c000d064:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d068:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d06c:	50                   	push   eax
c000d06d:	50                   	push   eax
c000d06e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d072:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d076:	e8 45 bd 01 00       	call   c0028dc0 <lrint>
c000d07b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d07e:	40                   	inc    eax
c000d07f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d083:	0f af c7             	imul   eax,edi
c000d086:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d08a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d08d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d091:	58                   	pop    eax
c000d092:	5a                   	pop    edx
c000d093:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d097:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d09b:	e8 20 bd 01 00       	call   c0028dc0 <lrint>
c000d0a0:	83 ec 0c             	sub    esp,0xc
c000d0a3:	50                   	push   eax
c000d0a4:	e8 f2 b8 01 00       	call   c002899b <__floatsidf>
c000d0a9:	83 c4 10             	add    esp,0x10
c000d0ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d0b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d0b4:	52                   	push   edx
c000d0b5:	50                   	push   eax
c000d0b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0be:	e8 49 b2 01 00       	call   c002830c <__subdf3>
c000d0c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0cb:	83 c4 20             	add    esp,0x20
c000d0ce:	6a 00                	push   0x0
c000d0d0:	6a 00                	push   0x0
c000d0d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0da:	e8 28 bb 01 00       	call   c0028c07 <__ltdf2>
c000d0df:	83 c4 10             	add    esp,0x10
c000d0e2:	85 c0                	test   eax,eax
c000d0e4:	79 1f                	jns    c000d105 <sinc_stereo_vari_process+0x223>
c000d0e6:	68 00 00 f0 3f       	push   0x3ff00000
c000d0eb:	6a 00                	push   0x0
c000d0ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0f5:	e8 c1 ab 01 00       	call   c0027cbb <__adddf3>
c000d0fa:	83 c4 10             	add    esp,0x10
c000d0fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d101:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d105:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d108:	83 ec 10             	sub    esp,0x10
c000d10b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d10f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d11a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d122:	e8 e5 b1 01 00       	call   c002830c <__subdf3>
c000d127:	83 c4 18             	add    esp,0x18
c000d12a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d12e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d132:	52                   	push   edx
c000d133:	50                   	push   eax
c000d134:	e8 87 bc 01 00       	call   c0028dc0 <lrint>
c000d139:	0f af f8             	imul   edi,eax
c000d13c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d140:	01 f8                	add    eax,edi
c000d142:	99                   	cdq    
c000d143:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d146:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d149:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d14d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d151:	68 00 00 f0 3f       	push   0x3ff00000
c000d156:	6a 00                	push   0x0
c000d158:	e8 bf b4 01 00       	call   c002861c <__divdf3>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d164:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d168:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d16d:	68 23 42 92 0c       	push   0xc924223
c000d172:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d176:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d17a:	e8 3c ab 01 00       	call   c0027cbb <__adddf3>
c000d17f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d183:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d187:	83 c4 20             	add    esp,0x20
c000d18a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d192:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d19a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d19d:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d1a0:	7d 50                	jge    c000d1f2 <sinc_stereo_vari_process+0x310>
c000d1a2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1a5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1a8:	01 c8                	add    eax,ecx
c000d1aa:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1ad:	99                   	cdq    
c000d1ae:	f7 f9                	idiv   ecx
c000d1b0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1b4:	7d 0c                	jge    c000d1c2 <sinc_stereo_vari_process+0x2e0>
c000d1b6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d1b9:	85 ff                	test   edi,edi
c000d1bb:	79 6c                	jns    c000d229 <sinc_stereo_vari_process+0x347>
c000d1bd:	e9 e7 00 00 00       	jmp    c000d2a9 <sinc_stereo_vari_process+0x3c7>
c000d1c2:	50                   	push   eax
c000d1c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1c7:	56                   	push   esi
c000d1c8:	53                   	push   ebx
c000d1c9:	e8 4c e7 ff ff       	call   c000b91a <prepare_data>
c000d1ce:	83 c4 10             	add    esp,0x10
c000d1d1:	89 c2                	mov    edx,eax
c000d1d3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1d6:	85 c0                	test   eax,eax
c000d1d8:	0f 85 bf 03 00 00    	jne    c000d59d <sinc_stereo_vari_process+0x6bb>
c000d1de:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1e1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1e4:	01 c8                	add    eax,ecx
c000d1e6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1e9:	99                   	cdq    
c000d1ea:	f7 f9                	idiv   ecx
c000d1ec:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1f0:	7c c4                	jl     c000d1b6 <sinc_stereo_vari_process+0x2d4>
c000d1f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1fa:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1fd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d204:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d208:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d20b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d20e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d211:	99                   	cdq    
c000d212:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d215:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d218:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d21b:	99                   	cdq    
c000d21c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d21f:	31 d2                	xor    edx,edx
c000d221:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d224:	e9 74 03 00 00       	jmp    c000d59d <sinc_stereo_vari_process+0x6bb>
c000d229:	83 ec 0c             	sub    esp,0xc
c000d22c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d22f:	e8 67 b7 01 00       	call   c002899b <__floatsidf>
c000d234:	83 c4 10             	add    esp,0x10
c000d237:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d23b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d243:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24f:	e8 67 aa 01 00       	call   c0027cbb <__adddf3>
c000d254:	83 c4 10             	add    esp,0x10
c000d257:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d25b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d25f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26f:	e8 47 aa 01 00       	call   c0027cbb <__adddf3>
c000d274:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d277:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d27f:	e8 17 b7 01 00       	call   c002899b <__floatsidf>
c000d284:	83 c4 10             	add    esp,0x10
c000d287:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d28b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d28f:	52                   	push   edx
c000d290:	50                   	push   eax
c000d291:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d295:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d299:	e8 67 b9 01 00       	call   c0028c05 <__gedf2>
c000d29e:	83 c4 10             	add    esp,0x10
c000d2a1:	85 c0                	test   eax,eax
c000d2a3:	0f 89 49 ff ff ff    	jns    c000d1f2 <sinc_stereo_vari_process+0x310>
c000d2a9:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d2ad:	0f 8e ef 00 00 00    	jle    c000d3a2 <sinc_stereo_vari_process+0x4c0>
c000d2b3:	83 ec 10             	sub    esp,0x10
c000d2b6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2b9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2bc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2bf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d2c2:	e8 45 b0 01 00       	call   c002830c <__subdf3>
c000d2c7:	83 c4 18             	add    esp,0x18
c000d2ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2d2:	52                   	push   edx
c000d2d3:	50                   	push   eax
c000d2d4:	e8 c7 ba 01 00       	call   c0028da0 <fabs>
c000d2d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2e1:	83 c4 10             	add    esp,0x10
c000d2e4:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2e9:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2f6:	e8 ee b8 01 00       	call   c0028be9 <__gtdf2>
c000d2fb:	83 c4 10             	add    esp,0x10
c000d2fe:	85 c0                	test   eax,eax
c000d300:	0f 8e 9c 00 00 00    	jle    c000d3a2 <sinc_stereo_vari_process+0x4c0>
c000d306:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d309:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d30c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d310:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d314:	52                   	push   edx
c000d315:	50                   	push   eax
c000d316:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d319:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d31c:	e8 eb af 01 00       	call   c002830c <__subdf3>
c000d321:	59                   	pop    ecx
c000d322:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d326:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d32a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d32d:	e8 69 b6 01 00       	call   c002899b <__floatsidf>
c000d332:	83 c4 10             	add    esp,0x10
c000d335:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d339:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d33d:	52                   	push   edx
c000d33e:	50                   	push   eax
c000d33f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d343:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d347:	e8 ec af 01 00       	call   c0028338 <__muldf3>
c000d34c:	5f                   	pop    edi
c000d34d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d351:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d355:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d358:	e8 3e b6 01 00       	call   c002899b <__floatsidf>
c000d35d:	83 c4 10             	add    esp,0x10
c000d360:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d364:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d368:	52                   	push   edx
c000d369:	50                   	push   eax
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d372:	e8 a5 b2 01 00       	call   c002861c <__divdf3>
c000d377:	83 c4 10             	add    esp,0x10
c000d37a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d37e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d382:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d386:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d38a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d38e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d392:	e8 24 a9 01 00       	call   c0027cbb <__adddf3>
c000d397:	83 c4 10             	add    esp,0x10
c000d39a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d39e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d3a2:	83 ec 0c             	sub    esp,0xc
c000d3a5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d3a8:	e8 ee b5 01 00       	call   c002899b <__floatsidf>
c000d3ad:	83 c4 10             	add    esp,0x10
c000d3b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c8:	e8 3a b8 01 00       	call   c0028c07 <__ltdf2>
c000d3cd:	83 c4 10             	add    esp,0x10
c000d3d0:	85 c0                	test   eax,eax
c000d3d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3de:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3e2:	78 10                	js     c000d3f4 <sinc_stereo_vari_process+0x512>
c000d3e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3f0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d404:	e8 2f af 01 00       	call   c0028338 <__muldf3>
c000d409:	59                   	pop    ecx
c000d40a:	5f                   	pop    edi
c000d40b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d40f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d413:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d417:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d41b:	e8 d3 e4 ff ff       	call   c000b8f3 <double_to_fp>
c000d420:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d424:	89 c7                	mov    edi,eax
c000d426:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d42a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d42e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d432:	e8 01 af 01 00       	call   c0028338 <__muldf3>
c000d437:	83 c4 18             	add    esp,0x18
c000d43a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d43e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d442:	52                   	push   edx
c000d443:	50                   	push   eax
c000d444:	e8 aa e4 ff ff       	call   c000b8f3 <double_to_fp>
c000d449:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d44c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d450:	83 c4 0c             	add    esp,0xc
c000d453:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d456:	8d 04 90             	lea    eax,[eax+edx*4]
c000d459:	50                   	push   eax
c000d45a:	50                   	push   eax
c000d45b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d45e:	e8 38 b5 01 00       	call   c002899b <__floatsidf>
c000d463:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d467:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d46b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d473:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d477:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d47b:	e8 9c b1 01 00       	call   c002861c <__divdf3>
c000d480:	83 c4 18             	add    esp,0x18
c000d483:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d487:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d48b:	52                   	push   edx
c000d48c:	89 fa                	mov    edx,edi
c000d48e:	50                   	push   eax
c000d48f:	89 d8                	mov    eax,ebx
c000d491:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d495:	e8 02 c7 ff ff       	call   c0009b9c <calc_output_stereo>
c000d49a:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d49e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d4aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d4ae:	e8 69 b1 01 00       	call   c002861c <__divdf3>
c000d4b3:	83 c4 10             	add    esp,0x10
c000d4b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ce:	e8 e8 a7 01 00       	call   c0027cbb <__adddf3>
c000d4d3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4d7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4db:	83 c4 18             	add    esp,0x18
c000d4de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4e6:	e8 d5 b8 01 00       	call   c0028dc0 <lrint>
c000d4eb:	83 ec 0c             	sub    esp,0xc
c000d4ee:	50                   	push   eax
c000d4ef:	e8 a7 b4 01 00       	call   c002899b <__floatsidf>
c000d4f4:	83 c4 10             	add    esp,0x10
c000d4f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4ff:	52                   	push   edx
c000d500:	50                   	push   eax
c000d501:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d505:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d509:	e8 fe ad 01 00       	call   c002830c <__subdf3>
c000d50e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d512:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d516:	83 c4 20             	add    esp,0x20
c000d519:	6a 00                	push   0x0
c000d51b:	6a 00                	push   0x0
c000d51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d525:	e8 dd b6 01 00       	call   c0028c07 <__ltdf2>
c000d52a:	83 c4 10             	add    esp,0x10
c000d52d:	85 c0                	test   eax,eax
c000d52f:	79 20                	jns    c000d551 <sinc_stereo_vari_process+0x66f>
c000d531:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d535:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d539:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d53d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d541:	e8 75 a7 01 00       	call   c0027cbb <__adddf3>
c000d546:	83 c4 10             	add    esp,0x10
c000d549:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d54d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d551:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d554:	83 ec 10             	sub    esp,0x10
c000d557:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d55b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d566:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d56a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d56e:	e8 99 ad 01 00       	call   c002830c <__subdf3>
c000d573:	83 c4 18             	add    esp,0x18
c000d576:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d57a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d57e:	52                   	push   edx
c000d57f:	50                   	push   eax
c000d580:	e8 3b b8 01 00       	call   c0028dc0 <lrint>
c000d585:	0f af f8             	imul   edi,eax
c000d588:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d58c:	83 c4 10             	add    esp,0x10
c000d58f:	01 f8                	add    eax,edi
c000d591:	99                   	cdq    
c000d592:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d595:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d598:	e9 fd fb ff ff       	jmp    c000d19a <sinc_stereo_vari_process+0x2b8>
c000d59d:	83 c4 4c             	add    esp,0x4c
c000d5a0:	89 d0                	mov    eax,edx
c000d5a2:	5b                   	pop    ebx
c000d5a3:	5e                   	pop    esi
c000d5a4:	5f                   	pop    edi
c000d5a5:	5d                   	pop    ebp
c000d5a6:	c3                   	ret    

c000d5a7 <sinc_mono_vari_process>:
c000d5a7:	55                   	push   ebp
c000d5a8:	ba 05 00 00 00       	mov    edx,0x5
c000d5ad:	57                   	push   edi
c000d5ae:	56                   	push   esi
c000d5af:	53                   	push   ebx
c000d5b0:	83 ec 4c             	sub    esp,0x4c
c000d5b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5b7:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d5bb:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d5be:	85 db                	test   ebx,ebx
c000d5c0:	0f 84 c1 06 00 00    	je     c000dc87 <sinc_mono_vari_process+0x6e0>
c000d5c6:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5c9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5cc:	0f af c7             	imul   eax,edi
c000d5cf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5d2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5d5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5dc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5e3:	0f af c7             	imul   eax,edi
c000d5e6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5e9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5ed:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5fa:	68 00 00 70 3f       	push   0x3f700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 f9 b5 01 00       	call   c0028c07 <__ltdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 88 69 06 00 00    	js     c000dc87 <sinc_mono_vari_process+0x6e0>
c000d61e:	68 00 00 70 40       	push   0x40700000
c000d623:	6a 00                	push   0x0
c000d625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d629:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d62d:	e8 b7 b5 01 00       	call   c0028be9 <__gtdf2>
c000d632:	83 c4 10             	add    esp,0x10
c000d635:	ba 16 00 00 00       	mov    edx,0x16
c000d63a:	85 c0                	test   eax,eax
c000d63c:	0f 8f 45 06 00 00    	jg     c000dc87 <sinc_mono_vari_process+0x6e0>
c000d642:	83 ec 0c             	sub    esp,0xc
c000d645:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d648:	e8 4e b3 01 00       	call   c002899b <__floatsidf>
c000d64d:	83 c4 10             	add    esp,0x10
c000d650:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d654:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d658:	68 00 00 00 40       	push   0x40000000
c000d65d:	6a 00                	push   0x0
c000d65f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d667:	e8 4f a6 01 00       	call   c0027cbb <__adddf3>
c000d66c:	59                   	pop    ecx
c000d66d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d671:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d675:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d678:	e8 1e b3 01 00       	call   c002899b <__floatsidf>
c000d67d:	83 c4 10             	add    esp,0x10
c000d680:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d684:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d688:	52                   	push   edx
c000d689:	50                   	push   eax
c000d68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d68e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d692:	e8 85 af 01 00       	call   c002861c <__divdf3>
c000d697:	83 c4 10             	add    esp,0x10
c000d69a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d69e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6a2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d6a5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d6a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c0:	e8 24 b5 01 00       	call   c0028be9 <__gtdf2>
c000d6c5:	83 c4 10             	add    esp,0x10
c000d6c8:	85 c0                	test   eax,eax
c000d6ca:	7e 2d                	jle    c000d6f9 <sinc_mono_vari_process+0x152>
c000d6cc:	68 00 00 f0 3f       	push   0x3ff00000
c000d6d1:	6a 00                	push   0x0
c000d6d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6db:	e8 27 b5 01 00       	call   c0028c07 <__ltdf2>
c000d6e0:	83 c4 10             	add    esp,0x10
c000d6e3:	85 c0                	test   eax,eax
c000d6e5:	79 4d                	jns    c000d734 <sinc_mono_vari_process+0x18d>
c000d6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6f7:	eb 1b                	jmp    c000d714 <sinc_mono_vari_process+0x16d>
c000d6f9:	68 00 00 f0 3f       	push   0x3ff00000
c000d6fe:	6a 00                	push   0x0
c000d700:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d704:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d708:	e8 fa b4 01 00       	call   c0028c07 <__ltdf2>
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	85 c0                	test   eax,eax
c000d712:	79 20                	jns    c000d734 <sinc_mono_vari_process+0x18d>
c000d714:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d718:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d71c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d720:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d724:	e8 f3 ae 01 00       	call   c002861c <__divdf3>
c000d729:	83 c4 10             	add    esp,0x10
c000d72c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d730:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d734:	50                   	push   eax
c000d735:	50                   	push   eax
c000d736:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73e:	e8 7d b6 01 00       	call   c0028dc0 <lrint>
c000d743:	40                   	inc    eax
c000d744:	0f af c7             	imul   eax,edi
c000d747:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d74b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d74f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d752:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d755:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d759:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d75d:	58                   	pop    eax
c000d75e:	5a                   	pop    edx
c000d75f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d763:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d767:	e8 54 b6 01 00       	call   c0028dc0 <lrint>
c000d76c:	83 ec 0c             	sub    esp,0xc
c000d76f:	50                   	push   eax
c000d770:	e8 26 b2 01 00       	call   c002899b <__floatsidf>
c000d775:	83 c4 10             	add    esp,0x10
c000d778:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d77c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d780:	52                   	push   edx
c000d781:	50                   	push   eax
c000d782:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d786:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78a:	e8 7d ab 01 00       	call   c002830c <__subdf3>
c000d78f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d793:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d797:	83 c4 20             	add    esp,0x20
c000d79a:	6a 00                	push   0x0
c000d79c:	6a 00                	push   0x0
c000d79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a6:	e8 5c b4 01 00       	call   c0028c07 <__ltdf2>
c000d7ab:	83 c4 10             	add    esp,0x10
c000d7ae:	85 c0                	test   eax,eax
c000d7b0:	79 1f                	jns    c000d7d1 <sinc_mono_vari_process+0x22a>
c000d7b2:	68 00 00 f0 3f       	push   0x3ff00000
c000d7b7:	6a 00                	push   0x0
c000d7b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7c1:	e8 f5 a4 01 00       	call   c0027cbb <__adddf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7d1:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7d4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7d7:	83 ec 10             	sub    esp,0x10
c000d7da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 1d ab 01 00       	call   c002830c <__subdf3>
c000d7ef:	83 c4 18             	add    esp,0x18
c000d7f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7fa:	52                   	push   edx
c000d7fb:	50                   	push   eax
c000d7fc:	e8 bf b5 01 00       	call   c0028dc0 <lrint>
c000d801:	0f af f8             	imul   edi,eax
c000d804:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d807:	31 ff                	xor    edi,edi
c000d809:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d80e:	99                   	cdq    
c000d80f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d812:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d815:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d819:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d81d:	55                   	push   ebp
c000d81e:	57                   	push   edi
c000d81f:	e8 f8 ad 01 00       	call   c002861c <__divdf3>
c000d824:	83 c4 10             	add    esp,0x10
c000d827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d834:	68 23 42 92 0c       	push   0xc924223
c000d839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d841:	e8 75 a4 01 00       	call   c0027cbb <__adddf3>
c000d846:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d84a:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d84e:	83 c4 20             	add    esp,0x20
c000d851:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d855:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d859:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d85c:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d85f:	7d 54                	jge    c000d8b5 <sinc_mono_vari_process+0x30e>
c000d861:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d864:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d867:	01 c8                	add    eax,ecx
c000d869:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d86c:	99                   	cdq    
c000d86d:	f7 f9                	idiv   ecx
c000d86f:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d873:	7d 0c                	jge    c000d881 <sinc_mono_vari_process+0x2da>
c000d875:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d878:	85 ff                	test   edi,edi
c000d87a:	79 73                	jns    c000d8ef <sinc_mono_vari_process+0x348>
c000d87c:	e9 ee 00 00 00       	jmp    c000d96f <sinc_mono_vari_process+0x3c8>
c000d881:	50                   	push   eax
c000d882:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d886:	56                   	push   esi
c000d887:	53                   	push   ebx
c000d888:	e8 8d e0 ff ff       	call   c000b91a <prepare_data>
c000d88d:	89 c2                	mov    edx,eax
c000d88f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d893:	83 c4 10             	add    esp,0x10
c000d896:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d899:	85 d2                	test   edx,edx
c000d89b:	0f 85 e6 03 00 00    	jne    c000dc87 <sinc_mono_vari_process+0x6e0>
c000d8a1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d8a4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d8a7:	01 c8                	add    eax,ecx
c000d8a9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d8ac:	99                   	cdq    
c000d8ad:	f7 f9                	idiv   ecx
c000d8af:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d8b3:	7c c0                	jl     c000d875 <sinc_mono_vari_process+0x2ce>
c000d8b5:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8c1:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8c4:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8cf:	89 01                	mov    DWORD PTR [ecx],eax
c000d8d1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8d7:	99                   	cdq    
c000d8d8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8db:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8de:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8e1:	99                   	cdq    
c000d8e2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8e5:	31 d2                	xor    edx,edx
c000d8e7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8ea:	e9 98 03 00 00       	jmp    c000dc87 <sinc_mono_vari_process+0x6e0>
c000d8ef:	83 ec 0c             	sub    esp,0xc
c000d8f2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8f5:	e8 a1 b0 01 00       	call   c002899b <__floatsidf>
c000d8fa:	83 c4 10             	add    esp,0x10
c000d8fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d901:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d905:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d915:	e8 a1 a3 01 00       	call   c0027cbb <__adddf3>
c000d91a:	83 c4 10             	add    esp,0x10
c000d91d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d921:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d925:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d929:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d92d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d931:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d935:	e8 81 a3 01 00       	call   c0027cbb <__adddf3>
c000d93a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d93d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d941:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d945:	e8 51 b0 01 00       	call   c002899b <__floatsidf>
c000d94a:	83 c4 10             	add    esp,0x10
c000d94d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d951:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d955:	52                   	push   edx
c000d956:	50                   	push   eax
c000d957:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	e8 85 b2 01 00       	call   c0028be9 <__gtdf2>
c000d964:	83 c4 10             	add    esp,0x10
c000d967:	85 c0                	test   eax,eax
c000d969:	0f 8f 46 ff ff ff    	jg     c000d8b5 <sinc_mono_vari_process+0x30e>
c000d96f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d973:	0f 8e f5 00 00 00    	jle    c000da6e <sinc_mono_vari_process+0x4c7>
c000d979:	83 ec 10             	sub    esp,0x10
c000d97c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d97f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d982:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d986:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d989:	ff 30                	push   DWORD PTR [eax]
c000d98b:	e8 7c a9 01 00       	call   c002830c <__subdf3>
c000d990:	83 c4 18             	add    esp,0x18
c000d993:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d997:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d99b:	52                   	push   edx
c000d99c:	50                   	push   eax
c000d99d:	e8 fe b3 01 00       	call   c0028da0 <fabs>
c000d9a2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d9a6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d9aa:	83 c4 10             	add    esp,0x10
c000d9ad:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d9b2:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d9b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9bf:	e8 25 b2 01 00       	call   c0028be9 <__gtdf2>
c000d9c4:	83 c4 10             	add    esp,0x10
c000d9c7:	85 c0                	test   eax,eax
c000d9c9:	0f 8e 9f 00 00 00    	jle    c000da6e <sinc_mono_vari_process+0x4c7>
c000d9cf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9d3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9e0:	52                   	push   edx
c000d9e1:	50                   	push   eax
c000d9e2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9e5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9e8:	e8 1f a9 01 00       	call   c002830c <__subdf3>
c000d9ed:	5f                   	pop    edi
c000d9ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9f6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9f9:	e8 9d af 01 00       	call   c002899b <__floatsidf>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da09:	52                   	push   edx
c000da0a:	50                   	push   eax
c000da0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da13:	e8 20 a9 01 00       	call   c0028338 <__muldf3>
c000da18:	5d                   	pop    ebp
c000da19:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000da1d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000da21:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da24:	e8 72 af 01 00       	call   c002899b <__floatsidf>
c000da29:	83 c4 10             	add    esp,0x10
c000da2c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da30:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da34:	52                   	push   edx
c000da35:	50                   	push   eax
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3e:	e8 d9 ab 01 00       	call   c002861c <__divdf3>
c000da43:	83 c4 10             	add    esp,0x10
c000da46:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da4a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da56:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da5e:	e8 58 a2 01 00       	call   c0027cbb <__adddf3>
c000da63:	83 c4 10             	add    esp,0x10
c000da66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da6a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da6e:	83 ec 0c             	sub    esp,0xc
c000da71:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da74:	e8 22 af 01 00       	call   c002899b <__floatsidf>
c000da79:	83 c4 10             	add    esp,0x10
c000da7c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da80:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da94:	e8 6e b1 01 00       	call   c0028c07 <__ltdf2>
c000da99:	83 c4 10             	add    esp,0x10
c000da9c:	85 c0                	test   eax,eax
c000da9e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000daa2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000daa6:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000daaa:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000daae:	78 10                	js     c000dac0 <sinc_mono_vari_process+0x519>
c000dab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dab4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dab8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dabc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dac0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dac4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad0:	e8 63 a8 01 00       	call   c0028338 <__muldf3>
c000dad5:	59                   	pop    ecx
c000dad6:	5f                   	pop    edi
c000dad7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dadb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dadf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dae3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dae7:	e8 07 de ff ff       	call   c000b8f3 <double_to_fp>
c000daec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daf0:	89 c7                	mov    edi,eax
c000daf2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daf6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dafa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dafe:	e8 35 a8 01 00       	call   c0028338 <__muldf3>
c000db03:	83 c4 18             	add    esp,0x18
c000db06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db0a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db0e:	52                   	push   edx
c000db0f:	50                   	push   eax
c000db10:	e8 de dd ff ff       	call   c000b8f3 <double_to_fp>
c000db15:	83 ec 0c             	sub    esp,0xc
c000db18:	89 c5                	mov    ebp,eax
c000db1a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db1d:	e8 79 ae 01 00       	call   c002899b <__floatsidf>
c000db22:	83 c4 10             	add    esp,0x10
c000db25:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db29:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db2d:	52                   	push   edx
c000db2e:	50                   	push   eax
c000db2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db37:	e8 e0 aa 01 00       	call   c002861c <__divdf3>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	89 e9                	mov    ecx,ebp
c000db41:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db45:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db49:	89 d8                	mov    eax,ebx
c000db4b:	89 fa                	mov    edx,edi
c000db4d:	e8 ee bd ff ff       	call   c0009940 <calc_output_single>
c000db52:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db55:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db60:	52                   	push   edx
c000db61:	50                   	push   eax
c000db62:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db66:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db6a:	e8 c9 a7 01 00       	call   c0028338 <__muldf3>
c000db6f:	59                   	pop    ecx
c000db70:	59                   	pop    ecx
c000db71:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db75:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db79:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db7d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db81:	e8 85 b0 01 00       	call   c0028c0b <__truncdfsf2>
c000db86:	83 c4 10             	add    esp,0x10
c000db89:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db8c:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db8f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db93:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db9f:	e8 78 aa 01 00       	call   c002861c <__divdf3>
c000dba4:	83 c4 10             	add    esp,0x10
c000dba7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dbab:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dbaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbbb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbbf:	e8 f7 a0 01 00       	call   c0027cbb <__adddf3>
c000dbc4:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dbc8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dbcc:	83 c4 18             	add    esp,0x18
c000dbcf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbd3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbd7:	e8 e4 b1 01 00       	call   c0028dc0 <lrint>
c000dbdc:	83 ec 0c             	sub    esp,0xc
c000dbdf:	50                   	push   eax
c000dbe0:	e8 b6 ad 01 00       	call   c002899b <__floatsidf>
c000dbe5:	83 c4 10             	add    esp,0x10
c000dbe8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbf0:	52                   	push   edx
c000dbf1:	50                   	push   eax
c000dbf2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfa:	e8 0d a7 01 00       	call   c002830c <__subdf3>
c000dbff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc07:	83 c4 20             	add    esp,0x20
c000dc0a:	6a 00                	push   0x0
c000dc0c:	6a 00                	push   0x0
c000dc0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc16:	e8 ec af 01 00       	call   c0028c07 <__ltdf2>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	85 c0                	test   eax,eax
c000dc20:	79 20                	jns    c000dc42 <sinc_mono_vari_process+0x69b>
c000dc22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc32:	e8 84 a0 01 00       	call   c0027cbb <__adddf3>
c000dc37:	83 c4 10             	add    esp,0x10
c000dc3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc42:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc45:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc48:	83 ec 10             	sub    esp,0x10
c000dc4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc53:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc57:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc5b:	e8 ac a6 01 00       	call   c002830c <__subdf3>
c000dc60:	83 c4 18             	add    esp,0x18
c000dc63:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc67:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc6b:	52                   	push   edx
c000dc6c:	50                   	push   eax
c000dc6d:	e8 4e b1 01 00       	call   c0028dc0 <lrint>
c000dc72:	83 c4 10             	add    esp,0x10
c000dc75:	0f af f8             	imul   edi,eax
c000dc78:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc7b:	99                   	cdq    
c000dc7c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc7f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc82:	e9 d2 fb ff ff       	jmp    c000d859 <sinc_mono_vari_process+0x2b2>
c000dc87:	83 c4 4c             	add    esp,0x4c
c000dc8a:	89 d0                	mov    eax,edx
c000dc8c:	5b                   	pop    ebx
c000dc8d:	5e                   	pop    esi
c000dc8e:	5f                   	pop    edi
c000dc8f:	5d                   	pop    ebp
c000dc90:	c3                   	ret    

c000dc91 <sinc_get_name>:
c000dc91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc95:	31 c0                	xor    eax,eax
c000dc97:	83 fa 02             	cmp    edx,0x2
c000dc9a:	77 07                	ja     c000dca3 <sinc_get_name+0x12>
c000dc9c:	8b 04 95 a4 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd595c]
c000dca3:	c3                   	ret    

c000dca4 <sinc_get_description>:
c000dca4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dca8:	31 c0                	xor    eax,eax
c000dcaa:	83 fa 02             	cmp    edx,0x2
c000dcad:	77 07                	ja     c000dcb6 <sinc_get_description+0x12>
c000dcaf:	8b 04 95 98 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5968]
c000dcb6:	c3                   	ret    

c000dcb7 <sinc_set_converter>:
c000dcb7:	53                   	push   ebx
c000dcb8:	81 ec 58 08 00 00    	sub    esp,0x858
c000dcbe:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dcc5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dcc8:	85 c0                	test   eax,eax
c000dcca:	74 13                	je     c000dcdf <sinc_set_converter+0x28>
c000dccc:	83 ec 0c             	sub    esp,0xc
c000dccf:	50                   	push   eax
c000dcd0:	e8 c1 1b 00 00       	call   c000f896 <free>
c000dcd5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcdc:	83 c4 10             	add    esp,0x10
c000dcdf:	50                   	push   eax
c000dce0:	68 44 08 00 00       	push   0x844
c000dce5:	6a 00                	push   0x0
c000dce7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dceb:	50                   	push   eax
c000dcec:	e8 ab 2a ff ff       	call   c000079c <memset>
c000dcf1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcf4:	83 c4 10             	add    esp,0x10
c000dcf7:	b8 0b 00 00 00       	mov    eax,0xb
c000dcfc:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dd02:	7f 6e                	jg     c000dd72 <sinc_set_converter+0xbb>
c000dd04:	83 fa 01             	cmp    edx,0x1
c000dd07:	75 10                	jne    c000dd19 <sinc_set_converter+0x62>
c000dd09:	c7 43 24 a7 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d5a7
c000dd10:	c7 43 20 a7 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d5a7
c000dd17:	eb 4d                	jmp    c000dd66 <sinc_set_converter+0xaf>
c000dd19:	83 fa 02             	cmp    edx,0x2
c000dd1c:	75 10                	jne    c000dd2e <sinc_set_converter+0x77>
c000dd1e:	c7 43 24 e2 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cee2
c000dd25:	c7 43 20 e2 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cee2
c000dd2c:	eb 38                	jmp    c000dd66 <sinc_set_converter+0xaf>
c000dd2e:	83 fa 04             	cmp    edx,0x4
c000dd31:	75 10                	jne    c000dd43 <sinc_set_converter+0x8c>
c000dd33:	c7 43 24 1d c8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c81d
c000dd3a:	c7 43 20 1d c8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c81d
c000dd41:	eb 23                	jmp    c000dd66 <sinc_set_converter+0xaf>
c000dd43:	83 fa 06             	cmp    edx,0x6
c000dd46:	75 10                	jne    c000dd58 <sinc_set_converter+0xa1>
c000dd48:	c7 43 24 58 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c158
c000dd4f:	c7 43 20 58 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c158
c000dd56:	eb 0e                	jmp    c000dd66 <sinc_set_converter+0xaf>
c000dd58:	c7 43 24 94 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba94
c000dd5f:	c7 43 20 94 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba94
c000dd66:	c7 43 28 47 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad47
c000dd6d:	b8 0a 00 00 00       	mov    eax,0xa
c000dd72:	81 c4 58 08 00 00    	add    esp,0x858
c000dd78:	5b                   	pop    ebx
c000dd79:	c3                   	ret    

c000dd7a <zoh_vari_process>:
c000dd7a:	55                   	push   ebp
c000dd7b:	31 d2                	xor    edx,edx
c000dd7d:	57                   	push   edi
c000dd7e:	56                   	push   esi
c000dd7f:	53                   	push   ebx
c000dd80:	83 ec 3c             	sub    esp,0x3c
c000dd83:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd87:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd8b:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd8f:	0f 8e 80 06 00 00    	jle    c000e415 <zoh_vari_process+0x69b>
c000dd95:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd98:	ba 05 00 00 00       	mov    edx,0x5
c000dd9d:	85 db                	test   ebx,ebx
c000dd9f:	0f 84 70 06 00 00    	je     c000e415 <zoh_vari_process+0x69b>
c000dda5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dda8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000ddac:	74 19                	je     c000ddc7 <zoh_vari_process+0x4d>
c000ddae:	31 d2                	xor    edx,edx
c000ddb0:	39 c2                	cmp    edx,eax
c000ddb2:	7d 0c                	jge    c000ddc0 <zoh_vari_process+0x46>
c000ddb4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ddb6:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000ddb9:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000ddbd:	42                   	inc    edx
c000ddbe:	eb f0                	jmp    c000ddb0 <zoh_vari_process+0x36>
c000ddc0:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ddc7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ddca:	0f af d0             	imul   edx,eax
c000ddcd:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddd0:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddd4:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dddb:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddde:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dde5:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dde8:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddf2:	68 00 00 70 3f       	push   0x3f700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 01 ae 01 00       	call   c0028c07 <__ltdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 88 ff 05 00 00    	js     c000e415 <zoh_vari_process+0x69b>
c000de16:	68 00 00 70 40       	push   0x40700000
c000de1b:	6a 00                	push   0x0
c000de1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de25:	e8 bf ad 01 00       	call   c0028be9 <__gtdf2>
c000de2a:	83 c4 10             	add    esp,0x10
c000de2d:	ba 16 00 00 00       	mov    edx,0x16
c000de32:	85 c0                	test   eax,eax
c000de34:	0f 8f db 05 00 00    	jg     c000e415 <zoh_vari_process+0x69b>
c000de3a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de3d:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de44:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de48:	68 00 00 f0 3f       	push   0x3ff00000
c000de4d:	6a 00                	push   0x0
c000de4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de57:	e8 ab ad 01 00       	call   c0028c07 <__ltdf2>
c000de5c:	83 c4 10             	add    esp,0x10
c000de5f:	85 c0                	test   eax,eax
c000de61:	0f 89 da 01 00 00    	jns    c000e041 <zoh_vari_process+0x2c7>
c000de67:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de6a:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de6d:	0f 8d ce 01 00 00    	jge    c000e041 <zoh_vari_process+0x2c7>
c000de73:	83 ec 0c             	sub    esp,0xc
c000de76:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de79:	e8 1d ab 01 00       	call   c002899b <__floatsidf>
c000de7e:	83 c4 10             	add    esp,0x10
c000de81:	89 04 24             	mov    DWORD PTR [esp],eax
c000de84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de98:	e8 9b a4 01 00       	call   c0028338 <__muldf3>
c000de9d:	59                   	pop    ecx
c000de9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dea6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dea9:	e8 ed aa 01 00       	call   c002899b <__floatsidf>
c000deae:	83 c4 10             	add    esp,0x10
c000deb1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000deb5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000deb9:	52                   	push   edx
c000deba:	50                   	push   eax
c000debb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000debf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec3:	e8 f3 9d 01 00       	call   c0027cbb <__adddf3>
c000dec8:	59                   	pop    ecx
c000dec9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000decd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ded1:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000ded4:	e8 c2 aa 01 00       	call   c002899b <__floatsidf>
c000ded9:	83 c4 10             	add    esp,0x10
c000dedc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dee0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dee4:	52                   	push   edx
c000dee5:	50                   	push   eax
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deee:	e8 12 ad 01 00       	call   c0028c05 <__gedf2>
c000def3:	83 c4 10             	add    esp,0x10
c000def6:	85 c0                	test   eax,eax
c000def8:	0f 89 43 01 00 00    	jns    c000e041 <zoh_vari_process+0x2c7>
c000defe:	85 ed                	test   ebp,ebp
c000df00:	0f 8e ec 00 00 00    	jle    c000dff2 <zoh_vari_process+0x278>
c000df06:	83 ec 10             	sub    esp,0x10
c000df09:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0f:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df12:	ff 37                	push   DWORD PTR [edi]
c000df14:	e8 f3 a3 01 00       	call   c002830c <__subdf3>
c000df19:	83 c4 18             	add    esp,0x18
c000df1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df24:	52                   	push   edx
c000df25:	50                   	push   eax
c000df26:	e8 75 ae 01 00       	call   c0028da0 <fabs>
c000df2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df2f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df3b:	68 23 42 92 0c       	push   0xc924223
c000df40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df48:	e8 9c ac 01 00       	call   c0028be9 <__gtdf2>
c000df4d:	83 c4 10             	add    esp,0x10
c000df50:	85 c0                	test   eax,eax
c000df52:	0f 8e 9a 00 00 00    	jle    c000dff2 <zoh_vari_process+0x278>
c000df58:	8b 07                	mov    eax,DWORD PTR [edi]
c000df5a:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000df60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df64:	52                   	push   edx
c000df65:	50                   	push   eax
c000df66:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df69:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df6c:	e8 9b a3 01 00       	call   c002830c <__subdf3>
c000df71:	59                   	pop    ecx
c000df72:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df76:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df7d:	e8 19 aa 01 00       	call   c002899b <__floatsidf>
c000df82:	83 c4 10             	add    esp,0x10
c000df85:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df89:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df8d:	52                   	push   edx
c000df8e:	50                   	push   eax
c000df8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df97:	e8 9c a3 01 00       	call   c0028338 <__muldf3>
c000df9c:	5d                   	pop    ebp
c000df9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfa1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dfa5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfa8:	e8 ee a9 01 00       	call   c002899b <__floatsidf>
c000dfad:	83 c4 10             	add    esp,0x10
c000dfb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfb4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb8:	52                   	push   edx
c000dfb9:	50                   	push   eax
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc2:	e8 55 a6 01 00       	call   c002861c <__divdf3>
c000dfc7:	83 c4 10             	add    esp,0x10
c000dfca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfd6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfe2:	e8 d4 9c 01 00       	call   c0027cbb <__adddf3>
c000dfe7:	83 c4 10             	add    esp,0x10
c000dfea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dff2:	31 c0                	xor    eax,eax
c000dff4:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dff7:	7e 13                	jle    c000e00c <zoh_vari_process+0x292>
c000dff9:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dffd:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e000:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000e003:	40                   	inc    eax
c000e004:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000e007:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e00a:	eb e8                	jmp    c000dff4 <zoh_vari_process+0x27a>
c000e00c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e010:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e014:	68 00 00 f0 3f       	push   0x3ff00000
c000e019:	6a 00                	push   0x0
c000e01b:	e8 fc a5 01 00       	call   c002861c <__divdf3>
c000e020:	83 c4 10             	add    esp,0x10
c000e023:	89 04 24             	mov    DWORD PTR [esp],eax
c000e026:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e02a:	52                   	push   edx
c000e02b:	50                   	push   eax
c000e02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e034:	e8 82 9c 01 00       	call   c0027cbb <__adddf3>
c000e039:	83 c4 10             	add    esp,0x10
c000e03c:	e9 ff fd ff ff       	jmp    c000de40 <zoh_vari_process+0xc6>
c000e041:	55                   	push   ebp
c000e042:	55                   	push   ebp
c000e043:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e047:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e04b:	e8 70 ad 01 00       	call   c0028dc0 <lrint>
c000e050:	83 ec 0c             	sub    esp,0xc
c000e053:	50                   	push   eax
c000e054:	e8 42 a9 01 00       	call   c002899b <__floatsidf>
c000e059:	83 c4 10             	add    esp,0x10
c000e05c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e060:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e064:	52                   	push   edx
c000e065:	50                   	push   eax
c000e066:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06e:	e8 99 a2 01 00       	call   c002830c <__subdf3>
c000e073:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e077:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e07b:	83 c4 20             	add    esp,0x20
c000e07e:	6a 00                	push   0x0
c000e080:	6a 00                	push   0x0
c000e082:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e086:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e08a:	e8 78 ab 01 00       	call   c0028c07 <__ltdf2>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	85 c0                	test   eax,eax
c000e094:	79 1e                	jns    c000e0b4 <zoh_vari_process+0x33a>
c000e096:	68 00 00 f0 3f       	push   0x3ff00000
c000e09b:	6a 00                	push   0x0
c000e09d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0a5:	e8 11 9c 01 00       	call   c0027cbb <__adddf3>
c000e0aa:	83 c4 10             	add    esp,0x10
c000e0ad:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0b0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0b4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0b7:	83 ec 10             	sub    esp,0x10
c000e0ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ca:	e8 3d a2 01 00       	call   c002830c <__subdf3>
c000e0cf:	83 c4 18             	add    esp,0x18
c000e0d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0da:	52                   	push   edx
c000e0db:	50                   	push   eax
c000e0dc:	e8 df ac 01 00       	call   c0028dc0 <lrint>
c000e0e1:	83 c4 10             	add    esp,0x10
c000e0e4:	0f af e8             	imul   ebp,eax
c000e0e7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0ea:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0ed:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0f1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0f4:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0fb:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0fe:	0f 8d 7a 02 00 00    	jge    c000e37e <zoh_vari_process+0x604>
c000e104:	83 ec 0c             	sub    esp,0xc
c000e107:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e10a:	e8 8c a8 01 00       	call   c002899b <__floatsidf>
c000e10f:	83 c4 10             	add    esp,0x10
c000e112:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e116:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e11a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e11e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e122:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e126:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12a:	e8 09 a2 01 00       	call   c0028338 <__muldf3>
c000e12f:	59                   	pop    ecx
c000e130:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e134:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e13c:	e8 5a a8 01 00       	call   c002899b <__floatsidf>
c000e141:	83 c4 10             	add    esp,0x10
c000e144:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e148:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e14c:	52                   	push   edx
c000e14d:	50                   	push   eax
c000e14e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e152:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e156:	e8 60 9b 01 00       	call   c0027cbb <__adddf3>
c000e15b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e15e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e162:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e166:	e8 30 a8 01 00       	call   c002899b <__floatsidf>
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e172:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e176:	52                   	push   edx
c000e177:	50                   	push   eax
c000e178:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e17c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e180:	e8 84 aa 01 00       	call   c0028c09 <__ledf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e18e:	0f 8f ea 01 00 00    	jg     c000e37e <zoh_vari_process+0x604>
c000e194:	85 c9                	test   ecx,ecx
c000e196:	0f 8e ed 00 00 00    	jle    c000e289 <zoh_vari_process+0x50f>
c000e19c:	83 ec 10             	sub    esp,0x10
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e1a8:	ff 37                	push   DWORD PTR [edi]
c000e1aa:	e8 5d a1 01 00       	call   c002830c <__subdf3>
c000e1af:	83 c4 18             	add    esp,0x18
c000e1b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1ba:	52                   	push   edx
c000e1bb:	50                   	push   eax
c000e1bc:	e8 df ab 01 00       	call   c0028da0 <fabs>
c000e1c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1c5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1c9:	83 c4 10             	add    esp,0x10
c000e1cc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1d1:	68 23 42 92 0c       	push   0xc924223
c000e1d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1de:	e8 06 aa 01 00       	call   c0028be9 <__gtdf2>
c000e1e3:	83 c4 10             	add    esp,0x10
c000e1e6:	85 c0                	test   eax,eax
c000e1e8:	0f 8e 9b 00 00 00    	jle    c000e289 <zoh_vari_process+0x50f>
c000e1ee:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1f0:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1fb:	52                   	push   edx
c000e1fc:	50                   	push   eax
c000e1fd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e200:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e203:	e8 04 a1 01 00       	call   c002830c <__subdf3>
c000e208:	5d                   	pop    ebp
c000e209:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e20d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e211:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e214:	e8 82 a7 01 00       	call   c002899b <__floatsidf>
c000e219:	83 c4 10             	add    esp,0x10
c000e21c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e220:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e224:	52                   	push   edx
c000e225:	50                   	push   eax
c000e226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e22a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e22e:	e8 05 a1 01 00       	call   c0028338 <__muldf3>
c000e233:	59                   	pop    ecx
c000e234:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e238:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e23c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e23f:	e8 57 a7 01 00       	call   c002899b <__floatsidf>
c000e244:	83 c4 10             	add    esp,0x10
c000e247:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e24b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e24f:	52                   	push   edx
c000e250:	50                   	push   eax
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e259:	e8 be a3 01 00       	call   c002861c <__divdf3>
c000e25e:	83 c4 10             	add    esp,0x10
c000e261:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e265:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e269:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e26d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e279:	e8 3d 9a 01 00       	call   c0027cbb <__adddf3>
c000e27e:	83 c4 10             	add    esp,0x10
c000e281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e289:	31 d2                	xor    edx,edx
c000e28b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e28e:	39 d0                	cmp    eax,edx
c000e290:	7e 1d                	jle    c000e2af <zoh_vari_process+0x535>
c000e292:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e295:	29 c1                	sub    ecx,eax
c000e297:	89 c8                	mov    eax,ecx
c000e299:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e29b:	01 d0                	add    eax,edx
c000e29d:	42                   	inc    edx
c000e29e:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e2a1:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e2a4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e2a7:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e2aa:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e2ad:	eb dc                	jmp    c000e28b <zoh_vari_process+0x511>
c000e2af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2b7:	68 00 00 f0 3f       	push   0x3ff00000
c000e2bc:	6a 00                	push   0x0
c000e2be:	e8 59 a3 01 00       	call   c002861c <__divdf3>
c000e2c3:	83 c4 10             	add    esp,0x10
c000e2c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ce:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2d2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2de:	e8 d8 99 01 00       	call   c0027cbb <__adddf3>
c000e2e3:	5d                   	pop    ebp
c000e2e4:	59                   	pop    ecx
c000e2e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2f5:	e8 c6 aa 01 00       	call   c0028dc0 <lrint>
c000e2fa:	83 ec 0c             	sub    esp,0xc
c000e2fd:	50                   	push   eax
c000e2fe:	e8 98 a6 01 00       	call   c002899b <__floatsidf>
c000e303:	83 c4 10             	add    esp,0x10
c000e306:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e30a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e30e:	52                   	push   edx
c000e30f:	50                   	push   eax
c000e310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e314:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e318:	e8 ef 9f 01 00       	call   c002830c <__subdf3>
c000e31d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e321:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e325:	83 c4 20             	add    esp,0x20
c000e328:	6a 00                	push   0x0
c000e32a:	6a 00                	push   0x0
c000e32c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e330:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e334:	e8 ce a8 01 00       	call   c0028c07 <__ltdf2>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	85 c0                	test   eax,eax
c000e33e:	79 1e                	jns    c000e35e <zoh_vari_process+0x5e4>
c000e340:	68 00 00 f0 3f       	push   0x3ff00000
c000e345:	6a 00                	push   0x0
c000e347:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34f:	e8 67 99 01 00       	call   c0027cbb <__adddf3>
c000e354:	83 c4 10             	add    esp,0x10
c000e357:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e35e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e361:	83 ec 10             	sub    esp,0x10
c000e364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e368:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e374:	e8 93 9f 01 00       	call   c002830c <__subdf3>
c000e379:	e9 51 fd ff ff       	jmp    c000e0cf <zoh_vari_process+0x355>
c000e37e:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e382:	7d 3a                	jge    c000e3be <zoh_vari_process+0x644>
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	83 ec 0c             	sub    esp,0xc
c000e38b:	29 e8                	sub    eax,ebp
c000e38d:	99                   	cdq    
c000e38e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e391:	50                   	push   eax
c000e392:	e8 04 a6 01 00       	call   c002899b <__floatsidf>
c000e397:	83 c4 10             	add    esp,0x10
c000e39a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e39e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e3a2:	52                   	push   edx
c000e3a3:	50                   	push   eax
c000e3a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e3a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e3ac:	e8 0a 99 01 00       	call   c0027cbb <__adddf3>
c000e3b1:	83 c4 10             	add    esp,0x10
c000e3b4:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e3b7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e3be:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e3c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3c5:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3c8:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3cb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3ce:	85 c0                	test   eax,eax
c000e3d0:	7f 25                	jg     c000e3f7 <zoh_vari_process+0x67d>
c000e3d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3da:	89 07                	mov    DWORD PTR [edi],eax
c000e3dc:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3df:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3e2:	99                   	cdq    
c000e3e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3e6:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3e9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3ec:	99                   	cdq    
c000e3ed:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3f0:	31 d2                	xor    edx,edx
c000e3f2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3f5:	eb 1e                	jmp    c000e415 <zoh_vari_process+0x69b>
c000e3f7:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3fa:	31 d2                	xor    edx,edx
c000e3fc:	29 c8                	sub    eax,ecx
c000e3fe:	c1 e0 02             	shl    eax,0x2
c000e401:	39 d1                	cmp    ecx,edx
c000e403:	7e cd                	jle    c000e3d2 <zoh_vari_process+0x658>
c000e405:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e407:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e40b:	83 c0 04             	add    eax,0x4
c000e40e:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e412:	42                   	inc    edx
c000e413:	eb ec                	jmp    c000e401 <zoh_vari_process+0x687>
c000e415:	83 c4 3c             	add    esp,0x3c
c000e418:	89 d0                	mov    eax,edx
c000e41a:	5b                   	pop    ebx
c000e41b:	5e                   	pop    esi
c000e41c:	5f                   	pop    edi
c000e41d:	5d                   	pop    ebp
c000e41e:	c3                   	ret    

c000e41f <zoh_reset>:
c000e41f:	83 ec 0c             	sub    esp,0xc
c000e422:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e426:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e429:	85 c0                	test   eax,eax
c000e42b:	74 20                	je     c000e44d <zoh_reset+0x2e>
c000e42d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e430:	83 c0 1c             	add    eax,0x1c
c000e433:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e436:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e43d:	c1 e2 02             	shl    edx,0x2
c000e440:	51                   	push   ecx
c000e441:	52                   	push   edx
c000e442:	6a 00                	push   0x0
c000e444:	50                   	push   eax
c000e445:	e8 52 23 ff ff       	call   c000079c <memset>
c000e44a:	83 c4 10             	add    esp,0x10
c000e44d:	83 c4 0c             	add    esp,0xc
c000e450:	c3                   	ret    

c000e451 <zoh_get_name>:
c000e451:	31 c0                	xor    eax,eax
c000e453:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e458:	75 05                	jne    c000e45f <zoh_get_name+0xe>
c000e45a:	b8 be a7 02 c0       	mov    eax,0xc002a7be
c000e45f:	c3                   	ret    

c000e460 <zoh_get_description>:
c000e460:	31 c0                	xor    eax,eax
c000e462:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e467:	75 05                	jne    c000e46e <zoh_get_description+0xe>
c000e469:	b8 cf a7 02 c0       	mov    eax,0xc002a7cf
c000e46e:	c3                   	ret    

c000e46f <zoh_set_converter>:
c000e46f:	53                   	push   ebx
c000e470:	b8 0a 00 00 00       	mov    eax,0xa
c000e475:	83 ec 08             	sub    esp,0x8
c000e478:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e47c:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e481:	75 6e                	jne    c000e4f1 <zoh_set_converter+0x82>
c000e483:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e486:	85 c0                	test   eax,eax
c000e488:	74 13                	je     c000e49d <zoh_set_converter+0x2e>
c000e48a:	83 ec 0c             	sub    esp,0xc
c000e48d:	50                   	push   eax
c000e48e:	e8 03 14 00 00       	call   c000f896 <free>
c000e493:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e49a:	83 c4 10             	add    esp,0x10
c000e49d:	50                   	push   eax
c000e49e:	50                   	push   eax
c000e49f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a2:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e4a9:	50                   	push   eax
c000e4aa:	6a 01                	push   0x1
c000e4ac:	e8 05 14 00 00       	call   c000f8b6 <calloc>
c000e4b1:	83 c4 10             	add    esp,0x10
c000e4b4:	89 c2                	mov    edx,eax
c000e4b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e4b9:	85 d2                	test   edx,edx
c000e4bb:	b8 01 00 00 00       	mov    eax,0x1
c000e4c0:	74 2f                	je     c000e4f1 <zoh_set_converter+0x82>
c000e4c2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4c5:	83 ec 0c             	sub    esp,0xc
c000e4c8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4cb:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4d1:	c7 43 24 7a dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd7a
c000e4d8:	c7 43 20 7a dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd7a
c000e4df:	c7 43 28 1f e4 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e41f
c000e4e6:	53                   	push   ebx
c000e4e7:	e8 33 ff ff ff       	call   c000e41f <zoh_reset>
c000e4ec:	83 c4 10             	add    esp,0x10
c000e4ef:	31 c0                	xor    eax,eax
c000e4f1:	83 c4 08             	add    esp,0x8
c000e4f4:	5b                   	pop    ebx
c000e4f5:	c3                   	ret    

c000e4f6 <CPU::current()>:
c000e4f6:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c000e4fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e501:	90                   	nop
c000e502:	c3                   	ret    

c000e503 <operator new(unsigned long)>:
c000e503:	83 ec 0c             	sub    esp,0xc
c000e506:	83 ec 0c             	sub    esp,0xc
c000e509:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e50d:	e8 74 13 00 00       	call   c000f886 <malloc>
c000e512:	83 c4 10             	add    esp,0x10
c000e515:	83 c4 0c             	add    esp,0xc
c000e518:	c3                   	ret    

c000e519 <operator delete(void*)>:
c000e519:	83 ec 0c             	sub    esp,0xc
c000e51c:	83 ec 0c             	sub    esp,0xc
c000e51f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e523:	e8 7e 13 00 00       	call   c000f8a6 <rfree>
c000e528:	83 c4 10             	add    esp,0x10
c000e52b:	90                   	nop
c000e52c:	83 c4 0c             	add    esp,0xc
c000e52f:	c3                   	ret    

c000e530 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e530:	83 ec 0c             	sub    esp,0xc
c000e533:	83 ec 08             	sub    esp,0x8
c000e536:	68 06 a8 02 c0       	push   0xc002a806
c000e53b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e53f:	e8 a0 23 ff ff       	call   c00008e4 <strcmp>
c000e544:	83 c4 10             	add    esp,0x10
c000e547:	85 c0                	test   eax,eax
c000e549:	0f 94 c0             	sete   al
c000e54c:	84 c0                	test   al,al
c000e54e:	74 0a                	je     c000e55a <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e550:	b8 c8 ed 02 c0       	mov    eax,0xc002edc8
c000e555:	e9 e3 00 00 00       	jmp    c000e63d <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e55a:	83 ec 08             	sub    esp,0x8
c000e55d:	68 0f a8 02 c0       	push   0xc002a80f
c000e562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e566:	e8 79 23 ff ff       	call   c00008e4 <strcmp>
c000e56b:	83 c4 10             	add    esp,0x10
c000e56e:	85 c0                	test   eax,eax
c000e570:	0f 94 c0             	sete   al
c000e573:	84 c0                	test   al,al
c000e575:	74 0a                	je     c000e581 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e577:	b8 34 71 02 c0       	mov    eax,0xc0027134
c000e57c:	e9 bc 00 00 00       	jmp    c000e63d <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e581:	83 ec 08             	sub    esp,0x8
c000e584:	68 19 a8 02 c0       	push   0xc002a819
c000e589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e58d:	e8 52 23 ff ff       	call   c00008e4 <strcmp>
c000e592:	83 c4 10             	add    esp,0x10
c000e595:	85 c0                	test   eax,eax
c000e597:	0f 94 c0             	sete   al
c000e59a:	84 c0                	test   al,al
c000e59c:	74 0a                	je     c000e5a8 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e59e:	b8 68 6e 02 c0       	mov    eax,0xc0026e68
c000e5a3:	e9 95 00 00 00       	jmp    c000e63d <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5a8:	83 ec 08             	sub    esp,0x8
c000e5ab:	68 22 a8 02 c0       	push   0xc002a822
c000e5b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5b4:	e8 2b 23 ff ff       	call   c00008e4 <strcmp>
c000e5b9:	83 c4 10             	add    esp,0x10
c000e5bc:	85 c0                	test   eax,eax
c000e5be:	0f 94 c0             	sete   al
c000e5c1:	84 c0                	test   al,al
c000e5c3:	74 07                	je     c000e5cc <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5c5:	b8 34 72 02 c0       	mov    eax,0xc0027234
c000e5ca:	eb 71                	jmp    c000e63d <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5cc:	83 ec 08             	sub    esp,0x8
c000e5cf:	68 2c a8 02 c0       	push   0xc002a82c
c000e5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5d8:	e8 07 23 ff ff       	call   c00008e4 <strcmp>
c000e5dd:	83 c4 10             	add    esp,0x10
c000e5e0:	85 c0                	test   eax,eax
c000e5e2:	0f 94 c0             	sete   al
c000e5e5:	84 c0                	test   al,al
c000e5e7:	74 07                	je     c000e5f0 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5e9:	b8 b4 6f 02 c0       	mov    eax,0xc0026fb4
c000e5ee:	eb 4d                	jmp    c000e63d <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5f0:	83 ec 08             	sub    esp,0x8
c000e5f3:	68 35 a8 02 c0       	push   0xc002a835
c000e5f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5fc:	e8 e3 22 ff ff       	call   c00008e4 <strcmp>
c000e601:	83 c4 10             	add    esp,0x10
c000e604:	85 c0                	test   eax,eax
c000e606:	0f 94 c0             	sete   al
c000e609:	84 c0                	test   al,al
c000e60b:	74 07                	je     c000e614 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e60d:	b8 cc ed 02 c0       	mov    eax,0xc002edcc
c000e612:	eb 29                	jmp    c000e63d <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e614:	83 ec 08             	sub    esp,0x8
c000e617:	68 42 a8 02 c0       	push   0xc002a842
c000e61c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e620:	e8 bf 22 ff ff       	call   c00008e4 <strcmp>
c000e625:	83 c4 10             	add    esp,0x10
c000e628:	85 c0                	test   eax,eax
c000e62a:	0f 94 c0             	sete   al
c000e62d:	84 c0                	test   al,al
c000e62f:	74 07                	je     c000e638 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e631:	b8 cd ed 02 c0       	mov    eax,0xc002edcd
c000e636:	eb 05                	jmp    c000e63d <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e638:	b8 00 00 00 00       	mov    eax,0x0
c000e63d:	83 c4 0c             	add    esp,0xc
c000e640:	c3                   	ret    
c000e641:	90                   	nop

c000e642 <Computer::close(int, int, void*)>:
c000e642:	57                   	push   edi
c000e643:	56                   	push   esi
c000e644:	53                   	push   ebx
c000e645:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e649:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e64d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e651:	83 ec 0c             	sub    esp,0xc
c000e654:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e65a:	e8 91 5d 00 00       	call   c00143f0 <Device::closeAll()>
c000e65f:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e665:	83 c4 10             	add    esp,0x10
c000e668:	8b 10                	mov    edx,DWORD PTR [eax]
c000e66a:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e66e:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e676:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e67a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e67e:	5b                   	pop    ebx
c000e67f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e682:	5e                   	pop    esi
c000e683:	5f                   	pop    edi
c000e684:	ff e0                	jmp    eax

c000e686 <Krnl::firstTask()>:
c000e686:	53                   	push   ebx
c000e687:	83 ec 14             	sub    esp,0x14
c000e68a:	fb                   	sti    
c000e68b:	68 3f 07 00 00       	push   0x73f
c000e690:	e8 f1 11 00 00       	call   c000f886 <malloc>
c000e695:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e69c:	89 c3                	mov    ebx,eax
c000e69e:	ff 35 30 23 03 c0    	push   DWORD PTR ds:0xc0032330
c000e6a4:	68 4f a8 02 c0       	push   0xc002a84f
c000e6a9:	6a 01                	push   0x1
c000e6ab:	50                   	push   eax
c000e6ac:	e8 19 f9 00 00       	call   c001dfca <Process::Process(bool, char const*, Process*, char**)>
c000e6b1:	83 c4 20             	add    esp,0x20
c000e6b4:	68 ff 00 00 00       	push   0xff
c000e6b9:	6a 00                	push   0x0
c000e6bb:	68 11 f2 00 c0       	push   0xc000f211
c000e6c0:	53                   	push   ebx
c000e6c1:	e8 fc fa 00 00       	call   c001e1c2 <Process::createThread(void (*)(void*), void*, int)>
c000e6c6:	6a 7a                	push   0x7a
c000e6c8:	6a 00                	push   0x0
c000e6ca:	68 40 ec 01 c0       	push   0xc001ec40
c000e6cf:	ff 35 30 23 03 c0    	push   DWORD PTR ds:0xc0032330
c000e6d5:	e8 e8 fa 00 00       	call   c001e1c2 <Process::createThread(void (*)(void*), void*, int)>
c000e6da:	83 c4 20             	add    esp,0x20
c000e6dd:	a3 e8 22 03 c0       	mov    ds:0xc00322e8,eax
c000e6e2:	c6 05 cd ed 02 c0 01 	mov    BYTE PTR ds:0xc002edcd,0x1
c000e6e9:	e8 a6 09 01 00       	call   c001f094 <Vm::initialise8086()>
c000e6ee:	e8 dd 4a 00 00       	call   c00131d0 <Fs::initVFS()>
c000e6f3:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c000e6f8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6fe:	8b 10                	mov    edx,DWORD PTR [eax]
c000e700:	6a 00                	push   0x0
c000e702:	6a 00                	push   0x0
c000e704:	6a 00                	push   0x0
c000e706:	50                   	push   eax
c000e707:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e70a:	e8 3f e1 00 00       	call   c001c84e <Sys::loadSyscalls()>
c000e70f:	e8 b8 bf 00 00       	call   c001a6cc <Krnl::loadSystemEnv()>
c000e714:	83 c4 0c             	add    esp,0xc
c000e717:	6a 3a                	push   0x3a
c000e719:	68 5c a8 02 c0       	push   0xc002a85c
c000e71e:	68 65 a8 02 c0       	push   0xc002a865
c000e723:	e8 ca cc 00 00       	call   c001b3f2 <Reg::readIntWithDefault(char*, char*, int)>
c000e728:	89 04 24             	mov    DWORD PTR [esp],eax
c000e72b:	e8 90 55 00 00       	call   c0013cc0 <User::loadClockSettings(int)>
c000e730:	58                   	pop    eax
c000e731:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c000e736:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e73c:	e8 83 5c 00 00       	call   c00143c4 <Device::loadDriversForAll()>
c000e741:	e8 cc ba 00 00       	call   c001a212 <Krnl::startCPUs()>
c000e746:	5a                   	pop    edx
c000e747:	8b 1d c8 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002edc8
c000e74d:	59                   	pop    ecx
c000e74e:	6a 01                	push   0x1
c000e750:	68 6d a8 02 c0       	push   0xc002a86d
c000e755:	e8 c4 f2 00 00       	call   c001da1e <Thr::loadDLL(char const*, bool)>
c000e75a:	5a                   	pop    edx
c000e75b:	59                   	pop    ecx
c000e75c:	53                   	push   ebx
c000e75d:	50                   	push   eax
c000e75e:	e8 ef f4 00 00       	call   c001dc52 <Thr::executeDLL(unsigned long, void*)>
c000e763:	83 c4 10             	add    esp,0x10
c000e766:	83 ec 0c             	sub    esp,0xc
c000e769:	6a 02                	push   0x2
c000e76b:	e8 95 fe 00 00       	call   c001e605 <blockTask(TaskState)>
c000e770:	83 c4 10             	add    esp,0x10
c000e773:	eb f1                	jmp    c000e766 <Krnl::firstTask()+0xe0>
c000e775:	90                   	nop

c000e776 <Computer::Computer()>:
c000e776:	83 ec 0c             	sub    esp,0xc
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	83 ec 08             	sub    esp,0x8
c000e780:	68 89 a8 02 c0       	push   0xc002a889
c000e785:	50                   	push   eax
c000e786:	e8 df 5c 00 00       	call   c001446a <Device::Device(char const*)>
c000e78b:	83 c4 10             	add    esp,0x10
c000e78e:	ba 28 aa 02 c0       	mov    edx,0xc002aa28
c000e793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e797:	89 10                	mov    DWORD PTR [eax],edx
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ab:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7bf:	83 ca 04             	or     edx,0x4
c000e7c2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7d2:	0f b6 d0             	movzx  edx,al
c000e7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d9:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ea:	0f b6 d0             	movzx  edx,al
c000e7ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e800:	8d 50 01             	lea    edx,[eax+0x1]
c000e803:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e807:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e80d:	0f b6 d0             	movzx  edx,al
c000e810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e814:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e818:	83 e1 3f             	and    ecx,0x3f
c000e81b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e823:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e829:	0f b6 d0             	movzx  edx,al
c000e82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e830:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e841:	0f b6 d0             	movzx  edx,al
c000e844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e848:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e857:	8d 50 01             	lea    edx,[eax+0x1]
c000e85a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e85e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e864:	0f b6 d0             	movzx  edx,al
c000e867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e86f:	83 e1 3f             	and    ecx,0x3f
c000e872:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e880:	0f b6 d0             	movzx  edx,al
c000e883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e887:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e892:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e898:	0f b6 d0             	movzx  edx,al
c000e89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89f:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8ae:	8d 50 01             	lea    edx,[eax+0x1]
c000e8b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8b5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8bb:	0f b6 d0             	movzx  edx,al
c000e8be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8c6:	83 e1 3f             	and    ecx,0x3f
c000e8c9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8cd:	90                   	nop
c000e8ce:	83 c4 0c             	add    esp,0xc
c000e8d1:	c3                   	ret    

c000e8d2 <Computer::setBootMessage(char const*)>:
c000e8d2:	c3                   	ret    
c000e8d3:	90                   	nop

c000e8d4 <Computer::detectFeatures()>:
c000e8d4:	55                   	push   ebp
c000e8d5:	57                   	push   edi
c000e8d6:	56                   	push   esi
c000e8d7:	53                   	push   ebx
c000e8d8:	83 ec 1c             	sub    esp,0x1c
c000e8db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8df:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8e9:	e8 f6 19 ff ff       	call   c00002e4 <detectCPUID>
c000e8ee:	85 c0                	test   eax,eax
c000e8f0:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f6:	0f 95 c2             	setne  dl
c000e8f9:	83 e0 fd             	and    eax,0xfffffffd
c000e8fc:	d1 e2                	shl    edx,1
c000e8fe:	09 d0                	or     eax,edx
c000e900:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e906:	a8 02                	test   al,0x2
c000e908:	75 46                	jne    c000e950 <Computer::detectFeatures()+0x7c>
c000e90a:	f6 05 e1 ed 02 c0 04 	test   BYTE PTR ds:0xc002ede1,0x4
c000e911:	74 07                	je     c000e91a <Computer::detectFeatures()+0x46>
c000e913:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e91a:	e8 d7 84 01 00       	call   c0026df6 <x87Detect>
c000e91f:	83 e0 01             	and    eax,0x1
c000e922:	c1 e0 04             	shl    eax,0x4
c000e925:	88 c2                	mov    dl,al
c000e927:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92d:	83 e0 ef             	and    eax,0xffffffef
c000e930:	09 d0                	or     eax,edx
c000e932:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e938:	a8 10                	test   al,0x10
c000e93a:	0f 85 2a 01 00 00    	jne    c000ea6a <Computer::detectFeatures()+0x196>
c000e940:	84 c0                	test   al,al
c000e942:	0f 88 45 01 00 00    	js     c000ea8d <Computer::detectFeatures()+0x1b9>
c000e948:	83 c4 1c             	add    esp,0x1c
c000e94b:	5b                   	pop    ebx
c000e94c:	5e                   	pop    esi
c000e94d:	5f                   	pop    edi
c000e94e:	5d                   	pop    ebp
c000e94f:	c3                   	ret    
c000e950:	83 ec 0c             	sub    esp,0xc
c000e953:	6a 20                	push   0x20
c000e955:	e8 ca a5 00 00       	call   c0018f24 <CPU::cpuidCheckEDX(unsigned int)>
c000e95a:	83 e0 01             	and    eax,0x1
c000e95d:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e964:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e96a:	83 e0 f7             	and    eax,0xfffffff7
c000e96d:	09 d0                	or     eax,edx
c000e96f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e975:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e97c:	e8 a3 a5 00 00       	call   c0018f24 <CPU::cpuidCheckEDX(unsigned int)>
c000e981:	83 e0 01             	and    eax,0x1
c000e984:	88 c2                	mov    dl,al
c000e986:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e98c:	83 e0 fe             	and    eax,0xfffffffe
c000e98f:	09 d0                	or     eax,edx
c000e991:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e997:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e99e:	e8 81 a5 00 00       	call   c0018f24 <CPU::cpuidCheckEDX(unsigned int)>
c000e9a3:	c1 e0 07             	shl    eax,0x7
c000e9a6:	88 c2                	mov    dl,al
c000e9a8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ae:	83 e0 7f             	and    eax,0x7f
c000e9b1:	09 d0                	or     eax,edx
c000e9b3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9b9:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9c0:	e8 5f a5 00 00       	call   c0018f24 <CPU::cpuidCheckEDX(unsigned int)>
c000e9c5:	83 c4 10             	add    esp,0x10
c000e9c8:	83 e0 01             	and    eax,0x1
c000e9cb:	c1 e0 05             	shl    eax,0x5
c000e9ce:	88 c2                	mov    dl,al
c000e9d0:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9d6:	83 e0 df             	and    eax,0xffffffdf
c000e9d9:	09 d0                	or     eax,edx
c000e9db:	f7 05 e0 ed 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002ede0,0x401
c000e9e5:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9eb:	0f 84 c2 00 00 00    	je     c000eab3 <Computer::detectFeatures()+0x1df>
c000e9f1:	83 e0 fe             	and    eax,0xfffffffe
c000e9f4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9fa:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea00:	88 c2                	mov    dl,al
c000ea02:	83 e2 09             	and    edx,0x9
c000ea05:	fe ca                	dec    dl
c000ea07:	75 09                	jne    c000ea12 <Computer::detectFeatures()+0x13e>
c000ea09:	83 e0 fe             	and    eax,0xfffffffe
c000ea0c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea12:	83 ec 0c             	sub    esp,0xc
c000ea15:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea19:	50                   	push   eax
c000ea1a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea1e:	55                   	push   ebp
c000ea1f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea23:	57                   	push   edi
c000ea24:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea28:	56                   	push   esi
c000ea29:	68 00 00 00 80       	push   0x80000000
c000ea2e:	e8 6d a4 00 00       	call   c0018ea0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea33:	83 c4 20             	add    esp,0x20
c000ea36:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea3d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea41:	0f 86 c3 fe ff ff    	jbe    c000e90a <Computer::detectFeatures()+0x36>
c000ea47:	83 ec 0c             	sub    esp,0xc
c000ea4a:	50                   	push   eax
c000ea4b:	55                   	push   ebp
c000ea4c:	57                   	push   edi
c000ea4d:	56                   	push   esi
c000ea4e:	68 01 00 00 80       	push   0x80000001
c000ea53:	e8 48 a4 00 00       	call   c0018ea0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea58:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea62:	83 c4 20             	add    esp,0x20
c000ea65:	e9 a0 fe ff ff       	jmp    c000e90a <Computer::detectFeatures()+0x36>
c000ea6a:	e8 41 83 01 00       	call   c0026db0 <absolutelyNoChanceInHell>
c000ea6f:	88 c2                	mov    dl,al
c000ea71:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea77:	c1 e2 07             	shl    edx,0x7
c000ea7a:	83 e0 7f             	and    eax,0x7f
c000ea7d:	09 d0                	or     eax,edx
c000ea7f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea85:	84 c0                	test   al,al
c000ea87:	0f 89 bb fe ff ff    	jns    c000e948 <Computer::detectFeatures()+0x74>
c000ea8d:	e8 fe 82 01 00       	call   c0026d90 <avxDetect>
c000ea92:	83 e0 01             	and    eax,0x1
c000ea95:	c1 e0 05             	shl    eax,0x5
c000ea98:	88 c2                	mov    dl,al
c000ea9a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaa0:	83 e0 df             	and    eax,0xffffffdf
c000eaa3:	09 d0                	or     eax,edx
c000eaa5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eaab:	83 c4 1c             	add    esp,0x1c
c000eaae:	5b                   	pop    ebx
c000eaaf:	5e                   	pop    esi
c000eab0:	5f                   	pop    edi
c000eab1:	5d                   	pop    ebp
c000eab2:	c3                   	ret    
c000eab3:	83 ec 0c             	sub    esp,0xc
c000eab6:	68 00 02 00 00       	push   0x200
c000eabb:	e8 64 a4 00 00       	call   c0018f24 <CPU::cpuidCheckEDX(unsigned int)>
c000eac0:	83 c4 10             	add    esp,0x10
c000eac3:	83 e0 01             	and    eax,0x1
c000eac6:	88 c2                	mov    dl,al
c000eac8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eace:	83 e0 fe             	and    eax,0xfffffffe
c000ead1:	09 d0                	or     eax,edx
c000ead3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ead9:	e9 1c ff ff ff       	jmp    c000e9fa <Computer::detectFeatures()+0x126>

c000eade <Computer::displayFeatures()>:
c000eade:	53                   	push   ebx
c000eadf:	83 ec 14             	sub    esp,0x14
c000eae2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eae6:	68 99 a8 02 c0       	push   0xc002a899
c000eaeb:	e8 55 43 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000eaf0:	83 c4 10             	add    esp,0x10
c000eaf3:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eafa:	0f 85 73 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x295>
c000eb00:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000eb05:	83 ec 08             	sub    esp,0x8
c000eb08:	50                   	push   eax
c000eb09:	68 ac a8 02 c0       	push   0xc002a8ac
c000eb0e:	e8 32 43 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000eb13:	83 c4 10             	add    esp,0x10
c000eb16:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb1d:	0f 85 8c 02 00 00    	jne    c000edaf <Computer::displayFeatures()+0x2d1>
c000eb23:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000eb28:	83 ec 08             	sub    esp,0x8
c000eb2b:	50                   	push   eax
c000eb2c:	68 bd a8 02 c0       	push   0xc002a8bd
c000eb31:	e8 0f 43 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000eb36:	83 c4 10             	add    esp,0x10
c000eb39:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb40:	0f 85 5f 02 00 00    	jne    c000eda5 <Computer::displayFeatures()+0x2c7>
c000eb46:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000eb4b:	83 ec 08             	sub    esp,0x8
c000eb4e:	50                   	push   eax
c000eb4f:	68 ce a8 02 c0       	push   0xc002a8ce
c000eb54:	e8 ec 42 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000eb59:	83 c4 10             	add    esp,0x10
c000eb5c:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb63:	0f 85 32 02 00 00    	jne    c000ed9b <Computer::displayFeatures()+0x2bd>
c000eb69:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000eb6e:	83 ec 08             	sub    esp,0x8
c000eb71:	50                   	push   eax
c000eb72:	68 df a8 02 c0       	push   0xc002a8df
c000eb77:	e8 c9 42 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000eb7c:	83 c4 10             	add    esp,0x10
c000eb7f:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb86:	0f 85 05 02 00 00    	jne    c000ed91 <Computer::displayFeatures()+0x2b3>
c000eb8c:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000eb91:	83 ec 08             	sub    esp,0x8
c000eb94:	50                   	push   eax
c000eb95:	68 f0 a8 02 c0       	push   0xc002a8f0
c000eb9a:	e8 a6 42 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eba9:	0f 85 d8 01 00 00    	jne    c000ed87 <Computer::displayFeatures()+0x2a9>
c000ebaf:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000ebb4:	83 ec 08             	sub    esp,0x8
c000ebb7:	50                   	push   eax
c000ebb8:	68 01 a9 02 c0       	push   0xc002a901
c000ebbd:	e8 83 42 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000ebc2:	83 c4 10             	add    esp,0x10
c000ebc5:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebcc:	0f 85 ab 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x29f>
c000ebd2:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000ebd7:	83 ec 08             	sub    esp,0x8
c000ebda:	50                   	push   eax
c000ebdb:	68 12 a9 02 c0       	push   0xc002a912
c000ebe0:	e8 60 42 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000ebe5:	83 c4 10             	add    esp,0x10
c000ebe8:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebef:	0f 88 1b 02 00 00    	js     c000ee10 <Computer::displayFeatures()+0x332>
c000ebf5:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000ebfa:	83 ec 08             	sub    esp,0x8
c000ebfd:	50                   	push   eax
c000ebfe:	68 23 a9 02 c0       	push   0xc002a923
c000ec03:	e8 3d 42 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000ec08:	83 c4 10             	add    esp,0x10
c000ec0b:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec12:	0f 85 a1 01 00 00    	jne    c000edb9 <Computer::displayFeatures()+0x2db>
c000ec18:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000ec1d:	83 ec 08             	sub    esp,0x8
c000ec20:	50                   	push   eax
c000ec21:	68 34 a9 02 c0       	push   0xc002a934
c000ec26:	e8 1a 42 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000ec2b:	83 c4 10             	add    esp,0x10
c000ec2e:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec35:	0f 85 cb 01 00 00    	jne    c000ee06 <Computer::displayFeatures()+0x328>
c000ec3b:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000ec40:	83 ec 08             	sub    esp,0x8
c000ec43:	50                   	push   eax
c000ec44:	68 45 a9 02 c0       	push   0xc002a945
c000ec49:	e8 f7 41 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000ec4e:	83 c4 10             	add    esp,0x10
c000ec51:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec58:	0f 85 9e 01 00 00    	jne    c000edfc <Computer::displayFeatures()+0x31e>
c000ec5e:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000ec63:	83 ec 08             	sub    esp,0x8
c000ec66:	50                   	push   eax
c000ec67:	68 56 a9 02 c0       	push   0xc002a956
c000ec6c:	e8 d4 41 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000ec71:	83 c4 10             	add    esp,0x10
c000ec74:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec7b:	0f 85 71 01 00 00    	jne    c000edf2 <Computer::displayFeatures()+0x314>
c000ec81:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000ec86:	83 ec 08             	sub    esp,0x8
c000ec89:	50                   	push   eax
c000ec8a:	68 67 a9 02 c0       	push   0xc002a967
c000ec8f:	e8 b1 41 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000ec94:	83 c4 10             	add    esp,0x10
c000ec97:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec9e:	0f 85 44 01 00 00    	jne    c000ede8 <Computer::displayFeatures()+0x30a>
c000eca4:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000eca9:	83 ec 08             	sub    esp,0x8
c000ecac:	50                   	push   eax
c000ecad:	68 78 a9 02 c0       	push   0xc002a978
c000ecb2:	e8 8e 41 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000ecb7:	83 c4 10             	add    esp,0x10
c000ecba:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ecc1:	0f 85 17 01 00 00    	jne    c000edde <Computer::displayFeatures()+0x300>
c000ecc7:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000eccc:	83 ec 08             	sub    esp,0x8
c000eccf:	50                   	push   eax
c000ecd0:	68 89 a9 02 c0       	push   0xc002a989
c000ecd5:	e8 6b 41 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000ecda:	83 c4 10             	add    esp,0x10
c000ecdd:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ece4:	0f 85 ea 00 00 00    	jne    c000edd4 <Computer::displayFeatures()+0x2f6>
c000ecea:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000ecef:	83 ec 08             	sub    esp,0x8
c000ecf2:	50                   	push   eax
c000ecf3:	68 9a a9 02 c0       	push   0xc002a99a
c000ecf8:	e8 48 41 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000ecfd:	83 c4 10             	add    esp,0x10
c000ed00:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed07:	0f 88 0d 01 00 00    	js     c000ee1a <Computer::displayFeatures()+0x33c>
c000ed0d:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000ed12:	83 ec 08             	sub    esp,0x8
c000ed15:	50                   	push   eax
c000ed16:	68 ab a9 02 c0       	push   0xc002a9ab
c000ed1b:	e8 25 41 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000ed20:	83 c4 10             	add    esp,0x10
c000ed23:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed2a:	0f 85 9a 00 00 00    	jne    c000edca <Computer::displayFeatures()+0x2ec>
c000ed30:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000ed35:	83 ec 08             	sub    esp,0x8
c000ed38:	50                   	push   eax
c000ed39:	68 bc a9 02 c0       	push   0xc002a9bc
c000ed3e:	e8 02 41 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000ed43:	83 c4 10             	add    esp,0x10
c000ed46:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed4d:	75 74                	jne    c000edc3 <Computer::displayFeatures()+0x2e5>
c000ed4f:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c000ed54:	83 ec 08             	sub    esp,0x8
c000ed57:	50                   	push   eax
c000ed58:	68 cd a9 02 c0       	push   0xc002a9cd
c000ed5d:	e8 e3 40 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000ed62:	c7 44 24 20 34 c4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c434
c000ed6a:	83 c4 18             	add    esp,0x18
c000ed6d:	5b                   	pop    ebx
c000ed6e:	e9 d2 40 00 00       	jmp    c0012e45 <Dbg::kprintf(char const*, ...)>
c000ed73:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000ed78:	e9 88 fd ff ff       	jmp    c000eb05 <Computer::displayFeatures()+0x27>
c000ed7d:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000ed82:	e9 50 fe ff ff       	jmp    c000ebd7 <Computer::displayFeatures()+0xf9>
c000ed87:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000ed8c:	e9 23 fe ff ff       	jmp    c000ebb4 <Computer::displayFeatures()+0xd6>
c000ed91:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000ed96:	e9 f6 fd ff ff       	jmp    c000eb91 <Computer::displayFeatures()+0xb3>
c000ed9b:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000eda0:	e9 c9 fd ff ff       	jmp    c000eb6e <Computer::displayFeatures()+0x90>
c000eda5:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000edaa:	e9 9c fd ff ff       	jmp    c000eb4b <Computer::displayFeatures()+0x6d>
c000edaf:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000edb4:	e9 6f fd ff ff       	jmp    c000eb28 <Computer::displayFeatures()+0x4a>
c000edb9:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000edbe:	e9 5a fe ff ff       	jmp    c000ec1d <Computer::displayFeatures()+0x13f>
c000edc3:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000edc8:	eb 8a                	jmp    c000ed54 <Computer::displayFeatures()+0x276>
c000edca:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000edcf:	e9 61 ff ff ff       	jmp    c000ed35 <Computer::displayFeatures()+0x257>
c000edd4:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000edd9:	e9 11 ff ff ff       	jmp    c000ecef <Computer::displayFeatures()+0x211>
c000edde:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000ede3:	e9 e4 fe ff ff       	jmp    c000eccc <Computer::displayFeatures()+0x1ee>
c000ede8:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000eded:	e9 b7 fe ff ff       	jmp    c000eca9 <Computer::displayFeatures()+0x1cb>
c000edf2:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000edf7:	e9 8a fe ff ff       	jmp    c000ec86 <Computer::displayFeatures()+0x1a8>
c000edfc:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000ee01:	e9 5d fe ff ff       	jmp    c000ec63 <Computer::displayFeatures()+0x185>
c000ee06:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000ee0b:	e9 30 fe ff ff       	jmp    c000ec40 <Computer::displayFeatures()+0x162>
c000ee10:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000ee15:	e9 e0 fd ff ff       	jmp    c000ebfa <Computer::displayFeatures()+0x11c>
c000ee1a:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c000ee1f:	e9 ee fe ff ff       	jmp    c000ed12 <Computer::displayFeatures()+0x234>

c000ee24 <Computer::rdmsr(unsigned int)>:
c000ee24:	83 ec 0c             	sub    esp,0xc
c000ee27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee32:	74 0a                	je     c000ee3e <Computer::rdmsr(unsigned int)+0x1a>
c000ee34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee38:	0f 32                	rdmsr  
c000ee3a:	83 c4 0c             	add    esp,0xc
c000ee3d:	c3                   	ret    
c000ee3e:	83 ec 0c             	sub    esp,0xc
c000ee41:	68 de a9 02 c0       	push   0xc002a9de
c000ee46:	e8 ba b9 00 00       	call   c001a805 <Krnl::panic(char const*)>
c000ee4b:	83 c4 10             	add    esp,0x10
c000ee4e:	eb e4                	jmp    c000ee34 <Computer::rdmsr(unsigned int)+0x10>

c000ee50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee50:	57                   	push   edi
c000ee51:	56                   	push   esi
c000ee52:	52                   	push   edx
c000ee53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee66:	74 0e                	je     c000ee76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee6c:	89 f0                	mov    eax,esi
c000ee6e:	89 fa                	mov    edx,edi
c000ee70:	0f 30                	wrmsr  
c000ee72:	58                   	pop    eax
c000ee73:	5e                   	pop    esi
c000ee74:	5f                   	pop    edi
c000ee75:	c3                   	ret    
c000ee76:	83 ec 0c             	sub    esp,0xc
c000ee79:	68 e4 a9 02 c0       	push   0xc002a9e4
c000ee7e:	e8 82 b9 00 00       	call   c001a805 <Krnl::panic(char const*)>
c000ee83:	83 c4 10             	add    esp,0x10
c000ee86:	eb e0                	jmp    c000ee68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee88 <Computer::nmiEnabled()>:
c000ee88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee8c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee92:	c3                   	ret    
c000ee93:	90                   	nop

c000ee94 <Computer::readCMOS(unsigned char)>:
c000ee94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee98:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee9f:	19 c0                	sbb    eax,eax
c000eea1:	83 e0 80             	and    eax,0xffffff80
c000eea4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eea8:	e6 70                	out    0x70,al
c000eeaa:	e4 71                	in     al,0x71
c000eeac:	c3                   	ret    
c000eead:	90                   	nop

c000eeae <Computer::enableNMI(bool)>:
c000eeae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eeb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eeb6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eebc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eec4:	eb ce                	jmp    c000ee94 <Computer::readCMOS(unsigned char)>

c000eec6 <Computer::open(int, int, void*)>:
c000eec6:	56                   	push   esi
c000eec7:	53                   	push   ebx
c000eec8:	83 ec 10             	sub    esp,0x10
c000eecb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eecf:	f6 05 e0 ed 02 c0 04 	test   BYTE PTR ds:0xc002ede0,0x4
c000eed6:	68 68 12 00 00       	push   0x1268
c000eedb:	0f 94 05 04 dd 02 c0 	sete   BYTE PTR ds:0xc002dd04
c000eee2:	e8 9f 09 00 00       	call   c000f886 <malloc>
c000eee7:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeea:	89 c6                	mov    esi,eax
c000eeec:	e8 b7 93 00 00       	call   c00182a8 <ACPI::ACPI()>
c000eef1:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eef7:	58                   	pop    eax
c000eef8:	5a                   	pop    edx
c000eef9:	56                   	push   esi
c000eefa:	53                   	push   ebx
c000eefb:	e8 7a 53 00 00       	call   c001427a <Device::addChild(Device*)>
c000ef00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef03:	e8 cc f9 ff ff       	call   c000e8d4 <Computer::detectFeatures()>
c000ef08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef0b:	e8 ce fb ff ff       	call   c000eade <Computer::displayFeatures()>
c000ef10:	59                   	pop    ecx
c000ef11:	5e                   	pop    esi
c000ef12:	6a 01                	push   0x1
c000ef14:	53                   	push   ebx
c000ef15:	e8 94 ff ff ff       	call   c000eeae <Computer::enableNMI(bool)>
c000ef1a:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef21:	e8 60 09 00 00       	call   c000f886 <malloc>
c000ef26:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef29:	89 c6                	mov    esi,eax
c000ef2b:	e8 ac a0 00 00       	call   c0018fdc <CPU::CPU()>
c000ef30:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef36:	58                   	pop    eax
c000ef37:	5a                   	pop    edx
c000ef38:	56                   	push   esi
c000ef39:	53                   	push   ebx
c000ef3a:	e8 3b 53 00 00       	call   c001427a <Device::addChild(Device*)>
c000ef3f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef45:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef4b:	6a 00                	push   0x0
c000ef4d:	6a 00                	push   0x0
c000ef4f:	50                   	push   eax
c000ef50:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef53:	83 c4 20             	add    esp,0x20
c000ef56:	e8 b3 58 00 00       	call   c001480e <setupFPU()>
c000ef5b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef61:	85 c0                	test   eax,eax
c000ef63:	74 1f                	je     c000ef84 <Computer::open(int, int, void*)+0xbe>
c000ef65:	83 ec 08             	sub    esp,0x8
c000ef68:	50                   	push   eax
c000ef69:	53                   	push   ebx
c000ef6a:	e8 0b 53 00 00       	call   c001427a <Device::addChild(Device*)>
c000ef6f:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef75:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef77:	6a 00                	push   0x0
c000ef79:	6a 00                	push   0x0
c000ef7b:	6a 00                	push   0x0
c000ef7d:	50                   	push   eax
c000ef7e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef81:	83 c4 20             	add    esp,0x20
c000ef84:	83 ec 0c             	sub    esp,0xc
c000ef87:	68 86 e6 00 c0       	push   0xc000e686
c000ef8c:	e8 53 f3 00 00       	call   c001e2e4 <setupMultitasking(void (*)())>
c000ef91:	83 c4 14             	add    esp,0x14
c000ef94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef99:	5b                   	pop    ebx
c000ef9a:	5e                   	pop    esi
c000ef9b:	c3                   	ret    

c000ef9c <Computer::disableNMI()>:
c000ef9c:	6a 00                	push   0x0
c000ef9e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efa2:	e8 07 ff ff ff       	call   c000eeae <Computer::enableNMI(bool)>
c000efa7:	58                   	pop    eax
c000efa8:	5a                   	pop    edx
c000efa9:	c3                   	ret    

c000efaa <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efae:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efb5:	19 c0                	sbb    eax,eax
c000efb7:	83 e0 80             	and    eax,0xffffff80
c000efba:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efbe:	e6 70                	out    0x70,al
c000efc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efc4:	e6 71                	out    0x71,al
c000efc6:	c3                   	ret    
c000efc7:	90                   	nop

c000efc8 <Computer::handleNMI()>:
c000efc8:	56                   	push   esi
c000efc9:	53                   	push   ebx
c000efca:	83 ec 10             	sub    esp,0x10
c000efcd:	e4 92                	in     al,0x92
c000efcf:	89 c6                	mov    esi,eax
c000efd1:	e4 61                	in     al,0x61
c000efd3:	68 ea a9 02 c0       	push   0xc002a9ea
c000efd8:	88 c3                	mov    bl,al
c000efda:	e8 66 3e 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000efdf:	83 c4 10             	add    esp,0x10
c000efe2:	83 e6 10             	and    esi,0x10
c000efe5:	75 0d                	jne    c000eff4 <Computer::handleNMI()+0x2c>
c000efe7:	f6 c3 40             	test   bl,0x40
c000efea:	75 1d                	jne    c000f009 <Computer::handleNMI()+0x41>
c000efec:	84 db                	test   bl,bl
c000efee:	78 2d                	js     c000f01d <Computer::handleNMI()+0x55>
c000eff0:	58                   	pop    eax
c000eff1:	5b                   	pop    ebx
c000eff2:	5e                   	pop    esi
c000eff3:	c3                   	ret    
c000eff4:	83 ec 0c             	sub    esp,0xc
c000eff7:	68 fb a9 02 c0       	push   0xc002a9fb
c000effc:	e8 04 b8 00 00       	call   c001a805 <Krnl::panic(char const*)>
c000f001:	83 c4 10             	add    esp,0x10
c000f004:	f6 c3 40             	test   bl,0x40
c000f007:	74 e3                	je     c000efec <Computer::handleNMI()+0x24>
c000f009:	83 ec 0c             	sub    esp,0xc
c000f00c:	68 08 aa 02 c0       	push   0xc002aa08
c000f011:	e8 ef b7 00 00       	call   c001a805 <Krnl::panic(char const*)>
c000f016:	83 c4 10             	add    esp,0x10
c000f019:	84 db                	test   bl,bl
c000f01b:	79 d3                	jns    c000eff0 <Computer::handleNMI()+0x28>
c000f01d:	c7 44 24 10 12 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aa12
c000f025:	5a                   	pop    edx
c000f026:	5b                   	pop    ebx
c000f027:	5e                   	pop    esi
c000f028:	e9 d8 b7 00 00       	jmp    c001a805 <Krnl::panic(char const*)>
c000f02d:	90                   	nop

c000f02e <Computer::setDiskActivityLight(int, bool)>:
c000f02e:	56                   	push   esi
c000f02f:	53                   	push   ebx
c000f030:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f034:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f039:	77 1b                	ja     c000f056 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f03b:	e4 92                	in     al,0x92
c000f03d:	bb 40 00 00 00       	mov    ebx,0x40
c000f042:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f046:	89 da                	mov    edx,ebx
c000f048:	d3 e2                	shl    edx,cl
c000f04a:	89 f1                	mov    ecx,esi
c000f04c:	f7 d2                	not    edx
c000f04e:	d3 e3                	shl    ebx,cl
c000f050:	21 d0                	and    eax,edx
c000f052:	09 d8                	or     eax,ebx
c000f054:	e6 92                	out    0x92,al
c000f056:	5b                   	pop    ebx
c000f057:	5e                   	pop    esi
c000f058:	c3                   	ret    
c000f059:	90                   	nop

c000f05a <GDTEntry::setBase(unsigned int)>:
c000f05a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f05e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f062:	89 c1                	mov    ecx,eax
c000f064:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f068:	c1 e9 10             	shr    ecx,0x10
c000f06b:	c1 e8 18             	shr    eax,0x18
c000f06e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f071:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f074:	c3                   	ret    
c000f075:	90                   	nop

c000f076 <GDTEntry::setLimit(unsigned int)>:
c000f076:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f07a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f07e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f081:	66 89 01             	mov    WORD PTR [ecx],ax
c000f084:	83 e2 f0             	and    edx,0xfffffff0
c000f087:	c1 e8 10             	shr    eax,0x10
c000f08a:	83 e0 0f             	and    eax,0xf
c000f08d:	09 d0                	or     eax,edx
c000f08f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f092:	c3                   	ret    
c000f093:	90                   	nop

c000f094 <GDT::GDT()>:
c000f094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f098:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f09e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0a8:	90                   	nop
c000f0a9:	c3                   	ret    

c000f0aa <GDT::addEntry(GDTEntry)>:
c000f0aa:	53                   	push   ebx
c000f0ab:	83 ec 0c             	sub    esp,0xc
c000f0ae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0b4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0bb:	52                   	push   edx
c000f0bc:	50                   	push   eax
c000f0bd:	68 4c aa 02 c0       	push   0xc002aa4c
c000f0c2:	e8 7e 3d 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000f0c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0cd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0d1:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0d5:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0d9:	8d 50 01             	lea    edx,[eax+0x1]
c000f0dc:	c1 e0 03             	shl    eax,0x3
c000f0df:	89 13                	mov    DWORD PTR [ebx],edx
c000f0e1:	83 c4 18             	add    esp,0x18
c000f0e4:	5b                   	pop    ebx
c000f0e5:	c3                   	ret    

c000f0e6 <GDT::getNumberOfEntries()>:
c000f0e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ec:	c3                   	ret    
c000f0ed:	90                   	nop

c000f0ee <GDT::flush()>:
c000f0ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f2:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0f4:	83 c0 04             	add    eax,0x4
c000f0f7:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0fe:	a3 d2 ed 02 c0       	mov    ds:0xc002edd2,eax
c000f103:	66 89 15 d0 ed 02 c0 	mov    WORD PTR ds:0xc002edd0,dx
c000f10a:	e9 41 13 ff ff       	jmp    c0000450 <loadGDT>
c000f10f:	90                   	nop

c000f110 <GDT::setup()>:
c000f110:	55                   	push   ebp
c000f111:	57                   	push   edi
c000f112:	56                   	push   esi
c000f113:	53                   	push   ebx
c000f114:	83 ec 3c             	sub    esp,0x3c
c000f117:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f11b:	6a 00                	push   0x0
c000f11d:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f121:	53                   	push   ebx
c000f122:	e8 33 ff ff ff       	call   c000f05a <GDTEntry::setBase(unsigned int)>
c000f127:	6a 00                	push   0x0
c000f129:	53                   	push   ebx
c000f12a:	e8 47 ff ff ff       	call   c000f076 <GDTEntry::setLimit(unsigned int)>
c000f12f:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f137:	6a 00                	push   0x0
c000f139:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f13d:	53                   	push   ebx
c000f13e:	e8 17 ff ff ff       	call   c000f05a <GDTEntry::setBase(unsigned int)>
c000f143:	68 ff ff ff 00       	push   0xffffff
c000f148:	53                   	push   ebx
c000f149:	e8 28 ff ff ff       	call   c000f076 <GDTEntry::setLimit(unsigned int)>
c000f14e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f15c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f160:	83 c4 20             	add    esp,0x20
c000f163:	6a 00                	push   0x0
c000f165:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f169:	53                   	push   ebx
c000f16a:	e8 eb fe ff ff       	call   c000f05a <GDTEntry::setBase(unsigned int)>
c000f16f:	68 ff ff ff 00       	push   0xffffff
c000f174:	53                   	push   ebx
c000f175:	e8 fc fe ff ff       	call   c000f076 <GDTEntry::setLimit(unsigned int)>
c000f17a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f17e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f182:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f186:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f18a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f18e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f193:	0d 00 92 c0 00       	or     eax,0xc09200
c000f198:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f19c:	89 d8                	mov    eax,ebx
c000f19e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1a2:	80 cc 60             	or     ah,0x60
c000f1a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1a9:	83 c4 0c             	add    esp,0xc
c000f1ac:	89 f8                	mov    eax,edi
c000f1ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1b2:	80 cc 60             	or     ah,0x60
c000f1b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1b9:	89 c7                	mov    edi,eax
c000f1bb:	55                   	push   ebp
c000f1bc:	e8 e9 fe ff ff       	call   c000f0aa <GDT::addEntry(GDTEntry)>
c000f1c1:	83 c4 0c             	add    esp,0xc
c000f1c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1c8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1cc:	55                   	push   ebp
c000f1cd:	e8 d8 fe ff ff       	call   c000f0aa <GDT::addEntry(GDTEntry)>
c000f1d2:	83 c4 0c             	add    esp,0xc
c000f1d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1dd:	55                   	push   ebp
c000f1de:	e8 c7 fe ff ff       	call   c000f0aa <GDT::addEntry(GDTEntry)>
c000f1e3:	83 c4 0c             	add    esp,0xc
c000f1e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1ee:	53                   	push   ebx
c000f1ef:	51                   	push   ecx
c000f1f0:	55                   	push   ebp
c000f1f1:	e8 b4 fe ff ff       	call   c000f0aa <GDT::addEntry(GDTEntry)>
c000f1f6:	83 c4 0c             	add    esp,0xc
c000f1f9:	57                   	push   edi
c000f1fa:	56                   	push   esi
c000f1fb:	55                   	push   ebp
c000f1fc:	e8 a9 fe ff ff       	call   c000f0aa <GDT::addEntry(GDTEntry)>
c000f201:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f204:	e8 e5 fe ff ff       	call   c000f0ee <GDT::flush()>
c000f209:	83 c4 4c             	add    esp,0x4c
c000f20c:	5b                   	pop    ebx
c000f20d:	5e                   	pop    esi
c000f20e:	5f                   	pop    edi
c000f20f:	5d                   	pop    ebp
c000f210:	c3                   	ret    

c000f211 <idleFunction(void*)>:
c000f211:	53                   	push   ebx
c000f212:	83 ec 08             	sub    esp,0x8
c000f215:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c000f21a:	48                   	dec    eax
c000f21b:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c000f220:	75 01                	jne    c000f223 <idleFunction(void*)+0x12>
c000f222:	fb                   	sti    
c000f223:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c000f228:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f22e:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f235:	74 3c                	je     c000f273 <idleFunction(void*)+0x62>
c000f237:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f23e:	74 33                	je     c000f273 <idleFunction(void*)+0x62>
c000f240:	31 db                	xor    ebx,ebx
c000f242:	52                   	push   edx
c000f243:	52                   	push   edx
c000f244:	68 e1 00 00 00       	push   0xe1
c000f249:	50                   	push   eax
c000f24a:	e8 d5 fb ff ff       	call   c000ee24 <Computer::rdmsr(unsigned int)>
c000f24f:	53                   	push   ebx
c000f250:	83 e0 02             	and    eax,0x2
c000f253:	50                   	push   eax
c000f254:	68 e1 00 00 00       	push   0xe1
c000f259:	ff 35 c8 ed 02 c0    	push   DWORD PTR ds:0xc002edc8
c000f25f:	e8 ec fb ff ff       	call   c000ee50 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f264:	83 c4 20             	add    esp,0x20
c000f267:	e8 13 10 ff ff       	call   c000027f <doTPAUSE>
c000f26c:	e8 cf 9b 01 00       	call   c0028e40 <idleCommon()>
c000f271:	eb f4                	jmp    c000f267 <idleFunction(void*)+0x56>
c000f273:	fb                   	sti    
c000f274:	f4                   	hlt    
c000f275:	e8 c6 9b 01 00       	call   c0028e40 <idleCommon()>
c000f27a:	eb f7                	jmp    c000f273 <idleFunction(void*)+0x62>

c000f27c <IDTEntry::IDTEntry(bool)>:
c000f27c:	83 ec 04             	sub    esp,0x4
c000f27f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f283:	88 04 24             	mov    BYTE PTR [esp],al
c000f286:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f28a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f290:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f294:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f298:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f29c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29f:	83 e2 f0             	and    edx,0xfffffff0
c000f2a2:	83 ca 0e             	or     edx,0xe
c000f2a5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ac:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2af:	83 e2 ef             	and    edx,0xffffffef
c000f2b2:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2b9:	74 04                	je     c000f2bf <IDTEntry::IDTEntry(bool)+0x43>
c000f2bb:	b2 03                	mov    dl,0x3
c000f2bd:	eb 02                	jmp    c000f2c1 <IDTEntry::IDTEntry(bool)+0x45>
c000f2bf:	b2 00                	mov    dl,0x0
c000f2c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c5:	83 e2 03             	and    edx,0x3
c000f2c8:	88 d1                	mov    cl,dl
c000f2ca:	c1 e1 05             	shl    ecx,0x5
c000f2cd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2d0:	83 e2 9f             	and    edx,0xffffff9f
c000f2d3:	09 ca                	or     edx,ecx
c000f2d5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2dc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2df:	83 ca 80             	or     edx,0xffffff80
c000f2e2:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2e5:	90                   	nop
c000f2e6:	83 c4 04             	add    esp,0x4
c000f2e9:	c3                   	ret    

c000f2ea <IDTEntry::setOffset(unsigned int)>:
c000f2ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2f2:	66 89 02             	mov    WORD PTR [edx],ax
c000f2f5:	c1 e8 10             	shr    eax,0x10
c000f2f8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2fc:	c3                   	ret    
c000f2fd:	90                   	nop

c000f2fe <IDT::IDT()>:
c000f2fe:	90                   	nop
c000f2ff:	c3                   	ret    

c000f300 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f304:	83 c0 30             	add    eax,0x30
c000f307:	c3                   	ret    

c000f308 <IDT::addEntry(IDTEntry, int)>:
c000f308:	53                   	push   ebx
c000f309:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f30d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f311:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f315:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f319:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f31c:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f320:	5b                   	pop    ebx
c000f321:	c3                   	ret    

c000f322 <IDT::addEntry(int, void (*)(), bool)>:
c000f322:	53                   	push   ebx
c000f323:	83 ec 10             	sub    esp,0x10
c000f326:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f32b:	50                   	push   eax
c000f32c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f330:	53                   	push   ebx
c000f331:	e8 46 ff ff ff       	call   c000f27c <IDTEntry::IDTEntry(bool)>
c000f336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f33a:	53                   	push   ebx
c000f33b:	e8 aa ff ff ff       	call   c000f2ea <IDTEntry::setOffset(unsigned int)>
c000f340:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f344:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f348:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f34c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f350:	e8 b3 ff ff ff       	call   c000f308 <IDT::addEntry(IDTEntry, int)>
c000f355:	83 c4 30             	add    esp,0x30
c000f358:	5b                   	pop    ebx
c000f359:	c3                   	ret    

c000f35a <IDT::flush()>:
c000f35a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f35e:	66 c7 05 d8 ed 02 c0 ff 07 	mov    WORD PTR ds:0xc002edd8,0x7ff
c000f367:	a3 da ed 02 c0       	mov    ds:0xc002edda,eax
c000f36c:	0f 01 1d d8 ed 02 c0 	lidtd  ds:0xc002edd8
c000f373:	c3                   	ret    

c000f374 <IDT::setup()>:
c000f374:	57                   	push   edi
c000f375:	56                   	push   esi
c000f376:	53                   	push   ebx
c000f377:	83 ec 10             	sub    esp,0x10
c000f37a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f37e:	6a 00                	push   0x0
c000f380:	68 70 04 00 c0       	push   0xc0000470
c000f385:	6a 00                	push   0x0
c000f387:	53                   	push   ebx
c000f388:	e8 95 ff ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f38d:	6a 00                	push   0x0
c000f38f:	68 80 04 00 c0       	push   0xc0000480
c000f394:	6a 01                	push   0x1
c000f396:	53                   	push   ebx
c000f397:	e8 86 ff ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f39c:	83 c4 20             	add    esp,0x20
c000f39f:	6a 00                	push   0x0
c000f3a1:	68 8a 04 00 c0       	push   0xc000048a
c000f3a6:	6a 02                	push   0x2
c000f3a8:	53                   	push   ebx
c000f3a9:	e8 74 ff ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f3ae:	6a 00                	push   0x0
c000f3b0:	68 94 04 00 c0       	push   0xc0000494
c000f3b5:	6a 03                	push   0x3
c000f3b7:	53                   	push   ebx
c000f3b8:	e8 65 ff ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f3bd:	83 c4 20             	add    esp,0x20
c000f3c0:	6a 00                	push   0x0
c000f3c2:	68 9e 04 00 c0       	push   0xc000049e
c000f3c7:	6a 04                	push   0x4
c000f3c9:	53                   	push   ebx
c000f3ca:	e8 53 ff ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f3cf:	6a 00                	push   0x0
c000f3d1:	68 a8 04 00 c0       	push   0xc00004a8
c000f3d6:	6a 05                	push   0x5
c000f3d8:	53                   	push   ebx
c000f3d9:	e8 44 ff ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f3de:	83 c4 20             	add    esp,0x20
c000f3e1:	6a 00                	push   0x0
c000f3e3:	68 b2 04 00 c0       	push   0xc00004b2
c000f3e8:	6a 06                	push   0x6
c000f3ea:	53                   	push   ebx
c000f3eb:	e8 32 ff ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f3f0:	6a 00                	push   0x0
c000f3f2:	68 bc 04 00 c0       	push   0xc00004bc
c000f3f7:	6a 07                	push   0x7
c000f3f9:	53                   	push   ebx
c000f3fa:	e8 23 ff ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f3ff:	83 c4 20             	add    esp,0x20
c000f402:	6a 00                	push   0x0
c000f404:	68 c6 04 00 c0       	push   0xc00004c6
c000f409:	6a 08                	push   0x8
c000f40b:	53                   	push   ebx
c000f40c:	e8 11 ff ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f411:	6a 00                	push   0x0
c000f413:	68 ce 04 00 c0       	push   0xc00004ce
c000f418:	6a 09                	push   0x9
c000f41a:	53                   	push   ebx
c000f41b:	e8 02 ff ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f420:	83 c4 20             	add    esp,0x20
c000f423:	6a 00                	push   0x0
c000f425:	68 d8 04 00 c0       	push   0xc00004d8
c000f42a:	6a 0a                	push   0xa
c000f42c:	53                   	push   ebx
c000f42d:	e8 f0 fe ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f432:	6a 00                	push   0x0
c000f434:	68 e0 04 00 c0       	push   0xc00004e0
c000f439:	6a 0b                	push   0xb
c000f43b:	53                   	push   ebx
c000f43c:	e8 e1 fe ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f441:	83 c4 20             	add    esp,0x20
c000f444:	6a 00                	push   0x0
c000f446:	68 e8 04 00 c0       	push   0xc00004e8
c000f44b:	6a 0c                	push   0xc
c000f44d:	53                   	push   ebx
c000f44e:	e8 cf fe ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f453:	6a 00                	push   0x0
c000f455:	68 f0 04 00 c0       	push   0xc00004f0
c000f45a:	6a 0d                	push   0xd
c000f45c:	53                   	push   ebx
c000f45d:	e8 c0 fe ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f462:	83 c4 20             	add    esp,0x20
c000f465:	6a 00                	push   0x0
c000f467:	68 f8 04 00 c0       	push   0xc00004f8
c000f46c:	6a 0e                	push   0xe
c000f46e:	53                   	push   ebx
c000f46f:	e8 ae fe ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f474:	6a 00                	push   0x0
c000f476:	68 00 05 00 c0       	push   0xc0000500
c000f47b:	6a 0f                	push   0xf
c000f47d:	53                   	push   ebx
c000f47e:	e8 9f fe ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f483:	83 c4 20             	add    esp,0x20
c000f486:	6a 00                	push   0x0
c000f488:	68 0a 05 00 c0       	push   0xc000050a
c000f48d:	6a 10                	push   0x10
c000f48f:	53                   	push   ebx
c000f490:	e8 8d fe ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f495:	6a 00                	push   0x0
c000f497:	68 14 05 00 c0       	push   0xc0000514
c000f49c:	6a 11                	push   0x11
c000f49e:	53                   	push   ebx
c000f49f:	e8 7e fe ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f4a4:	83 c4 20             	add    esp,0x20
c000f4a7:	6a 00                	push   0x0
c000f4a9:	68 1e 05 00 c0       	push   0xc000051e
c000f4ae:	6a 12                	push   0x12
c000f4b0:	53                   	push   ebx
c000f4b1:	e8 6c fe ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f4b6:	6a 01                	push   0x1
c000f4b8:	68 b8 05 00 c0       	push   0xc00005b8
c000f4bd:	6a 60                	push   0x60
c000f4bf:	53                   	push   ebx
c000f4c0:	e8 5d fe ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f4c5:	83 c4 20             	add    esp,0x20
c000f4c8:	6a 00                	push   0x0
c000f4ca:	68 bf 05 00 c0       	push   0xc00005bf
c000f4cf:	6a 20                	push   0x20
c000f4d1:	53                   	push   ebx
c000f4d2:	e8 4b fe ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f4d7:	6a 00                	push   0x0
c000f4d9:	68 aa 05 00 c0       	push   0xc00005aa
c000f4de:	6a 21                	push   0x21
c000f4e0:	53                   	push   ebx
c000f4e1:	e8 3c fe ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f4e6:	83 c4 20             	add    esp,0x20
c000f4e9:	6a 00                	push   0x0
c000f4eb:	68 b1 05 00 c0       	push   0xc00005b1
c000f4f0:	6a 22                	push   0x22
c000f4f2:	53                   	push   ebx
c000f4f3:	e8 2a fe ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f4f8:	6a 00                	push   0x0
c000f4fa:	68 28 05 00 c0       	push   0xc0000528
c000f4ff:	6a 23                	push   0x23
c000f501:	53                   	push   ebx
c000f502:	e8 1b fe ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f507:	83 c4 20             	add    esp,0x20
c000f50a:	6a 00                	push   0x0
c000f50c:	68 32 05 00 c0       	push   0xc0000532
c000f511:	6a 24                	push   0x24
c000f513:	53                   	push   ebx
c000f514:	e8 09 fe ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f519:	6a 00                	push   0x0
c000f51b:	68 3c 05 00 c0       	push   0xc000053c
c000f520:	6a 25                	push   0x25
c000f522:	53                   	push   ebx
c000f523:	e8 fa fd ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f528:	83 c4 20             	add    esp,0x20
c000f52b:	6a 00                	push   0x0
c000f52d:	68 46 05 00 c0       	push   0xc0000546
c000f532:	6a 26                	push   0x26
c000f534:	53                   	push   ebx
c000f535:	e8 e8 fd ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f53a:	6a 00                	push   0x0
c000f53c:	68 50 05 00 c0       	push   0xc0000550
c000f541:	6a 27                	push   0x27
c000f543:	53                   	push   ebx
c000f544:	e8 d9 fd ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f549:	83 c4 20             	add    esp,0x20
c000f54c:	6a 00                	push   0x0
c000f54e:	68 5a 05 00 c0       	push   0xc000055a
c000f553:	6a 28                	push   0x28
c000f555:	53                   	push   ebx
c000f556:	e8 c7 fd ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f55b:	6a 00                	push   0x0
c000f55d:	68 64 05 00 c0       	push   0xc0000564
c000f562:	6a 29                	push   0x29
c000f564:	53                   	push   ebx
c000f565:	e8 b8 fd ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f56a:	83 c4 20             	add    esp,0x20
c000f56d:	6a 00                	push   0x0
c000f56f:	68 6e 05 00 c0       	push   0xc000056e
c000f574:	6a 2a                	push   0x2a
c000f576:	53                   	push   ebx
c000f577:	e8 a6 fd ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f57c:	6a 00                	push   0x0
c000f57e:	68 78 05 00 c0       	push   0xc0000578
c000f583:	6a 2b                	push   0x2b
c000f585:	53                   	push   ebx
c000f586:	e8 97 fd ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f58b:	83 c4 20             	add    esp,0x20
c000f58e:	6a 00                	push   0x0
c000f590:	68 82 05 00 c0       	push   0xc0000582
c000f595:	6a 2c                	push   0x2c
c000f597:	53                   	push   ebx
c000f598:	e8 85 fd ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f59d:	6a 00                	push   0x0
c000f59f:	68 8c 05 00 c0       	push   0xc000058c
c000f5a4:	6a 2d                	push   0x2d
c000f5a6:	53                   	push   ebx
c000f5a7:	e8 76 fd ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f5ac:	83 c4 20             	add    esp,0x20
c000f5af:	6a 00                	push   0x0
c000f5b1:	68 96 05 00 c0       	push   0xc0000596
c000f5b6:	6a 2e                	push   0x2e
c000f5b8:	53                   	push   ebx
c000f5b9:	e8 64 fd ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f5be:	6a 00                	push   0x0
c000f5c0:	68 a0 05 00 c0       	push   0xc00005a0
c000f5c5:	6a 2f                	push   0x2f
c000f5c7:	53                   	push   ebx
c000f5c8:	e8 55 fd ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f5cd:	83 c4 20             	add    esp,0x20
c000f5d0:	6a 00                	push   0x0
c000f5d2:	68 f5 05 00 c0       	push   0xc00005f5
c000f5d7:	6a 30                	push   0x30
c000f5d9:	53                   	push   ebx
c000f5da:	e8 43 fd ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f5df:	6a 00                	push   0x0
c000f5e1:	68 ff 05 00 c0       	push   0xc00005ff
c000f5e6:	6a 31                	push   0x31
c000f5e8:	53                   	push   ebx
c000f5e9:	e8 34 fd ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f5ee:	83 c4 20             	add    esp,0x20
c000f5f1:	6a 00                	push   0x0
c000f5f3:	68 09 06 00 c0       	push   0xc0000609
c000f5f8:	6a 32                	push   0x32
c000f5fa:	53                   	push   ebx
c000f5fb:	e8 22 fd ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f600:	6a 00                	push   0x0
c000f602:	68 13 06 00 c0       	push   0xc0000613
c000f607:	6a 33                	push   0x33
c000f609:	53                   	push   ebx
c000f60a:	e8 13 fd ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f60f:	83 c4 20             	add    esp,0x20
c000f612:	6a 00                	push   0x0
c000f614:	68 1d 06 00 c0       	push   0xc000061d
c000f619:	6a 34                	push   0x34
c000f61b:	53                   	push   ebx
c000f61c:	e8 01 fd ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f621:	6a 00                	push   0x0
c000f623:	68 27 06 00 c0       	push   0xc0000627
c000f628:	6a 35                	push   0x35
c000f62a:	53                   	push   ebx
c000f62b:	e8 f2 fc ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f630:	83 c4 20             	add    esp,0x20
c000f633:	6a 00                	push   0x0
c000f635:	68 31 06 00 c0       	push   0xc0000631
c000f63a:	6a 36                	push   0x36
c000f63c:	53                   	push   ebx
c000f63d:	e8 e0 fc ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f642:	6a 00                	push   0x0
c000f644:	68 3b 06 00 c0       	push   0xc000063b
c000f649:	6a 37                	push   0x37
c000f64b:	53                   	push   ebx
c000f64c:	e8 d1 fc ff ff       	call   c000f322 <IDT::addEntry(int, void (*)(), bool)>
c000f651:	83 c4 20             	add    esp,0x20
c000f654:	e8 1f 26 00 00       	call   c0011c78 <Virt::getAKernelVAS()>
c000f659:	52                   	push   edx
c000f65a:	6a 03                	push   0x3
c000f65c:	6a 02                	push   0x2
c000f65e:	50                   	push   eax
c000f65f:	e8 12 2d 00 00       	call   c0012376 <VAS::allocatePages(int, int)>
c000f664:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f66b:	89 c6                	mov    esi,eax
c000f66d:	e8 14 02 00 00       	call   c000f886 <malloc>
c000f672:	81 c6 00 20 00 00    	add    esi,0x2000
c000f678:	89 04 24             	mov    DWORD PTR [esp],eax
c000f67b:	89 c7                	mov    edi,eax
c000f67d:	e8 e8 1c 00 00       	call   c001136a <TSS::TSS()>
c000f682:	83 c4 0c             	add    esp,0xc
c000f685:	68 c6 04 00 c0       	push   0xc00004c6
c000f68a:	56                   	push   esi
c000f68b:	57                   	push   edi
c000f68c:	e8 19 1d 00 00       	call   c00113aa <TSS::setup(unsigned long, unsigned long)>
c000f691:	59                   	pop    ecx
c000f692:	89 c6                	mov    esi,eax
c000f694:	5f                   	pop    edi
c000f695:	6a 00                	push   0x0
c000f697:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f69b:	50                   	push   eax
c000f69c:	e8 db fb ff ff       	call   c000f27c <IDTEntry::IDTEntry(bool)>
c000f6a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6a5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6aa:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6b1:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6bb:	80 ce 05             	or     dh,0x5
c000f6be:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6c9:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6cf:	e8 86 fc ff ff       	call   c000f35a <IDT::flush()>
c000f6d4:	83 c4 20             	add    esp,0x20
c000f6d7:	5b                   	pop    ebx
c000f6d8:	5e                   	pop    esi
c000f6d9:	5f                   	pop    edi
c000f6da:	c3                   	ret    

c000f6db <sbrk>:
c000f6db:	55                   	push   ebp
c000f6dc:	57                   	push   edi
c000f6dd:	56                   	push   esi
c000f6de:	53                   	push   ebx
c000f6df:	83 ec 1c             	sub    esp,0x1c
c000f6e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6e6:	85 c0                	test   eax,eax
c000f6e8:	74 3e                	je     c000f728 <sbrk+0x4d>
c000f6ea:	78 43                	js     c000f72f <sbrk+0x54>
c000f6ec:	8b 15 c8 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002edc8
c000f6f2:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6f8:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6fe:	83 e2 01             	and    edx,0x1
c000f701:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f705:	8b 0d f4 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dcf4
c000f70b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f70f:	05 ff 0f 00 00       	add    eax,0xfff
c000f714:	89 c2                	mov    edx,eax
c000f716:	78 2f                	js     c000f747 <sbrk+0x6c>
c000f718:	c1 fa 0c             	sar    edx,0xc
c000f71b:	89 d7                	mov    edi,edx
c000f71d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f721:	be 00 00 00 00       	mov    esi,0x0
c000f726:	eb 36                	jmp    c000f75e <sbrk+0x83>
c000f728:	a1 f4 dc 02 c0       	mov    eax,ds:0xc002dcf4
c000f72d:	eb 74                	jmp    c000f7a3 <sbrk+0xc8>
c000f72f:	83 ec 08             	sub    esp,0x8
c000f732:	50                   	push   eax
c000f733:	68 68 aa 02 c0       	push   0xc002aa68
c000f738:	e8 08 37 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000f73d:	83 c4 10             	add    esp,0x10
c000f740:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f745:	eb 5c                	jmp    c000f7a3 <sbrk+0xc8>
c000f747:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f74d:	eb c9                	jmp    c000f718 <sbrk+0x3d>
c000f74f:	81 05 f4 dc 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002dcf4,0x1000
c000f759:	46                   	inc    esi
c000f75a:	39 f7                	cmp    edi,esi
c000f75c:	74 34                	je     c000f792 <sbrk+0xb7>
c000f75e:	e8 15 25 00 00       	call   c0011c78 <Virt::getAKernelVAS()>
c000f763:	89 c3                	mov    ebx,eax
c000f765:	8b 2d f4 dc 02 c0    	mov    ebp,DWORD PTR ds:0xc002dcf4
c000f76b:	e8 82 07 00 00       	call   c000fef2 <Phys::allocatePage()>
c000f770:	68 01 0c 00 00       	push   0xc01
c000f775:	55                   	push   ebp
c000f776:	50                   	push   eax
c000f777:	53                   	push   ebx
c000f778:	e8 f9 2a 00 00       	call   c0012276 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f77d:	83 c4 10             	add    esp,0x10
c000f780:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f785:	74 c8                	je     c000f74f <sbrk+0x74>
c000f787:	8b 1d f4 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dcf4
c000f78d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f790:	eb bd                	jmp    c000f74f <sbrk+0x74>
c000f792:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f797:	75 12                	jne    c000f7ab <sbrk+0xd0>
c000f799:	0f 20 d8             	mov    eax,cr3
c000f79c:	0f 22 d8             	mov    cr3,eax
c000f79f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7a3:	83 c4 1c             	add    esp,0x1c
c000f7a6:	5b                   	pop    ebx
c000f7a7:	5e                   	pop    esi
c000f7a8:	5f                   	pop    edi
c000f7a9:	5d                   	pop    ebp
c000f7aa:	c3                   	ret    
c000f7ab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7af:	89 cb                	mov    ebx,ecx
c000f7b1:	c1 eb 0a             	shr    ebx,0xa
c000f7b4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7ba:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7c4:	c1 e0 0c             	shl    eax,0xc
c000f7c7:	01 c8                	add    eax,ecx
c000f7c9:	c1 e8 0a             	shr    eax,0xa
c000f7cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7d1:	2d 00 00 40 00       	sub    eax,0x400000
c000f7d6:	39 c3                	cmp    ebx,eax
c000f7d8:	77 c5                	ja     c000f79f <sbrk+0xc4>
c000f7da:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7dd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7e3:	39 d8                	cmp    eax,ebx
c000f7e5:	73 f3                	jae    c000f7da <sbrk+0xff>
c000f7e7:	eb b6                	jmp    c000f79f <sbrk+0xc4>

c000f7e9 <mmap>:
c000f7e9:	83 ec 18             	sub    esp,0x18
c000f7ec:	68 98 aa 02 c0       	push   0xc002aa98
c000f7f1:	e8 0f b0 00 00       	call   c001a805 <Krnl::panic(char const*)>
c000f7f6:	b8 00 00 00 00       	mov    eax,0x0
c000f7fb:	83 c4 1c             	add    esp,0x1c
c000f7fe:	c3                   	ret    

c000f7ff <munmap>:
c000f7ff:	83 ec 18             	sub    esp,0x18
c000f802:	68 9d aa 02 c0       	push   0xc002aa9d
c000f807:	e8 f9 af 00 00       	call   c001a805 <Krnl::panic(char const*)>
c000f80c:	b8 00 00 00 00       	mov    eax,0x0
c000f811:	83 c4 1c             	add    esp,0x1c
c000f814:	c3                   	ret    

c000f815 <liballoc_lock()>:
c000f815:	fa                   	cli    
c000f816:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c000f81c:	b8 00 00 00 00       	mov    eax,0x0
c000f821:	c3                   	ret    

c000f822 <liballoc_unlock()>:
c000f822:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c000f827:	48                   	dec    eax
c000f828:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c000f82d:	75 01                	jne    c000f830 <liballoc_unlock()+0xe>
c000f82f:	fb                   	sti    
c000f830:	b8 00 00 00 00       	mov    eax,0x0
c000f835:	c3                   	ret    

c000f836 <liballoc_alloc(int)>:
c000f836:	83 ec 0c             	sub    esp,0xc
c000f839:	e8 3a 24 00 00       	call   c0011c78 <Virt::getAKernelVAS()>
c000f83e:	83 ec 04             	sub    esp,0x4
c000f841:	68 01 08 00 00       	push   0x801
c000f846:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f84a:	50                   	push   eax
c000f84b:	e8 26 2b 00 00       	call   c0012376 <VAS::allocatePages(int, int)>
c000f850:	83 c4 1c             	add    esp,0x1c
c000f853:	c3                   	ret    

c000f854 <liballoc_free(void*, int)>:
c000f854:	83 ec 0c             	sub    esp,0xc
c000f857:	e8 1c 24 00 00       	call   c0011c78 <Virt::getAKernelVAS()>
c000f85c:	83 ec 08             	sub    esp,0x8
c000f85f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f863:	50                   	push   eax
c000f864:	e8 b9 27 00 00       	call   c0012022 <VAS::freeAllocatedPages(unsigned long)>
c000f869:	b8 00 00 00 00       	mov    eax,0x0
c000f86e:	83 c4 1c             	add    esp,0x1c
c000f871:	c3                   	ret    

c000f872 <realloc>:
c000f872:	83 ec 14             	sub    esp,0x14
c000f875:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f879:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87d:	e8 f6 1d ff ff       	call   c0001678 <dlrealloc>
c000f882:	83 c4 1c             	add    esp,0x1c
c000f885:	c3                   	ret    

c000f886 <malloc>:
c000f886:	83 ec 18             	sub    esp,0x18
c000f889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f88d:	e8 a9 18 ff ff       	call   c000113b <dlmalloc>
c000f892:	83 c4 1c             	add    esp,0x1c
c000f895:	c3                   	ret    

c000f896 <free>:
c000f896:	83 ec 18             	sub    esp,0x18
c000f899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f89d:	e8 3e 15 ff ff       	call   c0000de0 <dlfree>
c000f8a2:	83 c4 1c             	add    esp,0x1c
c000f8a5:	c3                   	ret    

c000f8a6 <rfree>:
c000f8a6:	83 ec 18             	sub    esp,0x18
c000f8a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8ad:	e8 2e 15 ff ff       	call   c0000de0 <dlfree>
c000f8b2:	83 c4 1c             	add    esp,0x1c
c000f8b5:	c3                   	ret    

c000f8b6 <calloc>:
c000f8b6:	56                   	push   esi
c000f8b7:	53                   	push   ebx
c000f8b8:	83 ec 10             	sub    esp,0x10
c000f8bb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8bf:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8c4:	53                   	push   ebx
c000f8c5:	e8 bc ff ff ff       	call   c000f886 <malloc>
c000f8ca:	89 c6                	mov    esi,eax
c000f8cc:	83 c4 0c             	add    esp,0xc
c000f8cf:	53                   	push   ebx
c000f8d0:	6a 00                	push   0x0
c000f8d2:	50                   	push   eax
c000f8d3:	e8 c4 0e ff ff       	call   c000079c <memset>
c000f8d8:	89 f0                	mov    eax,esi
c000f8da:	83 c4 14             	add    esp,0x14
c000f8dd:	5b                   	pop    ebx
c000f8de:	5e                   	pop    esi
c000f8df:	c3                   	ret    

c000f8e0 <hwTextMode_loadInData(VgaText*)>:
c000f8e0:	55                   	push   ebp
c000f8e1:	a1 00 dd 02 c0       	mov    eax,ds:0xc002dd00
c000f8e6:	57                   	push   edi
c000f8e7:	56                   	push   esi
c000f8e8:	53                   	push   ebx
c000f8e9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8ed:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f8f0:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f8f3:	85 d2                	test   edx,edx
c000f8f5:	7e 29                	jle    c000f920 <hwTextMode_loadInData(VgaText*)+0x40>
c000f8f7:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f8fd:	31 f6                	xor    esi,esi
c000f8ff:	29 cd                	sub    ebp,ecx
c000f901:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f904:	31 c0                	xor    eax,eax
c000f906:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f90a:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f90e:	40                   	inc    eax
c000f90f:	83 f8 50             	cmp    eax,0x50
c000f912:	75 f2                	jne    c000f906 <hwTextMode_loadInData(VgaText*)+0x26>
c000f914:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f91a:	46                   	inc    esi
c000f91b:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f91e:	7f e1                	jg     c000f901 <hwTextMode_loadInData(VgaText*)+0x21>
c000f920:	5b                   	pop    ebx
c000f921:	5e                   	pop    esi
c000f922:	5f                   	pop    edi
c000f923:	5d                   	pop    ebp
c000f924:	c3                   	ret    

c000f925 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f925:	55                   	push   ebp
c000f926:	80 3d 60 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee60,0x0
c000f92d:	57                   	push   edi
c000f92e:	56                   	push   esi
c000f92f:	53                   	push   ebx
c000f930:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f934:	75 44                	jne    c000f97a <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f936:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f939:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f93c:	8b 15 00 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd00
c000f942:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f946:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f94c:	eb 08                	jmp    c000f956 <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f94e:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f951:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f954:	89 da                	mov    edx,ebx
c000f956:	83 e5 0f             	and    ebp,0xf
c000f959:	c1 e0 04             	shl    eax,0x4
c000f95c:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f95f:	0f b6 c0             	movzx  eax,al
c000f962:	41                   	inc    ecx
c000f963:	09 e8                	or     eax,ebp
c000f965:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f969:	c1 e0 08             	shl    eax,0x8
c000f96c:	09 e8                	or     eax,ebp
c000f96e:	39 fb                	cmp    ebx,edi
c000f970:	66 89 02             	mov    WORD PTR [edx],ax
c000f973:	75 d9                	jne    c000f94e <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f975:	5b                   	pop    ebx
c000f976:	5e                   	pop    esi
c000f977:	5f                   	pop    edi
c000f978:	5d                   	pop    ebp
c000f979:	c3                   	ret    
c000f97a:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f981:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f988:	31 c0                	xor    eax,eax
c000f98a:	bd 02 00 00 00       	mov    ebp,0x2
c000f98f:	eb ab                	jmp    c000f93c <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f991 <hwTextMode_showCursor(VgaText*, bool)>:
c000f991:	56                   	push   esi
c000f992:	80 3d 60 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee60,0x0
c000f999:	53                   	push   ebx
c000f99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f99e:	75 36                	jne    c000f9d6 <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000f9a0:	84 c0                	test   al,al
c000f9a2:	74 35                	je     c000f9d9 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f9a4:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f9a9:	b0 0a                	mov    al,0xa
c000f9ab:	89 da                	mov    edx,ebx
c000f9ad:	ee                   	out    dx,al
c000f9ae:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f9b3:	89 ca                	mov    edx,ecx
c000f9b5:	ec                   	in     al,dx
c000f9b6:	b2 0f                	mov    dl,0xf
c000f9b8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f9bc:	83 e0 c0             	and    eax,0xffffffc0
c000f9bf:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000f9c2:	09 d0                	or     eax,edx
c000f9c4:	89 ca                	mov    edx,ecx
c000f9c6:	ee                   	out    dx,al
c000f9c7:	b0 0b                	mov    al,0xb
c000f9c9:	89 da                	mov    edx,ebx
c000f9cb:	ee                   	out    dx,al
c000f9cc:	89 ca                	mov    edx,ecx
c000f9ce:	ec                   	in     al,dx
c000f9cf:	83 e0 e0             	and    eax,0xffffffe0
c000f9d2:	83 c8 0f             	or     eax,0xf
c000f9d5:	ee                   	out    dx,al
c000f9d6:	5b                   	pop    ebx
c000f9d7:	5e                   	pop    esi
c000f9d8:	c3                   	ret    
c000f9d9:	b0 0a                	mov    al,0xa
c000f9db:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9e0:	ee                   	out    dx,al
c000f9e1:	b0 20                	mov    al,0x20
c000f9e3:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9e8:	ee                   	out    dx,al
c000f9e9:	5b                   	pop    ebx
c000f9ea:	5e                   	pop    esi
c000f9eb:	c3                   	ret    

c000f9ec <hwTextMode_update(VgaText*)>:
c000f9ec:	c3                   	ret    

c000f9ed <hwTextMode_updateCursor(VgaText*)>:
c000f9ed:	56                   	push   esi
c000f9ee:	80 3d 60 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee60,0x0
c000f9f5:	53                   	push   ebx
c000f9f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9fa:	75 36                	jne    c000fa32 <hwTextMode_updateCursor(VgaText*)+0x45>
c000f9fc:	be d4 03 00 00       	mov    esi,0x3d4
c000fa01:	b9 19 00 00 00       	mov    ecx,0x19
c000fa06:	89 f2                	mov    edx,esi
c000fa08:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fa0b:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fa0e:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fa11:	c1 e1 04             	shl    ecx,0x4
c000fa14:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fa17:	b0 0f                	mov    al,0xf
c000fa19:	ee                   	out    dx,al
c000fa1a:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa1f:	88 c8                	mov    al,cl
c000fa21:	89 da                	mov    edx,ebx
c000fa23:	ee                   	out    dx,al
c000fa24:	b0 0e                	mov    al,0xe
c000fa26:	89 f2                	mov    edx,esi
c000fa28:	ee                   	out    dx,al
c000fa29:	89 c8                	mov    eax,ecx
c000fa2b:	89 da                	mov    edx,ebx
c000fa2d:	66 c1 e8 08          	shr    ax,0x8
c000fa31:	ee                   	out    dx,al
c000fa32:	5b                   	pop    ebx
c000fa33:	5e                   	pop    esi
c000fa34:	c3                   	ret    

c000fa35 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa39:	80 3d 60 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee60,0x0
c000fa40:	75 38                	jne    c000fa7a <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa42:	ba da 03 00 00       	mov    edx,0x3da
c000fa47:	84 c0                	test   al,al
c000fa49:	75 18                	jne    c000fa63 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa4b:	ec                   	in     al,dx
c000fa4c:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa51:	b0 30                	mov    al,0x30
c000fa53:	89 ca                	mov    edx,ecx
c000fa55:	ee                   	out    dx,al
c000fa56:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa5b:	ec                   	in     al,dx
c000fa5c:	83 c8 08             	or     eax,0x8
c000fa5f:	89 ca                	mov    edx,ecx
c000fa61:	ee                   	out    dx,al
c000fa62:	c3                   	ret    
c000fa63:	ec                   	in     al,dx
c000fa64:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa69:	b0 30                	mov    al,0x30
c000fa6b:	89 ca                	mov    edx,ecx
c000fa6d:	ee                   	out    dx,al
c000fa6e:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa73:	ec                   	in     al,dx
c000fa74:	83 e0 f7             	and    eax,0xfffffff7
c000fa77:	89 ca                	mov    edx,ecx
c000fa79:	ee                   	out    dx,al
c000fa7a:	c3                   	ret    

c000fa7b <hwTextMode_scrollScreen(VgaText*)>:
c000fa7b:	55                   	push   ebp
c000fa7c:	57                   	push   edi
c000fa7d:	56                   	push   esi
c000fa7e:	53                   	push   ebx
c000fa7f:	83 ec 1c             	sub    esp,0x1c
c000fa82:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa86:	80 3d 60 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee60,0x0
c000fa8d:	74 0e                	je     c000fa9d <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fa8f:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fa96:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fa9d:	a1 00 dd 02 c0       	mov    eax,ds:0xc002dd00
c000faa2:	bd 02 00 00 00       	mov    ebp,0x2
c000faa7:	05 a0 00 00 00       	add    eax,0xa0
c000faac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fab0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fab4:	31 c0                	xor    eax,eax
c000fab6:	eb 0b                	jmp    c000fac3 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fab8:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fabe:	74 51                	je     c000fb11 <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fac0:	43                   	inc    ebx
c000fac1:	89 f0                	mov    eax,esi
c000fac3:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fac9:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000facf:	88 13                	mov    BYTE PTR [ebx],dl
c000fad1:	8d 70 01             	lea    esi,[eax+0x1]
c000fad4:	83 fd 18             	cmp    ebp,0x18
c000fad7:	75 df                	jne    c000fab8 <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fad9:	a8 01                	test   al,0x1
c000fadb:	75 13                	jne    c000faf0 <hwTextMode_scrollScreen(VgaText*)+0x75>
c000fadd:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fae0:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fae6:	75 d8                	jne    c000fac0 <hwTextMode_scrollScreen(VgaText*)+0x45>
c000fae8:	83 c4 1c             	add    esp,0x1c
c000faeb:	5b                   	pop    ebx
c000faec:	5e                   	pop    esi
c000faed:	5f                   	pop    edi
c000faee:	5d                   	pop    ebp
c000faef:	c3                   	ret    
c000faf0:	83 ec 08             	sub    esp,0x8
c000faf3:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000faf7:	50                   	push   eax
c000faf8:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fafc:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fb00:	50                   	push   eax
c000fb01:	e8 18 0c 00 00       	call   c001071e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb06:	83 c4 10             	add    esp,0x10
c000fb09:	88 07                	mov    BYTE PTR [edi],al
c000fb0b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb0f:	eb cf                	jmp    c000fae0 <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fb11:	45                   	inc    ebp
c000fb12:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb1a:	eb 94                	jmp    c000fab0 <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fb1c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb1c:	57                   	push   edi
c000fb1d:	80 3d 60 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee60,0x0
c000fb24:	56                   	push   esi
c000fb25:	53                   	push   ebx
c000fb26:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb2a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb2e:	75 62                	jne    c000fb92 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fb30:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb35:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb3a:	83 ec 08             	sub    esp,0x8
c000fb3d:	52                   	push   edx
c000fb3e:	50                   	push   eax
c000fb3f:	e8 da 0b 00 00       	call   c001071e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb44:	5a                   	pop    edx
c000fb45:	0f b6 c0             	movzx  eax,al
c000fb48:	59                   	pop    ecx
c000fb49:	50                   	push   eax
c000fb4a:	0f be c3             	movsx  eax,bl
c000fb4d:	50                   	push   eax
c000fb4e:	e8 71 0c 00 00       	call   c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb53:	83 c4 10             	add    esp,0x10
c000fb56:	8b 35 00 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd00
c000fb5c:	80 3d 60 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee60,0x0
c000fb63:	74 07                	je     c000fb6c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb65:	66 0f be c3          	movsx  ax,bl
c000fb69:	80 cc 02             	or     ah,0x2
c000fb6c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb70:	ba 19 00 00 00       	mov    edx,0x19
c000fb75:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fb78:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb7b:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb7e:	c1 e1 04             	shl    ecx,0x4
c000fb81:	c1 e2 04             	shl    edx,0x4
c000fb84:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb88:	01 ca                	add    edx,ecx
c000fb8a:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb8e:	5b                   	pop    ebx
c000fb8f:	5e                   	pop    esi
c000fb90:	5f                   	pop    edi
c000fb91:	c3                   	ret    
c000fb92:	b8 02 00 00 00       	mov    eax,0x2
c000fb97:	31 d2                	xor    edx,edx
c000fb99:	eb 9f                	jmp    c000fb3a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb9b <setupTextMode()>:
c000fb9b:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fba0:	83 e0 30             	and    eax,0x30
c000fba3:	66 83 f8 30          	cmp    ax,0x30
c000fba7:	75 11                	jne    c000fbba <setupTextMode()+0x1f>
c000fba9:	81 2d 00 dd 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002dd00,0x8000
c000fbb3:	c6 05 60 ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee60,0x1
c000fbba:	c7 05 98 ee 02 c0 35 fa 00 c0 	mov    DWORD PTR ds:0xc002ee98,0xc000fa35
c000fbc4:	c7 05 84 ee 02 c0 e0 f8 00 c0 	mov    DWORD PTR ds:0xc002ee84,0xc000f8e0
c000fbce:	c7 05 80 ee 02 c0 25 f9 00 c0 	mov    DWORD PTR ds:0xc002ee80,0xc000f925
c000fbd8:	c7 05 8c ee 02 c0 7b fa 00 c0 	mov    DWORD PTR ds:0xc002ee8c,0xc000fa7b
c000fbe2:	c7 05 94 ee 02 c0 91 f9 00 c0 	mov    DWORD PTR ds:0xc002ee94,0xc000f991
c000fbec:	c7 05 88 ee 02 c0 ec f9 00 c0 	mov    DWORD PTR ds:0xc002ee88,0xc000f9ec
c000fbf6:	c7 05 90 ee 02 c0 ed f9 00 c0 	mov    DWORD PTR ds:0xc002ee90,0xc000f9ed
c000fc00:	c7 05 9c ee 02 c0 1c fb 00 c0 	mov    DWORD PTR ds:0xc002ee9c,0xc000fb1c
c000fc0a:	c3                   	ret    

c000fc0b <kernel_main>:
c000fc0b:	57                   	push   edi
c000fc0c:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc11:	56                   	push   esi
c000fc12:	89 fa                	mov    edx,edi
c000fc14:	53                   	push   ebx
c000fc15:	31 f6                	xor    esi,esi
c000fc17:	83 ec 2c             	sub    esp,0x2c
c000fc1a:	89 f0                	mov    eax,esi
c000fc1c:	ee                   	out    dx,al
c000fc1d:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc22:	b0 80                	mov    al,0x80
c000fc24:	89 da                	mov    edx,ebx
c000fc26:	ee                   	out    dx,al
c000fc27:	b1 03                	mov    cl,0x3
c000fc29:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc2e:	88 c8                	mov    al,cl
c000fc30:	ee                   	out    dx,al
c000fc31:	89 f0                	mov    eax,esi
c000fc33:	89 fa                	mov    edx,edi
c000fc35:	ee                   	out    dx,al
c000fc36:	88 c8                	mov    al,cl
c000fc38:	89 da                	mov    edx,ebx
c000fc3a:	ee                   	out    dx,al
c000fc3b:	b0 c7                	mov    al,0xc7
c000fc3d:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc42:	ee                   	out    dx,al
c000fc43:	b0 0b                	mov    al,0xb
c000fc45:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc4a:	ee                   	out    dx,al
c000fc4b:	68 a4 aa 02 c0       	push   0xc002aaa4
c000fc50:	e8 f0 31 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000fc55:	e8 56 09 00 00       	call   c00105b0 <installVgaTextImplementation()>
c000fc5a:	e8 3c ff ff ff       	call   c000fb9b <setupTextMode()>
c000fc5f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc64:	05 ff 0f 00 00       	add    eax,0xfff
c000fc69:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc6e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc71:	e8 f5 03 00 00       	call   c001006b <Phys::physicalMemorySetup(unsigned int)>
c000fc76:	e8 7d 1f 00 00       	call   c0011bf8 <Virt::virtualMemorySetup()>
c000fc7b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc81:	83 c4 10             	add    esp,0x10
c000fc84:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc8a:	75 0e                	jne    c000fc9a <kernel_main+0x8f>
c000fc8c:	89 d8                	mov    eax,ebx
c000fc8e:	25 48 03 00 00       	and    eax,0x348
c000fc93:	3d 00 03 00 00       	cmp    eax,0x300
c000fc98:	74 10                	je     c000fcaa <kernel_main+0x9f>
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	68 35 c4 02 c0       	push   0xc002c435
c000fca2:	e8 5e ab 00 00       	call   c001a805 <Krnl::panic(char const*)>
c000fca7:	83 c4 10             	add    esp,0x10
c000fcaa:	83 ec 0c             	sub    esp,0xc
c000fcad:	89 1d e0 ed 02 c0    	mov    DWORD PTR ds:0xc002ede0,ebx
c000fcb3:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcb7:	53                   	push   ebx
c000fcb8:	e8 8d 21 00 00       	call   c0011e4a <VAS::VAS()>
c000fcbd:	89 1d 50 ef 02 c0    	mov    DWORD PTR ds:0xc002ef50,ebx
c000fcc3:	e8 58 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcc8:	c7 04 24 bb aa 02 c0 	mov    DWORD PTR [esp],0xc002aabb
c000fccf:	e8 71 31 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000fcd4:	e8 9e 1f 00 00       	call   c0011c77 <Virt::swappingSetup()>
c000fcd9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fce0:	e8 a1 fb ff ff       	call   c000f886 <malloc>
c000fce5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fce8:	89 c6                	mov    esi,eax
c000fcea:	e8 87 ea ff ff       	call   c000e776 <Computer::Computer()>
c000fcef:	58                   	pop    eax
c000fcf0:	89 35 c8 ed 02 c0    	mov    DWORD PTR ds:0xc002edc8,esi
c000fcf6:	5a                   	pop    edx
c000fcf7:	56                   	push   esi
c000fcf8:	68 d8 aa 02 c0       	push   0xc002aad8
c000fcfd:	e8 43 31 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000fd02:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c000fd07:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd09:	6a 00                	push   0x0
c000fd0b:	6a 00                	push   0x0
c000fd0d:	6a 00                	push   0x0
c000fd0f:	50                   	push   eax
c000fd10:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd13:	83 c4 14             	add    esp,0x14
c000fd16:	53                   	push   ebx
c000fd17:	e8 de 23 00 00       	call   c00120fa <VAS::~VAS()>
c000fd1c:	c7 04 24 eb aa 02 c0 	mov    DWORD PTR [esp],0xc002aaeb
c000fd23:	e8 dd aa 00 00       	call   c001a805 <Krnl::panic(char const*)>
c000fd28:	83 c4 30             	add    esp,0x30
c000fd2b:	5b                   	pop    ebx
c000fd2c:	5e                   	pop    esi
c000fd2d:	5f                   	pop    edi
c000fd2e:	c3                   	ret    

c000fd2f <Phys::allocateDMA(unsigned long)>:
c000fd2f:	55                   	push   ebp
c000fd30:	31 d2                	xor    edx,edx
c000fd32:	57                   	push   edi
c000fd33:	31 ed                	xor    ebp,ebp
c000fd35:	56                   	push   esi
c000fd36:	31 c9                	xor    ecx,ecx
c000fd38:	53                   	push   ebx
c000fd39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd3d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd43:	31 c0                	xor    eax,eax
c000fd45:	c1 ee 0c             	shr    esi,0xc
c000fd48:	eb 17                	jmp    c000fd61 <Phys::allocateDMA(unsigned long)+0x32>
c000fd4a:	85 c9                	test   ecx,ecx
c000fd4c:	75 04                	jne    c000fd52 <Phys::allocateDMA(unsigned long)+0x23>
c000fd4e:	89 d5                	mov    ebp,edx
c000fd50:	89 d0                	mov    eax,edx
c000fd52:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd55:	39 de                	cmp    esi,ebx
c000fd57:	74 20                	je     c000fd79 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd59:	42                   	inc    edx
c000fd5a:	89 d9                	mov    ecx,ebx
c000fd5c:	83 fa 2f             	cmp    edx,0x2f
c000fd5f:	7f 11                	jg     c000fd72 <Phys::allocateDMA(unsigned long)+0x43>
c000fd61:	80 ba 20 ee 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd11e0],0x0
c000fd68:	74 e0                	je     c000fd4a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd6a:	31 c9                	xor    ecx,ecx
c000fd6c:	42                   	inc    edx
c000fd6d:	83 fa 2f             	cmp    edx,0x2f
c000fd70:	7e ef                	jle    c000fd61 <Phys::allocateDMA(unsigned long)+0x32>
c000fd72:	5b                   	pop    ebx
c000fd73:	31 c0                	xor    eax,eax
c000fd75:	5e                   	pop    esi
c000fd76:	5f                   	pop    edi
c000fd77:	5d                   	pop    ebp
c000fd78:	c3                   	ret    
c000fd79:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd7c:	89 d7                	mov    edi,edx
c000fd7e:	4f                   	dec    edi
c000fd7f:	79 03                	jns    c000fd84 <Phys::allocateDMA(unsigned long)+0x55>
c000fd81:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd84:	c1 ff 04             	sar    edi,0x4
c000fd87:	89 c2                	mov    edx,eax
c000fd89:	c1 fa 04             	sar    edx,0x4
c000fd8c:	39 fa                	cmp    edx,edi
c000fd8e:	75 2f                	jne    c000fdbf <Phys::allocateDMA(unsigned long)+0x90>
c000fd90:	85 db                	test   ebx,ebx
c000fd92:	74 1a                	je     c000fdae <Phys::allocateDMA(unsigned long)+0x7f>
c000fd94:	be 20 ee 02 c0       	mov    esi,0xc002ee20
c000fd99:	8d 90 20 ee 02 c0    	lea    edx,[eax-0x3ffd11e0]
c000fd9f:	f7 d6                	not    esi
c000fda1:	29 c6                	sub    esi,eax
c000fda3:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fda6:	42                   	inc    edx
c000fda7:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fdaa:	39 d9                	cmp    ecx,ebx
c000fdac:	7f f5                	jg     c000fda3 <Phys::allocateDMA(unsigned long)+0x74>
c000fdae:	85 ff                	test   edi,edi
c000fdb0:	74 13                	je     c000fdc5 <Phys::allocateDMA(unsigned long)+0x96>
c000fdb2:	5b                   	pop    ebx
c000fdb3:	05 50 20 0c 00       	add    eax,0xc2050
c000fdb8:	5e                   	pop    esi
c000fdb9:	c1 e0 0c             	shl    eax,0xc
c000fdbc:	5f                   	pop    edi
c000fdbd:	5d                   	pop    ebp
c000fdbe:	c3                   	ret    
c000fdbf:	89 ea                	mov    edx,ebp
c000fdc1:	31 c9                	xor    ecx,ecx
c000fdc3:	eb a7                	jmp    c000fd6c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdc5:	5b                   	pop    ebx
c000fdc6:	c1 e0 0c             	shl    eax,0xc
c000fdc9:	5e                   	pop    esi
c000fdca:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdcf:	5f                   	pop    edi
c000fdd0:	5d                   	pop    ebp
c000fdd1:	c3                   	ret    

c000fdd2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdd6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdda:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fde0:	c1 e9 0c             	shr    ecx,0xc
c000fde3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fde8:	76 25                	jbe    c000fe0f <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdea:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdef:	c1 e8 0c             	shr    eax,0xc
c000fdf2:	8d 50 10             	lea    edx,[eax+0x10]
c000fdf5:	85 c9                	test   ecx,ecx
c000fdf7:	74 15                	je     c000fe0e <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdf9:	8d 82 20 ee 02 c0    	lea    eax,[edx-0x3ffd11e0]
c000fdff:	8d 94 11 20 ee 02 c0 	lea    edx,[ecx+edx*1-0x3ffd11e0]
c000fe06:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe09:	40                   	inc    eax
c000fe0a:	39 d0                	cmp    eax,edx
c000fe0c:	75 f8                	jne    c000fe06 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe0e:	c3                   	ret    
c000fe0f:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe15:	c1 ea 0c             	shr    edx,0xc
c000fe18:	eb db                	jmp    c000fdf5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe1a <Phys::setPageState(unsigned long, bool)>:
c000fe1a:	56                   	push   esi
c000fe1b:	ba 01 00 00 00       	mov    edx,0x1
c000fe20:	53                   	push   ebx
c000fe21:	8b 35 f8 dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dcf8
c000fe27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe2b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe2f:	89 c8                	mov    eax,ecx
c000fe31:	83 e1 07             	and    ecx,0x7
c000fe34:	c1 e8 03             	shr    eax,0x3
c000fe37:	d3 e3                	shl    ebx,cl
c000fe39:	01 c6                	add    esi,eax
c000fe3b:	d3 e2                	shl    edx,cl
c000fe3d:	f7 d2                	not    edx
c000fe3f:	20 16                	and    BYTE PTR [esi],dl
c000fe41:	03 05 f8 dc 02 c0    	add    eax,DWORD PTR ds:0xc002dcf8
c000fe47:	08 18                	or     BYTE PTR [eax],bl
c000fe49:	5b                   	pop    ebx
c000fe4a:	5e                   	pop    esi
c000fe4b:	c3                   	ret    

c000fe4c <Phys::getPageState(unsigned long)>:
c000fe4c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe50:	8b 15 f8 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dcf8
c000fe56:	89 c8                	mov    eax,ecx
c000fe58:	83 e1 07             	and    ecx,0x7
c000fe5b:	c1 e8 03             	shr    eax,0x3
c000fe5e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe62:	d3 f8                	sar    eax,cl
c000fe64:	83 e0 01             	and    eax,0x1
c000fe67:	c3                   	ret    

c000fe68 <Phys::freePage(unsigned long)>:
c000fe68:	53                   	push   ebx
c000fe69:	83 ec 08             	sub    esp,0x8
c000fe6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe70:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe76:	76 57                	jbe    c000fecf <Phys::freePage(unsigned long)+0x67>
c000fe78:	c1 eb 0c             	shr    ebx,0xc
c000fe7b:	53                   	push   ebx
c000fe7c:	e8 cb ff ff ff       	call   c000fe4c <Phys::getPageState(unsigned long)>
c000fe81:	5a                   	pop    edx
c000fe82:	84 c0                	test   al,al
c000fe84:	74 5b                	je     c000fee1 <Phys::freePage(unsigned long)+0x79>
c000fe86:	a1 10 ee 02 c0       	mov    eax,ds:0xc002ee10
c000fe8b:	48                   	dec    eax
c000fe8c:	a3 10 ee 02 c0       	mov    ds:0xc002ee10,eax
c000fe91:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe94:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe97:	c1 e0 02             	shl    eax,0x2
c000fe9a:	99                   	cdq    
c000fe9b:	f7 3d 14 ee 02 c0    	idiv   DWORD PTR ds:0xc002ee14
c000fea1:	39 05 0c ee 02 c0    	cmp    DWORD PTR ds:0xc002ee0c,eax
c000fea7:	75 13                	jne    c000febc <Phys::freePage(unsigned long)+0x54>
c000fea9:	83 ec 08             	sub    esp,0x8
c000feac:	6a 00                	push   0x0
c000feae:	53                   	push   ebx
c000feaf:	e8 66 ff ff ff       	call   c000fe1a <Phys::setPageState(unsigned long, bool)>
c000feb4:	83 c4 10             	add    esp,0x10
c000feb7:	83 c4 08             	add    esp,0x8
c000feba:	5b                   	pop    ebx
c000febb:	c3                   	ret    
c000febc:	83 ec 0c             	sub    esp,0xc
c000febf:	a3 0c ee 02 c0       	mov    ds:0xc002ee0c,eax
c000fec4:	50                   	push   eax
c000fec5:	e8 14 0a 00 00       	call   c00108de <VgaText::updateRAMUsageDisplay(int)>
c000feca:	83 c4 10             	add    esp,0x10
c000fecd:	eb da                	jmp    c000fea9 <Phys::freePage(unsigned long)+0x41>
c000fecf:	68 00 10 00 00       	push   0x1000
c000fed4:	53                   	push   ebx
c000fed5:	e8 f8 fe ff ff       	call   c000fdd2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feda:	59                   	pop    ecx
c000fedb:	5b                   	pop    ebx
c000fedc:	83 c4 08             	add    esp,0x8
c000fedf:	5b                   	pop    ebx
c000fee0:	c3                   	ret    
c000fee1:	c7 44 24 10 06 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab06
c000fee9:	83 c4 08             	add    esp,0x8
c000feec:	5b                   	pop    ebx
c000feed:	e9 13 a9 00 00       	jmp    c001a805 <Krnl::panic(char const*)>

c000fef2 <Phys::allocatePage()>:
c000fef2:	56                   	push   esi
c000fef3:	53                   	push   ebx
c000fef4:	51                   	push   ecx
c000fef5:	8b 35 04 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002ee04
c000fefb:	89 f3                	mov    ebx,esi
c000fefd:	eb 0a                	jmp    c000ff09 <Phys::allocatePage()+0x17>
c000feff:	89 1d 04 ee 02 c0    	mov    DWORD PTR ds:0xc002ee04,ebx
c000ff05:	39 de                	cmp    esi,ebx
c000ff07:	74 24                	je     c000ff2d <Phys::allocatePage()+0x3b>
c000ff09:	53                   	push   ebx
c000ff0a:	e8 3d ff ff ff       	call   c000fe4c <Phys::getPageState(unsigned long)>
c000ff0f:	5a                   	pop    edx
c000ff10:	84 c0                	test   al,al
c000ff12:	74 77                	je     c000ff8b <Phys::allocatePage()+0x99>
c000ff14:	43                   	inc    ebx
c000ff15:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff1b:	75 e2                	jne    c000feff <Phys::allocatePage()+0xd>
c000ff1d:	31 db                	xor    ebx,ebx
c000ff1f:	c7 05 04 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ee04,0x0
c000ff29:	39 de                	cmp    esi,ebx
c000ff2b:	75 dc                	jne    c000ff09 <Phys::allocatePage()+0x17>
c000ff2d:	83 ec 0c             	sub    esp,0xc
c000ff30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff35:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff38:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff3e:	e8 2f 2c 00 00       	call   c0012b72 <VAS::scanForEviction()>
c000ff43:	83 c4 10             	add    esp,0x10
c000ff46:	85 c0                	test   eax,eax
c000ff48:	75 76                	jne    c000ffc0 <Phys::allocatePage()+0xce>
c000ff4a:	83 ec 0c             	sub    esp,0xc
c000ff4d:	68 1c ab 02 c0       	push   0xc002ab1c
c000ff52:	e8 ee 2e 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c000ff57:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff5e:	e8 cc fd ff ff       	call   c000fd2f <Phys::allocateDMA(unsigned long)>
c000ff63:	83 c4 10             	add    esp,0x10
c000ff66:	85 c0                	test   eax,eax
c000ff68:	75 56                	jne    c000ffc0 <Phys::allocatePage()+0xce>
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	68 2d ab 02 c0       	push   0xc002ab2d
c000ff72:	e8 8e a8 00 00       	call   c001a805 <Krnl::panic(char const*)>
c000ff77:	83 c4 10             	add    esp,0x10
c000ff7a:	8b 1d 04 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee04
c000ff80:	53                   	push   ebx
c000ff81:	e8 c6 fe ff ff       	call   c000fe4c <Phys::getPageState(unsigned long)>
c000ff86:	5a                   	pop    edx
c000ff87:	84 c0                	test   al,al
c000ff89:	75 89                	jne    c000ff14 <Phys::allocatePage()+0x22>
c000ff8b:	6a 01                	push   0x1
c000ff8d:	53                   	push   ebx
c000ff8e:	e8 87 fe ff ff       	call   c000fe1a <Phys::setPageState(unsigned long, bool)>
c000ff93:	a1 10 ee 02 c0       	mov    eax,ds:0xc002ee10
c000ff98:	59                   	pop    ecx
c000ff99:	40                   	inc    eax
c000ff9a:	5b                   	pop    ebx
c000ff9b:	a3 10 ee 02 c0       	mov    ds:0xc002ee10,eax
c000ffa0:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffa3:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffa6:	c1 e0 02             	shl    eax,0x2
c000ffa9:	99                   	cdq    
c000ffaa:	f7 3d 14 ee 02 c0    	idiv   DWORD PTR ds:0xc002ee14
c000ffb0:	39 05 0c ee 02 c0    	cmp    DWORD PTR ds:0xc002ee0c,eax
c000ffb6:	75 0c                	jne    c000ffc4 <Phys::allocatePage()+0xd2>
c000ffb8:	a1 04 ee 02 c0       	mov    eax,ds:0xc002ee04
c000ffbd:	c1 e0 0c             	shl    eax,0xc
c000ffc0:	5a                   	pop    edx
c000ffc1:	5b                   	pop    ebx
c000ffc2:	5e                   	pop    esi
c000ffc3:	c3                   	ret    
c000ffc4:	83 ec 0c             	sub    esp,0xc
c000ffc7:	a3 0c ee 02 c0       	mov    ds:0xc002ee0c,eax
c000ffcc:	50                   	push   eax
c000ffcd:	e8 0c 09 00 00       	call   c00108de <VgaText::updateRAMUsageDisplay(int)>
c000ffd2:	83 c4 10             	add    esp,0x10
c000ffd5:	eb e1                	jmp    c000ffb8 <Phys::allocatePage()+0xc6>

c000ffd7 <Phys::allocateContiguousPages(int)>:
c000ffd7:	57                   	push   edi
c000ffd8:	56                   	push   esi
c000ffd9:	53                   	push   ebx
c000ffda:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffde:	fa                   	cli    
c000ffdf:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c000ffe5:	31 db                	xor    ebx,ebx
c000ffe7:	85 db                	test   ebx,ebx
c000ffe9:	75 11                	jne    c000fffc <Phys::allocateContiguousPages(int)+0x25>
c000ffeb:	e8 02 ff ff ff       	call   c000fef2 <Phys::allocatePage()>
c000fff0:	83 fe 01             	cmp    esi,0x1
c000fff3:	89 c7                	mov    edi,eax
c000fff5:	74 21                	je     c0010018 <Phys::allocateContiguousPages(int)+0x41>
c000fff7:	bb 01 00 00 00       	mov    ebx,0x1
c000fffc:	e8 f1 fe ff ff       	call   c000fef2 <Phys::allocatePage()>
c0010001:	89 da                	mov    edx,ebx
c0010003:	c1 e2 0c             	shl    edx,0xc
c0010006:	01 fa                	add    edx,edi
c0010008:	39 c2                	cmp    edx,eax
c001000a:	74 20                	je     c001002c <Phys::allocateContiguousPages(int)+0x55>
c001000c:	bb 01 00 00 00       	mov    ebx,0x1
c0010011:	89 c7                	mov    edi,eax
c0010013:	83 fe 01             	cmp    esi,0x1
c0010016:	75 e4                	jne    c000fffc <Phys::allocateContiguousPages(int)+0x25>
c0010018:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001001d:	48                   	dec    eax
c001001e:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c0010023:	75 01                	jne    c0010026 <Phys::allocateContiguousPages(int)+0x4f>
c0010025:	fb                   	sti    
c0010026:	89 f8                	mov    eax,edi
c0010028:	5b                   	pop    ebx
c0010029:	5e                   	pop    esi
c001002a:	5f                   	pop    edi
c001002b:	c3                   	ret    
c001002c:	43                   	inc    ebx
c001002d:	39 f3                	cmp    ebx,esi
c001002f:	75 b6                	jne    c000ffe7 <Phys::allocateContiguousPages(int)+0x10>
c0010031:	eb e5                	jmp    c0010018 <Phys::allocateContiguousPages(int)+0x41>

c0010033 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010033:	56                   	push   esi
c0010034:	53                   	push   ebx
c0010035:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010039:	39 1d 08 ee 02 c0    	cmp    DWORD PTR ds:0xc002ee08,ebx
c001003f:	73 06                	jae    c0010047 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010041:	89 1d 08 ee 02 c0    	mov    DWORD PTR ds:0xc002ee08,ebx
c0010047:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001004b:	c1 eb 0c             	shr    ebx,0xc
c001004e:	c1 e8 0c             	shr    eax,0xc
c0010051:	39 d8                	cmp    eax,ebx
c0010053:	73 13                	jae    c0010068 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010055:	6a 00                	push   0x0
c0010057:	8d 70 01             	lea    esi,[eax+0x1]
c001005a:	50                   	push   eax
c001005b:	e8 ba fd ff ff       	call   c000fe1a <Phys::setPageState(unsigned long, bool)>
c0010060:	5a                   	pop    edx
c0010061:	89 f0                	mov    eax,esi
c0010063:	59                   	pop    ecx
c0010064:	39 f3                	cmp    ebx,esi
c0010066:	75 ed                	jne    c0010055 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010068:	5b                   	pop    ebx
c0010069:	5e                   	pop    esi
c001006a:	c3                   	ret    

c001006b <Phys::physicalMemorySetup(unsigned int)>:
c001006b:	55                   	push   ebp
c001006c:	57                   	push   edi
c001006d:	56                   	push   esi
c001006e:	53                   	push   ebx
c001006f:	31 db                	xor    ebx,ebx
c0010071:	83 ec 40             	sub    esp,0x40
c0010074:	6a 30                	push   0x30
c0010076:	6a 00                	push   0x0
c0010078:	68 20 ee 02 c0       	push   0xc002ee20
c001007d:	e8 1a 07 ff ff       	call   c000079c <memset>
c0010082:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010086:	25 00 f0 ff ff       	and    eax,0xfffff000
c001008b:	05 00 10 00 00       	add    eax,0x1000
c0010090:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010094:	83 c4 10             	add    esp,0x10
c0010097:	83 ec 08             	sub    esp,0x8
c001009a:	6a 01                	push   0x1
c001009c:	53                   	push   ebx
c001009d:	43                   	inc    ebx
c001009e:	e8 77 fd ff ff       	call   c000fe1a <Phys::setPageState(unsigned long, bool)>
c00100a3:	83 c4 10             	add    esp,0x10
c00100a6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100ac:	75 e9                	jne    c0010097 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100ae:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100b5:	66 85 c0             	test   ax,ax
c00100b8:	0f 84 8e 01 00 00    	je     c001024c <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100c2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100ce:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100d7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100df:	eb 15                	jmp    c00100f6 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100e1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100e5:	83 c3 18             	add    ebx,0x18
c00100e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100ec:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100f0:	0f 84 66 01 00 00    	je     c001025c <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100f6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100f9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010103:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010107:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010109:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001010c:	01 f0                	add    eax,esi
c001010e:	55                   	push   ebp
c001010f:	11 fa                	adc    edx,edi
c0010111:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010115:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010119:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001011d:	56                   	push   esi
c001011e:	68 68 ab 02 c0       	push   0xc002ab68
c0010123:	e8 1d 2d 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0010128:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001012c:	83 c4 10             	add    esp,0x10
c001012f:	09 f8                	or     eax,edi
c0010131:	0f 85 25 01 00 00    	jne    c001025c <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010137:	4d                   	dec    ebp
c0010138:	75 a7                	jne    c00100e1 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001013a:	ba 00 00 08 00       	mov    edx,0x80000
c001013f:	89 c1                	mov    ecx,eax
c0010141:	39 f2                	cmp    edx,esi
c0010143:	19 f9                	sbb    ecx,edi
c0010145:	0f 82 a7 00 00 00    	jb     c00101f2 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001014b:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001014f:	89 c1                	mov    ecx,eax
c0010151:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010155:	0f 83 97 00 00 00    	jae    c00101f2 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001015b:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010160:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010164:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010168:	39 fa                	cmp    edx,edi
c001016a:	19 e8                	sbb    eax,ebp
c001016c:	0f 82 14 01 00 00    	jb     c0010286 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010172:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010176:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001017a:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010180:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010185:	83 d5 ff             	adc    ebp,0xffffffff
c0010188:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001018c:	31 c0                	xor    eax,eax
c001018e:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010192:	39 fa                	cmp    edx,edi
c0010194:	89 c1                	mov    ecx,eax
c0010196:	19 e9                	sbb    ecx,ebp
c0010198:	0f 83 43 ff ff ff    	jae    c00100e1 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001019e:	be 00 00 08 00       	mov    esi,0x80000
c00101a3:	50                   	push   eax
c00101a4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101a8:	57                   	push   edi
c00101a9:	56                   	push   esi
c00101aa:	68 8c ab 02 c0       	push   0xc002ab8c
c00101af:	e8 91 2c 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00101b4:	5a                   	pop    edx
c00101b5:	59                   	pop    ecx
c00101b6:	57                   	push   edi
c00101b7:	56                   	push   esi
c00101b8:	e8 76 fe ff ff       	call   c0010033 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101bd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101c5:	83 c4 0c             	add    esp,0xc
c00101c8:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101cc:	03 05 14 ee 02 c0    	add    eax,DWORD PTR ds:0xc002ee14
c00101d2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101d9:	a3 14 ee 02 c0       	mov    ds:0xc002ee14,eax
c00101de:	52                   	push   edx
c00101df:	50                   	push   eax
c00101e0:	68 49 ab 02 c0       	push   0xc002ab49
c00101e5:	e8 5b 2c 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00101ea:	83 c4 10             	add    esp,0x10
c00101ed:	e9 ef fe ff ff       	jmp    c00100e1 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101f2:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101fe:	39 ea                	cmp    edx,ebp
c0010200:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010204:	0f 82 d7 fe ff ff    	jb     c00100e1 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001020a:	ba ff 1f 00 00       	mov    edx,0x1fff
c001020f:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010213:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010217:	0f 83 c4 fe ff ff    	jae    c00100e1 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001021d:	39 ee                	cmp    esi,ebp
c001021f:	89 f8                	mov    eax,edi
c0010221:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010225:	0f 83 78 ff ff ff    	jae    c00101a3 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001022b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001022f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010233:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010237:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001023b:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001023f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010243:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010247:	e9 57 ff ff ff       	jmp    c00101a3 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001024c:	83 ec 0c             	sub    esp,0xc
c001024f:	68 3b ab 02 c0       	push   0xc002ab3b
c0010254:	e8 ac a5 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0010259:	83 c4 10             	add    esp,0x10
c001025c:	bb 40 01 00 00       	mov    ebx,0x140
c0010261:	83 ec 08             	sub    esp,0x8
c0010264:	6a 00                	push   0x0
c0010266:	53                   	push   ebx
c0010267:	43                   	inc    ebx
c0010268:	e8 ad fb ff ff       	call   c000fe1a <Phys::setPageState(unsigned long, bool)>
c001026d:	ff 05 14 ee 02 c0    	inc    DWORD PTR ds:0xc002ee14
c0010273:	83 c4 10             	add    esp,0x10
c0010276:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001027c:	75 e3                	jne    c0010261 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001027e:	83 c4 3c             	add    esp,0x3c
c0010281:	5b                   	pop    ebx
c0010282:	5e                   	pop    esi
c0010283:	5f                   	pop    edi
c0010284:	5d                   	pop    ebp
c0010285:	c3                   	ret    
c0010286:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001028e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010296:	e9 d7 fe ff ff       	jmp    c0010172 <Phys::physicalMemorySetup(unsigned int)+0x107>
c001029b:	90                   	nop

c001029c <Pipe::isAtty()>:
c001029c:	31 c0                	xor    eax,eax
c001029e:	c3                   	ret    
c001029f:	90                   	nop

c00102a0 <Pipe::~Pipe()>:
c00102a0:	83 ec 0c             	sub    esp,0xc
c00102a3:	ba f8 ab 02 c0       	mov    edx,0xc002abf8
c00102a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ac:	89 10                	mov    DWORD PTR [eax],edx
c00102ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b2:	83 ec 0c             	sub    esp,0xc
c00102b5:	50                   	push   eax
c00102b6:	e8 1d 15 00 00       	call   c00117d8 <UnixFile::~UnixFile()>
c00102bb:	83 c4 10             	add    esp,0x10
c00102be:	90                   	nop
c00102bf:	83 c4 0c             	add    esp,0xc
c00102c2:	c3                   	ret    
c00102c3:	90                   	nop

c00102c4 <Pipe::~Pipe()>:
c00102c4:	83 ec 0c             	sub    esp,0xc
c00102c7:	83 ec 0c             	sub    esp,0xc
c00102ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ce:	e8 cd ff ff ff       	call   c00102a0 <Pipe::~Pipe()>
c00102d3:	83 c4 10             	add    esp,0x10
c00102d6:	83 ec 08             	sub    esp,0x8
c00102d9:	6a 20                	push   0x20
c00102db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102df:	e8 81 2a 00 00       	call   c0012d65 <operator delete(void*, unsigned long)>
c00102e4:	83 c4 10             	add    esp,0x10
c00102e7:	83 c4 0c             	add    esp,0xc
c00102ea:	c3                   	ret    
c00102eb:	90                   	nop

c00102ec <Pipe::read(unsigned long long, void*, int*)>:
c00102ec:	55                   	push   ebp
c00102ed:	57                   	push   edi
c00102ee:	56                   	push   esi
c00102ef:	53                   	push   ebx
c00102f0:	83 ec 1c             	sub    esp,0x1c
c00102f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102ff:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010302:	89 c8                	mov    eax,ecx
c0010304:	99                   	cdq    
c0010305:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010309:	74 24                	je     c001032f <Pipe::read(unsigned long long, void*, int*)+0x43>
c001030b:	39 f9                	cmp    ecx,edi
c001030d:	89 d1                	mov    ecx,edx
c001030f:	19 f1                	sbb    ecx,esi
c0010311:	73 1c                	jae    c001032f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010313:	fa                   	cli    
c0010314:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001031a:	e8 e7 e0 00 00       	call   c001e406 <schedule()>
c001031f:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0010324:	48                   	dec    eax
c0010325:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001032a:	75 d3                	jne    c00102ff <Pipe::read(unsigned long long, void*, int*)+0x13>
c001032c:	fb                   	sti    
c001032d:	eb d0                	jmp    c00102ff <Pipe::read(unsigned long long, void*, int*)+0x13>
c001032f:	39 f8                	cmp    eax,edi
c0010331:	89 d1                	mov    ecx,edx
c0010333:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010337:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001033b:	19 f1                	sbb    ecx,esi
c001033d:	73 08                	jae    c0010347 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c001033f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010343:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010347:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001034a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001034d:	29 c6                	sub    esi,eax
c001034f:	89 f1                	mov    ecx,esi
c0010351:	c1 f9 1f             	sar    ecx,0x1f
c0010354:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010358:	89 ca                	mov    edx,ecx
c001035a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001035e:	19 d1                	sbb    ecx,edx
c0010360:	73 04                	jae    c0010366 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0010362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010366:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001036a:	89 fd                	mov    ebp,edi
c001036c:	29 f5                	sub    ebp,esi
c001036e:	85 f6                	test   esi,esi
c0010370:	74 12                	je     c0010384 <Pipe::read(unsigned long long, void*, int*)+0x98>
c0010372:	52                   	push   edx
c0010373:	56                   	push   esi
c0010374:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010377:	50                   	push   eax
c0010378:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001037c:	e8 e7 03 ff ff       	call   c0000768 <memcpy>
c0010381:	83 c4 10             	add    esp,0x10
c0010384:	85 ed                	test   ebp,ebp
c0010386:	74 12                	je     c001039a <Pipe::read(unsigned long long, void*, int*)+0xae>
c0010388:	50                   	push   eax
c0010389:	55                   	push   ebp
c001038a:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001038d:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010391:	56                   	push   esi
c0010392:	e8 d1 03 ff ff       	call   c0000768 <memcpy>
c0010397:	83 c4 10             	add    esp,0x10
c001039a:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001039d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103a0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103a3:	99                   	cdq    
c00103a4:	89 f7                	mov    edi,esi
c00103a6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103aa:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103ae:	c1 ff 1f             	sar    edi,0x1f
c00103b1:	57                   	push   edi
c00103b2:	56                   	push   esi
c00103b3:	52                   	push   edx
c00103b4:	50                   	push   eax
c00103b5:	e8 7a 6e 01 00       	call   c0027234 <__umoddi3>
c00103ba:	83 c4 10             	add    esp,0x10
c00103bd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103c0:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103c5:	75 10                	jne    c00103d7 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c00103c7:	83 ec 0c             	sub    esp,0xc
c00103ca:	68 b5 ab 02 c0       	push   0xc002abb5
c00103cf:	e8 31 a4 00 00       	call   c001a805 <Krnl::panic(char const*)>
c00103d4:	83 c4 10             	add    esp,0x10
c00103d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103df:	89 10                	mov    DWORD PTR [eax],edx
c00103e1:	83 c4 1c             	add    esp,0x1c
c00103e4:	31 c0                	xor    eax,eax
c00103e6:	5b                   	pop    ebx
c00103e7:	5e                   	pop    esi
c00103e8:	5f                   	pop    edi
c00103e9:	5d                   	pop    ebp
c00103ea:	c3                   	ret    
c00103eb:	90                   	nop

c00103ec <Pipe::write(unsigned long long, void*, int*)>:
c00103ec:	55                   	push   ebp
c00103ed:	57                   	push   edi
c00103ee:	56                   	push   esi
c00103ef:	53                   	push   ebx
c00103f0:	83 ec 1c             	sub    esp,0x1c
c00103f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103f7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0010402:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010405:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010408:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001040c:	89 de                	mov    esi,ebx
c001040e:	89 df                	mov    edi,ebx
c0010410:	c1 ff 1f             	sar    edi,0x1f
c0010413:	01 c6                	add    esi,eax
c0010415:	89 c8                	mov    eax,ecx
c0010417:	11 d7                	adc    edi,edx
c0010419:	99                   	cdq    
c001041a:	39 f1                	cmp    ecx,esi
c001041c:	89 d0                	mov    eax,edx
c001041e:	19 f8                	sbb    eax,edi
c0010420:	b8 01 00 00 00       	mov    eax,0x1
c0010425:	0f 82 80 00 00 00    	jb     c00104ab <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001042b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001042e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010431:	01 d8                	add    eax,ebx
c0010433:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010437:	99                   	cdq    
c0010438:	f7 f9                	idiv   ecx
c001043a:	29 d1                	sub    ecx,edx
c001043c:	89 d7                	mov    edi,edx
c001043e:	89 c8                	mov    eax,ecx
c0010440:	99                   	cdq    
c0010441:	39 ce                	cmp    esi,ecx
c0010443:	19 d3                	sbb    ebx,edx
c0010445:	bb 00 00 00 00       	mov    ebx,0x0
c001044a:	72 04                	jb     c0010450 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001044c:	89 f3                	mov    ebx,esi
c001044e:	29 cb                	sub    ebx,ecx
c0010450:	89 f1                	mov    ecx,esi
c0010452:	29 d9                	sub    ecx,ebx
c0010454:	74 1a                	je     c0010470 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010456:	52                   	push   edx
c0010457:	51                   	push   ecx
c0010458:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001045c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010460:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010463:	57                   	push   edi
c0010464:	e8 ff 02 ff ff       	call   c0000768 <memcpy>
c0010469:	83 c4 10             	add    esp,0x10
c001046c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010470:	85 db                	test   ebx,ebx
c0010472:	74 12                	je     c0010486 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010474:	50                   	push   eax
c0010475:	53                   	push   ebx
c0010476:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001047a:	51                   	push   ecx
c001047b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001047e:	e8 e5 02 ff ff       	call   c0000768 <memcpy>
c0010483:	83 c4 10             	add    esp,0x10
c0010486:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010489:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001048e:	75 10                	jne    c00104a0 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010490:	83 ec 0c             	sub    esp,0xc
c0010493:	68 d1 ab 02 c0       	push   0xc002abd1
c0010498:	e8 68 a3 00 00       	call   c001a805 <Krnl::panic(char const*)>
c001049d:	83 c4 10             	add    esp,0x10
c00104a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104a4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104a7:	89 38                	mov    DWORD PTR [eax],edi
c00104a9:	31 c0                	xor    eax,eax
c00104ab:	83 c4 1c             	add    esp,0x1c
c00104ae:	5b                   	pop    ebx
c00104af:	5e                   	pop    esi
c00104b0:	5f                   	pop    edi
c00104b1:	5d                   	pop    ebp
c00104b2:	c3                   	ret    
c00104b3:	90                   	nop

c00104b4 <Pipe::Pipe(int)>:
c00104b4:	83 ec 0c             	sub    esp,0xc
c00104b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104bb:	83 ec 08             	sub    esp,0x8
c00104be:	6a 00                	push   0x0
c00104c0:	50                   	push   eax
c00104c1:	e8 30 11 00 00       	call   c00115f6 <UnixFile::UnixFile(int)>
c00104c6:	83 c4 10             	add    esp,0x10
c00104c9:	ba f8 ab 02 c0       	mov    edx,0xc002abf8
c00104ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d2:	89 10                	mov    DWORD PTR [eax],edx
c00104d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104dc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ee:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104f9:	83 ec 0c             	sub    esp,0xc
c00104fc:	50                   	push   eax
c00104fd:	e8 84 f3 ff ff       	call   c000f886 <malloc>
c0010502:	83 c4 10             	add    esp,0x10
c0010505:	89 c2                	mov    edx,eax
c0010507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001050e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010512:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010516:	90                   	nop
c0010517:	83 c4 0c             	add    esp,0xc
c001051a:	c3                   	ret    
c001051b:	90                   	nop

c001051c <VgaText::isAtty()>:
c001051c:	b0 01                	mov    al,0x1
c001051e:	c3                   	ret    
c001051f:	90                   	nop

c0010520 <VgaText::~VgaText()>:
c0010520:	83 ec 0c             	sub    esp,0xc
c0010523:	ba b4 ac 02 c0       	mov    edx,0xc002acb4
c0010528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052c:	89 10                	mov    DWORD PTR [eax],edx
c001052e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010532:	83 ec 0c             	sub    esp,0xc
c0010535:	50                   	push   eax
c0010536:	e8 9d 12 00 00       	call   c00117d8 <UnixFile::~UnixFile()>
c001053b:	83 c4 10             	add    esp,0x10
c001053e:	90                   	nop
c001053f:	83 c4 0c             	add    esp,0xc
c0010542:	c3                   	ret    
c0010543:	90                   	nop

c0010544 <VgaText::~VgaText()>:
c0010544:	83 ec 0c             	sub    esp,0xc
c0010547:	83 ec 0c             	sub    esp,0xc
c001054a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001054e:	e8 cd ff ff ff       	call   c0010520 <VgaText::~VgaText()>
c0010553:	83 c4 10             	add    esp,0x10
c0010556:	83 ec 08             	sub    esp,0x8
c0010559:	68 c4 02 00 00       	push   0x2c4
c001055e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010562:	e8 fe 27 00 00       	call   c0012d65 <operator delete(void*, unsigned long)>
c0010567:	83 c4 10             	add    esp,0x10
c001056a:	83 c4 0c             	add    esp,0xc
c001056d:	c3                   	ret    

c001056e <VgaText::read(unsigned long long, void*, int*)>:
c001056e:	83 ec 10             	sub    esp,0x10
c0010571:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010575:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010579:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001057d:	e8 86 5d 00 00       	call   c0016308 <readKeyboard(VgaText*, char*, unsigned long)>
c0010582:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010586:	89 02                	mov    DWORD PTR [edx],eax
c0010588:	31 c0                	xor    eax,eax
c001058a:	83 c4 1c             	add    esp,0x1c
c001058d:	c3                   	ret    

c001058e <setTerminalScrollLock(bool)>:
c001058e:	c3                   	ret    

c001058f <addToTerminalCycle(VgaText*)>:
c001058f:	8b 15 a0 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002eea0
c0010595:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010599:	85 d2                	test   edx,edx
c001059b:	75 09                	jne    c00105a6 <addToTerminalCycle(VgaText*)+0x17>
c001059d:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c00105a0:	a3 a0 ee 02 c0       	mov    ds:0xc002eea0,eax
c00105a5:	c3                   	ret    
c00105a6:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00105a9:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00105ac:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00105af:	c3                   	ret    

c00105b0 <installVgaTextImplementation()>:
c00105b0:	83 ec 10             	sub    esp,0x10
c00105b3:	6a 20                	push   0x20
c00105b5:	6a 00                	push   0x0
c00105b7:	68 80 ee 02 c0       	push   0xc002ee80
c00105bc:	e8 db 01 ff ff       	call   c000079c <memset>
c00105c1:	83 c4 1c             	add    esp,0x1c
c00105c4:	c3                   	ret    

c00105c5 <scrollTerminalScrollLock(int)>:
c00105c5:	c3                   	ret    

c00105c6 <VgaText::load()>:
c00105c6:	53                   	push   ebx
c00105c7:	31 c0                	xor    eax,eax
c00105c9:	83 ec 58             	sub    esp,0x58
c00105cc:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105d0:	89 e2                	mov    edx,esp
c00105d2:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105d6:	40                   	inc    eax
c00105d7:	83 f8 50             	cmp    eax,0x50
c00105da:	75 f6                	jne    c00105d2 <VgaText::load()+0xc>
c00105dc:	31 c0                	xor    eax,eax
c00105de:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00105e5:	84 c9                	test   cl,cl
c00105e7:	74 06                	je     c00105ef <VgaText::load()+0x29>
c00105e9:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105ec:	40                   	inc    eax
c00105ed:	eb ef                	jmp    c00105de <VgaText::load()+0x18>
c00105ef:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00105f2:	85 c0                	test   eax,eax
c00105f4:	74 09                	je     c00105ff <VgaText::load()+0x39>
c00105f6:	51                   	push   ecx
c00105f7:	51                   	push   ecx
c00105f8:	52                   	push   edx
c00105f9:	53                   	push   ebx
c00105fa:	ff d0                	call   eax
c00105fc:	83 c4 10             	add    esp,0x10
c00105ff:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010602:	85 c0                	test   eax,eax
c0010604:	74 09                	je     c001060f <VgaText::load()+0x49>
c0010606:	83 ec 0c             	sub    esp,0xc
c0010609:	53                   	push   ebx
c001060a:	ff d0                	call   eax
c001060c:	83 c4 10             	add    esp,0x10
c001060f:	83 c4 58             	add    esp,0x58
c0010612:	5b                   	pop    ebx
c0010613:	c3                   	ret    

c0010614 <VgaText::updateCursor()>:
c0010614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010618:	39 05 a4 ee 02 c0    	cmp    DWORD PTR ds:0xc002eea4,eax
c001061e:	75 09                	jne    c0010629 <VgaText::updateCursor()+0x15>
c0010620:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010623:	85 c0                	test   eax,eax
c0010625:	74 02                	je     c0010629 <VgaText::updateCursor()+0x15>
c0010627:	ff e0                	jmp    eax
c0010629:	c3                   	ret    

c001062a <VgaText::showCursor(bool)>:
c001062a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001062e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010632:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c0010635:	c3                   	ret    

c0010636 <VgaText::disableBlink(bool)>:
c0010636:	56                   	push   esi
c0010637:	53                   	push   ebx
c0010638:	51                   	push   ecx
c0010639:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001063d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010641:	39 1d a4 ee 02 c0    	cmp    DWORD PTR ds:0xc002eea4,ebx
c0010647:	75 15                	jne    c001065e <VgaText::disableBlink(bool)+0x28>
c0010649:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c001064c:	85 c0                	test   eax,eax
c001064e:	74 0e                	je     c001065e <VgaText::disableBlink(bool)+0x28>
c0010650:	89 f1                	mov    ecx,esi
c0010652:	52                   	push   edx
c0010653:	52                   	push   edx
c0010654:	0f b6 d1             	movzx  edx,cl
c0010657:	52                   	push   edx
c0010658:	53                   	push   ebx
c0010659:	ff d0                	call   eax
c001065b:	83 c4 10             	add    esp,0x10
c001065e:	89 f0                	mov    eax,esi
c0010660:	83 f0 01             	xor    eax,0x1
c0010663:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c0010666:	58                   	pop    eax
c0010667:	5b                   	pop    ebx
c0010668:	5e                   	pop    esi
c0010669:	c3                   	ret    

c001066a <VgaText::doANSI_SGR(int)>:
c001066a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001066e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010672:	85 d2                	test   edx,edx
c0010674:	75 0b                	jne    c0010681 <VgaText::doANSI_SGR(int)+0x17>
c0010676:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010679:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001067c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001067f:	eb 59                	jmp    c00106da <VgaText::doANSI_SGR(int)+0x70>
c0010681:	83 fa 07             	cmp    edx,0x7
c0010684:	75 0b                	jne    c0010691 <VgaText::doANSI_SGR(int)+0x27>
c0010686:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010689:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001068c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001068f:	eb 49                	jmp    c00106da <VgaText::doANSI_SGR(int)+0x70>
c0010691:	83 fa 1b             	cmp    edx,0x1b
c0010694:	74 e0                	je     c0010676 <VgaText::doANSI_SGR(int)+0xc>
c0010696:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010699:	83 f9 07             	cmp    ecx,0x7
c001069c:	77 09                	ja     c00106a7 <VgaText::doANSI_SGR(int)+0x3d>
c001069e:	8b 14 8d 20 dd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd22e0]
c00106a5:	eb 20                	jmp    c00106c7 <VgaText::doANSI_SGR(int)+0x5d>
c00106a7:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106aa:	83 f9 07             	cmp    ecx,0x7
c00106ad:	77 09                	ja     c00106b8 <VgaText::doANSI_SGR(int)+0x4e>
c00106af:	8b 14 8d 20 dd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd22e0]
c00106b6:	eb 22                	jmp    c00106da <VgaText::doANSI_SGR(int)+0x70>
c00106b8:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106bb:	83 f9 07             	cmp    ecx,0x7
c00106be:	77 0b                	ja     c00106cb <VgaText::doANSI_SGR(int)+0x61>
c00106c0:	8b 14 95 d8 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2428]
c00106c7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106ca:	c3                   	ret    
c00106cb:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106ce:	83 f9 07             	cmp    ecx,0x7
c00106d1:	77 0a                	ja     c00106dd <VgaText::doANSI_SGR(int)+0x73>
c00106d3:	8b 14 95 b0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2450]
c00106da:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106dd:	c3                   	ret    

c00106de <VgaText::setDefaultBgColour(VgaColour)>:
c00106de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106e6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00106e9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106ec:	c3                   	ret    
c00106ed:	90                   	nop

c00106ee <VgaText::setDefaultFgColour(VgaColour)>:
c00106ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106f6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00106f9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106fc:	c3                   	ret    
c00106fd:	90                   	nop

c00106fe <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00106fe:	53                   	push   ebx
c00106ff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010703:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010707:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001070b:	51                   	push   ecx
c001070c:	e8 cd ff ff ff       	call   c00106de <VgaText::setDefaultBgColour(VgaColour)>
c0010711:	58                   	pop    eax
c0010712:	5a                   	pop    edx
c0010713:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010717:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001071b:	5b                   	pop    ebx
c001071c:	eb d0                	jmp    c00106ee <VgaText::setDefaultFgColour(VgaColour)>

c001071e <VgaText::combineColours(unsigned char, unsigned char)>:
c001071e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010722:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010727:	83 e0 0f             	and    eax,0xf
c001072a:	c1 e2 04             	shl    edx,0x4
c001072d:	09 d0                	or     eax,edx
c001072f:	c3                   	ret    

c0010730 <VgaText::scrollScreen()>:
c0010730:	55                   	push   ebp
c0010731:	b9 01 00 00 00       	mov    ecx,0x1
c0010736:	57                   	push   edi
c0010737:	56                   	push   esi
c0010738:	53                   	push   ebx
c0010739:	83 ec 0c             	sub    esp,0xc
c001073c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010740:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010746:	31 ff                	xor    edi,edi
c0010748:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001074b:	83 f9 17             	cmp    ecx,0x17
c001074e:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010751:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010758:	75 27                	jne    c0010781 <VgaText::scrollScreen()+0x51>
c001075a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001075d:	01 f5                	add    ebp,esi
c001075f:	f7 c7 01 00 00 00    	test   edi,0x1
c0010765:	74 16                	je     c001077d <VgaText::scrollScreen()+0x4d>
c0010767:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001076b:	50                   	push   eax
c001076c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010770:	50                   	push   eax
c0010771:	e8 a8 ff ff ff       	call   c001071e <VgaText::combineColours(unsigned char, unsigned char)>
c0010776:	5a                   	pop    edx
c0010777:	5a                   	pop    edx
c0010778:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c001077b:	eb 04                	jmp    c0010781 <VgaText::scrollScreen()+0x51>
c001077d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010781:	47                   	inc    edi
c0010782:	46                   	inc    esi
c0010783:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010789:	75 bd                	jne    c0010748 <VgaText::scrollScreen()+0x18>
c001078b:	41                   	inc    ecx
c001078c:	83 f9 18             	cmp    ecx,0x18
c001078f:	75 af                	jne    c0010740 <VgaText::scrollScreen()+0x10>
c0010791:	39 1d a4 ee 02 c0    	cmp    DWORD PTR ds:0xc002eea4,ebx
c0010797:	75 1b                	jne    c00107b4 <VgaText::scrollScreen()+0x84>
c0010799:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001079d:	74 05                	je     c00107a4 <VgaText::scrollScreen()+0x74>
c001079f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00107a2:	eb 10                	jmp    c00107b4 <VgaText::scrollScreen()+0x84>
c00107a4:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00107a7:	85 c0                	test   eax,eax
c00107a9:	74 09                	je     c00107b4 <VgaText::scrollScreen()+0x84>
c00107ab:	83 ec 0c             	sub    esp,0xc
c00107ae:	53                   	push   ebx
c00107af:	ff d0                	call   eax
c00107b1:	83 c4 10             	add    esp,0x10
c00107b4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107b8:	83 c4 0c             	add    esp,0xc
c00107bb:	5b                   	pop    ebx
c00107bc:	5e                   	pop    esi
c00107bd:	5f                   	pop    edi
c00107be:	5d                   	pop    ebp
c00107bf:	e9 50 fe ff ff       	jmp    c0010614 <VgaText::updateCursor()>

c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107c9:	c1 e0 08             	shl    eax,0x8
c00107cc:	89 c2                	mov    edx,eax
c00107ce:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107d3:	09 d0                	or     eax,edx
c00107d5:	c3                   	ret    

c00107d6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107d6:	56                   	push   esi
c00107d7:	53                   	push   ebx
c00107d8:	51                   	push   ecx
c00107d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107e2:	50                   	push   eax
c00107e3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107e8:	50                   	push   eax
c00107e9:	e8 30 ff ff ff       	call   c001071e <VgaText::combineColours(unsigned char, unsigned char)>
c00107ee:	5b                   	pop    ebx
c00107ef:	0f b6 c0             	movzx  eax,al
c00107f2:	5e                   	pop    esi
c00107f3:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107f8:	50                   	push   eax
c00107f9:	53                   	push   ebx
c00107fa:	e8 c5 ff ff ff       	call   c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>
c00107ff:	5a                   	pop    edx
c0010800:	5e                   	pop    esi
c0010801:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010804:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001080a:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001080e:	0f b7 d2             	movzx  edx,dx
c0010811:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010815:	39 0d a4 ee 02 c0    	cmp    DWORD PTR ds:0xc002eea4,ecx
c001081b:	75 10                	jne    c001082d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001081d:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010820:	85 c0                	test   eax,eax
c0010822:	74 09                	je     c001082d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010824:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010828:	5a                   	pop    edx
c0010829:	5b                   	pop    ebx
c001082a:	5e                   	pop    esi
c001082b:	ff e0                	jmp    eax
c001082d:	58                   	pop    eax
c001082e:	5b                   	pop    ebx
c001082f:	5e                   	pop    esi
c0010830:	c3                   	ret    
c0010831:	90                   	nop

c0010832 <VgaText::getCursorX()>:
c0010832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010836:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010839:	c3                   	ret    

c001083a <VgaText::getCursorY()>:
c001083a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001083e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010841:	c3                   	ret    

c0010842 <VgaText::setCursor(int, int)>:
c0010842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010846:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001084a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001084d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010851:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010854:	e9 bb fd ff ff       	jmp    c0010614 <VgaText::updateCursor()>
c0010859:	90                   	nop

c001085a <VgaText::setCursorX(int)>:
c001085a:	83 ec 10             	sub    esp,0x10
c001085d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010861:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010868:	50                   	push   eax
c0010869:	e8 d4 ff ff ff       	call   c0010842 <VgaText::setCursor(int, int)>
c001086e:	83 c4 1c             	add    esp,0x1c
c0010871:	c3                   	ret    

c0010872 <VgaText::setCursorY(int)>:
c0010872:	83 ec 10             	sub    esp,0x10
c0010875:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010879:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001087d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010880:	50                   	push   eax
c0010881:	e8 bc ff ff ff       	call   c0010842 <VgaText::setCursor(int, int)>
c0010886:	83 c4 1c             	add    esp,0x1c
c0010889:	c3                   	ret    

c001088a <VgaText::incrementCursor(bool)>:
c001088a:	56                   	push   esi
c001088b:	53                   	push   ebx
c001088c:	51                   	push   ecx
c001088d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010891:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010895:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010898:	40                   	inc    eax
c0010899:	83 f8 50             	cmp    eax,0x50
c001089c:	74 05                	je     c00108a3 <VgaText::incrementCursor(bool)+0x19>
c001089e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00108a1:	eb 24                	jmp    c00108c7 <VgaText::incrementCursor(bool)+0x3d>
c00108a3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00108a6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108ad:	8d 50 01             	lea    edx,[eax+0x1]
c00108b0:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00108b3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00108b6:	75 0f                	jne    c00108c7 <VgaText::incrementCursor(bool)+0x3d>
c00108b8:	83 ec 0c             	sub    esp,0xc
c00108bb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00108be:	53                   	push   ebx
c00108bf:	e8 6c fe ff ff       	call   c0010730 <VgaText::scrollScreen()>
c00108c4:	83 c4 10             	add    esp,0x10
c00108c7:	89 f0                	mov    eax,esi
c00108c9:	84 c0                	test   al,al
c00108cb:	74 0c                	je     c00108d9 <VgaText::incrementCursor(bool)+0x4f>
c00108cd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108d1:	5a                   	pop    edx
c00108d2:	5b                   	pop    ebx
c00108d3:	5e                   	pop    esi
c00108d4:	e9 3b fd ff ff       	jmp    c0010614 <VgaText::updateCursor()>
c00108d9:	58                   	pop    eax
c00108da:	5b                   	pop    ebx
c00108db:	5e                   	pop    esi
c00108dc:	c3                   	ret    
c00108dd:	90                   	nop

c00108de <VgaText::updateRAMUsageDisplay(int)>:
c00108de:	56                   	push   esi
c00108df:	8b 35 00 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd00
c00108e5:	53                   	push   ebx
c00108e6:	bb 0a 00 00 00       	mov    ebx,0xa
c00108eb:	6a 0f                	push   0xf
c00108ed:	6a 00                	push   0x0
c00108ef:	e8 2a fe ff ff       	call   c001071e <VgaText::combineColours(unsigned char, unsigned char)>
c00108f4:	5a                   	pop    edx
c00108f5:	59                   	pop    ecx
c00108f6:	0f b6 c8             	movzx  ecx,al
c00108f9:	51                   	push   ecx
c00108fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fe:	99                   	cdq    
c00108ff:	f7 fb                	idiv   ebx
c0010901:	89 d3                	mov    ebx,edx
c0010903:	83 c0 30             	add    eax,0x30
c0010906:	83 c3 30             	add    ebx,0x30
c0010909:	0f be c0             	movsx  eax,al
c001090c:	0f b6 db             	movzx  ebx,bl
c001090f:	50                   	push   eax
c0010910:	e8 af fe ff ff       	call   c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010915:	5a                   	pop    edx
c0010916:	5a                   	pop    edx
c0010917:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c001091e:	51                   	push   ecx
c001091f:	53                   	push   ebx
c0010920:	e8 9f fe ff ff       	call   c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010925:	5b                   	pop    ebx
c0010926:	5a                   	pop    edx
c0010927:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c001092e:	51                   	push   ecx
c001092f:	6a 25                	push   0x25
c0010931:	e8 8e fe ff ff       	call   c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010936:	59                   	pop    ecx
c0010937:	5b                   	pop    ebx
c0010938:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c001093f:	5b                   	pop    ebx
c0010940:	5e                   	pop    esi
c0010941:	c3                   	ret    

c0010942 <VgaText::updateDiskUsage()>:
c0010942:	55                   	push   ebp
c0010943:	bd 10 27 00 00       	mov    ebp,0x2710
c0010948:	57                   	push   edi
c0010949:	8b 3d 00 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dd00
c001094f:	56                   	push   esi
c0010950:	53                   	push   ebx
c0010951:	6a 0f                	push   0xf
c0010953:	6a 00                	push   0x0
c0010955:	e8 c4 fd ff ff       	call   c001071e <VgaText::combineColours(unsigned char, unsigned char)>
c001095a:	5a                   	pop    edx
c001095b:	0f b6 d8             	movzx  ebx,al
c001095e:	59                   	pop    ecx
c001095f:	8b 35 28 31 03 c0    	mov    esi,DWORD PTR ds:0xc0033128
c0010965:	53                   	push   ebx
c0010966:	b9 0a 00 00 00       	mov    ecx,0xa
c001096b:	89 f0                	mov    eax,esi
c001096d:	99                   	cdq    
c001096e:	f7 fd                	idiv   ebp
c0010970:	99                   	cdq    
c0010971:	f7 f9                	idiv   ecx
c0010973:	8d 42 30             	lea    eax,[edx+0x30]
c0010976:	0f b6 c0             	movzx  eax,al
c0010979:	50                   	push   eax
c001097a:	e8 45 fe ff ff       	call   c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>
c001097f:	5d                   	pop    ebp
c0010980:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010985:	5a                   	pop    edx
c0010986:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c001098a:	53                   	push   ebx
c001098b:	89 f0                	mov    eax,esi
c001098d:	99                   	cdq    
c001098e:	f7 fd                	idiv   ebp
c0010990:	99                   	cdq    
c0010991:	f7 f9                	idiv   ecx
c0010993:	8d 42 30             	lea    eax,[edx+0x30]
c0010996:	0f b6 c0             	movzx  eax,al
c0010999:	50                   	push   eax
c001099a:	e8 25 fe ff ff       	call   c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>
c001099f:	5d                   	pop    ebp
c00109a0:	bd 64 00 00 00       	mov    ebp,0x64
c00109a5:	5a                   	pop    edx
c00109a6:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109ad:	53                   	push   ebx
c00109ae:	89 f0                	mov    eax,esi
c00109b0:	99                   	cdq    
c00109b1:	f7 fd                	idiv   ebp
c00109b3:	99                   	cdq    
c00109b4:	f7 f9                	idiv   ecx
c00109b6:	8d 42 30             	lea    eax,[edx+0x30]
c00109b9:	0f b6 c0             	movzx  eax,al
c00109bc:	50                   	push   eax
c00109bd:	e8 02 fe ff ff       	call   c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c2:	5d                   	pop    ebp
c00109c3:	5a                   	pop    edx
c00109c4:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00109cb:	53                   	push   ebx
c00109cc:	89 f0                	mov    eax,esi
c00109ce:	99                   	cdq    
c00109cf:	f7 f9                	idiv   ecx
c00109d1:	89 d6                	mov    esi,edx
c00109d3:	99                   	cdq    
c00109d4:	f7 f9                	idiv   ecx
c00109d6:	8d 42 30             	lea    eax,[edx+0x30]
c00109d9:	0f b6 c0             	movzx  eax,al
c00109dc:	50                   	push   eax
c00109dd:	e8 e2 fd ff ff       	call   c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109e2:	5d                   	pop    ebp
c00109e3:	5a                   	pop    edx
c00109e4:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00109eb:	53                   	push   ebx
c00109ec:	8d 46 30             	lea    eax,[esi+0x30]
c00109ef:	0f b6 f0             	movzx  esi,al
c00109f2:	56                   	push   esi
c00109f3:	e8 cc fd ff ff       	call   c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109f8:	5e                   	pop    esi
c00109f9:	8b 35 24 31 03 c0    	mov    esi,DWORD PTR ds:0xc0033124
c00109ff:	5d                   	pop    ebp
c0010a00:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a07:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a0c:	53                   	push   ebx
c0010a0d:	89 f0                	mov    eax,esi
c0010a0f:	99                   	cdq    
c0010a10:	f7 fd                	idiv   ebp
c0010a12:	99                   	cdq    
c0010a13:	f7 f9                	idiv   ecx
c0010a15:	8d 42 30             	lea    eax,[edx+0x30]
c0010a18:	0f b6 c0             	movzx  eax,al
c0010a1b:	50                   	push   eax
c0010a1c:	e8 a3 fd ff ff       	call   c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a21:	5a                   	pop    edx
c0010a22:	5d                   	pop    ebp
c0010a23:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a2a:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a2f:	53                   	push   ebx
c0010a30:	89 f0                	mov    eax,esi
c0010a32:	99                   	cdq    
c0010a33:	f7 fd                	idiv   ebp
c0010a35:	99                   	cdq    
c0010a36:	f7 f9                	idiv   ecx
c0010a38:	8d 42 30             	lea    eax,[edx+0x30]
c0010a3b:	0f b6 c0             	movzx  eax,al
c0010a3e:	50                   	push   eax
c0010a3f:	e8 80 fd ff ff       	call   c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a44:	5a                   	pop    edx
c0010a45:	5d                   	pop    ebp
c0010a46:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a4d:	bd 64 00 00 00       	mov    ebp,0x64
c0010a52:	53                   	push   ebx
c0010a53:	89 f0                	mov    eax,esi
c0010a55:	99                   	cdq    
c0010a56:	f7 fd                	idiv   ebp
c0010a58:	99                   	cdq    
c0010a59:	f7 f9                	idiv   ecx
c0010a5b:	83 c2 30             	add    edx,0x30
c0010a5e:	0f b6 d2             	movzx  edx,dl
c0010a61:	52                   	push   edx
c0010a62:	e8 5d fd ff ff       	call   c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a67:	5a                   	pop    edx
c0010a68:	5d                   	pop    ebp
c0010a69:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010a70:	53                   	push   ebx
c0010a71:	89 f0                	mov    eax,esi
c0010a73:	99                   	cdq    
c0010a74:	f7 f9                	idiv   ecx
c0010a76:	89 d6                	mov    esi,edx
c0010a78:	99                   	cdq    
c0010a79:	f7 f9                	idiv   ecx
c0010a7b:	8d 42 30             	lea    eax,[edx+0x30]
c0010a7e:	0f b6 c0             	movzx  eax,al
c0010a81:	50                   	push   eax
c0010a82:	e8 3d fd ff ff       	call   c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a87:	5a                   	pop    edx
c0010a88:	59                   	pop    ecx
c0010a89:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010a90:	53                   	push   ebx
c0010a91:	8d 46 30             	lea    eax,[esi+0x30]
c0010a94:	0f b6 f0             	movzx  esi,al
c0010a97:	56                   	push   esi
c0010a98:	e8 27 fd ff ff       	call   c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a9d:	5b                   	pop    ebx
c0010a9e:	5e                   	pop    esi
c0010a9f:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010aa6:	5b                   	pop    ebx
c0010aa7:	5e                   	pop    esi
c0010aa8:	5f                   	pop    edi
c0010aa9:	5d                   	pop    ebp
c0010aaa:	c3                   	ret    
c0010aab:	90                   	nop

c0010aac <VgaText::updateTitle()>:
c0010aac:	53                   	push   ebx
c0010aad:	31 c0                	xor    eax,eax
c0010aaf:	83 ec 58             	sub    esp,0x58
c0010ab2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010ab6:	89 e1                	mov    ecx,esp
c0010ab8:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010abc:	40                   	inc    eax
c0010abd:	83 f8 50             	cmp    eax,0x50
c0010ac0:	75 f6                	jne    c0010ab8 <VgaText::updateTitle()+0xc>
c0010ac2:	31 c0                	xor    eax,eax
c0010ac4:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010acb:	84 db                	test   bl,bl
c0010acd:	74 06                	je     c0010ad5 <VgaText::updateTitle()+0x29>
c0010acf:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010ad2:	40                   	inc    eax
c0010ad3:	eb ef                	jmp    c0010ac4 <VgaText::updateTitle()+0x18>
c0010ad5:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010ad8:	85 c0                	test   eax,eax
c0010ada:	74 09                	je     c0010ae5 <VgaText::updateTitle()+0x39>
c0010adc:	53                   	push   ebx
c0010add:	53                   	push   ebx
c0010ade:	51                   	push   ecx
c0010adf:	52                   	push   edx
c0010ae0:	ff d0                	call   eax
c0010ae2:	83 c4 10             	add    esp,0x10
c0010ae5:	e8 58 fe ff ff       	call   c0010942 <VgaText::updateDiskUsage()>
c0010aea:	83 c4 58             	add    esp,0x58
c0010aed:	5b                   	pop    ebx
c0010aee:	c3                   	ret    
c0010aef:	90                   	nop

c0010af0 <VgaText::setTitleTextColour(VgaColour)>:
c0010af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010af4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010af8:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010afb:	eb af                	jmp    c0010aac <VgaText::updateTitle()>
c0010afd:	90                   	nop

c0010afe <VgaText::setTitleColour(VgaColour)>:
c0010afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b06:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b09:	eb a1                	jmp    c0010aac <VgaText::updateTitle()>
c0010b0b:	90                   	nop

c0010b0c <VgaText::setTitle(char*)>:
c0010b0c:	53                   	push   ebx
c0010b0d:	83 ec 10             	sub    esp,0x10
c0010b10:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b18:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010b1e:	50                   	push   eax
c0010b1f:	e8 34 fd fe ff       	call   c0000858 <strcpy>
c0010b24:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b28:	83 c4 18             	add    esp,0x18
c0010b2b:	5b                   	pop    ebx
c0010b2c:	e9 7b ff ff ff       	jmp    c0010aac <VgaText::updateTitle()>
c0010b31:	90                   	nop

c0010b32 <VgaText::decrementCursor(bool)>:
c0010b32:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b36:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b3a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010b3d:	85 c0                	test   eax,eax
c0010b3f:	74 04                	je     c0010b45 <VgaText::decrementCursor(bool)+0x13>
c0010b41:	48                   	dec    eax
c0010b42:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010b45:	84 c9                	test   cl,cl
c0010b47:	74 09                	je     c0010b52 <VgaText::decrementCursor(bool)+0x20>
c0010b49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b4d:	e9 c2 fa ff ff       	jmp    c0010614 <VgaText::updateCursor()>
c0010b52:	c3                   	ret    
c0010b53:	90                   	nop

c0010b54 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b54:	53                   	push   ebx
c0010b55:	83 ec 08             	sub    esp,0x8
c0010b58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b64:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010b68:	3c 07                	cmp    al,0x7
c0010b6a:	75 2a                	jne    c0010b96 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010b6c:	a1 58 ef 02 c0       	mov    eax,ds:0xc002ef58
c0010b71:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010b79:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010b81:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010b89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b8d:	83 c4 08             	add    esp,0x8
c0010b90:	5b                   	pop    ebx
c0010b91:	e9 bc 30 00 00       	jmp    c0013c52 <Buzzer::beep(int, int, bool)>
c0010b96:	3c 0d                	cmp    al,0xd
c0010b98:	75 09                	jne    c0010ba3 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010b9a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010ba1:	eb 2c                	jmp    c0010bcf <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010ba3:	3c 0a                	cmp    al,0xa
c0010ba5:	75 31                	jne    c0010bd8 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010ba7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010baa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010bb1:	8d 50 01             	lea    edx,[eax+0x1]
c0010bb4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010bb7:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010bba:	75 0f                	jne    c0010bcb <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010bbc:	83 ec 0c             	sub    esp,0xc
c0010bbf:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010bc2:	53                   	push   ebx
c0010bc3:	e8 68 fb ff ff       	call   c0010730 <VgaText::scrollScreen()>
c0010bc8:	83 c4 10             	add    esp,0x10
c0010bcb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010bcf:	83 c4 08             	add    esp,0x8
c0010bd2:	5b                   	pop    ebx
c0010bd3:	e9 3c fa ff ff       	jmp    c0010614 <VgaText::updateCursor()>
c0010bd8:	3c 08                	cmp    al,0x8
c0010bda:	75 25                	jne    c0010c01 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010bdc:	50                   	push   eax
c0010bdd:	50                   	push   eax
c0010bde:	6a 01                	push   0x1
c0010be0:	53                   	push   ebx
c0010be1:	e8 4c ff ff ff       	call   c0010b32 <VgaText::decrementCursor(bool)>
c0010be6:	5a                   	pop    edx
c0010be7:	59                   	pop    ecx
c0010be8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010beb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010bee:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010bf1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010bf4:	6a 20                	push   0x20
c0010bf6:	53                   	push   ebx
c0010bf7:	e8 da fb ff ff       	call   c00107d6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bfc:	83 c4 28             	add    esp,0x28
c0010bff:	5b                   	pop    ebx
c0010c00:	c3                   	ret    
c0010c01:	83 ec 08             	sub    esp,0x8
c0010c04:	0f be c0             	movsx  eax,al
c0010c07:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c0a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c0d:	51                   	push   ecx
c0010c0e:	52                   	push   edx
c0010c0f:	50                   	push   eax
c0010c10:	53                   	push   ebx
c0010c11:	e8 c0 fb ff ff       	call   c00107d6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c16:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c1a:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c22:	83 c4 28             	add    esp,0x28
c0010c25:	5b                   	pop    ebx
c0010c26:	e9 5f fc ff ff       	jmp    c001088a <VgaText::incrementCursor(bool)>
c0010c2b:	90                   	nop

c0010c2c <VgaText::isShowingCursor()>:
c0010c2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c30:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010c33:	c3                   	ret    

c0010c34 <VgaText::isBlinkDisabled()>:
c0010c34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c38:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010c3b:	83 f0 01             	xor    eax,0x1
c0010c3e:	c3                   	ret    
c0010c3f:	90                   	nop

c0010c40 <VgaText::setCursorHeight(int)>:
c0010c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c48:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c4b:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010c4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c53:	e9 d2 f9 ff ff       	jmp    c001062a <VgaText::showCursor(bool)>

c0010c58 <VgaText::getCursorHeight()>:
c0010c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c5c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010c5f:	c3                   	ret    

c0010c60 <setActiveTerminal(VgaText*)>:
c0010c60:	53                   	push   ebx
c0010c61:	83 ec 08             	sub    esp,0x8
c0010c64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c68:	85 db                	test   ebx,ebx
c0010c6a:	75 11                	jne    c0010c7d <setActiveTerminal(VgaText*)+0x1d>
c0010c6c:	c7 44 24 10 0c ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac0c
c0010c74:	83 c4 08             	add    esp,0x8
c0010c77:	5b                   	pop    ebx
c0010c78:	e9 88 9b 00 00       	jmp    c001a805 <Krnl::panic(char const*)>
c0010c7d:	50                   	push   eax
c0010c7e:	50                   	push   eax
c0010c7f:	53                   	push   ebx
c0010c80:	68 1a ac 02 c0       	push   0xc002ac1a
c0010c85:	e8 bb 21 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0010c8a:	a1 a4 ee 02 c0       	mov    eax,ds:0xc002eea4
c0010c8f:	83 c4 10             	add    esp,0x10
c0010c92:	85 c0                	test   eax,eax
c0010c94:	74 0c                	je     c0010ca2 <setActiveTerminal(VgaText*)+0x42>
c0010c96:	83 ec 0c             	sub    esp,0xc
c0010c99:	50                   	push   eax
c0010c9a:	e8 75 f9 ff ff       	call   c0010614 <VgaText::updateCursor()>
c0010c9f:	83 c4 10             	add    esp,0x10
c0010ca2:	89 1d a4 ee 02 c0    	mov    DWORD PTR ds:0xc002eea4,ebx
c0010ca8:	51                   	push   ecx
c0010ca9:	51                   	push   ecx
c0010caa:	53                   	push   ebx
c0010cab:	68 32 ac 02 c0       	push   0xc002ac32
c0010cb0:	e8 90 21 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0010cb5:	83 c4 0c             	add    esp,0xc
c0010cb8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010cbb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010cbe:	53                   	push   ebx
c0010cbf:	e8 7e fb ff ff       	call   c0010842 <VgaText::setCursor(int, int)>
c0010cc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cc7:	e8 68 ff ff ff       	call   c0010c34 <VgaText::isBlinkDisabled()>
c0010ccc:	5a                   	pop    edx
c0010ccd:	0f b6 c0             	movzx  eax,al
c0010cd0:	59                   	pop    ecx
c0010cd1:	50                   	push   eax
c0010cd2:	53                   	push   ebx
c0010cd3:	e8 5e f9 ff ff       	call   c0010636 <VgaText::disableBlink(bool)>
c0010cd8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cdb:	e8 78 ff ff ff       	call   c0010c58 <VgaText::getCursorHeight()>
c0010ce0:	5a                   	pop    edx
c0010ce1:	59                   	pop    ecx
c0010ce2:	50                   	push   eax
c0010ce3:	53                   	push   ebx
c0010ce4:	e8 57 ff ff ff       	call   c0010c40 <VgaText::setCursorHeight(int)>
c0010ce9:	83 c4 10             	add    esp,0x10
c0010cec:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010cf0:	75 07                	jne    c0010cf9 <setActiveTerminal(VgaText*)+0x99>
c0010cf2:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010cf9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010cfd:	83 c4 08             	add    esp,0x8
c0010d00:	5b                   	pop    ebx
c0010d01:	e9 c0 f8 ff ff       	jmp    c00105c6 <VgaText::load()>

c0010d06 <doTerminalCycle()>:
c0010d06:	83 ec 18             	sub    esp,0x18
c0010d09:	a1 a0 ee 02 c0       	mov    eax,ds:0xc002eea0
c0010d0e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010d11:	50                   	push   eax
c0010d12:	a3 a0 ee 02 c0       	mov    ds:0xc002eea0,eax
c0010d17:	e8 44 ff ff ff       	call   c0010c60 <setActiveTerminal(VgaText*)>
c0010d1c:	83 c4 1c             	add    esp,0x1c
c0010d1f:	c3                   	ret    

c0010d20 <VgaText::doUpdate()>:
c0010d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d24:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010d27:	85 c0                	test   eax,eax
c0010d29:	74 02                	je     c0010d2d <VgaText::doUpdate()+0xd>
c0010d2b:	ff e0                	jmp    eax
c0010d2d:	c3                   	ret    

c0010d2e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010d2e:	55                   	push   ebp
c0010d2f:	31 ed                	xor    ebp,ebp
c0010d31:	57                   	push   edi
c0010d32:	56                   	push   esi
c0010d33:	53                   	push   ebx
c0010d34:	83 ec 1c             	sub    esp,0x1c
c0010d37:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d3b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d40:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010d47:	50                   	push   eax
c0010d48:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d4d:	50                   	push   eax
c0010d4e:	e8 cb f9 ff ff       	call   c001071e <VgaText::combineColours(unsigned char, unsigned char)>
c0010d53:	59                   	pop    ecx
c0010d54:	0f b6 c0             	movzx  eax,al
c0010d57:	5e                   	pop    esi
c0010d58:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d5d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d61:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d68:	0f b7 f6             	movzx  esi,si
c0010d6b:	01 f6                	add    esi,esi
c0010d6d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d70:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010d73:	84 c0                	test   al,al
c0010d75:	0f 84 fd 00 00 00    	je     c0010e78 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010d7b:	3c 0d                	cmp    al,0xd
c0010d7d:	75 0c                	jne    c0010d8b <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010d7f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d86:	e9 e7 00 00 00       	jmp    c0010e72 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d8b:	3c 0a                	cmp    al,0xa
c0010d8d:	75 47                	jne    c0010dd6 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010d8f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010d92:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d99:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d9c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010d9f:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010da2:	75 0f                	jne    c0010db3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010da4:	83 ec 0c             	sub    esp,0xc
c0010da7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010daa:	53                   	push   ebx
c0010dab:	e8 80 f9 ff ff       	call   c0010730 <VgaText::scrollScreen()>
c0010db0:	83 c4 10             	add    esp,0x10
c0010db3:	83 ec 0c             	sub    esp,0xc
c0010db6:	31 ed                	xor    ebp,ebp
c0010db8:	53                   	push   ebx
c0010db9:	e8 56 f8 ff ff       	call   c0010614 <VgaText::updateCursor()>
c0010dbe:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010dc3:	83 c4 10             	add    esp,0x10
c0010dc6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dc9:	0f b7 f6             	movzx  esi,si
c0010dcc:	01 f6                	add    esi,esi
c0010dce:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010dd1:	e9 9c 00 00 00       	jmp    c0010e72 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010dd6:	3c 08                	cmp    al,0x8
c0010dd8:	75 35                	jne    c0010e0f <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010dda:	56                   	push   esi
c0010ddb:	56                   	push   esi
c0010ddc:	6a 01                	push   0x1
c0010dde:	53                   	push   ebx
c0010ddf:	e8 4e fd ff ff       	call   c0010b32 <VgaText::decrementCursor(bool)>
c0010de4:	58                   	pop    eax
c0010de5:	5a                   	pop    edx
c0010de6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010de9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010dec:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010def:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010df2:	6a 20                	push   0x20
c0010df4:	53                   	push   ebx
c0010df5:	e8 dc f9 ff ff       	call   c00107d6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010dfa:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010dff:	83 c4 20             	add    esp,0x20
c0010e02:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e05:	0f b7 f6             	movzx  esi,si
c0010e08:	01 f6                	add    esi,esi
c0010e0a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e0d:	eb 63                	jmp    c0010e72 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e0f:	51                   	push   ecx
c0010e10:	51                   	push   ecx
c0010e11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010e15:	50                   	push   eax
c0010e16:	e8 a9 f9 ff ff       	call   c00107c4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010e1b:	83 c4 10             	add    esp,0x10
c0010e1e:	66 89 06             	mov    WORD PTR [esi],ax
c0010e21:	39 1d a4 ee 02 c0    	cmp    DWORD PTR ds:0xc002eea4,ebx
c0010e27:	75 21                	jne    c0010e4a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e29:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010e2c:	85 c0                	test   eax,eax
c0010e2e:	74 1a                	je     c0010e4a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e30:	52                   	push   edx
c0010e31:	52                   	push   edx
c0010e32:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e35:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e40:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010e43:	51                   	push   ecx
c0010e44:	53                   	push   ebx
c0010e45:	ff d0                	call   eax
c0010e47:	83 c4 20             	add    esp,0x20
c0010e4a:	83 c6 02             	add    esi,0x2
c0010e4d:	50                   	push   eax
c0010e4e:	50                   	push   eax
c0010e4f:	6a 00                	push   0x0
c0010e51:	53                   	push   ebx
c0010e52:	e8 33 fa ff ff       	call   c001088a <VgaText::incrementCursor(bool)>
c0010e57:	83 c4 10             	add    esp,0x10
c0010e5a:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010e5e:	75 0d                	jne    c0010e6d <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010e60:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e65:	0f b7 f6             	movzx  esi,si
c0010e68:	01 f6                	add    esi,esi
c0010e6a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e6d:	bd 01 00 00 00       	mov    ebp,0x1
c0010e72:	47                   	inc    edi
c0010e73:	e9 f8 fe ff ff       	jmp    c0010d70 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010e78:	83 ec 0c             	sub    esp,0xc
c0010e7b:	53                   	push   ebx
c0010e7c:	e8 93 f7 ff ff       	call   c0010614 <VgaText::updateCursor()>
c0010e81:	83 c4 10             	add    esp,0x10
c0010e84:	89 e8                	mov    eax,ebp
c0010e86:	84 c0                	test   al,al
c0010e88:	74 0c                	je     c0010e96 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010e8a:	83 ec 0c             	sub    esp,0xc
c0010e8d:	53                   	push   ebx
c0010e8e:	e8 8d fe ff ff       	call   c0010d20 <VgaText::doUpdate()>
c0010e93:	83 c4 10             	add    esp,0x10
c0010e96:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010e9d:	83 c4 1c             	add    esp,0x1c
c0010ea0:	5b                   	pop    ebx
c0010ea1:	5e                   	pop    esi
c0010ea2:	5f                   	pop    edi
c0010ea3:	5d                   	pop    ebp
c0010ea4:	c3                   	ret    
c0010ea5:	90                   	nop

c0010ea6 <VgaText::clearScreen()>:
c0010ea6:	57                   	push   edi
c0010ea7:	56                   	push   esi
c0010ea8:	31 f6                	xor    esi,esi
c0010eaa:	53                   	push   ebx
c0010eab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010eaf:	52                   	push   edx
c0010eb0:	6a 00                	push   0x0
c0010eb2:	6a 00                	push   0x0
c0010eb4:	53                   	push   ebx
c0010eb5:	e8 88 f9 ff ff       	call   c0010842 <VgaText::setCursor(int, int)>
c0010eba:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010ec1:	83 c4 10             	add    esp,0x10
c0010ec4:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010ec7:	7e 20                	jle    c0010ee9 <VgaText::clearScreen()+0x43>
c0010ec9:	31 ff                	xor    edi,edi
c0010ecb:	50                   	push   eax
c0010ecc:	50                   	push   eax
c0010ecd:	56                   	push   esi
c0010ece:	57                   	push   edi
c0010ecf:	47                   	inc    edi
c0010ed0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ed3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ed6:	6a 20                	push   0x20
c0010ed8:	53                   	push   ebx
c0010ed9:	e8 f8 f8 ff ff       	call   c00107d6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ede:	83 c4 20             	add    esp,0x20
c0010ee1:	83 ff 50             	cmp    edi,0x50
c0010ee4:	75 e5                	jne    c0010ecb <VgaText::clearScreen()+0x25>
c0010ee6:	46                   	inc    esi
c0010ee7:	eb db                	jmp    c0010ec4 <VgaText::clearScreen()+0x1e>
c0010ee9:	83 ec 0c             	sub    esp,0xc
c0010eec:	53                   	push   ebx
c0010eed:	e8 2e fe ff ff       	call   c0010d20 <VgaText::doUpdate()>
c0010ef2:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010ef9:	83 c4 10             	add    esp,0x10
c0010efc:	5b                   	pop    ebx
c0010efd:	5e                   	pop    esi
c0010efe:	5f                   	pop    edi
c0010eff:	c3                   	ret    

c0010f00 <VgaText::putchar(char)>:
c0010f00:	56                   	push   esi
c0010f01:	53                   	push   ebx
c0010f02:	83 ec 14             	sub    esp,0x14
c0010f05:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f0d:	3c 5b                	cmp    al,0x5b
c0010f0f:	75 18                	jne    c0010f29 <VgaText::putchar(char)+0x29>
c0010f11:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010f15:	74 1f                	je     c0010f36 <VgaText::putchar(char)+0x36>
c0010f17:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010f1d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010f24:	e9 bd 00 00 00       	jmp    c0010fe6 <VgaText::putchar(char)+0xe6>
c0010f29:	3c 1b                	cmp    al,0x1b
c0010f2b:	75 09                	jne    c0010f36 <VgaText::putchar(char)+0x36>
c0010f2d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010f31:	e9 b0 00 00 00       	jmp    c0010fe6 <VgaText::putchar(char)+0xe6>
c0010f36:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010f39:	84 c9                	test   cl,cl
c0010f3b:	0f 84 92 00 00 00    	je     c0010fd3 <VgaText::putchar(char)+0xd3>
c0010f41:	8d 50 c0             	lea    edx,[eax-0x40]
c0010f44:	80 fa 3e             	cmp    dl,0x3e
c0010f47:	77 76                	ja     c0010fbf <VgaText::putchar(char)+0xbf>
c0010f49:	3c 6d                	cmp    al,0x6d
c0010f4b:	75 47                	jne    c0010f94 <VgaText::putchar(char)+0x94>
c0010f4d:	31 f6                	xor    esi,esi
c0010f4f:	31 d2                	xor    edx,edx
c0010f51:	31 c0                	xor    eax,eax
c0010f53:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010f56:	7e 2d                	jle    c0010f85 <VgaText::putchar(char)+0x85>
c0010f58:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010f5d:	80 fa 3b             	cmp    dl,0x3b
c0010f60:	75 17                	jne    c0010f79 <VgaText::putchar(char)+0x79>
c0010f62:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f66:	50                   	push   eax
c0010f67:	53                   	push   ebx
c0010f68:	e8 fd f6 ff ff       	call   c001066a <VgaText::doANSI_SGR(int)>
c0010f6d:	59                   	pop    ecx
c0010f6e:	31 d2                	xor    edx,edx
c0010f70:	58                   	pop    eax
c0010f71:	31 c0                	xor    eax,eax
c0010f73:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f77:	eb 09                	jmp    c0010f82 <VgaText::putchar(char)+0x82>
c0010f79:	6b c0 0a             	imul   eax,eax,0xa
c0010f7c:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010f80:	88 ca                	mov    dl,cl
c0010f82:	46                   	inc    esi
c0010f83:	eb ce                	jmp    c0010f53 <VgaText::putchar(char)+0x53>
c0010f85:	84 d2                	test   dl,dl
c0010f87:	74 2e                	je     c0010fb7 <VgaText::putchar(char)+0xb7>
c0010f89:	50                   	push   eax
c0010f8a:	53                   	push   ebx
c0010f8b:	e8 da f6 ff ff       	call   c001066a <VgaText::doANSI_SGR(int)>
c0010f90:	58                   	pop    eax
c0010f91:	5a                   	pop    edx
c0010f92:	eb 23                	jmp    c0010fb7 <VgaText::putchar(char)+0xb7>
c0010f94:	3c 4a                	cmp    al,0x4a
c0010f96:	75 1f                	jne    c0010fb7 <VgaText::putchar(char)+0xb7>
c0010f98:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010f9c:	75 19                	jne    c0010fb7 <VgaText::putchar(char)+0xb7>
c0010f9e:	83 ec 0c             	sub    esp,0xc
c0010fa1:	53                   	push   ebx
c0010fa2:	e8 ff fe ff ff       	call   c0010ea6 <VgaText::clearScreen()>
c0010fa7:	83 c4 0c             	add    esp,0xc
c0010faa:	6a 00                	push   0x0
c0010fac:	6a 00                	push   0x0
c0010fae:	53                   	push   ebx
c0010faf:	e8 8e f8 ff ff       	call   c0010842 <VgaText::setCursor(int, int)>
c0010fb4:	83 c4 10             	add    esp,0x10
c0010fb7:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010fbd:	eb 27                	jmp    c0010fe6 <VgaText::putchar(char)+0xe6>
c0010fbf:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010fc2:	83 fa 0e             	cmp    edx,0xe
c0010fc5:	7f 1f                	jg     c0010fe6 <VgaText::putchar(char)+0xe6>
c0010fc7:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010fca:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010fcd:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010fd1:	eb 13                	jmp    c0010fe6 <VgaText::putchar(char)+0xe6>
c0010fd3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010fd6:	0f be c0             	movsx  eax,al
c0010fd9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010fdc:	50                   	push   eax
c0010fdd:	53                   	push   ebx
c0010fde:	e8 71 fb ff ff       	call   c0010b54 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010fe3:	83 c4 10             	add    esp,0x10
c0010fe6:	83 c4 14             	add    esp,0x14
c0010fe9:	5b                   	pop    ebx
c0010fea:	5e                   	pop    esi
c0010feb:	c3                   	ret    

c0010fec <VgaText::puts(char const*)>:
c0010fec:	53                   	push   ebx
c0010fed:	83 ec 08             	sub    esp,0x8
c0010ff0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ff4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010ff7:	84 c0                	test   al,al
c0010ff9:	74 12                	je     c001100d <VgaText::puts(char const*)+0x21>
c0010ffb:	43                   	inc    ebx
c0010ffc:	51                   	push   ecx
c0010ffd:	51                   	push   ecx
c0010ffe:	50                   	push   eax
c0010fff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011003:	e8 f8 fe ff ff       	call   c0010f00 <VgaText::putchar(char)>
c0011008:	83 c4 10             	add    esp,0x10
c001100b:	eb e7                	jmp    c0010ff4 <VgaText::puts(char const*)+0x8>
c001100d:	83 c4 08             	add    esp,0x8
c0011010:	5b                   	pop    ebx
c0011011:	c3                   	ret    

c0011012 <VgaText::putx(unsigned int)>:
c0011012:	57                   	push   edi
c0011013:	b9 11 00 00 00       	mov    ecx,0x11
c0011018:	56                   	push   esi
c0011019:	be 4e ac 02 c0       	mov    esi,0xc002ac4e
c001101e:	53                   	push   ebx
c001101f:	83 ec 20             	sub    esp,0x20
c0011022:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011026:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001102a:	fc                   	cld    
c001102b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001102d:	be 08 00 00 00       	mov    esi,0x8
c0011032:	50                   	push   eax
c0011033:	50                   	push   eax
c0011034:	89 d8                	mov    eax,ebx
c0011036:	c1 e3 04             	shl    ebx,0x4
c0011039:	c1 e8 1c             	shr    eax,0x1c
c001103c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011041:	50                   	push   eax
c0011042:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011046:	e8 b5 fe ff ff       	call   c0010f00 <VgaText::putchar(char)>
c001104b:	83 c4 10             	add    esp,0x10
c001104e:	4e                   	dec    esi
c001104f:	75 e1                	jne    c0011032 <VgaText::putx(unsigned int)+0x20>
c0011051:	83 c4 20             	add    esp,0x20
c0011054:	5b                   	pop    ebx
c0011055:	5e                   	pop    esi
c0011056:	5f                   	pop    edi
c0011057:	c3                   	ret    

c0011058 <VgaText::VgaText(char const*)>:
c0011058:	57                   	push   edi
c0011059:	56                   	push   esi
c001105a:	53                   	push   ebx
c001105b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001105f:	83 ec 08             	sub    esp,0x8
c0011062:	6a 00                	push   0x0
c0011064:	50                   	push   eax
c0011065:	e8 8c 05 00 00       	call   c00115f6 <UnixFile::UnixFile(int)>
c001106a:	83 c4 10             	add    esp,0x10
c001106d:	ba b4 ac 02 c0       	mov    edx,0xc002acb4
c0011072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011076:	89 10                	mov    DWORD PTR [eax],edx
c0011078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001107c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011087:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001108e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011092:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001109a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001109e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00110a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ad:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00110b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00110bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00110ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ce:	8d 50 60             	lea    edx,[eax+0x60]
c00110d1:	bb 80 ee 02 c0       	mov    ebx,0xc002ee80
c00110d6:	b8 08 00 00 00       	mov    eax,0x8
c00110db:	fc                   	cld    
c00110dc:	89 d7                	mov    edi,edx
c00110de:	89 de                	mov    esi,ebx
c00110e0:	89 c1                	mov    ecx,eax
c00110e2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00110e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e8:	05 82 00 00 00       	add    eax,0x82
c00110ed:	83 ec 08             	sub    esp,0x8
c00110f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110f4:	50                   	push   eax
c00110f5:	e8 5e f7 fe ff       	call   c0000858 <strcpy>
c00110fa:	83 c4 10             	add    esp,0x10
c00110fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011101:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0011108:	83 ec 0c             	sub    esp,0xc
c001110b:	6a 01                	push   0x1
c001110d:	e8 27 09 00 00       	call   c0011a39 <Virt::allocateKernelVirtualPages(int)>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	89 c2                	mov    edx,eax
c0011117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001111b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001111e:	e8 55 0b 00 00       	call   c0011c78 <Virt::getAKernelVAS()>
c0011123:	89 c3                	mov    ebx,eax
c0011125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011129:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001112c:	89 c6                	mov    esi,eax
c001112e:	e8 bf ed ff ff       	call   c000fef2 <Phys::allocatePage()>
c0011133:	6a 05                	push   0x5
c0011135:	56                   	push   esi
c0011136:	50                   	push   eax
c0011137:	53                   	push   ebx
c0011138:	e8 39 11 00 00       	call   c0012276 <VAS::mapPage(unsigned long, unsigned long, int)>
c001113d:	83 c4 10             	add    esp,0x10
c0011140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011144:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011147:	83 ec 04             	sub    esp,0x4
c001114a:	68 00 0f 00 00       	push   0xf00
c001114f:	6a 00                	push   0x0
c0011151:	50                   	push   eax
c0011152:	e8 45 f6 fe ff       	call   c000079c <memset>
c0011157:	83 c4 10             	add    esp,0x10
c001115a:	83 ec 04             	sub    esp,0x4
c001115d:	6a 00                	push   0x0
c001115f:	6a 07                	push   0x7
c0011161:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011165:	e8 94 f5 ff ff       	call   c00106fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001116a:	83 c4 10             	add    esp,0x10
c001116d:	83 ec 08             	sub    esp,0x8
c0011170:	6a 02                	push   0x2
c0011172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011176:	e8 c5 fa ff ff       	call   c0010c40 <VgaText::setCursorHeight(int)>
c001117b:	83 c4 10             	add    esp,0x10
c001117e:	83 ec 04             	sub    esp,0x4
c0011181:	6a 00                	push   0x0
c0011183:	6a 00                	push   0x0
c0011185:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011189:	e8 b4 f6 ff ff       	call   c0010842 <VgaText::setCursor(int, int)>
c001118e:	83 c4 10             	add    esp,0x10
c0011191:	83 ec 08             	sub    esp,0x8
c0011194:	6a 01                	push   0x1
c0011196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001119a:	e8 8b f4 ff ff       	call   c001062a <VgaText::showCursor(bool)>
c001119f:	83 c4 10             	add    esp,0x10
c00111a2:	83 ec 08             	sub    esp,0x8
c00111a5:	6a 01                	push   0x1
c00111a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111ab:	e8 86 f4 ff ff       	call   c0010636 <VgaText::disableBlink(bool)>
c00111b0:	83 c4 10             	add    esp,0x10
c00111b3:	83 ec 0c             	sub    esp,0xc
c00111b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111ba:	e8 e7 fc ff ff       	call   c0010ea6 <VgaText::clearScreen()>
c00111bf:	83 c4 10             	add    esp,0x10
c00111c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c6:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00111ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ce:	05 02 01 00 00       	add    eax,0x102
c00111d3:	83 ec 04             	sub    esp,0x4
c00111d6:	68 96 00 00 00       	push   0x96
c00111db:	6a 00                	push   0x0
c00111dd:	50                   	push   eax
c00111de:	e8 b9 f5 fe ff       	call   c000079c <memset>
c00111e3:	83 c4 10             	add    esp,0x10
c00111e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ea:	05 98 01 00 00       	add    eax,0x198
c00111ef:	83 ec 04             	sub    esp,0x4
c00111f2:	68 2c 01 00 00       	push   0x12c
c00111f7:	6a 00                	push   0x0
c00111f9:	50                   	push   eax
c00111fa:	e8 9d f5 fe ff       	call   c000079c <memset>
c00111ff:	83 c4 10             	add    esp,0x10
c0011202:	90                   	nop
c0011203:	5b                   	pop    ebx
c0011204:	5e                   	pop    esi
c0011205:	5f                   	pop    edi
c0011206:	c3                   	ret    
c0011207:	90                   	nop

c0011208 <VgaText::receiveKey(unsigned char)>:
c0011208:	55                   	push   ebp
c0011209:	57                   	push   edi
c001120a:	56                   	push   esi
c001120b:	53                   	push   ebx
c001120c:	83 ec 1c             	sub    esp,0x1c
c001120f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011213:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011217:	84 db                	test   bl,bl
c0011219:	0f 84 c9 00 00 00    	je     c00112e8 <VgaText::receiveKey(unsigned char)+0xe0>
c001121f:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0011225:	80 fb 08             	cmp    bl,0x8
c0011228:	75 2c                	jne    c0011256 <VgaText::receiveKey(unsigned char)+0x4e>
c001122a:	83 ec 0c             	sub    esp,0xc
c001122d:	57                   	push   edi
c001122e:	e8 85 f5 fe ff       	call   c00007b8 <strlen>
c0011233:	83 c4 10             	add    esp,0x10
c0011236:	85 c0                	test   eax,eax
c0011238:	74 41                	je     c001127b <VgaText::receiveKey(unsigned char)+0x73>
c001123a:	50                   	push   eax
c001123b:	50                   	push   eax
c001123c:	6a 08                	push   0x8
c001123e:	56                   	push   esi
c001123f:	e8 bc fc ff ff       	call   c0010f00 <VgaText::putchar(char)>
c0011244:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011247:	e8 6c f5 fe ff       	call   c00007b8 <strlen>
c001124c:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0011254:	eb 22                	jmp    c0011278 <VgaText::receiveKey(unsigned char)+0x70>
c0011256:	0f be c3             	movsx  eax,bl
c0011259:	52                   	push   edx
c001125a:	52                   	push   edx
c001125b:	50                   	push   eax
c001125c:	56                   	push   esi
c001125d:	e8 9e fc ff ff       	call   c0010f00 <VgaText::putchar(char)>
c0011262:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011266:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001126b:	59                   	pop    ecx
c001126c:	5d                   	pop    ebp
c001126d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011271:	50                   	push   eax
c0011272:	57                   	push   edi
c0011273:	e8 20 f7 fe ff       	call   c0000998 <strcat>
c0011278:	83 c4 10             	add    esp,0x10
c001127b:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0011282:	75 05                	jne    c0011289 <VgaText::receiveKey(unsigned char)+0x81>
c0011284:	80 fb 0a             	cmp    bl,0xa
c0011287:	75 53                	jne    c00112dc <VgaText::receiveKey(unsigned char)+0xd4>
c0011289:	83 ec 0c             	sub    esp,0xc
c001128c:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0011292:	53                   	push   ebx
c0011293:	e8 20 f5 fe ff       	call   c00007b8 <strlen>
c0011298:	89 3c 24             	mov    DWORD PTR [esp],edi
c001129b:	89 c5                	mov    ebp,eax
c001129d:	e8 16 f5 fe ff       	call   c00007b8 <strlen>
c00112a2:	83 c4 10             	add    esp,0x10
c00112a5:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00112a9:	3d 2c 01 00 00       	cmp    eax,0x12c
c00112ae:	76 10                	jbe    c00112c0 <VgaText::receiveKey(unsigned char)+0xb8>
c00112b0:	83 ec 0c             	sub    esp,0xc
c00112b3:	68 5f ac 02 c0       	push   0xc002ac5f
c00112b8:	e8 48 95 00 00       	call   c001a805 <Krnl::panic(char const*)>
c00112bd:	83 c4 10             	add    esp,0x10
c00112c0:	50                   	push   eax
c00112c1:	50                   	push   eax
c00112c2:	57                   	push   edi
c00112c3:	53                   	push   ebx
c00112c4:	e8 cf f6 fe ff       	call   c0000998 <strcat>
c00112c9:	83 c4 0c             	add    esp,0xc
c00112cc:	68 96 00 00 00       	push   0x96
c00112d1:	6a 00                	push   0x0
c00112d3:	57                   	push   edi
c00112d4:	e8 c3 f4 fe ff       	call   c000079c <memset>
c00112d9:	83 c4 10             	add    esp,0x10
c00112dc:	83 ec 0c             	sub    esp,0xc
c00112df:	56                   	push   esi
c00112e0:	e8 3b fa ff ff       	call   c0010d20 <VgaText::doUpdate()>
c00112e5:	83 c4 10             	add    esp,0x10
c00112e8:	83 c4 1c             	add    esp,0x1c
c00112eb:	5b                   	pop    ebx
c00112ec:	5e                   	pop    esi
c00112ed:	5f                   	pop    edi
c00112ee:	5d                   	pop    ebp
c00112ef:	c3                   	ret    

c00112f0 <VgaText::write(unsigned long long, void*, int*)>:
c00112f0:	55                   	push   ebp
c00112f1:	57                   	push   edi
c00112f2:	56                   	push   esi
c00112f3:	53                   	push   ebx
c00112f4:	83 ec 0c             	sub    esp,0xc
c00112f7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00112fb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00112ff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011303:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001130a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001130d:	39 eb                	cmp    ebx,ebp
c001130f:	74 13                	je     c0011324 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011311:	43                   	inc    ebx
c0011312:	50                   	push   eax
c0011313:	50                   	push   eax
c0011314:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011318:	50                   	push   eax
c0011319:	56                   	push   esi
c001131a:	e8 e1 fb ff ff       	call   c0010f00 <VgaText::putchar(char)>
c001131f:	83 c4 10             	add    esp,0x10
c0011322:	eb e9                	jmp    c001130d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011324:	83 ec 0c             	sub    esp,0xc
c0011327:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001132e:	56                   	push   esi
c001132f:	e8 ec f9 ff ff       	call   c0010d20 <VgaText::doUpdate()>
c0011334:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011338:	89 38                	mov    DWORD PTR [eax],edi
c001133a:	83 c4 1c             	add    esp,0x1c
c001133d:	31 c0                	xor    eax,eax
c001133f:	5b                   	pop    ebx
c0011340:	5e                   	pop    esi
c0011341:	5f                   	pop    edi
c0011342:	5d                   	pop    ebp
c0011343:	c3                   	ret    

c0011344 <newTerminal(char*)>:
c0011344:	83 ec 28             	sub    esp,0x28
c0011347:	68 c4 02 00 00       	push   0x2c4
c001134c:	e8 35 e5 ff ff       	call   c000f886 <malloc>
c0011351:	5a                   	pop    edx
c0011352:	59                   	pop    ecx
c0011353:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011357:	50                   	push   eax
c0011358:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001135c:	e8 f7 fc ff ff       	call   c0011058 <VgaText::VgaText(char const*)>
c0011361:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011365:	83 c4 2c             	add    esp,0x2c
c0011368:	c3                   	ret    
c0011369:	90                   	nop

c001136a <TSS::TSS()>:
c001136a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001136e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011375:	90                   	nop
c0011376:	c3                   	ret    
c0011377:	90                   	nop

c0011378 <TSS::setESP(unsigned long)>:
c0011378:	55                   	push   ebp
c0011379:	89 e5                	mov    ebp,esp
c001137b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001137e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011381:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011387:	90                   	nop
c0011388:	5d                   	pop    ebp
c0011389:	c3                   	ret    

c001138a <TSS::flush()>:
c001138a:	55                   	push   ebp
c001138b:	89 e5                	mov    ebp,esp
c001138d:	83 ec 10             	sub    esp,0x10
c0011390:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011393:	8b 00                	mov    eax,DWORD PTR [eax]
c0011395:	83 c8 03             	or     eax,0x3
c0011398:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001139c:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00113a0:	66 89 d0             	mov    ax,dx
c00113a3:	0f 00 d8             	ltr    ax
c00113a6:	90                   	nop
c00113a7:	c9                   	leave  
c00113a8:	c3                   	ret    
c00113a9:	90                   	nop

c00113aa <TSS::setup(unsigned long, unsigned long)>:
c00113aa:	55                   	push   ebp
c00113ab:	89 e5                	mov    ebp,esp
c00113ad:	83 ec 18             	sub    esp,0x18
c00113b0:	83 ec 0c             	sub    esp,0xc
c00113b3:	6a 68                	push   0x68
c00113b5:	e8 cc e4 ff ff       	call   c000f886 <malloc>
c00113ba:	83 c4 10             	add    esp,0x10
c00113bd:	89 c2                	mov    edx,eax
c00113bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113cb:	83 ec 04             	sub    esp,0x4
c00113ce:	6a 68                	push   0x68
c00113d0:	6a 00                	push   0x0
c00113d2:	50                   	push   eax
c00113d3:	e8 c4 f3 fe ff       	call   c000079c <memset>
c00113d8:	83 c4 10             	add    esp,0x10
c00113db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113e1:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00113e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113ed:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00113f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00113fc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011402:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011405:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001140b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001140e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011411:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011417:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001141a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001141d:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011426:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011429:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001142f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011432:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011435:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001143b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001143e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011441:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011447:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001144a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001144d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011450:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011456:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011459:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001145c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001145f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011462:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011465:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001146c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001146f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011472:	0f 20 da             	mov    edx,cr3
c0011475:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011478:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001147b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001147e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011481:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011484:	83 ec 08             	sub    esp,0x8
c0011487:	50                   	push   eax
c0011488:	8d 45 ec             	lea    eax,[ebp-0x14]
c001148b:	50                   	push   eax
c001148c:	e8 c9 db ff ff       	call   c000f05a <GDTEntry::setBase(unsigned int)>
c0011491:	83 c4 10             	add    esp,0x10
c0011494:	83 ec 08             	sub    esp,0x8
c0011497:	6a 68                	push   0x68
c0011499:	8d 45 ec             	lea    eax,[ebp-0x14]
c001149c:	50                   	push   eax
c001149d:	e8 d4 db ff ff       	call   c000f076 <GDTEntry::setLimit(unsigned int)>
c00114a2:	83 c4 10             	add    esp,0x10
c00114a5:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00114a9:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114ac:	83 e0 0f             	and    eax,0xf
c00114af:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114b2:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114b5:	83 c8 40             	or     eax,0x40
c00114b8:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114bb:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c00114c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114c6:	05 78 01 00 00       	add    eax,0x178
c00114cb:	83 ec 04             	sub    esp,0x4
c00114ce:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00114d1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00114d4:	50                   	push   eax
c00114d5:	e8 d0 db ff ff       	call   c000f0aa <GDT::addEntry(GDTEntry)>
c00114da:	83 c4 10             	add    esp,0x10
c00114dd:	89 c2                	mov    edx,eax
c00114df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e2:	89 10                	mov    DWORD PTR [eax],edx
c00114e4:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c00114e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114ef:	05 78 01 00 00       	add    eax,0x178
c00114f4:	83 ec 0c             	sub    esp,0xc
c00114f7:	50                   	push   eax
c00114f8:	e8 f1 db ff ff       	call   c000f0ee <GDT::flush()>
c00114fd:	83 c4 10             	add    esp,0x10
c0011500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011503:	8b 00                	mov    eax,DWORD PTR [eax]
c0011505:	83 ec 08             	sub    esp,0x8
c0011508:	50                   	push   eax
c0011509:	68 c8 ac 02 c0       	push   0xc002acc8
c001150e:	e8 32 19 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0011513:	83 c4 10             	add    esp,0x10
c0011516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011519:	8b 00                	mov    eax,DWORD PTR [eax]
c001151b:	c9                   	leave  
c001151c:	c3                   	ret    
c001151d:	90                   	nop

c001151e <ReservedFilename::read(unsigned long long, void*, int*)>:
c001151e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011522:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011526:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011529:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001152e:	75 08                	jne    c0011538 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011530:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011536:	eb 38                	jmp    c0011570 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011538:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001153d:	75 17                	jne    c0011556 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001153f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011544:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011547:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001154d:	8b 10                	mov    edx,DWORD PTR [eax]
c001154f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011553:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011556:	89 c1                	mov    ecx,eax
c0011558:	83 e1 fd             	and    ecx,0xfffffffd
c001155b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011561:	74 cd                	je     c0011530 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011563:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011568:	83 e0 ef             	and    eax,0xffffffef
c001156b:	83 f8 08             	cmp    eax,0x8
c001156e:	76 c0                	jbe    c0011530 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011570:	31 c0                	xor    eax,eax
c0011572:	c3                   	ret    
c0011573:	90                   	nop

c0011574 <ReservedFilename::isAtty()>:
c0011574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011578:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001157b:	31 c0                	xor    eax,eax
c001157d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011583:	74 09                	je     c001158e <ReservedFilename::isAtty()+0x1a>
c0011585:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001158b:	0f 94 c0             	sete   al
c001158e:	c3                   	ret    
c001158f:	90                   	nop

c0011590 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011594:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011598:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001159f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00115a4:	75 08                	jne    c00115ae <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00115a6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115ac:	eb 3d                	jmp    c00115eb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115ae:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115b3:	75 17                	jne    c00115cc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00115b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115bd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00115c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00115c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115c9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00115cc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115d1:	75 04                	jne    c00115d7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00115d3:	89 0a                	mov    DWORD PTR [edx],ecx
c00115d5:	eb 14                	jmp    c00115eb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115d7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00115dc:	74 c8                	je     c00115a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115de:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00115e3:	83 e0 ef             	and    eax,0xffffffef
c00115e6:	83 f8 08             	cmp    eax,0x8
c00115e9:	76 bb                	jbe    c00115a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115eb:	31 c0                	xor    eax,eax
c00115ed:	c3                   	ret    

c00115ee <UnixFile::getFileDescriptor()>:
c00115ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115f5:	c3                   	ret    

c00115f6 <UnixFile::UnixFile(int)>:
c00115f6:	53                   	push   ebx
c00115f7:	83 ec 28             	sub    esp,0x28
c00115fa:	ba b4 ad 02 c0       	mov    edx,0xc002adb4
c00115ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011603:	89 10                	mov    DWORD PTR [eax],edx
c0011605:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001160d:	0f 8f 8c 01 00 00    	jg     c001179f <UnixFile::UnixFile(int)+0x1a9>
c0011613:	a1 60 dd 02 c0       	mov    eax,ds:0xc002dd60
c0011618:	8d 50 01             	lea    edx,[eax+0x1]
c001161b:	89 15 60 dd 02 c0    	mov    DWORD PTR ds:0xc002dd60,edx
c0011621:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011625:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011628:	83 ec 08             	sub    esp,0x8
c001162b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001162f:	68 38 ef 02 c0       	push   0xc002ef38
c0011634:	e8 83 78 01 00       	call   c0028ebc <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011639:	83 c4 10             	add    esp,0x10
c001163c:	a0 34 ef 02 c0       	mov    al,ds:0xc002ef34
c0011641:	83 f0 01             	xor    eax,0x1
c0011644:	84 c0                	test   al,al
c0011646:	0f 84 54 01 00 00    	je     c00117a0 <UnixFile::UnixFile(int)+0x1aa>
c001164c:	c6 05 34 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef34,0x1
c0011653:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001165b:	83 ec 0c             	sub    esp,0xc
c001165e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011662:	e8 1f e2 ff ff       	call   c000f886 <malloc>
c0011667:	83 c4 10             	add    esp,0x10
c001166a:	89 c3                	mov    ebx,eax
c001166c:	83 ec 08             	sub    esp,0x8
c001166f:	68 03 ff ff 0f       	push   0xfffff03
c0011674:	53                   	push   ebx
c0011675:	e8 2c 01 00 00       	call   c00117a6 <ReservedFilename::ReservedFilename(int)>
c001167a:	83 c4 10             	add    esp,0x10
c001167d:	89 1d 2c ef 02 c0    	mov    DWORD PTR ds:0xc002ef2c,ebx
c0011683:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001168b:	83 ec 0c             	sub    esp,0xc
c001168e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011692:	e8 ef e1 ff ff       	call   c000f886 <malloc>
c0011697:	83 c4 10             	add    esp,0x10
c001169a:	89 c3                	mov    ebx,eax
c001169c:	83 ec 08             	sub    esp,0x8
c001169f:	68 01 ff ff 0f       	push   0xfffff01
c00116a4:	53                   	push   ebx
c00116a5:	e8 fc 00 00 00       	call   c00117a6 <ReservedFilename::ReservedFilename(int)>
c00116aa:	83 c4 10             	add    esp,0x10
c00116ad:	89 1d 30 ef 02 c0    	mov    DWORD PTR ds:0xc002ef30,ebx
c00116b3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00116bb:	83 ec 0c             	sub    esp,0xc
c00116be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00116c2:	e8 bf e1 ff ff       	call   c000f886 <malloc>
c00116c7:	83 c4 10             	add    esp,0x10
c00116ca:	89 c3                	mov    ebx,eax
c00116cc:	83 ec 08             	sub    esp,0x8
c00116cf:	68 00 ff ff 0f       	push   0xfffff00
c00116d4:	53                   	push   ebx
c00116d5:	e8 cc 00 00 00       	call   c00117a6 <ReservedFilename::ReservedFilename(int)>
c00116da:	83 c4 10             	add    esp,0x10
c00116dd:	89 1d 24 ef 02 c0    	mov    DWORD PTR ds:0xc002ef24,ebx
c00116e3:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00116eb:	83 ec 0c             	sub    esp,0xc
c00116ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116f2:	e8 8f e1 ff ff       	call   c000f886 <malloc>
c00116f7:	83 c4 10             	add    esp,0x10
c00116fa:	89 c3                	mov    ebx,eax
c00116fc:	83 ec 08             	sub    esp,0x8
c00116ff:	68 02 ff ff 0f       	push   0xfffff02
c0011704:	53                   	push   ebx
c0011705:	e8 9c 00 00 00       	call   c00117a6 <ReservedFilename::ReservedFilename(int)>
c001170a:	83 c4 10             	add    esp,0x10
c001170d:	89 1d 28 ef 02 c0    	mov    DWORD PTR ds:0xc002ef28,ebx
c0011713:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001171b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011720:	7f 7e                	jg     c00117a0 <UnixFile::UnixFile(int)+0x1aa>
c0011722:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001172a:	83 ec 0c             	sub    esp,0xc
c001172d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011731:	e8 50 e1 ff ff       	call   c000f886 <malloc>
c0011736:	83 c4 10             	add    esp,0x10
c0011739:	89 c3                	mov    ebx,eax
c001173b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001173f:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011744:	83 ec 08             	sub    esp,0x8
c0011747:	50                   	push   eax
c0011748:	53                   	push   ebx
c0011749:	e8 58 00 00 00       	call   c00117a6 <ReservedFilename::ReservedFilename(int)>
c001174e:	83 c4 10             	add    esp,0x10
c0011751:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011755:	89 1c 85 00 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1100],ebx
c001175c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011764:	83 ec 0c             	sub    esp,0xc
c0011767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001176b:	e8 16 e1 ff ff       	call   c000f886 <malloc>
c0011770:	83 c4 10             	add    esp,0x10
c0011773:	89 c3                	mov    ebx,eax
c0011775:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011779:	05 20 ff ff 0f       	add    eax,0xfffff20
c001177e:	83 ec 08             	sub    esp,0x8
c0011781:	50                   	push   eax
c0011782:	53                   	push   ebx
c0011783:	e8 1e 00 00 00       	call   c00117a6 <ReservedFilename::ReservedFilename(int)>
c0011788:	83 c4 10             	add    esp,0x10
c001178b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001178f:	89 1c 85 c0 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1140],ebx
c0011796:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001179a:	e9 7c ff ff ff       	jmp    c001171b <UnixFile::UnixFile(int)+0x125>
c001179f:	90                   	nop
c00117a0:	83 c4 28             	add    esp,0x28
c00117a3:	5b                   	pop    ebx
c00117a4:	c3                   	ret    
c00117a5:	90                   	nop

c00117a6 <ReservedFilename::ReservedFilename(int)>:
c00117a6:	83 ec 0c             	sub    esp,0xc
c00117a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ad:	83 ec 08             	sub    esp,0x8
c00117b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117b4:	50                   	push   eax
c00117b5:	e8 3c fe ff ff       	call   c00115f6 <UnixFile::UnixFile(int)>
c00117ba:	83 c4 10             	add    esp,0x10
c00117bd:	ba d0 ad 02 c0       	mov    edx,0xc002add0
c00117c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c6:	89 10                	mov    DWORD PTR [eax],edx
c00117c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00117d0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00117d3:	90                   	nop
c00117d4:	83 c4 0c             	add    esp,0xc
c00117d7:	c3                   	ret    

c00117d8 <UnixFile::~UnixFile()>:
c00117d8:	83 ec 1c             	sub    esp,0x1c
c00117db:	ba b4 ad 02 c0       	mov    edx,0xc002adb4
c00117e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117e4:	89 10                	mov    DWORD PTR [eax],edx
c00117e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117ed:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00117f2:	7f 73                	jg     c0011867 <UnixFile::~UnixFile()+0x8f>
c00117f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00117fc:	83 ec 0c             	sub    esp,0xc
c00117ff:	68 38 ef 02 c0       	push   0xc002ef38
c0011804:	e8 87 77 01 00       	call   c0028f90 <LinkedList<UnixFile>::getFirstElement()>
c0011809:	83 c4 10             	add    esp,0x10
c001180c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011810:	83 ec 0c             	sub    esp,0xc
c0011813:	68 38 ef 02 c0       	push   0xc002ef38
c0011818:	e8 7b 77 01 00       	call   c0028f98 <LinkedList<UnixFile>::removeFirst()>
c001181d:	83 c4 10             	add    esp,0x10
c0011820:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011824:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011828:	74 40                	je     c001186a <UnixFile::~UnixFile()+0x92>
c001182a:	83 ec 08             	sub    esp,0x8
c001182d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011831:	68 38 ef 02 c0       	push   0xc002ef38
c0011836:	e8 81 76 01 00       	call   c0028ebc <LinkedList<UnixFile>::addElement(UnixFile*)>
c001183b:	83 c4 10             	add    esp,0x10
c001183e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011842:	8d 50 01             	lea    edx,[eax+0x1]
c0011845:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011849:	3d 88 13 00 00       	cmp    eax,0x1388
c001184e:	0f 94 c0             	sete   al
c0011851:	84 c0                	test   al,al
c0011853:	74 a7                	je     c00117fc <UnixFile::~UnixFile()+0x24>
c0011855:	83 ec 0c             	sub    esp,0xc
c0011858:	68 8c ad 02 c0       	push   0xc002ad8c
c001185d:	e8 a3 8f 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0011862:	83 c4 10             	add    esp,0x10
c0011865:	eb 95                	jmp    c00117fc <UnixFile::~UnixFile()+0x24>
c0011867:	90                   	nop
c0011868:	eb 01                	jmp    c001186b <UnixFile::~UnixFile()+0x93>
c001186a:	90                   	nop
c001186b:	90                   	nop
c001186c:	83 c4 1c             	add    esp,0x1c
c001186f:	c3                   	ret    

c0011870 <UnixFile::~UnixFile()>:
c0011870:	83 ec 0c             	sub    esp,0xc
c0011873:	83 ec 0c             	sub    esp,0xc
c0011876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001187a:	e8 59 ff ff ff       	call   c00117d8 <UnixFile::~UnixFile()>
c001187f:	83 c4 10             	add    esp,0x10
c0011882:	83 ec 08             	sub    esp,0x8
c0011885:	6a 0c                	push   0xc
c0011887:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001188b:	e8 d5 14 00 00       	call   c0012d65 <operator delete(void*, unsigned long)>
c0011890:	83 c4 10             	add    esp,0x10
c0011893:	83 c4 0c             	add    esp,0xc
c0011896:	c3                   	ret    
c0011897:	90                   	nop

c0011898 <ReservedFilename::~ReservedFilename()>:
c0011898:	83 ec 0c             	sub    esp,0xc
c001189b:	ba d0 ad 02 c0       	mov    edx,0xc002add0
c00118a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a4:	89 10                	mov    DWORD PTR [eax],edx
c00118a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118aa:	83 ec 0c             	sub    esp,0xc
c00118ad:	50                   	push   eax
c00118ae:	e8 25 ff ff ff       	call   c00117d8 <UnixFile::~UnixFile()>
c00118b3:	83 c4 10             	add    esp,0x10
c00118b6:	90                   	nop
c00118b7:	83 c4 0c             	add    esp,0xc
c00118ba:	c3                   	ret    
c00118bb:	90                   	nop

c00118bc <ReservedFilename::~ReservedFilename()>:
c00118bc:	83 ec 0c             	sub    esp,0xc
c00118bf:	83 ec 0c             	sub    esp,0xc
c00118c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118c6:	e8 cd ff ff ff       	call   c0011898 <ReservedFilename::~ReservedFilename()>
c00118cb:	83 c4 10             	add    esp,0x10
c00118ce:	83 ec 08             	sub    esp,0x8
c00118d1:	6a 0c                	push   0xc
c00118d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118d7:	e8 89 14 00 00       	call   c0012d65 <operator delete(void*, unsigned long)>
c00118dc:	83 c4 10             	add    esp,0x10
c00118df:	83 c4 0c             	add    esp,0xc
c00118e2:	c3                   	ret    

c00118e3 <getFromFileDescriptor(int)>:
c00118e3:	53                   	push   ebx
c00118e4:	83 ec 08             	sub    esp,0x8
c00118e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118eb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00118f1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00118f7:	7f 2c                	jg     c0011925 <getFromFileDescriptor(int)+0x42>
c00118f9:	83 ec 0c             	sub    esp,0xc
c00118fc:	68 38 ef 02 c0       	push   0xc002ef38
c0011901:	e8 8a 76 01 00       	call   c0028f90 <LinkedList<UnixFile>::getFirstElement()>
c0011906:	83 c4 10             	add    esp,0x10
c0011909:	85 c0                	test   eax,eax
c001190b:	75 04                	jne    c0011911 <getFromFileDescriptor(int)+0x2e>
c001190d:	31 c0                	xor    eax,eax
c001190f:	eb 6e                	jmp    c001197f <getFromFileDescriptor(int)+0x9c>
c0011911:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011914:	74 69                	je     c001197f <getFromFileDescriptor(int)+0x9c>
c0011916:	52                   	push   edx
c0011917:	52                   	push   edx
c0011918:	50                   	push   eax
c0011919:	68 38 ef 02 c0       	push   0xc002ef38
c001191e:	e8 17 77 01 00       	call   c002903a <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011923:	eb e1                	jmp    c0011906 <getFromFileDescriptor(int)+0x23>
c0011925:	a1 2c ef 02 c0       	mov    eax,ds:0xc002ef2c
c001192a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011930:	74 4d                	je     c001197f <getFromFileDescriptor(int)+0x9c>
c0011932:	a1 30 ef 02 c0       	mov    eax,ds:0xc002ef30
c0011937:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001193d:	74 40                	je     c001197f <getFromFileDescriptor(int)+0x9c>
c001193f:	a1 28 ef 02 c0       	mov    eax,ds:0xc002ef28
c0011944:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001194a:	74 33                	je     c001197f <getFromFileDescriptor(int)+0x9c>
c001194c:	a1 24 ef 02 c0       	mov    eax,ds:0xc002ef24
c0011951:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011957:	74 26                	je     c001197f <getFromFileDescriptor(int)+0x9c>
c0011959:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001195f:	83 f8 08             	cmp    eax,0x8
c0011962:	77 09                	ja     c001196d <getFromFileDescriptor(int)+0x8a>
c0011964:	8b 04 85 00 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1100]
c001196b:	eb 12                	jmp    c001197f <getFromFileDescriptor(int)+0x9c>
c001196d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011973:	83 fb 08             	cmp    ebx,0x8
c0011976:	77 95                	ja     c001190d <getFromFileDescriptor(int)+0x2a>
c0011978:	8b 04 9d c0 ee 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1140]
c001197f:	83 c4 08             	add    esp,0x8
c0011982:	5b                   	pop    ebx
c0011983:	c3                   	ret    

c0011984 <__static_initialization_and_destruction_0(int, int)>:
c0011984:	83 ec 0c             	sub    esp,0xc
c0011987:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001198c:	75 34                	jne    c00119c2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001198e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011996:	75 2a                	jne    c00119c2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011998:	83 ec 0c             	sub    esp,0xc
c001199b:	68 38 ef 02 c0       	push   0xc002ef38
c00119a0:	e8 bf 74 01 00       	call   c0028e64 <LinkedList<UnixFile>::LinkedList()>
c00119a5:	83 c4 10             	add    esp,0x10
c00119a8:	83 ec 04             	sub    esp,0x4
c00119ab:	68 f0 dc 02 c0       	push   0xc002dcf0
c00119b0:	68 38 ef 02 c0       	push   0xc002ef38
c00119b5:	68 62 8e 02 c0       	push   0xc0028e62
c00119ba:	e8 20 13 00 00       	call   c0012cdf <__cxa_atexit>
c00119bf:	83 c4 10             	add    esp,0x10
c00119c2:	90                   	nop
c00119c3:	83 c4 0c             	add    esp,0xc
c00119c6:	c3                   	ret    

c00119c7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00119c7:	83 ec 0c             	sub    esp,0xc
c00119ca:	83 ec 08             	sub    esp,0x8
c00119cd:	68 ff ff 00 00       	push   0xffff
c00119d2:	6a 01                	push   0x1
c00119d4:	e8 ab ff ff ff       	call   c0011984 <__static_initialization_and_destruction_0(int, int)>
c00119d9:	83 c4 10             	add    esp,0x10
c00119dc:	83 c4 0c             	add    esp,0xc
c00119df:	c3                   	ret    

c00119e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00119e0:	53                   	push   ebx
c00119e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00119e9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00119ef:	89 c8                	mov    eax,ecx
c00119f1:	d1 e8                	shr    eax,1
c00119f3:	03 05 68 dd 02 c0    	add    eax,DWORD PTR ds:0xc002dd68
c00119f9:	83 e1 01             	and    ecx,0x1
c00119fc:	8a 10                	mov    dl,BYTE PTR [eax]
c00119fe:	75 09                	jne    c0011a09 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011a00:	83 e2 f0             	and    edx,0xfffffff0
c0011a03:	09 da                	or     edx,ebx
c0011a05:	88 10                	mov    BYTE PTR [eax],dl
c0011a07:	5b                   	pop    ebx
c0011a08:	c3                   	ret    
c0011a09:	c1 e3 04             	shl    ebx,0x4
c0011a0c:	83 e2 0f             	and    edx,0xf
c0011a0f:	09 da                	or     edx,ebx
c0011a11:	88 10                	mov    BYTE PTR [eax],dl
c0011a13:	5b                   	pop    ebx
c0011a14:	c3                   	ret    

c0011a15 <Virt::getPageState(unsigned long)>:
c0011a15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a19:	8b 0d 68 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002dd68
c0011a1f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011a25:	89 d0                	mov    eax,edx
c0011a27:	d1 e8                	shr    eax,1
c0011a29:	83 e2 01             	and    edx,0x1
c0011a2c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011a2f:	75 04                	jne    c0011a35 <Virt::getPageState(unsigned long)+0x20>
c0011a31:	83 e0 0f             	and    eax,0xf
c0011a34:	c3                   	ret    
c0011a35:	c0 e8 04             	shr    al,0x4
c0011a38:	c3                   	ret    

c0011a39 <Virt::allocateKernelVirtualPages(int)>:
c0011a39:	55                   	push   ebp
c0011a3a:	31 ed                	xor    ebp,ebp
c0011a3c:	57                   	push   edi
c0011a3d:	56                   	push   esi
c0011a3e:	53                   	push   ebx
c0011a3f:	31 db                	xor    ebx,ebx
c0011a41:	83 ec 1c             	sub    esp,0x1c
c0011a44:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011a48:	8b 3d 64 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dd64
c0011a4e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a53:	57                   	push   edi
c0011a54:	e8 bc ff ff ff       	call   c0011a15 <Virt::getPageState(unsigned long)>
c0011a59:	5a                   	pop    edx
c0011a5a:	84 c0                	test   al,al
c0011a5c:	75 3a                	jne    c0011a98 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011a5e:	85 db                	test   ebx,ebx
c0011a60:	75 02                	jne    c0011a64 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011a62:	89 fd                	mov    ebp,edi
c0011a64:	43                   	inc    ebx
c0011a65:	39 f3                	cmp    ebx,esi
c0011a67:	74 5a                	je     c0011ac3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011a69:	47                   	inc    edi
c0011a6a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a70:	76 31                	jbe    c0011aa3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011a72:	c7 05 64 dd 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002dd64,0xc8000
c0011a7c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a81:	75 28                	jne    c0011aab <Virt::allocateKernelVirtualPages(int)+0x72>
c0011a83:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011a88:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011a8d:	57                   	push   edi
c0011a8e:	e8 82 ff ff ff       	call   c0011a15 <Virt::getPageState(unsigned long)>
c0011a93:	5a                   	pop    edx
c0011a94:	84 c0                	test   al,al
c0011a96:	74 c6                	je     c0011a5e <Virt::allocateKernelVirtualPages(int)+0x25>
c0011a98:	31 db                	xor    ebx,ebx
c0011a9a:	47                   	inc    edi
c0011a9b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011aa1:	77 cf                	ja     c0011a72 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011aa3:	89 3d 64 dd 02 c0    	mov    DWORD PTR ds:0xc002dd64,edi
c0011aa9:	eb a8                	jmp    c0011a53 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011aab:	83 ec 0c             	sub    esp,0xc
c0011aae:	68 e4 ad 02 c0       	push   0xc002ade4
c0011ab3:	e8 4d 8d 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0011ab8:	8b 3d 64 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dd64
c0011abe:	83 c4 10             	add    esp,0x10
c0011ac1:	eb 90                	jmp    c0011a53 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011ac3:	89 2d 64 dd 02 c0    	mov    DWORD PTR ds:0xc002dd64,ebp
c0011ac9:	4b                   	dec    ebx
c0011aca:	74 5f                	je     c0011b2b <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011acc:	85 f6                	test   esi,esi
c0011ace:	74 3d                	je     c0011b0d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011ad0:	89 e8                	mov    eax,ebp
c0011ad2:	31 db                	xor    ebx,ebx
c0011ad4:	8d 7e ff             	lea    edi,[esi-0x1]
c0011ad7:	eb 14                	jmp    c0011aed <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011ad9:	6a 01                	push   0x1
c0011adb:	43                   	inc    ebx
c0011adc:	50                   	push   eax
c0011add:	e8 fe fe ff ff       	call   c00119e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ae2:	58                   	pop    eax
c0011ae3:	39 f3                	cmp    ebx,esi
c0011ae5:	5a                   	pop    edx
c0011ae6:	74 25                	je     c0011b0d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011ae8:	a1 64 dd 02 c0       	mov    eax,ds:0xc002dd64
c0011aed:	8d 50 01             	lea    edx,[eax+0x1]
c0011af0:	85 db                	test   ebx,ebx
c0011af2:	89 15 64 dd 02 c0    	mov    DWORD PTR ds:0xc002dd64,edx
c0011af8:	74 20                	je     c0011b1a <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011afa:	39 df                	cmp    edi,ebx
c0011afc:	75 db                	jne    c0011ad9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011afe:	6a 03                	push   0x3
c0011b00:	43                   	inc    ebx
c0011b01:	50                   	push   eax
c0011b02:	e8 d9 fe ff ff       	call   c00119e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b07:	59                   	pop    ecx
c0011b08:	39 f3                	cmp    ebx,esi
c0011b0a:	58                   	pop    eax
c0011b0b:	75 db                	jne    c0011ae8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b0d:	83 c4 1c             	add    esp,0x1c
c0011b10:	89 e8                	mov    eax,ebp
c0011b12:	5b                   	pop    ebx
c0011b13:	c1 e0 0c             	shl    eax,0xc
c0011b16:	5e                   	pop    esi
c0011b17:	5f                   	pop    edi
c0011b18:	5d                   	pop    ebp
c0011b19:	c3                   	ret    
c0011b1a:	6a 02                	push   0x2
c0011b1c:	bb 01 00 00 00       	mov    ebx,0x1
c0011b21:	50                   	push   eax
c0011b22:	e8 b9 fe ff ff       	call   c00119e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b27:	58                   	pop    eax
c0011b28:	5a                   	pop    edx
c0011b29:	eb bd                	jmp    c0011ae8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b2b:	6a 04                	push   0x4
c0011b2d:	8d 45 01             	lea    eax,[ebp+0x1]
c0011b30:	55                   	push   ebp
c0011b31:	a3 64 dd 02 c0       	mov    ds:0xc002dd64,eax
c0011b36:	e8 a5 fe ff ff       	call   c00119e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b3b:	59                   	pop    ecx
c0011b3c:	89 e8                	mov    eax,ebp
c0011b3e:	5b                   	pop    ebx
c0011b3f:	c1 e0 0c             	shl    eax,0xc
c0011b42:	83 c4 1c             	add    esp,0x1c
c0011b45:	5b                   	pop    ebx
c0011b46:	5e                   	pop    esi
c0011b47:	5f                   	pop    edi
c0011b48:	5d                   	pop    ebp
c0011b49:	c3                   	ret    

c0011b4a <Virt::freeSwapfilePage(unsigned long)>:
c0011b4a:	53                   	push   ebx
c0011b4b:	8b 15 4c ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef4c
c0011b51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b55:	b8 01 00 00 00       	mov    eax,0x1
c0011b5a:	89 cb                	mov    ebx,ecx
c0011b5c:	d3 e0                	shl    eax,cl
c0011b5e:	c1 eb 05             	shr    ebx,0x5
c0011b61:	f7 d0                	not    eax
c0011b63:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011b66:	5b                   	pop    ebx
c0011b67:	c3                   	ret    

c0011b68 <Virt::swapIDToSector(unsigned long)>:
c0011b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b6c:	0f af 05 6c dd 02 c0 	imul   eax,DWORD PTR ds:0xc002dd6c
c0011b73:	03 05 74 dd 02 c0    	add    eax,DWORD PTR ds:0xc002dd74
c0011b79:	c3                   	ret    

c0011b7a <Virt::allocateSwapfilePage()>:
c0011b7a:	55                   	push   ebp
c0011b7b:	31 d2                	xor    edx,edx
c0011b7d:	57                   	push   edi
c0011b7e:	56                   	push   esi
c0011b7f:	53                   	push   ebx
c0011b80:	83 ec 0c             	sub    esp,0xc
c0011b83:	8b 0d 6c dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002dd6c
c0011b89:	a1 70 dd 02 c0       	mov    eax,ds:0xc002dd70
c0011b8e:	f7 f1                	div    ecx
c0011b90:	39 0d 70 dd 02 c0    	cmp    DWORD PTR ds:0xc002dd70,ecx
c0011b96:	72 2d                	jb     c0011bc5 <Virt::allocateSwapfilePage()+0x4b>
c0011b98:	8b 35 4c ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef4c
c0011b9e:	8b 16                	mov    edx,DWORD PTR [esi]
c0011ba0:	f6 c2 01             	test   dl,0x1
c0011ba3:	74 3c                	je     c0011be1 <Virt::allocateSwapfilePage()+0x67>
c0011ba5:	31 c9                	xor    ecx,ecx
c0011ba7:	bf 01 00 00 00       	mov    edi,0x1
c0011bac:	eb 12                	jmp    c0011bc0 <Virt::allocateSwapfilePage()+0x46>
c0011bae:	89 fd                	mov    ebp,edi
c0011bb0:	89 ca                	mov    edx,ecx
c0011bb2:	d3 e5                	shl    ebp,cl
c0011bb4:	c1 ea 05             	shr    edx,0x5
c0011bb7:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011bba:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011bbc:	85 ea                	test   edx,ebp
c0011bbe:	74 2a                	je     c0011bea <Virt::allocateSwapfilePage()+0x70>
c0011bc0:	41                   	inc    ecx
c0011bc1:	39 c8                	cmp    eax,ecx
c0011bc3:	77 e9                	ja     c0011bae <Virt::allocateSwapfilePage()+0x34>
c0011bc5:	83 ec 0c             	sub    esp,0xc
c0011bc8:	68 6b af 02 c0       	push   0xc002af6b
c0011bcd:	e8 33 8c 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0011bd2:	83 c4 10             	add    esp,0x10
c0011bd5:	31 c9                	xor    ecx,ecx
c0011bd7:	83 c4 0c             	add    esp,0xc
c0011bda:	89 c8                	mov    eax,ecx
c0011bdc:	5b                   	pop    ebx
c0011bdd:	5e                   	pop    esi
c0011bde:	5f                   	pop    edi
c0011bdf:	5d                   	pop    ebp
c0011be0:	c3                   	ret    
c0011be1:	89 f3                	mov    ebx,esi
c0011be3:	bd 01 00 00 00       	mov    ebp,0x1
c0011be8:	31 c9                	xor    ecx,ecx
c0011bea:	09 ea                	or     edx,ebp
c0011bec:	89 c8                	mov    eax,ecx
c0011bee:	89 13                	mov    DWORD PTR [ebx],edx
c0011bf0:	83 c4 0c             	add    esp,0xc
c0011bf3:	5b                   	pop    ebx
c0011bf4:	5e                   	pop    esi
c0011bf5:	5f                   	pop    edi
c0011bf6:	5d                   	pop    ebp
c0011bf7:	c3                   	ret    

c0011bf8 <Virt::virtualMemorySetup()>:
c0011bf8:	53                   	push   ebx
c0011bf9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011bfe:	83 ec 08             	sub    esp,0x8
c0011c01:	6a 0f                	push   0xf
c0011c03:	53                   	push   ebx
c0011c04:	43                   	inc    ebx
c0011c05:	e8 d6 fd ff ff       	call   c00119e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c0a:	59                   	pop    ecx
c0011c0b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c11:	58                   	pop    eax
c0011c12:	75 ed                	jne    c0011c01 <Virt::virtualMemorySetup()+0x9>
c0011c14:	83 ec 08             	sub    esp,0x8
c0011c17:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c1c:	68 00 00 00 c8       	push   0xc8000000
c0011c21:	68 82 af 02 c0       	push   0xc002af82
c0011c26:	e8 1a 12 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0011c2b:	58                   	pop    eax
c0011c2c:	5a                   	pop    edx
c0011c2d:	68 00 f0 ff ef       	push   0xeffff000
c0011c32:	68 96 af 02 c0       	push   0xc002af96
c0011c37:	e8 09 12 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0011c3c:	83 c4 10             	add    esp,0x10
c0011c3f:	83 ec 08             	sub    esp,0x8
c0011c42:	6a 00                	push   0x0
c0011c44:	53                   	push   ebx
c0011c45:	43                   	inc    ebx
c0011c46:	e8 95 fd ff ff       	call   c00119e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c4b:	83 c4 10             	add    esp,0x10
c0011c4e:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c54:	75 e9                	jne    c0011c3f <Virt::virtualMemorySetup()+0x47>
c0011c56:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c5b:	83 ec 08             	sub    esp,0x8
c0011c5e:	6a 0f                	push   0xf
c0011c60:	53                   	push   ebx
c0011c61:	43                   	inc    ebx
c0011c62:	e8 79 fd ff ff       	call   c00119e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c67:	83 c4 10             	add    esp,0x10
c0011c6a:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011c70:	75 e9                	jne    c0011c5b <Virt::virtualMemorySetup()+0x63>
c0011c72:	83 c4 08             	add    esp,0x8
c0011c75:	5b                   	pop    ebx
c0011c76:	c3                   	ret    

c0011c77 <Virt::swappingSetup()>:
c0011c77:	c3                   	ret    

c0011c78 <Virt::getAKernelVAS()>:
c0011c78:	a1 50 ef 02 c0       	mov    eax,ds:0xc002ef50
c0011c7d:	c3                   	ret    

c0011c7e <Virt::setupPageSwapping(int)>:
c0011c7e:	57                   	push   edi
c0011c7f:	56                   	push   esi
c0011c80:	53                   	push   ebx
c0011c81:	83 ec 1c             	sub    esp,0x1c
c0011c84:	68 aa af 02 c0       	push   0xc002afaa
c0011c89:	e8 b7 11 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0011c8e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011c95:	e8 ec db ff ff       	call   c000f886 <malloc>
c0011c9a:	83 c4 0c             	add    esp,0xc
c0011c9d:	89 c6                	mov    esi,eax
c0011c9f:	ff 35 30 23 03 c0    	push   DWORD PTR ds:0xc0032330
c0011ca5:	68 be af 02 c0       	push   0xc002afbe
c0011caa:	50                   	push   eax
c0011cab:	e8 f4 16 00 00       	call   c00133a4 <File::File(char const*, Process*)>
c0011cb0:	89 34 24             	mov    DWORD PTR [esp],esi
c0011cb3:	e8 c8 18 00 00       	call   c0013580 <File::unlink()>
c0011cb8:	59                   	pop    ecx
c0011cb9:	5b                   	pop    ebx
c0011cba:	6a 12                	push   0x12
c0011cbc:	56                   	push   esi
c0011cbd:	e8 46 17 00 00       	call   c0013408 <File::open(FileOpenMode)>
c0011cc2:	83 c4 10             	add    esp,0x10
c0011cc5:	85 c0                	test   eax,eax
c0011cc7:	0f 85 5b 01 00 00    	jne    c0011e28 <Virt::setupPageSwapping(int)+0x1aa>
c0011ccd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cd1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011cd9:	c1 e3 08             	shl    ebx,0x8
c0011cdc:	83 ec 0c             	sub    esp,0xc
c0011cdf:	68 00 00 01 00       	push   0x10000
c0011ce4:	e8 9d db ff ff       	call   c000f886 <malloc>
c0011ce9:	83 c4 0c             	add    esp,0xc
c0011cec:	89 c7                	mov    edi,eax
c0011cee:	68 00 00 01 00       	push   0x10000
c0011cf3:	68 ee 00 00 00       	push   0xee
c0011cf8:	50                   	push   eax
c0011cf9:	e8 9e ea fe ff       	call   c000079c <memset>
c0011cfe:	83 c4 10             	add    esp,0x10
c0011d01:	85 db                	test   ebx,ebx
c0011d03:	79 03                	jns    c0011d08 <Virt::setupPageSwapping(int)+0x8a>
c0011d05:	83 c3 0f             	add    ebx,0xf
c0011d08:	c1 fb 04             	sar    ebx,0x4
c0011d0b:	4b                   	dec    ebx
c0011d0c:	83 fb ff             	cmp    ebx,0xffffffff
c0011d0f:	74 4f                	je     c0011d60 <Virt::setupPageSwapping(int)+0xe2>
c0011d11:	83 ec 0c             	sub    esp,0xc
c0011d14:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d16:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d1a:	52                   	push   edx
c0011d1b:	57                   	push   edi
c0011d1c:	6a 00                	push   0x0
c0011d1e:	68 00 00 01 00       	push   0x10000
c0011d23:	56                   	push   esi
c0011d24:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d27:	83 c4 20             	add    esp,0x20
c0011d2a:	85 c0                	test   eax,eax
c0011d2c:	0f 85 e0 00 00 00    	jne    c0011e12 <Virt::setupPageSwapping(int)+0x194>
c0011d32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d36:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d3b:	74 ce                	je     c0011d0b <Virt::setupPageSwapping(int)+0x8d>
c0011d3d:	83 ec 08             	sub    esp,0x8
c0011d40:	4b                   	dec    ebx
c0011d41:	50                   	push   eax
c0011d42:	68 11 b0 02 c0       	push   0xc002b011
c0011d47:	e8 f9 10 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0011d4c:	c7 04 24 1a b0 02 c0 	mov    DWORD PTR [esp],0xc002b01a
c0011d53:	e8 ad 8a 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0011d58:	83 c4 10             	add    esp,0x10
c0011d5b:	83 fb ff             	cmp    ebx,0xffffffff
c0011d5e:	75 b1                	jne    c0011d11 <Virt::setupPageSwapping(int)+0x93>
c0011d60:	83 ec 0c             	sub    esp,0xc
c0011d63:	56                   	push   esi
c0011d64:	e8 fd 16 00 00       	call   c0013466 <File::close()>
c0011d69:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d6c:	e8 35 db ff ff       	call   c000f8a6 <rfree>
c0011d71:	83 c4 10             	add    esp,0x10
c0011d74:	85 f6                	test   esi,esi
c0011d76:	74 0c                	je     c0011d84 <Virt::setupPageSwapping(int)+0x106>
c0011d78:	83 ec 0c             	sub    esp,0xc
c0011d7b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d7d:	56                   	push   esi
c0011d7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d81:	83 c4 10             	add    esp,0x10
c0011d84:	83 ec 08             	sub    esp,0x8
c0011d87:	a1 e8 f3 02 c0       	mov    eax,ds:0xc002f3e8
c0011d8c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011d92:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d94:	68 be af 02 c0       	push   0xc002afbe
c0011d99:	50                   	push   eax
c0011d9a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011d9d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011da1:	c6 05 78 dd 02 c0 43 	mov    BYTE PTR ds:0xc002dd78,0x43
c0011da8:	c1 e2 0b             	shl    edx,0xb
c0011dab:	a3 74 dd 02 c0       	mov    ds:0xc002dd74,eax
c0011db0:	89 15 70 dd 02 c0    	mov    DWORD PTR ds:0xc002dd70,edx
c0011db6:	c7 05 6c dd 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002dd6c,0x8
c0011dc0:	c1 ea 08             	shr    edx,0x8
c0011dc3:	89 14 24             	mov    DWORD PTR [esp],edx
c0011dc6:	e8 bb da ff ff       	call   c000f886 <malloc>
c0011dcb:	83 c4 0c             	add    esp,0xc
c0011dce:	89 c1                	mov    ecx,eax
c0011dd0:	a3 4c ef 02 c0       	mov    ds:0xc002ef4c,eax
c0011dd5:	31 d2                	xor    edx,edx
c0011dd7:	a1 70 dd 02 c0       	mov    eax,ds:0xc002dd70
c0011ddc:	f7 35 6c dd 02 c0    	div    DWORD PTR ds:0xc002dd6c
c0011de2:	c1 e8 05             	shr    eax,0x5
c0011de5:	50                   	push   eax
c0011de6:	6a 00                	push   0x0
c0011de8:	51                   	push   ecx
c0011de9:	e8 ae e9 fe ff       	call   c000079c <memset>
c0011dee:	58                   	pop    eax
c0011def:	a1 70 dd 02 c0       	mov    eax,ds:0xc002dd70
c0011df4:	5a                   	pop    edx
c0011df5:	31 d2                	xor    edx,edx
c0011df7:	f7 35 6c dd 02 c0    	div    DWORD PTR ds:0xc002dd6c
c0011dfd:	c1 e8 05             	shr    eax,0x5
c0011e00:	50                   	push   eax
c0011e01:	68 20 b0 02 c0       	push   0xc002b020
c0011e06:	e8 3a 10 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0011e0b:	83 c4 20             	add    esp,0x20
c0011e0e:	5b                   	pop    ebx
c0011e0f:	5e                   	pop    esi
c0011e10:	5f                   	pop    edi
c0011e11:	c3                   	ret    
c0011e12:	83 ec 08             	sub    esp,0x8
c0011e15:	50                   	push   eax
c0011e16:	68 f9 af 02 c0       	push   0xc002aff9
c0011e1b:	e8 25 10 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0011e20:	83 c4 10             	add    esp,0x10
c0011e23:	e9 0a ff ff ff       	jmp    c0011d32 <Virt::setupPageSwapping(int)+0xb4>
c0011e28:	83 ec 08             	sub    esp,0x8
c0011e2b:	50                   	push   eax
c0011e2c:	68 d5 af 02 c0       	push   0xc002afd5
c0011e31:	e8 0f 10 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0011e36:	c7 04 24 de af 02 c0 	mov    DWORD PTR [esp],0xc002afde
c0011e3d:	e8 c3 89 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0011e42:	83 c4 10             	add    esp,0x10
c0011e45:	e9 83 fe ff ff       	jmp    c0011ccd <Virt::setupPageSwapping(int)+0x4f>

c0011e4a <VAS::VAS()>:
c0011e4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e4e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e59:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e64:	a3 50 ef 02 c0       	mov    ds:0xc002ef50,eax
c0011e69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e6d:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e75:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e7c:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011e83:	90                   	nop
c0011e84:	c3                   	ret    
c0011e85:	90                   	nop

c0011e86 <VAS::VAS(VAS*)>:
c0011e86:	83 ec 0c             	sub    esp,0xc
c0011e89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e8d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e98:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e9f:	83 ec 0c             	sub    esp,0xc
c0011ea2:	68 04 ae 02 c0       	push   0xc002ae04
c0011ea7:	e8 59 89 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0011eac:	83 c4 10             	add    esp,0x10
c0011eaf:	90                   	nop
c0011eb0:	83 c4 0c             	add    esp,0xc
c0011eb3:	c3                   	ret    

c0011eb4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011eb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eb8:	89 c2                	mov    edx,eax
c0011eba:	c1 e8 0a             	shr    eax,0xa
c0011ebd:	c1 ea 16             	shr    edx,0x16
c0011ec0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011ec5:	19 c9                	sbb    ecx,ecx
c0011ec7:	c1 e2 0c             	shl    edx,0xc
c0011eca:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011ed0:	25 fc 0f 00 00       	and    eax,0xffc
c0011ed5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011edc:	01 d0                	add    eax,edx
c0011ede:	c3                   	ret    
c0011edf:	90                   	nop

c0011ee0 <VAS::getPageTableEntry(unsigned long)>:
c0011ee0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ee4:	89 ca                	mov    edx,ecx
c0011ee6:	c1 e9 0a             	shr    ecx,0xa
c0011ee9:	c1 ea 16             	shr    edx,0x16
c0011eec:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ef2:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ef8:	c1 e0 0c             	shl    eax,0xc
c0011efb:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011efe:	c3                   	ret    

c0011eff <Virt::freeKernelVirtualPages(unsigned long)>:
c0011eff:	57                   	push   edi
c0011f00:	56                   	push   esi
c0011f01:	be 01 00 00 00       	mov    esi,0x1
c0011f06:	53                   	push   ebx
c0011f07:	83 ec 10             	sub    esp,0x10
c0011f0a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f0e:	c1 eb 0c             	shr    ebx,0xc
c0011f11:	eb 3f                	jmp    c0011f52 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011f13:	e8 60 fd ff ff       	call   c0011c78 <Virt::getAKernelVAS()>
c0011f18:	83 ec 08             	sub    esp,0x8
c0011f1b:	57                   	push   edi
c0011f1c:	50                   	push   eax
c0011f1d:	e8 be ff ff ff       	call   c0011ee0 <VAS::getPageTableEntry(unsigned long)>
c0011f22:	83 c4 10             	add    esp,0x10
c0011f25:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f27:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f2b:	f6 c4 04             	test   ah,0x4
c0011f2e:	75 5f                	jne    c0011f8f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f30:	80 fa 04             	cmp    dl,0x4
c0011f33:	74 78                	je     c0011fad <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f35:	80 fa 02             	cmp    dl,0x2
c0011f38:	0f 84 88 00 00 00    	je     c0011fc6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f3e:	80 fa 03             	cmp    dl,0x3
c0011f41:	0f 84 ad 00 00 00    	je     c0011ff4 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011f47:	fe ca                	dec    dl
c0011f49:	0f 84 92 00 00 00    	je     c0011fe1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f4f:	43                   	inc    ebx
c0011f50:	31 f6                	xor    esi,esi
c0011f52:	53                   	push   ebx
c0011f53:	e8 bd fa ff ff       	call   c0011a15 <Virt::getPageState(unsigned long)>
c0011f58:	5f                   	pop    edi
c0011f59:	89 df                	mov    edi,ebx
c0011f5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f5f:	c1 e7 0c             	shl    edi,0xc
c0011f62:	84 c0                	test   al,al
c0011f64:	75 ad                	jne    c0011f13 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f66:	83 ec 0c             	sub    esp,0xc
c0011f69:	68 3b b0 02 c0       	push   0xc002b03b
c0011f6e:	e8 92 88 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0011f73:	e8 00 fd ff ff       	call   c0011c78 <Virt::getAKernelVAS()>
c0011f78:	5a                   	pop    edx
c0011f79:	59                   	pop    ecx
c0011f7a:	57                   	push   edi
c0011f7b:	50                   	push   eax
c0011f7c:	e8 5f ff ff ff       	call   c0011ee0 <VAS::getPageTableEntry(unsigned long)>
c0011f81:	83 c4 10             	add    esp,0x10
c0011f84:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f86:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f8a:	f6 c4 04             	test   ah,0x4
c0011f8d:	74 c0                	je     c0011f4f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f8f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f93:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f98:	83 ec 0c             	sub    esp,0xc
c0011f9b:	50                   	push   eax
c0011f9c:	e8 c7 de ff ff       	call   c000fe68 <Phys::freePage(unsigned long)>
c0011fa1:	83 c4 10             	add    esp,0x10
c0011fa4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fa8:	80 fa 04             	cmp    dl,0x4
c0011fab:	75 88                	jne    c0011f35 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011fad:	89 f0                	mov    eax,esi
c0011faf:	84 c0                	test   al,al
c0011fb1:	75 47                	jne    c0011ffa <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011fb3:	c7 44 24 20 28 ae 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ae28
c0011fbb:	83 c4 10             	add    esp,0x10
c0011fbe:	5b                   	pop    ebx
c0011fbf:	5e                   	pop    esi
c0011fc0:	5f                   	pop    edi
c0011fc1:	e9 3f 88 00 00       	jmp    c001a805 <Krnl::panic(char const*)>
c0011fc6:	89 f0                	mov    eax,esi
c0011fc8:	84 c0                	test   al,al
c0011fca:	75 15                	jne    c0011fe1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fcc:	83 ec 0c             	sub    esp,0xc
c0011fcf:	68 57 b0 02 c0       	push   0xc002b057
c0011fd4:	e8 2c 88 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0011fd9:	83 c4 10             	add    esp,0x10
c0011fdc:	e9 6e ff ff ff       	jmp    c0011f4f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fe1:	83 ec 08             	sub    esp,0x8
c0011fe4:	6a 00                	push   0x0
c0011fe6:	53                   	push   ebx
c0011fe7:	e8 f4 f9 ff ff       	call   c00119e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fec:	83 c4 10             	add    esp,0x10
c0011fef:	e9 5b ff ff ff       	jmp    c0011f4f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011ff4:	89 f0                	mov    eax,esi
c0011ff6:	84 c0                	test   al,al
c0011ff8:	75 15                	jne    c001200f <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011ffa:	83 ec 08             	sub    esp,0x8
c0011ffd:	6a 00                	push   0x0
c0011fff:	53                   	push   ebx
c0012000:	e8 db f9 ff ff       	call   c00119e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012005:	83 c4 10             	add    esp,0x10
c0012008:	83 c4 10             	add    esp,0x10
c001200b:	5b                   	pop    ebx
c001200c:	5e                   	pop    esi
c001200d:	5f                   	pop    edi
c001200e:	c3                   	ret    
c001200f:	c7 44 24 20 73 b0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b073
c0012017:	83 c4 10             	add    esp,0x10
c001201a:	5b                   	pop    ebx
c001201b:	5e                   	pop    esi
c001201c:	5f                   	pop    edi
c001201d:	e9 e3 87 00 00       	jmp    c001a805 <Krnl::panic(char const*)>

c0012022 <VAS::freeAllocatedPages(unsigned long)>:
c0012022:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012026:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001202a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001202e:	74 09                	je     c0012039 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012030:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012034:	e9 c6 fe ff ff       	jmp    c0011eff <Virt::freeKernelVirtualPages(unsigned long)>
c0012039:	c7 44 24 04 4c ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ae4c
c0012041:	e9 ff 0d 00 00       	jmp    c0012e45 <Dbg::kprintf(char const*, ...)>

c0012046 <VAS::virtualToPhysical(unsigned long)>:
c0012046:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001204a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001204e:	e8 8d fe ff ff       	call   c0011ee0 <VAS::getPageTableEntry(unsigned long)>
c0012053:	5a                   	pop    edx
c0012054:	8b 00                	mov    eax,DWORD PTR [eax]
c0012056:	59                   	pop    ecx
c0012057:	25 00 f0 ff ff       	and    eax,0xfffff000
c001205c:	c3                   	ret    
c001205d:	90                   	nop

c001205e <VAS::reflagRange(unsigned long, int, int, int)>:
c001205e:	55                   	push   ebp
c001205f:	57                   	push   edi
c0012060:	56                   	push   esi
c0012061:	53                   	push   ebx
c0012062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012066:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001206a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001206e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012072:	85 db                	test   ebx,ebx
c0012074:	7e 22                	jle    c0012098 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012076:	c1 e3 0c             	shl    ebx,0xc
c0012079:	01 f3                	add    ebx,esi
c001207b:	56                   	push   esi
c001207c:	81 c6 00 10 00 00    	add    esi,0x1000
c0012082:	55                   	push   ebp
c0012083:	e8 58 fe ff ff       	call   c0011ee0 <VAS::getPageTableEntry(unsigned long)>
c0012088:	5a                   	pop    edx
c0012089:	59                   	pop    ecx
c001208a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001208c:	21 f9                	and    ecx,edi
c001208e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012092:	39 f3                	cmp    ebx,esi
c0012094:	89 08                	mov    DWORD PTR [eax],ecx
c0012096:	75 e3                	jne    c001207b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012098:	5b                   	pop    ebx
c0012099:	5e                   	pop    esi
c001209a:	5f                   	pop    edi
c001209b:	5d                   	pop    ebp
c001209c:	c3                   	ret    
c001209d:	90                   	nop

c001209e <VAS::setToWriteCombining(unsigned long, int)>:
c001209e:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c00120a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120a9:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00120b0:	75 01                	jne    c00120b3 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00120b2:	c3                   	ret    
c00120b3:	68 80 00 00 00       	push   0x80
c00120b8:	6a ff                	push   0xffffffff
c00120ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120c6:	e8 93 ff ff ff       	call   c001205e <VAS::reflagRange(unsigned long, int, int, int)>
c00120cb:	83 c4 14             	add    esp,0x14
c00120ce:	c3                   	ret    
c00120cf:	90                   	nop

c00120d0 <VAS::mapOtherVASIn(bool, VAS*)>:
c00120d0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00120d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120d9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00120dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120e0:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00120e3:	19 c0                	sbb    eax,eax
c00120e5:	83 ca 03             	or     edx,0x3
c00120e8:	83 e0 fc             	and    eax,0xfffffffc
c00120eb:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00120f2:	0f 20 d8             	mov    eax,cr3
c00120f5:	0f 22 d8             	mov    cr3,eax
c00120f8:	c3                   	ret    
c00120f9:	90                   	nop

c00120fa <VAS::~VAS()>:
c00120fa:	83 ec 2c             	sub    esp,0x2c
c00120fd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012105:	fa                   	cli    
c0012106:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001210b:	40                   	inc    eax
c001210c:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c0012111:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012116:	8b 00                	mov    eax,DWORD PTR [eax]
c0012118:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001211b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012121:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012125:	6a 01                	push   0x1
c0012127:	50                   	push   eax
c0012128:	e8 a3 ff ff ff       	call   c00120d0 <VAS::mapOtherVASIn(bool, VAS*)>
c001212d:	83 c4 0c             	add    esp,0xc
c0012130:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012138:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012140:	0f 8f d4 00 00 00    	jg     c001221a <VAS::~VAS()+0x120>
c0012146:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001214a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001214d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012151:	c1 e2 02             	shl    edx,0x2
c0012154:	01 d0                	add    eax,edx
c0012156:	8b 00                	mov    eax,DWORD PTR [eax]
c0012158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001215c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012160:	83 e0 01             	and    eax,0x1
c0012163:	0f 84 a8 00 00 00    	je     c0012211 <VAS::~VAS()+0x117>
c0012169:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012171:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012179:	7f 72                	jg     c00121ed <VAS::~VAS()+0xf3>
c001217b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001217f:	c1 e0 0a             	shl    eax,0xa
c0012182:	89 c2                	mov    edx,eax
c0012184:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012188:	01 d0                	add    eax,edx
c001218a:	c1 e0 0c             	shl    eax,0xc
c001218d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012191:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012196:	8b 00                	mov    eax,DWORD PTR [eax]
c0012198:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001219b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00121a5:	6a 01                	push   0x1
c00121a7:	50                   	push   eax
c00121a8:	e8 07 fd ff ff       	call   c0011eb4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00121ad:	83 c4 0c             	add    esp,0xc
c00121b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00121ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121c2:	25 01 04 00 00       	and    eax,0x401
c00121c7:	3d 01 04 00 00       	cmp    eax,0x401
c00121cc:	75 19                	jne    c00121e7 <VAS::~VAS()+0xed>
c00121ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121d7:	83 ec 0c             	sub    esp,0xc
c00121da:	50                   	push   eax
c00121db:	e8 88 dc ff ff       	call   c000fe68 <Phys::freePage(unsigned long)>
c00121e0:	83 c4 10             	add    esp,0x10
c00121e3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121e7:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00121eb:	eb 84                	jmp    c0012171 <VAS::~VAS()+0x77>
c00121ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121f1:	25 00 04 00 00       	and    eax,0x400
c00121f6:	74 19                	je     c0012211 <VAS::~VAS()+0x117>
c00121f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121fc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012201:	83 ec 0c             	sub    esp,0xc
c0012204:	50                   	push   eax
c0012205:	e8 5e dc ff ff       	call   c000fe68 <Phys::freePage(unsigned long)>
c001220a:	83 c4 10             	add    esp,0x10
c001220d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012211:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012215:	e9 1e ff ff ff       	jmp    c0012138 <VAS::~VAS()+0x3e>
c001221a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001221e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012221:	83 ec 0c             	sub    esp,0xc
c0012224:	50                   	push   eax
c0012225:	e8 d5 fc ff ff       	call   c0011eff <Virt::freeKernelVirtualPages(unsigned long)>
c001222a:	83 c4 10             	add    esp,0x10
c001222d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012231:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012234:	83 ec 0c             	sub    esp,0xc
c0012237:	50                   	push   eax
c0012238:	e8 2b dc ff ff       	call   c000fe68 <Phys::freePage(unsigned long)>
c001223d:	83 c4 10             	add    esp,0x10
c0012240:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012244:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012248:	c1 e0 02             	shl    eax,0x2
c001224b:	83 ec 08             	sub    esp,0x8
c001224e:	50                   	push   eax
c001224f:	68 70 ae 02 c0       	push   0xc002ae70
c0012254:	e8 ec 0b 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0012259:	83 c4 10             	add    esp,0x10
c001225c:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0012261:	48                   	dec    eax
c0012262:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c0012267:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001226c:	85 c0                	test   eax,eax
c001226e:	75 01                	jne    c0012271 <VAS::~VAS()+0x177>
c0012270:	fb                   	sti    
c0012271:	90                   	nop
c0012272:	83 c4 2c             	add    esp,0x2c
c0012275:	c3                   	ret    

c0012276 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012276:	55                   	push   ebp
c0012277:	57                   	push   edi
c0012278:	56                   	push   esi
c0012279:	53                   	push   ebx
c001227a:	83 ec 1c             	sub    esp,0x1c
c001227d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012281:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012285:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001228b:	77 08                	ja     c0012295 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001228d:	0f 20 d8             	mov    eax,cr3
c0012290:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012293:	75 47                	jne    c00122dc <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012295:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012299:	09 d8                	or     eax,ebx
c001229b:	a9 ff 0f 00 00       	test   eax,0xfff
c00122a0:	75 57                	jne    c00122f9 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00122a2:	89 de                	mov    esi,ebx
c00122a4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00122a7:	c1 ee 16             	shr    esi,0x16
c00122aa:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00122b1:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00122b5:	74 54                	je     c001230b <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00122b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122bb:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00122c1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00122c5:	c1 e6 0c             	shl    esi,0xc
c00122c8:	c1 eb 0a             	shr    ebx,0xa
c00122cb:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00122d1:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00122d4:	83 c4 1c             	add    esp,0x1c
c00122d7:	5b                   	pop    ebx
c00122d8:	5e                   	pop    esi
c00122d9:	5f                   	pop    edi
c00122da:	5d                   	pop    ebp
c00122db:	c3                   	ret    
c00122dc:	83 ec 0c             	sub    esp,0xc
c00122df:	68 90 ae 02 c0       	push   0xc002ae90
c00122e4:	e8 5c 0b 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00122e9:	83 c4 10             	add    esp,0x10
c00122ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122f0:	09 d8                	or     eax,ebx
c00122f2:	a9 ff 0f 00 00       	test   eax,0xfff
c00122f7:	74 a9                	je     c00122a2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122f9:	83 ec 0c             	sub    esp,0xc
c00122fc:	68 f8 ae 02 c0       	push   0xc002aef8
c0012301:	e8 ff 84 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0012306:	83 c4 10             	add    esp,0x10
c0012309:	eb 97                	jmp    c00122a2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001230b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001230f:	e8 de db ff ff       	call   c000fef2 <Phys::allocatePage()>
c0012314:	89 c5                	mov    ebp,eax
c0012316:	e8 5d f9 ff ff       	call   c0011c78 <Virt::getAKernelVAS()>
c001231b:	83 ec 0c             	sub    esp,0xc
c001231e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012322:	6a 01                	push   0x1
c0012324:	e8 10 f7 ff ff       	call   c0011a39 <Virt::allocateKernelVirtualPages(int)>
c0012329:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012330:	6a 01                	push   0x1
c0012332:	50                   	push   eax
c0012333:	55                   	push   ebp
c0012334:	81 cd 07 04 00 00    	or     ebp,0x407
c001233a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001233e:	51                   	push   ecx
c001233f:	e8 26 02 00 00       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012344:	83 c4 1c             	add    esp,0x1c
c0012347:	68 00 10 00 00       	push   0x1000
c001234c:	6a 00                	push   0x0
c001234e:	50                   	push   eax
c001234f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012353:	e8 44 e4 fe ff       	call   c000079c <memset>
c0012358:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001235c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001235f:	e8 9b fb ff ff       	call   c0011eff <Virt::freeKernelVirtualPages(unsigned long)>
c0012364:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012368:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001236b:	83 c4 10             	add    esp,0x10
c001236e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012371:	e9 41 ff ff ff       	jmp    c00122b7 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012376 <VAS::allocatePages(int, int)>:
c0012376:	55                   	push   ebp
c0012377:	57                   	push   edi
c0012378:	56                   	push   esi
c0012379:	53                   	push   ebx
c001237a:	83 ec 1c             	sub    esp,0x1c
c001237d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012381:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0012386:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001238c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012392:	83 e0 01             	and    eax,0x1
c0012395:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012399:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001239d:	0f 85 cc 00 00 00    	jne    c001246f <VAS::allocatePages(int, int)+0xf9>
c00123a3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123aa:	85 c0                	test   eax,eax
c00123ac:	0f 84 a1 00 00 00    	je     c0012453 <VAS::allocatePages(int, int)+0xdd>
c00123b2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00123b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123ba:	c1 e6 0c             	shl    esi,0xc
c00123bd:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00123c1:	85 c0                	test   eax,eax
c00123c3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00123c6:	7e 33                	jle    c00123fb <VAS::allocatePages(int, int)+0x85>
c00123c8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00123cc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123d0:	81 cd 00 04 00 00    	or     ebp,0x400
c00123d6:	e8 17 db ff ff       	call   c000fef2 <Phys::allocatePage()>
c00123db:	55                   	push   ebp
c00123dc:	53                   	push   ebx
c00123dd:	50                   	push   eax
c00123de:	57                   	push   edi
c00123df:	e8 92 fe ff ff       	call   c0012276 <VAS::mapPage(unsigned long, unsigned long, int)>
c00123e4:	83 c4 10             	add    esp,0x10
c00123e7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123ec:	74 03                	je     c00123f1 <VAS::allocatePages(int, int)+0x7b>
c00123ee:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123f1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123f7:	39 de                	cmp    esi,ebx
c00123f9:	75 db                	jne    c00123d6 <VAS::allocatePages(int, int)+0x60>
c00123fb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012400:	75 12                	jne    c0012414 <VAS::allocatePages(int, int)+0x9e>
c0012402:	0f 20 d8             	mov    eax,cr3
c0012405:	0f 22 d8             	mov    cr3,eax
c0012408:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001240c:	83 c4 1c             	add    esp,0x1c
c001240f:	5b                   	pop    ebx
c0012410:	5e                   	pop    esi
c0012411:	5f                   	pop    edi
c0012412:	5d                   	pop    ebp
c0012413:	c3                   	ret    
c0012414:	c1 ee 0a             	shr    esi,0xa
c0012417:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001241b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012421:	c1 eb 0a             	shr    ebx,0xa
c0012424:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001242a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012430:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012436:	39 c3                	cmp    ebx,eax
c0012438:	77 ce                	ja     c0012408 <VAS::allocatePages(int, int)+0x92>
c001243a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001243d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012443:	39 d8                	cmp    eax,ebx
c0012445:	73 f3                	jae    c001243a <VAS::allocatePages(int, int)+0xc4>
c0012447:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001244b:	83 c4 1c             	add    esp,0x1c
c001244e:	5b                   	pop    ebx
c001244f:	5e                   	pop    esi
c0012450:	5f                   	pop    edi
c0012451:	5d                   	pop    ebp
c0012452:	c3                   	ret    
c0012453:	83 ec 0c             	sub    esp,0xc
c0012456:	68 1c af 02 c0       	push   0xc002af1c
c001245b:	e8 a5 83 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0012460:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012463:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012467:	83 c4 10             	add    esp,0x10
c001246a:	e9 43 ff ff ff       	jmp    c00123b2 <VAS::allocatePages(int, int)+0x3c>
c001246f:	83 ec 0c             	sub    esp,0xc
c0012472:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012476:	e8 be f5 ff ff       	call   c0011a39 <Virt::allocateKernelVirtualPages(int)>
c001247b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001247f:	83 c4 10             	add    esp,0x10
c0012482:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012487:	0f 87 9b 00 00 00    	ja     c0012528 <VAS::allocatePages(int, int)+0x1b2>
c001248d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012491:	85 d2                	test   edx,edx
c0012493:	7e 3c                	jle    c00124d1 <VAS::allocatePages(int, int)+0x15b>
c0012495:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012499:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001249d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124a1:	c1 e5 0c             	shl    ebp,0xc
c00124a4:	81 ce 00 04 00 00    	or     esi,0x400
c00124aa:	01 dd                	add    ebp,ebx
c00124ac:	e8 41 da ff ff       	call   c000fef2 <Phys::allocatePage()>
c00124b1:	56                   	push   esi
c00124b2:	53                   	push   ebx
c00124b3:	50                   	push   eax
c00124b4:	57                   	push   edi
c00124b5:	e8 bc fd ff ff       	call   c0012276 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124ba:	83 c4 10             	add    esp,0x10
c00124bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124c2:	74 03                	je     c00124c7 <VAS::allocatePages(int, int)+0x151>
c00124c4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124c7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124cd:	39 dd                	cmp    ebp,ebx
c00124cf:	75 db                	jne    c00124ac <VAS::allocatePages(int, int)+0x136>
c00124d1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124d6:	0f 84 26 ff ff ff    	je     c0012402 <VAS::allocatePages(int, int)+0x8c>
c00124dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124e4:	89 d3                	mov    ebx,edx
c00124e6:	c1 e0 0c             	shl    eax,0xc
c00124e9:	c1 eb 0a             	shr    ebx,0xa
c00124ec:	01 d0                	add    eax,edx
c00124ee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124f4:	c1 e8 0a             	shr    eax,0xa
c00124f7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124fd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012502:	2d 00 00 40 00       	sub    eax,0x400000
c0012507:	39 c3                	cmp    ebx,eax
c0012509:	0f 87 f9 fe ff ff    	ja     c0012408 <VAS::allocatePages(int, int)+0x92>
c001250f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012512:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012518:	39 d8                	cmp    eax,ebx
c001251a:	73 f3                	jae    c001250f <VAS::allocatePages(int, int)+0x199>
c001251c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012520:	83 c4 1c             	add    esp,0x1c
c0012523:	5b                   	pop    ebx
c0012524:	5e                   	pop    esi
c0012525:	5f                   	pop    edi
c0012526:	5d                   	pop    ebp
c0012527:	c3                   	ret    
c0012528:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c001252d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012533:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001253a:	0f 84 4d ff ff ff    	je     c001248d <VAS::allocatePages(int, int)+0x117>
c0012540:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012548:	e9 40 ff ff ff       	jmp    c001248d <VAS::allocatePages(int, int)+0x117>
c001254d:	90                   	nop

c001254e <VAS::setCPUSpecific(unsigned long)>:
c001254e:	83 ec 0c             	sub    esp,0xc
c0012551:	6a 05                	push   0x5
c0012553:	68 00 00 40 c2       	push   0xc2400000
c0012558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001255c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012560:	e8 11 fd ff ff       	call   c0012276 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012565:	83 c4 1c             	add    esp,0x1c
c0012568:	c3                   	ret    
c0012569:	90                   	nop

c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001256a:	55                   	push   ebp
c001256b:	57                   	push   edi
c001256c:	56                   	push   esi
c001256d:	53                   	push   ebx
c001256e:	83 ec 1c             	sub    esp,0x1c
c0012571:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0012576:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001257a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012580:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012584:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001258a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001258e:	83 e0 01             	and    eax,0x1
c0012591:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012595:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012599:	85 c0                	test   eax,eax
c001259b:	7e 39                	jle    c00125d6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001259d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125a1:	89 f3                	mov    ebx,esi
c00125a3:	c1 e0 0c             	shl    eax,0xc
c00125a6:	01 f0                	add    eax,esi
c00125a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125ac:	55                   	push   ebp
c00125ad:	53                   	push   ebx
c00125ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125b2:	29 f0                	sub    eax,esi
c00125b4:	01 d8                	add    eax,ebx
c00125b6:	50                   	push   eax
c00125b7:	57                   	push   edi
c00125b8:	e8 b9 fc ff ff       	call   c0012276 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125bd:	83 c4 10             	add    esp,0x10
c00125c0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c5:	74 03                	je     c00125ca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00125c7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125ca:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125d0:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00125d4:	75 d6                	jne    c00125ac <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00125d6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125db:	75 10                	jne    c00125ed <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00125dd:	0f 20 d8             	mov    eax,cr3
c00125e0:	0f 22 d8             	mov    cr3,eax
c00125e3:	83 c4 1c             	add    esp,0x1c
c00125e6:	89 f0                	mov    eax,esi
c00125e8:	5b                   	pop    ebx
c00125e9:	5e                   	pop    esi
c00125ea:	5f                   	pop    edi
c00125eb:	5d                   	pop    ebp
c00125ec:	c3                   	ret    
c00125ed:	89 f3                	mov    ebx,esi
c00125ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125f3:	c1 eb 0a             	shr    ebx,0xa
c00125f6:	c1 e0 0c             	shl    eax,0xc
c00125f9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125ff:	01 f0                	add    eax,esi
c0012601:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012607:	c1 e8 0a             	shr    eax,0xa
c001260a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001260f:	2d 00 00 40 00       	sub    eax,0x400000
c0012614:	39 c3                	cmp    ebx,eax
c0012616:	77 cb                	ja     c00125e3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012618:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001261b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012621:	39 d8                	cmp    eax,ebx
c0012623:	73 f3                	jae    c0012618 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012625:	83 c4 1c             	add    esp,0x1c
c0012628:	89 f0                	mov    eax,esi
c001262a:	5b                   	pop    ebx
c001262b:	5e                   	pop    esi
c001262c:	5f                   	pop    edi
c001262d:	5d                   	pop    ebp
c001262e:	c3                   	ret    
c001262f:	90                   	nop

c0012630 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012630:	55                   	push   ebp
c0012631:	57                   	push   edi
c0012632:	56                   	push   esi
c0012633:	53                   	push   ebx
c0012634:	83 ec 1c             	sub    esp,0x1c
c0012637:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001263b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001263f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012643:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012647:	a9 ff 0f 00 00       	test   eax,0xfff
c001264c:	75 4a                	jne    c0012698 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001264e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012652:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012655:	c1 eb 16             	shr    ebx,0x16
c0012658:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001265f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012663:	74 4d                	je     c00126b2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012665:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012669:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001266d:	c1 e8 0a             	shr    eax,0xa
c0012670:	80 fa 01             	cmp    dl,0x1
c0012673:	19 d2                	sbb    edx,edx
c0012675:	c1 e3 0c             	shl    ebx,0xc
c0012678:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001267c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012682:	25 fc 0f 00 00       	and    eax,0xffc
c0012687:	01 d8                	add    eax,ebx
c0012689:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012690:	83 c4 1c             	add    esp,0x1c
c0012693:	5b                   	pop    ebx
c0012694:	5e                   	pop    esi
c0012695:	5f                   	pop    edi
c0012696:	5d                   	pop    ebp
c0012697:	c3                   	ret    
c0012698:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001269c:	83 ec 0c             	sub    esp,0xc
c001269f:	68 48 af 02 c0       	push   0xc002af48
c00126a4:	e8 5c 81 00 00       	call   c001a805 <Krnl::panic(char const*)>
c00126a9:	83 c4 10             	add    esp,0x10
c00126ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126b0:	eb 9c                	jmp    c001264e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00126b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126b6:	e8 37 d8 ff ff       	call   c000fef2 <Phys::allocatePage()>
c00126bb:	89 c5                	mov    ebp,eax
c00126bd:	e8 b6 f5 ff ff       	call   c0011c78 <Virt::getAKernelVAS()>
c00126c2:	83 ec 0c             	sub    esp,0xc
c00126c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00126c9:	6a 01                	push   0x1
c00126cb:	e8 69 f3 ff ff       	call   c0011a39 <Virt::allocateKernelVirtualPages(int)>
c00126d0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00126d7:	6a 01                	push   0x1
c00126d9:	50                   	push   eax
c00126da:	55                   	push   ebp
c00126db:	81 cd 07 04 00 00    	or     ebp,0x407
c00126e1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00126e5:	51                   	push   ecx
c00126e6:	e8 7f fe ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126eb:	83 c4 1c             	add    esp,0x1c
c00126ee:	68 00 10 00 00       	push   0x1000
c00126f3:	6a 00                	push   0x0
c00126f5:	50                   	push   eax
c00126f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126fa:	e8 9d e0 fe ff       	call   c000079c <memset>
c00126ff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012703:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012706:	e8 f4 f7 ff ff       	call   c0011eff <Virt::freeKernelVirtualPages(unsigned long)>
c001270b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001270e:	83 c4 10             	add    esp,0x10
c0012711:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012718:	e9 48 ff ff ff       	jmp    c0012665 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001271d:	90                   	nop

c001271e <VAS::VAS(bool)>:
c001271e:	53                   	push   ebx
c001271f:	83 ec 28             	sub    esp,0x28
c0012722:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012726:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001272a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001272e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012735:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012739:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012740:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012744:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012748:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001274b:	e8 a2 d7 ff ff       	call   c000fef2 <Phys::allocatePage()>
c0012750:	89 c2                	mov    edx,eax
c0012752:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012756:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012759:	e8 1a f5 ff ff       	call   c0011c78 <Virt::getAKernelVAS()>
c001275e:	89 c3                	mov    ebx,eax
c0012760:	83 ec 0c             	sub    esp,0xc
c0012763:	6a 01                	push   0x1
c0012765:	e8 cf f2 ff ff       	call   c0011a39 <Virt::allocateKernelVirtualPages(int)>
c001276a:	83 c4 10             	add    esp,0x10
c001276d:	89 c2                	mov    edx,eax
c001276f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012773:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012776:	83 ec 0c             	sub    esp,0xc
c0012779:	6a 03                	push   0x3
c001277b:	6a 01                	push   0x1
c001277d:	52                   	push   edx
c001277e:	50                   	push   eax
c001277f:	53                   	push   ebx
c0012780:	e8 e5 fd ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012785:	83 c4 20             	add    esp,0x20
c0012788:	89 c2                	mov    edx,eax
c001278a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001278e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012791:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012799:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00127a1:	7f 1c                	jg     c00127bf <VAS::VAS(bool)+0xa1>
c00127a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127a7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127ae:	c1 e2 02             	shl    edx,0x2
c00127b1:	01 d0                	add    eax,edx
c00127b3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127b9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00127bd:	eb da                	jmp    c0012799 <VAS::VAS(bool)+0x7b>
c00127bf:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00127c7:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00127cf:	7f 7a                	jg     c001284b <VAS::VAS(bool)+0x12d>
c00127d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127d5:	2d 00 02 00 00       	sub    eax,0x200
c00127da:	c1 e0 0c             	shl    eax,0xc
c00127dd:	83 c8 03             	or     eax,0x3
c00127e0:	89 c2                	mov    edx,eax
c00127e2:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c00127e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127ed:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127f3:	83 e0 10             	and    eax,0x10
c00127f6:	84 c0                	test   al,al
c00127f8:	74 07                	je     c0012801 <VAS::VAS(bool)+0xe3>
c00127fa:	b8 00 01 00 00       	mov    eax,0x100
c00127ff:	eb 05                	jmp    c0012806 <VAS::VAS(bool)+0xe8>
c0012801:	b8 00 00 00 00       	mov    eax,0x0
c0012806:	09 d0                	or     eax,edx
c0012808:	89 c1                	mov    ecx,eax
c001280a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001280e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012811:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012815:	c1 e2 02             	shl    edx,0x2
c0012818:	01 d0                	add    eax,edx
c001281a:	89 ca                	mov    edx,ecx
c001281c:	89 10                	mov    DWORD PTR [eax],edx
c001281e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012822:	2d 40 03 00 00       	sub    eax,0x340
c0012827:	83 f8 7f             	cmp    eax,0x7f
c001282a:	77 16                	ja     c0012842 <VAS::VAS(bool)+0x124>
c001282c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012830:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012833:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012837:	c1 e2 02             	shl    edx,0x2
c001283a:	01 d0                	add    eax,edx
c001283c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012842:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012846:	e9 7c ff ff ff       	jmp    c00127c7 <VAS::VAS(bool)+0xa9>
c001284b:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0012850:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012856:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001285c:	83 e0 10             	and    eax,0x10
c001285f:	84 c0                	test   al,al
c0012861:	74 07                	je     c001286a <VAS::VAS(bool)+0x14c>
c0012863:	b8 03 41 00 00       	mov    eax,0x4103
c0012868:	eb 05                	jmp    c001286f <VAS::VAS(bool)+0x151>
c001286a:	b8 03 40 00 00       	mov    eax,0x4003
c001286f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012873:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012876:	81 c2 20 0c 00 00    	add    edx,0xc20
c001287c:	89 02                	mov    DWORD PTR [edx],eax
c001287e:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0012883:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012889:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001288f:	83 ec 08             	sub    esp,0x8
c0012892:	50                   	push   eax
c0012893:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012897:	e8 b2 fc ff ff       	call   c001254e <VAS::setCPUSpecific(unsigned long)>
c001289c:	83 c4 10             	add    esp,0x10
c001289f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00128a6:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c00128ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128b1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128b7:	83 e0 10             	and    eax,0x10
c00128ba:	84 c0                	test   al,al
c00128bc:	74 07                	je     c00128c5 <VAS::VAS(bool)+0x1a7>
c00128be:	b8 00 01 00 00       	mov    eax,0x100
c00128c3:	eb 05                	jmp    c00128ca <VAS::VAS(bool)+0x1ac>
c00128c5:	b8 00 00 00 00       	mov    eax,0x0
c00128ca:	09 c2                	or     edx,eax
c00128cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128d3:	05 fc 0f 00 00       	add    eax,0xffc
c00128d8:	83 ca 03             	or     edx,0x3
c00128db:	89 10                	mov    DWORD PTR [eax],edx
c00128dd:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c00128e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e8:	83 ec 0c             	sub    esp,0xc
c00128eb:	50                   	push   eax
c00128ec:	e8 75 1c 00 00       	call   c0014566 <Device::getName()>
c00128f1:	83 c4 10             	add    esp,0x10
c00128f4:	83 ec 08             	sub    esp,0x8
c00128f7:	68 8d b0 02 c0       	push   0xc002b08d
c00128fc:	50                   	push   eax
c00128fd:	e8 e2 df fe ff       	call   c00008e4 <strcmp>
c0012902:	83 c4 10             	add    esp,0x10
c0012905:	85 c0                	test   eax,eax
c0012907:	0f 94 c0             	sete   al
c001290a:	84 c0                	test   al,al
c001290c:	0f 84 87 00 00 00    	je     c0012999 <VAS::VAS(bool)+0x27b>
c0012912:	fa                   	cli    
c0012913:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0012918:	40                   	inc    eax
c0012919:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001291e:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0012923:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012929:	05 7c 09 00 00       	add    eax,0x97c
c001292e:	83 ec 0c             	sub    esp,0xc
c0012931:	50                   	push   eax
c0012932:	e8 c9 c9 ff ff       	call   c000f300 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012937:	83 c4 10             	add    esp,0x10
c001293a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001293f:	89 c3                	mov    ebx,eax
c0012941:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0012946:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001294c:	05 7c 09 00 00       	add    eax,0x97c
c0012951:	83 ec 0c             	sub    esp,0xc
c0012954:	50                   	push   eax
c0012955:	e8 a6 c9 ff ff       	call   c000f300 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001295a:	83 c4 10             	add    esp,0x10
c001295d:	83 ec 08             	sub    esp,0x8
c0012960:	50                   	push   eax
c0012961:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012965:	e8 76 f5 ff ff       	call   c0011ee0 <VAS::getPageTableEntry(unsigned long)>
c001296a:	83 c4 10             	add    esp,0x10
c001296d:	8b 00                	mov    eax,DWORD PTR [eax]
c001296f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012974:	6a 11                	push   0x11
c0012976:	53                   	push   ebx
c0012977:	50                   	push   eax
c0012978:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001297c:	e8 f5 f8 ff ff       	call   c0012276 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012981:	83 c4 10             	add    esp,0x10
c0012984:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0012989:	48                   	dec    eax
c001298a:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001298f:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0012994:	85 c0                	test   eax,eax
c0012996:	75 01                	jne    c0012999 <VAS::VAS(bool)+0x27b>
c0012998:	fb                   	sti    
c0012999:	90                   	nop
c001299a:	83 c4 28             	add    esp,0x28
c001299d:	5b                   	pop    ebx
c001299e:	c3                   	ret    
c001299f:	90                   	nop

c00129a0 <VAS::evict(unsigned long)>:
c00129a0:	55                   	push   ebp
c00129a1:	57                   	push   edi
c00129a2:	56                   	push   esi
c00129a3:	53                   	push   ebx
c00129a4:	83 ec 1c             	sub    esp,0x1c
c00129a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129ab:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00129af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129b3:	e8 c2 f1 ff ff       	call   c0011b7a <Virt::allocateSwapfilePage()>
c00129b8:	89 c7                	mov    edi,eax
c00129ba:	a1 6c dd 02 c0       	mov    eax,ds:0xc002dd6c
c00129bf:	85 c0                	test   eax,eax
c00129c1:	7e 3d                	jle    c0012a00 <VAS::evict(unsigned long)+0x60>
c00129c3:	89 ee                	mov    esi,ebp
c00129c5:	31 db                	xor    ebx,ebx
c00129c7:	83 ec 0c             	sub    esp,0xc
c00129ca:	57                   	push   edi
c00129cb:	e8 98 f1 ff ff       	call   c0011b68 <Virt::swapIDToSector(unsigned long)>
c00129d0:	89 34 24             	mov    DWORD PTR [esp],esi
c00129d3:	01 d8                	add    eax,ebx
c00129d5:	6a 01                	push   0x1
c00129d7:	31 d2                	xor    edx,edx
c00129d9:	43                   	inc    ebx
c00129da:	52                   	push   edx
c00129db:	81 c6 00 02 00 00    	add    esi,0x200
c00129e1:	50                   	push   eax
c00129e2:	0f be 05 78 dd 02 c0 	movsx  eax,BYTE PTR ds:0xc002dd78
c00129e9:	ff 34 85 dc f2 02 c0 	push   DWORD PTR [eax*4-0x3ffd0d24]
c00129f0:	e8 47 3e 00 00       	call   c001683c <LogicalDisk::write(unsigned long long, int, void*)>
c00129f5:	83 c4 20             	add    esp,0x20
c00129f8:	39 1d 6c dd 02 c0    	cmp    DWORD PTR ds:0xc002dd6c,ebx
c00129fe:	7f c7                	jg     c00129c7 <VAS::evict(unsigned long)+0x27>
c0012a00:	83 ec 08             	sub    esp,0x8
c0012a03:	c1 e7 0b             	shl    edi,0xb
c0012a06:	55                   	push   ebp
c0012a07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a0b:	e8 d0 f4 ff ff       	call   c0011ee0 <VAS::getPageTableEntry(unsigned long)>
c0012a10:	83 c4 0c             	add    esp,0xc
c0012a13:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a15:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012a1b:	09 d7                	or     edi,edx
c0012a1d:	89 38                	mov    DWORD PTR [eax],edi
c0012a1f:	a1 48 ef 02 c0       	mov    eax,ds:0xc002ef48
c0012a24:	40                   	inc    eax
c0012a25:	a3 48 ef 02 c0       	mov    ds:0xc002ef48,eax
c0012a2a:	0f 20 da             	mov    edx,cr3
c0012a2d:	0f 22 da             	mov    cr3,edx
c0012a30:	50                   	push   eax
c0012a31:	55                   	push   ebp
c0012a32:	68 9b b0 02 c0       	push   0xc002b09b
c0012a37:	e8 09 04 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0012a3c:	a1 44 ef 02 c0       	mov    eax,ds:0xc002ef44
c0012a41:	c7 44 24 40 b0 b0 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b0b0
c0012a49:	8d 50 01             	lea    edx,[eax+0x1]
c0012a4c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012a50:	89 15 44 ef 02 c0    	mov    DWORD PTR ds:0xc002ef44,edx
c0012a56:	83 c4 2c             	add    esp,0x2c
c0012a59:	5b                   	pop    ebx
c0012a5a:	5e                   	pop    esi
c0012a5b:	5f                   	pop    edi
c0012a5c:	5d                   	pop    ebp
c0012a5d:	e9 e3 03 00 00       	jmp    c0012e45 <Dbg::kprintf(char const*, ...)>

c0012a62 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012a62:	55                   	push   ebp
c0012a63:	57                   	push   edi
c0012a64:	56                   	push   esi
c0012a65:	53                   	push   ebx
c0012a66:	83 ec 0c             	sub    esp,0xc
c0012a69:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012a6d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012a73:	0f 84 dc 00 00 00    	je     c0012b55 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a79:	56                   	push   esi
c0012a7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a7e:	e8 5d f4 ff ff       	call   c0011ee0 <VAS::getPageTableEntry(unsigned long)>
c0012a83:	5b                   	pop    ebx
c0012a84:	85 c0                	test   eax,eax
c0012a86:	5f                   	pop    edi
c0012a87:	89 c3                	mov    ebx,eax
c0012a89:	0f 84 c6 00 00 00    	je     c0012b55 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a8f:	8b 38                	mov    edi,DWORD PTR [eax]
c0012a91:	31 c0                	xor    eax,eax
c0012a93:	89 fa                	mov    edx,edi
c0012a95:	81 e2 01 04 00 00    	and    edx,0x401
c0012a9b:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012aa1:	0f 85 b0 00 00 00    	jne    c0012b57 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012aa7:	e8 46 d4 ff ff       	call   c000fef2 <Phys::allocatePage()>
c0012aac:	c1 ef 0b             	shr    edi,0xb
c0012aaf:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012ab1:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012ab7:	09 c2                	or     edx,eax
c0012ab9:	81 ca 01 08 00 00    	or     edx,0x801
c0012abf:	89 13                	mov    DWORD PTR [ebx],edx
c0012ac1:	8b 0d 6c dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002dd6c
c0012ac7:	85 c9                	test   ecx,ecx
c0012ac9:	7e 3d                	jle    c0012b08 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012acb:	89 f5                	mov    ebp,esi
c0012acd:	31 db                	xor    ebx,ebx
c0012acf:	83 ec 0c             	sub    esp,0xc
c0012ad2:	57                   	push   edi
c0012ad3:	e8 90 f0 ff ff       	call   c0011b68 <Virt::swapIDToSector(unsigned long)>
c0012ad8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012adb:	01 d8                	add    eax,ebx
c0012add:	6a 01                	push   0x1
c0012adf:	31 d2                	xor    edx,edx
c0012ae1:	43                   	inc    ebx
c0012ae2:	52                   	push   edx
c0012ae3:	81 c5 00 02 00 00    	add    ebp,0x200
c0012ae9:	50                   	push   eax
c0012aea:	0f be 05 78 dd 02 c0 	movsx  eax,BYTE PTR ds:0xc002dd78
c0012af1:	ff 34 85 dc f2 02 c0 	push   DWORD PTR [eax*4-0x3ffd0d24]
c0012af8:	e8 d3 3c 00 00       	call   c00167d0 <LogicalDisk::read(unsigned long long, int, void*)>
c0012afd:	83 c4 20             	add    esp,0x20
c0012b00:	39 1d 6c dd 02 c0    	cmp    DWORD PTR ds:0xc002dd6c,ebx
c0012b06:	7f c7                	jg     c0012acf <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012b08:	a1 48 ef 02 c0       	mov    eax,ds:0xc002ef48
c0012b0d:	48                   	dec    eax
c0012b0e:	52                   	push   edx
c0012b0f:	a3 48 ef 02 c0       	mov    ds:0xc002ef48,eax
c0012b14:	50                   	push   eax
c0012b15:	56                   	push   esi
c0012b16:	68 c1 b0 02 c0       	push   0xc002b0c1
c0012b1b:	e8 25 03 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0012b20:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b23:	e8 22 f0 ff ff       	call   c0011b4a <Virt::freeSwapfilePage(unsigned long)>
c0012b28:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0012b2d:	83 c4 10             	add    esp,0x10
c0012b30:	48                   	dec    eax
c0012b31:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c0012b36:	85 c0                	test   eax,eax
c0012b38:	75 01                	jne    c0012b3b <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012b3a:	fb                   	sti    
c0012b3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b3f:	25 ff 0f 00 00       	and    eax,0xfff
c0012b44:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012b49:	77 14                	ja     c0012b5f <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012b4b:	0f 20 d8             	mov    eax,cr3
c0012b4e:	0f 22 d8             	mov    cr3,eax
c0012b51:	b0 01                	mov    al,0x1
c0012b53:	eb 02                	jmp    c0012b57 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b55:	31 c0                	xor    eax,eax
c0012b57:	83 c4 0c             	add    esp,0xc
c0012b5a:	5b                   	pop    ebx
c0012b5b:	5e                   	pop    esi
c0012b5c:	5f                   	pop    edi
c0012b5d:	5d                   	pop    ebp
c0012b5e:	c3                   	ret    
c0012b5f:	83 ec 0c             	sub    esp,0xc
c0012b62:	68 d6 b0 02 c0       	push   0xc002b0d6
c0012b67:	e8 d9 02 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0012b6c:	83 c4 10             	add    esp,0x10
c0012b6f:	eb da                	jmp    c0012b4b <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012b71:	90                   	nop

c0012b72 <VAS::scanForEviction()>:
c0012b72:	57                   	push   edi
c0012b73:	56                   	push   esi
c0012b74:	53                   	push   ebx
c0012b75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012b79:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012b7c:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b82:	75 0e                	jne    c0012b92 <VAS::scanForEviction()+0x20>
c0012b84:	89 da                	mov    edx,ebx
c0012b86:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b89:	c1 ea 16             	shr    edx,0x16
c0012b8c:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b90:	74 48                	je     c0012bda <VAS::scanForEviction()+0x68>
c0012b92:	53                   	push   ebx
c0012b93:	56                   	push   esi
c0012b94:	e8 47 f3 ff ff       	call   c0011ee0 <VAS::getPageTableEntry(unsigned long)>
c0012b99:	5a                   	pop    edx
c0012b9a:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b9c:	59                   	pop    ecx
c0012b9d:	89 fa                	mov    edx,edi
c0012b9f:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012ba5:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012bab:	74 3d                	je     c0012bea <VAS::scanForEviction()+0x78>
c0012bad:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012bb3:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012bb9:	76 2a                	jbe    c0012be5 <VAS::scanForEviction()+0x73>
c0012bbb:	31 db                	xor    ebx,ebx
c0012bbd:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012bc4:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012bca:	75 c6                	jne    c0012b92 <VAS::scanForEviction()+0x20>
c0012bcc:	89 da                	mov    edx,ebx
c0012bce:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012bd1:	c1 ea 16             	shr    edx,0x16
c0012bd4:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012bd8:	75 b8                	jne    c0012b92 <VAS::scanForEviction()+0x20>
c0012bda:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012be0:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012be3:	eb 97                	jmp    c0012b7c <VAS::scanForEviction()+0xa>
c0012be5:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012be8:	eb 92                	jmp    c0012b7c <VAS::scanForEviction()+0xa>
c0012bea:	f7 c7 01 00 00 00    	test   edi,0x1
c0012bf0:	74 bb                	je     c0012bad <VAS::scanForEviction()+0x3b>
c0012bf2:	f7 c7 20 00 00 00    	test   edi,0x20
c0012bf8:	74 0a                	je     c0012c04 <VAS::scanForEviction()+0x92>
c0012bfa:	83 e7 df             	and    edi,0xffffffdf
c0012bfd:	89 38                	mov    DWORD PTR [eax],edi
c0012bff:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c02:	eb a9                	jmp    c0012bad <VAS::scanForEviction()+0x3b>
c0012c04:	83 ec 08             	sub    esp,0x8
c0012c07:	53                   	push   ebx
c0012c08:	56                   	push   esi
c0012c09:	e8 92 fd ff ff       	call   c00129a0 <VAS::evict(unsigned long)>
c0012c0e:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c15:	83 c4 10             	add    esp,0x10
c0012c18:	89 f8                	mov    eax,edi
c0012c1a:	5b                   	pop    ebx
c0012c1b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c20:	5e                   	pop    esi
c0012c21:	5f                   	pop    edi
c0012c22:	c3                   	ret    

c0012c23 <mapVASFirstTime>:
c0012c23:	55                   	push   ebp
c0012c24:	57                   	push   edi
c0012c25:	56                   	push   esi
c0012c26:	53                   	push   ebx
c0012c27:	83 ec 0c             	sub    esp,0xc
c0012c2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c2f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c32:	4a                   	dec    edx
c0012c33:	0f 84 8e 00 00 00    	je     c0012cc7 <mapVASFirstTime+0xa4>
c0012c39:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c3c:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c3f:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012c44:	c1 e5 15             	shl    ebp,0x15
c0012c47:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012c4c:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012c52:	29 eb                	sub    ebx,ebp
c0012c54:	29 ee                	sub    esi,ebp
c0012c56:	e8 97 d2 ff ff       	call   c000fef2 <Phys::allocatePage()>
c0012c5b:	83 ec 0c             	sub    esp,0xc
c0012c5e:	68 03 04 00 00       	push   0x403
c0012c63:	6a 01                	push   0x1
c0012c65:	53                   	push   ebx
c0012c66:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012c6c:	50                   	push   eax
c0012c6d:	57                   	push   edi
c0012c6e:	e8 f7 f8 ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c73:	83 c4 20             	add    esp,0x20
c0012c76:	39 f3                	cmp    ebx,esi
c0012c78:	75 dc                	jne    c0012c56 <mapVASFirstTime+0x33>
c0012c7a:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012c7f:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012c84:	29 ee                	sub    esi,ebp
c0012c86:	29 e8                	sub    eax,ebp
c0012c88:	89 c5                	mov    ebp,eax
c0012c8a:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012c8e:	19 db                	sbb    ebx,ebx
c0012c90:	e8 5d d2 ff ff       	call   c000fef2 <Phys::allocatePage()>
c0012c95:	83 e3 04             	and    ebx,0x4
c0012c98:	83 ec 0c             	sub    esp,0xc
c0012c9b:	81 c3 03 04 00 00    	add    ebx,0x403
c0012ca1:	53                   	push   ebx
c0012ca2:	6a 01                	push   0x1
c0012ca4:	56                   	push   esi
c0012ca5:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012cab:	50                   	push   eax
c0012cac:	57                   	push   edi
c0012cad:	e8 b8 f8 ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cb2:	83 c4 20             	add    esp,0x20
c0012cb5:	39 f5                	cmp    ebp,esi
c0012cb7:	75 d1                	jne    c0012c8a <mapVASFirstTime+0x67>
c0012cb9:	0f 20 d8             	mov    eax,cr3
c0012cbc:	0f 22 d8             	mov    cr3,eax
c0012cbf:	83 c4 0c             	add    esp,0xc
c0012cc2:	5b                   	pop    ebx
c0012cc3:	5e                   	pop    esi
c0012cc4:	5f                   	pop    edi
c0012cc5:	5d                   	pop    ebp
c0012cc6:	c3                   	ret    
c0012cc7:	83 ec 0c             	sub    esp,0xc
c0012cca:	68 e6 b0 02 c0       	push   0xc002b0e6
c0012ccf:	e8 71 01 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0012cd4:	83 c4 10             	add    esp,0x10
c0012cd7:	83 c4 0c             	add    esp,0xc
c0012cda:	5b                   	pop    ebx
c0012cdb:	5e                   	pop    esi
c0012cdc:	5f                   	pop    edi
c0012cdd:	5d                   	pop    ebp
c0012cde:	c3                   	ret    

c0012cdf <__cxa_atexit>:
c0012cdf:	31 c0                	xor    eax,eax
c0012ce1:	c3                   	ret    

c0012ce2 <__cxa_finalize>:
c0012ce2:	c3                   	ret    

c0012ce3 <__stack_chk_fail>:
c0012ce3:	55                   	push   ebp
c0012ce4:	89 e5                	mov    ebp,esp
c0012ce6:	83 ec 14             	sub    esp,0x14
c0012ce9:	68 ff b0 02 c0       	push   0xc002b0ff
c0012cee:	e8 52 01 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0012cf3:	58                   	pop    eax
c0012cf4:	5a                   	pop    edx
c0012cf5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012cf8:	68 4f b1 02 c0       	push   0xc002b14f
c0012cfd:	e8 43 01 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0012d02:	59                   	pop    ecx
c0012d03:	58                   	pop    eax
c0012d04:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d07:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d0a:	68 4f b1 02 c0       	push   0xc002b14f
c0012d0f:	e8 31 01 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0012d14:	5a                   	pop    edx
c0012d15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d18:	59                   	pop    ecx
c0012d19:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d1b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d1e:	68 4f b1 02 c0       	push   0xc002b14f
c0012d23:	e8 1d 01 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0012d28:	5a                   	pop    edx
c0012d29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d2c:	59                   	pop    ecx
c0012d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d31:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d34:	68 4f b1 02 c0       	push   0xc002b14f
c0012d39:	e8 07 01 00 00       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0012d3e:	c7 04 24 57 b1 02 c0 	mov    DWORD PTR [esp],0xc002b157
c0012d45:	e8 bb 7a 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0012d4a:	83 c4 10             	add    esp,0x10
c0012d4d:	c9                   	leave  
c0012d4e:	c3                   	ret    

c0012d4f <__cxa_pure_virtual>:
c0012d4f:	83 ec 18             	sub    esp,0x18
c0012d52:	68 6f b1 02 c0       	push   0xc002b16f
c0012d57:	e8 a9 7a 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0012d5c:	83 c4 1c             	add    esp,0x1c
c0012d5f:	c3                   	ret    

c0012d60 <operator new[](unsigned long)>:
c0012d60:	e9 21 cb ff ff       	jmp    c000f886 <malloc>

c0012d65 <operator delete(void*, unsigned long)>:
c0012d65:	e9 3c cb ff ff       	jmp    c000f8a6 <rfree>

c0012d6a <operator delete[](void*)>:
c0012d6a:	e9 37 cb ff ff       	jmp    c000f8a6 <rfree>

c0012d6f <operator delete[](void*, unsigned long)>:
c0012d6f:	e9 32 cb ff ff       	jmp    c000f8a6 <rfree>

c0012d74 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012d74:	57                   	push   edi
c0012d75:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012d7a:	56                   	push   esi
c0012d7b:	be 84 b1 02 c0       	mov    esi,0xc002b184
c0012d80:	53                   	push   ebx
c0012d81:	83 ec 40             	sub    esp,0x40
c0012d84:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012d88:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012d8c:	fc                   	cld    
c0012d8d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d8f:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012d93:	83 f9 3e             	cmp    ecx,0x3e
c0012d96:	7e 05                	jle    c0012d9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012d98:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012d9d:	89 df                	mov    edi,ebx
c0012d9f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012da3:	eb 02                	jmp    c0012da7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012da5:	89 c7                	mov    edi,eax
c0012da7:	31 d2                	xor    edx,edx
c0012da9:	46                   	inc    esi
c0012daa:	89 f8                	mov    eax,edi
c0012dac:	f7 f1                	div    ecx
c0012dae:	39 cf                	cmp    edi,ecx
c0012db0:	73 f3                	jae    c0012da5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012db2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012db5:	eb 02                	jmp    c0012db9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012db7:	89 c3                	mov    ebx,eax
c0012db9:	31 d2                	xor    edx,edx
c0012dbb:	4e                   	dec    esi
c0012dbc:	89 d8                	mov    eax,ebx
c0012dbe:	f7 f1                	div    ecx
c0012dc0:	39 cb                	cmp    ebx,ecx
c0012dc2:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012dc6:	88 16                	mov    BYTE PTR [esi],dl
c0012dc8:	73 ed                	jae    c0012db7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012dca:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012dce:	83 c4 40             	add    esp,0x40
c0012dd1:	5b                   	pop    ebx
c0012dd2:	5e                   	pop    esi
c0012dd3:	5f                   	pop    edi
c0012dd4:	c3                   	ret    

c0012dd5 <Dbg::logc(char)>:
c0012dd5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012dd9:	ba fd 03 00 00       	mov    edx,0x3fd
c0012dde:	ec                   	in     al,dx
c0012ddf:	a8 20                	test   al,0x20
c0012de1:	74 fb                	je     c0012dde <Dbg::logc(char)+0x9>
c0012de3:	ba f8 03 00 00       	mov    edx,0x3f8
c0012de8:	88 c8                	mov    al,cl
c0012dea:	ee                   	out    dx,al
c0012deb:	c3                   	ret    

c0012dec <Dbg::logs(char*)>:
c0012dec:	53                   	push   ebx
c0012ded:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012df1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012df4:	84 c0                	test   al,al
c0012df6:	74 0f                	je     c0012e07 <Dbg::logs(char*)+0x1b>
c0012df8:	50                   	push   eax
c0012df9:	43                   	inc    ebx
c0012dfa:	e8 d6 ff ff ff       	call   c0012dd5 <Dbg::logc(char)>
c0012dff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e02:	5a                   	pop    edx
c0012e03:	84 c0                	test   al,al
c0012e05:	75 f1                	jne    c0012df8 <Dbg::logs(char*)+0xc>
c0012e07:	5b                   	pop    ebx
c0012e08:	c3                   	ret    

c0012e09 <Dbg::logWriteInt(unsigned int)>:
c0012e09:	83 ec 10             	sub    esp,0x10
c0012e0c:	6a 0a                	push   0xa
c0012e0e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e12:	50                   	push   eax
c0012e13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e17:	e8 58 ff ff ff       	call   c0012d74 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e1c:	50                   	push   eax
c0012e1d:	e8 ca ff ff ff       	call   c0012dec <Dbg::logs(char*)>
c0012e22:	83 c4 20             	add    esp,0x20
c0012e25:	c3                   	ret    

c0012e26 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e26:	83 ec 10             	sub    esp,0x10
c0012e29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e2d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e31:	50                   	push   eax
c0012e32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e36:	e8 39 ff ff ff       	call   c0012d74 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e3b:	50                   	push   eax
c0012e3c:	e8 ab ff ff ff       	call   c0012dec <Dbg::logs(char*)>
c0012e41:	83 c4 20             	add    esp,0x20
c0012e44:	c3                   	ret    

c0012e45 <Dbg::kprintf(char const*, ...)>:
c0012e45:	55                   	push   ebp
c0012e46:	57                   	push   edi
c0012e47:	56                   	push   esi
c0012e48:	53                   	push   ebx
c0012e49:	83 ec 0c             	sub    esp,0xc
c0012e4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e50:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e58:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012e5b:	84 c0                	test   al,al
c0012e5d:	74 4a                	je     c0012ea9 <Dbg::kprintf(char const*, ...)+0x64>
c0012e5f:	31 db                	xor    ebx,ebx
c0012e61:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012e64:	3c 25                	cmp    al,0x25
c0012e66:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012e69:	0f 85 e4 00 00 00    	jne    c0012f53 <Dbg::kprintf(char const*, ...)+0x10e>
c0012e6f:	83 c3 02             	add    ebx,0x2
c0012e72:	8a 07                	mov    al,BYTE PTR [edi]
c0012e74:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012e77:	83 e8 25             	sub    eax,0x25
c0012e7a:	3c 53                	cmp    al,0x53
c0012e7c:	0f 87 ba 00 00 00    	ja     c0012f3c <Dbg::kprintf(char const*, ...)+0xf7>
c0012e82:	0f b6 c0             	movzx  eax,al
c0012e85:	ff 24 85 c4 b1 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4e3c]
c0012e8c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e90:	89 c8                	mov    eax,ecx
c0012e92:	83 c1 04             	add    ecx,0x4
c0012e95:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e99:	ff 30                	push   DWORD PTR [eax]
c0012e9b:	e8 4c ff ff ff       	call   c0012dec <Dbg::logs(char*)>
c0012ea0:	58                   	pop    eax
c0012ea1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012ea5:	84 c0                	test   al,al
c0012ea7:	75 b8                	jne    c0012e61 <Dbg::kprintf(char const*, ...)+0x1c>
c0012ea9:	83 c4 0c             	add    esp,0xc
c0012eac:	5b                   	pop    ebx
c0012ead:	5e                   	pop    esi
c0012eae:	5f                   	pop    edi
c0012eaf:	5d                   	pop    ebp
c0012eb0:	c3                   	ret    
c0012eb1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012eb5:	89 d0                	mov    eax,edx
c0012eb7:	83 c2 04             	add    edx,0x4
c0012eba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ebe:	ff 30                	push   DWORD PTR [eax]
c0012ec0:	e8 44 ff ff ff       	call   c0012e09 <Dbg::logWriteInt(unsigned int)>
c0012ec5:	58                   	pop    eax
c0012ec6:	eb d9                	jmp    c0012ea1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ec8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ecc:	89 d0                	mov    eax,edx
c0012ece:	83 c2 04             	add    edx,0x4
c0012ed1:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012ed4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ed8:	50                   	push   eax
c0012ed9:	e8 f7 fe ff ff       	call   c0012dd5 <Dbg::logc(char)>
c0012ede:	58                   	pop    eax
c0012edf:	eb c0                	jmp    c0012ea1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ee1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ee5:	89 c8                	mov    eax,ecx
c0012ee7:	83 c1 04             	add    ecx,0x4
c0012eea:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012eee:	ff 30                	push   DWORD PTR [eax]
c0012ef0:	e8 14 ff ff ff       	call   c0012e09 <Dbg::logWriteInt(unsigned int)>
c0012ef5:	5f                   	pop    edi
c0012ef6:	eb a9                	jmp    c0012ea1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ef8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012efc:	89 c8                	mov    eax,ecx
c0012efe:	83 c1 04             	add    ecx,0x4
c0012f01:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f05:	6a 10                	push   0x10
c0012f07:	ff 30                	push   DWORD PTR [eax]
c0012f09:	e8 18 ff ff ff       	call   c0012e26 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f0e:	59                   	pop    ecx
c0012f0f:	5f                   	pop    edi
c0012f10:	eb 8f                	jmp    c0012ea1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f12:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f16:	89 d0                	mov    eax,edx
c0012f18:	83 c2 08             	add    edx,0x8
c0012f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f1f:	6a 10                	push   0x10
c0012f21:	ff 30                	push   DWORD PTR [eax]
c0012f23:	e8 fe fe ff ff       	call   c0012e26 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f28:	58                   	pop    eax
c0012f29:	5a                   	pop    edx
c0012f2a:	e9 72 ff ff ff       	jmp    c0012ea1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f2f:	6a 25                	push   0x25
c0012f31:	e8 9f fe ff ff       	call   c0012dd5 <Dbg::logc(char)>
c0012f36:	58                   	pop    eax
c0012f37:	e9 65 ff ff ff       	jmp    c0012ea1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f3c:	6a 25                	push   0x25
c0012f3e:	e8 92 fe ff ff       	call   c0012dd5 <Dbg::logc(char)>
c0012f43:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012f46:	50                   	push   eax
c0012f47:	e8 89 fe ff ff       	call   c0012dd5 <Dbg::logc(char)>
c0012f4c:	5a                   	pop    edx
c0012f4d:	59                   	pop    ecx
c0012f4e:	e9 4e ff ff ff       	jmp    c0012ea1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f53:	50                   	push   eax
c0012f54:	89 eb                	mov    ebx,ebp
c0012f56:	e8 7a fe ff ff       	call   c0012dd5 <Dbg::logc(char)>
c0012f5b:	89 fd                	mov    ebp,edi
c0012f5d:	58                   	pop    eax
c0012f5e:	e9 3e ff ff ff       	jmp    c0012ea1 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f63:	90                   	nop

c0012f64 <File::read(unsigned long long, void*, int*)>:
c0012f64:	53                   	push   ebx
c0012f65:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f69:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f6d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f74:	3c 19                	cmp    al,0x19
c0012f76:	77 35                	ja     c0012fad <File::read(unsigned long long, void*, int*)+0x49>
c0012f78:	8b 04 85 e0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c20]
c0012f7f:	85 c0                	test   eax,eax
c0012f81:	74 2a                	je     c0012fad <File::read(unsigned long long, void*, int*)+0x49>
c0012f83:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f89:	85 c0                	test   eax,eax
c0012f8b:	74 20                	je     c0012fad <File::read(unsigned long long, void*, int*)+0x49>
c0012f8d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f91:	74 21                	je     c0012fb4 <File::read(unsigned long long, void*, int*)+0x50>
c0012f93:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f95:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f99:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fa3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fa7:	5b                   	pop    ebx
c0012fa8:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012fab:	ff e0                	jmp    eax
c0012fad:	b8 0b 00 00 00       	mov    eax,0xb
c0012fb2:	eb 05                	jmp    c0012fb9 <File::read(unsigned long long, void*, int*)+0x55>
c0012fb4:	b8 05 00 00 00       	mov    eax,0x5
c0012fb9:	5b                   	pop    ebx
c0012fba:	c3                   	ret    
c0012fbb:	90                   	nop

c0012fbc <File::write(unsigned long long, void*, int*)>:
c0012fbc:	53                   	push   ebx
c0012fbd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fc1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fc5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fcc:	3c 19                	cmp    al,0x19
c0012fce:	77 35                	ja     c0013005 <File::write(unsigned long long, void*, int*)+0x49>
c0012fd0:	8b 04 85 e0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c20]
c0012fd7:	85 c0                	test   eax,eax
c0012fd9:	74 2a                	je     c0013005 <File::write(unsigned long long, void*, int*)+0x49>
c0012fdb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fe1:	85 c0                	test   eax,eax
c0012fe3:	74 20                	je     c0013005 <File::write(unsigned long long, void*, int*)+0x49>
c0012fe5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fe9:	74 21                	je     c001300c <File::write(unsigned long long, void*, int*)+0x50>
c0012feb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ff1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012ff7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fff:	5b                   	pop    ebx
c0013000:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013003:	ff e0                	jmp    eax
c0013005:	b8 0b 00 00 00       	mov    eax,0xb
c001300a:	eb 05                	jmp    c0013011 <File::write(unsigned long long, void*, int*)+0x55>
c001300c:	b8 05 00 00 00       	mov    eax,0x5
c0013011:	5b                   	pop    ebx
c0013012:	c3                   	ret    
c0013013:	90                   	nop

c0013014 <Directory::read(unsigned long long, void*, int*)>:
c0013014:	53                   	push   ebx
c0013015:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013019:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001301d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013024:	3c 19                	cmp    al,0x19
c0013026:	77 35                	ja     c001305d <Directory::read(unsigned long long, void*, int*)+0x49>
c0013028:	8b 04 85 e0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c20]
c001302f:	85 c0                	test   eax,eax
c0013031:	74 2a                	je     c001305d <Directory::read(unsigned long long, void*, int*)+0x49>
c0013033:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013039:	85 c0                	test   eax,eax
c001303b:	74 20                	je     c001305d <Directory::read(unsigned long long, void*, int*)+0x49>
c001303d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013041:	74 21                	je     c0013064 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013043:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013045:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013049:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001304f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013053:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013057:	5b                   	pop    ebx
c0013058:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001305b:	ff e0                	jmp    eax
c001305d:	b8 0b 00 00 00       	mov    eax,0xb
c0013062:	eb 05                	jmp    c0013069 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013064:	b8 05 00 00 00       	mov    eax,0x5
c0013069:	5b                   	pop    ebx
c001306a:	c3                   	ret    
c001306b:	90                   	nop

c001306c <Directory::write(unsigned long long, void*, int*)>:
c001306c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013070:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013077:	b8 0b 00 00 00       	mov    eax,0xb
c001307c:	80 fa 19             	cmp    dl,0x19
c001307f:	77 18                	ja     c0013099 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013081:	8b 14 95 e0 f3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0c20]
c0013088:	85 d2                	test   edx,edx
c001308a:	74 0d                	je     c0013099 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001308c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013093:	19 c0                	sbb    eax,eax
c0013095:	83 e0 0a             	and    eax,0xa
c0013098:	40                   	inc    eax
c0013099:	c3                   	ret    

c001309a <File::isAtty()>:
c001309a:	31 c0                	xor    eax,eax
c001309c:	c3                   	ret    
c001309d:	90                   	nop

c001309e <Directory::isAtty()>:
c001309e:	31 c0                	xor    eax,eax
c00130a0:	c3                   	ret    
c00130a1:	90                   	nop

c00130a2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00130a2:	b8 0a 00 00 00       	mov    eax,0xa
c00130a7:	c3                   	ret    

c00130a8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00130a8:	b8 0a 00 00 00       	mov    eax,0xa
c00130ad:	c3                   	ret    

c00130ae <Filesystem::getFileFirstSector(char const*)>:
c00130ae:	31 c0                	xor    eax,eax
c00130b0:	31 d2                	xor    edx,edx
c00130b2:	c3                   	ret    
c00130b3:	90                   	nop

c00130b4 <File::~File()>:
c00130b4:	83 ec 0c             	sub    esp,0xc
c00130b7:	ba 84 b3 02 c0       	mov    edx,0xc002b384
c00130bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c0:	89 10                	mov    DWORD PTR [eax],edx
c00130c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c6:	83 ec 0c             	sub    esp,0xc
c00130c9:	50                   	push   eax
c00130ca:	e8 09 e7 ff ff       	call   c00117d8 <UnixFile::~UnixFile()>
c00130cf:	83 c4 10             	add    esp,0x10
c00130d2:	90                   	nop
c00130d3:	83 c4 0c             	add    esp,0xc
c00130d6:	c3                   	ret    
c00130d7:	90                   	nop

c00130d8 <File::~File()>:
c00130d8:	83 ec 0c             	sub    esp,0xc
c00130db:	83 ec 0c             	sub    esp,0xc
c00130de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130e2:	e8 cd ff ff ff       	call   c00130b4 <File::~File()>
c00130e7:	83 c4 10             	add    esp,0x10
c00130ea:	83 ec 08             	sub    esp,0x8
c00130ed:	68 14 01 00 00       	push   0x114
c00130f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130f6:	e8 6a fc ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c00130fb:	83 c4 10             	add    esp,0x10
c00130fe:	83 c4 0c             	add    esp,0xc
c0013101:	c3                   	ret    

c0013102 <Directory::~Directory()>:
c0013102:	83 ec 0c             	sub    esp,0xc
c0013105:	ba a0 b3 02 c0       	mov    edx,0xc002b3a0
c001310a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310e:	89 10                	mov    DWORD PTR [eax],edx
c0013110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013114:	83 ec 0c             	sub    esp,0xc
c0013117:	50                   	push   eax
c0013118:	e8 bb e6 ff ff       	call   c00117d8 <UnixFile::~UnixFile()>
c001311d:	83 c4 10             	add    esp,0x10
c0013120:	90                   	nop
c0013121:	83 c4 0c             	add    esp,0xc
c0013124:	c3                   	ret    
c0013125:	90                   	nop

c0013126 <Directory::~Directory()>:
c0013126:	83 ec 0c             	sub    esp,0xc
c0013129:	83 ec 0c             	sub    esp,0xc
c001312c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013130:	e8 cd ff ff ff       	call   c0013102 <Directory::~Directory()>
c0013135:	83 c4 10             	add    esp,0x10
c0013138:	83 ec 08             	sub    esp,0x8
c001313b:	68 14 01 00 00       	push   0x114
c0013140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013144:	e8 1c fc ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0013149:	83 c4 10             	add    esp,0x10
c001314c:	83 c4 0c             	add    esp,0xc
c001314f:	c3                   	ret    

c0013150 <Filesystem::Filesystem()>:
c0013150:	ba 1c b3 02 c0       	mov    edx,0xc002b31c
c0013155:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013159:	89 10                	mov    DWORD PTR [eax],edx
c001315b:	8b 15 54 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef54
c0013161:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013165:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001316c:	a3 54 ef 02 c0       	mov    ds:0xc002ef54,eax
c0013171:	90                   	nop
c0013172:	c3                   	ret    
c0013173:	90                   	nop

c0013174 <Filesystem::~Filesystem()>:
c0013174:	ba 1c b3 02 c0       	mov    edx,0xc002b31c
c0013179:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001317d:	89 10                	mov    DWORD PTR [eax],edx
c001317f:	90                   	nop
c0013180:	c3                   	ret    
c0013181:	90                   	nop

c0013182 <Filesystem::~Filesystem()>:
c0013182:	83 ec 0c             	sub    esp,0xc
c0013185:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013189:	e8 e6 ff ff ff       	call   c0013174 <Filesystem::~Filesystem()>
c001318e:	83 c4 04             	add    esp,0x4
c0013191:	83 ec 08             	sub    esp,0x8
c0013194:	6a 08                	push   0x8
c0013196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001319a:	e8 c6 fb ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c001319f:	83 c4 10             	add    esp,0x10
c00131a2:	83 c4 0c             	add    esp,0xc
c00131a5:	c3                   	ret    

c00131a6 <Fs::getcwd(Process*, char*, int)>:
c00131a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131aa:	31 c0                	xor    eax,eax
c00131ac:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00131af:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00131b3:	7d 15                	jge    c00131ca <Fs::getcwd(Process*, char*, int)+0x24>
c00131b5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131b9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00131c0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00131c3:	84 c9                	test   cl,cl
c00131c5:	74 06                	je     c00131cd <Fs::getcwd(Process*, char*, int)+0x27>
c00131c7:	40                   	inc    eax
c00131c8:	eb e2                	jmp    c00131ac <Fs::getcwd(Process*, char*, int)+0x6>
c00131ca:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00131cd:	31 c0                	xor    eax,eax
c00131cf:	c3                   	ret    

c00131d0 <Fs::initVFS()>:
c00131d0:	83 ec 18             	sub    esp,0x18
c00131d3:	6a 08                	push   0x8
c00131d5:	e8 ac c6 ff ff       	call   c000f886 <malloc>
c00131da:	89 04 24             	mov    DWORD PTR [esp],eax
c00131dd:	e8 0a e4 00 00       	call   c00215ec <FAT::FAT()>
c00131e2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00131e9:	e8 98 c6 ff ff       	call   c000f886 <malloc>
c00131ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00131f1:	e8 4e f6 00 00       	call   c0022844 <ISO9660::ISO9660()>
c00131f6:	83 c4 1c             	add    esp,0x1c
c00131f9:	c3                   	ret    

c00131fa <Fs::standardiseFiles(char*, char const*, char const*)>:
c00131fa:	55                   	push   ebp
c00131fb:	57                   	push   edi
c00131fc:	56                   	push   esi
c00131fd:	53                   	push   ebx
c00131fe:	81 ec 10 04 00 00    	sub    esp,0x410
c0013204:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001320b:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013212:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013219:	68 00 04 00 00       	push   0x400
c001321e:	6a 00                	push   0x0
c0013220:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013224:	56                   	push   esi
c0013225:	e8 72 d5 fe ff       	call   c000079c <memset>
c001322a:	83 c4 10             	add    esp,0x10
c001322d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013231:	75 0b                	jne    c001323e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013233:	50                   	push   eax
c0013234:	50                   	push   eax
c0013235:	57                   	push   edi
c0013236:	56                   	push   esi
c0013237:	e8 1c d6 fe ff       	call   c0000858 <strcpy>
c001323c:	eb 41                	jmp    c001327f <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001323e:	8a 07                	mov    al,BYTE PTR [edi]
c0013240:	3c 5c                	cmp    al,0x5c
c0013242:	74 04                	je     c0013248 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013244:	3c 2f                	cmp    al,0x2f
c0013246:	75 18                	jne    c0013260 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013248:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001324b:	3c 60                	cmp    al,0x60
c001324d:	7e 03                	jle    c0013252 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001324f:	83 e8 20             	sub    eax,0x20
c0013252:	88 04 24             	mov    BYTE PTR [esp],al
c0013255:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001325c:	50                   	push   eax
c001325d:	50                   	push   eax
c001325e:	eb 18                	jmp    c0013278 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013260:	50                   	push   eax
c0013261:	50                   	push   eax
c0013262:	55                   	push   ebp
c0013263:	56                   	push   esi
c0013264:	e8 ef d5 fe ff       	call   c0000858 <strcpy>
c0013269:	5a                   	pop    edx
c001326a:	59                   	pop    ecx
c001326b:	68 31 cb 02 c0       	push   0xc002cb31
c0013270:	56                   	push   esi
c0013271:	e8 22 d7 fe ff       	call   c0000998 <strcat>
c0013276:	5d                   	pop    ebp
c0013277:	58                   	pop    eax
c0013278:	57                   	push   edi
c0013279:	56                   	push   esi
c001327a:	e8 19 d7 fe ff       	call   c0000998 <strcat>
c001327f:	83 c4 10             	add    esp,0x10
c0013282:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013285:	3c 60                	cmp    al,0x60
c0013287:	7e 03                	jle    c001328c <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013289:	83 e8 20             	sub    eax,0x20
c001328c:	88 04 24             	mov    BYTE PTR [esp],al
c001328f:	88 03                	mov    BYTE PTR [ebx],al
c0013291:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013298:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001329e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00132a2:	bf 03 00 00 00       	mov    edi,0x3
c00132a7:	b8 03 00 00 00       	mov    eax,0x3
c00132ac:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00132af:	84 d2                	test   dl,dl
c00132b1:	0f 84 91 00 00 00    	je     c0013348 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00132b7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00132ba:	80 fa 5c             	cmp    dl,0x5c
c00132bd:	74 05                	je     c00132c4 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00132bf:	80 fa 2f             	cmp    dl,0x2f
c00132c2:	75 12                	jne    c00132d6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132c4:	89 c5                	mov    ebp,eax
c00132c6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00132cb:	74 09                	je     c00132d6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132cd:	40                   	inc    eax
c00132ce:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00132d2:	89 cf                	mov    edi,ecx
c00132d4:	eb d6                	jmp    c00132ac <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00132d6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00132db:	75 5b                	jne    c0013338 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132dd:	80 fa 2e             	cmp    dl,0x2e
c00132e0:	75 56                	jne    c0013338 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132e2:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00132e6:	74 19                	je     c0013301 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00132e8:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00132ed:	74 53                	je     c0013342 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00132ef:	89 f9                	mov    ecx,edi
c00132f1:	41                   	inc    ecx
c00132f2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00132f5:	80 fa 2f             	cmp    dl,0x2f
c00132f8:	74 f7                	je     c00132f1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00132fa:	80 fa 5c             	cmp    dl,0x5c
c00132fd:	74 f2                	je     c00132f1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00132ff:	eb d1                	jmp    c00132d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013301:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013306:	74 3a                	je     c0013342 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013308:	83 f8 03             	cmp    eax,0x3
c001330b:	74 c5                	je     c00132d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001330d:	41                   	inc    ecx
c001330e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013311:	80 fa 2f             	cmp    dl,0x2f
c0013314:	74 f7                	je     c001330d <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013316:	80 fa 5c             	cmp    dl,0x5c
c0013319:	74 f2                	je     c001330d <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001331b:	48                   	dec    eax
c001331c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013320:	75 06                	jne    c0013328 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013322:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013326:	eb f3                	jmp    c001331b <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013328:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001332c:	74 07                	je     c0013335 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001332e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013332:	48                   	dec    eax
c0013333:	eb f3                	jmp    c0013328 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013335:	40                   	inc    eax
c0013336:	eb 9a                	jmp    c00132d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013338:	80 fa 2f             	cmp    dl,0x2f
c001333b:	74 95                	je     c00132d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001333d:	80 fa 5c             	cmp    dl,0x5c
c0013340:	74 90                	je     c00132d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013342:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013345:	40                   	inc    eax
c0013346:	eb 8a                	jmp    c00132d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013348:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001334c:	83 ec 0c             	sub    esp,0xc
c001334f:	53                   	push   ebx
c0013350:	e8 63 d4 fe ff       	call   c00007b8 <strlen>
c0013355:	83 c4 10             	add    esp,0x10
c0013358:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001335d:	75 26                	jne    c0013385 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001335f:	83 ec 0c             	sub    esp,0xc
c0013362:	53                   	push   ebx
c0013363:	e8 50 d4 fe ff       	call   c00007b8 <strlen>
c0013368:	83 c4 10             	add    esp,0x10
c001336b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013370:	74 26                	je     c0013398 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013372:	83 ec 0c             	sub    esp,0xc
c0013375:	53                   	push   ebx
c0013376:	e8 3d d4 fe ff       	call   c00007b8 <strlen>
c001337b:	83 c4 10             	add    esp,0x10
c001337e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013383:	eb c7                	jmp    c001334c <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013385:	83 ec 0c             	sub    esp,0xc
c0013388:	53                   	push   ebx
c0013389:	e8 2a d4 fe ff       	call   c00007b8 <strlen>
c001338e:	83 c4 10             	add    esp,0x10
c0013391:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013396:	74 c7                	je     c001335f <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013398:	81 c4 0c 04 00 00    	add    esp,0x40c
c001339e:	5b                   	pop    ebx
c001339f:	5e                   	pop    esi
c00133a0:	5f                   	pop    edi
c00133a1:	5d                   	pop    ebp
c00133a2:	c3                   	ret    
c00133a3:	90                   	nop

c00133a4 <File::File(char const*, Process*)>:
c00133a4:	83 ec 0c             	sub    esp,0xc
c00133a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ab:	83 ec 08             	sub    esp,0x8
c00133ae:	6a 00                	push   0x0
c00133b0:	50                   	push   eax
c00133b1:	e8 40 e2 ff ff       	call   c00115f6 <UnixFile::UnixFile(int)>
c00133b6:	83 c4 10             	add    esp,0x10
c00133b9:	ba 84 b3 02 c0       	mov    edx,0xc002b384
c00133be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c2:	89 10                	mov    DWORD PTR [eax],edx
c00133c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133c8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00133ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d2:	83 c0 0d             	add    eax,0xd
c00133d5:	83 ec 04             	sub    esp,0x4
c00133d8:	52                   	push   edx
c00133d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133dd:	50                   	push   eax
c00133de:	e8 17 fe ff ff       	call   c00131fa <Fs::standardiseFiles(char*, char const*, char const*)>
c00133e3:	83 c4 10             	add    esp,0x10
c00133e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ea:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00133ed:	8d 50 bf             	lea    edx,[eax-0x41]
c00133f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00133fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fe:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013402:	90                   	nop
c0013403:	83 c4 0c             	add    esp,0xc
c0013406:	c3                   	ret    
c0013407:	90                   	nop

c0013408 <File::open(FileOpenMode)>:
c0013408:	53                   	push   ebx
c0013409:	b8 0b 00 00 00       	mov    eax,0xb
c001340e:	83 ec 08             	sub    esp,0x8
c0013411:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013415:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001341c:	80 fa 19             	cmp    dl,0x19
c001341f:	77 40                	ja     c0013461 <File::open(FileOpenMode)+0x59>
c0013421:	8b 14 95 e0 f3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0c20]
c0013428:	85 d2                	test   edx,edx
c001342a:	74 35                	je     c0013461 <File::open(FileOpenMode)+0x59>
c001342c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013432:	85 d2                	test   edx,edx
c0013434:	74 2b                	je     c0013461 <File::open(FileOpenMode)+0x59>
c0013436:	b8 06 00 00 00       	mov    eax,0x6
c001343b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001343f:	75 20                	jne    c0013461 <File::open(FileOpenMode)+0x59>
c0013441:	8b 02                	mov    eax,DWORD PTR [edx]
c0013443:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001344d:	51                   	push   ecx
c001344e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013451:	51                   	push   ecx
c0013452:	52                   	push   edx
c0013453:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013456:	83 c4 10             	add    esp,0x10
c0013459:	85 c0                	test   eax,eax
c001345b:	75 04                	jne    c0013461 <File::open(FileOpenMode)+0x59>
c001345d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013461:	83 c4 08             	add    esp,0x8
c0013464:	5b                   	pop    ebx
c0013465:	c3                   	ret    

c0013466 <File::close()>:
c0013466:	53                   	push   ebx
c0013467:	b8 0b 00 00 00       	mov    eax,0xb
c001346c:	83 ec 08             	sub    esp,0x8
c001346f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013473:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001347a:	80 fa 19             	cmp    dl,0x19
c001347d:	77 41                	ja     c00134c0 <File::close()+0x5a>
c001347f:	8b 1c 95 e0 f3 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0c20]
c0013486:	85 db                	test   ebx,ebx
c0013488:	74 36                	je     c00134c0 <File::close()+0x5a>
c001348a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013491:	74 2d                	je     c00134c0 <File::close()+0x5a>
c0013493:	b8 05 00 00 00       	mov    eax,0x5
c0013498:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001349c:	74 22                	je     c00134c0 <File::close()+0x5a>
c001349e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134a2:	8b 04 95 e0 f3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0c20]
c00134a9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134af:	53                   	push   ebx
c00134b0:	53                   	push   ebx
c00134b1:	8b 10                	mov    edx,DWORD PTR [eax]
c00134b3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134b9:	50                   	push   eax
c00134ba:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00134bd:	83 c4 10             	add    esp,0x10
c00134c0:	83 c4 08             	add    esp,0x8
c00134c3:	5b                   	pop    ebx
c00134c4:	c3                   	ret    
c00134c5:	90                   	nop

c00134c6 <File::seek(unsigned long long)>:
c00134c6:	56                   	push   esi
c00134c7:	53                   	push   ebx
c00134c8:	b8 0b 00 00 00       	mov    eax,0xb
c00134cd:	51                   	push   ecx
c00134ce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00134d6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00134dd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134e1:	80 fa 19             	cmp    dl,0x19
c00134e4:	77 31                	ja     c0013517 <File::seek(unsigned long long)+0x51>
c00134e6:	8b 14 95 e0 f3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0c20]
c00134ed:	85 d2                	test   edx,edx
c00134ef:	74 26                	je     c0013517 <File::seek(unsigned long long)+0x51>
c00134f1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134f7:	85 d2                	test   edx,edx
c00134f9:	74 1c                	je     c0013517 <File::seek(unsigned long long)+0x51>
c00134fb:	b8 05 00 00 00       	mov    eax,0x5
c0013500:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013504:	74 11                	je     c0013517 <File::seek(unsigned long long)+0x51>
c0013506:	8b 02                	mov    eax,DWORD PTR [edx]
c0013508:	53                   	push   ebx
c0013509:	51                   	push   ecx
c001350a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013510:	52                   	push   edx
c0013511:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013514:	83 c4 10             	add    esp,0x10
c0013517:	5a                   	pop    edx
c0013518:	5b                   	pop    ebx
c0013519:	5e                   	pop    esi
c001351a:	c3                   	ret    
c001351b:	90                   	nop

c001351c <File::tell(unsigned long long*)>:
c001351c:	83 ec 0c             	sub    esp,0xc
c001351f:	b8 0b 00 00 00       	mov    eax,0xb
c0013524:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013528:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001352f:	80 fa 19             	cmp    dl,0x19
c0013532:	77 34                	ja     c0013568 <File::tell(unsigned long long*)+0x4c>
c0013534:	8b 14 95 e0 f3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0c20]
c001353b:	85 d2                	test   edx,edx
c001353d:	74 29                	je     c0013568 <File::tell(unsigned long long*)+0x4c>
c001353f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013545:	85 d2                	test   edx,edx
c0013547:	74 1f                	je     c0013568 <File::tell(unsigned long long*)+0x4c>
c0013549:	b8 05 00 00 00       	mov    eax,0x5
c001354e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013552:	74 14                	je     c0013568 <File::tell(unsigned long long*)+0x4c>
c0013554:	50                   	push   eax
c0013555:	8b 02                	mov    eax,DWORD PTR [edx]
c0013557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001355b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013561:	52                   	push   edx
c0013562:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013565:	83 c4 10             	add    esp,0x10
c0013568:	83 c4 0c             	add    esp,0xc
c001356b:	c3                   	ret    

c001356c <File::rewind()>:
c001356c:	83 ec 10             	sub    esp,0x10
c001356f:	6a 00                	push   0x0
c0013571:	6a 00                	push   0x0
c0013573:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013577:	e8 4a ff ff ff       	call   c00134c6 <File::seek(unsigned long long)>
c001357c:	83 c4 1c             	add    esp,0x1c
c001357f:	c3                   	ret    

c0013580 <File::unlink()>:
c0013580:	83 ec 0c             	sub    esp,0xc
c0013583:	b8 0b 00 00 00       	mov    eax,0xb
c0013588:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001358c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013593:	80 f9 19             	cmp    cl,0x19
c0013596:	77 2f                	ja     c00135c7 <File::unlink()+0x47>
c0013598:	8b 0c 8d e0 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0c20]
c001359f:	85 c9                	test   ecx,ecx
c00135a1:	74 24                	je     c00135c7 <File::unlink()+0x47>
c00135a3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135a9:	85 c9                	test   ecx,ecx
c00135ab:	74 1a                	je     c00135c7 <File::unlink()+0x47>
c00135ad:	b8 06 00 00 00       	mov    eax,0x6
c00135b2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135b6:	75 0f                	jne    c00135c7 <File::unlink()+0x47>
c00135b8:	83 c2 0d             	add    edx,0xd
c00135bb:	50                   	push   eax
c00135bc:	50                   	push   eax
c00135bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135bf:	52                   	push   edx
c00135c0:	51                   	push   ecx
c00135c1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00135c4:	83 c4 10             	add    esp,0x10
c00135c7:	83 c4 0c             	add    esp,0xc
c00135ca:	c3                   	ret    
c00135cb:	90                   	nop

c00135cc <File::rename(char const*)>:
c00135cc:	83 ec 0c             	sub    esp,0xc
c00135cf:	b8 0b 00 00 00       	mov    eax,0xb
c00135d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135d8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135df:	80 f9 19             	cmp    cl,0x19
c00135e2:	77 32                	ja     c0013616 <File::rename(char const*)+0x4a>
c00135e4:	8b 0c 8d e0 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0c20]
c00135eb:	85 c9                	test   ecx,ecx
c00135ed:	74 27                	je     c0013616 <File::rename(char const*)+0x4a>
c00135ef:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135f5:	85 c9                	test   ecx,ecx
c00135f7:	74 1d                	je     c0013616 <File::rename(char const*)+0x4a>
c00135f9:	b8 06 00 00 00       	mov    eax,0x6
c00135fe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013602:	75 12                	jne    c0013616 <File::rename(char const*)+0x4a>
c0013604:	83 c2 0d             	add    edx,0xd
c0013607:	50                   	push   eax
c0013608:	8b 01                	mov    eax,DWORD PTR [ecx]
c001360a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001360e:	52                   	push   edx
c001360f:	51                   	push   ecx
c0013610:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013613:	83 c4 10             	add    esp,0x10
c0013616:	83 c4 0c             	add    esp,0xc
c0013619:	c3                   	ret    

c001361a <File::chfatattr(unsigned char, unsigned char)>:
c001361a:	57                   	push   edi
c001361b:	b8 0b 00 00 00       	mov    eax,0xb
c0013620:	56                   	push   esi
c0013621:	53                   	push   ebx
c0013622:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013626:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001362a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013631:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013635:	80 f9 19             	cmp    cl,0x19
c0013638:	77 37                	ja     c0013671 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001363a:	8b 0c 8d e0 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0c20]
c0013641:	85 c9                	test   ecx,ecx
c0013643:	74 2c                	je     c0013671 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013645:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001364b:	85 c9                	test   ecx,ecx
c001364d:	74 22                	je     c0013671 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001364f:	b8 06 00 00 00       	mov    eax,0x6
c0013654:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013658:	75 17                	jne    c0013671 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001365a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001365c:	89 f0                	mov    eax,esi
c001365e:	83 c2 0d             	add    edx,0xd
c0013661:	0f b6 f0             	movzx  esi,al
c0013664:	0f b6 db             	movzx  ebx,bl
c0013667:	56                   	push   esi
c0013668:	53                   	push   ebx
c0013669:	52                   	push   edx
c001366a:	51                   	push   ecx
c001366b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001366e:	83 c4 10             	add    esp,0x10
c0013671:	5b                   	pop    ebx
c0013672:	5e                   	pop    esi
c0013673:	5f                   	pop    edi
c0013674:	c3                   	ret    
c0013675:	90                   	nop

c0013676 <File::exists()>:
c0013676:	83 ec 0c             	sub    esp,0xc
c0013679:	31 c0                	xor    eax,eax
c001367b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001367f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013686:	80 f9 19             	cmp    cl,0x19
c0013689:	77 24                	ja     c00136af <File::exists()+0x39>
c001368b:	8b 0c 8d e0 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0c20]
c0013692:	85 c9                	test   ecx,ecx
c0013694:	74 19                	je     c00136af <File::exists()+0x39>
c0013696:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001369c:	85 c9                	test   ecx,ecx
c001369e:	74 0f                	je     c00136af <File::exists()+0x39>
c00136a0:	83 c2 0d             	add    edx,0xd
c00136a3:	50                   	push   eax
c00136a4:	50                   	push   eax
c00136a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136a7:	52                   	push   edx
c00136a8:	51                   	push   ecx
c00136a9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00136ac:	83 c4 10             	add    esp,0x10
c00136af:	83 c4 0c             	add    esp,0xc
c00136b2:	c3                   	ret    
c00136b3:	90                   	nop

c00136b4 <File::stat(unsigned long long*, bool*)>:
c00136b4:	56                   	push   esi
c00136b5:	53                   	push   ebx
c00136b6:	50                   	push   eax
c00136b7:	b8 0b 00 00 00       	mov    eax,0xb
c00136bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136c0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136cf:	80 f9 19             	cmp    cl,0x19
c00136d2:	77 3d                	ja     c0013711 <File::stat(unsigned long long*, bool*)+0x5d>
c00136d4:	8b 0c 8d e0 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0c20]
c00136db:	85 c9                	test   ecx,ecx
c00136dd:	74 32                	je     c0013711 <File::stat(unsigned long long*, bool*)+0x5d>
c00136df:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136e5:	85 c9                	test   ecx,ecx
c00136e7:	74 28                	je     c0013711 <File::stat(unsigned long long*, bool*)+0x5d>
c00136e9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136eb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136ef:	74 13                	je     c0013704 <File::stat(unsigned long long*, bool*)+0x50>
c00136f1:	83 ec 04             	sub    esp,0x4
c00136f4:	56                   	push   esi
c00136f5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00136fb:	51                   	push   ecx
c00136fc:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00136ff:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013702:	eb 0a                	jmp    c001370e <File::stat(unsigned long long*, bool*)+0x5a>
c0013704:	53                   	push   ebx
c0013705:	83 c2 0d             	add    edx,0xd
c0013708:	56                   	push   esi
c0013709:	52                   	push   edx
c001370a:	51                   	push   ecx
c001370b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001370e:	83 c4 10             	add    esp,0x10
c0013711:	5a                   	pop    edx
c0013712:	5b                   	pop    ebx
c0013713:	5e                   	pop    esi
c0013714:	c3                   	ret    

c0013715 <Fs::setcwd(Process*, char*)>:
c0013715:	55                   	push   ebp
c0013716:	57                   	push   edi
c0013717:	56                   	push   esi
c0013718:	53                   	push   ebx
c0013719:	81 ec 20 02 00 00    	sub    esp,0x220
c001371f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013726:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001372c:	57                   	push   edi
c001372d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013734:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013738:	56                   	push   esi
c0013739:	e8 bc fa ff ff       	call   c00131fa <Fs::standardiseFiles(char*, char const*, char const*)>
c001373e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013741:	e8 72 d0 fe ff       	call   c00007b8 <strlen>
c0013746:	83 c4 10             	add    esp,0x10
c0013749:	83 f8 02             	cmp    eax,0x2
c001374c:	77 17                	ja     c0013765 <Fs::setcwd(Process*, char*)+0x50>
c001374e:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013753:	83 e8 41             	sub    eax,0x41
c0013756:	83 f8 19             	cmp    eax,0x19
c0013759:	76 24                	jbe    c001377f <Fs::setcwd(Process*, char*)+0x6a>
c001375b:	b8 03 00 00 00       	mov    eax,0x3
c0013760:	e9 e0 00 00 00       	jmp    c0013845 <Fs::setcwd(Process*, char*)+0x130>
c0013765:	83 ec 0c             	sub    esp,0xc
c0013768:	56                   	push   esi
c0013769:	e8 4a d0 fe ff       	call   c00007b8 <strlen>
c001376e:	83 c4 10             	add    esp,0x10
c0013771:	83 f8 03             	cmp    eax,0x3
c0013774:	75 34                	jne    c00137aa <Fs::setcwd(Process*, char*)+0x95>
c0013776:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001377b:	75 2d                	jne    c00137aa <Fs::setcwd(Process*, char*)+0x95>
c001377d:	eb cf                	jmp    c001374e <Fs::setcwd(Process*, char*)+0x39>
c001377f:	8b 14 85 e0 f3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0c20]
c0013786:	b8 05 00 00 00       	mov    eax,0x5
c001378b:	85 d2                	test   edx,edx
c001378d:	0f 84 b2 00 00 00    	je     c0013845 <Fs::setcwd(Process*, char*)+0x130>
c0013793:	b8 06 00 00 00       	mov    eax,0x6
c0013798:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001379f:	0f 85 92 00 00 00    	jne    c0013837 <Fs::setcwd(Process*, char*)+0x122>
c00137a5:	e9 9b 00 00 00       	jmp    c0013845 <Fs::setcwd(Process*, char*)+0x130>
c00137aa:	83 ec 0c             	sub    esp,0xc
c00137ad:	68 14 01 00 00       	push   0x114
c00137b2:	e8 cf c0 ff ff       	call   c000f886 <malloc>
c00137b7:	83 c4 0c             	add    esp,0xc
c00137ba:	89 c3                	mov    ebx,eax
c00137bc:	55                   	push   ebp
c00137bd:	56                   	push   esi
c00137be:	50                   	push   eax
c00137bf:	e8 e0 fb ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c00137c4:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00137c9:	83 c4 0c             	add    esp,0xc
c00137cc:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00137d0:	50                   	push   eax
c00137d1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00137d5:	50                   	push   eax
c00137d6:	53                   	push   ebx
c00137d7:	e8 d8 fe ff ff       	call   c00136b4 <File::stat(unsigned long long*, bool*)>
c00137dc:	83 c4 10             	add    esp,0x10
c00137df:	83 f8 02             	cmp    eax,0x2
c00137e2:	74 04                	je     c00137e8 <Fs::setcwd(Process*, char*)+0xd3>
c00137e4:	85 c0                	test   eax,eax
c00137e6:	74 1c                	je     c0013804 <Fs::setcwd(Process*, char*)+0xef>
c00137e8:	b8 01 00 00 00       	mov    eax,0x1
c00137ed:	85 db                	test   ebx,ebx
c00137ef:	74 54                	je     c0013845 <Fs::setcwd(Process*, char*)+0x130>
c00137f1:	83 ec 0c             	sub    esp,0xc
c00137f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137f6:	53                   	push   ebx
c00137f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137fa:	83 c4 10             	add    esp,0x10
c00137fd:	b8 01 00 00 00       	mov    eax,0x1
c0013802:	eb 41                	jmp    c0013845 <Fs::setcwd(Process*, char*)+0x130>
c0013804:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013809:	75 1c                	jne    c0013827 <Fs::setcwd(Process*, char*)+0x112>
c001380b:	b8 02 00 00 00       	mov    eax,0x2
c0013810:	85 db                	test   ebx,ebx
c0013812:	74 31                	je     c0013845 <Fs::setcwd(Process*, char*)+0x130>
c0013814:	83 ec 0c             	sub    esp,0xc
c0013817:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013819:	53                   	push   ebx
c001381a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001381d:	83 c4 10             	add    esp,0x10
c0013820:	b8 02 00 00 00       	mov    eax,0x2
c0013825:	eb 1e                	jmp    c0013845 <Fs::setcwd(Process*, char*)+0x130>
c0013827:	85 db                	test   ebx,ebx
c0013829:	74 0c                	je     c0013837 <Fs::setcwd(Process*, char*)+0x122>
c001382b:	83 ec 0c             	sub    esp,0xc
c001382e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013830:	53                   	push   ebx
c0013831:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013834:	83 c4 10             	add    esp,0x10
c0013837:	50                   	push   eax
c0013838:	50                   	push   eax
c0013839:	56                   	push   esi
c001383a:	57                   	push   edi
c001383b:	e8 18 d0 fe ff       	call   c0000858 <strcpy>
c0013840:	83 c4 10             	add    esp,0x10
c0013843:	31 c0                	xor    eax,eax
c0013845:	81 c4 1c 02 00 00    	add    esp,0x21c
c001384b:	5b                   	pop    ebx
c001384c:	5e                   	pop    esi
c001384d:	5f                   	pop    edi
c001384e:	5d                   	pop    ebp
c001384f:	c3                   	ret    

c0013850 <Directory::Directory(char const*, Process*)>:
c0013850:	83 ec 0c             	sub    esp,0xc
c0013853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013857:	83 ec 08             	sub    esp,0x8
c001385a:	6a 00                	push   0x0
c001385c:	50                   	push   eax
c001385d:	e8 94 dd ff ff       	call   c00115f6 <UnixFile::UnixFile(int)>
c0013862:	83 c4 10             	add    esp,0x10
c0013865:	ba a0 b3 02 c0       	mov    edx,0xc002b3a0
c001386a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001386e:	89 10                	mov    DWORD PTR [eax],edx
c0013870:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013874:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001387a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387e:	83 c0 0d             	add    eax,0xd
c0013881:	83 ec 04             	sub    esp,0x4
c0013884:	52                   	push   edx
c0013885:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013889:	50                   	push   eax
c001388a:	e8 6b f9 ff ff       	call   c00131fa <Fs::standardiseFiles(char*, char const*, char const*)>
c001388f:	83 c4 10             	add    esp,0x10
c0013892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013896:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013899:	8d 50 bf             	lea    edx,[eax-0x41]
c001389c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00138a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138aa:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00138ae:	90                   	nop
c00138af:	83 c4 0c             	add    esp,0xc
c00138b2:	c3                   	ret    
c00138b3:	90                   	nop

c00138b4 <Directory::open()>:
c00138b4:	53                   	push   ebx
c00138b5:	b8 0b 00 00 00       	mov    eax,0xb
c00138ba:	83 ec 08             	sub    esp,0x8
c00138bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138c1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00138c8:	80 fa 19             	cmp    dl,0x19
c00138cb:	77 3d                	ja     c001390a <Directory::open()+0x56>
c00138cd:	8b 14 95 e0 f3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0c20]
c00138d4:	85 d2                	test   edx,edx
c00138d6:	74 32                	je     c001390a <Directory::open()+0x56>
c00138d8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00138de:	85 d2                	test   edx,edx
c00138e0:	74 28                	je     c001390a <Directory::open()+0x56>
c00138e2:	b8 06 00 00 00       	mov    eax,0x6
c00138e7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00138eb:	75 1d                	jne    c001390a <Directory::open()+0x56>
c00138ed:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00138f3:	50                   	push   eax
c00138f4:	8b 02                	mov    eax,DWORD PTR [edx]
c00138f6:	51                   	push   ecx
c00138f7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00138fa:	51                   	push   ecx
c00138fb:	52                   	push   edx
c00138fc:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00138ff:	83 c4 10             	add    esp,0x10
c0013902:	85 c0                	test   eax,eax
c0013904:	75 04                	jne    c001390a <Directory::open()+0x56>
c0013906:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001390a:	83 c4 08             	add    esp,0x8
c001390d:	5b                   	pop    ebx
c001390e:	c3                   	ret    
c001390f:	90                   	nop

c0013910 <Directory::close()>:
c0013910:	53                   	push   ebx
c0013911:	b8 0b 00 00 00       	mov    eax,0xb
c0013916:	83 ec 08             	sub    esp,0x8
c0013919:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001391d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013924:	80 fa 19             	cmp    dl,0x19
c0013927:	77 41                	ja     c001396a <Directory::close()+0x5a>
c0013929:	8b 1c 95 e0 f3 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0c20]
c0013930:	85 db                	test   ebx,ebx
c0013932:	74 36                	je     c001396a <Directory::close()+0x5a>
c0013934:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001393b:	74 2d                	je     c001396a <Directory::close()+0x5a>
c001393d:	b8 05 00 00 00       	mov    eax,0x5
c0013942:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013946:	74 22                	je     c001396a <Directory::close()+0x5a>
c0013948:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001394c:	8b 04 95 e0 f3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0c20]
c0013953:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013959:	53                   	push   ebx
c001395a:	53                   	push   ebx
c001395b:	8b 10                	mov    edx,DWORD PTR [eax]
c001395d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013963:	50                   	push   eax
c0013964:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013967:	83 c4 10             	add    esp,0x10
c001396a:	83 c4 08             	add    esp,0x8
c001396d:	5b                   	pop    ebx
c001396e:	c3                   	ret    
c001396f:	90                   	nop

c0013970 <Directory::unlink()>:
c0013970:	83 ec 0c             	sub    esp,0xc
c0013973:	b8 0b 00 00 00       	mov    eax,0xb
c0013978:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001397c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013983:	80 f9 19             	cmp    cl,0x19
c0013986:	77 2f                	ja     c00139b7 <Directory::unlink()+0x47>
c0013988:	8b 0c 8d e0 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0c20]
c001398f:	85 c9                	test   ecx,ecx
c0013991:	74 24                	je     c00139b7 <Directory::unlink()+0x47>
c0013993:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013999:	85 c9                	test   ecx,ecx
c001399b:	74 1a                	je     c00139b7 <Directory::unlink()+0x47>
c001399d:	b8 06 00 00 00       	mov    eax,0x6
c00139a2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139a6:	75 0f                	jne    c00139b7 <Directory::unlink()+0x47>
c00139a8:	83 c2 0d             	add    edx,0xd
c00139ab:	50                   	push   eax
c00139ac:	50                   	push   eax
c00139ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139af:	52                   	push   edx
c00139b0:	51                   	push   ecx
c00139b1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00139b4:	83 c4 10             	add    esp,0x10
c00139b7:	83 c4 0c             	add    esp,0xc
c00139ba:	c3                   	ret    
c00139bb:	90                   	nop

c00139bc <Directory::rename(char const*)>:
c00139bc:	83 ec 0c             	sub    esp,0xc
c00139bf:	b8 0b 00 00 00       	mov    eax,0xb
c00139c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139cf:	80 f9 19             	cmp    cl,0x19
c00139d2:	77 32                	ja     c0013a06 <Directory::rename(char const*)+0x4a>
c00139d4:	8b 0c 8d e0 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0c20]
c00139db:	85 c9                	test   ecx,ecx
c00139dd:	74 27                	je     c0013a06 <Directory::rename(char const*)+0x4a>
c00139df:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139e5:	85 c9                	test   ecx,ecx
c00139e7:	74 1d                	je     c0013a06 <Directory::rename(char const*)+0x4a>
c00139e9:	b8 06 00 00 00       	mov    eax,0x6
c00139ee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139f2:	75 12                	jne    c0013a06 <Directory::rename(char const*)+0x4a>
c00139f4:	83 c2 0d             	add    edx,0xd
c00139f7:	50                   	push   eax
c00139f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139fe:	52                   	push   edx
c00139ff:	51                   	push   ecx
c0013a00:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a03:	83 c4 10             	add    esp,0x10
c0013a06:	83 c4 0c             	add    esp,0xc
c0013a09:	c3                   	ret    

c0013a0a <Directory::exists()>:
c0013a0a:	83 ec 0c             	sub    esp,0xc
c0013a0d:	31 c0                	xor    eax,eax
c0013a0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a13:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a1a:	80 f9 19             	cmp    cl,0x19
c0013a1d:	77 24                	ja     c0013a43 <Directory::exists()+0x39>
c0013a1f:	8b 0c 8d e0 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0c20]
c0013a26:	85 c9                	test   ecx,ecx
c0013a28:	74 19                	je     c0013a43 <Directory::exists()+0x39>
c0013a2a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a30:	85 c9                	test   ecx,ecx
c0013a32:	74 0f                	je     c0013a43 <Directory::exists()+0x39>
c0013a34:	83 c2 0d             	add    edx,0xd
c0013a37:	50                   	push   eax
c0013a38:	50                   	push   eax
c0013a39:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a3b:	52                   	push   edx
c0013a3c:	51                   	push   ecx
c0013a3d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a40:	83 c4 10             	add    esp,0x10
c0013a43:	83 c4 0c             	add    esp,0xc
c0013a46:	c3                   	ret    
c0013a47:	90                   	nop

c0013a48 <Directory::read(dirent*)>:
c0013a48:	83 ec 1c             	sub    esp,0x1c
c0013a4b:	b8 0b 00 00 00       	mov    eax,0xb
c0013a50:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013a54:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a5b:	80 fa 19             	cmp    dl,0x19
c0013a5e:	77 30                	ja     c0013a90 <Directory::read(dirent*)+0x48>
c0013a60:	8b 14 95 e0 f3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0c20]
c0013a67:	85 d2                	test   edx,edx
c0013a69:	74 25                	je     c0013a90 <Directory::read(dirent*)+0x48>
c0013a6b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013a72:	74 1c                	je     c0013a90 <Directory::read(dirent*)+0x48>
c0013a74:	83 ec 0c             	sub    esp,0xc
c0013a77:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a79:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013a7d:	52                   	push   edx
c0013a7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013a82:	6a 00                	push   0x0
c0013a84:	68 10 01 00 00       	push   0x110
c0013a89:	51                   	push   ecx
c0013a8a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a8d:	83 c4 20             	add    esp,0x20
c0013a90:	83 c4 1c             	add    esp,0x1c
c0013a93:	c3                   	ret    

c0013a94 <Directory::create()>:
c0013a94:	83 ec 0c             	sub    esp,0xc
c0013a97:	b8 0b 00 00 00       	mov    eax,0xb
c0013a9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aa0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aa7:	80 f9 19             	cmp    cl,0x19
c0013aaa:	77 2f                	ja     c0013adb <Directory::create()+0x47>
c0013aac:	8b 0c 8d e0 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0c20]
c0013ab3:	85 c9                	test   ecx,ecx
c0013ab5:	74 24                	je     c0013adb <Directory::create()+0x47>
c0013ab7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013abd:	85 c9                	test   ecx,ecx
c0013abf:	74 1a                	je     c0013adb <Directory::create()+0x47>
c0013ac1:	b8 06 00 00 00       	mov    eax,0x6
c0013ac6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013aca:	75 0f                	jne    c0013adb <Directory::create()+0x47>
c0013acc:	83 c2 0d             	add    edx,0xd
c0013acf:	50                   	push   eax
c0013ad0:	50                   	push   eax
c0013ad1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ad3:	52                   	push   edx
c0013ad4:	51                   	push   ecx
c0013ad5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013ad8:	83 c4 10             	add    esp,0x10
c0013adb:	83 c4 0c             	add    esp,0xc
c0013ade:	c3                   	ret    
c0013adf:	90                   	nop

c0013ae0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013ae0:	b8 0a 00 00 00       	mov    eax,0xa
c0013ae5:	c3                   	ret    

c0013ae6 <Bus::Bus(char const*)>:
c0013ae6:	83 ec 0c             	sub    esp,0xc
c0013ae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aed:	83 ec 08             	sub    esp,0x8
c0013af0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013af4:	50                   	push   eax
c0013af5:	e8 70 09 00 00       	call   c001446a <Device::Device(char const*)>
c0013afa:	83 c4 10             	add    esp,0x10
c0013afd:	ba bc b3 02 c0       	mov    edx,0xc002b3bc
c0013b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b06:	89 10                	mov    DWORD PTR [eax],edx
c0013b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b0c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b16:	90                   	nop
c0013b17:	83 c4 0c             	add    esp,0xc
c0013b1a:	c3                   	ret    
c0013b1b:	90                   	nop

c0013b1c <Bus::~Bus()>:
c0013b1c:	83 ec 0c             	sub    esp,0xc
c0013b1f:	ba bc b3 02 c0       	mov    edx,0xc002b3bc
c0013b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b28:	89 10                	mov    DWORD PTR [eax],edx
c0013b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b2e:	83 ec 0c             	sub    esp,0xc
c0013b31:	50                   	push   eax
c0013b32:	e8 15 06 00 00       	call   c001414c <Device::~Device()>
c0013b37:	83 c4 10             	add    esp,0x10
c0013b3a:	90                   	nop
c0013b3b:	83 c4 0c             	add    esp,0xc
c0013b3e:	c3                   	ret    
c0013b3f:	90                   	nop

c0013b40 <Bus::~Bus()>:
c0013b40:	83 ec 0c             	sub    esp,0xc
c0013b43:	83 ec 0c             	sub    esp,0xc
c0013b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b4a:	e8 cd ff ff ff       	call   c0013b1c <Bus::~Bus()>
c0013b4f:	83 c4 10             	add    esp,0x10
c0013b52:	83 ec 08             	sub    esp,0x8
c0013b55:	68 58 01 00 00       	push   0x158
c0013b5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b5e:	e8 02 f2 ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0013b63:	83 c4 10             	add    esp,0x10
c0013b66:	83 c4 0c             	add    esp,0xc
c0013b69:	c3                   	ret    

c0013b6a <Buzzer::Buzzer(char const*)>:
c0013b6a:	83 ec 0c             	sub    esp,0xc
c0013b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b71:	83 ec 08             	sub    esp,0x8
c0013b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b78:	50                   	push   eax
c0013b79:	e8 ec 08 00 00       	call   c001446a <Device::Device(char const*)>
c0013b7e:	83 c4 10             	add    esp,0x10
c0013b81:	ba e8 b3 02 c0       	mov    edx,0xc002b3e8
c0013b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b8a:	89 10                	mov    DWORD PTR [eax],edx
c0013b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b90:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b9e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013ba8:	90                   	nop
c0013ba9:	83 c4 0c             	add    esp,0xc
c0013bac:	c3                   	ret    
c0013bad:	90                   	nop

c0013bae <Buzzer::~Buzzer()>:
c0013bae:	83 ec 0c             	sub    esp,0xc
c0013bb1:	ba e8 b3 02 c0       	mov    edx,0xc002b3e8
c0013bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bba:	89 10                	mov    DWORD PTR [eax],edx
c0013bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bc0:	83 ec 0c             	sub    esp,0xc
c0013bc3:	50                   	push   eax
c0013bc4:	e8 83 05 00 00       	call   c001414c <Device::~Device()>
c0013bc9:	83 c4 10             	add    esp,0x10
c0013bcc:	90                   	nop
c0013bcd:	83 c4 0c             	add    esp,0xc
c0013bd0:	c3                   	ret    
c0013bd1:	90                   	nop

c0013bd2 <Buzzer::~Buzzer()>:
c0013bd2:	83 ec 0c             	sub    esp,0xc
c0013bd5:	83 ec 0c             	sub    esp,0xc
c0013bd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bdc:	e8 cd ff ff ff       	call   c0013bae <Buzzer::~Buzzer()>
c0013be1:	83 c4 10             	add    esp,0x10
c0013be4:	83 ec 08             	sub    esp,0x8
c0013be7:	68 5c 01 00 00       	push   0x15c
c0013bec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bf0:	e8 70 f1 ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0013bf5:	83 c4 10             	add    esp,0x10
c0013bf8:	83 c4 0c             	add    esp,0xc
c0013bfb:	c3                   	ret    

c0013bfc <Buzzer::stop()>:
c0013bfc:	83 ec 14             	sub    esp,0x14
c0013bff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c03:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c05:	6a 00                	push   0x0
c0013c07:	50                   	push   eax
c0013c08:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c0b:	83 c4 1c             	add    esp,0x1c
c0013c0e:	c3                   	ret    

c0013c0f <beepThread(void*)>:
c0013c0f:	53                   	push   ebx
c0013c10:	83 ec 08             	sub    esp,0x8
c0013c13:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0013c18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c1c:	48                   	dec    eax
c0013c1d:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c0013c22:	75 01                	jne    c0013c25 <beepThread(void*)+0x16>
c0013c24:	fb                   	sti    
c0013c25:	50                   	push   eax
c0013c26:	50                   	push   eax
c0013c27:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c2c:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c32:	52                   	push   edx
c0013c33:	50                   	push   eax
c0013c34:	e8 d0 aa 00 00       	call   c001e709 <nanoSleep(unsigned long long)>
c0013c39:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c3c:	e8 bb ff ff ff       	call   c0013bfc <Buzzer::stop()>
c0013c41:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013c49:	83 c4 18             	add    esp,0x18
c0013c4c:	5b                   	pop    ebx
c0013c4d:	e9 b3 a9 00 00       	jmp    c001e605 <blockTask(TaskState)>

c0013c52 <Buzzer::beep(int, int, bool)>:
c0013c52:	57                   	push   edi
c0013c53:	56                   	push   esi
c0013c54:	53                   	push   ebx
c0013c55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c59:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c5d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c61:	52                   	push   edx
c0013c62:	52                   	push   edx
c0013c63:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c69:	56                   	push   esi
c0013c6a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013c6d:	83 c4 10             	add    esp,0x10
c0013c70:	89 f8                	mov    eax,edi
c0013c72:	84 c0                	test   al,al
c0013c74:	74 1f                	je     c0013c95 <Buzzer::beep(int, int, bool)+0x43>
c0013c76:	50                   	push   eax
c0013c77:	50                   	push   eax
c0013c78:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013c7e:	99                   	cdq    
c0013c7f:	52                   	push   edx
c0013c80:	50                   	push   eax
c0013c81:	e8 83 aa 00 00       	call   c001e709 <nanoSleep(unsigned long long)>
c0013c86:	83 c4 10             	add    esp,0x10
c0013c89:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c8d:	5b                   	pop    ebx
c0013c8e:	5e                   	pop    esi
c0013c8f:	5f                   	pop    edi
c0013c90:	e9 67 ff ff ff       	jmp    c0013bfc <Buzzer::stop()>
c0013c95:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013c9b:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0013ca0:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013ca8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013cac:	c7 44 24 14 0f 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c0f
c0013cb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013cb8:	5b                   	pop    ebx
c0013cb9:	5e                   	pop    esi
c0013cba:	5f                   	pop    edi
c0013cbb:	e9 02 a5 00 00       	jmp    c001e1c2 <Process::createThread(void (*)(void*), void*, int)>

c0013cc0 <User::loadClockSettings(int)>:
c0013cc0:	53                   	push   ebx
c0013cc1:	83 ec 14             	sub    esp,0x14
c0013cc4:	68 14 01 00 00       	push   0x114
c0013cc9:	e8 b8 bb ff ff       	call   c000f886 <malloc>
c0013cce:	83 c4 0c             	add    esp,0xc
c0013cd1:	89 c3                	mov    ebx,eax
c0013cd3:	ff 35 30 23 03 c0    	push   DWORD PTR ds:0xc0032330
c0013cd9:	68 10 b4 02 c0       	push   0xc002b410
c0013cde:	50                   	push   eax
c0013cdf:	e8 c0 f6 ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c0013ce4:	58                   	pop    eax
c0013ce5:	5a                   	pop    edx
c0013ce6:	6a 01                	push   0x1
c0013ce8:	53                   	push   ebx
c0013ce9:	e8 1a f7 ff ff       	call   c0013408 <File::open(FileOpenMode)>
c0013cee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cf1:	e8 70 f7 ff ff       	call   c0013466 <File::close()>
c0013cf6:	83 c4 10             	add    esp,0x10
c0013cf9:	85 db                	test   ebx,ebx
c0013cfb:	74 0f                	je     c0013d0c <User::loadClockSettings(int)+0x4c>
c0013cfd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d03:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d06:	83 c4 08             	add    esp,0x8
c0013d09:	5b                   	pop    ebx
c0013d0a:	ff e0                	jmp    eax
c0013d0c:	83 c4 08             	add    esp,0x8
c0013d0f:	5b                   	pop    ebx
c0013d10:	c3                   	ret    
c0013d11:	90                   	nop

c0013d12 <Clock::Clock(char const*)>:
c0013d12:	83 ec 0c             	sub    esp,0xc
c0013d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d19:	83 ec 08             	sub    esp,0x8
c0013d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d20:	50                   	push   eax
c0013d21:	e8 44 07 00 00       	call   c001446a <Device::Device(char const*)>
c0013d26:	83 c4 10             	add    esp,0x10
c0013d29:	ba 38 b4 02 c0       	mov    edx,0xc002b438
c0013d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d32:	89 10                	mov    DWORD PTR [eax],edx
c0013d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d38:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d42:	90                   	nop
c0013d43:	83 c4 0c             	add    esp,0xc
c0013d46:	c3                   	ret    
c0013d47:	90                   	nop

c0013d48 <Clock::~Clock()>:
c0013d48:	83 ec 0c             	sub    esp,0xc
c0013d4b:	ba 38 b4 02 c0       	mov    edx,0xc002b438
c0013d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d54:	89 10                	mov    DWORD PTR [eax],edx
c0013d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d5a:	83 ec 0c             	sub    esp,0xc
c0013d5d:	50                   	push   eax
c0013d5e:	e8 e9 03 00 00       	call   c001414c <Device::~Device()>
c0013d63:	83 c4 10             	add    esp,0x10
c0013d66:	90                   	nop
c0013d67:	83 c4 0c             	add    esp,0xc
c0013d6a:	c3                   	ret    
c0013d6b:	90                   	nop

c0013d6c <Clock::~Clock()>:
c0013d6c:	83 ec 0c             	sub    esp,0xc
c0013d6f:	83 ec 0c             	sub    esp,0xc
c0013d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d76:	e8 cd ff ff ff       	call   c0013d48 <Clock::~Clock()>
c0013d7b:	83 c4 10             	add    esp,0x10
c0013d7e:	83 ec 08             	sub    esp,0x8
c0013d81:	68 58 01 00 00       	push   0x158
c0013d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d8a:	e8 d6 ef ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0013d8f:	83 c4 10             	add    esp,0x10
c0013d92:	83 c4 0c             	add    esp,0xc
c0013d95:	c3                   	ret    

c0013d96 <Clock::timeInSecondsLocal()>:
c0013d96:	53                   	push   ebx
c0013d97:	83 ec 14             	sub    esp,0x14
c0013d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d9e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013da0:	50                   	push   eax
c0013da1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013da4:	0f b6 0d 5c ef 02 c0 	movzx  ecx,BYTE PTR ds:0xc002ef5c
c0013dab:	03 0d 60 ef 02 c0    	add    ecx,DWORD PTR ds:0xc002ef60
c0013db1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013db7:	89 cb                	mov    ebx,ecx
c0013db9:	c1 fb 1f             	sar    ebx,0x1f
c0013dbc:	01 c8                	add    eax,ecx
c0013dbe:	11 da                	adc    edx,ebx
c0013dc0:	83 c4 10             	add    esp,0x10
c0013dc3:	31 c9                	xor    ecx,ecx
c0013dc5:	80 3d 5d ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef5d,0x0
c0013dcc:	74 05                	je     c0013dd3 <Clock::timeInSecondsLocal()+0x3d>
c0013dce:	b9 08 07 00 00       	mov    ecx,0x708
c0013dd3:	31 db                	xor    ebx,ebx
c0013dd5:	01 c8                	add    eax,ecx
c0013dd7:	11 da                	adc    edx,ebx
c0013dd9:	83 c4 08             	add    esp,0x8
c0013ddc:	5b                   	pop    ebx
c0013ddd:	c3                   	ret    

c0013dde <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013dde:	57                   	push   edi
c0013ddf:	56                   	push   esi
c0013de0:	53                   	push   ebx
c0013de1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013de5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013de9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013deb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013def:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013df2:	0f b6 05 5c ef 02 c0 	movzx  eax,BYTE PTR ds:0xc002ef5c
c0013df9:	03 05 60 ef 02 c0    	add    eax,DWORD PTR ds:0xc002ef60
c0013dff:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e05:	99                   	cdq    
c0013e06:	29 c6                	sub    esi,eax
c0013e08:	19 d7                	sbb    edi,edx
c0013e0a:	89 f0                	mov    eax,esi
c0013e0c:	89 fa                	mov    edx,edi
c0013e0e:	31 f6                	xor    esi,esi
c0013e10:	80 3d 5d ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef5d,0x0
c0013e17:	74 05                	je     c0013e1e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e19:	be 08 07 00 00       	mov    esi,0x708
c0013e1e:	31 ff                	xor    edi,edi
c0013e20:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e24:	29 f0                	sub    eax,esi
c0013e26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e2a:	19 fa                	sbb    edx,edi
c0013e2c:	89 d8                	mov    eax,ebx
c0013e2e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e32:	5b                   	pop    ebx
c0013e33:	5e                   	pop    esi
c0013e34:	5f                   	pop    edi
c0013e35:	ff e0                	jmp    eax

c0013e37 <datetimeToSeconds(datetime_t)>:
c0013e37:	55                   	push   ebp
c0013e38:	57                   	push   edi
c0013e39:	56                   	push   esi
c0013e3a:	53                   	push   ebx
c0013e3b:	83 ec 14             	sub    esp,0x14
c0013e3e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e42:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e46:	89 d3                	mov    ebx,edx
c0013e48:	0f b6 c6             	movzx  eax,dh
c0013e4b:	c1 eb 10             	shr    ebx,0x10
c0013e4e:	48                   	dec    eax
c0013e4f:	66 81 eb 6c 07       	sub    bx,0x76c
c0013e54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013e58:	0f b6 f5             	movzx  esi,ch
c0013e5b:	89 cf                	mov    edi,ecx
c0013e5d:	6b f6 3c             	imul   esi,esi,0x3c
c0013e60:	c1 ef 10             	shr    edi,0x10
c0013e63:	0f b6 c9             	movzx  ecx,cl
c0013e66:	89 f8                	mov    eax,edi
c0013e68:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e6e:	0f b6 f8             	movzx  edi,al
c0013e71:	0f b6 d2             	movzx  edx,dl
c0013e74:	01 fe                	add    esi,edi
c0013e76:	01 f1                	add    ecx,esi
c0013e78:	0f b7 f3             	movzx  esi,bx
c0013e7b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e7f:	c1 f9 1f             	sar    ecx,0x1f
c0013e82:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013e87:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e8b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013e90:	8b 0c 8d 80 b4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4b80]
c0013e97:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013e9b:	76 29                	jbe    c0013ec6 <datetimeToSeconds(datetime_t)+0x8f>
c0013e9d:	f6 c3 03             	test   bl,0x3
c0013ea0:	75 24                	jne    c0013ec6 <datetimeToSeconds(datetime_t)+0x8f>
c0013ea2:	31 d2                	xor    edx,edx
c0013ea4:	bf 64 00 00 00       	mov    edi,0x64
c0013ea9:	89 d8                	mov    eax,ebx
c0013eab:	66 f7 f7             	div    di
c0013eae:	66 85 d2             	test   dx,dx
c0013eb1:	75 12                	jne    c0013ec5 <datetimeToSeconds(datetime_t)+0x8e>
c0013eb3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013eb9:	bf 90 01 00 00       	mov    edi,0x190
c0013ebe:	99                   	cdq    
c0013ebf:	f7 ff                	idiv   edi
c0013ec1:	85 d2                	test   edx,edx
c0013ec3:	75 01                	jne    c0013ec6 <datetimeToSeconds(datetime_t)+0x8f>
c0013ec5:	41                   	inc    ecx
c0013ec6:	66 83 fb 46          	cmp    bx,0x46
c0013eca:	76 45                	jbe    c0013f11 <datetimeToSeconds(datetime_t)+0xda>
c0013ecc:	bb 46 00 00 00       	mov    ebx,0x46
c0013ed1:	bf 64 00 00 00       	mov    edi,0x64
c0013ed6:	bd 90 01 00 00       	mov    ebp,0x190
c0013edb:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ee0:	f6 c3 03             	test   bl,0x3
c0013ee3:	75 23                	jne    c0013f08 <datetimeToSeconds(datetime_t)+0xd1>
c0013ee5:	89 d8                	mov    eax,ebx
c0013ee7:	99                   	cdq    
c0013ee8:	f7 ff                	idiv   edi
c0013eea:	b8 6e 01 00 00       	mov    eax,0x16e
c0013eef:	85 d2                	test   edx,edx
c0013ef1:	75 15                	jne    c0013f08 <datetimeToSeconds(datetime_t)+0xd1>
c0013ef3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013ef9:	99                   	cdq    
c0013efa:	f7 fd                	idiv   ebp
c0013efc:	83 fa 01             	cmp    edx,0x1
c0013eff:	19 c0                	sbb    eax,eax
c0013f01:	f7 d0                	not    eax
c0013f03:	05 6e 01 00 00       	add    eax,0x16e
c0013f08:	01 c1                	add    ecx,eax
c0013f0a:	43                   	inc    ebx
c0013f0b:	39 f3                	cmp    ebx,esi
c0013f0d:	7c cc                	jl     c0013edb <datetimeToSeconds(datetime_t)+0xa4>
c0013f0f:	eb 35                	jmp    c0013f46 <datetimeToSeconds(datetime_t)+0x10f>
c0013f11:	74 33                	je     c0013f46 <datetimeToSeconds(datetime_t)+0x10f>
c0013f13:	b8 45 00 00 00       	mov    eax,0x45
c0013f18:	89 c2                	mov    edx,eax
c0013f1a:	83 e2 03             	and    edx,0x3
c0013f1d:	39 f0                	cmp    eax,esi
c0013f1f:	7e 0f                	jle    c0013f30 <datetimeToSeconds(datetime_t)+0xf9>
c0013f21:	83 fa 01             	cmp    edx,0x1
c0013f24:	19 d2                	sbb    edx,edx
c0013f26:	48                   	dec    eax
c0013f27:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f2e:	eb e8                	jmp    c0013f18 <datetimeToSeconds(datetime_t)+0xe1>
c0013f30:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f35:	85 d2                	test   edx,edx
c0013f37:	75 0b                	jne    c0013f44 <datetimeToSeconds(datetime_t)+0x10d>
c0013f39:	66 83 fb 01          	cmp    bx,0x1
c0013f3d:	19 c0                	sbb    eax,eax
c0013f3f:	05 6e 01 00 00       	add    eax,0x16e
c0013f44:	29 c1                	sub    ecx,eax
c0013f46:	b8 80 51 01 00       	mov    eax,0x15180
c0013f4b:	f7 e9                	imul   ecx
c0013f4d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013f51:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013f55:	83 c4 14             	add    esp,0x14
c0013f58:	5b                   	pop    ebx
c0013f59:	5e                   	pop    esi
c0013f5a:	5f                   	pop    edi
c0013f5b:	5d                   	pop    ebp
c0013f5c:	c3                   	ret    
c0013f5d:	90                   	nop

c0013f5e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013f5e:	57                   	push   edi
c0013f5f:	56                   	push   esi
c0013f60:	53                   	push   ebx
c0013f61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f65:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f67:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013f6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f72:	e8 c0 fe ff ff       	call   c0013e37 <datetimeToSeconds(datetime_t)>
c0013f77:	59                   	pop    ecx
c0013f78:	0f b6 0d 5c ef 02 c0 	movzx  ecx,BYTE PTR ds:0xc002ef5c
c0013f7f:	5b                   	pop    ebx
c0013f80:	03 0d 60 ef 02 c0    	add    ecx,DWORD PTR ds:0xc002ef60
c0013f86:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f8c:	89 cb                	mov    ebx,ecx
c0013f8e:	c1 fb 1f             	sar    ebx,0x1f
c0013f91:	29 c8                	sub    eax,ecx
c0013f93:	19 da                	sbb    edx,ebx
c0013f95:	31 c9                	xor    ecx,ecx
c0013f97:	80 3d 5d ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef5d,0x0
c0013f9e:	74 05                	je     c0013fa5 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013fa0:	b9 08 07 00 00       	mov    ecx,0x708
c0013fa5:	31 db                	xor    ebx,ebx
c0013fa7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013fab:	29 c8                	sub    eax,ecx
c0013fad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fb1:	19 da                	sbb    edx,ebx
c0013fb3:	89 f8                	mov    eax,edi
c0013fb5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013fb9:	5b                   	pop    ebx
c0013fba:	5e                   	pop    esi
c0013fbb:	5f                   	pop    edi
c0013fbc:	ff e0                	jmp    eax

c0013fbe <secondsToDatetime(unsigned long long)>:
c0013fbe:	55                   	push   ebp
c0013fbf:	57                   	push   edi
c0013fc0:	56                   	push   esi
c0013fc1:	53                   	push   ebx
c0013fc2:	83 ec 1c             	sub    esp,0x1c
c0013fc5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013fc9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013fcd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013fd1:	6a 00                	push   0x0
c0013fd3:	68 80 51 01 00       	push   0x15180
c0013fd8:	55                   	push   ebp
c0013fd9:	57                   	push   edi
c0013fda:	e8 55 31 01 00       	call   c0027134 <__udivdi3>
c0013fdf:	83 c4 10             	add    esp,0x10
c0013fe2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013fe8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fec:	6a 00                	push   0x0
c0013fee:	68 80 51 01 00       	push   0x15180
c0013ff3:	55                   	push   ebp
c0013ff4:	57                   	push   edi
c0013ff5:	bf 10 0e 00 00       	mov    edi,0xe10
c0013ffa:	e8 35 32 01 00       	call   c0027234 <__umoddi3>
c0013fff:	83 c4 10             	add    esp,0x10
c0014002:	99                   	cdq    
c0014003:	f7 ff                	idiv   edi
c0014005:	bf 3c 00 00 00       	mov    edi,0x3c
c001400a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001400d:	89 d0                	mov    eax,edx
c001400f:	99                   	cdq    
c0014010:	f7 ff                	idiv   edi
c0014012:	85 db                	test   ebx,ebx
c0014014:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014017:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001401a:	79 11                	jns    c001402d <secondsToDatetime(unsigned long long)+0x6f>
c001401c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014020:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014026:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001402b:	eb 07                	jmp    c0014034 <secondsToDatetime(unsigned long long)+0x76>
c001402d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014032:	89 d8                	mov    eax,ebx
c0014034:	bf b4 05 00 00       	mov    edi,0x5b4
c0014039:	99                   	cdq    
c001403a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001403f:	f7 f9                	idiv   ecx
c0014041:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014046:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001404a:	31 d2                	xor    edx,edx
c001404c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014054:	01 c3                	add    ebx,eax
c0014056:	89 d8                	mov    eax,ebx
c0014058:	f7 f1                	div    ecx
c001405a:	31 d2                	xor    edx,edx
c001405c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001405f:	89 d8                	mov    eax,ebx
c0014061:	f7 f7                	div    edi
c0014063:	31 d2                	xor    edx,edx
c0014065:	29 c1                	sub    ecx,eax
c0014067:	89 d8                	mov    eax,ebx
c0014069:	f7 f5                	div    ebp
c001406b:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014070:	29 c1                	sub    ecx,eax
c0014072:	31 d2                	xor    edx,edx
c0014074:	89 c8                	mov    eax,ecx
c0014076:	f7 f5                	div    ebp
c0014078:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001407d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014081:	31 d2                	xor    edx,edx
c0014083:	89 c8                	mov    eax,ecx
c0014085:	f7 f5                	div    ebp
c0014087:	31 d2                	xor    edx,edx
c0014089:	01 c3                	add    ebx,eax
c001408b:	89 c8                	mov    eax,ecx
c001408d:	f7 f7                	div    edi
c001408f:	bf 99 00 00 00       	mov    edi,0x99
c0014094:	29 c3                	sub    ebx,eax
c0014096:	31 d2                	xor    edx,edx
c0014098:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00140a0:	29 c3                	sub    ebx,eax
c00140a2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00140a5:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00140a8:	bb 05 00 00 00       	mov    ebx,0x5
c00140ad:	83 c1 02             	add    ecx,0x2
c00140b0:	89 c8                	mov    eax,ecx
c00140b2:	f7 f7                	div    edi
c00140b4:	31 d2                	xor    edx,edx
c00140b6:	89 c7                	mov    edi,eax
c00140b8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00140be:	83 c0 02             	add    eax,0x2
c00140c1:	f7 f3                	div    ebx
c00140c3:	89 eb                	mov    ebx,ebp
c00140c5:	29 c3                	sub    ebx,eax
c00140c7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00140cd:	88 1e                	mov    BYTE PTR [esi],bl
c00140cf:	19 c0                	sbb    eax,eax
c00140d1:	31 d2                	xor    edx,edx
c00140d3:	83 e0 0c             	and    eax,0xc
c00140d6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00140da:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00140e2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00140e6:	83 f9 01             	cmp    ecx,0x1
c00140e9:	0f 96 c2             	setbe  dl
c00140ec:	41                   	inc    ecx
c00140ed:	01 d0                	add    eax,edx
c00140ef:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00140f2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00140f6:	83 c4 1c             	add    esp,0x1c
c00140f9:	89 f0                	mov    eax,esi
c00140fb:	5b                   	pop    ebx
c00140fc:	5e                   	pop    esi
c00140fd:	5f                   	pop    edi
c00140fe:	5d                   	pop    ebp
c00140ff:	c2 04 00             	ret    0x4

c0014102 <Clock::timeInDatetimeLocal()>:
c0014102:	53                   	push   ebx
c0014103:	83 ec 14             	sub    esp,0x14
c0014106:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001410a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001410e:	e8 83 fc ff ff       	call   c0013d96 <Clock::timeInSecondsLocal()>
c0014113:	83 c4 0c             	add    esp,0xc
c0014116:	52                   	push   edx
c0014117:	50                   	push   eax
c0014118:	53                   	push   ebx
c0014119:	e8 a0 fe ff ff       	call   c0013fbe <secondsToDatetime(unsigned long long)>
c001411e:	89 d8                	mov    eax,ebx
c0014120:	83 c4 14             	add    esp,0x14
c0014123:	5b                   	pop    ebx
c0014124:	c2 04 00             	ret    0x4
c0014127:	90                   	nop

c0014128 <Device::hibernate()>:
c0014128:	c3                   	ret    
c0014129:	90                   	nop

c001412a <Device::wake()>:
c001412a:	c3                   	ret    
c001412b:	90                   	nop

c001412c <Device::detect()>:
c001412c:	c3                   	ret    
c001412d:	90                   	nop

c001412e <Device::disableLegacy()>:
c001412e:	c3                   	ret    
c001412f:	90                   	nop

c0014130 <Device::powerSaving(PowerSavingLevel)>:
c0014130:	c3                   	ret    
c0014131:	90                   	nop

c0014132 <DriverlessDevice::close(int, int, void*)>:
c0014132:	31 c0                	xor    eax,eax
c0014134:	c3                   	ret    
c0014135:	90                   	nop

c0014136 <DriverlessDevice::detect()>:
c0014136:	c3                   	ret    
c0014137:	90                   	nop

c0014138 <DriverlessDevice::open(int, int, void*)>:
c0014138:	83 ec 18             	sub    esp,0x18
c001413b:	68 b0 b4 02 c0       	push   0xc002b4b0
c0014140:	e8 c0 66 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0014145:	83 c8 ff             	or     eax,0xffffffff
c0014148:	83 c4 1c             	add    esp,0x1c
c001414b:	c3                   	ret    

c001414c <Device::~Device()>:
c001414c:	ba d8 b4 02 c0       	mov    edx,0xc002b4d8
c0014151:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014155:	89 10                	mov    DWORD PTR [eax],edx
c0014157:	90                   	nop
c0014158:	c3                   	ret    
c0014159:	90                   	nop

c001415a <Device::~Device()>:
c001415a:	83 ec 0c             	sub    esp,0xc
c001415d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014161:	e8 e6 ff ff ff       	call   c001414c <Device::~Device()>
c0014166:	83 c4 04             	add    esp,0x4
c0014169:	83 ec 08             	sub    esp,0x8
c001416c:	68 58 01 00 00       	push   0x158
c0014171:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014175:	e8 eb eb ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c001417a:	83 c4 10             	add    esp,0x10
c001417d:	83 c4 0c             	add    esp,0xc
c0014180:	c3                   	ret    
c0014181:	90                   	nop

c0014182 <Device::findAndLoadDriver()>:
c0014182:	c3                   	ret    
c0014183:	90                   	nop

c0014184 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014184:	57                   	push   edi
c0014185:	b9 09 00 00 00       	mov    ecx,0x9
c001418a:	56                   	push   esi
c001418b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001418f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014193:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001419d:	81 c7 18 01 00 00    	add    edi,0x118
c00141a3:	fc                   	cld    
c00141a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141a6:	5e                   	pop    esi
c00141a7:	5f                   	pop    edi
c00141a8:	c3                   	ret    
c00141a9:	90                   	nop

c00141aa <Device::preOpenACPI(void*, char*, char*)>:
c00141aa:	56                   	push   esi
c00141ab:	53                   	push   ebx
c00141ac:	83 ec 08             	sub    esp,0x8
c00141af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141b3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00141b7:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00141c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141c5:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00141cb:	6a 1e                	push   0x1e
c00141cd:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00141d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00141d7:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00141dd:	50                   	push   eax
c00141de:	e8 85 c5 fe ff       	call   c0000768 <memcpy>
c00141e3:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00141e7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00141eb:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00141f3:	83 c4 14             	add    esp,0x14
c00141f6:	5b                   	pop    ebx
c00141f7:	5e                   	pop    esi
c00141f8:	e9 6b c5 fe ff       	jmp    c0000768 <memcpy>
c00141fd:	90                   	nop

c00141fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00141fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014202:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014207:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001420e:	75 0b                	jne    c001421b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014210:	8b 00                	mov    eax,DWORD PTR [eax]
c0014212:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014216:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014219:	eb 1e                	jmp    c0014239 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001421b:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0014220:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014226:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001422c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001422e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014232:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014236:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014239:	ff e0                	jmp    eax
c001423b:	90                   	nop

c001423c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001423c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014240:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014245:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001424c:	75 0b                	jne    c0014259 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001424e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014250:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014254:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014257:	eb 1e                	jmp    c0014277 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014259:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c001425e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014264:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001426a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001426c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014270:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014274:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014277:	ff e0                	jmp    eax
c0014279:	90                   	nop

c001427a <Device::addChild(Device*)>:
c001427a:	53                   	push   ebx
c001427b:	83 ec 08             	sub    esp,0x8
c001427e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014282:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014286:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001428c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014292:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014294:	85 d2                	test   edx,edx
c0014296:	74 04                	je     c001429c <Device::addChild(Device*)+0x22>
c0014298:	89 d3                	mov    ebx,edx
c001429a:	eb f6                	jmp    c0014292 <Device::addChild(Device*)+0x18>
c001429c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001429f:	83 ec 0c             	sub    esp,0xc
c00142a2:	6a 08                	push   0x8
c00142a4:	e8 dd b5 ff ff       	call   c000f886 <malloc>
c00142a9:	89 03                	mov    DWORD PTR [ebx],eax
c00142ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142b8:	83 c4 18             	add    esp,0x18
c00142bb:	5b                   	pop    ebx
c00142bc:	c3                   	ret    
c00142bd:	90                   	nop

c00142be <Device::removeAllChildren()>:
c00142be:	56                   	push   esi
c00142bf:	53                   	push   ebx
c00142c0:	52                   	push   edx
c00142c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142c5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00142cb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142ce:	74 17                	je     c00142e7 <Device::removeAllChildren()+0x29>
c00142d0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00142d3:	85 c0                	test   eax,eax
c00142d5:	74 0c                	je     c00142e3 <Device::removeAllChildren()+0x25>
c00142d7:	83 ec 0c             	sub    esp,0xc
c00142da:	8b 10                	mov    edx,DWORD PTR [eax]
c00142dc:	50                   	push   eax
c00142dd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00142e0:	83 c4 10             	add    esp,0x10
c00142e3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142e5:	eb e4                	jmp    c00142cb <Device::removeAllChildren()+0xd>
c00142e7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142f3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014300:	58                   	pop    eax
c0014301:	5b                   	pop    ebx
c0014302:	5e                   	pop    esi
c0014303:	c3                   	ret    

c0014304 <Device::hibernateAll()>:
c0014304:	53                   	push   ebx
c0014305:	83 ec 14             	sub    esp,0x14
c0014308:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001430c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001430e:	53                   	push   ebx
c001430f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014312:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014318:	83 c4 10             	add    esp,0x10
c001431b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001431e:	74 0f                	je     c001432f <Device::hibernateAll()+0x2b>
c0014320:	83 ec 0c             	sub    esp,0xc
c0014323:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014326:	e8 d9 ff ff ff       	call   c0014304 <Device::hibernateAll()>
c001432b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001432d:	eb e9                	jmp    c0014318 <Device::hibernateAll()+0x14>
c001432f:	83 c4 08             	add    esp,0x8
c0014332:	5b                   	pop    ebx
c0014333:	c3                   	ret    

c0014334 <Device::wakeAll()>:
c0014334:	53                   	push   ebx
c0014335:	83 ec 14             	sub    esp,0x14
c0014338:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001433c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001433e:	53                   	push   ebx
c001433f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014342:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014348:	83 c4 10             	add    esp,0x10
c001434b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001434e:	74 0f                	je     c001435f <Device::wakeAll()+0x2b>
c0014350:	83 ec 0c             	sub    esp,0xc
c0014353:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014356:	e8 d9 ff ff ff       	call   c0014334 <Device::wakeAll()>
c001435b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001435d:	eb e9                	jmp    c0014348 <Device::wakeAll()+0x14>
c001435f:	83 c4 08             	add    esp,0x8
c0014362:	5b                   	pop    ebx
c0014363:	c3                   	ret    

c0014364 <Device::detectAll()>:
c0014364:	53                   	push   ebx
c0014365:	83 ec 14             	sub    esp,0x14
c0014368:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001436c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001436e:	53                   	push   ebx
c001436f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014372:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014378:	83 c4 10             	add    esp,0x10
c001437b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001437e:	74 0f                	je     c001438f <Device::detectAll()+0x2b>
c0014380:	83 ec 0c             	sub    esp,0xc
c0014383:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014386:	e8 d9 ff ff ff       	call   c0014364 <Device::detectAll()>
c001438b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001438d:	eb e9                	jmp    c0014378 <Device::detectAll()+0x14>
c001438f:	83 c4 08             	add    esp,0x8
c0014392:	5b                   	pop    ebx
c0014393:	c3                   	ret    

c0014394 <Device::disableLegacyAll()>:
c0014394:	53                   	push   ebx
c0014395:	83 ec 14             	sub    esp,0x14
c0014398:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001439c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001439e:	53                   	push   ebx
c001439f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00143a2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143a8:	83 c4 10             	add    esp,0x10
c00143ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143ae:	74 0f                	je     c00143bf <Device::disableLegacyAll()+0x2b>
c00143b0:	83 ec 0c             	sub    esp,0xc
c00143b3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143b6:	e8 d9 ff ff ff       	call   c0014394 <Device::disableLegacyAll()>
c00143bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143bd:	eb e9                	jmp    c00143a8 <Device::disableLegacyAll()+0x14>
c00143bf:	83 c4 08             	add    esp,0x8
c00143c2:	5b                   	pop    ebx
c00143c3:	c3                   	ret    

c00143c4 <Device::loadDriversForAll()>:
c00143c4:	53                   	push   ebx
c00143c5:	83 ec 08             	sub    esp,0x8
c00143c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143cc:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00143d2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00143d4:	85 db                	test   ebx,ebx
c00143d6:	74 12                	je     c00143ea <Device::loadDriversForAll()+0x26>
c00143d8:	83 ec 0c             	sub    esp,0xc
c00143db:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00143de:	e8 e1 ff ff ff       	call   c00143c4 <Device::loadDriversForAll()>
c00143e3:	83 c4 10             	add    esp,0x10
c00143e6:	89 d8                	mov    eax,ebx
c00143e8:	eb e8                	jmp    c00143d2 <Device::loadDriversForAll()+0xe>
c00143ea:	83 c4 08             	add    esp,0x8
c00143ed:	5b                   	pop    ebx
c00143ee:	c3                   	ret    
c00143ef:	90                   	nop

c00143f0 <Device::closeAll()>:
c00143f0:	53                   	push   ebx
c00143f1:	83 ec 08             	sub    esp,0x8
c00143f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143fa:	6a 00                	push   0x0
c00143fc:	6a 00                	push   0x0
c00143fe:	6a 00                	push   0x0
c0014400:	53                   	push   ebx
c0014401:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014404:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001440a:	83 c4 10             	add    esp,0x10
c001440d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014410:	74 0f                	je     c0014421 <Device::closeAll()+0x31>
c0014412:	83 ec 0c             	sub    esp,0xc
c0014415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014418:	e8 d3 ff ff ff       	call   c00143f0 <Device::closeAll()>
c001441d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001441f:	eb e9                	jmp    c001440a <Device::closeAll()+0x1a>
c0014421:	83 c4 08             	add    esp,0x8
c0014424:	5b                   	pop    ebx
c0014425:	c3                   	ret    

c0014426 <Device::powerSavingAll(PowerSavingLevel)>:
c0014426:	56                   	push   esi
c0014427:	53                   	push   ebx
c0014428:	83 ec 0c             	sub    esp,0xc
c001442b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001442f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014433:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014435:	56                   	push   esi
c0014436:	53                   	push   ebx
c0014437:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001443a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014440:	83 c4 10             	add    esp,0x10
c0014443:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014446:	74 0f                	je     c0014457 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014448:	52                   	push   edx
c0014449:	52                   	push   edx
c001444a:	56                   	push   esi
c001444b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001444e:	e8 d3 ff ff ff       	call   c0014426 <Device::powerSavingAll(PowerSavingLevel)>
c0014453:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014455:	eb e9                	jmp    c0014440 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014457:	58                   	pop    eax
c0014458:	5b                   	pop    ebx
c0014459:	5e                   	pop    esi
c001445a:	c3                   	ret    
c001445b:	90                   	nop

c001445c <Device::setName(char const*)>:
c001445c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014464:	e9 ef c3 fe ff       	jmp    c0000858 <strcpy>
c0014469:	90                   	nop

c001446a <Device::Device(char const*)>:
c001446a:	83 ec 1c             	sub    esp,0x1c
c001446d:	ba d8 b4 02 c0       	mov    edx,0xc002b4d8
c0014472:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014476:	89 10                	mov    DWORD PTR [eax],edx
c0014478:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001447c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014486:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001448a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014494:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014498:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144b0:	83 ec 08             	sub    esp,0x8
c00144b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144bb:	e8 9c ff ff ff       	call   c001445c <Device::setName(char const*)>
c00144c0:	83 c4 10             	add    esp,0x10
c00144c3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00144cb:	83 ec 0c             	sub    esp,0xc
c00144ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144d2:	e8 af b3 ff ff       	call   c000f886 <malloc>
c00144d7:	83 c4 10             	add    esp,0x10
c00144da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00144eb:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00144f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144f5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144fb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014501:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014505:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001450b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014516:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001451d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014521:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001452c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001453a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014548:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014556:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0014560:	90                   	nop
c0014561:	83 c4 1c             	add    esp,0x1c
c0014564:	c3                   	ret    
c0014565:	90                   	nop

c0014566 <Device::getName()>:
c0014566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001456a:	05 d0 00 00 00       	add    eax,0xd0
c001456f:	c3                   	ret    

c0014570 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014570:	83 ec 0c             	sub    esp,0xc
c0014573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014577:	83 ec 08             	sub    esp,0x8
c001457a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001457e:	50                   	push   eax
c001457f:	e8 e6 fe ff ff       	call   c001446a <Device::Device(char const*)>
c0014584:	83 c4 10             	add    esp,0x10
c0014587:	ba 04 b5 02 c0       	mov    edx,0xc002b504
c001458c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014590:	89 10                	mov    DWORD PTR [eax],edx
c0014592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014596:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00145a0:	90                   	nop
c00145a1:	83 c4 0c             	add    esp,0xc
c00145a4:	c3                   	ret    
c00145a5:	90                   	nop

c00145a6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00145a6:	57                   	push   edi
c00145a7:	56                   	push   esi
c00145a8:	53                   	push   ebx
c00145a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145ad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00145b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145b5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00145bb:	75 0c                	jne    c00145c9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00145bd:	52                   	push   edx
c00145be:	52                   	push   edx
c00145bf:	53                   	push   ebx
c00145c0:	56                   	push   esi
c00145c1:	e8 c0 4a 01 00       	call   c0029086 <LinkedList<Device>::addElement(Device*)>
c00145c6:	83 c4 10             	add    esp,0x10
c00145c9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145d2:	74 12                	je     c00145e6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00145d4:	50                   	push   eax
c00145d5:	57                   	push   edi
c00145d6:	56                   	push   esi
c00145d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145da:	e8 c7 ff ff ff       	call   c00145a6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00145df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145e1:	83 c4 10             	add    esp,0x10
c00145e4:	eb e9                	jmp    c00145cf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00145e6:	5b                   	pop    ebx
c00145e7:	5e                   	pop    esi
c00145e8:	5f                   	pop    edi
c00145e9:	c3                   	ret    

c00145ea <getDevicesOfType(DeviceType)>:
c00145ea:	53                   	push   ebx
c00145eb:	83 ec 14             	sub    esp,0x14
c00145ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00145f2:	53                   	push   ebx
c00145f3:	e8 6a 4b 01 00       	call   c0029162 <LinkedList<Device>::LinkedList()>
c00145f8:	83 c4 0c             	add    esp,0xc
c00145fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145ff:	53                   	push   ebx
c0014600:	ff 35 c8 ed 02 c0    	push   DWORD PTR ds:0xc002edc8
c0014606:	e8 9b ff ff ff       	call   c00145a6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001460b:	89 d8                	mov    eax,ebx
c001460d:	83 c4 18             	add    esp,0x18
c0014610:	5b                   	pop    ebx
c0014611:	c2 04 00             	ret    0x4

c0014614 <HardDiskController::HardDiskController(char const*)>:
c0014614:	83 ec 0c             	sub    esp,0xc
c0014617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001461b:	83 ec 08             	sub    esp,0x8
c001461e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014622:	50                   	push   eax
c0014623:	e8 42 fe ff ff       	call   c001446a <Device::Device(char const*)>
c0014628:	83 c4 10             	add    esp,0x10
c001462b:	ba 30 b5 02 c0       	mov    edx,0xc002b530
c0014630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014634:	89 10                	mov    DWORD PTR [eax],edx
c0014636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014644:	90                   	nop
c0014645:	83 c4 0c             	add    esp,0xc
c0014648:	c3                   	ret    
c0014649:	90                   	nop

c001464a <HardDiskController::~HardDiskController()>:
c001464a:	83 ec 0c             	sub    esp,0xc
c001464d:	ba 30 b5 02 c0       	mov    edx,0xc002b530
c0014652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014656:	89 10                	mov    DWORD PTR [eax],edx
c0014658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001465c:	83 ec 0c             	sub    esp,0xc
c001465f:	50                   	push   eax
c0014660:	e8 e7 fa ff ff       	call   c001414c <Device::~Device()>
c0014665:	83 c4 10             	add    esp,0x10
c0014668:	90                   	nop
c0014669:	83 c4 0c             	add    esp,0xc
c001466c:	c3                   	ret    
c001466d:	90                   	nop

c001466e <HardDiskController::~HardDiskController()>:
c001466e:	83 ec 0c             	sub    esp,0xc
c0014671:	83 ec 0c             	sub    esp,0xc
c0014674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014678:	e8 cd ff ff ff       	call   c001464a <HardDiskController::~HardDiskController()>
c001467d:	83 c4 10             	add    esp,0x10
c0014680:	83 ec 08             	sub    esp,0x8
c0014683:	68 58 01 00 00       	push   0x158
c0014688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001468c:	e8 d4 e6 ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0014691:	83 c4 10             	add    esp,0x10
c0014694:	83 c4 0c             	add    esp,0xc
c0014697:	c3                   	ret    

c0014698 <PhysicalDisk::eject()>:
c0014698:	83 ec 18             	sub    esp,0x18
c001469b:	68 54 b5 02 c0       	push   0xc002b554
c00146a0:	e8 a0 e7 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00146a5:	83 c8 ff             	or     eax,0xffffffff
c00146a8:	83 c4 1c             	add    esp,0x1c
c00146ab:	c3                   	ret    

c00146ac <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00146ac:	83 ec 0c             	sub    esp,0xc
c00146af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b3:	83 ec 08             	sub    esp,0x8
c00146b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146ba:	50                   	push   eax
c00146bb:	e8 aa fd ff ff       	call   c001446a <Device::Device(char const*)>
c00146c0:	83 c4 10             	add    esp,0x10
c00146c3:	ba 84 b5 02 c0       	mov    edx,0xc002b584
c00146c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146cc:	89 10                	mov    DWORD PTR [eax],edx
c00146ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00146d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146dd:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00146e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e8:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00146f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00146fa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014704:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001470e:	90                   	nop
c001470f:	83 c4 0c             	add    esp,0xc
c0014712:	c3                   	ret    
c0014713:	90                   	nop

c0014714 <PhysicalDisk::startCache()>:
c0014714:	56                   	push   esi
c0014715:	53                   	push   ebx
c0014716:	83 ec 10             	sub    esp,0x10
c0014719:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001471d:	6a 44                	push   0x44
c001471f:	e8 62 b1 ff ff       	call   c000f886 <malloc>
c0014724:	89 c6                	mov    esi,eax
c0014726:	58                   	pop    eax
c0014727:	5a                   	pop    edx
c0014728:	53                   	push   ebx
c0014729:	56                   	push   esi
c001472a:	e8 cf 28 00 00       	call   c0016ffe <VCache::VCache(PhysicalDisk*)>
c001472f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014735:	83 c4 14             	add    esp,0x14
c0014738:	5b                   	pop    ebx
c0014739:	5e                   	pop    esi
c001473a:	c3                   	ret    
c001473b:	90                   	nop

c001473c <PhysicalDisk::~PhysicalDisk()>:
c001473c:	83 ec 0c             	sub    esp,0xc
c001473f:	ba 84 b5 02 c0       	mov    edx,0xc002b584
c0014744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014748:	89 10                	mov    DWORD PTR [eax],edx
c001474a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474e:	83 ec 0c             	sub    esp,0xc
c0014751:	50                   	push   eax
c0014752:	e8 f5 f9 ff ff       	call   c001414c <Device::~Device()>
c0014757:	83 c4 10             	add    esp,0x10
c001475a:	90                   	nop
c001475b:	83 c4 0c             	add    esp,0xc
c001475e:	c3                   	ret    
c001475f:	90                   	nop

c0014760 <PhysicalDisk::~PhysicalDisk()>:
c0014760:	83 ec 0c             	sub    esp,0xc
c0014763:	83 ec 0c             	sub    esp,0xc
c0014766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001476a:	e8 cd ff ff ff       	call   c001473c <PhysicalDisk::~PhysicalDisk()>
c001476f:	83 c4 10             	add    esp,0x10
c0014772:	83 ec 08             	sub    esp,0x8
c0014775:	68 6c 01 00 00       	push   0x16c
c001477a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001477e:	e8 e2 e5 ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0014783:	83 c4 10             	add    esp,0x10
c0014786:	83 c4 0c             	add    esp,0xc
c0014789:	c3                   	ret    

c001478a <FPU::FPU(char const*)>:
c001478a:	83 ec 0c             	sub    esp,0xc
c001478d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014791:	83 ec 08             	sub    esp,0x8
c0014794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014798:	50                   	push   eax
c0014799:	e8 cc fc ff ff       	call   c001446a <Device::Device(char const*)>
c001479e:	83 c4 10             	add    esp,0x10
c00147a1:	ba c8 b5 02 c0       	mov    edx,0xc002b5c8
c00147a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147aa:	89 10                	mov    DWORD PTR [eax],edx
c00147ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b0:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00147ba:	90                   	nop
c00147bb:	83 c4 0c             	add    esp,0xc
c00147be:	c3                   	ret    
c00147bf:	90                   	nop

c00147c0 <FPU::~FPU()>:
c00147c0:	83 ec 0c             	sub    esp,0xc
c00147c3:	ba c8 b5 02 c0       	mov    edx,0xc002b5c8
c00147c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147cc:	89 10                	mov    DWORD PTR [eax],edx
c00147ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d2:	83 ec 0c             	sub    esp,0xc
c00147d5:	50                   	push   eax
c00147d6:	e8 71 f9 ff ff       	call   c001414c <Device::~Device()>
c00147db:	83 c4 10             	add    esp,0x10
c00147de:	90                   	nop
c00147df:	83 c4 0c             	add    esp,0xc
c00147e2:	c3                   	ret    
c00147e3:	90                   	nop

c00147e4 <FPU::~FPU()>:
c00147e4:	83 ec 0c             	sub    esp,0xc
c00147e7:	83 ec 0c             	sub    esp,0xc
c00147ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147ee:	e8 cd ff ff ff       	call   c00147c0 <FPU::~FPU()>
c00147f3:	83 c4 10             	add    esp,0x10
c00147f6:	83 ec 08             	sub    esp,0x8
c00147f9:	68 58 01 00 00       	push   0x158
c00147fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014802:	e8 5e e5 ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0014807:	83 c4 10             	add    esp,0x10
c001480a:	83 c4 0c             	add    esp,0xc
c001480d:	c3                   	ret    

c001480e <setupFPU()>:
c001480e:	53                   	push   ebx
c001480f:	83 ec 08             	sub    esp,0x8
c0014812:	8b 15 c8 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002edc8
c0014818:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001481f:	74 19                	je     c001483a <setupFPU()+0x2c>
c0014821:	83 ec 0c             	sub    esp,0xc
c0014824:	68 58 01 00 00       	push   0x158
c0014829:	e8 58 b0 ff ff       	call   c000f886 <malloc>
c001482e:	89 c3                	mov    ebx,eax
c0014830:	89 04 24             	mov    DWORD PTR [esp],eax
c0014833:	e8 78 14 01 00       	call   c0025cb0 <AVX::AVX()>
c0014838:	eb 5b                	jmp    c0014895 <setupFPU()+0x87>
c001483a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014840:	84 c0                	test   al,al
c0014842:	79 19                	jns    c001485d <setupFPU()+0x4f>
c0014844:	83 ec 0c             	sub    esp,0xc
c0014847:	68 58 01 00 00       	push   0x158
c001484c:	e8 35 b0 ff ff       	call   c000f886 <malloc>
c0014851:	89 c3                	mov    ebx,eax
c0014853:	89 04 24             	mov    DWORD PTR [esp],eax
c0014856:	e8 7b 15 01 00       	call   c0025dd6 <SSE::SSE()>
c001485b:	eb 38                	jmp    c0014895 <setupFPU()+0x87>
c001485d:	a8 20                	test   al,0x20
c001485f:	74 19                	je     c001487a <setupFPU()+0x6c>
c0014861:	83 ec 0c             	sub    esp,0xc
c0014864:	68 58 01 00 00       	push   0x158
c0014869:	e8 18 b0 ff ff       	call   c000f886 <malloc>
c001486e:	89 c3                	mov    ebx,eax
c0014870:	89 04 24             	mov    DWORD PTR [esp],eax
c0014873:	e8 c8 14 01 00       	call   c0025d40 <MMX::MMX()>
c0014878:	eb 1b                	jmp    c0014895 <setupFPU()+0x87>
c001487a:	a8 10                	test   al,0x10
c001487c:	74 1c                	je     c001489a <setupFPU()+0x8c>
c001487e:	83 ec 0c             	sub    esp,0xc
c0014881:	68 58 01 00 00       	push   0x158
c0014886:	e8 fb af ff ff       	call   c000f886 <malloc>
c001488b:	89 c3                	mov    ebx,eax
c001488d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014890:	e8 cf 15 01 00       	call   c0025e64 <x87::x87()>
c0014895:	83 c4 10             	add    esp,0x10
c0014898:	eb 24                	jmp    c00148be <setupFPU()+0xb0>
c001489a:	83 e0 ef             	and    eax,0xffffffef
c001489d:	83 ec 0c             	sub    esp,0xc
c00148a0:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00148a6:	68 b4 b5 02 c0       	push   0xc002b5b4
c00148ab:	e8 95 e5 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00148b0:	0f 20 c0             	mov    eax,cr0
c00148b3:	83 c8 04             	or     eax,0x4
c00148b6:	0f 22 c0             	mov    cr0,eax
c00148b9:	31 db                	xor    ebx,ebx
c00148bb:	83 c4 10             	add    esp,0x10
c00148be:	89 d8                	mov    eax,ebx
c00148c0:	83 c4 08             	add    esp,0x8
c00148c3:	5b                   	pop    ebx
c00148c4:	c3                   	ret    
c00148c5:	90                   	nop

c00148c6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00148c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148ce:	c1 e0 04             	shl    eax,0x4
c00148d1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00148d5:	8d 50 10             	lea    edx,[eax+0x10]
c00148d8:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00148de:	74 08                	je     c00148e8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00148e0:	83 c0 04             	add    eax,0x4
c00148e3:	39 d0                	cmp    eax,edx
c00148e5:	75 f1                	jne    c00148d8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00148e7:	c3                   	ret    
c00148e8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00148f2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00148fc:	eb e2                	jmp    c00148e0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00148fe <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00148fe:	57                   	push   edi
c00148ff:	31 c0                	xor    eax,eax
c0014901:	56                   	push   esi
c0014902:	53                   	push   ebx
c0014903:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001490b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001490f:	89 da                	mov    edx,ebx
c0014911:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014915:	c1 e2 04             	shl    edx,0x4
c0014918:	01 ca                	add    edx,ecx
c001491a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014922:	74 16                	je     c001493a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014924:	40                   	inc    eax
c0014925:	83 f8 04             	cmp    eax,0x4
c0014928:	75 f0                	jne    c001491a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001492a:	c7 44 24 10 f8 b5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b5f8
c0014932:	5b                   	pop    ebx
c0014933:	5e                   	pop    esi
c0014934:	5f                   	pop    edi
c0014935:	e9 cb 5e 00 00       	jmp    c001a805 <Krnl::panic(char const*)>
c001493a:	8d 04 98             	lea    eax,[eax+ebx*4]
c001493d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014940:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014946:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001494c:	5b                   	pop    ebx
c001494d:	5e                   	pop    esi
c001494e:	5f                   	pop    edi
c001494f:	c3                   	ret    

c0014950 <doubleFault(regs*, void*)>:
c0014950:	55                   	push   ebp
c0014951:	89 e5                	mov    ebp,esp
c0014953:	83 ec 08             	sub    esp,0x8
c0014956:	83 ec 0c             	sub    esp,0xc
c0014959:	68 33 b6 02 c0       	push   0xc002b633
c001495e:	e8 a2 5e 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0014963:	83 c4 10             	add    esp,0x10
c0014966:	90                   	nop
c0014967:	c9                   	leave  
c0014968:	c3                   	ret    
c0014969:	90                   	nop

c001496a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001496a:	56                   	push   esi
c001496b:	53                   	push   ebx
c001496c:	50                   	push   eax
c001496d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014971:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014975:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001497a:	75 35                	jne    c00149b1 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001497c:	8d 43 20             	lea    eax,[ebx+0x20]
c001497f:	31 d2                	xor    edx,edx
c0014981:	89 c1                	mov    ecx,eax
c0014983:	c1 e1 04             	shl    ecx,0x4
c0014986:	01 f1                	add    ecx,esi
c0014988:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014990:	74 3e                	je     c00149d0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014992:	42                   	inc    edx
c0014993:	83 fa 04             	cmp    edx,0x4
c0014996:	75 f0                	jne    c0014988 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014998:	83 ec 0c             	sub    esp,0xc
c001499b:	68 78 b6 02 c0       	push   0xc002b678
c00149a0:	e8 60 5e 00 00       	call   c001a805 <Krnl::panic(char const*)>
c00149a5:	83 c4 10             	add    esp,0x10
c00149a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00149ad:	5a                   	pop    edx
c00149ae:	5b                   	pop    ebx
c00149af:	5e                   	pop    esi
c00149b0:	c3                   	ret    
c00149b1:	83 ec 0c             	sub    esp,0xc
c00149b4:	56                   	push   esi
c00149b5:	e8 ac fb ff ff       	call   c0014566 <Device::getName()>
c00149ba:	83 c4 10             	add    esp,0x10
c00149bd:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149c0:	75 ba                	jne    c001497c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149c2:	83 fb 0f             	cmp    ebx,0xf
c00149c5:	7f 29                	jg     c00149f0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00149c7:	0f b6 9b 20 e0 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1fe0]
c00149ce:	eb ac                	jmp    c001497c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149d0:	8d 04 82             	lea    eax,[edx+eax*4]
c00149d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00149d7:	8d 04 86             	lea    eax,[esi+eax*4]
c00149da:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00149e0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149e4:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00149ea:	89 d8                	mov    eax,ebx
c00149ec:	5a                   	pop    edx
c00149ed:	5b                   	pop    ebx
c00149ee:	5e                   	pop    esi
c00149ef:	c3                   	ret    
c00149f0:	83 ec 0c             	sub    esp,0xc
c00149f3:	68 40 b6 02 c0       	push   0xc002b640
c00149f8:	e8 08 5e 00 00       	call   c001a805 <Krnl::panic(char const*)>
c00149fd:	83 c4 10             	add    esp,0x10
c0014a00:	e9 77 ff ff ff       	jmp    c001497c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a05:	90                   	nop

c0014a06 <InterruptController::clearAllHandlers(int, bool)>:
c0014a06:	56                   	push   esi
c0014a07:	53                   	push   ebx
c0014a08:	52                   	push   edx
c0014a09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a0d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a11:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a16:	75 61                	jne    c0014a79 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a18:	8d 46 20             	lea    eax,[esi+0x20]
c0014a1b:	c1 e6 04             	shl    esi,0x4
c0014a1e:	c1 e0 04             	shl    eax,0x4
c0014a21:	01 de                	add    esi,ebx
c0014a23:	01 d8                	add    eax,ebx
c0014a25:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a2f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a39:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a43:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a4d:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a57:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014a61:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014a6b:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014a75:	58                   	pop    eax
c0014a76:	5b                   	pop    ebx
c0014a77:	5e                   	pop    esi
c0014a78:	c3                   	ret    
c0014a79:	83 ec 0c             	sub    esp,0xc
c0014a7c:	53                   	push   ebx
c0014a7d:	e8 e4 fa ff ff       	call   c0014566 <Device::getName()>
c0014a82:	83 c4 10             	add    esp,0x10
c0014a85:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a88:	75 8e                	jne    c0014a18 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a8a:	83 fe 0f             	cmp    esi,0xf
c0014a8d:	7f 09                	jg     c0014a98 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014a8f:	0f b6 b6 20 e0 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1fe0]
c0014a96:	eb 80                	jmp    c0014a18 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a98:	83 ec 0c             	sub    esp,0xc
c0014a9b:	68 b4 b6 02 c0       	push   0xc002b6b4
c0014aa0:	e8 60 5d 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0014aa5:	83 c4 10             	add    esp,0x10
c0014aa8:	e9 6b ff ff ff       	jmp    c0014a18 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014aad:	90                   	nop

c0014aae <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014aae:	56                   	push   esi
c0014aaf:	53                   	push   ebx
c0014ab0:	52                   	push   edx
c0014ab1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014ab5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014ab9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014abe:	75 3a                	jne    c0014afa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014ac0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ac4:	8d 50 20             	lea    edx,[eax+0x20]
c0014ac7:	c1 e2 04             	shl    edx,0x4
c0014aca:	8d 04 16             	lea    eax,[esi+edx*1]
c0014acd:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014ad1:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014ad7:	74 0b                	je     c0014ae4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014ad9:	83 c0 04             	add    eax,0x4
c0014adc:	39 d0                	cmp    eax,edx
c0014ade:	75 f1                	jne    c0014ad1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014ae0:	58                   	pop    eax
c0014ae1:	5b                   	pop    ebx
c0014ae2:	5e                   	pop    esi
c0014ae3:	c3                   	ret    
c0014ae4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014aee:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014af8:	eb df                	jmp    c0014ad9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014afa:	83 ec 0c             	sub    esp,0xc
c0014afd:	56                   	push   esi
c0014afe:	e8 63 fa ff ff       	call   c0014566 <Device::getName()>
c0014b03:	83 c4 10             	add    esp,0x10
c0014b06:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b09:	75 b5                	jne    c0014ac0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b0b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b10:	7f 11                	jg     c0014b23 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b16:	0f b6 80 20 e0 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1fe0]
c0014b1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b21:	eb 9d                	jmp    c0014ac0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b23:	83 ec 0c             	sub    esp,0xc
c0014b26:	68 b4 b6 02 c0       	push   0xc002b6b4
c0014b2b:	e8 d5 5c 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0014b30:	83 c4 10             	add    esp,0x10
c0014b33:	eb 8b                	jmp    c0014ac0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b35 <nmiHandler(regs*, void*)>:
c0014b35:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0014b3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b3e:	e9 85 a4 ff ff       	jmp    c000efc8 <Computer::handleNMI()>

c0014b43 <int_handler>:
c0014b43:	55                   	push   ebp
c0014b44:	57                   	push   edi
c0014b45:	56                   	push   esi
c0014b46:	53                   	push   ebx
c0014b47:	83 ec 0c             	sub    esp,0xc
c0014b4a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b4e:	80 3d 24 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031924,0x0
c0014b55:	74 0b                	je     c0014b62 <int_handler+0x1f>
c0014b57:	fa                   	cli    
c0014b58:	f4                   	hlt    
c0014b59:	80 3d 24 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031924,0x0
c0014b60:	75 f5                	jne    c0014b57 <int_handler+0x14>
c0014b62:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0014b67:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014b6a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b70:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014b76:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b79:	83 f8 17             	cmp    eax,0x17
c0014b7c:	77 13                	ja     c0014b91 <int_handler+0x4e>
c0014b7e:	83 ec 08             	sub    esp,0x8
c0014b81:	8b 17                	mov    edx,DWORD PTR [edi]
c0014b83:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b86:	0f b6 c0             	movzx  eax,al
c0014b89:	50                   	push   eax
c0014b8a:	57                   	push   edi
c0014b8b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014b8e:	83 c4 10             	add    esp,0x10
c0014b91:	83 c3 15             	add    ebx,0x15
c0014b94:	c1 e3 04             	shl    ebx,0x4
c0014b97:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014b9b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014ba2:	31 db                	xor    ebx,ebx
c0014ba4:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014ba8:	85 c0                	test   eax,eax
c0014baa:	74 13                	je     c0014bbf <int_handler+0x7c>
c0014bac:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014baf:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014bb3:	74 1c                	je     c0014bd1 <int_handler+0x8e>
c0014bb5:	83 ec 08             	sub    esp,0x8
c0014bb8:	52                   	push   edx
c0014bb9:	56                   	push   esi
c0014bba:	ff d0                	call   eax
c0014bbc:	83 c4 10             	add    esp,0x10
c0014bbf:	43                   	inc    ebx
c0014bc0:	83 fb 04             	cmp    ebx,0x4
c0014bc3:	75 df                	jne    c0014ba4 <int_handler+0x61>
c0014bc5:	83 c4 0c             	add    esp,0xc
c0014bc8:	31 c0                	xor    eax,eax
c0014bca:	5b                   	pop    ebx
c0014bcb:	31 d2                	xor    edx,edx
c0014bcd:	5e                   	pop    esi
c0014bce:	5f                   	pop    edi
c0014bcf:	5d                   	pop    ebp
c0014bd0:	c3                   	ret    
c0014bd1:	83 ec 08             	sub    esp,0x8
c0014bd4:	52                   	push   edx
c0014bd5:	56                   	push   esi
c0014bd6:	ff d0                	call   eax
c0014bd8:	83 c4 10             	add    esp,0x10
c0014bdb:	83 c4 0c             	add    esp,0xc
c0014bde:	5b                   	pop    ebx
c0014bdf:	5e                   	pop    esi
c0014be0:	5f                   	pop    edi
c0014be1:	5d                   	pop    ebp
c0014be2:	c3                   	ret    
c0014be3:	90                   	nop

c0014be4 <InterruptController::InterruptController(char const*)>:
c0014be4:	83 ec 1c             	sub    esp,0x1c
c0014be7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014beb:	83 ec 08             	sub    esp,0x8
c0014bee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bf2:	50                   	push   eax
c0014bf3:	e8 72 f8 ff ff       	call   c001446a <Device::Device(char const*)>
c0014bf8:	83 c4 10             	add    esp,0x10
c0014bfb:	ba 74 b9 02 c0       	mov    edx,0xc002b974
c0014c00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c04:	89 10                	mov    DWORD PTR [eax],edx
c0014c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c0a:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c14:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c1c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c24:	7f 5e                	jg     c0014c84 <InterruptController::InterruptController(char const*)+0xa0>
c0014c26:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c2e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c33:	7f 49                	jg     c0014c7e <InterruptController::InterruptController(char const*)+0x9a>
c0014c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c3d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c48:	01 ca                	add    edx,ecx
c0014c4a:	83 c2 54             	add    edx,0x54
c0014c4d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c5d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c68:	01 ca                	add    edx,ecx
c0014c6a:	81 c2 54 04 00 00    	add    edx,0x454
c0014c70:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c78:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014c7c:	eb b0                	jmp    c0014c2e <InterruptController::InterruptController(char const*)+0x4a>
c0014c7e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014c82:	eb 98                	jmp    c0014c1c <InterruptController::InterruptController(char const*)+0x38>
c0014c84:	90                   	nop
c0014c85:	83 c4 1c             	add    esp,0x1c
c0014c88:	c3                   	ret    
c0014c89:	90                   	nop

c0014c8a <InterruptController::~InterruptController()>:
c0014c8a:	83 ec 0c             	sub    esp,0xc
c0014c8d:	ba 74 b9 02 c0       	mov    edx,0xc002b974
c0014c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c96:	89 10                	mov    DWORD PTR [eax],edx
c0014c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c9c:	83 ec 0c             	sub    esp,0xc
c0014c9f:	50                   	push   eax
c0014ca0:	e8 a7 f4 ff ff       	call   c001414c <Device::~Device()>
c0014ca5:	83 c4 10             	add    esp,0x10
c0014ca8:	90                   	nop
c0014ca9:	83 c4 0c             	add    esp,0xc
c0014cac:	c3                   	ret    
c0014cad:	90                   	nop

c0014cae <InterruptController::~InterruptController()>:
c0014cae:	83 ec 0c             	sub    esp,0xc
c0014cb1:	83 ec 0c             	sub    esp,0xc
c0014cb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cb8:	e8 cd ff ff ff       	call   c0014c8a <InterruptController::~InterruptController()>
c0014cbd:	83 c4 10             	add    esp,0x10
c0014cc0:	83 ec 08             	sub    esp,0x8
c0014cc3:	68 58 21 00 00       	push   0x2158
c0014cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ccc:	e8 94 e0 ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0014cd1:	83 c4 10             	add    esp,0x10
c0014cd4:	83 c4 0c             	add    esp,0xc
c0014cd7:	c3                   	ret    

c0014cd8 <displayDebugInfo(regs*)>:
c0014cd8:	55                   	push   ebp
c0014cd9:	57                   	push   edi
c0014cda:	56                   	push   esi
c0014cdb:	53                   	push   ebx
c0014cdc:	83 ec 24             	sub    esp,0x24
c0014cdf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014ce3:	0f 20 c2             	mov    edx,cr0
c0014ce6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014cea:	0f 20 d7             	mov    edi,cr2
c0014ced:	0f 20 de             	mov    esi,cr3
c0014cf0:	0f 20 e5             	mov    ebp,cr4
c0014cf3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014cf6:	68 ee b6 02 c0       	push   0xc002b6ee
c0014cfb:	e8 45 e1 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0014d00:	59                   	pop    ecx
c0014d01:	58                   	pop    eax
c0014d02:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d05:	68 f9 b6 02 c0       	push   0xc002b6f9
c0014d0a:	e8 36 e1 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0014d0f:	58                   	pop    eax
c0014d10:	5a                   	pop    edx
c0014d11:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d14:	68 04 b7 02 c0       	push   0xc002b704
c0014d19:	e8 27 e1 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0014d1e:	59                   	pop    ecx
c0014d1f:	58                   	pop    eax
c0014d20:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d23:	68 0f b7 02 c0       	push   0xc002b70f
c0014d28:	e8 18 e1 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0014d2d:	58                   	pop    eax
c0014d2e:	5a                   	pop    edx
c0014d2f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d32:	68 1a b7 02 c0       	push   0xc002b71a
c0014d37:	e8 09 e1 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0014d3c:	59                   	pop    ecx
c0014d3d:	58                   	pop    eax
c0014d3e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d41:	68 25 b7 02 c0       	push   0xc002b725
c0014d46:	e8 fa e0 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0014d4b:	58                   	pop    eax
c0014d4c:	5a                   	pop    edx
c0014d4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d50:	68 30 b7 02 c0       	push   0xc002b730
c0014d55:	e8 eb e0 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0014d5a:	59                   	pop    ecx
c0014d5b:	58                   	pop    eax
c0014d5c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014d5f:	68 3b b7 02 c0       	push   0xc002b73b
c0014d64:	e8 dc e0 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0014d69:	58                   	pop    eax
c0014d6a:	5a                   	pop    edx
c0014d6b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014d6e:	68 46 b7 02 c0       	push   0xc002b746
c0014d73:	e8 cd e0 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0014d78:	59                   	pop    ecx
c0014d79:	58                   	pop    eax
c0014d7a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d7d:	68 55 b7 02 c0       	push   0xc002b755
c0014d82:	e8 be e0 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0014d87:	58                   	pop    eax
c0014d88:	5a                   	pop    edx
c0014d89:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014d8c:	68 60 b7 02 c0       	push   0xc002b760
c0014d91:	e8 af e0 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0014d96:	59                   	pop    ecx
c0014d97:	58                   	pop    eax
c0014d98:	57                   	push   edi
c0014d99:	68 6b b7 02 c0       	push   0xc002b76b
c0014d9e:	e8 a2 e0 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0014da3:	58                   	pop    eax
c0014da4:	5a                   	pop    edx
c0014da5:	56                   	push   esi
c0014da6:	68 76 b7 02 c0       	push   0xc002b776
c0014dab:	e8 95 e0 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0014db0:	59                   	pop    ecx
c0014db1:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014db6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dbc:	e8 9f be ff ff       	call   c0010c60 <setActiveTerminal(VgaText*)>
c0014dc1:	58                   	pop    eax
c0014dc2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014dc5:	5a                   	pop    edx
c0014dc6:	c1 e0 05             	shl    eax,0x5
c0014dc9:	05 80 dd 02 c0       	add    eax,0xc002dd80
c0014dce:	50                   	push   eax
c0014dcf:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014dd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dda:	e8 0d c2 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0014ddf:	59                   	pop    ecx
c0014de0:	58                   	pop    eax
c0014de1:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014de6:	68 81 b7 02 c0       	push   0xc002b781
c0014deb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014df1:	e8 f6 c1 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0014df6:	58                   	pop    eax
c0014df7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dfc:	5a                   	pop    edx
c0014dfd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e00:	83 c0 0c             	add    eax,0xc
c0014e03:	50                   	push   eax
c0014e04:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014e09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e0f:	e8 d8 c1 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0014e14:	59                   	pop    ecx
c0014e15:	58                   	pop    eax
c0014e16:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014e1b:	68 8a b7 02 c0       	push   0xc002b78a
c0014e20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e26:	e8 c1 c1 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0014e2b:	58                   	pop    eax
c0014e2c:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014e31:	5a                   	pop    edx
c0014e32:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e3b:	e8 d2 c1 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c0014e40:	59                   	pop    ecx
c0014e41:	58                   	pop    eax
c0014e42:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014e47:	68 92 b7 02 c0       	push   0xc002b792
c0014e4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e52:	e8 95 c1 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0014e57:	58                   	pop    eax
c0014e58:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014e5d:	5a                   	pop    edx
c0014e5e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e67:	e8 a6 c1 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c0014e6c:	59                   	pop    ecx
c0014e6d:	58                   	pop    eax
c0014e6e:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014e73:	68 9a b7 02 c0       	push   0xc002b79a
c0014e78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e7e:	e8 69 c1 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0014e83:	58                   	pop    eax
c0014e84:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014e89:	5a                   	pop    edx
c0014e8a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e93:	e8 7a c1 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c0014e98:	59                   	pop    ecx
c0014e99:	58                   	pop    eax
c0014e9a:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014e9f:	68 a2 b7 02 c0       	push   0xc002b7a2
c0014ea4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eaa:	e8 3d c1 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0014eaf:	58                   	pop    eax
c0014eb0:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014eb5:	5a                   	pop    edx
c0014eb6:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014eb9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ebf:	e8 4e c1 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c0014ec4:	59                   	pop    ecx
c0014ec5:	58                   	pop    eax
c0014ec6:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014ecb:	68 aa b7 02 c0       	push   0xc002b7aa
c0014ed0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed6:	e8 11 c1 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0014edb:	58                   	pop    eax
c0014edc:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014ee1:	5a                   	pop    edx
c0014ee2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ee5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eeb:	e8 22 c1 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c0014ef0:	59                   	pop    ecx
c0014ef1:	58                   	pop    eax
c0014ef2:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014ef7:	68 b2 b7 02 c0       	push   0xc002b7b2
c0014efc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f02:	e8 e5 c0 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0014f07:	58                   	pop    eax
c0014f08:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014f0d:	5a                   	pop    edx
c0014f0e:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f17:	e8 f6 c0 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c0014f1c:	59                   	pop    ecx
c0014f1d:	58                   	pop    eax
c0014f1e:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014f23:	68 ba b7 02 c0       	push   0xc002b7ba
c0014f28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2e:	e8 b9 c0 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0014f33:	58                   	pop    eax
c0014f34:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014f39:	5a                   	pop    edx
c0014f3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f3e:	52                   	push   edx
c0014f3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f45:	e8 c8 c0 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c0014f4a:	59                   	pop    ecx
c0014f4b:	58                   	pop    eax
c0014f4c:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014f51:	68 c3 b7 02 c0       	push   0xc002b7c3
c0014f56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5c:	e8 8b c0 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0014f61:	58                   	pop    eax
c0014f62:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014f67:	5a                   	pop    edx
c0014f68:	57                   	push   edi
c0014f69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6f:	e8 9e c0 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c0014f74:	59                   	pop    ecx
c0014f75:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014f7a:	5f                   	pop    edi
c0014f7b:	68 cb b7 02 c0       	push   0xc002b7cb
c0014f80:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f86:	e8 61 c0 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0014f8b:	58                   	pop    eax
c0014f8c:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014f91:	5a                   	pop    edx
c0014f92:	56                   	push   esi
c0014f93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f99:	e8 74 c0 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c0014f9e:	59                   	pop    ecx
c0014f9f:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014fa4:	5e                   	pop    esi
c0014fa5:	68 d3 b7 02 c0       	push   0xc002b7d3
c0014faa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb0:	e8 37 c0 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0014fb5:	5f                   	pop    edi
c0014fb6:	58                   	pop    eax
c0014fb7:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014fbc:	55                   	push   ebp
c0014fbd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc3:	e8 4a c0 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c0014fc8:	58                   	pop    eax
c0014fc9:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014fce:	5a                   	pop    edx
c0014fcf:	68 db b7 02 c0       	push   0xc002b7db
c0014fd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fda:	e8 0d c0 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0014fdf:	0f 21 c0             	mov    eax,db0
c0014fe2:	59                   	pop    ecx
c0014fe3:	5e                   	pop    esi
c0014fe4:	50                   	push   eax
c0014fe5:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014fea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff0:	e8 1d c0 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c0014ff5:	5f                   	pop    edi
c0014ff6:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0014ffb:	5d                   	pop    ebp
c0014ffc:	68 e4 b7 02 c0       	push   0xc002b7e4
c0015001:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015007:	e8 e0 bf ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001500c:	0f 21 c8             	mov    eax,db1
c001500f:	5a                   	pop    edx
c0015010:	59                   	pop    ecx
c0015011:	50                   	push   eax
c0015012:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0015017:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501d:	e8 f0 bf ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c0015022:	5e                   	pop    esi
c0015023:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0015028:	5f                   	pop    edi
c0015029:	68 ec b7 02 c0       	push   0xc002b7ec
c001502e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015034:	e8 b3 bf ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0015039:	0f 21 d0             	mov    eax,db2
c001503c:	5d                   	pop    ebp
c001503d:	5a                   	pop    edx
c001503e:	50                   	push   eax
c001503f:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0015044:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001504a:	e8 c3 bf ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c001504f:	59                   	pop    ecx
c0015050:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0015055:	5e                   	pop    esi
c0015056:	68 f4 b7 02 c0       	push   0xc002b7f4
c001505b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015061:	e8 86 bf ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0015066:	0f 21 d8             	mov    eax,db3
c0015069:	5f                   	pop    edi
c001506a:	5d                   	pop    ebp
c001506b:	50                   	push   eax
c001506c:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0015071:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015077:	e8 96 bf ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c001507c:	58                   	pop    eax
c001507d:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0015082:	5a                   	pop    edx
c0015083:	68 fc b7 02 c0       	push   0xc002b7fc
c0015088:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001508e:	e8 59 bf ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0015093:	0f 21 f0             	mov    eax,db6
c0015096:	59                   	pop    ecx
c0015097:	5e                   	pop    esi
c0015098:	50                   	push   eax
c0015099:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001509e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a4:	e8 69 bf ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c00150a9:	5f                   	pop    edi
c00150aa:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c00150af:	5d                   	pop    ebp
c00150b0:	68 04 b8 02 c0       	push   0xc002b804
c00150b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150bb:	e8 2c bf ff ff       	call   c0010fec <VgaText::puts(char const*)>
c00150c0:	0f 21 f8             	mov    eax,db7
c00150c3:	5a                   	pop    edx
c00150c4:	59                   	pop    ecx
c00150c5:	50                   	push   eax
c00150c6:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c00150cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d1:	e8 3c bf ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c00150d6:	5e                   	pop    esi
c00150d7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150da:	e8 ee 88 00 00       	call   c001d9cd <Thr::getDriverNameFromAddress(unsigned long)>
c00150df:	83 c4 10             	add    esp,0x10
c00150e2:	85 c0                	test   eax,eax
c00150e4:	74 7d                	je     c0015163 <displayDebugInfo(regs*)+0x48b>
c00150e6:	89 c6                	mov    esi,eax
c00150e8:	50                   	push   eax
c00150e9:	50                   	push   eax
c00150ea:	56                   	push   esi
c00150eb:	68 0c b8 02 c0       	push   0xc002b80c
c00150f0:	e8 50 dd ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00150f5:	5a                   	pop    edx
c00150f6:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c00150fb:	59                   	pop    ecx
c00150fc:	68 1a b8 02 c0       	push   0xc002b81a
c0015101:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015107:	e8 e0 be ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001510c:	5f                   	pop    edi
c001510d:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0015112:	5d                   	pop    ebp
c0015113:	56                   	push   esi
c0015114:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001511a:	e8 cd be ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001511f:	58                   	pop    eax
c0015120:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0015125:	5a                   	pop    edx
c0015126:	68 26 b8 02 c0       	push   0xc002b826
c001512b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015131:	e8 b6 be ff ff       	call   c0010fec <VgaText::puts(char const*)>
c0015136:	59                   	pop    ecx
c0015137:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001513c:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015142:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015145:	e8 ba 88 00 00       	call   c001da04 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001514a:	5b                   	pop    ebx
c001514b:	5d                   	pop    ebp
c001514c:	50                   	push   eax
c001514d:	57                   	push   edi
c001514e:	e8 bf be ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c0015153:	58                   	pop    eax
c0015154:	5a                   	pop    edx
c0015155:	56                   	push   esi
c0015156:	68 32 b8 02 c0       	push   0xc002b832
c001515b:	e8 e5 dc ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0015160:	83 c4 10             	add    esp,0x10
c0015163:	fa                   	cli    
c0015164:	f4                   	hlt    
c0015165:	eb fe                	jmp    c0015165 <displayDebugInfo(regs*)+0x48d>

c0015167 <x87EmulHandler(regs*, void*)>:
c0015167:	83 ec 0c             	sub    esp,0xc
c001516a:	0f 20 c2             	mov    edx,cr0
c001516d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015172:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0015176:	75 4b                	jne    c00151c3 <x87EmulHandler(regs*, void*)+0x5c>
c0015178:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c001517d:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0015183:	85 c0                	test   eax,eax
c0015185:	74 05                	je     c001518c <x87EmulHandler(regs*, void*)+0x25>
c0015187:	83 e2 08             	and    edx,0x8
c001518a:	75 17                	jne    c00151a3 <x87EmulHandler(regs*, void*)+0x3c>
c001518c:	83 ec 0c             	sub    esp,0xc
c001518f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015193:	e8 b3 ae 00 00       	call   c002004b <Vm::x87Handler(regs*)>
c0015198:	83 c4 10             	add    esp,0x10
c001519b:	84 c0                	test   al,al
c001519d:	74 24                	je     c00151c3 <x87EmulHandler(regs*, void*)+0x5c>
c001519f:	83 c4 0c             	add    esp,0xc
c00151a2:	c3                   	ret    
c00151a3:	83 ec 0c             	sub    esp,0xc
c00151a6:	68 58 b8 02 c0       	push   0xc002b858
c00151ab:	e8 95 dc ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00151b0:	0f 06                	clts   
c00151b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151b7:	83 c4 10             	add    esp,0x10
c00151ba:	a3 68 ef 02 c0       	mov    ds:0xc002ef68,eax
c00151bf:	83 c4 0c             	add    esp,0xc
c00151c2:	c3                   	ret    
c00151c3:	83 ec 0c             	sub    esp,0xc
c00151c6:	68 42 b8 02 c0       	push   0xc002b842
c00151cb:	e8 75 dc ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00151d0:	5a                   	pop    edx
c00151d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151d5:	e8 fe fa ff ff       	call   c0014cd8 <displayDebugInfo(regs*)>

c00151da <gpFault(regs*, void*)>:
c00151da:	53                   	push   ebx
c00151db:	83 ec 14             	sub    esp,0x14
c00151de:	c7 05 64 ef 02 c0 c8 f3 01 c0 	mov    DWORD PTR ds:0xc002ef64,0xc001f3c8
c00151e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00151ec:	53                   	push   ebx
c00151ed:	e8 d6 a1 00 00       	call   c001f3c8 <Vm::faultHandler(regs*)>
c00151f2:	83 c4 10             	add    esp,0x10
c00151f5:	84 c0                	test   al,al
c00151f7:	74 05                	je     c00151fe <gpFault(regs*, void*)+0x24>
c00151f9:	83 c4 08             	add    esp,0x8
c00151fc:	5b                   	pop    ebx
c00151fd:	c3                   	ret    
c00151fe:	83 ec 0c             	sub    esp,0xc
c0015201:	68 65 b8 02 c0       	push   0xc002b865
c0015206:	e8 3a dc ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001520b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001520e:	e8 c5 fa ff ff       	call   c0014cd8 <displayDebugInfo(regs*)>

c0015213 <pgFault(regs*, void*)>:
c0015213:	83 ec 14             	sub    esp,0x14
c0015216:	0f 20 d0             	mov    eax,cr2
c0015219:	50                   	push   eax
c001521a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001521f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015222:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015228:	e8 35 d8 ff ff       	call   c0012a62 <VAS::tryLoadBackOffDisk(unsigned long)>
c001522d:	83 c4 10             	add    esp,0x10
c0015230:	84 c0                	test   al,al
c0015232:	74 04                	je     c0015238 <pgFault(regs*, void*)+0x25>
c0015234:	83 c4 0c             	add    esp,0xc
c0015237:	c3                   	ret    
c0015238:	83 ec 0c             	sub    esp,0xc
c001523b:	68 80 b8 02 c0       	push   0xc002b880
c0015240:	e8 00 dc ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0015245:	58                   	pop    eax
c0015246:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001524a:	e8 89 fa ff ff       	call   c0014cd8 <displayDebugInfo(regs*)>

c001524f <otherISRHandler(regs*, void*)>:
c001524f:	53                   	push   ebx
c0015250:	83 ec 0c             	sub    esp,0xc
c0015253:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015257:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001525a:	50                   	push   eax
c001525b:	50                   	push   eax
c001525c:	68 8d b8 02 c0       	push   0xc002b88d
c0015261:	e8 df db ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0015266:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015269:	e8 6a fa ff ff       	call   c0014cd8 <displayDebugInfo(regs*)>

c001526e <opcodeFault(regs*, void*)>:
c001526e:	55                   	push   ebp
c001526f:	89 e5                	mov    ebp,esp
c0015271:	56                   	push   esi
c0015272:	53                   	push   ebx
c0015273:	83 ec 40             	sub    esp,0x40
c0015276:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c001527b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015281:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015287:	84 c0                	test   al,al
c0015289:	74 24                	je     c00152af <opcodeFault(regs*, void*)+0x41>
c001528b:	83 ec 0c             	sub    esp,0xc
c001528e:	68 ac b8 02 c0       	push   0xc002b8ac
c0015293:	e8 ad db ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0015298:	83 c4 10             	add    esp,0x10
c001529b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001529e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152a1:	8d 50 19             	lea    edx,[eax+0x19]
c00152a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152aa:	e9 d5 05 00 00       	jmp    c0015884 <opcodeFault(regs*, void*)+0x616>
c00152af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152b8:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00152bc:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00152c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152c6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152cc:	8a 00                	mov    al,BYTE PTR [eax]
c00152ce:	3c f0                	cmp    al,0xf0
c00152d0:	75 17                	jne    c00152e9 <opcodeFault(regs*, void*)+0x7b>
c00152d2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152db:	8d 50 01             	lea    edx,[eax+0x1]
c00152de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152e4:	e9 da 00 00 00       	jmp    c00153c3 <opcodeFault(regs*, void*)+0x155>
c00152e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ec:	8a 00                	mov    al,BYTE PTR [eax]
c00152ee:	3c f2                	cmp    al,0xf2
c00152f0:	74 09                	je     c00152fb <opcodeFault(regs*, void*)+0x8d>
c00152f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f5:	8a 00                	mov    al,BYTE PTR [eax]
c00152f7:	3c f3                	cmp    al,0xf3
c00152f9:	75 1b                	jne    c0015316 <opcodeFault(regs*, void*)+0xa8>
c00152fb:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152ff:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015305:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015308:	8d 50 01             	lea    edx,[eax+0x1]
c001530b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015311:	e9 ad 00 00 00       	jmp    c00153c3 <opcodeFault(regs*, void*)+0x155>
c0015316:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015319:	8a 00                	mov    al,BYTE PTR [eax]
c001531b:	3c 66                	cmp    al,0x66
c001531d:	75 1f                	jne    c001533e <opcodeFault(regs*, void*)+0xd0>
c001531f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015323:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015327:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001532a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015330:	8d 50 01             	lea    edx,[eax+0x1]
c0015333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015336:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015339:	e9 85 00 00 00       	jmp    c00153c3 <opcodeFault(regs*, void*)+0x155>
c001533e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015341:	8a 00                	mov    al,BYTE PTR [eax]
c0015343:	3c 67                	cmp    al,0x67
c0015345:	75 18                	jne    c001535f <opcodeFault(regs*, void*)+0xf1>
c0015347:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001534b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001534e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015351:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015354:	8d 50 01             	lea    edx,[eax+0x1]
c0015357:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001535d:	eb 64                	jmp    c00153c3 <opcodeFault(regs*, void*)+0x155>
c001535f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015362:	8a 00                	mov    al,BYTE PTR [eax]
c0015364:	3c 2e                	cmp    al,0x2e
c0015366:	74 09                	je     c0015371 <opcodeFault(regs*, void*)+0x103>
c0015368:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536b:	8a 00                	mov    al,BYTE PTR [eax]
c001536d:	3c 3e                	cmp    al,0x3e
c001536f:	75 18                	jne    c0015389 <opcodeFault(regs*, void*)+0x11b>
c0015371:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015375:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015378:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001537e:	8d 50 01             	lea    edx,[eax+0x1]
c0015381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015384:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015387:	eb 3a                	jmp    c00153c3 <opcodeFault(regs*, void*)+0x155>
c0015389:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538c:	8a 00                	mov    al,BYTE PTR [eax]
c001538e:	3c 36                	cmp    al,0x36
c0015390:	74 1b                	je     c00153ad <opcodeFault(regs*, void*)+0x13f>
c0015392:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015395:	8a 00                	mov    al,BYTE PTR [eax]
c0015397:	3c 26                	cmp    al,0x26
c0015399:	74 12                	je     c00153ad <opcodeFault(regs*, void*)+0x13f>
c001539b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539e:	8a 00                	mov    al,BYTE PTR [eax]
c00153a0:	3c 64                	cmp    al,0x64
c00153a2:	74 09                	je     c00153ad <opcodeFault(regs*, void*)+0x13f>
c00153a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a7:	8a 00                	mov    al,BYTE PTR [eax]
c00153a9:	3c 65                	cmp    al,0x65
c00153ab:	75 16                	jne    c00153c3 <opcodeFault(regs*, void*)+0x155>
c00153ad:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153b1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153ba:	8d 50 01             	lea    edx,[eax+0x1]
c00153bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c6:	8a 00                	mov    al,BYTE PTR [eax]
c00153c8:	3c 0f                	cmp    al,0xf
c00153ca:	0f 85 ad 00 00 00    	jne    c001547d <opcodeFault(regs*, void*)+0x20f>
c00153d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d3:	40                   	inc    eax
c00153d4:	8a 00                	mov    al,BYTE PTR [eax]
c00153d6:	3c c2                	cmp    al,0xc2
c00153d8:	74 0e                	je     c00153e8 <opcodeFault(regs*, void*)+0x17a>
c00153da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153dd:	40                   	inc    eax
c00153de:	8a 00                	mov    al,BYTE PTR [eax]
c00153e0:	3c c3                	cmp    al,0xc3
c00153e2:	0f 85 95 00 00 00    	jne    c001547d <opcodeFault(regs*, void*)+0x20f>
c00153e8:	83 ec 0c             	sub    esp,0xc
c00153eb:	68 cf b8 02 c0       	push   0xc002b8cf
c00153f0:	e8 50 da ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00153f5:	83 c4 10             	add    esp,0x10
c00153f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153fe:	8d 50 01             	lea    edx,[eax+0x1]
c0015401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015404:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015407:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001540a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540d:	8a 00                	mov    al,BYTE PTR [eax]
c001540f:	8d 50 fe             	lea    edx,[eax-0x2]
c0015412:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015415:	88 10                	mov    BYTE PTR [eax],dl
c0015417:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001541a:	50                   	push   eax
c001541b:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001541e:	50                   	push   eax
c001541f:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015422:	50                   	push   eax
c0015423:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015426:	e8 a1 4a 00 00       	call   c0019ecc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001542b:	83 c4 10             	add    esp,0x10
c001542e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015431:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015434:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015437:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001543a:	01 d0                	add    eax,edx
c001543c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001543f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015442:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015445:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015448:	48                   	dec    eax
c0015449:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001544c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544f:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015452:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015458:	83 ec 04             	sub    esp,0x4
c001545b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001545e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015461:	50                   	push   eax
c0015462:	e8 4d ad fe ff       	call   c00001b4 <voodooXADD>
c0015467:	83 c4 10             	add    esp,0x10
c001546a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001546d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015470:	01 c2                	add    edx,eax
c0015472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015475:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015478:	e9 07 04 00 00       	jmp    c0015884 <opcodeFault(regs*, void*)+0x616>
c001547d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015480:	8a 00                	mov    al,BYTE PTR [eax]
c0015482:	3c 0f                	cmp    al,0xf
c0015484:	0f 85 8b 01 00 00    	jne    c0015615 <opcodeFault(regs*, void*)+0x3a7>
c001548a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548d:	40                   	inc    eax
c001548e:	8a 00                	mov    al,BYTE PTR [eax]
c0015490:	3c c7                	cmp    al,0xc7
c0015492:	0f 86 7d 01 00 00    	jbe    c0015615 <opcodeFault(regs*, void*)+0x3a7>
c0015498:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549b:	40                   	inc    eax
c001549c:	8a 00                	mov    al,BYTE PTR [eax]
c001549e:	3c cf                	cmp    al,0xcf
c00154a0:	0f 87 6f 01 00 00    	ja     c0015615 <opcodeFault(regs*, void*)+0x3a7>
c00154a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a9:	40                   	inc    eax
c00154aa:	8a 00                	mov    al,BYTE PTR [eax]
c00154ac:	83 c0 38             	add    eax,0x38
c00154af:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00154b2:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154b6:	75 0b                	jne    c00154c3 <opcodeFault(regs*, void*)+0x255>
c00154b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00154be:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154c1:	eb 75                	jmp    c0015538 <opcodeFault(regs*, void*)+0x2ca>
c00154c3:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154c7:	75 0b                	jne    c00154d4 <opcodeFault(regs*, void*)+0x266>
c00154c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00154cf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154d2:	eb 64                	jmp    c0015538 <opcodeFault(regs*, void*)+0x2ca>
c00154d4:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154d8:	75 0b                	jne    c00154e5 <opcodeFault(regs*, void*)+0x277>
c00154da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154dd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00154e0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154e3:	eb 53                	jmp    c0015538 <opcodeFault(regs*, void*)+0x2ca>
c00154e5:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154e9:	75 0b                	jne    c00154f6 <opcodeFault(regs*, void*)+0x288>
c00154eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ee:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154f4:	eb 42                	jmp    c0015538 <opcodeFault(regs*, void*)+0x2ca>
c00154f6:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00154fa:	75 0b                	jne    c0015507 <opcodeFault(regs*, void*)+0x299>
c00154fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ff:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015502:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015505:	eb 31                	jmp    c0015538 <opcodeFault(regs*, void*)+0x2ca>
c0015507:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001550b:	75 0b                	jne    c0015518 <opcodeFault(regs*, void*)+0x2aa>
c001550d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015510:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015513:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015516:	eb 20                	jmp    c0015538 <opcodeFault(regs*, void*)+0x2ca>
c0015518:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001551c:	75 0b                	jne    c0015529 <opcodeFault(regs*, void*)+0x2bb>
c001551e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015521:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015524:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015527:	eb 0f                	jmp    c0015538 <opcodeFault(regs*, void*)+0x2ca>
c0015529:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001552d:	75 09                	jne    c0015538 <opcodeFault(regs*, void*)+0x2ca>
c001552f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015532:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015535:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015538:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001553c:	74 10                	je     c001554e <opcodeFault(regs*, void*)+0x2e0>
c001553e:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015545:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001554c:	eb 2d                	jmp    c001557b <opcodeFault(regs*, void*)+0x30d>
c001554e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015551:	c1 e0 18             	shl    eax,0x18
c0015554:	89 c2                	mov    edx,eax
c0015556:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015559:	c1 e0 08             	shl    eax,0x8
c001555c:	25 00 00 ff 00       	and    eax,0xff0000
c0015561:	09 c2                	or     edx,eax
c0015563:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015566:	c1 e8 08             	shr    eax,0x8
c0015569:	25 00 ff 00 00       	and    eax,0xff00
c001556e:	09 c2                	or     edx,eax
c0015570:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015573:	c1 e8 18             	shr    eax,0x18
c0015576:	09 d0                	or     eax,edx
c0015578:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001557b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001557f:	75 0b                	jne    c001558c <opcodeFault(regs*, void*)+0x31e>
c0015581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015584:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015587:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001558a:	eb 75                	jmp    c0015601 <opcodeFault(regs*, void*)+0x393>
c001558c:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015590:	75 0b                	jne    c001559d <opcodeFault(regs*, void*)+0x32f>
c0015592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015595:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015598:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001559b:	eb 64                	jmp    c0015601 <opcodeFault(regs*, void*)+0x393>
c001559d:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155a1:	75 0b                	jne    c00155ae <opcodeFault(regs*, void*)+0x340>
c00155a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155a9:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00155ac:	eb 53                	jmp    c0015601 <opcodeFault(regs*, void*)+0x393>
c00155ae:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155b2:	75 0b                	jne    c00155bf <opcodeFault(regs*, void*)+0x351>
c00155b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155ba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00155bd:	eb 42                	jmp    c0015601 <opcodeFault(regs*, void*)+0x393>
c00155bf:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155c3:	75 0b                	jne    c00155d0 <opcodeFault(regs*, void*)+0x362>
c00155c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155cb:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00155ce:	eb 31                	jmp    c0015601 <opcodeFault(regs*, void*)+0x393>
c00155d0:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155d4:	75 0b                	jne    c00155e1 <opcodeFault(regs*, void*)+0x373>
c00155d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155dc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155df:	eb 20                	jmp    c0015601 <opcodeFault(regs*, void*)+0x393>
c00155e1:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155e5:	75 0b                	jne    c00155f2 <opcodeFault(regs*, void*)+0x384>
c00155e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ea:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155ed:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155f0:	eb 0f                	jmp    c0015601 <opcodeFault(regs*, void*)+0x393>
c00155f2:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155f6:	75 09                	jne    c0015601 <opcodeFault(regs*, void*)+0x393>
c00155f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155fe:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015604:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015607:	8d 50 02             	lea    edx,[eax+0x2]
c001560a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015610:	e9 6f 02 00 00       	jmp    c0015884 <opcodeFault(regs*, void*)+0x616>
c0015615:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015618:	8a 00                	mov    al,BYTE PTR [eax]
c001561a:	3c 0f                	cmp    al,0xf
c001561c:	0f 85 8d 01 00 00    	jne    c00157af <opcodeFault(regs*, void*)+0x541>
c0015622:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015625:	40                   	inc    eax
c0015626:	8a 00                	mov    al,BYTE PTR [eax]
c0015628:	3c c7                	cmp    al,0xc7
c001562a:	0f 85 7f 01 00 00    	jne    c00157af <opcodeFault(regs*, void*)+0x541>
c0015630:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015636:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015639:	8d 50 01             	lea    edx,[eax+0x1]
c001563c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015642:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015645:	50                   	push   eax
c0015646:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015649:	50                   	push   eax
c001564a:	8d 45 bc             	lea    eax,[ebp-0x44]
c001564d:	50                   	push   eax
c001564e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015651:	e8 76 48 00 00       	call   c0019ecc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015656:	83 c4 10             	add    esp,0x10
c0015659:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001565c:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001565f:	83 f0 01             	xor    eax,0x1
c0015662:	84 c0                	test   al,al
c0015664:	0f 84 45 01 00 00    	je     c00157af <opcodeFault(regs*, void*)+0x541>
c001566a:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001566d:	3c 01                	cmp    al,0x1
c001566f:	0f 85 3a 01 00 00    	jne    c00157af <opcodeFault(regs*, void*)+0x541>
c0015675:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015678:	83 f0 01             	xor    eax,0x1
c001567b:	84 c0                	test   al,al
c001567d:	0f 84 2c 01 00 00    	je     c00157af <opcodeFault(regs*, void*)+0x541>
c0015683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015686:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015689:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001568c:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015693:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015696:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015699:	89 c2                	mov    edx,eax
c001569b:	b8 00 00 00 00       	mov    eax,0x0
c00156a0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156a3:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00156ac:	ba 00 00 00 00       	mov    edx,0x0
c00156b1:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00156b4:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00156b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ba:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00156bd:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156c0:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156c7:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156ca:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156cd:	89 c2                	mov    edx,eax
c00156cf:	b8 00 00 00 00       	mov    eax,0x0
c00156d4:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156d7:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00156da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156e0:	ba 00 00 00 00       	mov    edx,0x0
c00156e5:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00156e8:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00156eb:	fa                   	cli    
c00156ec:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c00156f1:	40                   	inc    eax
c00156f2:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c00156f7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00156fa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00156fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ff:	89 c1                	mov    ecx,eax
c0015701:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015704:	89 cb                	mov    ebx,ecx
c0015706:	89 d0                	mov    eax,edx
c0015708:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001570b:	89 c6                	mov    esi,eax
c001570d:	89 f0                	mov    eax,esi
c001570f:	09 d8                	or     eax,ebx
c0015711:	85 c0                	test   eax,eax
c0015713:	75 21                	jne    c0015736 <opcodeFault(regs*, void*)+0x4c8>
c0015715:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015718:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001571b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001571e:	89 01                	mov    DWORD PTR [ecx],eax
c0015720:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015726:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015729:	83 c8 40             	or     eax,0x40
c001572c:	89 c2                	mov    edx,eax
c001572e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015731:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015734:	eb 3e                	jmp    c0015774 <opcodeFault(regs*, void*)+0x506>
c0015736:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015739:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001573c:	8b 00                	mov    eax,DWORD PTR [eax]
c001573e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015741:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015744:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001574d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015750:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015753:	89 d0                	mov    eax,edx
c0015755:	31 d2                	xor    edx,edx
c0015757:	89 c3                	mov    ebx,eax
c0015759:	89 d6                	mov    esi,edx
c001575b:	89 da                	mov    edx,ebx
c001575d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015760:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015766:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015769:	83 e0 bf             	and    eax,0xffffffbf
c001576c:	89 c2                	mov    edx,eax
c001576e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015771:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015774:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0015779:	48                   	dec    eax
c001577a:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001577f:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0015784:	85 c0                	test   eax,eax
c0015786:	75 01                	jne    c0015789 <opcodeFault(regs*, void*)+0x51b>
c0015788:	fb                   	sti    
c0015789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001578f:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015792:	01 c2                	add    edx,eax
c0015794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015797:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001579a:	83 ec 0c             	sub    esp,0xc
c001579d:	68 de b8 02 c0       	push   0xc002b8de
c00157a2:	e8 9e d6 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00157a7:	83 c4 10             	add    esp,0x10
c00157aa:	e9 d5 00 00 00       	jmp    c0015884 <opcodeFault(regs*, void*)+0x616>
c00157af:	83 ec 0c             	sub    esp,0xc
c00157b2:	68 f1 b8 02 c0       	push   0xc002b8f1
c00157b7:	e8 89 d6 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00157bc:	83 c4 10             	add    esp,0x10
c00157bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157cb:	c1 e0 04             	shl    eax,0x4
c00157ce:	01 d0                	add    eax,edx
c00157d0:	83 c0 03             	add    eax,0x3
c00157d3:	8a 00                	mov    al,BYTE PTR [eax]
c00157d5:	0f b6 d8             	movzx  ebx,al
c00157d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157db:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157e4:	c1 e0 04             	shl    eax,0x4
c00157e7:	01 d0                	add    eax,edx
c00157e9:	83 c0 02             	add    eax,0x2
c00157ec:	8a 00                	mov    al,BYTE PTR [eax]
c00157ee:	0f b6 c8             	movzx  ecx,al
c00157f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157fd:	c1 e0 04             	shl    eax,0x4
c0015800:	01 d0                	add    eax,edx
c0015802:	40                   	inc    eax
c0015803:	8a 00                	mov    al,BYTE PTR [eax]
c0015805:	0f b6 d0             	movzx  edx,al
c0015808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580b:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001580e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015811:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015814:	c1 e0 04             	shl    eax,0x4
c0015817:	01 f0                	add    eax,esi
c0015819:	8a 00                	mov    al,BYTE PTR [eax]
c001581b:	0f b6 c0             	movzx  eax,al
c001581e:	83 ec 0c             	sub    esp,0xc
c0015821:	53                   	push   ebx
c0015822:	51                   	push   ecx
c0015823:	52                   	push   edx
c0015824:	50                   	push   eax
c0015825:	68 04 b9 02 c0       	push   0xc002b904
c001582a:	e8 16 d6 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001582f:	83 c4 20             	add    esp,0x20
c0015832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015835:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015838:	83 c0 03             	add    eax,0x3
c001583b:	8a 00                	mov    al,BYTE PTR [eax]
c001583d:	0f b6 d8             	movzx  ebx,al
c0015840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015843:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015846:	83 c0 02             	add    eax,0x2
c0015849:	8a 00                	mov    al,BYTE PTR [eax]
c001584b:	0f b6 c8             	movzx  ecx,al
c001584e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015851:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015854:	40                   	inc    eax
c0015855:	8a 00                	mov    al,BYTE PTR [eax]
c0015857:	0f b6 d0             	movzx  edx,al
c001585a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015860:	8a 00                	mov    al,BYTE PTR [eax]
c0015862:	0f b6 c0             	movzx  eax,al
c0015865:	83 ec 0c             	sub    esp,0xc
c0015868:	53                   	push   ebx
c0015869:	51                   	push   ecx
c001586a:	52                   	push   edx
c001586b:	50                   	push   eax
c001586c:	68 2c b9 02 c0       	push   0xc002b92c
c0015871:	e8 cf d5 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0015876:	83 c4 20             	add    esp,0x20
c0015879:	83 ec 0c             	sub    esp,0xc
c001587c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001587f:	e8 54 f4 ff ff       	call   c0014cd8 <displayDebugInfo(regs*)>
c0015884:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015887:	5b                   	pop    ebx
c0015888:	5e                   	pop    esi
c0015889:	5d                   	pop    ebp
c001588a:	c3                   	ret    

c001588b <displayProgramFault(char const*)>:
c001588b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015890:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015893:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015899:	85 c0                	test   eax,eax
c001589b:	74 15                	je     c00158b2 <displayProgramFault(char const*)+0x27>
c001589d:	83 ec 0c             	sub    esp,0xc
c00158a0:	6a 04                	push   0x4
c00158a2:	6a 0f                	push   0xf
c00158a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158a8:	50                   	push   eax
c00158a9:	e8 80 b4 ff ff       	call   c0010d2e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00158ae:	83 c4 1c             	add    esp,0x1c
c00158b1:	c3                   	ret    
c00158b2:	c3                   	ret    

c00158b3 <setupInterruptController()>:
c00158b3:	55                   	push   ebp
c00158b4:	89 e5                	mov    ebp,esp
c00158b6:	53                   	push   ebx
c00158b7:	83 ec 24             	sub    esp,0x24
c00158ba:	b8 00 00 00 00       	mov    eax,0x0
c00158bf:	85 c0                	test   eax,eax
c00158c1:	0f 95 c0             	setne  al
c00158c4:	84 c0                	test   al,al
c00158c6:	74 5b                	je     c0015923 <setupInterruptController()+0x70>
c00158c8:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00158cf:	83 ec 0c             	sub    esp,0xc
c00158d2:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00158d5:	e8 ac 9f ff ff       	call   c000f886 <malloc>
c00158da:	83 c4 10             	add    esp,0x10
c00158dd:	89 c3                	mov    ebx,eax
c00158df:	83 ec 0c             	sub    esp,0xc
c00158e2:	53                   	push   ebx
c00158e3:	e8 ba 07 01 00       	call   c00260a2 <APIC::APIC()>
c00158e8:	83 c4 10             	add    esp,0x10
c00158eb:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00158ee:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00158f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00158f6:	83 c0 08             	add    eax,0x8
c00158f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00158fb:	6a 00                	push   0x0
c00158fd:	6a 00                	push   0x0
c00158ff:	6a 00                	push   0x0
c0015901:	52                   	push   edx
c0015902:	ff d0                	call   eax
c0015904:	83 c4 10             	add    esp,0x10
c0015907:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c001590c:	83 ec 08             	sub    esp,0x8
c001590f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015912:	50                   	push   eax
c0015913:	e8 62 e9 ff ff       	call   c001427a <Device::addChild(Device*)>
c0015918:	83 c4 10             	add    esp,0x10
c001591b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001591e:	e9 89 03 00 00       	jmp    c0015cac <setupInterruptController()+0x3f9>
c0015923:	a0 60 17 03 c0       	mov    al,ds:0xc0031760
c0015928:	84 c0                	test   al,al
c001592a:	75 24                	jne    c0015950 <setupInterruptController()+0x9d>
c001592c:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0015931:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015937:	83 e2 fe             	and    edx,0xfffffffe
c001593a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015940:	83 ec 0c             	sub    esp,0xc
c0015943:	68 51 b9 02 c0       	push   0xc002b951
c0015948:	e8 f8 d4 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001594d:	83 c4 10             	add    esp,0x10
c0015950:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0015955:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001595b:	83 e0 01             	and    eax,0x1
c001595e:	84 c0                	test   al,al
c0015960:	0f 95 c0             	setne  al
c0015963:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015966:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001596d:	83 ec 0c             	sub    esp,0xc
c0015970:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015973:	e8 0e 9f ff ff       	call   c000f886 <malloc>
c0015978:	83 c4 10             	add    esp,0x10
c001597b:	89 c3                	mov    ebx,eax
c001597d:	83 ec 0c             	sub    esp,0xc
c0015980:	53                   	push   ebx
c0015981:	e8 74 0c 01 00       	call   c00265fa <PIC::PIC()>
c0015986:	83 c4 10             	add    esp,0x10
c0015989:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001598c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001598f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015992:	8b 00                	mov    eax,DWORD PTR [eax]
c0015994:	83 c0 08             	add    eax,0x8
c0015997:	8b 00                	mov    eax,DWORD PTR [eax]
c0015999:	6a 00                	push   0x0
c001599b:	6a 00                	push   0x0
c001599d:	6a 00                	push   0x0
c001599f:	52                   	push   edx
c00159a0:	ff d0                	call   eax
c00159a2:	83 c4 10             	add    esp,0x10
c00159a5:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00159a9:	74 73                	je     c0015a1e <setupInterruptController()+0x16b>
c00159ab:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b3:	83 c0 0c             	add    eax,0xc
c00159b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b8:	6a 00                	push   0x0
c00159ba:	6a 00                	push   0x0
c00159bc:	6a 00                	push   0x0
c00159be:	52                   	push   edx
c00159bf:	ff d0                	call   eax
c00159c1:	83 c4 10             	add    esp,0x10
c00159c4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159c8:	74 15                	je     c00159df <setupInterruptController()+0x12c>
c00159ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00159cf:	83 c0 04             	add    eax,0x4
c00159d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159da:	ff d0                	call   eax
c00159dc:	83 c4 10             	add    esp,0x10
c00159df:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00159e6:	83 ec 0c             	sub    esp,0xc
c00159e9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00159ec:	e8 95 9e ff ff       	call   c000f886 <malloc>
c00159f1:	83 c4 10             	add    esp,0x10
c00159f4:	89 c3                	mov    ebx,eax
c00159f6:	83 ec 0c             	sub    esp,0xc
c00159f9:	53                   	push   ebx
c00159fa:	e8 a3 06 01 00       	call   c00260a2 <APIC::APIC()>
c00159ff:	83 c4 10             	add    esp,0x10
c0015a02:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a05:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0d:	83 c0 08             	add    eax,0x8
c0015a10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a12:	6a 00                	push   0x0
c0015a14:	6a 00                	push   0x0
c0015a16:	6a 00                	push   0x0
c0015a18:	52                   	push   edx
c0015a19:	ff d0                	call   eax
c0015a1b:	83 c4 10             	add    esp,0x10
c0015a1e:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0015a23:	83 ec 08             	sub    esp,0x8
c0015a26:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a29:	50                   	push   eax
c0015a2a:	e8 4b e8 ff ff       	call   c001427a <Device::addChild(Device*)>
c0015a2f:	83 c4 10             	add    esp,0x10
c0015a32:	c7 05 68 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ef68,0x0
c0015a3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a41:	83 c0 24             	add    eax,0x24
c0015a44:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a46:	6a 00                	push   0x0
c0015a48:	68 4f 52 01 c0       	push   0xc001524f
c0015a4d:	6a 00                	push   0x0
c0015a4f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a52:	ff d0                	call   eax
c0015a54:	83 c4 10             	add    esp,0x10
c0015a57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5c:	83 c0 24             	add    eax,0x24
c0015a5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a61:	6a 00                	push   0x0
c0015a63:	68 4f 52 01 c0       	push   0xc001524f
c0015a68:	6a 01                	push   0x1
c0015a6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a6d:	ff d0                	call   eax
c0015a6f:	83 c4 10             	add    esp,0x10
c0015a72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a75:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a77:	83 c0 24             	add    eax,0x24
c0015a7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7c:	6a 00                	push   0x0
c0015a7e:	68 35 4b 01 c0       	push   0xc0014b35
c0015a83:	6a 02                	push   0x2
c0015a85:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a88:	ff d0                	call   eax
c0015a8a:	83 c4 10             	add    esp,0x10
c0015a8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a92:	83 c0 24             	add    eax,0x24
c0015a95:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a97:	6a 00                	push   0x0
c0015a99:	68 4f 52 01 c0       	push   0xc001524f
c0015a9e:	6a 03                	push   0x3
c0015aa0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa3:	ff d0                	call   eax
c0015aa5:	83 c4 10             	add    esp,0x10
c0015aa8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aab:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aad:	83 c0 24             	add    eax,0x24
c0015ab0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab2:	6a 00                	push   0x0
c0015ab4:	68 4f 52 01 c0       	push   0xc001524f
c0015ab9:	6a 04                	push   0x4
c0015abb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015abe:	ff d0                	call   eax
c0015ac0:	83 c4 10             	add    esp,0x10
c0015ac3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac8:	83 c0 24             	add    eax,0x24
c0015acb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acd:	6a 00                	push   0x0
c0015acf:	68 4f 52 01 c0       	push   0xc001524f
c0015ad4:	6a 05                	push   0x5
c0015ad6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad9:	ff d0                	call   eax
c0015adb:	83 c4 10             	add    esp,0x10
c0015ade:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae3:	83 c0 24             	add    eax,0x24
c0015ae6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae8:	6a 00                	push   0x0
c0015aea:	68 6e 52 01 c0       	push   0xc001526e
c0015aef:	6a 06                	push   0x6
c0015af1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af4:	ff d0                	call   eax
c0015af6:	83 c4 10             	add    esp,0x10
c0015af9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015afc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afe:	83 c0 24             	add    eax,0x24
c0015b01:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b03:	6a 00                	push   0x0
c0015b05:	68 67 51 01 c0       	push   0xc0015167
c0015b0a:	6a 07                	push   0x7
c0015b0c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b0f:	ff d0                	call   eax
c0015b11:	83 c4 10             	add    esp,0x10
c0015b14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b17:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b19:	83 c0 24             	add    eax,0x24
c0015b1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1e:	6a 00                	push   0x0
c0015b20:	68 50 49 01 c0       	push   0xc0014950
c0015b25:	6a 08                	push   0x8
c0015b27:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b2a:	ff d0                	call   eax
c0015b2c:	83 c4 10             	add    esp,0x10
c0015b2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b32:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b34:	83 c0 24             	add    eax,0x24
c0015b37:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b39:	6a 00                	push   0x0
c0015b3b:	68 4f 52 01 c0       	push   0xc001524f
c0015b40:	6a 09                	push   0x9
c0015b42:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b45:	ff d0                	call   eax
c0015b47:	83 c4 10             	add    esp,0x10
c0015b4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4f:	83 c0 24             	add    eax,0x24
c0015b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b54:	6a 00                	push   0x0
c0015b56:	68 4f 52 01 c0       	push   0xc001524f
c0015b5b:	6a 0a                	push   0xa
c0015b5d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b60:	ff d0                	call   eax
c0015b62:	83 c4 10             	add    esp,0x10
c0015b65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6a:	83 c0 24             	add    eax,0x24
c0015b6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6f:	6a 00                	push   0x0
c0015b71:	68 4f 52 01 c0       	push   0xc001524f
c0015b76:	6a 0b                	push   0xb
c0015b78:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b7b:	ff d0                	call   eax
c0015b7d:	83 c4 10             	add    esp,0x10
c0015b80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b83:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b85:	83 c0 24             	add    eax,0x24
c0015b88:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8a:	6a 00                	push   0x0
c0015b8c:	68 4f 52 01 c0       	push   0xc001524f
c0015b91:	6a 0c                	push   0xc
c0015b93:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b96:	ff d0                	call   eax
c0015b98:	83 c4 10             	add    esp,0x10
c0015b9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba0:	83 c0 24             	add    eax,0x24
c0015ba3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba5:	6a 00                	push   0x0
c0015ba7:	68 da 51 01 c0       	push   0xc00151da
c0015bac:	6a 0d                	push   0xd
c0015bae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb1:	ff d0                	call   eax
c0015bb3:	83 c4 10             	add    esp,0x10
c0015bb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbb:	83 c0 24             	add    eax,0x24
c0015bbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc0:	6a 00                	push   0x0
c0015bc2:	68 13 52 01 c0       	push   0xc0015213
c0015bc7:	6a 0e                	push   0xe
c0015bc9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bcc:	ff d0                	call   eax
c0015bce:	83 c4 10             	add    esp,0x10
c0015bd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd6:	83 c0 24             	add    eax,0x24
c0015bd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bdb:	6a 00                	push   0x0
c0015bdd:	68 4f 52 01 c0       	push   0xc001524f
c0015be2:	6a 0f                	push   0xf
c0015be4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be7:	ff d0                	call   eax
c0015be9:	83 c4 10             	add    esp,0x10
c0015bec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bef:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf1:	83 c0 24             	add    eax,0x24
c0015bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf6:	6a 00                	push   0x0
c0015bf8:	68 4f 52 01 c0       	push   0xc001524f
c0015bfd:	6a 10                	push   0x10
c0015bff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c02:	ff d0                	call   eax
c0015c04:	83 c4 10             	add    esp,0x10
c0015c07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0c:	83 c0 24             	add    eax,0x24
c0015c0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c11:	6a 00                	push   0x0
c0015c13:	68 4f 52 01 c0       	push   0xc001524f
c0015c18:	6a 11                	push   0x11
c0015c1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c1d:	ff d0                	call   eax
c0015c1f:	83 c4 10             	add    esp,0x10
c0015c22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c27:	83 c0 24             	add    eax,0x24
c0015c2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2c:	6a 00                	push   0x0
c0015c2e:	68 4f 52 01 c0       	push   0xc001524f
c0015c33:	6a 12                	push   0x12
c0015c35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c38:	ff d0                	call   eax
c0015c3a:	83 c4 10             	add    esp,0x10
c0015c3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c40:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c42:	83 c0 24             	add    eax,0x24
c0015c45:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c47:	6a 00                	push   0x0
c0015c49:	68 4f 52 01 c0       	push   0xc001524f
c0015c4e:	6a 13                	push   0x13
c0015c50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c53:	ff d0                	call   eax
c0015c55:	83 c4 10             	add    esp,0x10
c0015c58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5d:	83 c0 24             	add    eax,0x24
c0015c60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c62:	6a 00                	push   0x0
c0015c64:	68 4f 52 01 c0       	push   0xc001524f
c0015c69:	6a 14                	push   0x14
c0015c6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c6e:	ff d0                	call   eax
c0015c70:	83 c4 10             	add    esp,0x10
c0015c73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c78:	83 c0 24             	add    eax,0x24
c0015c7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7d:	6a 00                	push   0x0
c0015c7f:	68 4f 52 01 c0       	push   0xc001524f
c0015c84:	6a 1e                	push   0x1e
c0015c86:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c89:	ff d0                	call   eax
c0015c8b:	83 c4 10             	add    esp,0x10
c0015c8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c93:	83 c0 24             	add    eax,0x24
c0015c96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c98:	6a 00                	push   0x0
c0015c9a:	68 43 ca 01 c0       	push   0xc001ca43
c0015c9f:	6a 60                	push   0x60
c0015ca1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ca4:	ff d0                	call   eax
c0015ca6:	83 c4 10             	add    esp,0x10
c0015ca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cac:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015caf:	c9                   	leave  
c0015cb0:	c3                   	ret    
c0015cb1:	90                   	nop

c0015cb2 <InterruptController::convertLegacyIRQNumber(int)>:
c0015cb2:	55                   	push   ebp
c0015cb3:	89 e5                	mov    ebp,esp
c0015cb5:	83 ec 08             	sub    esp,0x8
c0015cb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cbb:	83 ec 0c             	sub    esp,0xc
c0015cbe:	50                   	push   eax
c0015cbf:	e8 a2 e8 ff ff       	call   c0014566 <Device::getName()>
c0015cc4:	83 c4 10             	add    esp,0x10
c0015cc7:	8a 00                	mov    al,BYTE PTR [eax]
c0015cc9:	3c 41                	cmp    al,0x41
c0015ccb:	0f 94 c0             	sete   al
c0015cce:	84 c0                	test   al,al
c0015cd0:	74 28                	je     c0015cfa <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cd2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015cd6:	7f 12                	jg     c0015cea <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015cd8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cdb:	05 20 e0 02 c0       	add    eax,0xc002e020
c0015ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0015ce2:	0f b6 c0             	movzx  eax,al
c0015ce5:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015ce8:	eb 10                	jmp    c0015cfa <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cea:	83 ec 0c             	sub    esp,0xc
c0015ced:	68 40 b6 02 c0       	push   0xc002b640
c0015cf2:	e8 0e 4b 00 00       	call   c001a805 <Krnl::panic(char const*)>
c0015cf7:	83 c4 10             	add    esp,0x10
c0015cfa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cfd:	c9                   	leave  
c0015cfe:	c3                   	ret    
c0015cff:	90                   	nop

c0015d00 <startGUI(void*)>:
c0015d00:	55                   	push   ebp
c0015d01:	89 e5                	mov    ebp,esp
c0015d03:	53                   	push   ebx
c0015d04:	83 ec 04             	sub    esp,0x4
c0015d07:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0015d0c:	48                   	dec    eax
c0015d0d:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c0015d12:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0015d17:	85 c0                	test   eax,eax
c0015d19:	75 01                	jne    c0015d1c <startGUI(void*)+0x1c>
c0015d1b:	fb                   	sti    
c0015d1c:	8b 1d c8 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002edc8
c0015d22:	83 ec 08             	sub    esp,0x8
c0015d25:	6a 01                	push   0x1
c0015d27:	68 b4 b9 02 c0       	push   0xc002b9b4
c0015d2c:	e8 ed 7c 00 00       	call   c001da1e <Thr::loadDLL(char const*, bool)>
c0015d31:	83 c4 10             	add    esp,0x10
c0015d34:	83 ec 08             	sub    esp,0x8
c0015d37:	53                   	push   ebx
c0015d38:	50                   	push   eax
c0015d39:	e8 14 7f 00 00       	call   c001dc52 <Thr::executeDLL(unsigned long, void*)>
c0015d3e:	83 c4 10             	add    esp,0x10
c0015d41:	8b 1d c8 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002edc8
c0015d47:	83 ec 08             	sub    esp,0x8
c0015d4a:	6a 01                	push   0x1
c0015d4c:	68 ce b9 02 c0       	push   0xc002b9ce
c0015d51:	e8 c8 7c 00 00       	call   c001da1e <Thr::loadDLL(char const*, bool)>
c0015d56:	83 c4 10             	add    esp,0x10
c0015d59:	83 ec 08             	sub    esp,0x8
c0015d5c:	53                   	push   ebx
c0015d5d:	50                   	push   eax
c0015d5e:	e8 ef 7e 00 00       	call   c001dc52 <Thr::executeDLL(unsigned long, void*)>
c0015d63:	83 c4 10             	add    esp,0x10
c0015d66:	90                   	nop
c0015d67:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d6a:	c9                   	leave  
c0015d6b:	c3                   	ret    

c0015d6c <startGUIVESA(void*)>:
c0015d6c:	55                   	push   ebp
c0015d6d:	89 e5                	mov    ebp,esp
c0015d6f:	53                   	push   ebx
c0015d70:	83 ec 04             	sub    esp,0x4
c0015d73:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0015d78:	48                   	dec    eax
c0015d79:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c0015d7e:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0015d83:	85 c0                	test   eax,eax
c0015d85:	75 01                	jne    c0015d88 <startGUIVESA(void*)+0x1c>
c0015d87:	fb                   	sti    
c0015d88:	8b 1d c8 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002edc8
c0015d8e:	83 ec 08             	sub    esp,0x8
c0015d91:	6a 01                	push   0x1
c0015d93:	68 e8 b9 02 c0       	push   0xc002b9e8
c0015d98:	e8 81 7c 00 00       	call   c001da1e <Thr::loadDLL(char const*, bool)>
c0015d9d:	83 c4 10             	add    esp,0x10
c0015da0:	83 ec 08             	sub    esp,0x8
c0015da3:	53                   	push   ebx
c0015da4:	50                   	push   eax
c0015da5:	e8 a8 7e 00 00       	call   c001dc52 <Thr::executeDLL(unsigned long, void*)>
c0015daa:	83 c4 10             	add    esp,0x10
c0015dad:	8b 1d c8 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002edc8
c0015db3:	83 ec 08             	sub    esp,0x8
c0015db6:	6a 01                	push   0x1
c0015db8:	68 ce b9 02 c0       	push   0xc002b9ce
c0015dbd:	e8 5c 7c 00 00       	call   c001da1e <Thr::loadDLL(char const*, bool)>
c0015dc2:	83 c4 10             	add    esp,0x10
c0015dc5:	83 ec 08             	sub    esp,0x8
c0015dc8:	53                   	push   ebx
c0015dc9:	50                   	push   eax
c0015dca:	e8 83 7e 00 00       	call   c001dc52 <Thr::executeDLL(unsigned long, void*)>
c0015dcf:	83 c4 10             	add    esp,0x10
c0015dd2:	90                   	nop
c0015dd3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dd6:	c9                   	leave  
c0015dd7:	c3                   	ret    

c0015dd8 <sendKeyToTerminal(unsigned char)>:
c0015dd8:	55                   	push   ebp
c0015dd9:	89 e5                	mov    ebp,esp
c0015ddb:	83 ec 28             	sub    esp,0x28
c0015dde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015de4:	a1 a4 ee 02 c0       	mov    eax,ds:0xc002eea4
c0015de9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015ded:	83 ec 08             	sub    esp,0x8
c0015df0:	52                   	push   edx
c0015df1:	50                   	push   eax
c0015df2:	e8 11 b4 ff ff       	call   c0011208 <VgaText::receiveKey(unsigned char)>
c0015df7:	83 c4 10             	add    esp,0x10
c0015dfa:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015dfe:	0f 85 8f 00 00 00    	jne    c0015e93 <sendKeyToTerminal(unsigned char)+0xbb>
c0015e04:	fa                   	cli    
c0015e05:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0015e0a:	40                   	inc    eax
c0015e0b:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c0015e10:	a1 04 23 03 c0       	mov    eax,ds:0xc0032304
c0015e15:	40                   	inc    eax
c0015e16:	a3 04 23 03 c0       	mov    ds:0xc0032304,eax
c0015e1b:	a1 80 ef 02 c0       	mov    eax,ds:0xc002ef80
c0015e20:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e23:	c7 05 80 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ef80,0x0
c0015e2d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e31:	74 1f                	je     c0015e52 <sendKeyToTerminal(unsigned char)+0x7a>
c0015e33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e36:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e3c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e3f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e42:	83 ec 0c             	sub    esp,0xc
c0015e45:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e48:	e8 7d 8a 00 00       	call   c001e8ca <unblockTask(ThreadControlBlock*)>
c0015e4d:	83 c4 10             	add    esp,0x10
c0015e50:	eb db                	jmp    c0015e2d <sendKeyToTerminal(unsigned char)+0x55>
c0015e52:	a1 04 23 03 c0       	mov    eax,ds:0xc0032304
c0015e57:	48                   	dec    eax
c0015e58:	a3 04 23 03 c0       	mov    ds:0xc0032304,eax
c0015e5d:	a1 04 23 03 c0       	mov    eax,ds:0xc0032304
c0015e62:	85 c0                	test   eax,eax
c0015e64:	75 18                	jne    c0015e7e <sendKeyToTerminal(unsigned char)+0xa6>
c0015e66:	a1 00 23 03 c0       	mov    eax,ds:0xc0032300
c0015e6b:	85 c0                	test   eax,eax
c0015e6d:	74 0f                	je     c0015e7e <sendKeyToTerminal(unsigned char)+0xa6>
c0015e6f:	c7 05 00 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032300,0x0
c0015e79:	e8 88 85 00 00       	call   c001e406 <schedule()>
c0015e7e:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0015e83:	48                   	dec    eax
c0015e84:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c0015e89:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0015e8e:	85 c0                	test   eax,eax
c0015e90:	75 01                	jne    c0015e93 <sendKeyToTerminal(unsigned char)+0xbb>
c0015e92:	fb                   	sti    
c0015e93:	90                   	nop
c0015e94:	c9                   	leave  
c0015e95:	c3                   	ret    

c0015e96 <sendKeyboardToken(KeyboardToken)>:
c0015e96:	55                   	push   ebp
c0015e97:	89 e5                	mov    ebp,esp
c0015e99:	83 ec 18             	sub    esp,0x18
c0015e9c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea2:	0f b7 c0             	movzx  eax,ax
c0015ea5:	83 f2 01             	xor    edx,0x1
c0015ea8:	88 90 a0 ef 02 c0    	mov    BYTE PTR [eax-0x3ffd1060],dl
c0015eae:	a1 88 ef 02 c0       	mov    eax,ds:0xc002ef88
c0015eb3:	85 c0                	test   eax,eax
c0015eb5:	74 24                	je     c0015edb <sendKeyboardToken(KeyboardToken)+0x45>
c0015eb7:	8b 0d 88 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002ef88
c0015ebd:	83 ec 04             	sub    esp,0x4
c0015ec0:	68 a0 ef 02 c0       	push   0xc002efa0
c0015ec5:	83 ec 08             	sub    esp,0x8
c0015ec8:	89 e2                	mov    edx,esp
c0015eca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ecd:	89 02                	mov    DWORD PTR [edx],eax
c0015ecf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ed2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ed6:	ff d1                	call   ecx
c0015ed8:	83 c4 10             	add    esp,0x10
c0015edb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ede:	66 3d 03 02          	cmp    ax,0x203
c0015ee2:	75 07                	jne    c0015eeb <sendKeyboardToken(KeyboardToken)+0x55>
c0015ee4:	a0 a0 f0 02 c0       	mov    al,ds:0xc002f0a0
c0015ee9:	84 c0                	test   al,al
c0015eeb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015eef:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ef2:	a0 a8 f3 02 c0       	mov    al,ds:0xc002f3a8
c0015ef7:	38 c2                	cmp    dl,al
c0015ef9:	74 1c                	je     c0015f17 <sendKeyboardToken(KeyboardToken)+0x81>
c0015efb:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015efe:	a2 a8 f3 02 c0       	mov    ds:0xc002f3a8,al
c0015f03:	a0 a8 f3 02 c0       	mov    al,ds:0xc002f3a8
c0015f08:	0f b6 c0             	movzx  eax,al
c0015f0b:	83 ec 0c             	sub    esp,0xc
c0015f0e:	50                   	push   eax
c0015f0f:	e8 7a a6 ff ff       	call   c001058e <setTerminalScrollLock(bool)>
c0015f14:	83 c4 10             	add    esp,0x10
c0015f17:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f1a:	84 c0                	test   al,al
c0015f1c:	0f 84 ae 00 00 00    	je     c0015fd0 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f25:	66 3d 10 03          	cmp    ax,0x310
c0015f29:	75 06                	jne    c0015f31 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f2b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f34:	66 3d 11 03          	cmp    ax,0x311
c0015f38:	75 06                	jne    c0015f40 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f3a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f43:	66 3d 12 03          	cmp    ax,0x312
c0015f47:	75 06                	jne    c0015f4f <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f49:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f52:	66 3d 13 03          	cmp    ax,0x313
c0015f56:	75 06                	jne    c0015f5e <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f58:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f61:	66 3d 14 03          	cmp    ax,0x314
c0015f65:	75 06                	jne    c0015f6d <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f67:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f70:	66 3d 15 03          	cmp    ax,0x315
c0015f74:	75 06                	jne    c0015f7c <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f76:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7f:	66 3d 16 03          	cmp    ax,0x316
c0015f83:	75 06                	jne    c0015f8b <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f85:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8e:	66 3d 17 03          	cmp    ax,0x317
c0015f92:	75 06                	jne    c0015f9a <sendKeyboardToken(KeyboardToken)+0x104>
c0015f94:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f9d:	66 3d 18 03          	cmp    ax,0x318
c0015fa1:	75 06                	jne    c0015fa9 <sendKeyboardToken(KeyboardToken)+0x113>
c0015fa3:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fac:	66 3d 19 03          	cmp    ax,0x319
c0015fb0:	75 06                	jne    c0015fb8 <sendKeyboardToken(KeyboardToken)+0x122>
c0015fb2:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fbb:	66 3d 1a 03          	cmp    ax,0x31a
c0015fbf:	0f 85 c9 00 00 00    	jne    c001608e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fc5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fcb:	e9 be 00 00 00       	jmp    c001608e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd3:	66 3d 10 03          	cmp    ax,0x310
c0015fd7:	75 0a                	jne    c0015fe3 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fd9:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fdf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe6:	66 3d 11 03          	cmp    ax,0x311
c0015fea:	75 0a                	jne    c0015ff6 <sendKeyboardToken(KeyboardToken)+0x160>
c0015fec:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015ff2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ff6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff9:	66 3d 12 03          	cmp    ax,0x312
c0015ffd:	75 0a                	jne    c0016009 <sendKeyboardToken(KeyboardToken)+0x173>
c0015fff:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016005:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001600c:	66 3d 13 03          	cmp    ax,0x313
c0016010:	75 0a                	jne    c001601c <sendKeyboardToken(KeyboardToken)+0x186>
c0016012:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016018:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001601c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001601f:	66 3d 14 03          	cmp    ax,0x314
c0016023:	75 0a                	jne    c001602f <sendKeyboardToken(KeyboardToken)+0x199>
c0016025:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001602b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001602f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016032:	66 3d 15 03          	cmp    ax,0x315
c0016036:	75 0a                	jne    c0016042 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016038:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001603e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016045:	66 3d 16 03          	cmp    ax,0x316
c0016049:	75 0a                	jne    c0016055 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001604b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016051:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016058:	66 3d 17 03          	cmp    ax,0x317
c001605c:	75 0a                	jne    c0016068 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001605e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016064:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606b:	66 3d 18 03          	cmp    ax,0x318
c001606f:	75 0a                	jne    c001607b <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016071:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016077:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001607b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607e:	66 3d 19 03          	cmp    ax,0x319
c0016082:	75 0a                	jne    c001608e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016084:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001608a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001608e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016091:	66 3d 00 02          	cmp    ax,0x200
c0016095:	75 2c                	jne    c00160c3 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016097:	a0 a0 f3 02 c0       	mov    al,ds:0xc002f3a0
c001609c:	83 f0 01             	xor    eax,0x1
c001609f:	84 c0                	test   al,al
c00160a1:	74 20                	je     c00160c3 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160a3:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c00160a8:	6a 01                	push   0x1
c00160aa:	6a 00                	push   0x0
c00160ac:	68 00 5d 01 c0       	push   0xc0015d00
c00160b1:	50                   	push   eax
c00160b2:	e8 0b 81 00 00       	call   c001e1c2 <Process::createThread(void (*)(void*), void*, int)>
c00160b7:	83 c4 10             	add    esp,0x10
c00160ba:	c6 05 a0 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f3a0,0x1
c00160c1:	eb 33                	jmp    c00160f6 <sendKeyboardToken(KeyboardToken)+0x260>
c00160c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c6:	66 3d 01 02          	cmp    ax,0x201
c00160ca:	75 2a                	jne    c00160f6 <sendKeyboardToken(KeyboardToken)+0x260>
c00160cc:	a0 a0 f3 02 c0       	mov    al,ds:0xc002f3a0
c00160d1:	83 f0 01             	xor    eax,0x1
c00160d4:	84 c0                	test   al,al
c00160d6:	74 1e                	je     c00160f6 <sendKeyboardToken(KeyboardToken)+0x260>
c00160d8:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c00160dd:	6a 01                	push   0x1
c00160df:	6a 00                	push   0x0
c00160e1:	68 6c 5d 01 c0       	push   0xc0015d6c
c00160e6:	50                   	push   eax
c00160e7:	e8 d6 80 00 00       	call   c001e1c2 <Process::createThread(void (*)(void*), void*, int)>
c00160ec:	83 c4 10             	add    esp,0x10
c00160ef:	c6 05 a0 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f3a0,0x1
c00160f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f9:	66 3d 1d 03          	cmp    ax,0x31d
c00160fd:	75 06                	jne    c0016105 <sendKeyboardToken(KeyboardToken)+0x26f>
c00160ff:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016108:	66 3d 1c 03          	cmp    ax,0x31c
c001610c:	75 06                	jne    c0016114 <sendKeyboardToken(KeyboardToken)+0x27e>
c001610e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016117:	66 3d 1b 03          	cmp    ax,0x31b
c001611b:	75 06                	jne    c0016123 <sendKeyboardToken(KeyboardToken)+0x28d>
c001611d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016126:	66 3d 1e 03          	cmp    ax,0x31e
c001612a:	75 06                	jne    c0016132 <sendKeyboardToken(KeyboardToken)+0x29c>
c001612c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016132:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016135:	66 3d 1f 03          	cmp    ax,0x31f
c0016139:	75 06                	jne    c0016141 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001613b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016144:	66 3d 1a 03          	cmp    ax,0x31a
c0016148:	75 06                	jne    c0016150 <sendKeyboardToken(KeyboardToken)+0x2ba>
c001614a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016150:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016154:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016157:	83 f0 01             	xor    eax,0x1
c001615a:	84 c0                	test   al,al
c001615c:	74 77                	je     c00161d5 <sendKeyboardToken(KeyboardToken)+0x33f>
c001615e:	a0 a1 f0 02 c0       	mov    al,ds:0xc002f0a1
c0016163:	84 c0                	test   al,al
c0016165:	74 41                	je     c00161a8 <sendKeyboardToken(KeyboardToken)+0x312>
c0016167:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001616b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001616f:	74 2b                	je     c001619c <sendKeyboardToken(KeyboardToken)+0x306>
c0016171:	8b 15 a4 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3a4
c0016177:	89 d0                	mov    eax,edx
c0016179:	c1 e0 02             	shl    eax,0x2
c001617c:	01 d0                	add    eax,edx
c001617e:	01 c0                	add    eax,eax
c0016180:	a3 a4 f3 02 c0       	mov    ds:0xc002f3a4,eax
c0016185:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016188:	0f b7 c0             	movzx  eax,ax
c001618b:	8d 50 d0             	lea    edx,[eax-0x30]
c001618e:	a1 a4 f3 02 c0       	mov    eax,ds:0xc002f3a4
c0016193:	01 d0                	add    eax,edx
c0016195:	a3 a4 f3 02 c0       	mov    ds:0xc002f3a4,eax
c001619a:	eb 6d                	jmp    c0016209 <sendKeyboardToken(KeyboardToken)+0x373>
c001619c:	c7 05 a4 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f3a4,0x0
c00161a6:	eb 61                	jmp    c0016209 <sendKeyboardToken(KeyboardToken)+0x373>
c00161a8:	a1 a4 f3 02 c0       	mov    eax,ds:0xc002f3a4
c00161ad:	85 c0                	test   eax,eax
c00161af:	74 18                	je     c00161c9 <sendKeyboardToken(KeyboardToken)+0x333>
c00161b1:	a1 a4 f3 02 c0       	mov    eax,ds:0xc002f3a4
c00161b6:	0f b6 c0             	movzx  eax,al
c00161b9:	83 ec 0c             	sub    esp,0xc
c00161bc:	50                   	push   eax
c00161bd:	e8 16 fc ff ff       	call   c0015dd8 <sendKeyToTerminal(unsigned char)>
c00161c2:	83 c4 10             	add    esp,0x10
c00161c5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161c9:	c7 05 a4 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f3a4,0x0
c00161d3:	eb 34                	jmp    c0016209 <sendKeyboardToken(KeyboardToken)+0x373>
c00161d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d8:	66 3d 01 01          	cmp    ax,0x101
c00161dc:	75 2b                	jne    c0016209 <sendKeyboardToken(KeyboardToken)+0x373>
c00161de:	a1 a4 f3 02 c0       	mov    eax,ds:0xc002f3a4
c00161e3:	85 c0                	test   eax,eax
c00161e5:	74 18                	je     c00161ff <sendKeyboardToken(KeyboardToken)+0x369>
c00161e7:	a1 a4 f3 02 c0       	mov    eax,ds:0xc002f3a4
c00161ec:	0f b6 c0             	movzx  eax,al
c00161ef:	83 ec 0c             	sub    esp,0xc
c00161f2:	50                   	push   eax
c00161f3:	e8 e0 fb ff ff       	call   c0015dd8 <sendKeyToTerminal(unsigned char)>
c00161f8:	83 c4 10             	add    esp,0x10
c00161fb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161ff:	c7 05 a4 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f3a4,0x0
c0016209:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001620c:	83 f0 01             	xor    eax,0x1
c001620f:	84 c0                	test   al,al
c0016211:	74 4c                	je     c001625f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016213:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016216:	83 f0 01             	xor    eax,0x1
c0016219:	84 c0                	test   al,al
c001621b:	74 42                	je     c001625f <sendKeyboardToken(KeyboardToken)+0x3c9>
c001621d:	a0 a0 f0 02 c0       	mov    al,ds:0xc002f0a0
c0016222:	83 f0 01             	xor    eax,0x1
c0016225:	84 c0                	test   al,al
c0016227:	74 36                	je     c001625f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001622c:	66 83 f8 1f          	cmp    ax,0x1f
c0016230:	76 09                	jbe    c001623b <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016235:	66 83 f8 7e          	cmp    ax,0x7e
c0016239:	76 12                	jbe    c001624d <sendKeyboardToken(KeyboardToken)+0x3b7>
c001623b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623e:	66 83 f8 0a          	cmp    ax,0xa
c0016242:	74 09                	je     c001624d <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016247:	66 83 f8 08          	cmp    ax,0x8
c001624b:	75 12                	jne    c001625f <sendKeyboardToken(KeyboardToken)+0x3c9>
c001624d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016250:	0f b6 c0             	movzx  eax,al
c0016253:	83 ec 0c             	sub    esp,0xc
c0016256:	50                   	push   eax
c0016257:	e8 7c fb ff ff       	call   c0015dd8 <sendKeyToTerminal(unsigned char)>
c001625c:	83 c4 10             	add    esp,0x10
c001625f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016262:	83 f0 01             	xor    eax,0x1
c0016265:	84 c0                	test   al,al
c0016267:	74 4f                	je     c00162b8 <sendKeyboardToken(KeyboardToken)+0x422>
c0016269:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001626c:	83 f0 01             	xor    eax,0x1
c001626f:	84 c0                	test   al,al
c0016271:	74 45                	je     c00162b8 <sendKeyboardToken(KeyboardToken)+0x422>
c0016273:	a0 a0 f0 02 c0       	mov    al,ds:0xc002f0a0
c0016278:	84 c0                	test   al,al
c001627a:	74 3c                	je     c00162b8 <sendKeyboardToken(KeyboardToken)+0x422>
c001627c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001627f:	66 83 f8 3f          	cmp    ax,0x3f
c0016283:	76 33                	jbe    c00162b8 <sendKeyboardToken(KeyboardToken)+0x422>
c0016285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016288:	66 83 f8 7f          	cmp    ax,0x7f
c001628c:	77 2a                	ja     c00162b8 <sendKeyboardToken(KeyboardToken)+0x422>
c001628e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016291:	88 c2                	mov    dl,al
c0016293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016296:	66 83 f8 5f          	cmp    ax,0x5f
c001629a:	76 04                	jbe    c00162a0 <sendKeyboardToken(KeyboardToken)+0x40a>
c001629c:	b0 20                	mov    al,0x20
c001629e:	eb 02                	jmp    c00162a2 <sendKeyboardToken(KeyboardToken)+0x40c>
c00162a0:	b0 00                	mov    al,0x0
c00162a2:	29 c2                	sub    edx,eax
c00162a4:	88 d0                	mov    al,dl
c00162a6:	83 e8 40             	sub    eax,0x40
c00162a9:	0f b6 c0             	movzx  eax,al
c00162ac:	83 ec 0c             	sub    esp,0xc
c00162af:	50                   	push   eax
c00162b0:	e8 23 fb ff ff       	call   c0015dd8 <sendKeyToTerminal(unsigned char)>
c00162b5:	83 c4 10             	add    esp,0x10
c00162b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162bb:	66 3d 00 03          	cmp    ax,0x300
c00162bf:	75 0f                	jne    c00162d0 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162c1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162c4:	83 f0 01             	xor    eax,0x1
c00162c7:	84 c0                	test   al,al
c00162c9:	74 05                	je     c00162d0 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162cb:	e8 36 aa ff ff       	call   c0010d06 <doTerminalCycle()>
c00162d0:	90                   	nop
c00162d1:	c9                   	leave  
c00162d2:	c3                   	ret    

c00162d3 <clearInternalKeybuffer(VgaText*)>:
c00162d3:	55                   	push   ebp
c00162d4:	89 e5                	mov    ebp,esp
c00162d6:	83 ec 08             	sub    esp,0x8
c00162d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162dc:	05 98 01 00 00       	add    eax,0x198
c00162e1:	83 ec 0c             	sub    esp,0xc
c00162e4:	50                   	push   eax
c00162e5:	e8 ce a4 fe ff       	call   c00007b8 <strlen>
c00162ea:	83 c4 10             	add    esp,0x10
c00162ed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162f0:	81 c2 98 01 00 00    	add    edx,0x198
c00162f6:	83 ec 04             	sub    esp,0x4
c00162f9:	50                   	push   eax
c00162fa:	6a 00                	push   0x0
c00162fc:	52                   	push   edx
c00162fd:	e8 9a a4 fe ff       	call   c000079c <memset>
c0016302:	83 c4 10             	add    esp,0x10
c0016305:	90                   	nop
c0016306:	c9                   	leave  
c0016307:	c3                   	ret    

c0016308 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016308:	55                   	push   ebp
c0016309:	89 e5                	mov    ebp,esp
c001630b:	83 ec 18             	sub    esp,0x18
c001630e:	a1 88 ef 02 c0       	mov    eax,ds:0xc002ef88
c0016313:	85 c0                	test   eax,eax
c0016315:	74 2a                	je     c0016341 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0016317:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001631d:	8b 0d 88 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002ef88
c0016323:	83 ec 04             	sub    esp,0x4
c0016326:	68 a0 ef 02 c0       	push   0xc002efa0
c001632b:	83 ec 08             	sub    esp,0x8
c001632e:	89 e2                	mov    edx,esp
c0016330:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0016333:	89 02                	mov    DWORD PTR [edx],eax
c0016335:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0016338:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001633c:	ff d1                	call   ecx
c001633e:	83 c4 10             	add    esp,0x10
c0016341:	83 ec 0c             	sub    esp,0xc
c0016344:	68 03 ba 02 c0       	push   0xc002ba03
c0016349:	e8 f7 ca ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001634e:	83 c4 10             	add    esp,0x10
c0016351:	fb                   	sti    
c0016352:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016359:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001635d:	0f 84 a1 00 00 00    	je     c0016404 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0016363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016366:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c001636c:	84 c0                	test   al,al
c001636e:	75 28                	jne    c0016398 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0016370:	fa                   	cli    
c0016371:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0016376:	40                   	inc    eax
c0016377:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001637c:	e8 85 80 00 00       	call   c001e406 <schedule()>
c0016381:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0016386:	48                   	dec    eax
c0016387:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001638c:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0016391:	85 c0                	test   eax,eax
c0016393:	75 ce                	jne    c0016363 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016395:	fb                   	sti    
c0016396:	eb cb                	jmp    c0016363 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016398:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001639b:	8d 50 01             	lea    edx,[eax+0x1]
c001639e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00163a1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163a4:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c00163aa:	88 10                	mov    BYTE PTR [eax],dl
c00163ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163af:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00163b5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163bb:	05 98 01 00 00       	add    eax,0x198
c00163c0:	83 ec 0c             	sub    esp,0xc
c00163c3:	50                   	push   eax
c00163c4:	e8 ef a3 fe ff       	call   c00007b8 <strlen>
c00163c9:	83 c4 10             	add    esp,0x10
c00163cc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163cf:	81 c2 98 01 00 00    	add    edx,0x198
c00163d5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163d8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163db:	81 c2 98 01 00 00    	add    edx,0x198
c00163e1:	83 ec 04             	sub    esp,0x4
c00163e4:	50                   	push   eax
c00163e5:	51                   	push   ecx
c00163e6:	52                   	push   edx
c00163e7:	e8 b4 a2 fe ff       	call   c00006a0 <memmove>
c00163ec:	83 c4 10             	add    esp,0x10
c00163ef:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163f2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163f5:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00163f9:	0f 85 5a ff ff ff    	jne    c0016359 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c00163ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016402:	eb 03                	jmp    c0016407 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0016404:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016407:	c9                   	leave  
c0016408:	c3                   	ret    
c0016409:	90                   	nop

c001640a <Keyboard::Keyboard(char const*)>:
c001640a:	83 ec 0c             	sub    esp,0xc
c001640d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016411:	83 ec 08             	sub    esp,0x8
c0016414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016418:	50                   	push   eax
c0016419:	e8 4c e0 ff ff       	call   c001446a <Device::Device(char const*)>
c001641e:	83 c4 10             	add    esp,0x10
c0016421:	ba 24 ba 02 c0       	mov    edx,0xc002ba24
c0016426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001642a:	89 10                	mov    DWORD PTR [eax],edx
c001642c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016430:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001643a:	c6 05 84 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef84,0x1
c0016441:	90                   	nop
c0016442:	83 c4 0c             	add    esp,0xc
c0016445:	c3                   	ret    

c0016446 <Keyboard::~Keyboard()>:
c0016446:	83 ec 0c             	sub    esp,0xc
c0016449:	ba 24 ba 02 c0       	mov    edx,0xc002ba24
c001644e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016452:	89 10                	mov    DWORD PTR [eax],edx
c0016454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016458:	83 ec 0c             	sub    esp,0xc
c001645b:	50                   	push   eax
c001645c:	e8 eb dc ff ff       	call   c001414c <Device::~Device()>
c0016461:	83 c4 10             	add    esp,0x10
c0016464:	90                   	nop
c0016465:	83 c4 0c             	add    esp,0xc
c0016468:	c3                   	ret    
c0016469:	90                   	nop

c001646a <Keyboard::~Keyboard()>:
c001646a:	83 ec 0c             	sub    esp,0xc
c001646d:	83 ec 0c             	sub    esp,0xc
c0016470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016474:	e8 cd ff ff ff       	call   c0016446 <Keyboard::~Keyboard()>
c0016479:	83 c4 10             	add    esp,0x10
c001647c:	83 ec 08             	sub    esp,0x8
c001647f:	68 5c 01 00 00       	push   0x15c
c0016484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016488:	e8 d8 c8 ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c001648d:	83 c4 10             	add    esp,0x10
c0016490:	83 c4 0c             	add    esp,0xc
c0016493:	c3                   	ret    

c0016494 <LogicalDisk::close(int, int, void*)>:
c0016494:	83 c8 ff             	or     eax,0xffffffff
c0016497:	c3                   	ret    

c0016498 <LogicalDisk::~LogicalDisk()>:
c0016498:	83 ec 0c             	sub    esp,0xc
c001649b:	ba d4 ba 02 c0       	mov    edx,0xc002bad4
c00164a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164a4:	89 10                	mov    DWORD PTR [eax],edx
c00164a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164aa:	83 ec 0c             	sub    esp,0xc
c00164ad:	50                   	push   eax
c00164ae:	e8 99 dc ff ff       	call   c001414c <Device::~Device()>
c00164b3:	83 c4 10             	add    esp,0x10
c00164b6:	90                   	nop
c00164b7:	83 c4 0c             	add    esp,0xc
c00164ba:	c3                   	ret    
c00164bb:	90                   	nop

c00164bc <LogicalDisk::~LogicalDisk()>:
c00164bc:	83 ec 0c             	sub    esp,0xc
c00164bf:	83 ec 0c             	sub    esp,0xc
c00164c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c6:	e8 cd ff ff ff       	call   c0016498 <LogicalDisk::~LogicalDisk()>
c00164cb:	83 c4 10             	add    esp,0x10
c00164ce:	83 ec 08             	sub    esp,0x8
c00164d1:	68 74 01 00 00       	push   0x174
c00164d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164da:	e8 86 c8 ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c00164df:	83 c4 10             	add    esp,0x10
c00164e2:	83 c4 0c             	add    esp,0xc
c00164e5:	c3                   	ret    

c00164e6 <LogicalDisk::open(int, int, void*)>:
c00164e6:	83 ec 18             	sub    esp,0x18
c00164e9:	68 50 ba 02 c0       	push   0xc002ba50
c00164ee:	e8 12 43 00 00       	call   c001a805 <Krnl::panic(char const*)>
c00164f3:	83 c8 ff             	or     eax,0xffffffff
c00164f6:	83 c4 1c             	add    esp,0x1c
c00164f9:	c3                   	ret    

c00164fa <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00164fa:	53                   	push   ebx
c00164fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00164ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016503:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016507:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001650d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016513:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016519:	77 10                	ja     c001652b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001651b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016521:	89 d3                	mov    ebx,edx
c0016523:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016529:	72 05                	jb     c0016530 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001652b:	83 c8 ff             	or     eax,0xffffffff
c001652e:	89 c2                	mov    edx,eax
c0016530:	5b                   	pop    ebx
c0016531:	c3                   	ret    

c0016532 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016532:	56                   	push   esi
c0016533:	83 c8 ff             	or     eax,0xffffffff
c0016536:	53                   	push   ebx
c0016537:	89 c2                	mov    edx,eax
c0016539:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001653d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016541:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016545:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001654b:	77 27                	ja     c0016574 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001654d:	89 d8                	mov    eax,ebx
c001654f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016555:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001655b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016560:	89 c2                	mov    edx,eax
c0016562:	73 10                	jae    c0016574 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016564:	89 c8                	mov    eax,ecx
c0016566:	89 da                	mov    edx,ebx
c0016568:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001656e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016574:	5b                   	pop    ebx
c0016575:	5e                   	pop    esi
c0016576:	c3                   	ret    
c0016577:	90                   	nop

c0016578 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016578:	83 ec 1c             	sub    esp,0x1c
c001657b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001657f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016583:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016587:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001658b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001658f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016592:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016596:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001659a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001659e:	83 ec 08             	sub    esp,0x8
c00165a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165a5:	50                   	push   eax
c00165a6:	e8 bf de ff ff       	call   c001446a <Device::Device(char const*)>
c00165ab:	83 c4 10             	add    esp,0x10
c00165ae:	ba d4 ba 02 c0       	mov    edx,0xc002bad4
c00165b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b7:	89 10                	mov    DWORD PTR [eax],edx
c00165b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165bd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d3:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165dd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165e9:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165ef:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165f5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165f9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00165fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016600:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016606:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001660c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016610:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016614:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001661a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001661e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016628:	90                   	nop
c0016629:	83 c4 1c             	add    esp,0x1c
c001662c:	c3                   	ret    
c001662d:	90                   	nop

c001662e <LogicalDisk::assignDriveLetter()>:
c001662e:	55                   	push   ebp
c001662f:	57                   	push   edi
c0016630:	56                   	push   esi
c0016631:	53                   	push   ebx
c0016632:	83 ec 14             	sub    esp,0x14
c0016635:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016639:	8b 3d c0 f3 02 c0    	mov    edi,DWORD PTR ds:0xc002f3c0
c001663f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016645:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016649:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001664f:	8b 3d c4 f3 02 c0    	mov    edi,DWORD PTR ds:0xc002f3c4
c0016655:	3c 01                	cmp    al,0x1
c0016657:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001665b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001665f:	19 c0                	sbb    eax,eax
c0016661:	83 e0 02             	and    eax,0x2
c0016664:	83 c0 41             	add    eax,0x41
c0016667:	0f be e8             	movsx  ebp,al
c001666a:	3c 43                	cmp    al,0x43
c001666c:	75 10                	jne    c001667e <LogicalDisk::assignDriveLetter()+0x50>
c001666e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016675:	75 5d                	jne    c00166d4 <LogicalDisk::assignDriveLetter()+0xa6>
c0016677:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001667c:	75 56                	jne    c00166d4 <LogicalDisk::assignDriveLetter()+0xa6>
c001667e:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016681:	ba 01 00 00 00       	mov    edx,0x1
c0016686:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001668a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001668e:	d3 e2                	shl    edx,cl
c0016690:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016694:	89 d7                	mov    edi,edx
c0016696:	89 d6                	mov    esi,edx
c0016698:	c1 ff 1f             	sar    edi,0x1f
c001669b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001669f:	21 f9                	and    ecx,edi
c00166a1:	09 d1                	or     ecx,edx
c00166a3:	75 2f                	jne    c00166d4 <LogicalDisk::assignDriveLetter()+0xa6>
c00166a5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166ad:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166b3:	09 f2                	or     edx,esi
c00166b5:	89 15 c0 f3 02 c0    	mov    DWORD PTR ds:0xc002f3c0,edx
c00166bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166bf:	09 fa                	or     edx,edi
c00166c1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166c5:	89 15 c4 f3 02 c0    	mov    DWORD PTR ds:0xc002f3c4,edx
c00166cb:	89 1c bd e0 f3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0c20],ebx
c00166d2:	eb 08                	jmp    c00166dc <LogicalDisk::assignDriveLetter()+0xae>
c00166d4:	45                   	inc    ebp
c00166d5:	40                   	inc    eax
c00166d6:	3c 5b                	cmp    al,0x5b
c00166d8:	75 90                	jne    c001666a <LogicalDisk::assignDriveLetter()+0x3c>
c00166da:	31 c0                	xor    eax,eax
c00166dc:	83 c4 14             	add    esp,0x14
c00166df:	5b                   	pop    ebx
c00166e0:	5e                   	pop    esi
c00166e1:	5f                   	pop    edi
c00166e2:	5d                   	pop    ebp
c00166e3:	c3                   	ret    

c00166e4 <LogicalDisk::mount()>:
c00166e4:	56                   	push   esi
c00166e5:	53                   	push   ebx
c00166e6:	50                   	push   eax
c00166e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166eb:	8b 1d 54 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef54
c00166f1:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00166fb:	85 db                	test   ebx,ebx
c00166fd:	74 50                	je     c001674f <LogicalDisk::mount()+0x6b>
c00166ff:	50                   	push   eax
c0016700:	50                   	push   eax
c0016701:	ff 35 08 23 03 c0    	push   DWORD PTR ds:0xc0032308
c0016707:	68 74 ba 02 c0       	push   0xc002ba74
c001670c:	e8 34 c7 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0016711:	83 c4 0c             	add    esp,0xc
c0016714:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001671b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001671d:	83 e8 41             	sub    eax,0x41
c0016720:	50                   	push   eax
c0016721:	56                   	push   esi
c0016722:	53                   	push   ebx
c0016723:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016726:	83 c4 10             	add    esp,0x10
c0016729:	84 c0                	test   al,al
c001672b:	74 08                	je     c0016735 <LogicalDisk::mount()+0x51>
c001672d:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016733:	eb 1c                	jmp    c0016751 <LogicalDisk::mount()+0x6d>
c0016735:	51                   	push   ecx
c0016736:	51                   	push   ecx
c0016737:	ff 35 08 23 03 c0    	push   DWORD PTR ds:0xc0032308
c001673d:	68 8f ba 02 c0       	push   0xc002ba8f
c0016742:	e8 fe c6 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0016747:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001674a:	83 c4 10             	add    esp,0x10
c001674d:	eb ac                	jmp    c00166fb <LogicalDisk::mount()+0x17>
c001674f:	31 c0                	xor    eax,eax
c0016751:	5a                   	pop    edx
c0016752:	5b                   	pop    ebx
c0016753:	5e                   	pop    esi
c0016754:	c3                   	ret    
c0016755:	90                   	nop

c0016756 <LogicalDisk::unmount()>:
c0016756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001675a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016764:	c3                   	ret    
c0016765:	90                   	nop

c0016766 <LogicalDisk::eject()>:
c0016766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001676a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016770:	8b 10                	mov    edx,DWORD PTR [eax]
c0016772:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016776:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016779:	90                   	nop

c001677a <LogicalDisk::unassignDriveLetter()>:
c001677a:	57                   	push   edi
c001677b:	56                   	push   esi
c001677c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016780:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016787:	84 c9                	test   cl,cl
c0016789:	75 0f                	jne    c001679a <LogicalDisk::unassignDriveLetter()+0x20>
c001678b:	c7 44 24 0c aa ba 02 c0 	mov    DWORD PTR [esp+0xc],0xc002baaa
c0016793:	5e                   	pop    esi
c0016794:	5f                   	pop    edi
c0016795:	e9 6b 40 00 00       	jmp    c001a805 <Krnl::panic(char const*)>
c001679a:	83 e9 41             	sub    ecx,0x41
c001679d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167a4:	b8 01 00 00 00       	mov    eax,0x1
c00167a9:	c7 04 8d e0 f3 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0c20],0x0
c00167b4:	d3 e0                	shl    eax,cl
c00167b6:	89 c7                	mov    edi,eax
c00167b8:	f7 d0                	not    eax
c00167ba:	c1 ff 1f             	sar    edi,0x1f
c00167bd:	21 05 c0 f3 02 c0    	and    DWORD PTR ds:0xc002f3c0,eax
c00167c3:	89 fe                	mov    esi,edi
c00167c5:	f7 d6                	not    esi
c00167c7:	21 35 c4 f3 02 c0    	and    DWORD PTR ds:0xc002f3c4,esi
c00167cd:	5e                   	pop    esi
c00167ce:	5f                   	pop    edi
c00167cf:	c3                   	ret    

c00167d0 <LogicalDisk::read(unsigned long long, int, void*)>:
c00167d0:	57                   	push   edi
c00167d1:	56                   	push   esi
c00167d2:	53                   	push   ebx
c00167d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167db:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167e3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167e9:	77 41                	ja     c001682c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167eb:	99                   	cdq    
c00167ec:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167f2:	01 c8                	add    eax,ecx
c00167f4:	11 da                	adc    edx,ebx
c00167f6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167fc:	19 d7                	sbb    edi,edx
c00167fe:	72 33                	jb     c0016833 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016800:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016806:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001680c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016810:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016814:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001681a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016820:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016824:	5b                   	pop    ebx
c0016825:	5e                   	pop    esi
c0016826:	5f                   	pop    edi
c0016827:	e9 f8 0a 00 00       	jmp    c0017324 <VCache::read(unsigned long long, int, void*)>
c001682c:	b8 05 00 00 00       	mov    eax,0x5
c0016831:	eb 05                	jmp    c0016838 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016833:	b8 07 00 00 00       	mov    eax,0x7
c0016838:	5b                   	pop    ebx
c0016839:	5e                   	pop    esi
c001683a:	5f                   	pop    edi
c001683b:	c3                   	ret    

c001683c <LogicalDisk::write(unsigned long long, int, void*)>:
c001683c:	57                   	push   edi
c001683d:	56                   	push   esi
c001683e:	53                   	push   ebx
c001683f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016843:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016847:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001684b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001684f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016855:	77 41                	ja     c0016898 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016857:	99                   	cdq    
c0016858:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001685e:	01 c8                	add    eax,ecx
c0016860:	11 da                	adc    edx,ebx
c0016862:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016868:	19 d7                	sbb    edi,edx
c001686a:	72 33                	jb     c001689f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001686c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016872:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016878:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001687c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016880:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016886:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001688c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016890:	5b                   	pop    ebx
c0016891:	5e                   	pop    esi
c0016892:	5f                   	pop    edi
c0016893:	e9 96 09 00 00       	jmp    c001722e <VCache::write(unsigned long long, int, void*)>
c0016898:	b8 05 00 00 00       	mov    eax,0x5
c001689d:	eb 05                	jmp    c00168a4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001689f:	b8 07 00 00 00       	mov    eax,0x7
c00168a4:	5b                   	pop    ebx
c00168a5:	5e                   	pop    esi
c00168a6:	5f                   	pop    edi
c00168a7:	c3                   	ret    

c00168a8 <Mouse::Mouse(char const*)>:
c00168a8:	83 ec 0c             	sub    esp,0xc
c00168ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168af:	83 ec 08             	sub    esp,0x8
c00168b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168b6:	50                   	push   eax
c00168b7:	e8 ae db ff ff       	call   c001446a <Device::Device(char const*)>
c00168bc:	83 c4 10             	add    esp,0x10
c00168bf:	ba 00 bb 02 c0       	mov    edx,0xc002bb00
c00168c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168c8:	89 10                	mov    DWORD PTR [eax],edx
c00168ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ce:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168d8:	90                   	nop
c00168d9:	83 c4 0c             	add    esp,0xc
c00168dc:	c3                   	ret    
c00168dd:	90                   	nop

c00168de <Mouse::~Mouse()>:
c00168de:	83 ec 0c             	sub    esp,0xc
c00168e1:	ba 00 bb 02 c0       	mov    edx,0xc002bb00
c00168e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ea:	89 10                	mov    DWORD PTR [eax],edx
c00168ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f0:	83 ec 0c             	sub    esp,0xc
c00168f3:	50                   	push   eax
c00168f4:	e8 53 d8 ff ff       	call   c001414c <Device::~Device()>
c00168f9:	83 c4 10             	add    esp,0x10
c00168fc:	90                   	nop
c00168fd:	83 c4 0c             	add    esp,0xc
c0016900:	c3                   	ret    
c0016901:	90                   	nop

c0016902 <Mouse::~Mouse()>:
c0016902:	83 ec 0c             	sub    esp,0xc
c0016905:	83 ec 0c             	sub    esp,0xc
c0016908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001690c:	e8 cd ff ff ff       	call   c00168de <Mouse::~Mouse()>
c0016911:	83 c4 10             	add    esp,0x10
c0016914:	83 ec 08             	sub    esp,0x8
c0016917:	68 58 01 00 00       	push   0x158
c001691c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016920:	e8 40 c4 ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0016925:	83 c4 10             	add    esp,0x10
c0016928:	83 c4 0c             	add    esp,0xc
c001692b:	c3                   	ret    

c001692c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001692c:	55                   	push   ebp
c001692d:	57                   	push   edi
c001692e:	56                   	push   esi
c001692f:	53                   	push   ebx
c0016930:	81 ec 20 01 00 00    	sub    esp,0x120
c0016936:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c001693d:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0016944:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001694b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016952:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001695a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001695e:	56                   	push   esi
c001695f:	68 24 bb 02 c0       	push   0xc002bb24
c0016964:	e8 dc c4 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0016969:	58                   	pop    eax
c001696a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016971:	e8 f0 db ff ff       	call   c0014566 <Device::getName()>
c0016976:	5a                   	pop    edx
c0016977:	59                   	pop    ecx
c0016978:	50                   	push   eax
c0016979:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c001697d:	53                   	push   ebx
c001697e:	e8 d5 9e fe ff       	call   c0000858 <strcpy>
c0016983:	5d                   	pop    ebp
c0016984:	58                   	pop    eax
c0016985:	68 55 bb 02 c0       	push   0xc002bb55
c001698a:	53                   	push   ebx
c001698b:	e8 08 a0 fe ff       	call   c0000998 <strcat>
c0016990:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016997:	e8 ea 8e ff ff       	call   c000f886 <malloc>
c001699c:	83 c4 0c             	add    esp,0xc
c001699f:	89 c5                	mov    ebp,eax
c00169a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169a9:	57                   	push   edi
c00169aa:	56                   	push   esi
c00169ab:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169b2:	53                   	push   ebx
c00169b3:	50                   	push   eax
c00169b4:	e8 bf fb ff ff       	call   c0016578 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169b9:	83 c4 14             	add    esp,0x14
c00169bc:	55                   	push   ebp
c00169bd:	e8 6c fc ff ff       	call   c001662e <LogicalDisk::assignDriveLetter()>
c00169c2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00169c5:	0f be d8             	movsx  ebx,al
c00169c8:	e8 17 fd ff ff       	call   c00166e4 <LogicalDisk::mount()>
c00169cd:	58                   	pop    eax
c00169ce:	5a                   	pop    edx
c00169cf:	55                   	push   ebp
c00169d0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169d7:	e8 9e d8 ff ff       	call   c001427a <Device::addChild(Device*)>
c00169dc:	59                   	pop    ecx
c00169dd:	5e                   	pop    esi
c00169de:	53                   	push   ebx
c00169df:	68 60 bb 02 c0       	push   0xc002bb60
c00169e4:	e8 5c c4 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00169e9:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169ef:	5b                   	pop    ebx
c00169f0:	5e                   	pop    esi
c00169f1:	5f                   	pop    edi
c00169f2:	5d                   	pop    ebp
c00169f3:	c3                   	ret    

c00169f4 <createPartitionsForDisk(PhysicalDisk*)>:
c00169f4:	55                   	push   ebp
c00169f5:	57                   	push   edi
c00169f6:	56                   	push   esi
c00169f7:	53                   	push   ebx
c00169f8:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00169fe:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a05:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a0b:	3d 00 02 00 00       	cmp    eax,0x200
c0016a10:	74 27                	je     c0016a39 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a12:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a18:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a1e:	83 ec 10             	sub    esp,0x10
c0016a21:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a25:	99                   	cdq    
c0016a26:	c1 e6 0a             	shl    esi,0xa
c0016a29:	52                   	push   edx
c0016a2a:	89 fd                	mov    ebp,edi
c0016a2c:	50                   	push   eax
c0016a2d:	55                   	push   ebp
c0016a2e:	56                   	push   esi
c0016a2f:	e8 00 07 01 00       	call   c0027134 <__udivdi3>
c0016a34:	e9 b1 00 00 00       	jmp    c0016aea <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a39:	83 ec 0c             	sub    esp,0xc
c0016a3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a3e:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a42:	56                   	push   esi
c0016a43:	6a 01                	push   0x1
c0016a45:	6a 00                	push   0x0
c0016a47:	6a 00                	push   0x0
c0016a49:	53                   	push   ebx
c0016a4a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a4d:	83 c4 20             	add    esp,0x20
c0016a50:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a58:	75 0a                	jne    c0016a64 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a5a:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a62:	74 2c                	je     c0016a90 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a64:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a6a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a70:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a76:	83 ec 10             	sub    esp,0x10
c0016a79:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a7d:	89 f7                	mov    edi,esi
c0016a7f:	c1 e0 0a             	shl    eax,0xa
c0016a82:	c1 ff 1f             	sar    edi,0x1f
c0016a85:	57                   	push   edi
c0016a86:	56                   	push   esi
c0016a87:	52                   	push   edx
c0016a88:	50                   	push   eax
c0016a89:	e8 a6 06 01 00       	call   c0027134 <__udivdi3>
c0016a8e:	eb 5a                	jmp    c0016aea <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a90:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a97:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a9e:	83 e1 7f             	and    ecx,0x7f
c0016aa1:	83 e0 7f             	and    eax,0x7f
c0016aa4:	01 c1                	add    ecx,eax
c0016aa6:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016aad:	83 e0 7f             	and    eax,0x7f
c0016ab0:	01 c1                	add    ecx,eax
c0016ab2:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016ab9:	83 e0 7f             	and    eax,0x7f
c0016abc:	00 c1                	add    cl,al
c0016abe:	74 41                	je     c0016b01 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016ac0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ac6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016acc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ad2:	83 ec 10             	sub    esp,0x10
c0016ad5:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ad9:	89 f7                	mov    edi,esi
c0016adb:	c1 e0 0a             	shl    eax,0xa
c0016ade:	c1 ff 1f             	sar    edi,0x1f
c0016ae1:	57                   	push   edi
c0016ae2:	56                   	push   esi
c0016ae3:	52                   	push   edx
c0016ae4:	50                   	push   eax
c0016ae5:	e8 4a 06 01 00       	call   c0027134 <__udivdi3>
c0016aea:	83 c4 14             	add    esp,0x14
c0016aed:	52                   	push   edx
c0016aee:	50                   	push   eax
c0016aef:	6a 00                	push   0x0
c0016af1:	6a 00                	push   0x0
c0016af3:	53                   	push   ebx
c0016af4:	e8 33 fe ff ff       	call   c001692c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016af9:	83 c4 20             	add    esp,0x20
c0016afc:	e9 79 01 00 00       	jmp    c0016c7a <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b01:	89 f0                	mov    eax,esi
c0016b03:	31 f6                	xor    esi,esi
c0016b05:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b0c:	75 02                	jne    c0016b10 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b0e:	89 f1                	mov    ecx,esi
c0016b10:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b17:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b1e:	c1 e2 08             	shl    edx,0x8
c0016b21:	c1 e7 10             	shl    edi,0x10
c0016b24:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b2c:	09 fa                	or     edx,edi
c0016b2e:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b36:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b3d:	83 c0 10             	add    eax,0x10
c0016b40:	09 fa                	or     edx,edi
c0016b42:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b49:	c1 e7 18             	shl    edi,0x18
c0016b4c:	09 fa                	or     edx,edi
c0016b4e:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b55:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b59:	c1 e7 10             	shl    edi,0x10
c0016b5c:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b63:	c1 e2 08             	shl    edx,0x8
c0016b66:	09 fa                	or     edx,edi
c0016b68:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b6f:	09 fa                	or     edx,edi
c0016b71:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b78:	c1 e7 18             	shl    edi,0x18
c0016b7b:	09 fa                	or     edx,edi
c0016b7d:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b81:	46                   	inc    esi
c0016b82:	83 fe 04             	cmp    esi,0x4
c0016b85:	0f 85 7a ff ff ff    	jne    c0016b05 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b8f:	83 f0 01             	xor    eax,0x1
c0016b92:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b96:	75 57                	jne    c0016bef <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b9c:	83 f0 01             	xor    eax,0x1
c0016b9f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016ba3:	75 4a                	jne    c0016bef <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016ba5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016ba9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016bb1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016bb9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016bbf:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016bc5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bcb:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bcf:	89 f7                	mov    edi,esi
c0016bd1:	c1 e0 0a             	shl    eax,0xa
c0016bd4:	c1 ff 1f             	sar    edi,0x1f
c0016bd7:	57                   	push   edi
c0016bd8:	56                   	push   esi
c0016bd9:	52                   	push   edx
c0016bda:	50                   	push   eax
c0016bdb:	e8 54 05 01 00       	call   c0027134 <__udivdi3>
c0016be0:	83 c4 10             	add    esp,0x10
c0016be3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016be7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016beb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016bef:	84 c9                	test   cl,cl
c0016bf1:	74 53                	je     c0016c46 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016bf3:	0f b6 c9             	movzx  ecx,cl
c0016bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bfa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016bfe:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c02:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c0a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c0e:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c12:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c16:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c1a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c26:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c2a:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c2e:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c32:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c36:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c3a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c3e:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c42:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c46:	31 ed                	xor    ebp,ebp
c0016c48:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c4c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c50:	89 f8                	mov    eax,edi
c0016c52:	09 f0                	or     eax,esi
c0016c54:	74 1e                	je     c0016c74 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c56:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c5a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c5e:	89 d1                	mov    ecx,edx
c0016c60:	09 c1                	or     ecx,eax
c0016c62:	74 10                	je     c0016c74 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c64:	83 ec 0c             	sub    esp,0xc
c0016c67:	57                   	push   edi
c0016c68:	56                   	push   esi
c0016c69:	52                   	push   edx
c0016c6a:	50                   	push   eax
c0016c6b:	53                   	push   ebx
c0016c6c:	e8 bb fc ff ff       	call   c001692c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c71:	83 c4 20             	add    esp,0x20
c0016c74:	45                   	inc    ebp
c0016c75:	83 fd 04             	cmp    ebp,0x4
c0016c78:	75 ce                	jne    c0016c48 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c7a:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c80:	5b                   	pop    ebx
c0016c81:	5e                   	pop    esi
c0016c82:	5f                   	pop    edi
c0016c83:	5d                   	pop    ebp
c0016c84:	c3                   	ret    
c0016c85:	90                   	nop

c0016c86 <Serial::Serial(char const*)>:
c0016c86:	83 ec 0c             	sub    esp,0xc
c0016c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8d:	83 ec 08             	sub    esp,0x8
c0016c90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c94:	50                   	push   eax
c0016c95:	e8 d0 d7 ff ff       	call   c001446a <Device::Device(char const*)>
c0016c9a:	83 c4 10             	add    esp,0x10
c0016c9d:	ba 8c bb 02 c0       	mov    edx,0xc002bb8c
c0016ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ca6:	89 10                	mov    DWORD PTR [eax],edx
c0016ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cac:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016cb6:	90                   	nop
c0016cb7:	83 c4 0c             	add    esp,0xc
c0016cba:	c3                   	ret    
c0016cbb:	90                   	nop

c0016cbc <Serial::~Serial()>:
c0016cbc:	83 ec 0c             	sub    esp,0xc
c0016cbf:	ba 8c bb 02 c0       	mov    edx,0xc002bb8c
c0016cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc8:	89 10                	mov    DWORD PTR [eax],edx
c0016cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cce:	83 ec 0c             	sub    esp,0xc
c0016cd1:	50                   	push   eax
c0016cd2:	e8 75 d4 ff ff       	call   c001414c <Device::~Device()>
c0016cd7:	83 c4 10             	add    esp,0x10
c0016cda:	90                   	nop
c0016cdb:	83 c4 0c             	add    esp,0xc
c0016cde:	c3                   	ret    
c0016cdf:	90                   	nop

c0016ce0 <Serial::~Serial()>:
c0016ce0:	83 ec 0c             	sub    esp,0xc
c0016ce3:	83 ec 0c             	sub    esp,0xc
c0016ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cea:	e8 cd ff ff ff       	call   c0016cbc <Serial::~Serial()>
c0016cef:	83 c4 10             	add    esp,0x10
c0016cf2:	83 ec 08             	sub    esp,0x8
c0016cf5:	68 58 01 00 00       	push   0x158
c0016cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cfe:	e8 62 c0 ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	83 c4 0c             	add    esp,0xc
c0016d09:	c3                   	ret    

c0016d0a <Timer::Timer(char const*)>:
c0016d0a:	83 ec 0c             	sub    esp,0xc
c0016d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d11:	83 ec 08             	sub    esp,0x8
c0016d14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d18:	50                   	push   eax
c0016d19:	e8 4c d7 ff ff       	call   c001446a <Device::Device(char const*)>
c0016d1e:	83 c4 10             	add    esp,0x10
c0016d21:	ba d0 bb 02 c0       	mov    edx,0xc002bbd0
c0016d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d2a:	89 10                	mov    DWORD PTR [eax],edx
c0016d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d30:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d3a:	90                   	nop
c0016d3b:	83 c4 0c             	add    esp,0xc
c0016d3e:	c3                   	ret    
c0016d3f:	90                   	nop

c0016d40 <Timer::~Timer()>:
c0016d40:	83 ec 0c             	sub    esp,0xc
c0016d43:	ba d0 bb 02 c0       	mov    edx,0xc002bbd0
c0016d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d4c:	89 10                	mov    DWORD PTR [eax],edx
c0016d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d52:	83 ec 0c             	sub    esp,0xc
c0016d55:	50                   	push   eax
c0016d56:	e8 f1 d3 ff ff       	call   c001414c <Device::~Device()>
c0016d5b:	83 c4 10             	add    esp,0x10
c0016d5e:	90                   	nop
c0016d5f:	83 c4 0c             	add    esp,0xc
c0016d62:	c3                   	ret    
c0016d63:	90                   	nop

c0016d64 <Timer::~Timer()>:
c0016d64:	83 ec 0c             	sub    esp,0xc
c0016d67:	83 ec 0c             	sub    esp,0xc
c0016d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d6e:	e8 cd ff ff ff       	call   c0016d40 <Timer::~Timer()>
c0016d73:	83 c4 10             	add    esp,0x10
c0016d76:	83 ec 08             	sub    esp,0x8
c0016d79:	68 5c 01 00 00       	push   0x15c
c0016d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d82:	e8 de bf ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0016d87:	83 c4 10             	add    esp,0x10
c0016d8a:	83 c4 0c             	add    esp,0xc
c0016d8d:	c3                   	ret    

c0016d8e <Timer::read()>:
c0016d8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d92:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d98:	c3                   	ret    

c0016d99 <timerHandler(unsigned long long)>:
c0016d99:	55                   	push   ebp
c0016d9a:	57                   	push   edi
c0016d9b:	56                   	push   esi
c0016d9c:	53                   	push   ebx
c0016d9d:	83 ec 0c             	sub    esp,0xc
c0016da0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016da4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016da8:	01 35 50 f4 02 c0    	add    DWORD PTR ds:0xc002f450,esi
c0016dae:	11 3d 54 f4 02 c0    	adc    DWORD PTR ds:0xc002f454,edi
c0016db4:	80 3d cd ed 02 c0 00 	cmp    BYTE PTR ds:0xc002edcd,0x0
c0016dbb:	0f 84 42 01 00 00    	je     c0016f03 <timerHandler(unsigned long long)+0x16a>
c0016dc1:	fa                   	cli    
c0016dc2:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c0016dc8:	83 ec 0c             	sub    esp,0xc
c0016dcb:	ff 05 04 23 03 c0    	inc    DWORD PTR ds:0xc0032304
c0016dd1:	68 18 23 03 c0       	push   0xc0032318
c0016dd6:	e8 df 23 01 00       	call   c00291ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ddb:	83 c4 10             	add    esp,0x10
c0016dde:	84 c0                	test   al,al
c0016de0:	0f 85 a2 00 00 00    	jne    c0016e88 <timerHandler(unsigned long long)+0xef>
c0016de6:	83 ec 0c             	sub    esp,0xc
c0016de9:	68 18 23 03 c0       	push   0xc0032318
c0016dee:	e8 e3 23 01 00       	call   c00291d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016df3:	83 c4 10             	add    esp,0x10
c0016df6:	89 c3                	mov    ebx,eax
c0016df8:	83 ec 0c             	sub    esp,0xc
c0016dfb:	68 18 23 03 c0       	push   0xc0032318
c0016e00:	e8 d1 23 01 00       	call   c00291d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e05:	c7 04 24 18 23 03 c0 	mov    DWORD PTR [esp],0xc0032318
c0016e0c:	89 c5                	mov    ebp,eax
c0016e0e:	e8 cb 23 01 00       	call   c00291de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e13:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e16:	83 c4 10             	add    esp,0x10
c0016e19:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e1c:	39 15 50 f4 02 c0    	cmp    DWORD PTR ds:0xc002f450,edx
c0016e22:	a1 54 f4 02 c0       	mov    eax,ds:0xc002f454
c0016e27:	19 c8                	sbb    eax,ecx
c0016e29:	72 21                	jb     c0016e4c <timerHandler(unsigned long long)+0xb3>
c0016e2b:	83 ec 0c             	sub    esp,0xc
c0016e2e:	55                   	push   ebp
c0016e2f:	e8 96 7a 00 00       	call   c001e8ca <unblockTask(ThreadControlBlock*)>
c0016e34:	83 c4 10             	add    esp,0x10
c0016e37:	39 eb                	cmp    ebx,ebp
c0016e39:	75 21                	jne    c0016e5c <timerHandler(unsigned long long)+0xc3>
c0016e3b:	83 ec 0c             	sub    esp,0xc
c0016e3e:	68 18 23 03 c0       	push   0xc0032318
c0016e43:	e8 8e 23 01 00       	call   c00291d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e48:	89 c3                	mov    ebx,eax
c0016e4a:	eb 0d                	jmp    c0016e59 <timerHandler(unsigned long long)+0xc0>
c0016e4c:	50                   	push   eax
c0016e4d:	50                   	push   eax
c0016e4e:	55                   	push   ebp
c0016e4f:	68 18 23 03 c0       	push   0xc0032318
c0016e54:	e8 33 24 01 00       	call   c002928c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e59:	83 c4 10             	add    esp,0x10
c0016e5c:	83 ec 0c             	sub    esp,0xc
c0016e5f:	68 18 23 03 c0       	push   0xc0032318
c0016e64:	e8 51 23 01 00       	call   c00291ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e69:	83 c4 10             	add    esp,0x10
c0016e6c:	84 c0                	test   al,al
c0016e6e:	75 18                	jne    c0016e88 <timerHandler(unsigned long long)+0xef>
c0016e70:	83 ec 0c             	sub    esp,0xc
c0016e73:	68 18 23 03 c0       	push   0xc0032318
c0016e78:	e8 59 23 01 00       	call   c00291d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e7d:	83 c4 10             	add    esp,0x10
c0016e80:	39 d8                	cmp    eax,ebx
c0016e82:	0f 85 70 ff ff ff    	jne    c0016df8 <timerHandler(unsigned long long)+0x5f>
c0016e88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e8d:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016e91:	74 3d                	je     c0016ed0 <timerHandler(unsigned long long)+0x137>
c0016e93:	80 3d cc ed 02 c0 00 	cmp    BYTE PTR ds:0xc002edcc,0x0
c0016e9a:	74 34                	je     c0016ed0 <timerHandler(unsigned long long)+0x137>
c0016e9c:	fa                   	cli    
c0016e9d:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c0016ea3:	31 d2                	xor    edx,edx
c0016ea5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eaa:	89 f9                	mov    ecx,edi
c0016eac:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016eaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eb4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016eb7:	39 c6                	cmp    esi,eax
c0016eb9:	19 d1                	sbb    ecx,edx
c0016ebb:	72 05                	jb     c0016ec2 <timerHandler(unsigned long long)+0x129>
c0016ebd:	e8 44 75 00 00       	call   c001e406 <schedule()>
c0016ec2:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0016ec7:	48                   	dec    eax
c0016ec8:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c0016ecd:	75 01                	jne    c0016ed0 <timerHandler(unsigned long long)+0x137>
c0016ecf:	fb                   	sti    
c0016ed0:	a1 04 23 03 c0       	mov    eax,ds:0xc0032304
c0016ed5:	48                   	dec    eax
c0016ed6:	a3 04 23 03 c0       	mov    ds:0xc0032304,eax
c0016edb:	75 18                	jne    c0016ef5 <timerHandler(unsigned long long)+0x15c>
c0016edd:	83 3d 00 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032300,0x0
c0016ee4:	74 0f                	je     c0016ef5 <timerHandler(unsigned long long)+0x15c>
c0016ee6:	c7 05 00 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032300,0x0
c0016ef0:	e8 11 75 00 00       	call   c001e406 <schedule()>
c0016ef5:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0016efa:	48                   	dec    eax
c0016efb:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c0016f00:	75 01                	jne    c0016f03 <timerHandler(unsigned long long)+0x16a>
c0016f02:	fb                   	sti    
c0016f03:	83 c4 0c             	add    esp,0xc
c0016f06:	5b                   	pop    ebx
c0016f07:	5e                   	pop    esi
c0016f08:	5f                   	pop    edi
c0016f09:	5d                   	pop    ebp
c0016f0a:	c3                   	ret    

c0016f0b <setupTimer(int)>:
c0016f0b:	57                   	push   edi
c0016f0c:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0016f11:	56                   	push   esi
c0016f12:	53                   	push   ebx
c0016f13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f17:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f1d:	83 ec 0c             	sub    esp,0xc
c0016f20:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f26:	e8 3b d6 ff ff       	call   c0014566 <Device::getName()>
c0016f2b:	83 c4 10             	add    esp,0x10
c0016f2e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f31:	0f 85 8d 00 00 00    	jne    c0016fc4 <setupTimer(int)+0xb9>
c0016f37:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0016f3c:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f43:	74 7f                	je     c0016fc4 <setupTimer(int)+0xb9>
c0016f45:	83 ec 0c             	sub    esp,0xc
c0016f48:	68 5c 01 00 00       	push   0x15c
c0016f4d:	e8 34 89 ff ff       	call   c000f886 <malloc>
c0016f52:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f55:	89 c3                	mov    ebx,eax
c0016f57:	e8 a8 fd 00 00       	call   c0026d04 <PIT::PIT()>
c0016f5c:	59                   	pop    ecx
c0016f5d:	5f                   	pop    edi
c0016f5e:	53                   	push   ebx
c0016f5f:	ff 35 c8 ed 02 c0    	push   DWORD PTR ds:0xc002edc8
c0016f65:	e8 10 d3 ff ff       	call   c001427a <Device::addChild(Device*)>
c0016f6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f6c:	6a 00                	push   0x0
c0016f6e:	6a 00                	push   0x0
c0016f70:	56                   	push   esi
c0016f71:	53                   	push   ebx
c0016f72:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f75:	83 c4 14             	add    esp,0x14
c0016f78:	68 60 01 00 00       	push   0x160
c0016f7d:	e8 04 89 ff ff       	call   c000f886 <malloc>
c0016f82:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f85:	89 c7                	mov    edi,eax
c0016f87:	e8 28 fc 00 00       	call   c0026bb4 <APICTimer::APICTimer()>
c0016f8c:	6a 00                	push   0x0
c0016f8e:	6a 00                	push   0x0
c0016f90:	56                   	push   esi
c0016f91:	57                   	push   edi
c0016f92:	e8 1f fb 00 00       	call   c0026ab6 <APICTimer::open(int, int, void*)>
c0016f97:	83 c4 20             	add    esp,0x20
c0016f9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f9c:	6a 00                	push   0x0
c0016f9e:	6a 00                	push   0x0
c0016fa0:	6a 00                	push   0x0
c0016fa2:	53                   	push   ebx
c0016fa3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fa6:	58                   	pop    eax
c0016fa7:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0016fac:	5a                   	pop    edx
c0016fad:	57                   	push   edi
c0016fae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fb4:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fba:	e8 bb d2 ff ff       	call   c001427a <Device::addChild(Device*)>
c0016fbf:	83 c4 10             	add    esp,0x10
c0016fc2:	eb 33                	jmp    c0016ff7 <setupTimer(int)+0xec>
c0016fc4:	83 ec 0c             	sub    esp,0xc
c0016fc7:	68 5c 01 00 00       	push   0x15c
c0016fcc:	e8 b5 88 ff ff       	call   c000f886 <malloc>
c0016fd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fd4:	89 c3                	mov    ebx,eax
c0016fd6:	e8 29 fd 00 00       	call   c0026d04 <PIT::PIT()>
c0016fdb:	58                   	pop    eax
c0016fdc:	5a                   	pop    edx
c0016fdd:	53                   	push   ebx
c0016fde:	ff 35 c8 ed 02 c0    	push   DWORD PTR ds:0xc002edc8
c0016fe4:	e8 91 d2 ff ff       	call   c001427a <Device::addChild(Device*)>
c0016fe9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016feb:	6a 00                	push   0x0
c0016fed:	6a 00                	push   0x0
c0016fef:	56                   	push   esi
c0016ff0:	53                   	push   ebx
c0016ff1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ff4:	83 c4 20             	add    esp,0x20
c0016ff7:	89 d8                	mov    eax,ebx
c0016ff9:	5b                   	pop    ebx
c0016ffa:	5e                   	pop    esi
c0016ffb:	5f                   	pop    edi
c0016ffc:	c3                   	ret    
c0016ffd:	90                   	nop

c0016ffe <VCache::VCache(PhysicalDisk*)>:
c0016ffe:	53                   	push   ebx
c0016fff:	83 ec 18             	sub    esp,0x18
c0017002:	ba 00 bc 02 c0       	mov    edx,0xc002bc00
c0017007:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700b:	89 10                	mov    DWORD PTR [eax],edx
c001700d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017011:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0017018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0017023:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017027:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001702e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017035:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017039:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0017040:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017047:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0017052:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017056:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001705a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705e:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017065:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001706c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017070:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017078:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001707c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017080:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017084:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017088:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001708f:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017097:	83 ec 0c             	sub    esp,0xc
c001709a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001709e:	e8 e3 87 ff ff       	call   c000f886 <malloc>
c00170a3:	83 c4 10             	add    esp,0x10
c00170a6:	89 c3                	mov    ebx,eax
c00170a8:	83 ec 0c             	sub    esp,0xc
c00170ab:	53                   	push   ebx
c00170ac:	e8 ff 70 00 00       	call   c001e1b0 <Mutex::Mutex()>
c00170b1:	83 c4 10             	add    esp,0x10
c00170b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b8:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170bf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170c3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ca:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00170d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170d5:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170df:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170e2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170e6:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170f2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00170f6:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00170f9:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00170fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017100:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017104:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017108:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001710e:	05 00 01 00 00       	add    eax,0x100
c0017113:	c1 e0 04             	shl    eax,0x4
c0017116:	83 ec 0c             	sub    esp,0xc
c0017119:	50                   	push   eax
c001711a:	e8 67 87 ff ff       	call   c000f886 <malloc>
c001711f:	83 c4 10             	add    esp,0x10
c0017122:	89 c2                	mov    edx,eax
c0017124:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017128:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001712b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001712f:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001713a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001713e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017142:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017148:	c1 e0 07             	shl    eax,0x7
c001714b:	83 ec 0c             	sub    esp,0xc
c001714e:	50                   	push   eax
c001714f:	e8 32 87 ff ff       	call   c000f886 <malloc>
c0017154:	83 c4 10             	add    esp,0x10
c0017157:	89 c2                	mov    edx,eax
c0017159:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001715d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017160:	90                   	nop
c0017161:	83 c4 18             	add    esp,0x18
c0017164:	5b                   	pop    ebx
c0017165:	c3                   	ret    

c0017166 <VCache::invalidateReadBuffer()>:
c0017166:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001716a:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017170:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017174:	c3                   	ret    
c0017175:	90                   	nop

c0017176 <VCache::writeWriteBuffer()>:
c0017176:	53                   	push   ebx
c0017177:	83 ec 14             	sub    esp,0x14
c001717a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001717e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017181:	8b 10                	mov    edx,DWORD PTR [eax]
c0017183:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017186:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017189:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001718c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001718f:	50                   	push   eax
c0017190:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017193:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001719a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00171a1:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00171a5:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00171ac:	83 c4 28             	add    esp,0x28
c00171af:	5b                   	pop    ebx
c00171b0:	c3                   	ret    
c00171b1:	90                   	nop

c00171b2 <VCache::~VCache()>:
c00171b2:	83 ec 0c             	sub    esp,0xc
c00171b5:	ba 00 bc 02 c0       	mov    edx,0xc002bc00
c00171ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171be:	89 10                	mov    DWORD PTR [eax],edx
c00171c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171c4:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171c7:	84 c0                	test   al,al
c00171c9:	74 0f                	je     c00171da <VCache::~VCache()+0x28>
c00171cb:	83 ec 0c             	sub    esp,0xc
c00171ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171d2:	e8 9f ff ff ff       	call   c0017176 <VCache::writeWriteBuffer()>
c00171d7:	83 c4 10             	add    esp,0x10
c00171da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171de:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171e1:	83 ec 0c             	sub    esp,0xc
c00171e4:	50                   	push   eax
c00171e5:	e8 ac 86 ff ff       	call   c000f896 <free>
c00171ea:	83 c4 10             	add    esp,0x10
c00171ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171f4:	83 ec 0c             	sub    esp,0xc
c00171f7:	50                   	push   eax
c00171f8:	e8 99 86 ff ff       	call   c000f896 <free>
c00171fd:	83 c4 10             	add    esp,0x10
c0017200:	90                   	nop
c0017201:	83 c4 0c             	add    esp,0xc
c0017204:	c3                   	ret    
c0017205:	90                   	nop

c0017206 <VCache::~VCache()>:
c0017206:	83 ec 0c             	sub    esp,0xc
c0017209:	83 ec 0c             	sub    esp,0xc
c001720c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017210:	e8 9d ff ff ff       	call   c00171b2 <VCache::~VCache()>
c0017215:	83 c4 10             	add    esp,0x10
c0017218:	83 ec 08             	sub    esp,0x8
c001721b:	6a 44                	push   0x44
c001721d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017221:	e8 3f bb ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0017226:	83 c4 10             	add    esp,0x10
c0017229:	83 c4 0c             	add    esp,0xc
c001722c:	c3                   	ret    
c001722d:	90                   	nop

c001722e <VCache::write(unsigned long long, int, void*)>:
c001722e:	55                   	push   ebp
c001722f:	57                   	push   edi
c0017230:	56                   	push   esi
c0017231:	53                   	push   ebx
c0017232:	83 ec 28             	sub    esp,0x28
c0017235:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017239:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001723d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017241:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017245:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017248:	e8 f1 74 00 00       	call   c001e73e <Semaphore::acquire()>
c001724d:	83 c4 10             	add    esp,0x10
c0017250:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017254:	74 0c                	je     c0017262 <VCache::write(unsigned long long, int, void*)+0x34>
c0017256:	83 ec 0c             	sub    esp,0xc
c0017259:	53                   	push   ebx
c001725a:	e8 07 ff ff ff       	call   c0017166 <VCache::invalidateReadBuffer()>
c001725f:	83 c4 10             	add    esp,0x10
c0017262:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017266:	74 66                	je     c00172ce <VCache::write(unsigned long long, int, void*)+0xa0>
c0017268:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001726b:	99                   	cdq    
c001726c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017270:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017273:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017276:	89 c1                	mov    ecx,eax
c0017278:	89 d0                	mov    eax,edx
c001727a:	31 f1                	xor    ecx,esi
c001727c:	31 f8                	xor    eax,edi
c001727e:	89 ca                	mov    edx,ecx
c0017280:	09 c2                	or     edx,eax
c0017282:	75 3e                	jne    c00172c2 <VCache::write(unsigned long long, int, void*)+0x94>
c0017284:	83 fd 01             	cmp    ebp,0x1
c0017287:	75 39                	jne    c00172c2 <VCache::write(unsigned long long, int, void*)+0x94>
c0017289:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001728c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017292:	51                   	push   ecx
c0017293:	50                   	push   eax
c0017294:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017298:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001729c:	0f af c8             	imul   ecx,eax
c001729f:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00172a2:	51                   	push   ecx
c00172a3:	e8 c0 94 fe ff       	call   c0000768 <memcpy>
c00172a8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00172ab:	83 c4 10             	add    esp,0x10
c00172ae:	40                   	inc    eax
c00172af:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00172b2:	83 c0 80             	add    eax,0xffffff80
c00172b5:	75 57                	jne    c001730e <VCache::write(unsigned long long, int, void*)+0xe0>
c00172b7:	83 ec 0c             	sub    esp,0xc
c00172ba:	53                   	push   ebx
c00172bb:	e8 b6 fe ff ff       	call   c0017176 <VCache::writeWriteBuffer()>
c00172c0:	eb 34                	jmp    c00172f6 <VCache::write(unsigned long long, int, void*)+0xc8>
c00172c2:	83 ec 0c             	sub    esp,0xc
c00172c5:	53                   	push   ebx
c00172c6:	e8 ab fe ff ff       	call   c0017176 <VCache::writeWriteBuffer()>
c00172cb:	83 c4 10             	add    esp,0x10
c00172ce:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172d1:	83 fd 7f             	cmp    ebp,0x7f
c00172d4:	7f 25                	jg     c00172fb <VCache::write(unsigned long long, int, void*)+0xcd>
c00172d6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172d9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172dc:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00172df:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172e3:	52                   	push   edx
c00172e4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00172ea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00172ee:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00172f1:	e8 72 94 fe ff       	call   c0000768 <memcpy>
c00172f6:	83 c4 10             	add    esp,0x10
c00172f9:	eb 13                	jmp    c001730e <VCache::write(unsigned long long, int, void*)+0xe0>
c00172fb:	83 ec 0c             	sub    esp,0xc
c00172fe:	8b 10                	mov    edx,DWORD PTR [eax]
c0017300:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017304:	55                   	push   ebp
c0017305:	57                   	push   edi
c0017306:	56                   	push   esi
c0017307:	50                   	push   eax
c0017308:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001730b:	83 c4 20             	add    esp,0x20
c001730e:	83 ec 0c             	sub    esp,0xc
c0017311:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017314:	e8 5f 7b 00 00       	call   c001ee78 <Semaphore::release()>
c0017319:	83 c4 2c             	add    esp,0x2c
c001731c:	31 c0                	xor    eax,eax
c001731e:	5b                   	pop    ebx
c001731f:	5e                   	pop    esi
c0017320:	5f                   	pop    edi
c0017321:	5d                   	pop    ebp
c0017322:	c3                   	ret    
c0017323:	90                   	nop

c0017324 <VCache::read(unsigned long long, int, void*)>:
c0017324:	55                   	push   ebp
c0017325:	57                   	push   edi
c0017326:	56                   	push   esi
c0017327:	53                   	push   ebx
c0017328:	83 ec 28             	sub    esp,0x28
c001732b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001732f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017333:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017337:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001733b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001733f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017343:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017347:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001734a:	e8 ef 73 00 00       	call   c001e73e <Semaphore::acquire()>
c001734f:	83 c4 10             	add    esp,0x10
c0017352:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017356:	74 0c                	je     c0017364 <VCache::read(unsigned long long, int, void*)+0x40>
c0017358:	83 ec 0c             	sub    esp,0xc
c001735b:	53                   	push   ebx
c001735c:	e8 15 fe ff ff       	call   c0017176 <VCache::writeWriteBuffer()>
c0017361:	83 c4 10             	add    esp,0x10
c0017364:	83 fe 01             	cmp    esi,0x1
c0017367:	0f 85 80 00 00 00    	jne    c00173ed <VCache::read(unsigned long long, int, void*)+0xc9>
c001736d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017370:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017377:	75 74                	jne    c00173ed <VCache::read(unsigned long long, int, void*)+0xc9>
c0017379:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001737c:	89 d1                	mov    ecx,edx
c001737e:	f7 d9                	neg    ecx
c0017380:	89 cf                	mov    edi,ecx
c0017382:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017386:	c1 ff 1f             	sar    edi,0x1f
c0017389:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001738c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017390:	89 ce                	mov    esi,ecx
c0017392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017396:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001739a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001739e:	89 cf                	mov    edi,ecx
c00173a0:	74 0a                	je     c00173ac <VCache::read(unsigned long long, int, void*)+0x88>
c00173a2:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00173a5:	75 05                	jne    c00173ac <VCache::read(unsigned long long, int, void*)+0x88>
c00173a7:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00173aa:	74 1c                	je     c00173c8 <VCache::read(unsigned long long, int, void*)+0xa4>
c00173ac:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00173b0:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00173b3:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00173b6:	83 ec 0c             	sub    esp,0xc
c00173b9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00173bb:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00173be:	52                   	push   edx
c00173bf:	57                   	push   edi
c00173c0:	56                   	push   esi
c00173c1:	50                   	push   eax
c00173c2:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00173c5:	83 c4 20             	add    esp,0x20
c00173c8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173cb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00173d1:	50                   	push   eax
c00173d2:	52                   	push   edx
c00173d3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173d6:	48                   	dec    eax
c00173d7:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00173db:	0f af c2             	imul   eax,edx
c00173de:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00173e1:	50                   	push   eax
c00173e2:	55                   	push   ebp
c00173e3:	e8 80 93 fe ff       	call   c0000768 <memcpy>
c00173e8:	83 c4 10             	add    esp,0x10
c00173eb:	eb 21                	jmp    c001740e <VCache::read(unsigned long long, int, void*)+0xea>
c00173ed:	83 ec 0c             	sub    esp,0xc
c00173f0:	53                   	push   ebx
c00173f1:	e8 70 fd ff ff       	call   c0017166 <VCache::invalidateReadBuffer()>
c00173f6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00173fb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173fe:	56                   	push   esi
c00173ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017403:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017407:	50                   	push   eax
c0017408:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001740b:	83 c4 20             	add    esp,0x20
c001740e:	83 ec 0c             	sub    esp,0xc
c0017411:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017414:	e8 5f 7a 00 00       	call   c001ee78 <Semaphore::release()>
c0017419:	83 c4 2c             	add    esp,0x2c
c001741c:	31 c0                	xor    eax,eax
c001741e:	5b                   	pop    ebx
c001741f:	5e                   	pop    esi
c0017420:	5f                   	pop    edi
c0017421:	5d                   	pop    ebp
c0017422:	c3                   	ret    
c0017423:	90                   	nop

c0017424 <Video::putrect(int, int, int, int, unsigned int)>:
c0017424:	55                   	push   ebp
c0017425:	57                   	push   edi
c0017426:	56                   	push   esi
c0017427:	53                   	push   ebx
c0017428:	83 ec 1c             	sub    esp,0x1c
c001742b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001742f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017433:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017437:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001743b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001743f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017443:	01 df                	add    edi,ebx
c0017445:	39 fb                	cmp    ebx,edi
c0017447:	7d 1f                	jge    c0017468 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017449:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001744d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017451:	7d 12                	jge    c0017465 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017453:	8b 16                	mov    edx,DWORD PTR [esi]
c0017455:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017459:	53                   	push   ebx
c001745a:	55                   	push   ebp
c001745b:	45                   	inc    ebp
c001745c:	56                   	push   esi
c001745d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017460:	83 c4 10             	add    esp,0x10
c0017463:	eb e8                	jmp    c001744d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017465:	43                   	inc    ebx
c0017466:	eb dd                	jmp    c0017445 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017468:	83 c4 1c             	add    esp,0x1c
c001746b:	5b                   	pop    ebx
c001746c:	5e                   	pop    esi
c001746d:	5f                   	pop    edi
c001746e:	5d                   	pop    ebp
c001746f:	c3                   	ret    

c0017470 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017470:	55                   	push   ebp
c0017471:	57                   	push   edi
c0017472:	31 ff                	xor    edi,edi
c0017474:	56                   	push   esi
c0017475:	53                   	push   ebx
c0017476:	83 ec 1c             	sub    esp,0x1c
c0017479:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001747d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017481:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017488:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001748d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017491:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017495:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017499:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001749c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174a0:	01 f9                	add    ecx,edi
c00174a2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00174a6:	7d 2f                	jge    c00174d7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00174a8:	31 f6                	xor    esi,esi
c00174aa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00174ae:	01 f2                	add    edx,esi
c00174b0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00174b4:	7d 1a                	jge    c00174d0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00174b6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174b9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00174bc:	46                   	inc    esi
c00174bd:	51                   	push   ecx
c00174be:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00174c2:	52                   	push   edx
c00174c3:	55                   	push   ebp
c00174c4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174c7:	83 c4 10             	add    esp,0x10
c00174ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174ce:	eb da                	jmp    c00174aa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00174d0:	47                   	inc    edi
c00174d1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174d5:	eb c5                	jmp    c001749c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00174d7:	83 c4 1c             	add    esp,0x1c
c00174da:	5b                   	pop    ebx
c00174db:	5e                   	pop    esi
c00174dc:	5f                   	pop    edi
c00174dd:	5d                   	pop    ebp
c00174de:	c3                   	ret    
c00174df:	90                   	nop

c00174e0 <Video::blit(unsigned int*, int, int, int, int)>:
c00174e0:	55                   	push   ebp
c00174e1:	57                   	push   edi
c00174e2:	56                   	push   esi
c00174e3:	53                   	push   ebx
c00174e4:	83 ec 1c             	sub    esp,0x1c
c00174e7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174ef:	85 c0                	test   eax,eax
c00174f1:	79 02                	jns    c00174f5 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174f3:	31 c0                	xor    eax,eax
c00174f5:	c1 e0 02             	shl    eax,0x2
c00174f8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017500:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017504:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017508:	39 d8                	cmp    eax,ebx
c001750a:	7e 49                	jle    c0017555 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001750c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017512:	7c 41                	jl     c0017555 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017514:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017518:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001751c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017520:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017524:	39 f9                	cmp    ecx,edi
c0017526:	7e 22                	jle    c001754a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017528:	83 c5 04             	add    ebp,0x4
c001752b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017531:	7c 14                	jl     c0017547 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017533:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017535:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017538:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001753c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017540:	56                   	push   esi
c0017541:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017544:	83 c4 10             	add    esp,0x10
c0017547:	47                   	inc    edi
c0017548:	eb d2                	jmp    c001751c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001754a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001754e:	43                   	inc    ebx
c001754f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017553:	eb ab                	jmp    c0017500 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017555:	83 c4 1c             	add    esp,0x1c
c0017558:	5b                   	pop    ebx
c0017559:	5e                   	pop    esi
c001755a:	5f                   	pop    edi
c001755b:	5d                   	pop    ebp
c001755c:	c3                   	ret    
c001755d:	90                   	nop

c001755e <Video::clearScreen(unsigned int)>:
c001755e:	57                   	push   edi
c001755f:	56                   	push   esi
c0017560:	53                   	push   ebx
c0017561:	31 db                	xor    ebx,ebx
c0017563:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017567:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001756d:	7e 1f                	jle    c001758e <Video::clearScreen(unsigned int)+0x30>
c001756f:	31 ff                	xor    edi,edi
c0017571:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017577:	7e 12                	jle    c001758b <Video::clearScreen(unsigned int)+0x2d>
c0017579:	8b 06                	mov    eax,DWORD PTR [esi]
c001757b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001757f:	53                   	push   ebx
c0017580:	57                   	push   edi
c0017581:	47                   	inc    edi
c0017582:	56                   	push   esi
c0017583:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017586:	83 c4 10             	add    esp,0x10
c0017589:	eb e6                	jmp    c0017571 <Video::clearScreen(unsigned int)+0x13>
c001758b:	43                   	inc    ebx
c001758c:	eb d9                	jmp    c0017567 <Video::clearScreen(unsigned int)+0x9>
c001758e:	5b                   	pop    ebx
c001758f:	5e                   	pop    esi
c0017590:	5f                   	pop    edi
c0017591:	c3                   	ret    

c0017592 <Video::putpixel(int, int, unsigned int)>:
c0017592:	c7 44 24 04 08 bc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bc08
c001759a:	e9 66 32 00 00       	jmp    c001a805 <Krnl::panic(char const*)>
c001759f:	90                   	nop

c00175a0 <Video::Video(char const*)>:
c00175a0:	83 ec 0c             	sub    esp,0xc
c00175a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175a7:	83 ec 08             	sub    esp,0x8
c00175aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175ae:	50                   	push   eax
c00175af:	e8 b6 ce ff ff       	call   c001446a <Device::Device(char const*)>
c00175b4:	83 c4 10             	add    esp,0x10
c00175b7:	ba 8c bc 02 c0       	mov    edx,0xc002bc8c
c00175bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c0:	89 10                	mov    DWORD PTR [eax],edx
c00175c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00175d0:	90                   	nop
c00175d1:	83 c4 0c             	add    esp,0xc
c00175d4:	c3                   	ret    
c00175d5:	90                   	nop

c00175d6 <Video::~Video()>:
c00175d6:	83 ec 0c             	sub    esp,0xc
c00175d9:	ba 8c bc 02 c0       	mov    edx,0xc002bc8c
c00175de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e2:	89 10                	mov    DWORD PTR [eax],edx
c00175e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e8:	83 ec 0c             	sub    esp,0xc
c00175eb:	50                   	push   eax
c00175ec:	e8 5b cb ff ff       	call   c001414c <Device::~Device()>
c00175f1:	83 c4 10             	add    esp,0x10
c00175f4:	90                   	nop
c00175f5:	83 c4 0c             	add    esp,0xc
c00175f8:	c3                   	ret    
c00175f9:	90                   	nop

c00175fa <Video::~Video()>:
c00175fa:	83 ec 0c             	sub    esp,0xc
c00175fd:	83 ec 0c             	sub    esp,0xc
c0017600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017604:	e8 cd ff ff ff       	call   c00175d6 <Video::~Video()>
c0017609:	83 c4 10             	add    esp,0x10
c001760c:	83 ec 08             	sub    esp,0x8
c001760f:	68 64 01 00 00       	push   0x164
c0017614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017618:	e8 48 b7 ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c001761d:	83 c4 10             	add    esp,0x10
c0017620:	83 c4 0c             	add    esp,0xc
c0017623:	c3                   	ret    

c0017624 <Video::isMonochrome()>:
c0017624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017628:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001762e:	c3                   	ret    
c001762f:	90                   	nop

c0017630 <Video::getWidth()>:
c0017630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017634:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001763a:	c3                   	ret    
c001763b:	90                   	nop

c001763c <Video::getHeight()>:
c001763c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017640:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017646:	c3                   	ret    
c0017647:	90                   	nop

c0017648 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017648:	55                   	push   ebp
c0017649:	57                   	push   edi
c001764a:	56                   	push   esi
c001764b:	53                   	push   ebx
c001764c:	83 ec 2c             	sub    esp,0x2c
c001764f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017653:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017657:	83 f8 01             	cmp    eax,0x1
c001765a:	19 c9                	sbb    ecx,ecx
c001765c:	31 db                	xor    ebx,ebx
c001765e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017662:	89 cd                	mov    ebp,ecx
c0017664:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001766c:	f7 d5                	not    ebp
c001766e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017674:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017678:	01 d8                	add    eax,ebx
c001767a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001767e:	56                   	push   esi
c001767f:	e8 b8 ff ff ff       	call   c001763c <Video::getHeight()>
c0017684:	59                   	pop    ecx
c0017685:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017689:	7e 70                	jle    c00176fb <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001768b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001768f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017693:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017696:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001769a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001769e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00176a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176a9:	89 f8                	mov    eax,edi
c00176ab:	83 c0 20             	add    eax,0x20
c00176ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176b2:	56                   	push   esi
c00176b3:	e8 78 ff ff ff       	call   c0017630 <Video::getWidth()>
c00176b8:	5a                   	pop    edx
c00176b9:	39 c7                	cmp    edi,eax
c00176bb:	7d 34                	jge    c00176f1 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00176bd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00176c2:	74 05                	je     c00176c9 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00176c4:	8b 06                	mov    eax,DWORD PTR [esi]
c00176c6:	55                   	push   ebp
c00176c7:	eb 0d                	jmp    c00176d6 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00176c9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00176ce:	74 12                	je     c00176e2 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00176d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00176d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176da:	57                   	push   edi
c00176db:	56                   	push   esi
c00176dc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176df:	83 c4 10             	add    esp,0x10
c00176e2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176e6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176ea:	47                   	inc    edi
c00176eb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176ef:	75 c1                	jne    c00176b2 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176f1:	43                   	inc    ebx
c00176f2:	83 fb 20             	cmp    ebx,0x20
c00176f5:	0f 85 79 ff ff ff    	jne    c0017674 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176fb:	83 c4 2c             	add    esp,0x2c
c00176fe:	5b                   	pop    ebx
c00176ff:	5e                   	pop    esi
c0017700:	5f                   	pop    edi
c0017701:	5d                   	pop    ebp
c0017702:	c3                   	ret    
c0017703:	90                   	nop

c0017704 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017704:	55                   	push   ebp
c0017705:	57                   	push   edi
c0017706:	56                   	push   esi
c0017707:	53                   	push   ebx
c0017708:	83 ec 28             	sub    esp,0x28
c001770b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001770f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017713:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017717:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001771b:	c1 e7 08             	shl    edi,0x8
c001771e:	01 c7                	add    edi,eax
c0017720:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017724:	c1 e0 08             	shl    eax,0x8
c0017727:	01 d0                	add    eax,edx
c0017729:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001772d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017731:	0f af c7             	imul   eax,edi
c0017734:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001773b:	50                   	push   eax
c001773c:	e8 45 81 ff ff       	call   c000f886 <malloc>
c0017741:	83 c4 10             	add    esp,0x10
c0017744:	89 c5                	mov    ebp,eax
c0017746:	85 c0                	test   eax,eax
c0017748:	75 15                	jne    c001775f <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001774a:	83 ec 0c             	sub    esp,0xc
c001774d:	68 29 bc 02 c0       	push   0xc002bc29
c0017752:	e8 ee b6 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0017757:	83 c4 10             	add    esp,0x10
c001775a:	e9 1c 01 00 00       	jmp    c001787b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001775f:	be 12 00 00 00       	mov    esi,0x12
c0017764:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017768:	74 11                	je     c001777b <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001776a:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001776e:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017772:	c1 fe 03             	sar    esi,0x3
c0017775:	0f af f0             	imul   esi,eax
c0017778:	83 c6 12             	add    esi,0x12
c001777b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001777f:	74 04                	je     c0017785 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017781:	85 ff                	test   edi,edi
c0017783:	75 12                	jne    c0017797 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017785:	83 ec 0c             	sub    esp,0xc
c0017788:	68 40 bc 02 c0       	push   0xc002bc40
c001778d:	e8 b3 b6 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0017792:	e9 ce 00 00 00       	jmp    c0017865 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017797:	52                   	push   edx
c0017798:	52                   	push   edx
c0017799:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001779d:	50                   	push   eax
c001779e:	68 55 bc 02 c0       	push   0xc002bc55
c00177a3:	e8 9d b6 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00177a8:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00177ac:	83 c4 10             	add    esp,0x10
c00177af:	80 fa 02             	cmp    dl,0x2
c00177b2:	0f 85 98 00 00 00    	jne    c0017850 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00177b8:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00177bd:	75 10                	jne    c00177cf <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177bf:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177c3:	75 0a                	jne    c00177cf <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177c5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00177c8:	83 e8 18             	sub    eax,0x18
c00177cb:	a8 f7                	test   al,0xf7
c00177cd:	74 0a                	je     c00177d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00177cf:	83 ec 0c             	sub    esp,0xc
c00177d2:	68 62 bc 02 c0       	push   0xc002bc62
c00177d7:	eb 7f                	jmp    c0017858 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00177d9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177e1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177e9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177ed:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177f5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177f9:	75 0c                	jne    c0017807 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177fb:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017800:	c1 e0 18             	shl    eax,0x18
c0017803:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017807:	41                   	inc    ecx
c0017808:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001780d:	c1 e2 10             	shl    edx,0x10
c0017810:	89 d0                	mov    eax,edx
c0017812:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017817:	c1 e2 08             	shl    edx,0x8
c001781a:	09 c2                	or     edx,eax
c001781c:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017820:	09 c2                	or     edx,eax
c0017822:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017826:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001782a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001782e:	c1 f8 03             	sar    eax,0x3
c0017831:	01 c6                	add    esi,eax
c0017833:	89 c8                	mov    eax,ecx
c0017835:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017839:	39 c7                	cmp    edi,eax
c001783b:	7f b0                	jg     c00177ed <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001783d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017841:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017845:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017848:	7e 22                	jle    c001786c <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001784a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001784e:	eb 99                	jmp    c00177e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017850:	50                   	push   eax
c0017851:	50                   	push   eax
c0017852:	52                   	push   edx
c0017853:	68 70 bc 02 c0       	push   0xc002bc70
c0017858:	e8 e8 b5 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001785d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017860:	e8 31 80 ff ff       	call   c000f896 <free>
c0017865:	83 c4 10             	add    esp,0x10
c0017868:	31 ed                	xor    ebp,ebp
c001786a:	eb 0f                	jmp    c001787b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001786c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017870:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017873:	89 38                	mov    DWORD PTR [eax],edi
c0017875:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017879:	89 08                	mov    DWORD PTR [eax],ecx
c001787b:	83 c4 1c             	add    esp,0x1c
c001787e:	89 e8                	mov    eax,ebp
c0017880:	5b                   	pop    ebx
c0017881:	5e                   	pop    esi
c0017882:	5f                   	pop    edi
c0017883:	5d                   	pop    ebp
c0017884:	c3                   	ret    
c0017885:	90                   	nop

c0017886 <Video::putTGA(int, int, unsigned char*, int)>:
c0017886:	55                   	push   ebp
c0017887:	57                   	push   edi
c0017888:	56                   	push   esi
c0017889:	53                   	push   ebx
c001788a:	83 ec 28             	sub    esp,0x28
c001788d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017891:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017895:	50                   	push   eax
c0017896:	8d 44 24 18          	lea    eax,[esp+0x18]
c001789a:	50                   	push   eax
c001789b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001789f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178a3:	56                   	push   esi
c00178a4:	e8 5b fe ff ff       	call   c0017704 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00178a9:	83 c4 20             	add    esp,0x20
c00178ac:	85 c0                	test   eax,eax
c00178ae:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00178b2:	74 35                	je     c00178e9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178b4:	89 c7                	mov    edi,eax
c00178b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178ba:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00178be:	39 d8                	cmp    eax,ebx
c00178c0:	7e 27                	jle    c00178e9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178c2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00178c6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178ca:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00178ce:	39 e8                	cmp    eax,ebp
c00178d0:	7e 14                	jle    c00178e6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00178d2:	8b 06                	mov    eax,DWORD PTR [esi]
c00178d4:	83 c7 04             	add    edi,0x4
c00178d7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178da:	53                   	push   ebx
c00178db:	55                   	push   ebp
c00178dc:	45                   	inc    ebp
c00178dd:	56                   	push   esi
c00178de:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178e1:	83 c4 10             	add    esp,0x10
c00178e4:	eb e0                	jmp    c00178c6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178e6:	43                   	inc    ebx
c00178e7:	eb cd                	jmp    c00178b6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178e9:	83 c4 1c             	add    esp,0x1c
c00178ec:	5b                   	pop    ebx
c00178ed:	5e                   	pop    esi
c00178ee:	5f                   	pop    edi
c00178ef:	5d                   	pop    ebp
c00178f0:	c3                   	ret    
c00178f1:	90                   	nop

c00178f2 <ACPI::close(int, int, void*)>:
c00178f2:	83 ec 1c             	sub    esp,0x1c
c00178f5:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178fd:	74 0a                	je     c0017909 <ACPI::close(int, int, void*)+0x17>
c00178ff:	b8 00 00 00 00       	mov    eax,0x0
c0017904:	e9 9a 00 00 00       	jmp    c00179a3 <ACPI::close(int, int, void*)+0xb1>
c0017909:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001790e:	75 37                	jne    c0017947 <ACPI::close(int, int, void*)+0x55>
c0017910:	83 ec 0c             	sub    esp,0xc
c0017913:	68 cc bc 02 c0       	push   0xc002bccc
c0017918:	e8 28 b5 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001791d:	83 c4 10             	add    esp,0x10
c0017920:	a1 88 14 03 c0       	mov    eax,ds:0xc0031488
c0017925:	85 c0                	test   eax,eax
c0017927:	74 07                	je     c0017930 <ACPI::close(int, int, void*)+0x3e>
c0017929:	a1 88 14 03 c0       	mov    eax,ds:0xc0031488
c001792e:	ff d0                	call   eax
c0017930:	83 ec 0c             	sub    esp,0xc
c0017933:	68 40 be 02 c0       	push   0xc002be40
c0017938:	e8 c8 2e 00 00       	call   c001a805 <Krnl::panic(char const*)>
c001793d:	83 c4 10             	add    esp,0x10
c0017940:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017945:	eb 5c                	jmp    c00179a3 <ACPI::close(int, int, void*)+0xb1>
c0017947:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001794c:	75 50                	jne    c001799e <ACPI::close(int, int, void*)+0xac>
c001794e:	a1 84 14 03 c0       	mov    eax,ds:0xc0031484
c0017953:	85 c0                	test   eax,eax
c0017955:	74 07                	je     c001795e <ACPI::close(int, int, void*)+0x6c>
c0017957:	a1 84 14 03 c0       	mov    eax,ds:0xc0031484
c001795c:	ff d0                	call   eax
c001795e:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017963:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017968:	83 e0 02             	and    eax,0x2
c001796b:	74 1c                	je     c0017989 <ACPI::close(int, int, void*)+0x97>
c001796d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017974:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017978:	89 c2                	mov    edx,eax
c001797a:	ec                   	in     al,dx
c001797b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001797f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017983:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017987:	eb da                	jmp    c0017963 <ACPI::close(int, int, void*)+0x71>
c0017989:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017990:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017995:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017999:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001799d:	ee                   	out    dx,al
c001799e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00179a3:	83 c4 1c             	add    esp,0x1c
c00179a6:	c3                   	ret    

c00179a7 <findRSDP()>:
c00179a7:	83 ec 1c             	sub    esp,0x1c
c00179aa:	83 ec 0c             	sub    esp,0xc
c00179ad:	68 d9 bc 02 c0       	push   0xc002bcd9
c00179b2:	e8 8e b4 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00179b7:	83 c4 10             	add    esp,0x10
c00179ba:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c00179bf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179c5:	83 e0 04             	and    eax,0x4
c00179c8:	84 c0                	test   al,al
c00179ca:	75 07                	jne    c00179d3 <findRSDP()+0x2c>
c00179cc:	b8 00 00 00 00       	mov    eax,0x0
c00179d1:	eb 6a                	jmp    c0017a3d <findRSDP()+0x96>
c00179d3:	a1 14 ee 02 c0       	mov    eax,ds:0xc002ee14
c00179d8:	3d ff 07 00 00       	cmp    eax,0x7ff
c00179dd:	7f 1b                	jg     c00179fa <findRSDP()+0x53>
c00179df:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c00179e4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179ea:	83 e2 fb             	and    edx,0xfffffffb
c00179ed:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179f3:	b8 00 00 00 00       	mov    eax,0x0
c00179f8:	eb 43                	jmp    c0017a3d <findRSDP()+0x96>
c00179fa:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017a02:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017a0a:	77 2c                	ja     c0017a38 <findRSDP()+0x91>
c0017a0c:	83 ec 04             	sub    esp,0x4
c0017a0f:	6a 08                	push   0x8
c0017a11:	68 e7 bc 02 c0       	push   0xc002bce7
c0017a16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a1a:	e8 45 8c fe ff       	call   c0000664 <memcmp>
c0017a1f:	83 c4 10             	add    esp,0x10
c0017a22:	85 c0                	test   eax,eax
c0017a24:	0f 94 c0             	sete   al
c0017a27:	84 c0                	test   al,al
c0017a29:	74 06                	je     c0017a31 <findRSDP()+0x8a>
c0017a2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a2f:	eb 0c                	jmp    c0017a3d <findRSDP()+0x96>
c0017a31:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a36:	eb ca                	jmp    c0017a02 <findRSDP()+0x5b>
c0017a38:	b8 00 00 00 00       	mov    eax,0x0
c0017a3d:	83 c4 1c             	add    esp,0x1c
c0017a40:	c3                   	ret    

c0017a41 <loadACPITables(unsigned char*)>:
c0017a41:	56                   	push   esi
c0017a42:	53                   	push   ebx
c0017a43:	83 ec 44             	sub    esp,0x44
c0017a46:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0017a4b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a51:	83 e0 04             	and    eax,0x4
c0017a54:	84 c0                	test   al,al
c0017a56:	0f 84 05 02 00 00    	je     c0017c61 <loadACPITables(unsigned char*)+0x220>
c0017a5c:	a0 a0 16 03 c0       	mov    al,ds:0xc00316a0
c0017a61:	84 c0                	test   al,al
c0017a63:	74 75                	je     c0017ada <loadACPITables(unsigned char*)+0x99>
c0017a65:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a69:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a74:	83 e8 24             	sub    eax,0x24
c0017a77:	c1 e8 03             	shr    eax,0x3
c0017a7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a7e:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a86:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a8a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017a8e:	0f 8d b2 00 00 00    	jge    c0017b46 <loadACPITables(unsigned char*)+0x105>
c0017a94:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a98:	83 c0 24             	add    eax,0x24
c0017a9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017aa3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017aa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017aab:	c1 e0 03             	shl    eax,0x3
c0017aae:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017ab2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ab6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017ab9:	8b 00                	mov    eax,DWORD PTR [eax]
c0017abb:	89 c1                	mov    ecx,eax
c0017abd:	a1 8c 14 03 c0       	mov    eax,ds:0xc003148c
c0017ac2:	8d 50 01             	lea    edx,[eax+0x1]
c0017ac5:	89 15 8c 14 03 c0    	mov    DWORD PTR ds:0xc003148c,edx
c0017acb:	89 ca                	mov    edx,ecx
c0017acd:	89 14 c5 a4 14 03 c0 	mov    DWORD PTR [eax*8-0x3ffceb5c],edx
c0017ad4:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017ad8:	eb ac                	jmp    c0017a86 <loadACPITables(unsigned char*)+0x45>
c0017ada:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017ade:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017ae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ae6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ae9:	83 e8 24             	sub    eax,0x24
c0017aec:	c1 e8 02             	shr    eax,0x2
c0017aef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017af3:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017afb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017aff:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017b03:	7d 41                	jge    c0017b46 <loadACPITables(unsigned char*)+0x105>
c0017b05:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b09:	83 c0 24             	add    eax,0x24
c0017b0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b1c:	c1 e0 02             	shl    eax,0x2
c0017b1f:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017b23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b27:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b29:	a1 8c 14 03 c0       	mov    eax,ds:0xc003148c
c0017b2e:	8d 50 01             	lea    edx,[eax+0x1]
c0017b31:	89 15 8c 14 03 c0    	mov    DWORD PTR ds:0xc003148c,edx
c0017b37:	89 ca                	mov    edx,ecx
c0017b39:	89 14 c5 a4 14 03 c0 	mov    DWORD PTR [eax*8-0x3ffceb5c],edx
c0017b40:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017b44:	eb b5                	jmp    c0017afb <loadACPITables(unsigned char*)+0xba>
c0017b46:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017b4e:	a1 8c 14 03 c0       	mov    eax,ds:0xc003148c
c0017b53:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017b57:	0f 8d 05 01 00 00    	jge    c0017c62 <loadACPITables(unsigned char*)+0x221>
c0017b5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b61:	8b 04 c5 a4 14 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffceb5c]
c0017b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b78:	25 ff 0f 00 00       	and    eax,0xfff
c0017b7d:	89 c6                	mov    esi,eax
c0017b7f:	e8 f4 a0 ff ff       	call   c0011c78 <Virt::getAKernelVAS()>
c0017b84:	89 c3                	mov    ebx,eax
c0017b86:	83 ec 0c             	sub    esp,0xc
c0017b89:	6a 01                	push   0x1
c0017b8b:	e8 a9 9e ff ff       	call   c0011a39 <Virt::allocateKernelVirtualPages(int)>
c0017b90:	83 c4 10             	add    esp,0x10
c0017b93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b97:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b9d:	83 ec 0c             	sub    esp,0xc
c0017ba0:	6a 01                	push   0x1
c0017ba2:	6a 01                	push   0x1
c0017ba4:	50                   	push   eax
c0017ba5:	52                   	push   edx
c0017ba6:	53                   	push   ebx
c0017ba7:	e8 be a9 ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bac:	83 c4 20             	add    esp,0x20
c0017baf:	09 f0                	or     eax,esi
c0017bb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bb9:	c1 e0 03             	shl    eax,0x3
c0017bbc:	05 a0 14 03 c0       	add    eax,0xc00314a0
c0017bc1:	83 ec 04             	sub    esp,0x4
c0017bc4:	6a 04                	push   0x4
c0017bc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017bca:	50                   	push   eax
c0017bcb:	e8 98 8b fe ff       	call   c0000768 <memcpy>
c0017bd0:	83 c4 10             	add    esp,0x10
c0017bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017be2:	05 00 10 00 00       	add    eax,0x1000
c0017be7:	c1 e8 0c             	shr    eax,0xc
c0017bea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bf2:	89 04 24             	mov    DWORD PTR [esp],eax
c0017bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bf9:	25 ff 0f 00 00       	and    eax,0xfff
c0017bfe:	89 c6                	mov    esi,eax
c0017c00:	e8 73 a0 ff ff       	call   c0011c78 <Virt::getAKernelVAS()>
c0017c05:	89 c3                	mov    ebx,eax
c0017c07:	83 ec 0c             	sub    esp,0xc
c0017c0a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c0e:	e8 26 9e ff ff       	call   c0011a39 <Virt::allocateKernelVirtualPages(int)>
c0017c13:	83 c4 10             	add    esp,0x10
c0017c16:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c1a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c20:	83 ec 0c             	sub    esp,0xc
c0017c23:	6a 01                	push   0x1
c0017c25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c29:	50                   	push   eax
c0017c2a:	52                   	push   edx
c0017c2b:	53                   	push   ebx
c0017c2c:	e8 39 a9 ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c31:	83 c4 20             	add    esp,0x20
c0017c34:	09 f0                	or     eax,esi
c0017c36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017c3d:	83 ec 0c             	sub    esp,0xc
c0017c40:	50                   	push   eax
c0017c41:	e8 b9 a2 ff ff       	call   c0011eff <Virt::freeKernelVirtualPages(unsigned long)>
c0017c46:	83 c4 10             	add    esp,0x10
c0017c49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c51:	89 14 c5 a4 14 03 c0 	mov    DWORD PTR [eax*8-0x3ffceb5c],edx
c0017c58:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017c5c:	e9 ed fe ff ff       	jmp    c0017b4e <loadACPITables(unsigned char*)+0x10d>
c0017c61:	90                   	nop
c0017c62:	83 c4 44             	add    esp,0x44
c0017c65:	5b                   	pop    ebx
c0017c66:	5e                   	pop    esi
c0017c67:	c3                   	ret    

c0017c68 <findRSDT(unsigned char*)>:
c0017c68:	56                   	push   esi
c0017c69:	53                   	push   ebx
c0017c6a:	83 ec 44             	sub    esp,0x44
c0017c6d:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0017c72:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c78:	83 e0 04             	and    eax,0x4
c0017c7b:	84 c0                	test   al,al
c0017c7d:	75 0a                	jne    c0017c89 <findRSDT(unsigned char*)+0x21>
c0017c7f:	b8 00 00 00 00       	mov    eax,0x0
c0017c84:	e9 f7 00 00 00       	jmp    c0017d80 <findRSDT(unsigned char*)+0x118>
c0017c89:	83 ec 04             	sub    esp,0x4
c0017c8c:	6a 24                	push   0x24
c0017c8e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017c92:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c96:	50                   	push   eax
c0017c97:	e8 cc 8a fe ff       	call   c0000768 <memcpy>
c0017c9c:	83 c4 10             	add    esp,0x10
c0017c9f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017ca3:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017ca7:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017caf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017cb3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cb7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017cbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017cbf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cc3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cc7:	25 ff 0f 00 00       	and    eax,0xfff
c0017ccc:	89 c6                	mov    esi,eax
c0017cce:	e8 a5 9f ff ff       	call   c0011c78 <Virt::getAKernelVAS()>
c0017cd3:	89 c3                	mov    ebx,eax
c0017cd5:	83 ec 0c             	sub    esp,0xc
c0017cd8:	6a 02                	push   0x2
c0017cda:	e8 5a 9d ff ff       	call   c0011a39 <Virt::allocateKernelVirtualPages(int)>
c0017cdf:	83 c4 10             	add    esp,0x10
c0017ce2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017ce6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cec:	83 ec 0c             	sub    esp,0xc
c0017cef:	6a 01                	push   0x1
c0017cf1:	6a 02                	push   0x2
c0017cf3:	50                   	push   eax
c0017cf4:	52                   	push   edx
c0017cf5:	53                   	push   ebx
c0017cf6:	e8 6f a8 ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cfb:	83 c4 20             	add    esp,0x20
c0017cfe:	09 f0                	or     eax,esi
c0017d00:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017d04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d08:	25 ff 0f 00 00       	and    eax,0xfff
c0017d0d:	89 c6                	mov    esi,eax
c0017d0f:	e8 64 9f ff ff       	call   c0011c78 <Virt::getAKernelVAS()>
c0017d14:	89 c3                	mov    ebx,eax
c0017d16:	83 ec 0c             	sub    esp,0xc
c0017d19:	6a 02                	push   0x2
c0017d1b:	e8 19 9d ff ff       	call   c0011a39 <Virt::allocateKernelVirtualPages(int)>
c0017d20:	83 c4 10             	add    esp,0x10
c0017d23:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d27:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d2d:	83 ec 0c             	sub    esp,0xc
c0017d30:	6a 01                	push   0x1
c0017d32:	6a 02                	push   0x2
c0017d34:	50                   	push   eax
c0017d35:	52                   	push   edx
c0017d36:	53                   	push   ebx
c0017d37:	e8 2e a8 ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d3c:	83 c4 20             	add    esp,0x20
c0017d3f:	09 f0                	or     eax,esi
c0017d41:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d45:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017d4a:	75 11                	jne    c0017d5d <findRSDT(unsigned char*)+0xf5>
c0017d4c:	c6 05 a0 16 03 c0 00 	mov    BYTE PTR ds:0xc00316a0,0x0
c0017d53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d57:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d5b:	eb 1f                	jmp    c0017d7c <findRSDT(unsigned char*)+0x114>
c0017d5d:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017d62:	75 11                	jne    c0017d75 <findRSDT(unsigned char*)+0x10d>
c0017d64:	c6 05 a0 16 03 c0 01 	mov    BYTE PTR ds:0xc00316a0,0x1
c0017d6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d6f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d73:	eb 07                	jmp    c0017d7c <findRSDT(unsigned char*)+0x114>
c0017d75:	b8 00 00 00 00       	mov    eax,0x0
c0017d7a:	eb 04                	jmp    c0017d80 <findRSDT(unsigned char*)+0x118>
c0017d7c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d80:	83 c4 44             	add    esp,0x44
c0017d83:	5b                   	pop    ebx
c0017d84:	5e                   	pop    esi
c0017d85:	c3                   	ret    

c0017d86 <findDataTable(unsigned char*, char*)>:
c0017d86:	83 ec 1c             	sub    esp,0x1c
c0017d89:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0017d8e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d94:	83 e0 04             	and    eax,0x4
c0017d97:	84 c0                	test   al,al
c0017d99:	75 07                	jne    c0017da2 <findDataTable(unsigned char*, char*)+0x1c>
c0017d9b:	b8 00 00 00 00       	mov    eax,0x0
c0017da0:	eb 7c                	jmp    c0017e1e <findDataTable(unsigned char*, char*)+0x98>
c0017da2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017daa:	a1 8c 14 03 c0       	mov    eax,ds:0xc003148c
c0017daf:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017db3:	7d 3a                	jge    c0017def <findDataTable(unsigned char*, char*)+0x69>
c0017db5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017db9:	c1 e0 03             	shl    eax,0x3
c0017dbc:	05 a0 14 03 c0       	add    eax,0xc00314a0
c0017dc1:	83 ec 04             	sub    esp,0x4
c0017dc4:	6a 04                	push   0x4
c0017dc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dca:	50                   	push   eax
c0017dcb:	e8 94 88 fe ff       	call   c0000664 <memcmp>
c0017dd0:	83 c4 10             	add    esp,0x10
c0017dd3:	85 c0                	test   eax,eax
c0017dd5:	0f 94 c0             	sete   al
c0017dd8:	84 c0                	test   al,al
c0017dda:	74 0d                	je     c0017de9 <findDataTable(unsigned char*, char*)+0x63>
c0017ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017de0:	8b 04 c5 a4 14 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffceb5c]
c0017de7:	eb 35                	jmp    c0017e1e <findDataTable(unsigned char*, char*)+0x98>
c0017de9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017ded:	eb bb                	jmp    c0017daa <findDataTable(unsigned char*, char*)+0x24>
c0017def:	a0 a0 16 03 c0       	mov    al,ds:0xc00316a0
c0017df4:	84 c0                	test   al,al
c0017df6:	74 07                	je     c0017dff <findDataTable(unsigned char*, char*)+0x79>
c0017df8:	b8 58 00 00 00       	mov    eax,0x58
c0017dfd:	eb 05                	jmp    c0017e04 <findDataTable(unsigned char*, char*)+0x7e>
c0017dff:	b8 52 00 00 00       	mov    eax,0x52
c0017e04:	83 ec 04             	sub    esp,0x4
c0017e07:	50                   	push   eax
c0017e08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e0c:	68 64 be 02 c0       	push   0xc002be64
c0017e11:	e8 2f b0 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0017e16:	83 c4 10             	add    esp,0x10
c0017e19:	b8 00 00 00 00       	mov    eax,0x0
c0017e1e:	83 c4 1c             	add    esp,0x1c
c0017e21:	c3                   	ret    

c0017e22 <scanMADT()>:
c0017e22:	53                   	push   ebx
c0017e23:	83 ec 38             	sub    esp,0x38
c0017e26:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0017e2b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e31:	83 e0 04             	and    eax,0x4
c0017e34:	84 c0                	test   al,al
c0017e36:	0f 84 63 04 00 00    	je     c001829f <scanMADT()+0x47d>
c0017e3c:	e8 66 fb ff ff       	call   c00179a7 <findRSDP()>
c0017e41:	a3 ac 16 03 c0       	mov    ds:0xc00316ac,eax
c0017e46:	a1 ac 16 03 c0       	mov    eax,ds:0xc00316ac
c0017e4b:	85 c0                	test   eax,eax
c0017e4d:	75 19                	jne    c0017e68 <scanMADT()+0x46>
c0017e4f:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0017e54:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e5a:	83 e2 fb             	and    edx,0xfffffffb
c0017e5d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e63:	e9 3b 04 00 00       	jmp    c00182a3 <scanMADT()+0x481>
c0017e68:	a1 ac 16 03 c0       	mov    eax,ds:0xc00316ac
c0017e6d:	83 ec 0c             	sub    esp,0xc
c0017e70:	50                   	push   eax
c0017e71:	e8 f2 fd ff ff       	call   c0017c68 <findRSDT(unsigned char*)>
c0017e76:	83 c4 10             	add    esp,0x10
c0017e79:	a3 a8 16 03 c0       	mov    ds:0xc00316a8,eax
c0017e7e:	a1 a8 16 03 c0       	mov    eax,ds:0xc00316a8
c0017e83:	85 c0                	test   eax,eax
c0017e85:	75 19                	jne    c0017ea0 <scanMADT()+0x7e>
c0017e87:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0017e8c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e92:	83 e2 fb             	and    edx,0xfffffffb
c0017e95:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e9b:	e9 03 04 00 00       	jmp    c00182a3 <scanMADT()+0x481>
c0017ea0:	a1 a8 16 03 c0       	mov    eax,ds:0xc00316a8
c0017ea5:	83 ec 0c             	sub    esp,0xc
c0017ea8:	50                   	push   eax
c0017ea9:	e8 93 fb ff ff       	call   c0017a41 <loadACPITables(unsigned char*)>
c0017eae:	83 c4 10             	add    esp,0x10
c0017eb1:	a1 a8 16 03 c0       	mov    eax,ds:0xc00316a8
c0017eb6:	83 ec 08             	sub    esp,0x8
c0017eb9:	68 f0 bc 02 c0       	push   0xc002bcf0
c0017ebe:	50                   	push   eax
c0017ebf:	e8 c2 fe ff ff       	call   c0017d86 <findDataTable(unsigned char*, char*)>
c0017ec4:	83 c4 10             	add    esp,0x10
c0017ec7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017ecb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017ed0:	75 19                	jne    c0017eeb <scanMADT()+0xc9>
c0017ed2:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0017ed7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017edd:	83 e2 fe             	and    edx,0xfffffffe
c0017ee0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ee6:	e9 b8 03 00 00       	jmp    c00182a3 <scanMADT()+0x481>
c0017eeb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017ef3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ef7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017efa:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017efe:	0f 87 9f 03 00 00    	ja     c00182a3 <scanMADT()+0x481>
c0017f04:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f0c:	0f 87 91 03 00 00    	ja     c00182a3 <scanMADT()+0x481>
c0017f12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f1e:	8d 50 01             	lea    edx,[eax+0x1]
c0017f21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f29:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f2d:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f35:	8d 50 01             	lea    edx,[eax+0x1]
c0017f38:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f40:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f44:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f48:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f4d:	0f 86 4f 03 00 00    	jbe    c00182a2 <scanMADT()+0x480>
c0017f53:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f58:	75 57                	jne    c0017fb1 <scanMADT()+0x18f>
c0017f5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f5e:	8d 50 01             	lea    edx,[eax+0x1]
c0017f61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f65:	8a 15 a0 18 03 c0    	mov    dl,BYTE PTR ds:0xc00318a0
c0017f6b:	0f b6 d2             	movzx  edx,dl
c0017f6e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f72:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f76:	88 82 e0 18 03 c0    	mov    BYTE PTR [edx-0x3ffce720],al
c0017f7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f80:	8d 50 01             	lea    edx,[eax+0x1]
c0017f83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f87:	8a 15 a0 18 03 c0    	mov    dl,BYTE PTR ds:0xc00318a0
c0017f8d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f90:	88 0d a0 18 03 c0    	mov    BYTE PTR ds:0xc00318a0,cl
c0017f96:	0f b6 d2             	movzx  edx,dl
c0017f99:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f9d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fa1:	88 82 c0 18 03 c0    	mov    BYTE PTR [edx-0x3ffce740],al
c0017fa7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fac:	e9 da 02 00 00       	jmp    c001828b <scanMADT()+0x469>
c0017fb1:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017fb6:	0f 85 14 01 00 00    	jne    c00180d0 <scanMADT()+0x2ae>
c0017fbc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc0:	8d 50 01             	lea    edx,[eax+0x1]
c0017fc3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fc7:	8a 15 60 17 03 c0    	mov    dl,BYTE PTR ds:0xc0031760
c0017fcd:	0f b6 d2             	movzx  edx,dl
c0017fd0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fd4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fd8:	88 82 80 17 03 c0    	mov    BYTE PTR [edx-0x3ffce880],al
c0017fde:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017fe2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fe6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fea:	01 d0                	add    eax,edx
c0017fec:	83 c0 2c             	add    eax,0x2c
c0017fef:	8a 00                	mov    al,BYTE PTR [eax]
c0017ff1:	0f b6 d0             	movzx  edx,al
c0017ff4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ff8:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ffb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fff:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018003:	0f b6 c0             	movzx  eax,al
c0018006:	c1 e0 08             	shl    eax,0x8
c0018009:	89 d1                	mov    ecx,edx
c001800b:	09 c1                	or     ecx,eax
c001800d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018011:	8d 50 02             	lea    edx,[eax+0x2]
c0018014:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018018:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001801c:	0f b6 c0             	movzx  eax,al
c001801f:	c1 e0 10             	shl    eax,0x10
c0018022:	09 c1                	or     ecx,eax
c0018024:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018028:	8d 50 03             	lea    edx,[eax+0x3]
c001802b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001802f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018033:	0f b6 c0             	movzx  eax,al
c0018036:	c1 e0 18             	shl    eax,0x18
c0018039:	09 c1                	or     ecx,eax
c001803b:	89 ca                	mov    edx,ecx
c001803d:	a0 60 17 03 c0       	mov    al,ds:0xc0031760
c0018042:	0f b6 c0             	movzx  eax,al
c0018045:	89 14 85 a0 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce860],edx
c001804c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018051:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018055:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018059:	01 d0                	add    eax,edx
c001805b:	83 c0 2c             	add    eax,0x2c
c001805e:	8a 00                	mov    al,BYTE PTR [eax]
c0018060:	0f b6 d0             	movzx  edx,al
c0018063:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018067:	8d 48 01             	lea    ecx,[eax+0x1]
c001806a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001806e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018072:	0f b6 c0             	movzx  eax,al
c0018075:	c1 e0 08             	shl    eax,0x8
c0018078:	89 d1                	mov    ecx,edx
c001807a:	09 c1                	or     ecx,eax
c001807c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018080:	8d 50 02             	lea    edx,[eax+0x2]
c0018083:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018087:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001808b:	0f b6 c0             	movzx  eax,al
c001808e:	c1 e0 10             	shl    eax,0x10
c0018091:	09 c1                	or     ecx,eax
c0018093:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018097:	8d 50 03             	lea    edx,[eax+0x3]
c001809a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001809e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180a2:	0f b6 c0             	movzx  eax,al
c00180a5:	c1 e0 18             	shl    eax,0x18
c00180a8:	09 c1                	or     ecx,eax
c00180aa:	89 ca                	mov    edx,ecx
c00180ac:	a0 60 17 03 c0       	mov    al,ds:0xc0031760
c00180b1:	0f b6 c0             	movzx  eax,al
c00180b4:	89 14 85 20 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7e0],edx
c00180bb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180c0:	a0 60 17 03 c0       	mov    al,ds:0xc0031760
c00180c5:	40                   	inc    eax
c00180c6:	a2 60 17 03 c0       	mov    ds:0xc0031760,al
c00180cb:	e9 bb 01 00 00       	jmp    c001828b <scanMADT()+0x469>
c00180d0:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00180d5:	0f 85 e9 00 00 00    	jne    c00181c4 <scanMADT()+0x3a2>
c00180db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180df:	8d 50 01             	lea    edx,[eax+0x1]
c00180e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180ee:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00180f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f6:	8d 50 01             	lea    edx,[eax+0x1]
c00180f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018101:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018105:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018109:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001810d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018111:	01 d0                	add    eax,edx
c0018113:	83 c0 2c             	add    eax,0x2c
c0018116:	8a 00                	mov    al,BYTE PTR [eax]
c0018118:	0f b6 d0             	movzx  edx,al
c001811b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001811f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018122:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018126:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001812a:	0f b6 c0             	movzx  eax,al
c001812d:	c1 e0 08             	shl    eax,0x8
c0018130:	89 d1                	mov    ecx,edx
c0018132:	09 c1                	or     ecx,eax
c0018134:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018138:	8d 50 02             	lea    edx,[eax+0x2]
c001813b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001813f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018143:	0f b6 c0             	movzx  eax,al
c0018146:	c1 e0 10             	shl    eax,0x10
c0018149:	09 c1                	or     ecx,eax
c001814b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001814f:	8d 50 03             	lea    edx,[eax+0x3]
c0018152:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018156:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001815a:	0f b6 c0             	movzx  eax,al
c001815d:	c1 e0 18             	shl    eax,0x18
c0018160:	09 c8                	or     eax,ecx
c0018162:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018166:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001816b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001816f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018173:	01 d0                	add    eax,edx
c0018175:	83 c0 2c             	add    eax,0x2c
c0018178:	8a 00                	mov    al,BYTE PTR [eax]
c001817a:	0f b6 c0             	movzx  eax,al
c001817d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018181:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018184:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018188:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001818c:	0f b6 d2             	movzx  edx,dl
c001818f:	c1 e2 08             	shl    edx,0x8
c0018192:	09 d0                	or     eax,edx
c0018194:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018199:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001819e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00181a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181a7:	88 90 20 e0 02 c0    	mov    BYTE PTR [eax-0x3ffd1fe0],dl
c00181ad:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00181b2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00181b7:	66 89 84 12 40 17 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce8c0],ax
c00181bf:	e9 c7 00 00 00       	jmp    c001828b <scanMADT()+0x469>
c00181c4:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00181c9:	0f 85 b0 00 00 00    	jne    c001827f <scanMADT()+0x45d>
c00181cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181d3:	8d 50 01             	lea    edx,[eax+0x1]
c00181d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181de:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181e2:	0f b6 c0             	movzx  eax,al
c00181e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181f1:	01 d0                	add    eax,edx
c00181f3:	83 c0 2c             	add    eax,0x2c
c00181f6:	8a 00                	mov    al,BYTE PTR [eax]
c00181f8:	0f b6 d0             	movzx  edx,al
c00181fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181ff:	8d 48 01             	lea    ecx,[eax+0x1]
c0018202:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018206:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001820a:	0f b6 c0             	movzx  eax,al
c001820d:	c1 e0 08             	shl    eax,0x8
c0018210:	09 d0                	or     eax,edx
c0018212:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018216:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001821b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001821f:	8d 50 01             	lea    edx,[eax+0x1]
c0018222:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018226:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001822a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001822e:	0f b6 c0             	movzx  eax,al
c0018231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018239:	c1 e0 08             	shl    eax,0x8
c001823c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018240:	89 c1                	mov    ecx,eax
c0018242:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018246:	c1 e0 18             	shl    eax,0x18
c0018249:	89 c3                	mov    ebx,eax
c001824b:	a1 b0 16 03 c0       	mov    eax,ds:0xc00316b0
c0018250:	8d 50 01             	lea    edx,[eax+0x1]
c0018253:	89 15 b0 16 03 c0    	mov    DWORD PTR ds:0xc00316b0,edx
c0018259:	09 d9                	or     ecx,ebx
c001825b:	89 ca                	mov    edx,ecx
c001825d:	89 14 85 c0 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce940],edx
c0018264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018268:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001826c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018270:	68 94 be 02 c0       	push   0xc002be94
c0018275:	e8 cb ab ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001827a:	83 c4 10             	add    esp,0x10
c001827d:	eb 0c                	jmp    c001828b <scanMADT()+0x469>
c001827f:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018284:	75 05                	jne    c001828b <scanMADT()+0x469>
c0018286:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001828b:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018290:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018294:	01 d0                	add    eax,edx
c0018296:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001829a:	e9 54 fc ff ff       	jmp    c0017ef3 <scanMADT()+0xd1>
c001829f:	90                   	nop
c00182a0:	eb 01                	jmp    c00182a3 <scanMADT()+0x481>
c00182a2:	90                   	nop
c00182a3:	83 c4 38             	add    esp,0x38
c00182a6:	5b                   	pop    ebx
c00182a7:	c3                   	ret    

c00182a8 <ACPI::ACPI()>:
c00182a8:	83 ec 0c             	sub    esp,0xc
c00182ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182af:	83 ec 08             	sub    esp,0x8
c00182b2:	68 f5 bc 02 c0       	push   0xc002bcf5
c00182b7:	50                   	push   eax
c00182b8:	e8 ad c1 ff ff       	call   c001446a <Device::Device(char const*)>
c00182bd:	83 c4 10             	add    esp,0x10
c00182c0:	ba 30 bf 02 c0       	mov    edx,0xc002bf30
c00182c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182c9:	89 10                	mov    DWORD PTR [eax],edx
c00182cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182cf:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00182d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182da:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00182e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182e8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00182f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182f6:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00182fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018301:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018308:	e8 15 fb ff ff       	call   c0017e22 <scanMADT()>
c001830d:	90                   	nop
c001830e:	83 c4 0c             	add    esp,0xc
c0018311:	c3                   	ret    

c0018312 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018312:	83 ec 2c             	sub    esp,0x2c
c0018315:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018319:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001831d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018321:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018325:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001832a:	88 d0                	mov    al,dl
c001832c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018330:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018335:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001833d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018341:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018347:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001834b:	0f 8d 97 00 00 00    	jge    c00183e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018351:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018355:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018359:	83 c2 2a             	add    edx,0x2a
c001835c:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018360:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018365:	75 78                	jne    c00183df <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018367:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001836b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001836f:	83 c2 2a             	add    edx,0x2a
c0018372:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018376:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001837a:	75 63                	jne    c00183df <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001837c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018381:	74 3a                	je     c00183bd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018383:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018387:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001838b:	83 c2 2a             	add    edx,0x2a
c001838e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018392:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018396:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018399:	39 c2                	cmp    edx,eax
c001839b:	74 10                	je     c00183ad <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001839d:	83 ec 0c             	sub    esp,0xc
c00183a0:	68 d0 be 02 c0       	push   0xc002bed0
c00183a5:	e8 5b 24 00 00       	call   c001a805 <Krnl::panic(char const*)>
c00183aa:	83 c4 10             	add    esp,0x10
c00183ad:	83 ec 0c             	sub    esp,0xc
c00183b0:	68 fa bc 02 c0       	push   0xc002bcfa
c00183b5:	e8 4b 24 00 00       	call   c001a805 <Krnl::panic(char const*)>
c00183ba:	83 c4 10             	add    esp,0x10
c00183bd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00183c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183c9:	83 c2 2a             	add    edx,0x2a
c00183cc:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00183d0:	8b 02                	mov    eax,DWORD PTR [edx]
c00183d2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00183d5:	89 01                	mov    DWORD PTR [ecx],eax
c00183d7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00183da:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00183df:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00183e3:	e9 55 ff ff ff       	jmp    c001833d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00183e8:	90                   	nop
c00183e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183ed:	83 c4 2c             	add    esp,0x2c
c00183f0:	c2 04 00             	ret    0x4
c00183f3:	90                   	nop

c00183f4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00183f4:	83 ec 1c             	sub    esp,0x1c
c00183f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183fb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00183ff:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018403:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018408:	88 c8                	mov    al,cl
c001840a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001840e:	88 d0                	mov    al,dl
c0018410:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018418:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001841e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018422:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018425:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018429:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001842d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018431:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018437:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001843b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001843e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018442:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001844b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018451:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018455:	8d 48 01             	lea    ecx,[eax+0x1]
c0018458:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001845c:	83 c2 2a             	add    edx,0x2a
c001845f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018463:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018467:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001846d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018471:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018474:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018478:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001847c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018480:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018486:	8d 50 01             	lea    edx,[eax+0x1]
c0018489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001848d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018497:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001849d:	3d 00 02 00 00       	cmp    eax,0x200
c00184a2:	75 10                	jne    c00184b4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00184a4:	83 ec 0c             	sub    esp,0xc
c00184a7:	68 09 bd 02 c0       	push   0xc002bd09
c00184ac:	e8 54 23 00 00       	call   c001a805 <Krnl::panic(char const*)>
c00184b1:	83 c4 10             	add    esp,0x10
c00184b4:	90                   	nop
c00184b5:	83 c4 1c             	add    esp,0x1c
c00184b8:	c3                   	ret    
c00184b9:	90                   	nop

c00184ba <ACPI::setScreenBrightnessLevel(void*, int)>:
c00184ba:	b8 00 00 00 00       	mov    eax,0x0
c00184bf:	c3                   	ret    

c00184c0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00184c0:	83 ec 1c             	sub    esp,0x1c
c00184c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184c7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00184ca:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00184ce:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c00184d3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184d8:	83 ec 08             	sub    esp,0x8
c00184db:	52                   	push   edx
c00184dc:	50                   	push   eax
c00184dd:	e8 b2 69 ff ff       	call   c000ee94 <Computer::readCMOS(unsigned char)>
c00184e2:	83 c4 10             	add    esp,0x10
c00184e5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00184e9:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c00184ee:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184f3:	83 ec 04             	sub    esp,0x4
c00184f6:	6a 01                	push   0x1
c00184f8:	52                   	push   edx
c00184f9:	50                   	push   eax
c00184fa:	e8 ab 6a ff ff       	call   c000efaa <Computer::writeCMOS(unsigned char, unsigned char)>
c00184ff:	83 c4 10             	add    esp,0x10
c0018502:	90                   	nop
c0018503:	83 c4 1c             	add    esp,0x1c
c0018506:	c3                   	ret    
c0018507:	90                   	nop

c0018508 <ACPI::sleep()>:
c0018508:	83 ec 0c             	sub    esp,0xc
c001850b:	a1 80 14 03 c0       	mov    eax,ds:0xc0031480
c0018510:	85 c0                	test   eax,eax
c0018512:	74 07                	je     c001851b <ACPI::sleep()+0x13>
c0018514:	a1 80 14 03 c0       	mov    eax,ds:0xc0031480
c0018519:	ff d0                	call   eax
c001851b:	90                   	nop
c001851c:	83 c4 0c             	add    esp,0xc
c001851f:	c3                   	ret    

c0018520 <ACPI::open(int, int, void*)>:
c0018520:	57                   	push   edi
c0018521:	56                   	push   esi
c0018522:	53                   	push   ebx
c0018523:	83 ec 60             	sub    esp,0x60
c0018526:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001852a:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018531:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018535:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001853c:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0018541:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018547:	83 e0 04             	and    eax,0x4
c001854a:	84 c0                	test   al,al
c001854c:	74 47                	je     c0018595 <ACPI::open(int, int, void*)+0x75>
c001854e:	a1 a8 16 03 c0       	mov    eax,ds:0xc00316a8
c0018553:	83 ec 08             	sub    esp,0x8
c0018556:	68 26 bd 02 c0       	push   0xc002bd26
c001855b:	50                   	push   eax
c001855c:	e8 25 f8 ff ff       	call   c0017d86 <findDataTable(unsigned char*, char*)>
c0018561:	83 c4 10             	add    esp,0x10
c0018564:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0018568:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c001856d:	74 26                	je     c0018595 <ACPI::open(int, int, void*)+0x75>
c001856f:	83 ec 0c             	sub    esp,0xc
c0018572:	68 2b bd 02 c0       	push   0xc002bd2b
c0018577:	e8 c9 a8 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001857c:	83 c4 10             	add    esp,0x10
c001857f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018583:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001858a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001858e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018595:	c7 44 24 58 5f 0c 00 00 	mov    DWORD PTR [esp+0x58],0xc5f
c001859d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00185a1:	8a 00                	mov    al,BYTE PTR [eax]
c00185a3:	3c 01                	cmp    al,0x1
c00185a5:	75 28                	jne    c00185cf <ACPI::open(int, int, void*)+0xaf>
c00185a7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185ab:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185b2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185b6:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185bd:	83 ec 0c             	sub    esp,0xc
c00185c0:	68 3c bd 02 c0       	push   0xc002bd3c
c00185c5:	e8 7b a8 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00185ca:	83 c4 10             	add    esp,0x10
c00185cd:	eb 25                	jmp    c00185f4 <ACPI::open(int, int, void*)+0xd4>
c00185cf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00185d3:	8a 00                	mov    al,BYTE PTR [eax]
c00185d5:	3c 02                	cmp    al,0x2
c00185d7:	75 1b                	jne    c00185f4 <ACPI::open(int, int, void*)+0xd4>
c00185d9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185dd:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185e4:	83 ec 0c             	sub    esp,0xc
c00185e7:	68 44 bd 02 c0       	push   0xc002bd44
c00185ec:	e8 54 a8 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00185f1:	83 c4 10             	add    esp,0x10
c00185f4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185f8:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185fe:	83 f0 01             	xor    eax,0x1
c0018601:	84 c0                	test   al,al
c0018603:	74 6a                	je     c001866f <ACPI::open(int, int, void*)+0x14f>
c0018605:	83 ec 0c             	sub    esp,0xc
c0018608:	68 4c bd 02 c0       	push   0xc002bd4c
c001860d:	e8 33 a8 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0018612:	83 c4 10             	add    esp,0x10
c0018615:	e8 36 7b fe ff       	call   c0000150 <manualPCIProbe>
c001861a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001861e:	83 7c 24 54 01       	cmp    DWORD PTR [esp+0x54],0x1
c0018623:	75 28                	jne    c001864d <ACPI::open(int, int, void*)+0x12d>
c0018625:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018629:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018630:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018634:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001863b:	83 ec 0c             	sub    esp,0xc
c001863e:	68 5a bd 02 c0       	push   0xc002bd5a
c0018643:	e8 fd a7 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0018648:	83 c4 10             	add    esp,0x10
c001864b:	eb 22                	jmp    c001866f <ACPI::open(int, int, void*)+0x14f>
c001864d:	83 7c 24 54 02       	cmp    DWORD PTR [esp+0x54],0x2
c0018652:	75 1b                	jne    c001866f <ACPI::open(int, int, void*)+0x14f>
c0018654:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018658:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001865f:	83 ec 0c             	sub    esp,0xc
c0018662:	68 64 bd 02 c0       	push   0xc002bd64
c0018667:	e8 d9 a7 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001866c:	83 c4 10             	add    esp,0x10
c001866f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018673:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018679:	84 c0                	test   al,al
c001867b:	74 13                	je     c0018690 <ACPI::open(int, int, void*)+0x170>
c001867d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018681:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018687:	83 f0 01             	xor    eax,0x1
c001868a:	0f b6 c0             	movzx  eax,al
c001868d:	40                   	inc    eax
c001868e:	eb 05                	jmp    c0018695 <ACPI::open(int, int, void*)+0x175>
c0018690:	b8 00 00 00 00       	mov    eax,0x0
c0018695:	83 ec 08             	sub    esp,0x8
c0018698:	50                   	push   eax
c0018699:	68 6e bd 02 c0       	push   0xc002bd6e
c001869e:	e8 a2 a7 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00186a3:	83 c4 10             	add    esp,0x10
c00186a6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186aa:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186b0:	84 c0                	test   al,al
c00186b2:	74 67                	je     c001871b <ACPI::open(int, int, void*)+0x1fb>
c00186b4:	c7 44 24 38 58 01 00 00 	mov    DWORD PTR [esp+0x38],0x158
c00186bc:	83 ec 0c             	sub    esp,0xc
c00186bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00186c3:	e8 be 71 ff ff       	call   c000f886 <malloc>
c00186c8:	83 c4 10             	add    esp,0x10
c00186cb:	89 c3                	mov    ebx,eax
c00186cd:	83 ec 0c             	sub    esp,0xc
c00186d0:	53                   	push   ebx
c00186d1:	e8 a6 a8 00 00       	call   c0022f7c <PCI::PCI()>
c00186d6:	83 c4 10             	add    esp,0x10
c00186d9:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c00186dd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186e1:	83 ec 08             	sub    esp,0x8
c00186e4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00186e8:	50                   	push   eax
c00186e9:	e8 8c bb ff ff       	call   c001427a <Device::addChild(Device*)>
c00186ee:	83 c4 10             	add    esp,0x10
c00186f1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00186f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00186f7:	83 c0 08             	add    eax,0x8
c00186fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00186fc:	6a 00                	push   0x0
c00186fe:	6a 00                	push   0x0
c0018700:	6a 00                	push   0x0
c0018702:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018706:	ff d0                	call   eax
c0018708:	83 c4 10             	add    esp,0x10
c001870b:	83 ec 0c             	sub    esp,0xc
c001870e:	68 77 bd 02 c0       	push   0xc002bd77
c0018713:	e8 2d a7 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0018718:	83 c4 10             	add    esp,0x10
c001871b:	83 ec 0c             	sub    esp,0xc
c001871e:	68 82 bd 02 c0       	push   0xc002bd82
c0018723:	e8 7f 48 00 00       	call   c001cfa7 <Thr::loadKernelSymbolTable(char const*)>
c0018728:	83 c4 10             	add    esp,0x10
c001872b:	83 ec 0c             	sub    esp,0xc
c001872e:	6a 0c                	push   0xc
c0018730:	e8 49 95 ff ff       	call   c0011c7e <Virt::setupPageSwapping(int)>
c0018735:	83 c4 10             	add    esp,0x10
c0018738:	8d 44 24 28          	lea    eax,[esp+0x28]
c001873c:	83 ec 08             	sub    esp,0x8
c001873f:	6a 12                	push   0x12
c0018741:	50                   	push   eax
c0018742:	e8 a3 be ff ff       	call   c00145ea <getDevicesOfType(DeviceType)>
c0018747:	83 c4 0c             	add    esp,0xc
c001874a:	83 ec 0c             	sub    esp,0xc
c001874d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018751:	50                   	push   eax
c0018752:	e8 59 0c 01 00       	call   c00293b0 <LinkedList<Device>::isEmpty()>
c0018757:	83 c4 10             	add    esp,0x10
c001875a:	83 f0 01             	xor    eax,0x1
c001875d:	84 c0                	test   al,al
c001875f:	0f 84 fd 00 00 00    	je     c0018862 <ACPI::open(int, int, void*)+0x342>
c0018765:	83 ec 0c             	sub    esp,0xc
c0018768:	8d 44 24 34          	lea    eax,[esp+0x34]
c001876c:	50                   	push   eax
c001876d:	e8 5a 0c 01 00       	call   c00293cc <LinkedList<Device>::getFirstElement()>
c0018772:	83 c4 10             	add    esp,0x10
c0018775:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018779:	83 ec 0c             	sub    esp,0xc
c001877c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018780:	50                   	push   eax
c0018781:	e8 4e 0c 01 00       	call   c00293d4 <LinkedList<Device>::removeFirst()>
c0018786:	83 c4 10             	add    esp,0x10
c0018789:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001878d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0018791:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018795:	83 ec 0c             	sub    esp,0xc
c0018798:	50                   	push   eax
c0018799:	e8 c8 bd ff ff       	call   c0014566 <Device::getName()>
c001879e:	83 c4 10             	add    esp,0x10
c00187a1:	83 ec 08             	sub    esp,0x8
c00187a4:	50                   	push   eax
c00187a5:	68 00 bf 02 c0       	push   0xc002bf00
c00187aa:	e8 96 a6 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00187af:	83 c4 10             	add    esp,0x10
c00187b2:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00187b6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00187ba:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00187c0:	ba 09 00 00 00       	mov    edx,0x9
c00187c5:	fc                   	cld    
c00187c6:	89 c7                	mov    edi,eax
c00187c8:	89 de                	mov    esi,ebx
c00187ca:	89 d1                	mov    ecx,edx
c00187cc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00187ce:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00187d2:	0f b6 c0             	movzx  eax,al
c00187d5:	83 ec 08             	sub    esp,0x8
c00187d8:	50                   	push   eax
c00187d9:	68 a0 bd 02 c0       	push   0xc002bda0
c00187de:	e8 62 a6 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00187e3:	83 c4 10             	add    esp,0x10
c00187e6:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00187ea:	0f b6 c0             	movzx  eax,al
c00187ed:	83 ec 08             	sub    esp,0x8
c00187f0:	50                   	push   eax
c00187f1:	68 b2 bd 02 c0       	push   0xc002bdb2
c00187f6:	e8 4a a6 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00187fb:	83 c4 10             	add    esp,0x10
c00187fe:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0018803:	0f b7 c0             	movzx  eax,ax
c0018806:	83 ec 08             	sub    esp,0x8
c0018809:	50                   	push   eax
c001880a:	68 c4 bd 02 c0       	push   0xc002bdc4
c001880f:	e8 31 a6 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0018814:	83 c4 10             	add    esp,0x10
c0018817:	83 ec 0c             	sub    esp,0xc
c001881a:	83 ec 24             	sub    esp,0x24
c001881d:	89 e0                	mov    eax,esp
c001881f:	89 c3                	mov    ebx,eax
c0018821:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018825:	ba 09 00 00 00       	mov    edx,0x9
c001882a:	89 df                	mov    edi,ebx
c001882c:	89 c6                	mov    esi,eax
c001882e:	89 d1                	mov    ecx,edx
c0018830:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018832:	e8 a7 aa 00 00       	call   c00232de <PCI::pciDetailsToFilepath(PCIDeviceInfo)>
c0018837:	83 c4 30             	add    esp,0x30
c001883a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001883e:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0018843:	0f 84 01 ff ff ff    	je     c001874a <ACPI::open(int, int, void*)+0x22a>
c0018849:	83 ec 08             	sub    esp,0x8
c001884c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018850:	68 d6 bd 02 c0       	push   0xc002bdd6
c0018855:	e8 eb a5 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001885a:	83 c4 10             	add    esp,0x10
c001885d:	e9 e8 fe ff ff       	jmp    c001874a <ACPI::open(int, int, void*)+0x22a>
c0018862:	83 ec 0c             	sub    esp,0xc
c0018865:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018869:	50                   	push   eax
c001886a:	e8 3f 0b 01 00       	call   c00293ae <LinkedList<Device>::~LinkedList()>
c001886f:	83 c4 10             	add    esp,0x10
c0018872:	8b 1d c8 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002edc8
c0018878:	83 ec 08             	sub    esp,0x8
c001887b:	6a 01                	push   0x1
c001887d:	68 e2 bd 02 c0       	push   0xc002bde2
c0018882:	e8 97 51 00 00       	call   c001da1e <Thr::loadDLL(char const*, bool)>
c0018887:	83 c4 10             	add    esp,0x10
c001888a:	83 ec 08             	sub    esp,0x8
c001888d:	53                   	push   ebx
c001888e:	50                   	push   eax
c001888f:	e8 be 53 00 00       	call   c001dc52 <Thr::executeDLL(unsigned long, void*)>
c0018894:	83 c4 10             	add    esp,0x10
c0018897:	8b 1d c8 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002edc8
c001889d:	83 ec 08             	sub    esp,0x8
c00188a0:	6a 01                	push   0x1
c00188a2:	68 ff bd 02 c0       	push   0xc002bdff
c00188a7:	e8 72 51 00 00       	call   c001da1e <Thr::loadDLL(char const*, bool)>
c00188ac:	83 c4 10             	add    esp,0x10
c00188af:	83 ec 08             	sub    esp,0x8
c00188b2:	53                   	push   ebx
c00188b3:	50                   	push   eax
c00188b4:	e8 99 53 00 00       	call   c001dc52 <Thr::executeDLL(unsigned long, void*)>
c00188b9:	83 c4 10             	add    esp,0x10
c00188bc:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c00188c1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00188c7:	83 e0 04             	and    eax,0x4
c00188ca:	84 c0                	test   al,al
c00188cc:	0f 84 d3 00 00 00    	je     c00189a5 <ACPI::open(int, int, void*)+0x485>
c00188d2:	c7 44 24 34 14 01 00 00 	mov    DWORD PTR [esp+0x34],0x114
c00188da:	83 ec 0c             	sub    esp,0xc
c00188dd:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00188e1:	e8 a0 6f ff ff       	call   c000f886 <malloc>
c00188e6:	83 c4 10             	add    esp,0x10
c00188e9:	89 c3                	mov    ebx,eax
c00188eb:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c00188f0:	83 ec 04             	sub    esp,0x4
c00188f3:	50                   	push   eax
c00188f4:	68 1c be 02 c0       	push   0xc002be1c
c00188f9:	53                   	push   ebx
c00188fa:	e8 a5 aa ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c00188ff:	83 c4 10             	add    esp,0x10
c0018902:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0018906:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001890b:	74 17                	je     c0018924 <ACPI::open(int, int, void*)+0x404>
c001890d:	83 ec 0c             	sub    esp,0xc
c0018910:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018914:	e8 5d ad ff ff       	call   c0013676 <File::exists()>
c0018919:	83 c4 10             	add    esp,0x10
c001891c:	84 c0                	test   al,al
c001891e:	74 04                	je     c0018924 <ACPI::open(int, int, void*)+0x404>
c0018920:	b0 01                	mov    al,0x1
c0018922:	eb 02                	jmp    c0018926 <ACPI::open(int, int, void*)+0x406>
c0018924:	b0 00                	mov    al,0x0
c0018926:	84 c0                	test   al,al
c0018928:	74 22                	je     c001894c <ACPI::open(int, int, void*)+0x42c>
c001892a:	83 ec 08             	sub    esp,0x8
c001892d:	6a 01                	push   0x1
c001892f:	68 1c be 02 c0       	push   0xc002be1c
c0018934:	e8 e5 50 00 00       	call   c001da1e <Thr::loadDLL(char const*, bool)>
c0018939:	83 c4 10             	add    esp,0x10
c001893c:	83 ec 08             	sub    esp,0x8
c001893f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0018943:	50                   	push   eax
c0018944:	e8 09 53 00 00       	call   c001dc52 <Thr::executeDLL(unsigned long, void*)>
c0018949:	83 c4 10             	add    esp,0x10
c001894c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018951:	74 1e                	je     c0018971 <ACPI::open(int, int, void*)+0x451>
c0018953:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018958:	74 17                	je     c0018971 <ACPI::open(int, int, void*)+0x451>
c001895a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001895e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018960:	83 c0 08             	add    eax,0x8
c0018963:	8b 00                	mov    eax,DWORD PTR [eax]
c0018965:	83 ec 0c             	sub    esp,0xc
c0018968:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001896c:	ff d0                	call   eax
c001896e:	83 c4 10             	add    esp,0x10
c0018971:	a1 a8 16 03 c0       	mov    eax,ds:0xc00316a8
c0018976:	83 ec 08             	sub    esp,0x8
c0018979:	68 39 be 02 c0       	push   0xc002be39
c001897e:	50                   	push   eax
c001897f:	e8 02 f4 ff ff       	call   c0017d86 <findDataTable(unsigned char*, char*)>
c0018984:	83 c4 10             	add    esp,0x10
c0018987:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001898b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0018990:	74 13                	je     c00189a5 <ACPI::open(int, int, void*)+0x485>
c0018992:	83 ec 08             	sub    esp,0x8
c0018995:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018999:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001899d:	e8 1e fb ff ff       	call   c00184c0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00189a2:	83 c4 10             	add    esp,0x10
c00189a5:	b8 00 00 00 00       	mov    eax,0x0
c00189aa:	83 c4 60             	add    esp,0x60
c00189ad:	5b                   	pop    ebx
c00189ae:	5e                   	pop    esi
c00189af:	5f                   	pop    edi
c00189b0:	c3                   	ret    
c00189b1:	90                   	nop

c00189b2 <CPU::close(int, int, void*)>:
c00189b2:	31 c0                	xor    eax,eax
c00189b4:	c3                   	ret    
c00189b5:	90                   	nop

c00189b6 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00189b6:	55                   	push   ebp
c00189b7:	57                   	push   edi
c00189b8:	56                   	push   esi
c00189b9:	53                   	push   ebx
c00189ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00189be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189c2:	89 ce                	mov    esi,ecx
c00189c4:	89 d5                	mov    ebp,edx
c00189c6:	80 f9 04             	cmp    cl,0x4
c00189c9:	75 28                	jne    c00189f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00189cb:	8d 42 f9             	lea    eax,[edx-0x7]
c00189ce:	3c 03                	cmp    al,0x3
c00189d0:	0f 86 63 01 00 00    	jbe    c0018b39 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00189d6:	80 fa 03             	cmp    dl,0x3
c00189d9:	0f 84 5a 01 00 00    	je     c0018b39 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00189df:	8d 7a f2             	lea    edi,[edx-0xe]
c00189e2:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c00189e7:	89 fb                	mov    ebx,edi
c00189e9:	80 fb 01             	cmp    bl,0x1
c00189ec:	77 4e                	ja     c0018a3c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00189ee:	e9 52 01 00 00       	jmp    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189f3:	80 f9 05             	cmp    cl,0x5
c00189f6:	75 4d                	jne    c0018a45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00189f8:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c00189fd:	80 fa 03             	cmp    dl,0x3
c0018a00:	0f 86 3f 01 00 00    	jbe    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a06:	8d 7a fa             	lea    edi,[edx-0x6]
c0018a09:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c0018a0e:	89 fb                	mov    ebx,edi
c0018a10:	80 fb 01             	cmp    bl,0x1
c0018a13:	0f 86 2c 01 00 00    	jbe    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a19:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c0018a1e:	80 fa 08             	cmp    dl,0x8
c0018a21:	0f 84 1e 01 00 00    	je     c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a27:	89 d7                	mov    edi,edx
c0018a29:	b8 30 e2 02 c0       	mov    eax,0xc002e230
c0018a2e:	83 e7 fb             	and    edi,0xfffffffb
c0018a31:	89 fb                	mov    ebx,edi
c0018a33:	80 fb 09             	cmp    bl,0x9
c0018a36:	0f 84 09 01 00 00    	je     c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a3c:	31 c0                	xor    eax,eax
c0018a3e:	89 eb                	mov    ebx,ebp
c0018a40:	0f b6 fb             	movzx  edi,bl
c0018a43:	eb 30                	jmp    c0018a75 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018a45:	31 c0                	xor    eax,eax
c0018a47:	80 f9 06             	cmp    cl,0x6
c0018a4a:	75 f2                	jne    c0018a3e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018a4c:	80 fa 0a             	cmp    dl,0xa
c0018a4f:	77 ed                	ja     c0018a3e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018a51:	bf de 05 00 00       	mov    edi,0x5de
c0018a56:	0f a3 d7             	bt     edi,edx
c0018a59:	73 e3                	jae    c0018a3e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018a5b:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0018a60:	e9 e0 00 00 00       	jmp    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a65:	39 c7                	cmp    edi,eax
c0018a67:	0f 84 d3 00 00 00    	je     c0018b40 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018a6d:	40                   	inc    eax
c0018a6e:	3d d0 00 00 00       	cmp    eax,0xd0
c0018a73:	74 09                	je     c0018a7e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018a75:	89 f3                	mov    ebx,esi
c0018a77:	80 fb 0f             	cmp    bl,0xf
c0018a7a:	75 f1                	jne    c0018a6d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018a7c:	eb e7                	jmp    c0018a65 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018a7e:	80 f9 10             	cmp    cl,0x10
c0018a81:	75 14                	jne    c0018a97 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018a83:	8d 42 fc             	lea    eax,[edx-0x4]
c0018a86:	83 e0 fb             	and    eax,0xfffffffb
c0018a89:	3c 02                	cmp    al,0x2
c0018a8b:	76 34                	jbe    c0018ac1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018a8d:	b8 46 c2 02 c0       	mov    eax,0xc002c246
c0018a92:	80 fa 02             	cmp    dl,0x2
c0018a95:	eb 24                	jmp    c0018abb <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018a97:	80 f9 11             	cmp    cl,0x11
c0018a9a:	75 13                	jne    c0018aaf <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018a9c:	b8 46 c2 02 c0       	mov    eax,0xc002c246
c0018aa1:	80 fa 03             	cmp    dl,0x3
c0018aa4:	0f 85 9b 00 00 00    	jne    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018aaa:	e9 91 00 00 00       	jmp    c0018b40 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018aaf:	80 f9 12             	cmp    cl,0x12
c0018ab2:	75 14                	jne    c0018ac8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018ab4:	b8 46 c2 02 c0       	mov    eax,0xc002c246
c0018ab9:	fe ca                	dec    dl
c0018abb:	0f 85 84 00 00 00    	jne    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ac1:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0018ac6:	eb 7d                	jmp    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ac8:	80 f9 14             	cmp    cl,0x14
c0018acb:	75 12                	jne    c0018adf <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018acd:	4a                   	dec    edx
c0018ace:	b8 46 c2 02 c0       	mov    eax,0xc002c246
c0018ad3:	80 fa 01             	cmp    dl,0x1
c0018ad6:	77 6d                	ja     c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ad8:	b8 70 e2 02 c0       	mov    eax,0xc002e270
c0018add:	eb 66                	jmp    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018adf:	80 f9 15             	cmp    cl,0x15
c0018ae2:	75 31                	jne    c0018b15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018ae4:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0018ae9:	80 fa 01             	cmp    dl,0x1
c0018aec:	74 57                	je     c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018aee:	b8 46 c2 02 c0       	mov    eax,0xc002c246
c0018af3:	80 fa 13             	cmp    dl,0x13
c0018af6:	76 0c                	jbe    c0018b04 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018af8:	80 fa 30             	cmp    dl,0x30
c0018afb:	75 48                	jne    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018afd:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c0018b02:	eb 41                	jmp    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b04:	b9 04 00 09 00       	mov    ecx,0x90004
c0018b09:	0f a3 d1             	bt     ecx,edx
c0018b0c:	73 37                	jae    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b0e:	b8 90 e2 02 c0       	mov    eax,0xc002e290
c0018b13:	eb 30                	jmp    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b15:	b8 46 c2 02 c0       	mov    eax,0xc002c246
c0018b1a:	80 f9 16             	cmp    cl,0x16
c0018b1d:	75 26                	jne    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b1f:	b8 b0 e2 02 c0       	mov    eax,0xc002e2b0
c0018b24:	84 d2                	test   dl,dl
c0018b26:	74 1d                	je     c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b28:	b8 46 c2 02 c0       	mov    eax,0xc002c246
c0018b2d:	80 fa 30             	cmp    dl,0x30
c0018b30:	75 13                	jne    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b32:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c0018b37:	eb 0c                	jmp    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b39:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018b3e:	eb 05                	jmp    c0018b45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b40:	b8 50 e2 02 c0       	mov    eax,0xc002e250
c0018b45:	5b                   	pop    ebx
c0018b46:	5e                   	pop    esi
c0018b47:	5f                   	pop    edi
c0018b48:	5d                   	pop    ebp
c0018b49:	c3                   	ret    

c0018b4a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018b4a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b52:	80 f9 04             	cmp    cl,0x4
c0018b55:	75 6b                	jne    c0018bc2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018b57:	b8 40 e0 02 c0       	mov    eax,0xc002e040
c0018b5c:	80 fa 01             	cmp    dl,0x1
c0018b5f:	0f 86 92 02 00 00    	jbe    c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b65:	b8 50 e0 02 c0       	mov    eax,0xc002e050
c0018b6a:	80 fa 02             	cmp    dl,0x2
c0018b6d:	0f 84 84 02 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b73:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0018b78:	80 fa 03             	cmp    dl,0x3
c0018b7b:	0f 84 76 02 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b81:	b8 70 e0 02 c0       	mov    eax,0xc002e070
c0018b86:	80 fa 04             	cmp    dl,0x4
c0018b89:	0f 84 68 02 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b8f:	b8 80 e0 02 c0       	mov    eax,0xc002e080
c0018b94:	80 fa 05             	cmp    dl,0x5
c0018b97:	0f 84 5a 02 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b9d:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0018ba2:	80 fa 07             	cmp    dl,0x7
c0018ba5:	0f 84 4c 02 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bab:	83 ea 08             	sub    edx,0x8
c0018bae:	b8 46 c2 02 c0       	mov    eax,0xc002c246
c0018bb3:	80 fa 01             	cmp    dl,0x1
c0018bb6:	0f 87 3b 02 00 00    	ja     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bbc:	b8 90 e0 02 c0       	mov    eax,0xc002e090
c0018bc1:	c3                   	ret    
c0018bc2:	80 f9 05             	cmp    cl,0x5
c0018bc5:	75 45                	jne    c0018c0c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018bc7:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018bca:	b8 a0 e0 02 c0       	mov    eax,0xc002e0a0
c0018bcf:	80 f9 02             	cmp    cl,0x2
c0018bd2:	0f 86 1f 02 00 00    	jbe    c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd8:	80 fa 04             	cmp    dl,0x4
c0018bdb:	0f 84 f3 01 00 00    	je     c0018dd4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018be1:	80 fa 07             	cmp    dl,0x7
c0018be4:	0f 84 0d 02 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bea:	b8 b0 e0 02 c0       	mov    eax,0xc002e0b0
c0018bef:	80 fa 08             	cmp    dl,0x8
c0018bf2:	0f 84 ff 01 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf8:	b8 46 c2 02 c0       	mov    eax,0xc002c246
c0018bfd:	80 fa 09             	cmp    dl,0x9
c0018c00:	0f 85 f1 01 00 00    	jne    c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c06:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0018c0b:	c3                   	ret    
c0018c0c:	80 f9 06             	cmp    cl,0x6
c0018c0f:	0f 85 85 01 00 00    	jne    c0018d9a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018c15:	b8 d0 e0 02 c0       	mov    eax,0xc002e0d0
c0018c1a:	80 fa 01             	cmp    dl,0x1
c0018c1d:	0f 84 d4 01 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c23:	8d 42 fb             	lea    eax,[edx-0x5]
c0018c26:	3c 01                	cmp    al,0x1
c0018c28:	0f 86 ac 01 00 00    	jbe    c0018dda <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018c2e:	80 fa 03             	cmp    dl,0x3
c0018c31:	0f 84 a3 01 00 00    	je     c0018dda <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018c37:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018c3a:	b8 f0 e0 02 c0       	mov    eax,0xc002e0f0
c0018c3f:	80 f9 01             	cmp    cl,0x1
c0018c42:	0f 86 af 01 00 00    	jbe    c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c48:	80 fa 09             	cmp    dl,0x9
c0018c4b:	0f 84 8f 01 00 00    	je     c0018de0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018c51:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018c54:	80 f9 01             	cmp    cl,0x1
c0018c57:	0f 86 9a 01 00 00    	jbe    c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c5d:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0018c62:	80 fa 0d             	cmp    dl,0xd
c0018c65:	0f 84 8c 01 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c6b:	b8 10 e1 02 c0       	mov    eax,0xc002e110
c0018c70:	80 fa 0e             	cmp    dl,0xe
c0018c73:	0f 84 7e 01 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c79:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0018c7e:	80 fa 0f             	cmp    dl,0xf
c0018c81:	0f 84 70 01 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c87:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0018c8c:	80 fa 15             	cmp    dl,0x15
c0018c8f:	0f 84 62 01 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c95:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018c98:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0018c9d:	80 f9 01             	cmp    cl,0x1
c0018ca0:	0f 86 51 01 00 00    	jbe    c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ca6:	80 fa 1a             	cmp    dl,0x1a
c0018ca9:	0f 84 37 01 00 00    	je     c0018de6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018caf:	80 fa 1c             	cmp    dl,0x1c
c0018cb2:	0f 84 34 01 00 00    	je     c0018dec <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018cb8:	80 fa 1d             	cmp    dl,0x1d
c0018cbb:	0f 84 36 01 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cc1:	b8 50 e1 02 c0       	mov    eax,0xc002e150
c0018cc6:	80 fa 25             	cmp    dl,0x25
c0018cc9:	0f 84 28 01 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ccf:	8d 4a da             	lea    ecx,[edx-0x26]
c0018cd2:	b8 40 e1 02 c0       	mov    eax,0xc002e140
c0018cd7:	80 f9 01             	cmp    cl,0x1
c0018cda:	0f 86 17 01 00 00    	jbe    c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ce0:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0018ce5:	80 fa 2a             	cmp    dl,0x2a
c0018ce8:	0f 84 09 01 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cee:	b8 50 e1 02 c0       	mov    eax,0xc002e150
c0018cf3:	80 fa 2c             	cmp    dl,0x2c
c0018cf6:	0f 84 fb 00 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cfc:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0018d01:	80 fa 2d             	cmp    dl,0x2d
c0018d04:	0f 84 ed 00 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d0a:	b8 30 e1 02 c0       	mov    eax,0xc002e130
c0018d0f:	80 fa 2e             	cmp    dl,0x2e
c0018d12:	0f 84 df 00 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d18:	b8 50 e1 02 c0       	mov    eax,0xc002e150
c0018d1d:	80 fa 2f             	cmp    dl,0x2f
c0018d20:	0f 84 d1 00 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d26:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018d29:	b8 40 e1 02 c0       	mov    eax,0xc002e140
c0018d2e:	80 f9 01             	cmp    cl,0x1
c0018d31:	0f 86 c0 00 00 00    	jbe    c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d37:	b8 70 e1 02 c0       	mov    eax,0xc002e170
c0018d3c:	80 fa 37             	cmp    dl,0x37
c0018d3f:	0f 84 b2 00 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d45:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018d4a:	80 fa 3a             	cmp    dl,0x3a
c0018d4d:	0f 84 a4 00 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d53:	b8 90 e1 02 c0       	mov    eax,0xc002e190
c0018d58:	80 fa 3c             	cmp    dl,0x3c
c0018d5b:	0f 84 96 00 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d61:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018d66:	80 fa 3d             	cmp    dl,0x3d
c0018d69:	0f 84 88 00 00 00    	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d6f:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018d74:	80 fa 3e             	cmp    dl,0x3e
c0018d77:	74 7e                	je     c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d79:	8d 42 bb             	lea    eax,[edx-0x45]
c0018d7c:	3c 01                	cmp    al,0x1
c0018d7e:	76 72                	jbe    c0018df2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018d80:	80 fa 3f             	cmp    dl,0x3f
c0018d83:	74 6d                	je     c0018df2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018d85:	80 fa 4a             	cmp    dl,0x4a
c0018d88:	74 0a                	je     c0018d94 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018d8a:	b8 46 c2 02 c0       	mov    eax,0xc002c246
c0018d8f:	80 fa 4d             	cmp    dl,0x4d
c0018d92:	75 63                	jne    c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d94:	b8 70 e1 02 c0       	mov    eax,0xc002e170
c0018d99:	c3                   	ret    
c0018d9a:	b8 46 c2 02 c0       	mov    eax,0xc002c246
c0018d9f:	80 f9 0b             	cmp    cl,0xb
c0018da2:	75 0a                	jne    c0018dae <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018da4:	fe ca                	dec    dl
c0018da6:	75 4f                	jne    c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018da8:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c0018dad:	c3                   	ret    
c0018dae:	80 f9 0f             	cmp    cl,0xf
c0018db1:	75 44                	jne    c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018db3:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018db8:	80 fa 02             	cmp    dl,0x2
c0018dbb:	76 3a                	jbe    c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dbd:	8d 42 fd             	lea    eax,[edx-0x3]
c0018dc0:	3c 01                	cmp    al,0x1
c0018dc2:	76 0a                	jbe    c0018dce <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018dc4:	b8 46 c2 02 c0       	mov    eax,0xc002c246
c0018dc9:	80 fa 06             	cmp    dl,0x6
c0018dcc:	75 29                	jne    c0018df7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dce:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018dd3:	c3                   	ret    
c0018dd4:	b8 b0 e0 02 c0       	mov    eax,0xc002e0b0
c0018dd9:	c3                   	ret    
c0018dda:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0018ddf:	c3                   	ret    
c0018de0:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0018de5:	c3                   	ret    
c0018de6:	b8 30 e1 02 c0       	mov    eax,0xc002e130
c0018deb:	c3                   	ret    
c0018dec:	b8 40 e1 02 c0       	mov    eax,0xc002e140
c0018df1:	c3                   	ret    
c0018df2:	b8 90 e1 02 c0       	mov    eax,0xc002e190
c0018df7:	c3                   	ret    

c0018df8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018df8:	60                   	pusha  
c0018df9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018dfd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e05:	9c                   	pushf  
c0018e06:	fa                   	cli    
c0018e07:	0f 09                	wbinvd 
c0018e09:	0f 30                	wrmsr  
c0018e0b:	9d                   	popf   
c0018e0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e10:	89 02                	mov    DWORD PTR [edx],eax
c0018e12:	61                   	popa   
c0018e13:	c3                   	ret    

c0018e14 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018e14:	60                   	pusha  
c0018e15:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e19:	9c                   	pushf  
c0018e1a:	fa                   	cli    
c0018e1b:	0f 09                	wbinvd 
c0018e1d:	31 c0                	xor    eax,eax
c0018e1f:	31 d2                	xor    edx,edx
c0018e21:	0f 32                	rdmsr  
c0018e23:	9d                   	popf   
c0018e24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018e28:	89 02                	mov    DWORD PTR [edx],eax
c0018e2a:	61                   	popa   
c0018e2b:	c3                   	ret    

c0018e2c <CPU::AMD_K6_writeback(int, int, int)>:
c0018e2c:	56                   	push   esi
c0018e2d:	53                   	push   ebx
c0018e2e:	83 ec 10             	sub    esp,0x10
c0018e31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e35:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018e3a:	75 5d                	jne    c0018e99 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018e3c:	83 f8 08             	cmp    eax,0x8
c0018e3f:	75 09                	jne    c0018e4a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018e41:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018e46:	7e 13                	jle    c0018e5b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018e48:	eb 30                	jmp    c0018e7a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018e4a:	83 f8 06             	cmp    eax,0x6
c0018e4d:	7c 4a                	jl     c0018e99 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018e4f:	83 f8 07             	cmp    eax,0x7
c0018e52:	7e 07                	jle    c0018e5b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018e54:	83 f8 09             	cmp    eax,0x9
c0018e57:	74 21                	je     c0018e7a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018e59:	eb 3e                	jmp    c0018e99 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018e5b:	89 e6                	mov    esi,esp
c0018e5d:	8b 1d 08 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee08
c0018e63:	56                   	push   esi
c0018e64:	c1 eb 15             	shr    ebx,0x15
c0018e67:	68 82 00 00 c0       	push   0xc0000082
c0018e6c:	83 e3 7e             	and    ebx,0x7e
c0018e6f:	e8 a0 ff ff ff       	call   c0018e14 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018e74:	56                   	push   esi
c0018e75:	6a 00                	push   0x0
c0018e77:	53                   	push   ebx
c0018e78:	eb 12                	jmp    c0018e8c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018e7a:	89 e3                	mov    ebx,esp
c0018e7c:	53                   	push   ebx
c0018e7d:	68 82 00 00 c0       	push   0xc0000082
c0018e82:	e8 8d ff ff ff       	call   c0018e14 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018e87:	53                   	push   ebx
c0018e88:	6a 00                	push   0x0
c0018e8a:	6a 00                	push   0x0
c0018e8c:	68 82 00 00 c0       	push   0xc0000082
c0018e91:	e8 62 ff ff ff       	call   c0018df8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018e96:	83 c4 18             	add    esp,0x18
c0018e99:	83 c4 10             	add    esp,0x10
c0018e9c:	5b                   	pop    ebx
c0018e9d:	5e                   	pop    esi
c0018e9e:	c3                   	ret    
c0018e9f:	90                   	nop

c0018ea0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018ea0:	55                   	push   ebp
c0018ea1:	57                   	push   edi
c0018ea2:	56                   	push   esi
c0018ea3:	53                   	push   ebx
c0018ea4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ea8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018eac:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018eb0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018eb4:	39 05 e0 e2 02 c0    	cmp    DWORD PTR ds:0xc002e2e0,eax
c0018eba:	75 23                	jne    c0018edf <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018ebc:	a1 0c 19 03 c0       	mov    eax,ds:0xc003190c
c0018ec1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018ec5:	89 06                	mov    DWORD PTR [esi],eax
c0018ec7:	a1 08 19 03 c0       	mov    eax,ds:0xc0031908
c0018ecc:	89 07                	mov    DWORD PTR [edi],eax
c0018ece:	a1 04 19 03 c0       	mov    eax,ds:0xc0031904
c0018ed3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018ed6:	a1 00 19 03 c0       	mov    eax,ds:0xc0031900
c0018edb:	89 02                	mov    DWORD PTR [edx],eax
c0018edd:	eb 3f                	jmp    c0018f1e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018edf:	31 c9                	xor    ecx,ecx
c0018ee1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ee5:	0f a2                	cpuid  
c0018ee7:	89 06                	mov    DWORD PTR [esi],eax
c0018ee9:	89 1f                	mov    DWORD PTR [edi],ebx
c0018eeb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018eef:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018ef2:	89 10                	mov    DWORD PTR [eax],edx
c0018ef4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ef8:	a3 e0 e2 02 c0       	mov    ds:0xc002e2e0,eax
c0018efd:	8b 06                	mov    eax,DWORD PTR [esi]
c0018eff:	a3 0c 19 03 c0       	mov    ds:0xc003190c,eax
c0018f04:	8b 07                	mov    eax,DWORD PTR [edi]
c0018f06:	a3 08 19 03 c0       	mov    ds:0xc0031908,eax
c0018f0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018f0e:	a3 04 19 03 c0       	mov    ds:0xc0031904,eax
c0018f13:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f17:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f19:	a3 00 19 03 c0       	mov    ds:0xc0031900,eax
c0018f1e:	5b                   	pop    ebx
c0018f1f:	5e                   	pop    esi
c0018f20:	5f                   	pop    edi
c0018f21:	5d                   	pop    ebp
c0018f22:	c3                   	ret    
c0018f23:	90                   	nop

c0018f24 <CPU::cpuidCheckEDX(unsigned int)>:
c0018f24:	83 ec 10             	sub    esp,0x10
c0018f27:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f2b:	50                   	push   eax
c0018f2c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f30:	50                   	push   eax
c0018f31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f35:	50                   	push   eax
c0018f36:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f3a:	50                   	push   eax
c0018f3b:	6a 01                	push   0x1
c0018f3d:	e8 5e ff ff ff       	call   c0018ea0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f46:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018f4a:	0f 95 c0             	setne  al
c0018f4d:	83 c4 24             	add    esp,0x24
c0018f50:	c3                   	ret    
c0018f51:	90                   	nop

c0018f52 <CPU::cpuidCheckECX(unsigned int)>:
c0018f52:	83 ec 10             	sub    esp,0x10
c0018f55:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f59:	50                   	push   eax
c0018f5a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f5e:	50                   	push   eax
c0018f5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f63:	50                   	push   eax
c0018f64:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f68:	50                   	push   eax
c0018f69:	6a 01                	push   0x1
c0018f6b:	e8 30 ff ff ff       	call   c0018ea0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f70:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f74:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018f78:	0f 95 c0             	setne  al
c0018f7b:	83 c4 24             	add    esp,0x24
c0018f7e:	c3                   	ret    
c0018f7f:	90                   	nop

c0018f80 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018f80:	83 ec 10             	sub    esp,0x10
c0018f83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f87:	50                   	push   eax
c0018f88:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f8c:	50                   	push   eax
c0018f8d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f91:	50                   	push   eax
c0018f92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f96:	50                   	push   eax
c0018f97:	6a 07                	push   0x7
c0018f99:	e8 02 ff ff ff       	call   c0018ea0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fa2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018fa6:	0f 95 c0             	setne  al
c0018fa9:	83 c4 24             	add    esp,0x24
c0018fac:	c3                   	ret    
c0018fad:	90                   	nop

c0018fae <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018fae:	83 ec 10             	sub    esp,0x10
c0018fb1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fb5:	50                   	push   eax
c0018fb6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fba:	50                   	push   eax
c0018fbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fbf:	50                   	push   eax
c0018fc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fc4:	50                   	push   eax
c0018fc5:	6a 07                	push   0x7
c0018fc7:	e8 d4 fe ff ff       	call   c0018ea0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fcc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fd0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018fd4:	0f 95 c0             	setne  al
c0018fd7:	83 c4 24             	add    esp,0x24
c0018fda:	c3                   	ret    
c0018fdb:	90                   	nop

c0018fdc <CPU::CPU()>:
c0018fdc:	83 ec 0c             	sub    esp,0xc
c0018fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fe3:	83 ec 08             	sub    esp,0x8
c0018fe6:	68 46 c2 02 c0       	push   0xc002c246
c0018feb:	50                   	push   eax
c0018fec:	e8 79 b4 ff ff       	call   c001446a <Device::Device(char const*)>
c0018ff1:	83 c4 10             	add    esp,0x10
c0018ff4:	ba 20 c3 02 c0       	mov    edx,0xc002c320
c0018ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ffd:	89 10                	mov    DWORD PTR [eax],edx
c0018fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019003:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001900d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019011:	05 78 01 00 00       	add    eax,0x178
c0019016:	83 ec 0c             	sub    esp,0xc
c0019019:	50                   	push   eax
c001901a:	e8 75 60 ff ff       	call   c000f094 <GDT::GDT()>
c001901f:	83 c4 10             	add    esp,0x10
c0019022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019026:	05 7c 09 00 00       	add    eax,0x97c
c001902b:	83 ec 0c             	sub    esp,0xc
c001902e:	50                   	push   eax
c001902f:	e8 ca 62 ff ff       	call   c000f2fe <IDT::IDT()>
c0019034:	83 c4 10             	add    esp,0x10
c0019037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001903b:	05 7c 11 00 00       	add    eax,0x117c
c0019040:	83 ec 0c             	sub    esp,0xc
c0019043:	50                   	push   eax
c0019044:	e8 21 83 ff ff       	call   c001136a <TSS::TSS()>
c0019049:	83 c4 10             	add    esp,0x10
c001904c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019050:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0019057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001905b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0019065:	90                   	nop
c0019066:	83 c4 0c             	add    esp,0xc
c0019069:	c3                   	ret    

c001906a <CPU::displayFeatures()>:
c001906a:	53                   	push   ebx
c001906b:	83 ec 10             	sub    esp,0x10
c001906e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019072:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0019078:	68 54 bf 02 c0       	push   0xc002bf54
c001907d:	e8 c3 9d ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0019082:	59                   	pop    ecx
c0019083:	58                   	pop    eax
c0019084:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001908a:	50                   	push   eax
c001908b:	68 65 bf 02 c0       	push   0xc002bf65
c0019090:	e8 b0 9d ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0019095:	58                   	pop    eax
c0019096:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001909c:	5a                   	pop    edx
c001909d:	c1 e8 0e             	shr    eax,0xe
c00190a0:	0f b6 c0             	movzx  eax,al
c00190a3:	50                   	push   eax
c00190a4:	68 76 bf 02 c0       	push   0xc002bf76
c00190a9:	e8 97 9d ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00190ae:	59                   	pop    ecx
c00190af:	58                   	pop    eax
c00190b0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190b6:	66 c1 e8 06          	shr    ax,0x6
c00190ba:	0f b6 c0             	movzx  eax,al
c00190bd:	50                   	push   eax
c00190be:	68 87 bf 02 c0       	push   0xc002bf87
c00190c3:	e8 7d 9d ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00190c8:	c7 04 24 34 c4 02 c0 	mov    DWORD PTR [esp],0xc002c434
c00190cf:	e8 71 9d ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00190d4:	83 c4 10             	add    esp,0x10
c00190d7:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c00190dc:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00190e3:	74 05                	je     c00190ea <CPU::displayFeatures()+0x80>
c00190e5:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c00190ea:	52                   	push   edx
c00190eb:	52                   	push   edx
c00190ec:	50                   	push   eax
c00190ed:	68 98 bf 02 c0       	push   0xc002bf98
c00190f2:	e8 4e 9d ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00190f7:	83 c4 10             	add    esp,0x10
c00190fa:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c00190ff:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0019106:	78 05                	js     c001910d <CPU::displayFeatures()+0xa3>
c0019108:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c001910d:	51                   	push   ecx
c001910e:	51                   	push   ecx
c001910f:	50                   	push   eax
c0019110:	68 af bf 02 c0       	push   0xc002bfaf
c0019115:	e8 2b 9d ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001911a:	83 c4 10             	add    esp,0x10
c001911d:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c0019122:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0019129:	75 05                	jne    c0019130 <CPU::displayFeatures()+0xc6>
c001912b:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c0019130:	52                   	push   edx
c0019131:	52                   	push   edx
c0019132:	50                   	push   eax
c0019133:	68 c6 bf 02 c0       	push   0xc002bfc6
c0019138:	e8 08 9d ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001913d:	83 c4 10             	add    esp,0x10
c0019140:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c0019145:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001914c:	75 05                	jne    c0019153 <CPU::displayFeatures()+0xe9>
c001914e:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c0019153:	51                   	push   ecx
c0019154:	51                   	push   ecx
c0019155:	50                   	push   eax
c0019156:	68 dd bf 02 c0       	push   0xc002bfdd
c001915b:	e8 e5 9c ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0019160:	83 c4 10             	add    esp,0x10
c0019163:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c0019168:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001916f:	75 05                	jne    c0019176 <CPU::displayFeatures()+0x10c>
c0019171:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c0019176:	52                   	push   edx
c0019177:	52                   	push   edx
c0019178:	50                   	push   eax
c0019179:	68 f4 bf 02 c0       	push   0xc002bff4
c001917e:	e8 c2 9c ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0019183:	83 c4 10             	add    esp,0x10
c0019186:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c001918b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0019192:	75 05                	jne    c0019199 <CPU::displayFeatures()+0x12f>
c0019194:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c0019199:	51                   	push   ecx
c001919a:	51                   	push   ecx
c001919b:	50                   	push   eax
c001919c:	68 0b c0 02 c0       	push   0xc002c00b
c00191a1:	e8 9f 9c ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00191a6:	83 c4 10             	add    esp,0x10
c00191a9:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c00191ae:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00191b5:	75 05                	jne    c00191bc <CPU::displayFeatures()+0x152>
c00191b7:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c00191bc:	52                   	push   edx
c00191bd:	52                   	push   edx
c00191be:	50                   	push   eax
c00191bf:	68 22 c0 02 c0       	push   0xc002c022
c00191c4:	e8 7c 9c ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00191c9:	83 c4 10             	add    esp,0x10
c00191cc:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c00191d1:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00191d8:	75 05                	jne    c00191df <CPU::displayFeatures()+0x175>
c00191da:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c00191df:	51                   	push   ecx
c00191e0:	51                   	push   ecx
c00191e1:	50                   	push   eax
c00191e2:	68 39 c0 02 c0       	push   0xc002c039
c00191e7:	e8 59 9c ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00191ec:	83 c4 10             	add    esp,0x10
c00191ef:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c00191f4:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00191fb:	75 05                	jne    c0019202 <CPU::displayFeatures()+0x198>
c00191fd:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c0019202:	52                   	push   edx
c0019203:	52                   	push   edx
c0019204:	50                   	push   eax
c0019205:	68 50 c0 02 c0       	push   0xc002c050
c001920a:	e8 36 9c ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001920f:	83 c4 10             	add    esp,0x10
c0019212:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c0019217:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001921e:	75 05                	jne    c0019225 <CPU::displayFeatures()+0x1bb>
c0019220:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c0019225:	51                   	push   ecx
c0019226:	51                   	push   ecx
c0019227:	50                   	push   eax
c0019228:	68 67 c0 02 c0       	push   0xc002c067
c001922d:	e8 13 9c ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0019232:	83 c4 10             	add    esp,0x10
c0019235:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c001923a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019241:	75 05                	jne    c0019248 <CPU::displayFeatures()+0x1de>
c0019243:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c0019248:	52                   	push   edx
c0019249:	52                   	push   edx
c001924a:	50                   	push   eax
c001924b:	68 7e c0 02 c0       	push   0xc002c07e
c0019250:	e8 f0 9b ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0019255:	83 c4 10             	add    esp,0x10
c0019258:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c001925d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019264:	75 05                	jne    c001926b <CPU::displayFeatures()+0x201>
c0019266:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c001926b:	51                   	push   ecx
c001926c:	51                   	push   ecx
c001926d:	50                   	push   eax
c001926e:	68 95 c0 02 c0       	push   0xc002c095
c0019273:	e8 cd 9b ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0019278:	83 c4 10             	add    esp,0x10
c001927b:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c0019280:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019287:	75 05                	jne    c001928e <CPU::displayFeatures()+0x224>
c0019289:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c001928e:	52                   	push   edx
c001928f:	52                   	push   edx
c0019290:	50                   	push   eax
c0019291:	68 ac c0 02 c0       	push   0xc002c0ac
c0019296:	e8 aa 9b ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001929b:	83 c4 10             	add    esp,0x10
c001929e:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c00192a3:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00192aa:	78 05                	js     c00192b1 <CPU::displayFeatures()+0x247>
c00192ac:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c00192b1:	51                   	push   ecx
c00192b2:	51                   	push   ecx
c00192b3:	50                   	push   eax
c00192b4:	68 c3 c0 02 c0       	push   0xc002c0c3
c00192b9:	e8 87 9b ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00192be:	83 c4 10             	add    esp,0x10
c00192c1:	b8 92 a8 02 c0       	mov    eax,0xc002a892
c00192c6:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00192cd:	75 05                	jne    c00192d4 <CPU::displayFeatures()+0x26a>
c00192cf:	b8 96 a8 02 c0       	mov    eax,0xc002a896
c00192d4:	52                   	push   edx
c00192d5:	52                   	push   edx
c00192d6:	50                   	push   eax
c00192d7:	68 da c0 02 c0       	push   0xc002c0da
c00192dc:	e8 64 9b ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00192e1:	83 c4 18             	add    esp,0x18
c00192e4:	5b                   	pop    ebx
c00192e5:	c3                   	ret    

c00192e6 <CPU::detectFeatures()>:
c00192e6:	55                   	push   ebp
c00192e7:	57                   	push   edi
c00192e8:	56                   	push   esi
c00192e9:	53                   	push   ebx
c00192ea:	83 ec 50             	sub    esp,0x50
c00192ed:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00192f1:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00192fb:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019302:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019308:	6a 0d                	push   0xd
c001930a:	6a 00                	push   0x0
c001930c:	57                   	push   edi
c001930d:	e8 8a 74 fe ff       	call   c000079c <memset>
c0019312:	83 c4 10             	add    esp,0x10
c0019315:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c001931a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019321:	0f 84 20 09 00 00    	je     c0019c47 <CPU::detectFeatures()+0x961>
c0019327:	83 ec 0c             	sub    esp,0xc
c001932a:	6a 10                	push   0x10
c001932c:	e8 f3 fb ff ff       	call   c0018f24 <CPU::cpuidCheckEDX(unsigned int)>
c0019331:	83 e0 01             	and    eax,0x1
c0019334:	8d 14 00             	lea    edx,[eax+eax*1]
c0019337:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001933d:	83 e0 fd             	and    eax,0xfffffffd
c0019340:	09 d0                	or     eax,edx
c0019342:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019348:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001934f:	e8 d0 fb ff ff       	call   c0018f24 <CPU::cpuidCheckEDX(unsigned int)>
c0019354:	83 e0 01             	and    eax,0x1
c0019357:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001935e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019364:	83 e0 fb             	and    eax,0xfffffffb
c0019367:	09 d0                	or     eax,edx
c0019369:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001936f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019376:	e8 a9 fb ff ff       	call   c0018f24 <CPU::cpuidCheckEDX(unsigned int)>
c001937b:	83 e0 01             	and    eax,0x1
c001937e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019385:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001938b:	83 e0 f7             	and    eax,0xfffffff7
c001938e:	09 d0                	or     eax,edx
c0019390:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019396:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001939d:	e8 82 fb ff ff       	call   c0018f24 <CPU::cpuidCheckEDX(unsigned int)>
c00193a2:	83 e0 01             	and    eax,0x1
c00193a5:	c1 e0 04             	shl    eax,0x4
c00193a8:	88 c2                	mov    dl,al
c00193aa:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193b0:	83 e0 ef             	and    eax,0xffffffef
c00193b3:	09 d0                	or     eax,edx
c00193b5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193bb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00193c2:	e8 5d fb ff ff       	call   c0018f24 <CPU::cpuidCheckEDX(unsigned int)>
c00193c7:	83 e0 01             	and    eax,0x1
c00193ca:	c1 e0 05             	shl    eax,0x5
c00193cd:	88 c2                	mov    dl,al
c00193cf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193d5:	83 e0 df             	and    eax,0xffffffdf
c00193d8:	09 d0                	or     eax,edx
c00193da:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193e0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00193e7:	e8 38 fb ff ff       	call   c0018f24 <CPU::cpuidCheckEDX(unsigned int)>
c00193ec:	83 e0 01             	and    eax,0x1
c00193ef:	8d 14 00             	lea    edx,[eax+eax*1]
c00193f2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00193f8:	83 e0 fd             	and    eax,0xfffffffd
c00193fb:	09 d0                	or     eax,edx
c00193fd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019403:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001940a:	e8 15 fb ff ff       	call   c0018f24 <CPU::cpuidCheckEDX(unsigned int)>
c001940f:	83 e0 01             	and    eax,0x1
c0019412:	c1 e0 06             	shl    eax,0x6
c0019415:	88 c2                	mov    dl,al
c0019417:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001941d:	83 e0 bf             	and    eax,0xffffffbf
c0019420:	09 d0                	or     eax,edx
c0019422:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019428:	58                   	pop    eax
c0019429:	8d 74 24 28          	lea    esi,[esp+0x28]
c001942d:	56                   	push   esi
c001942e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019432:	55                   	push   ebp
c0019433:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019437:	50                   	push   eax
c0019438:	8d 54 24 28          	lea    edx,[esp+0x28]
c001943c:	52                   	push   edx
c001943d:	6a 00                	push   0x0
c001943f:	e8 5c fa ff ff       	call   c0018ea0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019444:	83 c4 1c             	add    esp,0x1c
c0019447:	6a 04                	push   0x4
c0019449:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001944d:	50                   	push   eax
c001944e:	57                   	push   edi
c001944f:	e8 14 73 fe ff       	call   c0000768 <memcpy>
c0019454:	83 c4 0c             	add    esp,0xc
c0019457:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001945d:	6a 04                	push   0x4
c001945f:	56                   	push   esi
c0019460:	50                   	push   eax
c0019461:	e8 02 73 fe ff       	call   c0000768 <memcpy>
c0019466:	83 c4 0c             	add    esp,0xc
c0019469:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001946f:	6a 04                	push   0x4
c0019471:	55                   	push   ebp
c0019472:	50                   	push   eax
c0019473:	e8 f0 72 fe ff       	call   c0000768 <memcpy>
c0019478:	58                   	pop    eax
c0019479:	5a                   	pop    edx
c001947a:	68 f1 c0 02 c0       	push   0xc002c0f1
c001947f:	57                   	push   edi
c0019480:	e8 5f 74 fe ff       	call   c00008e4 <strcmp>
c0019485:	83 c4 10             	add    esp,0x10
c0019488:	85 c0                	test   eax,eax
c001948a:	75 0f                	jne    c001949b <CPU::detectFeatures()+0x1b5>
c001948c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019496:	e9 22 02 00 00       	jmp    c00196bd <CPU::detectFeatures()+0x3d7>
c001949b:	50                   	push   eax
c001949c:	50                   	push   eax
c001949d:	68 fe c0 02 c0       	push   0xc002c0fe
c00194a2:	57                   	push   edi
c00194a3:	e8 3c 74 fe ff       	call   c00008e4 <strcmp>
c00194a8:	83 c4 10             	add    esp,0x10
c00194ab:	85 c0                	test   eax,eax
c00194ad:	74 dd                	je     c001948c <CPU::detectFeatures()+0x1a6>
c00194af:	51                   	push   ecx
c00194b0:	51                   	push   ecx
c00194b1:	68 0b c1 02 c0       	push   0xc002c10b
c00194b6:	57                   	push   edi
c00194b7:	e8 28 74 fe ff       	call   c00008e4 <strcmp>
c00194bc:	83 c4 10             	add    esp,0x10
c00194bf:	85 c0                	test   eax,eax
c00194c1:	74 2a                	je     c00194ed <CPU::detectFeatures()+0x207>
c00194c3:	52                   	push   edx
c00194c4:	52                   	push   edx
c00194c5:	68 18 c1 02 c0       	push   0xc002c118
c00194ca:	57                   	push   edi
c00194cb:	e8 14 74 fe ff       	call   c00008e4 <strcmp>
c00194d0:	83 c4 10             	add    esp,0x10
c00194d3:	85 c0                	test   eax,eax
c00194d5:	74 16                	je     c00194ed <CPU::detectFeatures()+0x207>
c00194d7:	50                   	push   eax
c00194d8:	50                   	push   eax
c00194d9:	68 25 c1 02 c0       	push   0xc002c125
c00194de:	57                   	push   edi
c00194df:	e8 00 74 fe ff       	call   c00008e4 <strcmp>
c00194e4:	83 c4 10             	add    esp,0x10
c00194e7:	85 c0                	test   eax,eax
c00194e9:	74 48                	je     c0019533 <CPU::detectFeatures()+0x24d>
c00194eb:	eb 0f                	jmp    c00194fc <CPU::detectFeatures()+0x216>
c00194ed:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00194f7:	e9 c1 01 00 00       	jmp    c00196bd <CPU::detectFeatures()+0x3d7>
c00194fc:	50                   	push   eax
c00194fd:	50                   	push   eax
c00194fe:	68 32 c1 02 c0       	push   0xc002c132
c0019503:	57                   	push   edi
c0019504:	e8 db 73 fe ff       	call   c00008e4 <strcmp>
c0019509:	83 c4 10             	add    esp,0x10
c001950c:	85 c0                	test   eax,eax
c001950e:	74 23                	je     c0019533 <CPU::detectFeatures()+0x24d>
c0019510:	50                   	push   eax
c0019511:	50                   	push   eax
c0019512:	68 3f c1 02 c0       	push   0xc002c13f
c0019517:	57                   	push   edi
c0019518:	e8 c7 73 fe ff       	call   c00008e4 <strcmp>
c001951d:	83 c4 10             	add    esp,0x10
c0019520:	85 c0                	test   eax,eax
c0019522:	75 1e                	jne    c0019542 <CPU::detectFeatures()+0x25c>
c0019524:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001952e:	e9 8a 01 00 00       	jmp    c00196bd <CPU::detectFeatures()+0x3d7>
c0019533:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001953d:	e9 7b 01 00 00       	jmp    c00196bd <CPU::detectFeatures()+0x3d7>
c0019542:	50                   	push   eax
c0019543:	50                   	push   eax
c0019544:	68 4c c1 02 c0       	push   0xc002c14c
c0019549:	57                   	push   edi
c001954a:	e8 95 73 fe ff       	call   c00008e4 <strcmp>
c001954f:	83 c4 10             	add    esp,0x10
c0019552:	85 c0                	test   eax,eax
c0019554:	75 0f                	jne    c0019565 <CPU::detectFeatures()+0x27f>
c0019556:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019560:	e9 58 01 00 00       	jmp    c00196bd <CPU::detectFeatures()+0x3d7>
c0019565:	50                   	push   eax
c0019566:	50                   	push   eax
c0019567:	68 0b c1 02 c0       	push   0xc002c10b
c001956c:	57                   	push   edi
c001956d:	e8 72 73 fe ff       	call   c00008e4 <strcmp>
c0019572:	83 c4 10             	add    esp,0x10
c0019575:	85 c0                	test   eax,eax
c0019577:	75 0f                	jne    c0019588 <CPU::detectFeatures()+0x2a2>
c0019579:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019583:	e9 35 01 00 00       	jmp    c00196bd <CPU::detectFeatures()+0x3d7>
c0019588:	50                   	push   eax
c0019589:	50                   	push   eax
c001958a:	68 59 c1 02 c0       	push   0xc002c159
c001958f:	57                   	push   edi
c0019590:	e8 4f 73 fe ff       	call   c00008e4 <strcmp>
c0019595:	83 c4 10             	add    esp,0x10
c0019598:	85 c0                	test   eax,eax
c001959a:	75 0f                	jne    c00195ab <CPU::detectFeatures()+0x2c5>
c001959c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00195a6:	e9 12 01 00 00       	jmp    c00196bd <CPU::detectFeatures()+0x3d7>
c00195ab:	51                   	push   ecx
c00195ac:	51                   	push   ecx
c00195ad:	68 66 c1 02 c0       	push   0xc002c166
c00195b2:	57                   	push   edi
c00195b3:	e8 2c 73 fe ff       	call   c00008e4 <strcmp>
c00195b8:	83 c4 10             	add    esp,0x10
c00195bb:	85 c0                	test   eax,eax
c00195bd:	75 0f                	jne    c00195ce <CPU::detectFeatures()+0x2e8>
c00195bf:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00195c9:	e9 ef 00 00 00       	jmp    c00196bd <CPU::detectFeatures()+0x3d7>
c00195ce:	52                   	push   edx
c00195cf:	52                   	push   edx
c00195d0:	68 73 c1 02 c0       	push   0xc002c173
c00195d5:	57                   	push   edi
c00195d6:	e8 09 73 fe ff       	call   c00008e4 <strcmp>
c00195db:	83 c4 10             	add    esp,0x10
c00195de:	85 c0                	test   eax,eax
c00195e0:	75 0f                	jne    c00195f1 <CPU::detectFeatures()+0x30b>
c00195e2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00195ec:	e9 cc 00 00 00       	jmp    c00196bd <CPU::detectFeatures()+0x3d7>
c00195f1:	50                   	push   eax
c00195f2:	50                   	push   eax
c00195f3:	68 80 c1 02 c0       	push   0xc002c180
c00195f8:	57                   	push   edi
c00195f9:	e8 e6 72 fe ff       	call   c00008e4 <strcmp>
c00195fe:	83 c4 10             	add    esp,0x10
c0019601:	85 c0                	test   eax,eax
c0019603:	75 0f                	jne    c0019614 <CPU::detectFeatures()+0x32e>
c0019605:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001960f:	e9 a9 00 00 00       	jmp    c00196bd <CPU::detectFeatures()+0x3d7>
c0019614:	50                   	push   eax
c0019615:	50                   	push   eax
c0019616:	68 8d c1 02 c0       	push   0xc002c18d
c001961b:	57                   	push   edi
c001961c:	e8 c3 72 fe ff       	call   c00008e4 <strcmp>
c0019621:	83 c4 10             	add    esp,0x10
c0019624:	85 c0                	test   eax,eax
c0019626:	75 0f                	jne    c0019637 <CPU::detectFeatures()+0x351>
c0019628:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019632:	e9 86 00 00 00       	jmp    c00196bd <CPU::detectFeatures()+0x3d7>
c0019637:	50                   	push   eax
c0019638:	50                   	push   eax
c0019639:	68 9a c1 02 c0       	push   0xc002c19a
c001963e:	57                   	push   edi
c001963f:	e8 a0 72 fe ff       	call   c00008e4 <strcmp>
c0019644:	83 c4 10             	add    esp,0x10
c0019647:	85 c0                	test   eax,eax
c0019649:	75 0c                	jne    c0019657 <CPU::detectFeatures()+0x371>
c001964b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019655:	eb 66                	jmp    c00196bd <CPU::detectFeatures()+0x3d7>
c0019657:	50                   	push   eax
c0019658:	50                   	push   eax
c0019659:	68 a7 c1 02 c0       	push   0xc002c1a7
c001965e:	57                   	push   edi
c001965f:	e8 80 72 fe ff       	call   c00008e4 <strcmp>
c0019664:	83 c4 10             	add    esp,0x10
c0019667:	85 c0                	test   eax,eax
c0019669:	75 0c                	jne    c0019677 <CPU::detectFeatures()+0x391>
c001966b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019675:	eb 46                	jmp    c00196bd <CPU::detectFeatures()+0x3d7>
c0019677:	50                   	push   eax
c0019678:	50                   	push   eax
c0019679:	68 b4 c1 02 c0       	push   0xc002c1b4
c001967e:	57                   	push   edi
c001967f:	e8 60 72 fe ff       	call   c00008e4 <strcmp>
c0019684:	83 c4 10             	add    esp,0x10
c0019687:	85 c0                	test   eax,eax
c0019689:	74 e0                	je     c001966b <CPU::detectFeatures()+0x385>
c001968b:	50                   	push   eax
c001968c:	50                   	push   eax
c001968d:	68 c1 c1 02 c0       	push   0xc002c1c1
c0019692:	57                   	push   edi
c0019693:	e8 4c 72 fe ff       	call   c00008e4 <strcmp>
c0019698:	83 c4 10             	add    esp,0x10
c001969b:	85 c0                	test   eax,eax
c001969d:	74 cc                	je     c001966b <CPU::detectFeatures()+0x385>
c001969f:	51                   	push   ecx
c00196a0:	51                   	push   ecx
c00196a1:	68 ce c1 02 c0       	push   0xc002c1ce
c00196a6:	57                   	push   edi
c00196a7:	e8 38 72 fe ff       	call   c00008e4 <strcmp>
c00196ac:	83 c4 10             	add    esp,0x10
c00196af:	85 c0                	test   eax,eax
c00196b1:	74 b8                	je     c001966b <CPU::detectFeatures()+0x385>
c00196b3:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00196bd:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00196c2:	0f 86 be 00 00 00    	jbe    c0019786 <CPU::detectFeatures()+0x4a0>
c00196c8:	83 ec 0c             	sub    esp,0xc
c00196cb:	68 80 00 00 00       	push   0x80
c00196d0:	e8 ab f8 ff ff       	call   c0018f80 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00196d5:	83 e0 01             	and    eax,0x1
c00196d8:	c1 e0 06             	shl    eax,0x6
c00196db:	88 c2                	mov    dl,al
c00196dd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00196e3:	83 e0 bf             	and    eax,0xffffffbf
c00196e6:	09 d0                	or     eax,edx
c00196e8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00196ee:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00196f5:	e8 86 f8 ff ff       	call   c0018f80 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00196fa:	83 e0 01             	and    eax,0x1
c00196fd:	c1 e0 04             	shl    eax,0x4
c0019700:	88 c2                	mov    dl,al
c0019702:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019708:	83 e0 ef             	and    eax,0xffffffef
c001970b:	09 d0                	or     eax,edx
c001970d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019713:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001971a:	e8 61 f8 ff ff       	call   c0018f80 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001971f:	c1 e0 07             	shl    eax,0x7
c0019722:	88 c2                	mov    dl,al
c0019724:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001972a:	83 e0 7f             	and    eax,0x7f
c001972d:	09 d0                	or     eax,edx
c001972f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019735:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001973c:	e8 6d f8 ff ff       	call   c0018fae <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019741:	83 e0 01             	and    eax,0x1
c0019744:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001974b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019751:	83 e0 f7             	and    eax,0xfffffff7
c0019754:	09 d0                	or     eax,edx
c0019756:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001975c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019763:	e8 46 f8 ff ff       	call   c0018fae <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019768:	83 c4 10             	add    esp,0x10
c001976b:	83 e0 01             	and    eax,0x1
c001976e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019775:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001977b:	83 e0 fb             	and    eax,0xfffffffb
c001977e:	09 d0                	or     eax,edx
c0019780:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019786:	83 ec 0c             	sub    esp,0xc
c0019789:	56                   	push   esi
c001978a:	55                   	push   ebp
c001978b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001978f:	57                   	push   edi
c0019790:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019794:	50                   	push   eax
c0019795:	6a 01                	push   0x1
c0019797:	e8 04 f7 ff ff       	call   c0018ea0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001979c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00197a0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00197a6:	88 ca                	mov    dl,cl
c00197a8:	83 e0 f0             	and    eax,0xfffffff0
c00197ab:	83 e2 0f             	and    edx,0xf
c00197ae:	09 d0                	or     eax,edx
c00197b0:	88 ca                	mov    dl,cl
c00197b2:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00197b8:	c0 ea 04             	shr    dl,0x4
c00197bb:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00197bf:	0f b6 c2             	movzx  eax,dl
c00197c2:	83 c4 20             	add    esp,0x20
c00197c5:	c1 e0 06             	shl    eax,0x6
c00197c8:	89 c5                	mov    ebp,eax
c00197ca:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197d0:	66 25 3f c0          	and    ax,0xc03f
c00197d4:	09 e8                	or     eax,ebp
c00197d6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00197dd:	89 c8                	mov    eax,ecx
c00197df:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00197e5:	c1 e8 08             	shr    eax,0x8
c00197e8:	83 e2 3f             	and    edx,0x3f
c00197eb:	83 e0 0f             	and    eax,0xf
c00197ee:	89 c5                	mov    ebp,eax
c00197f0:	c1 e5 06             	shl    ebp,0x6
c00197f3:	09 d5                	or     ebp,edx
c00197f5:	89 ea                	mov    edx,ebp
c00197f7:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00197fd:	88 c2                	mov    dl,al
c00197ff:	c0 ea 02             	shr    dl,0x2
c0019802:	89 d5                	mov    ebp,edx
c0019804:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001980a:	83 e2 c0             	and    edx,0xffffffc0
c001980d:	09 d5                	or     ebp,edx
c001980f:	89 ea                	mov    edx,ebp
c0019811:	89 cd                	mov    ebp,ecx
c0019813:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019819:	c1 ed 0c             	shr    ebp,0xc
c001981c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019822:	83 e5 03             	and    ebp,0x3
c0019825:	83 e2 cf             	and    edx,0xffffffcf
c0019828:	c1 e5 04             	shl    ebp,0x4
c001982b:	09 d5                	or     ebp,edx
c001982d:	3c 06                	cmp    al,0x6
c001982f:	89 ea                	mov    edx,ebp
c0019831:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019837:	74 04                	je     c001983d <CPU::detectFeatures()+0x557>
c0019839:	3c 0f                	cmp    al,0xf
c001983b:	75 5c                	jne    c0019899 <CPU::detectFeatures()+0x5b3>
c001983d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019841:	89 cd                	mov    ebp,ecx
c0019843:	c1 ed 10             	shr    ebp,0x10
c0019846:	c1 e5 04             	shl    ebp,0x4
c0019849:	09 ea                	or     edx,ebp
c001984b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019851:	0f b6 d2             	movzx  edx,dl
c0019854:	66 81 e5 3f c0       	and    bp,0xc03f
c0019859:	c1 e2 06             	shl    edx,0x6
c001985c:	09 ea                	or     edx,ebp
c001985e:	3c 0f                	cmp    al,0xf
c0019860:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019867:	75 30                	jne    c0019899 <CPU::detectFeatures()+0x5b3>
c0019869:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001986f:	c1 e9 14             	shr    ecx,0x14
c0019872:	83 e0 3f             	and    eax,0x3f
c0019875:	83 c1 0f             	add    ecx,0xf
c0019878:	88 ca                	mov    dl,cl
c001987a:	c0 e9 02             	shr    cl,0x2
c001987d:	c1 e2 06             	shl    edx,0x6
c0019880:	09 d0                	or     eax,edx
c0019882:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019888:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001988e:	83 e0 c0             	and    eax,0xffffffc0
c0019891:	09 c1                	or     ecx,eax
c0019893:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019899:	83 ec 0c             	sub    esp,0xc
c001989c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00198a3:	56                   	push   esi
c00198a4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00198a8:	50                   	push   eax
c00198a9:	57                   	push   edi
c00198aa:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00198ae:	55                   	push   ebp
c00198af:	68 00 00 00 80       	push   0x80000000
c00198b4:	e8 e7 f5 ff ff       	call   c0018ea0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00198b9:	83 c4 20             	add    esp,0x20
c00198bc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00198c4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198c8:	76 1e                	jbe    c00198e8 <CPU::detectFeatures()+0x602>
c00198ca:	83 ec 0c             	sub    esp,0xc
c00198cd:	56                   	push   esi
c00198ce:	50                   	push   eax
c00198cf:	57                   	push   edi
c00198d0:	55                   	push   ebp
c00198d1:	68 01 00 00 80       	push   0x80000001
c00198d6:	e8 c5 f5 ff ff       	call   c0018ea0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00198db:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00198e5:	83 c4 20             	add    esp,0x20
c00198e8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00198ee:	83 f8 01             	cmp    eax,0x1
c00198f1:	75 6f                	jne    c0019962 <CPU::detectFeatures()+0x67c>
c00198f3:	51                   	push   ecx
c00198f4:	51                   	push   ecx
c00198f5:	68 da c1 02 c0       	push   0xc002c1da
c00198fa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00198fe:	56                   	push   esi
c00198ff:	e8 54 6f fe ff       	call   c0000858 <strcpy>
c0019904:	5f                   	pop    edi
c0019905:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001990b:	5d                   	pop    ebp
c001990c:	66 c1 e8 06          	shr    ax,0x6
c0019910:	0f b6 c0             	movzx  eax,al
c0019913:	50                   	push   eax
c0019914:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001991a:	c1 e8 0e             	shr    eax,0xe
c001991d:	0f b6 c0             	movzx  eax,al
c0019920:	50                   	push   eax
c0019921:	e8 24 f2 ff ff       	call   c0018b4a <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019926:	5a                   	pop    edx
c0019927:	59                   	pop    ecx
c0019928:	50                   	push   eax
c0019929:	56                   	push   esi
c001992a:	e8 69 70 fe ff       	call   c0000998 <strcat>
c001992f:	5f                   	pop    edi
c0019930:	5d                   	pop    ebp
c0019931:	56                   	push   esi
c0019932:	53                   	push   ebx
c0019933:	e8 24 ab ff ff       	call   c001445c <Device::setName(char const*)>
c0019938:	58                   	pop    eax
c0019939:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001993f:	5a                   	pop    edx
c0019940:	68 e1 c1 02 c0       	push   0xc002c1e1
c0019945:	50                   	push   eax
c0019946:	e8 99 6f fe ff       	call   c00008e4 <strcmp>
c001994b:	83 c4 10             	add    esp,0x10
c001994e:	85 c0                	test   eax,eax
c0019950:	0f 85 71 03 00 00    	jne    c0019cc7 <CPU::detectFeatures()+0x9e1>
c0019956:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001995d:	e9 65 03 00 00       	jmp    c0019cc7 <CPU::detectFeatures()+0x9e1>
c0019962:	83 f8 02             	cmp    eax,0x2
c0019965:	0f 85 b5 00 00 00    	jne    c0019a20 <CPU::detectFeatures()+0x73a>
c001996b:	57                   	push   edi
c001996c:	57                   	push   edi
c001996d:	68 f3 c1 02 c0       	push   0xc002c1f3
c0019972:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019976:	56                   	push   esi
c0019977:	e8 dc 6e fe ff       	call   c0000858 <strcpy>
c001997c:	5d                   	pop    ebp
c001997d:	58                   	pop    eax
c001997e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019984:	66 c1 e8 06          	shr    ax,0x6
c0019988:	0f b6 c0             	movzx  eax,al
c001998b:	50                   	push   eax
c001998c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019992:	c1 e8 0e             	shr    eax,0xe
c0019995:	0f b6 c0             	movzx  eax,al
c0019998:	50                   	push   eax
c0019999:	e8 18 f0 ff ff       	call   c00189b6 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001999e:	5a                   	pop    edx
c001999f:	59                   	pop    ecx
c00199a0:	50                   	push   eax
c00199a1:	56                   	push   esi
c00199a2:	e8 f1 6f fe ff       	call   c0000998 <strcat>
c00199a7:	5f                   	pop    edi
c00199a8:	5d                   	pop    ebp
c00199a9:	56                   	push   esi
c00199aa:	53                   	push   ebx
c00199ab:	e8 ac aa ff ff       	call   c001445c <Device::setName(char const*)>
c00199b0:	58                   	pop    eax
c00199b1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00199b7:	5a                   	pop    edx
c00199b8:	68 f8 c1 02 c0       	push   0xc002c1f8
c00199bd:	50                   	push   eax
c00199be:	e8 21 6f fe ff       	call   c00008e4 <strcmp>
c00199c3:	83 c4 10             	add    esp,0x10
c00199c6:	85 c0                	test   eax,eax
c00199c8:	75 20                	jne    c00199ea <CPU::detectFeatures()+0x704>
c00199ca:	8b 15 c8 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002edc8
c00199d0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00199d6:	a8 01                	test   al,0x1
c00199d8:	74 10                	je     c00199ea <CPU::detectFeatures()+0x704>
c00199da:	83 e0 fe             	and    eax,0xfffffffe
c00199dd:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00199e3:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00199ea:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00199f0:	c1 e8 0e             	shr    eax,0xe
c00199f3:	3c 05                	cmp    al,0x5
c00199f5:	0f 85 cc 02 00 00    	jne    c0019cc7 <CPU::detectFeatures()+0x9e1>
c00199fb:	56                   	push   esi
c00199fc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019a02:	83 e0 0f             	and    eax,0xf
c0019a05:	50                   	push   eax
c0019a06:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a0c:	66 c1 e8 06          	shr    ax,0x6
c0019a10:	0f b6 c0             	movzx  eax,al
c0019a13:	50                   	push   eax
c0019a14:	6a 05                	push   0x5
c0019a16:	e8 11 f4 ff ff       	call   c0018e2c <CPU::AMD_K6_writeback(int, int, int)>
c0019a1b:	e9 1f 02 00 00       	jmp    c0019c3f <CPU::detectFeatures()+0x959>
c0019a20:	8d 50 fd             	lea    edx,[eax-0x3]
c0019a23:	83 fa 01             	cmp    edx,0x1
c0019a26:	76 09                	jbe    c0019a31 <CPU::detectFeatures()+0x74b>
c0019a28:	83 f8 06             	cmp    eax,0x6
c0019a2b:	0f 85 91 01 00 00    	jne    c0019bc2 <CPU::detectFeatures()+0x8dc>
c0019a31:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019a37:	c1 ea 0e             	shr    edx,0xe
c0019a3a:	80 fa 05             	cmp    dl,0x5
c0019a3d:	75 7b                	jne    c0019aba <CPU::detectFeatures()+0x7d4>
c0019a3f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019a45:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019a4a:	66 81 fa 00 01       	cmp    dx,0x100
c0019a4f:	75 0c                	jne    c0019a5d <CPU::detectFeatures()+0x777>
c0019a51:	51                   	push   ecx
c0019a52:	51                   	push   ecx
c0019a53:	68 ff c1 02 c0       	push   0xc002c1ff
c0019a58:	e9 dc 01 00 00       	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019a5d:	66 81 fa 00 02       	cmp    dx,0x200
c0019a62:	75 0c                	jne    c0019a70 <CPU::detectFeatures()+0x78a>
c0019a64:	52                   	push   edx
c0019a65:	52                   	push   edx
c0019a66:	68 12 c2 02 c0       	push   0xc002c212
c0019a6b:	e9 c9 01 00 00       	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019a70:	66 81 fa 40 02       	cmp    dx,0x240
c0019a75:	75 0c                	jne    c0019a83 <CPU::detectFeatures()+0x79d>
c0019a77:	50                   	push   eax
c0019a78:	50                   	push   eax
c0019a79:	68 24 c2 02 c0       	push   0xc002c224
c0019a7e:	e9 b6 01 00 00       	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019a83:	83 f8 06             	cmp    eax,0x6
c0019a86:	75 0c                	jne    c0019a94 <CPU::detectFeatures()+0x7ae>
c0019a88:	50                   	push   eax
c0019a89:	50                   	push   eax
c0019a8a:	68 36 c2 02 c0       	push   0xc002c236
c0019a8f:	e9 a5 01 00 00       	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019a94:	83 f8 04             	cmp    eax,0x4
c0019a97:	75 0c                	jne    c0019aa5 <CPU::detectFeatures()+0x7bf>
c0019a99:	50                   	push   eax
c0019a9a:	50                   	push   eax
c0019a9b:	68 42 c2 02 c0       	push   0xc002c242
c0019aa0:	e9 94 01 00 00       	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019aa5:	83 f8 03             	cmp    eax,0x3
c0019aa8:	0f 85 19 02 00 00    	jne    c0019cc7 <CPU::detectFeatures()+0x9e1>
c0019aae:	50                   	push   eax
c0019aaf:	50                   	push   eax
c0019ab0:	68 4a c2 02 c0       	push   0xc002c24a
c0019ab5:	e9 7f 01 00 00       	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019aba:	80 fa 06             	cmp    dl,0x6
c0019abd:	0f 85 db 00 00 00    	jne    c0019b9e <CPU::detectFeatures()+0x8b8>
c0019ac3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019ac9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019ace:	66 81 fa 80 01       	cmp    dx,0x180
c0019ad3:	75 0c                	jne    c0019ae1 <CPU::detectFeatures()+0x7fb>
c0019ad5:	50                   	push   eax
c0019ad6:	50                   	push   eax
c0019ad7:	68 55 c2 02 c0       	push   0xc002c255
c0019adc:	e9 58 01 00 00       	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019ae1:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019ae7:	66 f7 c1 80 ff       	test   cx,0xff80
c0019aec:	75 0c                	jne    c0019afa <CPU::detectFeatures()+0x814>
c0019aee:	50                   	push   eax
c0019aef:	50                   	push   eax
c0019af0:	68 65 c2 02 c0       	push   0xc002c265
c0019af5:	e9 3f 01 00 00       	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019afa:	66 81 fa 40 02       	cmp    dx,0x240
c0019aff:	75 0c                	jne    c0019b0d <CPU::detectFeatures()+0x827>
c0019b01:	55                   	push   ebp
c0019b02:	55                   	push   ebp
c0019b03:	68 6c c2 02 c0       	push   0xc002c26c
c0019b08:	e9 2c 01 00 00       	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019b0d:	66 81 fa 80 02       	cmp    dx,0x280
c0019b12:	75 0c                	jne    c0019b20 <CPU::detectFeatures()+0x83a>
c0019b14:	57                   	push   edi
c0019b15:	57                   	push   edi
c0019b16:	68 75 c2 02 c0       	push   0xc002c275
c0019b1b:	e9 19 01 00 00       	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019b20:	66 81 fa 40 03       	cmp    dx,0x340
c0019b25:	74 ed                	je     c0019b14 <CPU::detectFeatures()+0x82e>
c0019b27:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019b2c:	75 0c                	jne    c0019b3a <CPU::detectFeatures()+0x854>
c0019b2e:	56                   	push   esi
c0019b2f:	56                   	push   esi
c0019b30:	68 7c c2 02 c0       	push   0xc002c27c
c0019b35:	e9 ff 00 00 00       	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019b3a:	83 f8 06             	cmp    eax,0x6
c0019b3d:	0f 84 45 ff ff ff    	je     c0019a88 <CPU::detectFeatures()+0x7a2>
c0019b43:	83 f8 04             	cmp    eax,0x4
c0019b46:	0f 84 4d ff ff ff    	je     c0019a99 <CPU::detectFeatures()+0x7b3>
c0019b4c:	83 f8 03             	cmp    eax,0x3
c0019b4f:	0f 85 72 01 00 00    	jne    c0019cc7 <CPU::detectFeatures()+0x9e1>
c0019b55:	51                   	push   ecx
c0019b56:	51                   	push   ecx
c0019b57:	68 85 c2 02 c0       	push   0xc002c285
c0019b5c:	53                   	push   ebx
c0019b5d:	e8 fa a8 ff ff       	call   c001445c <Device::setName(char const*)>
c0019b62:	b1 c1                	mov    cl,0xc1
c0019b64:	88 c8                	mov    al,cl
c0019b66:	e6 22                	out    0x22,al
c0019b68:	e4 23                	in     al,0x23
c0019b6a:	88 c2                	mov    dl,al
c0019b6c:	88 c8                	mov    al,cl
c0019b6e:	e6 22                	out    0x22,al
c0019b70:	88 d0                	mov    al,dl
c0019b72:	83 c8 10             	or     eax,0x10
c0019b75:	e6 23                	out    0x23,al
c0019b77:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019b7e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019b81:	89 d0                	mov    eax,edx
c0019b83:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019b89:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019b8d:	40                   	inc    eax
c0019b8e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019b94:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019b99:	e9 a1 00 00 00       	jmp    c0019c3f <CPU::detectFeatures()+0x959>
c0019b9e:	83 f8 06             	cmp    eax,0x6
c0019ba1:	0f 84 e1 fe ff ff    	je     c0019a88 <CPU::detectFeatures()+0x7a2>
c0019ba7:	83 f8 04             	cmp    eax,0x4
c0019baa:	0f 84 e9 fe ff ff    	je     c0019a99 <CPU::detectFeatures()+0x7b3>
c0019bb0:	83 f8 03             	cmp    eax,0x3
c0019bb3:	0f 85 0e 01 00 00    	jne    c0019cc7 <CPU::detectFeatures()+0x9e1>
c0019bb9:	52                   	push   edx
c0019bba:	52                   	push   edx
c0019bbb:	68 90 c2 02 c0       	push   0xc002c290
c0019bc0:	eb 77                	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019bc2:	83 f8 07             	cmp    eax,0x7
c0019bc5:	75 09                	jne    c0019bd0 <CPU::detectFeatures()+0x8ea>
c0019bc7:	50                   	push   eax
c0019bc8:	50                   	push   eax
c0019bc9:	68 9a c2 02 c0       	push   0xc002c29a
c0019bce:	eb 69                	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019bd0:	83 f8 0a             	cmp    eax,0xa
c0019bd3:	75 09                	jne    c0019bde <CPU::detectFeatures()+0x8f8>
c0019bd5:	50                   	push   eax
c0019bd6:	50                   	push   eax
c0019bd7:	68 a5 c2 02 c0       	push   0xc002c2a5
c0019bdc:	eb 5b                	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019bde:	83 f8 0b             	cmp    eax,0xb
c0019be1:	75 09                	jne    c0019bec <CPU::detectFeatures()+0x906>
c0019be3:	50                   	push   eax
c0019be4:	50                   	push   eax
c0019be5:	68 ad c2 02 c0       	push   0xc002c2ad
c0019bea:	eb 4d                	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019bec:	83 f8 08             	cmp    eax,0x8
c0019bef:	75 09                	jne    c0019bfa <CPU::detectFeatures()+0x914>
c0019bf1:	50                   	push   eax
c0019bf2:	50                   	push   eax
c0019bf3:	68 b6 c2 02 c0       	push   0xc002c2b6
c0019bf8:	eb 3f                	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019bfa:	83 f8 09             	cmp    eax,0x9
c0019bfd:	75 09                	jne    c0019c08 <CPU::detectFeatures()+0x922>
c0019bff:	50                   	push   eax
c0019c00:	50                   	push   eax
c0019c01:	68 be c2 02 c0       	push   0xc002c2be
c0019c06:	eb 31                	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019c08:	83 f8 05             	cmp    eax,0x5
c0019c0b:	75 09                	jne    c0019c16 <CPU::detectFeatures()+0x930>
c0019c0d:	50                   	push   eax
c0019c0e:	50                   	push   eax
c0019c0f:	68 c6 c2 02 c0       	push   0xc002c2c6
c0019c14:	eb 23                	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019c16:	83 f8 0c             	cmp    eax,0xc
c0019c19:	75 09                	jne    c0019c24 <CPU::detectFeatures()+0x93e>
c0019c1b:	55                   	push   ebp
c0019c1c:	55                   	push   ebp
c0019c1d:	68 d4 c2 02 c0       	push   0xc002c2d4
c0019c22:	eb 15                	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019c24:	83 f8 0d             	cmp    eax,0xd
c0019c27:	75 09                	jne    c0019c32 <CPU::detectFeatures()+0x94c>
c0019c29:	57                   	push   edi
c0019c2a:	57                   	push   edi
c0019c2b:	68 df c2 02 c0       	push   0xc002c2df
c0019c30:	eb 07                	jmp    c0019c39 <CPU::detectFeatures()+0x953>
c0019c32:	56                   	push   esi
c0019c33:	56                   	push   esi
c0019c34:	68 f3 c2 02 c0       	push   0xc002c2f3
c0019c39:	53                   	push   ebx
c0019c3a:	e8 1d a8 ff ff       	call   c001445c <Device::setName(char const*)>
c0019c3f:	83 c4 10             	add    esp,0x10
c0019c42:	e9 80 00 00 00       	jmp    c0019cc7 <CPU::detectFeatures()+0x9e1>
c0019c47:	51                   	push   ecx
c0019c48:	51                   	push   ecx
c0019c49:	68 3f c1 02 c0       	push   0xc002c13f
c0019c4e:	57                   	push   edi
c0019c4f:	e8 04 6c fe ff       	call   c0000858 <strcpy>
c0019c54:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019c5e:	e8 4b 66 fe ff       	call   c00002ae <is486>
c0019c63:	83 c4 10             	add    esp,0x10
c0019c66:	85 c0                	test   eax,eax
c0019c68:	74 2b                	je     c0019c95 <CPU::detectFeatures()+0x9af>
c0019c6a:	52                   	push   edx
c0019c6b:	52                   	push   edx
c0019c6c:	68 ff c2 02 c0       	push   0xc002c2ff
c0019c71:	53                   	push   ebx
c0019c72:	e8 e5 a7 ff ff       	call   c001445c <Device::setName(char const*)>
c0019c77:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019c7e:	0f 20 c0             	mov    eax,cr0
c0019c81:	83 e0 14             	and    eax,0x14
c0019c84:	83 c4 10             	add    esp,0x10
c0019c87:	83 f8 04             	cmp    eax,0x4
c0019c8a:	75 1f                	jne    c0019cab <CPU::detectFeatures()+0x9c5>
c0019c8c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019c93:	eb 32                	jmp    c0019cc7 <CPU::detectFeatures()+0x9e1>
c0019c95:	50                   	push   eax
c0019c96:	50                   	push   eax
c0019c97:	68 0a c3 02 c0       	push   0xc002c30a
c0019c9c:	53                   	push   ebx
c0019c9d:	e8 ba a7 ff ff       	call   c001445c <Device::setName(char const*)>
c0019ca2:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019ca9:	eb d3                	jmp    c0019c7e <CPU::detectFeatures()+0x998>
c0019cab:	e8 d9 65 fe ff       	call   c0000289 <hasLegacyFPU>
c0019cb0:	83 e0 01             	and    eax,0x1
c0019cb3:	8d 14 00             	lea    edx,[eax+eax*1]
c0019cb6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019cbc:	83 e0 fd             	and    eax,0xfffffffd
c0019cbf:	09 d0                	or     eax,edx
c0019cc1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019cc7:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019cce:	83 c4 4c             	add    esp,0x4c
c0019cd1:	5b                   	pop    ebx
c0019cd2:	5e                   	pop    esi
c0019cd3:	5f                   	pop    edi
c0019cd4:	5d                   	pop    ebp
c0019cd5:	c3                   	ret    

c0019cd6 <CPU::setupSMEP()>:
c0019cd6:	0f 20 e0             	mov    eax,cr4
c0019cd9:	0d 00 00 10 00       	or     eax,0x100000
c0019cde:	0f 22 e0             	mov    cr4,eax
c0019ce1:	c3                   	ret    

c0019ce2 <CPU::setupUMIP()>:
c0019ce2:	0f 20 e0             	mov    eax,cr4
c0019ce5:	80 cc 08             	or     ah,0x8
c0019ce8:	0f 22 e0             	mov    cr4,eax
c0019ceb:	c3                   	ret    

c0019cec <CPU::setupTSC()>:
c0019cec:	0f 20 e0             	mov    eax,cr4
c0019cef:	83 c8 04             	or     eax,0x4
c0019cf2:	0f 22 e0             	mov    cr4,eax
c0019cf5:	c3                   	ret    

c0019cf6 <CPU::setupLargePages()>:
c0019cf6:	0f 20 e0             	mov    eax,cr4
c0019cf9:	83 c8 10             	or     eax,0x10
c0019cfc:	0f 22 e0             	mov    cr4,eax
c0019cff:	c3                   	ret    

c0019d00 <CPU::setupPAT()>:
c0019d00:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0019d05:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d0c:	74 2c                	je     c0019d3a <CPU::setupPAT()+0x3a>
c0019d0e:	53                   	push   ebx
c0019d0f:	83 ec 10             	sub    esp,0x10
c0019d12:	68 77 02 00 00       	push   0x277
c0019d17:	50                   	push   eax
c0019d18:	e8 07 51 ff ff       	call   c000ee24 <Computer::rdmsr(unsigned int)>
c0019d1d:	83 e2 f8             	and    edx,0xfffffff8
c0019d20:	83 ca 01             	or     edx,0x1
c0019d23:	52                   	push   edx
c0019d24:	50                   	push   eax
c0019d25:	68 77 02 00 00       	push   0x277
c0019d2a:	ff 35 c8 ed 02 c0    	push   DWORD PTR ds:0xc002edc8
c0019d30:	e8 1b 51 ff ff       	call   c000ee50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019d35:	83 c4 28             	add    esp,0x28
c0019d38:	5b                   	pop    ebx
c0019d39:	c3                   	ret    
c0019d3a:	c3                   	ret    
c0019d3b:	90                   	nop

c0019d3c <CPU::setupMTRR()>:
c0019d3c:	c3                   	ret    
c0019d3d:	90                   	nop

c0019d3e <CPU::setupGlobalPages()>:
c0019d3e:	0f 20 e0             	mov    eax,cr4
c0019d41:	0c 80                	or     al,0x80
c0019d43:	0f 22 e0             	mov    cr4,eax
c0019d46:	c3                   	ret    
c0019d47:	90                   	nop

c0019d48 <CPU::allowUsermodeDataAccess()>:
c0019d48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d4c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019d53:	74 03                	je     c0019d58 <CPU::allowUsermodeDataAccess()+0x10>
c0019d55:	0f 01 cb             	stac   
c0019d58:	c3                   	ret    
c0019d59:	90                   	nop

c0019d5a <CPU::prohibitUsermodeDataAccess()>:
c0019d5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d5e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019d65:	74 03                	je     c0019d6a <CPU::prohibitUsermodeDataAccess()+0x10>
c0019d67:	0f 01 ca             	clac   
c0019d6a:	c3                   	ret    
c0019d6b:	90                   	nop

c0019d6c <CPU::setupSMAP()>:
c0019d6c:	0f 20 e0             	mov    eax,cr4
c0019d6f:	0d 00 00 20 00       	or     eax,0x200000
c0019d74:	0f 22 e0             	mov    cr4,eax
c0019d77:	eb e1                	jmp    c0019d5a <CPU::prohibitUsermodeDataAccess()>
c0019d79:	90                   	nop

c0019d7a <CPU::setupFeatures()>:
c0019d7a:	83 ec 0c             	sub    esp,0xc
c0019d7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019d81:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019d88:	74 07                	je     c0019d91 <CPU::setupFeatures()+0x17>
c0019d8a:	52                   	push   edx
c0019d8b:	e8 46 ff ff ff       	call   c0019cd6 <CPU::setupSMEP()>
c0019d90:	58                   	pop    eax
c0019d91:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019d98:	74 07                	je     c0019da1 <CPU::setupFeatures()+0x27>
c0019d9a:	52                   	push   edx
c0019d9b:	e8 cc ff ff ff       	call   c0019d6c <CPU::setupSMAP()>
c0019da0:	58                   	pop    eax
c0019da1:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019da8:	74 07                	je     c0019db1 <CPU::setupFeatures()+0x37>
c0019daa:	52                   	push   edx
c0019dab:	e8 32 ff ff ff       	call   c0019ce2 <CPU::setupUMIP()>
c0019db0:	58                   	pop    eax
c0019db1:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019db8:	74 07                	je     c0019dc1 <CPU::setupFeatures()+0x47>
c0019dba:	52                   	push   edx
c0019dbb:	e8 2c ff ff ff       	call   c0019cec <CPU::setupTSC()>
c0019dc0:	58                   	pop    eax
c0019dc1:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019dc8:	74 07                	je     c0019dd1 <CPU::setupFeatures()+0x57>
c0019dca:	52                   	push   edx
c0019dcb:	e8 26 ff ff ff       	call   c0019cf6 <CPU::setupLargePages()>
c0019dd0:	59                   	pop    ecx
c0019dd1:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019dd8:	74 07                	je     c0019de1 <CPU::setupFeatures()+0x67>
c0019dda:	52                   	push   edx
c0019ddb:	e8 5e ff ff ff       	call   c0019d3e <CPU::setupGlobalPages()>
c0019de0:	58                   	pop    eax
c0019de1:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019de8:	74 0c                	je     c0019df6 <CPU::setupFeatures()+0x7c>
c0019dea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019dee:	83 c4 0c             	add    esp,0xc
c0019df1:	e9 0a ff ff ff       	jmp    c0019d00 <CPU::setupPAT()>
c0019df6:	83 c4 0c             	add    esp,0xc
c0019df9:	c3                   	ret    

c0019dfa <CPU::open(int, int, void*)>:
c0019dfa:	57                   	push   edi
c0019dfb:	56                   	push   esi
c0019dfc:	53                   	push   ebx
c0019dfd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e01:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019e05:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019e0b:	83 ec 0c             	sub    esp,0xc
c0019e0e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019e14:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019e1a:	50                   	push   eax
c0019e1b:	e8 f0 52 ff ff       	call   c000f110 <GDT::setup()>
c0019e20:	83 c4 0c             	add    esp,0xc
c0019e23:	6a 00                	push   0x0
c0019e25:	68 ef be ad de       	push   0xdeadbeef
c0019e2a:	57                   	push   edi
c0019e2b:	e8 7a 75 ff ff       	call   c00113aa <TSS::setup(unsigned long, unsigned long)>
c0019e30:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019e33:	e8 52 75 ff ff       	call   c001138a <TSS::flush()>
c0019e38:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019e3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e41:	e8 2e 55 ff ff       	call   c000f374 <IDT::setup()>
c0019e46:	b8 00 04 00 00       	mov    eax,0x400
c0019e4b:	0f 23 f8             	mov    db7,eax
c0019e4e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019e58:	e8 95 60 ff ff       	call   c000fef2 <Phys::allocatePage()>
c0019e5d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019e63:	89 30                	mov    DWORD PTR [eax],esi
c0019e65:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019e6b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019e6e:	58                   	pop    eax
c0019e6f:	5a                   	pop    edx
c0019e70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e7a:	e8 cf 86 ff ff       	call   c001254e <VAS::setCPUSpecific(unsigned long)>
c0019e7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e82:	e8 5f f4 ff ff       	call   c00192e6 <CPU::detectFeatures()>
c0019e87:	e8 27 ba ff ff       	call   c00158b3 <setupInterruptController()>
c0019e8c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019e92:	a1 e0 ed 02 c0       	mov    eax,ds:0xc002ede0
c0019e97:	83 e0 10             	and    eax,0x10
c0019e9a:	83 f8 01             	cmp    eax,0x1
c0019e9d:	19 c0                	sbb    eax,eax
c0019e9f:	83 e0 46             	and    eax,0x46
c0019ea2:	83 c0 1e             	add    eax,0x1e
c0019ea5:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ea8:	e8 5e d0 ff ff       	call   c0016f0b <setupTimer(int)>
c0019ead:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019eb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019eb6:	e8 bf fe ff ff       	call   c0019d7a <CPU::setupFeatures()>
c0019ebb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ebe:	e8 a7 f1 ff ff       	call   c001906a <CPU::displayFeatures()>
c0019ec3:	83 c4 10             	add    esp,0x10
c0019ec6:	31 c0                	xor    eax,eax
c0019ec8:	5b                   	pop    ebx
c0019ec9:	5e                   	pop    esi
c0019eca:	5f                   	pop    edi
c0019ecb:	c3                   	ret    

c0019ecc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019ecc:	57                   	push   edi
c0019ecd:	56                   	push   esi
c0019ece:	53                   	push   ebx
c0019ecf:	51                   	push   ecx
c0019ed0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ed4:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019ed7:	0f 02 c0             	lar    eax,ax
c0019eda:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019edd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019ee1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019ee4:	88 ca                	mov    dl,cl
c0019ee6:	c0 ea 06             	shr    dl,0x6
c0019ee9:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019eed:	89 ca                	mov    edx,ecx
c0019eef:	66 c1 ea 03          	shr    dx,0x3
c0019ef3:	83 e2 07             	and    edx,0x7
c0019ef6:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019efb:	88 17                	mov    BYTE PTR [edi],dl
c0019efd:	0f 84 a6 01 00 00    	je     c001a0a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019f03:	83 e1 07             	and    ecx,0x7
c0019f06:	80 f9 04             	cmp    cl,0x4
c0019f09:	0f 84 98 00 00 00    	je     c0019fa7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019f0f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f14:	0f 95 c0             	setne  al
c0019f17:	80 f9 05             	cmp    cl,0x5
c0019f1a:	0f 95 c2             	setne  dl
c0019f1d:	08 c2                	or     dl,al
c0019f1f:	74 79                	je     c0019f9a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019f21:	84 c9                	test   cl,cl
c0019f23:	75 05                	jne    c0019f2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019f25:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019f28:	eb 3c                	jmp    c0019f66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f2a:	80 f9 01             	cmp    cl,0x1
c0019f2d:	75 05                	jne    c0019f34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019f2f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019f32:	eb 32                	jmp    c0019f66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f34:	80 f9 02             	cmp    cl,0x2
c0019f37:	75 05                	jne    c0019f3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019f39:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019f3c:	eb 28                	jmp    c0019f66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f3e:	31 c0                	xor    eax,eax
c0019f40:	80 f9 03             	cmp    cl,0x3
c0019f43:	75 05                	jne    c0019f4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019f45:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019f48:	eb 1c                	jmp    c0019f66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f4a:	80 f9 05             	cmp    cl,0x5
c0019f4d:	75 05                	jne    c0019f54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019f4f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019f52:	eb 12                	jmp    c0019f66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f54:	80 f9 06             	cmp    cl,0x6
c0019f57:	75 05                	jne    c0019f5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019f59:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019f5c:	eb 08                	jmp    c0019f66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f5e:	80 f9 07             	cmp    cl,0x7
c0019f61:	75 03                	jne    c0019f66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f63:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019f66:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019f6b:	75 10                	jne    c0019f7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019f6d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019f71:	b9 03 00 00 00       	mov    ecx,0x3
c0019f76:	01 d0                	add    eax,edx
c0019f78:	e9 37 01 00 00       	jmp    c001a0b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f7d:	b9 02 00 00 00       	mov    ecx,0x2
c0019f82:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019f87:	0f 85 27 01 00 00    	jne    c001a0b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f8d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019f90:	b9 06 00 00 00       	mov    ecx,0x6
c0019f95:	e9 1a 01 00 00       	jmp    c001a0b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f9a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019f9d:	b9 06 00 00 00       	mov    ecx,0x6
c0019fa2:	e9 0f 01 00 00       	jmp    c001a0b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019fa7:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019faa:	88 ca                	mov    dl,cl
c0019fac:	c0 ea 06             	shr    dl,0x6
c0019faf:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019fb3:	89 ca                	mov    edx,ecx
c0019fb5:	66 c1 ea 03          	shr    dx,0x3
c0019fb9:	83 e2 07             	and    edx,0x7
c0019fbc:	80 e1 07             	and    cl,0x7
c0019fbf:	75 05                	jne    c0019fc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019fc1:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019fc4:	eb 4c                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019fc6:	80 f9 01             	cmp    cl,0x1
c0019fc9:	75 05                	jne    c0019fd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019fcb:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019fce:	eb 42                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019fd0:	80 f9 02             	cmp    cl,0x2
c0019fd3:	75 05                	jne    c0019fda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019fd5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019fd8:	eb 38                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019fda:	80 f9 03             	cmp    cl,0x3
c0019fdd:	75 05                	jne    c0019fe4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019fdf:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019fe2:	eb 2e                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019fe4:	80 f9 04             	cmp    cl,0x4
c0019fe7:	75 12                	jne    c0019ffb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019fe9:	f6 c4 60             	test   ah,0x60
c0019fec:	75 08                	jne    c0019ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019fee:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019ff1:	8d 78 14             	lea    edi,[eax+0x14]
c0019ff4:	eb 1c                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ff6:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019ff9:	eb 17                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ffb:	80 f9 05             	cmp    cl,0x5
c0019ffe:	75 05                	jne    c001a005 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a000:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a003:	eb 0d                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a005:	80 f9 06             	cmp    cl,0x6
c001a008:	75 05                	jne    c001a00f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a00a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a00d:	eb 03                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a00f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a012:	84 d2                	test   dl,dl
c001a014:	75 05                	jne    c001a01b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a016:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a019:	eb 3c                	jmp    c001a057 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a01b:	80 fa 01             	cmp    dl,0x1
c001a01e:	75 05                	jne    c001a025 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a020:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a023:	eb 32                	jmp    c001a057 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a025:	80 fa 02             	cmp    dl,0x2
c001a028:	75 05                	jne    c001a02f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a02a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a02d:	eb 28                	jmp    c001a057 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a02f:	80 fa 03             	cmp    dl,0x3
c001a032:	75 05                	jne    c001a039 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a034:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a037:	eb 1e                	jmp    c001a057 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a039:	31 c0                	xor    eax,eax
c001a03b:	80 fa 04             	cmp    dl,0x4
c001a03e:	74 17                	je     c001a057 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a040:	80 fa 05             	cmp    dl,0x5
c001a043:	75 05                	jne    c001a04a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a045:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a048:	eb 0d                	jmp    c001a057 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a04a:	80 fa 06             	cmp    dl,0x6
c001a04d:	75 05                	jne    c001a054 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a04f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a052:	eb 03                	jmp    c001a057 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a054:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a057:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a05c:	0f 94 c2             	sete   dl
c001a05f:	80 f9 05             	cmp    cl,0x5
c001a062:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a066:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a06b:	d3 e0                	shl    eax,cl
c001a06d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a071:	74 0a                	je     c001a07d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a073:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a076:	b9 07 00 00 00       	mov    ecx,0x7
c001a07b:	eb 37                	jmp    c001a0b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a07d:	01 f8                	add    eax,edi
c001a07f:	b9 03 00 00 00       	mov    ecx,0x3
c001a084:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a089:	74 2b                	je     c001a0b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a08b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a090:	75 0d                	jne    c001a09f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a092:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a096:	01 c8                	add    eax,ecx
c001a098:	b9 04 00 00 00       	mov    ecx,0x4
c001a09d:	eb 17                	jmp    c001a0b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a09f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a0a2:	b9 07 00 00 00       	mov    ecx,0x7
c001a0a7:	eb 0d                	jmp    c001a0b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a0a9:	b9 02 00 00 00       	mov    ecx,0x2
c001a0ae:	b2 01                	mov    dl,0x1
c001a0b0:	31 c0                	xor    eax,eax
c001a0b2:	eb 02                	jmp    c001a0b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a0b4:	31 d2                	xor    edx,edx
c001a0b6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a0ba:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a0bc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a0c0:	88 11                	mov    BYTE PTR [ecx],dl
c001a0c2:	5a                   	pop    edx
c001a0c3:	5b                   	pop    ebx
c001a0c4:	5e                   	pop    esi
c001a0c5:	5f                   	pop    edi
c001a0c6:	c3                   	ret    

c001a0c7 <Krnl::smpEntry()>:
c001a0c7:	eb fe                	jmp    c001a0c7 <Krnl::smpEntry()>

c001a0c9 <Krnl::startCPU(int)>:
c001a0c9:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c001a0ce:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a0d5:	0f 84 36 01 00 00    	je     c001a211 <Krnl::startCPU(int)+0x148>
c001a0db:	53                   	push   ebx
c001a0dc:	83 ec 10             	sub    esp,0x10
c001a0df:	fa                   	cli    
c001a0e0:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001a0e6:	6a 1b                	push   0x1b
c001a0e8:	ff 35 c8 ed 02 c0    	push   DWORD PTR ds:0xc002edc8
c001a0ee:	e8 31 4d ff ff       	call   c000ee24 <Computer::rdmsr(unsigned int)>
c001a0f3:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a0f8:	89 c3                	mov    ebx,eax
c001a0fa:	58                   	pop    eax
c001a0fb:	5a                   	pop    edx
c001a0fc:	53                   	push   ebx
c001a0fd:	68 44 c3 02 c0       	push   0xc002c344
c001a102:	e8 3e 8d ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001a107:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a115:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a11f:	c1 e0 18             	shl    eax,0x18
c001a122:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a128:	83 c4 10             	add    esp,0x10
c001a12b:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a131:	09 c2                	or     edx,eax
c001a133:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a139:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a13f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a145:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a14b:	80 cd c5             	or     ch,0xc5
c001a14e:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a154:	f3 90                	pause  
c001a156:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a158:	0f ba e1 0c          	bt     ecx,0xc
c001a15c:	72 f6                	jb     c001a154 <Krnl::startCPU(int)+0x8b>
c001a15e:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a164:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a16a:	09 c1                	or     ecx,eax
c001a16c:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a172:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a178:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a17e:	80 cd 85             	or     ch,0x85
c001a181:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a187:	f3 90                	pause  
c001a189:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a18b:	0f ba e1 0c          	bt     ecx,0xc
c001a18f:	72 f6                	jb     c001a187 <Krnl::startCPU(int)+0xbe>
c001a191:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a19b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a1a1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a1a7:	09 c1                	or     ecx,eax
c001a1a9:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a1af:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a1b5:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a1bb:	81 c9 02 06 00 00    	or     ecx,0x602
c001a1c1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a1c7:	f3 90                	pause  
c001a1c9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a1cb:	0f ba e1 0c          	bt     ecx,0xc
c001a1cf:	72 f6                	jb     c001a1c7 <Krnl::startCPU(int)+0xfe>
c001a1d1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1db:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a1e1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a1e7:	09 c8                	or     eax,ecx
c001a1e9:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a1ef:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a1f5:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a1fa:	0d 02 06 00 00       	or     eax,0x602
c001a1ff:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a205:	f3 90                	pause  
c001a207:	8b 02                	mov    eax,DWORD PTR [edx]
c001a209:	0f ba e0 0c          	bt     eax,0xc
c001a20d:	72 f6                	jb     c001a205 <Krnl::startCPU(int)+0x13c>
c001a20f:	eb fe                	jmp    c001a20f <Krnl::startCPU(int)+0x146>
c001a211:	c3                   	ret    

c001a212 <Krnl::startCPUs()>:
c001a212:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c001a217:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a21d:	88 c2                	mov    dl,al
c001a21f:	83 e2 0a             	and    edx,0xa
c001a222:	80 fa 0a             	cmp    dl,0xa
c001a225:	75 09                	jne    c001a230 <Krnl::startCPUs()+0x1e>
c001a227:	a8 01                	test   al,0x1
c001a229:	74 05                	je     c001a230 <Krnl::startCPUs()+0x1e>
c001a22b:	e9 6b 5f fe ff       	jmp    c000019b <prepareTramp>
c001a230:	c3                   	ret    
c001a231:	90                   	nop

c001a232 <EnvVarContainer::getEnv(char const*)>:
c001a232:	57                   	push   edi
c001a233:	56                   	push   esi
c001a234:	53                   	push   ebx
c001a235:	31 db                	xor    ebx,ebx
c001a237:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a23b:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a23d:	7e 2b                	jle    c001a26a <EnvVarContainer::getEnv(char const*)+0x38>
c001a23f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a246:	50                   	push   eax
c001a247:	50                   	push   eax
c001a248:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a24b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a24e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a252:	e8 8d 66 fe ff       	call   c00008e4 <strcmp>
c001a257:	83 c4 10             	add    esp,0x10
c001a25a:	85 c0                	test   eax,eax
c001a25c:	75 09                	jne    c001a267 <EnvVarContainer::getEnv(char const*)+0x35>
c001a25e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a261:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a265:	eb 05                	jmp    c001a26c <EnvVarContainer::getEnv(char const*)+0x3a>
c001a267:	43                   	inc    ebx
c001a268:	eb d1                	jmp    c001a23b <EnvVarContainer::getEnv(char const*)+0x9>
c001a26a:	31 c0                	xor    eax,eax
c001a26c:	5b                   	pop    ebx
c001a26d:	5e                   	pop    esi
c001a26e:	5f                   	pop    edi
c001a26f:	c3                   	ret    

c001a270 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a270:	57                   	push   edi
c001a271:	56                   	push   esi
c001a272:	53                   	push   ebx
c001a273:	83 ec 1c             	sub    esp,0x1c
c001a276:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a27a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a27e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a282:	57                   	push   edi
c001a283:	e8 30 65 fe ff       	call   c00007b8 <strlen>
c001a288:	40                   	inc    eax
c001a289:	89 04 24             	mov    DWORD PTR [esp],eax
c001a28c:	e8 f5 55 ff ff       	call   c000f886 <malloc>
c001a291:	89 34 24             	mov    DWORD PTR [esp],esi
c001a294:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a298:	e8 1b 65 fe ff       	call   c00007b8 <strlen>
c001a29d:	40                   	inc    eax
c001a29e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2a1:	e8 e0 55 ff ff       	call   c000f886 <malloc>
c001a2a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a2a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2ad:	e8 06 65 fe ff       	call   c00007b8 <strlen>
c001a2b2:	83 c4 0c             	add    esp,0xc
c001a2b5:	40                   	inc    eax
c001a2b6:	50                   	push   eax
c001a2b7:	6a 00                	push   0x0
c001a2b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a2bd:	e8 da 64 fe ff       	call   c000079c <memset>
c001a2c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a2c5:	e8 ee 64 fe ff       	call   c00007b8 <strlen>
c001a2ca:	83 c4 0c             	add    esp,0xc
c001a2cd:	40                   	inc    eax
c001a2ce:	50                   	push   eax
c001a2cf:	57                   	push   edi
c001a2d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a2d4:	e8 8f 64 fe ff       	call   c0000768 <memcpy>
c001a2d9:	89 34 24             	mov    DWORD PTR [esp],esi
c001a2dc:	e8 d7 64 fe ff       	call   c00007b8 <strlen>
c001a2e1:	83 c4 0c             	add    esp,0xc
c001a2e4:	40                   	inc    eax
c001a2e5:	50                   	push   eax
c001a2e6:	6a 00                	push   0x0
c001a2e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2ec:	e8 ab 64 fe ff       	call   c000079c <memset>
c001a2f1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a2f4:	e8 bf 64 fe ff       	call   c00007b8 <strlen>
c001a2f9:	83 c4 0c             	add    esp,0xc
c001a2fc:	40                   	inc    eax
c001a2fd:	50                   	push   eax
c001a2fe:	56                   	push   esi
c001a2ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a303:	e8 60 64 fe ff       	call   c0000768 <memcpy>
c001a308:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a30a:	40                   	inc    eax
c001a30b:	89 03                	mov    DWORD PTR [ebx],eax
c001a30d:	c1 e0 03             	shl    eax,0x3
c001a310:	5a                   	pop    edx
c001a311:	59                   	pop    ecx
c001a312:	50                   	push   eax
c001a313:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a316:	e8 57 55 ff ff       	call   c000f872 <realloc>
c001a31b:	83 c4 0c             	add    esp,0xc
c001a31e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a321:	6a 08                	push   0x8
c001a323:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a327:	52                   	push   edx
c001a328:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a32a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a32e:	50                   	push   eax
c001a32f:	e8 34 64 fe ff       	call   c0000768 <memcpy>
c001a334:	83 c4 20             	add    esp,0x20
c001a337:	5b                   	pop    ebx
c001a338:	5e                   	pop    esi
c001a339:	5f                   	pop    edi
c001a33a:	c3                   	ret    
c001a33b:	90                   	nop

c001a33c <EnvVarContainer::deleteEnv(char const*)>:
c001a33c:	c3                   	ret    
c001a33d:	90                   	nop

c001a33e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a33e:	55                   	push   ebp
c001a33f:	57                   	push   edi
c001a340:	56                   	push   esi
c001a341:	53                   	push   ebx
c001a342:	81 ec 38 01 00 00    	sub    esp,0x138
c001a348:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a34f:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a356:	68 14 01 00 00       	push   0x114
c001a35b:	e8 26 55 ff ff       	call   c000f886 <malloc>
c001a360:	83 c4 0c             	add    esp,0xc
c001a363:	89 c7                	mov    edi,eax
c001a365:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a368:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a36f:	50                   	push   eax
c001a370:	e8 2f 90 ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c001a375:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a378:	e8 f9 92 ff ff       	call   c0013676 <File::exists()>
c001a37d:	83 c4 10             	add    esp,0x10
c001a380:	84 c0                	test   al,al
c001a382:	75 31                	jne    c001a3b5 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a384:	51                   	push   ecx
c001a385:	51                   	push   ecx
c001a386:	6a 12                	push   0x12
c001a388:	57                   	push   edi
c001a389:	e8 7a 90 ff ff       	call   c0013408 <File::open(FileOpenMode)>
c001a38e:	8b 07                	mov    eax,DWORD PTR [edi]
c001a390:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a393:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a396:	e8 1d 64 fe ff       	call   c00007b8 <strlen>
c001a39b:	5a                   	pop    edx
c001a39c:	31 d2                	xor    edx,edx
c001a39e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a3a2:	51                   	push   ecx
c001a3a3:	55                   	push   ebp
c001a3a4:	52                   	push   edx
c001a3a5:	50                   	push   eax
c001a3a6:	57                   	push   edi
c001a3a7:	ff d3                	call   ebx
c001a3a9:	83 c4 14             	add    esp,0x14
c001a3ac:	57                   	push   edi
c001a3ad:	e8 b4 90 ff ff       	call   c0013466 <File::close()>
c001a3b2:	83 c4 10             	add    esp,0x10
c001a3b5:	31 db                	xor    ebx,ebx
c001a3b7:	50                   	push   eax
c001a3b8:	31 ed                	xor    ebp,ebp
c001a3ba:	68 00 01 00 00       	push   0x100
c001a3bf:	6a 00                	push   0x0
c001a3c1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a3c5:	50                   	push   eax
c001a3c6:	e8 d1 63 fe ff       	call   c000079c <memset>
c001a3cb:	58                   	pop    eax
c001a3cc:	5a                   	pop    edx
c001a3cd:	6a 01                	push   0x1
c001a3cf:	57                   	push   edi
c001a3d0:	e8 33 90 ff ff       	call   c0013408 <File::open(FileOpenMode)>
c001a3d5:	83 c4 10             	add    esp,0x10
c001a3d8:	83 ec 0c             	sub    esp,0xc
c001a3db:	8b 07                	mov    eax,DWORD PTR [edi]
c001a3dd:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a3e1:	51                   	push   ecx
c001a3e2:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a3e6:	52                   	push   edx
c001a3e7:	6a 00                	push   0x0
c001a3e9:	6a 01                	push   0x1
c001a3eb:	57                   	push   edi
c001a3ec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a3ef:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a3f3:	83 c4 20             	add    esp,0x20
c001a3f6:	3c 0d                	cmp    al,0xd
c001a3f8:	0f 84 12 01 00 00    	je     c001a510 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a3fe:	85 db                	test   ebx,ebx
c001a400:	0f 84 fd 00 00 00    	je     c001a503 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a406:	3c 0a                	cmp    al,0xa
c001a408:	74 13                	je     c001a41d <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a40a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a40f:	74 0c                	je     c001a41d <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a411:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a417:	0f 8e e6 00 00 00    	jle    c001a503 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a41d:	83 ec 0c             	sub    esp,0xc
c001a420:	8d 53 01             	lea    edx,[ebx+0x1]
c001a423:	29 dd                	sub    ebp,ebx
c001a425:	52                   	push   edx
c001a426:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a42a:	e8 57 54 ff ff       	call   c000f886 <malloc>
c001a42f:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a432:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a436:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a439:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a43d:	e8 44 54 ff ff       	call   c000f886 <malloc>
c001a442:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a446:	83 c4 0c             	add    esp,0xc
c001a449:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a44d:	52                   	push   edx
c001a44e:	6a 00                	push   0x0
c001a450:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a454:	e8 43 63 fe ff       	call   c000079c <memset>
c001a459:	83 c4 0c             	add    esp,0xc
c001a45c:	53                   	push   ebx
c001a45d:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a461:	55                   	push   ebp
c001a462:	01 eb                	add    ebx,ebp
c001a464:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a468:	e8 fb 62 fe ff       	call   c0000768 <memcpy>
c001a46d:	83 c4 0c             	add    esp,0xc
c001a470:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a474:	51                   	push   ecx
c001a475:	6a 00                	push   0x0
c001a477:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a47b:	e8 1c 63 fe ff       	call   c000079c <memset>
c001a480:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a483:	e8 30 63 fe ff       	call   c00007b8 <strlen>
c001a488:	83 c4 0c             	add    esp,0xc
c001a48b:	50                   	push   eax
c001a48c:	53                   	push   ebx
c001a48d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a491:	e8 d2 62 fe ff       	call   c0000768 <memcpy>
c001a496:	5b                   	pop    ebx
c001a497:	58                   	pop    eax
c001a498:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a49c:	68 55 c3 02 c0       	push   0xc002c355
c001a4a1:	e8 9f 89 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001a4a6:	8b 06                	mov    eax,DWORD PTR [esi]
c001a4a8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a4ab:	40                   	inc    eax
c001a4ac:	83 c4 10             	add    esp,0x10
c001a4af:	89 06                	mov    DWORD PTR [esi],eax
c001a4b1:	85 d2                	test   edx,edx
c001a4b3:	75 0c                	jne    c001a4c1 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a4b5:	83 ec 0c             	sub    esp,0xc
c001a4b8:	6a 08                	push   0x8
c001a4ba:	e8 c7 53 ff ff       	call   c000f886 <malloc>
c001a4bf:	eb 0c                	jmp    c001a4cd <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a4c1:	c1 e0 03             	shl    eax,0x3
c001a4c4:	51                   	push   ecx
c001a4c5:	51                   	push   ecx
c001a4c6:	50                   	push   eax
c001a4c7:	52                   	push   edx
c001a4c8:	e8 a5 53 ff ff       	call   c000f872 <realloc>
c001a4cd:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a4d0:	83 c4 10             	add    esp,0x10
c001a4d3:	31 db                	xor    ebx,ebx
c001a4d5:	52                   	push   edx
c001a4d6:	6a 08                	push   0x8
c001a4d8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a4dc:	50                   	push   eax
c001a4dd:	8b 16                	mov    edx,DWORD PTR [esi]
c001a4df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a4e2:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a4e6:	50                   	push   eax
c001a4e7:	e8 7c 62 fe ff       	call   c0000768 <memcpy>
c001a4ec:	83 c4 0c             	add    esp,0xc
c001a4ef:	68 00 01 00 00       	push   0x100
c001a4f4:	6a 00                	push   0x0
c001a4f6:	55                   	push   ebp
c001a4f7:	31 ed                	xor    ebp,ebp
c001a4f9:	e8 9e 62 fe ff       	call   c000079c <memset>
c001a4fe:	83 c4 10             	add    esp,0x10
c001a501:	eb 0d                	jmp    c001a510 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a503:	3c 3d                	cmp    al,0x3d
c001a505:	74 07                	je     c001a50e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a507:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a50b:	45                   	inc    ebp
c001a50c:	eb 02                	jmp    c001a510 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a50e:	89 eb                	mov    ebx,ebp
c001a510:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a515:	0f 85 bd fe ff ff    	jne    c001a3d8 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a51b:	50                   	push   eax
c001a51c:	50                   	push   eax
c001a51d:	ff 36                	push   DWORD PTR [esi]
c001a51f:	68 63 c3 02 c0       	push   0xc002c363
c001a524:	e8 1c 89 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001a529:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a52f:	5b                   	pop    ebx
c001a530:	5e                   	pop    esi
c001a531:	5f                   	pop    edi
c001a532:	5d                   	pop    ebp
c001a533:	c3                   	ret    

c001a534 <EnvVarContainer::__loadSystem()>:
c001a534:	83 ec 10             	sub    esp,0x10
c001a537:	68 00 e3 02 c0       	push   0xc002e300
c001a53c:	68 8e c3 02 c0       	push   0xc002c38e
c001a541:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a545:	e8 f4 fd ff ff       	call   c001a33e <EnvVarContainer::loadFrom(char const*, char const*)>
c001a54a:	83 c4 1c             	add    esp,0x1c
c001a54d:	c3                   	ret    

c001a54e <EnvVarContainer::__loadUser()>:
c001a54e:	c3                   	ret    
c001a54f:	90                   	nop

c001a550 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a554:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a55a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a55e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a562:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a565:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a569:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a570:	90                   	nop
c001a571:	c3                   	ret    

c001a572 <EnvVarContainer::~EnvVarContainer()>:
c001a572:	83 ec 0c             	sub    esp,0xc
c001a575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a579:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a57c:	85 c0                	test   eax,eax
c001a57e:	74 1d                	je     c001a59d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a584:	8b 00                	mov    eax,DWORD PTR [eax]
c001a586:	85 c0                	test   eax,eax
c001a588:	74 13                	je     c001a59d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a58e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a591:	83 ec 0c             	sub    esp,0xc
c001a594:	50                   	push   eax
c001a595:	e8 fc 52 ff ff       	call   c000f896 <free>
c001a59a:	83 c4 10             	add    esp,0x10
c001a59d:	90                   	nop
c001a59e:	83 c4 0c             	add    esp,0xc
c001a5a1:	c3                   	ret    

c001a5a2 <Krnl::getEnv(Process*, char const*)>:
c001a5a2:	53                   	push   ebx
c001a5a3:	83 ec 08             	sub    esp,0x8
c001a5a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a5ae:	39 05 30 23 03 c0    	cmp    DWORD PTR ds:0xc0032330,eax
c001a5b4:	74 04                	je     c001a5ba <Krnl::getEnv(Process*, char const*)+0x18>
c001a5b6:	85 c0                	test   eax,eax
c001a5b8:	75 0b                	jne    c001a5c5 <Krnl::getEnv(Process*, char const*)+0x23>
c001a5ba:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a5bf:	85 c0                	test   eax,eax
c001a5c1:	75 19                	jne    c001a5dc <Krnl::getEnv(Process*, char const*)+0x3a>
c001a5c3:	eb 27                	jmp    c001a5ec <Krnl::getEnv(Process*, char const*)+0x4a>
c001a5c5:	52                   	push   edx
c001a5c6:	52                   	push   edx
c001a5c7:	53                   	push   ebx
c001a5c8:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a5ce:	e8 5f fc ff ff       	call   c001a232 <EnvVarContainer::getEnv(char const*)>
c001a5d3:	83 c4 10             	add    esp,0x10
c001a5d6:	85 c0                	test   eax,eax
c001a5d8:	75 28                	jne    c001a602 <Krnl::getEnv(Process*, char const*)+0x60>
c001a5da:	eb de                	jmp    c001a5ba <Krnl::getEnv(Process*, char const*)+0x18>
c001a5dc:	52                   	push   edx
c001a5dd:	52                   	push   edx
c001a5de:	53                   	push   ebx
c001a5df:	50                   	push   eax
c001a5e0:	e8 4d fc ff ff       	call   c001a232 <EnvVarContainer::getEnv(char const*)>
c001a5e5:	83 c4 10             	add    esp,0x10
c001a5e8:	85 c0                	test   eax,eax
c001a5ea:	75 16                	jne    c001a602 <Krnl::getEnv(Process*, char const*)+0x60>
c001a5ec:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a5f0:	a1 18 19 03 c0       	mov    eax,ds:0xc0031918
c001a5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a5f9:	83 c4 08             	add    esp,0x8
c001a5fc:	5b                   	pop    ebx
c001a5fd:	e9 30 fc ff ff       	jmp    c001a232 <EnvVarContainer::getEnv(char const*)>
c001a602:	83 c4 08             	add    esp,0x8
c001a605:	5b                   	pop    ebx
c001a606:	c3                   	ret    

c001a607 <Krnl::setEnvSystem(char const*, char const*)>:
c001a607:	83 ec 10             	sub    esp,0x10
c001a60a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a60e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a612:	ff 35 18 19 03 c0    	push   DWORD PTR ds:0xc0031918
c001a618:	e8 53 fc ff ff       	call   c001a270 <EnvVarContainer::setEnv(char const*, char const*)>
c001a61d:	83 c4 1c             	add    esp,0x1c
c001a620:	c3                   	ret    

c001a621 <Krnl::setEnvUser(char const*, char const*)>:
c001a621:	a1 14 19 03 c0       	mov    eax,ds:0xc0031914
c001a626:	85 c0                	test   eax,eax
c001a628:	74 15                	je     c001a63f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a62a:	83 ec 10             	sub    esp,0x10
c001a62d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a631:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a635:	50                   	push   eax
c001a636:	e8 35 fc ff ff       	call   c001a270 <EnvVarContainer::setEnv(char const*, char const*)>
c001a63b:	83 c4 1c             	add    esp,0x1c
c001a63e:	c3                   	ret    
c001a63f:	c3                   	ret    

c001a640 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a644:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a64a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a64e:	e9 1d fc ff ff       	jmp    c001a270 <EnvVarContainer::setEnv(char const*, char const*)>

c001a653 <Krnl::deleteEnvSystem(char const*)>:
c001a653:	c3                   	ret    

c001a654 <Krnl::deleteEnvUser(char const*)>:
c001a654:	c3                   	ret    

c001a655 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a655:	c3                   	ret    

c001a656 <Krnl::newProcessEnv(Process*)>:
c001a656:	83 ec 28             	sub    esp,0x28
c001a659:	6a 0c                	push   0xc
c001a65b:	e8 26 52 ff ff       	call   c000f886 <malloc>
c001a660:	5a                   	pop    edx
c001a661:	59                   	pop    ecx
c001a662:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a666:	50                   	push   eax
c001a667:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a66b:	e8 e0 fe ff ff       	call   c001a550 <EnvVarContainer::EnvVarContainer(Process*)>
c001a670:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a674:	83 c4 2c             	add    esp,0x2c
c001a677:	c3                   	ret    

c001a678 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a678:	56                   	push   esi
c001a679:	53                   	push   ebx
c001a67a:	83 ec 10             	sub    esp,0x10
c001a67d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a681:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a687:	6a 0c                	push   0xc
c001a689:	e8 f8 51 ff ff       	call   c000f886 <malloc>
c001a68e:	89 c3                	mov    ebx,eax
c001a690:	58                   	pop    eax
c001a691:	5a                   	pop    edx
c001a692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a696:	53                   	push   ebx
c001a697:	e8 b4 fe ff ff       	call   c001a550 <EnvVarContainer::EnvVarContainer(Process*)>
c001a69c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a69e:	89 03                	mov    DWORD PTR [ebx],eax
c001a6a0:	c1 e0 03             	shl    eax,0x3
c001a6a3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6a6:	e8 db 51 ff ff       	call   c000f886 <malloc>
c001a6ab:	83 c4 0c             	add    esp,0xc
c001a6ae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a6b1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a6b3:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a6ba:	52                   	push   edx
c001a6bb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a6be:	50                   	push   eax
c001a6bf:	e8 a4 60 fe ff       	call   c0000768 <memcpy>
c001a6c4:	89 d8                	mov    eax,ebx
c001a6c6:	83 c4 14             	add    esp,0x14
c001a6c9:	5b                   	pop    ebx
c001a6ca:	5e                   	pop    esi
c001a6cb:	c3                   	ret    

c001a6cc <Krnl::loadSystemEnv()>:
c001a6cc:	53                   	push   ebx
c001a6cd:	83 ec 14             	sub    esp,0x14
c001a6d0:	6a 0c                	push   0xc
c001a6d2:	e8 af 51 ff ff       	call   c000f886 <malloc>
c001a6d7:	89 c3                	mov    ebx,eax
c001a6d9:	58                   	pop    eax
c001a6da:	5a                   	pop    edx
c001a6db:	ff 35 30 23 03 c0    	push   DWORD PTR ds:0xc0032330
c001a6e1:	53                   	push   ebx
c001a6e2:	e8 69 fe ff ff       	call   c001a550 <EnvVarContainer::EnvVarContainer(Process*)>
c001a6e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a6ea:	89 1d 18 19 03 c0    	mov    DWORD PTR ds:0xc0031918,ebx
c001a6f0:	e8 3f fe ff ff       	call   c001a534 <EnvVarContainer::__loadSystem()>
c001a6f5:	83 c4 18             	add    esp,0x18
c001a6f8:	5b                   	pop    ebx
c001a6f9:	c3                   	ret    

c001a6fa <Krnl::loadUserEnv()>:
c001a6fa:	53                   	push   ebx
c001a6fb:	83 ec 14             	sub    esp,0x14
c001a6fe:	6a 0c                	push   0xc
c001a700:	e8 81 51 ff ff       	call   c000f886 <malloc>
c001a705:	89 c3                	mov    ebx,eax
c001a707:	58                   	pop    eax
c001a708:	5a                   	pop    edx
c001a709:	ff 35 30 23 03 c0    	push   DWORD PTR ds:0xc0032330
c001a70f:	53                   	push   ebx
c001a710:	e8 3b fe ff ff       	call   c001a550 <EnvVarContainer::EnvVarContainer(Process*)>
c001a715:	89 1d 14 19 03 c0    	mov    DWORD PTR ds:0xc0031914,ebx
c001a71b:	83 c4 18             	add    esp,0x18
c001a71e:	5b                   	pop    ebx
c001a71f:	c3                   	ret    

c001a720 <Krnl::flushEnv()>:
c001a720:	c3                   	ret    

c001a721 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a725:	8b 15 14 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031914
c001a72b:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a731:	a1 18 19 03 c0       	mov    eax,ds:0xc0031918
c001a736:	8b 00                	mov    eax,DWORD PTR [eax]
c001a738:	03 01                	add    eax,DWORD PTR [ecx]
c001a73a:	85 d2                	test   edx,edx
c001a73c:	74 02                	je     c001a740 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a73e:	03 02                	add    eax,DWORD PTR [edx]
c001a740:	c3                   	ret    

c001a741 <Krnl::getProcessEnvPair(Process*, int)>:
c001a741:	57                   	push   edi
c001a742:	8b 0d 14 19 03 c0    	mov    ecx,DWORD PTR ds:0xc0031914
c001a748:	56                   	push   esi
c001a749:	85 c9                	test   ecx,ecx
c001a74b:	53                   	push   ebx
c001a74c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a754:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a75a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a75e:	8b 02                	mov    eax,DWORD PTR [edx]
c001a760:	75 47                	jne    c001a7a9 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a762:	39 c3                	cmp    ebx,eax
c001a764:	7c 47                	jl     c001a7ad <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a766:	8b 15 18 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031918
c001a76c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a76e:	01 c1                	add    ecx,eax
c001a770:	39 d9                	cmp    ecx,ebx
c001a772:	7e 6c                	jle    c001a7e0 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a774:	51                   	push   ecx
c001a775:	89 d9                	mov    ecx,ebx
c001a777:	29 c1                	sub    ecx,eax
c001a779:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a77c:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a780:	53                   	push   ebx
c001a781:	68 b0 c3 02 c0       	push   0xc002c3b0
c001a786:	e8 ba 86 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001a78b:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a791:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a793:	a1 18 19 03 c0       	mov    eax,ds:0xc0031918
c001a798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a79b:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a79f:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a7a2:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a7a5:	89 06                	mov    DWORD PTR [esi],eax
c001a7a7:	eb 51                	jmp    c001a7fa <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a7a9:	39 c3                	cmp    ebx,eax
c001a7ab:	7d 05                	jge    c001a7b2 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a7ad:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a7b0:	eb 20                	jmp    c001a7d2 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a7b2:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a7b4:	8d 14 07             	lea    edx,[edi+eax*1]
c001a7b7:	39 da                	cmp    edx,ebx
c001a7b9:	7e 04                	jle    c001a7bf <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a7bb:	29 c3                	sub    ebx,eax
c001a7bd:	eb 10                	jmp    c001a7cf <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a7bf:	8b 0d 18 19 03 c0    	mov    ecx,DWORD PTR ds:0xc0031918
c001a7c5:	03 11                	add    edx,DWORD PTR [ecx]
c001a7c7:	39 da                	cmp    edx,ebx
c001a7c9:	7e 15                	jle    c001a7e0 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a7cb:	29 c3                	sub    ebx,eax
c001a7cd:	29 fb                	sub    ebx,edi
c001a7cf:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a7d2:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a7d6:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a7d9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a7dc:	89 06                	mov    DWORD PTR [esi],eax
c001a7de:	eb 1d                	jmp    c001a7fd <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a7e0:	83 ec 0c             	sub    esp,0xc
c001a7e3:	68 c4 c3 02 c0       	push   0xc002c3c4
c001a7e8:	e8 18 00 00 00       	call   c001a805 <Krnl::panic(char const*)>
c001a7ed:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a7f3:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a7fa:	83 c4 10             	add    esp,0x10
c001a7fd:	89 f0                	mov    eax,esi
c001a7ff:	5b                   	pop    ebx
c001a800:	5e                   	pop    esi
c001a801:	5f                   	pop    edi
c001a802:	c2 04 00             	ret    0x4

c001a805 <Krnl::panic(char const*)>:
c001a805:	55                   	push   ebp
c001a806:	89 e5                	mov    ebp,esp
c001a808:	53                   	push   ebx
c001a809:	83 ec 0c             	sub    esp,0xc
c001a80c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a80f:	fa                   	cli    
c001a810:	c6 05 24 19 03 c0 01 	mov    BYTE PTR ds:0xc0031924,0x1
c001a817:	53                   	push   ebx
c001a818:	c6 05 04 dd 02 c0 00 	mov    BYTE PTR ds:0xc002dd04,0x0
c001a81f:	68 de c3 02 c0       	push   0xc002c3de
c001a824:	e8 1c 86 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001a829:	58                   	pop    eax
c001a82a:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001a82f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a835:	e8 26 64 ff ff       	call   c0010c60 <setActiveTerminal(VgaText*)>
c001a83a:	83 c4 0c             	add    esp,0xc
c001a83d:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001a842:	6a 01                	push   0x1
c001a844:	6a 0f                	push   0xf
c001a846:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a84c:	e8 ad 5e ff ff       	call   c00106fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a851:	58                   	pop    eax
c001a852:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001a857:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a85d:	e8 44 66 ff ff       	call   c0010ea6 <VgaText::clearScreen()>
c001a862:	58                   	pop    eax
c001a863:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001a868:	5a                   	pop    edx
c001a869:	68 f7 c3 02 c0       	push   0xc002c3f7
c001a86e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a874:	e8 73 67 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001a879:	59                   	pop    ecx
c001a87a:	58                   	pop    eax
c001a87b:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001a880:	68 9c c4 02 c0       	push   0xc002c49c
c001a885:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a88b:	e8 5c 67 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001a890:	58                   	pop    eax
c001a891:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001a896:	5a                   	pop    edx
c001a897:	68 13 c4 02 c0       	push   0xc002c413
c001a89c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8a2:	e8 45 67 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001a8a7:	59                   	pop    ecx
c001a8a8:	58                   	pop    eax
c001a8a9:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001a8ae:	53                   	push   ebx
c001a8af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b5:	e8 32 67 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001a8ba:	58                   	pop    eax
c001a8bb:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001a8c0:	5a                   	pop    edx
c001a8c1:	68 33 c4 02 c0       	push   0xc002c433
c001a8c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8cc:	e8 1b 67 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001a8d1:	a1 20 19 03 c0       	mov    eax,ds:0xc0031920
c001a8d6:	83 c4 10             	add    esp,0x10
c001a8d9:	85 c0                	test   eax,eax
c001a8db:	74 02                	je     c001a8df <Krnl::panic(char const*)+0xda>
c001a8dd:	ff d0                	call   eax
c001a8df:	83 ec 0c             	sub    esp,0xc
c001a8e2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8e5:	e8 e3 30 00 00       	call   c001d9cd <Thr::getDriverNameFromAddress(unsigned long)>
c001a8ea:	83 c4 10             	add    esp,0x10
c001a8ed:	89 c3                	mov    ebx,eax
c001a8ef:	85 c0                	test   eax,eax
c001a8f1:	0f 84 50 02 00 00    	je     c001ab47 <Krnl::panic(char const*)+0x342>
c001a8f7:	83 ec 08             	sub    esp,0x8
c001a8fa:	8b 15 30 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032330
c001a900:	68 d8 c4 02 c0       	push   0xc002c4d8
c001a905:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a90b:	e8 dc 66 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001a910:	58                   	pop    eax
c001a911:	5a                   	pop    edx
c001a912:	8b 15 30 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032330
c001a918:	68 13 c4 02 c0       	push   0xc002c413
c001a91d:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a923:	e8 c4 66 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001a928:	59                   	pop    ecx
c001a929:	58                   	pop    eax
c001a92a:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001a92f:	53                   	push   ebx
c001a930:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a936:	e8 b1 66 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001a93b:	83 c4 10             	add    esp,0x10
c001a93e:	83 ec 08             	sub    esp,0x8
c001a941:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001a946:	68 32 c4 02 c0       	push   0xc002c432
c001a94b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a951:	e8 96 66 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001a956:	58                   	pop    eax
c001a957:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001a95c:	5a                   	pop    edx
c001a95d:	68 30 c5 02 c0       	push   0xc002c530
c001a962:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a968:	e8 7f 66 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001a96d:	59                   	pop    ecx
c001a96e:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001a973:	5b                   	pop    ebx
c001a974:	68 70 c5 02 c0       	push   0xc002c570
c001a979:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a97f:	e8 68 66 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001a984:	58                   	pop    eax
c001a985:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001a98a:	5a                   	pop    edx
c001a98b:	68 1e c4 02 c0       	push   0xc002c41e
c001a990:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a996:	e8 51 66 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001a99b:	59                   	pop    ecx
c001a99c:	5b                   	pop    ebx
c001a99d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a9a0:	68 36 c4 02 c0       	push   0xc002c436
c001a9a5:	e8 9b 84 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001a9aa:	58                   	pop    eax
c001a9ab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a9ae:	5a                   	pop    edx
c001a9af:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a9b2:	68 3f c4 02 c0       	push   0xc002c43f
c001a9b7:	e8 89 84 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001a9bc:	59                   	pop    ecx
c001a9bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a9c0:	5b                   	pop    ebx
c001a9c1:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9c3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a9c6:	68 48 c4 02 c0       	push   0xc002c448
c001a9cb:	e8 75 84 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001a9d0:	58                   	pop    eax
c001a9d1:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001a9d6:	5a                   	pop    edx
c001a9d7:	68 b4 c5 02 c0       	push   0xc002c5b4
c001a9dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9e2:	e8 05 66 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001a9e7:	59                   	pop    ecx
c001a9e8:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001a9ed:	5b                   	pop    ebx
c001a9ee:	68 51 c4 02 c0       	push   0xc002c451
c001a9f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9f9:	e8 ee 65 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001a9fe:	0f 20 c0             	mov    eax,cr0
c001aa01:	5a                   	pop    edx
c001aa02:	59                   	pop    ecx
c001aa03:	50                   	push   eax
c001aa04:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001aa09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa0f:	e8 fe 65 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c001aa14:	5b                   	pop    ebx
c001aa15:	58                   	pop    eax
c001aa16:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001aa1b:	68 5b c4 02 c0       	push   0xc002c45b
c001aa20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa26:	e8 c1 65 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001aa2b:	0f 20 d0             	mov    eax,cr2
c001aa2e:	5a                   	pop    edx
c001aa2f:	59                   	pop    ecx
c001aa30:	50                   	push   eax
c001aa31:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001aa36:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa3c:	e8 d1 65 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c001aa41:	5b                   	pop    ebx
c001aa42:	58                   	pop    eax
c001aa43:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001aa48:	68 65 c4 02 c0       	push   0xc002c465
c001aa4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa53:	e8 94 65 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001aa58:	0f 20 d8             	mov    eax,cr3
c001aa5b:	5a                   	pop    edx
c001aa5c:	59                   	pop    ecx
c001aa5d:	50                   	push   eax
c001aa5e:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001aa63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa69:	e8 a4 65 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c001aa6e:	5b                   	pop    ebx
c001aa6f:	58                   	pop    eax
c001aa70:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001aa75:	68 78 c4 02 c0       	push   0xc002c478
c001aa7a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa80:	e8 67 65 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001aa85:	0f 20 e0             	mov    eax,cr4
c001aa88:	5a                   	pop    edx
c001aa89:	59                   	pop    ecx
c001aa8a:	50                   	push   eax
c001aa8b:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001aa90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa96:	e8 77 65 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c001aa9b:	5b                   	pop    ebx
c001aa9c:	58                   	pop    eax
c001aa9d:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001aaa2:	68 82 c4 02 c0       	push   0xc002c482
c001aaa7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaad:	e8 3a 65 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001aab2:	5a                   	pop    edx
c001aab3:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001aab8:	59                   	pop    ecx
c001aab9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001aabf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aac2:	50                   	push   eax
c001aac3:	e8 4a 65 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c001aac8:	5b                   	pop    ebx
c001aac9:	58                   	pop    eax
c001aaca:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001aacf:	68 99 c4 02 c0       	push   0xc002c499
c001aad4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aada:	e8 0d 65 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001aadf:	5a                   	pop    edx
c001aae0:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001aae5:	59                   	pop    ecx
c001aae6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001aaec:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001aaef:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001aaf2:	50                   	push   eax
c001aaf3:	e8 1a 65 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c001aaf8:	5b                   	pop    ebx
c001aaf9:	58                   	pop    eax
c001aafa:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001aaff:	68 99 c4 02 c0       	push   0xc002c499
c001ab04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab0a:	e8 dd 64 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001ab0f:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001ab14:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab17:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab1d:	8b 12                	mov    edx,DWORD PTR [edx]
c001ab1f:	59                   	pop    ecx
c001ab20:	5b                   	pop    ebx
c001ab21:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ab24:	50                   	push   eax
c001ab25:	e8 e8 64 ff ff       	call   c0011012 <VgaText::putx(unsigned int)>
c001ab2a:	83 c4 10             	add    esp,0x10
c001ab2d:	b2 fe                	mov    dl,0xfe
c001ab2f:	e4 60                	in     al,0x60
c001ab31:	3c 1c                	cmp    al,0x1c
c001ab33:	74 04                	je     c001ab39 <Krnl::panic(char const*)+0x334>
c001ab35:	3c 5a                	cmp    al,0x5a
c001ab37:	75 f6                	jne    c001ab2f <Krnl::panic(char const*)+0x32a>
c001ab39:	e4 64                	in     al,0x64
c001ab3b:	a8 02                	test   al,0x2
c001ab3d:	75 fa                	jne    c001ab39 <Krnl::panic(char const*)+0x334>
c001ab3f:	88 d0                	mov    al,dl
c001ab41:	e6 64                	out    0x64,al
c001ab43:	fa                   	cli    
c001ab44:	f4                   	hlt    
c001ab45:	eb e8                	jmp    c001ab2f <Krnl::panic(char const*)+0x32a>
c001ab47:	50                   	push   eax
c001ab48:	50                   	push   eax
c001ab49:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001ab4e:	68 04 c5 02 c0       	push   0xc002c504
c001ab53:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab59:	e8 8e 64 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001ab5e:	58                   	pop    eax
c001ab5f:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001ab64:	5a                   	pop    edx
c001ab65:	68 13 c4 02 c0       	push   0xc002c413
c001ab6a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab70:	e8 77 64 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001ab75:	59                   	pop    ecx
c001ab76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab7b:	5b                   	pop    ebx
c001ab7c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab7f:	83 c0 0c             	add    eax,0xc
c001ab82:	50                   	push   eax
c001ab83:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001ab88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab8e:	e8 59 64 ff ff       	call   c0010fec <VgaText::puts(char const*)>
c001ab93:	83 c4 10             	add    esp,0x10
c001ab96:	e9 a3 fd ff ff       	jmp    c001a93e <Krnl::panic(char const*)+0x139>

c001ab9b <Net::switchEndian16(unsigned short)>:
c001ab9b:	83 ec 04             	sub    esp,0x4
c001ab9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aba2:	66 89 04 24          	mov    WORD PTR [esp],ax
c001aba6:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001abaa:	c1 f8 08             	sar    eax,0x8
c001abad:	89 c2                	mov    edx,eax
c001abaf:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001abb3:	c1 e0 08             	shl    eax,0x8
c001abb6:	09 d0                	or     eax,edx
c001abb8:	83 c4 04             	add    esp,0x4
c001abbb:	c3                   	ret    

c001abbc <Net::switchEndian32(unsigned int)>:
c001abbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abc0:	c1 e8 18             	shr    eax,0x18
c001abc3:	89 c2                	mov    edx,eax
c001abc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abc9:	c1 e0 08             	shl    eax,0x8
c001abcc:	25 00 00 ff 00       	and    eax,0xff0000
c001abd1:	09 c2                	or     edx,eax
c001abd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abd7:	c1 e8 08             	shr    eax,0x8
c001abda:	25 00 ff 00 00       	and    eax,0xff00
c001abdf:	09 c2                	or     edx,eax
c001abe1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abe5:	c1 e0 18             	shl    eax,0x18
c001abe8:	09 d0                	or     eax,edx
c001abea:	c3                   	ret    

c001abeb <Net::crc32Calc(unsigned char*, int)>:
c001abeb:	83 ec 10             	sub    esp,0x10
c001abee:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001abf3:	75 07                	jne    c001abfc <Net::crc32Calc(unsigned char*, int)+0x11>
c001abf5:	b8 00 00 00 00       	mov    eax,0x0
c001abfa:	eb 7c                	jmp    c001ac78 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001abfc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ac01:	7f 07                	jg     c001ac0a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001ac03:	b8 00 00 00 00       	mov    eax,0x0
c001ac08:	eb 6e                	jmp    c001ac78 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac0a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001ac12:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ac1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac1e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ac22:	7d 4e                	jge    c001ac72 <Net::crc32Calc(unsigned char*, int)+0x87>
c001ac24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac2c:	01 d0                	add    eax,edx
c001ac2e:	8a 00                	mov    al,BYTE PTR [eax]
c001ac30:	0f b6 c0             	movzx  eax,al
c001ac33:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001ac37:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac3f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001ac44:	7f 26                	jg     c001ac6c <Net::crc32Calc(unsigned char*, int)+0x81>
c001ac46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac4a:	83 e0 01             	and    eax,0x1
c001ac4d:	74 0d                	je     c001ac5c <Net::crc32Calc(unsigned char*, int)+0x71>
c001ac4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac53:	d1 e8                	shr    eax,1
c001ac55:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ac5a:	eb 06                	jmp    c001ac62 <Net::crc32Calc(unsigned char*, int)+0x77>
c001ac5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac60:	d1 e8                	shr    eax,1
c001ac62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac66:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ac6a:	eb d3                	jmp    c001ac3f <Net::crc32Calc(unsigned char*, int)+0x54>
c001ac6c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ac70:	eb a8                	jmp    c001ac1a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ac72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac76:	f7 d0                	not    eax
c001ac78:	83 c4 10             	add    esp,0x10
c001ac7b:	c3                   	ret    

c001ac7c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ac7c:	83 ec 1c             	sub    esp,0x1c
c001ac7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac8f:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001ac94:	7f 14                	jg     c001acaa <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ac96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac9a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac9d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aca1:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aca4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aca8:	eb e5                	jmp    c001ac8f <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001acaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001acae:	8d 50 01             	lea    edx,[eax+0x1]
c001acb1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001acb5:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001acb8:	83 ec 04             	sub    esp,0x4
c001acbb:	6a 06                	push   0x6
c001acbd:	8d 44 24 36          	lea    eax,[esp+0x36]
c001acc1:	50                   	push   eax
c001acc2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001acc6:	e8 9d 5a fe ff       	call   c0000768 <memcpy>
c001accb:	83 c4 10             	add    esp,0x10
c001acce:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001acd3:	83 ec 04             	sub    esp,0x4
c001acd6:	6a 06                	push   0x6
c001acd8:	8d 44 24 30          	lea    eax,[esp+0x30]
c001acdc:	50                   	push   eax
c001acdd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ace1:	e8 82 5a fe ff       	call   c0000768 <memcpy>
c001ace6:	83 c4 10             	add    esp,0x10
c001ace9:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001acee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acf2:	0f b7 c0             	movzx  eax,ax
c001acf5:	c1 f8 08             	sar    eax,0x8
c001acf8:	89 c1                	mov    ecx,eax
c001acfa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001acfe:	8d 50 01             	lea    edx,[eax+0x1]
c001ad01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad05:	88 ca                	mov    dl,cl
c001ad07:	88 10                	mov    BYTE PTR [eax],dl
c001ad09:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ad0d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad11:	8d 48 01             	lea    ecx,[eax+0x1]
c001ad14:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ad18:	88 10                	mov    BYTE PTR [eax],dl
c001ad1a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ad1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad22:	83 ec 04             	sub    esp,0x4
c001ad25:	52                   	push   edx
c001ad26:	50                   	push   eax
c001ad27:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ad2b:	e8 38 5a fe ff       	call   c0000768 <memcpy>
c001ad30:	83 c4 10             	add    esp,0x10
c001ad33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad37:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ad3b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad3f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ad43:	83 ec 08             	sub    esp,0x8
c001ad46:	50                   	push   eax
c001ad47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ad4b:	e8 9b fe ff ff       	call   c001abeb <Net::crc32Calc(unsigned char*, int)>
c001ad50:	83 c4 10             	add    esp,0x10
c001ad53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad5b:	c1 e8 18             	shr    eax,0x18
c001ad5e:	89 c1                	mov    ecx,eax
c001ad60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad64:	8d 50 01             	lea    edx,[eax+0x1]
c001ad67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad6b:	88 ca                	mov    dl,cl
c001ad6d:	88 10                	mov    BYTE PTR [eax],dl
c001ad6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad73:	c1 e8 10             	shr    eax,0x10
c001ad76:	89 c1                	mov    ecx,eax
c001ad78:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad7c:	8d 50 01             	lea    edx,[eax+0x1]
c001ad7f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad83:	88 ca                	mov    dl,cl
c001ad85:	88 10                	mov    BYTE PTR [eax],dl
c001ad87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad8b:	c1 e8 08             	shr    eax,0x8
c001ad8e:	89 c1                	mov    ecx,eax
c001ad90:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad94:	8d 50 01             	lea    edx,[eax+0x1]
c001ad97:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad9b:	88 ca                	mov    dl,cl
c001ad9d:	88 10                	mov    BYTE PTR [eax],dl
c001ad9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ada3:	8d 50 01             	lea    edx,[eax+0x1]
c001ada6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001adaa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001adae:	88 10                	mov    BYTE PTR [eax],dl
c001adb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001adb4:	83 c4 1c             	add    esp,0x1c
c001adb7:	c3                   	ret    

c001adb8 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001adb8:	83 ec 2c             	sub    esp,0x2c
c001adbb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001adbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001adc3:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001adc8:	83 ec 04             	sub    esp,0x4
c001adcb:	6a 06                	push   0x6
c001adcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001add1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001add5:	83 c0 0e             	add    eax,0xe
c001add8:	50                   	push   eax
c001add9:	e8 8a 59 fe ff       	call   c0000768 <memcpy>
c001adde:	83 c4 10             	add    esp,0x10
c001ade1:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ade6:	83 ec 04             	sub    esp,0x4
c001ade9:	6a 06                	push   0x6
c001adeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001adef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001adf3:	83 c0 08             	add    eax,0x8
c001adf6:	50                   	push   eax
c001adf7:	e8 6c 59 fe ff       	call   c0000768 <memcpy>
c001adfc:	83 c4 10             	add    esp,0x10
c001adff:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ae04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae08:	8d 50 01             	lea    edx,[eax+0x1]
c001ae0b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ae0f:	8a 00                	mov    al,BYTE PTR [eax]
c001ae11:	0f b6 c0             	movzx  eax,al
c001ae14:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ae19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae1d:	8d 50 01             	lea    edx,[eax+0x1]
c001ae20:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ae24:	8a 00                	mov    al,BYTE PTR [eax]
c001ae26:	0f b6 c0             	movzx  eax,al
c001ae29:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ae2e:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ae33:	c1 e0 08             	shl    eax,0x8
c001ae36:	89 c2                	mov    edx,eax
c001ae38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae3c:	09 d0                	or     eax,edx
c001ae3e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ae42:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ae46:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ae4b:	75 3a                	jne    c001ae87 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ae4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae51:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae54:	66 3d dc 05          	cmp    ax,0x5dc
c001ae58:	77 10                	ja     c001ae6a <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ae5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae5e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae61:	0f b7 c0             	movzx  eax,ax
c001ae64:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ae68:	eb 1d                	jmp    c001ae87 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ae6a:	83 ec 0c             	sub    esp,0xc
c001ae6d:	68 dc c5 02 c0       	push   0xc002c5dc
c001ae72:	e8 ce 7f ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001ae77:	83 c4 10             	add    esp,0x10
c001ae7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae7e:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ae82:	e9 c0 00 00 00       	jmp    c001af47 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ae87:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ae8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae8f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae91:	83 ec 04             	sub    esp,0x4
c001ae94:	52                   	push   edx
c001ae95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae99:	50                   	push   eax
c001ae9a:	e8 c9 58 fe ff       	call   c0000768 <memcpy>
c001ae9f:	83 c4 10             	add    esp,0x10
c001aea2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aea6:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001aeaa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aeae:	8d 50 01             	lea    edx,[eax+0x1]
c001aeb1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aeb5:	8a 00                	mov    al,BYTE PTR [eax]
c001aeb7:	0f b6 c0             	movzx  eax,al
c001aeba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aebe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aec2:	8d 50 01             	lea    edx,[eax+0x1]
c001aec5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aec9:	8a 00                	mov    al,BYTE PTR [eax]
c001aecb:	0f b6 c0             	movzx  eax,al
c001aece:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aed2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aed6:	8d 50 01             	lea    edx,[eax+0x1]
c001aed9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aedd:	8a 00                	mov    al,BYTE PTR [eax]
c001aedf:	0f b6 c0             	movzx  eax,al
c001aee2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aee6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aeea:	8d 50 01             	lea    edx,[eax+0x1]
c001aeed:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aef1:	8a 00                	mov    al,BYTE PTR [eax]
c001aef3:	0f b6 c0             	movzx  eax,al
c001aef6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aefa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aefe:	c1 e0 18             	shl    eax,0x18
c001af01:	89 c2                	mov    edx,eax
c001af03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af07:	c1 e0 10             	shl    eax,0x10
c001af0a:	09 c2                	or     edx,eax
c001af0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af10:	c1 e0 08             	shl    eax,0x8
c001af13:	09 d0                	or     eax,edx
c001af15:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001af19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af21:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001af25:	83 e8 04             	sub    eax,0x4
c001af28:	83 ec 08             	sub    esp,0x8
c001af2b:	50                   	push   eax
c001af2c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001af30:	e8 b6 fc ff ff       	call   c001abeb <Net::crc32Calc(unsigned char*, int)>
c001af35:	83 c4 10             	add    esp,0x10
c001af38:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001af3c:	0f 94 c2             	sete   dl
c001af3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af43:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001af46:	90                   	nop
c001af47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af4b:	83 c4 2c             	add    esp,0x2c
c001af4e:	c2 04 00             	ret    0x4

c001af51 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001af51:	55                   	push   ebp
c001af52:	57                   	push   edi
c001af53:	56                   	push   esi
c001af54:	53                   	push   ebx
c001af55:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001af5b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001af62:	8a 1e                	mov    bl,BYTE PTR [esi]
c001af64:	8d 6e 01             	lea    ebp,[esi+0x1]
c001af67:	80 fb 40             	cmp    bl,0x40
c001af6a:	75 1b                	jne    c001af87 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001af6c:	8a 16                	mov    dl,BYTE PTR [esi]
c001af6e:	84 d2                	test   dl,dl
c001af70:	0f 84 f1 00 00 00    	je     c001b067 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001af76:	8d 46 01             	lea    eax,[esi+0x1]
c001af79:	80 fa 3a             	cmp    dl,0x3a
c001af7c:	74 04                	je     c001af82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001af7e:	89 c6                	mov    esi,eax
c001af80:	eb ea                	jmp    c001af6c <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001af82:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001af85:	89 c6                	mov    esi,eax
c001af87:	50                   	push   eax
c001af88:	6a 40                	push   0x40
c001af8a:	6a 00                	push   0x0
c001af8c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001af90:	50                   	push   eax
c001af91:	e8 06 58 fe ff       	call   c000079c <memset>
c001af96:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001af9d:	31 c0                	xor    eax,eax
c001af9f:	83 c4 10             	add    esp,0x10
c001afa2:	8a 0f                	mov    cl,BYTE PTR [edi]
c001afa4:	84 c9                	test   cl,cl
c001afa6:	0f 84 bb 00 00 00    	je     c001b067 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001afac:	3d c7 00 00 00       	cmp    eax,0xc7
c001afb1:	0f 8f b0 00 00 00    	jg     c001b067 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001afb7:	80 f9 0a             	cmp    cl,0xa
c001afba:	0f 85 98 00 00 00    	jne    c001b058 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001afc0:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001afc5:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001afc9:	a8 df                	test   al,0xdf
c001afcb:	0f 94 c1             	sete   cl
c001afce:	3c 23                	cmp    al,0x23
c001afd0:	0f 94 c2             	sete   dl
c001afd3:	08 d1                	or     cl,dl
c001afd5:	75 4a                	jne    c001b021 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001afd7:	8d 50 f7             	lea    edx,[eax-0x9]
c001afda:	80 fa 01             	cmp    dl,0x1
c001afdd:	76 42                	jbe    c001b021 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001afdf:	3c 5b                	cmp    al,0x5b
c001afe1:	75 42                	jne    c001b025 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001afe3:	80 fb 40             	cmp    bl,0x40
c001afe6:	75 39                	jne    c001b021 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001afe8:	83 ec 0c             	sub    esp,0xc
c001afeb:	8d 54 24 65          	lea    edx,[esp+0x65]
c001afef:	52                   	push   edx
c001aff0:	e8 c3 57 fe ff       	call   c00007b8 <strlen>
c001aff5:	83 c4 10             	add    esp,0x10
c001aff8:	83 f8 3f             	cmp    eax,0x3f
c001affb:	77 6a                	ja     c001b067 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001affd:	50                   	push   eax
c001affe:	50                   	push   eax
c001afff:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b003:	52                   	push   edx
c001b004:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b008:	52                   	push   edx
c001b009:	e8 4a 58 fe ff       	call   c0000858 <strcpy>
c001b00e:	58                   	pop    eax
c001b00f:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b013:	52                   	push   edx
c001b014:	e8 9f 57 fe ff       	call   c00007b8 <strlen>
c001b019:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b01e:	83 c4 10             	add    esp,0x10
c001b021:	31 d2                	xor    edx,edx
c001b023:	eb 3a                	jmp    c001b05f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b025:	80 fb 40             	cmp    bl,0x40
c001b028:	74 06                	je     c001b030 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b02a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b02e:	eb 20                	jmp    c001b050 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b030:	50                   	push   eax
c001b031:	50                   	push   eax
c001b032:	55                   	push   ebp
c001b033:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b037:	50                   	push   eax
c001b038:	e8 a7 58 fe ff       	call   c00008e4 <strcmp>
c001b03d:	83 c4 10             	add    esp,0x10
c001b040:	85 c0                	test   eax,eax
c001b042:	75 dd                	jne    c001b021 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b044:	eb e4                	jmp    c001b02a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b046:	8d 50 01             	lea    edx,[eax+0x1]
c001b049:	80 f9 3d             	cmp    cl,0x3d
c001b04c:	74 1d                	je     c001b06b <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b04e:	89 d0                	mov    eax,edx
c001b050:	8a 08                	mov    cl,BYTE PTR [eax]
c001b052:	84 c9                	test   cl,cl
c001b054:	75 f0                	jne    c001b046 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b056:	eb 0f                	jmp    c001b067 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b058:	8d 50 01             	lea    edx,[eax+0x1]
c001b05b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b05f:	47                   	inc    edi
c001b060:	89 d0                	mov    eax,edx
c001b062:	e9 3b ff ff ff       	jmp    c001afa2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b067:	31 c0                	xor    eax,eax
c001b069:	eb 33                	jmp    c001b09e <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b06b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b06f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b072:	50                   	push   eax
c001b073:	50                   	push   eax
c001b074:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b078:	50                   	push   eax
c001b079:	56                   	push   esi
c001b07a:	e8 65 58 fe ff       	call   c00008e4 <strcmp>
c001b07f:	83 c4 10             	add    esp,0x10
c001b082:	85 c0                	test   eax,eax
c001b084:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b088:	75 97                	jne    c001b021 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b08a:	51                   	push   ecx
c001b08b:	51                   	push   ecx
c001b08c:	52                   	push   edx
c001b08d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b094:	e8 bf 57 fe ff       	call   c0000858 <strcpy>
c001b099:	83 c4 10             	add    esp,0x10
c001b09c:	b0 01                	mov    al,0x1
c001b09e:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b0a4:	5b                   	pop    ebx
c001b0a5:	5e                   	pop    esi
c001b0a6:	5f                   	pop    edi
c001b0a7:	5d                   	pop    ebp
c001b0a8:	c3                   	ret    

c001b0a9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b0a9:	57                   	push   edi
c001b0aa:	56                   	push   esi
c001b0ab:	53                   	push   ebx
c001b0ac:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b0b2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b0b9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b0c0:	53                   	push   ebx
c001b0c1:	e8 f2 56 fe ff       	call   c00007b8 <strlen>
c001b0c6:	89 34 24             	mov    DWORD PTR [esp],esi
c001b0c9:	89 c7                	mov    edi,eax
c001b0cb:	e8 e8 56 fe ff       	call   c00007b8 <strlen>
c001b0d0:	83 c4 10             	add    esp,0x10
c001b0d3:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b0d7:	3d ff 00 00 00       	cmp    eax,0xff
c001b0dc:	0f 87 d3 00 00 00    	ja     c001b1b5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b0e2:	57                   	push   edi
c001b0e3:	57                   	push   edi
c001b0e4:	56                   	push   esi
c001b0e5:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b0e9:	56                   	push   esi
c001b0ea:	e8 69 57 fe ff       	call   c0000858 <strcpy>
c001b0ef:	58                   	pop    eax
c001b0f0:	5a                   	pop    edx
c001b0f1:	68 31 cb 02 c0       	push   0xc002cb31
c001b0f6:	56                   	push   esi
c001b0f7:	e8 9c 58 fe ff       	call   c0000998 <strcat>
c001b0fc:	59                   	pop    ecx
c001b0fd:	5f                   	pop    edi
c001b0fe:	53                   	push   ebx
c001b0ff:	56                   	push   esi
c001b100:	e8 93 58 fe ff       	call   c0000998 <strcat>
c001b105:	58                   	pop    eax
c001b106:	5a                   	pop    edx
c001b107:	68 28 c6 02 c0       	push   0xc002c628
c001b10c:	56                   	push   esi
c001b10d:	e8 86 58 fe ff       	call   c0000998 <strcat>
c001b112:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b119:	e8 68 47 ff ff       	call   c000f886 <malloc>
c001b11e:	83 c4 0c             	add    esp,0xc
c001b121:	89 c3                	mov    ebx,eax
c001b123:	ff 35 30 23 03 c0    	push   DWORD PTR ds:0xc0032330
c001b129:	56                   	push   esi
c001b12a:	50                   	push   eax
c001b12b:	e8 74 82 ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c001b130:	83 c4 10             	add    esp,0x10
c001b133:	85 db                	test   ebx,ebx
c001b135:	74 7e                	je     c001b1b5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b137:	51                   	push   ecx
c001b138:	51                   	push   ecx
c001b139:	6a 01                	push   0x1
c001b13b:	53                   	push   ebx
c001b13c:	e8 c7 82 ff ff       	call   c0013408 <File::open(FileOpenMode)>
c001b141:	83 c4 10             	add    esp,0x10
c001b144:	85 c0                	test   eax,eax
c001b146:	74 08                	je     c001b150 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b148:	83 ec 0c             	sub    esp,0xc
c001b14b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b14d:	53                   	push   ebx
c001b14e:	eb 5f                	jmp    c001b1af <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b150:	52                   	push   edx
c001b151:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b155:	50                   	push   eax
c001b156:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b15a:	50                   	push   eax
c001b15b:	53                   	push   ebx
c001b15c:	e8 53 85 ff ff       	call   c00136b4 <File::stat(unsigned long long*, bool*)>
c001b161:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b165:	83 c4 10             	add    esp,0x10
c001b168:	89 c1                	mov    ecx,eax
c001b16a:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b16e:	74 31                	je     c001b1a1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b170:	83 ec 0c             	sub    esp,0xc
c001b173:	50                   	push   eax
c001b174:	e8 0d 47 ff ff       	call   c000f886 <malloc>
c001b179:	89 c6                	mov    esi,eax
c001b17b:	58                   	pop    eax
c001b17c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b17e:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b182:	52                   	push   edx
c001b183:	56                   	push   esi
c001b184:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b188:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b18c:	53                   	push   ebx
c001b18d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b190:	83 c4 20             	add    esp,0x20
c001b193:	85 c0                	test   eax,eax
c001b195:	75 0a                	jne    c001b1a1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b197:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b19b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b19f:	74 18                	je     c001b1b9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b1a1:	83 ec 0c             	sub    esp,0xc
c001b1a4:	53                   	push   ebx
c001b1a5:	e8 bc 82 ff ff       	call   c0013466 <File::close()>
c001b1aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b1af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1b2:	83 c4 10             	add    esp,0x10
c001b1b5:	31 c0                	xor    eax,eax
c001b1b7:	eb 3b                	jmp    c001b1f4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b1b9:	83 ec 0c             	sub    esp,0xc
c001b1bc:	53                   	push   ebx
c001b1bd:	e8 a4 82 ff ff       	call   c0013466 <File::close()>
c001b1c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b1c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1ca:	83 c4 0c             	add    esp,0xc
c001b1cd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b1d4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b1db:	56                   	push   esi
c001b1dc:	e8 70 fd ff ff       	call   c001af51 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b1e1:	89 34 24             	mov    DWORD PTR [esp],esi
c001b1e4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b1e8:	e8 a9 46 ff ff       	call   c000f896 <free>
c001b1ed:	83 c4 10             	add    esp,0x10
c001b1f0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b1f4:	81 c4 20 01 00 00    	add    esp,0x120
c001b1fa:	5b                   	pop    ebx
c001b1fb:	5e                   	pop    esi
c001b1fc:	5f                   	pop    edi
c001b1fd:	c3                   	ret    

c001b1fe <Reg::getLine(char*, char*, char*)>:
c001b1fe:	57                   	push   edi
c001b1ff:	56                   	push   esi
c001b200:	53                   	push   ebx
c001b201:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b205:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b209:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b20d:	57                   	push   edi
c001b20e:	56                   	push   esi
c001b20f:	53                   	push   ebx
c001b210:	68 2d c6 02 c0       	push   0xc002c62d
c001b215:	e8 8f fe ff ff       	call   c001b0a9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b21a:	83 c4 10             	add    esp,0x10
c001b21d:	84 c0                	test   al,al
c001b21f:	75 10                	jne    c001b231 <Reg::getLine(char*, char*, char*)+0x33>
c001b221:	57                   	push   edi
c001b222:	56                   	push   esi
c001b223:	53                   	push   ebx
c001b224:	68 52 c6 02 c0       	push   0xc002c652
c001b229:	e8 7b fe ff ff       	call   c001b0a9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b22e:	83 c4 10             	add    esp,0x10
c001b231:	5b                   	pop    ebx
c001b232:	5e                   	pop    esi
c001b233:	5f                   	pop    edi
c001b234:	c3                   	ret    

c001b235 <Reg::readInt(char*, char*, int*)>:
c001b235:	55                   	push   ebp
c001b236:	57                   	push   edi
c001b237:	56                   	push   esi
c001b238:	53                   	push   ebx
c001b239:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b23f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b243:	57                   	push   edi
c001b244:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b24b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b252:	e8 a7 ff ff ff       	call   c001b1fe <Reg::getLine(char*, char*, char*)>
c001b257:	83 c4 10             	add    esp,0x10
c001b25a:	84 c0                	test   al,al
c001b25c:	0f 84 b3 00 00 00    	je     c001b315 <Reg::readInt(char*, char*, int*)+0xe0>
c001b262:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b266:	80 fa 2b             	cmp    dl,0x2b
c001b269:	74 0c                	je     c001b277 <Reg::readInt(char*, char*, int*)+0x42>
c001b26b:	80 fa 2d             	cmp    dl,0x2d
c001b26e:	75 0e                	jne    c001b27e <Reg::readInt(char*, char*, int*)+0x49>
c001b270:	ba 01 00 00 00       	mov    edx,0x1
c001b275:	eb 0b                	jmp    c001b282 <Reg::readInt(char*, char*, int*)+0x4d>
c001b277:	ba 01 00 00 00       	mov    edx,0x1
c001b27c:	eb 02                	jmp    c001b280 <Reg::readInt(char*, char*, int*)+0x4b>
c001b27e:	31 d2                	xor    edx,edx
c001b280:	31 c0                	xor    eax,eax
c001b282:	be 0a 00 00 00       	mov    esi,0xa
c001b287:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b28c:	75 20                	jne    c001b2ae <Reg::readInt(char*, char*, int*)+0x79>
c001b28e:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b292:	80 f9 78             	cmp    cl,0x78
c001b295:	75 0a                	jne    c001b2a1 <Reg::readInt(char*, char*, int*)+0x6c>
c001b297:	83 c2 02             	add    edx,0x2
c001b29a:	be 10 00 00 00       	mov    esi,0x10
c001b29f:	eb 0d                	jmp    c001b2ae <Reg::readInt(char*, char*, int*)+0x79>
c001b2a1:	80 f9 62             	cmp    cl,0x62
c001b2a4:	75 08                	jne    c001b2ae <Reg::readInt(char*, char*, int*)+0x79>
c001b2a6:	83 c2 02             	add    edx,0x2
c001b2a9:	be 02 00 00 00       	mov    esi,0x2
c001b2ae:	01 d7                	add    edi,edx
c001b2b0:	31 d2                	xor    edx,edx
c001b2b2:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b2b4:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b2b8:	80 fb 0d             	cmp    bl,0xd
c001b2bb:	0f 94 c3             	sete   bl
c001b2be:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b2c3:	0f 94 c1             	sete   cl
c001b2c6:	08 cb                	or     bl,cl
c001b2c8:	75 3a                	jne    c001b304 <Reg::readInt(char*, char*, int*)+0xcf>
c001b2ca:	0f af d6             	imul   edx,esi
c001b2cd:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b2d2:	83 fe 10             	cmp    esi,0x10
c001b2d5:	75 26                	jne    c001b2fd <Reg::readInt(char*, char*, int*)+0xc8>
c001b2d7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b2db:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b2de:	89 e9                	mov    ecx,ebp
c001b2e0:	80 f9 05             	cmp    cl,0x5
c001b2e3:	77 06                	ja     c001b2eb <Reg::readInt(char*, char*, int*)+0xb6>
c001b2e5:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b2e9:	eb 16                	jmp    c001b301 <Reg::readInt(char*, char*, int*)+0xcc>
c001b2eb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b2ef:	83 e9 61             	sub    ecx,0x61
c001b2f2:	80 f9 05             	cmp    cl,0x5
c001b2f5:	77 06                	ja     c001b2fd <Reg::readInt(char*, char*, int*)+0xc8>
c001b2f7:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b2fb:	eb 04                	jmp    c001b301 <Reg::readInt(char*, char*, int*)+0xcc>
c001b2fd:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b301:	47                   	inc    edi
c001b302:	eb ae                	jmp    c001b2b2 <Reg::readInt(char*, char*, int*)+0x7d>
c001b304:	84 c0                	test   al,al
c001b306:	74 02                	je     c001b30a <Reg::readInt(char*, char*, int*)+0xd5>
c001b308:	f7 da                	neg    edx
c001b30a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b311:	89 10                	mov    DWORD PTR [eax],edx
c001b313:	88 d8                	mov    al,bl
c001b315:	81 c4 ec 00 00 00    	add    esp,0xec
c001b31b:	5b                   	pop    ebx
c001b31c:	5e                   	pop    esi
c001b31d:	5f                   	pop    edi
c001b31e:	5d                   	pop    ebp
c001b31f:	c3                   	ret    

c001b320 <Reg::readString(char*, char*, char*, int)>:
c001b320:	57                   	push   edi
c001b321:	56                   	push   esi
c001b322:	53                   	push   ebx
c001b323:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b329:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b330:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b334:	57                   	push   edi
c001b335:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b33c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b343:	e8 b6 fe ff ff       	call   c001b1fe <Reg::getLine(char*, char*, char*)>
c001b348:	83 c4 10             	add    esp,0x10
c001b34b:	89 c6                	mov    esi,eax
c001b34d:	84 c0                	test   al,al
c001b34f:	74 44                	je     c001b395 <Reg::readString(char*, char*, char*, int)+0x75>
c001b351:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b358:	31 c0                	xor    eax,eax
c001b35a:	4a                   	dec    edx
c001b35b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b35e:	84 c9                	test   cl,cl
c001b360:	74 0f                	je     c001b371 <Reg::readString(char*, char*, char*, int)+0x51>
c001b362:	39 c2                	cmp    edx,eax
c001b364:	7e 0b                	jle    c001b371 <Reg::readString(char*, char*, char*, int)+0x51>
c001b366:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b369:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b36e:	40                   	inc    eax
c001b36f:	eb ea                	jmp    c001b35b <Reg::readString(char*, char*, char*, int)+0x3b>
c001b371:	83 ec 0c             	sub    esp,0xc
c001b374:	53                   	push   ebx
c001b375:	e8 3e 54 fe ff       	call   c00007b8 <strlen>
c001b37a:	83 c4 10             	add    esp,0x10
c001b37d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b382:	75 11                	jne    c001b395 <Reg::readString(char*, char*, char*, int)+0x75>
c001b384:	83 ec 0c             	sub    esp,0xc
c001b387:	53                   	push   ebx
c001b388:	e8 2b 54 fe ff       	call   c00007b8 <strlen>
c001b38d:	83 c4 10             	add    esp,0x10
c001b390:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b395:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b39b:	89 f0                	mov    eax,esi
c001b39d:	5b                   	pop    ebx
c001b39e:	5e                   	pop    esi
c001b39f:	5f                   	pop    edi
c001b3a0:	c3                   	ret    

c001b3a1 <Reg::readBool(char*, char*, bool*)>:
c001b3a1:	83 ec 20             	sub    esp,0x20
c001b3a4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b3a8:	50                   	push   eax
c001b3a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3b1:	e8 7f fe ff ff       	call   c001b235 <Reg::readInt(char*, char*, int*)>
c001b3b6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b3bb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b3bf:	0f 95 02             	setne  BYTE PTR [edx]
c001b3c2:	83 c4 2c             	add    esp,0x2c
c001b3c5:	c3                   	ret    

c001b3c6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b3c6:	53                   	push   ebx
c001b3c7:	83 ec 1c             	sub    esp,0x1c
c001b3ca:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b3ce:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b3d2:	50                   	push   eax
c001b3d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3db:	e8 c1 ff ff ff       	call   c001b3a1 <Reg::readBool(char*, char*, bool*)>
c001b3e0:	83 c4 10             	add    esp,0x10
c001b3e3:	84 c0                	test   al,al
c001b3e5:	74 04                	je     c001b3eb <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b3e7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b3eb:	88 d8                	mov    al,bl
c001b3ed:	83 c4 18             	add    esp,0x18
c001b3f0:	5b                   	pop    ebx
c001b3f1:	c3                   	ret    

c001b3f2 <Reg::readIntWithDefault(char*, char*, int)>:
c001b3f2:	53                   	push   ebx
c001b3f3:	83 ec 1c             	sub    esp,0x1c
c001b3f6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b3fa:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b3fe:	50                   	push   eax
c001b3ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b403:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b407:	e8 29 fe ff ff       	call   c001b235 <Reg::readInt(char*, char*, int*)>
c001b40c:	83 c4 10             	add    esp,0x10
c001b40f:	84 c0                	test   al,al
c001b411:	74 04                	je     c001b417 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b413:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b417:	89 d8                	mov    eax,ebx
c001b419:	83 c4 18             	add    esp,0x18
c001b41c:	5b                   	pop    ebx
c001b41d:	c3                   	ret    

c001b41e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b41e:	57                   	push   edi
c001b41f:	56                   	push   esi
c001b420:	53                   	push   ebx
c001b421:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b425:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b429:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b42d:	56                   	push   esi
c001b42e:	53                   	push   ebx
c001b42f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b433:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b437:	e8 e4 fe ff ff       	call   c001b320 <Reg::readString(char*, char*, char*, int)>
c001b43c:	83 c4 10             	add    esp,0x10
c001b43f:	84 c0                	test   al,al
c001b441:	75 1b                	jne    c001b45e <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b443:	50                   	push   eax
c001b444:	56                   	push   esi
c001b445:	4e                   	dec    esi
c001b446:	6a 00                	push   0x0
c001b448:	53                   	push   ebx
c001b449:	e8 4e 53 fe ff       	call   c000079c <memset>
c001b44e:	83 c4 0c             	add    esp,0xc
c001b451:	56                   	push   esi
c001b452:	57                   	push   edi
c001b453:	53                   	push   ebx
c001b454:	89 fb                	mov    ebx,edi
c001b456:	e8 0d 53 fe ff       	call   c0000768 <memcpy>
c001b45b:	83 c4 10             	add    esp,0x10
c001b45e:	89 d8                	mov    eax,ebx
c001b460:	5b                   	pop    ebx
c001b461:	5e                   	pop    esi
c001b462:	5f                   	pop    edi
c001b463:	c3                   	ret    

c001b464 <Sys::eject(regs*)>:
c001b464:	83 ec 0c             	sub    esp,0xc
c001b467:	83 ca ff             	or     edx,0xffffffff
c001b46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b46e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b471:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b476:	83 e9 41             	sub    ecx,0x41
c001b479:	83 f9 19             	cmp    ecx,0x19
c001b47c:	77 18                	ja     c001b496 <Sys::eject(regs*)+0x32>
c001b47e:	8b 0c 8d e0 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0c20]
c001b485:	85 c9                	test   ecx,ecx
c001b487:	74 0d                	je     c001b496 <Sys::eject(regs*)+0x32>
c001b489:	83 ec 0c             	sub    esp,0xc
c001b48c:	51                   	push   ecx
c001b48d:	e8 d4 b2 ff ff       	call   c0016766 <LogicalDisk::eject()>
c001b492:	83 c4 10             	add    esp,0x10
c001b495:	99                   	cdq    
c001b496:	83 c4 0c             	add    esp,0xc
c001b499:	c3                   	ret    

c001b49a <Sys::exit(regs*)>:
c001b49a:	83 ec 18             	sub    esp,0x18
c001b49d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4a1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4a4:	e8 90 38 00 00       	call   c001ed39 <terminateTask(int)>
c001b4a9:	83 c8 ff             	or     eax,0xffffffff
c001b4ac:	83 c4 1c             	add    esp,0x1c
c001b4af:	89 c2                	mov    edx,eax
c001b4b1:	c3                   	ret    

c001b4b2 <Sys::getCwd(regs*)>:
c001b4b2:	83 ec 10             	sub    esp,0x10
c001b4b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4b9:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b4bc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4c4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4c7:	e8 da 7c ff ff       	call   c00131a6 <Fs::getcwd(Process*, char*, int)>
c001b4cc:	83 c4 1c             	add    esp,0x1c
c001b4cf:	99                   	cdq    
c001b4d0:	c3                   	ret    

c001b4d1 <Sys::getPID(regs*)>:
c001b4d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4d9:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4db:	99                   	cdq    
c001b4dc:	c3                   	ret    

c001b4dd <Sys::getRAMData(regs*)>:
c001b4dd:	8b 0d 14 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002ee14
c001b4e3:	6b 05 10 ee 02 c0 64 	imul   eax,DWORD PTR ds:0xc002ee10,0x64
c001b4ea:	99                   	cdq    
c001b4eb:	f7 f9                	idiv   ecx
c001b4ed:	c1 e0 18             	shl    eax,0x18
c001b4f0:	09 c8                	or     eax,ecx
c001b4f2:	99                   	cdq    
c001b4f3:	c3                   	ret    

c001b4f4 <Sys::getVGAPtr(regs*)>:
c001b4f4:	56                   	push   esi
c001b4f5:	53                   	push   ebx
c001b4f6:	83 ec 10             	sub    esp,0x10
c001b4f9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b4fd:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b500:	e8 16 33 00 00       	call   c001e81b <Thr::processFromPID(int)>
c001b505:	83 c4 10             	add    esp,0x10
c001b508:	89 c1                	mov    ecx,eax
c001b50a:	b8 01 00 00 00       	mov    eax,0x1
c001b50f:	85 c9                	test   ecx,ecx
c001b511:	74 5d                	je     c001b570 <Sys::getVGAPtr(regs*)+0x7c>
c001b513:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b519:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c001b51d:	74 0c                	je     c001b52b <Sys::getVGAPtr(regs*)+0x37>
c001b51f:	83 ec 0c             	sub    esp,0xc
c001b522:	53                   	push   ebx
c001b523:	e8 38 57 ff ff       	call   c0010c60 <setActiveTerminal(VgaText*)>
c001b528:	83 c4 10             	add    esp,0x10
c001b52b:	81 c3 82 00 00 00    	add    ebx,0x82
c001b531:	50                   	push   eax
c001b532:	68 a0 0f 00 00       	push   0xfa0
c001b537:	ff 73 8a             	push   DWORD PTR [ebx-0x76]
c001b53a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b53d:	e8 26 52 fe ff       	call   c0000768 <memcpy>
c001b542:	8b 53 92             	mov    edx,DWORD PTR [ebx-0x6e]
c001b545:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b548:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b54e:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b551:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b554:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b55a:	58                   	pop    eax
c001b55b:	5a                   	pop    edx
c001b55c:	53                   	push   ebx
c001b55d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b560:	05 a8 0f 00 00       	add    eax,0xfa8
c001b565:	50                   	push   eax
c001b566:	e8 ed 52 fe ff       	call   c0000858 <strcpy>
c001b56b:	83 c4 10             	add    esp,0x10
c001b56e:	31 c0                	xor    eax,eax
c001b570:	59                   	pop    ecx
c001b571:	31 d2                	xor    edx,edx
c001b573:	5b                   	pop    ebx
c001b574:	5e                   	pop    esi
c001b575:	c3                   	ret    

c001b576 <Sys::loadDLL(regs*)>:
c001b576:	56                   	push   esi
c001b577:	53                   	push   ebx
c001b578:	31 d2                	xor    edx,edx
c001b57a:	51                   	push   ecx
c001b57b:	b8 01 00 00 00       	mov    eax,0x1
c001b580:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b584:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b588:	0f 84 8c 00 00 00    	je     c001b61a <Sys::loadDLL(regs*)+0xa4>
c001b58e:	83 ec 0c             	sub    esp,0xc
c001b591:	68 14 01 00 00       	push   0x114
c001b596:	e8 eb 42 ff ff       	call   c000f886 <malloc>
c001b59b:	83 c4 0c             	add    esp,0xc
c001b59e:	89 c3                	mov    ebx,eax
c001b5a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5a5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5a8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b5ab:	53                   	push   ebx
c001b5ac:	e8 f3 7d ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c001b5b1:	83 c4 10             	add    esp,0x10
c001b5b4:	31 d2                	xor    edx,edx
c001b5b6:	b8 02 00 00 00       	mov    eax,0x2
c001b5bb:	85 db                	test   ebx,ebx
c001b5bd:	74 5b                	je     c001b61a <Sys::loadDLL(regs*)+0xa4>
c001b5bf:	83 ec 0c             	sub    esp,0xc
c001b5c2:	53                   	push   ebx
c001b5c3:	e8 ae 80 ff ff       	call   c0013676 <File::exists()>
c001b5c8:	83 c4 10             	add    esp,0x10
c001b5cb:	84 c0                	test   al,al
c001b5cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5cf:	75 11                	jne    c001b5e2 <Sys::loadDLL(regs*)+0x6c>
c001b5d1:	83 ec 0c             	sub    esp,0xc
c001b5d4:	53                   	push   ebx
c001b5d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5d8:	83 c4 10             	add    esp,0x10
c001b5db:	b8 03 00 00 00       	mov    eax,0x3
c001b5e0:	eb 36                	jmp    c001b618 <Sys::loadDLL(regs*)+0xa2>
c001b5e2:	83 ec 0c             	sub    esp,0xc
c001b5e5:	53                   	push   ebx
c001b5e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5e9:	58                   	pop    eax
c001b5ea:	5a                   	pop    edx
c001b5eb:	6a 00                	push   0x0
c001b5ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b5f0:	e8 29 24 00 00       	call   c001da1e <Thr::loadDLL(char const*, bool)>
c001b5f5:	83 c4 10             	add    esp,0x10
c001b5f8:	89 c1                	mov    ecx,eax
c001b5fa:	31 d2                	xor    edx,edx
c001b5fc:	b8 04 00 00 00       	mov    eax,0x4
c001b601:	85 c9                	test   ecx,ecx
c001b603:	74 15                	je     c001b61a <Sys::loadDLL(regs*)+0xa4>
c001b605:	53                   	push   ebx
c001b606:	53                   	push   ebx
c001b607:	ff 35 c8 ed 02 c0    	push   DWORD PTR ds:0xc002edc8
c001b60d:	51                   	push   ecx
c001b60e:	e8 3f 26 00 00       	call   c001dc52 <Thr::executeDLL(unsigned long, void*)>
c001b613:	83 c4 10             	add    esp,0x10
c001b616:	31 c0                	xor    eax,eax
c001b618:	31 d2                	xor    edx,edx
c001b61a:	59                   	pop    ecx
c001b61b:	5b                   	pop    ebx
c001b61c:	5e                   	pop    esi
c001b61d:	c3                   	ret    

c001b61e <Sys::read(regs*)>:
c001b61e:	57                   	push   edi
c001b61f:	56                   	push   esi
c001b620:	53                   	push   ebx
c001b621:	83 ec 10             	sub    esp,0x10
c001b624:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b628:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b62b:	83 f8 02             	cmp    eax,0x2
c001b62e:	77 10                	ja     c001b640 <Sys::read(regs*)+0x22>
c001b630:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b635:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b638:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b63e:	eb 0e                	jmp    c001b64e <Sys::read(regs*)+0x30>
c001b640:	83 ec 0c             	sub    esp,0xc
c001b643:	50                   	push   eax
c001b644:	e8 9a 62 ff ff       	call   c00118e3 <getFromFileDescriptor(int)>
c001b649:	83 c4 10             	add    esp,0x10
c001b64c:	89 c1                	mov    ecx,eax
c001b64e:	83 c8 ff             	or     eax,0xffffffff
c001b651:	85 c9                	test   ecx,ecx
c001b653:	89 c2                	mov    edx,eax
c001b655:	74 28                	je     c001b67f <Sys::read(regs*)+0x61>
c001b657:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b65f:	31 ff                	xor    edi,edi
c001b661:	83 ec 0c             	sub    esp,0xc
c001b664:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b666:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b66a:	52                   	push   edx
c001b66b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b66e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b671:	57                   	push   edi
c001b672:	56                   	push   esi
c001b673:	51                   	push   ecx
c001b674:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b677:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b67b:	83 c4 20             	add    esp,0x20
c001b67e:	99                   	cdq    
c001b67f:	83 c4 10             	add    esp,0x10
c001b682:	5b                   	pop    ebx
c001b683:	5e                   	pop    esi
c001b684:	5f                   	pop    edi
c001b685:	c3                   	ret    

c001b686 <Sys::sbrk(regs*)>:
c001b686:	56                   	push   esi
c001b687:	53                   	push   ebx
c001b688:	50                   	push   eax
c001b689:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b68e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b692:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b695:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b698:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b69e:	85 db                	test   ebx,ebx
c001b6a0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b6a3:	74 02                	je     c001b6a7 <Sys::sbrk(regs*)+0x21>
c001b6a5:	79 06                	jns    c001b6ad <Sys::sbrk(regs*)+0x27>
c001b6a7:	89 f0                	mov    eax,esi
c001b6a9:	31 d2                	xor    edx,edx
c001b6ab:	eb 2a                	jmp    c001b6d7 <Sys::sbrk(regs*)+0x51>
c001b6ad:	83 c8 ff             	or     eax,0xffffffff
c001b6b0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b6b6:	89 c2                	mov    edx,eax
c001b6b8:	77 1d                	ja     c001b6d7 <Sys::sbrk(regs*)+0x51>
c001b6ba:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b6c0:	50                   	push   eax
c001b6c1:	c1 ea 0c             	shr    edx,0xc
c001b6c4:	68 07 0c 00 00       	push   0xc07
c001b6c9:	52                   	push   edx
c001b6ca:	51                   	push   ecx
c001b6cb:	e8 a6 6c ff ff       	call   c0012376 <VAS::allocatePages(int, int)>
c001b6d0:	89 f0                	mov    eax,esi
c001b6d2:	31 d2                	xor    edx,edx
c001b6d4:	83 c4 10             	add    esp,0x10
c001b6d7:	59                   	pop    ecx
c001b6d8:	5b                   	pop    ebx
c001b6d9:	5e                   	pop    esi
c001b6da:	c3                   	ret    

c001b6db <Sys::setCwd(regs*)>:
c001b6db:	83 ec 14             	sub    esp,0x14
c001b6de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6e2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b6e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6ea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6ed:	e8 23 80 ff ff       	call   c0013715 <Fs::setcwd(Process*, char*)>
c001b6f2:	83 c4 1c             	add    esp,0x1c
c001b6f5:	99                   	cdq    
c001b6f6:	c3                   	ret    

c001b6f7 <Sys::setTime(regs*)>:
c001b6f7:	55                   	push   ebp
c001b6f8:	31 d2                	xor    edx,edx
c001b6fa:	57                   	push   edi
c001b6fb:	bf 18 00 00 00       	mov    edi,0x18
c001b700:	56                   	push   esi
c001b701:	53                   	push   ebx
c001b702:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b707:	83 ec 30             	sub    esp,0x30
c001b70a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b70e:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b711:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b714:	f7 f3                	div    ebx
c001b716:	89 d6                	mov    esi,edx
c001b718:	31 d2                	xor    edx,edx
c001b71a:	f7 f3                	div    ebx
c001b71c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b71f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b723:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b728:	31 d2                	xor    edx,edx
c001b72a:	f7 f3                	div    ebx
c001b72c:	31 d2                	xor    edx,edx
c001b72e:	bb 0c 00 00 00       	mov    ebx,0xc
c001b733:	f7 f7                	div    edi
c001b735:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b738:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b73c:	0f b7 cd             	movzx  ecx,bp
c001b73f:	56                   	push   esi
c001b740:	89 c7                	mov    edi,eax
c001b742:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b746:	c1 e6 10             	shl    esi,0x10
c001b749:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b74d:	83 e7 1f             	and    edi,0x1f
c001b750:	51                   	push   ecx
c001b751:	47                   	inc    edi
c001b752:	c1 e8 05             	shr    eax,0x5
c001b755:	31 d2                	xor    edx,edx
c001b757:	f7 f3                	div    ebx
c001b759:	31 db                	xor    ebx,ebx
c001b75b:	52                   	push   edx
c001b75c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b760:	57                   	push   edi
c001b761:	68 6d c6 02 c0       	push   0xc002c66d
c001b766:	e8 da 76 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001b76b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b76f:	89 f8                	mov    eax,edi
c001b771:	31 c9                	xor    ecx,ecx
c001b773:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b777:	88 c1                	mov    cl,al
c001b779:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b77f:	88 d5                	mov    ch,dl
c001b781:	c1 e0 10             	shl    eax,0x10
c001b784:	0f b7 d1             	movzx  edx,cx
c001b787:	09 c2                	or     edx,eax
c001b789:	89 d8                	mov    eax,ebx
c001b78b:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b790:	09 f0                	or     eax,esi
c001b792:	89 c3                	mov    ebx,eax
c001b794:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b798:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b79c:	83 c4 18             	add    esp,0x18
c001b79f:	53                   	push   ebx
c001b7a0:	52                   	push   edx
c001b7a1:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b7a5:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b7a9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b7ad:	e8 85 86 ff ff       	call   c0013e37 <datetimeToSeconds(datetime_t)>
c001b7b2:	83 c4 0c             	add    esp,0xc
c001b7b5:	52                   	push   edx
c001b7b6:	50                   	push   eax
c001b7b7:	56                   	push   esi
c001b7b8:	e8 01 88 ff ff       	call   c0013fbe <secondsToDatetime(unsigned long long)>
c001b7bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b7c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b7c5:	51                   	push   ecx
c001b7c6:	89 d6                	mov    esi,edx
c001b7c8:	51                   	push   ecx
c001b7c9:	c1 ee 10             	shr    esi,0x10
c001b7cc:	89 f3                	mov    ebx,esi
c001b7ce:	0f b6 f3             	movzx  esi,bl
c001b7d1:	56                   	push   esi
c001b7d2:	0f b6 f6             	movzx  esi,dh
c001b7d5:	0f b6 d2             	movzx  edx,dl
c001b7d8:	56                   	push   esi
c001b7d9:	52                   	push   edx
c001b7da:	89 c2                	mov    edx,eax
c001b7dc:	c1 ea 10             	shr    edx,0x10
c001b7df:	52                   	push   edx
c001b7e0:	0f b6 d4             	movzx  edx,ah
c001b7e3:	0f b6 c0             	movzx  eax,al
c001b7e6:	52                   	push   edx
c001b7e7:	50                   	push   eax
c001b7e8:	68 89 c6 02 c0       	push   0xc002c689
c001b7ed:	e8 53 76 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001b7f2:	83 c4 2c             	add    esp,0x2c
c001b7f5:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c001b7fa:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b7fe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b802:	53                   	push   ebx
c001b803:	51                   	push   ecx
c001b804:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b80a:	e8 4f 87 ff ff       	call   c0013f5e <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b80f:	83 f0 01             	xor    eax,0x1
c001b812:	31 d2                	xor    edx,edx
c001b814:	0f b6 c0             	movzx  eax,al
c001b817:	83 c4 3c             	add    esp,0x3c
c001b81a:	5b                   	pop    ebx
c001b81b:	5e                   	pop    esi
c001b81c:	5f                   	pop    edi
c001b81d:	5d                   	pop    ebp
c001b81e:	c3                   	ret    

c001b81f <Sys::timezone(regs*)>:
c001b81f:	53                   	push   ebx
c001b820:	83 ec 08             	sub    esp,0x8
c001b823:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b827:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b82b:	75 17                	jne    c001b844 <Sys::timezone(regs*)+0x25>
c001b82d:	83 ec 0c             	sub    esp,0xc
c001b830:	68 a5 c6 02 c0       	push   0xc002c6a5
c001b835:	e8 0b 76 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001b83a:	83 c8 ff             	or     eax,0xffffffff
c001b83d:	83 c4 10             	add    esp,0x10
c001b840:	89 c2                	mov    edx,eax
c001b842:	eb 20                	jmp    c001b864 <Sys::timezone(regs*)+0x45>
c001b844:	83 ec 0c             	sub    esp,0xc
c001b847:	68 dd c6 02 c0       	push   0xc002c6dd
c001b84c:	e8 f4 75 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001b851:	58                   	pop    eax
c001b852:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b855:	e8 66 84 ff ff       	call   c0013cc0 <User::loadClockSettings(int)>
c001b85a:	83 c4 10             	add    esp,0x10
c001b85d:	b8 01 00 00 00       	mov    eax,0x1
c001b862:	31 d2                	xor    edx,edx
c001b864:	83 c4 08             	add    esp,0x8
c001b867:	5b                   	pop    ebx
c001b868:	c3                   	ret    

c001b869 <Sys::write(regs*)>:
c001b869:	57                   	push   edi
c001b86a:	56                   	push   esi
c001b86b:	53                   	push   ebx
c001b86c:	83 ec 10             	sub    esp,0x10
c001b86f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b873:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b876:	83 f8 02             	cmp    eax,0x2
c001b879:	77 10                	ja     c001b88b <Sys::write(regs*)+0x22>
c001b87b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b880:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b883:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b889:	eb 0e                	jmp    c001b899 <Sys::write(regs*)+0x30>
c001b88b:	83 ec 0c             	sub    esp,0xc
c001b88e:	50                   	push   eax
c001b88f:	e8 4f 60 ff ff       	call   c00118e3 <getFromFileDescriptor(int)>
c001b894:	83 c4 10             	add    esp,0x10
c001b897:	89 c1                	mov    ecx,eax
c001b899:	83 c8 ff             	or     eax,0xffffffff
c001b89c:	85 c9                	test   ecx,ecx
c001b89e:	89 c2                	mov    edx,eax
c001b8a0:	74 28                	je     c001b8ca <Sys::write(regs*)+0x61>
c001b8a2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b8aa:	31 ff                	xor    edi,edi
c001b8ac:	83 ec 0c             	sub    esp,0xc
c001b8af:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b8b1:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b8b5:	52                   	push   edx
c001b8b6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8b9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b8bc:	57                   	push   edi
c001b8bd:	56                   	push   esi
c001b8be:	51                   	push   ecx
c001b8bf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b8c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b8c6:	83 c4 20             	add    esp,0x20
c001b8c9:	99                   	cdq    
c001b8ca:	83 c4 10             	add    esp,0x10
c001b8cd:	5b                   	pop    ebx
c001b8ce:	5e                   	pop    esi
c001b8cf:	5f                   	pop    edi
c001b8d0:	c3                   	ret    

c001b8d1 <Sys::wsbe(regs*)>:
c001b8d1:	57                   	push   edi
c001b8d2:	b9 0b 00 00 00       	mov    ecx,0xb
c001b8d7:	56                   	push   esi
c001b8d8:	be 1c c7 02 c0       	mov    esi,0xc002c71c
c001b8dd:	53                   	push   ebx
c001b8de:	83 ec 30             	sub    esp,0x30
c001b8e1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b8e5:	fc                   	cld    
c001b8e6:	83 ec 0c             	sub    esp,0xc
c001b8e9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b8eb:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b8ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8f7:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b8fd:	8b 06                	mov    eax,DWORD PTR [esi]
c001b8ff:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b902:	57                   	push   edi
c001b903:	e8 b0 4e fe ff       	call   c00007b8 <strlen>
c001b908:	5a                   	pop    edx
c001b909:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b90d:	52                   	push   edx
c001b90e:	31 d2                	xor    edx,edx
c001b910:	57                   	push   edi
c001b911:	52                   	push   edx
c001b912:	50                   	push   eax
c001b913:	56                   	push   esi
c001b914:	ff d3                	call   ebx
c001b916:	83 c4 14             	add    esp,0x14
c001b919:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b91d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b920:	e8 14 34 00 00       	call   c001ed39 <terminateTask(int)>
c001b925:	83 c4 40             	add    esp,0x40
c001b928:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b92d:	5b                   	pop    ebx
c001b92e:	31 d2                	xor    edx,edx
c001b930:	5e                   	pop    esi
c001b931:	5f                   	pop    edi
c001b932:	c3                   	ret    

c001b933 <Sys::yield(regs*)>:
c001b933:	57                   	push   edi
c001b934:	56                   	push   esi
c001b935:	53                   	push   ebx
c001b936:	fa                   	cli    
c001b937:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001b93d:	e8 c4 2a 00 00       	call   c001e406 <schedule()>
c001b942:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001b947:	48                   	dec    eax
c001b948:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001b94d:	75 01                	jne    c001b950 <Sys::yield(regs*)+0x1d>
c001b94f:	fb                   	sti    
c001b950:	8b 35 50 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f450
c001b956:	8b 3d 54 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f454
c001b95c:	89 f0                	mov    eax,esi
c001b95e:	89 fb                	mov    ebx,edi
c001b960:	89 f1                	mov    ecx,esi
c001b962:	c1 e0 07             	shl    eax,0x7
c001b965:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b969:	25 80 30 0f 00       	and    eax,0xf3080
c001b96e:	c1 eb 17             	shr    ebx,0x17
c001b971:	31 c8                	xor    eax,ecx
c001b973:	89 da                	mov    edx,ebx
c001b975:	5b                   	pop    ebx
c001b976:	5e                   	pop    esi
c001b977:	5f                   	pop    edi
c001b978:	c3                   	ret    

c001b979 <sysCallSeekDir(regs*)>:
c001b979:	31 c0                	xor    eax,eax
c001b97b:	31 d2                	xor    edx,edx
c001b97d:	c3                   	ret    

c001b97e <sysCallTellDir(regs*)>:
c001b97e:	31 c0                	xor    eax,eax
c001b980:	31 d2                	xor    edx,edx
c001b982:	c3                   	ret    

c001b983 <sysCallVerify(regs*)>:
c001b983:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b987:	31 d2                	xor    edx,edx
c001b989:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b98c:	c3                   	ret    

c001b98d <sysFormatDisk(regs*)>:
c001b98d:	56                   	push   esi
c001b98e:	53                   	push   ebx
c001b98f:	53                   	push   ebx
c001b990:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b994:	8b 1d 54 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef54
c001b99a:	eb 25                	jmp    c001b9c1 <sysFormatDisk(regs*)+0x34>
c001b99c:	83 ec 0c             	sub    esp,0xc
c001b99f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b9a2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b9a4:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b9a7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b9aa:	50                   	push   eax
c001b9ab:	ff 34 85 e0 f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0c20]
c001b9b2:	53                   	push   ebx
c001b9b3:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b9b6:	83 c4 20             	add    esp,0x20
c001b9b9:	83 f8 08             	cmp    eax,0x8
c001b9bc:	75 12                	jne    c001b9d0 <sysFormatDisk(regs*)+0x43>
c001b9be:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b9c1:	85 db                	test   ebx,ebx
c001b9c3:	75 d7                	jne    c001b99c <sysFormatDisk(regs*)+0xf>
c001b9c5:	59                   	pop    ecx
c001b9c6:	b8 03 00 00 00       	mov    eax,0x3
c001b9cb:	31 d2                	xor    edx,edx
c001b9cd:	5b                   	pop    ebx
c001b9ce:	5e                   	pop    esi
c001b9cf:	c3                   	ret    
c001b9d0:	85 c0                	test   eax,eax
c001b9d2:	74 1b                	je     c001b9ef <sysFormatDisk(regs*)+0x62>
c001b9d4:	83 f8 09             	cmp    eax,0x9
c001b9d7:	74 0b                	je     c001b9e4 <sysFormatDisk(regs*)+0x57>
c001b9d9:	59                   	pop    ecx
c001b9da:	b8 02 00 00 00       	mov    eax,0x2
c001b9df:	31 d2                	xor    edx,edx
c001b9e1:	5b                   	pop    ebx
c001b9e2:	5e                   	pop    esi
c001b9e3:	c3                   	ret    
c001b9e4:	59                   	pop    ecx
c001b9e5:	b8 01 00 00 00       	mov    eax,0x1
c001b9ea:	31 d2                	xor    edx,edx
c001b9ec:	5b                   	pop    ebx
c001b9ed:	5e                   	pop    esi
c001b9ee:	c3                   	ret    
c001b9ef:	59                   	pop    ecx
c001b9f0:	31 c0                	xor    eax,eax
c001b9f2:	31 d2                	xor    edx,edx
c001b9f4:	5b                   	pop    ebx
c001b9f5:	5e                   	pop    esi
c001b9f6:	c3                   	ret    

c001b9f7 <sysSetDiskVolumeLabel(regs*)>:
c001b9f7:	56                   	push   esi
c001b9f8:	53                   	push   ebx
c001b9f9:	53                   	push   ebx
c001b9fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9fe:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001ba01:	83 f8 19             	cmp    eax,0x19
c001ba04:	77 29                	ja     c001ba2f <sysSetDiskVolumeLabel(regs*)+0x38>
c001ba06:	8b 0c 85 e0 f3 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0c20]
c001ba0d:	85 c9                	test   ecx,ecx
c001ba0f:	74 1e                	je     c001ba2f <sysSetDiskVolumeLabel(regs*)+0x38>
c001ba11:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001ba14:	85 d2                	test   edx,edx
c001ba16:	74 17                	je     c001ba2f <sysSetDiskVolumeLabel(regs*)+0x38>
c001ba18:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001ba1e:	8b 33                	mov    esi,DWORD PTR [ebx]
c001ba20:	52                   	push   edx
c001ba21:	50                   	push   eax
c001ba22:	51                   	push   ecx
c001ba23:	53                   	push   ebx
c001ba24:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001ba27:	83 c4 10             	add    esp,0x10
c001ba2a:	99                   	cdq    
c001ba2b:	59                   	pop    ecx
c001ba2c:	5b                   	pop    ebx
c001ba2d:	5e                   	pop    esi
c001ba2e:	c3                   	ret    
c001ba2f:	59                   	pop    ecx
c001ba30:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ba35:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba3a:	5b                   	pop    ebx
c001ba3b:	5e                   	pop    esi
c001ba3c:	c3                   	ret    

c001ba3d <sysGetDiskVolumeLabel(regs*)>:
c001ba3d:	57                   	push   edi
c001ba3e:	56                   	push   esi
c001ba3f:	53                   	push   ebx
c001ba40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba44:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ba47:	83 fa 19             	cmp    edx,0x19
c001ba4a:	77 34                	ja     c001ba80 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ba4c:	8b 0c 95 e0 f3 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0c20]
c001ba53:	85 c9                	test   ecx,ecx
c001ba55:	74 29                	je     c001ba80 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ba57:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001ba5a:	85 db                	test   ebx,ebx
c001ba5c:	74 22                	je     c001ba80 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ba5e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001ba61:	85 c0                	test   eax,eax
c001ba63:	74 1b                	je     c001ba80 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ba65:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001ba6b:	83 ec 0c             	sub    esp,0xc
c001ba6e:	8b 3e                	mov    edi,DWORD PTR [esi]
c001ba70:	50                   	push   eax
c001ba71:	53                   	push   ebx
c001ba72:	52                   	push   edx
c001ba73:	51                   	push   ecx
c001ba74:	56                   	push   esi
c001ba75:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001ba78:	83 c4 20             	add    esp,0x20
c001ba7b:	99                   	cdq    
c001ba7c:	5b                   	pop    ebx
c001ba7d:	5e                   	pop    esi
c001ba7e:	5f                   	pop    edi
c001ba7f:	c3                   	ret    
c001ba80:	5b                   	pop    ebx
c001ba81:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ba86:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba8b:	5e                   	pop    esi
c001ba8c:	5f                   	pop    edi
c001ba8d:	c3                   	ret    

c001ba8e <sysShutdown(regs*)>:
c001ba8e:	83 ec 0c             	sub    esp,0xc
c001ba91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba95:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba98:	85 c0                	test   eax,eax
c001ba9a:	74 18                	je     c001bab4 <sysShutdown(regs*)+0x26>
c001ba9c:	83 f8 01             	cmp    eax,0x1
c001ba9f:	74 38                	je     c001bad9 <sysShutdown(regs*)+0x4b>
c001baa1:	83 f8 02             	cmp    eax,0x2
c001baa4:	74 24                	je     c001baca <sysShutdown(regs*)+0x3c>
c001baa6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001baab:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bab0:	83 c4 0c             	add    esp,0xc
c001bab3:	c3                   	ret    
c001bab4:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c001bab9:	8b 10                	mov    edx,DWORD PTR [eax]
c001babb:	6a 00                	push   0x0
c001babd:	6a 00                	push   0x0
c001babf:	6a 00                	push   0x0
c001bac1:	50                   	push   eax
c001bac2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bac5:	83 c4 10             	add    esp,0x10
c001bac8:	eb dc                	jmp    c001baa6 <sysShutdown(regs*)+0x18>
c001baca:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c001bacf:	8b 10                	mov    edx,DWORD PTR [eax]
c001bad1:	6a 00                	push   0x0
c001bad3:	6a 00                	push   0x0
c001bad5:	6a 01                	push   0x1
c001bad7:	eb e8                	jmp    c001bac1 <sysShutdown(regs*)+0x33>
c001bad9:	a1 80 14 03 c0       	mov    eax,ds:0xc0031480
c001bade:	85 c0                	test   eax,eax
c001bae0:	74 02                	je     c001bae4 <sysShutdown(regs*)+0x56>
c001bae2:	ff d0                	call   eax
c001bae4:	31 c0                	xor    eax,eax
c001bae6:	31 d2                	xor    edx,edx
c001bae8:	83 c4 0c             	add    esp,0xc
c001baeb:	c3                   	ret    

c001baec <sysCallRealpath(regs*)>:
c001baec:	83 ec 0c             	sub    esp,0xc
c001baef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baf3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001baf6:	85 d2                	test   edx,edx
c001baf8:	74 07                	je     c001bb01 <sysCallRealpath(regs*)+0x15>
c001bafa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bafd:	85 c0                	test   eax,eax
c001baff:	75 0b                	jne    c001bb0c <sysCallRealpath(regs*)+0x20>
c001bb01:	b8 01 00 00 00       	mov    eax,0x1
c001bb06:	31 d2                	xor    edx,edx
c001bb08:	83 c4 0c             	add    esp,0xc
c001bb0b:	c3                   	ret    
c001bb0c:	51                   	push   ecx
c001bb0d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bb13:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bb16:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bb1c:	51                   	push   ecx
c001bb1d:	52                   	push   edx
c001bb1e:	50                   	push   eax
c001bb1f:	e8 d6 76 ff ff       	call   c00131fa <Fs::standardiseFiles(char*, char const*, char const*)>
c001bb24:	83 c4 10             	add    esp,0x10
c001bb27:	31 c0                	xor    eax,eax
c001bb29:	31 d2                	xor    edx,edx
c001bb2b:	83 c4 0c             	add    esp,0xc
c001bb2e:	c3                   	ret    

c001bb2f <sysCallGetArgc(regs*)>:
c001bb2f:	83 ec 14             	sub    esp,0x14
c001bb32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb37:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb3a:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bb40:	68 48 c7 02 c0       	push   0xc002c748
c001bb45:	e8 fb 72 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001bb4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb4f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb52:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001bb58:	83 c4 1c             	add    esp,0x1c
c001bb5b:	99                   	cdq    
c001bb5c:	c3                   	ret    

c001bb5d <sysCallReadDir(regs*)>:
c001bb5d:	53                   	push   ebx
c001bb5e:	83 ec 18             	sub    esp,0x18
c001bb61:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb65:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb68:	83 f8 02             	cmp    eax,0x2
c001bb6b:	76 53                	jbe    c001bbc0 <sysCallReadDir(regs*)+0x63>
c001bb6d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bb70:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001bb76:	77 4f                	ja     c001bbc7 <sysCallReadDir(regs*)+0x6a>
c001bb78:	83 ec 0c             	sub    esp,0xc
c001bb7b:	50                   	push   eax
c001bb7c:	e8 62 5d ff ff       	call   c00118e3 <getFromFileDescriptor(int)>
c001bb81:	83 c4 10             	add    esp,0x10
c001bb84:	85 c0                	test   eax,eax
c001bb86:	74 50                	je     c001bbd8 <sysCallReadDir(regs*)+0x7b>
c001bb88:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bb90:	83 ec 0c             	sub    esp,0xc
c001bb93:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb95:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001bb99:	51                   	push   ecx
c001bb9a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb9d:	6a 00                	push   0x0
c001bb9f:	68 10 01 00 00       	push   0x110
c001bba4:	50                   	push   eax
c001bba5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bba8:	83 c4 20             	add    esp,0x20
c001bbab:	85 c0                	test   eax,eax
c001bbad:	74 38                	je     c001bbe7 <sysCallReadDir(regs*)+0x8a>
c001bbaf:	83 f8 07             	cmp    eax,0x7
c001bbb2:	74 0c                	je     c001bbc0 <sysCallReadDir(regs*)+0x63>
c001bbb4:	b8 02 00 00 00       	mov    eax,0x2
c001bbb9:	31 d2                	xor    edx,edx
c001bbbb:	83 c4 18             	add    esp,0x18
c001bbbe:	5b                   	pop    ebx
c001bbbf:	c3                   	ret    
c001bbc0:	b8 01 00 00 00       	mov    eax,0x1
c001bbc5:	eb f2                	jmp    c001bbb9 <sysCallReadDir(regs*)+0x5c>
c001bbc7:	83 ec 08             	sub    esp,0x8
c001bbca:	52                   	push   edx
c001bbcb:	68 6c c8 02 c0       	push   0xc002c86c
c001bbd0:	e8 70 72 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001bbd5:	83 c4 10             	add    esp,0x10
c001bbd8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbdd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbe2:	83 c4 18             	add    esp,0x18
c001bbe5:	5b                   	pop    ebx
c001bbe6:	c3                   	ret    
c001bbe7:	31 c0                	xor    eax,eax
c001bbe9:	eb ce                	jmp    c001bbb9 <sysCallReadDir(regs*)+0x5c>

c001bbeb <sysCallIsATTY(regs*)>:
c001bbeb:	83 ec 0c             	sub    esp,0xc
c001bbee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbf2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbf5:	83 f8 02             	cmp    eax,0x2
c001bbf8:	76 07                	jbe    c001bc01 <sysCallIsATTY(regs*)+0x16>
c001bbfa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bbff:	75 26                	jne    c001bc27 <sysCallIsATTY(regs*)+0x3c>
c001bc01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc09:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bc0f:	85 c0                	test   eax,eax
c001bc11:	74 24                	je     c001bc37 <sysCallIsATTY(regs*)+0x4c>
c001bc13:	83 ec 0c             	sub    esp,0xc
c001bc16:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc18:	50                   	push   eax
c001bc19:	ff 12                	call   DWORD PTR [edx]
c001bc1b:	31 d2                	xor    edx,edx
c001bc1d:	0f b6 c0             	movzx  eax,al
c001bc20:	83 c4 10             	add    esp,0x10
c001bc23:	83 c4 0c             	add    esp,0xc
c001bc26:	c3                   	ret    
c001bc27:	83 ec 0c             	sub    esp,0xc
c001bc2a:	50                   	push   eax
c001bc2b:	e8 b3 5c ff ff       	call   c00118e3 <getFromFileDescriptor(int)>
c001bc30:	83 c4 10             	add    esp,0x10
c001bc33:	85 c0                	test   eax,eax
c001bc35:	75 dc                	jne    c001bc13 <sysCallIsATTY(regs*)+0x28>
c001bc37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc3c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc41:	83 c4 0c             	add    esp,0xc
c001bc44:	c3                   	ret    

c001bc45 <sysCallSeek(regs*)>:
c001bc45:	53                   	push   ebx
c001bc46:	83 ec 08             	sub    esp,0x8
c001bc49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc4d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bc50:	83 f8 02             	cmp    eax,0x2
c001bc53:	76 4a                	jbe    c001bc9f <sysCallSeek(regs*)+0x5a>
c001bc55:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc5a:	77 32                	ja     c001bc8e <sysCallSeek(regs*)+0x49>
c001bc5c:	83 ec 0c             	sub    esp,0xc
c001bc5f:	50                   	push   eax
c001bc60:	e8 7e 5c ff ff       	call   c00118e3 <getFromFileDescriptor(int)>
c001bc65:	83 c4 0c             	add    esp,0xc
c001bc68:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bc6b:	31 db                	xor    ebx,ebx
c001bc6d:	53                   	push   ebx
c001bc6e:	51                   	push   ecx
c001bc6f:	50                   	push   eax
c001bc70:	e8 51 78 ff ff       	call   c00134c6 <File::seek(unsigned long long)>
c001bc75:	83 c4 10             	add    esp,0x10
c001bc78:	85 c0                	test   eax,eax
c001bc7a:	0f 95 c0             	setne  al
c001bc7d:	31 d2                	xor    edx,edx
c001bc7f:	0f b6 c0             	movzx  eax,al
c001bc82:	f7 d8                	neg    eax
c001bc84:	83 d2 00             	adc    edx,0x0
c001bc87:	83 c4 08             	add    esp,0x8
c001bc8a:	f7 da                	neg    edx
c001bc8c:	5b                   	pop    ebx
c001bc8d:	c3                   	ret    
c001bc8e:	83 ec 08             	sub    esp,0x8
c001bc91:	50                   	push   eax
c001bc92:	68 53 c7 02 c0       	push   0xc002c753
c001bc97:	e8 a9 71 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001bc9c:	83 c4 10             	add    esp,0x10
c001bc9f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bca4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bca9:	83 c4 08             	add    esp,0x8
c001bcac:	5b                   	pop    ebx
c001bcad:	c3                   	ret    

c001bcae <sysCallTell(regs*)>:
c001bcae:	53                   	push   ebx
c001bcaf:	83 ec 08             	sub    esp,0x8
c001bcb2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcb6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcb9:	83 f8 02             	cmp    eax,0x2
c001bcbc:	76 5e                	jbe    c001bd1c <sysCallTell(regs*)+0x6e>
c001bcbe:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcc3:	77 2d                	ja     c001bcf2 <sysCallTell(regs*)+0x44>
c001bcc5:	83 ec 0c             	sub    esp,0xc
c001bcc8:	50                   	push   eax
c001bcc9:	e8 15 5c ff ff       	call   c00118e3 <getFromFileDescriptor(int)>
c001bcce:	5a                   	pop    edx
c001bccf:	59                   	pop    ecx
c001bcd0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bcd3:	50                   	push   eax
c001bcd4:	e8 43 78 ff ff       	call   c001351c <File::tell(unsigned long long*)>
c001bcd9:	83 c4 10             	add    esp,0x10
c001bcdc:	85 c0                	test   eax,eax
c001bcde:	0f 95 c0             	setne  al
c001bce1:	31 d2                	xor    edx,edx
c001bce3:	0f b6 c0             	movzx  eax,al
c001bce6:	f7 d8                	neg    eax
c001bce8:	83 d2 00             	adc    edx,0x0
c001bceb:	83 c4 08             	add    esp,0x8
c001bcee:	f7 da                	neg    edx
c001bcf0:	5b                   	pop    ebx
c001bcf1:	c3                   	ret    
c001bcf2:	83 ec 08             	sub    esp,0x8
c001bcf5:	50                   	push   eax
c001bcf6:	68 6d c7 02 c0       	push   0xc002c76d
c001bcfb:	e8 45 71 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001bd00:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bd03:	83 c4 10             	add    esp,0x10
c001bd06:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bd0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd13:	31 d2                	xor    edx,edx
c001bd15:	31 c0                	xor    eax,eax
c001bd17:	83 c4 08             	add    esp,0x8
c001bd1a:	5b                   	pop    ebx
c001bd1b:	c3                   	ret    
c001bd1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd21:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd26:	83 c4 08             	add    esp,0x8
c001bd29:	5b                   	pop    ebx
c001bd2a:	c3                   	ret    

c001bd2b <sysCallSize(regs*)>:
c001bd2b:	53                   	push   ebx
c001bd2c:	83 ec 18             	sub    esp,0x18
c001bd2f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bd33:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd36:	83 f8 02             	cmp    eax,0x2
c001bd39:	76 64                	jbe    c001bd9f <sysCallSize(regs*)+0x74>
c001bd3b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd40:	77 33                	ja     c001bd75 <sysCallSize(regs*)+0x4a>
c001bd42:	83 ec 0c             	sub    esp,0xc
c001bd45:	50                   	push   eax
c001bd46:	e8 98 5b ff ff       	call   c00118e3 <getFromFileDescriptor(int)>
c001bd4b:	83 c4 0c             	add    esp,0xc
c001bd4e:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bd52:	52                   	push   edx
c001bd53:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bd56:	50                   	push   eax
c001bd57:	e8 58 79 ff ff       	call   c00136b4 <File::stat(unsigned long long*, bool*)>
c001bd5c:	83 c4 10             	add    esp,0x10
c001bd5f:	85 c0                	test   eax,eax
c001bd61:	0f 95 c0             	setne  al
c001bd64:	31 d2                	xor    edx,edx
c001bd66:	0f b6 c0             	movzx  eax,al
c001bd69:	f7 d8                	neg    eax
c001bd6b:	83 d2 00             	adc    edx,0x0
c001bd6e:	83 c4 18             	add    esp,0x18
c001bd71:	f7 da                	neg    edx
c001bd73:	5b                   	pop    ebx
c001bd74:	c3                   	ret    
c001bd75:	83 ec 08             	sub    esp,0x8
c001bd78:	50                   	push   eax
c001bd79:	68 87 c7 02 c0       	push   0xc002c787
c001bd7e:	e8 c2 70 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001bd83:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bd86:	83 c4 10             	add    esp,0x10
c001bd89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bd8f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd96:	31 d2                	xor    edx,edx
c001bd98:	31 c0                	xor    eax,eax
c001bd9a:	83 c4 18             	add    esp,0x18
c001bd9d:	5b                   	pop    ebx
c001bd9e:	c3                   	ret    
c001bd9f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bda4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bda9:	83 c4 18             	add    esp,0x18
c001bdac:	5b                   	pop    ebx
c001bdad:	c3                   	ret    

c001bdae <sysCallSizeFromFilename(regs*)>:
c001bdae:	57                   	push   edi
c001bdaf:	56                   	push   esi
c001bdb0:	53                   	push   ebx
c001bdb1:	83 ec 20             	sub    esp,0x20
c001bdb4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bdb8:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bdbb:	83 fb 02             	cmp    ebx,0x2
c001bdbe:	0f 86 99 00 00 00    	jbe    c001be5d <sysCallSizeFromFilename(regs*)+0xaf>
c001bdc4:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bdca:	77 65                	ja     c001be31 <sysCallSizeFromFilename(regs*)+0x83>
c001bdcc:	83 ec 0c             	sub    esp,0xc
c001bdcf:	68 14 01 00 00       	push   0x114
c001bdd4:	e8 ad 3a ff ff       	call   c000f886 <malloc>
c001bdd9:	83 c4 0c             	add    esp,0xc
c001bddc:	89 c6                	mov    esi,eax
c001bdde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bde3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bde6:	53                   	push   ebx
c001bde7:	56                   	push   esi
c001bde8:	e8 b7 75 ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c001bded:	83 c4 0c             	add    esp,0xc
c001bdf0:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bdf4:	50                   	push   eax
c001bdf5:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bdf8:	56                   	push   esi
c001bdf9:	e8 b6 78 ff ff       	call   c00136b4 <File::stat(unsigned long long*, bool*)>
c001bdfe:	83 c4 10             	add    esp,0x10
c001be01:	85 f6                	test   esi,esi
c001be03:	74 14                	je     c001be19 <sysCallSizeFromFilename(regs*)+0x6b>
c001be05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be09:	8b 16                	mov    edx,DWORD PTR [esi]
c001be0b:	83 ec 0c             	sub    esp,0xc
c001be0e:	56                   	push   esi
c001be0f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be12:	83 c4 10             	add    esp,0x10
c001be15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be19:	85 c0                	test   eax,eax
c001be1b:	0f 95 c0             	setne  al
c001be1e:	31 d2                	xor    edx,edx
c001be20:	0f b6 c0             	movzx  eax,al
c001be23:	f7 d8                	neg    eax
c001be25:	83 d2 00             	adc    edx,0x0
c001be28:	83 c4 20             	add    esp,0x20
c001be2b:	f7 da                	neg    edx
c001be2d:	5b                   	pop    ebx
c001be2e:	5e                   	pop    esi
c001be2f:	5f                   	pop    edi
c001be30:	c3                   	ret    
c001be31:	83 ec 08             	sub    esp,0x8
c001be34:	53                   	push   ebx
c001be35:	68 87 c7 02 c0       	push   0xc002c787
c001be3a:	e8 06 70 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001be3f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001be42:	83 c4 10             	add    esp,0x10
c001be45:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be4b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be52:	31 d2                	xor    edx,edx
c001be54:	83 c4 20             	add    esp,0x20
c001be57:	31 c0                	xor    eax,eax
c001be59:	5b                   	pop    ebx
c001be5a:	5e                   	pop    esi
c001be5b:	5f                   	pop    edi
c001be5c:	c3                   	ret    
c001be5d:	83 c4 20             	add    esp,0x20
c001be60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be65:	5b                   	pop    ebx
c001be66:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be6b:	5e                   	pop    esi
c001be6c:	5f                   	pop    edi
c001be6d:	c3                   	ret    

c001be6e <sysCallClose(regs*)>:
c001be6e:	53                   	push   ebx
c001be6f:	83 ec 08             	sub    esp,0x8
c001be72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be76:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001be79:	83 f8 02             	cmp    eax,0x2
c001be7c:	76 50                	jbe    c001bece <sysCallClose(regs*)+0x60>
c001be7e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001be83:	74 58                	je     c001bedd <sysCallClose(regs*)+0x6f>
c001be85:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001be8a:	74 60                	je     c001beec <sysCallClose(regs*)+0x7e>
c001be8c:	77 2f                	ja     c001bebd <sysCallClose(regs*)+0x4f>
c001be8e:	83 ec 0c             	sub    esp,0xc
c001be91:	50                   	push   eax
c001be92:	e8 4c 5a ff ff       	call   c00118e3 <getFromFileDescriptor(int)>
c001be97:	89 c3                	mov    ebx,eax
c001be99:	89 04 24             	mov    DWORD PTR [esp],eax
c001be9c:	e8 c5 75 ff ff       	call   c0013466 <File::close()>
c001bea1:	83 c4 10             	add    esp,0x10
c001bea4:	85 db                	test   ebx,ebx
c001bea6:	74 0c                	je     c001beb4 <sysCallClose(regs*)+0x46>
c001bea8:	83 ec 0c             	sub    esp,0xc
c001beab:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bead:	53                   	push   ebx
c001beae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001beb1:	83 c4 10             	add    esp,0x10
c001beb4:	31 c0                	xor    eax,eax
c001beb6:	31 d2                	xor    edx,edx
c001beb8:	83 c4 08             	add    esp,0x8
c001bebb:	5b                   	pop    ebx
c001bebc:	c3                   	ret    
c001bebd:	83 ec 08             	sub    esp,0x8
c001bec0:	50                   	push   eax
c001bec1:	68 90 c8 02 c0       	push   0xc002c890
c001bec6:	e8 7a 6f ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001becb:	83 c4 10             	add    esp,0x10
c001bece:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bed3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bed8:	83 c4 08             	add    esp,0x8
c001bedb:	5b                   	pop    ebx
c001bedc:	c3                   	ret    
c001bedd:	83 ec 0c             	sub    esp,0xc
c001bee0:	68 a2 c7 02 c0       	push   0xc002c7a2
c001bee5:	e8 5b 6f ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001beea:	eb c5                	jmp    c001beb1 <sysCallClose(regs*)+0x43>
c001beec:	83 ec 0c             	sub    esp,0xc
c001beef:	68 b0 c7 02 c0       	push   0xc002c7b0
c001bef4:	eb ef                	jmp    c001bee5 <sysCallClose(regs*)+0x77>

c001bef6 <sysCallOpenDir(regs*)>:
c001bef6:	56                   	push   esi
c001bef7:	53                   	push   ebx
c001bef8:	53                   	push   ebx
c001bef9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001befd:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bf00:	85 f6                	test   esi,esi
c001bf02:	74 59                	je     c001bf5d <sysCallOpenDir(regs*)+0x67>
c001bf04:	83 ec 0c             	sub    esp,0xc
c001bf07:	68 14 01 00 00       	push   0x114
c001bf0c:	e8 75 39 ff ff       	call   c000f886 <malloc>
c001bf11:	83 c4 0c             	add    esp,0xc
c001bf14:	89 c6                	mov    esi,eax
c001bf16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf1b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf1e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf21:	56                   	push   esi
c001bf22:	e8 29 79 ff ff       	call   c0013850 <Directory::Directory(char const*, Process*)>
c001bf27:	83 c4 10             	add    esp,0x10
c001bf2a:	85 f6                	test   esi,esi
c001bf2c:	74 2f                	je     c001bf5d <sysCallOpenDir(regs*)+0x67>
c001bf2e:	83 ec 0c             	sub    esp,0xc
c001bf31:	56                   	push   esi
c001bf32:	e8 7d 79 ff ff       	call   c00138b4 <Directory::open()>
c001bf37:	83 c4 10             	add    esp,0x10
c001bf3a:	85 c0                	test   eax,eax
c001bf3c:	75 1f                	jne    c001bf5d <sysCallOpenDir(regs*)+0x67>
c001bf3e:	83 ec 0c             	sub    esp,0xc
c001bf41:	56                   	push   esi
c001bf42:	e8 a7 56 ff ff       	call   c00115ee <UnixFile::getFileDescriptor()>
c001bf47:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bf4a:	83 c4 10             	add    esp,0x10
c001bf4d:	89 02                	mov    DWORD PTR [edx],eax
c001bf4f:	c1 f8 1f             	sar    eax,0x1f
c001bf52:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bf55:	31 c0                	xor    eax,eax
c001bf57:	59                   	pop    ecx
c001bf58:	31 d2                	xor    edx,edx
c001bf5a:	5b                   	pop    ebx
c001bf5b:	5e                   	pop    esi
c001bf5c:	c3                   	ret    
c001bf5d:	59                   	pop    ecx
c001bf5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf63:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf68:	5b                   	pop    ebx
c001bf69:	5e                   	pop    esi
c001bf6a:	c3                   	ret    

c001bf6b <sysCallCloseDir(regs*)>:
c001bf6b:	53                   	push   ebx
c001bf6c:	83 ec 08             	sub    esp,0x8
c001bf6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf73:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bf76:	83 f8 02             	cmp    eax,0x2
c001bf79:	76 47                	jbe    c001bfc2 <sysCallCloseDir(regs*)+0x57>
c001bf7b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf80:	77 2f                	ja     c001bfb1 <sysCallCloseDir(regs*)+0x46>
c001bf82:	83 ec 0c             	sub    esp,0xc
c001bf85:	50                   	push   eax
c001bf86:	e8 58 59 ff ff       	call   c00118e3 <getFromFileDescriptor(int)>
c001bf8b:	89 c3                	mov    ebx,eax
c001bf8d:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf90:	e8 7b 79 ff ff       	call   c0013910 <Directory::close()>
c001bf95:	83 c4 10             	add    esp,0x10
c001bf98:	85 db                	test   ebx,ebx
c001bf9a:	74 0c                	je     c001bfa8 <sysCallCloseDir(regs*)+0x3d>
c001bf9c:	83 ec 0c             	sub    esp,0xc
c001bf9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bfa1:	53                   	push   ebx
c001bfa2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bfa5:	83 c4 10             	add    esp,0x10
c001bfa8:	31 c0                	xor    eax,eax
c001bfaa:	31 d2                	xor    edx,edx
c001bfac:	83 c4 08             	add    esp,0x8
c001bfaf:	5b                   	pop    ebx
c001bfb0:	c3                   	ret    
c001bfb1:	83 ec 08             	sub    esp,0x8
c001bfb4:	50                   	push   eax
c001bfb5:	68 b8 c8 02 c0       	push   0xc002c8b8
c001bfba:	e8 86 6e ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001bfbf:	83 c4 10             	add    esp,0x10
c001bfc2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bfc7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bfcc:	83 c4 08             	add    esp,0x8
c001bfcf:	5b                   	pop    ebx
c001bfd0:	c3                   	ret    

c001bfd1 <sysCallMakeDir(regs*)>:
c001bfd1:	56                   	push   esi
c001bfd2:	53                   	push   ebx
c001bfd3:	83 ec 10             	sub    esp,0x10
c001bfd6:	68 14 01 00 00       	push   0x114
c001bfdb:	e8 a6 38 ff ff       	call   c000f886 <malloc>
c001bfe0:	83 c4 0c             	add    esp,0xc
c001bfe3:	89 c3                	mov    ebx,eax
c001bfe5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bff1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bff4:	53                   	push   ebx
c001bff5:	e8 56 78 ff ff       	call   c0013850 <Directory::Directory(char const*, Process*)>
c001bffa:	83 c4 10             	add    esp,0x10
c001bffd:	85 db                	test   ebx,ebx
c001bfff:	74 32                	je     c001c033 <sysCallMakeDir(regs*)+0x62>
c001c001:	83 ec 0c             	sub    esp,0xc
c001c004:	53                   	push   ebx
c001c005:	e8 8a 7a ff ff       	call   c0013a94 <Directory::create()>
c001c00a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c00d:	89 c6                	mov    esi,eax
c001c00f:	e8 fc 78 ff ff       	call   c0013910 <Directory::close()>
c001c014:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c016:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c019:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c01c:	83 c4 10             	add    esp,0x10
c001c01f:	31 c0                	xor    eax,eax
c001c021:	59                   	pop    ecx
c001c022:	85 f6                	test   esi,esi
c001c024:	5b                   	pop    ebx
c001c025:	0f 95 c0             	setne  al
c001c028:	5e                   	pop    esi
c001c029:	31 d2                	xor    edx,edx
c001c02b:	f7 d8                	neg    eax
c001c02d:	83 d2 00             	adc    edx,0x0
c001c030:	f7 da                	neg    edx
c001c032:	c3                   	ret    
c001c033:	59                   	pop    ecx
c001c034:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c039:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c03e:	5b                   	pop    ebx
c001c03f:	5e                   	pop    esi
c001c040:	c3                   	ret    

c001c041 <sysCallWait(regs*)>:
c001c041:	83 ec 10             	sub    esp,0x10
c001c044:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c048:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c04b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c04e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c051:	e8 dc 25 00 00       	call   c001e632 <waitTask(int, int*, int)>
c001c056:	83 c4 1c             	add    esp,0x1c
c001c059:	99                   	cdq    
c001c05a:	c3                   	ret    

c001c05b <sysCallNotImpl(regs*)>:
c001c05b:	83 ec 18             	sub    esp,0x18
c001c05e:	68 be c7 02 c0       	push   0xc002c7be
c001c063:	e8 9d e7 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001c068:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c06d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c072:	83 c4 1c             	add    esp,0x1c
c001c075:	c3                   	ret    

c001c076 <sysPanic(regs*)>:
c001c076:	83 ec 18             	sub    esp,0x18
c001c079:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c07d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c080:	e8 80 e7 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001c085:	c7 04 24 d8 c7 02 c0 	mov    DWORD PTR [esp],0xc002c7d8
c001c08c:	e8 74 e7 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001c091:	b8 01 00 00 00       	mov    eax,0x1
c001c096:	31 d2                	xor    edx,edx
c001c098:	83 c4 1c             	add    esp,0x1c
c001c09b:	c3                   	ret    

c001c09c <sysCallRmdir(regs*)>:
c001c09c:	56                   	push   esi
c001c09d:	53                   	push   ebx
c001c09e:	83 ec 20             	sub    esp,0x20
c001c0a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c0a5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c0a8:	68 14 01 00 00       	push   0x114
c001c0ad:	e8 d4 37 ff ff       	call   c000f886 <malloc>
c001c0b2:	83 c4 0c             	add    esp,0xc
c001c0b5:	89 c3                	mov    ebx,eax
c001c0b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0bc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0bf:	56                   	push   esi
c001c0c0:	53                   	push   ebx
c001c0c1:	e8 de 72 ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c001c0c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0c9:	e8 b2 74 ff ff       	call   c0013580 <File::unlink()>
c001c0ce:	83 c4 10             	add    esp,0x10
c001c0d1:	85 db                	test   ebx,ebx
c001c0d3:	74 14                	je     c001c0e9 <sysCallRmdir(regs*)+0x4d>
c001c0d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0d9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c0db:	83 ec 0c             	sub    esp,0xc
c001c0de:	53                   	push   ebx
c001c0df:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c0e2:	83 c4 10             	add    esp,0x10
c001c0e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0e9:	85 c0                	test   eax,eax
c001c0eb:	0f 95 c0             	setne  al
c001c0ee:	31 d2                	xor    edx,edx
c001c0f0:	0f b6 c0             	movzx  eax,al
c001c0f3:	f7 d8                	neg    eax
c001c0f5:	83 d2 00             	adc    edx,0x0
c001c0f8:	83 c4 14             	add    esp,0x14
c001c0fb:	f7 da                	neg    edx
c001c0fd:	5b                   	pop    ebx
c001c0fe:	5e                   	pop    esi
c001c0ff:	c3                   	ret    

c001c100 <sysCallUnlink(regs*)>:
c001c100:	56                   	push   esi
c001c101:	53                   	push   ebx
c001c102:	83 ec 20             	sub    esp,0x20
c001c105:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c109:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c10c:	68 14 01 00 00       	push   0x114
c001c111:	e8 70 37 ff ff       	call   c000f886 <malloc>
c001c116:	83 c4 0c             	add    esp,0xc
c001c119:	89 c3                	mov    ebx,eax
c001c11b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c120:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c123:	56                   	push   esi
c001c124:	53                   	push   ebx
c001c125:	e8 7a 72 ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c001c12a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c12d:	e8 4e 74 ff ff       	call   c0013580 <File::unlink()>
c001c132:	83 c4 10             	add    esp,0x10
c001c135:	85 db                	test   ebx,ebx
c001c137:	74 14                	je     c001c14d <sysCallUnlink(regs*)+0x4d>
c001c139:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c13d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c13f:	83 ec 0c             	sub    esp,0xc
c001c142:	53                   	push   ebx
c001c143:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c146:	83 c4 10             	add    esp,0x10
c001c149:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c14d:	85 c0                	test   eax,eax
c001c14f:	0f 95 c0             	setne  al
c001c152:	31 d2                	xor    edx,edx
c001c154:	0f b6 c0             	movzx  eax,al
c001c157:	f7 d8                	neg    eax
c001c159:	83 d2 00             	adc    edx,0x0
c001c15c:	83 c4 14             	add    esp,0x14
c001c15f:	f7 da                	neg    edx
c001c161:	5b                   	pop    ebx
c001c162:	5e                   	pop    esi
c001c163:	c3                   	ret    

c001c164 <sysCallGetArgv(regs*)>:
c001c164:	83 ec 0c             	sub    esp,0xc
c001c167:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c16b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c16e:	85 c0                	test   eax,eax
c001c170:	78 2b                	js     c001c19d <sysCallGetArgv(regs*)+0x39>
c001c172:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c178:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c17b:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c181:	7d 1a                	jge    c001c19d <sysCallGetArgv(regs*)+0x39>
c001c183:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c18a:	85 c0                	test   eax,eax
c001c18c:	74 17                	je     c001c1a5 <sysCallGetArgv(regs*)+0x41>
c001c18e:	83 ec 08             	sub    esp,0x8
c001c191:	50                   	push   eax
c001c192:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c195:	e8 be 46 fe ff       	call   c0000858 <strcpy>
c001c19a:	83 c4 10             	add    esp,0x10
c001c19d:	31 c0                	xor    eax,eax
c001c19f:	31 d2                	xor    edx,edx
c001c1a1:	83 c4 0c             	add    esp,0xc
c001c1a4:	c3                   	ret    
c001c1a5:	b8 01 00 00 00       	mov    eax,0x1
c001c1aa:	31 d2                	xor    edx,edx
c001c1ac:	83 c4 0c             	add    esp,0xc
c001c1af:	c3                   	ret    

c001c1b0 <sysCallTTYName(regs*)>:
c001c1b0:	56                   	push   esi
c001c1b1:	53                   	push   ebx
c001c1b2:	53                   	push   ebx
c001c1b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c1b7:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c1ba:	85 c0                	test   eax,eax
c001c1bc:	74 5f                	je     c001c21d <sysCallTTYName(regs*)+0x6d>
c001c1be:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c1c1:	83 f8 02             	cmp    eax,0x2
c001c1c4:	77 3e                	ja     c001c204 <sysCallTTYName(regs*)+0x54>
c001c1c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1ce:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c1d4:	85 db                	test   ebx,ebx
c001c1d6:	74 45                	je     c001c21d <sysCallTTYName(regs*)+0x6d>
c001c1d8:	83 ec 0c             	sub    esp,0xc
c001c1db:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1dd:	53                   	push   ebx
c001c1de:	ff 10                	call   DWORD PTR [eax]
c001c1e0:	83 c4 10             	add    esp,0x10
c001c1e3:	84 c0                	test   al,al
c001c1e5:	74 41                	je     c001c228 <sysCallTTYName(regs*)+0x78>
c001c1e7:	83 ec 08             	sub    esp,0x8
c001c1ea:	81 c3 82 00 00 00    	add    ebx,0x82
c001c1f0:	53                   	push   ebx
c001c1f1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c1f4:	e8 5f 46 fe ff       	call   c0000858 <strcpy>
c001c1f9:	83 c4 10             	add    esp,0x10
c001c1fc:	31 c0                	xor    eax,eax
c001c1fe:	59                   	pop    ecx
c001c1ff:	31 d2                	xor    edx,edx
c001c201:	5b                   	pop    ebx
c001c202:	5e                   	pop    esi
c001c203:	c3                   	ret    
c001c204:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c209:	74 bb                	je     c001c1c6 <sysCallTTYName(regs*)+0x16>
c001c20b:	83 ec 0c             	sub    esp,0xc
c001c20e:	50                   	push   eax
c001c20f:	e8 cf 56 ff ff       	call   c00118e3 <getFromFileDescriptor(int)>
c001c214:	83 c4 10             	add    esp,0x10
c001c217:	89 c3                	mov    ebx,eax
c001c219:	85 db                	test   ebx,ebx
c001c21b:	75 bb                	jne    c001c1d8 <sysCallTTYName(regs*)+0x28>
c001c21d:	59                   	pop    ecx
c001c21e:	b8 01 00 00 00       	mov    eax,0x1
c001c223:	31 d2                	xor    edx,edx
c001c225:	5b                   	pop    ebx
c001c226:	5e                   	pop    esi
c001c227:	c3                   	ret    
c001c228:	59                   	pop    ecx
c001c229:	b8 02 00 00 00       	mov    eax,0x2
c001c22e:	31 d2                	xor    edx,edx
c001c230:	5b                   	pop    ebx
c001c231:	5e                   	pop    esi
c001c232:	c3                   	ret    

c001c233 <sysCallUSleep(regs*)>:
c001c233:	83 ec 14             	sub    esp,0x14
c001c236:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c23b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c23f:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c246:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c249:	01 ca                	add    edx,ecx
c001c24b:	52                   	push   edx
c001c24c:	50                   	push   eax
c001c24d:	e8 b7 24 00 00       	call   c001e709 <nanoSleep(unsigned long long)>
c001c252:	31 c0                	xor    eax,eax
c001c254:	31 d2                	xor    edx,edx
c001c256:	83 c4 1c             	add    esp,0x1c
c001c259:	c3                   	ret    

c001c25a <sysCallSpawn(regs*)>:
c001c25a:	56                   	push   esi
c001c25b:	53                   	push   ebx
c001c25c:	50                   	push   eax
c001c25d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c261:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c264:	85 c0                	test   eax,eax
c001c266:	75 08                	jne    c001c270 <sysCallSpawn(regs*)+0x16>
c001c268:	59                   	pop    ecx
c001c269:	31 c0                	xor    eax,eax
c001c26b:	31 d2                	xor    edx,edx
c001c26d:	5b                   	pop    ebx
c001c26e:	5e                   	pop    esi
c001c26f:	c3                   	ret    
c001c270:	83 ec 08             	sub    esp,0x8
c001c273:	50                   	push   eax
c001c274:	68 e7 c7 02 c0       	push   0xc002c7e7
c001c279:	e8 c7 6b ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001c27e:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c285:	e8 fc 35 ff ff       	call   c000f886 <malloc>
c001c28a:	83 c4 10             	add    esp,0x10
c001c28d:	89 c6                	mov    esi,eax
c001c28f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c292:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c295:	85 c0                	test   eax,eax
c001c297:	75 32                	jne    c001c2cb <sysCallSpawn(regs*)+0x71>
c001c299:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c29e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2a1:	52                   	push   edx
c001c2a2:	50                   	push   eax
c001c2a3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2a6:	56                   	push   esi
c001c2a7:	e8 3a 1b 00 00       	call   c001dde6 <Process::Process(char const*, Process*, char**)>
c001c2ac:	83 c4 10             	add    esp,0x10
c001c2af:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c2b6:	75 b0                	jne    c001c268 <sysCallSpawn(regs*)+0xe>
c001c2b8:	83 ec 0c             	sub    esp,0xc
c001c2bb:	56                   	push   esi
c001c2bc:	e8 07 20 00 00       	call   c001e2c8 <Process::createUserThread()>
c001c2c1:	8b 06                	mov    eax,DWORD PTR [esi]
c001c2c3:	83 c4 10             	add    esp,0x10
c001c2c6:	99                   	cdq    
c001c2c7:	59                   	pop    ecx
c001c2c8:	5b                   	pop    ebx
c001c2c9:	5e                   	pop    esi
c001c2ca:	c3                   	ret    
c001c2cb:	31 c0                	xor    eax,eax
c001c2cd:	eb d2                	jmp    c001c2a1 <sysCallSpawn(regs*)+0x47>

c001c2cf <sysCallGetEnv(regs*)>:
c001c2cf:	55                   	push   ebp
c001c2d0:	57                   	push   edi
c001c2d1:	56                   	push   esi
c001c2d2:	53                   	push   ebx
c001c2d3:	83 ec 28             	sub    esp,0x28
c001c2d6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c2da:	68 f5 c7 02 c0       	push   0xc002c7f5
c001c2df:	e8 61 6b ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001c2e4:	5f                   	pop    edi
c001c2e5:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c2e8:	5d                   	pop    ebp
c001c2e9:	53                   	push   ebx
c001c2ea:	68 22 cb 02 c0       	push   0xc002cb22
c001c2ef:	e8 51 6b ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001c2f4:	58                   	pop    eax
c001c2f5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c2f8:	5a                   	pop    edx
c001c2f9:	57                   	push   edi
c001c2fa:	68 fe c7 02 c0       	push   0xc002c7fe
c001c2ff:	e8 41 6b ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001c304:	59                   	pop    ecx
c001c305:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c30a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c30d:	e8 0f e4 ff ff       	call   c001a721 <Krnl::getProcessTotalEnvCount(Process*)>
c001c312:	5a                   	pop    edx
c001c313:	89 c5                	mov    ebp,eax
c001c315:	59                   	pop    ecx
c001c316:	50                   	push   eax
c001c317:	68 08 c8 02 c0       	push   0xc002c808
c001c31c:	e8 24 6b ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001c321:	83 c4 10             	add    esp,0x10
c001c324:	39 ef                	cmp    edi,ebp
c001c326:	7c 15                	jl     c001c33d <sysCallGetEnv(regs*)+0x6e>
c001c328:	85 db                	test   ebx,ebx
c001c32a:	75 0c                	jne    c001c338 <sysCallGetEnv(regs*)+0x69>
c001c32c:	83 c4 1c             	add    esp,0x1c
c001c32f:	31 c0                	xor    eax,eax
c001c331:	5b                   	pop    ebx
c001c332:	31 d2                	xor    edx,edx
c001c334:	5e                   	pop    esi
c001c335:	5f                   	pop    edi
c001c336:	5d                   	pop    ebp
c001c337:	c3                   	ret    
c001c338:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c33b:	eb ef                	jmp    c001c32c <sysCallGetEnv(regs*)+0x5d>
c001c33d:	83 ec 0c             	sub    esp,0xc
c001c340:	68 14 c8 02 c0       	push   0xc002c814
c001c345:	e8 fb 6a ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001c34a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c34e:	83 c4 0c             	add    esp,0xc
c001c351:	57                   	push   edi
c001c352:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c358:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c35b:	50                   	push   eax
c001c35c:	e8 e0 e3 ff ff       	call   c001a741 <Krnl::getProcessEnvPair(Process*, int)>
c001c361:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c365:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c369:	68 d3 cb 02 c0       	push   0xc002cbd3
c001c36e:	e8 d2 6a ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001c373:	83 c4 10             	add    esp,0x10
c001c376:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c379:	85 f6                	test   esi,esi
c001c37b:	75 47                	jne    c001c3c4 <sysCallGetEnv(regs*)+0xf5>
c001c37d:	83 ec 0c             	sub    esp,0xc
c001c380:	55                   	push   ebp
c001c381:	e8 32 44 fe ff       	call   c00007b8 <strlen>
c001c386:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c389:	89 c3                	mov    ebx,eax
c001c38b:	e8 28 44 fe ff       	call   c00007b8 <strlen>
c001c390:	5a                   	pop    edx
c001c391:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c395:	59                   	pop    ecx
c001c396:	50                   	push   eax
c001c397:	68 17 c8 02 c0       	push   0xc002c817
c001c39c:	e8 a4 6a ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001c3a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c3a4:	e8 0f 44 fe ff       	call   c00007b8 <strlen>
c001c3a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3ac:	89 c3                	mov    ebx,eax
c001c3ae:	e8 05 44 fe ff       	call   c00007b8 <strlen>
c001c3b3:	83 c4 10             	add    esp,0x10
c001c3b6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c3ba:	83 c4 1c             	add    esp,0x1c
c001c3bd:	31 d2                	xor    edx,edx
c001c3bf:	5b                   	pop    ebx
c001c3c0:	5e                   	pop    esi
c001c3c1:	5f                   	pop    edi
c001c3c2:	5d                   	pop    ebp
c001c3c3:	c3                   	ret    
c001c3c4:	83 ec 0c             	sub    esp,0xc
c001c3c7:	68 ed cb 02 c0       	push   0xc002cbed
c001c3cc:	e8 74 6a ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001c3d1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c3d4:	58                   	pop    eax
c001c3d5:	5a                   	pop    edx
c001c3d6:	55                   	push   ebp
c001c3d7:	53                   	push   ebx
c001c3d8:	e8 7b 44 fe ff       	call   c0000858 <strcpy>
c001c3dd:	59                   	pop    ecx
c001c3de:	5e                   	pop    esi
c001c3df:	68 21 c8 02 c0       	push   0xc002c821
c001c3e4:	53                   	push   ebx
c001c3e5:	e8 ae 45 fe ff       	call   c0000998 <strcat>
c001c3ea:	5d                   	pop    ebp
c001c3eb:	58                   	pop    eax
c001c3ec:	57                   	push   edi
c001c3ed:	53                   	push   ebx
c001c3ee:	e8 a5 45 fe ff       	call   c0000998 <strcat>
c001c3f3:	c7 04 24 07 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc07
c001c3fa:	e8 46 6a ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001c3ff:	83 c4 10             	add    esp,0x10
c001c402:	e9 25 ff ff ff       	jmp    c001c32c <sysCallGetEnv(regs*)+0x5d>

c001c407 <sysAppSettings(regs*)>:
c001c407:	53                   	push   ebx
c001c408:	83 ec 08             	sub    esp,0x8
c001c40b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c40f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c412:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c418:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c41d:	66 3d c0 09          	cmp    ax,0x9c0
c001c421:	75 2f                	jne    c001c452 <sysAppSettings(regs*)+0x4b>
c001c423:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c429:	83 e0 1f             	and    eax,0x1f
c001c42c:	3c 01                	cmp    al,0x1
c001c42e:	74 2e                	je     c001c45e <sysAppSettings(regs*)+0x57>
c001c430:	3c 07                	cmp    al,0x7
c001c432:	0f 84 bd 00 00 00    	je     c001c4f5 <sysAppSettings(regs*)+0xee>
c001c438:	84 c0                	test   al,al
c001c43a:	0f 84 dc 00 00 00    	je     c001c51c <sysAppSettings(regs*)+0x115>
c001c440:	3c 08                	cmp    al,0x8
c001c442:	74 6d                	je     c001c4b1 <sysAppSettings(regs*)+0xaa>
c001c444:	0f b6 c0             	movzx  eax,al
c001c447:	83 c4 08             	add    esp,0x8
c001c44a:	05 e8 03 00 00       	add    eax,0x3e8
c001c44f:	5b                   	pop    ebx
c001c450:	99                   	cdq    
c001c451:	c3                   	ret    
c001c452:	b8 01 00 00 00       	mov    eax,0x1
c001c457:	31 d2                	xor    edx,edx
c001c459:	83 c4 08             	add    esp,0x8
c001c45c:	5b                   	pop    ebx
c001c45d:	c3                   	ret    
c001c45e:	51                   	push   ecx
c001c45f:	68 00 01 00 00       	push   0x100
c001c464:	6a 00                	push   0x0
c001c466:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c46b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c46e:	83 c0 0c             	add    eax,0xc
c001c471:	50                   	push   eax
c001c472:	e8 25 43 fe ff       	call   c000079c <memset>
c001c477:	83 c4 0c             	add    esp,0xc
c001c47a:	68 ff 00 00 00       	push   0xff
c001c47f:	53                   	push   ebx
c001c480:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c485:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c488:	83 c0 0c             	add    eax,0xc
c001c48b:	50                   	push   eax
c001c48c:	e8 d7 42 fe ff       	call   c0000768 <memcpy>
c001c491:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c496:	5b                   	pop    ebx
c001c497:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c49a:	5a                   	pop    edx
c001c49b:	8d 50 0c             	lea    edx,[eax+0xc]
c001c49e:	52                   	push   edx
c001c49f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c4a5:	e8 62 46 ff ff       	call   c0010b0c <VgaText::setTitle(char*)>
c001c4aa:	83 c4 10             	add    esp,0x10
c001c4ad:	31 c0                	xor    eax,eax
c001c4af:	eb a6                	jmp    c001c457 <sysAppSettings(regs*)+0x50>
c001c4b1:	83 ec 08             	sub    esp,0x8
c001c4b4:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c4ba:	83 e0 0f             	and    eax,0xf
c001c4bd:	50                   	push   eax
c001c4be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c4cc:	e8 2d 46 ff ff       	call   c0010afe <VgaText::setTitleColour(VgaColour)>
c001c4d1:	58                   	pop    eax
c001c4d2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c4d8:	5a                   	pop    edx
c001c4d9:	c1 e8 04             	shr    eax,0x4
c001c4dc:	83 e0 0f             	and    eax,0xf
c001c4df:	50                   	push   eax
c001c4e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c4ee:	e8 fd 45 ff ff       	call   c0010af0 <VgaText::setTitleTextColour(VgaColour)>
c001c4f3:	eb b5                	jmp    c001c4aa <sysAppSettings(regs*)+0xa3>
c001c4f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4fd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c503:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c509:	c0 e8 06             	shr    al,0x6
c001c50c:	83 e0 01             	and    eax,0x1
c001c50f:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c515:	31 c0                	xor    eax,eax
c001c517:	e9 3b ff ff ff       	jmp    c001c457 <sysAppSettings(regs*)+0x50>
c001c51c:	b8 02 00 00 00       	mov    eax,0x2
c001c521:	e9 31 ff ff ff       	jmp    c001c457 <sysAppSettings(regs*)+0x50>

c001c526 <sysSetFatAttrib(regs*)>:
c001c526:	57                   	push   edi
c001c527:	56                   	push   esi
c001c528:	53                   	push   ebx
c001c529:	83 ec 1c             	sub    esp,0x1c
c001c52c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c530:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c533:	68 14 01 00 00       	push   0x114
c001c538:	e8 49 33 ff ff       	call   c000f886 <malloc>
c001c53d:	83 c4 0c             	add    esp,0xc
c001c540:	89 c3                	mov    ebx,eax
c001c542:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c547:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c54a:	57                   	push   edi
c001c54b:	53                   	push   ebx
c001c54c:	e8 53 6e ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c001c551:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c554:	83 c4 0c             	add    esp,0xc
c001c557:	0f b6 d4             	movzx  edx,ah
c001c55a:	0f b6 c0             	movzx  eax,al
c001c55d:	52                   	push   edx
c001c55e:	50                   	push   eax
c001c55f:	53                   	push   ebx
c001c560:	e8 b5 70 ff ff       	call   c001361a <File::chfatattr(unsigned char, unsigned char)>
c001c565:	83 c4 10             	add    esp,0x10
c001c568:	85 db                	test   ebx,ebx
c001c56a:	74 14                	je     c001c580 <sysSetFatAttrib(regs*)+0x5a>
c001c56c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c570:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c572:	83 ec 0c             	sub    esp,0xc
c001c575:	53                   	push   ebx
c001c576:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c579:	83 c4 10             	add    esp,0x10
c001c57c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c580:	85 c0                	test   eax,eax
c001c582:	0f 95 c0             	setne  al
c001c585:	31 d2                	xor    edx,edx
c001c587:	0f b6 c0             	movzx  eax,al
c001c58a:	f7 d8                	neg    eax
c001c58c:	83 d2 00             	adc    edx,0x0
c001c58f:	83 c4 10             	add    esp,0x10
c001c592:	f7 da                	neg    edx
c001c594:	5b                   	pop    ebx
c001c595:	5e                   	pop    esi
c001c596:	5f                   	pop    edi
c001c597:	c3                   	ret    

c001c598 <sysPipe(regs*)>:
c001c598:	57                   	push   edi
c001c599:	56                   	push   esi
c001c59a:	53                   	push   ebx
c001c59b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c59f:	83 ec 0c             	sub    esp,0xc
c001c5a2:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c5a5:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c5a8:	6a 20                	push   0x20
c001c5aa:	e8 d7 32 ff ff       	call   c000f886 <malloc>
c001c5af:	89 c3                	mov    ebx,eax
c001c5b1:	58                   	pop    eax
c001c5b2:	5a                   	pop    edx
c001c5b3:	68 00 50 00 00       	push   0x5000
c001c5b8:	53                   	push   ebx
c001c5b9:	e8 f6 3e ff ff       	call   c00104b4 <Pipe::Pipe(int)>
c001c5be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c5c1:	e8 28 50 ff ff       	call   c00115ee <UnixFile::getFileDescriptor()>
c001c5c6:	89 07                	mov    DWORD PTR [edi],eax
c001c5c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c5cb:	e8 1e 50 ff ff       	call   c00115ee <UnixFile::getFileDescriptor()>
c001c5d0:	83 c4 10             	add    esp,0x10
c001c5d3:	89 06                	mov    DWORD PTR [esi],eax
c001c5d5:	31 d2                	xor    edx,edx
c001c5d7:	5b                   	pop    ebx
c001c5d8:	31 c0                	xor    eax,eax
c001c5da:	5e                   	pop    esi
c001c5db:	5f                   	pop    edi
c001c5dc:	c3                   	ret    

c001c5dd <sysGetUnixTime(regs*)>:
c001c5dd:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c001c5e2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c5e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c5ec:	e9 a5 77 ff ff       	jmp    c0013d96 <Clock::timeInSecondsLocal()>

c001c5f1 <string_ends_with(char const*, char const*)>:
c001c5f1:	57                   	push   edi
c001c5f2:	56                   	push   esi
c001c5f3:	53                   	push   ebx
c001c5f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c5f8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c5fc:	83 ec 0c             	sub    esp,0xc
c001c5ff:	53                   	push   ebx
c001c600:	e8 b3 41 fe ff       	call   c00007b8 <strlen>
c001c605:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c608:	89 c6                	mov    esi,eax
c001c60a:	e8 a9 41 fe ff       	call   c00007b8 <strlen>
c001c60f:	83 c4 10             	add    esp,0x10
c001c612:	39 c6                	cmp    esi,eax
c001c614:	7d 06                	jge    c001c61c <string_ends_with(char const*, char const*)+0x2b>
c001c616:	5b                   	pop    ebx
c001c617:	31 c0                	xor    eax,eax
c001c619:	5e                   	pop    esi
c001c61a:	5f                   	pop    edi
c001c61b:	c3                   	ret    
c001c61c:	83 ec 08             	sub    esp,0x8
c001c61f:	29 c6                	sub    esi,eax
c001c621:	57                   	push   edi
c001c622:	01 f3                	add    ebx,esi
c001c624:	53                   	push   ebx
c001c625:	e8 ba 42 fe ff       	call   c00008e4 <strcmp>
c001c62a:	83 c4 10             	add    esp,0x10
c001c62d:	85 c0                	test   eax,eax
c001c62f:	5b                   	pop    ebx
c001c630:	0f 94 c0             	sete   al
c001c633:	5e                   	pop    esi
c001c634:	0f b6 c0             	movzx  eax,al
c001c637:	5f                   	pop    edi
c001c638:	c3                   	ret    

c001c639 <sysCallOpen(regs*)>:
c001c639:	56                   	push   esi
c001c63a:	53                   	push   ebx
c001c63b:	81 ec 04 01 00 00    	sub    esp,0x104
c001c641:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c648:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c64b:	85 c9                	test   ecx,ecx
c001c64d:	0f 84 b3 00 00 00    	je     c001c706 <sysCallOpen(regs*)+0xcd>
c001c653:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c656:	85 c0                	test   eax,eax
c001c658:	0f 84 a8 00 00 00    	je     c001c706 <sysCallOpen(regs*)+0xcd>
c001c65e:	52                   	push   edx
c001c65f:	68 23 c8 02 c0       	push   0xc002c823
c001c664:	50                   	push   eax
c001c665:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c669:	56                   	push   esi
c001c66a:	e8 8b 6b ff ff       	call   c00131fa <Fs::standardiseFiles(char*, char const*, char const*)>
c001c66f:	89 34 24             	mov    DWORD PTR [esp],esi
c001c672:	e8 41 41 fe ff       	call   c00007b8 <strlen>
c001c677:	83 c4 10             	add    esp,0x10
c001c67a:	48                   	dec    eax
c001c67b:	74 1d                	je     c001c69a <sysCallOpen(regs*)+0x61>
c001c67d:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c680:	eb 0f                	jmp    c001c691 <sysCallOpen(regs*)+0x58>
c001c682:	80 fa 3a             	cmp    dl,0x3a
c001c685:	74 0f                	je     c001c696 <sysCallOpen(regs*)+0x5d>
c001c687:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c68b:	48                   	dec    eax
c001c68c:	74 0c                	je     c001c69a <sysCallOpen(regs*)+0x61>
c001c68e:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c691:	80 fa 2e             	cmp    dl,0x2e
c001c694:	75 ec                	jne    c001c682 <sysCallOpen(regs*)+0x49>
c001c696:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c69a:	83 ec 08             	sub    esp,0x8
c001c69d:	68 27 c8 02 c0       	push   0xc002c827
c001c6a2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c6a5:	e8 47 ff ff ff       	call   c001c5f1 <string_ends_with(char const*, char const*)>
c001c6aa:	83 c4 10             	add    esp,0x10
c001c6ad:	85 c0                	test   eax,eax
c001c6af:	75 17                	jne    c001c6c8 <sysCallOpen(regs*)+0x8f>
c001c6b1:	83 ec 08             	sub    esp,0x8
c001c6b4:	68 48 c8 02 c0       	push   0xc002c848
c001c6b9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c6bc:	e8 30 ff ff ff       	call   c001c5f1 <string_ends_with(char const*, char const*)>
c001c6c1:	83 c4 10             	add    esp,0x10
c001c6c4:	85 c0                	test   eax,eax
c001c6c6:	74 51                	je     c001c719 <sysCallOpen(regs*)+0xe0>
c001c6c8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c6cb:	83 ec 08             	sub    esp,0x8
c001c6ce:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c6d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6db:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c6de:	ff 30                	push   DWORD PTR [eax]
c001c6e0:	68 2c c8 02 c0       	push   0xc002c82c
c001c6e5:	e8 5b 67 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001c6ea:	c7 04 24 3b c8 02 c0 	mov    DWORD PTR [esp],0xc002c83b
c001c6f1:	e8 4f 67 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001c6f6:	83 c4 10             	add    esp,0x10
c001c6f9:	81 c4 04 01 00 00    	add    esp,0x104
c001c6ff:	31 c0                	xor    eax,eax
c001c701:	31 d2                	xor    edx,edx
c001c703:	5b                   	pop    ebx
c001c704:	5e                   	pop    esi
c001c705:	c3                   	ret    
c001c706:	81 c4 04 01 00 00    	add    esp,0x104
c001c70c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c711:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c716:	5b                   	pop    ebx
c001c717:	5e                   	pop    esi
c001c718:	c3                   	ret    
c001c719:	83 ec 08             	sub    esp,0x8
c001c71c:	68 28 c8 02 c0       	push   0xc002c828
c001c721:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c724:	e8 bb 41 fe ff       	call   c00008e4 <strcmp>
c001c729:	83 c4 10             	add    esp,0x10
c001c72c:	85 c0                	test   eax,eax
c001c72e:	74 98                	je     c001c6c8 <sysCallOpen(regs*)+0x8f>
c001c730:	83 ec 08             	sub    esp,0x8
c001c733:	68 27 c8 02 c0       	push   0xc002c827
c001c738:	56                   	push   esi
c001c739:	e8 b3 fe ff ff       	call   c001c5f1 <string_ends_with(char const*, char const*)>
c001c73e:	83 c4 10             	add    esp,0x10
c001c741:	85 c0                	test   eax,eax
c001c743:	75 83                	jne    c001c6c8 <sysCallOpen(regs*)+0x8f>
c001c745:	83 ec 08             	sub    esp,0x8
c001c748:	68 4d c8 02 c0       	push   0xc002c84d
c001c74d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c750:	e8 9c fe ff ff       	call   c001c5f1 <string_ends_with(char const*, char const*)>
c001c755:	83 c4 10             	add    esp,0x10
c001c758:	85 c0                	test   eax,eax
c001c75a:	0f 85 d9 00 00 00    	jne    c001c839 <sysCallOpen(regs*)+0x200>
c001c760:	83 ec 08             	sub    esp,0x8
c001c763:	68 52 c8 02 c0       	push   0xc002c852
c001c768:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c76b:	e8 81 fe ff ff       	call   c001c5f1 <string_ends_with(char const*, char const*)>
c001c770:	83 c4 10             	add    esp,0x10
c001c773:	85 c0                	test   eax,eax
c001c775:	0f 85 be 00 00 00    	jne    c001c839 <sysCallOpen(regs*)+0x200>
c001c77b:	83 ec 08             	sub    esp,0x8
c001c77e:	68 4e c8 02 c0       	push   0xc002c84e
c001c783:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c786:	e8 59 41 fe ff       	call   c00008e4 <strcmp>
c001c78b:	83 c4 10             	add    esp,0x10
c001c78e:	85 c0                	test   eax,eax
c001c790:	0f 84 a3 00 00 00    	je     c001c839 <sysCallOpen(regs*)+0x200>
c001c796:	83 ec 08             	sub    esp,0x8
c001c799:	68 4d c8 02 c0       	push   0xc002c84d
c001c79e:	56                   	push   esi
c001c79f:	e8 4d fe ff ff       	call   c001c5f1 <string_ends_with(char const*, char const*)>
c001c7a4:	83 c4 10             	add    esp,0x10
c001c7a7:	85 c0                	test   eax,eax
c001c7a9:	0f 85 8a 00 00 00    	jne    c001c839 <sysCallOpen(regs*)+0x200>
c001c7af:	83 ec 0c             	sub    esp,0xc
c001c7b2:	68 14 01 00 00       	push   0x114
c001c7b7:	e8 ca 30 ff ff       	call   c000f886 <malloc>
c001c7bc:	83 c4 0c             	add    esp,0xc
c001c7bf:	89 c6                	mov    esi,eax
c001c7c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7c6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c7c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7cc:	56                   	push   esi
c001c7cd:	e8 d2 6b ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c001c7d2:	83 c4 10             	add    esp,0x10
c001c7d5:	85 f6                	test   esi,esi
c001c7d7:	0f 84 29 ff ff ff    	je     c001c706 <sysCallOpen(regs*)+0xcd>
c001c7dd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c7e0:	0f b6 c2             	movzx  eax,dl
c001c7e3:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c7e6:	89 d0                	mov    eax,edx
c001c7e8:	83 e0 01             	and    eax,0x1
c001c7eb:	f6 c2 02             	test   dl,0x2
c001c7ee:	74 03                	je     c001c7f3 <sysCallOpen(regs*)+0x1ba>
c001c7f0:	83 c8 02             	or     eax,0x2
c001c7f3:	f6 c2 04             	test   dl,0x4
c001c7f6:	74 03                	je     c001c7fb <sysCallOpen(regs*)+0x1c2>
c001c7f8:	83 c8 04             	or     eax,0x4
c001c7fb:	f6 c2 08             	test   dl,0x8
c001c7fe:	74 03                	je     c001c803 <sysCallOpen(regs*)+0x1ca>
c001c800:	83 c8 0a             	or     eax,0xa
c001c803:	83 e2 10             	and    edx,0x10
c001c806:	74 03                	je     c001c80b <sysCallOpen(regs*)+0x1d2>
c001c808:	83 c8 12             	or     eax,0x12
c001c80b:	83 ec 08             	sub    esp,0x8
c001c80e:	50                   	push   eax
c001c80f:	56                   	push   esi
c001c810:	e8 f3 6b ff ff       	call   c0013408 <File::open(FileOpenMode)>
c001c815:	83 c4 10             	add    esp,0x10
c001c818:	85 c0                	test   eax,eax
c001c81a:	0f 85 e6 fe ff ff    	jne    c001c706 <sysCallOpen(regs*)+0xcd>
c001c820:	83 ec 0c             	sub    esp,0xc
c001c823:	56                   	push   esi
c001c824:	e8 c5 4d ff ff       	call   c00115ee <UnixFile::getFileDescriptor()>
c001c829:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c82c:	89 02                	mov    DWORD PTR [edx],eax
c001c82e:	c1 f8 1f             	sar    eax,0x1f
c001c831:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c834:	e9 bd fe ff ff       	jmp    c001c6f6 <sysCallOpen(regs*)+0xbd>
c001c839:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c83c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c842:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c849:	e9 ab fe ff ff       	jmp    c001c6f9 <sysCallOpen(regs*)+0xc0>

c001c84e <Sys::loadSyscalls()>:
c001c84e:	c7 05 40 19 03 c0 33 b9 01 c0 	mov    DWORD PTR ds:0xc0031940,0xc001b933
c001c858:	c7 05 44 19 03 c0 9a b4 01 c0 	mov    DWORD PTR ds:0xc0031944,0xc001b49a
c001c862:	c7 05 48 19 03 c0 86 b6 01 c0 	mov    DWORD PTR ds:0xc0031948,0xc001b686
c001c86c:	c7 05 4c 19 03 c0 69 b8 01 c0 	mov    DWORD PTR ds:0xc003194c,0xc001b869
c001c876:	c7 05 50 19 03 c0 1e b6 01 c0 	mov    DWORD PTR ds:0xc0031950,0xc001b61e
c001c880:	c7 05 54 19 03 c0 d1 b4 01 c0 	mov    DWORD PTR ds:0xc0031954,0xc001b4d1
c001c88a:	c7 05 58 19 03 c0 b2 b4 01 c0 	mov    DWORD PTR ds:0xc0031958,0xc001b4b2
c001c894:	c7 05 5c 19 03 c0 db b6 01 c0 	mov    DWORD PTR ds:0xc003195c,0xc001b6db
c001c89e:	c7 05 64 19 03 c0 6e be 01 c0 	mov    DWORD PTR ds:0xc0031964,0xc001be6e
c001c8a8:	c7 05 60 19 03 c0 39 c6 01 c0 	mov    DWORD PTR ds:0xc0031960,0xc001c639
c001c8b2:	c7 05 68 19 03 c0 f6 be 01 c0 	mov    DWORD PTR ds:0xc0031968,0xc001bef6
c001c8bc:	c7 05 6c 19 03 c0 5d bb 01 c0 	mov    DWORD PTR ds:0xc003196c,0xc001bb5d
c001c8c6:	c7 05 70 19 03 c0 79 b9 01 c0 	mov    DWORD PTR ds:0xc0031970,0xc001b979
c001c8d0:	c7 05 74 19 03 c0 7e b9 01 c0 	mov    DWORD PTR ds:0xc0031974,0xc001b97e
c001c8da:	c7 05 78 19 03 c0 d1 bf 01 c0 	mov    DWORD PTR ds:0xc0031978,0xc001bfd1
c001c8e4:	c7 05 7c 19 03 c0 6b bf 01 c0 	mov    DWORD PTR ds:0xc003197c,0xc001bf6b
c001c8ee:	c7 05 80 19 03 c0 45 bc 01 c0 	mov    DWORD PTR ds:0xc0031980,0xc001bc45
c001c8f8:	c7 05 84 19 03 c0 ae bc 01 c0 	mov    DWORD PTR ds:0xc0031984,0xc001bcae
c001c902:	c7 05 88 19 03 c0 2b bd 01 c0 	mov    DWORD PTR ds:0xc0031988,0xc001bd2b
c001c90c:	c7 05 8c 19 03 c0 83 b9 01 c0 	mov    DWORD PTR ds:0xc003198c,0xc001b983
c001c916:	c7 05 90 19 03 c0 41 c0 01 c0 	mov    DWORD PTR ds:0xc0031990,0xc001c041
c001c920:	c7 05 94 19 03 c0 5b c0 01 c0 	mov    DWORD PTR ds:0xc0031994,0xc001c05b
c001c92a:	c7 05 98 19 03 c0 5b c0 01 c0 	mov    DWORD PTR ds:0xc0031998,0xc001c05b
c001c934:	c7 05 9c 19 03 c0 9c c0 01 c0 	mov    DWORD PTR ds:0xc003199c,0xc001c09c
c001c93e:	c7 05 a0 19 03 c0 00 c1 01 c0 	mov    DWORD PTR ds:0xc00319a0,0xc001c100
c001c948:	c7 05 a4 19 03 c0 2f bb 01 c0 	mov    DWORD PTR ds:0xc00319a4,0xc001bb2f
c001c952:	c7 05 a8 19 03 c0 64 c1 01 c0 	mov    DWORD PTR ds:0xc00319a8,0xc001c164
c001c95c:	c7 05 ac 19 03 c0 ec ba 01 c0 	mov    DWORD PTR ds:0xc00319ac,0xc001baec
c001c966:	c7 05 b0 19 03 c0 b0 c1 01 c0 	mov    DWORD PTR ds:0xc00319b0,0xc001c1b0
c001c970:	c7 05 b4 19 03 c0 eb bb 01 c0 	mov    DWORD PTR ds:0xc00319b4,0xc001bbeb
c001c97a:	c7 05 b8 19 03 c0 33 c2 01 c0 	mov    DWORD PTR ds:0xc00319b8,0xc001c233
c001c984:	c7 05 bc 19 03 c0 ae bd 01 c0 	mov    DWORD PTR ds:0xc00319bc,0xc001bdae
c001c98e:	c7 05 c0 19 03 c0 5a c2 01 c0 	mov    DWORD PTR ds:0xc00319c0,0xc001c25a
c001c998:	c7 05 c4 19 03 c0 cf c2 01 c0 	mov    DWORD PTR ds:0xc00319c4,0xc001c2cf
c001c9a2:	c7 05 c8 19 03 c0 07 c4 01 c0 	mov    DWORD PTR ds:0xc00319c8,0xc001c407
c001c9ac:	c7 05 cc 19 03 c0 8d b9 01 c0 	mov    DWORD PTR ds:0xc00319cc,0xc001b98d
c001c9b6:	c7 05 d0 19 03 c0 f7 b9 01 c0 	mov    DWORD PTR ds:0xc00319d0,0xc001b9f7
c001c9c0:	c7 05 d4 19 03 c0 3d ba 01 c0 	mov    DWORD PTR ds:0xc00319d4,0xc001ba3d
c001c9ca:	c7 05 d8 19 03 c0 26 c5 01 c0 	mov    DWORD PTR ds:0xc00319d8,0xc001c526
c001c9d4:	c7 05 dc 19 03 c0 76 c0 01 c0 	mov    DWORD PTR ds:0xc00319dc,0xc001c076
c001c9de:	c7 05 e0 19 03 c0 8e ba 01 c0 	mov    DWORD PTR ds:0xc00319e0,0xc001ba8e
c001c9e8:	c7 05 e4 19 03 c0 98 c5 01 c0 	mov    DWORD PTR ds:0xc00319e4,0xc001c598
c001c9f2:	c7 05 e8 19 03 c0 dd c5 01 c0 	mov    DWORD PTR ds:0xc00319e8,0xc001c5dd
c001c9fc:	c7 05 ec 19 03 c0 76 b5 01 c0 	mov    DWORD PTR ds:0xc00319ec,0xc001b576
c001ca06:	c7 05 f0 19 03 c0 f7 b6 01 c0 	mov    DWORD PTR ds:0xc00319f0,0xc001b6f7
c001ca10:	c7 05 f4 19 03 c0 1f b8 01 c0 	mov    DWORD PTR ds:0xc00319f4,0xc001b81f
c001ca1a:	c7 05 f8 19 03 c0 64 b4 01 c0 	mov    DWORD PTR ds:0xc00319f8,0xc001b464
c001ca24:	c7 05 fc 19 03 c0 d1 b8 01 c0 	mov    DWORD PTR ds:0xc00319fc,0xc001b8d1
c001ca2e:	c7 05 00 1a 03 c0 dd b4 01 c0 	mov    DWORD PTR ds:0xc0031a00,0xc001b4dd
c001ca38:	c7 05 04 1a 03 c0 f4 b4 01 c0 	mov    DWORD PTR ds:0xc0031a04,0xc001b4f4
c001ca42:	c3                   	ret    

c001ca43 <Sys::systemCall(regs*, void*)>:
c001ca43:	53                   	push   ebx
c001ca44:	83 ec 08             	sub    esp,0x8
c001ca47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca4b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ca4e:	83 f8 7f             	cmp    eax,0x7f
c001ca51:	77 16                	ja     c001ca69 <Sys::systemCall(regs*, void*)+0x26>
c001ca53:	8b 14 85 40 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce6c0]
c001ca5a:	85 d2                	test   edx,edx
c001ca5c:	74 0b                	je     c001ca69 <Sys::systemCall(regs*, void*)+0x26>
c001ca5e:	83 ec 0c             	sub    esp,0xc
c001ca61:	53                   	push   ebx
c001ca62:	ff d2                	call   edx
c001ca64:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ca67:	eb 0d                	jmp    c001ca76 <Sys::systemCall(regs*, void*)+0x33>
c001ca69:	52                   	push   edx
c001ca6a:	52                   	push   edx
c001ca6b:	50                   	push   eax
c001ca6c:	68 57 c8 02 c0       	push   0xc002c857
c001ca71:	e8 cf 63 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001ca76:	83 c4 10             	add    esp,0x10
c001ca79:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ca7e:	31 d2                	xor    edx,edx
c001ca80:	83 c4 08             	add    esp,0x8
c001ca83:	5b                   	pop    ebx
c001ca84:	c3                   	ret    

c001ca85 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001ca85:	55                   	push   ebp
c001ca86:	57                   	push   edi
c001ca87:	56                   	push   esi
c001ca88:	53                   	push   ebx
c001ca89:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001ca8f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001ca96:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001ca9d:	85 c0                	test   eax,eax
c001ca9f:	0f 95 c1             	setne  cl
c001caa2:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001caaa:	0f 94 c2             	sete   dl
c001caad:	84 d1                	test   cl,dl
c001caaf:	74 23                	je     c001cad4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cab1:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cab7:	74 1b                	je     c001cad4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cab9:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cabf:	89 da                	mov    edx,ebx
c001cac1:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cac7:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cacd:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cad4:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001cadb:	05 ff 0f 00 00       	add    eax,0xfff
c001cae0:	83 ec 0c             	sub    esp,0xc
c001cae3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cae7:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001caed:	c1 e8 0c             	shr    eax,0xc
c001caf0:	89 ef                	mov    edi,ebp
c001caf2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001caf6:	c1 ef 0c             	shr    edi,0xc
c001caf9:	6a 01                	push   0x1
c001cafb:	e8 39 4f ff ff       	call   c0011a39 <Virt::allocateKernelVirtualPages(int)>
c001cb00:	89 c6                	mov    esi,eax
c001cb02:	58                   	pop    eax
c001cb03:	5a                   	pop    edx
c001cb04:	57                   	push   edi
c001cb05:	68 db c8 02 c0       	push   0xc002c8db
c001cb0a:	e8 36 63 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001cb0f:	59                   	pop    ecx
c001cb10:	58                   	pop    eax
c001cb11:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cb15:	68 ed c8 02 c0       	push   0xc002c8ed
c001cb1a:	e8 26 63 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001cb1f:	83 c4 10             	add    esp,0x10
c001cb22:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001cb28:	0f 86 31 01 00 00    	jbe    c001cc5f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001cb2e:	c1 e7 0c             	shl    edi,0xc
c001cb31:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001cb34:	89 df                	mov    edi,ebx
c001cb36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb3a:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001cb41:	01 dd                	add    ebp,ebx
c001cb43:	29 fd                	sub    ebp,edi
c001cb45:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001cb49:	0f 84 0e 01 00 00    	je     c001cc5d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d8>
c001cb4f:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001cb55:	76 05                	jbe    c001cb5c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001cb57:	bd 00 10 00 00       	mov    ebp,0x1000
c001cb5c:	83 ec 0c             	sub    esp,0xc
c001cb5f:	31 d2                	xor    edx,edx
c001cb61:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cb68:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cb6a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cb6e:	50                   	push   eax
c001cb6f:	8d 44 24 30          	lea    eax,[esp+0x30]
c001cb73:	50                   	push   eax
c001cb74:	52                   	push   edx
c001cb75:	55                   	push   ebp
c001cb76:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001cb7d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb80:	83 c4 20             	add    esp,0x20
c001cb83:	85 c0                	test   eax,eax
c001cb85:	74 0a                	je     c001cb91 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001cb87:	53                   	push   ebx
c001cb88:	53                   	push   ebx
c001cb89:	50                   	push   eax
c001cb8a:	68 ff c8 02 c0       	push   0xc002c8ff
c001cb8f:	eb 0f                	jmp    c001cba0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001cb91:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001cb95:	74 20                	je     c001cbb7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001cb97:	51                   	push   ecx
c001cb98:	51                   	push   ecx
c001cb99:	6a 00                	push   0x0
c001cb9b:	68 2a c9 02 c0       	push   0xc002c92a
c001cba0:	e8 a0 62 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001cba5:	89 34 24             	mov    DWORD PTR [esp],esi
c001cba8:	e8 52 53 ff ff       	call   c0011eff <Virt::freeKernelVirtualPages(unsigned long)>
c001cbad:	83 c4 10             	add    esp,0x10
c001cbb0:	31 c0                	xor    eax,eax
c001cbb2:	e9 6d 01 00 00       	jmp    c001cd24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001cbb7:	fa                   	cli    
c001cbb8:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001cbbe:	e8 2f 33 ff ff       	call   c000fef2 <Phys::allocatePage()>
c001cbc3:	6a 07                	push   0x7
c001cbc5:	89 c5                	mov    ebp,eax
c001cbc7:	56                   	push   esi
c001cbc8:	50                   	push   eax
c001cbc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cbce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cbd1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cbd7:	e8 9a 56 ff ff       	call   c0012276 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cbdc:	83 c4 0c             	add    esp,0xc
c001cbdf:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cbe6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cbec:	6a 00                	push   0x0
c001cbee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cbf3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cbf6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cbfc:	e8 cf 54 ff ff       	call   c00120d0 <VAS::mapOtherVASIn(bool, VAS*)>
c001cc01:	58                   	pop    eax
c001cc02:	5a                   	pop    edx
c001cc03:	68 07 0c 00 00       	push   0xc07
c001cc08:	57                   	push   edi
c001cc09:	55                   	push   ebp
c001cc0a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cc11:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc17:	6a 00                	push   0x0
c001cc19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc1e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc21:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc27:	e8 04 5a ff ff       	call   c0012630 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cc2c:	83 c4 1c             	add    esp,0x1c
c001cc2f:	68 00 10 00 00       	push   0x1000
c001cc34:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cc38:	50                   	push   eax
c001cc39:	56                   	push   esi
c001cc3a:	e8 29 3b fe ff       	call   c0000768 <memcpy>
c001cc3f:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001cc44:	83 c4 10             	add    esp,0x10
c001cc47:	48                   	dec    eax
c001cc48:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001cc4d:	85 c0                	test   eax,eax
c001cc4f:	75 01                	jne    c001cc52 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001cc51:	fb                   	sti    
c001cc52:	81 c7 00 10 00 00    	add    edi,0x1000
c001cc58:	e9 dd fe ff ff       	jmp    c001cb3a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001cc5d:	89 fb                	mov    ebx,edi
c001cc5f:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001cc67:	0f 86 a9 00 00 00    	jbe    c001cd16 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cc6d:	fa                   	cli    
c001cc6e:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001cc74:	51                   	push   ecx
c001cc75:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cc7c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc82:	6a 00                	push   0x0
c001cc84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc89:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc8c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc92:	e8 39 54 ff ff       	call   c00120d0 <VAS::mapOtherVASIn(bool, VAS*)>
c001cc97:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001cc9b:	c1 e7 0c             	shl    edi,0xc
c001cc9e:	01 df                	add    edi,ebx
c001cca0:	83 c4 10             	add    esp,0x10
c001cca3:	39 df                	cmp    edi,ebx
c001cca5:	74 61                	je     c001cd08 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001cca7:	e8 46 32 ff ff       	call   c000fef2 <Phys::allocatePage()>
c001ccac:	6a 07                	push   0x7
c001ccae:	89 c5                	mov    ebp,eax
c001ccb0:	56                   	push   esi
c001ccb1:	50                   	push   eax
c001ccb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ccb7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ccba:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ccc0:	e8 b1 55 ff ff       	call   c0012276 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ccc5:	58                   	pop    eax
c001ccc6:	5a                   	pop    edx
c001ccc7:	68 07 0c 00 00       	push   0xc07
c001cccc:	53                   	push   ebx
c001cccd:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ccd3:	55                   	push   ebp
c001ccd4:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ccdb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cce1:	6a 00                	push   0x0
c001cce3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cce8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cceb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ccf1:	e8 3a 59 ff ff       	call   c0012630 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ccf6:	83 c4 1c             	add    esp,0x1c
c001ccf9:	68 00 10 00 00       	push   0x1000
c001ccfe:	6a 00                	push   0x0
c001cd00:	56                   	push   esi
c001cd01:	e8 96 3a fe ff       	call   c000079c <memset>
c001cd06:	eb 98                	jmp    c001cca0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001cd08:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001cd0d:	48                   	dec    eax
c001cd0e:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001cd13:	75 01                	jne    c001cd16 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cd15:	fb                   	sti    
c001cd16:	83 ec 0c             	sub    esp,0xc
c001cd19:	56                   	push   esi
c001cd1a:	e8 e0 51 ff ff       	call   c0011eff <Virt::freeKernelVirtualPages(unsigned long)>
c001cd1f:	83 c4 10             	add    esp,0x10
c001cd22:	b0 01                	mov    al,0x1
c001cd24:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cd2a:	5b                   	pop    ebx
c001cd2b:	5e                   	pop    esi
c001cd2c:	5f                   	pop    edi
c001cd2d:	5d                   	pop    ebp
c001cd2e:	c3                   	ret    

c001cd2f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cd2f:	55                   	push   ebp
c001cd30:	57                   	push   edi
c001cd31:	56                   	push   esi
c001cd32:	53                   	push   ebx
c001cd33:	83 ec 48             	sub    esp,0x48
c001cd36:	68 14 01 00 00       	push   0x114
c001cd3b:	e8 46 2b ff ff       	call   c000f886 <malloc>
c001cd40:	83 c4 0c             	add    esp,0xc
c001cd43:	89 c6                	mov    esi,eax
c001cd45:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cd49:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cd4d:	50                   	push   eax
c001cd4e:	e8 51 66 ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c001cd53:	58                   	pop    eax
c001cd54:	5a                   	pop    edx
c001cd55:	6a 01                	push   0x1
c001cd57:	56                   	push   esi
c001cd58:	e8 ab 66 ff ff       	call   c0013408 <File::open(FileOpenMode)>
c001cd5d:	83 c4 10             	add    esp,0x10
c001cd60:	85 c0                	test   eax,eax
c001cd62:	0f 85 47 01 00 00    	jne    c001ceaf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cd68:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cd70:	83 ec 0c             	sub    esp,0xc
c001cd73:	6a 34                	push   0x34
c001cd75:	e8 0c 2b ff ff       	call   c000f886 <malloc>
c001cd7a:	89 c3                	mov    ebx,eax
c001cd7c:	58                   	pop    eax
c001cd7d:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd7f:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cd83:	57                   	push   edi
c001cd84:	53                   	push   ebx
c001cd85:	6a 00                	push   0x0
c001cd87:	6a 34                	push   0x34
c001cd89:	56                   	push   esi
c001cd8a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd8d:	83 c4 20             	add    esp,0x20
c001cd90:	85 c0                	test   eax,eax
c001cd92:	0f 85 17 01 00 00    	jne    c001ceaf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cd98:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cd9e:	0f 85 0b 01 00 00    	jne    c001ceaf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cda4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cda7:	85 c0                	test   eax,eax
c001cda9:	0f 84 00 01 00 00    	je     c001ceaf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cdaf:	31 d2                	xor    edx,edx
c001cdb1:	55                   	push   ebp
c001cdb2:	52                   	push   edx
c001cdb3:	50                   	push   eax
c001cdb4:	56                   	push   esi
c001cdb5:	e8 0c 67 ff ff       	call   c00134c6 <File::seek(unsigned long long)>
c001cdba:	83 c4 10             	add    esp,0x10
c001cdbd:	85 c0                	test   eax,eax
c001cdbf:	0f 85 ea 00 00 00    	jne    c001ceaf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cdc5:	83 ec 0c             	sub    esp,0xc
c001cdc8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cdcb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cdcf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cdd3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cdd7:	0f af c2             	imul   eax,edx
c001cdda:	50                   	push   eax
c001cddb:	e8 a6 2a ff ff       	call   c000f886 <malloc>
c001cde0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cde2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cde6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cde9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cded:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cdf1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cdf5:	0f af c2             	imul   eax,edx
c001cdf8:	99                   	cdq    
c001cdf9:	52                   	push   edx
c001cdfa:	50                   	push   eax
c001cdfb:	56                   	push   esi
c001cdfc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdff:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ce02:	83 c4 20             	add    esp,0x20
c001ce05:	85 c0                	test   eax,eax
c001ce07:	0f 84 a2 00 00 00    	je     c001ceaf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce0d:	31 d2                	xor    edx,edx
c001ce0f:	51                   	push   ecx
c001ce10:	52                   	push   edx
c001ce11:	50                   	push   eax
c001ce12:	56                   	push   esi
c001ce13:	e8 ae 66 ff ff       	call   c00134c6 <File::seek(unsigned long long)>
c001ce18:	83 c4 10             	add    esp,0x10
c001ce1b:	85 c0                	test   eax,eax
c001ce1d:	0f 85 8c 00 00 00    	jne    c001ceaf <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce23:	83 ec 0c             	sub    esp,0xc
c001ce26:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ce2a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ce2e:	31 ed                	xor    ebp,ebp
c001ce30:	0f af c2             	imul   eax,edx
c001ce33:	50                   	push   eax
c001ce34:	e8 4d 2a ff ff       	call   c000f886 <malloc>
c001ce39:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ce3b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce3f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce46:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ce4a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ce4e:	0f af c2             	imul   eax,edx
c001ce51:	99                   	cdq    
c001ce52:	52                   	push   edx
c001ce53:	50                   	push   eax
c001ce54:	56                   	push   esi
c001ce55:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce58:	83 c4 20             	add    esp,0x20
c001ce5b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ce63:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001ce67:	0f 86 80 00 00 00    	jbe    c001ceed <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001ce6d:	0f b7 fd             	movzx  edi,bp
c001ce70:	c1 e7 05             	shl    edi,0x5
c001ce73:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001ce77:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001ce7a:	75 6b                	jne    c001cee7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ce7c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001ce7f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce83:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ce86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce8a:	52                   	push   edx
c001ce8b:	31 d2                	xor    edx,edx
c001ce8d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001ce90:	52                   	push   edx
c001ce91:	50                   	push   eax
c001ce92:	56                   	push   esi
c001ce93:	e8 2e 66 ff ff       	call   c00134c6 <File::seek(unsigned long long)>
c001ce98:	83 c4 10             	add    esp,0x10
c001ce9b:	85 c0                	test   eax,eax
c001ce9d:	74 17                	je     c001ceb6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ce9f:	83 ec 0c             	sub    esp,0xc
c001cea2:	68 56 c9 02 c0       	push   0xc002c956
c001cea7:	e8 99 5f ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001ceac:	83 c4 10             	add    esp,0x10
c001ceaf:	31 c0                	xor    eax,eax
c001ceb1:	e9 87 00 00 00       	jmp    c001cf3d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ceb6:	83 ec 0c             	sub    esp,0xc
c001ceb9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cebc:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cebf:	50                   	push   eax
c001cec0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cec4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cec8:	56                   	push   esi
c001cec9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cecd:	e8 b3 fb ff ff       	call   c001ca85 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ced2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ced6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ceda:	83 c4 20             	add    esp,0x20
c001cedd:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cee1:	73 04                	jae    c001cee7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cee3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cee7:	45                   	inc    ebp
c001cee8:	e9 76 ff ff ff       	jmp    c001ce63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ceed:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cef1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cef5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cef9:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ceff:	83 ec 0c             	sub    esp,0xc
c001cf02:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cf08:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cf0d:	05 00 10 00 00       	add    eax,0x1000
c001cf12:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf19:	e8 78 29 ff ff       	call   c000f896 <free>
c001cf1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf21:	e8 70 29 ff ff       	call   c000f896 <free>
c001cf26:	58                   	pop    eax
c001cf27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf2b:	e8 66 29 ff ff       	call   c000f896 <free>
c001cf30:	89 34 24             	mov    DWORD PTR [esp],esi
c001cf33:	e8 2e 65 ff ff       	call   c0013466 <File::close()>
c001cf38:	83 c4 10             	add    esp,0x10
c001cf3b:	b0 01                	mov    al,0x1
c001cf3d:	83 c4 3c             	add    esp,0x3c
c001cf40:	5b                   	pop    ebx
c001cf41:	5e                   	pop    esi
c001cf42:	5f                   	pop    edi
c001cf43:	5d                   	pop    ebp
c001cf44:	c3                   	ret    

c001cf45 <Thr::runtimeReferenceHelper()>:
c001cf45:	83 ec 18             	sub    esp,0x18
c001cf48:	68 5e c9 02 c0       	push   0xc002c95e
c001cf4d:	e8 f3 5e ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001cf52:	fa                   	cli    
c001cf53:	83 c4 10             	add    esp,0x10
c001cf56:	eb fe                	jmp    c001cf56 <Thr::runtimeReferenceHelper()+0x11>

c001cf58 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cf58:	57                   	push   edi
c001cf59:	56                   	push   esi
c001cf5a:	53                   	push   ebx
c001cf5b:	31 db                	xor    ebx,ebx
c001cf5d:	39 1d e0 22 03 c0    	cmp    DWORD PTR ds:0xc00322e0,ebx
c001cf63:	7e 3c                	jle    c001cfa1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cf65:	8b 34 9d 60 22 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdda0]
c001cf6c:	31 ff                	xor    edi,edi
c001cf6e:	39 3c 9d 60 21 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdea0],edi
c001cf75:	7e 27                	jle    c001cf9e <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cf77:	50                   	push   eax
c001cf78:	50                   	push   eax
c001cf79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf7d:	8b 06                	mov    eax,DWORD PTR [esi]
c001cf7f:	03 04 9d e0 21 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcde20]
c001cf86:	50                   	push   eax
c001cf87:	e8 58 39 fe ff       	call   c00008e4 <strcmp>
c001cf8c:	83 c4 10             	add    esp,0x10
c001cf8f:	85 c0                	test   eax,eax
c001cf91:	75 05                	jne    c001cf98 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cf93:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cf96:	eb 0b                	jmp    c001cfa3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cf98:	83 c6 10             	add    esi,0x10
c001cf9b:	47                   	inc    edi
c001cf9c:	eb d0                	jmp    c001cf6e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cf9e:	43                   	inc    ebx
c001cf9f:	eb bc                	jmp    c001cf5d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cfa1:	31 c0                	xor    eax,eax
c001cfa3:	5b                   	pop    ebx
c001cfa4:	5e                   	pop    esi
c001cfa5:	5f                   	pop    edi
c001cfa6:	c3                   	ret    

c001cfa7 <Thr::loadKernelSymbolTable(char const*)>:
c001cfa7:	55                   	push   ebp
c001cfa8:	57                   	push   edi
c001cfa9:	56                   	push   esi
c001cfaa:	53                   	push   ebx
c001cfab:	83 ec 68             	sub    esp,0x68
c001cfae:	8b 35 30 23 03 c0    	mov    esi,DWORD PTR ds:0xc0032330
c001cfb4:	68 14 01 00 00       	push   0x114
c001cfb9:	e8 c8 28 ff ff       	call   c000f886 <malloc>
c001cfbe:	83 c4 0c             	add    esp,0xc
c001cfc1:	89 c3                	mov    ebx,eax
c001cfc3:	56                   	push   esi
c001cfc4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cfc8:	50                   	push   eax
c001cfc9:	e8 d6 63 ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c001cfce:	5e                   	pop    esi
c001cfcf:	5f                   	pop    edi
c001cfd0:	6a 01                	push   0x1
c001cfd2:	53                   	push   ebx
c001cfd3:	e8 30 64 ff ff       	call   c0013408 <File::open(FileOpenMode)>
c001cfd8:	83 c4 10             	add    esp,0x10
c001cfdb:	85 c0                	test   eax,eax
c001cfdd:	74 0a                	je     c001cfe9 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cfdf:	83 ec 0c             	sub    esp,0xc
c001cfe2:	68 80 c9 02 c0       	push   0xc002c980
c001cfe7:	eb 34                	jmp    c001d01d <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cfe9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cff1:	83 ec 0c             	sub    esp,0xc
c001cff4:	6a 34                	push   0x34
c001cff6:	e8 8b 28 ff ff       	call   c000f886 <malloc>
c001cffb:	59                   	pop    ecx
c001cffc:	89 c7                	mov    edi,eax
c001cffe:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d002:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d004:	56                   	push   esi
c001d005:	57                   	push   edi
c001d006:	6a 00                	push   0x0
c001d008:	6a 34                	push   0x34
c001d00a:	53                   	push   ebx
c001d00b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d00e:	83 c4 20             	add    esp,0x20
c001d011:	85 c0                	test   eax,eax
c001d013:	74 17                	je     c001d02c <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d015:	83 ec 0c             	sub    esp,0xc
c001d018:	68 97 c9 02 c0       	push   0xc002c997
c001d01d:	e8 e3 d7 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001d022:	83 c4 10             	add    esp,0x10
c001d025:	31 c0                	xor    eax,eax
c001d027:	e9 31 02 00 00       	jmp    c001d25d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d02c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d032:	75 e1                	jne    c001d015 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d034:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d037:	85 c0                	test   eax,eax
c001d039:	74 da                	je     c001d015 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d03b:	52                   	push   edx
c001d03c:	31 d2                	xor    edx,edx
c001d03e:	52                   	push   edx
c001d03f:	50                   	push   eax
c001d040:	53                   	push   ebx
c001d041:	e8 80 64 ff ff       	call   c00134c6 <File::seek(unsigned long long)>
c001d046:	83 c4 10             	add    esp,0x10
c001d049:	85 c0                	test   eax,eax
c001d04b:	75 c8                	jne    c001d015 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d04d:	83 ec 0c             	sub    esp,0xc
c001d050:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d054:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d058:	31 ed                	xor    ebp,ebp
c001d05a:	0f af c2             	imul   eax,edx
c001d05d:	50                   	push   eax
c001d05e:	e8 23 28 ff ff       	call   c000f886 <malloc>
c001d063:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d069:	89 34 24             	mov    DWORD PTR [esp],esi
c001d06c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d070:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d074:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d078:	0f af c2             	imul   eax,edx
c001d07b:	99                   	cdq    
c001d07c:	52                   	push   edx
c001d07d:	50                   	push   eax
c001d07e:	53                   	push   ebx
c001d07f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d082:	83 c4 20             	add    esp,0x20
c001d085:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d08d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d095:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d09d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d0a5:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d0a9:	0f 86 aa 00 00 00    	jbe    c001d159 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d0af:	0f b7 f5             	movzx  esi,bp
c001d0b2:	6b f6 28             	imul   esi,esi,0x28
c001d0b5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d0b9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d0bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0c0:	50                   	push   eax
c001d0c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d0c5:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d0c9:	8b 16                	mov    edx,DWORD PTR [esi]
c001d0cb:	6b c0 28             	imul   eax,eax,0x28
c001d0ce:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d0d2:	89 d0                	mov    eax,edx
c001d0d4:	31 d2                	xor    edx,edx
c001d0d6:	52                   	push   edx
c001d0d7:	50                   	push   eax
c001d0d8:	53                   	push   ebx
c001d0d9:	e8 e8 63 ff ff       	call   c00134c6 <File::seek(unsigned long long)>
c001d0de:	83 c4 0c             	add    esp,0xc
c001d0e1:	6a 20                	push   0x20
c001d0e3:	6a 00                	push   0x0
c001d0e5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d0e9:	52                   	push   edx
c001d0ea:	e8 ad 36 fe ff       	call   c000079c <memset>
c001d0ef:	58                   	pop    eax
c001d0f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0f2:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d0f6:	51                   	push   ecx
c001d0f7:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d0fb:	52                   	push   edx
c001d0fc:	6a 00                	push   0x0
c001d0fe:	6a 1f                	push   0x1f
c001d100:	53                   	push   ebx
c001d101:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d104:	83 c4 18             	add    esp,0x18
c001d107:	68 ae c9 02 c0       	push   0xc002c9ae
c001d10c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d110:	52                   	push   edx
c001d111:	e8 ce 37 fe ff       	call   c00008e4 <strcmp>
c001d116:	83 c4 10             	add    esp,0x10
c001d119:	85 c0                	test   eax,eax
c001d11b:	75 0f                	jne    c001d12c <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d11d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d120:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d124:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d128:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d12c:	50                   	push   eax
c001d12d:	50                   	push   eax
c001d12e:	68 b6 c9 02 c0       	push   0xc002c9b6
c001d133:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d137:	50                   	push   eax
c001d138:	e8 a7 37 fe ff       	call   c00008e4 <strcmp>
c001d13d:	83 c4 10             	add    esp,0x10
c001d140:	85 c0                	test   eax,eax
c001d142:	75 0f                	jne    c001d153 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d144:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d147:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d14b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d14f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d153:	45                   	inc    ebp
c001d154:	e9 4c ff ff ff       	jmp    c001d0a5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d159:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d15e:	75 10                	jne    c001d170 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d160:	83 ec 0c             	sub    esp,0xc
c001d163:	68 be c9 02 c0       	push   0xc002c9be
c001d168:	e8 98 d6 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001d16d:	83 c4 10             	add    esp,0x10
c001d170:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d175:	75 10                	jne    c001d187 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d177:	83 ec 0c             	sub    esp,0xc
c001d17a:	68 be c9 02 c0       	push   0xc002c9be
c001d17f:	e8 81 d6 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001d184:	83 c4 10             	add    esp,0x10
c001d187:	31 d2                	xor    edx,edx
c001d189:	50                   	push   eax
c001d18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d18e:	52                   	push   edx
c001d18f:	50                   	push   eax
c001d190:	53                   	push   ebx
c001d191:	e8 30 63 ff ff       	call   c00134c6 <File::seek(unsigned long long)>
c001d196:	5a                   	pop    edx
c001d197:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d19b:	e8 e6 26 ff ff       	call   c000f886 <malloc>
c001d1a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d1a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d1a8:	31 c9                	xor    ecx,ecx
c001d1aa:	5e                   	pop    esi
c001d1ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d1ad:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d1b1:	55                   	push   ebp
c001d1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1b6:	51                   	push   ecx
c001d1b7:	52                   	push   edx
c001d1b8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d1bc:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d1c0:	53                   	push   ebx
c001d1c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d1c4:	83 c4 14             	add    esp,0x14
c001d1c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d1cb:	e8 b6 26 ff ff       	call   c000f886 <malloc>
c001d1d0:	89 c6                	mov    esi,eax
c001d1d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d1d4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d1d7:	56                   	push   esi
c001d1d8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d1dc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d1e0:	51                   	push   ecx
c001d1e1:	52                   	push   edx
c001d1e2:	53                   	push   ebx
c001d1e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d1e6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d1ea:	8b 15 e0 22 03 c0    	mov    edx,DWORD PTR ds:0xc00322e0
c001d1f0:	83 c4 1c             	add    esp,0x1c
c001d1f3:	c1 e8 04             	shr    eax,0x4
c001d1f6:	89 04 95 60 21 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdea0],eax
c001d1fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d201:	31 d2                	xor    edx,edx
c001d203:	52                   	push   edx
c001d204:	50                   	push   eax
c001d205:	53                   	push   ebx
c001d206:	e8 bb 62 ff ff       	call   c00134c6 <File::seek(unsigned long long)>
c001d20b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d20d:	31 d2                	xor    edx,edx
c001d20f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d212:	56                   	push   esi
c001d213:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d217:	52                   	push   edx
c001d218:	50                   	push   eax
c001d219:	53                   	push   ebx
c001d21a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d21d:	83 c4 14             	add    esp,0x14
c001d220:	53                   	push   ebx
c001d221:	e8 40 62 ff ff       	call   c0013466 <File::close()>
c001d226:	5d                   	pop    ebp
c001d227:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d22b:	e8 66 26 ff ff       	call   c000f896 <free>
c001d230:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d233:	e8 5e 26 ff ff       	call   c000f896 <free>
c001d238:	a1 e0 22 03 c0       	mov    eax,ds:0xc00322e0
c001d23d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d241:	8d 50 01             	lea    edx,[eax+0x1]
c001d244:	89 0c 85 60 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdda0],ecx
c001d24b:	89 34 85 e0 21 03 c0 	mov    DWORD PTR [eax*4-0x3ffcde20],esi
c001d252:	89 15 e0 22 03 c0    	mov    DWORD PTR ds:0xc00322e0,edx
c001d258:	83 c4 10             	add    esp,0x10
c001d25b:	b0 01                	mov    al,0x1
c001d25d:	83 c4 5c             	add    esp,0x5c
c001d260:	5b                   	pop    ebx
c001d261:	5e                   	pop    esi
c001d262:	5f                   	pop    edi
c001d263:	5d                   	pop    ebp
c001d264:	c3                   	ret    

c001d265 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d265:	55                   	push   ebp
c001d266:	57                   	push   edi
c001d267:	56                   	push   esi
c001d268:	53                   	push   ebx
c001d269:	81 ec 68 03 00 00    	sub    esp,0x368
c001d26f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d276:	8b 1d 30 23 03 c0    	mov    ebx,DWORD PTR ds:0xc0032330
c001d27c:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d280:	68 14 01 00 00       	push   0x114
c001d285:	e8 fc 25 ff ff       	call   c000f886 <malloc>
c001d28a:	83 c4 0c             	add    esp,0xc
c001d28d:	89 c5                	mov    ebp,eax
c001d28f:	53                   	push   ebx
c001d290:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d297:	50                   	push   eax
c001d298:	e8 07 61 ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c001d29d:	5e                   	pop    esi
c001d29e:	5f                   	pop    edi
c001d29f:	6a 01                	push   0x1
c001d2a1:	55                   	push   ebp
c001d2a2:	e8 61 61 ff ff       	call   c0013408 <File::open(FileOpenMode)>
c001d2a7:	83 c4 10             	add    esp,0x10
c001d2aa:	85 c0                	test   eax,eax
c001d2ac:	0f 85 a7 06 00 00    	jne    c001d959 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d2b2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d2ba:	83 ec 0c             	sub    esp,0xc
c001d2bd:	6a 34                	push   0x34
c001d2bf:	e8 c2 25 ff ff       	call   c000f886 <malloc>
c001d2c4:	5b                   	pop    ebx
c001d2c5:	89 c7                	mov    edi,eax
c001d2c7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d2cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2ce:	53                   	push   ebx
c001d2cf:	57                   	push   edi
c001d2d0:	6a 00                	push   0x0
c001d2d2:	6a 34                	push   0x34
c001d2d4:	55                   	push   ebp
c001d2d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2d8:	83 c4 20             	add    esp,0x20
c001d2db:	85 c0                	test   eax,eax
c001d2dd:	0f 85 76 06 00 00    	jne    c001d959 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d2e3:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d2e9:	0f 85 6a 06 00 00    	jne    c001d959 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d2ef:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d2f2:	85 c0                	test   eax,eax
c001d2f4:	0f 84 5f 06 00 00    	je     c001d959 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d2fa:	31 d2                	xor    edx,edx
c001d2fc:	51                   	push   ecx
c001d2fd:	52                   	push   edx
c001d2fe:	50                   	push   eax
c001d2ff:	55                   	push   ebp
c001d300:	e8 c1 61 ff ff       	call   c00134c6 <File::seek(unsigned long long)>
c001d305:	83 c4 10             	add    esp,0x10
c001d308:	85 c0                	test   eax,eax
c001d30a:	0f 85 49 06 00 00    	jne    c001d959 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d310:	83 ec 0c             	sub    esp,0xc
c001d313:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d316:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d31a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d31e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d322:	0f af c2             	imul   eax,edx
c001d325:	50                   	push   eax
c001d326:	e8 5b 25 ff ff       	call   c000f886 <malloc>
c001d32b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d32e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d332:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d335:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d339:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d33d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d341:	0f af c2             	imul   eax,edx
c001d344:	99                   	cdq    
c001d345:	52                   	push   edx
c001d346:	50                   	push   eax
c001d347:	55                   	push   ebp
c001d348:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d34b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d34e:	83 c4 20             	add    esp,0x20
c001d351:	85 c0                	test   eax,eax
c001d353:	0f 84 00 06 00 00    	je     c001d959 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d359:	52                   	push   edx
c001d35a:	31 d2                	xor    edx,edx
c001d35c:	52                   	push   edx
c001d35d:	50                   	push   eax
c001d35e:	55                   	push   ebp
c001d35f:	e8 62 61 ff ff       	call   c00134c6 <File::seek(unsigned long long)>
c001d364:	83 c4 10             	add    esp,0x10
c001d367:	85 c0                	test   eax,eax
c001d369:	0f 85 ea 05 00 00    	jne    c001d959 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d36f:	83 ec 0c             	sub    esp,0xc
c001d372:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d376:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d37a:	31 f6                	xor    esi,esi
c001d37c:	0f af c2             	imul   eax,edx
c001d37f:	50                   	push   eax
c001d380:	e8 01 25 ff ff       	call   c000f886 <malloc>
c001d385:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d388:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d38c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d38f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d393:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d397:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d39b:	0f af c2             	imul   eax,edx
c001d39e:	99                   	cdq    
c001d39f:	52                   	push   edx
c001d3a0:	50                   	push   eax
c001d3a1:	55                   	push   ebp
c001d3a2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3a5:	83 c4 20             	add    esp,0x20
c001d3a8:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d3ac:	0f 86 8a 00 00 00    	jbe    c001d43c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d3b2:	0f b7 de             	movzx  ebx,si
c001d3b5:	c1 e3 05             	shl    ebx,0x5
c001d3b8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d3bc:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d3bf:	75 75                	jne    c001d436 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d3c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d3c4:	31 d2                	xor    edx,edx
c001d3c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d3ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d3cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3d1:	50                   	push   eax
c001d3d2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d3d5:	52                   	push   edx
c001d3d6:	50                   	push   eax
c001d3d7:	55                   	push   ebp
c001d3d8:	e8 e9 60 ff ff       	call   c00134c6 <File::seek(unsigned long long)>
c001d3dd:	83 c4 10             	add    esp,0x10
c001d3e0:	85 c0                	test   eax,eax
c001d3e2:	0f 85 71 05 00 00    	jne    c001d959 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3e8:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d3ef:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3f2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d3f6:	31 d2                	xor    edx,edx
c001d3f8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d3fc:	83 ec 0c             	sub    esp,0xc
c001d3ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d403:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d40a:	50                   	push   eax
c001d40b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d40f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d413:	52                   	push   edx
c001d414:	50                   	push   eax
c001d415:	55                   	push   ebp
c001d416:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d419:	83 c4 1c             	add    esp,0x1c
c001d41c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d41f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d422:	50                   	push   eax
c001d423:	6a 00                	push   0x0
c001d425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d429:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d42d:	50                   	push   eax
c001d42e:	e8 69 33 fe ff       	call   c000079c <memset>
c001d433:	83 c4 10             	add    esp,0x10
c001d436:	46                   	inc    esi
c001d437:	e9 6c ff ff ff       	jmp    c001d3a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d43c:	53                   	push   ebx
c001d43d:	31 db                	xor    ebx,ebx
c001d43f:	68 00 01 00 00       	push   0x100
c001d444:	6a 00                	push   0x0
c001d446:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d44a:	50                   	push   eax
c001d44b:	e8 4c 33 fe ff       	call   c000079c <memset>
c001d450:	83 c4 0c             	add    esp,0xc
c001d453:	68 00 01 00 00       	push   0x100
c001d458:	6a 00                	push   0x0
c001d45a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d461:	50                   	push   eax
c001d462:	e8 35 33 fe ff       	call   c000079c <memset>
c001d467:	83 c4 10             	add    esp,0x10
c001d46a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d472:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d47a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d482:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d48a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d492:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d496:	0f 86 30 01 00 00    	jbe    c001d5cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d49c:	0f b7 f3             	movzx  esi,bx
c001d49f:	6b f6 28             	imul   esi,esi,0x28
c001d4a2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d4a6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d4a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4ad:	52                   	push   edx
c001d4ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d4b2:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d4b6:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4b8:	6b d2 28             	imul   edx,edx,0x28
c001d4bb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d4bf:	31 d2                	xor    edx,edx
c001d4c1:	52                   	push   edx
c001d4c2:	50                   	push   eax
c001d4c3:	55                   	push   ebp
c001d4c4:	e8 fd 5f ff ff       	call   c00134c6 <File::seek(unsigned long long)>
c001d4c9:	83 c4 0c             	add    esp,0xc
c001d4cc:	6a 20                	push   0x20
c001d4ce:	6a 00                	push   0x0
c001d4d0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d4d7:	51                   	push   ecx
c001d4d8:	e8 bf 32 fe ff       	call   c000079c <memset>
c001d4dd:	59                   	pop    ecx
c001d4de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d4e1:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d4e5:	52                   	push   edx
c001d4e6:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d4ed:	51                   	push   ecx
c001d4ee:	6a 00                	push   0x0
c001d4f0:	6a 1f                	push   0x1f
c001d4f2:	55                   	push   ebp
c001d4f3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d4f6:	83 c4 1c             	add    esp,0x1c
c001d4f9:	6a 09                	push   0x9
c001d4fb:	68 d8 c9 02 c0       	push   0xc002c9d8
c001d500:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d507:	51                   	push   ecx
c001d508:	e8 57 31 fe ff       	call   c0000664 <memcmp>
c001d50d:	83 c4 10             	add    esp,0x10
c001d510:	85 c0                	test   eax,eax
c001d512:	75 21                	jne    c001d535 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d518:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d51c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d520:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d524:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d527:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d52e:	89 d0                	mov    eax,edx
c001d530:	40                   	inc    eax
c001d531:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d535:	50                   	push   eax
c001d536:	6a 09                	push   0x9
c001d538:	68 e2 c9 02 c0       	push   0xc002c9e2
c001d53d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d544:	50                   	push   eax
c001d545:	e8 1a 31 fe ff       	call   c0000664 <memcmp>
c001d54a:	83 c4 10             	add    esp,0x10
c001d54d:	85 c0                	test   eax,eax
c001d54f:	75 21                	jne    c001d572 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d555:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d559:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d55d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d561:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d564:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d56b:	89 d0                	mov    eax,edx
c001d56d:	40                   	inc    eax
c001d56e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d572:	50                   	push   eax
c001d573:	50                   	push   eax
c001d574:	68 ae c9 02 c0       	push   0xc002c9ae
c001d579:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d580:	50                   	push   eax
c001d581:	e8 5e 33 fe ff       	call   c00008e4 <strcmp>
c001d586:	83 c4 10             	add    esp,0x10
c001d589:	85 c0                	test   eax,eax
c001d58b:	75 0f                	jne    c001d59c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d58d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d590:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d594:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d59c:	50                   	push   eax
c001d59d:	50                   	push   eax
c001d59e:	68 b6 c9 02 c0       	push   0xc002c9b6
c001d5a3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5aa:	50                   	push   eax
c001d5ab:	e8 34 33 fe ff       	call   c00008e4 <strcmp>
c001d5b0:	83 c4 10             	add    esp,0x10
c001d5b3:	85 c0                	test   eax,eax
c001d5b5:	75 0f                	jne    c001d5c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d5b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d5ba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d5be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d5c2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d5c6:	43                   	inc    ebx
c001d5c7:	e9 c6 fe ff ff       	jmp    c001d492 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d5cc:	31 d2                	xor    edx,edx
c001d5ce:	50                   	push   eax
c001d5cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5d3:	52                   	push   edx
c001d5d4:	50                   	push   eax
c001d5d5:	55                   	push   ebp
c001d5d6:	e8 eb 5e ff ff       	call   c00134c6 <File::seek(unsigned long long)>
c001d5db:	58                   	pop    eax
c001d5dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d5e0:	e8 a1 22 ff ff       	call   c000f886 <malloc>
c001d5e5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d5e8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d5ec:	31 d2                	xor    edx,edx
c001d5ee:	58                   	pop    eax
c001d5ef:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d5f3:	53                   	push   ebx
c001d5f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d5f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d5fc:	52                   	push   edx
c001d5fd:	50                   	push   eax
c001d5fe:	55                   	push   ebp
c001d5ff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d602:	83 c4 14             	add    esp,0x14
c001d605:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d609:	e8 78 22 ff ff       	call   c000f886 <malloc>
c001d60e:	31 d2                	xor    edx,edx
c001d610:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d614:	83 c4 0c             	add    esp,0xc
c001d617:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d61b:	52                   	push   edx
c001d61c:	50                   	push   eax
c001d61d:	55                   	push   ebp
c001d61e:	e8 a3 5e ff ff       	call   c00134c6 <File::seek(unsigned long long)>
c001d623:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d626:	31 d2                	xor    edx,edx
c001d628:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d62b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d62f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d633:	52                   	push   edx
c001d634:	50                   	push   eax
c001d635:	55                   	push   ebp
c001d636:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d639:	83 c4 20             	add    esp,0x20
c001d63c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d644:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d648:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d64c:	0f 84 0b 03 00 00    	je     c001d95d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d652:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d659:	31 d2                	xor    edx,edx
c001d65b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d65f:	c1 e8 03             	shr    eax,0x3
c001d662:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d666:	51                   	push   ecx
c001d667:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d66b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d66f:	52                   	push   edx
c001d670:	50                   	push   eax
c001d671:	55                   	push   ebp
c001d672:	e8 4f 5e ff ff       	call   c00134c6 <File::seek(unsigned long long)>
c001d677:	5b                   	pop    ebx
c001d678:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d67c:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d683:	e8 fe 21 ff ff       	call   c000f886 <malloc>
c001d688:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d68b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d68f:	31 d2                	xor    edx,edx
c001d691:	5e                   	pop    esi
c001d692:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d696:	50                   	push   eax
c001d697:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d69b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d69f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d6a6:	52                   	push   edx
c001d6a7:	50                   	push   eax
c001d6a8:	55                   	push   ebp
c001d6a9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6ac:	83 c4 20             	add    esp,0x20
c001d6af:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d6b7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d6bb:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d6bf:	0f 8d 7c 02 00 00    	jge    c001d941 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d6c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d6c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6cd:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d6d2:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d6d5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d6d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6dd:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d6e1:	89 d8                	mov    eax,ebx
c001d6e3:	c1 e8 08             	shr    eax,0x8
c001d6e6:	89 c6                	mov    esi,eax
c001d6e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d6ec:	c1 e6 04             	shl    esi,0x4
c001d6ef:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d6f3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d6f6:	85 d2                	test   edx,edx
c001d6f8:	0f 85 bf 00 00 00    	jne    c001d7bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d6fe:	83 ec 0c             	sub    esp,0xc
c001d701:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d705:	03 06                	add    eax,DWORD PTR [esi]
c001d707:	50                   	push   eax
c001d708:	e8 4b f8 ff ff       	call   c001cf58 <Thr::getAddressOfKernelSymbol(char const*)>
c001d70d:	83 c4 10             	add    esp,0x10
c001d710:	89 c2                	mov    edx,eax
c001d712:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d717:	85 c0                	test   eax,eax
c001d719:	0f 85 9e 00 00 00    	jne    c001d7bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d71f:	83 ec 0c             	sub    esp,0xc
c001d722:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d726:	03 06                	add    eax,DWORD PTR [esi]
c001d728:	50                   	push   eax
c001d729:	e8 02 0e ff ff       	call   c000e530 <Krnl::resolveCompatibilitySymbol(char*)>
c001d72e:	83 c4 10             	add    esp,0x10
c001d731:	89 c2                	mov    edx,eax
c001d733:	85 c0                	test   eax,eax
c001d735:	0f 85 82 00 00 00    	jne    c001d7bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d73b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d73f:	50                   	push   eax
c001d740:	50                   	push   eax
c001d741:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d745:	03 06                	add    eax,DWORD PTR [esi]
c001d747:	50                   	push   eax
c001d748:	68 ec c9 02 c0       	push   0xc002c9ec
c001d74d:	e8 f3 56 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001d752:	58                   	pop    eax
c001d753:	5a                   	pop    edx
c001d754:	68 06 ca 02 c0       	push   0xc002ca06
c001d759:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d760:	50                   	push   eax
c001d761:	e8 f2 30 fe ff       	call   c0000858 <strcpy>
c001d766:	59                   	pop    ecx
c001d767:	58                   	pop    eax
c001d768:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d76c:	03 06                	add    eax,DWORD PTR [esi]
c001d76e:	50                   	push   eax
c001d76f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d776:	50                   	push   eax
c001d777:	e8 1c 32 fe ff       	call   c0000998 <strcat>
c001d77c:	58                   	pop    eax
c001d77d:	5a                   	pop    edx
c001d77e:	68 9c ca 02 c0       	push   0xc002ca9c
c001d783:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d78a:	50                   	push   eax
c001d78b:	e8 08 32 fe ff       	call   c0000998 <strcat>
c001d790:	83 c4 10             	add    esp,0x10
c001d793:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d798:	0f 84 5d 01 00 00    	je     c001d8fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d79e:	83 ec 0c             	sub    esp,0xc
c001d7a1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7a8:	50                   	push   eax
c001d7a9:	e8 57 d0 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001d7ae:	83 c4 10             	add    esp,0x10
c001d7b1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d7b5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d7b9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d7bd:	80 fb 01             	cmp    bl,0x1
c001d7c0:	0f 85 88 00 00 00    	jne    c001d84e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d7c6:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d7cd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d7d1:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d7d5:	01 ce                	add    esi,ecx
c001d7d7:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d7dd:	0f 94 c0             	sete   al
c001d7e0:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d7e6:	0f 94 c3             	sete   bl
c001d7e9:	09 c3                	or     ebx,eax
c001d7eb:	8b 06                	mov    eax,DWORD PTR [esi]
c001d7ed:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d7f2:	74 41                	je     c001d835 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d7f4:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d7f7:	84 db                	test   bl,bl
c001d7f9:	75 15                	jne    c001d810 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d7fb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d7ff:	66 83 f8 0c          	cmp    ax,0xc
c001d803:	76 05                	jbe    c001d80a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d805:	b8 0c 00 00 00       	mov    eax,0xc
c001d80a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d80e:	76 37                	jbe    c001d847 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d810:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d814:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d819:	0f 84 dc 00 00 00    	je     c001d8fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d81f:	83 ec 0c             	sub    esp,0xc
c001d822:	68 1d ca 02 c0       	push   0xc002ca1d
c001d827:	e8 d9 cf ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001d82c:	83 c4 10             	add    esp,0x10
c001d82f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d833:	eb 12                	jmp    c001d847 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d835:	01 c1                	add    ecx,eax
c001d837:	84 db                	test   bl,bl
c001d839:	75 0c                	jne    c001d847 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d83b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d83f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d843:	77 02                	ja     c001d847 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d845:	01 d1                	add    ecx,edx
c001d847:	89 0e                	mov    DWORD PTR [esi],ecx
c001d849:	e9 ea 00 00 00       	jmp    c001d938 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d84e:	80 fb 02             	cmp    bl,0x2
c001d851:	75 7c                	jne    c001d8cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d853:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d85a:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d85e:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d862:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d868:	74 20                	je     c001d88a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d86a:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d870:	74 18                	je     c001d88a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d872:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d876:	b9 0a 00 00 00       	mov    ecx,0xa
c001d87b:	66 83 f8 0e          	cmp    ax,0xe
c001d87f:	77 03                	ja     c001d884 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d881:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d884:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d888:	76 1f                	jbe    c001d8a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d88a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d88e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d893:	74 66                	je     c001d8fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d895:	83 ec 0c             	sub    esp,0xc
c001d898:	68 39 ca 02 c0       	push   0xc002ca39
c001d89d:	e8 63 cf ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001d8a2:	83 c4 10             	add    esp,0x10
c001d8a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d8a9:	8b 06                	mov    eax,DWORD PTR [esi]
c001d8ab:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d8b0:	74 13                	je     c001d8c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d8b2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d8b6:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d8bd:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d8c1:	01 c8                	add    eax,ecx
c001d8c3:	eb 04                	jmp    c001d8c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d8c5:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d8c9:	01 c2                	add    edx,eax
c001d8cb:	89 16                	mov    DWORD PTR [esi],edx
c001d8cd:	eb 69                	jmp    c001d938 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d8cf:	0f b6 db             	movzx  ebx,bl
c001d8d2:	50                   	push   eax
c001d8d3:	50                   	push   eax
c001d8d4:	53                   	push   ebx
c001d8d5:	68 55 ca 02 c0       	push   0xc002ca55
c001d8da:	e8 66 55 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001d8df:	83 c4 10             	add    esp,0x10
c001d8e2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d8e7:	74 12                	je     c001d8fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d8e9:	83 ec 0c             	sub    esp,0xc
c001d8ec:	68 60 ca 02 c0       	push   0xc002ca60
c001d8f1:	e8 0f cf ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001d8f6:	83 c4 10             	add    esp,0x10
c001d8f9:	eb 3d                	jmp    c001d938 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d8fb:	83 ec 0c             	sub    esp,0xc
c001d8fe:	55                   	push   ebp
c001d8ff:	e8 62 5b ff ff       	call   c0013466 <File::close()>
c001d904:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d907:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d90a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d90d:	59                   	pop    ecx
c001d90e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d912:	e8 7f 1f ff ff       	call   c000f896 <free>
c001d917:	5b                   	pop    ebx
c001d918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d91c:	e8 75 1f ff ff       	call   c000f896 <free>
c001d921:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d924:	e8 6d 1f ff ff       	call   c000f896 <free>
c001d929:	5e                   	pop    esi
c001d92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d92e:	e8 63 1f ff ff       	call   c000f896 <free>
c001d933:	83 c4 10             	add    esp,0x10
c001d936:	eb 21                	jmp    c001d959 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d938:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d93c:	e9 76 fd ff ff       	jmp    c001d6b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d941:	83 ec 0c             	sub    esp,0xc
c001d944:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d948:	e8 49 1f ff ff       	call   c000f896 <free>
c001d94d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d951:	83 c4 10             	add    esp,0x10
c001d954:	e9 eb fc ff ff       	jmp    c001d644 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d959:	31 c0                	xor    eax,eax
c001d95b:	eb 33                	jmp    c001d990 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d95d:	83 ec 0c             	sub    esp,0xc
c001d960:	55                   	push   ebp
c001d961:	e8 00 5b ff ff       	call   c0013466 <File::close()>
c001d966:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d969:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d96c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d96f:	58                   	pop    eax
c001d970:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d974:	e8 1d 1f ff ff       	call   c000f896 <free>
c001d979:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d97c:	e8 15 1f ff ff       	call   c000f896 <free>
c001d981:	5a                   	pop    edx
c001d982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d986:	e8 0b 1f ff ff       	call   c000f896 <free>
c001d98b:	83 c4 10             	add    esp,0x10
c001d98e:	b0 01                	mov    al,0x1
c001d990:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d996:	5b                   	pop    ebx
c001d997:	5e                   	pop    esi
c001d998:	5f                   	pop    edi
c001d999:	5d                   	pop    ebp
c001d99a:	c3                   	ret    

c001d99b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d99b:	56                   	push   esi
c001d99c:	31 d2                	xor    edx,edx
c001d99e:	53                   	push   ebx
c001d99f:	8b 1d 40 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b40
c001d9a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d9a9:	39 d3                	cmp    ebx,edx
c001d9ab:	7e 1b                	jle    c001d9c8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d9ad:	8b 04 95 60 1d 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce2a0]
c001d9b4:	39 c8                	cmp    eax,ecx
c001d9b6:	77 0d                	ja     c001d9c5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d9b8:	8b 34 95 60 1b 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce4a0]
c001d9bf:	01 c6                	add    esi,eax
c001d9c1:	39 ce                	cmp    esi,ecx
c001d9c3:	77 05                	ja     c001d9ca <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d9c5:	42                   	inc    edx
c001d9c6:	eb e1                	jmp    c001d9a9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d9c8:	31 c0                	xor    eax,eax
c001d9ca:	5b                   	pop    ebx
c001d9cb:	5e                   	pop    esi
c001d9cc:	c3                   	ret    

c001d9cd <Thr::getDriverNameFromAddress(unsigned long)>:
c001d9cd:	53                   	push   ebx
c001d9ce:	31 c0                	xor    eax,eax
c001d9d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d9d4:	8b 1d 40 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b40
c001d9da:	39 c3                	cmp    ebx,eax
c001d9dc:	7e 22                	jle    c001da00 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d9de:	8b 14 85 60 1d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce2a0]
c001d9e5:	39 ca                	cmp    edx,ecx
c001d9e7:	77 14                	ja     c001d9fd <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d9e9:	03 14 85 60 1b 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce4a0]
c001d9f0:	39 ca                	cmp    edx,ecx
c001d9f2:	76 09                	jbe    c001d9fd <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d9f4:	8b 04 85 60 1f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce0a0]
c001d9fb:	eb 05                	jmp    c001da02 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d9fd:	40                   	inc    eax
c001d9fe:	eb da                	jmp    c001d9da <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001da00:	31 c0                	xor    eax,eax
c001da02:	5b                   	pop    ebx
c001da03:	c3                   	ret    

c001da04 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001da04:	53                   	push   ebx
c001da05:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001da09:	53                   	push   ebx
c001da0a:	e8 8c ff ff ff       	call   c001d99b <Thr::getDriverBaseFromAddress(unsigned long)>
c001da0f:	5a                   	pop    edx
c001da10:	31 d2                	xor    edx,edx
c001da12:	85 c0                	test   eax,eax
c001da14:	74 04                	je     c001da1a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001da16:	89 da                	mov    edx,ebx
c001da18:	29 c2                	sub    edx,eax
c001da1a:	89 d0                	mov    eax,edx
c001da1c:	5b                   	pop    ebx
c001da1d:	c3                   	ret    

c001da1e <Thr::loadDLL(char const*, bool)>:
c001da1e:	55                   	push   ebp
c001da1f:	57                   	push   edi
c001da20:	56                   	push   esi
c001da21:	53                   	push   ebx
c001da22:	81 ec 34 01 00 00    	sub    esp,0x134
c001da28:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001da2f:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001da36:	56                   	push   esi
c001da37:	68 78 ca 02 c0       	push   0xc002ca78
c001da3c:	e8 04 54 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001da41:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001da48:	e8 39 1e ff ff       	call   c000f886 <malloc>
c001da4d:	83 c4 0c             	add    esp,0xc
c001da50:	89 c3                	mov    ebx,eax
c001da52:	ff 35 30 23 03 c0    	push   DWORD PTR ds:0xc0032330
c001da58:	56                   	push   esi
c001da59:	50                   	push   eax
c001da5a:	e8 45 59 ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c001da5f:	83 c4 10             	add    esp,0x10
c001da62:	85 db                	test   ebx,ebx
c001da64:	75 3c                	jne    c001daa2 <Thr::loadDLL(char const*, bool)+0x84>
c001da66:	89 e8                	mov    eax,ebp
c001da68:	84 c0                	test   al,al
c001da6a:	0f 84 d5 01 00 00    	je     c001dc45 <Thr::loadDLL(char const*, bool)+0x227>
c001da70:	57                   	push   edi
c001da71:	57                   	push   edi
c001da72:	68 89 ca 02 c0       	push   0xc002ca89
c001da77:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001da7b:	57                   	push   edi
c001da7c:	e8 d7 2d fe ff       	call   c0000858 <strcpy>
c001da81:	58                   	pop    eax
c001da82:	5a                   	pop    edx
c001da83:	56                   	push   esi
c001da84:	57                   	push   edi
c001da85:	e8 0e 2f fe ff       	call   c0000998 <strcat>
c001da8a:	59                   	pop    ecx
c001da8b:	58                   	pop    eax
c001da8c:	68 9c ca 02 c0       	push   0xc002ca9c
c001da91:	57                   	push   edi
c001da92:	e8 01 2f fe ff       	call   c0000998 <strcat>
c001da97:	89 3c 24             	mov    DWORD PTR [esp],edi
c001da9a:	e8 66 cd ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001da9f:	83 c4 10             	add    esp,0x10
c001daa2:	51                   	push   ecx
c001daa3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001daa7:	50                   	push   eax
c001daa8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001daac:	50                   	push   eax
c001daad:	53                   	push   ebx
c001daae:	e8 01 5c ff ff       	call   c00136b4 <File::stat(unsigned long long*, bool*)>
c001dab3:	83 c4 10             	add    esp,0x10
c001dab6:	85 db                	test   ebx,ebx
c001dab8:	74 0c                	je     c001dac6 <Thr::loadDLL(char const*, bool)+0xa8>
c001daba:	83 ec 0c             	sub    esp,0xc
c001dabd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dabf:	53                   	push   ebx
c001dac0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dac3:	83 c4 10             	add    esp,0x10
c001dac6:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001dacb:	75 0a                	jne    c001dad7 <Thr::loadDLL(char const*, bool)+0xb9>
c001dacd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dad1:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001dad5:	75 3c                	jne    c001db13 <Thr::loadDLL(char const*, bool)+0xf5>
c001dad7:	89 e8                	mov    eax,ebp
c001dad9:	84 c0                	test   al,al
c001dadb:	0f 84 4c 01 00 00    	je     c001dc2d <Thr::loadDLL(char const*, bool)+0x20f>
c001dae1:	51                   	push   ecx
c001dae2:	51                   	push   ecx
c001dae3:	68 89 ca 02 c0       	push   0xc002ca89
c001dae8:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001daec:	53                   	push   ebx
c001daed:	e8 66 2d fe ff       	call   c0000858 <strcpy>
c001daf2:	5f                   	pop    edi
c001daf3:	58                   	pop    eax
c001daf4:	56                   	push   esi
c001daf5:	53                   	push   ebx
c001daf6:	e8 9d 2e fe ff       	call   c0000998 <strcat>
c001dafb:	58                   	pop    eax
c001dafc:	5a                   	pop    edx
c001dafd:	68 9c ca 02 c0       	push   0xc002ca9c
c001db02:	53                   	push   ebx
c001db03:	e8 90 2e fe ff       	call   c0000998 <strcat>
c001db08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db0b:	e8 f5 cc ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001db10:	83 c4 10             	add    esp,0x10
c001db13:	e8 60 41 ff ff       	call   c0011c78 <Virt::getAKernelVAS()>
c001db18:	51                   	push   ecx
c001db19:	6a 03                	push   0x3
c001db1b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001db1f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001db23:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001db29:	83 d3 00             	adc    ebx,0x0
c001db2c:	89 ca                	mov    edx,ecx
c001db2e:	89 d1                	mov    ecx,edx
c001db30:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001db34:	51                   	push   ecx
c001db35:	50                   	push   eax
c001db36:	e8 3b 48 ff ff       	call   c0012376 <VAS::allocatePages(int, int)>
c001db3b:	5f                   	pop    edi
c001db3c:	89 c3                	mov    ebx,eax
c001db3e:	58                   	pop    eax
c001db3f:	53                   	push   ebx
c001db40:	68 9e ca 02 c0       	push   0xc002ca9e
c001db45:	e8 fb 52 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001db4a:	89 34 24             	mov    DWORD PTR [esp],esi
c001db4d:	e8 66 2c fe ff       	call   c00007b8 <strlen>
c001db52:	8b 3d 40 1b 03 c0    	mov    edi,DWORD PTR ds:0xc0031b40
c001db58:	40                   	inc    eax
c001db59:	89 04 24             	mov    DWORD PTR [esp],eax
c001db5c:	e8 25 1d ff ff       	call   c000f886 <malloc>
c001db61:	89 04 bd 60 1f 03 c0 	mov    DWORD PTR [edi*4-0x3ffce0a0],eax
c001db68:	58                   	pop    eax
c001db69:	a1 40 1b 03 c0       	mov    eax,ds:0xc0031b40
c001db6e:	5a                   	pop    edx
c001db6f:	56                   	push   esi
c001db70:	ff 34 85 60 1f 03 c0 	push   DWORD PTR [eax*4-0x3ffce0a0]
c001db77:	e8 dc 2c fe ff       	call   c0000858 <strcpy>
c001db7c:	a1 40 1b 03 c0       	mov    eax,ds:0xc0031b40
c001db81:	8d 50 01             	lea    edx,[eax+0x1]
c001db84:	89 1c 85 60 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2a0],ebx
c001db8b:	89 15 40 1b 03 c0    	mov    DWORD PTR ds:0xc0031b40,edx
c001db91:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db95:	83 c4 0c             	add    esp,0xc
c001db98:	89 14 85 60 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4a0],edx
c001db9f:	6a 01                	push   0x1
c001dba1:	53                   	push   ebx
c001dba2:	56                   	push   esi
c001dba3:	e8 bd f6 ff ff       	call   c001d265 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001dba8:	83 c4 10             	add    esp,0x10
c001dbab:	89 c7                	mov    edi,eax
c001dbad:	84 c0                	test   al,al
c001dbaf:	0f 85 8c 00 00 00    	jne    c001dc41 <Thr::loadDLL(char const*, bool)+0x223>
c001dbb5:	89 e8                	mov    eax,ebp
c001dbb7:	84 c0                	test   al,al
c001dbb9:	74 76                	je     c001dc31 <Thr::loadDLL(char const*, bool)+0x213>
c001dbbb:	83 ec 0c             	sub    esp,0xc
c001dbbe:	68 ab ca 02 c0       	push   0xc002caab
c001dbc3:	e8 3d cc ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001dbc8:	83 c4 10             	add    esp,0x10
c001dbcb:	eb 64                	jmp    c001dc31 <Thr::loadDLL(char const*, bool)+0x213>
c001dbcd:	e8 a6 40 ff ff       	call   c0011c78 <Virt::getAKernelVAS()>
c001dbd2:	89 f5                	mov    ebp,esi
c001dbd4:	c1 e5 0c             	shl    ebp,0xc
c001dbd7:	52                   	push   edx
c001dbd8:	01 dd                	add    ebp,ebx
c001dbda:	52                   	push   edx
c001dbdb:	55                   	push   ebp
c001dbdc:	50                   	push   eax
c001dbdd:	e8 fe 42 ff ff       	call   c0011ee0 <VAS::getPageTableEntry(unsigned long)>
c001dbe2:	83 c4 10             	add    esp,0x10
c001dbe5:	f6 00 60             	test   BYTE PTR [eax],0x60
c001dbe8:	75 0c                	jne    c001dbf6 <Thr::loadDLL(char const*, bool)+0x1d8>
c001dbea:	83 ec 0c             	sub    esp,0xc
c001dbed:	55                   	push   ebp
c001dbee:	e8 75 22 ff ff       	call   c000fe68 <Phys::freePage(unsigned long)>
c001dbf3:	83 c4 10             	add    esp,0x10
c001dbf6:	46                   	inc    esi
c001dbf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dbfb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dbff:	05 ff 0f 00 00       	add    eax,0xfff
c001dc04:	83 d2 00             	adc    edx,0x0
c001dc07:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dc0b:	c1 ea 0c             	shr    edx,0xc
c001dc0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dc16:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001dc1a:	ba 00 00 00 00       	mov    edx,0x0
c001dc1f:	89 d0                	mov    eax,edx
c001dc21:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001dc25:	72 a6                	jb     c001dbcd <Thr::loadDLL(char const*, bool)+0x1af>
c001dc27:	89 f8                	mov    eax,edi
c001dc29:	84 c0                	test   al,al
c001dc2b:	75 18                	jne    c001dc45 <Thr::loadDLL(char const*, bool)+0x227>
c001dc2d:	31 db                	xor    ebx,ebx
c001dc2f:	eb 14                	jmp    c001dc45 <Thr::loadDLL(char const*, bool)+0x227>
c001dc31:	83 ec 0c             	sub    esp,0xc
c001dc34:	68 ca ca 02 c0       	push   0xc002caca
c001dc39:	e8 c7 cb ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001dc3e:	83 c4 10             	add    esp,0x10
c001dc41:	31 f6                	xor    esi,esi
c001dc43:	eb b2                	jmp    c001dbf7 <Thr::loadDLL(char const*, bool)+0x1d9>
c001dc45:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dc4b:	89 d8                	mov    eax,ebx
c001dc4d:	5b                   	pop    ebx
c001dc4e:	5e                   	pop    esi
c001dc4f:	5f                   	pop    edi
c001dc50:	5d                   	pop    ebp
c001dc51:	c3                   	ret    

c001dc52 <Thr::executeDLL(unsigned long, void*)>:
c001dc52:	56                   	push   esi
c001dc53:	53                   	push   ebx
c001dc54:	52                   	push   edx
c001dc55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc59:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dc5d:	85 db                	test   ebx,ebx
c001dc5f:	75 10                	jne    c001dc71 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001dc61:	83 ec 0c             	sub    esp,0xc
c001dc64:	68 e6 ca 02 c0       	push   0xc002cae6
c001dc69:	e8 97 cb ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001dc6e:	83 c4 10             	add    esp,0x10
c001dc71:	50                   	push   eax
c001dc72:	50                   	push   eax
c001dc73:	53                   	push   ebx
c001dc74:	68 10 cb 02 c0       	push   0xc002cb10
c001dc79:	e8 c7 51 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001dc7e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dc82:	89 d8                	mov    eax,ebx
c001dc84:	83 c4 14             	add    esp,0x14
c001dc87:	5b                   	pop    ebx
c001dc88:	5e                   	pop    esi
c001dc89:	ff e0                	jmp    eax
c001dc8b:	90                   	nop

c001dc8c <userModeEntryPoint(void*)>:
c001dc8c:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001dc91:	48                   	dec    eax
c001dc92:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001dc97:	75 01                	jne    c001dc9a <userModeEntryPoint(void*)+0xe>
c001dc99:	fb                   	sti    
c001dc9a:	fb                   	sti    
c001dc9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dca0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dca3:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dca9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dcad:	e9 78 26 fe ff       	jmp    c000032a <goToUsermode>

c001dcb2 <changeTSS>:
c001dcb2:	83 ec 14             	sub    esp,0x14
c001dcb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcba:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001dcbd:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001dcc2:	c1 e2 15             	shl    edx,0x15
c001dcc5:	29 d0                	sub    eax,edx
c001dcc7:	50                   	push   eax
c001dcc8:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c001dccd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dcd3:	05 7c 11 00 00       	add    eax,0x117c
c001dcd8:	50                   	push   eax
c001dcd9:	e8 9a 36 ff ff       	call   c0011378 <TSS::setESP(unsigned long)>
c001dcde:	83 c4 1c             	add    esp,0x1c
c001dce1:	c3                   	ret    

c001dce2 <switchToThread(ThreadControlBlock*)>:
c001dce2:	57                   	push   edi
c001dce3:	a1 04 23 03 c0       	mov    eax,ds:0xc0032304
c001dce8:	56                   	push   esi
c001dce9:	85 c0                	test   eax,eax
c001dceb:	53                   	push   ebx
c001dcec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcf0:	0f 85 88 00 00 00    	jne    c001dd7e <switchToThread(ThreadControlBlock*)+0x9c>
c001dcf6:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001dcf9:	3c ff                	cmp    al,0xff
c001dcfb:	74 7d                	je     c001dd7a <switchToThread(ThreadControlBlock*)+0x98>
c001dcfd:	0f b6 d0             	movzx  edx,al
c001dd00:	b8 84 03 00 00       	mov    eax,0x384
c001dd05:	29 d0                	sub    eax,edx
c001dd07:	c1 e0 10             	shl    eax,0x10
c001dd0a:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001dd0d:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dd10:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c001dd15:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd1b:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dd22:	74 4a                	je     c001dd6e <switchToThread(ThreadControlBlock*)+0x8c>
c001dd24:	0f 31                	rdtsc  
c001dd26:	a3 48 23 03 c0       	mov    ds:0xc0032348,eax
c001dd2b:	89 c6                	mov    esi,eax
c001dd2d:	89 d7                	mov    edi,edx
c001dd2f:	2b 35 38 23 03 c0    	sub    esi,DWORD PTR ds:0xc0032338
c001dd35:	89 15 4c 23 03 c0    	mov    DWORD PTR ds:0xc003234c,edx
c001dd3b:	1b 3d 3c 23 03 c0    	sbb    edi,DWORD PTR ds:0xc003233c
c001dd41:	89 35 40 23 03 c0    	mov    DWORD PTR ds:0xc0032340,esi
c001dd47:	a3 38 23 03 c0       	mov    ds:0xc0032338,eax
c001dd4c:	89 3d 44 23 03 c0    	mov    DWORD PTR ds:0xc0032344,edi
c001dd52:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001dd58:	89 15 3c 23 03 c0    	mov    DWORD PTR ds:0xc003233c,edx
c001dd5e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dd61:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001dd64:	01 c6                	add    esi,eax
c001dd66:	11 d7                	adc    edi,edx
c001dd68:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001dd6b:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001dd6e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001dd72:	5b                   	pop    ebx
c001dd73:	5e                   	pop    esi
c001dd74:	5f                   	pop    edi
c001dd75:	e9 e8 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dd7a:	31 c0                	xor    eax,eax
c001dd7c:	eb 8f                	jmp    c001dd0d <switchToThread(ThreadControlBlock*)+0x2b>
c001dd7e:	5b                   	pop    ebx
c001dd7f:	c7 05 00 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032300,0x1
c001dd89:	5e                   	pop    esi
c001dd8a:	5f                   	pop    edi
c001dd8b:	c3                   	ret    

c001dd8c <Process::addArgs(char**)>:
c001dd8c:	57                   	push   edi
c001dd8d:	56                   	push   esi
c001dd8e:	53                   	push   ebx
c001dd8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dd93:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dd97:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001dda1:	85 ff                	test   edi,edi
c001dda3:	74 3d                	je     c001dde2 <Process::addArgs(char**)+0x56>
c001dda5:	8b 07                	mov    eax,DWORD PTR [edi]
c001dda7:	85 c0                	test   eax,eax
c001dda9:	74 37                	je     c001dde2 <Process::addArgs(char**)+0x56>
c001ddab:	31 db                	xor    ebx,ebx
c001ddad:	83 ec 0c             	sub    esp,0xc
c001ddb0:	50                   	push   eax
c001ddb1:	e8 02 2a fe ff       	call   c00007b8 <strlen>
c001ddb6:	40                   	inc    eax
c001ddb7:	89 04 24             	mov    DWORD PTR [esp],eax
c001ddba:	e8 c7 1a ff ff       	call   c000f886 <malloc>
c001ddbf:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001ddc6:	5a                   	pop    edx
c001ddc7:	59                   	pop    ecx
c001ddc8:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001ddcb:	43                   	inc    ebx
c001ddcc:	50                   	push   eax
c001ddcd:	e8 86 2a fe ff       	call   c0000858 <strcpy>
c001ddd2:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001ddd8:	83 c4 10             	add    esp,0x10
c001dddb:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ddde:	85 c0                	test   eax,eax
c001dde0:	75 cb                	jne    c001ddad <Process::addArgs(char**)+0x21>
c001dde2:	5b                   	pop    ebx
c001dde3:	5e                   	pop    esi
c001dde4:	5f                   	pop    edi
c001dde5:	c3                   	ret    

c001dde6 <Process::Process(char const*, Process*, char**)>:
c001dde6:	56                   	push   esi
c001dde7:	53                   	push   ebx
c001dde8:	83 ec 14             	sub    esp,0x14
c001ddeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddef:	05 0c 02 00 00       	add    eax,0x20c
c001ddf4:	bb 07 00 00 00       	mov    ebx,0x7
c001ddf9:	89 c6                	mov    esi,eax
c001ddfb:	85 db                	test   ebx,ebx
c001ddfd:	78 12                	js     c001de11 <Process::Process(char const*, Process*, char**)+0x2b>
c001ddff:	83 ec 0c             	sub    esp,0xc
c001de02:	56                   	push   esi
c001de03:	e8 ca b6 00 00       	call   c00294d2 <ThreadControlBlock::ThreadControlBlock()>
c001de08:	83 c4 10             	add    esp,0x10
c001de0b:	83 c6 63             	add    esi,0x63
c001de0e:	4b                   	dec    ebx
c001de0f:	eb ea                	jmp    c001ddfb <Process::Process(char const*, Process*, char**)+0x15>
c001de11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de15:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001de1c:	83 ec 0c             	sub    esp,0xc
c001de1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de23:	e8 2e c8 ff ff       	call   c001a656 <Krnl::newProcessEnv(Process*)>
c001de28:	83 c4 10             	add    esp,0x10
c001de2b:	89 c2                	mov    edx,eax
c001de2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de31:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001de37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de3b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001de44:	a1 50 e3 02 c0       	mov    eax,ds:0xc002e350
c001de49:	8d 50 01             	lea    edx,[eax+0x1]
c001de4c:	89 15 50 e3 02 c0    	mov    DWORD PTR ds:0xc002e350,edx
c001de52:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001de56:	89 02                	mov    DWORD PTR [edx],eax
c001de58:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001de60:	83 ec 0c             	sub    esp,0xc
c001de63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001de67:	e8 1a 1a ff ff       	call   c000f886 <malloc>
c001de6c:	83 c4 10             	add    esp,0x10
c001de6f:	89 c3                	mov    ebx,eax
c001de71:	83 ec 08             	sub    esp,0x8
c001de74:	6a 00                	push   0x0
c001de76:	53                   	push   ebx
c001de77:	e8 a2 48 ff ff       	call   c001271e <VAS::VAS(bool)>
c001de7c:	83 c4 10             	add    esp,0x10
c001de7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de83:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001de89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de8d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001de97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de9b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de9f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dea9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001deaf:	85 c0                	test   eax,eax
c001deb1:	74 42                	je     c001def5 <Process::Process(char const*, Process*, char**)+0x10f>
c001deb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001deb7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001debd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dec7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001decd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ded1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ded7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dedd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dee1:	05 0c 01 00 00       	add    eax,0x10c
c001dee6:	83 ec 08             	sub    esp,0x8
c001dee9:	52                   	push   edx
c001deea:	50                   	push   eax
c001deeb:	e8 68 29 fe ff       	call   c0000858 <strcpy>
c001def0:	83 c4 10             	add    esp,0x10
c001def3:	eb 63                	jmp    c001df58 <Process::Process(char const*, Process*, char**)+0x172>
c001def5:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001defd:	83 ec 0c             	sub    esp,0xc
c001df00:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001df04:	e8 7d 19 ff ff       	call   c000f886 <malloc>
c001df09:	83 c4 10             	add    esp,0x10
c001df0c:	89 c3                	mov    ebx,eax
c001df0e:	83 ec 08             	sub    esp,0x8
c001df11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df15:	53                   	push   ebx
c001df16:	e8 3d 31 ff ff       	call   c0011058 <VgaText::VgaText(char const*)>
c001df1b:	83 c4 10             	add    esp,0x10
c001df1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df22:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001df28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df2c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001df32:	83 ec 0c             	sub    esp,0xc
c001df35:	50                   	push   eax
c001df36:	e8 54 26 ff ff       	call   c001058f <addToTerminalCycle(VgaText*)>
c001df3b:	83 c4 10             	add    esp,0x10
c001df3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df42:	05 0c 01 00 00       	add    eax,0x10c
c001df47:	83 ec 08             	sub    esp,0x8
c001df4a:	68 2f cb 02 c0       	push   0xc002cb2f
c001df4f:	50                   	push   eax
c001df50:	e8 03 29 fe ff       	call   c0000858 <strcpy>
c001df55:	83 c4 10             	add    esp,0x10
c001df58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df5c:	83 c0 0c             	add    eax,0xc
c001df5f:	83 ec 08             	sub    esp,0x8
c001df62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df66:	50                   	push   eax
c001df67:	e8 ec 28 fe ff       	call   c0000858 <strcpy>
c001df6c:	83 c4 10             	add    esp,0x10
c001df6f:	83 ec 08             	sub    esp,0x8
c001df72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001df76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df7a:	e8 0d fe ff ff       	call   c001dd8c <Process::addArgs(char**)>
c001df7f:	83 c4 10             	add    esp,0x10
c001df82:	83 ec 08             	sub    esp,0x8
c001df85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df8d:	e8 9d ed ff ff       	call   c001cd2f <Thr::loadProgramIntoMemory(Process*, char const*)>
c001df92:	83 c4 10             	add    esp,0x10
c001df95:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001df99:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001df9d:	83 f0 01             	xor    eax,0x1
c001dfa0:	88 c2                	mov    dl,al
c001dfa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfa6:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dfac:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dfb1:	83 ec 08             	sub    esp,0x8
c001dfb4:	50                   	push   eax
c001dfb5:	68 5c cc 02 c0       	push   0xc002cc5c
c001dfba:	e8 86 4e ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001dfbf:	83 c4 10             	add    esp,0x10
c001dfc2:	90                   	nop
c001dfc3:	83 c4 14             	add    esp,0x14
c001dfc6:	5b                   	pop    ebx
c001dfc7:	5e                   	pop    esi
c001dfc8:	c3                   	ret    
c001dfc9:	90                   	nop

c001dfca <Process::Process(bool, char const*, Process*, char**)>:
c001dfca:	56                   	push   esi
c001dfcb:	53                   	push   ebx
c001dfcc:	83 ec 24             	sub    esp,0x24
c001dfcf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dfd3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dfd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfdb:	05 0c 02 00 00       	add    eax,0x20c
c001dfe0:	bb 07 00 00 00       	mov    ebx,0x7
c001dfe5:	89 c6                	mov    esi,eax
c001dfe7:	85 db                	test   ebx,ebx
c001dfe9:	78 12                	js     c001dffd <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dfeb:	83 ec 0c             	sub    esp,0xc
c001dfee:	56                   	push   esi
c001dfef:	e8 de b4 00 00       	call   c00294d2 <ThreadControlBlock::ThreadControlBlock()>
c001dff4:	83 c4 10             	add    esp,0x10
c001dff7:	83 c6 63             	add    esi,0x63
c001dffa:	4b                   	dec    ebx
c001dffb:	eb ea                	jmp    c001dfe7 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dffd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e001:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e008:	83 ec 0c             	sub    esp,0xc
c001e00b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e00f:	e8 42 c6 ff ff       	call   c001a656 <Krnl::newProcessEnv(Process*)>
c001e014:	83 c4 10             	add    esp,0x10
c001e017:	89 c2                	mov    edx,eax
c001e019:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e01d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e023:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e027:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e030:	a1 50 e3 02 c0       	mov    eax,ds:0xc002e350
c001e035:	8d 50 01             	lea    edx,[eax+0x1]
c001e038:	89 15 50 e3 02 c0    	mov    DWORD PTR ds:0xc002e350,edx
c001e03e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e042:	89 02                	mov    DWORD PTR [edx],eax
c001e044:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e04c:	83 ec 0c             	sub    esp,0xc
c001e04f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e053:	e8 2e 18 ff ff       	call   c000f886 <malloc>
c001e058:	83 c4 10             	add    esp,0x10
c001e05b:	89 c3                	mov    ebx,eax
c001e05d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e062:	83 ec 08             	sub    esp,0x8
c001e065:	50                   	push   eax
c001e066:	53                   	push   ebx
c001e067:	e8 b2 46 ff ff       	call   c001271e <VAS::VAS(bool)>
c001e06c:	83 c4 10             	add    esp,0x10
c001e06f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e073:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e079:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e07d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e087:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e08b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e08f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e095:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e099:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e09f:	85 c0                	test   eax,eax
c001e0a1:	74 42                	je     c001e0e5 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e0a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0a7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e0ad:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e0b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0b7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0c1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e0c7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e0cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0d1:	05 0c 01 00 00       	add    eax,0x10c
c001e0d6:	83 ec 08             	sub    esp,0x8
c001e0d9:	52                   	push   edx
c001e0da:	50                   	push   eax
c001e0db:	e8 78 27 fe ff       	call   c0000858 <strcpy>
c001e0e0:	83 c4 10             	add    esp,0x10
c001e0e3:	eb 63                	jmp    c001e148 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e0e5:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e0ed:	83 ec 0c             	sub    esp,0xc
c001e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e0f4:	e8 8d 17 ff ff       	call   c000f886 <malloc>
c001e0f9:	83 c4 10             	add    esp,0x10
c001e0fc:	89 c3                	mov    ebx,eax
c001e0fe:	83 ec 08             	sub    esp,0x8
c001e101:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e105:	53                   	push   ebx
c001e106:	e8 4d 2f ff ff       	call   c0011058 <VgaText::VgaText(char const*)>
c001e10b:	83 c4 10             	add    esp,0x10
c001e10e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e112:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e11c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e122:	83 ec 0c             	sub    esp,0xc
c001e125:	50                   	push   eax
c001e126:	e8 64 24 ff ff       	call   c001058f <addToTerminalCycle(VgaText*)>
c001e12b:	83 c4 10             	add    esp,0x10
c001e12e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e132:	05 0c 01 00 00       	add    eax,0x10c
c001e137:	83 ec 08             	sub    esp,0x8
c001e13a:	68 2f cb 02 c0       	push   0xc002cb2f
c001e13f:	50                   	push   eax
c001e140:	e8 13 27 fe ff       	call   c0000858 <strcpy>
c001e145:	83 c4 10             	add    esp,0x10
c001e148:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e14c:	83 c0 0c             	add    eax,0xc
c001e14f:	83 ec 08             	sub    esp,0x8
c001e152:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e156:	50                   	push   eax
c001e157:	e8 fc 26 fe ff       	call   c0000858 <strcpy>
c001e15c:	83 c4 10             	add    esp,0x10
c001e15f:	83 ec 08             	sub    esp,0x8
c001e162:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e166:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e16a:	e8 1d fc ff ff       	call   c001dd8c <Process::addArgs(char**)>
c001e16f:	83 c4 10             	add    esp,0x10
c001e172:	90                   	nop
c001e173:	83 c4 24             	add    esp,0x24
c001e176:	5b                   	pop    ebx
c001e177:	5e                   	pop    esi
c001e178:	c3                   	ret    

c001e179 <taskStartupFunction>:
c001e179:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e17e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e181:	c3                   	ret    

c001e182 <Semaphore::Semaphore(int)>:
c001e182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e186:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e18a:	89 10                	mov    DWORD PTR [eax],edx
c001e18c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e190:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e197:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e19b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e1a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1a6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e1ad:	90                   	nop
c001e1ae:	c3                   	ret    
c001e1af:	90                   	nop

c001e1b0 <Mutex::Mutex()>:
c001e1b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1b4:	6a 01                	push   0x1
c001e1b6:	50                   	push   eax
c001e1b7:	e8 c6 ff ff ff       	call   c001e182 <Semaphore::Semaphore(int)>
c001e1bc:	83 c4 08             	add    esp,0x8
c001e1bf:	90                   	nop
c001e1c0:	c3                   	ret    
c001e1c1:	90                   	nop

c001e1c2 <Process::createThread(void (*)(void*), void*, int)>:
c001e1c2:	55                   	push   ebp
c001e1c3:	31 c9                	xor    ecx,ecx
c001e1c5:	57                   	push   edi
c001e1c6:	56                   	push   esi
c001e1c7:	53                   	push   ebx
c001e1c8:	83 ec 1c             	sub    esp,0x1c
c001e1cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e1cf:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e1d6:	89 f2                	mov    edx,esi
c001e1d8:	0f b7 c2             	movzx  eax,dx
c001e1db:	83 e2 01             	and    edx,0x1
c001e1de:	74 16                	je     c001e1f6 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e1e0:	d1 f8                	sar    eax,1
c001e1e2:	41                   	inc    ecx
c001e1e3:	89 c2                	mov    edx,eax
c001e1e5:	83 f9 10             	cmp    ecx,0x10
c001e1e8:	75 ee                	jne    c001e1d8 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e1ea:	83 c4 1c             	add    esp,0x1c
c001e1ed:	31 db                	xor    ebx,ebx
c001e1ef:	89 d8                	mov    eax,ebx
c001e1f1:	5b                   	pop    ebx
c001e1f2:	5e                   	pop    esi
c001e1f3:	5f                   	pop    edi
c001e1f4:	5d                   	pop    ebp
c001e1f5:	c3                   	ret    
c001e1f6:	b8 01 00 00 00       	mov    eax,0x1
c001e1fb:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e1fe:	d3 e0                	shl    eax,cl
c001e200:	09 c6                	or     esi,eax
c001e202:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e205:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e20c:	89 c6                	mov    esi,eax
c001e20e:	c1 e6 05             	shl    esi,0x5
c001e211:	01 f0                	add    eax,esi
c001e213:	01 d8                	add    eax,ebx
c001e215:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e21c:	75 0a                	jne    c001e228 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e21e:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e228:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e22e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e232:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e235:	01 ca                	add    edx,ecx
c001e237:	83 ec 08             	sub    esp,0x8
c001e23a:	89 d0                	mov    eax,edx
c001e23c:	c1 e0 05             	shl    eax,0x5
c001e23f:	01 d0                	add    eax,edx
c001e241:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e245:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e249:	01 d8                	add    eax,ebx
c001e24b:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e251:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e257:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e25d:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e263:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e269:	89 cd                	mov    ebp,ecx
c001e26b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e26f:	f7 dd                	neg    ebp
c001e271:	c1 e5 15             	shl    ebp,0x15
c001e274:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e27a:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e280:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e28a:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e290:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e29a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e2a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2a8:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e2af:	53                   	push   ebx
c001e2b0:	68 24 23 03 c0       	push   0xc0032324
c001e2b5:	e8 d2 af 00 00       	call   c002928c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2ba:	89 d8                	mov    eax,ebx
c001e2bc:	83 c4 10             	add    esp,0x10
c001e2bf:	83 c4 1c             	add    esp,0x1c
c001e2c2:	5b                   	pop    ebx
c001e2c3:	5e                   	pop    esi
c001e2c4:	5f                   	pop    edi
c001e2c5:	5d                   	pop    ebp
c001e2c6:	c3                   	ret    
c001e2c7:	90                   	nop

c001e2c8 <Process::createUserThread()>:
c001e2c8:	83 ec 0c             	sub    esp,0xc
c001e2cb:	68 80 00 00 00       	push   0x80
c001e2d0:	6a 00                	push   0x0
c001e2d2:	68 8c dc 01 c0       	push   0xc001dc8c
c001e2d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2db:	e8 e2 fe ff ff       	call   c001e1c2 <Process::createThread(void (*)(void*), void*, int)>
c001e2e0:	83 c4 1c             	add    esp,0x1c
c001e2e3:	c3                   	ret    

c001e2e4 <setupMultitasking(void (*)())>:
c001e2e4:	56                   	push   esi
c001e2e5:	53                   	push   ebx
c001e2e6:	51                   	push   ecx
c001e2e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e2eb:	eb 10                	jmp    c001e2fd <setupMultitasking(void (*)())+0x19>
c001e2ed:	83 ec 0c             	sub    esp,0xc
c001e2f0:	68 24 23 03 c0       	push   0xc0032324
c001e2f5:	e8 e4 ae 00 00       	call   c00291de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e2fa:	83 c4 10             	add    esp,0x10
c001e2fd:	83 ec 0c             	sub    esp,0xc
c001e300:	68 24 23 03 c0       	push   0xc0032324
c001e305:	e8 b0 ae 00 00       	call   c00291ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e30a:	83 c4 10             	add    esp,0x10
c001e30d:	84 c0                	test   al,al
c001e30f:	74 dc                	je     c001e2ed <setupMultitasking(void (*)())+0x9>
c001e311:	83 ec 0c             	sub    esp,0xc
c001e314:	68 3f 07 00 00       	push   0x73f
c001e319:	e8 68 15 ff ff       	call   c000f886 <malloc>
c001e31e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e325:	89 c3                	mov    ebx,eax
c001e327:	6a 00                	push   0x0
c001e329:	68 33 cb 02 c0       	push   0xc002cb33
c001e32e:	6a 01                	push   0x1
c001e330:	50                   	push   eax
c001e331:	e8 94 fc ff ff       	call   c001dfca <Process::Process(bool, char const*, Process*, char**)>
c001e336:	83 c4 18             	add    esp,0x18
c001e339:	89 1d 30 23 03 c0    	mov    DWORD PTR ds:0xc0032330,ebx
c001e33f:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e345:	68 84 cc 02 c0       	push   0xc002cc84
c001e34a:	e8 f6 4a ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001e34f:	58                   	pop    eax
c001e350:	5a                   	pop    edx
c001e351:	6a 63                	push   0x63
c001e353:	68 b8 cc 02 c0       	push   0xc002ccb8
c001e358:	e8 e8 4a ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001e35d:	59                   	pop    ecx
c001e35e:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e364:	e8 f7 28 ff ff       	call   c0010c60 <setActiveTerminal(VgaText*)>
c001e369:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e371:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e37b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e381:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e384:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e38e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e394:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e39a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e3a4:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e3ae:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e3b8:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e3be:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e3c8:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e3ce:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e3d8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e3de:	58                   	pop    eax
c001e3df:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e3e5:	5a                   	pop    edx
c001e3e6:	68 2f cb 02 c0       	push   0xc002cb2f
c001e3eb:	50                   	push   eax
c001e3ec:	e8 67 24 fe ff       	call   c0000858 <strcpy>
c001e3f1:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e3f8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e3fc:	83 c4 14             	add    esp,0x14
c001e3ff:	5b                   	pop    ebx
c001e400:	5e                   	pop    esi
c001e401:	e9 4e 1f fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e406 <schedule()>:
c001e406:	a1 04 23 03 c0       	mov    eax,ds:0xc0032304
c001e40b:	85 c0                	test   eax,eax
c001e40d:	74 0b                	je     c001e41a <schedule()+0x14>
c001e40f:	c7 05 00 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032300,0x1
c001e419:	c3                   	ret    
c001e41a:	53                   	push   ebx
c001e41b:	83 ec 14             	sub    esp,0x14
c001e41e:	68 24 23 03 c0       	push   0xc0032324
c001e423:	e8 92 ad 00 00       	call   c00291ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e428:	83 c4 10             	add    esp,0x10
c001e42b:	84 c0                	test   al,al
c001e42d:	75 38                	jne    c001e467 <schedule()+0x61>
c001e42f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e434:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e437:	4a                   	dec    edx
c001e438:	74 32                	je     c001e46c <schedule()+0x66>
c001e43a:	83 ec 0c             	sub    esp,0xc
c001e43d:	68 24 23 03 c0       	push   0xc0032324
c001e442:	e8 8f ad 00 00       	call   c00291d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e447:	c7 04 24 24 23 03 c0 	mov    DWORD PTR [esp],0xc0032324
c001e44e:	89 c3                	mov    ebx,eax
c001e450:	e8 89 ad 00 00       	call   c00291de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e455:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e45c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e45f:	e8 7e f8 ff ff       	call   c001dce2 <switchToThread(ThreadControlBlock*)>
c001e464:	83 c4 10             	add    esp,0x10
c001e467:	83 c4 08             	add    esp,0x8
c001e46a:	5b                   	pop    ebx
c001e46b:	c3                   	ret    
c001e46c:	83 ec 08             	sub    esp,0x8
c001e46f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e476:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e47c:	68 24 23 03 c0       	push   0xc0032324
c001e481:	e8 06 ae 00 00       	call   c002928c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e486:	83 c4 10             	add    esp,0x10
c001e489:	eb af                	jmp    c001e43a <schedule()+0x34>
c001e48b:	90                   	nop

c001e48c <Semaphore::tryAcquire()>:
c001e48c:	53                   	push   ebx
c001e48d:	83 ec 08             	sub    esp,0x8
c001e490:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e494:	fa                   	cli    
c001e495:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001e49a:	8d 50 01             	lea    edx,[eax+0x1]
c001e49d:	89 15 08 23 03 c0    	mov    DWORD PTR ds:0xc0032308,edx
c001e4a3:	8b 15 04 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032304
c001e4a9:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e4ac:	89 1d 04 23 03 c0    	mov    DWORD PTR ds:0xc0032304,ebx
c001e4b2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e4b5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e4b7:	7c 2a                	jl     c001e4e3 <Semaphore::tryAcquire()+0x57>
c001e4b9:	89 15 04 23 03 c0    	mov    DWORD PTR ds:0xc0032304,edx
c001e4bf:	85 d2                	test   edx,edx
c001e4c1:	75 0a                	jne    c001e4cd <Semaphore::tryAcquire()+0x41>
c001e4c3:	8b 15 00 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032300
c001e4c9:	85 d2                	test   edx,edx
c001e4cb:	75 5b                	jne    c001e528 <Semaphore::tryAcquire()+0x9c>
c001e4cd:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001e4d2:	85 c0                	test   eax,eax
c001e4d4:	74 07                	je     c001e4dd <Semaphore::tryAcquire()+0x51>
c001e4d6:	31 c0                	xor    eax,eax
c001e4d8:	83 c4 08             	add    esp,0x8
c001e4db:	5b                   	pop    ebx
c001e4dc:	c3                   	ret    
c001e4dd:	fb                   	sti    
c001e4de:	83 c4 08             	add    esp,0x8
c001e4e1:	5b                   	pop    ebx
c001e4e2:	c3                   	ret    
c001e4e3:	43                   	inc    ebx
c001e4e4:	89 15 04 23 03 c0    	mov    DWORD PTR ds:0xc0032304,edx
c001e4ea:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e4ed:	85 d2                	test   edx,edx
c001e4ef:	75 1f                	jne    c001e510 <Semaphore::tryAcquire()+0x84>
c001e4f1:	8b 0d 00 23 03 c0    	mov    ecx,DWORD PTR ds:0xc0032300
c001e4f7:	85 c9                	test   ecx,ecx
c001e4f9:	74 15                	je     c001e510 <Semaphore::tryAcquire()+0x84>
c001e4fb:	c7 05 00 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032300,0x0
c001e505:	e8 fc fe ff ff       	call   c001e406 <schedule()>
c001e50a:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001e50f:	48                   	dec    eax
c001e510:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001e515:	85 c0                	test   eax,eax
c001e517:	75 08                	jne    c001e521 <Semaphore::tryAcquire()+0x95>
c001e519:	fb                   	sti    
c001e51a:	b0 01                	mov    al,0x1
c001e51c:	83 c4 08             	add    esp,0x8
c001e51f:	5b                   	pop    ebx
c001e520:	c3                   	ret    
c001e521:	b0 01                	mov    al,0x1
c001e523:	83 c4 08             	add    esp,0x8
c001e526:	5b                   	pop    ebx
c001e527:	c3                   	ret    
c001e528:	c7 05 00 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032300,0x0
c001e532:	e8 cf fe ff ff       	call   c001e406 <schedule()>
c001e537:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001e53c:	48                   	dec    eax
c001e53d:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001e542:	85 c0                	test   eax,eax
c001e544:	75 90                	jne    c001e4d6 <Semaphore::tryAcquire()+0x4a>
c001e546:	eb 95                	jmp    c001e4dd <Semaphore::tryAcquire()+0x51>

c001e548 <Semaphore::assertLocked(char const*)>:
c001e548:	83 ec 0c             	sub    esp,0xc
c001e54b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e54f:	fa                   	cli    
c001e550:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001e556:	a1 04 23 03 c0       	mov    eax,ds:0xc0032304
c001e55b:	8d 48 01             	lea    ecx,[eax+0x1]
c001e55e:	89 0d 04 23 03 c0    	mov    DWORD PTR ds:0xc0032304,ecx
c001e564:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e566:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e569:	7c 24                	jl     c001e58f <Semaphore::assertLocked(char const*)+0x47>
c001e56b:	a3 04 23 03 c0       	mov    ds:0xc0032304,eax
c001e570:	85 c0                	test   eax,eax
c001e572:	75 09                	jne    c001e57d <Semaphore::assertLocked(char const*)+0x35>
c001e574:	a1 00 23 03 c0       	mov    eax,ds:0xc0032300
c001e579:	85 c0                	test   eax,eax
c001e57b:	75 29                	jne    c001e5a6 <Semaphore::assertLocked(char const*)+0x5e>
c001e57d:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001e582:	48                   	dec    eax
c001e583:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001e588:	75 01                	jne    c001e58b <Semaphore::assertLocked(char const*)+0x43>
c001e58a:	fb                   	sti    
c001e58b:	83 c4 0c             	add    esp,0xc
c001e58e:	c3                   	ret    
c001e58f:	83 ec 0c             	sub    esp,0xc
c001e592:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e596:	e8 6a c2 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001e59b:	a1 04 23 03 c0       	mov    eax,ds:0xc0032304
c001e5a0:	83 c4 10             	add    esp,0x10
c001e5a3:	48                   	dec    eax
c001e5a4:	eb c5                	jmp    c001e56b <Semaphore::assertLocked(char const*)+0x23>
c001e5a6:	c7 05 00 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032300,0x0
c001e5b0:	e8 51 fe ff ff       	call   c001e406 <schedule()>
c001e5b5:	eb c6                	jmp    c001e57d <Semaphore::assertLocked(char const*)+0x35>

c001e5b7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e5b7:	83 ec 14             	sub    esp,0x14
c001e5ba:	ff 35 08 23 03 c0    	push   DWORD PTR ds:0xc0032308
c001e5c0:	68 dc cc 02 c0       	push   0xc002ccdc
c001e5c5:	e8 7b 48 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001e5ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e5cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e5d3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e5d6:	e8 2b fe ff ff       	call   c001e406 <schedule()>
c001e5db:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001e5e0:	83 c4 10             	add    esp,0x10
c001e5e3:	48                   	dec    eax
c001e5e4:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001e5e9:	85 c0                	test   eax,eax
c001e5eb:	75 06                	jne    c001e5f3 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e5ed:	fb                   	sti    
c001e5ee:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001e5f3:	83 ec 08             	sub    esp,0x8
c001e5f6:	50                   	push   eax
c001e5f7:	68 10 cd 02 c0       	push   0xc002cd10
c001e5fc:	e8 44 48 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001e601:	83 c4 1c             	add    esp,0x1c
c001e604:	c3                   	ret    

c001e605 <blockTask(TaskState)>:
c001e605:	83 ec 0c             	sub    esp,0xc
c001e608:	fa                   	cli    
c001e609:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001e60f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e613:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e618:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e61b:	e8 e6 fd ff ff       	call   c001e406 <schedule()>
c001e620:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001e625:	48                   	dec    eax
c001e626:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001e62b:	75 01                	jne    c001e62e <blockTask(TaskState)+0x29>
c001e62d:	fb                   	sti    
c001e62e:	83 c4 0c             	add    esp,0xc
c001e631:	c3                   	ret    

c001e632 <waitTask(int, int*, int)>:
c001e632:	83 ec 18             	sub    esp,0x18
c001e635:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e63e:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e641:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e645:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e64a:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e64d:	6a 07                	push   0x7
c001e64f:	e8 b1 ff ff ff       	call   c001e605 <blockTask(TaskState)>
c001e654:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e659:	83 c4 10             	add    esp,0x10
c001e65c:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e65f:	85 d2                	test   edx,edx
c001e661:	74 0a                	je     c001e66d <waitTask(int, int*, int)+0x3b>
c001e663:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e666:	89 02                	mov    DWORD PTR [edx],eax
c001e668:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e66d:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e670:	83 c4 0c             	add    esp,0xc
c001e673:	c3                   	ret    

c001e674 <nanoSleepUntil(unsigned long long)>:
c001e674:	83 ec 0c             	sub    esp,0xc
c001e677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e67b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e67f:	3b 05 50 f4 02 c0    	cmp    eax,DWORD PTR ds:0xc002f450
c001e685:	89 d1                	mov    ecx,edx
c001e687:	1b 0d 54 f4 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f454
c001e68d:	73 04                	jae    c001e693 <nanoSleepUntil(unsigned long long)+0x1f>
c001e68f:	83 c4 0c             	add    esp,0xc
c001e692:	c3                   	ret    
c001e693:	fa                   	cli    
c001e694:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001e69a:	83 ec 08             	sub    esp,0x8
c001e69d:	ff 05 04 23 03 c0    	inc    DWORD PTR ds:0xc0032304
c001e6a3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e6a9:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e6ac:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e6af:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e6b5:	68 18 23 03 c0       	push   0xc0032318
c001e6ba:	e8 cd ab 00 00       	call   c002928c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e6bf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e6c6:	e8 3a ff ff ff       	call   c001e605 <blockTask(TaskState)>
c001e6cb:	a1 04 23 03 c0       	mov    eax,ds:0xc0032304
c001e6d0:	83 c4 10             	add    esp,0x10
c001e6d3:	48                   	dec    eax
c001e6d4:	a3 04 23 03 c0       	mov    ds:0xc0032304,eax
c001e6d9:	85 c0                	test   eax,eax
c001e6db:	75 09                	jne    c001e6e6 <nanoSleepUntil(unsigned long long)+0x72>
c001e6dd:	a1 00 23 03 c0       	mov    eax,ds:0xc0032300
c001e6e2:	85 c0                	test   eax,eax
c001e6e4:	75 12                	jne    c001e6f8 <nanoSleepUntil(unsigned long long)+0x84>
c001e6e6:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001e6eb:	48                   	dec    eax
c001e6ec:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001e6f1:	75 9c                	jne    c001e68f <nanoSleepUntil(unsigned long long)+0x1b>
c001e6f3:	fb                   	sti    
c001e6f4:	83 c4 0c             	add    esp,0xc
c001e6f7:	c3                   	ret    
c001e6f8:	c7 05 00 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032300,0x0
c001e702:	e8 ff fc ff ff       	call   c001e406 <schedule()>
c001e707:	eb dd                	jmp    c001e6e6 <nanoSleepUntil(unsigned long long)+0x72>

c001e709 <nanoSleep(unsigned long long)>:
c001e709:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c001e70e:	8b 15 54 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f454
c001e714:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e718:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e71c:	e9 53 ff ff ff       	jmp    c001e674 <nanoSleepUntil(unsigned long long)>

c001e721 <sleep(unsigned long long)>:
c001e721:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e729:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e72e:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e732:	01 ca                	add    edx,ecx
c001e734:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e738:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e73c:	eb cb                	jmp    c001e709 <nanoSleep(unsigned long long)>

c001e73e <Semaphore::acquire()>:
c001e73e:	83 ec 0c             	sub    esp,0xc
c001e741:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e745:	fa                   	cli    
c001e746:	a1 04 23 03 c0       	mov    eax,ds:0xc0032304
c001e74b:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001e751:	8d 48 01             	lea    ecx,[eax+0x1]
c001e754:	89 0d 04 23 03 c0    	mov    DWORD PTR ds:0xc0032304,ecx
c001e75a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e75d:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e75f:	7d 28                	jge    c001e789 <Semaphore::acquire()+0x4b>
c001e761:	41                   	inc    ecx
c001e762:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e765:	a3 04 23 03 c0       	mov    ds:0xc0032304,eax
c001e76a:	85 c0                	test   eax,eax
c001e76c:	75 09                	jne    c001e777 <Semaphore::acquire()+0x39>
c001e76e:	a1 00 23 03 c0       	mov    eax,ds:0xc0032300
c001e773:	85 c0                	test   eax,eax
c001e775:	75 4e                	jne    c001e7c5 <Semaphore::acquire()+0x87>
c001e777:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001e77c:	48                   	dec    eax
c001e77d:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001e782:	75 01                	jne    c001e785 <Semaphore::acquire()+0x47>
c001e784:	fb                   	sti    
c001e785:	83 c4 0c             	add    esp,0xc
c001e788:	c3                   	ret    
c001e789:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e78e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e795:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e798:	85 c9                	test   ecx,ecx
c001e79a:	74 3a                	je     c001e7d6 <Semaphore::acquire()+0x98>
c001e79c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e79f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e7a5:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e7a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7ad:	83 ec 0c             	sub    esp,0xc
c001e7b0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e7b3:	6a 05                	push   0x5
c001e7b5:	e8 4b fe ff ff       	call   c001e605 <blockTask(TaskState)>
c001e7ba:	a1 04 23 03 c0       	mov    eax,ds:0xc0032304
c001e7bf:	83 c4 10             	add    esp,0x10
c001e7c2:	48                   	dec    eax
c001e7c3:	eb a0                	jmp    c001e765 <Semaphore::acquire()+0x27>
c001e7c5:	c7 05 00 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032300,0x0
c001e7cf:	e8 32 fc ff ff       	call   c001e406 <schedule()>
c001e7d4:	eb a1                	jmp    c001e777 <Semaphore::acquire()+0x39>
c001e7d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7db:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e7de:	eb c8                	jmp    c001e7a8 <Semaphore::acquire()+0x6a>

c001e7e0 <taskReturned>:
c001e7e0:	83 ec 18             	sub    esp,0x18
c001e7e3:	68 44 cd 02 c0       	push   0xc002cd44
c001e7e8:	e8 18 c0 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001e7ed:	83 c4 10             	add    esp,0x10
c001e7f0:	83 ec 0c             	sub    esp,0xc
c001e7f3:	6a 02                	push   0x2
c001e7f5:	e8 0b fe ff ff       	call   c001e605 <blockTask(TaskState)>
c001e7fa:	fa                   	cli    
c001e7fb:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001e801:	e8 00 fc ff ff       	call   c001e406 <schedule()>
c001e806:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001e80b:	83 c4 10             	add    esp,0x10
c001e80e:	48                   	dec    eax
c001e80f:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001e814:	85 c0                	test   eax,eax
c001e816:	75 d8                	jne    c001e7f0 <taskReturned+0x10>
c001e818:	fb                   	sti    
c001e819:	eb d5                	jmp    c001e7f0 <taskReturned+0x10>

c001e81b <Thr::processFromPID(int)>:
c001e81b:	57                   	push   edi
c001e81c:	56                   	push   esi
c001e81d:	53                   	push   ebx
c001e81e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e822:	83 ec 0c             	sub    esp,0xc
c001e825:	68 3a cb 02 c0       	push   0xc002cb3a
c001e82a:	e8 16 46 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001e82f:	fa                   	cli    
c001e830:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001e836:	c7 04 24 24 23 03 c0 	mov    DWORD PTR [esp],0xc0032324
c001e83d:	e8 94 a9 00 00       	call   c00291d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e842:	83 c4 10             	add    esp,0x10
c001e845:	89 c7                	mov    edi,eax
c001e847:	eb 14                	jmp    c001e85d <Thr::processFromPID(int)+0x42>
c001e849:	83 ec 0c             	sub    esp,0xc
c001e84c:	68 24 23 03 c0       	push   0xc0032324
c001e851:	e8 80 a9 00 00       	call   c00291d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e856:	83 c4 10             	add    esp,0x10
c001e859:	39 f8                	cmp    eax,edi
c001e85b:	74 49                	je     c001e8a6 <Thr::processFromPID(int)+0x8b>
c001e85d:	83 ec 0c             	sub    esp,0xc
c001e860:	68 24 23 03 c0       	push   0xc0032324
c001e865:	e8 6c a9 00 00       	call   c00291d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e86a:	c7 04 24 24 23 03 c0 	mov    DWORD PTR [esp],0xc0032324
c001e871:	89 c3                	mov    ebx,eax
c001e873:	e8 66 a9 00 00       	call   c00291de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e878:	58                   	pop    eax
c001e879:	5a                   	pop    edx
c001e87a:	53                   	push   ebx
c001e87b:	68 24 23 03 c0       	push   0xc0032324
c001e880:	e8 07 aa 00 00       	call   c002928c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e885:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e888:	83 c4 10             	add    esp,0x10
c001e88b:	39 30                	cmp    DWORD PTR [eax],esi
c001e88d:	75 ba                	jne    c001e849 <Thr::processFromPID(int)+0x2e>
c001e88f:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001e894:	48                   	dec    eax
c001e895:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001e89a:	74 07                	je     c001e8a3 <Thr::processFromPID(int)+0x88>
c001e89c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e89f:	5b                   	pop    ebx
c001e8a0:	5e                   	pop    esi
c001e8a1:	5f                   	pop    edi
c001e8a2:	c3                   	ret    
c001e8a3:	fb                   	sti    
c001e8a4:	eb f6                	jmp    c001e89c <Thr::processFromPID(int)+0x81>
c001e8a6:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001e8ab:	48                   	dec    eax
c001e8ac:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001e8b1:	75 01                	jne    c001e8b4 <Thr::processFromPID(int)+0x99>
c001e8b3:	fb                   	sti    
c001e8b4:	83 ec 0c             	sub    esp,0xc
c001e8b7:	68 55 cb 02 c0       	push   0xc002cb55
c001e8bc:	e8 84 45 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001e8c1:	83 c4 10             	add    esp,0x10
c001e8c4:	31 c0                	xor    eax,eax
c001e8c6:	5b                   	pop    ebx
c001e8c7:	5e                   	pop    esi
c001e8c8:	5f                   	pop    edi
c001e8c9:	c3                   	ret    

c001e8ca <unblockTask(ThreadControlBlock*)>:
c001e8ca:	53                   	push   ebx
c001e8cb:	83 ec 08             	sub    esp,0x8
c001e8ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e8d2:	fa                   	cli    
c001e8d3:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001e8d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e8dc:	85 c0                	test   eax,eax
c001e8de:	74 66                	je     c001e946 <unblockTask(ThreadControlBlock*)+0x7c>
c001e8e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e8e3:	48                   	dec    eax
c001e8e4:	74 31                	je     c001e917 <unblockTask(ThreadControlBlock*)+0x4d>
c001e8e6:	83 ec 0c             	sub    esp,0xc
c001e8e9:	68 24 23 03 c0       	push   0xc0032324
c001e8ee:	e8 e3 a8 00 00       	call   c00291d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8f3:	83 c4 10             	add    esp,0x10
c001e8f6:	85 c0                	test   eax,eax
c001e8f8:	75 17                	jne    c001e911 <unblockTask(ThreadControlBlock*)+0x47>
c001e8fa:	eb 68                	jmp    c001e964 <unblockTask(ThreadControlBlock*)+0x9a>
c001e8fc:	83 ec 08             	sub    esp,0x8
c001e8ff:	50                   	push   eax
c001e900:	68 24 23 03 c0       	push   0xc0032324
c001e905:	e8 6a ac 00 00       	call   c0029574 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e90a:	83 c4 10             	add    esp,0x10
c001e90d:	85 c0                	test   eax,eax
c001e90f:	74 53                	je     c001e964 <unblockTask(ThreadControlBlock*)+0x9a>
c001e911:	39 c3                	cmp    ebx,eax
c001e913:	75 e7                	jne    c001e8fc <unblockTask(ThreadControlBlock*)+0x32>
c001e915:	eb 1c                	jmp    c001e933 <unblockTask(ThreadControlBlock*)+0x69>
c001e917:	83 ec 0c             	sub    esp,0xc
c001e91a:	68 34 ce 02 c0       	push   0xc002ce34
c001e91f:	e8 21 45 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001e924:	c7 04 24 c0 cd 02 c0 	mov    DWORD PTR [esp],0xc002cdc0
c001e92b:	e8 15 45 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001e930:	83 c4 10             	add    esp,0x10
c001e933:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001e938:	48                   	dec    eax
c001e939:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001e93e:	75 01                	jne    c001e941 <unblockTask(ThreadControlBlock*)+0x77>
c001e940:	fb                   	sti    
c001e941:	83 c4 08             	add    esp,0x8
c001e944:	5b                   	pop    ebx
c001e945:	c3                   	ret    
c001e946:	83 ec 0c             	sub    esp,0xc
c001e949:	68 78 cd 02 c0       	push   0xc002cd78
c001e94e:	e8 f2 44 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001e953:	c7 04 24 c0 cd 02 c0 	mov    DWORD PTR [esp],0xc002cdc0
c001e95a:	e8 e6 44 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001e95f:	83 c4 10             	add    esp,0x10
c001e962:	eb cf                	jmp    c001e933 <unblockTask(ThreadControlBlock*)+0x69>
c001e964:	83 ec 08             	sub    esp,0x8
c001e967:	53                   	push   ebx
c001e968:	68 24 23 03 c0       	push   0xc0032324
c001e96d:	e8 1a a9 00 00       	call   c002928c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e972:	83 c4 10             	add    esp,0x10
c001e975:	eb bc                	jmp    c001e933 <unblockTask(ThreadControlBlock*)+0x69>

c001e977 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e977:	55                   	push   ebp
c001e978:	57                   	push   edi
c001e979:	56                   	push   esi
c001e97a:	53                   	push   ebx
c001e97b:	83 ec 1c             	sub    esp,0x1c
c001e97e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e982:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e985:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e98b:	85 ff                	test   edi,edi
c001e98d:	7e 20                	jle    c001e9af <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e98f:	31 f6                	xor    esi,esi
c001e991:	83 ec 0c             	sub    esp,0xc
c001e994:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e99b:	46                   	inc    esi
c001e99c:	e8 f5 0e ff ff       	call   c000f896 <free>
c001e9a1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e9a4:	83 c4 10             	add    esp,0x10
c001e9a7:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e9ad:	7f e2                	jg     c001e991 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e9af:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e9b9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e9be:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e9c1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e9c4:	d3 c0                	rol    eax,cl
c001e9c6:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e9cd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e9d0:	89 f7                	mov    edi,esi
c001e9d2:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e9da:	0f 85 74 01 00 00    	jne    c001eb54 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e9e0:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e9e6:	85 ed                	test   ebp,ebp
c001e9e8:	74 1b                	je     c001ea05 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e9ea:	83 ec 0c             	sub    esp,0xc
c001e9ed:	55                   	push   ebp
c001e9ee:	e8 7f bb ff ff       	call   c001a572 <EnvVarContainer::~EnvVarContainer()>
c001e9f3:	59                   	pop    ecx
c001e9f4:	5e                   	pop    esi
c001e9f5:	6a 0c                	push   0xc
c001e9f7:	55                   	push   ebp
c001e9f8:	e8 68 43 ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c001e9fd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea00:	83 c4 10             	add    esp,0x10
c001ea03:	89 f7                	mov    edi,esi
c001ea05:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ea0b:	85 c0                	test   eax,eax
c001ea0d:	0f 84 aa 00 00 00    	je     c001eabd <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ea13:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ea16:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ea1a:	31 c9                	xor    ecx,ecx
c001ea1c:	eb 10                	jmp    c001ea2e <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ea1e:	41                   	inc    ecx
c001ea1f:	83 f9 10             	cmp    ecx,0x10
c001ea22:	0f 84 95 00 00 00    	je     c001eabd <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ea28:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ea2e:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001ea35:	d3 fa                	sar    edx,cl
c001ea37:	83 e2 01             	and    edx,0x1
c001ea3a:	74 e2                	je     c001ea1e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ea3c:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ea3f:	01 ca                	add    edx,ecx
c001ea41:	89 d5                	mov    ebp,edx
c001ea43:	c1 e5 05             	shl    ebp,0x5
c001ea46:	01 ea                	add    edx,ebp
c001ea48:	01 d0                	add    eax,edx
c001ea4a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001ea50:	83 fd 07             	cmp    ebp,0x7
c001ea53:	75 c9                	jne    c001ea1e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ea55:	05 40 02 00 00       	add    eax,0x240
c001ea5a:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001ea5d:	83 fd ff             	cmp    ebp,0xffffffff
c001ea60:	0f 8c 08 01 00 00    	jl     c001eb6e <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001ea66:	0f 84 b9 01 00 00    	je     c001ec25 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001ea6c:	85 ed                	test   ebp,ebp
c001ea6e:	0f 84 a0 01 00 00    	je     c001ec14 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001ea74:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001ea76:	75 a6                	jne    c001ea1e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ea78:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ea7e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ea82:	01 d0                	add    eax,edx
c001ea84:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001ea88:	83 ec 0c             	sub    esp,0xc
c001ea8b:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001ea91:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea94:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ea9a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001eaa1:	50                   	push   eax
c001eaa2:	e8 23 fe ff ff       	call   c001e8ca <unblockTask(ThreadControlBlock*)>
c001eaa7:	83 c4 10             	add    esp,0x10
c001eaaa:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eaad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eab1:	89 f7                	mov    edi,esi
c001eab3:	41                   	inc    ecx
c001eab4:	83 f9 10             	cmp    ecx,0x10
c001eab7:	0f 85 6b ff ff ff    	jne    c001ea28 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001eabd:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001eac3:	85 c0                	test   eax,eax
c001eac5:	74 5d                	je     c001eb24 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eac7:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001eacd:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001ead3:	74 4f                	je     c001eb24 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ead5:	83 ec 0c             	sub    esp,0xc
c001ead8:	68 24 23 03 c0       	push   0xc0032324
c001eadd:	e8 f4 a6 00 00       	call   c00291d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eae2:	c7 04 24 24 23 03 c0 	mov    DWORD PTR [esp],0xc0032324
c001eae9:	89 c7                	mov    edi,eax
c001eaeb:	e8 ca a6 00 00       	call   c00291ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001eaf0:	83 c4 10             	add    esp,0x10
c001eaf3:	84 c0                	test   al,al
c001eaf5:	0f 84 e4 00 00 00    	je     c001ebdf <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001eafb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eafe:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001eb04:	85 d2                	test   edx,edx
c001eb06:	74 0f                	je     c001eb17 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001eb08:	83 ec 0c             	sub    esp,0xc
c001eb0b:	8b 02                	mov    eax,DWORD PTR [edx]
c001eb0d:	52                   	push   edx
c001eb0e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eb11:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb14:	83 c4 10             	add    esp,0x10
c001eb17:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001eb21:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001eb24:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001eb2a:	85 db                	test   ebx,ebx
c001eb2c:	74 16                	je     c001eb44 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001eb2e:	83 ec 0c             	sub    esp,0xc
c001eb31:	53                   	push   ebx
c001eb32:	e8 c3 35 ff ff       	call   c00120fa <VAS::~VAS()>
c001eb37:	58                   	pop    eax
c001eb38:	5a                   	pop    edx
c001eb39:	6a 14                	push   0x14
c001eb3b:	53                   	push   ebx
c001eb3c:	e8 24 42 ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c001eb41:	83 c4 10             	add    esp,0x10
c001eb44:	83 ec 0c             	sub    esp,0xc
c001eb47:	68 6c cb 02 c0       	push   0xc002cb6c
c001eb4c:	e8 f4 42 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001eb51:	83 c4 10             	add    esp,0x10
c001eb54:	83 ec 08             	sub    esp,0x8
c001eb57:	68 3f 07 00 00       	push   0x73f
c001eb5c:	68 7a cb 02 c0       	push   0xc002cb7a
c001eb61:	e8 df 42 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001eb66:	83 c4 2c             	add    esp,0x2c
c001eb69:	5b                   	pop    ebx
c001eb6a:	5e                   	pop    esi
c001eb6b:	5f                   	pop    edi
c001eb6c:	5d                   	pop    ebp
c001eb6d:	c3                   	ret    
c001eb6e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eb72:	83 ec 0c             	sub    esp,0xc
c001eb75:	68 78 ce 02 c0       	push   0xc002ce78
c001eb7a:	e8 86 bc ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001eb7f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eb82:	83 c4 10             	add    esp,0x10
c001eb85:	89 f7                	mov    edi,esi
c001eb87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eb8b:	e9 8e fe ff ff       	jmp    c001ea1e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eb90:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001eb96:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001eb9c:	75 1c                	jne    c001ebba <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001eb9e:	83 ec 0c             	sub    esp,0xc
c001eba1:	68 e0 ce 02 c0       	push   0xc002cee0
c001eba6:	e8 9a 42 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001ebab:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ebb2:	e8 4e fa ff ff       	call   c001e605 <blockTask(TaskState)>
c001ebb7:	83 c4 10             	add    esp,0x10
c001ebba:	83 ec 08             	sub    esp,0x8
c001ebbd:	56                   	push   esi
c001ebbe:	68 24 23 03 c0       	push   0xc0032324
c001ebc3:	e8 c4 a6 00 00       	call   c002928c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ebc8:	c7 04 24 24 23 03 c0 	mov    DWORD PTR [esp],0xc0032324
c001ebcf:	e8 02 a6 00 00       	call   c00291d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ebd4:	83 c4 10             	add    esp,0x10
c001ebd7:	39 f8                	cmp    eax,edi
c001ebd9:	0f 84 1c ff ff ff    	je     c001eafb <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ebdf:	83 ec 0c             	sub    esp,0xc
c001ebe2:	68 24 23 03 c0       	push   0xc0032324
c001ebe7:	e8 ea a5 00 00       	call   c00291d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ebec:	c7 04 24 24 23 03 c0 	mov    DWORD PTR [esp],0xc0032324
c001ebf3:	89 c6                	mov    esi,eax
c001ebf5:	e8 e4 a5 00 00       	call   c00291de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ebfa:	83 c4 10             	add    esp,0x10
c001ebfd:	39 f3                	cmp    ebx,esi
c001ebff:	74 b9                	je     c001ebba <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec01:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ec04:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec07:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ec0d:	75 ab                	jne    c001ebba <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec0f:	e9 7c ff ff ff       	jmp    c001eb90 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001ec14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec18:	83 ec 0c             	sub    esp,0xc
c001ec1b:	68 ac ce 02 c0       	push   0xc002ceac
c001ec20:	e9 55 ff ff ff       	jmp    c001eb7a <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001ec25:	8b 36                	mov    esi,DWORD PTR [esi]
c001ec27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec2b:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ec2e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec31:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ec37:	01 d7                	add    edi,edx
c001ec39:	89 f8                	mov    eax,edi
c001ec3b:	e9 44 fe ff ff       	jmp    c001ea84 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ec40 <cleanerTaskFunction(void*)>:
c001ec40:	53                   	push   ebx
c001ec41:	83 ec 08             	sub    esp,0x8
c001ec44:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001ec49:	48                   	dec    eax
c001ec4a:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001ec4f:	75 01                	jne    c001ec52 <cleanerTaskFunction(void*)+0x12>
c001ec51:	fb                   	sti    
c001ec52:	fa                   	cli    
c001ec53:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001ec58:	80 3d ec 22 03 c0 00 	cmp    BYTE PTR ds:0xc00322ec,0x0
c001ec5f:	8d 50 01             	lea    edx,[eax+0x1]
c001ec62:	89 15 08 23 03 c0    	mov    DWORD PTR ds:0xc0032308,edx
c001ec68:	0f 84 b9 00 00 00    	je     c001ed27 <cleanerTaskFunction(void*)+0xe7>
c001ec6e:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001ec73:	85 c0                	test   eax,eax
c001ec75:	75 01                	jne    c001ec78 <cleanerTaskFunction(void*)+0x38>
c001ec77:	fb                   	sti    
c001ec78:	c6 05 ec 22 03 c0 00 	mov    BYTE PTR ds:0xc00322ec,0x0
c001ec7f:	fa                   	cli    
c001ec80:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001ec86:	ff 05 04 23 03 c0    	inc    DWORD PTR ds:0xc0032304
c001ec8c:	fa                   	cli    
c001ec8d:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001ec93:	eb 3e                	jmp    c001ecd3 <cleanerTaskFunction(void*)+0x93>
c001ec95:	83 ec 0c             	sub    esp,0xc
c001ec98:	68 0c 23 03 c0       	push   0xc003230c
c001ec9d:	e8 34 a5 00 00       	call   c00291d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eca2:	c7 04 24 0c 23 03 c0 	mov    DWORD PTR [esp],0xc003230c
c001eca9:	89 c3                	mov    ebx,eax
c001ecab:	e8 2e a5 00 00       	call   c00291de <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ecb0:	c7 04 24 90 cb 02 c0 	mov    DWORD PTR [esp],0xc002cb90
c001ecb7:	e8 89 41 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001ecbc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ecbf:	e8 b3 fc ff ff       	call   c001e977 <cleanupTerminatedTask(ThreadControlBlock*)>
c001ecc4:	c7 04 24 a9 cb 02 c0 	mov    DWORD PTR [esp],0xc002cba9
c001eccb:	e8 75 41 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001ecd0:	83 c4 10             	add    esp,0x10
c001ecd3:	83 ec 0c             	sub    esp,0xc
c001ecd6:	68 0c 23 03 c0       	push   0xc003230c
c001ecdb:	e8 da a4 00 00       	call   c00291ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ece0:	83 c4 10             	add    esp,0x10
c001ece3:	84 c0                	test   al,al
c001ece5:	74 ae                	je     c001ec95 <cleanerTaskFunction(void*)+0x55>
c001ece7:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001ecec:	48                   	dec    eax
c001eced:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001ecf2:	75 01                	jne    c001ecf5 <cleanerTaskFunction(void*)+0xb5>
c001ecf4:	fb                   	sti    
c001ecf5:	a1 04 23 03 c0       	mov    eax,ds:0xc0032304
c001ecfa:	48                   	dec    eax
c001ecfb:	a3 04 23 03 c0       	mov    ds:0xc0032304,eax
c001ed00:	0f 85 3e ff ff ff    	jne    c001ec44 <cleanerTaskFunction(void*)+0x4>
c001ed06:	a1 00 23 03 c0       	mov    eax,ds:0xc0032300
c001ed0b:	85 c0                	test   eax,eax
c001ed0d:	0f 84 31 ff ff ff    	je     c001ec44 <cleanerTaskFunction(void*)+0x4>
c001ed13:	c7 05 00 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032300,0x0
c001ed1d:	e8 e4 f6 ff ff       	call   c001e406 <schedule()>
c001ed22:	e9 1d ff ff ff       	jmp    c001ec44 <cleanerTaskFunction(void*)+0x4>
c001ed27:	83 ec 0c             	sub    esp,0xc
c001ed2a:	6a 02                	push   0x2
c001ed2c:	e8 86 f8 ff ff       	call   c001e5b7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ed31:	83 c4 10             	add    esp,0x10
c001ed34:	e9 3f ff ff ff       	jmp    c001ec78 <cleanerTaskFunction(void*)+0x38>

c001ed39 <terminateTask(int)>:
c001ed39:	83 ec 14             	sub    esp,0x14
c001ed3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ed44:	83 c0 0c             	add    eax,0xc
c001ed47:	50                   	push   eax
c001ed48:	68 08 cf 02 c0       	push   0xc002cf08
c001ed4d:	e8 f3 40 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001ed52:	fa                   	cli    
c001ed53:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001ed59:	ff 05 04 23 03 c0    	inc    DWORD PTR ds:0xc0032304
c001ed5f:	fa                   	cli    
c001ed60:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001ed66:	c7 04 24 bc cb 02 c0 	mov    DWORD PTR [esp],0xc002cbbc
c001ed6d:	e8 d3 40 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001ed72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ed76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed7b:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001ed7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed83:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ed86:	5a                   	pop    edx
c001ed87:	59                   	pop    ecx
c001ed88:	50                   	push   eax
c001ed89:	68 0c 23 03 c0       	push   0xc003230c
c001ed8e:	e8 f9 a4 00 00       	call   c002928c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ed93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed98:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ed9f:	c7 04 24 d6 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbd6
c001eda6:	e8 9a 40 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001edab:	83 c4 10             	add    esp,0x10
c001edae:	a1 e8 22 03 c0       	mov    eax,ds:0xc00322e8
c001edb3:	85 c0                	test   eax,eax
c001edb5:	0f 84 8d 00 00 00    	je     c001ee48 <terminateTask(int)+0x10f>
c001edbb:	83 ec 0c             	sub    esp,0xc
c001edbe:	68 f0 cb 02 c0       	push   0xc002cbf0
c001edc3:	e8 7d 40 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001edc8:	58                   	pop    eax
c001edc9:	c6 05 ec 22 03 c0 01 	mov    BYTE PTR ds:0xc00322ec,0x1
c001edd0:	ff 35 e8 22 03 c0    	push   DWORD PTR ds:0xc00322e8
c001edd6:	e8 ef fa ff ff       	call   c001e8ca <unblockTask(ThreadControlBlock*)>
c001eddb:	c7 04 24 0a cc 02 c0 	mov    DWORD PTR [esp],0xc002cc0a
c001ede2:	e8 5e 40 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001ede7:	83 c4 10             	add    esp,0x10
c001edea:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001edef:	48                   	dec    eax
c001edf0:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001edf5:	75 01                	jne    c001edf8 <terminateTask(int)+0xbf>
c001edf7:	fb                   	sti    
c001edf8:	a1 04 23 03 c0       	mov    eax,ds:0xc0032304
c001edfd:	48                   	dec    eax
c001edfe:	a3 04 23 03 c0       	mov    ds:0xc0032304,eax
c001ee03:	75 09                	jne    c001ee0e <terminateTask(int)+0xd5>
c001ee05:	83 3d 00 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032300,0x0
c001ee0c:	75 4c                	jne    c001ee5a <terminateTask(int)+0x121>
c001ee0e:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001ee13:	48                   	dec    eax
c001ee14:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001ee19:	75 01                	jne    c001ee1c <terminateTask(int)+0xe3>
c001ee1b:	fb                   	sti    
c001ee1c:	83 ec 0c             	sub    esp,0xc
c001ee1f:	68 42 cc 02 c0       	push   0xc002cc42
c001ee24:	e8 1c 40 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001ee29:	83 c4 10             	add    esp,0x10
c001ee2c:	fa                   	cli    
c001ee2d:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001ee33:	e8 ce f5 ff ff       	call   c001e406 <schedule()>
c001ee38:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001ee3d:	48                   	dec    eax
c001ee3e:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001ee43:	75 e7                	jne    c001ee2c <terminateTask(int)+0xf3>
c001ee45:	fb                   	sti    
c001ee46:	eb e4                	jmp    c001ee2c <terminateTask(int)+0xf3>
c001ee48:	83 ec 0c             	sub    esp,0xc
c001ee4b:	68 24 cc 02 c0       	push   0xc002cc24
c001ee50:	e8 f0 3f ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001ee55:	83 c4 10             	add    esp,0x10
c001ee58:	eb 90                	jmp    c001edea <terminateTask(int)+0xb1>
c001ee5a:	c7 05 00 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032300,0x0
c001ee64:	e8 9d f5 ff ff       	call   c001e406 <schedule()>
c001ee69:	eb a3                	jmp    c001ee0e <terminateTask(int)+0xd5>

c001ee6b <Thr::terminateFromIRQ(int)>:
c001ee6b:	83 ec 18             	sub    esp,0x18
c001ee6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee72:	e8 c2 fe ff ff       	call   c001ed39 <terminateTask(int)>
c001ee77:	90                   	nop

c001ee78 <Semaphore::release()>:
c001ee78:	83 ec 0c             	sub    esp,0xc
c001ee7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee7f:	fa                   	cli    
c001ee80:	a1 04 23 03 c0       	mov    eax,ds:0xc0032304
c001ee85:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001ee8b:	8d 48 01             	lea    ecx,[eax+0x1]
c001ee8e:	89 0d 04 23 03 c0    	mov    DWORD PTR ds:0xc0032304,ecx
c001ee94:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ee97:	85 c9                	test   ecx,ecx
c001ee99:	74 3c                	je     c001eed7 <Semaphore::release()+0x5f>
c001ee9b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ee9e:	83 ec 0c             	sub    esp,0xc
c001eea1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001eea4:	51                   	push   ecx
c001eea5:	e8 20 fa ff ff       	call   c001e8ca <unblockTask(ThreadControlBlock*)>
c001eeaa:	a1 04 23 03 c0       	mov    eax,ds:0xc0032304
c001eeaf:	83 c4 10             	add    esp,0x10
c001eeb2:	48                   	dec    eax
c001eeb3:	a3 04 23 03 c0       	mov    ds:0xc0032304,eax
c001eeb8:	85 c0                	test   eax,eax
c001eeba:	75 09                	jne    c001eec5 <Semaphore::release()+0x4d>
c001eebc:	a1 00 23 03 c0       	mov    eax,ds:0xc0032300
c001eec1:	85 c0                	test   eax,eax
c001eec3:	75 17                	jne    c001eedc <Semaphore::release()+0x64>
c001eec5:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001eeca:	48                   	dec    eax
c001eecb:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001eed0:	75 01                	jne    c001eed3 <Semaphore::release()+0x5b>
c001eed2:	fb                   	sti    
c001eed3:	83 c4 0c             	add    esp,0xc
c001eed6:	c3                   	ret    
c001eed7:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001eeda:	eb d7                	jmp    c001eeb3 <Semaphore::release()+0x3b>
c001eedc:	c7 05 00 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032300,0x0
c001eee6:	e8 1b f5 ff ff       	call   c001e406 <schedule()>
c001eeeb:	eb d8                	jmp    c001eec5 <Semaphore::release()+0x4d>

c001eeed <__static_initialization_and_destruction_0(int, int)>:
c001eeed:	83 ec 0c             	sub    esp,0xc
c001eef0:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001eef5:	0f 85 88 00 00 00    	jne    c001ef83 <__static_initialization_and_destruction_0(int, int)+0x96>
c001eefb:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ef03:	75 7e                	jne    c001ef83 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ef05:	83 ec 0c             	sub    esp,0xc
c001ef08:	68 24 23 03 c0       	push   0xc0032324
c001ef0d:	e8 0a a6 00 00       	call   c002951c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ef12:	83 c4 10             	add    esp,0x10
c001ef15:	83 ec 04             	sub    esp,0x4
c001ef18:	68 f0 dc 02 c0       	push   0xc002dcf0
c001ef1d:	68 24 23 03 c0       	push   0xc0032324
c001ef22:	68 d0 94 02 c0       	push   0xc00294d0
c001ef27:	e8 b3 3d ff ff       	call   c0012cdf <__cxa_atexit>
c001ef2c:	83 c4 10             	add    esp,0x10
c001ef2f:	83 ec 0c             	sub    esp,0xc
c001ef32:	68 18 23 03 c0       	push   0xc0032318
c001ef37:	e8 e0 a5 00 00       	call   c002951c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ef3c:	83 c4 10             	add    esp,0x10
c001ef3f:	83 ec 04             	sub    esp,0x4
c001ef42:	68 f0 dc 02 c0       	push   0xc002dcf0
c001ef47:	68 18 23 03 c0       	push   0xc0032318
c001ef4c:	68 d0 94 02 c0       	push   0xc00294d0
c001ef51:	e8 89 3d ff ff       	call   c0012cdf <__cxa_atexit>
c001ef56:	83 c4 10             	add    esp,0x10
c001ef59:	83 ec 0c             	sub    esp,0xc
c001ef5c:	68 0c 23 03 c0       	push   0xc003230c
c001ef61:	e8 b6 a5 00 00       	call   c002951c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ef66:	83 c4 10             	add    esp,0x10
c001ef69:	83 ec 04             	sub    esp,0x4
c001ef6c:	68 f0 dc 02 c0       	push   0xc002dcf0
c001ef71:	68 0c 23 03 c0       	push   0xc003230c
c001ef76:	68 d0 94 02 c0       	push   0xc00294d0
c001ef7b:	e8 5f 3d ff ff       	call   c0012cdf <__cxa_atexit>
c001ef80:	83 c4 10             	add    esp,0x10
c001ef83:	90                   	nop
c001ef84:	83 c4 0c             	add    esp,0xc
c001ef87:	c3                   	ret    

c001ef88 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ef88:	83 ec 0c             	sub    esp,0xc
c001ef8b:	83 ec 08             	sub    esp,0x8
c001ef8e:	68 ff ff 00 00       	push   0xffff
c001ef93:	6a 01                	push   0x1
c001ef95:	e8 53 ff ff ff       	call   c001eeed <__static_initialization_and_destruction_0(int, int)>
c001ef9a:	83 c4 10             	add    esp,0x10
c001ef9d:	83 c4 0c             	add    esp,0xc
c001efa0:	c3                   	ret    

c001efa1 <Vm::inbv(unsigned short)>:
c001efa1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001efa5:	66 81 fa fe fe       	cmp    dx,0xfefe
c001efaa:	75 06                	jne    c001efb2 <Vm::inbv(unsigned short)+0x11>
c001efac:	a0 6c 23 03 c0       	mov    al,ds:0xc003236c
c001efb1:	c3                   	ret    
c001efb2:	ec                   	in     al,dx
c001efb3:	c3                   	ret    

c001efb4 <Vm::outbv(unsigned short, unsigned char)>:
c001efb4:	53                   	push   ebx
c001efb5:	83 ec 08             	sub    esp,0x8
c001efb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001efbc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001efc0:	66 81 fa fe fe       	cmp    dx,0xfefe
c001efc5:	75 38                	jne    c001efff <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001efc7:	0f b6 c3             	movzx  eax,bl
c001efca:	51                   	push   ecx
c001efcb:	51                   	push   ecx
c001efcc:	50                   	push   eax
c001efcd:	68 27 cf 02 c0       	push   0xc002cf27
c001efd2:	e8 6e 3e ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001efd7:	8b 15 6c 23 03 c0    	mov    edx,DWORD PTR ds:0xc003236c
c001efdd:	83 c4 10             	add    esp,0x10
c001efe0:	8d 42 01             	lea    eax,[edx+0x1]
c001efe3:	88 9a 80 23 03 c0    	mov    BYTE PTR [edx-0x3ffcdc80],bl
c001efe9:	a3 6c 23 03 c0       	mov    ds:0xc003236c,eax
c001efee:	83 f8 20             	cmp    eax,0x20
c001eff1:	75 0f                	jne    c001f002 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eff3:	c7 05 6c 23 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003236c,0x1f
c001effd:	eb 03                	jmp    c001f002 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001efff:	88 d8                	mov    al,bl
c001f001:	ee                   	out    dx,al
c001f002:	83 c4 08             	add    esp,0x8
c001f005:	5b                   	pop    ebx
c001f006:	c3                   	ret    

c001f007 <Vm::realToLinear(unsigned short, unsigned short)>:
c001f007:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f00c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f011:	c1 e0 04             	shl    eax,0x4
c001f014:	01 d0                	add    eax,edx
c001f016:	c3                   	ret    

c001f017 <Vm::getSegment(unsigned int)>:
c001f017:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f01b:	c1 e8 10             	shr    eax,0x10
c001f01e:	c3                   	ret    

c001f01f <Vm::getOffset(unsigned int)>:
c001f01f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f023:	c3                   	ret    

c001f024 <Vm::mainloop2()>:
c001f024:	83 ec 18             	sub    esp,0x18
c001f027:	fa                   	cli    
c001f028:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001f02e:	6a 02                	push   0x2
c001f030:	c6 05 65 23 03 c0 01 	mov    BYTE PTR ds:0xc0032365,0x1
c001f037:	e8 7b f5 ff ff       	call   c001e5b7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f03c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f041:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f045:	52                   	push   edx
c001f046:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f04a:	52                   	push   edx
c001f04b:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f04f:	52                   	push   edx
c001f050:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f054:	50                   	push   eax
c001f055:	e8 a0 12 fe ff       	call   c00002fa <goToVM86>
c001f05a:	83 c4 2c             	add    esp,0x2c
c001f05d:	c3                   	ret    

c001f05e <Vm::mainVm8086Loop(void*)>:
c001f05e:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001f063:	48                   	dec    eax
c001f064:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001f069:	75 01                	jne    c001f06c <Vm::mainVm8086Loop(void*)+0xe>
c001f06b:	fb                   	sti    
c001f06c:	eb b6                	jmp    c001f024 <Vm::mainloop2()>

c001f06e <Vm::mainloop3(unsigned long)>:
c001f06e:	83 ec 18             	sub    esp,0x18
c001f071:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f075:	fa                   	cli    
c001f076:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001f07c:	6a 02                	push   0x2
c001f07e:	c6 05 64 23 03 c0 01 	mov    BYTE PTR ds:0xc0032364,0x1
c001f085:	a3 60 23 03 c0       	mov    ds:0xc0032360,eax
c001f08a:	e8 28 f5 ff ff       	call   c001e5b7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f08f:	83 c4 1c             	add    esp,0x1c
c001f092:	eb 90                	jmp    c001f024 <Vm::mainloop2()>

c001f094 <Vm::initialise8086()>:
c001f094:	83 ec 0c             	sub    esp,0xc
c001f097:	68 80 00 00 00       	push   0x80
c001f09c:	6a 00                	push   0x0
c001f09e:	68 5e f0 01 c0       	push   0xc001f05e
c001f0a3:	ff 35 30 23 03 c0    	push   DWORD PTR ds:0xc0032330
c001f0a9:	e8 14 f1 ff ff       	call   c001e1c2 <Process::createThread(void (*)(void*), void*, int)>
c001f0ae:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f0b5:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001f0ba:	68 00 01 00 00       	push   0x100
c001f0bf:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c001f0c4:	6a 00                	push   0x0
c001f0c6:	6a 00                	push   0x0
c001f0c8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f0ce:	e8 97 34 ff ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f0d3:	83 c4 2c             	add    esp,0x2c
c001f0d6:	c3                   	ret    

c001f0d7 <Vm::finish8086()>:
c001f0d7:	53                   	push   ebx
c001f0d8:	83 ec 08             	sub    esp,0x8
c001f0db:	fa                   	cli    
c001f0dc:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001f0e2:	80 3d 64 23 03 c0 00 	cmp    BYTE PTR ds:0xc0032364,0x0
c001f0e9:	75 15                	jne    c001f100 <Vm::finish8086()+0x29>
c001f0eb:	e8 16 f3 ff ff       	call   c001e406 <schedule()>
c001f0f0:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001f0f5:	48                   	dec    eax
c001f0f6:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001f0fb:	75 de                	jne    c001f0db <Vm::finish8086()+0x4>
c001f0fd:	fb                   	sti    
c001f0fe:	eb db                	jmp    c001f0db <Vm::finish8086()+0x4>
c001f100:	83 ec 0c             	sub    esp,0xc
c001f103:	8b 1d 60 23 03 c0    	mov    ebx,DWORD PTR ds:0xc0032360
c001f109:	ff 35 68 23 03 c0    	push   DWORD PTR ds:0xc0032368
c001f10f:	c6 05 64 23 03 c0 00 	mov    BYTE PTR ds:0xc0032364,0x0
c001f116:	e8 af f7 ff ff       	call   c001e8ca <unblockTask(ThreadControlBlock*)>
c001f11b:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001f120:	83 c4 10             	add    esp,0x10
c001f123:	8d 50 ff             	lea    edx,[eax-0x1]
c001f126:	89 15 08 23 03 c0    	mov    DWORD PTR ds:0xc0032308,edx
c001f12c:	85 d2                	test   edx,edx
c001f12e:	75 01                	jne    c001f131 <Vm::finish8086()+0x5a>
c001f130:	fb                   	sti    
c001f131:	89 d8                	mov    eax,ebx
c001f133:	83 c4 08             	add    esp,0x8
c001f136:	5b                   	pop    ebx
c001f137:	c3                   	ret    

c001f138 <Vm::getOutput8086(unsigned char*)>:
c001f138:	83 ec 10             	sub    esp,0x10
c001f13b:	ff 35 6c 23 03 c0    	push   DWORD PTR ds:0xc003236c
c001f141:	68 80 23 03 c0       	push   0xc0032380
c001f146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f14a:	e8 19 16 fe ff       	call   c0000768 <memcpy>
c001f14f:	a1 6c 23 03 c0       	mov    eax,ds:0xc003236c
c001f154:	c7 05 6c 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003236c,0x0
c001f15e:	83 c4 1c             	add    esp,0x1c
c001f161:	c3                   	ret    

c001f162 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f162:	55                   	push   ebp
c001f163:	57                   	push   edi
c001f164:	56                   	push   esi
c001f165:	53                   	push   ebx
c001f166:	83 ec 2c             	sub    esp,0x2c
c001f169:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f16d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f171:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f175:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f179:	fa                   	cli    
c001f17a:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c001f180:	0f b6 35 65 23 03 c0 	movzx  esi,BYTE PTR ds:0xc0032365
c001f187:	89 f0                	mov    eax,esi
c001f189:	84 c0                	test   al,al
c001f18b:	75 1d                	jne    c001f1aa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f18d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f191:	e8 70 f2 ff ff       	call   c001e406 <schedule()>
c001f196:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001f19b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f19f:	48                   	dec    eax
c001f1a0:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001f1a5:	75 d2                	jne    c001f179 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f1a7:	fb                   	sti    
c001f1a8:	eb cf                	jmp    c001f179 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f1aa:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001f1af:	c7 05 6c 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003236c,0x0
c001f1b9:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f1bd:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f1c1:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f1c5:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f1c9:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f1cd:	50                   	push   eax
c001f1ce:	6a 20                	push   0x20
c001f1d0:	6a 00                	push   0x0
c001f1d2:	68 80 23 03 c0       	push   0xc0032380
c001f1d7:	e8 c0 15 fe ff       	call   c000079c <memset>
c001f1dc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f1e3:	e8 9e 06 ff ff       	call   c000f886 <malloc>
c001f1e8:	83 c4 0c             	add    esp,0xc
c001f1eb:	89 c3                	mov    ebx,eax
c001f1ed:	ff 35 30 23 03 c0    	push   DWORD PTR ds:0xc0032330
c001f1f3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f1f7:	50                   	push   eax
c001f1f8:	e8 a7 41 ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c001f1fd:	83 c4 10             	add    esp,0x10
c001f200:	85 db                	test   ebx,ebx
c001f202:	75 0a                	jne    c001f20e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f204:	83 ec 0c             	sub    esp,0xc
c001f207:	68 43 cf 02 c0       	push   0xc002cf43
c001f20c:	eb 3e                	jmp    c001f24c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f20e:	50                   	push   eax
c001f20f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f213:	50                   	push   eax
c001f214:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f218:	50                   	push   eax
c001f219:	53                   	push   ebx
c001f21a:	e8 95 44 ff ff       	call   c00136b4 <File::stat(unsigned long long*, bool*)>
c001f21f:	83 c4 10             	add    esp,0x10
c001f222:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f227:	74 0a                	je     c001f233 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f229:	83 ec 0c             	sub    esp,0xc
c001f22c:	68 57 cf 02 c0       	push   0xc002cf57
c001f231:	eb 19                	jmp    c001f24c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f233:	51                   	push   ecx
c001f234:	51                   	push   ecx
c001f235:	6a 01                	push   0x1
c001f237:	53                   	push   ebx
c001f238:	e8 cb 41 ff ff       	call   c0013408 <File::open(FileOpenMode)>
c001f23d:	83 c4 10             	add    esp,0x10
c001f240:	85 c0                	test   eax,eax
c001f242:	74 24                	je     c001f268 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f244:	83 ec 0c             	sub    esp,0xc
c001f247:	68 70 cf 02 c0       	push   0xc002cf70
c001f24c:	e8 b4 b5 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001f251:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001f256:	83 c4 10             	add    esp,0x10
c001f259:	48                   	dec    eax
c001f25a:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001f25f:	85 c0                	test   eax,eax
c001f261:	75 01                	jne    c001f264 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f263:	fb                   	sti    
c001f264:	31 f6                	xor    esi,esi
c001f266:	eb 58                	jmp    c001f2c0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f268:	0f b7 ed             	movzx  ebp,bp
c001f26b:	50                   	push   eax
c001f26c:	0f b7 ff             	movzx  edi,di
c001f26f:	50                   	push   eax
c001f270:	55                   	push   ebp
c001f271:	57                   	push   edi
c001f272:	e8 90 fd ff ff       	call   c001f007 <Vm::realToLinear(unsigned short, unsigned short)>
c001f277:	5a                   	pop    edx
c001f278:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f27a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f27e:	51                   	push   ecx
c001f27f:	50                   	push   eax
c001f280:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f284:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f288:	53                   	push   ebx
c001f289:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f28c:	83 c4 14             	add    esp,0x14
c001f28f:	53                   	push   ebx
c001f290:	e8 d1 41 ff ff       	call   c0013466 <File::close()>
c001f295:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c001f29a:	83 c4 10             	add    esp,0x10
c001f29d:	48                   	dec    eax
c001f29e:	c6 05 65 23 03 c0 00 	mov    BYTE PTR ds:0xc0032365,0x0
c001f2a5:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c001f2aa:	85 c0                	test   eax,eax
c001f2ac:	75 01                	jne    c001f2af <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f2ae:	fb                   	sti    
c001f2af:	83 ec 0c             	sub    esp,0xc
c001f2b2:	ff 35 68 23 03 c0    	push   DWORD PTR ds:0xc0032368
c001f2b8:	e8 0d f6 ff ff       	call   c001e8ca <unblockTask(ThreadControlBlock*)>
c001f2bd:	83 c4 10             	add    esp,0x10
c001f2c0:	83 c4 2c             	add    esp,0x2c
c001f2c3:	89 f0                	mov    eax,esi
c001f2c5:	5b                   	pop    ebx
c001f2c6:	5e                   	pop    esi
c001f2c7:	5f                   	pop    edi
c001f2c8:	5d                   	pop    ebp
c001f2c9:	c3                   	ret    

c001f2ca <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f2ca:	57                   	push   edi
c001f2cb:	56                   	push   esi
c001f2cc:	53                   	push   ebx
c001f2cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f2d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f2d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f2d9:	83 e8 06             	sub    eax,0x6
c001f2dc:	0f b7 c0             	movzx  eax,ax
c001f2df:	50                   	push   eax
c001f2e0:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f2e5:	50                   	push   eax
c001f2e6:	e8 1c fd ff ff       	call   c001f007 <Vm::realToLinear(unsigned short, unsigned short)>
c001f2eb:	5a                   	pop    edx
c001f2ec:	5e                   	pop    esi
c001f2ed:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f2f0:	8d 56 fa             	lea    edx,[esi-0x6]
c001f2f3:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f2f9:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f2fc:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f2ff:	83 c2 02             	add    edx,0x2
c001f302:	66 89 10             	mov    WORD PTR [eax],dx
c001f305:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f308:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f30c:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f30f:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f313:	89 d6                	mov    esi,edx
c001f315:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f31b:	66 81 e6 ff fd       	and    si,0xfdff
c001f320:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f324:	74 07                	je     c001f32d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f326:	89 d6                	mov    esi,edx
c001f328:	66 81 ce 00 02       	or     si,0x200
c001f32d:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f331:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f336:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f33a:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f342:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f345:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f34d:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f350:	5b                   	pop    ebx
c001f351:	5e                   	pop    esi
c001f352:	5f                   	pop    edi
c001f353:	c3                   	ret    

c001f354 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f354:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f359:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f35e:	c1 e0 04             	shl    eax,0x4
c001f361:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f364:	c3                   	ret    

c001f365 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f365:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f36a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f36f:	c1 e0 04             	shl    eax,0x4
c001f372:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f376:	c3                   	ret    

c001f377 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f377:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f37c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f381:	c1 e0 04             	shl    eax,0x4
c001f384:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f387:	c3                   	ret    

c001f388 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f388:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f38d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f392:	c1 e0 04             	shl    eax,0x4
c001f395:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f399:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f39c:	c3                   	ret    

c001f39d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f39d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3a2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3a7:	c1 e0 04             	shl    eax,0x4
c001f3aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f3ae:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f3b2:	c3                   	ret    

c001f3b3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f3b3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3b8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3bd:	c1 e0 04             	shl    eax,0x4
c001f3c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f3c4:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f3c7:	c3                   	ret    

c001f3c8 <Vm::faultHandler(regs*)>:
c001f3c8:	55                   	push   ebp
c001f3c9:	57                   	push   edi
c001f3ca:	56                   	push   esi
c001f3cb:	53                   	push   ebx
c001f3cc:	83 ec 1c             	sub    esp,0x1c
c001f3cf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f3d3:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f3d6:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f3d9:	0f b7 c1             	movzx  eax,cx
c001f3dc:	50                   	push   eax
c001f3dd:	0f b7 c3             	movzx  eax,bx
c001f3e0:	c1 e3 04             	shl    ebx,0x4
c001f3e3:	50                   	push   eax
c001f3e4:	e8 1e fc ff ff       	call   c001f007 <Vm::realToLinear(unsigned short, unsigned short)>
c001f3e9:	5a                   	pop    edx
c001f3ea:	89 c5                	mov    ebp,eax
c001f3ec:	5e                   	pop    esi
c001f3ed:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f3f1:	50                   	push   eax
c001f3f2:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3f6:	50                   	push   eax
c001f3f7:	e8 0b fc ff ff       	call   c001f007 <Vm::realToLinear(unsigned short, unsigned short)>
c001f3fc:	01 cb                	add    ebx,ecx
c001f3fe:	89 c6                	mov    esi,eax
c001f400:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f404:	50                   	push   eax
c001f405:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f409:	50                   	push   eax
c001f40a:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f40e:	50                   	push   eax
c001f40f:	55                   	push   ebp
c001f410:	53                   	push   ebx
c001f411:	b3 06                	mov    bl,0x6
c001f413:	68 89 cf 02 c0       	push   0xc002cf89
c001f418:	e8 28 3a ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f41d:	83 c4 20             	add    esp,0x20
c001f420:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f425:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f42a:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f42e:	3c 9d                	cmp    al,0x9d
c001f430:	0f 84 d7 02 00 00    	je     c001f70d <Vm::faultHandler(regs*)+0x345>
c001f436:	0f 87 a3 00 00 00    	ja     c001f4df <Vm::faultHandler(regs*)+0x117>
c001f43c:	3c 66                	cmp    al,0x66
c001f43e:	0f 84 15 02 00 00    	je     c001f659 <Vm::faultHandler(regs*)+0x291>
c001f444:	77 5f                	ja     c001f4a5 <Vm::faultHandler(regs*)+0xdd>
c001f446:	3c 36                	cmp    al,0x36
c001f448:	0f 84 f1 01 00 00    	je     c001f63f <Vm::faultHandler(regs*)+0x277>
c001f44e:	77 28                	ja     c001f478 <Vm::faultHandler(regs*)+0xb0>
c001f450:	3c 26                	cmp    al,0x26
c001f452:	0f 84 99 01 00 00    	je     c001f5f1 <Vm::faultHandler(regs*)+0x229>
c001f458:	3c 2e                	cmp    al,0x2e
c001f45a:	0f 85 3b 07 00 00    	jne    c001fb9b <Vm::faultHandler(regs*)+0x7d3>
c001f460:	83 ec 0c             	sub    esp,0xc
c001f463:	31 db                	xor    ebx,ebx
c001f465:	68 9e cf 02 c0       	push   0xc002cf9e
c001f46a:	e8 d6 39 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f46f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f472:	83 c4 10             	add    esp,0x10
c001f475:	45                   	inc    ebp
c001f476:	eb b2                	jmp    c001f42a <Vm::faultHandler(regs*)+0x62>
c001f478:	3c 64                	cmp    al,0x64
c001f47a:	0f 84 8b 01 00 00    	je     c001f60b <Vm::faultHandler(regs*)+0x243>
c001f480:	0f 87 9f 01 00 00    	ja     c001f625 <Vm::faultHandler(regs*)+0x25d>
c001f486:	3c 3e                	cmp    al,0x3e
c001f488:	0f 85 0d 07 00 00    	jne    c001fb9b <Vm::faultHandler(regs*)+0x7d3>
c001f48e:	83 ec 0c             	sub    esp,0xc
c001f491:	b3 01                	mov    bl,0x1
c001f493:	68 a2 cf 02 c0       	push   0xc002cfa2
c001f498:	e8 a8 39 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f49d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f4a0:	83 c4 10             	add    esp,0x10
c001f4a3:	eb d0                	jmp    c001f475 <Vm::faultHandler(regs*)+0xad>
c001f4a5:	3c 6d                	cmp    al,0x6d
c001f4a7:	0f 84 af 03 00 00    	je     c001f85c <Vm::faultHandler(regs*)+0x494>
c001f4ad:	77 15                	ja     c001f4c4 <Vm::faultHandler(regs*)+0xfc>
c001f4af:	3c 67                	cmp    al,0x67
c001f4b1:	0f 84 bf 01 00 00    	je     c001f676 <Vm::faultHandler(regs*)+0x2ae>
c001f4b7:	3c 6c                	cmp    al,0x6c
c001f4b9:	0f 84 3f 03 00 00    	je     c001f7fe <Vm::faultHandler(regs*)+0x436>
c001f4bf:	e9 d7 06 00 00       	jmp    c001fb9b <Vm::faultHandler(regs*)+0x7d3>
c001f4c4:	3c 6f                	cmp    al,0x6f
c001f4c6:	0f 84 a4 04 00 00    	je     c001f970 <Vm::faultHandler(regs*)+0x5a8>
c001f4cc:	0f 82 11 04 00 00    	jb     c001f8e3 <Vm::faultHandler(regs*)+0x51b>
c001f4d2:	3c 9c                	cmp    al,0x9c
c001f4d4:	0f 84 ba 01 00 00    	je     c001f694 <Vm::faultHandler(regs*)+0x2cc>
c001f4da:	e9 bc 06 00 00       	jmp    c001fb9b <Vm::faultHandler(regs*)+0x7d3>
c001f4df:	3c ec                	cmp    al,0xec
c001f4e1:	0f 84 24 06 00 00    	je     c001fb0b <Vm::faultHandler(regs*)+0x743>
c001f4e7:	0f 87 93 00 00 00    	ja     c001f580 <Vm::faultHandler(regs*)+0x1b8>
c001f4ed:	3c e4                	cmp    al,0xe4
c001f4ef:	0f 84 5c 05 00 00    	je     c001fa51 <Vm::faultHandler(regs*)+0x689>
c001f4f5:	77 6a                	ja     c001f561 <Vm::faultHandler(regs*)+0x199>
c001f4f7:	3c cd                	cmp    al,0xcd
c001f4f9:	0f 84 7e 02 00 00    	je     c001f77d <Vm::faultHandler(regs*)+0x3b5>
c001f4ff:	3c cf                	cmp    al,0xcf
c001f501:	0f 85 94 06 00 00    	jne    c001fb9b <Vm::faultHandler(regs*)+0x7d3>
c001f507:	83 ec 0c             	sub    esp,0xc
c001f50a:	68 e6 cf 02 c0       	push   0xc002cfe6
c001f50f:	e8 31 39 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f514:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f517:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f51a:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f51e:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f521:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f525:	0d 00 02 02 00       	or     eax,0x20200
c001f52a:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f52d:	56                   	push   esi
c001f52e:	53                   	push   ebx
c001f52f:	52                   	push   edx
c001f530:	68 ec cf 02 c0       	push   0xc002cfec
c001f535:	e8 0b 39 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f53a:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f53e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f544:	66 c1 e8 09          	shr    ax,0x9
c001f548:	83 e0 01             	and    eax,0x1
c001f54b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f54e:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f551:	83 c0 06             	add    eax,0x6
c001f554:	25 ff ff 00 00       	and    eax,0xffff
c001f559:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f55c:	e9 95 02 00 00       	jmp    c001f7f6 <Vm::faultHandler(regs*)+0x42e>
c001f561:	3c e6                	cmp    al,0xe6
c001f563:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f567:	0f 84 4e 05 00 00    	je     c001fabb <Vm::faultHandler(regs*)+0x6f3>
c001f56d:	0f 82 0a 05 00 00    	jb     c001fa7d <Vm::faultHandler(regs*)+0x6b5>
c001f573:	3c e7                	cmp    al,0xe7
c001f575:	0f 84 69 05 00 00    	je     c001fae4 <Vm::faultHandler(regs*)+0x71c>
c001f57b:	e9 1b 06 00 00       	jmp    c001fb9b <Vm::faultHandler(regs*)+0x7d3>
c001f580:	3c ef                	cmp    al,0xef
c001f582:	0f 84 e6 05 00 00    	je     c001fb6e <Vm::faultHandler(regs*)+0x7a6>
c001f588:	77 37                	ja     c001f5c1 <Vm::faultHandler(regs*)+0x1f9>
c001f58a:	3c ed                	cmp    al,0xed
c001f58c:	0f 84 a3 05 00 00    	je     c001fb35 <Vm::faultHandler(regs*)+0x76d>
c001f592:	3c ee                	cmp    al,0xee
c001f594:	0f 85 01 06 00 00    	jne    c001fb9b <Vm::faultHandler(regs*)+0x7d3>
c001f59a:	52                   	push   edx
c001f59b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f59e:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5a1:	68 87 d0 02 c0       	push   0xc002d087
c001f5a6:	e8 9a 38 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f5ab:	59                   	pop    ecx
c001f5ac:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f5b0:	5b                   	pop    ebx
c001f5b1:	50                   	push   eax
c001f5b2:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f5b6:	50                   	push   eax
c001f5b7:	e8 f8 f9 ff ff       	call   c001efb4 <Vm::outbv(unsigned short, unsigned char)>
c001f5bc:	e9 a5 05 00 00       	jmp    c001fb66 <Vm::faultHandler(regs*)+0x79e>
c001f5c1:	3c fa                	cmp    al,0xfa
c001f5c3:	0f 84 f7 01 00 00    	je     c001f7c0 <Vm::faultHandler(regs*)+0x3f8>
c001f5c9:	3c fb                	cmp    al,0xfb
c001f5cb:	0f 84 0a 02 00 00    	je     c001f7db <Vm::faultHandler(regs*)+0x413>
c001f5d1:	3c f3                	cmp    al,0xf3
c001f5d3:	0f 85 c2 05 00 00    	jne    c001fb9b <Vm::faultHandler(regs*)+0x7d3>
c001f5d9:	83 ec 0c             	sub    esp,0xc
c001f5dc:	68 bf cf 02 c0       	push   0xc002cfbf
c001f5e1:	e8 5f 38 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f5e6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5e9:	83 c4 10             	add    esp,0x10
c001f5ec:	e9 84 fe ff ff       	jmp    c001f475 <Vm::faultHandler(regs*)+0xad>
c001f5f1:	83 ec 0c             	sub    esp,0xc
c001f5f4:	b3 02                	mov    bl,0x2
c001f5f6:	68 9a cf 02 c0       	push   0xc002cf9a
c001f5fb:	e8 45 38 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f600:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f603:	83 c4 10             	add    esp,0x10
c001f606:	e9 6a fe ff ff       	jmp    c001f475 <Vm::faultHandler(regs*)+0xad>
c001f60b:	83 ec 0c             	sub    esp,0xc
c001f60e:	b3 03                	mov    bl,0x3
c001f610:	68 a6 cf 02 c0       	push   0xc002cfa6
c001f615:	e8 2b 38 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f61a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f61d:	83 c4 10             	add    esp,0x10
c001f620:	e9 50 fe ff ff       	jmp    c001f475 <Vm::faultHandler(regs*)+0xad>
c001f625:	83 ec 0c             	sub    esp,0xc
c001f628:	b3 04                	mov    bl,0x4
c001f62a:	68 aa cf 02 c0       	push   0xc002cfaa
c001f62f:	e8 11 38 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f634:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f637:	83 c4 10             	add    esp,0x10
c001f63a:	e9 36 fe ff ff       	jmp    c001f475 <Vm::faultHandler(regs*)+0xad>
c001f63f:	83 ec 0c             	sub    esp,0xc
c001f642:	b3 05                	mov    bl,0x5
c001f644:	68 ae cf 02 c0       	push   0xc002cfae
c001f649:	e8 f7 37 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f64e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f651:	83 c4 10             	add    esp,0x10
c001f654:	e9 1c fe ff ff       	jmp    c001f475 <Vm::faultHandler(regs*)+0xad>
c001f659:	83 ec 0c             	sub    esp,0xc
c001f65c:	68 b2 cf 02 c0       	push   0xc002cfb2
c001f661:	e8 df 37 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f666:	83 c4 10             	add    esp,0x10
c001f669:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f66c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f671:	e9 ff fd ff ff       	jmp    c001f475 <Vm::faultHandler(regs*)+0xad>
c001f676:	50                   	push   eax
c001f677:	50                   	push   eax
c001f678:	6a 01                	push   0x1
c001f67a:	68 b7 cf 02 c0       	push   0xc002cfb7
c001f67f:	e8 c1 37 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f684:	83 c4 10             	add    esp,0x10
c001f687:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f68a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f68f:	e9 e1 fd ff ff       	jmp    c001f475 <Vm::faultHandler(regs*)+0xad>
c001f694:	83 ec 0c             	sub    esp,0xc
c001f697:	68 c5 cf 02 c0       	push   0xc002cfc5
c001f69c:	e8 a4 37 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f6a1:	83 c4 10             	add    esp,0x10
c001f6a4:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f6a7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f6ac:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f6af:	74 2f                	je     c001f6e0 <Vm::faultHandler(regs*)+0x318>
c001f6b1:	83 ea 04             	sub    edx,0x4
c001f6b4:	25 ff 0d 00 00       	and    eax,0xdff
c001f6b9:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f6bf:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f6c2:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f6c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f6cb:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f6cf:	0f 84 bf 04 00 00    	je     c001fb94 <Vm::faultHandler(regs*)+0x7cc>
c001f6d5:	80 cc 02             	or     ah,0x2
c001f6d8:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f6db:	e9 b4 04 00 00       	jmp    c001fb94 <Vm::faultHandler(regs*)+0x7cc>
c001f6e0:	83 ea 02             	sub    edx,0x2
c001f6e3:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f6e9:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f6ec:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f6f0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f6f6:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f6fa:	74 05                	je     c001f701 <Vm::faultHandler(regs*)+0x339>
c001f6fc:	80 cc 02             	or     ah,0x2
c001f6ff:	eb 03                	jmp    c001f704 <Vm::faultHandler(regs*)+0x33c>
c001f701:	80 e4 fd             	and    ah,0xfd
c001f704:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f708:	e9 87 04 00 00       	jmp    c001fb94 <Vm::faultHandler(regs*)+0x7cc>
c001f70d:	83 ec 0c             	sub    esp,0xc
c001f710:	68 cc cf 02 c0       	push   0xc002cfcc
c001f715:	e8 2b 37 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f71a:	83 c4 10             	add    esp,0x10
c001f71d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f722:	74 28                	je     c001f74c <Vm::faultHandler(regs*)+0x384>
c001f724:	8b 06                	mov    eax,DWORD PTR [esi]
c001f726:	25 ff 0d 00 00       	and    eax,0xdff
c001f72b:	0d 00 02 02 00       	or     eax,0x20200
c001f730:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f733:	8b 06                	mov    eax,DWORD PTR [esi]
c001f735:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f73b:	c1 e8 09             	shr    eax,0x9
c001f73e:	83 e0 01             	and    eax,0x1
c001f741:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f744:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f747:	83 c0 04             	add    eax,0x4
c001f74a:	eb 24                	jmp    c001f770 <Vm::faultHandler(regs*)+0x3a8>
c001f74c:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f74f:	0d 00 02 02 00       	or     eax,0x20200
c001f754:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f757:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f75a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f760:	66 c1 e8 09          	shr    ax,0x9
c001f764:	83 e0 01             	and    eax,0x1
c001f767:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f76a:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f76d:	83 c0 02             	add    eax,0x2
c001f770:	25 ff ff 00 00       	and    eax,0xffff
c001f775:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f778:	e9 17 04 00 00       	jmp    c001fb94 <Vm::faultHandler(regs*)+0x7cc>
c001f77d:	53                   	push   ebx
c001f77e:	53                   	push   ebx
c001f77f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f783:	50                   	push   eax
c001f784:	68 d2 cf 02 c0       	push   0xc002cfd2
c001f789:	e8 b7 36 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f78e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f792:	83 c4 10             	add    esp,0x10
c001f795:	3c ee                	cmp    al,0xee
c001f797:	75 10                	jne    c001f7a9 <Vm::faultHandler(regs*)+0x3e1>
c001f799:	83 ec 0c             	sub    esp,0xc
c001f79c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f79f:	e8 ca f8 ff ff       	call   c001f06e <Vm::mainloop3(unsigned long)>
c001f7a4:	e9 c0 03 00 00       	jmp    c001fb69 <Vm::faultHandler(regs*)+0x7a1>
c001f7a9:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f7ad:	83 ec 0c             	sub    esp,0xc
c001f7b0:	53                   	push   ebx
c001f7b1:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f7b5:	53                   	push   ebx
c001f7b6:	55                   	push   ebp
c001f7b7:	50                   	push   eax
c001f7b8:	57                   	push   edi
c001f7b9:	e8 0c fb ff ff       	call   c001f2ca <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f7be:	eb 36                	jmp    c001f7f6 <Vm::faultHandler(regs*)+0x42e>
c001f7c0:	83 ec 0c             	sub    esp,0xc
c001f7c3:	68 dc cf 02 c0       	push   0xc002cfdc
c001f7c8:	e8 78 36 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f7cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f7d2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f7d6:	e9 8b 03 00 00       	jmp    c001fb66 <Vm::faultHandler(regs*)+0x79e>
c001f7db:	83 ec 0c             	sub    esp,0xc
c001f7de:	68 e1 cf 02 c0       	push   0xc002cfe1
c001f7e3:	e8 5d 36 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f7e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f7ed:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f7f1:	e9 70 03 00 00       	jmp    c001fb66 <Vm::faultHandler(regs*)+0x79e>
c001f7f6:	83 c4 20             	add    esp,0x20
c001f7f9:	e9 99 03 00 00       	jmp    c001fb97 <Vm::faultHandler(regs*)+0x7cf>
c001f7fe:	83 ec 0c             	sub    esp,0xc
c001f801:	68 1f d0 02 c0       	push   0xc002d01f
c001f806:	e8 3a 36 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f80b:	83 c4 10             	add    esp,0x10
c001f80e:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f811:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f816:	74 0d                	je     c001f825 <Vm::faultHandler(regs*)+0x45d>
c001f818:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f81f:	0f 87 9e 01 00 00    	ja     c001f9c3 <Vm::faultHandler(regs*)+0x5fb>
c001f825:	83 ec 0c             	sub    esp,0xc
c001f828:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f82c:	0f b7 db             	movzx  ebx,bx
c001f82f:	50                   	push   eax
c001f830:	e8 6c f7 ff ff       	call   c001efa1 <Vm::inbv(unsigned short)>
c001f835:	83 c4 0c             	add    esp,0xc
c001f838:	0f b6 c0             	movzx  eax,al
c001f83b:	50                   	push   eax
c001f83c:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f840:	50                   	push   eax
c001f841:	53                   	push   ebx
c001f842:	e8 41 fb ff ff       	call   c001f388 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f847:	83 c4 10             	add    esp,0x10
c001f84a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f84d:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f851:	74 03                	je     c001f856 <Vm::faultHandler(regs*)+0x48e>
c001f853:	48                   	dec    eax
c001f854:	eb 01                	jmp    c001f857 <Vm::faultHandler(regs*)+0x48f>
c001f856:	40                   	inc    eax
c001f857:	0f b7 c0             	movzx  eax,ax
c001f85a:	eb 7f                	jmp    c001f8db <Vm::faultHandler(regs*)+0x513>
c001f85c:	83 ec 0c             	sub    esp,0xc
c001f85f:	68 51 d0 02 c0       	push   0xc002d051
c001f864:	e8 dc 35 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f869:	83 c4 10             	add    esp,0x10
c001f86c:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f86f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f874:	74 0d                	je     c001f883 <Vm::faultHandler(regs*)+0x4bb>
c001f876:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f87d:	0f 87 40 01 00 00    	ja     c001f9c3 <Vm::faultHandler(regs*)+0x5fb>
c001f883:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f886:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f88a:	0f b7 db             	movzx  ebx,bx
c001f88d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f892:	74 20                	je     c001f8b4 <Vm::faultHandler(regs*)+0x4ec>
c001f894:	ed                   	in     eax,dx
c001f895:	51                   	push   ecx
c001f896:	50                   	push   eax
c001f897:	56                   	push   esi
c001f898:	53                   	push   ebx
c001f899:	e8 15 fb ff ff       	call   c001f3b3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f89e:	83 c4 10             	add    esp,0x10
c001f8a1:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f8a4:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f8a8:	74 05                	je     c001f8af <Vm::faultHandler(regs*)+0x4e7>
c001f8aa:	83 e8 04             	sub    eax,0x4
c001f8ad:	eb 27                	jmp    c001f8d6 <Vm::faultHandler(regs*)+0x50e>
c001f8af:	83 c0 04             	add    eax,0x4
c001f8b2:	eb 22                	jmp    c001f8d6 <Vm::faultHandler(regs*)+0x50e>
c001f8b4:	66 ed                	in     ax,dx
c001f8b6:	0f b7 c0             	movzx  eax,ax
c001f8b9:	52                   	push   edx
c001f8ba:	50                   	push   eax
c001f8bb:	56                   	push   esi
c001f8bc:	53                   	push   ebx
c001f8bd:	e8 db fa ff ff       	call   c001f39d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f8c2:	83 c4 10             	add    esp,0x10
c001f8c5:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f8c8:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f8cc:	74 05                	je     c001f8d3 <Vm::faultHandler(regs*)+0x50b>
c001f8ce:	83 e8 02             	sub    eax,0x2
c001f8d1:	eb 03                	jmp    c001f8d6 <Vm::faultHandler(regs*)+0x50e>
c001f8d3:	83 c0 02             	add    eax,0x2
c001f8d6:	25 ff ff 00 00       	and    eax,0xffff
c001f8db:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f8de:	e9 b1 02 00 00       	jmp    c001fb94 <Vm::faultHandler(regs*)+0x7cc>
c001f8e3:	83 ec 0c             	sub    esp,0xc
c001f8e6:	4b                   	dec    ebx
c001f8e7:	68 57 d0 02 c0       	push   0xc002d057
c001f8ec:	e8 54 35 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f8f1:	83 c4 10             	add    esp,0x10
c001f8f4:	80 fb 05             	cmp    bl,0x5
c001f8f7:	77 0a                	ja     c001f903 <Vm::faultHandler(regs*)+0x53b>
c001f8f9:	0f b6 db             	movzx  ebx,bl
c001f8fc:	ff 24 9d c8 d0 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2f38]
c001f903:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f907:	eb 1b                	jmp    c001f924 <Vm::faultHandler(regs*)+0x55c>
c001f909:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f90d:	eb 15                	jmp    c001f924 <Vm::faultHandler(regs*)+0x55c>
c001f90f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f913:	eb 0f                	jmp    c001f924 <Vm::faultHandler(regs*)+0x55c>
c001f915:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f919:	eb 09                	jmp    c001f924 <Vm::faultHandler(regs*)+0x55c>
c001f91b:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f91e:	eb 04                	jmp    c001f924 <Vm::faultHandler(regs*)+0x55c>
c001f920:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f924:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f929:	74 0d                	je     c001f938 <Vm::faultHandler(regs*)+0x570>
c001f92b:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f932:	0f 87 8b 00 00 00    	ja     c001f9c3 <Vm::faultHandler(regs*)+0x5fb>
c001f938:	53                   	push   ebx
c001f939:	53                   	push   ebx
c001f93a:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f93e:	52                   	push   edx
c001f93f:	50                   	push   eax
c001f940:	e8 0f fa ff ff       	call   c001f354 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f945:	5e                   	pop    esi
c001f946:	0f b6 c0             	movzx  eax,al
c001f949:	5d                   	pop    ebp
c001f94a:	50                   	push   eax
c001f94b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f94f:	50                   	push   eax
c001f950:	e8 5f f6 ff ff       	call   c001efb4 <Vm::outbv(unsigned short, unsigned char)>
c001f955:	83 c4 10             	add    esp,0x10
c001f958:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f95b:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f95f:	74 03                	je     c001f964 <Vm::faultHandler(regs*)+0x59c>
c001f961:	48                   	dec    eax
c001f962:	eb 01                	jmp    c001f965 <Vm::faultHandler(regs*)+0x59d>
c001f964:	40                   	inc    eax
c001f965:	0f b7 c0             	movzx  eax,ax
c001f968:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f96b:	e9 24 02 00 00       	jmp    c001fb94 <Vm::faultHandler(regs*)+0x7cc>
c001f970:	83 ec 0c             	sub    esp,0xc
c001f973:	4b                   	dec    ebx
c001f974:	68 57 d0 02 c0       	push   0xc002d057
c001f979:	e8 c7 34 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f97e:	83 c4 10             	add    esp,0x10
c001f981:	80 fb 05             	cmp    bl,0x5
c001f984:	77 0a                	ja     c001f990 <Vm::faultHandler(regs*)+0x5c8>
c001f986:	0f b6 db             	movzx  ebx,bl
c001f989:	ff 24 9d e0 d0 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2f20]
c001f990:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f994:	eb 1b                	jmp    c001f9b1 <Vm::faultHandler(regs*)+0x5e9>
c001f996:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f99a:	eb 15                	jmp    c001f9b1 <Vm::faultHandler(regs*)+0x5e9>
c001f99c:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f9a0:	eb 0f                	jmp    c001f9b1 <Vm::faultHandler(regs*)+0x5e9>
c001f9a2:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f9a6:	eb 09                	jmp    c001f9b1 <Vm::faultHandler(regs*)+0x5e9>
c001f9a8:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f9ab:	eb 04                	jmp    c001f9b1 <Vm::faultHandler(regs*)+0x5e9>
c001f9ad:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f9b1:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f9b4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f9b9:	74 39                	je     c001f9f4 <Vm::faultHandler(regs*)+0x62c>
c001f9bb:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f9c1:	76 31                	jbe    c001f9f4 <Vm::faultHandler(regs*)+0x62c>
c001f9c3:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f9c7:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f9cb:	51                   	push   ecx
c001f9cc:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f9d0:	51                   	push   ecx
c001f9d1:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f9d5:	51                   	push   ecx
c001f9d6:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f9da:	51                   	push   ecx
c001f9db:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f9df:	52                   	push   edx
c001f9e0:	50                   	push   eax
c001f9e1:	50                   	push   eax
c001f9e2:	68 24 d0 02 c0       	push   0xc002d024
c001f9e7:	e8 59 34 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001f9ec:	83 c4 20             	add    esp,0x20
c001f9ef:	e9 fb 01 00 00       	jmp    c001fbef <Vm::faultHandler(regs*)+0x827>
c001f9f4:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f9f7:	0f b7 d3             	movzx  edx,bx
c001f9fa:	81 e6 00 04 00 00    	and    esi,0x400
c001fa00:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fa03:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fa08:	74 1d                	je     c001fa27 <Vm::faultHandler(regs*)+0x65f>
c001fa0a:	51                   	push   ecx
c001fa0b:	51                   	push   ecx
c001fa0c:	52                   	push   edx
c001fa0d:	50                   	push   eax
c001fa0e:	e8 64 f9 ff ff       	call   c001f377 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001fa13:	83 c4 10             	add    esp,0x10
c001fa16:	89 ea                	mov    edx,ebp
c001fa18:	ef                   	out    dx,eax
c001fa19:	85 f6                	test   esi,esi
c001fa1b:	74 05                	je     c001fa22 <Vm::faultHandler(regs*)+0x65a>
c001fa1d:	83 eb 04             	sub    ebx,0x4
c001fa20:	eb 21                	jmp    c001fa43 <Vm::faultHandler(regs*)+0x67b>
c001fa22:	83 c3 04             	add    ebx,0x4
c001fa25:	eb 1c                	jmp    c001fa43 <Vm::faultHandler(regs*)+0x67b>
c001fa27:	51                   	push   ecx
c001fa28:	51                   	push   ecx
c001fa29:	52                   	push   edx
c001fa2a:	50                   	push   eax
c001fa2b:	e8 35 f9 ff ff       	call   c001f365 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fa30:	83 c4 10             	add    esp,0x10
c001fa33:	89 ea                	mov    edx,ebp
c001fa35:	66 ef                	out    dx,ax
c001fa37:	85 f6                	test   esi,esi
c001fa39:	74 05                	je     c001fa40 <Vm::faultHandler(regs*)+0x678>
c001fa3b:	83 eb 02             	sub    ebx,0x2
c001fa3e:	eb 03                	jmp    c001fa43 <Vm::faultHandler(regs*)+0x67b>
c001fa40:	83 c3 02             	add    ebx,0x2
c001fa43:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001fa49:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001fa4c:	e9 43 01 00 00       	jmp    c001fb94 <Vm::faultHandler(regs*)+0x7cc>
c001fa51:	53                   	push   ebx
c001fa52:	53                   	push   ebx
c001fa53:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa57:	50                   	push   eax
c001fa58:	68 5d d0 02 c0       	push   0xc002d05d
c001fa5d:	e8 e3 33 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001fa62:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fa69:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa6d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa70:	e8 2c f5 ff ff       	call   c001efa1 <Vm::inbv(unsigned short)>
c001fa75:	0f b6 c0             	movzx  eax,al
c001fa78:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fa7b:	eb 5e                	jmp    c001fadb <Vm::faultHandler(regs*)+0x713>
c001fa7d:	51                   	push   ecx
c001fa7e:	51                   	push   ecx
c001fa7f:	53                   	push   ebx
c001fa80:	68 63 d0 02 c0       	push   0xc002d063
c001fa85:	e8 bb 33 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001fa8a:	83 c4 10             	add    esp,0x10
c001fa8d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fa92:	74 07                	je     c001fa9b <Vm::faultHandler(regs*)+0x6d3>
c001fa94:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fa98:	ed                   	in     eax,dx
c001fa99:	eb 14                	jmp    c001faaf <Vm::faultHandler(regs*)+0x6e7>
c001fa9b:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fa9e:	66 31 db             	xor    bx,bx
c001faa1:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001faa4:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001faa8:	66 ed                	in     ax,dx
c001faaa:	0f b7 c0             	movzx  eax,ax
c001faad:	09 d8                	or     eax,ebx
c001faaf:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fab2:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fab6:	e9 dc 00 00 00       	jmp    c001fb97 <Vm::faultHandler(regs*)+0x7cf>
c001fabb:	50                   	push   eax
c001fabc:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fabf:	53                   	push   ebx
c001fac0:	68 69 d0 02 c0       	push   0xc002d069
c001fac5:	e8 7b 33 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001faca:	58                   	pop    eax
c001facb:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001facf:	5a                   	pop    edx
c001fad0:	50                   	push   eax
c001fad1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fad5:	50                   	push   eax
c001fad6:	e8 d9 f4 ff ff       	call   c001efb4 <Vm::outbv(unsigned short, unsigned char)>
c001fadb:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fadf:	e9 85 00 00 00       	jmp    c001fb69 <Vm::faultHandler(regs*)+0x7a1>
c001fae4:	50                   	push   eax
c001fae5:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fae8:	53                   	push   ebx
c001fae9:	68 72 d0 02 c0       	push   0xc002d072
c001faee:	e8 52 33 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001faf3:	83 c4 10             	add    esp,0x10
c001faf6:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fafa:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001faff:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fb02:	74 03                	je     c001fb07 <Vm::faultHandler(regs*)+0x73f>
c001fb04:	ef                   	out    dx,eax
c001fb05:	eb ab                	jmp    c001fab2 <Vm::faultHandler(regs*)+0x6ea>
c001fb07:	66 ef                	out    dx,ax
c001fb09:	eb a7                	jmp    c001fab2 <Vm::faultHandler(regs*)+0x6ea>
c001fb0b:	55                   	push   ebp
c001fb0c:	55                   	push   ebp
c001fb0d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fb10:	68 7b d0 02 c0       	push   0xc002d07b
c001fb15:	e8 2b 33 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001fb1a:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fb21:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fb25:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb28:	e8 74 f4 ff ff       	call   c001efa1 <Vm::inbv(unsigned short)>
c001fb2d:	0f b6 c0             	movzx  eax,al
c001fb30:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fb33:	eb 31                	jmp    c001fb66 <Vm::faultHandler(regs*)+0x79e>
c001fb35:	56                   	push   esi
c001fb36:	56                   	push   esi
c001fb37:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fb3a:	68 81 d0 02 c0       	push   0xc002d081
c001fb3f:	e8 01 33 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001fb44:	83 c4 10             	add    esp,0x10
c001fb47:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fb4a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb4f:	74 03                	je     c001fb54 <Vm::faultHandler(regs*)+0x78c>
c001fb51:	ed                   	in     eax,dx
c001fb52:	eb 0d                	jmp    c001fb61 <Vm::faultHandler(regs*)+0x799>
c001fb54:	66 ed                	in     ax,dx
c001fb56:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fb59:	0f b7 c0             	movzx  eax,ax
c001fb5c:	66 31 d2             	xor    dx,dx
c001fb5f:	09 d0                	or     eax,edx
c001fb61:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fb64:	eb 2e                	jmp    c001fb94 <Vm::faultHandler(regs*)+0x7cc>
c001fb66:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fb69:	83 c4 10             	add    esp,0x10
c001fb6c:	eb 29                	jmp    c001fb97 <Vm::faultHandler(regs*)+0x7cf>
c001fb6e:	50                   	push   eax
c001fb6f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fb72:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fb75:	68 90 d0 02 c0       	push   0xc002d090
c001fb7a:	e8 c6 32 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001fb7f:	83 c4 10             	add    esp,0x10
c001fb82:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fb85:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb8a:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fb8d:	74 03                	je     c001fb92 <Vm::faultHandler(regs*)+0x7ca>
c001fb8f:	ef                   	out    dx,eax
c001fb90:	eb 02                	jmp    c001fb94 <Vm::faultHandler(regs*)+0x7cc>
c001fb92:	66 ef                	out    dx,ax
c001fb94:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fb97:	b0 01                	mov    al,0x1
c001fb99:	eb 56                	jmp    c001fbf1 <Vm::faultHandler(regs*)+0x829>
c001fb9b:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fb9f:	51                   	push   ecx
c001fba0:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fba4:	51                   	push   ecx
c001fba5:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fba9:	51                   	push   ecx
c001fbaa:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fbae:	51                   	push   ecx
c001fbaf:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fbb3:	52                   	push   edx
c001fbb4:	50                   	push   eax
c001fbb5:	50                   	push   eax
c001fbb6:	68 99 d0 02 c0       	push   0xc002d099
c001fbbb:	e8 85 32 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c001fbc0:	83 c4 20             	add    esp,0x20
c001fbc3:	83 ec 0c             	sub    esp,0xc
c001fbc6:	6a 60                	push   0x60
c001fbc8:	e8 d4 f3 ff ff       	call   c001efa1 <Vm::inbv(unsigned short)>
c001fbcd:	83 c4 10             	add    esp,0x10
c001fbd0:	3c 1c                	cmp    al,0x1c
c001fbd2:	74 04                	je     c001fbd8 <Vm::faultHandler(regs*)+0x810>
c001fbd4:	3c 5a                	cmp    al,0x5a
c001fbd6:	75 eb                	jne    c001fbc3 <Vm::faultHandler(regs*)+0x7fb>
c001fbd8:	3c 1c                	cmp    al,0x1c
c001fbda:	74 04                	je     c001fbe0 <Vm::faultHandler(regs*)+0x818>
c001fbdc:	3c 5a                	cmp    al,0x5a
c001fbde:	75 0f                	jne    c001fbef <Vm::faultHandler(regs*)+0x827>
c001fbe0:	83 ec 0c             	sub    esp,0xc
c001fbe3:	6a 60                	push   0x60
c001fbe5:	e8 b7 f3 ff ff       	call   c001efa1 <Vm::inbv(unsigned short)>
c001fbea:	83 c4 10             	add    esp,0x10
c001fbed:	eb e9                	jmp    c001fbd8 <Vm::faultHandler(regs*)+0x810>
c001fbef:	31 c0                	xor    eax,eax
c001fbf1:	83 c4 1c             	add    esp,0x1c
c001fbf4:	5b                   	pop    ebx
c001fbf5:	5e                   	pop    esi
c001fbf6:	5f                   	pop    edi
c001fbf7:	5d                   	pop    ebp
c001fbf8:	c3                   	ret    

c001fbf9 <Vm::fpuInternalTo32(unsigned long long)>:
c001fbf9:	57                   	push   edi
c001fbfa:	56                   	push   esi
c001fbfb:	53                   	push   ebx
c001fbfc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc04:	89 d6                	mov    esi,edx
c001fc06:	89 d7                	mov    edi,edx
c001fc08:	89 c1                	mov    ecx,eax
c001fc0a:	c1 ef 14             	shr    edi,0x14
c001fc0d:	89 d3                	mov    ebx,edx
c001fc0f:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fc15:	31 d2                	xor    edx,edx
c001fc17:	89 f8                	mov    eax,edi
c001fc19:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fc1f:	bf ff 00 00 00       	mov    edi,0xff
c001fc24:	05 80 fc ff ff       	add    eax,0xfffffc80
c001fc29:	83 d2 ff             	adc    edx,0xffffffff
c001fc2c:	39 c7                	cmp    edi,eax
c001fc2e:	bf 00 00 00 00       	mov    edi,0x0
c001fc33:	19 d7                	sbb    edi,edx
c001fc35:	72 15                	jb     c001fc4c <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001fc37:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fc3b:	c1 e0 17             	shl    eax,0x17
c001fc3e:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fc44:	09 f1                	or     ecx,esi
c001fc46:	09 c1                	or     ecx,eax
c001fc48:	89 cf                	mov    edi,ecx
c001fc4a:	eb 02                	jmp    c001fc4e <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fc4c:	31 ff                	xor    edi,edi
c001fc4e:	89 f8                	mov    eax,edi
c001fc50:	5b                   	pop    ebx
c001fc51:	5e                   	pop    esi
c001fc52:	5f                   	pop    edi
c001fc53:	c3                   	ret    

c001fc54 <Vm::fpuInternalTo64(unsigned long long)>:
c001fc54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fc5c:	c3                   	ret    

c001fc5d <Vm::fpu32ToInternal(unsigned int)>:
c001fc5d:	57                   	push   edi
c001fc5e:	31 ff                	xor    edi,edi
c001fc60:	56                   	push   esi
c001fc61:	53                   	push   ebx
c001fc62:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fc66:	89 cb                	mov    ebx,ecx
c001fc68:	89 ce                	mov    esi,ecx
c001fc6a:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001fc70:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001fc76:	c1 e9 17             	shr    ecx,0x17
c001fc79:	89 f0                	mov    eax,esi
c001fc7b:	0f b6 d1             	movzx  edx,cl
c001fc7e:	81 c2 80 03 00 00    	add    edx,0x380
c001fc84:	89 d1                	mov    ecx,edx
c001fc86:	89 fa                	mov    edx,edi
c001fc88:	c1 e1 14             	shl    ecx,0x14
c001fc8b:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001fc8f:	c1 e0 1d             	shl    eax,0x1d
c001fc92:	89 d7                	mov    edi,edx
c001fc94:	89 c6                	mov    esi,eax
c001fc96:	89 ca                	mov    edx,ecx
c001fc98:	89 f0                	mov    eax,esi
c001fc9a:	09 fa                	or     edx,edi
c001fc9c:	09 da                	or     edx,ebx
c001fc9e:	5b                   	pop    ebx
c001fc9f:	5e                   	pop    esi
c001fca0:	5f                   	pop    edi
c001fca1:	c3                   	ret    

c001fca2 <Vm::fpu64ToInternal(unsigned long long)>:
c001fca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fca6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fcaa:	c3                   	ret    

c001fcab <Vm::fpuFloatToLong(unsigned long long)>:
c001fcab:	57                   	push   edi
c001fcac:	31 c0                	xor    eax,eax
c001fcae:	56                   	push   esi
c001fcaf:	31 d2                	xor    edx,edx
c001fcb1:	53                   	push   ebx
c001fcb2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fcb6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fcba:	89 d9                	mov    ecx,ebx
c001fcbc:	c1 e9 14             	shr    ecx,0x14
c001fcbf:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fcc5:	89 cf                	mov    edi,ecx
c001fcc7:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001fccd:	78 33                	js     c001fd02 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fccf:	89 d9                	mov    ecx,ebx
c001fcd1:	89 f0                	mov    eax,esi
c001fcd3:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fcd9:	81 c9 00 00 10 00    	or     ecx,0x100000
c001fcdf:	89 ca                	mov    edx,ecx
c001fce1:	b9 34 00 00 00       	mov    ecx,0x34
c001fce6:	29 f9                	sub    ecx,edi
c001fce8:	0f ad d0             	shrd   eax,edx,cl
c001fceb:	d3 fa                	sar    edx,cl
c001fced:	f6 c1 20             	test   cl,0x20
c001fcf0:	74 05                	je     c001fcf7 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001fcf2:	89 d0                	mov    eax,edx
c001fcf4:	c1 fa 1f             	sar    edx,0x1f
c001fcf7:	85 db                	test   ebx,ebx
c001fcf9:	79 07                	jns    c001fd02 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fcfb:	f7 d8                	neg    eax
c001fcfd:	83 d2 00             	adc    edx,0x0
c001fd00:	f7 da                	neg    edx
c001fd02:	5b                   	pop    ebx
c001fd03:	5e                   	pop    esi
c001fd04:	5f                   	pop    edi
c001fd05:	c3                   	ret    

c001fd06 <Vm::fpuULongToFloat(unsigned long long)>:
c001fd06:	57                   	push   edi
c001fd07:	31 c9                	xor    ecx,ecx
c001fd09:	56                   	push   esi
c001fd0a:	53                   	push   ebx
c001fd0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd0f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fd13:	0f ba e7 14          	bt     edi,0x14
c001fd17:	72 07                	jb     c001fd20 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001fd19:	01 f6                	add    esi,esi
c001fd1b:	11 ff                	adc    edi,edi
c001fd1d:	41                   	inc    ecx
c001fd1e:	eb f3                	jmp    c001fd13 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001fd20:	89 fa                	mov    edx,edi
c001fd22:	89 f0                	mov    eax,esi
c001fd24:	bb 33 04 00 00       	mov    ebx,0x433
c001fd29:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001fd2f:	29 cb                	sub    ebx,ecx
c001fd31:	89 d9                	mov    ecx,ebx
c001fd33:	5b                   	pop    ebx
c001fd34:	c1 e1 14             	shl    ecx,0x14
c001fd37:	5e                   	pop    esi
c001fd38:	09 ca                	or     edx,ecx
c001fd3a:	5f                   	pop    edi
c001fd3b:	c3                   	ret    

c001fd3c <Vm::fpuLongToFloat(long long)>:
c001fd3c:	56                   	push   esi
c001fd3d:	31 c0                	xor    eax,eax
c001fd3f:	53                   	push   ebx
c001fd40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fd44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fd48:	39 c8                	cmp    eax,ecx
c001fd4a:	19 d8                	sbb    eax,ebx
c001fd4c:	7d 04                	jge    c001fd52 <Vm::fpuLongToFloat(long long)+0x16>
c001fd4e:	31 f6                	xor    esi,esi
c001fd50:	eb 0c                	jmp    c001fd5e <Vm::fpuLongToFloat(long long)+0x22>
c001fd52:	f7 d9                	neg    ecx
c001fd54:	be 01 00 00 00       	mov    esi,0x1
c001fd59:	83 d3 00             	adc    ebx,0x0
c001fd5c:	f7 db                	neg    ebx
c001fd5e:	31 c0                	xor    eax,eax
c001fd60:	0f ba e3 14          	bt     ebx,0x14
c001fd64:	72 07                	jb     c001fd6d <Vm::fpuLongToFloat(long long)+0x31>
c001fd66:	01 c9                	add    ecx,ecx
c001fd68:	11 db                	adc    ebx,ebx
c001fd6a:	40                   	inc    eax
c001fd6b:	eb f3                	jmp    c001fd60 <Vm::fpuLongToFloat(long long)+0x24>
c001fd6d:	ba 33 04 00 00       	mov    edx,0x433
c001fd72:	29 c2                	sub    edx,eax
c001fd74:	89 c8                	mov    eax,ecx
c001fd76:	c1 e2 14             	shl    edx,0x14
c001fd79:	89 d9                	mov    ecx,ebx
c001fd7b:	89 f3                	mov    ebx,esi
c001fd7d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fd83:	09 ca                	or     edx,ecx
c001fd85:	84 db                	test   bl,bl
c001fd87:	74 06                	je     c001fd8f <Vm::fpuLongToFloat(long long)+0x53>
c001fd89:	81 ca 00 00 00 80    	or     edx,0x80000000
c001fd8f:	5b                   	pop    ebx
c001fd90:	5e                   	pop    esi
c001fd91:	c3                   	ret    

c001fd92 <Vm::fpuGet0()>:
c001fd92:	31 c0                	xor    eax,eax
c001fd94:	31 d2                	xor    edx,edx
c001fd96:	c3                   	ret    

c001fd97 <Vm::fpuGet1()>:
c001fd97:	b8 01 00 00 00       	mov    eax,0x1
c001fd9c:	31 d2                	xor    edx,edx
c001fd9e:	c3                   	ret    

c001fd9f <Vm::fpuGetPi()>:
c001fd9f:	b8 03 00 00 00       	mov    eax,0x3
c001fda4:	31 d2                	xor    edx,edx
c001fda6:	c3                   	ret    

c001fda7 <Vm::fpuGetLog2E()>:
c001fda7:	83 ec 18             	sub    esp,0x18
c001fdaa:	68 f8 d0 02 c0       	push   0xc002d0f8
c001fdaf:	e8 51 aa ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001fdb4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fdb9:	31 d2                	xor    edx,edx
c001fdbb:	83 c4 1c             	add    esp,0x1c
c001fdbe:	c3                   	ret    

c001fdbf <Vm::fpuGetLogE2()>:
c001fdbf:	83 ec 18             	sub    esp,0x18
c001fdc2:	68 04 d1 02 c0       	push   0xc002d104
c001fdc7:	e8 39 aa ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001fdcc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fdd1:	31 d2                	xor    edx,edx
c001fdd3:	83 c4 1c             	add    esp,0x1c
c001fdd6:	c3                   	ret    

c001fdd7 <Vm::fpuGetLog210()>:
c001fdd7:	83 ec 18             	sub    esp,0x18
c001fdda:	68 10 d1 02 c0       	push   0xc002d110
c001fddf:	e8 21 aa ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001fde4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fde9:	31 d2                	xor    edx,edx
c001fdeb:	83 c4 1c             	add    esp,0x1c
c001fdee:	c3                   	ret    

c001fdef <Vm::fpuGetLog102()>:
c001fdef:	83 ec 18             	sub    esp,0x18
c001fdf2:	68 1d d1 02 c0       	push   0xc002d11d
c001fdf7:	e8 09 aa ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001fdfc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe01:	31 d2                	xor    edx,edx
c001fe03:	83 c4 1c             	add    esp,0x1c
c001fe06:	c3                   	ret    

c001fe07 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001fe07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe0b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001fe0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe13:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001fe17:	0f 92 c0             	setb   al
c001fe1a:	c3                   	ret    

c001fe1b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001fe1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fe1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe23:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001fe27:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001fe2b:	09 c2                	or     edx,eax
c001fe2d:	0f 94 c0             	sete   al
c001fe30:	c3                   	ret    

c001fe31 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001fe31:	57                   	push   edi
c001fe32:	56                   	push   esi
c001fe33:	53                   	push   ebx
c001fe34:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fe38:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fe3c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001fe40:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fe44:	57                   	push   edi
c001fe45:	56                   	push   esi
c001fe46:	53                   	push   ebx
c001fe47:	51                   	push   ecx
c001fe48:	e8 ce ff ff ff       	call   c001fe1b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001fe4d:	83 c4 10             	add    esp,0x10
c001fe50:	88 c2                	mov    dl,al
c001fe52:	31 c0                	xor    eax,eax
c001fe54:	84 d2                	test   dl,dl
c001fe56:	75 0c                	jne    c001fe64 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001fe58:	57                   	push   edi
c001fe59:	56                   	push   esi
c001fe5a:	53                   	push   ebx
c001fe5b:	51                   	push   ecx
c001fe5c:	e8 a6 ff ff ff       	call   c001fe07 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001fe61:	83 c4 10             	add    esp,0x10
c001fe64:	83 e0 01             	and    eax,0x1
c001fe67:	5b                   	pop    ebx
c001fe68:	88 c1                	mov    cl,al
c001fe6a:	83 e2 01             	and    edx,0x1
c001fe6d:	a0 a1 23 03 c0       	mov    al,ds:0xc00323a1
c001fe72:	c1 e2 06             	shl    edx,0x6
c001fe75:	83 e0 ba             	and    eax,0xffffffba
c001fe78:	5e                   	pop    esi
c001fe79:	09 c8                	or     eax,ecx
c001fe7b:	5f                   	pop    edi
c001fe7c:	09 d0                	or     eax,edx
c001fe7e:	a2 a1 23 03 c0       	mov    ds:0xc00323a1,al
c001fe83:	c3                   	ret    

c001fe84 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001fe84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fe8c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001fe90:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001fe94:	c3                   	ret    

c001fe95 <Vm::fpuAbs(unsigned long long)>:
c001fe95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe99:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe9d:	c3                   	ret    

c001fe9e <Vm::fpuChs(unsigned long long)>:
c001fe9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fea2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fea6:	f7 d8                	neg    eax
c001fea8:	83 d2 00             	adc    edx,0x0
c001feab:	f7 da                	neg    edx
c001fead:	c3                   	ret    

c001feae <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001feae:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001feb2:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001feb7:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001febb:	eb c7                	jmp    c001fe84 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001febd <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001febd:	53                   	push   ebx
c001febe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fec2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fec6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001feca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fece:	0f af ca             	imul   ecx,edx
c001fed1:	0f af d8             	imul   ebx,eax
c001fed4:	f7 e2                	mul    edx
c001fed6:	01 d9                	add    ecx,ebx
c001fed8:	5b                   	pop    ebx
c001fed9:	01 ca                	add    edx,ecx
c001fedb:	c3                   	ret    

c001fedc <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001fedc:	83 ec 0c             	sub    esp,0xc
c001fedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fee3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fee7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feef:	e8 40 72 00 00       	call   c0027134 <__udivdi3>
c001fef4:	83 c4 1c             	add    esp,0x1c
c001fef7:	c3                   	ret    

c001fef8 <Vm::fpuSquare(unsigned long long)>:
c001fef8:	50                   	push   eax
c001fef9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fefd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ff01:	52                   	push   edx
c001ff02:	50                   	push   eax
c001ff03:	52                   	push   edx
c001ff04:	50                   	push   eax
c001ff05:	e8 b3 ff ff ff       	call   c001febd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff0a:	83 c4 14             	add    esp,0x14
c001ff0d:	c3                   	ret    

c001ff0e <Vm::fpuGetReg(int)>:
c001ff0e:	83 ec 0c             	sub    esp,0xc
c001ff11:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ff16:	76 10                	jbe    c001ff28 <Vm::fpuGetReg(int)+0x1a>
c001ff18:	83 ec 0c             	sub    esp,0xc
c001ff1b:	68 2a d1 02 c0       	push   0xc002d12a
c001ff20:	e8 e0 a8 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001ff25:	83 c4 10             	add    esp,0x10
c001ff28:	a0 a1 23 03 c0       	mov    al,ds:0xc00323a1
c001ff2d:	b9 08 00 00 00       	mov    ecx,0x8
c001ff32:	c0 e8 03             	shr    al,0x3
c001ff35:	83 e0 07             	and    eax,0x7
c001ff38:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ff3c:	99                   	cdq    
c001ff3d:	f7 f9                	idiv   ecx
c001ff3f:	8b 04 d5 a4 23 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcdc5c]
c001ff46:	8b 14 d5 a8 23 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcdc58]
c001ff4d:	83 c4 0c             	add    esp,0xc
c001ff50:	c3                   	ret    

c001ff51 <Vm::fpuSetReg(int, unsigned long long)>:
c001ff51:	57                   	push   edi
c001ff52:	56                   	push   esi
c001ff53:	52                   	push   edx
c001ff54:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ff58:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ff5c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ff61:	76 10                	jbe    c001ff73 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001ff63:	83 ec 0c             	sub    esp,0xc
c001ff66:	68 3d d1 02 c0       	push   0xc002d13d
c001ff6b:	e8 95 a8 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c001ff70:	83 c4 10             	add    esp,0x10
c001ff73:	a0 a1 23 03 c0       	mov    al,ds:0xc00323a1
c001ff78:	b9 08 00 00 00       	mov    ecx,0x8
c001ff7d:	c0 e8 03             	shr    al,0x3
c001ff80:	83 e0 07             	and    eax,0x7
c001ff83:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ff87:	99                   	cdq    
c001ff88:	f7 f9                	idiv   ecx
c001ff8a:	89 34 d5 a4 23 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdc5c],esi
c001ff91:	89 3c d5 a8 23 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdc58],edi
c001ff98:	58                   	pop    eax
c001ff99:	5e                   	pop    esi
c001ff9a:	5f                   	pop    edi
c001ff9b:	c3                   	ret    

c001ff9c <Vm::fpuPush(unsigned long long)>:
c001ff9c:	a0 a1 23 03 c0       	mov    al,ds:0xc00323a1
c001ffa1:	c0 e8 03             	shr    al,0x3
c001ffa4:	83 e0 07             	and    eax,0x7
c001ffa7:	83 c0 07             	add    eax,0x7
c001ffaa:	88 c2                	mov    dl,al
c001ffac:	83 e0 07             	and    eax,0x7
c001ffaf:	83 e2 07             	and    edx,0x7
c001ffb2:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001ffb9:	8a 15 a1 23 03 c0    	mov    dl,BYTE PTR ds:0xc00323a1
c001ffbf:	83 e2 c7             	and    edx,0xffffffc7
c001ffc2:	09 ca                	or     edx,ecx
c001ffc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ffc8:	88 15 a1 23 03 c0    	mov    BYTE PTR ds:0xc00323a1,dl
c001ffce:	89 0c c5 a8 23 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdc58],ecx
c001ffd5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ffd9:	89 14 c5 a4 23 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdc5c],edx
c001ffe0:	a1 e4 23 03 c0       	mov    eax,ds:0xc00323e4
c001ffe5:	83 f8 08             	cmp    eax,0x8
c001ffe8:	75 08                	jne    c001fff2 <Vm::fpuPush(unsigned long long)+0x56>
c001ffea:	80 0d a0 23 03 c0 40 	or     BYTE PTR ds:0xc00323a0,0x40
c001fff1:	c3                   	ret    
c001fff2:	40                   	inc    eax
c001fff3:	a3 e4 23 03 c0       	mov    ds:0xc00323e4,eax
c001fff8:	c3                   	ret    

c001fff9 <Vm::fpuPop()>:
c001fff9:	8a 0d a1 23 03 c0    	mov    cl,BYTE PTR ds:0xc00323a1
c001ffff:	53                   	push   ebx
c0020000:	c0 e9 03             	shr    cl,0x3
c0020003:	8a 1d a1 23 03 c0    	mov    bl,BYTE PTR ds:0xc00323a1
c0020009:	83 e1 07             	and    ecx,0x7
c002000c:	83 e3 c7             	and    ebx,0xffffffc7
c002000f:	8b 04 cd a4 23 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcdc5c]
c0020016:	8b 14 cd a8 23 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcdc58]
c002001d:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0020024:	83 e1 38             	and    ecx,0x38
c0020027:	09 d9                	or     ecx,ebx
c0020029:	88 0d a1 23 03 c0    	mov    BYTE PTR ds:0xc00323a1,cl
c002002f:	8b 0d e4 23 03 c0    	mov    ecx,DWORD PTR ds:0xc00323e4
c0020035:	85 c9                	test   ecx,ecx
c0020037:	74 09                	je     c0020042 <Vm::fpuPop()+0x49>
c0020039:	49                   	dec    ecx
c002003a:	89 0d e4 23 03 c0    	mov    DWORD PTR ds:0xc00323e4,ecx
c0020040:	eb 07                	jmp    c0020049 <Vm::fpuPop()+0x50>
c0020042:	80 0d a0 23 03 c0 40 	or     BYTE PTR ds:0xc00323a0,0x40
c0020049:	5b                   	pop    ebx
c002004a:	c3                   	ret    

c002004b <Vm::x87Handler(regs*)>:
c002004b:	55                   	push   ebp
c002004c:	57                   	push   edi
c002004d:	56                   	push   esi
c002004e:	53                   	push   ebx
c002004f:	83 ec 1c             	sub    esp,0x1c
c0020052:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020056:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c002005b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c002005e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0020066:	8d 44 24 0b          	lea    eax,[esp+0xb]
c002006a:	50                   	push   eax
c002006b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c002006f:	50                   	push   eax
c0020070:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020074:	50                   	push   eax
c0020075:	53                   	push   ebx
c0020076:	e8 51 9e ff ff       	call   c0019ecc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c002007b:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c002007e:	83 c4 10             	add    esp,0x10
c0020081:	89 c6                	mov    esi,eax
c0020083:	80 fa d9             	cmp    dl,0xd9
c0020086:	0f 85 52 01 00 00    	jne    c00201de <Vm::x87Handler(regs*)+0x193>
c002008c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020090:	8d 50 20             	lea    edx,[eax+0x20]
c0020093:	80 fa 0e             	cmp    dl,0xe
c0020096:	0f 87 86 00 00 00    	ja     c0020122 <Vm::x87Handler(regs*)+0xd7>
c002009c:	0f b6 d2             	movzx  edx,dl
c002009f:	ff 24 95 50 d1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2eb0]
c00200a6:	e8 e7 fc ff ff       	call   c001fd92 <Vm::fpuGet0()>
c00200ab:	eb 05                	jmp    c00200b2 <Vm::x87Handler(regs*)+0x67>
c00200ad:	e8 e5 fc ff ff       	call   c001fd97 <Vm::fpuGet1()>
c00200b2:	57                   	push   edi
c00200b3:	57                   	push   edi
c00200b4:	52                   	push   edx
c00200b5:	50                   	push   eax
c00200b6:	e8 e1 fe ff ff       	call   c001ff9c <Vm::fpuPush(unsigned long long)>
c00200bb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200bf:	83 c4 10             	add    esp,0x10
c00200c2:	b0 01                	mov    al,0x1
c00200c4:	e9 e3 09 00 00       	jmp    c0020aac <Vm::x87Handler(regs*)+0xa61>
c00200c9:	83 ec 0c             	sub    esp,0xc
c00200cc:	6a 00                	push   0x0
c00200ce:	e8 3b fe ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00200d3:	59                   	pop    ecx
c00200d4:	5e                   	pop    esi
c00200d5:	52                   	push   edx
c00200d6:	50                   	push   eax
c00200d7:	e8 c2 fd ff ff       	call   c001fe9e <Vm::fpuChs(unsigned long long)>
c00200dc:	eb 13                	jmp    c00200f1 <Vm::x87Handler(regs*)+0xa6>
c00200de:	83 ec 0c             	sub    esp,0xc
c00200e1:	6a 00                	push   0x0
c00200e3:	e8 26 fe ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00200e8:	5f                   	pop    edi
c00200e9:	5d                   	pop    ebp
c00200ea:	52                   	push   edx
c00200eb:	50                   	push   eax
c00200ec:	e8 a4 fd ff ff       	call   c001fe95 <Vm::fpuAbs(unsigned long long)>
c00200f1:	83 c4 0c             	add    esp,0xc
c00200f4:	52                   	push   edx
c00200f5:	50                   	push   eax
c00200f6:	6a 00                	push   0x0
c00200f8:	e8 54 fe ff ff       	call   c001ff51 <Vm::fpuSetReg(int, unsigned long long)>
c00200fd:	eb bc                	jmp    c00200bb <Vm::x87Handler(regs*)+0x70>
c00200ff:	e8 d3 fc ff ff       	call   c001fdd7 <Vm::fpuGetLog210()>
c0020104:	eb ac                	jmp    c00200b2 <Vm::x87Handler(regs*)+0x67>
c0020106:	e8 9c fc ff ff       	call   c001fda7 <Vm::fpuGetLog2E()>
c002010b:	eb a5                	jmp    c00200b2 <Vm::x87Handler(regs*)+0x67>
c002010d:	e8 8d fc ff ff       	call   c001fd9f <Vm::fpuGetPi()>
c0020112:	eb 9e                	jmp    c00200b2 <Vm::x87Handler(regs*)+0x67>
c0020114:	e8 d6 fc ff ff       	call   c001fdef <Vm::fpuGetLog102()>
c0020119:	eb 97                	jmp    c00200b2 <Vm::x87Handler(regs*)+0x67>
c002011b:	e8 9f fc ff ff       	call   c001fdbf <Vm::fpuGetLogE2()>
c0020120:	eb 90                	jmp    c00200b2 <Vm::x87Handler(regs*)+0x67>
c0020122:	8d 50 40             	lea    edx,[eax+0x40]
c0020125:	80 fa 07             	cmp    dl,0x7
c0020128:	77 15                	ja     c002013f <Vm::x87Handler(regs*)+0xf4>
c002012a:	83 ec 0c             	sub    esp,0xc
c002012d:	2d c0 00 00 00       	sub    eax,0xc0
c0020132:	50                   	push   eax
c0020133:	e8 d6 fd ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020138:	59                   	pop    ecx
c0020139:	5e                   	pop    esi
c002013a:	e9 75 ff ff ff       	jmp    c00200b4 <Vm::x87Handler(regs*)+0x69>
c002013f:	8d 50 38             	lea    edx,[eax+0x38]
c0020142:	80 fa 07             	cmp    dl,0x7
c0020145:	77 3c                	ja     c0020183 <Vm::x87Handler(regs*)+0x138>
c0020147:	83 ec 0c             	sub    esp,0xc
c002014a:	2d c8 00 00 00       	sub    eax,0xc8
c002014f:	50                   	push   eax
c0020150:	e8 b9 fd ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020155:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002015c:	89 c6                	mov    esi,eax
c002015e:	89 d7                	mov    edi,edx
c0020160:	e8 a9 fd ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020165:	83 c4 0c             	add    esp,0xc
c0020168:	52                   	push   edx
c0020169:	50                   	push   eax
c002016a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002016e:	2d c8 00 00 00       	sub    eax,0xc8
c0020173:	50                   	push   eax
c0020174:	e8 d8 fd ff ff       	call   c001ff51 <Vm::fpuSetReg(int, unsigned long long)>
c0020179:	83 c4 0c             	add    esp,0xc
c002017c:	57                   	push   edi
c002017d:	56                   	push   esi
c002017e:	e9 73 ff ff ff       	jmp    c00200f6 <Vm::x87Handler(regs*)+0xab>
c0020183:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020187:	84 d2                	test   dl,dl
c0020189:	75 0f                	jne    c002019a <Vm::x87Handler(regs*)+0x14f>
c002018b:	83 ec 0c             	sub    esp,0xc
c002018e:	ff 36                	push   DWORD PTR [esi]
c0020190:	e8 c8 fa ff ff       	call   c001fc5d <Vm::fpu32ToInternal(unsigned int)>
c0020195:	e9 bf 00 00 00       	jmp    c0020259 <Vm::x87Handler(regs*)+0x20e>
c002019a:	80 fa 03             	cmp    dl,0x3
c002019d:	75 13                	jne    c00201b2 <Vm::x87Handler(regs*)+0x167>
c002019f:	e8 55 fe ff ff       	call   c001fff9 <Vm::fpuPop()>
c00201a4:	55                   	push   ebp
c00201a5:	55                   	push   ebp
c00201a6:	52                   	push   edx
c00201a7:	50                   	push   eax
c00201a8:	e8 4c fa ff ff       	call   c001fbf9 <Vm::fpuInternalTo32(unsigned long long)>
c00201ad:	e9 88 00 00 00       	jmp    c002023a <Vm::x87Handler(regs*)+0x1ef>
c00201b2:	80 fa 05             	cmp    dl,0x5
c00201b5:	75 0e                	jne    c00201c5 <Vm::x87Handler(regs*)+0x17a>
c00201b7:	66 8b 06             	mov    ax,WORD PTR [esi]
c00201ba:	66 a3 a2 23 03 c0    	mov    ds:0xc00323a2,ax
c00201c0:	e9 df 00 00 00       	jmp    c00202a4 <Vm::x87Handler(regs*)+0x259>
c00201c5:	31 c0                	xor    eax,eax
c00201c7:	80 fa 07             	cmp    dl,0x7
c00201ca:	0f 85 dc 08 00 00    	jne    c0020aac <Vm::x87Handler(regs*)+0xa61>
c00201d0:	66 a1 a2 23 03 c0    	mov    ax,ds:0xc00323a2
c00201d6:	66 89 06             	mov    WORD PTR [esi],ax
c00201d9:	e9 c6 00 00 00       	jmp    c00202a4 <Vm::x87Handler(regs*)+0x259>
c00201de:	80 fa d8             	cmp    dl,0xd8
c00201e1:	0f 84 c9 00 00 00    	je     c00202b0 <Vm::x87Handler(regs*)+0x265>
c00201e7:	80 fa dc             	cmp    dl,0xdc
c00201ea:	0f 84 0d 02 00 00    	je     c00203fd <Vm::x87Handler(regs*)+0x3b2>
c00201f0:	80 fa de             	cmp    dl,0xde
c00201f3:	0f 84 cd 02 00 00    	je     c00204c6 <Vm::x87Handler(regs*)+0x47b>
c00201f9:	80 fa dd             	cmp    dl,0xdd
c00201fc:	0f 84 5f 04 00 00    	je     c0020661 <Vm::x87Handler(regs*)+0x616>
c0020202:	80 fa da             	cmp    dl,0xda
c0020205:	0f 84 24 05 00 00    	je     c002072f <Vm::x87Handler(regs*)+0x6e4>
c002020b:	80 fa df             	cmp    dl,0xdf
c002020e:	0f 84 68 05 00 00    	je     c002077c <Vm::x87Handler(regs*)+0x731>
c0020214:	31 c0                	xor    eax,eax
c0020216:	80 fa db             	cmp    dl,0xdb
c0020219:	0f 85 8d 08 00 00    	jne    c0020aac <Vm::x87Handler(regs*)+0xa61>
c002021f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020223:	80 fa 03             	cmp    dl,0x3
c0020226:	0f 85 70 06 00 00    	jne    c002089c <Vm::x87Handler(regs*)+0x851>
c002022c:	e8 c8 fd ff ff       	call   c001fff9 <Vm::fpuPop()>
c0020231:	55                   	push   ebp
c0020232:	55                   	push   ebp
c0020233:	52                   	push   edx
c0020234:	50                   	push   eax
c0020235:	e8 71 fa ff ff       	call   c001fcab <Vm::fpuFloatToLong(unsigned long long)>
c002023a:	83 c4 10             	add    esp,0x10
c002023d:	89 06                	mov    DWORD PTR [esi],eax
c002023f:	eb 63                	jmp    c00202a4 <Vm::x87Handler(regs*)+0x259>
c0020241:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020245:	84 d2                	test   dl,dl
c0020247:	0f 85 e6 05 00 00    	jne    c0020833 <Vm::x87Handler(regs*)+0x7e8>
c002024d:	57                   	push   edi
c002024e:	57                   	push   edi
c002024f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020252:	ff 36                	push   DWORD PTR [esi]
c0020254:	e8 49 fa ff ff       	call   c001fca2 <Vm::fpu64ToInternal(unsigned long long)>
c0020259:	5e                   	pop    esi
c002025a:	5f                   	pop    edi
c002025b:	52                   	push   edx
c002025c:	50                   	push   eax
c002025d:	e8 3a fd ff ff       	call   c001ff9c <Vm::fpuPush(unsigned long long)>
c0020262:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020266:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020269:	e9 51 fe ff ff       	jmp    c00200bf <Vm::x87Handler(regs*)+0x74>
c002026e:	80 fa 03             	cmp    dl,0x3
c0020271:	0f 85 d7 06 00 00    	jne    c002094e <Vm::x87Handler(regs*)+0x903>
c0020277:	57                   	push   edi
c0020278:	57                   	push   edi
c0020279:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002027c:	ff 36                	push   DWORD PTR [esi]
c002027e:	e8 1f fa ff ff       	call   c001fca2 <Vm::fpu64ToInternal(unsigned long long)>
c0020283:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002028a:	89 c6                	mov    esi,eax
c002028c:	89 d7                	mov    edi,edx
c002028e:	e8 7b fc ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020293:	57                   	push   edi
c0020294:	56                   	push   esi
c0020295:	52                   	push   edx
c0020296:	50                   	push   eax
c0020297:	e8 95 fb ff ff       	call   c001fe31 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002029c:	83 c4 20             	add    esp,0x20
c002029f:	e8 55 fd ff ff       	call   c001fff9 <Vm::fpuPop()>
c00202a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00202a8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00202ab:	e9 12 fe ff ff       	jmp    c00200c2 <Vm::x87Handler(regs*)+0x77>
c00202b0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00202b4:	8d 50 40             	lea    edx,[eax+0x40]
c00202b7:	80 fa 07             	cmp    dl,0x7
c00202ba:	77 29                	ja     c00202e5 <Vm::x87Handler(regs*)+0x29a>
c00202bc:	83 ec 0c             	sub    esp,0xc
c00202bf:	2d c0 00 00 00       	sub    eax,0xc0
c00202c4:	50                   	push   eax
c00202c5:	e8 44 fc ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00202ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202d1:	89 c6                	mov    esi,eax
c00202d3:	89 d7                	mov    edi,edx
c00202d5:	e8 34 fc ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00202da:	57                   	push   edi
c00202db:	56                   	push   esi
c00202dc:	52                   	push   edx
c00202dd:	50                   	push   eax
c00202de:	e8 a1 fb ff ff       	call   c001fe84 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00202e3:	eb 2f                	jmp    c0020314 <Vm::x87Handler(regs*)+0x2c9>
c00202e5:	8d 50 38             	lea    edx,[eax+0x38]
c00202e8:	80 fa 07             	cmp    dl,0x7
c00202eb:	77 2f                	ja     c002031c <Vm::x87Handler(regs*)+0x2d1>
c00202ed:	83 ec 0c             	sub    esp,0xc
c00202f0:	2d c8 00 00 00       	sub    eax,0xc8
c00202f5:	50                   	push   eax
c00202f6:	e8 13 fc ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00202fb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020302:	89 c6                	mov    esi,eax
c0020304:	89 d7                	mov    edi,edx
c0020306:	e8 03 fc ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c002030b:	57                   	push   edi
c002030c:	56                   	push   esi
c002030d:	52                   	push   edx
c002030e:	50                   	push   eax
c002030f:	e8 a9 fb ff ff       	call   c001febd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020314:	83 c4 1c             	add    esp,0x1c
c0020317:	e9 d8 fd ff ff       	jmp    c00200f4 <Vm::x87Handler(regs*)+0xa9>
c002031c:	8d 50 30             	lea    edx,[eax+0x30]
c002031f:	80 fa 07             	cmp    dl,0x7
c0020322:	77 0d                	ja     c0020331 <Vm::x87Handler(regs*)+0x2e6>
c0020324:	83 ec 0c             	sub    esp,0xc
c0020327:	2d d0 00 00 00       	sub    eax,0xd0
c002032c:	e9 99 03 00 00       	jmp    c00206ca <Vm::x87Handler(regs*)+0x67f>
c0020331:	8d 50 28             	lea    edx,[eax+0x28]
c0020334:	80 fa 07             	cmp    dl,0x7
c0020337:	77 0d                	ja     c0020346 <Vm::x87Handler(regs*)+0x2fb>
c0020339:	83 ec 0c             	sub    esp,0xc
c002033c:	2d d8 00 00 00       	sub    eax,0xd8
c0020341:	e9 c0 03 00 00       	jmp    c0020706 <Vm::x87Handler(regs*)+0x6bb>
c0020346:	8d 50 20             	lea    edx,[eax+0x20]
c0020349:	80 fa 07             	cmp    dl,0x7
c002034c:	77 1b                	ja     c0020369 <Vm::x87Handler(regs*)+0x31e>
c002034e:	83 ec 0c             	sub    esp,0xc
c0020351:	2d e0 00 00 00       	sub    eax,0xe0
c0020356:	50                   	push   eax
c0020357:	e8 b2 fb ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c002035c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020363:	89 c6                	mov    esi,eax
c0020365:	89 d7                	mov    edi,edx
c0020367:	eb 22                	jmp    c002038b <Vm::x87Handler(regs*)+0x340>
c0020369:	8d 50 18             	lea    edx,[eax+0x18]
c002036c:	80 fa 07             	cmp    dl,0x7
c002036f:	77 2d                	ja     c002039e <Vm::x87Handler(regs*)+0x353>
c0020371:	83 ec 0c             	sub    esp,0xc
c0020374:	6a 00                	push   0x0
c0020376:	e8 93 fb ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c002037b:	89 c6                	mov    esi,eax
c002037d:	89 d7                	mov    edi,edx
c002037f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020383:	2d e8 00 00 00       	sub    eax,0xe8
c0020388:	89 04 24             	mov    DWORD PTR [esp],eax
c002038b:	e8 7e fb ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020390:	57                   	push   edi
c0020391:	56                   	push   esi
c0020392:	52                   	push   edx
c0020393:	50                   	push   eax
c0020394:	e8 15 fb ff ff       	call   c001feae <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020399:	e9 76 ff ff ff       	jmp    c0020314 <Vm::x87Handler(regs*)+0x2c9>
c002039e:	8d 50 10             	lea    edx,[eax+0x10]
c00203a1:	80 fa 07             	cmp    dl,0x7
c00203a4:	77 1b                	ja     c00203c1 <Vm::x87Handler(regs*)+0x376>
c00203a6:	83 ec 0c             	sub    esp,0xc
c00203a9:	2d f0 00 00 00       	sub    eax,0xf0
c00203ae:	50                   	push   eax
c00203af:	e8 5a fb ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00203b4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203bb:	89 c6                	mov    esi,eax
c00203bd:	89 d7                	mov    edi,edx
c00203bf:	eb 22                	jmp    c00203e3 <Vm::x87Handler(regs*)+0x398>
c00203c1:	3c f7                	cmp    al,0xf7
c00203c3:	0f 86 d1 03 00 00    	jbe    c002079a <Vm::x87Handler(regs*)+0x74f>
c00203c9:	83 ec 0c             	sub    esp,0xc
c00203cc:	6a 00                	push   0x0
c00203ce:	e8 3b fb ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00203d3:	89 c6                	mov    esi,eax
c00203d5:	89 d7                	mov    edi,edx
c00203d7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00203db:	2d f8 00 00 00       	sub    eax,0xf8
c00203e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00203e3:	e8 26 fb ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00203e8:	57                   	push   edi
c00203e9:	56                   	push   esi
c00203ea:	52                   	push   edx
c00203eb:	50                   	push   eax
c00203ec:	e8 eb fa ff ff       	call   c001fedc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203f1:	83 c4 1c             	add    esp,0x1c
c00203f4:	52                   	push   edx
c00203f5:	50                   	push   eax
c00203f6:	6a 00                	push   0x0
c00203f8:	e9 51 02 00 00       	jmp    c002064e <Vm::x87Handler(regs*)+0x603>
c00203fd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020401:	8d 50 40             	lea    edx,[eax+0x40]
c0020404:	80 fa 07             	cmp    dl,0x7
c0020407:	77 37                	ja     c0020440 <Vm::x87Handler(regs*)+0x3f5>
c0020409:	83 ec 0c             	sub    esp,0xc
c002040c:	2d c0 00 00 00       	sub    eax,0xc0
c0020411:	50                   	push   eax
c0020412:	e8 f7 fa ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020417:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002041e:	89 c6                	mov    esi,eax
c0020420:	89 d7                	mov    edi,edx
c0020422:	e8 e7 fa ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020427:	57                   	push   edi
c0020428:	56                   	push   esi
c0020429:	52                   	push   edx
c002042a:	50                   	push   eax
c002042b:	e8 54 fa ff ff       	call   c001fe84 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020430:	83 c4 1c             	add    esp,0x1c
c0020433:	52                   	push   edx
c0020434:	50                   	push   eax
c0020435:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020439:	2d c0 00 00 00       	sub    eax,0xc0
c002043e:	eb 3d                	jmp    c002047d <Vm::x87Handler(regs*)+0x432>
c0020440:	8d 50 38             	lea    edx,[eax+0x38]
c0020443:	80 fa 07             	cmp    dl,0x7
c0020446:	77 3b                	ja     c0020483 <Vm::x87Handler(regs*)+0x438>
c0020448:	83 ec 0c             	sub    esp,0xc
c002044b:	2d c8 00 00 00       	sub    eax,0xc8
c0020450:	50                   	push   eax
c0020451:	e8 b8 fa ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020456:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002045d:	89 c6                	mov    esi,eax
c002045f:	89 d7                	mov    edi,edx
c0020461:	e8 a8 fa ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020466:	57                   	push   edi
c0020467:	56                   	push   esi
c0020468:	52                   	push   edx
c0020469:	50                   	push   eax
c002046a:	e8 4e fa ff ff       	call   c001febd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002046f:	83 c4 1c             	add    esp,0x1c
c0020472:	52                   	push   edx
c0020473:	50                   	push   eax
c0020474:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020478:	2d c8 00 00 00       	sub    eax,0xc8
c002047d:	50                   	push   eax
c002047e:	e9 75 fc ff ff       	jmp    c00200f8 <Vm::x87Handler(regs*)+0xad>
c0020483:	83 c0 18             	add    eax,0x18
c0020486:	3c 07                	cmp    al,0x7
c0020488:	0f 87 3b 04 00 00    	ja     c00208c9 <Vm::x87Handler(regs*)+0x87e>
c002048e:	83 ec 0c             	sub    esp,0xc
c0020491:	6a 00                	push   0x0
c0020493:	e8 76 fa ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020498:	89 c6                	mov    esi,eax
c002049a:	89 d7                	mov    edi,edx
c002049c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204a0:	2d e8 00 00 00       	sub    eax,0xe8
c00204a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00204a8:	e8 61 fa ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00204ad:	57                   	push   edi
c00204ae:	56                   	push   esi
c00204af:	52                   	push   edx
c00204b0:	50                   	push   eax
c00204b1:	e8 f8 f9 ff ff       	call   c001feae <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204b6:	83 c4 1c             	add    esp,0x1c
c00204b9:	52                   	push   edx
c00204ba:	50                   	push   eax
c00204bb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204bf:	2d e8 00 00 00       	sub    eax,0xe8
c00204c4:	eb b7                	jmp    c002047d <Vm::x87Handler(regs*)+0x432>
c00204c6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204ca:	8d 50 40             	lea    edx,[eax+0x40]
c00204cd:	80 fa 07             	cmp    dl,0x7
c00204d0:	77 3a                	ja     c002050c <Vm::x87Handler(regs*)+0x4c1>
c00204d2:	83 ec 0c             	sub    esp,0xc
c00204d5:	2d c0 00 00 00       	sub    eax,0xc0
c00204da:	50                   	push   eax
c00204db:	e8 2e fa ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00204e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204e7:	89 c6                	mov    esi,eax
c00204e9:	89 d7                	mov    edi,edx
c00204eb:	e8 1e fa ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00204f0:	57                   	push   edi
c00204f1:	56                   	push   esi
c00204f2:	52                   	push   edx
c00204f3:	50                   	push   eax
c00204f4:	e8 8b f9 ff ff       	call   c001fe84 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00204f9:	83 c4 1c             	add    esp,0x1c
c00204fc:	52                   	push   edx
c00204fd:	50                   	push   eax
c00204fe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020502:	2d c0 00 00 00       	sub    eax,0xc0
c0020507:	e9 9e 01 00 00       	jmp    c00206aa <Vm::x87Handler(regs*)+0x65f>
c002050c:	8d 50 20             	lea    edx,[eax+0x20]
c002050f:	80 fa 07             	cmp    dl,0x7
c0020512:	77 3a                	ja     c002054e <Vm::x87Handler(regs*)+0x503>
c0020514:	83 ec 0c             	sub    esp,0xc
c0020517:	2d e0 00 00 00       	sub    eax,0xe0
c002051c:	50                   	push   eax
c002051d:	e8 ec f9 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020522:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020529:	89 c6                	mov    esi,eax
c002052b:	89 d7                	mov    edi,edx
c002052d:	e8 dc f9 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020532:	57                   	push   edi
c0020533:	56                   	push   esi
c0020534:	52                   	push   edx
c0020535:	50                   	push   eax
c0020536:	e8 73 f9 ff ff       	call   c001feae <Vm::fpuSub(unsigned long long, unsigned long long)>
c002053b:	83 c4 1c             	add    esp,0x1c
c002053e:	52                   	push   edx
c002053f:	50                   	push   eax
c0020540:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020544:	2d e0 00 00 00       	sub    eax,0xe0
c0020549:	e9 5c 01 00 00       	jmp    c00206aa <Vm::x87Handler(regs*)+0x65f>
c002054e:	8d 50 18             	lea    edx,[eax+0x18]
c0020551:	80 fa 07             	cmp    dl,0x7
c0020554:	77 3b                	ja     c0020591 <Vm::x87Handler(regs*)+0x546>
c0020556:	83 ec 0c             	sub    esp,0xc
c0020559:	6a 00                	push   0x0
c002055b:	e8 ae f9 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020560:	89 c6                	mov    esi,eax
c0020562:	89 d7                	mov    edi,edx
c0020564:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020568:	2d e8 00 00 00       	sub    eax,0xe8
c002056d:	89 04 24             	mov    DWORD PTR [esp],eax
c0020570:	e8 99 f9 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020575:	57                   	push   edi
c0020576:	56                   	push   esi
c0020577:	52                   	push   edx
c0020578:	50                   	push   eax
c0020579:	e8 30 f9 ff ff       	call   c001feae <Vm::fpuSub(unsigned long long, unsigned long long)>
c002057e:	83 c4 1c             	add    esp,0x1c
c0020581:	52                   	push   edx
c0020582:	50                   	push   eax
c0020583:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020587:	2d e8 00 00 00       	sub    eax,0xe8
c002058c:	e9 19 01 00 00       	jmp    c00206aa <Vm::x87Handler(regs*)+0x65f>
c0020591:	8d 50 38             	lea    edx,[eax+0x38]
c0020594:	80 fa 07             	cmp    dl,0x7
c0020597:	77 37                	ja     c00205d0 <Vm::x87Handler(regs*)+0x585>
c0020599:	83 ec 0c             	sub    esp,0xc
c002059c:	2d c8 00 00 00       	sub    eax,0xc8
c00205a1:	50                   	push   eax
c00205a2:	e8 67 f9 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00205a7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205ae:	89 c6                	mov    esi,eax
c00205b0:	89 d7                	mov    edi,edx
c00205b2:	e8 57 f9 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00205b7:	57                   	push   edi
c00205b8:	56                   	push   esi
c00205b9:	52                   	push   edx
c00205ba:	50                   	push   eax
c00205bb:	e8 fd f8 ff ff       	call   c001febd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00205c0:	83 c4 1c             	add    esp,0x1c
c00205c3:	52                   	push   edx
c00205c4:	50                   	push   eax
c00205c5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205c9:	2d c8 00 00 00       	sub    eax,0xc8
c00205ce:	eb 7d                	jmp    c002064d <Vm::x87Handler(regs*)+0x602>
c00205d0:	3c f7                	cmp    al,0xf7
c00205d2:	76 38                	jbe    c002060c <Vm::x87Handler(regs*)+0x5c1>
c00205d4:	83 ec 0c             	sub    esp,0xc
c00205d7:	6a 00                	push   0x0
c00205d9:	e8 30 f9 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00205de:	89 c6                	mov    esi,eax
c00205e0:	89 d7                	mov    edi,edx
c00205e2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205e6:	2d f8 00 00 00       	sub    eax,0xf8
c00205eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00205ee:	e8 1b f9 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00205f3:	57                   	push   edi
c00205f4:	56                   	push   esi
c00205f5:	52                   	push   edx
c00205f6:	50                   	push   eax
c00205f7:	e8 e0 f8 ff ff       	call   c001fedc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00205fc:	83 c4 1c             	add    esp,0x1c
c00205ff:	52                   	push   edx
c0020600:	50                   	push   eax
c0020601:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020605:	2d f8 00 00 00       	sub    eax,0xf8
c002060a:	eb 41                	jmp    c002064d <Vm::x87Handler(regs*)+0x602>
c002060c:	8d 50 10             	lea    edx,[eax+0x10]
c002060f:	80 fa 07             	cmp    dl,0x7
c0020612:	0f 87 5a 01 00 00    	ja     c0020772 <Vm::x87Handler(regs*)+0x727>
c0020618:	83 ec 0c             	sub    esp,0xc
c002061b:	2d f0 00 00 00       	sub    eax,0xf0
c0020620:	50                   	push   eax
c0020621:	e8 e8 f8 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020626:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002062d:	89 c6                	mov    esi,eax
c002062f:	89 d7                	mov    edi,edx
c0020631:	e8 d8 f8 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020636:	57                   	push   edi
c0020637:	56                   	push   esi
c0020638:	52                   	push   edx
c0020639:	50                   	push   eax
c002063a:	e8 9d f8 ff ff       	call   c001fedc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002063f:	83 c4 1c             	add    esp,0x1c
c0020642:	52                   	push   edx
c0020643:	50                   	push   eax
c0020644:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020648:	2d f0 00 00 00       	sub    eax,0xf0
c002064d:	50                   	push   eax
c002064e:	e8 fe f8 ff ff       	call   c001ff51 <Vm::fpuSetReg(int, unsigned long long)>
c0020653:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020657:	e8 9d f9 ff ff       	call   c001fff9 <Vm::fpuPop()>
c002065c:	e9 5e fa ff ff       	jmp    c00200bf <Vm::x87Handler(regs*)+0x74>
c0020661:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020665:	8d 50 30             	lea    edx,[eax+0x30]
c0020668:	80 fa 07             	cmp    dl,0x7
c002066b:	77 1d                	ja     c002068a <Vm::x87Handler(regs*)+0x63f>
c002066d:	83 ec 0c             	sub    esp,0xc
c0020670:	6a 00                	push   0x0
c0020672:	e8 97 f8 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020677:	83 c4 0c             	add    esp,0xc
c002067a:	52                   	push   edx
c002067b:	50                   	push   eax
c002067c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020680:	2d d0 00 00 00       	sub    eax,0xd0
c0020685:	e9 f3 fd ff ff       	jmp    c002047d <Vm::x87Handler(regs*)+0x432>
c002068a:	8d 50 28             	lea    edx,[eax+0x28]
c002068d:	80 fa 07             	cmp    dl,0x7
c0020690:	77 28                	ja     c00206ba <Vm::x87Handler(regs*)+0x66f>
c0020692:	83 ec 0c             	sub    esp,0xc
c0020695:	6a 00                	push   0x0
c0020697:	e8 72 f8 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c002069c:	83 c4 0c             	add    esp,0xc
c002069f:	52                   	push   edx
c00206a0:	50                   	push   eax
c00206a1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206a5:	2d d8 00 00 00       	sub    eax,0xd8
c00206aa:	50                   	push   eax
c00206ab:	e8 a1 f8 ff ff       	call   c001ff51 <Vm::fpuSetReg(int, unsigned long long)>
c00206b0:	e8 44 f9 ff ff       	call   c001fff9 <Vm::fpuPop()>
c00206b5:	e9 01 fa ff ff       	jmp    c00200bb <Vm::x87Handler(regs*)+0x70>
c00206ba:	8d 50 20             	lea    edx,[eax+0x20]
c00206bd:	80 fa 07             	cmp    dl,0x7
c00206c0:	77 30                	ja     c00206f2 <Vm::x87Handler(regs*)+0x6a7>
c00206c2:	83 ec 0c             	sub    esp,0xc
c00206c5:	2d e0 00 00 00       	sub    eax,0xe0
c00206ca:	50                   	push   eax
c00206cb:	e8 3e f8 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00206d0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206d7:	89 c6                	mov    esi,eax
c00206d9:	89 d7                	mov    edi,edx
c00206db:	e8 2e f8 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00206e0:	57                   	push   edi
c00206e1:	56                   	push   esi
c00206e2:	52                   	push   edx
c00206e3:	50                   	push   eax
c00206e4:	e8 48 f7 ff ff       	call   c001fe31 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00206e9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00206ed:	e9 54 02 00 00       	jmp    c0020946 <Vm::x87Handler(regs*)+0x8fb>
c00206f2:	8d 50 18             	lea    edx,[eax+0x18]
c00206f5:	80 fa 07             	cmp    dl,0x7
c00206f8:	0f 87 43 fb ff ff    	ja     c0020241 <Vm::x87Handler(regs*)+0x1f6>
c00206fe:	83 ec 0c             	sub    esp,0xc
c0020701:	2d e8 00 00 00       	sub    eax,0xe8
c0020706:	50                   	push   eax
c0020707:	e8 02 f8 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c002070c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020713:	89 c6                	mov    esi,eax
c0020715:	89 d7                	mov    edi,edx
c0020717:	e8 f2 f7 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c002071c:	57                   	push   edi
c002071d:	56                   	push   esi
c002071e:	52                   	push   edx
c002071f:	50                   	push   eax
c0020720:	e8 0c f7 ff ff       	call   c001fe31 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020725:	83 c4 20             	add    esp,0x20
c0020728:	e8 cc f8 ff ff       	call   c001fff9 <Vm::fpuPop()>
c002072d:	eb 62                	jmp    c0020791 <Vm::x87Handler(regs*)+0x746>
c002072f:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020733:	0f 85 0f 01 00 00    	jne    c0020848 <Vm::x87Handler(regs*)+0x7fd>
c0020739:	83 ec 0c             	sub    esp,0xc
c002073c:	6a 01                	push   0x1
c002073e:	e8 cb f7 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020743:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002074a:	89 c6                	mov    esi,eax
c002074c:	89 d7                	mov    edi,edx
c002074e:	e8 bb f7 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020753:	57                   	push   edi
c0020754:	56                   	push   esi
c0020755:	52                   	push   edx
c0020756:	50                   	push   eax
c0020757:	e8 d5 f6 ff ff       	call   c001fe31 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002075c:	83 c4 20             	add    esp,0x20
c002075f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020763:	e8 91 f8 ff ff       	call   c001fff9 <Vm::fpuPop()>
c0020768:	e8 8c f8 ff ff       	call   c001fff9 <Vm::fpuPop()>
c002076d:	e9 50 f9 ff ff       	jmp    c00200c2 <Vm::x87Handler(regs*)+0x77>
c0020772:	3c d9                	cmp    al,0xd9
c0020774:	0f 85 b5 02 00 00    	jne    c0020a2f <Vm::x87Handler(regs*)+0x9e4>
c002077a:	eb bd                	jmp    c0020739 <Vm::x87Handler(regs*)+0x6ee>
c002077c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020780:	0f 85 ea 02 00 00    	jne    c0020a70 <Vm::x87Handler(regs*)+0xa25>
c0020786:	0f b7 05 a0 23 03 c0 	movzx  eax,WORD PTR ds:0xc00323a0
c002078d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020791:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020795:	e9 28 f9 ff ff       	jmp    c00200c2 <Vm::x87Handler(regs*)+0x77>
c002079a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002079e:	84 d2                	test   dl,dl
c00207a0:	75 0f                	jne    c00207b1 <Vm::x87Handler(regs*)+0x766>
c00207a2:	83 ec 0c             	sub    esp,0xc
c00207a5:	ff 36                	push   DWORD PTR [esi]
c00207a7:	e8 b1 f4 ff ff       	call   c001fc5d <Vm::fpu32ToInternal(unsigned int)>
c00207ac:	e9 2c 01 00 00       	jmp    c00208dd <Vm::x87Handler(regs*)+0x892>
c00207b1:	80 fa 01             	cmp    dl,0x1
c00207b4:	75 0f                	jne    c00207c5 <Vm::x87Handler(regs*)+0x77a>
c00207b6:	83 ec 0c             	sub    esp,0xc
c00207b9:	ff 36                	push   DWORD PTR [esi]
c00207bb:	e8 9d f4 ff ff       	call   c001fc5d <Vm::fpu32ToInternal(unsigned int)>
c00207c0:	e9 81 02 00 00       	jmp    c0020a46 <Vm::x87Handler(regs*)+0x9fb>
c00207c5:	80 fa 04             	cmp    dl,0x4
c00207c8:	75 0f                	jne    c00207d9 <Vm::x87Handler(regs*)+0x78e>
c00207ca:	83 ec 0c             	sub    esp,0xc
c00207cd:	ff 36                	push   DWORD PTR [esi]
c00207cf:	e8 89 f4 ff ff       	call   c001fc5d <Vm::fpu32ToInternal(unsigned int)>
c00207d4:	e9 86 01 00 00       	jmp    c002095f <Vm::x87Handler(regs*)+0x914>
c00207d9:	80 fa 05             	cmp    dl,0x5
c00207dc:	75 1b                	jne    c00207f9 <Vm::x87Handler(regs*)+0x7ae>
c00207de:	83 ec 0c             	sub    esp,0xc
c00207e1:	6a 00                	push   0x0
c00207e3:	e8 26 f7 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00207e8:	89 c7                	mov    edi,eax
c00207ea:	89 d5                	mov    ebp,edx
c00207ec:	58                   	pop    eax
c00207ed:	ff 36                	push   DWORD PTR [esi]
c00207ef:	e8 69 f4 ff ff       	call   c001fc5d <Vm::fpu32ToInternal(unsigned int)>
c00207f4:	e9 a3 01 00 00       	jmp    c002099c <Vm::x87Handler(regs*)+0x951>
c00207f9:	80 fa 06             	cmp    dl,0x6
c00207fc:	75 0f                	jne    c002080d <Vm::x87Handler(regs*)+0x7c2>
c00207fe:	83 ec 0c             	sub    esp,0xc
c0020801:	ff 36                	push   DWORD PTR [esi]
c0020803:	e8 55 f4 ff ff       	call   c001fc5d <Vm::fpu32ToInternal(unsigned int)>
c0020808:	e9 ae 01 00 00       	jmp    c00209bb <Vm::x87Handler(regs*)+0x970>
c002080d:	31 c0                	xor    eax,eax
c002080f:	80 fa 07             	cmp    dl,0x7
c0020812:	0f 85 94 02 00 00    	jne    c0020aac <Vm::x87Handler(regs*)+0xa61>
c0020818:	83 ec 0c             	sub    esp,0xc
c002081b:	6a 00                	push   0x0
c002081d:	e8 ec f6 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020822:	89 c7                	mov    edi,eax
c0020824:	89 d5                	mov    ebp,edx
c0020826:	58                   	pop    eax
c0020827:	ff 36                	push   DWORD PTR [esi]
c0020829:	e8 2f f4 ff ff       	call   c001fc5d <Vm::fpu32ToInternal(unsigned int)>
c002082e:	e9 cb 01 00 00       	jmp    c00209fe <Vm::x87Handler(regs*)+0x9b3>
c0020833:	80 fa 03             	cmp    dl,0x3
c0020836:	0f 85 d3 01 00 00    	jne    c0020a0f <Vm::x87Handler(regs*)+0x9c4>
c002083c:	e8 b8 f7 ff ff       	call   c001fff9 <Vm::fpuPop()>
c0020841:	51                   	push   ecx
c0020842:	51                   	push   ecx
c0020843:	e9 de 01 00 00       	jmp    c0020a26 <Vm::x87Handler(regs*)+0x9db>
c0020848:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002084c:	80 fa 01             	cmp    dl,0x1
c002084f:	75 09                	jne    c002085a <Vm::x87Handler(regs*)+0x80f>
c0020851:	57                   	push   edi
c0020852:	57                   	push   edi
c0020853:	8b 06                	mov    eax,DWORD PTR [esi]
c0020855:	e9 e3 01 00 00       	jmp    c0020a3d <Vm::x87Handler(regs*)+0x9f2>
c002085a:	80 fa 04             	cmp    dl,0x4
c002085d:	75 12                	jne    c0020871 <Vm::x87Handler(regs*)+0x826>
c002085f:	31 d2                	xor    edx,edx
c0020861:	51                   	push   ecx
c0020862:	51                   	push   ecx
c0020863:	8b 06                	mov    eax,DWORD PTR [esi]
c0020865:	52                   	push   edx
c0020866:	50                   	push   eax
c0020867:	e8 d0 f4 ff ff       	call   c001fd3c <Vm::fpuLongToFloat(long long)>
c002086c:	e9 ee 00 00 00       	jmp    c002095f <Vm::x87Handler(regs*)+0x914>
c0020871:	31 c0                	xor    eax,eax
c0020873:	80 fa 07             	cmp    dl,0x7
c0020876:	0f 85 30 02 00 00    	jne    c0020aac <Vm::x87Handler(regs*)+0xa61>
c002087c:	83 ec 0c             	sub    esp,0xc
c002087f:	6a 00                	push   0x0
c0020881:	e8 88 f6 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020886:	89 c7                	mov    edi,eax
c0020888:	89 d5                	mov    ebp,edx
c002088a:	58                   	pop    eax
c002088b:	8b 06                	mov    eax,DWORD PTR [esi]
c002088d:	5a                   	pop    edx
c002088e:	31 d2                	xor    edx,edx
c0020890:	52                   	push   edx
c0020891:	50                   	push   eax
c0020892:	e8 a5 f4 ff ff       	call   c001fd3c <Vm::fpuLongToFloat(long long)>
c0020897:	e9 62 01 00 00       	jmp    c00209fe <Vm::x87Handler(regs*)+0x9b3>
c002089c:	84 d2                	test   dl,dl
c002089e:	75 0d                	jne    c00208ad <Vm::x87Handler(regs*)+0x862>
c00208a0:	31 d2                	xor    edx,edx
c00208a2:	55                   	push   ebp
c00208a3:	55                   	push   ebp
c00208a4:	8b 06                	mov    eax,DWORD PTR [esi]
c00208a6:	52                   	push   edx
c00208a7:	50                   	push   eax
c00208a8:	e9 d3 01 00 00       	jmp    c0020a80 <Vm::x87Handler(regs*)+0xa35>
c00208ad:	31 c0                	xor    eax,eax
c00208af:	80 fa 02             	cmp    dl,0x2
c00208b2:	0f 85 f4 01 00 00    	jne    c0020aac <Vm::x87Handler(regs*)+0xa61>
c00208b8:	83 ec 0c             	sub    esp,0xc
c00208bb:	6a 00                	push   0x0
c00208bd:	e8 4c f6 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00208c2:	59                   	pop    ecx
c00208c3:	5f                   	pop    edi
c00208c4:	e9 6a f9 ff ff       	jmp    c0020233 <Vm::x87Handler(regs*)+0x1e8>
c00208c9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00208cd:	84 d2                	test   dl,dl
c00208cf:	75 2a                	jne    c00208fb <Vm::x87Handler(regs*)+0x8b0>
c00208d1:	50                   	push   eax
c00208d2:	50                   	push   eax
c00208d3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00208d6:	ff 36                	push   DWORD PTR [esi]
c00208d8:	e8 c5 f3 ff ff       	call   c001fca2 <Vm::fpu64ToInternal(unsigned long long)>
c00208dd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00208e4:	89 c6                	mov    esi,eax
c00208e6:	89 d7                	mov    edi,edx
c00208e8:	e8 21 f6 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00208ed:	57                   	push   edi
c00208ee:	56                   	push   esi
c00208ef:	52                   	push   edx
c00208f0:	50                   	push   eax
c00208f1:	e8 8e f5 ff ff       	call   c001fe84 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00208f6:	e9 64 01 00 00       	jmp    c0020a5f <Vm::x87Handler(regs*)+0xa14>
c00208fb:	80 fa 01             	cmp    dl,0x1
c00208fe:	75 11                	jne    c0020911 <Vm::x87Handler(regs*)+0x8c6>
c0020900:	50                   	push   eax
c0020901:	50                   	push   eax
c0020902:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020905:	ff 36                	push   DWORD PTR [esi]
c0020907:	e8 96 f3 ff ff       	call   c001fca2 <Vm::fpu64ToInternal(unsigned long long)>
c002090c:	e9 35 01 00 00       	jmp    c0020a46 <Vm::x87Handler(regs*)+0x9fb>
c0020911:	80 fa 02             	cmp    dl,0x2
c0020914:	0f 85 54 f9 ff ff    	jne    c002026e <Vm::x87Handler(regs*)+0x223>
c002091a:	55                   	push   ebp
c002091b:	55                   	push   ebp
c002091c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002091f:	ff 36                	push   DWORD PTR [esi]
c0020921:	e8 7c f3 ff ff       	call   c001fca2 <Vm::fpu64ToInternal(unsigned long long)>
c0020926:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002092d:	89 c6                	mov    esi,eax
c002092f:	89 d7                	mov    edi,edx
c0020931:	e8 d8 f5 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020936:	57                   	push   edi
c0020937:	56                   	push   esi
c0020938:	52                   	push   edx
c0020939:	50                   	push   eax
c002093a:	e8 f2 f4 ff ff       	call   c001fe31 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002093f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020943:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020946:	83 c4 20             	add    esp,0x20
c0020949:	e9 74 f7 ff ff       	jmp    c00200c2 <Vm::x87Handler(regs*)+0x77>
c002094e:	80 fa 04             	cmp    dl,0x4
c0020951:	75 2a                	jne    c002097d <Vm::x87Handler(regs*)+0x932>
c0020953:	51                   	push   ecx
c0020954:	51                   	push   ecx
c0020955:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020958:	ff 36                	push   DWORD PTR [esi]
c002095a:	e8 43 f3 ff ff       	call   c001fca2 <Vm::fpu64ToInternal(unsigned long long)>
c002095f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020966:	89 c6                	mov    esi,eax
c0020968:	89 d7                	mov    edi,edx
c002096a:	e8 9f f5 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c002096f:	57                   	push   edi
c0020970:	56                   	push   esi
c0020971:	52                   	push   edx
c0020972:	50                   	push   eax
c0020973:	e8 36 f5 ff ff       	call   c001feae <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020978:	e9 e2 00 00 00       	jmp    c0020a5f <Vm::x87Handler(regs*)+0xa14>
c002097d:	80 fa 05             	cmp    dl,0x5
c0020980:	75 28                	jne    c00209aa <Vm::x87Handler(regs*)+0x95f>
c0020982:	83 ec 0c             	sub    esp,0xc
c0020985:	6a 00                	push   0x0
c0020987:	e8 82 f5 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c002098c:	89 c7                	mov    edi,eax
c002098e:	89 d5                	mov    ebp,edx
c0020990:	58                   	pop    eax
c0020991:	5a                   	pop    edx
c0020992:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020995:	ff 36                	push   DWORD PTR [esi]
c0020997:	e8 06 f3 ff ff       	call   c001fca2 <Vm::fpu64ToInternal(unsigned long long)>
c002099c:	83 c4 10             	add    esp,0x10
c002099f:	55                   	push   ebp
c00209a0:	57                   	push   edi
c00209a1:	52                   	push   edx
c00209a2:	50                   	push   eax
c00209a3:	e8 06 f5 ff ff       	call   c001feae <Vm::fpuSub(unsigned long long, unsigned long long)>
c00209a8:	eb 60                	jmp    c0020a0a <Vm::x87Handler(regs*)+0x9bf>
c00209aa:	80 fa 06             	cmp    dl,0x6
c00209ad:	75 2a                	jne    c00209d9 <Vm::x87Handler(regs*)+0x98e>
c00209af:	51                   	push   ecx
c00209b0:	51                   	push   ecx
c00209b1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00209b4:	ff 36                	push   DWORD PTR [esi]
c00209b6:	e8 e7 f2 ff ff       	call   c001fca2 <Vm::fpu64ToInternal(unsigned long long)>
c00209bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209c2:	89 c6                	mov    esi,eax
c00209c4:	89 d7                	mov    edi,edx
c00209c6:	e8 43 f5 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00209cb:	57                   	push   edi
c00209cc:	56                   	push   esi
c00209cd:	52                   	push   edx
c00209ce:	50                   	push   eax
c00209cf:	e8 08 f5 ff ff       	call   c001fedc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00209d4:	e9 86 00 00 00       	jmp    c0020a5f <Vm::x87Handler(regs*)+0xa14>
c00209d9:	31 c0                	xor    eax,eax
c00209db:	80 fa 07             	cmp    dl,0x7
c00209de:	0f 85 c8 00 00 00    	jne    c0020aac <Vm::x87Handler(regs*)+0xa61>
c00209e4:	83 ec 0c             	sub    esp,0xc
c00209e7:	6a 00                	push   0x0
c00209e9:	e8 20 f5 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c00209ee:	89 c7                	mov    edi,eax
c00209f0:	89 d5                	mov    ebp,edx
c00209f2:	58                   	pop    eax
c00209f3:	5a                   	pop    edx
c00209f4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00209f7:	ff 36                	push   DWORD PTR [esi]
c00209f9:	e8 a4 f2 ff ff       	call   c001fca2 <Vm::fpu64ToInternal(unsigned long long)>
c00209fe:	83 c4 10             	add    esp,0x10
c0020a01:	55                   	push   ebp
c0020a02:	57                   	push   edi
c0020a03:	52                   	push   edx
c0020a04:	50                   	push   eax
c0020a05:	e8 d2 f4 ff ff       	call   c001fedc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020a0a:	83 c4 0c             	add    esp,0xc
c0020a0d:	eb 53                	jmp    c0020a62 <Vm::x87Handler(regs*)+0xa17>
c0020a0f:	31 c0                	xor    eax,eax
c0020a11:	80 fa 02             	cmp    dl,0x2
c0020a14:	0f 85 92 00 00 00    	jne    c0020aac <Vm::x87Handler(regs*)+0xa61>
c0020a1a:	83 ec 0c             	sub    esp,0xc
c0020a1d:	6a 00                	push   0x0
c0020a1f:	e8 ea f4 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020a24:	59                   	pop    ecx
c0020a25:	5f                   	pop    edi
c0020a26:	52                   	push   edx
c0020a27:	50                   	push   eax
c0020a28:	e8 27 f2 ff ff       	call   c001fc54 <Vm::fpuInternalTo64(unsigned long long)>
c0020a2d:	eb 70                	jmp    c0020a9f <Vm::x87Handler(regs*)+0xa54>
c0020a2f:	31 c0                	xor    eax,eax
c0020a31:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020a36:	75 74                	jne    c0020aac <Vm::x87Handler(regs*)+0xa61>
c0020a38:	50                   	push   eax
c0020a39:	50                   	push   eax
c0020a3a:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020a3d:	31 d2                	xor    edx,edx
c0020a3f:	52                   	push   edx
c0020a40:	50                   	push   eax
c0020a41:	e8 f6 f2 ff ff       	call   c001fd3c <Vm::fpuLongToFloat(long long)>
c0020a46:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a4d:	89 c6                	mov    esi,eax
c0020a4f:	89 d7                	mov    edi,edx
c0020a51:	e8 b8 f4 ff ff       	call   c001ff0e <Vm::fpuGetReg(int)>
c0020a56:	57                   	push   edi
c0020a57:	56                   	push   esi
c0020a58:	52                   	push   edx
c0020a59:	50                   	push   eax
c0020a5a:	e8 5e f4 ff ff       	call   c001febd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020a5f:	83 c4 1c             	add    esp,0x1c
c0020a62:	52                   	push   edx
c0020a63:	50                   	push   eax
c0020a64:	6a 00                	push   0x0
c0020a66:	e8 e6 f4 ff ff       	call   c001ff51 <Vm::fpuSetReg(int, unsigned long long)>
c0020a6b:	e9 f2 f7 ff ff       	jmp    c0020262 <Vm::x87Handler(regs*)+0x217>
c0020a70:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020a74:	80 fa 05             	cmp    dl,0x5
c0020a77:	75 11                	jne    c0020a8a <Vm::x87Handler(regs*)+0xa3f>
c0020a79:	55                   	push   ebp
c0020a7a:	55                   	push   ebp
c0020a7b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a7e:	ff 36                	push   DWORD PTR [esi]
c0020a80:	e8 81 f2 ff ff       	call   c001fd06 <Vm::fpuULongToFloat(unsigned long long)>
c0020a85:	e9 cf f7 ff ff       	jmp    c0020259 <Vm::x87Handler(regs*)+0x20e>
c0020a8a:	31 c0                	xor    eax,eax
c0020a8c:	80 fa 07             	cmp    dl,0x7
c0020a8f:	75 1b                	jne    c0020aac <Vm::x87Handler(regs*)+0xa61>
c0020a91:	e8 63 f5 ff ff       	call   c001fff9 <Vm::fpuPop()>
c0020a96:	51                   	push   ecx
c0020a97:	51                   	push   ecx
c0020a98:	52                   	push   edx
c0020a99:	50                   	push   eax
c0020a9a:	e8 0c f2 ff ff       	call   c001fcab <Vm::fpuFloatToLong(unsigned long long)>
c0020a9f:	83 c4 10             	add    esp,0x10
c0020aa2:	89 06                	mov    DWORD PTR [esi],eax
c0020aa4:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020aa7:	e9 f8 f7 ff ff       	jmp    c00202a4 <Vm::x87Handler(regs*)+0x259>
c0020aac:	83 c4 1c             	add    esp,0x1c
c0020aaf:	5b                   	pop    ebx
c0020ab0:	5e                   	pop    esi
c0020ab1:	5f                   	pop    edi
c0020ab2:	5d                   	pop    ebp
c0020ab3:	c3                   	ret    

c0020ab4 <__static_initialization_and_destruction_0(int, int)>:
c0020ab4:	83 ec 0c             	sub    esp,0xc
c0020ab7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020abc:	75 1a                	jne    c0020ad8 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020abe:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020ac6:	75 10                	jne    c0020ad8 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020ac8:	83 ec 0c             	sub    esp,0xc
c0020acb:	68 a0 23 03 c0       	push   0xc00323a0
c0020ad0:	e8 a7 8a 00 00       	call   c002957c <Vm::_FPUState::_FPUState()>
c0020ad5:	83 c4 10             	add    esp,0x10
c0020ad8:	90                   	nop
c0020ad9:	83 c4 0c             	add    esp,0xc
c0020adc:	c3                   	ret    

c0020add <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020add:	83 ec 0c             	sub    esp,0xc
c0020ae0:	83 ec 08             	sub    esp,0x8
c0020ae3:	68 ff ff 00 00       	push   0xffff
c0020ae8:	6a 01                	push   0x1
c0020aea:	e8 c5 ff ff ff       	call   c0020ab4 <__static_initialization_and_destruction_0(int, int)>
c0020aef:	83 c4 10             	add    esp,0x10
c0020af2:	83 c4 0c             	add    esp,0xc
c0020af5:	c3                   	ret    

c0020af6 <FAT::getName()>:
c0020af6:	b8 8c d1 02 c0       	mov    eax,0xc002d18c
c0020afb:	c3                   	ret    

c0020afc <FAT::tell(void*, unsigned long long*)>:
c0020afc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020b01:	75 06                	jne    c0020b09 <FAT::tell(void*, unsigned long long*)+0xd>
c0020b03:	b8 04 00 00 00       	mov    eax,0x4
c0020b08:	c3                   	ret    
c0020b09:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020b0e:	75 06                	jne    c0020b16 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020b10:	b8 04 00 00 00       	mov    eax,0x4
c0020b15:	c3                   	ret    
c0020b16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b1a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020b1d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020b24:	89 01                	mov    DWORD PTR [ecx],eax
c0020b26:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020b29:	b8 00 00 00 00       	mov    eax,0x0
c0020b2e:	c3                   	ret    
c0020b2f:	90                   	nop

c0020b30 <FAT::stat(void*, unsigned long long*)>:
c0020b30:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020b35:	75 06                	jne    c0020b3d <FAT::stat(void*, unsigned long long*)+0xd>
c0020b37:	b8 04 00 00 00       	mov    eax,0x4
c0020b3c:	c3                   	ret    
c0020b3d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020b42:	75 06                	jne    c0020b4a <FAT::stat(void*, unsigned long long*)+0x1a>
c0020b44:	b8 04 00 00 00       	mov    eax,0x4
c0020b49:	c3                   	ret    
c0020b4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b4e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020b51:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020b54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020b58:	89 01                	mov    DWORD PTR [ecx],eax
c0020b5a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020b5d:	b8 00 00 00 00       	mov    eax,0x0
c0020b62:	c3                   	ret    
c0020b63:	90                   	nop

c0020b64 <FAT::~FAT()>:
c0020b64:	83 ec 0c             	sub    esp,0xc
c0020b67:	ba 1c d2 02 c0       	mov    edx,0xc002d21c
c0020b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b70:	89 10                	mov    DWORD PTR [eax],edx
c0020b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b76:	83 ec 0c             	sub    esp,0xc
c0020b79:	50                   	push   eax
c0020b7a:	e8 f5 25 ff ff       	call   c0013174 <Filesystem::~Filesystem()>
c0020b7f:	83 c4 10             	add    esp,0x10
c0020b82:	90                   	nop
c0020b83:	83 c4 0c             	add    esp,0xc
c0020b86:	c3                   	ret    
c0020b87:	90                   	nop

c0020b88 <FAT::~FAT()>:
c0020b88:	83 ec 0c             	sub    esp,0xc
c0020b8b:	83 ec 0c             	sub    esp,0xc
c0020b8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b92:	e8 cd ff ff ff       	call   c0020b64 <FAT::~FAT()>
c0020b97:	83 c4 10             	add    esp,0x10
c0020b9a:	83 ec 08             	sub    esp,0x8
c0020b9d:	6a 08                	push   0x8
c0020b9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ba3:	e8 bd 21 ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0020ba8:	83 c4 10             	add    esp,0x10
c0020bab:	83 c4 0c             	add    esp,0xc
c0020bae:	c3                   	ret    
c0020baf:	90                   	nop

c0020bb0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020bb0:	83 ec 1c             	sub    esp,0x1c
c0020bb3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020bba:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020bbf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020bc3:	8b 04 85 20 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdbe0]
c0020bca:	83 f8 ff             	cmp    eax,0xffffffff
c0020bcd:	75 34                	jne    c0020c03 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020bcf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020bd3:	88 c2                	mov    dl,al
c0020bd5:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c0020bda:	01 d0                	add    eax,edx
c0020bdc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020be0:	8b 15 00 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032400
c0020be6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020bea:	89 14 85 20 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdbe0],edx
c0020bf1:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c0020bf6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020bfa:	89 14 85 a0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb60],edx
c0020c01:	eb 17                	jmp    c0020c1a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020c03:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020c07:	88 c2                	mov    dl,al
c0020c09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c0d:	8b 04 85 20 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdbe0]
c0020c14:	01 d0                	add    eax,edx
c0020c16:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020c1a:	83 ec 04             	sub    esp,0x4
c0020c1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c25:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020c29:	50                   	push   eax
c0020c2a:	e8 2d 61 fe ff       	call   c0006d5c <f_getlabel>
c0020c2f:	83 c4 10             	add    esp,0x10
c0020c32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c36:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020c3b:	75 07                	jne    c0020c44 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020c3d:	b8 00 00 00 00       	mov    eax,0x0
c0020c42:	eb 05                	jmp    c0020c49 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020c44:	b8 01 00 00 00       	mov    eax,0x1
c0020c49:	83 c4 1c             	add    esp,0x1c
c0020c4c:	c3                   	ret    
c0020c4d:	90                   	nop

c0020c4e <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020c4e:	57                   	push   edi
c0020c4f:	83 ec 58             	sub    esp,0x58
c0020c52:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020c5a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020c5e:	b9 0f 00 00 00       	mov    ecx,0xf
c0020c63:	b8 00 00 00 00       	mov    eax,0x0
c0020c68:	fc                   	cld    
c0020c69:	89 d7                	mov    edi,edx
c0020c6b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020c6d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020c71:	8b 04 85 20 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdbe0]
c0020c78:	83 f8 ff             	cmp    eax,0xffffffff
c0020c7b:	75 34                	jne    c0020cb1 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020c7d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020c81:	88 c2                	mov    dl,al
c0020c83:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c0020c88:	01 d0                	add    eax,edx
c0020c8a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020c8e:	8b 15 00 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032400
c0020c94:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020c98:	89 14 85 20 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdbe0],edx
c0020c9f:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c0020ca4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020ca8:	89 14 85 a0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb60],edx
c0020caf:	eb 17                	jmp    c0020cc8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020cb1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020cb5:	88 c2                	mov    dl,al
c0020cb7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020cbb:	8b 04 85 20 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdbe0]
c0020cc2:	01 d0                	add    eax,edx
c0020cc4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020cc8:	83 ec 08             	sub    esp,0x8
c0020ccb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020ccf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020cd3:	50                   	push   eax
c0020cd4:	e8 bf fc fd ff       	call   c0000998 <strcat>
c0020cd9:	83 c4 10             	add    esp,0x10
c0020cdc:	83 ec 0c             	sub    esp,0xc
c0020cdf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ce3:	50                   	push   eax
c0020ce4:	e8 61 62 fe ff       	call   c0006f4a <f_setlabel>
c0020ce9:	83 c4 10             	add    esp,0x10
c0020cec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020cf0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020cf5:	75 07                	jne    c0020cfe <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020cf7:	b8 00 00 00 00       	mov    eax,0x0
c0020cfc:	eb 05                	jmp    c0020d03 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020cfe:	b8 01 00 00 00       	mov    eax,0x1
c0020d03:	83 c4 58             	add    esp,0x58
c0020d06:	5f                   	pop    edi
c0020d07:	c3                   	ret    

c0020d08 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020d08:	83 ec 2c             	sub    esp,0x2c
c0020d0b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020d13:	83 ec 08             	sub    esp,0x8
c0020d16:	68 b0 d1 02 c0       	push   0xc002d1b0
c0020d1b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020d1f:	e8 c0 fb fd ff       	call   c00008e4 <strcmp>
c0020d24:	83 c4 10             	add    esp,0x10
c0020d27:	85 c0                	test   eax,eax
c0020d29:	0f 94 c0             	sete   al
c0020d2c:	84 c0                	test   al,al
c0020d2e:	74 0d                	je     c0020d3d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020d30:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020d38:	e9 a6 00 00 00       	jmp    c0020de3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020d3d:	83 ec 08             	sub    esp,0x8
c0020d40:	68 a2 d1 02 c0       	push   0xc002d1a2
c0020d45:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020d49:	e8 96 fb fd ff       	call   c00008e4 <strcmp>
c0020d4e:	83 c4 10             	add    esp,0x10
c0020d51:	85 c0                	test   eax,eax
c0020d53:	0f 94 c0             	sete   al
c0020d56:	84 c0                	test   al,al
c0020d58:	74 0a                	je     c0020d64 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020d5a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020d62:	eb 7f                	jmp    c0020de3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020d64:	83 ec 08             	sub    esp,0x8
c0020d67:	68 a8 d1 02 c0       	push   0xc002d1a8
c0020d6c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020d70:	e8 6f fb fd ff       	call   c00008e4 <strcmp>
c0020d75:	83 c4 10             	add    esp,0x10
c0020d78:	85 c0                	test   eax,eax
c0020d7a:	0f 94 c0             	sete   al
c0020d7d:	84 c0                	test   al,al
c0020d7f:	74 0a                	je     c0020d8b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020d81:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020d89:	eb 58                	jmp    c0020de3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020d8b:	83 ec 08             	sub    esp,0x8
c0020d8e:	68 ec 9c 02 c0       	push   0xc0029cec
c0020d93:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020d97:	e8 48 fb fd ff       	call   c00008e4 <strcmp>
c0020d9c:	83 c4 10             	add    esp,0x10
c0020d9f:	85 c0                	test   eax,eax
c0020da1:	0f 94 c0             	sete   al
c0020da4:	84 c0                	test   al,al
c0020da6:	74 0a                	je     c0020db2 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020da8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020db0:	eb 31                	jmp    c0020de3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020db2:	83 ec 08             	sub    esp,0x8
c0020db5:	68 ae d1 02 c0       	push   0xc002d1ae
c0020dba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020dbe:	e8 21 fb fd ff       	call   c00008e4 <strcmp>
c0020dc3:	83 c4 10             	add    esp,0x10
c0020dc6:	85 c0                	test   eax,eax
c0020dc8:	0f 94 c0             	sete   al
c0020dcb:	84 c0                	test   al,al
c0020dcd:	74 0a                	je     c0020dd9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020dcf:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020dd7:	eb 0a                	jmp    c0020de3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020dd9:	b8 08 00 00 00       	mov    eax,0x8
c0020dde:	e9 04 01 00 00       	jmp    c0020ee7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020de3:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020dea:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020def:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020df3:	8b 04 85 20 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdbe0]
c0020dfa:	83 f8 ff             	cmp    eax,0xffffffff
c0020dfd:	75 34                	jne    c0020e33 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020dff:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020e03:	88 c2                	mov    dl,al
c0020e05:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c0020e0a:	01 d0                	add    eax,edx
c0020e0c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020e10:	8b 15 00 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032400
c0020e16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e1a:	89 14 85 20 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdbe0],edx
c0020e21:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c0020e26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020e2a:	89 14 85 a0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb60],edx
c0020e31:	eb 17                	jmp    c0020e4a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020e33:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020e37:	88 c2                	mov    dl,al
c0020e39:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e3d:	8b 04 85 20 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdbe0]
c0020e44:	01 d0                	add    eax,edx
c0020e46:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020e4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e4e:	88 04 24             	mov    BYTE PTR [esp],al
c0020e51:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020e55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e59:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020e61:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020e66:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020e6e:	83 ec 0c             	sub    esp,0xc
c0020e71:	68 00 20 00 00       	push   0x2000
c0020e76:	e8 0b ea fe ff       	call   c000f886 <malloc>
c0020e7b:	83 c4 10             	add    esp,0x10
c0020e7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e82:	68 00 20 00 00       	push   0x2000
c0020e87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e8b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e8f:	50                   	push   eax
c0020e90:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020e94:	50                   	push   eax
c0020e95:	e8 fb 64 fe ff       	call   c0007395 <f_mkfs>
c0020e9a:	83 c4 10             	add    esp,0x10
c0020e9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020ea1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020ea6:	75 07                	jne    c0020eaf <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020ea8:	b8 00 00 00 00       	mov    eax,0x0
c0020ead:	eb 38                	jmp    c0020ee7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020eaf:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020eb4:	75 17                	jne    c0020ecd <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020eb6:	83 ec 0c             	sub    esp,0xc
c0020eb9:	68 ec d1 02 c0       	push   0xc002d1ec
c0020ebe:	e8 82 1f ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0020ec3:	83 c4 10             	add    esp,0x10
c0020ec6:	b8 09 00 00 00       	mov    eax,0x9
c0020ecb:	eb 1a                	jmp    c0020ee7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020ecd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ed1:	83 ec 08             	sub    esp,0x8
c0020ed4:	50                   	push   eax
c0020ed5:	68 b4 d1 02 c0       	push   0xc002d1b4
c0020eda:	e8 66 1f ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0020edf:	83 c4 10             	add    esp,0x10
c0020ee2:	b8 01 00 00 00       	mov    eax,0x1
c0020ee7:	83 c4 2c             	add    esp,0x2c
c0020eea:	c3                   	ret    
c0020eeb:	90                   	nop

c0020eec <FAT::tryMount(LogicalDisk*, int)>:
c0020eec:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020ef2:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c0020ef7:	83 f8 14             	cmp    eax,0x14
c0020efa:	75 17                	jne    c0020f13 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020efc:	83 ec 0c             	sub    esp,0xc
c0020eff:	68 c6 d1 02 c0       	push   0xc002d1c6
c0020f04:	e8 fc 98 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0020f09:	83 c4 10             	add    esp,0x10
c0020f0c:	b0 00                	mov    al,0x0
c0020f0e:	e9 d7 01 00 00       	jmp    c00210ea <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020f13:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020f1a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f20:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020f26:	3d 00 02 00 00       	cmp    eax,0x200
c0020f2b:	74 07                	je     c0020f34 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020f2d:	b0 00                	mov    al,0x0
c0020f2f:	e9 b6 01 00 00       	jmp    c00210ea <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020f34:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020f3c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020f43:	8b 04 85 20 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdbe0]
c0020f4a:	83 f8 ff             	cmp    eax,0xffffffff
c0020f4d:	74 07                	je     c0020f56 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020f4f:	b0 01                	mov    al,0x1
c0020f51:	e9 94 01 00 00       	jmp    c00210ea <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020f56:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020f60:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020f68:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020f6f:	88 c2                	mov    dl,al
c0020f71:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c0020f76:	01 d0                	add    eax,edx
c0020f78:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020f7f:	8b 15 00 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032400
c0020f85:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020f8c:	89 14 85 20 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdbe0],edx
c0020f93:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c0020f98:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020f9f:	89 14 85 a0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb60],edx
c0020fa6:	83 ec 0c             	sub    esp,0xc
c0020fa9:	68 54 02 00 00       	push   0x254
c0020fae:	e8 d3 e8 fe ff       	call   c000f886 <malloc>
c0020fb3:	83 c4 10             	add    esp,0x10
c0020fb6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020fbd:	83 ec 04             	sub    esp,0x4
c0020fc0:	6a 00                	push   0x0
c0020fc2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020fc9:	50                   	push   eax
c0020fca:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020fd1:	e8 7d 3f fe ff       	call   c0004f53 <f_mount>
c0020fd6:	83 c4 10             	add    esp,0x10
c0020fd9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020fe0:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020fe8:	74 19                	je     c0021003 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020fea:	83 ec 0c             	sub    esp,0xc
c0020fed:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ff4:	e8 ad e8 fe ff       	call   c000f8a6 <rfree>
c0020ff9:	83 c4 10             	add    esp,0x10
c0020ffc:	b0 00                	mov    al,0x0
c0020ffe:	e9 e7 00 00 00       	jmp    c00210ea <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021003:	83 ec 04             	sub    esp,0x4
c0021006:	68 00 01 00 00       	push   0x100
c002100b:	6a 00                	push   0x0
c002100d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021014:	50                   	push   eax
c0021015:	e8 82 f7 fd ff       	call   c000079c <memset>
c002101a:	83 c4 10             	add    esp,0x10
c002101d:	83 ec 08             	sub    esp,0x8
c0021020:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021027:	50                   	push   eax
c0021028:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002102f:	50                   	push   eax
c0021030:	e8 63 f9 fd ff       	call   c0000998 <strcat>
c0021035:	83 c4 10             	add    esp,0x10
c0021038:	83 ec 08             	sub    esp,0x8
c002103b:	68 d4 d1 02 c0       	push   0xc002d1d4
c0021040:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0021047:	50                   	push   eax
c0021048:	e8 4b f9 fd ff       	call   c0000998 <strcat>
c002104d:	83 c4 10             	add    esp,0x10
c0021050:	83 ec 04             	sub    esp,0x4
c0021053:	6a 01                	push   0x1
c0021055:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002105c:	50                   	push   eax
c002105d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021061:	50                   	push   eax
c0021062:	e8 4e 3f fe ff       	call   c0004fb5 <f_open>
c0021067:	83 c4 10             	add    esp,0x10
c002106a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021071:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0021078:	85 c0                	test   eax,eax
c002107a:	74 0a                	je     c0021086 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002107c:	78 2d                	js     c00210ab <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002107e:	83 e8 04             	sub    eax,0x4
c0021081:	83 f8 01             	cmp    eax,0x1
c0021084:	77 25                	ja     c00210ab <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0021086:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c002108e:	83 ec 0c             	sub    esp,0xc
c0021091:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021095:	50                   	push   eax
c0021096:	e8 6c 4a fe ff       	call   c0005b07 <f_close>
c002109b:	83 c4 10             	add    esp,0x10
c002109e:	90                   	nop
c002109f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00210a7:	74 3a                	je     c00210e3 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00210a9:	eb 2d                	jmp    c00210d8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00210ab:	83 ec 0c             	sub    esp,0xc
c00210ae:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00210b5:	e8 ec e7 fe ff       	call   c000f8a6 <rfree>
c00210ba:	83 c4 10             	add    esp,0x10
c00210bd:	83 ec 04             	sub    esp,0x4
c00210c0:	6a 00                	push   0x0
c00210c2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00210c9:	50                   	push   eax
c00210ca:	6a 00                	push   0x0
c00210cc:	e8 82 3e fe ff       	call   c0004f53 <f_mount>
c00210d1:	83 c4 10             	add    esp,0x10
c00210d4:	b0 00                	mov    al,0x0
c00210d6:	eb 12                	jmp    c00210ea <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00210d8:	a1 00 24 03 c0       	mov    eax,ds:0xc0032400
c00210dd:	40                   	inc    eax
c00210de:	a3 00 24 03 c0       	mov    ds:0xc0032400,eax
c00210e3:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00210ea:	81 c4 6c 03 00 00    	add    esp,0x36c
c00210f0:	c3                   	ret    
c00210f1:	90                   	nop

c00210f2 <FAT::getFileFirstSector(char const*)>:
c00210f2:	53                   	push   ebx
c00210f3:	83 ec 28             	sub    esp,0x28
c00210f6:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c00210fe:	83 ec 0c             	sub    esp,0xc
c0021101:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021105:	e8 7c e7 fe ff       	call   c000f886 <malloc>
c002110a:	83 c4 10             	add    esp,0x10
c002110d:	89 c3                	mov    ebx,eax
c002110f:	a1 30 23 03 c0       	mov    eax,ds:0xc0032330
c0021114:	83 ec 04             	sub    esp,0x4
c0021117:	50                   	push   eax
c0021118:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002111c:	53                   	push   ebx
c002111d:	e8 82 22 ff ff       	call   c00133a4 <File::File(char const*, Process*)>
c0021122:	83 c4 10             	add    esp,0x10
c0021125:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0021129:	83 ec 08             	sub    esp,0x8
c002112c:	6a 01                	push   0x1
c002112e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021132:	e8 d1 22 ff ff       	call   c0013408 <File::open(FileOpenMode)>
c0021137:	83 c4 10             	add    esp,0x10
c002113a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002113e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021140:	83 c0 0c             	add    eax,0xc
c0021143:	8b 00                	mov    eax,DWORD PTR [eax]
c0021145:	83 ec 0c             	sub    esp,0xc
c0021148:	8d 54 24 14          	lea    edx,[esp+0x14]
c002114c:	52                   	push   edx
c002114d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021151:	52                   	push   edx
c0021152:	6a 00                	push   0x0
c0021154:	6a 04                	push   0x4
c0021156:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002115a:	ff d0                	call   eax
c002115c:	83 c4 20             	add    esp,0x20
c002115f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021163:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0021169:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002116d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021171:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021174:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021177:	83 ec 04             	sub    esp,0x4
c002117a:	52                   	push   edx
c002117b:	50                   	push   eax
c002117c:	68 df d1 02 c0       	push   0xc002d1df
c0021181:	e8 bf 1c ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0021186:	83 c4 10             	add    esp,0x10
c0021189:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002118d:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021190:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021193:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021197:	83 ec 0c             	sub    esp,0xc
c002119a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002119e:	e8 c3 22 ff ff       	call   c0013466 <File::close()>
c00211a3:	83 c4 10             	add    esp,0x10
c00211a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00211aa:	ba 00 00 00 00       	mov    edx,0x0
c00211af:	83 c4 28             	add    esp,0x28
c00211b2:	5b                   	pop    ebx
c00211b3:	c3                   	ret    

c00211b4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00211b4:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00211ba:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00211c2:	74 0a                	je     c00211ce <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00211c4:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00211cc:	75 0a                	jne    c00211d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00211ce:	b8 04 00 00 00       	mov    eax,0x4
c00211d3:	e9 db 00 00 00       	jmp    c00212b3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00211d8:	83 ec 08             	sub    esp,0x8
c00211db:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00211e2:	50                   	push   eax
c00211e3:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c00211ea:	e8 22 4f fe ff       	call   c0006111 <f_readdir>
c00211ef:	83 c4 10             	add    esp,0x10
c00211f2:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00211f9:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00211ff:	83 ec 0c             	sub    esp,0xc
c0021202:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0021209:	83 c0 1a             	add    eax,0x1a
c002120c:	50                   	push   eax
c002120d:	e8 a6 f5 fd ff       	call   c00007b8 <strlen>
c0021212:	83 c4 10             	add    esp,0x10
c0021215:	ba 00 00 00 00       	mov    edx,0x0
c002121a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002121e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021222:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0021229:	0f b6 c0             	movzx  eax,al
c002122c:	83 e0 10             	and    eax,0x10
c002122f:	74 07                	je     c0021238 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0021231:	b8 02 00 00 00       	mov    eax,0x2
c0021236:	eb 05                	jmp    c002123d <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0021238:	b8 01 00 00 00       	mov    eax,0x1
c002123d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021241:	83 ec 08             	sub    esp,0x8
c0021244:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002124b:	83 c0 1a             	add    eax,0x1a
c002124e:	50                   	push   eax
c002124f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021253:	83 c0 10             	add    eax,0x10
c0021256:	50                   	push   eax
c0021257:	e8 fc f5 fd ff       	call   c0000858 <strcpy>
c002125c:	83 c4 10             	add    esp,0x10
c002125f:	83 ec 04             	sub    esp,0x4
c0021262:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0021269:	8d 44 24 08          	lea    eax,[esp+0x8]
c002126d:	50                   	push   eax
c002126e:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0021275:	e8 ee f4 fd ff       	call   c0000768 <memcpy>
c002127a:	83 c4 10             	add    esp,0x10
c002127d:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0021284:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002128a:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0021291:	84 c0                	test   al,al
c0021293:	75 07                	jne    c002129c <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0021295:	b8 07 00 00 00       	mov    eax,0x7
c002129a:	eb 17                	jmp    c00212b3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002129c:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00212a3:	85 c0                	test   eax,eax
c00212a5:	75 07                	jne    c00212ae <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c00212a7:	b8 00 00 00 00       	mov    eax,0x0
c00212ac:	eb 05                	jmp    c00212b3 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00212ae:	b8 01 00 00 00       	mov    eax,0x1
c00212b3:	81 c4 3c 02 00 00    	add    esp,0x23c
c00212b9:	c3                   	ret    

c00212ba <FAT::read(void*, unsigned long, void*, int*)>:
c00212ba:	83 ec 1c             	sub    esp,0x1c
c00212bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00212c2:	74 07                	je     c00212cb <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00212c4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00212c9:	75 07                	jne    c00212d2 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00212cb:	b8 04 00 00 00       	mov    eax,0x4
c00212d0:	eb 3d                	jmp    c002130f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00212d2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00212d6:	50                   	push   eax
c00212d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00212db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00212df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00212e3:	e8 09 41 fe ff       	call   c00053f1 <f_read>
c00212e8:	83 c4 10             	add    esp,0x10
c00212eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00212ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00212f3:	89 c2                	mov    edx,eax
c00212f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00212f9:	89 10                	mov    DWORD PTR [eax],edx
c00212fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212ff:	85 c0                	test   eax,eax
c0021301:	75 07                	jne    c002130a <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0021303:	b8 00 00 00 00       	mov    eax,0x0
c0021308:	eb 05                	jmp    c002130f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002130a:	b8 01 00 00 00       	mov    eax,0x1
c002130f:	83 c4 1c             	add    esp,0x1c
c0021312:	c3                   	ret    
c0021313:	90                   	nop

c0021314 <FAT::write(void*, unsigned long, void*, int*)>:
c0021314:	83 ec 1c             	sub    esp,0x1c
c0021317:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002131c:	74 07                	je     c0021325 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002131e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0021323:	75 07                	jne    c002132c <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0021325:	b8 04 00 00 00       	mov    eax,0x4
c002132a:	eb 3d                	jmp    c0021369 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002132c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021330:	50                   	push   eax
c0021331:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021335:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021339:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002133d:	e8 2f 43 fe ff       	call   c0005671 <f_write>
c0021342:	83 c4 10             	add    esp,0x10
c0021345:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021349:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002134d:	89 c2                	mov    edx,eax
c002134f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021353:	89 10                	mov    DWORD PTR [eax],edx
c0021355:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021359:	85 c0                	test   eax,eax
c002135b:	75 07                	jne    c0021364 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c002135d:	b8 00 00 00 00       	mov    eax,0x0
c0021362:	eb 05                	jmp    c0021369 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021364:	b8 01 00 00 00       	mov    eax,0x1
c0021369:	83 c4 1c             	add    esp,0x1c
c002136c:	c3                   	ret    
c002136d:	90                   	nop

c002136e <FAT::close(void*)>:
c002136e:	83 ec 1c             	sub    esp,0x1c
c0021371:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021376:	75 07                	jne    c002137f <FAT::close(void*)+0x11>
c0021378:	b8 04 00 00 00       	mov    eax,0x4
c002137d:	eb 36                	jmp    c00213b5 <FAT::close(void*)+0x47>
c002137f:	83 ec 0c             	sub    esp,0xc
c0021382:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021386:	e8 7c 47 fe ff       	call   c0005b07 <f_close>
c002138b:	83 c4 10             	add    esp,0x10
c002138e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021392:	83 ec 0c             	sub    esp,0xc
c0021395:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021399:	e8 f8 e4 fe ff       	call   c000f896 <free>
c002139e:	83 c4 10             	add    esp,0x10
c00213a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00213a5:	85 c0                	test   eax,eax
c00213a7:	75 07                	jne    c00213b0 <FAT::close(void*)+0x42>
c00213a9:	b8 00 00 00 00       	mov    eax,0x0
c00213ae:	eb 05                	jmp    c00213b5 <FAT::close(void*)+0x47>
c00213b0:	b8 01 00 00 00       	mov    eax,0x1
c00213b5:	83 c4 1c             	add    esp,0x1c
c00213b8:	c3                   	ret    
c00213b9:	90                   	nop

c00213ba <FAT::closeDir(void*)>:
c00213ba:	83 ec 1c             	sub    esp,0x1c
c00213bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00213c2:	75 07                	jne    c00213cb <FAT::closeDir(void*)+0x11>
c00213c4:	b8 04 00 00 00       	mov    eax,0x4
c00213c9:	eb 36                	jmp    c0021401 <FAT::closeDir(void*)+0x47>
c00213cb:	83 ec 0c             	sub    esp,0xc
c00213ce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00213d2:	e8 18 4d fe ff       	call   c00060ef <f_closedir>
c00213d7:	83 c4 10             	add    esp,0x10
c00213da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00213de:	83 ec 0c             	sub    esp,0xc
c00213e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00213e5:	e8 ac e4 fe ff       	call   c000f896 <free>
c00213ea:	83 c4 10             	add    esp,0x10
c00213ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00213f1:	85 c0                	test   eax,eax
c00213f3:	75 07                	jne    c00213fc <FAT::closeDir(void*)+0x42>
c00213f5:	b8 00 00 00 00       	mov    eax,0x0
c00213fa:	eb 05                	jmp    c0021401 <FAT::closeDir(void*)+0x47>
c00213fc:	b8 01 00 00 00       	mov    eax,0x1
c0021401:	83 c4 1c             	add    esp,0x1c
c0021404:	c3                   	ret    
c0021405:	90                   	nop

c0021406 <FAT::seek(void*, unsigned long long)>:
c0021406:	83 ec 2c             	sub    esp,0x2c
c0021409:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002140d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021411:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021415:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021419:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002141e:	75 07                	jne    c0021427 <FAT::seek(void*, unsigned long long)+0x21>
c0021420:	b8 04 00 00 00       	mov    eax,0x4
c0021425:	eb 2f                	jmp    c0021456 <FAT::seek(void*, unsigned long long)+0x50>
c0021427:	83 ec 04             	sub    esp,0x4
c002142a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002142e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021432:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0021436:	e8 fb 46 fe ff       	call   c0005b36 <f_lseek>
c002143b:	83 c4 10             	add    esp,0x10
c002143e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021442:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021446:	85 c0                	test   eax,eax
c0021448:	75 07                	jne    c0021451 <FAT::seek(void*, unsigned long long)+0x4b>
c002144a:	b8 00 00 00 00       	mov    eax,0x0
c002144f:	eb 05                	jmp    c0021456 <FAT::seek(void*, unsigned long long)+0x50>
c0021451:	b8 01 00 00 00       	mov    eax,0x1
c0021456:	83 c4 2c             	add    esp,0x2c
c0021459:	c3                   	ret    

c002145a <fatWrapperReadDisk>:
c002145a:	83 ec 1c             	sub    esp,0x1c
c002145d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021461:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021465:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021469:	89 04 24             	mov    DWORD PTR [esp],eax
c002146c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021470:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021474:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021479:	8b 04 85 e0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c20]
c0021480:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021484:	83 ec 0c             	sub    esp,0xc
c0021487:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002148b:	52                   	push   edx
c002148c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021490:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021494:	50                   	push   eax
c0021495:	e8 36 53 ff ff       	call   c00167d0 <LogicalDisk::read(unsigned long long, int, void*)>
c002149a:	83 c4 20             	add    esp,0x20
c002149d:	83 c4 1c             	add    esp,0x1c
c00214a0:	c3                   	ret    

c00214a1 <fatWrapperWriteDisk>:
c00214a1:	83 ec 1c             	sub    esp,0x1c
c00214a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00214ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00214b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00214b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00214b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00214bb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214c0:	8b 04 85 e0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c20]
c00214c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00214cb:	83 ec 0c             	sub    esp,0xc
c00214ce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00214d2:	52                   	push   edx
c00214d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00214d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00214db:	50                   	push   eax
c00214dc:	e8 5b 53 ff ff       	call   c001683c <LogicalDisk::write(unsigned long long, int, void*)>
c00214e1:	83 c4 20             	add    esp,0x20
c00214e4:	83 c4 1c             	add    esp,0x1c
c00214e7:	c3                   	ret    

c00214e8 <fatWrapperIoctl>:
c00214e8:	53                   	push   ebx
c00214e9:	83 ec 28             	sub    esp,0x28
c00214ec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00214f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00214f4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00214f8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00214fc:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0021501:	75 31                	jne    c0021534 <fatWrapperIoctl+0x4c>
c0021503:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021507:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002150b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021510:	8b 04 85 e0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c20]
c0021517:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002151d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021523:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021527:	66 89 02             	mov    WORD PTR [edx],ax
c002152a:	b8 00 00 00 00       	mov    eax,0x0
c002152f:	e9 b2 00 00 00       	jmp    c00215e6 <fatWrapperIoctl+0xfe>
c0021534:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0021539:	75 6a                	jne    c00215a5 <fatWrapperIoctl+0xbd>
c002153b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002153f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021543:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021548:	8b 04 85 e0 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c20]
c002154f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021555:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002155b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0021561:	89 c8                	mov    eax,ecx
c0021563:	89 da                	mov    edx,ebx
c0021565:	0f a4 c2 0a          	shld   edx,eax,0xa
c0021569:	c1 e0 0a             	shl    eax,0xa
c002156c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021571:	8b 0c 8d e0 f3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0c20]
c0021578:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002157e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021584:	89 cb                	mov    ebx,ecx
c0021586:	c1 fb 1f             	sar    ebx,0x1f
c0021589:	53                   	push   ebx
c002158a:	51                   	push   ecx
c002158b:	52                   	push   edx
c002158c:	50                   	push   eax
c002158d:	e8 a2 5b 00 00       	call   c0027134 <__udivdi3>
c0021592:	83 c4 10             	add    esp,0x10
c0021595:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021599:	89 01                	mov    DWORD PTR [ecx],eax
c002159b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002159e:	b8 00 00 00 00       	mov    eax,0x0
c00215a3:	eb 41                	jmp    c00215e6 <fatWrapperIoctl+0xfe>
c00215a5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00215aa:	75 07                	jne    c00215b3 <fatWrapperIoctl+0xcb>
c00215ac:	b8 00 00 00 00       	mov    eax,0x0
c00215b1:	eb 33                	jmp    c00215e6 <fatWrapperIoctl+0xfe>
c00215b3:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00215b8:	75 19                	jne    c00215d3 <fatWrapperIoctl+0xeb>
c00215ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00215be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00215c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00215c6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00215cc:	b8 00 00 00 00       	mov    eax,0x0
c00215d1:	eb 13                	jmp    c00215e6 <fatWrapperIoctl+0xfe>
c00215d3:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00215d8:	75 07                	jne    c00215e1 <fatWrapperIoctl+0xf9>
c00215da:	b8 00 00 00 00       	mov    eax,0x0
c00215df:	eb 05                	jmp    c00215e6 <fatWrapperIoctl+0xfe>
c00215e1:	b8 04 00 00 00       	mov    eax,0x4
c00215e6:	83 c4 28             	add    esp,0x28
c00215e9:	5b                   	pop    ebx
c00215ea:	c3                   	ret    
c00215eb:	90                   	nop

c00215ec <FAT::FAT()>:
c00215ec:	83 ec 1c             	sub    esp,0x1c
c00215ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00215f3:	83 ec 0c             	sub    esp,0xc
c00215f6:	50                   	push   eax
c00215f7:	e8 54 1b ff ff       	call   c0013150 <Filesystem::Filesystem()>
c00215fc:	83 c4 10             	add    esp,0x10
c00215ff:	ba 1c d2 02 c0       	mov    edx,0xc002d21c
c0021604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021608:	89 10                	mov    DWORD PTR [eax],edx
c002160a:	c7 05 00 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032400,0x0
c0021614:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002161c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021621:	7f 15                	jg     c0021638 <FAT::FAT()+0x4c>
c0021623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021627:	c7 04 85 20 24 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcdbe0],0xffffffff
c0021632:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021636:	eb e4                	jmp    c002161c <FAT::FAT()+0x30>
c0021638:	90                   	nop
c0021639:	83 c4 1c             	add    esp,0x1c
c002163c:	c3                   	ret    
c002163d:	90                   	nop

c002163e <FAT::fixFilepath(char*)>:
c002163e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021642:	8a 00                	mov    al,BYTE PTR [eax]
c0021644:	3c 40                	cmp    al,0x40
c0021646:	7e 2c                	jle    c0021674 <FAT::fixFilepath(char*)+0x36>
c0021648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002164c:	8a 00                	mov    al,BYTE PTR [eax]
c002164e:	83 e8 41             	sub    eax,0x41
c0021651:	88 c2                	mov    dl,al
c0021653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021657:	88 10                	mov    BYTE PTR [eax],dl
c0021659:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002165d:	8a 00                	mov    al,BYTE PTR [eax]
c002165f:	0f be c0             	movsx  eax,al
c0021662:	8b 04 85 20 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdbe0]
c0021669:	83 c0 30             	add    eax,0x30
c002166c:	88 c2                	mov    dl,al
c002166e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021672:	88 10                	mov    BYTE PTR [eax],dl
c0021674:	90                   	nop
c0021675:	c3                   	ret    

c0021676 <FAT::open(char const*, void**, FileOpenMode)>:
c0021676:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002167c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021684:	74 0a                	je     c0021690 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021686:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002168e:	75 0a                	jne    c002169a <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021690:	b8 04 00 00 00       	mov    eax,0x4
c0021695:	e9 fd 00 00 00       	jmp    c0021797 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002169a:	83 ec 08             	sub    esp,0x8
c002169d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00216a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00216a8:	50                   	push   eax
c00216a9:	e8 aa f1 fd ff       	call   c0000858 <strcpy>
c00216ae:	83 c4 10             	add    esp,0x10
c00216b1:	83 ec 08             	sub    esp,0x8
c00216b4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00216b8:	50                   	push   eax
c00216b9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00216c0:	e8 79 ff ff ff       	call   c002163e <FAT::fixFilepath(char*)>
c00216c5:	83 c4 10             	add    esp,0x10
c00216c8:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00216d0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00216d7:	83 e0 01             	and    eax,0x1
c00216da:	74 08                	je     c00216e4 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00216dc:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00216e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00216eb:	83 e0 04             	and    eax,0x4
c00216ee:	74 10                	je     c0021700 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00216f0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00216f8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021700:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021707:	83 e0 02             	and    eax,0x2
c002170a:	74 08                	je     c0021714 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002170c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021714:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002171b:	83 e0 08             	and    eax,0x8
c002171e:	74 08                	je     c0021728 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021720:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021728:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002172f:	83 e0 10             	and    eax,0x10
c0021732:	74 08                	je     c002173c <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021734:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002173c:	83 ec 0c             	sub    esp,0xc
c002173f:	68 50 02 00 00       	push   0x250
c0021744:	e8 3d e1 fe ff       	call   c000f886 <malloc>
c0021749:	83 c4 10             	add    esp,0x10
c002174c:	89 c2                	mov    edx,eax
c002174e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021755:	89 10                	mov    DWORD PTR [eax],edx
c0021757:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002175f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021766:	8b 00                	mov    eax,DWORD PTR [eax]
c0021768:	83 ec 04             	sub    esp,0x4
c002176b:	52                   	push   edx
c002176c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021770:	52                   	push   edx
c0021771:	50                   	push   eax
c0021772:	e8 3e 38 fe ff       	call   c0004fb5 <f_open>
c0021777:	83 c4 10             	add    esp,0x10
c002177a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021781:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021789:	74 07                	je     c0021792 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002178b:	b8 01 00 00 00       	mov    eax,0x1
c0021790:	eb 05                	jmp    c0021797 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021792:	b8 00 00 00 00       	mov    eax,0x0
c0021797:	81 c4 1c 01 00 00    	add    esp,0x11c
c002179d:	c3                   	ret    

c002179e <FAT::openDir(char const*, void**)>:
c002179e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00217a4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00217ac:	74 0a                	je     c00217b8 <FAT::openDir(char const*, void**)+0x1a>
c00217ae:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00217b6:	75 07                	jne    c00217bf <FAT::openDir(char const*, void**)+0x21>
c00217b8:	b8 04 00 00 00       	mov    eax,0x4
c00217bd:	eb 7d                	jmp    c002183c <FAT::openDir(char const*, void**)+0x9e>
c00217bf:	83 ec 08             	sub    esp,0x8
c00217c2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00217c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00217cd:	50                   	push   eax
c00217ce:	e8 85 f0 fd ff       	call   c0000858 <strcpy>
c00217d3:	83 c4 10             	add    esp,0x10
c00217d6:	83 ec 08             	sub    esp,0x8
c00217d9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00217dd:	50                   	push   eax
c00217de:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00217e5:	e8 54 fe ff ff       	call   c002163e <FAT::fixFilepath(char*)>
c00217ea:	83 c4 10             	add    esp,0x10
c00217ed:	83 ec 0c             	sub    esp,0xc
c00217f0:	6a 4c                	push   0x4c
c00217f2:	e8 8f e0 fe ff       	call   c000f886 <malloc>
c00217f7:	83 c4 10             	add    esp,0x10
c00217fa:	89 c2                	mov    edx,eax
c00217fc:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021803:	89 10                	mov    DWORD PTR [eax],edx
c0021805:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002180c:	8b 00                	mov    eax,DWORD PTR [eax]
c002180e:	83 ec 08             	sub    esp,0x8
c0021811:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021815:	52                   	push   edx
c0021816:	50                   	push   eax
c0021817:	e8 d1 47 fe ff       	call   c0005fed <f_opendir>
c002181c:	83 c4 10             	add    esp,0x10
c002181f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021826:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002182e:	74 07                	je     c0021837 <FAT::openDir(char const*, void**)+0x99>
c0021830:	b8 01 00 00 00       	mov    eax,0x1
c0021835:	eb 05                	jmp    c002183c <FAT::openDir(char const*, void**)+0x9e>
c0021837:	b8 00 00 00 00       	mov    eax,0x0
c002183c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021842:	c3                   	ret    
c0021843:	90                   	nop

c0021844 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021844:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002184a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021852:	75 0a                	jne    c002185e <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021854:	b8 04 00 00 00       	mov    eax,0x4
c0021859:	e9 c9 00 00 00       	jmp    c0021927 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002185e:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021866:	75 0a                	jne    c0021872 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021868:	b8 04 00 00 00       	mov    eax,0x4
c002186d:	e9 b5 00 00 00       	jmp    c0021927 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021872:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002187a:	75 0a                	jne    c0021886 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002187c:	b8 04 00 00 00       	mov    eax,0x4
c0021881:	e9 a1 00 00 00       	jmp    c0021927 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021886:	83 ec 08             	sub    esp,0x8
c0021889:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021890:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021897:	50                   	push   eax
c0021898:	e8 bb ef fd ff       	call   c0000858 <strcpy>
c002189d:	83 c4 10             	add    esp,0x10
c00218a0:	83 ec 08             	sub    esp,0x8
c00218a3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00218aa:	50                   	push   eax
c00218ab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00218b2:	e8 87 fd ff ff       	call   c002163e <FAT::fixFilepath(char*)>
c00218b7:	83 c4 10             	add    esp,0x10
c00218ba:	83 ec 08             	sub    esp,0x8
c00218bd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00218c1:	50                   	push   eax
c00218c2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00218c9:	50                   	push   eax
c00218ca:	e8 dd 48 fe ff       	call   c00061ac <f_stat>
c00218cf:	83 c4 10             	add    esp,0x10
c00218d2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00218d9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00218e0:	85 c0                	test   eax,eax
c00218e2:	74 07                	je     c00218eb <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00218e4:	83 f8 04             	cmp    eax,0x4
c00218e7:	74 32                	je     c002191b <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00218e9:	eb 37                	jmp    c0021922 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00218eb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00218ef:	0f b6 c0             	movzx  eax,al
c00218f2:	83 e0 10             	and    eax,0x10
c00218f5:	0f 95 c2             	setne  dl
c00218f8:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00218ff:	88 10                	mov    BYTE PTR [eax],dl
c0021901:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021904:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021908:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002190f:	89 01                	mov    DWORD PTR [ecx],eax
c0021911:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021914:	b8 00 00 00 00       	mov    eax,0x0
c0021919:	eb 0c                	jmp    c0021927 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002191b:	b8 02 00 00 00       	mov    eax,0x2
c0021920:	eb 05                	jmp    c0021927 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021922:	b8 01 00 00 00       	mov    eax,0x1
c0021927:	81 c4 2c 02 00 00    	add    esp,0x22c
c002192d:	c3                   	ret    

c002192e <FAT::unlink(char const*)>:
c002192e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021934:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002193c:	75 07                	jne    c0021945 <FAT::unlink(char const*)+0x17>
c002193e:	b8 04 00 00 00       	mov    eax,0x4
c0021943:	eb 5c                	jmp    c00219a1 <FAT::unlink(char const*)+0x73>
c0021945:	83 ec 08             	sub    esp,0x8
c0021948:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002194f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021953:	50                   	push   eax
c0021954:	e8 ff ee fd ff       	call   c0000858 <strcpy>
c0021959:	83 c4 10             	add    esp,0x10
c002195c:	83 ec 08             	sub    esp,0x8
c002195f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021963:	50                   	push   eax
c0021964:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002196b:	e8 ce fc ff ff       	call   c002163e <FAT::fixFilepath(char*)>
c0021970:	83 c4 10             	add    esp,0x10
c0021973:	83 ec 0c             	sub    esp,0xc
c0021976:	8d 44 24 18          	lea    eax,[esp+0x18]
c002197a:	50                   	push   eax
c002197b:	e8 7e 4b fe ff       	call   c00064fe <f_unlink>
c0021980:	83 c4 10             	add    esp,0x10
c0021983:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002198a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021991:	85 c0                	test   eax,eax
c0021993:	75 07                	jne    c002199c <FAT::unlink(char const*)+0x6e>
c0021995:	b8 00 00 00 00       	mov    eax,0x0
c002199a:	eb 05                	jmp    c00219a1 <FAT::unlink(char const*)+0x73>
c002199c:	b8 01 00 00 00       	mov    eax,0x1
c00219a1:	81 c4 1c 01 00 00    	add    esp,0x11c
c00219a7:	c3                   	ret    

c00219a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00219a8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00219ae:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00219b5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00219bc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00219c0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00219c4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00219cc:	75 0a                	jne    c00219d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00219ce:	b8 04 00 00 00       	mov    eax,0x4
c00219d3:	e9 1c 01 00 00       	jmp    c0021af4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00219d8:	83 ec 08             	sub    esp,0x8
c00219db:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00219e2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00219e6:	50                   	push   eax
c00219e7:	e8 6c ee fd ff       	call   c0000858 <strcpy>
c00219ec:	83 c4 10             	add    esp,0x10
c00219ef:	83 ec 08             	sub    esp,0x8
c00219f2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00219f6:	50                   	push   eax
c00219f7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00219fe:	e8 3b fc ff ff       	call   c002163e <FAT::fixFilepath(char*)>
c0021a03:	83 c4 10             	add    esp,0x10
c0021a06:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021a0e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021a16:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021a1b:	83 e0 01             	and    eax,0x1
c0021a1e:	74 08                	je     c0021a28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021a20:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021a28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021a2d:	83 e0 02             	and    eax,0x2
c0021a30:	74 08                	je     c0021a3a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021a32:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021a3a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021a3f:	83 e0 04             	and    eax,0x4
c0021a42:	74 08                	je     c0021a4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021a44:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021a4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021a51:	83 e0 08             	and    eax,0x8
c0021a54:	74 08                	je     c0021a5e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021a56:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021a5e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021a63:	83 e0 01             	and    eax,0x1
c0021a66:	74 08                	je     c0021a70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021a68:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021a70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021a75:	83 e0 02             	and    eax,0x2
c0021a78:	74 08                	je     c0021a82 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021a7a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021a82:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021a87:	83 e0 04             	and    eax,0x4
c0021a8a:	74 08                	je     c0021a94 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021a8c:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021a94:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021a99:	83 e0 08             	and    eax,0x8
c0021a9c:	74 08                	je     c0021aa6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021a9e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021aa6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021aad:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021ab4:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021abc:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021ac4:	83 ec 04             	sub    esp,0x4
c0021ac7:	52                   	push   edx
c0021ac8:	50                   	push   eax
c0021ac9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021acd:	50                   	push   eax
c0021ace:	e8 cd 50 fe ff       	call   c0006ba0 <f_chmod>
c0021ad3:	83 c4 10             	add    esp,0x10
c0021ad6:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021add:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021ae4:	85 c0                	test   eax,eax
c0021ae6:	75 07                	jne    c0021aef <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021ae8:	b8 00 00 00 00       	mov    eax,0x0
c0021aed:	eb 05                	jmp    c0021af4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021aef:	b8 01 00 00 00       	mov    eax,0x1
c0021af4:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021afa:	c3                   	ret    
c0021afb:	90                   	nop

c0021afc <FAT::rename(char const*, char const*)>:
c0021afc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021b02:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021b0a:	74 0a                	je     c0021b16 <FAT::rename(char const*, char const*)+0x1a>
c0021b0c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021b14:	75 0a                	jne    c0021b20 <FAT::rename(char const*, char const*)+0x24>
c0021b16:	b8 04 00 00 00       	mov    eax,0x4
c0021b1b:	e9 98 00 00 00       	jmp    c0021bb8 <FAT::rename(char const*, char const*)+0xbc>
c0021b20:	83 ec 08             	sub    esp,0x8
c0021b23:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021b2a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021b31:	50                   	push   eax
c0021b32:	e8 21 ed fd ff       	call   c0000858 <strcpy>
c0021b37:	83 c4 10             	add    esp,0x10
c0021b3a:	83 ec 08             	sub    esp,0x8
c0021b3d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021b44:	50                   	push   eax
c0021b45:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021b4c:	e8 ed fa ff ff       	call   c002163e <FAT::fixFilepath(char*)>
c0021b51:	83 c4 10             	add    esp,0x10
c0021b54:	83 ec 08             	sub    esp,0x8
c0021b57:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021b5e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b62:	50                   	push   eax
c0021b63:	e8 f0 ec fd ff       	call   c0000858 <strcpy>
c0021b68:	83 c4 10             	add    esp,0x10
c0021b6b:	83 ec 08             	sub    esp,0x8
c0021b6e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b72:	50                   	push   eax
c0021b73:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021b7a:	e8 bf fa ff ff       	call   c002163e <FAT::fixFilepath(char*)>
c0021b7f:	83 c4 10             	add    esp,0x10
c0021b82:	83 ec 08             	sub    esp,0x8
c0021b85:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b89:	50                   	push   eax
c0021b8a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021b91:	50                   	push   eax
c0021b92:	e8 16 4d fe ff       	call   c00068ad <f_rename>
c0021b97:	83 c4 10             	add    esp,0x10
c0021b9a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021ba1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021ba8:	85 c0                	test   eax,eax
c0021baa:	75 07                	jne    c0021bb3 <FAT::rename(char const*, char const*)+0xb7>
c0021bac:	b8 00 00 00 00       	mov    eax,0x0
c0021bb1:	eb 05                	jmp    c0021bb8 <FAT::rename(char const*, char const*)+0xbc>
c0021bb3:	b8 01 00 00 00       	mov    eax,0x1
c0021bb8:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021bbe:	c3                   	ret    
c0021bbf:	90                   	nop

c0021bc0 <FAT::mkdir(char const*)>:
c0021bc0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021bc6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021bce:	75 07                	jne    c0021bd7 <FAT::mkdir(char const*)+0x17>
c0021bd0:	b8 04 00 00 00       	mov    eax,0x4
c0021bd5:	eb 5c                	jmp    c0021c33 <FAT::mkdir(char const*)+0x73>
c0021bd7:	83 ec 08             	sub    esp,0x8
c0021bda:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021be1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021be5:	50                   	push   eax
c0021be6:	e8 6d ec fd ff       	call   c0000858 <strcpy>
c0021beb:	83 c4 10             	add    esp,0x10
c0021bee:	83 ec 08             	sub    esp,0x8
c0021bf1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021bf5:	50                   	push   eax
c0021bf6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021bfd:	e8 3c fa ff ff       	call   c002163e <FAT::fixFilepath(char*)>
c0021c02:	83 c4 10             	add    esp,0x10
c0021c05:	83 ec 0c             	sub    esp,0xc
c0021c08:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c0c:	50                   	push   eax
c0021c0d:	e8 6f 4a fe ff       	call   c0006681 <f_mkdir>
c0021c12:	83 c4 10             	add    esp,0x10
c0021c15:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021c1c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021c23:	85 c0                	test   eax,eax
c0021c25:	75 07                	jne    c0021c2e <FAT::mkdir(char const*)+0x6e>
c0021c27:	b8 00 00 00 00       	mov    eax,0x0
c0021c2c:	eb 05                	jmp    c0021c33 <FAT::mkdir(char const*)+0x73>
c0021c2e:	b8 01 00 00 00       	mov    eax,0x1
c0021c33:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021c39:	c3                   	ret    

c0021c3a <FAT::exists(char const*)>:
c0021c3a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021c40:	83 ec 08             	sub    esp,0x8
c0021c43:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021c4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021c4e:	50                   	push   eax
c0021c4f:	e8 04 ec fd ff       	call   c0000858 <strcpy>
c0021c54:	83 c4 10             	add    esp,0x10
c0021c57:	83 ec 08             	sub    esp,0x8
c0021c5a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021c5e:	50                   	push   eax
c0021c5f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021c66:	e8 d3 f9 ff ff       	call   c002163e <FAT::fixFilepath(char*)>
c0021c6b:	83 c4 10             	add    esp,0x10
c0021c6e:	83 ec 08             	sub    esp,0x8
c0021c71:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021c78:	50                   	push   eax
c0021c79:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021c7d:	50                   	push   eax
c0021c7e:	e8 29 45 fe ff       	call   c00061ac <f_stat>
c0021c83:	83 c4 10             	add    esp,0x10
c0021c86:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021c8d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021c94:	85 c0                	test   eax,eax
c0021c96:	75 04                	jne    c0021c9c <FAT::exists(char const*)+0x62>
c0021c98:	b0 01                	mov    al,0x1
c0021c9a:	eb 02                	jmp    c0021c9e <FAT::exists(char const*)+0x64>
c0021c9c:	b0 00                	mov    al,0x0
c0021c9e:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021ca4:	c3                   	ret    
c0021ca5:	90                   	nop

c0021ca6 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021ca6:	b8 08 00 00 00       	mov    eax,0x8
c0021cab:	c3                   	ret    

c0021cac <ISO9660::seek(void*, unsigned long long)>:
c0021cac:	53                   	push   ebx
c0021cad:	b8 04 00 00 00       	mov    eax,0x4
c0021cb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021cb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021cba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021cbe:	85 d2                	test   edx,edx
c0021cc0:	74 17                	je     c0021cd9 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021cc2:	89 c8                	mov    eax,ecx
c0021cc4:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021cc7:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021cca:	b8 01 00 00 00       	mov    eax,0x1
c0021ccf:	73 08                	jae    c0021cd9 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021cd1:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021cd4:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021cd7:	31 c0                	xor    eax,eax
c0021cd9:	5b                   	pop    ebx
c0021cda:	c3                   	ret    
c0021cdb:	90                   	nop

c0021cdc <ISO9660::tell(void*, unsigned long long*)>:
c0021cdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021ce0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ce4:	85 d2                	test   edx,edx
c0021ce6:	74 12                	je     c0021cfa <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021ce8:	85 c0                	test   eax,eax
c0021cea:	74 0e                	je     c0021cfa <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021cec:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021cef:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021cf2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021cf5:	89 10                	mov    DWORD PTR [eax],edx
c0021cf7:	31 c0                	xor    eax,eax
c0021cf9:	c3                   	ret    
c0021cfa:	b8 04 00 00 00       	mov    eax,0x4
c0021cff:	c3                   	ret    

c0021d00 <ISO9660::getName()>:
c0021d00:	b8 7c d2 02 c0       	mov    eax,0xc002d27c
c0021d05:	c3                   	ret    

c0021d06 <ISO9660::stat(void*, unsigned long long*)>:
c0021d06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021d0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d0e:	85 d2                	test   edx,edx
c0021d10:	74 12                	je     c0021d24 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021d12:	85 c0                	test   eax,eax
c0021d14:	74 0e                	je     c0021d24 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021d16:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021d19:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021d1c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021d1f:	89 10                	mov    DWORD PTR [eax],edx
c0021d21:	31 c0                	xor    eax,eax
c0021d23:	c3                   	ret    
c0021d24:	b8 04 00 00 00       	mov    eax,0x4
c0021d29:	c3                   	ret    

c0021d2a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021d2a:	b8 01 00 00 00       	mov    eax,0x1
c0021d2f:	c3                   	ret    

c0021d30 <ISO9660::unlink(char const*)>:
c0021d30:	b8 01 00 00 00       	mov    eax,0x1
c0021d35:	c3                   	ret    

c0021d36 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021d36:	b8 01 00 00 00       	mov    eax,0x1
c0021d3b:	c3                   	ret    

c0021d3c <ISO9660::rename(char const*, char const*)>:
c0021d3c:	b8 01 00 00 00       	mov    eax,0x1
c0021d41:	c3                   	ret    

c0021d42 <ISO9660::mkdir(char const*)>:
c0021d42:	b8 01 00 00 00       	mov    eax,0x1
c0021d47:	c3                   	ret    

c0021d48 <ISO9660::close(void*)>:
c0021d48:	83 ec 0c             	sub    esp,0xc
c0021d4b:	b8 04 00 00 00       	mov    eax,0x4
c0021d50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d54:	85 d2                	test   edx,edx
c0021d56:	74 0e                	je     c0021d66 <ISO9660::close(void*)+0x1e>
c0021d58:	83 ec 0c             	sub    esp,0xc
c0021d5b:	52                   	push   edx
c0021d5c:	e8 35 db fe ff       	call   c000f896 <free>
c0021d61:	83 c4 10             	add    esp,0x10
c0021d64:	31 c0                	xor    eax,eax
c0021d66:	83 c4 0c             	add    esp,0xc
c0021d69:	c3                   	ret    

c0021d6a <ISO9660::closeDir(void*)>:
c0021d6a:	83 ec 0c             	sub    esp,0xc
c0021d6d:	b8 04 00 00 00       	mov    eax,0x4
c0021d72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d76:	85 d2                	test   edx,edx
c0021d78:	74 0e                	je     c0021d88 <ISO9660::closeDir(void*)+0x1e>
c0021d7a:	83 ec 0c             	sub    esp,0xc
c0021d7d:	52                   	push   edx
c0021d7e:	e8 13 db fe ff       	call   c000f896 <free>
c0021d83:	83 c4 10             	add    esp,0x10
c0021d86:	31 c0                	xor    eax,eax
c0021d88:	83 c4 0c             	add    esp,0xc
c0021d8b:	c3                   	ret    

c0021d8c <ISO9660::~ISO9660()>:
c0021d8c:	83 ec 0c             	sub    esp,0xc
c0021d8f:	ba e0 d2 02 c0       	mov    edx,0xc002d2e0
c0021d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d98:	89 10                	mov    DWORD PTR [eax],edx
c0021d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d9e:	83 ec 0c             	sub    esp,0xc
c0021da1:	50                   	push   eax
c0021da2:	e8 cd 13 ff ff       	call   c0013174 <Filesystem::~Filesystem()>
c0021da7:	83 c4 10             	add    esp,0x10
c0021daa:	90                   	nop
c0021dab:	83 c4 0c             	add    esp,0xc
c0021dae:	c3                   	ret    
c0021daf:	90                   	nop

c0021db0 <ISO9660::~ISO9660()>:
c0021db0:	83 ec 0c             	sub    esp,0xc
c0021db3:	83 ec 0c             	sub    esp,0xc
c0021db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dba:	e8 cd ff ff ff       	call   c0021d8c <ISO9660::~ISO9660()>
c0021dbf:	83 c4 10             	add    esp,0x10
c0021dc2:	83 ec 08             	sub    esp,0x8
c0021dc5:	6a 08                	push   0x8
c0021dc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dcb:	e8 95 0f ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0021dd0:	83 c4 10             	add    esp,0x10
c0021dd3:	83 c4 0c             	add    esp,0xc
c0021dd6:	c3                   	ret    

c0021dd7 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021dd7:	55                   	push   ebp
c0021dd8:	31 c9                	xor    ecx,ecx
c0021dda:	57                   	push   edi
c0021ddb:	56                   	push   esi
c0021ddc:	53                   	push   ebx
c0021ddd:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021de1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021de5:	89 eb                	mov    ebx,ebp
c0021de7:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021deb:	39 ce                	cmp    esi,ecx
c0021ded:	7e 17                	jle    c0021e06 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021def:	31 d2                	xor    edx,edx
c0021df1:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021df5:	7d 13                	jge    c0021e0a <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021df7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021dfb:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021dfe:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021e01:	75 0d                	jne    c0021e10 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021e03:	42                   	inc    edx
c0021e04:	eb eb                	jmp    c0021df1 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021e06:	31 c0                	xor    eax,eax
c0021e08:	eb 0a                	jmp    c0021e14 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021e0a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021e0e:	eb 04                	jmp    c0021e14 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021e10:	41                   	inc    ecx
c0021e11:	43                   	inc    ebx
c0021e12:	eb d7                	jmp    c0021deb <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021e14:	5b                   	pop    ebx
c0021e15:	5e                   	pop    esi
c0021e16:	5f                   	pop    edi
c0021e17:	5d                   	pop    ebp
c0021e18:	c3                   	ret    

c0021e19 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021e19:	56                   	push   esi
c0021e1a:	53                   	push   ebx
c0021e1b:	52                   	push   edx
c0021e1c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021e20:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021e24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021e28:	39 0d 00 25 03 c0    	cmp    DWORD PTR ds:0xc0032500,ecx
c0021e2e:	75 08                	jne    c0021e38 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021e30:	38 05 54 e3 02 c0    	cmp    BYTE PTR ds:0xc002e354,al
c0021e36:	74 2b                	je     c0021e63 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021e38:	83 ec 0c             	sub    esp,0xc
c0021e3b:	a2 54 e3 02 c0       	mov    ds:0xc002e354,al
c0021e40:	68 20 25 03 c0       	push   0xc0032520
c0021e45:	0f be c0             	movsx  eax,al
c0021e48:	6a 01                	push   0x1
c0021e4a:	89 0d 00 25 03 c0    	mov    DWORD PTR ds:0xc0032500,ecx
c0021e50:	31 db                	xor    ebx,ebx
c0021e52:	53                   	push   ebx
c0021e53:	51                   	push   ecx
c0021e54:	ff 34 85 dc f2 02 c0 	push   DWORD PTR [eax*4-0x3ffd0d24]
c0021e5b:	e8 70 49 ff ff       	call   c00167d0 <LogicalDisk::read(unsigned long long, int, void*)>
c0021e60:	83 c4 20             	add    esp,0x20
c0021e63:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021e6b:	c7 44 24 14 20 25 03 c0 	mov    DWORD PTR [esp+0x14],0xc0032520
c0021e73:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021e77:	58                   	pop    eax
c0021e78:	5b                   	pop    ebx
c0021e79:	5e                   	pop    esi
c0021e7a:	e9 e9 e8 fd ff       	jmp    c0000768 <memcpy>
c0021e7f:	90                   	nop

c0021e80 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021e80:	81 ec 10 08 00 00    	sub    esp,0x810
c0021e86:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021e8d:	83 c0 41             	add    eax,0x41
c0021e90:	0f be c0             	movsx  eax,al
c0021e93:	50                   	push   eax
c0021e94:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021e98:	50                   	push   eax
c0021e99:	6a 10                	push   0x10
c0021e9b:	e8 79 ff ff ff       	call   c0021e19 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ea0:	83 c4 10             	add    esp,0x10
c0021ea3:	31 c0                	xor    eax,eax
c0021ea5:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021eaa:	75 1d                	jne    c0021ec9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021eac:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021eb1:	75 16                	jne    c0021ec9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021eb3:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021eb8:	75 0f                	jne    c0021ec9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021eba:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021ebf:	75 08                	jne    c0021ec9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021ec1:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021ec6:	0f 94 c0             	sete   al
c0021ec9:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021ecf:	c3                   	ret    

c0021ed0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021ed0:	55                   	push   ebp
c0021ed1:	57                   	push   edi
c0021ed2:	56                   	push   esi
c0021ed3:	53                   	push   ebx
c0021ed4:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021eda:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021ee1:	85 ed                	test   ebp,ebp
c0021ee3:	0f 84 d6 01 00 00    	je     c00220bf <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021ee9:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021ef1:	0f 84 c8 01 00 00    	je     c00220bf <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021ef7:	b8 01 00 00 00       	mov    eax,0x1
c0021efc:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021f00:	0f 85 be 01 00 00    	jne    c00220c4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021f06:	31 d2                	xor    edx,edx
c0021f08:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021f0f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021f12:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021f15:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021f19:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021f1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0021f1f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021f23:	01 f0                	add    eax,esi
c0021f25:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021f28:	11 fa                	adc    edx,edi
c0021f2a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021f2e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021f32:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021f36:	19 d1                	sbb    ecx,edx
c0021f38:	72 0a                	jb     c0021f44 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021f3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f42:	eb 13                	jmp    c0021f57 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021f44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f4c:	29 f0                	sub    eax,esi
c0021f4e:	19 fa                	sbb    edx,edi
c0021f50:	89 04 24             	mov    DWORD PTR [esp],eax
c0021f53:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021f57:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021f5a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021f5d:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021f61:	51                   	push   ecx
c0021f62:	c1 e0 0b             	shl    eax,0xb
c0021f65:	01 c6                	add    esi,eax
c0021f67:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021f6b:	11 d7                	adc    edi,edx
c0021f6d:	50                   	push   eax
c0021f6e:	89 fa                	mov    edx,edi
c0021f70:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021f74:	89 f0                	mov    eax,esi
c0021f76:	53                   	push   ebx
c0021f77:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021f7b:	50                   	push   eax
c0021f7c:	e8 98 fe ff ff       	call   c0021e19 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f81:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021f85:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021f88:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021f8c:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021f92:	83 c4 10             	add    esp,0x10
c0021f95:	b8 00 08 00 00       	mov    eax,0x800
c0021f9a:	29 d0                	sub    eax,edx
c0021f9c:	39 c1                	cmp    ecx,eax
c0021f9e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021fa2:	83 d9 00             	sbb    ecx,0x0
c0021fa5:	7d 1c                	jge    c0021fc3 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021fa7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021fac:	75 12                	jne    c0021fc0 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021fae:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021fb5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021fbb:	e9 fb 00 00 00       	jmp    c00220bb <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021fc0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021fc3:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021fc6:	31 d2                	xor    edx,edx
c0021fc8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021fcc:	39 c2                	cmp    edx,eax
c0021fce:	7d 14                	jge    c0021fe4 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021fd0:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021fd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021fdb:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021fde:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021fe1:	42                   	inc    edx
c0021fe2:	eb e8                	jmp    c0021fcc <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021fe4:	89 c3                	mov    ebx,eax
c0021fe6:	85 c0                	test   eax,eax
c0021fe8:	79 02                	jns    c0021fec <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021fea:	31 db                	xor    ebx,ebx
c0021fec:	99                   	cdq    
c0021fed:	01 c3                	add    ebx,eax
c0021fef:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021ff6:	01 c6                	add    esi,eax
c0021ff8:	11 d7                	adc    edi,edx
c0021ffa:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021ffe:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022002:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0022005:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0022009:	29 c6                	sub    esi,eax
c002200b:	19 d7                	sbb    edi,edx
c002200d:	89 34 24             	mov    DWORD PTR [esp],esi
c0022010:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0022014:	b8 ff 07 00 00       	mov    eax,0x7ff
c0022019:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002201c:	b8 00 00 00 00       	mov    eax,0x0
c0022021:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0022025:	7d 3e                	jge    c0022065 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0022027:	52                   	push   edx
c0022028:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002202c:	50                   	push   eax
c002202d:	53                   	push   ebx
c002202e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022032:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022036:	0f ac d0 0b          	shrd   eax,edx,0xb
c002203a:	50                   	push   eax
c002203b:	e8 d9 fd ff ff       	call   c0021e19 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022040:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0022048:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002204d:	81 c3 00 08 00 00    	add    ebx,0x800
c0022053:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002205b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0022060:	83 c4 10             	add    esp,0x10
c0022063:	eb af                	jmp    c0022014 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0022065:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022069:	0b 04 24             	or     eax,DWORD PTR [esp]
c002206c:	74 32                	je     c00220a0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c002206e:	50                   	push   eax
c002206f:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022073:	50                   	push   eax
c0022074:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022078:	50                   	push   eax
c0022079:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002207d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022081:	0f ac fe 0b          	shrd   esi,edi,0xb
c0022085:	56                   	push   esi
c0022086:	e8 8e fd ff ff       	call   c0021e19 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002208b:	83 c4 0c             	add    esp,0xc
c002208e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0022092:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022096:	50                   	push   eax
c0022097:	53                   	push   ebx
c0022098:	e8 cb e6 fd ff       	call   c0000768 <memcpy>
c002209d:	83 c4 10             	add    esp,0x10
c00220a0:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00220a7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00220ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00220af:	89 38                	mov    DWORD PTR [eax],edi
c00220b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220b5:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00220b8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00220bb:	31 c0                	xor    eax,eax
c00220bd:	eb 05                	jmp    c00220c4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00220bf:	b8 04 00 00 00       	mov    eax,0x4
c00220c4:	81 c4 2c 08 00 00    	add    esp,0x82c
c00220ca:	5b                   	pop    ebx
c00220cb:	5e                   	pop    esi
c00220cc:	5f                   	pop    edi
c00220cd:	5d                   	pop    ebp
c00220ce:	c3                   	ret    
c00220cf:	90                   	nop

c00220d0 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00220d0:	55                   	push   ebp
c00220d1:	57                   	push   edi
c00220d2:	56                   	push   esi
c00220d3:	53                   	push   ebx
c00220d4:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00220da:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00220e1:	85 f6                	test   esi,esi
c00220e3:	0f 84 64 02 00 00    	je     c002234d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00220e9:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00220f1:	0f 84 56 02 00 00    	je     c002234d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00220f7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00220fa:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00220fd:	75 0a                	jne    c0022109 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00220ff:	b8 07 00 00 00       	mov    eax,0x7
c0022104:	e9 49 02 00 00       	jmp    c0022352 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0022109:	50                   	push   eax
c002210a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c002210e:	50                   	push   eax
c002210f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0022116:	53                   	push   ebx
c0022117:	8b 06                	mov    eax,DWORD PTR [esi]
c0022119:	c1 e0 0b             	shl    eax,0xb
c002211c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c002211f:	c1 e8 0b             	shr    eax,0xb
c0022122:	50                   	push   eax
c0022123:	e8 f1 fc ff ff       	call   c0021e19 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022128:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002212b:	83 c4 10             	add    esp,0x10
c002212e:	89 c1                	mov    ecx,eax
c0022130:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0022133:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0022139:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002213c:	84 db                	test   bl,bl
c002213e:	0f 85 90 00 00 00    	jne    c00221d4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0022144:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c002214a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0022150:	29 c7                	sub    edi,eax
c0022152:	89 fb                	mov    ebx,edi
c0022154:	c1 fb 1f             	sar    ebx,0x1f
c0022157:	01 f8                	add    eax,edi
c0022159:	11 da                	adc    edx,ebx
c002215b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002215f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022163:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0022166:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0022169:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c002216c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002216f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022172:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022176:	89 d8                	mov    eax,ebx
c0022178:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002217b:	ba 00 00 00 00       	mov    edx,0x0
c0022180:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0022184:	b8 00 00 00 00       	mov    eax,0x0
c0022189:	73 0b                	jae    c0022196 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c002218b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002218e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022192:	29 f8                	sub    eax,edi
c0022194:	19 da                	sbb    edx,ebx
c0022196:	89 d3                	mov    ebx,edx
c0022198:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c002219b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c002219e:	09 c3                	or     ebx,eax
c00221a0:	0f 84 59 ff ff ff    	je     c00220ff <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00221a6:	55                   	push   ebp
c00221a7:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00221ab:	50                   	push   eax
c00221ac:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00221b3:	53                   	push   ebx
c00221b4:	8b 06                	mov    eax,DWORD PTR [esi]
c00221b6:	c1 e0 0b             	shl    eax,0xb
c00221b9:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00221bd:	c1 e8 0b             	shr    eax,0xb
c00221c0:	50                   	push   eax
c00221c1:	e8 53 fc ff ff       	call   c0021e19 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00221c6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00221c9:	83 c4 10             	add    esp,0x10
c00221cc:	25 ff 07 00 00       	and    eax,0x7ff
c00221d1:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00221d4:	57                   	push   edi
c00221d5:	6a 28                	push   0x28
c00221d7:	6a 00                	push   0x0
c00221d9:	8d 44 24 24          	lea    eax,[esp+0x24]
c00221dd:	50                   	push   eax
c00221de:	e8 b9 e5 fd ff       	call   c000079c <memset>
c00221e3:	31 d2                	xor    edx,edx
c00221e5:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00221e8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00221ee:	89 f8                	mov    eax,edi
c00221f0:	83 c0 21             	add    eax,0x21
c00221f3:	83 d2 00             	adc    edx,0x0
c00221f6:	89 c7                	mov    edi,eax
c00221f8:	89 d5                	mov    ebp,edx
c00221fa:	83 c4 10             	add    esp,0x10
c00221fd:	31 c9                	xor    ecx,ecx
c00221ff:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0022206:	83 f9 28             	cmp    ecx,0x28
c0022209:	88 04 24             	mov    BYTE PTR [esp],al
c002220c:	0f 94 c2             	sete   dl
c002220f:	88 d0                	mov    al,dl
c0022211:	ba ff 07 00 00       	mov    edx,0x7ff
c0022216:	39 fa                	cmp    edx,edi
c0022218:	ba 00 00 00 00       	mov    edx,0x0
c002221d:	19 ea                	sbb    edx,ebp
c002221f:	0f 92 c2             	setb   dl
c0022222:	09 c2                	or     edx,eax
c0022224:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0022228:	0f 94 c0             	sete   al
c002222b:	08 d0                	or     al,dl
c002222d:	75 16                	jne    c0022245 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c002222f:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0022233:	74 10                	je     c0022245 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0022235:	8a 04 24             	mov    al,BYTE PTR [esp]
c0022238:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c002223c:	41                   	inc    ecx
c002223d:	83 c7 01             	add    edi,0x1
c0022240:	83 d5 00             	adc    ebp,0x0
c0022243:	eb ba                	jmp    c00221ff <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0022245:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c002224c:	83 ec 0c             	sub    esp,0xc
c002224f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0022253:	57                   	push   edi
c0022254:	e8 5f e5 fd ff       	call   c00007b8 <strlen>
c0022259:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0022261:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022265:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c002226c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002226f:	5a                   	pop    edx
c0022270:	25 ff 07 00 00       	and    eax,0x7ff
c0022275:	01 c8                	add    eax,ecx
c0022277:	59                   	pop    ecx
c0022278:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002227e:	83 e0 02             	and    eax,0x2
c0022281:	3c 01                	cmp    al,0x1
c0022283:	19 c0                	sbb    eax,eax
c0022285:	83 c0 02             	add    eax,0x2
c0022288:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002228c:	57                   	push   edi
c002228d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0022291:	50                   	push   eax
c0022292:	e8 c1 e5 fd ff       	call   c0000858 <strcpy>
c0022297:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c002229b:	83 c4 10             	add    esp,0x10
c002229e:	84 c0                	test   al,al
c00222a0:	75 21                	jne    c00222c3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c00222a2:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00222aa:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00222b2:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00222ba:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00222c1:	eb 28                	jmp    c00222eb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c00222c3:	fe c8                	dec    al
c00222c5:	75 24                	jne    c00222eb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c00222c7:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00222cf:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00222d7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00222df:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00222e6:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00222eb:	0f b6 fb             	movzx  edi,bl
c00222ee:	31 db                	xor    ebx,ebx
c00222f0:	50                   	push   eax
c00222f1:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c00222f8:	8d 44 24 48          	lea    eax,[esp+0x48]
c00222fc:	50                   	push   eax
c00222fd:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0022304:	e8 5f e4 fd ff       	call   c0000768 <memcpy>
c0022309:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0022310:	89 f9                	mov    ecx,edi
c0022312:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0022318:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c002231b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c002231e:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0022321:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0022324:	83 c4 10             	add    esp,0x10
c0022327:	39 c7                	cmp    edi,eax
c0022329:	89 df                	mov    edi,ebx
c002232b:	19 d7                	sbb    edi,edx
c002232d:	72 10                	jb     c002233f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002232f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0022336:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c002233d:	eb 0a                	jmp    c0022349 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c002233f:	29 c8                	sub    eax,ecx
c0022341:	19 da                	sbb    edx,ebx
c0022343:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0022346:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0022349:	31 c0                	xor    eax,eax
c002234b:	eb 05                	jmp    c0022352 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c002234d:	b8 04 00 00 00       	mov    eax,0x4
c0022352:	81 c4 5c 09 00 00    	add    esp,0x95c
c0022358:	5b                   	pop    ebx
c0022359:	5e                   	pop    esi
c002235a:	5f                   	pop    edi
c002235b:	5d                   	pop    ebp
c002235c:	c3                   	ret    

c002235d <readRoot(unsigned int*, unsigned int*, char)>:
c002235d:	81 ec 40 08 00 00    	sub    esp,0x840
c0022363:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c002236b:	50                   	push   eax
c002236c:	8d 44 24 38          	lea    eax,[esp+0x38]
c0022370:	50                   	push   eax
c0022371:	6a 10                	push   0x10
c0022373:	e8 a1 fa ff ff       	call   c0021e19 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022378:	83 c4 0c             	add    esp,0xc
c002237b:	6a 22                	push   0x22
c002237d:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0022384:	50                   	push   eax
c0022385:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0022389:	50                   	push   eax
c002238a:	e8 d9 e3 fd ff       	call   c0000768 <memcpy>
c002238f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022396:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002239a:	89 10                	mov    DWORD PTR [eax],edx
c002239c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00223a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00223a7:	89 10                	mov    DWORD PTR [eax],edx
c00223a9:	b0 01                	mov    al,0x1
c00223ab:	81 c4 4c 08 00 00    	add    esp,0x84c
c00223b1:	c3                   	ret    

c00223b2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00223b2:	55                   	push   ebp
c00223b3:	57                   	push   edi
c00223b4:	56                   	push   esi
c00223b5:	53                   	push   ebx
c00223b6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00223bc:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00223c3:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00223ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00223ce:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00223d2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00223d6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00223da:	75 03                	jne    c00223df <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00223dc:	83 c3 02             	add    ebx,0x2
c00223df:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00223e2:	75 03                	jne    c00223e7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00223e4:	43                   	inc    ebx
c00223e5:	eb f8                	jmp    c00223df <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00223e7:	51                   	push   ecx
c00223e8:	68 00 01 00 00       	push   0x100
c00223ed:	6a 00                	push   0x0
c00223ef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00223f3:	50                   	push   eax
c00223f4:	e8 a3 e3 fd ff       	call   c000079c <memset>
c00223f9:	83 c4 10             	add    esp,0x10
c00223fc:	31 d2                	xor    edx,edx
c00223fe:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0022401:	84 c0                	test   al,al
c0022403:	74 21                	je     c0022426 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0022405:	3c 2f                	cmp    al,0x2f
c0022407:	75 0b                	jne    c0022414 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0022409:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002240d:	bd 01 00 00 00       	mov    ebp,0x1
c0022412:	eb 14                	jmp    c0022428 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0022414:	8d 48 9f             	lea    ecx,[eax-0x61]
c0022417:	80 f9 19             	cmp    cl,0x19
c002241a:	77 03                	ja     c002241f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c002241c:	83 e8 20             	sub    eax,0x20
c002241f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0022423:	42                   	inc    edx
c0022424:	eb d8                	jmp    c00223fe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0022426:	31 ed                	xor    ebp,ebp
c0022428:	83 ec 0c             	sub    esp,0xc
c002242b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0022432:	e8 4f d4 fe ff       	call   c000f886 <malloc>
c0022437:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002243e:	89 c6                	mov    esi,eax
c0022440:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0022446:	c1 ef 0b             	shr    edi,0xb
c0022449:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0022450:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0022454:	83 c4 10             	add    esp,0x10
c0022457:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002245c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022460:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0022467:	74 28                	je     c0022491 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0022469:	52                   	push   edx
c002246a:	57                   	push   edi
c002246b:	50                   	push   eax
c002246c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022470:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022477:	e8 9d f9 ff ff       	call   c0021e19 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002247c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022480:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0022487:	05 00 08 00 00       	add    eax,0x800
c002248c:	83 c4 10             	add    esp,0x10
c002248f:	eb cb                	jmp    c002245c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0022491:	83 ec 0c             	sub    esp,0xc
c0022494:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022498:	57                   	push   edi
c0022499:	e8 1a e3 fd ff       	call   c00007b8 <strlen>
c002249e:	50                   	push   eax
c002249f:	57                   	push   edi
c00224a0:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00224a7:	56                   	push   esi
c00224a8:	e8 2a f9 ff ff       	call   c0021dd7 <__memmem(unsigned char*, int, unsigned char*, int)>
c00224ad:	83 c4 20             	add    esp,0x20
c00224b0:	85 c0                	test   eax,eax
c00224b2:	75 13                	jne    c00224c7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00224b4:	83 ec 0c             	sub    esp,0xc
c00224b7:	56                   	push   esi
c00224b8:	e8 d9 d3 fe ff       	call   c000f896 <free>
c00224bd:	83 c4 10             	add    esp,0x10
c00224c0:	31 c0                	xor    eax,eax
c00224c2:	e9 b3 00 00 00       	jmp    c002257a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00224c7:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00224cb:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00224cf:	c1 e7 08             	shl    edi,0x8
c00224d2:	c1 e2 10             	shl    edx,0x10
c00224d5:	09 d7                	or     edi,edx
c00224d7:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00224db:	09 d7                	or     edi,edx
c00224dd:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00224e1:	c1 e2 18             	shl    edx,0x18
c00224e4:	09 d7                	or     edi,edx
c00224e6:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00224ea:	89 d1                	mov    ecx,edx
c00224ec:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00224f0:	c1 e1 08             	shl    ecx,0x8
c00224f3:	c1 e2 10             	shl    edx,0x10
c00224f6:	09 ca                	or     edx,ecx
c00224f8:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00224fc:	09 ca                	or     edx,ecx
c00224fe:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0022502:	c1 e1 18             	shl    ecx,0x18
c0022505:	09 ca                	or     edx,ecx
c0022507:	89 e9                	mov    ecx,ebp
c0022509:	84 c9                	test   cl,cl
c002250b:	74 3c                	je     c0022549 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002250d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022511:	83 ec 0c             	sub    esp,0xc
c0022514:	56                   	push   esi
c0022515:	e8 7c d3 fe ff       	call   c000f896 <free>
c002251a:	83 c4 0c             	add    esp,0xc
c002251d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022524:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022529:	50                   	push   eax
c002252a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022531:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002253c:	52                   	push   edx
c002253d:	57                   	push   edi
c002253e:	53                   	push   ebx
c002253f:	e8 6e fe ff ff       	call   c00223b2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022544:	83 c4 20             	add    esp,0x20
c0022547:	eb 31                	jmp    c002257a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022549:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002254c:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0022553:	d0 e8                	shr    al,1
c0022555:	89 3b                	mov    DWORD PTR [ebx],edi
c0022557:	83 e0 01             	and    eax,0x1
c002255a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022561:	83 ec 0c             	sub    esp,0xc
c0022564:	89 13                	mov    DWORD PTR [ebx],edx
c0022566:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002256d:	89 03                	mov    DWORD PTR [ebx],eax
c002256f:	56                   	push   esi
c0022570:	e8 21 d3 fe ff       	call   c000f896 <free>
c0022575:	83 c4 10             	add    esp,0x10
c0022578:	b0 01                	mov    al,0x1
c002257a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0022580:	5b                   	pop    ebx
c0022581:	5e                   	pop    esi
c0022582:	5f                   	pop    edi
c0022583:	5d                   	pop    ebp
c0022584:	c3                   	ret    

c0022585 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0022585:	55                   	push   ebp
c0022586:	57                   	push   edi
c0022587:	56                   	push   esi
c0022588:	53                   	push   ebx
c0022589:	83 ec 20             	sub    esp,0x20
c002258c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022590:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0022594:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022598:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00225a8:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00225ad:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00225b3:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00225b9:	57                   	push   edi
c00225ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00225be:	50                   	push   eax
c00225bf:	8d 44 24 14          	lea    eax,[esp+0x14]
c00225c3:	50                   	push   eax
c00225c4:	e8 94 fd ff ff       	call   c002235d <readRoot(unsigned int*, unsigned int*, char)>
c00225c9:	5a                   	pop    edx
c00225ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00225ce:	e8 e5 e1 fd ff       	call   c00007b8 <strlen>
c00225d3:	83 c4 10             	add    esp,0x10
c00225d6:	83 f8 03             	cmp    eax,0x3
c00225d9:	77 17                	ja     c00225f2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00225db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00225df:	89 03                	mov    DWORD PTR [ebx],eax
c00225e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225e5:	89 06                	mov    DWORD PTR [esi],eax
c00225e7:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00225ee:	b0 01                	mov    al,0x1
c00225f0:	eb 19                	jmp    c002260b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00225f2:	50                   	push   eax
c00225f3:	55                   	push   ebp
c00225f4:	57                   	push   edi
c00225f5:	56                   	push   esi
c00225f6:	53                   	push   ebx
c00225f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00225fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00225ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022603:	e8 aa fd ff ff       	call   c00223b2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022608:	83 c4 20             	add    esp,0x20
c002260b:	83 c4 1c             	add    esp,0x1c
c002260e:	5b                   	pop    ebx
c002260f:	5e                   	pop    esi
c0022610:	5f                   	pop    edi
c0022611:	5d                   	pop    ebp
c0022612:	c3                   	ret    
c0022613:	90                   	nop

c0022614 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022614:	57                   	push   edi
c0022615:	56                   	push   esi
c0022616:	53                   	push   ebx
c0022617:	83 ec 10             	sub    esp,0x10
c002261a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002261e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022622:	85 ff                	test   edi,edi
c0022624:	0f 84 9d 00 00 00    	je     c00226c7 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002262a:	85 f6                	test   esi,esi
c002262c:	0f 84 95 00 00 00    	je     c00226c7 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022632:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022637:	74 17                	je     c0022650 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022639:	83 ec 0c             	sub    esp,0xc
c002263c:	68 97 d2 02 c0       	push   0xc002d297
c0022641:	e8 ff 07 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0022646:	83 c4 10             	add    esp,0x10
c0022649:	b8 03 00 00 00       	mov    eax,0x3
c002264e:	eb 7c                	jmp    c00226cc <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022650:	83 ec 0c             	sub    esp,0xc
c0022653:	6a 1c                	push   0x1c
c0022655:	e8 2c d2 fe ff       	call   c000f886 <malloc>
c002265a:	89 07                	mov    DWORD PTR [edi],eax
c002265c:	89 c3                	mov    ebx,eax
c002265e:	58                   	pop    eax
c002265f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022663:	50                   	push   eax
c0022664:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022667:	50                   	push   eax
c0022668:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002266c:	50                   	push   eax
c002266d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022671:	50                   	push   eax
c0022672:	56                   	push   esi
c0022673:	e8 0d ff ff ff       	call   c0022585 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022678:	83 c4 20             	add    esp,0x20
c002267b:	84 c0                	test   al,al
c002267d:	74 07                	je     c0022686 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002267f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022684:	74 0b                	je     c0022691 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022686:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002268a:	b8 01 00 00 00       	mov    eax,0x1
c002268f:	eb 3b                	jmp    c00226cc <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022695:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022699:	89 03                	mov    DWORD PTR [ebx],eax
c002269b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00226a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00226a6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00226ad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00226b4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00226b7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00226be:	8a 06                	mov    al,BYTE PTR [esi]
c00226c0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00226c3:	31 c0                	xor    eax,eax
c00226c5:	eb 05                	jmp    c00226cc <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00226c7:	b8 04 00 00 00       	mov    eax,0x4
c00226cc:	83 c4 10             	add    esp,0x10
c00226cf:	5b                   	pop    ebx
c00226d0:	5e                   	pop    esi
c00226d1:	5f                   	pop    edi
c00226d2:	c3                   	ret    
c00226d3:	90                   	nop

c00226d4 <ISO9660::exists(char const*)>:
c00226d4:	83 ec 28             	sub    esp,0x28
c00226d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226db:	8d 54 24 18          	lea    edx,[esp+0x18]
c00226df:	52                   	push   edx
c00226e0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00226e3:	52                   	push   edx
c00226e4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00226e8:	52                   	push   edx
c00226e9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00226ed:	52                   	push   edx
c00226ee:	50                   	push   eax
c00226ef:	e8 91 fe ff ff       	call   c0022585 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00226f4:	83 c4 3c             	add    esp,0x3c
c00226f7:	c3                   	ret    

c00226f8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00226f8:	56                   	push   esi
c00226f9:	53                   	push   ebx
c00226fa:	83 ec 14             	sub    esp,0x14
c00226fd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022701:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022705:	85 db                	test   ebx,ebx
c0022707:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002270b:	0f 94 c2             	sete   dl
c002270e:	85 f6                	test   esi,esi
c0022710:	0f 94 c0             	sete   al
c0022713:	08 c2                	or     dl,al
c0022715:	75 68                	jne    c002277f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022717:	85 c9                	test   ecx,ecx
c0022719:	74 64                	je     c002277f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002271b:	83 ec 0c             	sub    esp,0xc
c002271e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022721:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022725:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002272b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022732:	50                   	push   eax
c0022733:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022736:	50                   	push   eax
c0022737:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002273b:	50                   	push   eax
c002273c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022740:	50                   	push   eax
c0022741:	51                   	push   ecx
c0022742:	e8 3e fe ff ff       	call   c0022585 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022747:	83 c4 20             	add    esp,0x20
c002274a:	ba 01 00 00 00       	mov    edx,0x1
c002274f:	84 c0                	test   al,al
c0022751:	74 31                	je     c0022784 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022753:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022757:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002275e:	89 03                	mov    DWORD PTR [ebx],eax
c0022760:	ba 00 00 00 00       	mov    edx,0x0
c0022765:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022769:	85 c0                	test   eax,eax
c002276b:	0f 95 06             	setne  BYTE PTR [esi]
c002276e:	74 14                	je     c0022784 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022770:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022776:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002277d:	eb 05                	jmp    c0022784 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002277f:	ba 04 00 00 00       	mov    edx,0x4
c0022784:	83 c4 14             	add    esp,0x14
c0022787:	89 d0                	mov    eax,edx
c0022789:	5b                   	pop    ebx
c002278a:	5e                   	pop    esi
c002278b:	c3                   	ret    

c002278c <ISO9660::openDir(char const*, void**)>:
c002278c:	57                   	push   edi
c002278d:	56                   	push   esi
c002278e:	53                   	push   ebx
c002278f:	83 ec 10             	sub    esp,0x10
c0022792:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022796:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002279a:	85 ff                	test   edi,edi
c002279c:	0f 84 95 00 00 00    	je     c0022837 <ISO9660::openDir(char const*, void**)+0xab>
c00227a2:	85 f6                	test   esi,esi
c00227a4:	0f 84 8d 00 00 00    	je     c0022837 <ISO9660::openDir(char const*, void**)+0xab>
c00227aa:	83 ec 0c             	sub    esp,0xc
c00227ad:	6a 1c                	push   0x1c
c00227af:	e8 d2 d0 fe ff       	call   c000f886 <malloc>
c00227b4:	89 07                	mov    DWORD PTR [edi],eax
c00227b6:	89 c3                	mov    ebx,eax
c00227b8:	59                   	pop    ecx
c00227b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00227bd:	50                   	push   eax
c00227be:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00227c1:	50                   	push   eax
c00227c2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00227c6:	50                   	push   eax
c00227c7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00227cb:	50                   	push   eax
c00227cc:	56                   	push   esi
c00227cd:	e8 b3 fd ff ff       	call   c0022585 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00227d2:	83 c4 20             	add    esp,0x20
c00227d5:	84 c0                	test   al,al
c00227d7:	74 07                	je     c00227e0 <ISO9660::openDir(char const*, void**)+0x54>
c00227d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00227de:	75 21                	jne    c0022801 <ISO9660::openDir(char const*, void**)+0x75>
c00227e0:	0f b6 c0             	movzx  eax,al
c00227e3:	52                   	push   edx
c00227e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00227e8:	50                   	push   eax
c00227e9:	68 bd d2 02 c0       	push   0xc002d2bd
c00227ee:	e8 52 06 ff ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00227f3:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00227f7:	83 c4 10             	add    esp,0x10
c00227fa:	b8 01 00 00 00       	mov    eax,0x1
c00227ff:	eb 3b                	jmp    c002283c <ISO9660::openDir(char const*, void**)+0xb0>
c0022801:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022805:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022809:	89 03                	mov    DWORD PTR [ebx],eax
c002280b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022812:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022816:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002281d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022824:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022827:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002282e:	8a 06                	mov    al,BYTE PTR [esi]
c0022830:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022833:	31 c0                	xor    eax,eax
c0022835:	eb 05                	jmp    c002283c <ISO9660::openDir(char const*, void**)+0xb0>
c0022837:	b8 04 00 00 00       	mov    eax,0x4
c002283c:	83 c4 10             	add    esp,0x10
c002283f:	5b                   	pop    ebx
c0022840:	5e                   	pop    esi
c0022841:	5f                   	pop    edi
c0022842:	c3                   	ret    
c0022843:	90                   	nop

c0022844 <ISO9660::ISO9660()>:
c0022844:	83 ec 0c             	sub    esp,0xc
c0022847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002284b:	83 ec 0c             	sub    esp,0xc
c002284e:	50                   	push   eax
c002284f:	e8 fc 08 ff ff       	call   c0013150 <Filesystem::Filesystem()>
c0022854:	83 c4 10             	add    esp,0x10
c0022857:	ba e0 d2 02 c0       	mov    edx,0xc002d2e0
c002285c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022860:	89 10                	mov    DWORD PTR [eax],edx
c0022862:	90                   	nop
c0022863:	83 c4 0c             	add    esp,0xc
c0022866:	c3                   	ret    
c0022867:	90                   	nop

c0022868 <SoundChannel::~SoundChannel()>:
c0022868:	83 ec 0c             	sub    esp,0xc
c002286b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002286f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022872:	83 ec 0c             	sub    esp,0xc
c0022875:	50                   	push   eax
c0022876:	e8 1b d0 fe ff       	call   c000f896 <free>
c002287b:	83 c4 10             	add    esp,0x10
c002287e:	90                   	nop
c002287f:	83 c4 0c             	add    esp,0xc
c0022882:	c3                   	ret    
c0022883:	90                   	nop

c0022884 <SoundChannel::setSpeed(float)>:
c0022884:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022888:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002288c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002288f:	c3                   	ret    

c0022890 <SoundChannel::getSpeed()>:
c0022890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022894:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022897:	c3                   	ret    

c0022898 <SoundChannel::setVolume(int)>:
c0022898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002289c:	83 f8 64             	cmp    eax,0x64
c002289f:	7e 05                	jle    c00228a6 <SoundChannel::setVolume(int)+0xe>
c00228a1:	b8 64 00 00 00       	mov    eax,0x64
c00228a6:	85 c0                	test   eax,eax
c00228a8:	79 02                	jns    c00228ac <SoundChannel::setVolume(int)+0x14>
c00228aa:	31 c0                	xor    eax,eax
c00228ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00228b0:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00228b3:	c3                   	ret    

c00228b4 <SoundChannel::getVolume()>:
c00228b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228b8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00228bb:	c3                   	ret    

c00228bc <SoundChannel::pause()>:
c00228bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228c0:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00228c4:	c3                   	ret    
c00228c5:	90                   	nop

c00228c6 <SoundChannel::SoundChannel(int, int, int, int)>:
c00228c6:	83 ec 1c             	sub    esp,0x1c
c00228c9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00228cd:	e8 ea ff ff ff       	call   c00228bc <SoundChannel::pause()>
c00228d2:	83 c4 04             	add    esp,0x4
c00228d5:	6a 50                	push   0x50
c00228d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00228db:	e8 b8 ff ff ff       	call   c0022898 <SoundChannel::setVolume(int)>
c00228e0:	83 c4 08             	add    esp,0x8
c00228e3:	a1 5c d3 02 c0       	mov    eax,ds:0xc002d35c
c00228e8:	50                   	push   eax
c00228e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00228ed:	e8 92 ff ff ff       	call   c0022884 <SoundChannel::setSpeed(float)>
c00228f2:	83 c4 08             	add    esp,0x8
c00228f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00228f9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00228fd:	89 10                	mov    DWORD PTR [eax],edx
c00228ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022903:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022907:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002290a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002290e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022912:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022915:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002291a:	75 23                	jne    c002293f <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002291c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022920:	8b 10                	mov    edx,DWORD PTR [eax]
c0022922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022926:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022929:	0f af c2             	imul   eax,edx
c002292c:	85 c0                	test   eax,eax
c002292e:	79 03                	jns    c0022933 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022930:	83 c0 03             	add    eax,0x3
c0022933:	c1 f8 02             	sar    eax,0x2
c0022936:	05 a0 0f 00 00       	add    eax,0xfa0
c002293b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002293f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022943:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022947:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002294a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002294e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022959:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022964:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022967:	c1 e0 02             	shl    eax,0x2
c002296a:	83 ec 0c             	sub    esp,0xc
c002296d:	50                   	push   eax
c002296e:	e8 13 cf fe ff       	call   c000f886 <malloc>
c0022973:	83 c4 10             	add    esp,0x10
c0022976:	89 c2                	mov    edx,eax
c0022978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002297c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002297f:	83 ec 04             	sub    esp,0x4
c0022982:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022986:	50                   	push   eax
c0022987:	6a 01                	push   0x1
c0022989:	6a 04                	push   0x4
c002298b:	e8 33 62 fe ff       	call   c0008bc3 <src_new>
c0022990:	83 c4 10             	add    esp,0x10
c0022993:	89 c2                	mov    edx,eax
c0022995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022999:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002299c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229a0:	85 c0                	test   eax,eax
c00229a2:	74 10                	je     c00229b4 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00229a4:	83 ec 0c             	sub    esp,0xc
c00229a7:	68 40 d3 02 c0       	push   0xc002d340
c00229ac:	e8 54 7e ff ff       	call   c001a805 <Krnl::panic(char const*)>
c00229b1:	83 c4 10             	add    esp,0x10
c00229b4:	a0 20 31 03 c0       	mov    al,ds:0xc0033120
c00229b9:	83 f0 01             	xor    eax,0x1
c00229bc:	84 c0                	test   al,al
c00229be:	74 57                	je     c0022a17 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00229c0:	a1 60 d3 02 c0       	mov    eax,ds:0xc002d360
c00229c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00229c9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00229d1:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00229d9:	7f 35                	jg     c0022a10 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00229db:	83 ec 0c             	sub    esp,0xc
c00229de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00229e2:	e8 78 50 00 00       	call   c0027a5f <__floatsisf>
c00229e7:	83 c4 10             	add    esp,0x10
c00229ea:	8b 15 60 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d360
c00229f0:	83 ec 08             	sub    esp,0x8
c00229f3:	52                   	push   edx
c00229f4:	50                   	push   eax
c00229f5:	e8 77 4c 00 00       	call   c0027671 <__mulsf3>
c00229fa:	83 c4 10             	add    esp,0x10
c00229fd:	89 c2                	mov    edx,eax
c00229ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a03:	89 14 85 20 2d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd2e0],edx
c0022a0a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022a0e:	eb c1                	jmp    c00229d1 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022a10:	c6 05 20 31 03 c0 01 	mov    BYTE PTR ds:0xc0033120,0x1
c0022a17:	90                   	nop
c0022a18:	83 c4 1c             	add    esp,0x1c
c0022a1b:	c3                   	ret    

c0022a1c <SoundChannel::play()>:
c0022a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a20:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022a24:	c3                   	ret    
c0022a25:	90                   	nop

c0022a26 <SoundChannel::paused()>:
c0022a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a2a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022a2d:	c3                   	ret    

c0022a2e <SoundChannel::getSampleRate()>:
c0022a2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a32:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a34:	c3                   	ret    
c0022a35:	90                   	nop

c0022a36 <SoundChannel::getBits()>:
c0022a36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a3d:	c3                   	ret    

c0022a3e <SoundChannel::getBufferUsed()>:
c0022a3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a42:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022a45:	c3                   	ret    

c0022a46 <SoundChannel::getBufferSize()>:
c0022a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a4a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022a4d:	c3                   	ret    

c0022a4e <SoundChannel::unbuffer(float*, int, int)>:
c0022a4e:	56                   	push   esi
c0022a4f:	53                   	push   ebx
c0022a50:	83 ec 40             	sub    esp,0x40
c0022a53:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022a57:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022a5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022a5e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022a61:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022a65:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022a69:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022a6d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022a71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022a75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022a79:	e8 e1 4f 00 00       	call   c0027a5f <__floatsisf>
c0022a7e:	5a                   	pop    edx
c0022a7f:	89 c6                	mov    esi,eax
c0022a81:	ff 33                	push   DWORD PTR [ebx]
c0022a83:	e8 d7 4f 00 00       	call   c0027a5f <__floatsisf>
c0022a88:	59                   	pop    ecx
c0022a89:	5a                   	pop    edx
c0022a8a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022a8d:	50                   	push   eax
c0022a8e:	e8 de 4b 00 00       	call   c0027671 <__mulsf3>
c0022a93:	59                   	pop    ecx
c0022a94:	5a                   	pop    edx
c0022a95:	50                   	push   eax
c0022a96:	56                   	push   esi
c0022a97:	e8 98 4d 00 00       	call   c0027834 <__divsf3>
c0022a9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0022a9f:	e8 8b 62 00 00       	call   c0028d2f <__extendsfdf2>
c0022aa4:	59                   	pop    ecx
c0022aa5:	5e                   	pop    esi
c0022aa6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022aaa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022aae:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022aba:	50                   	push   eax
c0022abb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022abe:	e8 f5 5c fe ff       	call   c00087b8 <src_process>
c0022ac3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022ac7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022aca:	83 c4 0c             	add    esp,0xc
c0022acd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022ad0:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022ad3:	29 d0                	sub    eax,edx
c0022ad5:	c1 e0 02             	shl    eax,0x2
c0022ad8:	50                   	push   eax
c0022ad9:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022adc:	50                   	push   eax
c0022add:	51                   	push   ecx
c0022ade:	e8 bd db fd ff       	call   c00006a0 <memmove>
c0022ae3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022ae7:	83 c4 44             	add    esp,0x44
c0022aea:	5b                   	pop    ebx
c0022aeb:	5e                   	pop    esi
c0022aec:	c3                   	ret    
c0022aed:	90                   	nop

c0022aee <SoundChannel::buffer8(unsigned char*, int)>:
c0022aee:	55                   	push   ebp
c0022aef:	57                   	push   edi
c0022af0:	56                   	push   esi
c0022af1:	53                   	push   ebx
c0022af2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022af6:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022afa:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022afd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022b01:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022b04:	74 7a                	je     c0022b80 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022b06:	85 ff                	test   edi,edi
c0022b08:	7e 76                	jle    c0022b80 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022b0a:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022b0e:	8d 70 01             	lea    esi,[eax+0x1]
c0022b11:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022b14:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022b17:	8b 1c 9d 20 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd2e0]
c0022b1e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022b21:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022b24:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022b27:	74 5e                	je     c0022b87 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022b29:	83 ff 01             	cmp    edi,0x1
c0022b2c:	74 4b                	je     c0022b79 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022b2e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022b32:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022b35:	8d 70 01             	lea    esi,[eax+0x1]
c0022b38:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022b3b:	8b 1c 9d 20 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd2e0]
c0022b42:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022b45:	b8 02 00 00 00       	mov    eax,0x2
c0022b4a:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022b4d:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022b50:	75 23                	jne    c0022b75 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022b52:	eb 27                	jmp    c0022b7b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022b54:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022b59:	8d 71 01             	lea    esi,[ecx+0x1]
c0022b5c:	40                   	inc    eax
c0022b5d:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022b60:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022b63:	8b 1c 9d 20 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd2e0]
c0022b6a:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022b6d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022b70:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022b73:	74 06                	je     c0022b7b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022b75:	39 c7                	cmp    edi,eax
c0022b77:	75 db                	jne    c0022b54 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022b79:	89 f8                	mov    eax,edi
c0022b7b:	5b                   	pop    ebx
c0022b7c:	5e                   	pop    esi
c0022b7d:	5f                   	pop    edi
c0022b7e:	5d                   	pop    ebp
c0022b7f:	c3                   	ret    
c0022b80:	5b                   	pop    ebx
c0022b81:	31 c0                	xor    eax,eax
c0022b83:	5e                   	pop    esi
c0022b84:	5f                   	pop    edi
c0022b85:	5d                   	pop    ebp
c0022b86:	c3                   	ret    
c0022b87:	b8 01 00 00 00       	mov    eax,0x1
c0022b8c:	eb ed                	jmp    c0022b7b <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022b8e <SoundDevice::SoundDevice(char const*)>:
c0022b8e:	83 ec 1c             	sub    esp,0x1c
c0022b91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b95:	83 ec 08             	sub    esp,0x8
c0022b98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022b9c:	50                   	push   eax
c0022b9d:	e8 c8 18 ff ff       	call   c001446a <Device::Device(char const*)>
c0022ba2:	83 c4 10             	add    esp,0x10
c0022ba5:	ba 6c d3 02 c0       	mov    edx,0xc002d36c
c0022baa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bae:	89 10                	mov    DWORD PTR [eax],edx
c0022bb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bb4:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bc2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022bcc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022bd4:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022bd9:	7f 19                	jg     c0022bf4 <SoundDevice::SoundDevice(char const*)+0x66>
c0022bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bdf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022be3:	83 c2 54             	add    edx,0x54
c0022be6:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022bee:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022bf2:	eb e0                	jmp    c0022bd4 <SoundDevice::SoundDevice(char const*)+0x46>
c0022bf4:	90                   	nop
c0022bf5:	83 c4 1c             	add    esp,0x1c
c0022bf8:	c3                   	ret    
c0022bf9:	90                   	nop

c0022bfa <SoundDevice::~SoundDevice()>:
c0022bfa:	53                   	push   ebx
c0022bfb:	83 ec 18             	sub    esp,0x18
c0022bfe:	ba 6c d3 02 c0       	mov    edx,0xc002d36c
c0022c03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c07:	89 10                	mov    DWORD PTR [eax],edx
c0022c09:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c11:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022c16:	7f 46                	jg     c0022c5e <SoundDevice::~SoundDevice()+0x64>
c0022c18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022c20:	83 c2 54             	add    edx,0x54
c0022c23:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022c27:	85 c0                	test   eax,eax
c0022c29:	74 2d                	je     c0022c58 <SoundDevice::~SoundDevice()+0x5e>
c0022c2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022c33:	83 c2 54             	add    edx,0x54
c0022c36:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022c3a:	85 db                	test   ebx,ebx
c0022c3c:	74 1a                	je     c0022c58 <SoundDevice::~SoundDevice()+0x5e>
c0022c3e:	83 ec 0c             	sub    esp,0xc
c0022c41:	53                   	push   ebx
c0022c42:	e8 21 fc ff ff       	call   c0022868 <SoundChannel::~SoundChannel()>
c0022c47:	83 c4 10             	add    esp,0x10
c0022c4a:	83 ec 08             	sub    esp,0x8
c0022c4d:	6a 2c                	push   0x2c
c0022c4f:	53                   	push   ebx
c0022c50:	e8 10 01 ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0022c55:	83 c4 10             	add    esp,0x10
c0022c58:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022c5c:	eb b3                	jmp    c0022c11 <SoundDevice::~SoundDevice()+0x17>
c0022c5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c62:	83 ec 0c             	sub    esp,0xc
c0022c65:	50                   	push   eax
c0022c66:	e8 e1 14 ff ff       	call   c001414c <Device::~Device()>
c0022c6b:	83 c4 10             	add    esp,0x10
c0022c6e:	90                   	nop
c0022c6f:	83 c4 18             	add    esp,0x18
c0022c72:	5b                   	pop    ebx
c0022c73:	c3                   	ret    

c0022c74 <SoundDevice::~SoundDevice()>:
c0022c74:	83 ec 0c             	sub    esp,0xc
c0022c77:	83 ec 0c             	sub    esp,0xc
c0022c7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c7e:	e8 77 ff ff ff       	call   c0022bfa <SoundDevice::~SoundDevice()>
c0022c83:	83 c4 10             	add    esp,0x10
c0022c86:	83 ec 08             	sub    esp,0x8
c0022c89:	68 e4 01 00 00       	push   0x1e4
c0022c8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c92:	e8 ce 00 ff ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0022c97:	83 c4 10             	add    esp,0x10
c0022c9a:	83 c4 0c             	add    esp,0xc
c0022c9d:	c3                   	ret    

c0022c9e <SoundDevice::getFreeChannelNum()>:
c0022c9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022ca2:	31 c0                	xor    eax,eax
c0022ca4:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022cac:	74 09                	je     c0022cb7 <SoundDevice::getFreeChannelNum()+0x19>
c0022cae:	40                   	inc    eax
c0022caf:	83 f8 20             	cmp    eax,0x20
c0022cb2:	75 f0                	jne    c0022ca4 <SoundDevice::getFreeChannelNum()+0x6>
c0022cb4:	83 c8 ff             	or     eax,0xffffffff
c0022cb7:	c3                   	ret    

c0022cb8 <SoundDevice::addChannel(SoundChannel*)>:
c0022cb8:	56                   	push   esi
c0022cb9:	53                   	push   ebx
c0022cba:	51                   	push   ecx
c0022cbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022cbf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022cc3:	53                   	push   ebx
c0022cc4:	e8 d5 ff ff ff       	call   c0022c9e <SoundDevice::getFreeChannelNum()>
c0022cc9:	5a                   	pop    edx
c0022cca:	83 f8 ff             	cmp    eax,0xffffffff
c0022ccd:	74 51                	je     c0022d20 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022ccf:	85 f6                	test   esi,esi
c0022cd1:	74 4d                	je     c0022d20 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022cd3:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022cda:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022ce1:	75 30                	jne    c0022d13 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022ce3:	83 ec 0c             	sub    esp,0xc
c0022ce6:	56                   	push   esi
c0022ce7:	e8 42 fd ff ff       	call   c0022a2e <SoundChannel::getSampleRate()>
c0022cec:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022cf2:	89 34 24             	mov    DWORD PTR [esp],esi
c0022cf5:	e8 3c fd ff ff       	call   c0022a36 <SoundChannel::getBits()>
c0022cfa:	83 c4 0c             	add    esp,0xc
c0022cfd:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022d03:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022d05:	50                   	push   eax
c0022d06:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022d0c:	53                   	push   ebx
c0022d0d:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022d10:	83 c4 10             	add    esp,0x10
c0022d13:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022d19:	b8 01 00 00 00       	mov    eax,0x1
c0022d1e:	eb 03                	jmp    c0022d23 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022d20:	83 c8 ff             	or     eax,0xffffffff
c0022d23:	5a                   	pop    edx
c0022d24:	5b                   	pop    ebx
c0022d25:	5e                   	pop    esi
c0022d26:	c3                   	ret    
c0022d27:	90                   	nop

c0022d28 <SoundDevice::removeChannel(int)>:
c0022d28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d30:	83 fa 1f             	cmp    edx,0x1f
c0022d33:	77 23                	ja     c0022d58 <SoundDevice::removeChannel(int)+0x30>
c0022d35:	8d 14 90             	lea    edx,[eax+edx*4]
c0022d38:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022d3f:	74 17                	je     c0022d58 <SoundDevice::removeChannel(int)+0x30>
c0022d41:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022d4b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022d51:	75 05                	jne    c0022d58 <SoundDevice::removeChannel(int)+0x30>
c0022d53:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d55:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022d58:	c3                   	ret    
c0022d59:	90                   	nop

c0022d5a <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022d5a:	57                   	push   edi
c0022d5b:	56                   	push   esi
c0022d5c:	53                   	push   ebx
c0022d5d:	31 db                	xor    ebx,ebx
c0022d5f:	83 ec 10             	sub    esp,0x10
c0022d62:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022d66:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022d6a:	0f 8d cb 00 00 00    	jge    c0022e3b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022d70:	83 ec 0c             	sub    esp,0xc
c0022d73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022d77:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022d7a:	e8 b0 5f 00 00       	call   c0028d2f <__extendsfdf2>
c0022d7f:	83 c4 10             	add    esp,0x10
c0022d82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022d86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022d8a:	68 00 00 f0 3f       	push   0x3ff00000
c0022d8f:	6a 00                	push   0x0
c0022d91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d99:	e8 1d 4f 00 00       	call   c0027cbb <__adddf3>
c0022d9e:	83 c4 10             	add    esp,0x10
c0022da1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022da5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022da9:	68 00 00 e0 3f       	push   0x3fe00000
c0022dae:	6a 00                	push   0x0
c0022db0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022db4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022db8:	e8 7b 55 00 00       	call   c0028338 <__muldf3>
c0022dbd:	83 c4 10             	add    esp,0x10
c0022dc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022dc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022dc8:	68 00 00 60 40       	push   0x40600000
c0022dcd:	6a 00                	push   0x0
c0022dcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022dd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022dd7:	e8 5c 55 00 00       	call   c0028338 <__muldf3>
c0022ddc:	59                   	pop    ecx
c0022ddd:	5f                   	pop    edi
c0022dde:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022de2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022de6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022dea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022dee:	e8 18 5e 00 00       	call   c0028c0b <__truncdfsf2>
c0022df3:	5a                   	pop    edx
c0022df4:	89 c7                	mov    edi,eax
c0022df6:	59                   	pop    ecx
c0022df7:	68 00 00 fe 42       	push   0x42fe0000
c0022dfc:	50                   	push   eax
c0022dfd:	e8 b3 4e 00 00       	call   c0027cb5 <__gesf2>
c0022e02:	83 c4 10             	add    esp,0x10
c0022e05:	85 c0                	test   eax,eax
c0022e07:	78 06                	js     c0022e0f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022e09:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022e0d:	eb 26                	jmp    c0022e35 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022e0f:	50                   	push   eax
c0022e10:	50                   	push   eax
c0022e11:	6a 00                	push   0x0
c0022e13:	57                   	push   edi
c0022e14:	e8 a0 4e 00 00       	call   c0027cb9 <__lesf2>
c0022e19:	83 c4 10             	add    esp,0x10
c0022e1c:	85 c0                	test   eax,eax
c0022e1e:	7f 06                	jg     c0022e26 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022e20:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022e24:	eb 0f                	jmp    c0022e35 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022e26:	83 ec 0c             	sub    esp,0xc
c0022e29:	57                   	push   edi
c0022e2a:	e8 9d 5f 00 00       	call   c0028dcc <lrintf>
c0022e2f:	83 c4 10             	add    esp,0x10
c0022e32:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022e35:	43                   	inc    ebx
c0022e36:	e9 2b ff ff ff       	jmp    c0022d66 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022e3b:	83 c4 10             	add    esp,0x10
c0022e3e:	5b                   	pop    ebx
c0022e3f:	5e                   	pop    esi
c0022e40:	5f                   	pop    edi
c0022e41:	c3                   	ret    

c0022e42 <SoundDevice::getAudio(int, float*, float*)>:
c0022e42:	55                   	push   ebp
c0022e43:	57                   	push   edi
c0022e44:	56                   	push   esi
c0022e45:	53                   	push   ebx
c0022e46:	31 db                	xor    ebx,ebx
c0022e48:	83 ec 20             	sub    esp,0x20
c0022e4b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022e4f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022e53:	c1 e0 02             	shl    eax,0x2
c0022e56:	50                   	push   eax
c0022e57:	6a 00                	push   0x0
c0022e59:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022e5d:	e8 3a d9 fd ff       	call   c000079c <memset>
c0022e62:	83 c4 10             	add    esp,0x10
c0022e65:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022e69:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022e70:	85 c0                	test   eax,eax
c0022e72:	0f 84 d7 00 00 00    	je     c0022f4f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022e78:	83 ec 0c             	sub    esp,0xc
c0022e7b:	50                   	push   eax
c0022e7c:	e8 a5 fb ff ff       	call   c0022a26 <SoundChannel::paused()>
c0022e81:	83 c4 10             	add    esp,0x10
c0022e84:	84 c0                	test   al,al
c0022e86:	0f 85 c3 00 00 00    	jne    c0022f4f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022e8c:	83 ec 0c             	sub    esp,0xc
c0022e8f:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022e96:	e8 19 fa ff ff       	call   c00228b4 <SoundChannel::getVolume()>
c0022e9b:	83 c4 10             	add    esp,0x10
c0022e9e:	85 c0                	test   eax,eax
c0022ea0:	0f 84 a9 00 00 00    	je     c0022f4f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022ea6:	83 ec 0c             	sub    esp,0xc
c0022ea9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022eb0:	e8 ff f9 ff ff       	call   c00228b4 <SoundChannel::getVolume()>
c0022eb5:	83 ec 0c             	sub    esp,0xc
c0022eb8:	50                   	push   eax
c0022eb9:	e8 a1 4b 00 00       	call   c0027a5f <__floatsisf>
c0022ebe:	59                   	pop    ecx
c0022ebf:	5d                   	pop    ebp
c0022ec0:	31 ed                	xor    ebp,ebp
c0022ec2:	68 00 00 c8 42       	push   0x42c80000
c0022ec7:	50                   	push   eax
c0022ec8:	e8 67 49 00 00       	call   c0027834 <__divsf3>
c0022ecd:	83 c4 10             	add    esp,0x10
c0022ed0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022ed4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022ed8:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022ede:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022ee2:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022ee9:	e8 60 fb ff ff       	call   c0022a4e <SoundChannel::unbuffer(float*, int, int)>
c0022eee:	83 c4 20             	add    esp,0x20
c0022ef1:	89 c1                	mov    ecx,eax
c0022ef3:	39 cd                	cmp    ebp,ecx
c0022ef5:	7d 52                	jge    c0022f49 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022ef7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022efb:	50                   	push   eax
c0022efc:	50                   	push   eax
c0022efd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022f01:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022f04:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022f08:	e8 64 47 00 00       	call   c0027671 <__mulsf3>
c0022f0d:	5a                   	pop    edx
c0022f0e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022f12:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022f18:	e8 42 4b 00 00       	call   c0027a5f <__floatsisf>
c0022f1d:	59                   	pop    ecx
c0022f1e:	5a                   	pop    edx
c0022f1f:	50                   	push   eax
c0022f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022f24:	e8 0b 49 00 00       	call   c0027834 <__divsf3>
c0022f29:	59                   	pop    ecx
c0022f2a:	5a                   	pop    edx
c0022f2b:	50                   	push   eax
c0022f2c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022f30:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022f33:	e8 16 44 00 00       	call   c002734e <__addsf3>
c0022f38:	83 c4 10             	add    esp,0x10
c0022f3b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022f3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022f43:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022f46:	45                   	inc    ebp
c0022f47:	eb aa                	jmp    c0022ef3 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022f49:	39 cf                	cmp    edi,ecx
c0022f4b:	7e 02                	jle    c0022f4f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f4d:	89 cf                	mov    edi,ecx
c0022f4f:	43                   	inc    ebx
c0022f50:	83 fb 20             	cmp    ebx,0x20
c0022f53:	0f 85 10 ff ff ff    	jne    c0022e69 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022f59:	83 c4 1c             	add    esp,0x1c
c0022f5c:	89 f8                	mov    eax,edi
c0022f5e:	5b                   	pop    ebx
c0022f5f:	5e                   	pop    esi
c0022f60:	5f                   	pop    edi
c0022f61:	5d                   	pop    ebp
c0022f62:	c3                   	ret    
c0022f63:	90                   	nop

c0022f64 <PCI::open(int, int, void*)>:
c0022f64:	83 ec 18             	sub    esp,0x18
c0022f67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0022f6d:	50                   	push   eax
c0022f6e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022f71:	31 c0                	xor    eax,eax
c0022f73:	83 c4 1c             	add    esp,0x1c
c0022f76:	c3                   	ret    
c0022f77:	90                   	nop

c0022f78 <PCI::close(int, int, void*)>:
c0022f78:	31 c0                	xor    eax,eax
c0022f7a:	c3                   	ret    
c0022f7b:	90                   	nop

c0022f7c <PCI::PCI()>:
c0022f7c:	83 ec 0c             	sub    esp,0xc
c0022f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f83:	83 ec 08             	sub    esp,0x8
c0022f86:	68 9c d3 02 c0       	push   0xc002d39c
c0022f8b:	50                   	push   eax
c0022f8c:	e8 55 0b ff ff       	call   c0013ae6 <Bus::Bus(char const*)>
c0022f91:	83 c4 10             	add    esp,0x10
c0022f94:	ba 24 d4 02 c0       	mov    edx,0xc002d424
c0022f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f9d:	89 10                	mov    DWORD PTR [eax],edx
c0022f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fa3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022fa9:	0f b6 d0             	movzx  edx,al
c0022fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb0:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fbb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022fc1:	0f b6 d0             	movzx  edx,al
c0022fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fc8:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fd1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022fd7:	8d 50 01             	lea    edx,[eax+0x1]
c0022fda:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022fde:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022fe4:	0f b6 d0             	movzx  edx,al
c0022fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022feb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022fef:	83 c9 c0             	or     ecx,0xffffffc0
c0022ff2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022ff6:	90                   	nop
c0022ff7:	83 c4 0c             	add    esp,0xc
c0022ffa:	c3                   	ret    
c0022ffb:	90                   	nop

c0022ffc <PCI::readBAR8(unsigned int, int)>:
c0022ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023000:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023004:	f6 c2 01             	test   dl,0x1
c0023007:	74 07                	je     c0023010 <PCI::readBAR8(unsigned int, int)+0x14>
c0023009:	83 e2 fc             	and    edx,0xfffffffc
c002300c:	01 c2                	add    edx,eax
c002300e:	ec                   	in     al,dx
c002300f:	c3                   	ret    
c0023010:	83 e2 f0             	and    edx,0xfffffff0
c0023013:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0023016:	c3                   	ret    
c0023017:	90                   	nop

c0023018 <PCI::readBAR16(unsigned int, int)>:
c0023018:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002301c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023020:	f6 c2 01             	test   dl,0x1
c0023023:	74 08                	je     c002302d <PCI::readBAR16(unsigned int, int)+0x15>
c0023025:	83 e2 fc             	and    edx,0xfffffffc
c0023028:	01 c2                	add    edx,eax
c002302a:	66 ed                	in     ax,dx
c002302c:	c3                   	ret    
c002302d:	83 e2 f0             	and    edx,0xfffffff0
c0023030:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0023034:	c3                   	ret    
c0023035:	90                   	nop

c0023036 <PCI::readBAR32(unsigned int, int)>:
c0023036:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002303a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002303e:	f6 c2 01             	test   dl,0x1
c0023041:	74 07                	je     c002304a <PCI::readBAR32(unsigned int, int)+0x14>
c0023043:	83 e2 fc             	and    edx,0xfffffffc
c0023046:	01 c2                	add    edx,eax
c0023048:	ed                   	in     eax,dx
c0023049:	c3                   	ret    
c002304a:	83 e2 f0             	and    edx,0xfffffff0
c002304d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0023050:	c3                   	ret    
c0023051:	90                   	nop

c0023052 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0023052:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023056:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002305a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002305e:	f6 c2 01             	test   dl,0x1
c0023061:	74 07                	je     c002306a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0023063:	83 e2 fc             	and    edx,0xfffffffc
c0023066:	01 ca                	add    edx,ecx
c0023068:	ee                   	out    dx,al
c0023069:	c3                   	ret    
c002306a:	83 e2 f0             	and    edx,0xfffffff0
c002306d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0023070:	c3                   	ret    
c0023071:	90                   	nop

c0023072 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0023072:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023076:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002307a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002307e:	f6 c2 01             	test   dl,0x1
c0023081:	74 08                	je     c002308b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0023083:	83 e2 fc             	and    edx,0xfffffffc
c0023086:	01 ca                	add    edx,ecx
c0023088:	66 ef                	out    dx,ax
c002308a:	c3                   	ret    
c002308b:	83 e2 f0             	and    edx,0xfffffff0
c002308e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0023092:	c3                   	ret    
c0023093:	90                   	nop

c0023094 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0023094:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023098:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002309c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00230a0:	f6 c2 01             	test   dl,0x1
c00230a3:	74 07                	je     c00230ac <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00230a5:	83 e2 fc             	and    edx,0xfffffffc
c00230a8:	01 ca                	add    edx,ecx
c00230aa:	ef                   	out    dx,eax
c00230ab:	c3                   	ret    
c00230ac:	83 e2 f0             	and    edx,0xfffffff0
c00230af:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00230b2:	c3                   	ret    
c00230b3:	90                   	nop

c00230b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00230b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00230b8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00230bd:	89 ca                	mov    edx,ecx
c00230bf:	c1 e0 10             	shl    eax,0x10
c00230c2:	81 e2 fc 00 00 00    	and    edx,0xfc
c00230c8:	09 d0                	or     eax,edx
c00230ca:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00230cf:	c1 e2 08             	shl    edx,0x8
c00230d2:	09 d0                	or     eax,edx
c00230d4:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00230d9:	c1 e2 0b             	shl    edx,0xb
c00230dc:	09 d0                	or     eax,edx
c00230de:	ba f8 0c 00 00       	mov    edx,0xcf8
c00230e3:	0d 00 00 00 80       	or     eax,0x80000000
c00230e8:	ef                   	out    dx,eax
c00230e9:	ba fc 0c 00 00       	mov    edx,0xcfc
c00230ee:	ed                   	in     eax,dx
c00230ef:	83 e1 02             	and    ecx,0x2
c00230f2:	0f b6 c9             	movzx  ecx,cl
c00230f5:	c1 e1 03             	shl    ecx,0x3
c00230f8:	d3 e8                	shr    eax,cl
c00230fa:	c3                   	ret    
c00230fb:	90                   	nop

c00230fc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00230fc:	6a 00                	push   0x0
c00230fe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023103:	50                   	push   eax
c0023104:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023109:	50                   	push   eax
c002310a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002310f:	50                   	push   eax
c0023110:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023114:	e8 9b ff ff ff       	call   c00230b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023119:	83 c4 14             	add    esp,0x14
c002311c:	c3                   	ret    
c002311d:	90                   	nop

c002311e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002311e:	6a 0e                	push   0xe
c0023120:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023125:	50                   	push   eax
c0023126:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002312b:	50                   	push   eax
c002312c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023131:	50                   	push   eax
c0023132:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023136:	e8 79 ff ff ff       	call   c00230b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002313b:	83 c4 14             	add    esp,0x14
c002313e:	0f b6 c0             	movzx  eax,al
c0023141:	c3                   	ret    

c0023142 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0023142:	55                   	push   ebp
c0023143:	57                   	push   edi
c0023144:	56                   	push   esi
c0023145:	53                   	push   ebx
c0023146:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002314b:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0023150:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0023155:	6a 0a                	push   0xa
c0023157:	56                   	push   esi
c0023158:	55                   	push   ebp
c0023159:	57                   	push   edi
c002315a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002315e:	e8 51 ff ff ff       	call   c00230b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023163:	6a 0a                	push   0xa
c0023165:	89 c3                	mov    ebx,eax
c0023167:	56                   	push   esi
c0023168:	0f b6 db             	movzx  ebx,bl
c002316b:	55                   	push   ebp
c002316c:	57                   	push   edi
c002316d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023171:	e8 3e ff ff ff       	call   c00230b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023176:	83 c4 28             	add    esp,0x28
c0023179:	25 00 ff 00 00       	and    eax,0xff00
c002317e:	09 d8                	or     eax,ebx
c0023180:	5b                   	pop    ebx
c0023181:	5e                   	pop    esi
c0023182:	5f                   	pop    edi
c0023183:	5d                   	pop    ebp
c0023184:	c3                   	ret    
c0023185:	90                   	nop

c0023186 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0023186:	6a 08                	push   0x8
c0023188:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002318d:	50                   	push   eax
c002318e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023193:	50                   	push   eax
c0023194:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023199:	50                   	push   eax
c002319a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002319e:	e8 11 ff ff ff       	call   c00230b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231a3:	83 c4 14             	add    esp,0x14
c00231a6:	0f b6 c4             	movzx  eax,ah
c00231a9:	c3                   	ret    

c00231aa <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00231aa:	6a 08                	push   0x8
c00231ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231b1:	50                   	push   eax
c00231b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231b7:	50                   	push   eax
c00231b8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231bd:	50                   	push   eax
c00231be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231c2:	e8 ed fe ff ff       	call   c00230b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231c7:	83 c4 14             	add    esp,0x14
c00231ca:	c3                   	ret    
c00231cb:	90                   	nop

c00231cc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00231cc:	6a 3c                	push   0x3c
c00231ce:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231d3:	50                   	push   eax
c00231d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231d9:	50                   	push   eax
c00231da:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231df:	50                   	push   eax
c00231e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231e4:	e8 cb fe ff ff       	call   c00230b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231e9:	83 c4 14             	add    esp,0x14
c00231ec:	c3                   	ret    
c00231ed:	90                   	nop

c00231ee <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00231ee:	6a 18                	push   0x18
c00231f0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231f5:	50                   	push   eax
c00231f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231fb:	50                   	push   eax
c00231fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023201:	50                   	push   eax
c0023202:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023206:	e8 a9 fe ff ff       	call   c00230b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002320b:	83 c4 14             	add    esp,0x14
c002320e:	0f b6 c4             	movzx  eax,ah
c0023211:	c3                   	ret    

c0023212 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023212:	55                   	push   ebp
c0023213:	57                   	push   edi
c0023214:	56                   	push   esi
c0023215:	53                   	push   ebx
c0023216:	50                   	push   eax
c0023217:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002321b:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0023220:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023225:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c002322a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0023231:	8d 43 12             	lea    eax,[ebx+0x12]
c0023234:	83 c3 10             	add    ebx,0x10
c0023237:	0f b6 c0             	movzx  eax,al
c002323a:	0f b6 db             	movzx  ebx,bl
c002323d:	50                   	push   eax
c002323e:	51                   	push   ecx
c002323f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023243:	57                   	push   edi
c0023244:	55                   	push   ebp
c0023245:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0023249:	e8 66 fe ff ff       	call   c00230b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002324e:	53                   	push   ebx
c002324f:	89 c6                	mov    esi,eax
c0023251:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023255:	c1 e6 10             	shl    esi,0x10
c0023258:	51                   	push   ecx
c0023259:	57                   	push   edi
c002325a:	55                   	push   ebp
c002325b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002325f:	e8 50 fe ff ff       	call   c00230b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023264:	83 c4 2c             	add    esp,0x2c
c0023267:	0f b7 c0             	movzx  eax,ax
c002326a:	5b                   	pop    ebx
c002326b:	09 f0                	or     eax,esi
c002326d:	5e                   	pop    esi
c002326e:	5f                   	pop    edi
c002326f:	5d                   	pop    ebp
c0023270:	c3                   	ret    
c0023271:	90                   	nop

c0023272 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0023272:	53                   	push   ebx
c0023273:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023278:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002327d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023281:	c1 e1 10             	shl    ecx,0x10
c0023284:	25 fc 00 00 00       	and    eax,0xfc
c0023289:	09 c1                	or     ecx,eax
c002328b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023290:	c1 e0 08             	shl    eax,0x8
c0023293:	09 c1                	or     ecx,eax
c0023295:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002329a:	c1 e0 0b             	shl    eax,0xb
c002329d:	09 c1                	or     ecx,eax
c002329f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00232a5:	89 c8                	mov    eax,ecx
c00232a7:	ef                   	out    dx,eax
c00232a8:	ba fc 0c 00 00       	mov    edx,0xcfc
c00232ad:	ed                   	in     eax,dx
c00232ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00232b3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00232b8:	74 0a                	je     c00232c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c00232ba:	0f b7 d8             	movzx  ebx,ax
c00232bd:	89 d0                	mov    eax,edx
c00232bf:	c1 e0 10             	shl    eax,0x10
c00232c2:	eb 05                	jmp    c00232c9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c00232c4:	66 31 c0             	xor    ax,ax
c00232c7:	89 d3                	mov    ebx,edx
c00232c9:	09 c3                	or     ebx,eax
c00232cb:	ba f8 0c 00 00       	mov    edx,0xcf8
c00232d0:	89 c8                	mov    eax,ecx
c00232d2:	ef                   	out    dx,eax
c00232d3:	ba fc 0c 00 00       	mov    edx,0xcfc
c00232d8:	89 d8                	mov    eax,ebx
c00232da:	ef                   	out    dx,eax
c00232db:	5b                   	pop    ebx
c00232dc:	c3                   	ret    
c00232dd:	90                   	nop

c00232de <PCI::pciDetailsToFilepath(PCIDeviceInfo)>:
c00232de:	31 c0                	xor    eax,eax
c00232e0:	c3                   	ret    
c00232e1:	90                   	nop

c00232e2 <PCI::checkBus(unsigned char)>:
c00232e2:	56                   	push   esi
c00232e3:	53                   	push   ebx
c00232e4:	31 db                	xor    ebx,ebx
c00232e6:	51                   	push   ecx
c00232e7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00232ec:	52                   	push   edx
c00232ed:	53                   	push   ebx
c00232ee:	43                   	inc    ebx
c00232ef:	56                   	push   esi
c00232f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232f4:	e8 41 03 00 00       	call   c002363a <PCI::checkDevice(unsigned char, unsigned char)>
c00232f9:	83 c4 10             	add    esp,0x10
c00232fc:	83 fb 20             	cmp    ebx,0x20
c00232ff:	75 eb                	jne    c00232ec <PCI::checkBus(unsigned char)+0xa>
c0023301:	58                   	pop    eax
c0023302:	5b                   	pop    ebx
c0023303:	5e                   	pop    esi
c0023304:	c3                   	ret    
c0023305:	90                   	nop

c0023306 <PCI::foundDevice(PCIDeviceInfo)>:
c0023306:	55                   	push   ebp
c0023307:	57                   	push   edi
c0023308:	56                   	push   esi
c0023309:	53                   	push   ebx
c002330a:	83 ec 1c             	sub    esp,0x1c
c002330d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023311:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0023317:	0f 84 68 01 00 00    	je     c0023485 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c002331d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023321:	66 81 f9 06 04       	cmp    cx,0x406
c0023326:	75 2c                	jne    c0023354 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023328:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002332d:	50                   	push   eax
c002332e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023333:	50                   	push   eax
c0023334:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023339:	50                   	push   eax
c002333a:	56                   	push   esi
c002333b:	e8 ae fe ff ff       	call   c00231ee <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023340:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023344:	0f b6 c0             	movzx  eax,al
c0023347:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002334b:	83 c4 2c             	add    esp,0x2c
c002334e:	5b                   	pop    ebx
c002334f:	5e                   	pop    esi
c0023350:	5f                   	pop    edi
c0023351:	5d                   	pop    ebp
c0023352:	eb 8e                	jmp    c00232e2 <PCI::checkBus(unsigned char)>
c0023354:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023358:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c002335e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023362:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0023366:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c002336a:	88 d3                	mov    bl,dl
c002336c:	85 c0                	test   eax,eax
c002336e:	74 33                	je     c00233a3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0023370:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023373:	85 d2                	test   edx,edx
c0023375:	74 28                	je     c002339f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023377:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002337d:	31 ef                	xor    edi,ebp
c002337f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0023385:	75 18                	jne    c002339f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023387:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002338b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0023391:	75 0c                	jne    c002339f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023393:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0023399:	0f 84 e6 00 00 00    	je     c0023485 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c002339f:	8b 00                	mov    eax,DWORD PTR [eax]
c00233a1:	eb c9                	jmp    c002336c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00233a3:	66 81 f9 01 06       	cmp    cx,0x601
c00233a8:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00233ac:	75 19                	jne    c00233c7 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00233ae:	83 ec 0c             	sub    esp,0xc
c00233b1:	68 64 01 00 00       	push   0x164
c00233b6:	e8 cb c4 fe ff       	call   c000f886 <malloc>
c00233bb:	89 c5                	mov    ebp,eax
c00233bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00233c0:	e8 ab 0f 00 00       	call   c0024370 <SATABus::SATABus()>
c00233c5:	eb 1e                	jmp    c00233e5 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00233c7:	66 81 f9 01 01       	cmp    cx,0x101
c00233cc:	75 60                	jne    c002342e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00233ce:	83 ec 0c             	sub    esp,0xc
c00233d1:	68 70 02 00 00       	push   0x270
c00233d6:	e8 ab c4 fe ff       	call   c000f886 <malloc>
c00233db:	89 c5                	mov    ebp,eax
c00233dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00233e0:	e8 19 03 00 00       	call   c00236fe <IDE::IDE()>
c00233e5:	58                   	pop    eax
c00233e6:	5a                   	pop    edx
c00233e7:	55                   	push   ebp
c00233e8:	56                   	push   esi
c00233e9:	e8 8c 0e ff ff       	call   c001427a <Device::addChild(Device*)>
c00233ee:	83 ec 1c             	sub    esp,0x1c
c00233f1:	b9 09 00 00 00       	mov    ecx,0x9
c00233f6:	fc                   	cld    
c00233f7:	89 e7                	mov    edi,esp
c00233f9:	89 de                	mov    esi,ebx
c00233fb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00233fd:	55                   	push   ebp
c00233fe:	e8 81 0d ff ff       	call   c0014184 <Device::preOpenPCI(PCIDeviceInfo)>
c0023403:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023406:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002340a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023412:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002341a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023422:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023425:	83 c4 4c             	add    esp,0x4c
c0023428:	5b                   	pop    ebx
c0023429:	5e                   	pop    esi
c002342a:	5f                   	pop    edi
c002342b:	5d                   	pop    ebp
c002342c:	ff e0                	jmp    eax
c002342e:	50                   	push   eax
c002342f:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c0023434:	50                   	push   eax
c0023435:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c002343a:	50                   	push   eax
c002343b:	68 a4 d3 02 c0       	push   0xc002d3a4
c0023440:	e8 00 fa fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0023445:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c002344c:	e8 35 c4 fe ff       	call   c000f886 <malloc>
c0023451:	5a                   	pop    edx
c0023452:	89 c5                	mov    ebp,eax
c0023454:	59                   	pop    ecx
c0023455:	68 c0 d3 02 c0       	push   0xc002d3c0
c002345a:	50                   	push   eax
c002345b:	e8 10 11 ff ff       	call   c0014570 <DriverlessDevice::DriverlessDevice(char const*)>
c0023460:	5f                   	pop    edi
c0023461:	58                   	pop    eax
c0023462:	55                   	push   ebp
c0023463:	56                   	push   esi
c0023464:	e8 11 0e ff ff       	call   c001427a <Device::addChild(Device*)>
c0023469:	b9 09 00 00 00       	mov    ecx,0x9
c002346e:	fc                   	cld    
c002346f:	89 df                	mov    edi,ebx
c0023471:	89 de                	mov    esi,ebx
c0023473:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023475:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023479:	83 c4 2c             	add    esp,0x2c
c002347c:	5b                   	pop    ebx
c002347d:	5e                   	pop    esi
c002347e:	5f                   	pop    edi
c002347f:	5d                   	pop    ebp
c0023480:	e9 ff 0c ff ff       	jmp    c0014184 <Device::preOpenPCI(PCIDeviceInfo)>
c0023485:	83 c4 1c             	add    esp,0x1c
c0023488:	5b                   	pop    ebx
c0023489:	5e                   	pop    esi
c002348a:	5f                   	pop    edi
c002348b:	5d                   	pop    ebp
c002348c:	c3                   	ret    
c002348d:	90                   	nop

c002348e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002348e:	55                   	push   ebp
c002348f:	57                   	push   edi
c0023490:	56                   	push   esi
c0023491:	53                   	push   ebx
c0023492:	83 ec 5c             	sub    esp,0x5c
c0023495:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0023499:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002349d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00234a1:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c00234a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00234aa:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00234ae:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c00234b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00234b7:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00234bc:	6a 0c                	push   0xc
c00234be:	55                   	push   ebp
c00234bf:	53                   	push   ebx
c00234c0:	57                   	push   edi
c00234c1:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c00234c8:	e8 e7 fb ff ff       	call   c00230b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234cd:	55                   	push   ebp
c00234ce:	53                   	push   ebx
c00234cf:	57                   	push   edi
c00234d0:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00234d7:	e8 66 fc ff ff       	call   c0023142 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00234dc:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00234e1:	83 c4 24             	add    esp,0x24
c00234e4:	55                   	push   ebp
c00234e5:	53                   	push   ebx
c00234e6:	57                   	push   edi
c00234e7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00234eb:	e8 dc fc ff ff       	call   c00231cc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00234f0:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00234f4:	6a 3c                	push   0x3c
c00234f6:	55                   	push   ebp
c00234f7:	53                   	push   ebx
c00234f8:	57                   	push   edi
c00234f9:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0023500:	e8 af fb ff ff       	call   c00230b4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023505:	0f b6 c4             	movzx  eax,ah
c0023508:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002350c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023510:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0023514:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0023519:	83 c4 24             	add    esp,0x24
c002351c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023522:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023529:	74 6c                	je     c0023597 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002352b:	31 f6                	xor    esi,esi
c002352d:	8b 15 c8 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002edc8
c0023533:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023539:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c002353f:	7e 56                	jle    c0023597 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0023541:	8d 14 f2             	lea    edx,[edx+esi*8]
c0023544:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c002354b:	39 cb                	cmp    ebx,ecx
c002354d:	75 45                	jne    c0023594 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c002354f:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023556:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c002355a:	75 38                	jne    c0023594 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c002355c:	83 ec 0c             	sub    esp,0xc
c002355f:	68 da d3 02 c0       	push   0xc002d3da
c0023564:	e8 dc f8 fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0023569:	8b 15 c8 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002edc8
c002356f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023575:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c002357d:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0023581:	52                   	push   edx
c0023582:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023586:	53                   	push   ebx
c0023587:	68 ff d3 02 c0       	push   0xc002d3ff
c002358c:	e8 b4 f8 fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0023591:	83 c4 20             	add    esp,0x20
c0023594:	46                   	inc    esi
c0023595:	eb 96                	jmp    c002352d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0023597:	31 d2                	xor    edx,edx
c0023599:	83 ec 0c             	sub    esp,0xc
c002359c:	55                   	push   ebp
c002359d:	53                   	push   ebx
c002359e:	57                   	push   edi
c002359f:	52                   	push   edx
c00235a0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00235a4:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00235ab:	e8 62 fc ff ff       	call   c0023212 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00235b0:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c00235b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00235b8:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00235bc:	42                   	inc    edx
c00235bd:	83 c4 20             	add    esp,0x20
c00235c0:	83 fa 06             	cmp    edx,0x6
c00235c3:	75 d4                	jne    c0023599 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c00235c5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00235c9:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c00235cd:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00235d1:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00235d5:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00235d9:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00235dd:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00235e2:	86 e0                	xchg   al,ah
c00235e4:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00235e9:	55                   	push   ebp
c00235ea:	53                   	push   ebx
c00235eb:	57                   	push   edi
c00235ec:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00235f0:	e8 91 fb ff ff       	call   c0023186 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00235f5:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00235f9:	55                   	push   ebp
c00235fa:	53                   	push   ebx
c00235fb:	57                   	push   edi
c00235fc:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023603:	e8 f4 fa ff ff       	call   c00230fc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023608:	83 ec 0c             	sub    esp,0xc
c002360b:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0023610:	b9 09 00 00 00       	mov    ecx,0x9
c0023615:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0023619:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c002361d:	fc                   	cld    
c002361e:	89 e7                	mov    edi,esp
c0023620:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023622:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0023629:	e8 d8 fc ff ff       	call   c0023306 <PCI::foundDevice(PCIDeviceInfo)>
c002362e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023634:	5b                   	pop    ebx
c0023635:	5e                   	pop    esi
c0023636:	5f                   	pop    edi
c0023637:	5d                   	pop    ebp
c0023638:	c3                   	ret    
c0023639:	90                   	nop

c002363a <PCI::checkDevice(unsigned char, unsigned char)>:
c002363a:	55                   	push   ebp
c002363b:	57                   	push   edi
c002363c:	56                   	push   esi
c002363d:	53                   	push   ebx
c002363e:	83 ec 0c             	sub    esp,0xc
c0023641:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023645:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002364a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002364f:	6a 00                	push   0x0
c0023651:	56                   	push   esi
c0023652:	57                   	push   edi
c0023653:	55                   	push   ebp
c0023654:	e8 a3 fa ff ff       	call   c00230fc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023659:	6a 00                	push   0x0
c002365b:	56                   	push   esi
c002365c:	57                   	push   edi
c002365d:	55                   	push   ebp
c002365e:	e8 2b fe ff ff       	call   c002348e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023663:	83 c4 20             	add    esp,0x20
c0023666:	6a 00                	push   0x0
c0023668:	56                   	push   esi
c0023669:	57                   	push   edi
c002366a:	55                   	push   ebp
c002366b:	e8 ae fa ff ff       	call   c002311e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023670:	83 c4 10             	add    esp,0x10
c0023673:	84 c0                	test   al,al
c0023675:	79 27                	jns    c002369e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023677:	bb 01 00 00 00       	mov    ebx,0x1
c002367c:	53                   	push   ebx
c002367d:	56                   	push   esi
c002367e:	57                   	push   edi
c002367f:	55                   	push   ebp
c0023680:	e8 77 fa ff ff       	call   c00230fc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023685:	83 c4 10             	add    esp,0x10
c0023688:	66 40                	inc    ax
c002368a:	74 0c                	je     c0023698 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002368c:	53                   	push   ebx
c002368d:	56                   	push   esi
c002368e:	57                   	push   edi
c002368f:	55                   	push   ebp
c0023690:	e8 f9 fd ff ff       	call   c002348e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023695:	83 c4 10             	add    esp,0x10
c0023698:	43                   	inc    ebx
c0023699:	83 fb 08             	cmp    ebx,0x8
c002369c:	75 de                	jne    c002367c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002369e:	83 c4 0c             	add    esp,0xc
c00236a1:	5b                   	pop    ebx
c00236a2:	5e                   	pop    esi
c00236a3:	5f                   	pop    edi
c00236a4:	5d                   	pop    ebp
c00236a5:	c3                   	ret    

c00236a6 <PCI::detect()>:
c00236a6:	56                   	push   esi
c00236a7:	53                   	push   ebx
c00236a8:	53                   	push   ebx
c00236a9:	31 db                	xor    ebx,ebx
c00236ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00236af:	6a 00                	push   0x0
c00236b1:	6a 00                	push   0x0
c00236b3:	6a 00                	push   0x0
c00236b5:	56                   	push   esi
c00236b6:	e8 63 fa ff ff       	call   c002311e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00236bb:	83 c4 10             	add    esp,0x10
c00236be:	a8 80                	test   al,0x80
c00236c0:	75 21                	jne    c00236e3 <PCI::detect()+0x3d>
c00236c2:	51                   	push   ecx
c00236c3:	51                   	push   ecx
c00236c4:	6a 00                	push   0x0
c00236c6:	56                   	push   esi
c00236c7:	e8 16 fc ff ff       	call   c00232e2 <PCI::checkBus(unsigned char)>
c00236cc:	83 c4 10             	add    esp,0x10
c00236cf:	eb 24                	jmp    c00236f5 <PCI::detect()+0x4f>
c00236d1:	52                   	push   edx
c00236d2:	52                   	push   edx
c00236d3:	53                   	push   ebx
c00236d4:	43                   	inc    ebx
c00236d5:	56                   	push   esi
c00236d6:	e8 07 fc ff ff       	call   c00232e2 <PCI::checkBus(unsigned char)>
c00236db:	83 c4 10             	add    esp,0x10
c00236de:	83 fb 08             	cmp    ebx,0x8
c00236e1:	74 12                	je     c00236f5 <PCI::detect()+0x4f>
c00236e3:	53                   	push   ebx
c00236e4:	6a 00                	push   0x0
c00236e6:	6a 00                	push   0x0
c00236e8:	56                   	push   esi
c00236e9:	e8 0e fa ff ff       	call   c00230fc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00236ee:	83 c4 10             	add    esp,0x10
c00236f1:	66 40                	inc    ax
c00236f3:	74 dc                	je     c00236d1 <PCI::detect()+0x2b>
c00236f5:	58                   	pop    eax
c00236f6:	5b                   	pop    ebx
c00236f7:	5e                   	pop    esi
c00236f8:	c3                   	ret    
c00236f9:	90                   	nop

c00236fa <IDE::close(int, int, void*)>:
c00236fa:	83 c8 ff             	or     eax,0xffffffff
c00236fd:	c3                   	ret    

c00236fe <IDE::IDE()>:
c00236fe:	83 ec 0c             	sub    esp,0xc
c0023701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023705:	83 ec 08             	sub    esp,0x8
c0023708:	68 48 d4 02 c0       	push   0xc002d448
c002370d:	50                   	push   eax
c002370e:	e8 01 0f ff ff       	call   c0014614 <HardDiskController::HardDiskController(char const*)>
c0023713:	83 c4 10             	add    esp,0x10
c0023716:	ba 88 d6 02 c0       	mov    edx,0xc002d688
c002371b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002371f:	89 10                	mov    DWORD PTR [eax],edx
c0023721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023725:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002372c:	90                   	nop
c002372d:	83 c4 0c             	add    esp,0xc
c0023730:	c3                   	ret    
c0023731:	90                   	nop

c0023732 <IDE::prepareInterrupt(unsigned char)>:
c0023732:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023737:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002373b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023743:	c3                   	ret    

c0023744 <selectDrive(unsigned char, unsigned char)>:
c0023744:	c3                   	ret    
c0023745:	90                   	nop

c0023746 <IDE::getBase(unsigned char)>:
c0023746:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002374b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002374f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023757:	c3                   	ret    

c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023758:	55                   	push   ebp
c0023759:	57                   	push   edi
c002375a:	56                   	push   esi
c002375b:	53                   	push   ebx
c002375c:	83 ec 1c             	sub    esp,0x1c
c002375f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023763:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023767:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002376a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002376e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023772:	80 f9 03             	cmp    cl,0x3
c0023775:	77 51                	ja     c00237c8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023777:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002377b:	0f b6 f2             	movzx  esi,dl
c002377e:	0f b6 db             	movzx  ebx,bl
c0023781:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023784:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023788:	83 ca 80             	or     edx,0xffffff80
c002378b:	0f b6 d2             	movzx  edx,dl
c002378e:	52                   	push   edx
c002378f:	6a 0c                	push   0xc
c0023791:	56                   	push   esi
c0023792:	57                   	push   edi
c0023793:	e8 c0 ff ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023798:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002379d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00237a1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00237a5:	ee                   	out    dx,al
c00237a6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00237ab:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00237af:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00237b3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00237b7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00237bf:	83 c4 2c             	add    esp,0x2c
c00237c2:	5b                   	pop    ebx
c00237c3:	5e                   	pop    esi
c00237c4:	5f                   	pop    edi
c00237c5:	5d                   	pop    ebp
c00237c6:	eb 90                	jmp    c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237c8:	80 fb 07             	cmp    bl,0x7
c00237cb:	77 12                	ja     c00237df <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00237cd:	0f b6 d2             	movzx  edx,dl
c00237d0:	0f b6 db             	movzx  ebx,bl
c00237d3:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00237db:	89 da                	mov    edx,ebx
c00237dd:	eb 2f                	jmp    c002380e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00237df:	80 fb 0d             	cmp    bl,0xd
c00237e2:	77 13                	ja     c00237f7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00237e4:	0f b6 d2             	movzx  edx,dl
c00237e7:	0f b6 db             	movzx  ebx,bl
c00237ea:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00237f1:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00237f5:	eb 17                	jmp    c002380e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00237f7:	80 fb 15             	cmp    bl,0x15
c00237fa:	77 13                	ja     c002380f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00237fc:	0f b6 d2             	movzx  edx,dl
c00237ff:	0f b6 db             	movzx  ebx,bl
c0023802:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002380a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002380e:	ee                   	out    dx,al
c002380f:	83 c4 1c             	add    esp,0x1c
c0023812:	5b                   	pop    ebx
c0023813:	5e                   	pop    esi
c0023814:	5f                   	pop    edi
c0023815:	5d                   	pop    ebp
c0023816:	c3                   	ret    
c0023817:	90                   	nop

c0023818 <IDE::read(unsigned char, unsigned char)>:
c0023818:	55                   	push   ebp
c0023819:	57                   	push   edi
c002381a:	56                   	push   esi
c002381b:	53                   	push   ebx
c002381c:	83 ec 1c             	sub    esp,0x1c
c002381f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023823:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023827:	8d 43 f8             	lea    eax,[ebx-0x8]
c002382a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002382e:	3c 03                	cmp    al,0x3
c0023830:	77 43                	ja     c0023875 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023832:	0f b6 f2             	movzx  esi,dl
c0023835:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023838:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002383c:	83 c8 80             	or     eax,0xffffff80
c002383f:	0f b6 c0             	movzx  eax,al
c0023842:	50                   	push   eax
c0023843:	6a 0c                	push   0xc
c0023845:	56                   	push   esi
c0023846:	57                   	push   edi
c0023847:	e8 0c ff ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002384c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023851:	0f b6 c3             	movzx  eax,bl
c0023854:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023858:	ec                   	in     al,dx
c0023859:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002385d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023862:	52                   	push   edx
c0023863:	6a 0c                	push   0xc
c0023865:	56                   	push   esi
c0023866:	57                   	push   edi
c0023867:	e8 ec fe ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002386c:	83 c4 20             	add    esp,0x20
c002386f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023873:	eb 49                	jmp    c00238be <IDE::read(unsigned char, unsigned char)+0xa6>
c0023875:	80 fb 07             	cmp    bl,0x7
c0023878:	77 12                	ja     c002388c <IDE::read(unsigned char, unsigned char)+0x74>
c002387a:	0f b6 d2             	movzx  edx,dl
c002387d:	0f b6 c3             	movzx  eax,bl
c0023880:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023888:	89 c2                	mov    edx,eax
c002388a:	eb 31                	jmp    c00238bd <IDE::read(unsigned char, unsigned char)+0xa5>
c002388c:	80 fb 0d             	cmp    bl,0xd
c002388f:	77 13                	ja     c00238a4 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023891:	0f b6 d2             	movzx  edx,dl
c0023894:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002389b:	0f b6 d3             	movzx  edx,bl
c002389e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00238a2:	eb 19                	jmp    c00238bd <IDE::read(unsigned char, unsigned char)+0xa5>
c00238a4:	31 c0                	xor    eax,eax
c00238a6:	80 fb 15             	cmp    bl,0x15
c00238a9:	77 13                	ja     c00238be <IDE::read(unsigned char, unsigned char)+0xa6>
c00238ab:	0f b6 d2             	movzx  edx,dl
c00238ae:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00238b6:	0f b6 d3             	movzx  edx,bl
c00238b9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00238bd:	ec                   	in     al,dx
c00238be:	83 c4 1c             	add    esp,0x1c
c00238c1:	5b                   	pop    ebx
c00238c2:	5e                   	pop    esi
c00238c3:	5f                   	pop    edi
c00238c4:	5d                   	pop    ebp
c00238c5:	c3                   	ret    

c00238c6 <IDE::waitInterrupt(unsigned char)>:
c00238c6:	55                   	push   ebp
c00238c7:	57                   	push   edi
c00238c8:	56                   	push   esi
c00238c9:	53                   	push   ebx
c00238ca:	31 db                	xor    ebx,ebx
c00238cc:	83 ec 0c             	sub    esp,0xc
c00238cf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00238d3:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00238d8:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00238e0:	89 e8                	mov    eax,ebp
c00238e2:	84 c0                	test   al,al
c00238e4:	75 34                	jne    c002391a <IDE::waitInterrupt(unsigned char)+0x54>
c00238e6:	52                   	push   edx
c00238e7:	6a 0c                	push   0xc
c00238e9:	56                   	push   esi
c00238ea:	57                   	push   edi
c00238eb:	e8 28 ff ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c00238f0:	83 c4 10             	add    esp,0x10
c00238f3:	a8 01                	test   al,0x1
c00238f5:	75 2b                	jne    c0023922 <IDE::waitInterrupt(unsigned char)+0x5c>
c00238f7:	f6 c3 04             	test   bl,0x4
c00238fa:	75 16                	jne    c0023912 <IDE::waitInterrupt(unsigned char)+0x4c>
c00238fc:	83 fb 32             	cmp    ebx,0x32
c00238ff:	7e 11                	jle    c0023912 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023901:	50                   	push   eax
c0023902:	50                   	push   eax
c0023903:	6a 00                	push   0x0
c0023905:	68 80 96 98 00       	push   0x989680
c002390a:	e8 fa ad ff ff       	call   c001e709 <nanoSleep(unsigned long long)>
c002390f:	83 c4 10             	add    esp,0x10
c0023912:	83 fb 3c             	cmp    ebx,0x3c
c0023915:	74 0b                	je     c0023922 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023917:	43                   	inc    ebx
c0023918:	eb be                	jmp    c00238d8 <IDE::waitInterrupt(unsigned char)+0x12>
c002391a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023922:	83 c4 0c             	add    esp,0xc
c0023925:	89 e8                	mov    eax,ebp
c0023927:	5b                   	pop    ebx
c0023928:	5e                   	pop    esi
c0023929:	5f                   	pop    edi
c002392a:	5d                   	pop    ebp
c002392b:	c3                   	ret    

c002392c <ideChannel0IRQHandler(regs*, void*)>:
c002392c:	83 ec 10             	sub    esp,0x10
c002392f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023933:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002393a:	6a 07                	push   0x7
c002393c:	6a 00                	push   0x0
c002393e:	50                   	push   eax
c002393f:	e8 d4 fe ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0023944:	83 c4 1c             	add    esp,0x1c
c0023947:	c3                   	ret    

c0023948 <ideChannel1IRQHandler(regs*, void*)>:
c0023948:	83 ec 10             	sub    esp,0x10
c002394b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002394f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023956:	6a 07                	push   0x7
c0023958:	6a 01                	push   0x1
c002395a:	50                   	push   eax
c002395b:	e8 b8 fe ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0023960:	83 c4 1c             	add    esp,0x1c
c0023963:	c3                   	ret    

c0023964 <IDE::enableIRQs(unsigned char, bool)>:
c0023964:	57                   	push   edi
c0023965:	56                   	push   esi
c0023966:	be 04 00 00 00       	mov    esi,0x4
c002396b:	53                   	push   ebx
c002396c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023971:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023975:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002397a:	0f 94 c0             	sete   al
c002397d:	d1 e0                	shl    eax,1
c002397f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023986:	0f b6 c0             	movzx  eax,al
c0023989:	50                   	push   eax
c002398a:	6a 0c                	push   0xc
c002398c:	57                   	push   edi
c002398d:	53                   	push   ebx
c002398e:	e8 c5 fd ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023993:	83 c4 10             	add    esp,0x10
c0023996:	50                   	push   eax
c0023997:	6a 0c                	push   0xc
c0023999:	57                   	push   edi
c002399a:	53                   	push   ebx
c002399b:	e8 78 fe ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c00239a0:	83 c4 10             	add    esp,0x10
c00239a3:	4e                   	dec    esi
c00239a4:	75 f0                	jne    c0023996 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00239a6:	5b                   	pop    ebx
c00239a7:	5e                   	pop    esi
c00239a8:	5f                   	pop    edi
c00239a9:	c3                   	ret    

c00239aa <IDE::open(int, int, void*)>:
c00239aa:	55                   	push   ebp
c00239ab:	57                   	push   edi
c00239ac:	56                   	push   esi
c00239ad:	53                   	push   ebx
c00239ae:	83 ec 1c             	sub    esp,0x1c
c00239b1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00239b5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00239be:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00239c7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00239ce:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00239d5:	0f 85 b0 02 00 00    	jne    c0023c8b <IDE::open(int, int, void*)+0x2e1>
c00239db:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00239e1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00239e5:	83 e0 7f             	and    eax,0x7f
c00239e8:	3c 05                	cmp    al,0x5
c00239ea:	74 04                	je     c00239f0 <IDE::open(int, int, void*)+0x46>
c00239ec:	3c 0f                	cmp    al,0xf
c00239ee:	75 32                	jne    c0023a22 <IDE::open(int, int, void*)+0x78>
c00239f0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00239f6:	83 e0 fc             	and    eax,0xfffffffc
c00239f9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023a00:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023a06:	83 e0 fc             	and    eax,0xfffffffc
c0023a09:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023a10:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023a16:	83 e0 fc             	and    eax,0xfffffffc
c0023a19:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023a20:	eb 14                	jmp    c0023a36 <IDE::open(int, int, void*)+0x8c>
c0023a22:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023a2c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023a36:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023a3d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023a44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023a48:	89 c6                	mov    esi,eax
c0023a4a:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023a4f:	c1 e6 10             	shl    esi,0x10
c0023a52:	89 e8                	mov    eax,ebp
c0023a54:	89 fa                	mov    edx,edi
c0023a56:	c1 e0 0b             	shl    eax,0xb
c0023a59:	09 f0                	or     eax,esi
c0023a5b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023a62:	c1 e6 08             	shl    esi,0x8
c0023a65:	09 c6                	or     esi,eax
c0023a67:	89 f0                	mov    eax,esi
c0023a69:	0d 08 00 00 80       	or     eax,0x80000008
c0023a6e:	ef                   	out    dx,eax
c0023a6f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023a74:	89 ca                	mov    edx,ecx
c0023a76:	ed                   	in     eax,dx
c0023a77:	c1 e8 10             	shr    eax,0x10
c0023a7a:	3d ff ff 00 00       	cmp    eax,0xffff
c0023a7f:	0f 84 f5 00 00 00    	je     c0023b7a <IDE::open(int, int, void*)+0x1d0>
c0023a85:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023a8b:	89 fa                	mov    edx,edi
c0023a8d:	89 f0                	mov    eax,esi
c0023a8f:	ef                   	out    dx,eax
c0023a90:	b0 fe                	mov    al,0xfe
c0023a92:	89 ca                	mov    edx,ecx
c0023a94:	ee                   	out    dx,al
c0023a95:	89 f0                	mov    eax,esi
c0023a97:	89 fa                	mov    edx,edi
c0023a99:	ef                   	out    dx,eax
c0023a9a:	89 ca                	mov    edx,ecx
c0023a9c:	ed                   	in     eax,dx
c0023a9d:	3c fe                	cmp    al,0xfe
c0023a9f:	0f 85 a9 00 00 00    	jne    c0023b4e <IDE::open(int, int, void*)+0x1a4>
c0023aa5:	8b 15 c8 ed 02 c0    	mov    edx,DWORD PTR ds:0xc002edc8
c0023aab:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023ab2:	74 33                	je     c0023ae7 <IDE::open(int, int, void*)+0x13d>
c0023ab4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023aba:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023abe:	40                   	inc    eax
c0023abf:	83 ec 0c             	sub    esp,0xc
c0023ac2:	0f b6 c0             	movzx  eax,al
c0023ac5:	50                   	push   eax
c0023ac6:	55                   	push   ebp
c0023ac7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023acb:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023ad1:	51                   	push   ecx
c0023ad2:	e8 3b 48 ff ff       	call   c0018312 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023ad7:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023adc:	83 c4 1c             	add    esp,0x1c
c0023adf:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023ae5:	eb 0a                	jmp    c0023af1 <IDE::open(int, int, void*)+0x147>
c0023ae7:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023af1:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023af8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023aff:	c1 e1 10             	shl    ecx,0x10
c0023b02:	c1 e0 08             	shl    eax,0x8
c0023b05:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023b0a:	09 c1                	or     ecx,eax
c0023b0c:	89 fa                	mov    edx,edi
c0023b0e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023b15:	c1 e0 0b             	shl    eax,0xb
c0023b18:	09 c1                	or     ecx,eax
c0023b1a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023b20:	89 c8                	mov    eax,ecx
c0023b22:	ef                   	out    dx,eax
c0023b23:	be fc 0c 00 00       	mov    esi,0xcfc
c0023b28:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023b2e:	89 f2                	mov    edx,esi
c0023b30:	ee                   	out    dx,al
c0023b31:	89 c8                	mov    eax,ecx
c0023b33:	89 fa                	mov    edx,edi
c0023b35:	ef                   	out    dx,eax
c0023b36:	89 f2                	mov    edx,esi
c0023b38:	ed                   	in     eax,dx
c0023b39:	0f b6 c0             	movzx  eax,al
c0023b3c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023b42:	74 46                	je     c0023b8a <IDE::open(int, int, void*)+0x1e0>
c0023b44:	83 ec 0c             	sub    esp,0xc
c0023b47:	68 60 d4 02 c0       	push   0xc002d460
c0023b4c:	eb 34                	jmp    c0023b82 <IDE::open(int, int, void*)+0x1d8>
c0023b4e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023b57:	75 17                	jne    c0023b70 <IDE::open(int, int, void*)+0x1c6>
c0023b59:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023b5e:	74 07                	je     c0023b67 <IDE::open(int, int, void*)+0x1bd>
c0023b60:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023b65:	75 09                	jne    c0023b70 <IDE::open(int, int, void*)+0x1c6>
c0023b67:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023b6e:	eb 1a                	jmp    c0023b8a <IDE::open(int, int, void*)+0x1e0>
c0023b70:	83 ec 0c             	sub    esp,0xc
c0023b73:	68 68 d4 02 c0       	push   0xc002d468
c0023b78:	eb 08                	jmp    c0023b82 <IDE::open(int, int, void*)+0x1d8>
c0023b7a:	83 ec 0c             	sub    esp,0xc
c0023b7d:	68 99 d4 02 c0       	push   0xc002d499
c0023b82:	e8 7e 6c ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0023b87:	83 c4 10             	add    esp,0x10
c0023b8a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023b91:	79 1a                	jns    c0023bad <IDE::open(int, int, void*)+0x203>
c0023b93:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023b99:	83 e0 fc             	and    eax,0xfffffffc
c0023b9c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023ba3:	83 c0 08             	add    eax,0x8
c0023ba6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023bad:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023bb3:	89 c2                	mov    edx,eax
c0023bb5:	83 e2 0f             	and    edx,0xf
c0023bb8:	66 83 fa 08          	cmp    dx,0x8
c0023bbc:	75 0a                	jne    c0023bc8 <IDE::open(int, int, void*)+0x21e>
c0023bbe:	83 e8 02             	sub    eax,0x2
c0023bc1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023bc8:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023bce:	89 c2                	mov    edx,eax
c0023bd0:	83 e2 0f             	and    edx,0xf
c0023bd3:	66 83 fa 08          	cmp    dx,0x8
c0023bd7:	75 0a                	jne    c0023be3 <IDE::open(int, int, void*)+0x239>
c0023bd9:	83 e8 02             	sub    eax,0x2
c0023bdc:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023be3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023bea:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023bf1:	89 d0                	mov    eax,edx
c0023bf3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023bf6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023bfa:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023bfe:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023c01:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023c06:	0f b6 c9             	movzx  ecx,cl
c0023c09:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023c10:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023c13:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023c17:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023c1b:	8d 50 02             	lea    edx,[eax+0x2]
c0023c1e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023c23:	0f b6 d2             	movzx  edx,dl
c0023c26:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023c2c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023c2f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023c33:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023c37:	8d 48 03             	lea    ecx,[eax+0x3]
c0023c3a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023c3f:	0f b6 c9             	movzx  ecx,cl
c0023c42:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023c48:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023c4b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023c4f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023c53:	8d 50 04             	lea    edx,[eax+0x4]
c0023c56:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023c5c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023c61:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023c68:	66 85 f6             	test   si,si
c0023c6b:	74 3e                	je     c0023cab <IDE::open(int, int, void*)+0x301>
c0023c6d:	0f b6 d2             	movzx  edx,dl
c0023c70:	83 c0 05             	add    eax,0x5
c0023c73:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023c76:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023c7a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023c7e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023c84:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023c89:	eb 20                	jmp    c0023cab <IDE::open(int, int, void*)+0x301>
c0023c8b:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023c95:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023c9f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023ca6:	e9 02 ff ff ff       	jmp    c0023bad <IDE::open(int, int, void*)+0x203>
c0023cab:	52                   	push   edx
c0023cac:	52                   	push   edx
c0023cad:	6a 00                	push   0x0
c0023caf:	53                   	push   ebx
c0023cb0:	e8 7d fa ff ff       	call   c0023732 <IDE::prepareInterrupt(unsigned char)>
c0023cb5:	59                   	pop    ecx
c0023cb6:	5e                   	pop    esi
c0023cb7:	6a 01                	push   0x1
c0023cb9:	53                   	push   ebx
c0023cba:	e8 73 fa ff ff       	call   c0023732 <IDE::prepareInterrupt(unsigned char)>
c0023cbf:	83 c4 0c             	add    esp,0xc
c0023cc2:	6a 00                	push   0x0
c0023cc4:	6a 00                	push   0x0
c0023cc6:	53                   	push   ebx
c0023cc7:	e8 98 fc ff ff       	call   c0023964 <IDE::enableIRQs(unsigned char, bool)>
c0023ccc:	83 c4 0c             	add    esp,0xc
c0023ccf:	6a 00                	push   0x0
c0023cd1:	6a 01                	push   0x1
c0023cd3:	53                   	push   ebx
c0023cd4:	e8 8b fc ff ff       	call   c0023964 <IDE::enableIRQs(unsigned char, bool)>
c0023cd9:	83 c4 10             	add    esp,0x10
c0023cdc:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023ce3:	74 40                	je     c0023d25 <IDE::open(int, int, void*)+0x37b>
c0023ce5:	83 ec 0c             	sub    esp,0xc
c0023ce8:	68 c3 d4 02 c0       	push   0xc002d4c3
c0023ced:	e8 53 f1 fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0023cf2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023cf5:	6a 01                	push   0x1
c0023cf7:	68 2c 39 02 c0       	push   0xc002392c
c0023cfc:	6a 0e                	push   0xe
c0023cfe:	53                   	push   ebx
c0023cff:	e8 fa 04 ff ff       	call   c00141fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023d04:	83 c4 14             	add    esp,0x14
c0023d07:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023d0d:	53                   	push   ebx
c0023d0e:	6a 01                	push   0x1
c0023d10:	68 48 39 02 c0       	push   0xc0023948
c0023d15:	6a 0f                	push   0xf
c0023d17:	53                   	push   ebx
c0023d18:	e8 e1 04 ff ff       	call   c00141fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023d1d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023d23:	eb 4a                	jmp    c0023d6f <IDE::open(int, int, void*)+0x3c5>
c0023d25:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023d2f:	50                   	push   eax
c0023d30:	6a 0f                	push   0xf
c0023d32:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023d38:	68 df d4 02 c0       	push   0xc002d4df
c0023d3d:	e8 03 f1 fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0023d42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d45:	6a 00                	push   0x0
c0023d47:	68 2c 39 02 c0       	push   0xc002392c
c0023d4c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023d52:	53                   	push   ebx
c0023d53:	e8 a6 04 ff ff       	call   c00141fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023d58:	83 c4 14             	add    esp,0x14
c0023d5b:	53                   	push   ebx
c0023d5c:	6a 00                	push   0x0
c0023d5e:	68 48 39 02 c0       	push   0xc0023948
c0023d63:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023d69:	53                   	push   ebx
c0023d6a:	e8 8f 04 ff ff       	call   c00141fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023d6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023d71:	83 c4 20             	add    esp,0x20
c0023d74:	83 ec 0c             	sub    esp,0xc
c0023d77:	53                   	push   ebx
c0023d78:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023d7b:	83 c4 0c             	add    esp,0xc
c0023d7e:	6a 07                	push   0x7
c0023d80:	6a 00                	push   0x0
c0023d82:	53                   	push   ebx
c0023d83:	e8 90 fa ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0023d88:	83 c4 0c             	add    esp,0xc
c0023d8b:	6a 07                	push   0x7
c0023d8d:	6a 01                	push   0x1
c0023d8f:	53                   	push   ebx
c0023d90:	e8 83 fa ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0023d95:	83 c4 0c             	add    esp,0xc
c0023d98:	6a 01                	push   0x1
c0023d9a:	6a 00                	push   0x0
c0023d9c:	53                   	push   ebx
c0023d9d:	e8 c2 fb ff ff       	call   c0023964 <IDE::enableIRQs(unsigned char, bool)>
c0023da2:	83 c4 0c             	add    esp,0xc
c0023da5:	6a 01                	push   0x1
c0023da7:	6a 01                	push   0x1
c0023da9:	53                   	push   ebx
c0023daa:	e8 b5 fb ff ff       	call   c0023964 <IDE::enableIRQs(unsigned char, bool)>
c0023daf:	83 c4 2c             	add    esp,0x2c
c0023db2:	31 c0                	xor    eax,eax
c0023db4:	5b                   	pop    ebx
c0023db5:	5e                   	pop    esi
c0023db6:	5f                   	pop    edi
c0023db7:	5d                   	pop    ebp
c0023db8:	c3                   	ret    
c0023db9:	90                   	nop

c0023dba <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023dba:	55                   	push   ebp
c0023dbb:	57                   	push   edi
c0023dbc:	56                   	push   esi
c0023dbd:	53                   	push   ebx
c0023dbe:	83 ec 1c             	sub    esp,0x1c
c0023dc1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023dc5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023dc9:	8d 50 f8             	lea    edx,[eax-0x8]
c0023dcc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023dd0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023dd4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023dd8:	80 fa 03             	cmp    dl,0x3
c0023ddb:	77 5d                	ja     c0023e3a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023ddd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023de1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023de5:	0f b6 db             	movzx  ebx,bl
c0023de8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023deb:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023def:	83 ca 80             	or     edx,0xffffff80
c0023df2:	0f b6 d2             	movzx  edx,dl
c0023df5:	52                   	push   edx
c0023df6:	6a 0c                	push   0xc
c0023df8:	53                   	push   ebx
c0023df9:	56                   	push   esi
c0023dfa:	e8 59 f9 ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023dff:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023e04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e08:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023e0c:	0f b6 c0             	movzx  eax,al
c0023e0f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023e13:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023e15:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023e1a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023e1e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023e22:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023e26:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023e2e:	83 c4 2c             	add    esp,0x2c
c0023e31:	5b                   	pop    ebx
c0023e32:	5e                   	pop    esi
c0023e33:	5f                   	pop    edi
c0023e34:	5d                   	pop    ebp
c0023e35:	e9 1e f9 ff ff       	jmp    c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e3a:	3c 07                	cmp    al,0x7
c0023e3c:	77 10                	ja     c0023e4e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023e3e:	0f b6 db             	movzx  ebx,bl
c0023e41:	0f b6 d0             	movzx  edx,al
c0023e44:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023e4c:	eb 2d                	jmp    c0023e7b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023e4e:	3c 0d                	cmp    al,0xd
c0023e50:	77 13                	ja     c0023e65 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023e52:	0f b6 db             	movzx  ebx,bl
c0023e55:	0f b6 c0             	movzx  eax,al
c0023e58:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023e5f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023e63:	eb 16                	jmp    c0023e7b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023e65:	3c 15                	cmp    al,0x15
c0023e67:	77 14                	ja     c0023e7d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023e69:	0f b6 db             	movzx  ebx,bl
c0023e6c:	0f b6 c0             	movzx  eax,al
c0023e6f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023e77:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023e7b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023e7d:	83 c4 1c             	add    esp,0x1c
c0023e80:	5b                   	pop    ebx
c0023e81:	5e                   	pop    esi
c0023e82:	5f                   	pop    edi
c0023e83:	5d                   	pop    ebp
c0023e84:	c3                   	ret    
c0023e85:	90                   	nop

c0023e86 <IDE::detect()>:
c0023e86:	55                   	push   ebp
c0023e87:	57                   	push   edi
c0023e88:	56                   	push   esi
c0023e89:	53                   	push   ebx
c0023e8a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023e90:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023e97:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023e9e:	0f 85 be 02 00 00    	jne    c0024162 <IDE::detect()+0x2dc>
c0023ea4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023eab:	31 f6                	xor    esi,esi
c0023ead:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023eb5:	31 ed                	xor    ebp,ebp
c0023eb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023ebb:	c1 e0 06             	shl    eax,0x6
c0023ebe:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023ec6:	89 e8                	mov    eax,ebp
c0023ec8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023ecc:	c1 e0 04             	shl    eax,0x4
c0023ecf:	83 c8 a0             	or     eax,0xffffffa0
c0023ed2:	0f b6 c0             	movzx  eax,al
c0023ed5:	50                   	push   eax
c0023ed6:	6a 06                	push   0x6
c0023ed8:	56                   	push   esi
c0023ed9:	53                   	push   ebx
c0023eda:	e8 79 f8 ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023edf:	83 c4 0c             	add    esp,0xc
c0023ee2:	6a 0c                	push   0xc
c0023ee4:	56                   	push   esi
c0023ee5:	53                   	push   ebx
c0023ee6:	e8 2d f9 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0023eeb:	83 c4 0c             	add    esp,0xc
c0023eee:	6a 0c                	push   0xc
c0023ef0:	56                   	push   esi
c0023ef1:	53                   	push   ebx
c0023ef2:	e8 21 f9 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0023ef7:	83 c4 0c             	add    esp,0xc
c0023efa:	6a 0c                	push   0xc
c0023efc:	56                   	push   esi
c0023efd:	53                   	push   ebx
c0023efe:	e8 15 f9 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0023f03:	83 c4 0c             	add    esp,0xc
c0023f06:	6a 0c                	push   0xc
c0023f08:	56                   	push   esi
c0023f09:	53                   	push   ebx
c0023f0a:	e8 09 f9 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0023f0f:	68 ec 00 00 00       	push   0xec
c0023f14:	6a 07                	push   0x7
c0023f16:	56                   	push   esi
c0023f17:	53                   	push   ebx
c0023f18:	e8 3b f8 ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f1d:	83 c4 1c             	add    esp,0x1c
c0023f20:	6a 0c                	push   0xc
c0023f22:	56                   	push   esi
c0023f23:	53                   	push   ebx
c0023f24:	e8 ef f8 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0023f29:	83 c4 0c             	add    esp,0xc
c0023f2c:	6a 0c                	push   0xc
c0023f2e:	56                   	push   esi
c0023f2f:	53                   	push   ebx
c0023f30:	e8 e3 f8 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0023f35:	83 c4 0c             	add    esp,0xc
c0023f38:	6a 0c                	push   0xc
c0023f3a:	56                   	push   esi
c0023f3b:	53                   	push   ebx
c0023f3c:	e8 d7 f8 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0023f41:	83 c4 0c             	add    esp,0xc
c0023f44:	6a 0c                	push   0xc
c0023f46:	56                   	push   esi
c0023f47:	53                   	push   ebx
c0023f48:	e8 cb f8 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0023f4d:	83 c4 0c             	add    esp,0xc
c0023f50:	6a 0c                	push   0xc
c0023f52:	56                   	push   esi
c0023f53:	53                   	push   ebx
c0023f54:	e8 bf f8 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0023f59:	83 c4 10             	add    esp,0x10
c0023f5c:	84 c0                	test   al,al
c0023f5e:	0f 84 8b 01 00 00    	je     c00240ef <IDE::detect()+0x269>
c0023f64:	31 ff                	xor    edi,edi
c0023f66:	50                   	push   eax
c0023f67:	6a 0c                	push   0xc
c0023f69:	56                   	push   esi
c0023f6a:	53                   	push   ebx
c0023f6b:	e8 a8 f8 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0023f70:	83 c4 10             	add    esp,0x10
c0023f73:	a8 01                	test   al,0x1
c0023f75:	0f 85 8e 01 00 00    	jne    c0024109 <IDE::detect()+0x283>
c0023f7b:	84 c0                	test   al,al
c0023f7d:	78 04                	js     c0023f83 <IDE::detect()+0xfd>
c0023f7f:	a8 08                	test   al,0x8
c0023f81:	75 27                	jne    c0023faa <IDE::detect()+0x124>
c0023f83:	47                   	inc    edi
c0023f84:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023f8a:	7e da                	jle    c0023f66 <IDE::detect()+0xe0>
c0023f8c:	50                   	push   eax
c0023f8d:	50                   	push   eax
c0023f8e:	6a 00                	push   0x0
c0023f90:	68 40 4b 4c 00       	push   0x4c4b40
c0023f95:	e8 6f a7 ff ff       	call   c001e709 <nanoSleep(unsigned long long)>
c0023f9a:	83 c4 10             	add    esp,0x10
c0023f9d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023fa3:	75 c1                	jne    c0023f66 <IDE::detect()+0xe0>
c0023fa5:	e9 5f 01 00 00       	jmp    c0024109 <IDE::detect()+0x283>
c0023faa:	31 c9                	xor    ecx,ecx
c0023fac:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023fb0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023fb4:	83 ec 0c             	sub    esp,0xc
c0023fb7:	68 80 00 00 00       	push   0x80
c0023fbc:	57                   	push   edi
c0023fbd:	6a 00                	push   0x0
c0023fbf:	56                   	push   esi
c0023fc0:	53                   	push   ebx
c0023fc1:	e8 f4 fd ff ff       	call   c0023dba <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023fc6:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023fcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023fcf:	89 d1                	mov    ecx,edx
c0023fd1:	c1 e0 06             	shl    eax,0x6
c0023fd4:	01 d8                	add    eax,ebx
c0023fd6:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023fdd:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023fe4:	89 f2                	mov    edx,esi
c0023fe6:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023fec:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023ff0:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023ff6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023ffa:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0024001:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024009:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0024010:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024018:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002401e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0024025:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002402b:	8d 54 24 58          	lea    edx,[esp+0x58]
c002402f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0024033:	83 c4 20             	add    esp,0x20
c0024036:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024039:	83 c0 02             	add    eax,0x2
c002403c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0024042:	83 c7 02             	add    edi,0x2
c0024045:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024048:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002404e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0024052:	75 e2                	jne    c0024036 <IDE::detect()+0x1b0>
c0024054:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024058:	c1 e0 06             	shl    eax,0x6
c002405b:	01 d8                	add    eax,ebx
c002405d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0024063:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002406a:	66 c1 ea 09          	shr    dx,0x9
c002406e:	83 e2 01             	and    edx,0x1
c0024071:	84 c9                	test   cl,cl
c0024073:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0024079:	75 2f                	jne    c00240aa <IDE::detect()+0x224>
c002407b:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0024081:	85 c0                	test   eax,eax
c0024083:	74 66                	je     c00240eb <IDE::detect()+0x265>
c0024085:	50                   	push   eax
c0024086:	55                   	push   ebp
c0024087:	56                   	push   esi
c0024088:	68 fb d4 02 c0       	push   0xc002d4fb
c002408d:	e8 b3 ed fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0024092:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024099:	e8 e8 b7 fe ff       	call   c000f886 <malloc>
c002409e:	89 c7                	mov    edi,eax
c00240a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00240a3:	e8 78 06 00 00       	call   c0024720 <ATA::ATA()>
c00240a8:	eb 28                	jmp    c00240d2 <IDE::detect()+0x24c>
c00240aa:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00240b0:	55                   	push   ebp
c00240b1:	56                   	push   esi
c00240b2:	68 2a d5 02 c0       	push   0xc002d52a
c00240b7:	e8 89 ed fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00240bc:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00240c3:	e8 be b7 fe ff       	call   c000f886 <malloc>
c00240c8:	89 c7                	mov    edi,eax
c00240ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00240cd:	e8 8e 0c 00 00       	call   c0024d60 <ATAPI::ATAPI()>
c00240d2:	5a                   	pop    edx
c00240d3:	59                   	pop    ecx
c00240d4:	57                   	push   edi
c00240d5:	53                   	push   ebx
c00240d6:	e8 9f 01 ff ff       	call   c001427a <Device::addChild(Device*)>
c00240db:	8b 07                	mov    eax,DWORD PTR [edi]
c00240dd:	53                   	push   ebx
c00240de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00240e2:	6a 00                	push   0x0
c00240e4:	57                   	push   edi
c00240e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00240e8:	83 c4 20             	add    esp,0x20
c00240eb:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00240ef:	4d                   	dec    ebp
c00240f0:	74 0a                	je     c00240fc <IDE::detect()+0x276>
c00240f2:	bd 01 00 00 00       	mov    ebp,0x1
c00240f7:	e9 bb fd ff ff       	jmp    c0023eb7 <IDE::detect()+0x31>
c00240fc:	4e                   	dec    esi
c00240fd:	74 63                	je     c0024162 <IDE::detect()+0x2dc>
c00240ff:	be 01 00 00 00       	mov    esi,0x1
c0024104:	e9 ac fd ff ff       	jmp    c0023eb5 <IDE::detect()+0x2f>
c0024109:	50                   	push   eax
c002410a:	6a 04                	push   0x4
c002410c:	56                   	push   esi
c002410d:	53                   	push   ebx
c002410e:	e8 05 f7 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0024113:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0024117:	83 c4 0c             	add    esp,0xc
c002411a:	6a 05                	push   0x5
c002411c:	56                   	push   esi
c002411d:	53                   	push   ebx
c002411e:	e8 f5 f6 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0024123:	83 c4 10             	add    esp,0x10
c0024126:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002412a:	80 fa 14             	cmp    dl,0x14
c002412d:	75 04                	jne    c0024133 <IDE::detect()+0x2ad>
c002412f:	3c eb                	cmp    al,0xeb
c0024131:	eb 07                	jmp    c002413a <IDE::detect()+0x2b4>
c0024133:	3c 96                	cmp    al,0x96
c0024135:	75 b8                	jne    c00240ef <IDE::detect()+0x269>
c0024137:	80 fa 69             	cmp    dl,0x69
c002413a:	75 b3                	jne    c00240ef <IDE::detect()+0x269>
c002413c:	68 a1 00 00 00       	push   0xa1
c0024141:	6a 07                	push   0x7
c0024143:	56                   	push   esi
c0024144:	53                   	push   ebx
c0024145:	e8 0e f6 ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002414a:	5f                   	pop    edi
c002414b:	58                   	pop    eax
c002414c:	6a 00                	push   0x0
c002414e:	68 40 42 0f 00       	push   0xf4240
c0024153:	e8 b1 a5 ff ff       	call   c001e709 <nanoSleep(unsigned long long)>
c0024158:	83 c4 10             	add    esp,0x10
c002415b:	b1 01                	mov    cl,0x1
c002415d:	e9 4a fe ff ff       	jmp    c0023fac <IDE::detect()+0x126>
c0024162:	81 c4 1c 02 00 00    	add    esp,0x21c
c0024168:	5b                   	pop    ebx
c0024169:	5e                   	pop    esi
c002416a:	5f                   	pop    edi
c002416b:	5d                   	pop    ebp
c002416c:	c3                   	ret    
c002416d:	90                   	nop

c002416e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002416e:	55                   	push   ebp
c002416f:	57                   	push   edi
c0024170:	56                   	push   esi
c0024171:	53                   	push   ebx
c0024172:	83 ec 1c             	sub    esp,0x1c
c0024175:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024179:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002417d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0024181:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0024185:	88 c3                	mov    bl,al
c0024187:	84 c0                	test   al,al
c0024189:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002418d:	0f 84 67 01 00 00    	je     c00242fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0024193:	83 ec 0c             	sub    esp,0xc
c0024196:	68 5b d5 02 c0       	push   0xc002d55b
c002419b:	e8 a5 ec fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00241a0:	83 c4 10             	add    esp,0x10
c00241a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00241a7:	3c 01                	cmp    al,0x1
c00241a9:	75 17                	jne    c00241c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00241ab:	83 ec 0c             	sub    esp,0xc
c00241ae:	b3 13                	mov    bl,0x13
c00241b0:	68 67 d5 02 c0       	push   0xc002d567
c00241b5:	e8 8b ec fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00241ba:	83 c4 10             	add    esp,0x10
c00241bd:	e9 25 01 00 00       	jmp    c00242e7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00241c2:	3c 02                	cmp    al,0x2
c00241c4:	0f 85 ef 00 00 00    	jne    c00242b9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00241ca:	d1 e6                	shl    esi,1
c00241cc:	09 ee                	or     esi,ebp
c00241ce:	52                   	push   edx
c00241cf:	89 f0                	mov    eax,esi
c00241d1:	6a 01                	push   0x1
c00241d3:	0f b6 f0             	movzx  esi,al
c00241d6:	c1 e6 06             	shl    esi,0x6
c00241d9:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00241e1:	50                   	push   eax
c00241e2:	57                   	push   edi
c00241e3:	e8 30 f6 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c00241e8:	83 c4 10             	add    esp,0x10
c00241eb:	89 c6                	mov    esi,eax
c00241ed:	a8 01                	test   al,0x1
c00241ef:	74 12                	je     c0024203 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00241f1:	83 ec 0c             	sub    esp,0xc
c00241f4:	b3 07                	mov    bl,0x7
c00241f6:	68 7c d5 02 c0       	push   0xc002d57c
c00241fb:	e8 45 ec fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0024200:	83 c4 10             	add    esp,0x10
c0024203:	f7 c6 02 00 00 00    	test   esi,0x2
c0024209:	74 12                	je     c002421d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002420b:	83 ec 0c             	sub    esp,0xc
c002420e:	b3 03                	mov    bl,0x3
c0024210:	68 9a d5 02 c0       	push   0xc002d59a
c0024215:	e8 2b ec fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c002421a:	83 c4 10             	add    esp,0x10
c002421d:	f7 c6 04 00 00 00    	test   esi,0x4
c0024223:	74 12                	je     c0024237 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0024225:	83 ec 0c             	sub    esp,0xc
c0024228:	b3 14                	mov    bl,0x14
c002422a:	68 ba d5 02 c0       	push   0xc002d5ba
c002422f:	e8 11 ec fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0024234:	83 c4 10             	add    esp,0x10
c0024237:	f7 c6 08 00 00 00    	test   esi,0x8
c002423d:	74 12                	je     c0024251 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002423f:	83 ec 0c             	sub    esp,0xc
c0024242:	b3 03                	mov    bl,0x3
c0024244:	68 9a d5 02 c0       	push   0xc002d59a
c0024249:	e8 f7 eb fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c002424e:	83 c4 10             	add    esp,0x10
c0024251:	f7 c6 10 00 00 00    	test   esi,0x10
c0024257:	74 12                	je     c002426b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024259:	83 ec 0c             	sub    esp,0xc
c002425c:	b3 15                	mov    bl,0x15
c002425e:	68 d2 d5 02 c0       	push   0xc002d5d2
c0024263:	e8 dd eb fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0024268:	83 c4 10             	add    esp,0x10
c002426b:	f7 c6 20 00 00 00    	test   esi,0x20
c0024271:	74 12                	je     c0024285 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0024273:	83 ec 0c             	sub    esp,0xc
c0024276:	b3 03                	mov    bl,0x3
c0024278:	68 9a d5 02 c0       	push   0xc002d59a
c002427d:	e8 c3 eb fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0024282:	83 c4 10             	add    esp,0x10
c0024285:	f7 c6 40 00 00 00    	test   esi,0x40
c002428b:	74 12                	je     c002429f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002428d:	83 ec 0c             	sub    esp,0xc
c0024290:	b3 16                	mov    bl,0x16
c0024292:	68 ec d5 02 c0       	push   0xc002d5ec
c0024297:	e8 a9 eb fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c002429c:	83 c4 10             	add    esp,0x10
c002429f:	89 f0                	mov    eax,esi
c00242a1:	84 c0                	test   al,al
c00242a3:	79 42                	jns    c00242e7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00242a5:	83 ec 0c             	sub    esp,0xc
c00242a8:	b3 0d                	mov    bl,0xd
c00242aa:	68 0d d6 02 c0       	push   0xc002d60d
c00242af:	e8 91 eb fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00242b4:	83 c4 10             	add    esp,0x10
c00242b7:	eb 2e                	jmp    c00242e7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00242b9:	3c 03                	cmp    al,0x3
c00242bb:	75 14                	jne    c00242d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00242bd:	83 ec 0c             	sub    esp,0xc
c00242c0:	b3 17                	mov    bl,0x17
c00242c2:	68 21 d6 02 c0       	push   0xc002d621
c00242c7:	e8 79 eb fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00242cc:	83 c4 10             	add    esp,0x10
c00242cf:	eb 16                	jmp    c00242e7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00242d1:	3c 04                	cmp    al,0x4
c00242d3:	75 12                	jne    c00242e7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00242d5:	83 ec 0c             	sub    esp,0xc
c00242d8:	b3 08                	mov    bl,0x8
c00242da:	68 37 d6 02 c0       	push   0xc002d637
c00242df:	e8 61 eb fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00242e4:	83 c4 10             	add    esp,0x10
c00242e7:	50                   	push   eax
c00242e8:	50                   	push   eax
c00242e9:	0f b6 c3             	movzx  eax,bl
c00242ec:	50                   	push   eax
c00242ed:	68 4f d6 02 c0       	push   0xc002d64f
c00242f2:	e8 4e eb fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00242f7:	83 c4 10             	add    esp,0x10
c00242fa:	83 c4 1c             	add    esp,0x1c
c00242fd:	88 d8                	mov    al,bl
c00242ff:	5b                   	pop    ebx
c0024300:	5e                   	pop    esi
c0024301:	5f                   	pop    edi
c0024302:	5d                   	pop    ebp
c0024303:	c3                   	ret    

c0024304 <IDE::polling(unsigned char, unsigned int)>:
c0024304:	57                   	push   edi
c0024305:	56                   	push   esi
c0024306:	53                   	push   ebx
c0024307:	bb 04 00 00 00       	mov    ebx,0x4
c002430c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024310:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024315:	52                   	push   edx
c0024316:	6a 0c                	push   0xc
c0024318:	56                   	push   esi
c0024319:	57                   	push   edi
c002431a:	e8 f9 f4 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c002431f:	83 c4 10             	add    esp,0x10
c0024322:	4b                   	dec    ebx
c0024323:	75 f0                	jne    c0024315 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024325:	bb a0 86 01 00       	mov    ebx,0x186a0
c002432a:	50                   	push   eax
c002432b:	6a 0c                	push   0xc
c002432d:	56                   	push   esi
c002432e:	57                   	push   edi
c002432f:	e8 e4 f4 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0024334:	83 c4 10             	add    esp,0x10
c0024337:	a8 01                	test   al,0x1
c0024339:	74 12                	je     c002434d <IDE::polling(unsigned char, unsigned int)+0x49>
c002433b:	83 ec 0c             	sub    esp,0xc
c002433e:	68 69 d6 02 c0       	push   0xc002d669
c0024343:	e8 fd ea fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0024348:	83 c4 10             	add    esp,0x10
c002434b:	eb 17                	jmp    c0024364 <IDE::polling(unsigned char, unsigned int)+0x60>
c002434d:	a8 20                	test   al,0x20
c002434f:	75 0f                	jne    c0024360 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0024351:	4b                   	dec    ebx
c0024352:	74 10                	je     c0024364 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024354:	84 c0                	test   al,al
c0024356:	78 d2                	js     c002432a <IDE::polling(unsigned char, unsigned int)+0x26>
c0024358:	a8 08                	test   al,0x8
c002435a:	74 ce                	je     c002432a <IDE::polling(unsigned char, unsigned int)+0x26>
c002435c:	31 c0                	xor    eax,eax
c002435e:	eb 06                	jmp    c0024366 <IDE::polling(unsigned char, unsigned int)+0x62>
c0024360:	b0 01                	mov    al,0x1
c0024362:	eb 02                	jmp    c0024366 <IDE::polling(unsigned char, unsigned int)+0x62>
c0024364:	b0 02                	mov    al,0x2
c0024366:	5b                   	pop    ebx
c0024367:	5e                   	pop    esi
c0024368:	5f                   	pop    edi
c0024369:	c3                   	ret    

c002436a <SATABus::close(int, int, void*)>:
c002436a:	31 c0                	xor    eax,eax
c002436c:	c3                   	ret    
c002436d:	90                   	nop

c002436e <SATABus::detect()>:
c002436e:	c3                   	ret    
c002436f:	90                   	nop

c0024370 <SATABus::SATABus()>:
c0024370:	83 ec 0c             	sub    esp,0xc
c0024373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024377:	83 ec 08             	sub    esp,0x8
c002437a:	68 ac d6 02 c0       	push   0xc002d6ac
c002437f:	50                   	push   eax
c0024380:	e8 8f 02 ff ff       	call   c0014614 <HardDiskController::HardDiskController(char const*)>
c0024385:	83 c4 10             	add    esp,0x10
c0024388:	ba 68 d7 02 c0       	mov    edx,0xc002d768
c002438d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024391:	89 10                	mov    DWORD PTR [eax],edx
c0024393:	83 ec 0c             	sub    esp,0xc
c0024396:	6a 50                	push   0x50
c0024398:	e8 3a bc fe ff       	call   c000ffd7 <Phys::allocateContiguousPages(int)>
c002439d:	83 c4 10             	add    esp,0x10
c00243a0:	89 c2                	mov    edx,eax
c00243a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243a6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00243ac:	83 ec 0c             	sub    esp,0xc
c00243af:	6a 50                	push   0x50
c00243b1:	e8 83 d6 fe ff       	call   c0011a39 <Virt::allocateKernelVirtualPages(int)>
c00243b6:	83 c4 10             	add    esp,0x10
c00243b9:	89 c2                	mov    edx,eax
c00243bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243bf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00243c5:	e8 ae d8 fe ff       	call   c0011c78 <Virt::getAKernelVAS()>
c00243ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00243ce:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00243d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00243d8:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00243de:	83 ec 0c             	sub    esp,0xc
c00243e1:	6a 03                	push   0x3
c00243e3:	6a 50                	push   0x50
c00243e5:	51                   	push   ecx
c00243e6:	52                   	push   edx
c00243e7:	50                   	push   eax
c00243e8:	e8 7d e1 fe ff       	call   c001256a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00243ed:	83 c4 20             	add    esp,0x20
c00243f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243f4:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00243fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243fe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024404:	83 ec 04             	sub    esp,0x4
c0024407:	52                   	push   edx
c0024408:	50                   	push   eax
c0024409:	68 d0 d6 02 c0       	push   0xc002d6d0
c002440e:	e8 32 ea fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0024413:	83 c4 10             	add    esp,0x10
c0024416:	90                   	nop
c0024417:	83 c4 0c             	add    esp,0xc
c002441a:	c3                   	ret    
c002441b:	90                   	nop

c002441c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002441c:	83 ec 0c             	sub    esp,0xc
c002441f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024423:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024426:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024429:	09 c2                	or     edx,eax
c002442b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002442f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024435:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024437:	31 c0                	xor    eax,eax
c0024439:	c1 e9 08             	shr    ecx,0x8
c002443c:	83 e1 0f             	and    ecx,0xf
c002443f:	39 c8                	cmp    eax,ecx
c0024441:	74 0a                	je     c002444d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024443:	f6 c2 01             	test   dl,0x1
c0024446:	74 18                	je     c0024460 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024448:	d1 ea                	shr    edx,1
c002444a:	40                   	inc    eax
c002444b:	eb f2                	jmp    c002443f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c002444d:	83 ec 0c             	sub    esp,0xc
c0024450:	68 f4 d6 02 c0       	push   0xc002d6f4
c0024455:	e8 ab 63 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c002445a:	83 c4 10             	add    esp,0x10
c002445d:	83 c8 ff             	or     eax,0xffffffff
c0024460:	83 c4 0c             	add    esp,0xc
c0024463:	c3                   	ret    

c0024464 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024464:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024468:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002446b:	89 c2                	mov    edx,eax
c002446d:	c1 ea 08             	shr    edx,0x8
c0024470:	83 e2 0f             	and    edx,0xf
c0024473:	fe ca                	dec    dl
c0024475:	75 31                	jne    c00244a8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024477:	83 e0 0f             	and    eax,0xf
c002447a:	3c 03                	cmp    al,0x3
c002447c:	75 2a                	jne    c00244a8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002447e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0024481:	b8 02 00 00 00       	mov    eax,0x2
c0024486:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002448c:	74 1c                	je     c00244aa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002448e:	b8 04 00 00 00       	mov    eax,0x4
c0024493:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024499:	74 0f                	je     c00244aa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002449b:	31 c0                	xor    eax,eax
c002449d:	83 fa 03             	cmp    edx,0x3
c00244a0:	0f 94 c0             	sete   al
c00244a3:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00244a7:	c3                   	ret    
c00244a8:	31 c0                	xor    eax,eax
c00244aa:	c3                   	ret    
c00244ab:	90                   	nop

c00244ac <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00244ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00244b0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00244b3:	0f ba e2 0f          	bt     edx,0xf
c00244b7:	72 f7                	jb     c00244b0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00244b9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00244bc:	83 ca 10             	or     edx,0x10
c00244bf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00244c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00244c5:	83 ca 01             	or     edx,0x1
c00244c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00244cb:	c3                   	ret    

c00244cc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00244cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00244d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00244d3:	83 e2 fe             	and    edx,0xfffffffe
c00244d6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00244d9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00244dc:	83 e2 ef             	and    edx,0xffffffef
c00244df:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00244e2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00244e5:	0f ba e2 0e          	bt     edx,0xe
c00244e9:	72 f7                	jb     c00244e2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00244eb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00244ee:	0f ba e2 0f          	bt     edx,0xf
c00244f2:	72 ee                	jb     c00244e2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00244f4:	c3                   	ret    
c00244f5:	90                   	nop

c00244f6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00244f6:	55                   	push   ebp
c00244f7:	57                   	push   edi
c00244f8:	56                   	push   esi
c00244f9:	53                   	push   ebx
c00244fa:	83 ec 1c             	sub    esp,0x1c
c00244fd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024501:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024505:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024509:	53                   	push   ebx
c002450a:	89 fd                	mov    ebp,edi
c002450c:	56                   	push   esi
c002450d:	c1 e5 0a             	shl    ebp,0xa
c0024510:	e8 b7 ff ff ff       	call   c00244cc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024515:	83 ec 0c             	sub    esp,0xc
c0024518:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002451e:	01 e8                	add    eax,ebp
c0024520:	89 03                	mov    DWORD PTR [ebx],eax
c0024522:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024524:	68 00 04 00 00       	push   0x400
c0024529:	6a 00                	push   0x0
c002452b:	50                   	push   eax
c002452c:	e8 6b c2 fd ff       	call   c000079c <memset>
c0024531:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024537:	89 fa                	mov    edx,edi
c0024539:	01 e8                	add    eax,ebp
c002453b:	c1 e7 0d             	shl    edi,0xd
c002453e:	89 03                	mov    DWORD PTR [ebx],eax
c0024540:	c1 e2 08             	shl    edx,0x8
c0024543:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002454a:	81 c2 00 80 00 00    	add    edx,0x8000
c0024550:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024554:	89 d0                	mov    eax,edx
c0024556:	83 c4 1c             	add    esp,0x1c
c0024559:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002455f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0024562:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024565:	68 00 01 00 00       	push   0x100
c002456a:	6a 00                	push   0x0
c002456c:	50                   	push   eax
c002456d:	e8 2a c2 fd ff       	call   c000079c <memset>
c0024572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024576:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002457c:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024586:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024589:	83 c4 10             	add    esp,0x10
c002458c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0024593:	31 ff                	xor    edi,edi
c0024595:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002459b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00245a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00245a5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00245ab:	83 c5 20             	add    ebp,0x20
c00245ae:	01 f8                	add    eax,edi
c00245b0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00245b3:	52                   	push   edx
c00245b4:	68 00 01 00 00       	push   0x100
c00245b9:	6a 00                	push   0x0
c00245bb:	50                   	push   eax
c00245bc:	e8 db c1 fd ff       	call   c000079c <memset>
c00245c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00245c5:	83 c4 10             	add    esp,0x10
c00245c8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00245ce:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00245d5:	01 f8                	add    eax,edi
c00245d7:	81 c7 00 01 00 00    	add    edi,0x100
c00245dd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00245e0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00245e6:	75 b3                	jne    c002459b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00245e8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00245ec:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00245f0:	83 c4 1c             	add    esp,0x1c
c00245f3:	5b                   	pop    ebx
c00245f4:	5e                   	pop    esi
c00245f5:	5f                   	pop    edi
c00245f6:	5d                   	pop    ebp
c00245f7:	e9 b0 fe ff ff       	jmp    c00244ac <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c00245fc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00245fc:	55                   	push   ebp
c00245fd:	57                   	push   edi
c00245fe:	56                   	push   esi
c00245ff:	53                   	push   ebx
c0024600:	31 db                	xor    ebx,ebx
c0024602:	83 ec 0c             	sub    esp,0xc
c0024605:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024609:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002460d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024610:	f7 c7 01 00 00 00    	test   edi,0x1
c0024616:	0f 84 aa 00 00 00    	je     c00246c6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002461c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024620:	89 d8                	mov    eax,ebx
c0024622:	c1 e0 07             	shl    eax,0x7
c0024625:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c002462c:	55                   	push   ebp
c002462d:	56                   	push   esi
c002462e:	e8 31 fe ff ff       	call   c0024464 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024633:	5a                   	pop    edx
c0024634:	83 f8 01             	cmp    eax,0x1
c0024637:	59                   	pop    ecx
c0024638:	75 30                	jne    c002466a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c002463a:	50                   	push   eax
c002463b:	50                   	push   eax
c002463c:	53                   	push   ebx
c002463d:	68 19 d7 02 c0       	push   0xc002d719
c0024642:	e8 fe e7 fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0024647:	83 c4 0c             	add    esp,0xc
c002464a:	53                   	push   ebx
c002464b:	55                   	push   ebp
c002464c:	56                   	push   esi
c002464d:	e8 a4 fe ff ff       	call   c00244f6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024652:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024659:	e8 28 b2 fe ff       	call   c000f886 <malloc>
c002465e:	89 c5                	mov    ebp,eax
c0024660:	89 04 24             	mov    DWORD PTR [esp],eax
c0024663:	e8 60 0d 00 00       	call   c00253c8 <SATA::SATA()>
c0024668:	eb 33                	jmp    c002469d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c002466a:	83 f8 04             	cmp    eax,0x4
c002466d:	75 47                	jne    c00246b6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c002466f:	50                   	push   eax
c0024670:	50                   	push   eax
c0024671:	53                   	push   ebx
c0024672:	68 30 d7 02 c0       	push   0xc002d730
c0024677:	e8 c9 e7 fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c002467c:	83 c4 0c             	add    esp,0xc
c002467f:	53                   	push   ebx
c0024680:	55                   	push   ebp
c0024681:	56                   	push   esi
c0024682:	e8 6f fe ff ff       	call   c00244f6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024687:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002468e:	e8 f3 b1 fe ff       	call   c000f886 <malloc>
c0024693:	89 c5                	mov    ebp,eax
c0024695:	89 04 24             	mov    DWORD PTR [esp],eax
c0024698:	e8 d7 10 00 00       	call   c0025774 <SATAPI::SATAPI()>
c002469d:	5a                   	pop    edx
c002469e:	59                   	pop    ecx
c002469f:	55                   	push   ebp
c00246a0:	56                   	push   esi
c00246a1:	e8 d4 fb fe ff       	call   c001427a <Device::addChild(Device*)>
c00246a6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00246a9:	56                   	push   esi
c00246aa:	6a 00                	push   0x0
c00246ac:	53                   	push   ebx
c00246ad:	55                   	push   ebp
c00246ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00246b1:	83 c4 20             	add    esp,0x20
c00246b4:	eb 10                	jmp    c00246c6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00246b6:	50                   	push   eax
c00246b7:	50                   	push   eax
c00246b8:	53                   	push   ebx
c00246b9:	68 49 d7 02 c0       	push   0xc002d749
c00246be:	e8 82 e7 fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00246c3:	83 c4 10             	add    esp,0x10
c00246c6:	d1 ef                	shr    edi,1
c00246c8:	43                   	inc    ebx
c00246c9:	83 fb 20             	cmp    ebx,0x20
c00246cc:	0f 85 3e ff ff ff    	jne    c0024610 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00246d2:	83 c4 0c             	add    esp,0xc
c00246d5:	5b                   	pop    ebx
c00246d6:	5e                   	pop    esi
c00246d7:	5f                   	pop    edi
c00246d8:	5d                   	pop    ebp
c00246d9:	c3                   	ret    

c00246da <SATABus::open(int, int, void*)>:
c00246da:	83 ec 14             	sub    esp,0x14
c00246dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00246e1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00246e7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00246ed:	52                   	push   edx
c00246ee:	50                   	push   eax
c00246ef:	e8 08 ff ff ff       	call   c00245fc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00246f4:	31 c0                	xor    eax,eax
c00246f6:	83 c4 1c             	add    esp,0x1c
c00246f9:	c3                   	ret    

c00246fa <ATA::close(int, int, void*)>:
c00246fa:	83 ec 0c             	sub    esp,0xc
c00246fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024701:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024707:	85 c0                	test   eax,eax
c0024709:	74 0c                	je     c0024717 <ATA::close(int, int, void*)+0x1d>
c002470b:	83 ec 0c             	sub    esp,0xc
c002470e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024710:	50                   	push   eax
c0024711:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024714:	83 c4 10             	add    esp,0x10
c0024717:	31 c0                	xor    eax,eax
c0024719:	83 c4 0c             	add    esp,0xc
c002471c:	c3                   	ret    
c002471d:	90                   	nop

c002471e <ATA::powerSaving(PowerSavingLevel)>:
c002471e:	c3                   	ret    
c002471f:	90                   	nop

c0024720 <ATA::ATA()>:
c0024720:	83 ec 0c             	sub    esp,0xc
c0024723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024727:	83 ec 04             	sub    esp,0x4
c002472a:	68 00 02 00 00       	push   0x200
c002472f:	68 31 d8 02 c0       	push   0xc002d831
c0024734:	50                   	push   eax
c0024735:	e8 72 ff fe ff       	call   c00146ac <PhysicalDisk::PhysicalDisk(char const*, int)>
c002473a:	83 c4 10             	add    esp,0x10
c002473d:	ba b4 d7 02 c0       	mov    edx,0xc002d7b4
c0024742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024746:	89 10                	mov    DWORD PTR [eax],edx
c0024748:	90                   	nop
c0024749:	83 c4 0c             	add    esp,0xc
c002474c:	c3                   	ret    
c002474d:	90                   	nop

c002474e <ATA::flush(bool)>:
c002474e:	53                   	push   ebx
c002474f:	83 ec 08             	sub    esp,0x8
c0024752:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024757:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002475b:	19 c0                	sbb    eax,eax
c002475d:	83 e0 fd             	and    eax,0xfffffffd
c0024760:	05 ea 00 00 00       	add    eax,0xea
c0024765:	50                   	push   eax
c0024766:	6a 07                	push   0x7
c0024768:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002476f:	50                   	push   eax
c0024770:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024776:	e8 dd ef ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002477b:	83 c4 0c             	add    esp,0xc
c002477e:	6a 00                	push   0x0
c0024780:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024787:	50                   	push   eax
c0024788:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002478e:	e8 71 fb ff ff       	call   c0024304 <IDE::polling(unsigned char, unsigned int)>
c0024793:	83 c4 18             	add    esp,0x18
c0024796:	5b                   	pop    ebx
c0024797:	c3                   	ret    

c0024798 <ATA::readyForCommand()>:
c0024798:	56                   	push   esi
c0024799:	53                   	push   ebx
c002479a:	31 db                	xor    ebx,ebx
c002479c:	50                   	push   eax
c002479d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00247a1:	50                   	push   eax
c00247a2:	6a 0c                	push   0xc
c00247a4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00247ab:	50                   	push   eax
c00247ac:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00247b2:	e8 61 f0 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c00247b7:	83 c4 10             	add    esp,0x10
c00247ba:	a8 88                	test   al,0x88
c00247bc:	74 23                	je     c00247e1 <ATA::readyForCommand()+0x49>
c00247be:	43                   	inc    ebx
c00247bf:	83 fb 63             	cmp    ebx,0x63
c00247c2:	7e dd                	jle    c00247a1 <ATA::readyForCommand()+0x9>
c00247c4:	51                   	push   ecx
c00247c5:	51                   	push   ecx
c00247c6:	6a 00                	push   0x0
c00247c8:	68 40 42 0f 00       	push   0xf4240
c00247cd:	e8 37 9f ff ff       	call   c001e709 <nanoSleep(unsigned long long)>
c00247d2:	83 c4 10             	add    esp,0x10
c00247d5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00247db:	75 c4                	jne    c00247a1 <ATA::readyForCommand()+0x9>
c00247dd:	31 c0                	xor    eax,eax
c00247df:	eb 02                	jmp    c00247e3 <ATA::readyForCommand()+0x4b>
c00247e1:	b0 01                	mov    al,0x1
c00247e3:	5a                   	pop    edx
c00247e4:	5b                   	pop    ebx
c00247e5:	5e                   	pop    esi
c00247e6:	c3                   	ret    
c00247e7:	90                   	nop

c00247e8 <ATA::access(unsigned long long, int, void*, bool)>:
c00247e8:	55                   	push   ebp
c00247e9:	57                   	push   edi
c00247ea:	56                   	push   esi
c00247eb:	53                   	push   ebx
c00247ec:	83 ec 2c             	sub    esp,0x2c
c00247ef:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00247f3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00247f7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00247fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00247ff:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024803:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024807:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002480b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024811:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024815:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002481b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002481f:	c1 e0 06             	shl    eax,0x6
c0024822:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002482a:	74 5d                	je     c0024889 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002482c:	89 fa                	mov    edx,edi
c002482e:	89 f0                	mov    eax,esi
c0024830:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024834:	c1 ea 1c             	shr    edx,0x1c
c0024837:	89 d1                	mov    ecx,edx
c0024839:	09 c1                	or     ecx,eax
c002483b:	74 25                	je     c0024862 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002483d:	31 ed                	xor    ebp,ebp
c002483f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024846:	89 fa                	mov    edx,edi
c0024848:	89 f0                	mov    eax,esi
c002484a:	0f ad d0             	shrd   eax,edx,cl
c002484d:	d3 ea                	shr    edx,cl
c002484f:	f6 c1 20             	test   cl,0x20
c0024852:	74 02                	je     c0024856 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024854:	89 d0                	mov    eax,edx
c0024856:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002485a:	45                   	inc    ebp
c002485b:	83 fd 06             	cmp    ebp,0x6
c002485e:	75 df                	jne    c002483f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024860:	eb 76                	jmp    c00248d8 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024862:	89 f0                	mov    eax,esi
c0024864:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024869:	89 fa                	mov    edx,edi
c002486b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024872:	0f ac d0 10          	shrd   eax,edx,0x10
c0024876:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002487b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002487f:	c1 ee 18             	shr    esi,0x18
c0024882:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024887:	eb 56                	jmp    c00248df <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024889:	6a 00                	push   0x0
c002488b:	6a 3f                	push   0x3f
c002488d:	57                   	push   edi
c002488e:	56                   	push   esi
c002488f:	e8 a0 29 00 00       	call   c0027234 <__umoddi3>
c0024894:	83 c4 10             	add    esp,0x10
c0024897:	40                   	inc    eax
c0024898:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002489c:	6a 00                	push   0x0
c002489e:	68 f0 03 00 00       	push   0x3f0
c00248a3:	57                   	push   edi
c00248a4:	56                   	push   esi
c00248a5:	e8 8a 28 00 00       	call   c0027134 <__udivdi3>
c00248aa:	83 c4 10             	add    esp,0x10
c00248ad:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00248b2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00248b9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00248be:	6a 00                	push   0x0
c00248c0:	6a 3f                	push   0x3f
c00248c2:	57                   	push   edi
c00248c3:	56                   	push   esi
c00248c4:	e8 6b 28 00 00       	call   c0027134 <__udivdi3>
c00248c9:	83 c4 10             	add    esp,0x10
c00248cc:	89 c6                	mov    esi,eax
c00248ce:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00248d3:	83 e6 0f             	and    esi,0xf
c00248d6:	eb 07                	jmp    c00248df <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00248d8:	31 f6                	xor    esi,esi
c00248da:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00248df:	bf 01 00 00 00       	mov    edi,0x1
c00248e4:	50                   	push   eax
c00248e5:	6a 00                	push   0x0
c00248e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248ee:	50                   	push   eax
c00248ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00248f3:	e8 6c f0 ff ff       	call   c0023964 <IDE::enableIRQs(unsigned char, bool)>
c00248f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00248fb:	e8 98 fe ff ff       	call   c0024798 <ATA::readyForCommand()>
c0024900:	83 c4 10             	add    esp,0x10
c0024903:	84 c0                	test   al,al
c0024905:	0f 84 5a 02 00 00    	je     c0024b65 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002490b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024911:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024917:	c1 e0 04             	shl    eax,0x4
c002491a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024921:	09 c6                	or     esi,eax
c0024923:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024928:	75 05                	jne    c002492f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002492a:	83 ce a0             	or     esi,0xffffffa0
c002492d:	eb 03                	jmp    c0024932 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002492f:	83 ce e0             	or     esi,0xffffffe0
c0024932:	89 f0                	mov    eax,esi
c0024934:	0f b6 f0             	movzx  esi,al
c0024937:	56                   	push   esi
c0024938:	6a 06                	push   0x6
c002493a:	51                   	push   ecx
c002493b:	52                   	push   edx
c002493c:	e8 17 ee ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024941:	83 c4 10             	add    esp,0x10
c0024944:	6a 00                	push   0x0
c0024946:	6a 01                	push   0x1
c0024948:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002494f:	50                   	push   eax
c0024950:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024956:	e8 fd ed ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002495b:	83 c4 10             	add    esp,0x10
c002495e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024963:	75 6e                	jne    c00249d3 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024965:	6a 00                	push   0x0
c0024967:	6a 08                	push   0x8
c0024969:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024970:	50                   	push   eax
c0024971:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024977:	e8 dc ed ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002497c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024981:	50                   	push   eax
c0024982:	6a 09                	push   0x9
c0024984:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002498b:	50                   	push   eax
c002498c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024992:	e8 c1 ed ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024997:	83 c4 20             	add    esp,0x20
c002499a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002499f:	50                   	push   eax
c00249a0:	6a 0a                	push   0xa
c00249a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249a9:	50                   	push   eax
c00249aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249b0:	e8 a3 ed ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249b5:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00249ba:	50                   	push   eax
c00249bb:	6a 0b                	push   0xb
c00249bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249c4:	50                   	push   eax
c00249c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249cb:	e8 88 ed ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249d0:	83 c4 20             	add    esp,0x20
c00249d3:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00249d8:	50                   	push   eax
c00249d9:	6a 02                	push   0x2
c00249db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249e2:	50                   	push   eax
c00249e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249e9:	e8 6a ed ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249ee:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00249f3:	50                   	push   eax
c00249f4:	6a 03                	push   0x3
c00249f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249fd:	50                   	push   eax
c00249fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a04:	e8 4f ed ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a09:	83 c4 20             	add    esp,0x20
c0024a0c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024a11:	50                   	push   eax
c0024a12:	6a 04                	push   0x4
c0024a14:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a1b:	50                   	push   eax
c0024a1c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a22:	e8 31 ed ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a27:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024a2c:	50                   	push   eax
c0024a2d:	6a 05                	push   0x5
c0024a2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a36:	50                   	push   eax
c0024a37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a3d:	e8 16 ed ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a42:	83 c4 20             	add    esp,0x20
c0024a45:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024a4a:	0f 94 c0             	sete   al
c0024a4d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024a52:	74 09                	je     c0024a5d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024a54:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024a5b:	eb 07                	jmp    c0024a64 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024a5d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024a64:	0f b6 c0             	movzx  eax,al
c0024a67:	50                   	push   eax
c0024a68:	6a 07                	push   0x7
c0024a6a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a71:	50                   	push   eax
c0024a72:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a78:	e8 db ec ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a7d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024a81:	83 c4 10             	add    esp,0x10
c0024a84:	85 f6                	test   esi,esi
c0024a86:	0f 84 ba 00 00 00    	je     c0024b46 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024a8c:	50                   	push   eax
c0024a8d:	6a 01                	push   0x1
c0024a8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a96:	50                   	push   eax
c0024a97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a9d:	e8 62 f8 ff ff       	call   c0024304 <IDE::polling(unsigned char, unsigned int)>
c0024aa2:	83 c4 10             	add    esp,0x10
c0024aa5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024aab:	84 c0                	test   al,al
c0024aad:	74 2c                	je     c0024adb <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024aaf:	0f b6 f8             	movzx  edi,al
c0024ab2:	0f b6 d2             	movzx  edx,dl
c0024ab5:	57                   	push   edi
c0024ab6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024abd:	50                   	push   eax
c0024abe:	52                   	push   edx
c0024abf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ac5:	e8 a4 f6 ff ff       	call   c002416e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024aca:	c7 04 24 8c d7 02 c0 	mov    DWORD PTR [esp],0xc002d78c
c0024ad1:	e8 6f e3 fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0024ad6:	e9 87 00 00 00       	jmp    c0024b62 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024adb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024ae0:	74 33                	je     c0024b15 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024ae2:	31 ed                	xor    ebp,ebp
c0024ae4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024ae8:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024aec:	50                   	push   eax
c0024aed:	50                   	push   eax
c0024aee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024af5:	50                   	push   eax
c0024af6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024afc:	e8 45 ec ff ff       	call   c0023746 <IDE::getBase(unsigned char)>
c0024b01:	89 c2                	mov    edx,eax
c0024b03:	89 f8                	mov    eax,edi
c0024b05:	66 ef                	out    dx,ax
c0024b07:	45                   	inc    ebp
c0024b08:	83 c4 10             	add    esp,0x10
c0024b0b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024b11:	75 d1                	jne    c0024ae4 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024b13:	eb 23                	jmp    c0024b38 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024b15:	0f b6 d2             	movzx  edx,dl
c0024b18:	51                   	push   ecx
c0024b19:	51                   	push   ecx
c0024b1a:	52                   	push   edx
c0024b1b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b21:	e8 20 ec ff ff       	call   c0023746 <IDE::getBase(unsigned char)>
c0024b26:	b9 00 01 00 00       	mov    ecx,0x100
c0024b2b:	89 c2                	mov    edx,eax
c0024b2d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024b31:	fc                   	cld    
c0024b32:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024b35:	83 c4 10             	add    esp,0x10
c0024b38:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024b40:	4e                   	dec    esi
c0024b41:	e9 3e ff ff ff       	jmp    c0024a84 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024b46:	31 ff                	xor    edi,edi
c0024b48:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024b4d:	74 16                	je     c0024b65 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024b4f:	50                   	push   eax
c0024b50:	50                   	push   eax
c0024b51:	31 c0                	xor    eax,eax
c0024b53:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024b58:	0f 94 c0             	sete   al
c0024b5b:	50                   	push   eax
c0024b5c:	53                   	push   ebx
c0024b5d:	e8 ec fb ff ff       	call   c002474e <ATA::flush(bool)>
c0024b62:	83 c4 10             	add    esp,0x10
c0024b65:	83 c4 2c             	add    esp,0x2c
c0024b68:	89 f8                	mov    eax,edi
c0024b6a:	5b                   	pop    ebx
c0024b6b:	5e                   	pop    esi
c0024b6c:	5f                   	pop    edi
c0024b6d:	5d                   	pop    ebp
c0024b6e:	c3                   	ret    
c0024b6f:	90                   	nop

c0024b70 <ATA::read(unsigned long long, int, void*)>:
c0024b70:	57                   	push   edi
c0024b71:	b8 04 00 00 00       	mov    eax,0x4
c0024b76:	56                   	push   esi
c0024b77:	53                   	push   ebx
c0024b78:	83 ec 10             	sub    esp,0x10
c0024b7b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024b7f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024b83:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024b86:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024b8a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024b8e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024b94:	77 3b                	ja     c0024bd1 <ATA::read(unsigned long long, int, void*)+0x61>
c0024b96:	b8 06 00 00 00       	mov    eax,0x6
c0024b9b:	85 d2                	test   edx,edx
c0024b9d:	74 32                	je     c0024bd1 <ATA::read(unsigned long long, int, void*)+0x61>
c0024b9f:	50                   	push   eax
c0024ba0:	50                   	push   eax
c0024ba1:	6a 00                	push   0x0
c0024ba3:	52                   	push   edx
c0024ba4:	53                   	push   ebx
c0024ba5:	57                   	push   edi
c0024ba6:	56                   	push   esi
c0024ba7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024bab:	e8 38 fc ff ff       	call   c00247e8 <ATA::access(unsigned long long, int, void*, bool)>
c0024bb0:	83 c4 20             	add    esp,0x20
c0024bb3:	85 c0                	test   eax,eax
c0024bb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024bb9:	75 11                	jne    c0024bcc <ATA::read(unsigned long long, int, void*)+0x5c>
c0024bbb:	01 1d 28 31 03 c0    	add    DWORD PTR ds:0xc0033128,ebx
c0024bc1:	e8 7c bd fe ff       	call   c0010942 <VgaText::updateDiskUsage()>
c0024bc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024bca:	eb 05                	jmp    c0024bd1 <ATA::read(unsigned long long, int, void*)+0x61>
c0024bcc:	b8 01 00 00 00       	mov    eax,0x1
c0024bd1:	83 c4 10             	add    esp,0x10
c0024bd4:	5b                   	pop    ebx
c0024bd5:	5e                   	pop    esi
c0024bd6:	5f                   	pop    edi
c0024bd7:	c3                   	ret    

c0024bd8 <ATA::write(unsigned long long, int, void*)>:
c0024bd8:	57                   	push   edi
c0024bd9:	b8 04 00 00 00       	mov    eax,0x4
c0024bde:	56                   	push   esi
c0024bdf:	53                   	push   ebx
c0024be0:	83 ec 10             	sub    esp,0x10
c0024be3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024be7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024beb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024bee:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024bf2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024bf6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024bfc:	77 3b                	ja     c0024c39 <ATA::write(unsigned long long, int, void*)+0x61>
c0024bfe:	b8 06 00 00 00       	mov    eax,0x6
c0024c03:	85 d2                	test   edx,edx
c0024c05:	74 32                	je     c0024c39 <ATA::write(unsigned long long, int, void*)+0x61>
c0024c07:	50                   	push   eax
c0024c08:	50                   	push   eax
c0024c09:	6a 01                	push   0x1
c0024c0b:	52                   	push   edx
c0024c0c:	53                   	push   ebx
c0024c0d:	57                   	push   edi
c0024c0e:	56                   	push   esi
c0024c0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024c13:	e8 d0 fb ff ff       	call   c00247e8 <ATA::access(unsigned long long, int, void*, bool)>
c0024c18:	83 c4 20             	add    esp,0x20
c0024c1b:	85 c0                	test   eax,eax
c0024c1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c21:	75 11                	jne    c0024c34 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024c23:	01 1d 24 31 03 c0    	add    DWORD PTR ds:0xc0033124,ebx
c0024c29:	e8 14 bd fe ff       	call   c0010942 <VgaText::updateDiskUsage()>
c0024c2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024c32:	eb 05                	jmp    c0024c39 <ATA::write(unsigned long long, int, void*)+0x61>
c0024c34:	b8 01 00 00 00       	mov    eax,0x1
c0024c39:	83 c4 10             	add    esp,0x10
c0024c3c:	5b                   	pop    ebx
c0024c3d:	5e                   	pop    esi
c0024c3e:	5f                   	pop    edi
c0024c3f:	c3                   	ret    

c0024c40 <ATA::detectCHS()>:
c0024c40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024c44:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024c4a:	c1 e0 06             	shl    eax,0x6
c0024c4d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024c53:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024c5d:	c7 44 24 04 97 d7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d797
c0024c65:	e9 9b 5b ff ff       	jmp    c001a805 <Krnl::panic(char const*)>

c0024c6a <ATA::open(int, int, void*)>:
c0024c6a:	53                   	push   ebx
c0024c6b:	83 ec 08             	sub    esp,0x8
c0024c6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024c7a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024c80:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c86:	c1 e0 06             	shl    eax,0x6
c0024c89:	01 d0                	add    eax,edx
c0024c8b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024c92:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024c98:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024c9f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024ca9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024caf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024cb6:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024cbd:	75 0c                	jne    c0024ccb <ATA::open(int, int, void*)+0x61>
c0024cbf:	83 ec 0c             	sub    esp,0xc
c0024cc2:	53                   	push   ebx
c0024cc3:	e8 78 ff ff ff       	call   c0024c40 <ATA::detectCHS()>
c0024cc8:	83 c4 10             	add    esp,0x10
c0024ccb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024cd1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024cd7:	c1 e0 06             	shl    eax,0x6
c0024cda:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024ce1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024ceb:	d1 e8                	shr    eax,1
c0024ced:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024cf3:	6a 04                	push   0x4
c0024cf5:	6a 0c                	push   0xc
c0024cf7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cfe:	50                   	push   eax
c0024cff:	52                   	push   edx
c0024d00:	e8 53 ea ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d05:	90                   	nop
c0024d06:	90                   	nop
c0024d07:	6a 00                	push   0x0
c0024d09:	6a 0c                	push   0xc
c0024d0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d12:	50                   	push   eax
c0024d13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d19:	e8 3a ea ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d1e:	83 c4 14             	add    esp,0x14
c0024d21:	53                   	push   ebx
c0024d22:	e8 ed f9 fe ff       	call   c0014714 <PhysicalDisk::startCache()>
c0024d27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024d2a:	e8 c5 1c ff ff       	call   c00169f4 <createPartitionsForDisk(PhysicalDisk*)>
c0024d2f:	31 c0                	xor    eax,eax
c0024d31:	83 c4 18             	add    esp,0x18
c0024d34:	5b                   	pop    ebx
c0024d35:	c3                   	ret    

c0024d36 <ATAPI::write(unsigned long long, int, void*)>:
c0024d36:	b8 03 00 00 00       	mov    eax,0x3
c0024d3b:	c3                   	ret    

c0024d3c <ATAPI::close(int, int, void*)>:
c0024d3c:	83 ec 0c             	sub    esp,0xc
c0024d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d43:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024d49:	85 c0                	test   eax,eax
c0024d4b:	74 0c                	je     c0024d59 <ATAPI::close(int, int, void*)+0x1d>
c0024d4d:	83 ec 0c             	sub    esp,0xc
c0024d50:	8b 10                	mov    edx,DWORD PTR [eax]
c0024d52:	50                   	push   eax
c0024d53:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024d56:	83 c4 10             	add    esp,0x10
c0024d59:	31 c0                	xor    eax,eax
c0024d5b:	83 c4 0c             	add    esp,0xc
c0024d5e:	c3                   	ret    
c0024d5f:	90                   	nop

c0024d60 <ATAPI::ATAPI()>:
c0024d60:	83 ec 0c             	sub    esp,0xc
c0024d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d67:	83 ec 04             	sub    esp,0x4
c0024d6a:	68 00 08 00 00       	push   0x800
c0024d6f:	68 d1 d8 02 c0       	push   0xc002d8d1
c0024d74:	50                   	push   eax
c0024d75:	e8 32 f9 fe ff       	call   c00146ac <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d7a:	83 c4 10             	add    esp,0x10
c0024d7d:	ba ec d7 02 c0       	mov    edx,0xc002d7ec
c0024d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d86:	89 10                	mov    DWORD PTR [eax],edx
c0024d88:	90                   	nop
c0024d89:	83 c4 0c             	add    esp,0xc
c0024d8c:	c3                   	ret    
c0024d8d:	90                   	nop

c0024d8e <ATAPI::readyForCommand()>:
c0024d8e:	56                   	push   esi
c0024d8f:	53                   	push   ebx
c0024d90:	31 db                	xor    ebx,ebx
c0024d92:	50                   	push   eax
c0024d93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024d97:	50                   	push   eax
c0024d98:	6a 0c                	push   0xc
c0024d9a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024da1:	50                   	push   eax
c0024da2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024da8:	e8 6b ea ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0024dad:	83 c4 10             	add    esp,0x10
c0024db0:	a8 88                	test   al,0x88
c0024db2:	74 23                	je     c0024dd7 <ATAPI::readyForCommand()+0x49>
c0024db4:	43                   	inc    ebx
c0024db5:	83 fb 63             	cmp    ebx,0x63
c0024db8:	7e dd                	jle    c0024d97 <ATAPI::readyForCommand()+0x9>
c0024dba:	51                   	push   ecx
c0024dbb:	51                   	push   ecx
c0024dbc:	6a 00                	push   0x0
c0024dbe:	68 40 42 0f 00       	push   0xf4240
c0024dc3:	e8 41 99 ff ff       	call   c001e709 <nanoSleep(unsigned long long)>
c0024dc8:	83 c4 10             	add    esp,0x10
c0024dcb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024dd1:	75 c4                	jne    c0024d97 <ATAPI::readyForCommand()+0x9>
c0024dd3:	31 c0                	xor    eax,eax
c0024dd5:	eb 02                	jmp    c0024dd9 <ATAPI::readyForCommand()+0x4b>
c0024dd7:	b0 01                	mov    al,0x1
c0024dd9:	5a                   	pop    edx
c0024dda:	5b                   	pop    ebx
c0024ddb:	5e                   	pop    esi
c0024ddc:	c3                   	ret    
c0024ddd:	90                   	nop

c0024dde <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024dde:	55                   	push   ebp
c0024ddf:	57                   	push   edi
c0024de0:	56                   	push   esi
c0024de1:	53                   	push   ebx
c0024de2:	83 ec 20             	sub    esp,0x20
c0024de5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024de9:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024ded:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024df1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024df5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024df9:	6a 01                	push   0x1
c0024dfb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024e02:	50                   	push   eax
c0024e03:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024e09:	e8 56 eb ff ff       	call   c0023964 <IDE::enableIRQs(unsigned char, bool)>
c0024e0e:	5e                   	pop    esi
c0024e0f:	58                   	pop    eax
c0024e10:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024e17:	50                   	push   eax
c0024e18:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024e1e:	e8 0f e9 ff ff       	call   c0023732 <IDE::prepareInterrupt(unsigned char)>
c0024e23:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024e26:	e8 63 ff ff ff       	call   c0024d8e <ATAPI::readyForCommand()>
c0024e2b:	83 c4 10             	add    esp,0x10
c0024e2e:	84 c0                	test   al,al
c0024e30:	75 0a                	jne    c0024e3c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024e32:	bb 01 00 00 00       	mov    ebx,0x1
c0024e37:	e9 57 02 00 00       	jmp    c0025093 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024e3c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024e42:	c1 e0 04             	shl    eax,0x4
c0024e45:	0f b6 c0             	movzx  eax,al
c0024e48:	50                   	push   eax
c0024e49:	6a 06                	push   0x6
c0024e4b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024e52:	50                   	push   eax
c0024e53:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024e59:	e8 fa e8 ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e5e:	6a 00                	push   0x0
c0024e60:	6a 01                	push   0x1
c0024e62:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024e69:	50                   	push   eax
c0024e6a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024e70:	e8 e3 e8 ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e75:	83 c4 20             	add    esp,0x20
c0024e78:	0f b6 c3             	movzx  eax,bl
c0024e7b:	0f b6 df             	movzx  ebx,bh
c0024e7e:	50                   	push   eax
c0024e7f:	6a 04                	push   0x4
c0024e81:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024e88:	50                   	push   eax
c0024e89:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024e8f:	e8 c4 e8 ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e94:	53                   	push   ebx
c0024e95:	6a 05                	push   0x5
c0024e97:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024e9e:	50                   	push   eax
c0024e9f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ea5:	e8 ae e8 ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024eaa:	83 c4 20             	add    esp,0x20
c0024ead:	68 a0 00 00 00       	push   0xa0
c0024eb2:	6a 07                	push   0x7
c0024eb4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ebb:	50                   	push   eax
c0024ebc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ec2:	e8 91 e8 ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ec7:	83 c4 0c             	add    esp,0xc
c0024eca:	6a 01                	push   0x1
c0024ecc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ed3:	50                   	push   eax
c0024ed4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024eda:	e8 25 f4 ff ff       	call   c0024304 <IDE::polling(unsigned char, unsigned int)>
c0024edf:	83 c4 10             	add    esp,0x10
c0024ee2:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024ee8:	84 c0                	test   al,al
c0024eea:	74 23                	je     c0024f0f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024eec:	0f b6 d8             	movzx  ebx,al
c0024eef:	0f b6 d2             	movzx  edx,dl
c0024ef2:	53                   	push   ebx
c0024ef3:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024efa:	50                   	push   eax
c0024efb:	52                   	push   edx
c0024efc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f02:	e8 67 f2 ff ff       	call   c002416e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024f07:	83 c4 10             	add    esp,0x10
c0024f0a:	e9 84 01 00 00       	jmp    c0025093 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024f0f:	0f b6 d2             	movzx  edx,dl
c0024f12:	53                   	push   ebx
c0024f13:	53                   	push   ebx
c0024f14:	52                   	push   edx
c0024f15:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f1b:	e8 26 e8 ff ff       	call   c0023746 <IDE::getBase(unsigned char)>
c0024f20:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024f24:	b9 06 00 00 00       	mov    ecx,0x6
c0024f29:	89 c2                	mov    edx,eax
c0024f2b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024f2e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024f32:	83 c4 10             	add    esp,0x10
c0024f35:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024f3b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024f42:	85 db                	test   ebx,ebx
c0024f44:	0f 84 ec 00 00 00    	je     c0025036 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024f4a:	51                   	push   ecx
c0024f4b:	51                   	push   ecx
c0024f4c:	52                   	push   edx
c0024f4d:	50                   	push   eax
c0024f4e:	e8 73 e9 ff ff       	call   c00238c6 <IDE::waitInterrupt(unsigned char)>
c0024f53:	83 c4 10             	add    esp,0x10
c0024f56:	84 c0                	test   al,al
c0024f58:	0f 84 d4 fe ff ff    	je     c0024e32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024f5e:	56                   	push   esi
c0024f5f:	56                   	push   esi
c0024f60:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f67:	50                   	push   eax
c0024f68:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f6e:	e8 bf e7 ff ff       	call   c0023732 <IDE::prepareInterrupt(unsigned char)>
c0024f73:	83 c4 0c             	add    esp,0xc
c0024f76:	6a 04                	push   0x4
c0024f78:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f7f:	50                   	push   eax
c0024f80:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f86:	e8 8d e8 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0024f8b:	83 c4 0c             	add    esp,0xc
c0024f8e:	89 c6                	mov    esi,eax
c0024f90:	6a 05                	push   0x5
c0024f92:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f99:	50                   	push   eax
c0024f9a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fa0:	e8 73 e8 ff ff       	call   c0023818 <IDE::read(unsigned char, unsigned char)>
c0024fa5:	89 f1                	mov    ecx,esi
c0024fa7:	0f b6 c0             	movzx  eax,al
c0024faa:	0f b6 f1             	movzx  esi,cl
c0024fad:	c1 e0 08             	shl    eax,0x8
c0024fb0:	09 c6                	or     esi,eax
c0024fb2:	d1 fe                	sar    esi,1
c0024fb4:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024fb8:	83 c4 10             	add    esp,0x10
c0024fbb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024fc0:	74 41                	je     c0025003 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024fc2:	31 c9                	xor    ecx,ecx
c0024fc4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024fca:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024fd1:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024fd5:	75 0a                	jne    c0024fe1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024fd7:	01 c9                	add    ecx,ecx
c0024fd9:	01 cd                	add    ebp,ecx
c0024fdb:	4b                   	dec    ebx
c0024fdc:	e9 54 ff ff ff       	jmp    c0024f35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024fe1:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024fe6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024fea:	51                   	push   ecx
c0024feb:	51                   	push   ecx
c0024fec:	52                   	push   edx
c0024fed:	50                   	push   eax
c0024fee:	e8 53 e7 ff ff       	call   c0023746 <IDE::getBase(unsigned char)>
c0024ff3:	89 c2                	mov    edx,eax
c0024ff5:	89 f0                	mov    eax,esi
c0024ff7:	66 ef                	out    dx,ax
c0024ff9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024ffd:	83 c4 10             	add    esp,0x10
c0025000:	41                   	inc    ecx
c0025001:	eb c1                	jmp    c0024fc4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0025003:	31 f6                	xor    esi,esi
c0025005:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002500b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025012:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0025016:	75 06                	jne    c002501e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0025018:	01 f6                	add    esi,esi
c002501a:	01 f5                	add    ebp,esi
c002501c:	eb bd                	jmp    c0024fdb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002501e:	51                   	push   ecx
c002501f:	51                   	push   ecx
c0025020:	52                   	push   edx
c0025021:	50                   	push   eax
c0025022:	e8 1f e7 ff ff       	call   c0023746 <IDE::getBase(unsigned char)>
c0025027:	89 c2                	mov    edx,eax
c0025029:	66 ed                	in     ax,dx
c002502b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0025030:	83 c4 10             	add    esp,0x10
c0025033:	46                   	inc    esi
c0025034:	eb cf                	jmp    c0025005 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0025036:	51                   	push   ecx
c0025037:	51                   	push   ecx
c0025038:	52                   	push   edx
c0025039:	50                   	push   eax
c002503a:	e8 87 e8 ff ff       	call   c00238c6 <IDE::waitInterrupt(unsigned char)>
c002503f:	83 c4 10             	add    esp,0x10
c0025042:	84 c0                	test   al,al
c0025044:	0f 84 e8 fd ff ff    	je     c0024e32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002504a:	bb a0 86 01 00       	mov    ebx,0x186a0
c002504f:	52                   	push   edx
c0025050:	52                   	push   edx
c0025051:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025058:	50                   	push   eax
c0025059:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002505f:	e8 ce e6 ff ff       	call   c0023732 <IDE::prepareInterrupt(unsigned char)>
c0025064:	83 c4 10             	add    esp,0x10
c0025067:	50                   	push   eax
c0025068:	50                   	push   eax
c0025069:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025070:	50                   	push   eax
c0025071:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025077:	e8 ca e6 ff ff       	call   c0023746 <IDE::getBase(unsigned char)>
c002507c:	8d 50 07             	lea    edx,[eax+0x7]
c002507f:	ec                   	in     al,dx
c0025080:	83 c4 10             	add    esp,0x10
c0025083:	a8 88                	test   al,0x88
c0025085:	74 0a                	je     c0025091 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0025087:	4b                   	dec    ebx
c0025088:	75 dd                	jne    c0025067 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002508a:	bb 02 00 00 00       	mov    ebx,0x2
c002508f:	eb 02                	jmp    c0025093 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025091:	31 db                	xor    ebx,ebx
c0025093:	83 c4 1c             	add    esp,0x1c
c0025096:	89 d8                	mov    eax,ebx
c0025098:	5b                   	pop    ebx
c0025099:	5e                   	pop    esi
c002509a:	5f                   	pop    edi
c002509b:	5d                   	pop    ebp
c002509c:	c3                   	ret    
c002509d:	90                   	nop

c002509e <ATAPI::diskRemoved()>:
c002509e:	83 ec 18             	sub    esp,0x18
c00250a1:	68 dd d8 02 c0       	push   0xc002d8dd
c00250a6:	e8 9a dd fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00250ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250af:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00250b6:	83 c4 1c             	add    esp,0x1c
c00250b9:	c3                   	ret    

c00250ba <ATAPI::eject()>:
c00250ba:	57                   	push   edi
c00250bb:	b9 03 00 00 00       	mov    ecx,0x3
c00250c0:	53                   	push   ebx
c00250c1:	83 ec 14             	sub    esp,0x14
c00250c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00250c8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00250cc:	fc                   	cld    
c00250cd:	31 c0                	xor    eax,eax
c00250cf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00250d1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00250d6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00250db:	50                   	push   eax
c00250dc:	50                   	push   eax
c00250dd:	6a 00                	push   0x0
c00250df:	6a 00                	push   0x0
c00250e1:	6a 00                	push   0x0
c00250e3:	6a 02                	push   0x2
c00250e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00250e9:	50                   	push   eax
c00250ea:	53                   	push   ebx
c00250eb:	e8 ee fc ff ff       	call   c0024dde <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00250f0:	83 c4 14             	add    esp,0x14
c00250f3:	53                   	push   ebx
c00250f4:	e8 a5 ff ff ff       	call   c002509e <ATAPI::diskRemoved()>
c00250f9:	83 c4 24             	add    esp,0x24
c00250fc:	31 c0                	xor    eax,eax
c00250fe:	5b                   	pop    ebx
c00250ff:	5f                   	pop    edi
c0025100:	c3                   	ret    
c0025101:	90                   	nop

c0025102 <ATAPI::diskInserted()>:
c0025102:	53                   	push   ebx
c0025103:	83 ec 14             	sub    esp,0x14
c0025106:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002510a:	68 f4 d8 02 c0       	push   0xc002d8f4
c002510f:	e8 31 dd fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0025114:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002511b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002511e:	e8 f1 f5 fe ff       	call   c0014714 <PhysicalDisk::startCache()>
c0025123:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025127:	83 c4 18             	add    esp,0x18
c002512a:	5b                   	pop    ebx
c002512b:	e9 c4 18 ff ff       	jmp    c00169f4 <createPartitionsForDisk(PhysicalDisk*)>

c0025130 <ATAPI::detectMedia()>:
c0025130:	56                   	push   esi
c0025131:	53                   	push   ebx
c0025132:	83 ec 28             	sub    esp,0x28
c0025135:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025139:	6a 0c                	push   0xc
c002513b:	6a 00                	push   0x0
c002513d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025141:	56                   	push   esi
c0025142:	e8 55 b6 fd ff       	call   c000079c <memset>
c0025147:	58                   	pop    eax
c0025148:	5a                   	pop    edx
c0025149:	6a 00                	push   0x0
c002514b:	6a 00                	push   0x0
c002514d:	6a 00                	push   0x0
c002514f:	6a 00                	push   0x0
c0025151:	56                   	push   esi
c0025152:	53                   	push   ebx
c0025153:	e8 86 fc ff ff       	call   c0024dde <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025158:	83 c4 1c             	add    esp,0x1c
c002515b:	6a 0c                	push   0xc
c002515d:	6a 00                	push   0x0
c002515f:	56                   	push   esi
c0025160:	e8 37 b6 fd ff       	call   c000079c <memset>
c0025165:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002516a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002516f:	59                   	pop    ecx
c0025170:	58                   	pop    eax
c0025171:	6a 01                	push   0x1
c0025173:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0025177:	50                   	push   eax
c0025178:	6a 00                	push   0x0
c002517a:	6a 12                	push   0x12
c002517c:	56                   	push   esi
c002517d:	53                   	push   ebx
c002517e:	e8 5b fc ff ff       	call   c0024dde <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025183:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025187:	83 c4 20             	add    esp,0x20
c002518a:	83 e0 7f             	and    eax,0x7f
c002518d:	3c 70                	cmp    al,0x70
c002518f:	74 15                	je     c00251a6 <ATAPI::detectMedia()+0x76>
c0025191:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025198:	75 0c                	jne    c00251a6 <ATAPI::detectMedia()+0x76>
c002519a:	83 ec 0c             	sub    esp,0xc
c002519d:	53                   	push   ebx
c002519e:	e8 5f ff ff ff       	call   c0025102 <ATAPI::diskInserted()>
c00251a3:	83 c4 10             	add    esp,0x10
c00251a6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00251aa:	83 e0 0f             	and    eax,0xf
c00251ad:	3c 02                	cmp    al,0x2
c00251af:	75 1b                	jne    c00251cc <ATAPI::detectMedia()+0x9c>
c00251b1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00251b6:	75 2d                	jne    c00251e5 <ATAPI::detectMedia()+0xb5>
c00251b8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00251bf:	74 24                	je     c00251e5 <ATAPI::detectMedia()+0xb5>
c00251c1:	83 ec 0c             	sub    esp,0xc
c00251c4:	53                   	push   ebx
c00251c5:	e8 d4 fe ff ff       	call   c002509e <ATAPI::diskRemoved()>
c00251ca:	eb 16                	jmp    c00251e2 <ATAPI::detectMedia()+0xb2>
c00251cc:	84 c0                	test   al,al
c00251ce:	75 15                	jne    c00251e5 <ATAPI::detectMedia()+0xb5>
c00251d0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00251d7:	75 0c                	jne    c00251e5 <ATAPI::detectMedia()+0xb5>
c00251d9:	83 ec 0c             	sub    esp,0xc
c00251dc:	53                   	push   ebx
c00251dd:	e8 20 ff ff ff       	call   c0025102 <ATAPI::diskInserted()>
c00251e2:	83 c4 10             	add    esp,0x10
c00251e5:	83 c4 24             	add    esp,0x24
c00251e8:	5b                   	pop    ebx
c00251e9:	5e                   	pop    esi
c00251ea:	c3                   	ret    
c00251eb:	90                   	nop

c00251ec <ATAPI::open(int, int, void*)>:
c00251ec:	53                   	push   ebx
c00251ed:	83 ec 08             	sub    esp,0x8
c00251f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00251f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00251f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00251fc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025202:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025208:	c1 e0 06             	shl    eax,0x6
c002520b:	01 d0                	add    eax,edx
c002520d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0025214:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002521a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0025221:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002522b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025231:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025238:	6a 04                	push   0x4
c002523a:	6a 0c                	push   0xc
c002523c:	51                   	push   ecx
c002523d:	52                   	push   edx
c002523e:	e8 15 e5 ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025243:	90                   	nop
c0025244:	90                   	nop
c0025245:	6a 00                	push   0x0
c0025247:	6a 0c                	push   0xc
c0025249:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025250:	50                   	push   eax
c0025251:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025257:	e8 fc e4 ff ff       	call   c0023758 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002525c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025263:	83 c4 14             	add    esp,0x14
c0025266:	53                   	push   ebx
c0025267:	e8 c4 fe ff ff       	call   c0025130 <ATAPI::detectMedia()>
c002526c:	31 c0                	xor    eax,eax
c002526e:	83 c4 18             	add    esp,0x18
c0025271:	5b                   	pop    ebx
c0025272:	c3                   	ret    
c0025273:	90                   	nop

c0025274 <ATAPI::read(unsigned long long, int, void*)>:
c0025274:	55                   	push   ebp
c0025275:	57                   	push   edi
c0025276:	56                   	push   esi
c0025277:	53                   	push   ebx
c0025278:	83 ec 1c             	sub    esp,0x1c
c002527b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002527f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025283:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025287:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002528e:	74 41                	je     c00252d1 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0025290:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025294:	b9 03 00 00 00       	mov    ecx,0x3
c0025299:	fc                   	cld    
c002529a:	31 c0                	xor    eax,eax
c002529c:	86 fb                	xchg   bl,bh
c002529e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00252a0:	c1 c3 10             	rol    ebx,0x10
c00252a3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00252a8:	89 e8                	mov    eax,ebp
c00252aa:	86 fb                	xchg   bl,bh
c00252ac:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00252b0:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00252b4:	50                   	push   eax
c00252b5:	50                   	push   eax
c00252b6:	55                   	push   ebp
c00252b7:	c1 e5 0b             	shl    ebp,0xb
c00252ba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00252be:	6a 00                	push   0x0
c00252c0:	55                   	push   ebp
c00252c1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252c5:	50                   	push   eax
c00252c6:	56                   	push   esi
c00252c7:	e8 12 fb ff ff       	call   c0024dde <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00252cc:	83 c4 20             	add    esp,0x20
c00252cf:	eb 1a                	jmp    c00252eb <ATAPI::read(unsigned long long, int, void*)+0x77>
c00252d1:	83 ec 0c             	sub    esp,0xc
c00252d4:	56                   	push   esi
c00252d5:	e8 56 fe ff ff       	call   c0025130 <ATAPI::detectMedia()>
c00252da:	83 c4 10             	add    esp,0x10
c00252dd:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00252e4:	75 aa                	jne    c0025290 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00252e6:	b8 02 00 00 00       	mov    eax,0x2
c00252eb:	83 c4 1c             	add    esp,0x1c
c00252ee:	5b                   	pop    ebx
c00252ef:	5e                   	pop    esi
c00252f0:	5f                   	pop    edi
c00252f1:	5d                   	pop    ebp
c00252f2:	c3                   	ret    
c00252f3:	90                   	nop

c00252f4 <SATA::close(int, int, void*)>:
c00252f4:	83 ec 0c             	sub    esp,0xc
c00252f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252fb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025301:	85 c0                	test   eax,eax
c0025303:	74 0c                	je     c0025311 <SATA::close(int, int, void*)+0x1d>
c0025305:	83 ec 0c             	sub    esp,0xc
c0025308:	8b 10                	mov    edx,DWORD PTR [eax]
c002530a:	50                   	push   eax
c002530b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002530e:	83 c4 10             	add    esp,0x10
c0025311:	31 c0                	xor    eax,eax
c0025313:	83 c4 0c             	add    esp,0xc
c0025316:	c3                   	ret    
c0025317:	90                   	nop

c0025318 <SATA::powerSaving(PowerSavingLevel)>:
c0025318:	c3                   	ret    
c0025319:	90                   	nop

c002531a <SATA::open(int, int, void*)>:
c002531a:	56                   	push   esi
c002531b:	53                   	push   ebx
c002531c:	50                   	push   eax
c002531d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025321:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025325:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002532f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025335:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002533f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025343:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002534d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025353:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002535a:	e8 93 ab fe ff       	call   c000fef2 <Phys::allocatePage()>
c002535f:	89 c6                	mov    esi,eax
c0025361:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025367:	81 c6 00 10 00 00    	add    esi,0x1000
c002536d:	e8 80 ab fe ff       	call   c000fef2 <Phys::allocatePage()>
c0025372:	39 c6                	cmp    esi,eax
c0025374:	74 10                	je     c0025386 <SATA::open(int, int, void*)+0x6c>
c0025376:	83 ec 0c             	sub    esp,0xc
c0025379:	68 1c d8 02 c0       	push   0xc002d81c
c002537e:	e8 82 54 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0025383:	83 c4 10             	add    esp,0x10
c0025386:	83 ec 0c             	sub    esp,0xc
c0025389:	6a 02                	push   0x2
c002538b:	e8 a9 c6 fe ff       	call   c0011a39 <Virt::allocateKernelVirtualPages(int)>
c0025390:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025396:	e8 dd c8 fe ff       	call   c0011c78 <Virt::getAKernelVAS()>
c002539b:	6a 03                	push   0x3
c002539d:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00253a3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00253a9:	50                   	push   eax
c00253aa:	e8 c7 ce fe ff       	call   c0012276 <VAS::mapPage(unsigned long, unsigned long, int)>
c00253af:	83 c4 14             	add    esp,0x14
c00253b2:	53                   	push   ebx
c00253b3:	e8 5c f3 fe ff       	call   c0014714 <PhysicalDisk::startCache()>
c00253b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00253bb:	e8 34 16 ff ff       	call   c00169f4 <createPartitionsForDisk(PhysicalDisk*)>
c00253c0:	83 c4 14             	add    esp,0x14
c00253c3:	31 c0                	xor    eax,eax
c00253c5:	5b                   	pop    ebx
c00253c6:	5e                   	pop    esi
c00253c7:	c3                   	ret    

c00253c8 <SATA::SATA()>:
c00253c8:	83 ec 0c             	sub    esp,0xc
c00253cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253cf:	83 ec 04             	sub    esp,0x4
c00253d2:	68 00 02 00 00       	push   0x200
c00253d7:	68 30 d8 02 c0       	push   0xc002d830
c00253dc:	50                   	push   eax
c00253dd:	e8 ca f2 fe ff       	call   c00146ac <PhysicalDisk::PhysicalDisk(char const*, int)>
c00253e2:	83 c4 10             	add    esp,0x10
c00253e5:	ba a0 d8 02 c0       	mov    edx,0xc002d8a0
c00253ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253ee:	89 10                	mov    DWORD PTR [eax],edx
c00253f0:	90                   	nop
c00253f1:	83 c4 0c             	add    esp,0xc
c00253f4:	c3                   	ret    
c00253f5:	90                   	nop

c00253f6 <SATA::access(unsigned long long, int, void*, bool)>:
c00253f6:	55                   	push   ebp
c00253f7:	57                   	push   edi
c00253f8:	56                   	push   esi
c00253f9:	53                   	push   ebx
c00253fa:	83 ec 2c             	sub    esp,0x2c
c00253fd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025401:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0025405:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025409:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c002540d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0025411:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0025416:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002541a:	7e 10                	jle    c002542c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c002541c:	83 ec 0c             	sub    esp,0xc
c002541f:	68 40 d8 02 c0       	push   0xc002d840
c0025424:	e8 dc 53 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0025429:	83 c4 10             	add    esp,0x10
c002542c:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0025432:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025438:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002543e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025442:	89 f0                	mov    eax,esi
c0025444:	c1 e0 07             	shl    eax,0x7
c0025447:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002544b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025455:	53                   	push   ebx
c0025456:	8d 46 02             	lea    eax,[esi+0x2]
c0025459:	53                   	push   ebx
c002545a:	c1 e0 07             	shl    eax,0x7
c002545d:	bb 01 00 00 00       	mov    ebx,0x1
c0025462:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0025466:	50                   	push   eax
c0025467:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002546d:	e8 aa ef ff ff       	call   c002441c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025472:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0025476:	83 c4 10             	add    esp,0x10
c0025479:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c002547e:	0f 84 ce 01 00 00    	je     c0025652 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0025484:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025488:	c1 e0 09             	shl    eax,0x9
c002548b:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0025490:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025494:	74 17                	je     c00254ad <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0025496:	51                   	push   ecx
c0025497:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002549b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002549f:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00254a5:	e8 be b2 fd ff       	call   c0000768 <memcpy>
c00254aa:	83 c4 10             	add    esp,0x10
c00254ad:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00254b3:	8d 46 02             	lea    eax,[esi+0x2]
c00254b6:	c1 e0 07             	shl    eax,0x7
c00254b9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00254bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00254bf:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00254c5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00254cb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00254cf:	c1 e1 05             	shl    ecx,0x5
c00254d2:	01 c8                	add    eax,ecx
c00254d4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00254d8:	8a 18                	mov    bl,BYTE PTR [eax]
c00254da:	83 e1 01             	and    ecx,0x1
c00254dd:	83 e3 bf             	and    ebx,0xffffffbf
c00254e0:	c1 e1 06             	shl    ecx,0x6
c00254e3:	09 d9                	or     ecx,ebx
c00254e5:	88 08                	mov    BYTE PTR [eax],cl
c00254e7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00254e9:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00254ef:	81 c9 05 00 01 00    	or     ecx,0x10005
c00254f5:	89 08                	mov    DWORD PTR [eax],ecx
c00254f7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00254fd:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025503:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025509:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002550c:	52                   	push   edx
c002550d:	68 90 00 00 00       	push   0x90
c0025512:	6a 00                	push   0x0
c0025514:	53                   	push   ebx
c0025515:	e8 82 b2 fd ff       	call   c000079c <memset>
c002551a:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0025520:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0025524:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002552a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002552e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025532:	83 c4 10             	add    esp,0x10
c0025535:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025538:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002553e:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025544:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025549:	09 c8                	or     eax,ecx
c002554b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025551:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025554:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002555b:	66 25 00 7f          	and    ax,0x7f00
c002555f:	66 0d 27 80          	or     ax,0x8027
c0025563:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0025568:	66 89 03             	mov    WORD PTR [ebx],ax
c002556b:	19 c0                	sbb    eax,eax
c002556d:	83 e0 f0             	and    eax,0xfffffff0
c0025570:	83 c0 35             	add    eax,0x35
c0025573:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0025576:	89 f8                	mov    eax,edi
c0025578:	c1 e8 10             	shr    eax,0x10
c002557b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002557e:	89 f8                	mov    eax,edi
c0025580:	c1 e8 18             	shr    eax,0x18
c0025583:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0025586:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002558a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002558d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025591:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025594:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025598:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002559c:	89 f3                	mov    ebx,esi
c002559e:	31 c0                	xor    eax,eax
c00255a0:	c1 e3 07             	shl    ebx,0x7
c00255a3:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c00255a7:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c00255ad:	80 e1 88             	and    cl,0x88
c00255b0:	74 0a                	je     c00255bc <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c00255b2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00255b7:	74 0a                	je     c00255c3 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c00255b9:	40                   	inc    eax
c00255ba:	eb eb                	jmp    c00255a7 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c00255bc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00255c1:	75 0a                	jne    c00255cd <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c00255c3:	83 ec 0c             	sub    esp,0xc
c00255c6:	68 79 d8 02 c0       	push   0xc002d879
c00255cb:	eb 56                	jmp    c0025623 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c00255cd:	b8 01 00 00 00       	mov    eax,0x1
c00255d2:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c00255d6:	c1 e6 07             	shl    esi,0x7
c00255d9:	d3 e0                	shl    eax,cl
c00255db:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00255df:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c00255e5:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c00255eb:	85 c8                	test   eax,ecx
c00255ed:	74 20                	je     c002560f <SATA::access(unsigned long long, int, void*, bool)+0x219>
c00255ef:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c00255f5:	0f ba e1 1e          	bt     ecx,0x1e
c00255f9:	73 ea                	jae    c00255e5 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c00255fb:	83 ec 0c             	sub    esp,0xc
c00255fe:	31 db                	xor    ebx,ebx
c0025600:	68 87 d8 02 c0       	push   0xc002d887
c0025605:	e8 fb 51 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c002560a:	83 c4 10             	add    esp,0x10
c002560d:	eb 43                	jmp    c0025652 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c002560f:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0025615:	0f ba e0 1e          	bt     eax,0x1e
c0025619:	73 17                	jae    c0025632 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c002561b:	83 ec 0c             	sub    esp,0xc
c002561e:	68 87 d8 02 c0       	push   0xc002d887
c0025623:	e8 dd 51 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0025628:	bb 01 00 00 00       	mov    ebx,0x1
c002562d:	83 c4 10             	add    esp,0x10
c0025630:	eb 20                	jmp    c0025652 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0025632:	31 db                	xor    ebx,ebx
c0025634:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0025639:	75 17                	jne    c0025652 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c002563b:	50                   	push   eax
c002563c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025640:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0025646:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002564a:	e8 19 b1 fd ff       	call   c0000768 <memcpy>
c002564f:	83 c4 10             	add    esp,0x10
c0025652:	83 c4 2c             	add    esp,0x2c
c0025655:	89 d8                	mov    eax,ebx
c0025657:	5b                   	pop    ebx
c0025658:	5e                   	pop    esi
c0025659:	5f                   	pop    edi
c002565a:	5d                   	pop    ebp
c002565b:	c3                   	ret    

c002565c <SATA::read(unsigned long long, int, void*)>:
c002565c:	57                   	push   edi
c002565d:	b8 04 00 00 00       	mov    eax,0x4
c0025662:	56                   	push   esi
c0025663:	53                   	push   ebx
c0025664:	83 ec 10             	sub    esp,0x10
c0025667:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002566b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002566f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0025672:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025676:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002567a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0025680:	77 3b                	ja     c00256bd <SATA::read(unsigned long long, int, void*)+0x61>
c0025682:	b8 06 00 00 00       	mov    eax,0x6
c0025687:	85 d2                	test   edx,edx
c0025689:	74 32                	je     c00256bd <SATA::read(unsigned long long, int, void*)+0x61>
c002568b:	50                   	push   eax
c002568c:	50                   	push   eax
c002568d:	6a 00                	push   0x0
c002568f:	52                   	push   edx
c0025690:	53                   	push   ebx
c0025691:	57                   	push   edi
c0025692:	56                   	push   esi
c0025693:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025697:	e8 5a fd ff ff       	call   c00253f6 <SATA::access(unsigned long long, int, void*, bool)>
c002569c:	83 c4 20             	add    esp,0x20
c002569f:	85 c0                	test   eax,eax
c00256a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00256a5:	75 11                	jne    c00256b8 <SATA::read(unsigned long long, int, void*)+0x5c>
c00256a7:	01 1d 28 31 03 c0    	add    DWORD PTR ds:0xc0033128,ebx
c00256ad:	e8 90 b2 fe ff       	call   c0010942 <VgaText::updateDiskUsage()>
c00256b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00256b6:	eb 05                	jmp    c00256bd <SATA::read(unsigned long long, int, void*)+0x61>
c00256b8:	b8 01 00 00 00       	mov    eax,0x1
c00256bd:	83 c4 10             	add    esp,0x10
c00256c0:	5b                   	pop    ebx
c00256c1:	5e                   	pop    esi
c00256c2:	5f                   	pop    edi
c00256c3:	c3                   	ret    

c00256c4 <SATA::write(unsigned long long, int, void*)>:
c00256c4:	55                   	push   ebp
c00256c5:	b8 04 00 00 00       	mov    eax,0x4
c00256ca:	57                   	push   edi
c00256cb:	56                   	push   esi
c00256cc:	53                   	push   ebx
c00256cd:	83 ec 1c             	sub    esp,0x1c
c00256d0:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00256d4:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00256d8:	8d 75 ff             	lea    esi,[ebp-0x1]
c00256db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00256df:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00256e3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00256e9:	77 56                	ja     c0025741 <SATA::write(unsigned long long, int, void*)+0x7d>
c00256eb:	b8 06 00 00 00       	mov    eax,0x6
c00256f0:	85 ff                	test   edi,edi
c00256f2:	74 4d                	je     c0025741 <SATA::write(unsigned long long, int, void*)+0x7d>
c00256f4:	89 ee                	mov    esi,ebp
c00256f6:	c1 e6 09             	shl    esi,0x9
c00256f9:	01 fe                	add    esi,edi
c00256fb:	89 c8                	mov    eax,ecx
c00256fd:	89 da                	mov    edx,ebx
c00256ff:	83 c0 01             	add    eax,0x1
c0025702:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025706:	83 d2 00             	adc    edx,0x0
c0025709:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002570d:	50                   	push   eax
c002570e:	50                   	push   eax
c002570f:	6a 01                	push   0x1
c0025711:	57                   	push   edi
c0025712:	81 c7 00 02 00 00    	add    edi,0x200
c0025718:	6a 01                	push   0x1
c002571a:	53                   	push   ebx
c002571b:	51                   	push   ecx
c002571c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025720:	e8 d1 fc ff ff       	call   c00253f6 <SATA::access(unsigned long long, int, void*, bool)>
c0025725:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025729:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002572d:	83 c4 20             	add    esp,0x20
c0025730:	39 f7                	cmp    edi,esi
c0025732:	75 c7                	jne    c00256fb <SATA::write(unsigned long long, int, void*)+0x37>
c0025734:	01 2d 24 31 03 c0    	add    DWORD PTR ds:0xc0033124,ebp
c002573a:	e8 03 b2 fe ff       	call   c0010942 <VgaText::updateDiskUsage()>
c002573f:	31 c0                	xor    eax,eax
c0025741:	83 c4 1c             	add    esp,0x1c
c0025744:	5b                   	pop    ebx
c0025745:	5e                   	pop    esi
c0025746:	5f                   	pop    edi
c0025747:	5d                   	pop    ebp
c0025748:	c3                   	ret    
c0025749:	90                   	nop

c002574a <SATAPI::write(unsigned long long, int, void*)>:
c002574a:	b8 03 00 00 00       	mov    eax,0x3
c002574f:	c3                   	ret    

c0025750 <SATAPI::close(int, int, void*)>:
c0025750:	83 ec 0c             	sub    esp,0xc
c0025753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025757:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002575d:	85 c0                	test   eax,eax
c002575f:	74 0c                	je     c002576d <SATAPI::close(int, int, void*)+0x1d>
c0025761:	83 ec 0c             	sub    esp,0xc
c0025764:	8b 10                	mov    edx,DWORD PTR [eax]
c0025766:	50                   	push   eax
c0025767:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002576a:	83 c4 10             	add    esp,0x10
c002576d:	31 c0                	xor    eax,eax
c002576f:	83 c4 0c             	add    esp,0xc
c0025772:	c3                   	ret    
c0025773:	90                   	nop

c0025774 <SATAPI::SATAPI()>:
c0025774:	83 ec 0c             	sub    esp,0xc
c0025777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002577b:	83 ec 04             	sub    esp,0x4
c002577e:	68 00 08 00 00       	push   0x800
c0025783:	68 d0 d8 02 c0       	push   0xc002d8d0
c0025788:	50                   	push   eax
c0025789:	e8 1e ef fe ff       	call   c00146ac <PhysicalDisk::PhysicalDisk(char const*, int)>
c002578e:	83 c4 10             	add    esp,0x10
c0025791:	ba 7c d9 02 c0       	mov    edx,0xc002d97c
c0025796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002579a:	89 10                	mov    DWORD PTR [eax],edx
c002579c:	90                   	nop
c002579d:	83 c4 0c             	add    esp,0xc
c00257a0:	c3                   	ret    
c00257a1:	90                   	nop

c00257a2 <SATAPI::diskRemoved()>:
c00257a2:	83 ec 18             	sub    esp,0x18
c00257a5:	68 dc d8 02 c0       	push   0xc002d8dc
c00257aa:	e8 96 d6 fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00257af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00257b3:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00257ba:	83 c4 1c             	add    esp,0x1c
c00257bd:	c3                   	ret    

c00257be <SATAPI::diskInserted()>:
c00257be:	53                   	push   ebx
c00257bf:	83 ec 14             	sub    esp,0x14
c00257c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00257c6:	68 f3 d8 02 c0       	push   0xc002d8f3
c00257cb:	e8 75 d6 fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00257d0:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00257d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00257da:	e8 35 ef fe ff       	call   c0014714 <PhysicalDisk::startCache()>
c00257df:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00257e3:	83 c4 18             	add    esp,0x18
c00257e6:	5b                   	pop    ebx
c00257e7:	e9 08 12 ff ff       	jmp    c00169f4 <createPartitionsForDisk(PhysicalDisk*)>

c00257ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00257ec:	55                   	push   ebp
c00257ed:	57                   	push   edi
c00257ee:	56                   	push   esi
c00257ef:	53                   	push   ebx
c00257f0:	83 ec 24             	sub    esp,0x24
c00257f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00257f7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00257fb:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025801:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025805:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025809:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002580f:	8d 5f 02             	lea    ebx,[edi+0x2]
c0025812:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025818:	c1 e3 07             	shl    ebx,0x7
c002581b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002581f:	89 f8                	mov    eax,edi
c0025821:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0025825:	c1 e0 07             	shl    eax,0x7
c0025828:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002582c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025830:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002583a:	53                   	push   ebx
c002583b:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0025841:	e8 d6 eb ff ff       	call   c002441c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025846:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002584a:	83 c4 10             	add    esp,0x10
c002584d:	b8 01 00 00 00       	mov    eax,0x1
c0025852:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025857:	0f 84 8a 01 00 00    	je     c00259e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002585d:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025863:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025865:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002586b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025871:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025875:	c1 e1 05             	shl    ecx,0x5
c0025878:	01 c8                	add    eax,ecx
c002587a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002587c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025882:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025888:	89 08                	mov    DWORD PTR [eax],ecx
c002588a:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025890:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025896:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002589c:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002589f:	52                   	push   edx
c00258a0:	68 90 00 00 00       	push   0x90
c00258a5:	6a 00                	push   0x0
c00258a7:	53                   	push   ebx
c00258a8:	e8 ef ae fd ff       	call   c000079c <memset>
c00258ad:	83 c4 0c             	add    esp,0xc
c00258b0:	8d 43 40             	lea    eax,[ebx+0x40]
c00258b3:	6a 0c                	push   0xc
c00258b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00258b9:	50                   	push   eax
c00258ba:	e8 a9 ae fd ff       	call   c0000768 <memcpy>
c00258bf:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00258c5:	89 ea                	mov    edx,ebp
c00258c7:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00258cd:	c1 ea 18             	shr    edx,0x18
c00258d0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00258d4:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00258d7:	8d 48 ff             	lea    ecx,[eax-0x1]
c00258da:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00258de:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00258e4:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00258ea:	25 00 00 c0 ff       	and    eax,0xffc00000
c00258ef:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00258f3:	09 c8                	or     eax,ecx
c00258f5:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00258f9:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00258ff:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025902:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025909:	66 25 00 7f          	and    ax,0x7f00
c002590d:	66 0d 27 80          	or     ax,0x8027
c0025911:	66 89 03             	mov    WORD PTR [ebx],ax
c0025914:	89 e8                	mov    eax,ebp
c0025916:	c1 e8 10             	shr    eax,0x10
c0025919:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002591c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025920:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025923:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025927:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002592a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002592e:	83 c4 10             	add    esp,0x10
c0025931:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025935:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025939:	31 c0                	xor    eax,eax
c002593b:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0025941:	80 e1 88             	and    cl,0x88
c0025944:	74 0a                	je     c0025950 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025946:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002594b:	74 0a                	je     c0025957 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002594d:	40                   	inc    eax
c002594e:	eb eb                	jmp    c002593b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0025950:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025955:	75 0f                	jne    c0025966 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025957:	83 ec 0c             	sub    esp,0xc
c002595a:	68 79 d8 02 c0       	push   0xc002d879
c002595f:	e8 a1 4e ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0025964:	eb 3a                	jmp    c00259a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025966:	b8 01 00 00 00       	mov    eax,0x1
c002596b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002596f:	c1 e7 07             	shl    edi,0x7
c0025972:	d3 e0                	shl    eax,cl
c0025974:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025977:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c002597d:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025983:	85 d0                	test   eax,edx
c0025985:	74 23                	je     c00259aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025987:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c002598d:	0f ba e2 1e          	bt     edx,0x1e
c0025991:	73 ea                	jae    c002597d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025993:	83 ec 0c             	sub    esp,0xc
c0025996:	68 0b d9 02 c0       	push   0xc002d90b
c002599b:	e8 a5 d4 fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00259a0:	83 c4 10             	add    esp,0x10
c00259a3:	b8 01 00 00 00       	mov    eax,0x1
c00259a8:	eb 3d                	jmp    c00259e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00259aa:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00259b0:	0f ba e0 1e          	bt     eax,0x1e
c00259b4:	73 0a                	jae    c00259c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00259b6:	83 ec 0c             	sub    esp,0xc
c00259b9:	68 1e d9 02 c0       	push   0xc002d91e
c00259be:	eb db                	jmp    c002599b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00259c0:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00259c5:	74 1e                	je     c00259e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00259c7:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00259cc:	74 17                	je     c00259e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00259ce:	50                   	push   eax
c00259cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00259d3:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00259d9:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00259dd:	e8 86 ad fd ff       	call   c0000768 <memcpy>
c00259e2:	83 c4 10             	add    esp,0x10
c00259e5:	31 c0                	xor    eax,eax
c00259e7:	83 c4 1c             	add    esp,0x1c
c00259ea:	5b                   	pop    ebx
c00259eb:	5e                   	pop    esi
c00259ec:	5f                   	pop    edi
c00259ed:	5d                   	pop    ebp
c00259ee:	c3                   	ret    
c00259ef:	90                   	nop

c00259f0 <SATAPI::eject()>:
c00259f0:	57                   	push   edi
c00259f1:	b9 03 00 00 00       	mov    ecx,0x3
c00259f6:	53                   	push   ebx
c00259f7:	83 ec 14             	sub    esp,0x14
c00259fa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00259fe:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025a02:	fc                   	cld    
c0025a03:	31 c0                	xor    eax,eax
c0025a05:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025a07:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025a0c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025a11:	50                   	push   eax
c0025a12:	6a 00                	push   0x0
c0025a14:	6a 00                	push   0x0
c0025a16:	6a 00                	push   0x0
c0025a18:	6a 00                	push   0x0
c0025a1a:	6a 02                	push   0x2
c0025a1c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025a20:	50                   	push   eax
c0025a21:	53                   	push   ebx
c0025a22:	e8 c5 fd ff ff       	call   c00257ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025a27:	83 c4 14             	add    esp,0x14
c0025a2a:	53                   	push   ebx
c0025a2b:	e8 72 fd ff ff       	call   c00257a2 <SATAPI::diskRemoved()>
c0025a30:	83 c4 24             	add    esp,0x24
c0025a33:	31 c0                	xor    eax,eax
c0025a35:	5b                   	pop    ebx
c0025a36:	5f                   	pop    edi
c0025a37:	c3                   	ret    

c0025a38 <SATAPI::detectMedia()>:
c0025a38:	56                   	push   esi
c0025a39:	53                   	push   ebx
c0025a3a:	83 ec 28             	sub    esp,0x28
c0025a3d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025a41:	6a 0c                	push   0xc
c0025a43:	6a 00                	push   0x0
c0025a45:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025a49:	56                   	push   esi
c0025a4a:	e8 4d ad fd ff       	call   c000079c <memset>
c0025a4f:	83 c4 0c             	add    esp,0xc
c0025a52:	6a 00                	push   0x0
c0025a54:	6a 00                	push   0x0
c0025a56:	6a 00                	push   0x0
c0025a58:	6a 00                	push   0x0
c0025a5a:	6a 00                	push   0x0
c0025a5c:	56                   	push   esi
c0025a5d:	53                   	push   ebx
c0025a5e:	e8 89 fd ff ff       	call   c00257ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025a63:	83 c4 1c             	add    esp,0x1c
c0025a66:	6a 0c                	push   0xc
c0025a68:	6a 00                	push   0x0
c0025a6a:	56                   	push   esi
c0025a6b:	e8 2c ad fd ff       	call   c000079c <memset>
c0025a70:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025a75:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025a7a:	83 c4 0c             	add    esp,0xc
c0025a7d:	6a 01                	push   0x1
c0025a7f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025a83:	50                   	push   eax
c0025a84:	6a 00                	push   0x0
c0025a86:	6a 00                	push   0x0
c0025a88:	6a 12                	push   0x12
c0025a8a:	56                   	push   esi
c0025a8b:	53                   	push   ebx
c0025a8c:	e8 5b fd ff ff       	call   c00257ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025a91:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025a95:	83 c4 20             	add    esp,0x20
c0025a98:	83 e0 7f             	and    eax,0x7f
c0025a9b:	3c 70                	cmp    al,0x70
c0025a9d:	74 15                	je     c0025ab4 <SATAPI::detectMedia()+0x7c>
c0025a9f:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025aa6:	75 0c                	jne    c0025ab4 <SATAPI::detectMedia()+0x7c>
c0025aa8:	83 ec 0c             	sub    esp,0xc
c0025aab:	53                   	push   ebx
c0025aac:	e8 0d fd ff ff       	call   c00257be <SATAPI::diskInserted()>
c0025ab1:	83 c4 10             	add    esp,0x10
c0025ab4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025ab8:	83 e0 0f             	and    eax,0xf
c0025abb:	3c 02                	cmp    al,0x2
c0025abd:	75 1b                	jne    c0025ada <SATAPI::detectMedia()+0xa2>
c0025abf:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025ac4:	75 2d                	jne    c0025af3 <SATAPI::detectMedia()+0xbb>
c0025ac6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025acd:	74 24                	je     c0025af3 <SATAPI::detectMedia()+0xbb>
c0025acf:	83 ec 0c             	sub    esp,0xc
c0025ad2:	53                   	push   ebx
c0025ad3:	e8 ca fc ff ff       	call   c00257a2 <SATAPI::diskRemoved()>
c0025ad8:	eb 16                	jmp    c0025af0 <SATAPI::detectMedia()+0xb8>
c0025ada:	84 c0                	test   al,al
c0025adc:	75 15                	jne    c0025af3 <SATAPI::detectMedia()+0xbb>
c0025ade:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025ae5:	75 0c                	jne    c0025af3 <SATAPI::detectMedia()+0xbb>
c0025ae7:	83 ec 0c             	sub    esp,0xc
c0025aea:	53                   	push   ebx
c0025aeb:	e8 ce fc ff ff       	call   c00257be <SATAPI::diskInserted()>
c0025af0:	83 c4 10             	add    esp,0x10
c0025af3:	83 c4 24             	add    esp,0x24
c0025af6:	5b                   	pop    ebx
c0025af7:	5e                   	pop    esi
c0025af8:	c3                   	ret    
c0025af9:	90                   	nop

c0025afa <SATAPI::open(int, int, void*)>:
c0025afa:	56                   	push   esi
c0025afb:	53                   	push   ebx
c0025afc:	50                   	push   eax
c0025afd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025b01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b05:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025b0f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025b15:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025b1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025b23:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025b2d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025b33:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025b3a:	e8 b3 a3 fe ff       	call   c000fef2 <Phys::allocatePage()>
c0025b3f:	89 c6                	mov    esi,eax
c0025b41:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025b47:	81 c6 00 10 00 00    	add    esi,0x1000
c0025b4d:	e8 a0 a3 fe ff       	call   c000fef2 <Phys::allocatePage()>
c0025b52:	39 c6                	cmp    esi,eax
c0025b54:	74 10                	je     c0025b66 <SATAPI::open(int, int, void*)+0x6c>
c0025b56:	83 ec 0c             	sub    esp,0xc
c0025b59:	68 33 d9 02 c0       	push   0xc002d933
c0025b5e:	e8 a2 4c ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0025b63:	83 c4 10             	add    esp,0x10
c0025b66:	83 ec 0c             	sub    esp,0xc
c0025b69:	6a 02                	push   0x2
c0025b6b:	e8 c9 be fe ff       	call   c0011a39 <Virt::allocateKernelVirtualPages(int)>
c0025b70:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025b76:	e8 fd c0 fe ff       	call   c0011c78 <Virt::getAKernelVAS()>
c0025b7b:	6a 03                	push   0x3
c0025b7d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025b83:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025b89:	50                   	push   eax
c0025b8a:	e8 e7 c6 fe ff       	call   c0012276 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025b8f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025b96:	83 c4 14             	add    esp,0x14
c0025b99:	53                   	push   ebx
c0025b9a:	e8 99 fe ff ff       	call   c0025a38 <SATAPI::detectMedia()>
c0025b9f:	83 c4 14             	add    esp,0x14
c0025ba2:	31 c0                	xor    eax,eax
c0025ba4:	5b                   	pop    ebx
c0025ba5:	5e                   	pop    esi
c0025ba6:	c3                   	ret    
c0025ba7:	90                   	nop

c0025ba8 <SATAPI::read(unsigned long long, int, void*)>:
c0025ba8:	55                   	push   ebp
c0025ba9:	57                   	push   edi
c0025baa:	56                   	push   esi
c0025bab:	53                   	push   ebx
c0025bac:	83 ec 1c             	sub    esp,0x1c
c0025baf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025bb3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025bb7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025bbb:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025bc2:	74 19                	je     c0025bdd <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025bc4:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025bc9:	7e 2e                	jle    c0025bf9 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025bcb:	83 ec 0c             	sub    esp,0xc
c0025bce:	68 49 d9 02 c0       	push   0xc002d949
c0025bd3:	e8 2d 4c ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0025bd8:	83 c4 10             	add    esp,0x10
c0025bdb:	eb 1c                	jmp    c0025bf9 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025bdd:	83 ec 0c             	sub    esp,0xc
c0025be0:	55                   	push   ebp
c0025be1:	e8 52 fe ff ff       	call   c0025a38 <SATAPI::detectMedia()>
c0025be6:	83 c4 10             	add    esp,0x10
c0025be9:	b8 02 00 00 00       	mov    eax,0x2
c0025bee:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025bf5:	75 cd                	jne    c0025bc4 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025bf7:	eb 49                	jmp    c0025c42 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025bf9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025bfd:	b9 03 00 00 00       	mov    ecx,0x3
c0025c02:	fc                   	cld    
c0025c03:	31 c0                	xor    eax,eax
c0025c05:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025c07:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025c0c:	89 d8                	mov    eax,ebx
c0025c0e:	86 e0                	xchg   al,ah
c0025c10:	c1 c0 10             	rol    eax,0x10
c0025c13:	86 e0                	xchg   al,ah
c0025c15:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025c19:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025c1d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025c21:	50                   	push   eax
c0025c22:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025c26:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025c2a:	56                   	push   esi
c0025c2b:	53                   	push   ebx
c0025c2c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025c30:	c1 e0 0b             	shl    eax,0xb
c0025c33:	50                   	push   eax
c0025c34:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025c38:	50                   	push   eax
c0025c39:	55                   	push   ebp
c0025c3a:	e8 ad fb ff ff       	call   c00257ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025c3f:	83 c4 20             	add    esp,0x20
c0025c42:	83 c4 1c             	add    esp,0x1c
c0025c45:	5b                   	pop    ebx
c0025c46:	5e                   	pop    esi
c0025c47:	5f                   	pop    edi
c0025c48:	5d                   	pop    ebp
c0025c49:	c3                   	ret    

c0025c4a <AVX::open(int, int, void*)>:
c0025c4a:	83 ec 0c             	sub    esp,0xc
c0025c4d:	e8 46 11 00 00       	call   c0026d98 <avxInit>
c0025c52:	b8 00 00 00 00       	mov    eax,0x0
c0025c57:	83 c4 0c             	add    esp,0xc
c0025c5a:	c3                   	ret    
c0025c5b:	90                   	nop

c0025c5c <AVX::close(int, int, void*)>:
c0025c5c:	83 ec 0c             	sub    esp,0xc
c0025c5f:	e8 35 11 00 00       	call   c0026d99 <avxClose>
c0025c64:	b8 00 00 00 00       	mov    eax,0x0
c0025c69:	83 c4 0c             	add    esp,0xc
c0025c6c:	c3                   	ret    
c0025c6d:	90                   	nop

c0025c6e <AVX::available()>:
c0025c6e:	83 ec 0c             	sub    esp,0xc
c0025c71:	e8 1a 11 00 00       	call   c0026d90 <avxDetect>
c0025c76:	85 c0                	test   eax,eax
c0025c78:	0f 95 c0             	setne  al
c0025c7b:	83 c4 0c             	add    esp,0xc
c0025c7e:	c3                   	ret    
c0025c7f:	90                   	nop

c0025c80 <AVX::save(void*)>:
c0025c80:	83 ec 0c             	sub    esp,0xc
c0025c83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025c87:	83 ec 0c             	sub    esp,0xc
c0025c8a:	50                   	push   eax
c0025c8b:	e8 06 11 00 00       	call   c0026d96 <avxSave>
c0025c90:	83 c4 10             	add    esp,0x10
c0025c93:	90                   	nop
c0025c94:	83 c4 0c             	add    esp,0xc
c0025c97:	c3                   	ret    

c0025c98 <AVX::load(void*)>:
c0025c98:	83 ec 0c             	sub    esp,0xc
c0025c9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025c9f:	83 ec 0c             	sub    esp,0xc
c0025ca2:	50                   	push   eax
c0025ca3:	e8 ef 10 00 00       	call   c0026d97 <avxLoad>
c0025ca8:	83 c4 10             	add    esp,0x10
c0025cab:	90                   	nop
c0025cac:	83 c4 0c             	add    esp,0xc
c0025caf:	c3                   	ret    

c0025cb0 <AVX::AVX()>:
c0025cb0:	83 ec 0c             	sub    esp,0xc
c0025cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cb7:	83 ec 08             	sub    esp,0x8
c0025cba:	68 ac d9 02 c0       	push   0xc002d9ac
c0025cbf:	50                   	push   eax
c0025cc0:	e8 c5 ea fe ff       	call   c001478a <FPU::FPU(char const*)>
c0025cc5:	83 c4 10             	add    esp,0x10
c0025cc8:	ba bc d9 02 c0       	mov    edx,0xc002d9bc
c0025ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cd1:	89 10                	mov    DWORD PTR [eax],edx
c0025cd3:	90                   	nop
c0025cd4:	83 c4 0c             	add    esp,0xc
c0025cd7:	c3                   	ret    

c0025cd8 <MMX::available()>:
c0025cd8:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0025cdd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025ce3:	83 e0 20             	and    eax,0x20
c0025ce6:	84 c0                	test   al,al
c0025ce8:	0f 95 c0             	setne  al
c0025ceb:	c3                   	ret    

c0025cec <MMX::open(int, int, void*)>:
c0025cec:	83 ec 0c             	sub    esp,0xc
c0025cef:	e8 2e 11 00 00       	call   c0026e22 <x87Init>
c0025cf4:	b8 00 00 00 00       	mov    eax,0x0
c0025cf9:	83 c4 0c             	add    esp,0xc
c0025cfc:	c3                   	ret    
c0025cfd:	90                   	nop

c0025cfe <MMX::close(int, int, void*)>:
c0025cfe:	83 ec 0c             	sub    esp,0xc
c0025d01:	e8 36 11 00 00       	call   c0026e3c <x87Close>
c0025d06:	b8 00 00 00 00       	mov    eax,0x0
c0025d0b:	83 c4 0c             	add    esp,0xc
c0025d0e:	c3                   	ret    
c0025d0f:	90                   	nop

c0025d10 <MMX::save(void*)>:
c0025d10:	83 ec 0c             	sub    esp,0xc
c0025d13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d17:	83 ec 0c             	sub    esp,0xc
c0025d1a:	50                   	push   eax
c0025d1b:	e8 f1 10 00 00       	call   c0026e11 <x87Save>
c0025d20:	83 c4 10             	add    esp,0x10
c0025d23:	90                   	nop
c0025d24:	83 c4 0c             	add    esp,0xc
c0025d27:	c3                   	ret    

c0025d28 <MMX::load(void*)>:
c0025d28:	83 ec 0c             	sub    esp,0xc
c0025d2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d2f:	83 ec 0c             	sub    esp,0xc
c0025d32:	50                   	push   eax
c0025d33:	e8 e2 10 00 00       	call   c0026e1a <x87Load>
c0025d38:	83 c4 10             	add    esp,0x10
c0025d3b:	90                   	nop
c0025d3c:	83 c4 0c             	add    esp,0xc
c0025d3f:	c3                   	ret    

c0025d40 <MMX::MMX()>:
c0025d40:	83 ec 0c             	sub    esp,0xc
c0025d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d47:	83 ec 08             	sub    esp,0x8
c0025d4a:	68 ec d9 02 c0       	push   0xc002d9ec
c0025d4f:	50                   	push   eax
c0025d50:	e8 35 ea fe ff       	call   c001478a <FPU::FPU(char const*)>
c0025d55:	83 c4 10             	add    esp,0x10
c0025d58:	ba fc d9 02 c0       	mov    edx,0xc002d9fc
c0025d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d61:	89 10                	mov    DWORD PTR [eax],edx
c0025d63:	90                   	nop
c0025d64:	83 c4 0c             	add    esp,0xc
c0025d67:	c3                   	ret    

c0025d68 <SSE::open(int, int, void*)>:
c0025d68:	83 ec 0c             	sub    esp,0xc
c0025d6b:	e8 64 10 00 00       	call   c0026dd4 <sseInit>
c0025d70:	b8 00 00 00 00       	mov    eax,0x0
c0025d75:	83 c4 0c             	add    esp,0xc
c0025d78:	c3                   	ret    
c0025d79:	90                   	nop

c0025d7a <SSE::close(int, int, void*)>:
c0025d7a:	83 ec 0c             	sub    esp,0xc
c0025d7d:	e8 62 10 00 00       	call   c0026de4 <sseClose>
c0025d82:	b8 00 00 00 00       	mov    eax,0x0
c0025d87:	83 c4 0c             	add    esp,0xc
c0025d8a:	c3                   	ret    
c0025d8b:	90                   	nop

c0025d8c <SSE::available()>:
c0025d8c:	83 ec 1c             	sub    esp,0x1c
c0025d8f:	e8 1c 10 00 00       	call   c0026db0 <absolutelyNoChanceInHell>
c0025d94:	85 c0                	test   eax,eax
c0025d96:	0f 95 c0             	setne  al
c0025d99:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025d9d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025da1:	83 c4 1c             	add    esp,0x1c
c0025da4:	c3                   	ret    
c0025da5:	90                   	nop

c0025da6 <SSE::save(void*)>:
c0025da6:	83 ec 0c             	sub    esp,0xc
c0025da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025dad:	83 ec 0c             	sub    esp,0xc
c0025db0:	50                   	push   eax
c0025db1:	e8 12 10 00 00       	call   c0026dc8 <sseSave>
c0025db6:	83 c4 10             	add    esp,0x10
c0025db9:	90                   	nop
c0025dba:	83 c4 0c             	add    esp,0xc
c0025dbd:	c3                   	ret    

c0025dbe <SSE::load(void*)>:
c0025dbe:	83 ec 0c             	sub    esp,0xc
c0025dc1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025dc5:	83 ec 0c             	sub    esp,0xc
c0025dc8:	50                   	push   eax
c0025dc9:	e8 00 10 00 00       	call   c0026dce <sseLoad>
c0025dce:	83 c4 10             	add    esp,0x10
c0025dd1:	90                   	nop
c0025dd2:	83 c4 0c             	add    esp,0xc
c0025dd5:	c3                   	ret    

c0025dd6 <SSE::SSE()>:
c0025dd6:	83 ec 0c             	sub    esp,0xc
c0025dd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ddd:	83 ec 08             	sub    esp,0x8
c0025de0:	68 2c da 02 c0       	push   0xc002da2c
c0025de5:	50                   	push   eax
c0025de6:	e8 9f e9 fe ff       	call   c001478a <FPU::FPU(char const*)>
c0025deb:	83 c4 10             	add    esp,0x10
c0025dee:	ba 3c da 02 c0       	mov    edx,0xc002da3c
c0025df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025df7:	89 10                	mov    DWORD PTR [eax],edx
c0025df9:	90                   	nop
c0025dfa:	83 c4 0c             	add    esp,0xc
c0025dfd:	c3                   	ret    

c0025dfe <x87::open(int, int, void*)>:
c0025dfe:	83 ec 0c             	sub    esp,0xc
c0025e01:	e8 1c 10 00 00       	call   c0026e22 <x87Init>
c0025e06:	b8 00 00 00 00       	mov    eax,0x0
c0025e0b:	83 c4 0c             	add    esp,0xc
c0025e0e:	c3                   	ret    
c0025e0f:	90                   	nop

c0025e10 <x87::close(int, int, void*)>:
c0025e10:	83 ec 0c             	sub    esp,0xc
c0025e13:	e8 24 10 00 00       	call   c0026e3c <x87Close>
c0025e18:	b8 00 00 00 00       	mov    eax,0x0
c0025e1d:	83 c4 0c             	add    esp,0xc
c0025e20:	c3                   	ret    
c0025e21:	90                   	nop

c0025e22 <x87::available()>:
c0025e22:	83 ec 0c             	sub    esp,0xc
c0025e25:	e8 cc 0f 00 00       	call   c0026df6 <x87Detect>
c0025e2a:	85 c0                	test   eax,eax
c0025e2c:	0f 95 c0             	setne  al
c0025e2f:	83 c4 0c             	add    esp,0xc
c0025e32:	c3                   	ret    
c0025e33:	90                   	nop

c0025e34 <x87::save(void*)>:
c0025e34:	83 ec 0c             	sub    esp,0xc
c0025e37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e3b:	83 ec 0c             	sub    esp,0xc
c0025e3e:	50                   	push   eax
c0025e3f:	e8 cd 0f 00 00       	call   c0026e11 <x87Save>
c0025e44:	83 c4 10             	add    esp,0x10
c0025e47:	90                   	nop
c0025e48:	83 c4 0c             	add    esp,0xc
c0025e4b:	c3                   	ret    

c0025e4c <x87::load(void*)>:
c0025e4c:	83 ec 0c             	sub    esp,0xc
c0025e4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e53:	83 ec 0c             	sub    esp,0xc
c0025e56:	50                   	push   eax
c0025e57:	e8 be 0f 00 00       	call   c0026e1a <x87Load>
c0025e5c:	83 c4 10             	add    esp,0x10
c0025e5f:	90                   	nop
c0025e60:	83 c4 0c             	add    esp,0xc
c0025e63:	c3                   	ret    

c0025e64 <x87::x87()>:
c0025e64:	83 ec 0c             	sub    esp,0xc
c0025e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e6b:	83 ec 08             	sub    esp,0x8
c0025e6e:	68 6c da 02 c0       	push   0xc002da6c
c0025e73:	50                   	push   eax
c0025e74:	e8 11 e9 fe ff       	call   c001478a <FPU::FPU(char const*)>
c0025e79:	83 c4 10             	add    esp,0x10
c0025e7c:	ba 7c da 02 c0       	mov    edx,0xc002da7c
c0025e81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e85:	89 10                	mov    DWORD PTR [eax],edx
c0025e87:	90                   	nop
c0025e88:	83 c4 0c             	add    esp,0xc
c0025e8b:	c3                   	ret    

c0025e8c <APIC::disable()>:
c0025e8c:	90                   	nop
c0025e8d:	c3                   	ret    

c0025e8e <APIC::close(int, int, void*)>:
c0025e8e:	55                   	push   ebp
c0025e8f:	89 e5                	mov    ebp,esp
c0025e91:	83 ec 08             	sub    esp,0x8
c0025e94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e97:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e99:	83 c0 3c             	add    eax,0x3c
c0025e9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e9e:	83 ec 0c             	sub    esp,0xc
c0025ea1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ea4:	ff d0                	call   eax
c0025ea6:	83 c4 10             	add    esp,0x10
c0025ea9:	b8 00 00 00 00       	mov    eax,0x0
c0025eae:	c9                   	leave  
c0025eaf:	c3                   	ret    

c0025eb0 <IOAPIC::close(int, int, void*)>:
c0025eb0:	b8 00 00 00 00       	mov    eax,0x0
c0025eb5:	c3                   	ret    

c0025eb6 <APIC::io_wait()>:
c0025eb6:	eb 00                	jmp    c0025eb8 <APIC::io_wait()+0x2>
c0025eb8:	eb 00                	jmp    c0025eba <APIC::io_wait()+0x4>
c0025eba:	90                   	nop
c0025ebb:	c3                   	ret    

c0025ebc <APIC::getBase()>:
c0025ebc:	55                   	push   ebp
c0025ebd:	89 e5                	mov    ebp,esp
c0025ebf:	83 ec 18             	sub    esp,0x18
c0025ec2:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0025ec7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025ecd:	83 e0 08             	and    eax,0x8
c0025ed0:	84 c0                	test   al,al
c0025ed2:	75 07                	jne    c0025edb <APIC::getBase()+0x1f>
c0025ed4:	b8 00 00 00 00       	mov    eax,0x0
c0025ed9:	eb 21                	jmp    c0025efc <APIC::getBase()+0x40>
c0025edb:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0025ee0:	83 ec 08             	sub    esp,0x8
c0025ee3:	6a 1b                	push   0x1b
c0025ee5:	50                   	push   eax
c0025ee6:	e8 39 8f fe ff       	call   c000ee24 <Computer::rdmsr(unsigned int)>
c0025eeb:	83 c4 10             	add    esp,0x10
c0025eee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025ef1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025ef4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025ef7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025efc:	c9                   	leave  
c0025efd:	c3                   	ret    

c0025efe <APIC::eoi(unsigned char)>:
c0025efe:	55                   	push   ebp
c0025eff:	89 e5                	mov    ebp,esp
c0025f01:	83 ec 28             	sub    esp,0x28
c0025f04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f07:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025f0a:	83 ec 0c             	sub    esp,0xc
c0025f0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f10:	e8 a7 ff ff ff       	call   c0025ebc <APIC::getBase()>
c0025f15:	83 c4 10             	add    esp,0x10
c0025f18:	05 b0 00 00 00       	add    eax,0xb0
c0025f1d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025f20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025f23:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025f29:	90                   	nop
c0025f2a:	c9                   	leave  
c0025f2b:	c3                   	ret    

c0025f2c <APIC::open(int, int, void*)>:
c0025f2c:	55                   	push   ebp
c0025f2d:	89 e5                	mov    ebp,esp
c0025f2f:	57                   	push   edi
c0025f30:	56                   	push   esi
c0025f31:	53                   	push   ebx
c0025f32:	83 ec 2c             	sub    esp,0x2c
c0025f35:	83 ec 0c             	sub    esp,0xc
c0025f38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f3b:	e8 7c ff ff ff       	call   c0025ebc <APIC::getBase()>
c0025f40:	83 c4 10             	add    esp,0x10
c0025f43:	89 c2                	mov    edx,eax
c0025f45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f48:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025f4e:	0f b6 f8             	movzx  edi,al
c0025f51:	89 d0                	mov    eax,edx
c0025f53:	ba 00 00 00 00       	mov    edx,0x0
c0025f58:	89 c1                	mov    ecx,eax
c0025f5a:	80 e5 ff             	and    ch,0xff
c0025f5d:	89 cb                	mov    ebx,ecx
c0025f5f:	0f b6 f2             	movzx  esi,dl
c0025f62:	89 d8                	mov    eax,ebx
c0025f64:	89 f2                	mov    edx,esi
c0025f66:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025f69:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025f6c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025f70:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025f74:	83 e0 00             	and    eax,0x0
c0025f77:	09 d0                	or     eax,edx
c0025f79:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025f7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f80:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025f86:	8d 50 01             	lea    edx,[eax+0x1]
c0025f89:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025f8c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025f92:	0f b6 d0             	movzx  edx,al
c0025f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f98:	83 c2 08             	add    edx,0x8
c0025f9b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025f9f:	0f b6 c9             	movzx  ecx,cl
c0025fa2:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025fa8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025fac:	83 ec 0c             	sub    esp,0xc
c0025faf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fb2:	e8 05 ff ff ff       	call   c0025ebc <APIC::getBase()>
c0025fb7:	83 c4 10             	add    esp,0x10
c0025fba:	05 f0 00 00 00       	add    eax,0xf0
c0025fbf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025fc2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025fc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fc7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025fca:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025fd1:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025fd8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025fdb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025fde:	89 10                	mov    DWORD PTR [eax],edx
c0025fe0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025fe7:	a1 b0 16 03 c0       	mov    eax,ds:0xc00316b0
c0025fec:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025fef:	7d 7c                	jge    c002606d <APIC::open(int, int, void*)+0x141>
c0025ff1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025ff4:	8b 04 85 c0 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce940]
c0025ffb:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025ffe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026001:	8b 04 85 c0 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce940]
c0026008:	c1 e8 08             	shr    eax,0x8
c002600b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002600f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026012:	8b 04 85 c0 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce940]
c0026019:	c1 e8 18             	shr    eax,0x18
c002601c:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002601f:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0026023:	75 40                	jne    c0026065 <APIC::open(int, int, void*)+0x139>
c0026025:	83 ec 0c             	sub    esp,0xc
c0026028:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002602b:	e8 8c fe ff ff       	call   c0025ebc <APIC::getBase()>
c0026030:	83 c4 10             	add    esp,0x10
c0026033:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0026037:	75 07                	jne    c0026040 <APIC::open(int, int, void*)+0x114>
c0026039:	ba 60 03 00 00       	mov    edx,0x360
c002603e:	eb 05                	jmp    c0026045 <APIC::open(int, int, void*)+0x119>
c0026040:	ba 50 03 00 00       	mov    edx,0x350
c0026045:	01 d0                	add    eax,edx
c0026047:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002604a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002604d:	8b 00                	mov    eax,DWORD PTR [eax]
c002604f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026052:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0026059:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002605d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026060:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026063:	89 10                	mov    DWORD PTR [eax],edx
c0026065:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0026068:	e9 7a ff ff ff       	jmp    c0025fe7 <APIC::open(int, int, void*)+0xbb>
c002606d:	b8 00 00 00 00       	mov    eax,0x0
c0026072:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026075:	5b                   	pop    ebx
c0026076:	5e                   	pop    esi
c0026077:	5f                   	pop    edi
c0026078:	5d                   	pop    ebp
c0026079:	c3                   	ret    

c002607a <IOAPIC::IOAPIC()>:
c002607a:	83 ec 0c             	sub    esp,0xc
c002607d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026081:	83 ec 08             	sub    esp,0x8
c0026084:	68 ac da 02 c0       	push   0xc002daac
c0026089:	50                   	push   eax
c002608a:	e8 db e3 fe ff       	call   c001446a <Device::Device(char const*)>
c002608f:	83 c4 10             	add    esp,0x10
c0026092:	ba d4 db 02 c0       	mov    edx,0xc002dbd4
c0026097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002609b:	89 10                	mov    DWORD PTR [eax],edx
c002609d:	90                   	nop
c002609e:	83 c4 0c             	add    esp,0xc
c00260a1:	c3                   	ret    

c00260a2 <APIC::APIC()>:
c00260a2:	53                   	push   ebx
c00260a3:	83 ec 18             	sub    esp,0x18
c00260a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00260aa:	83 ec 08             	sub    esp,0x8
c00260ad:	68 b4 da 02 c0       	push   0xc002dab4
c00260b2:	50                   	push   eax
c00260b3:	e8 2c eb fe ff       	call   c0014be4 <InterruptController::InterruptController(char const*)>
c00260b8:	83 c4 10             	add    esp,0x10
c00260bb:	ba 8c db 02 c0       	mov    edx,0xc002db8c
c00260c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00260c4:	89 10                	mov    DWORD PTR [eax],edx
c00260c6:	a0 80 31 03 c0       	mov    al,ds:0xc0033180
c00260cb:	83 f0 01             	xor    eax,0x1
c00260ce:	84 c0                	test   al,al
c00260d0:	0f 84 a1 00 00 00    	je     c0026177 <APIC::APIC()+0xd5>
c00260d6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00260db:	a0 60 17 03 c0       	mov    al,ds:0xc0031760
c00260e0:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00260e4:	0f 83 86 00 00 00    	jae    c0026170 <APIC::APIC()+0xce>
c00260ea:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00260f2:	83 ec 0c             	sub    esp,0xc
c00260f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00260f9:	e8 88 97 fe ff       	call   c000f886 <malloc>
c00260fe:	83 c4 10             	add    esp,0x10
c0026101:	89 c3                	mov    ebx,eax
c0026103:	83 ec 0c             	sub    esp,0xc
c0026106:	53                   	push   ebx
c0026107:	e8 6e ff ff ff       	call   c002607a <IOAPIC::IOAPIC()>
c002610c:	83 c4 10             	add    esp,0x10
c002610f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0026113:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026118:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002611c:	89 14 85 60 31 03 c0 	mov    DWORD PTR [eax*4-0x3ffccea0],edx
c0026123:	a1 40 31 03 c0       	mov    eax,ds:0xc0033140
c0026128:	40                   	inc    eax
c0026129:	a3 40 31 03 c0       	mov    ds:0xc0033140,eax
c002612e:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0026133:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0026139:	83 ec 08             	sub    esp,0x8
c002613c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026140:	50                   	push   eax
c0026141:	e8 34 e1 fe ff       	call   c001427a <Device::addChild(Device*)>
c0026146:	83 c4 10             	add    esp,0x10
c0026149:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002614d:	8b 00                	mov    eax,DWORD PTR [eax]
c002614f:	83 c0 08             	add    eax,0x8
c0026152:	8b 00                	mov    eax,DWORD PTR [eax]
c0026154:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0026159:	6a 00                	push   0x0
c002615b:	6a 00                	push   0x0
c002615d:	52                   	push   edx
c002615e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026162:	ff d0                	call   eax
c0026164:	83 c4 10             	add    esp,0x10
c0026167:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002616b:	e9 6b ff ff ff       	jmp    c00260db <APIC::APIC()+0x39>
c0026170:	c6 05 80 31 03 c0 01 	mov    BYTE PTR ds:0xc0033180,0x1
c0026177:	90                   	nop
c0026178:	83 c4 18             	add    esp,0x18
c002617b:	5b                   	pop    ebx
c002617c:	c3                   	ret    
c002617d:	90                   	nop

c002617e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002617e:	55                   	push   ebp
c002617f:	89 e5                	mov    ebp,esp
c0026181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026184:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002618a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002618d:	72 1d                	jb     c00261ac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002618f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026192:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026198:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002619b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00261a1:	01 d0                	add    eax,edx
c00261a3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00261a6:	73 04                	jae    c00261ac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00261a8:	b0 01                	mov    al,0x1
c00261aa:	eb 02                	jmp    c00261ae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00261ac:	b0 00                	mov    al,0x0
c00261ae:	5d                   	pop    ebp
c00261af:	c3                   	ret    

c00261b0 <IOAPIC::read(int)>:
c00261b0:	55                   	push   ebp
c00261b1:	89 e5                	mov    ebp,esp
c00261b3:	83 ec 10             	sub    esp,0x10
c00261b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261b9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00261bf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00261c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00261c5:	0f b6 d0             	movzx  edx,al
c00261c8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00261cb:	89 10                	mov    DWORD PTR [eax],edx
c00261cd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00261d0:	83 c0 10             	add    eax,0x10
c00261d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00261d5:	c9                   	leave  
c00261d6:	c3                   	ret    
c00261d7:	90                   	nop

c00261d8 <IOAPIC::open(int, int, void*)>:
c00261d8:	55                   	push   ebp
c00261d9:	89 e5                	mov    ebp,esp
c00261db:	57                   	push   edi
c00261dc:	56                   	push   esi
c00261dd:	53                   	push   ebx
c00261de:	83 ec 0c             	sub    esp,0xc
c00261e1:	83 ec 0c             	sub    esp,0xc
c00261e4:	68 df da 02 c0       	push   0xc002dadf
c00261e9:	e8 57 cc fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00261ee:	83 c4 10             	add    esp,0x10
c00261f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00261f7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00261fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026200:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026206:	8b 14 85 a0 17 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce860]
c002620d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026210:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026219:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002621f:	8b 14 85 20 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce7e0]
c0026226:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026229:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002622f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026232:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0026238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002623b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026241:	0f b6 f8             	movzx  edi,al
c0026244:	89 d0                	mov    eax,edx
c0026246:	ba 00 00 00 00       	mov    edx,0x0
c002624b:	89 c1                	mov    ecx,eax
c002624d:	80 e5 ff             	and    ch,0xff
c0026250:	89 cb                	mov    ebx,ecx
c0026252:	0f b6 f2             	movzx  esi,dl
c0026255:	89 d8                	mov    eax,ebx
c0026257:	89 f2                	mov    edx,esi
c0026259:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002625c:	8d 5f 08             	lea    ebx,[edi+0x8]
c002625f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026263:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026267:	83 e0 00             	and    eax,0x0
c002626a:	09 d0                	or     eax,edx
c002626c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026273:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026279:	8d 50 01             	lea    edx,[eax+0x1]
c002627c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002627f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026285:	0f b6 d0             	movzx  edx,al
c0026288:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002628b:	83 c2 08             	add    edx,0x8
c002628e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026292:	0f b6 c9             	movzx  ecx,cl
c0026295:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002629b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002629f:	83 ec 08             	sub    esp,0x8
c00262a2:	6a 01                	push   0x1
c00262a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262a7:	e8 04 ff ff ff       	call   c00261b0 <IOAPIC::read(int)>
c00262ac:	83 c4 10             	add    esp,0x10
c00262af:	c1 f8 10             	sar    eax,0x10
c00262b2:	0f b6 c0             	movzx  eax,al
c00262b5:	8d 50 01             	lea    edx,[eax+0x1]
c00262b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262bb:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00262c1:	b8 00 00 00 00       	mov    eax,0x0
c00262c6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00262c9:	5b                   	pop    ebx
c00262ca:	5e                   	pop    esi
c00262cb:	5f                   	pop    edi
c00262cc:	5d                   	pop    ebp
c00262cd:	c3                   	ret    

c00262ce <IOAPIC::write(int, int)>:
c00262ce:	55                   	push   ebp
c00262cf:	89 e5                	mov    ebp,esp
c00262d1:	83 ec 10             	sub    esp,0x10
c00262d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262d7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00262dd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00262e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00262e3:	0f b6 d0             	movzx  edx,al
c00262e6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00262e9:	89 10                	mov    DWORD PTR [eax],edx
c00262eb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00262ee:	8d 50 10             	lea    edx,[eax+0x10]
c00262f1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00262f4:	89 02                	mov    DWORD PTR [edx],eax
c00262f6:	90                   	nop
c00262f7:	c9                   	leave  
c00262f8:	c3                   	ret    
c00262f9:	90                   	nop

c00262fa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00262fa:	55                   	push   ebp
c00262fb:	89 e5                	mov    ebp,esp
c00262fd:	53                   	push   ebx
c00262fe:	83 ec 2c             	sub    esp,0x2c
c0026301:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026304:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0026307:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002630a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002630d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026310:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026313:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026316:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026319:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002631c:	88 d8                	mov    al,bl
c002631e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026321:	88 c8                	mov    al,cl
c0026323:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026326:	88 d0                	mov    al,dl
c0026328:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002632b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002632f:	83 c0 08             	add    eax,0x8
c0026332:	01 c0                	add    eax,eax
c0026334:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026337:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002633b:	83 c0 08             	add    eax,0x8
c002633e:	01 c0                	add    eax,eax
c0026340:	40                   	inc    eax
c0026341:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026344:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026347:	50                   	push   eax
c0026348:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002634b:	e8 60 fe ff ff       	call   c00261b0 <IOAPIC::read(int)>
c0026350:	83 c4 08             	add    esp,0x8
c0026353:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026356:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002635d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026360:	c1 e0 18             	shl    eax,0x18
c0026363:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0026366:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026369:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002636c:	52                   	push   edx
c002636d:	50                   	push   eax
c002636e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026371:	e8 58 ff ff ff       	call   c00262ce <IOAPIC::write(int, int)>
c0026376:	83 c4 0c             	add    esp,0xc
c0026379:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002637c:	50                   	push   eax
c002637d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026380:	e8 2b fe ff ff       	call   c00261b0 <IOAPIC::read(int)>
c0026385:	83 c4 08             	add    esp,0x8
c0026388:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002638b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0026392:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026399:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00263a0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00263a4:	74 09                	je     c00263af <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00263a6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00263ad:	eb 07                	jmp    c00263b6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00263af:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00263b6:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00263ba:	74 09                	je     c00263c5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00263bc:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00263c3:	eb 07                	jmp    c00263cc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00263c5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00263cc:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00263d3:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00263d7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00263da:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00263dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00263e0:	52                   	push   edx
c00263e1:	50                   	push   eax
c00263e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263e5:	e8 e4 fe ff ff       	call   c00262ce <IOAPIC::write(int, int)>
c00263ea:	83 c4 0c             	add    esp,0xc
c00263ed:	90                   	nop
c00263ee:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00263f1:	c9                   	leave  
c00263f2:	c3                   	ret    
c00263f3:	90                   	nop

c00263f4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00263f4:	55                   	push   ebp
c00263f5:	89 e5                	mov    ebp,esp
c00263f7:	57                   	push   edi
c00263f8:	56                   	push   esi
c00263f9:	53                   	push   ebx
c00263fa:	83 ec 2c             	sub    esp,0x2c
c00263fd:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026400:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026403:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026407:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002640b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002640f:	74 5a                	je     c002646b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026411:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0026415:	7f 44                	jg     c002645b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0026417:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002641a:	05 20 e0 02 c0       	add    eax,0xc002e020
c002641f:	8a 00                	mov    al,BYTE PTR [eax]
c0026421:	0f b6 c0             	movzx  eax,al
c0026424:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026427:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002642a:	66 8b 84 00 40 17 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce8c0]
c0026432:	0f b7 c0             	movzx  eax,ax
c0026435:	83 e0 02             	and    eax,0x2
c0026438:	85 c0                	test   eax,eax
c002643a:	74 04                	je     c0026440 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002643c:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026440:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026443:	66 8b 84 00 40 17 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce8c0]
c002644b:	0f b7 c0             	movzx  eax,ax
c002644e:	83 e0 08             	and    eax,0x8
c0026451:	85 c0                	test   eax,eax
c0026453:	74 16                	je     c002646b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026455:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026459:	eb 10                	jmp    c002646b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002645b:	83 ec 0c             	sub    esp,0xc
c002645e:	68 f0 da 02 c0       	push   0xc002daf0
c0026463:	e8 9d 43 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0026468:	83 c4 10             	add    esp,0x10
c002646b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002646f:	a1 40 31 03 c0       	mov    eax,ds:0xc0033140
c0026474:	83 ec 08             	sub    esp,0x8
c0026477:	50                   	push   eax
c0026478:	68 28 db 02 c0       	push   0xc002db28
c002647d:	e8 c3 c9 fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0026482:	83 c4 10             	add    esp,0x10
c0026485:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002648c:	a1 40 31 03 c0       	mov    eax,ds:0xc0033140
c0026491:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026494:	7d 67                	jge    c00264fd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026496:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026499:	8b 04 85 60 31 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccea0]
c00264a0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00264a3:	83 ec 08             	sub    esp,0x8
c00264a6:	52                   	push   edx
c00264a7:	50                   	push   eax
c00264a8:	e8 d1 fc ff ff       	call   c002617e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00264ad:	83 c4 10             	add    esp,0x10
c00264b0:	84 c0                	test   al,al
c00264b2:	74 44                	je     c00264f8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00264b4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00264b7:	8b 1c 85 60 31 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccea0]
c00264be:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00264c2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00264c5:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00264c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264cc:	83 c0 20             	add    eax,0x20
c00264cf:	0f b6 f0             	movzx  esi,al
c00264d2:	b8 00 00 00 00       	mov    eax,0x0
c00264d7:	99                   	cdq    
c00264d8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00264db:	0f b6 c9             	movzx  ecx,cl
c00264de:	83 ec 04             	sub    esp,0x4
c00264e1:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00264e4:	57                   	push   edi
c00264e5:	56                   	push   esi
c00264e6:	52                   	push   edx
c00264e7:	50                   	push   eax
c00264e8:	51                   	push   ecx
c00264e9:	53                   	push   ebx
c00264ea:	e8 0b fe ff ff       	call   c00262fa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00264ef:	83 c4 20             	add    esp,0x20
c00264f2:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00264f6:	eb 05                	jmp    c00264fd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00264f8:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00264fb:	eb 8f                	jmp    c002648c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00264fd:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026500:	83 f0 01             	xor    eax,0x1
c0026503:	84 c0                	test   al,al
c0026505:	74 10                	je     c0026517 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0026507:	83 ec 0c             	sub    esp,0xc
c002650a:	68 3f db 02 c0       	push   0xc002db3f
c002650f:	e8 f1 42 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0026514:	83 c4 10             	add    esp,0x10
c0026517:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002651b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026522:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0026526:	7f 65                	jg     c002658d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0026528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002652b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002652e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026535:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026538:	01 ca                	add    edx,ecx
c002653a:	83 c2 54             	add    edx,0x54
c002653d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026541:	85 c0                	test   eax,eax
c0026543:	75 43                	jne    c0026588 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026548:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002654b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026552:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026555:	01 ca                	add    edx,ecx
c0026557:	8d 4a 54             	lea    ecx,[edx+0x54]
c002655a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002655d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026564:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026567:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002656e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026571:	01 ca                	add    edx,ecx
c0026573:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026579:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002657c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026580:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026583:	83 e8 20             	sub    eax,0x20
c0026586:	eb 1a                	jmp    c00265a2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026588:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002658b:	eb 95                	jmp    c0026522 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002658d:	83 ec 0c             	sub    esp,0xc
c0026590:	68 4c db 02 c0       	push   0xc002db4c
c0026595:	e8 6b 42 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c002659a:	83 c4 10             	add    esp,0x10
c002659d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00265a2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00265a5:	5b                   	pop    ebx
c00265a6:	5e                   	pop    esi
c00265a7:	5f                   	pop    edi
c00265a8:	5d                   	pop    ebp
c00265a9:	c3                   	ret    

c00265aa <PIC::disable()>:
c00265aa:	55                   	push   ebp
c00265ab:	89 e5                	mov    ebp,esp
c00265ad:	83 ec 10             	sub    esp,0x10
c00265b0:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00265b6:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00265ba:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00265bd:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00265c1:	ee                   	out    dx,al
c00265c2:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00265c8:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00265cc:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00265cf:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00265d3:	ee                   	out    dx,al
c00265d4:	90                   	nop
c00265d5:	c9                   	leave  
c00265d6:	c3                   	ret    
c00265d7:	90                   	nop

c00265d8 <PIC::close(int, int, void*)>:
c00265d8:	55                   	push   ebp
c00265d9:	89 e5                	mov    ebp,esp
c00265db:	83 ec 08             	sub    esp,0x8
c00265de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00265e3:	83 c0 3c             	add    eax,0x3c
c00265e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00265e8:	83 ec 0c             	sub    esp,0xc
c00265eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265ee:	ff d0                	call   eax
c00265f0:	83 c4 10             	add    esp,0x10
c00265f3:	b8 00 00 00 00       	mov    eax,0x0
c00265f8:	c9                   	leave  
c00265f9:	c3                   	ret    

c00265fa <PIC::PIC()>:
c00265fa:	83 ec 0c             	sub    esp,0xc
c00265fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026601:	83 ec 08             	sub    esp,0x8
c0026604:	68 f8 db 02 c0       	push   0xc002dbf8
c0026609:	50                   	push   eax
c002660a:	e8 d5 e5 fe ff       	call   c0014be4 <InterruptController::InterruptController(char const*)>
c002660f:	83 c4 10             	add    esp,0x10
c0026612:	ba 24 dc 02 c0       	mov    edx,0xc002dc24
c0026617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002661b:	89 10                	mov    DWORD PTR [eax],edx
c002661d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026621:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026627:	0f b6 d0             	movzx  edx,al
c002662a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002662e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026639:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002663f:	0f b6 d0             	movzx  edx,al
c0026642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026646:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002664b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002664f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026655:	8d 50 01             	lea    edx,[eax+0x1]
c0026658:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002665c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026662:	0f b6 d0             	movzx  edx,al
c0026665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026669:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002666d:	83 e1 3f             	and    ecx,0x3f
c0026670:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026678:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002667e:	0f b6 d0             	movzx  edx,al
c0026681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026685:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002668c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026690:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026696:	0f b6 d0             	movzx  edx,al
c0026699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00266a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266a6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266ac:	8d 50 01             	lea    edx,[eax+0x1]
c00266af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266b3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00266b9:	0f b6 d0             	movzx  edx,al
c00266bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00266c4:	83 e1 3f             	and    ecx,0x3f
c00266c7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00266cb:	90                   	nop
c00266cc:	83 c4 0c             	add    esp,0xc
c00266cf:	c3                   	ret    

c00266d0 <PIC::ioWait()>:
c00266d0:	eb 00                	jmp    c00266d2 <PIC::ioWait()+0x2>
c00266d2:	eb 00                	jmp    c00266d4 <PIC::ioWait()+0x4>
c00266d4:	90                   	nop
c00266d5:	c3                   	ret    

c00266d6 <PIC::getIRQReg(int)>:
c00266d6:	55                   	push   ebp
c00266d7:	89 e5                	mov    ebp,esp
c00266d9:	83 ec 10             	sub    esp,0x10
c00266dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00266df:	0f b6 c0             	movzx  eax,al
c00266e2:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00266e8:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00266eb:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00266ee:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00266f2:	ee                   	out    dx,al
c00266f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00266f6:	0f b6 c0             	movzx  eax,al
c00266f9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00266ff:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026702:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026705:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026709:	ee                   	out    dx,al
c002670a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026710:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026714:	89 c2                	mov    edx,eax
c0026716:	ec                   	in     al,dx
c0026717:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002671a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002671d:	0f b6 c0             	movzx  eax,al
c0026720:	c1 e0 08             	shl    eax,0x8
c0026723:	89 c1                	mov    ecx,eax
c0026725:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002672b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002672f:	89 c2                	mov    edx,eax
c0026731:	ec                   	in     al,dx
c0026732:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026735:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026738:	0f b6 c0             	movzx  eax,al
c002673b:	09 c8                	or     eax,ecx
c002673d:	c9                   	leave  
c002673e:	c3                   	ret    
c002673f:	90                   	nop

c0026740 <PIC::eoi(unsigned char)>:
c0026740:	55                   	push   ebp
c0026741:	89 e5                	mov    ebp,esp
c0026743:	83 ec 14             	sub    esp,0x14
c0026746:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026749:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c002674c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026750:	75 1e                	jne    c0026770 <PIC::eoi(unsigned char)+0x30>
c0026752:	6a 0b                	push   0xb
c0026754:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026757:	e8 7a ff ff ff       	call   c00266d6 <PIC::getIRQReg(int)>
c002675c:	83 c4 08             	add    esp,0x8
c002675f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026763:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026767:	25 80 00 00 00       	and    eax,0x80
c002676c:	85 c0                	test   eax,eax
c002676e:	74 5f                	je     c00267cf <PIC::eoi(unsigned char)+0x8f>
c0026770:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026774:	75 2d                	jne    c00267a3 <PIC::eoi(unsigned char)+0x63>
c0026776:	6a 0b                	push   0xb
c0026778:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002677b:	e8 56 ff ff ff       	call   c00266d6 <PIC::getIRQReg(int)>
c0026780:	83 c4 08             	add    esp,0x8
c0026783:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026787:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002678a:	66 85 c0             	test   ax,ax
c002678d:	78 14                	js     c00267a3 <PIC::eoi(unsigned char)+0x63>
c002678f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026795:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026799:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002679c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00267a0:	ee                   	out    dx,al
c00267a1:	eb 2d                	jmp    c00267d0 <PIC::eoi(unsigned char)+0x90>
c00267a3:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00267a7:	76 12                	jbe    c00267bb <PIC::eoi(unsigned char)+0x7b>
c00267a9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00267af:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00267b3:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00267b6:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00267ba:	ee                   	out    dx,al
c00267bb:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00267c1:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00267c5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00267c8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00267cc:	ee                   	out    dx,al
c00267cd:	eb 01                	jmp    c00267d0 <PIC::eoi(unsigned char)+0x90>
c00267cf:	90                   	nop
c00267d0:	c9                   	leave  
c00267d1:	c3                   	ret    

c00267d2 <PIC::remap()>:
c00267d2:	55                   	push   ebp
c00267d3:	89 e5                	mov    ebp,esp
c00267d5:	83 ec 48             	sub    esp,0x48
c00267d8:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00267df:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00267e6:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00267ec:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00267ef:	89 c2                	mov    edx,eax
c00267f1:	ec                   	in     al,dx
c00267f2:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00267f5:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00267f8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00267fb:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026801:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026804:	89 c2                	mov    edx,eax
c0026806:	ec                   	in     al,dx
c0026807:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002680a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002680d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026810:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026816:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002681a:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002681d:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026820:	ee                   	out    dx,al
c0026821:	83 ec 0c             	sub    esp,0xc
c0026824:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026827:	e8 a4 fe ff ff       	call   c00266d0 <PIC::ioWait()>
c002682c:	83 c4 10             	add    esp,0x10
c002682f:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026835:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026839:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c002683c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002683f:	ee                   	out    dx,al
c0026840:	83 ec 0c             	sub    esp,0xc
c0026843:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026846:	e8 85 fe ff ff       	call   c00266d0 <PIC::ioWait()>
c002684b:	83 c4 10             	add    esp,0x10
c002684e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026851:	0f b6 c0             	movzx  eax,al
c0026854:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002685a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002685d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026860:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026863:	ee                   	out    dx,al
c0026864:	83 ec 0c             	sub    esp,0xc
c0026867:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002686a:	e8 61 fe ff ff       	call   c00266d0 <PIC::ioWait()>
c002686f:	83 c4 10             	add    esp,0x10
c0026872:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026875:	0f b6 c0             	movzx  eax,al
c0026878:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002687e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026881:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026884:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026887:	ee                   	out    dx,al
c0026888:	83 ec 0c             	sub    esp,0xc
c002688b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002688e:	e8 3d fe ff ff       	call   c00266d0 <PIC::ioWait()>
c0026893:	83 c4 10             	add    esp,0x10
c0026896:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002689c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00268a0:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00268a3:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00268a6:	ee                   	out    dx,al
c00268a7:	83 ec 0c             	sub    esp,0xc
c00268aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268ad:	e8 1e fe ff ff       	call   c00266d0 <PIC::ioWait()>
c00268b2:	83 c4 10             	add    esp,0x10
c00268b5:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00268bb:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00268bf:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00268c2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00268c5:	ee                   	out    dx,al
c00268c6:	83 ec 0c             	sub    esp,0xc
c00268c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268cc:	e8 ff fd ff ff       	call   c00266d0 <PIC::ioWait()>
c00268d1:	83 c4 10             	add    esp,0x10
c00268d4:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00268da:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00268de:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00268e1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00268e4:	ee                   	out    dx,al
c00268e5:	83 ec 0c             	sub    esp,0xc
c00268e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268eb:	e8 e0 fd ff ff       	call   c00266d0 <PIC::ioWait()>
c00268f0:	83 c4 10             	add    esp,0x10
c00268f3:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00268f9:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00268fd:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026900:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026903:	ee                   	out    dx,al
c0026904:	83 ec 0c             	sub    esp,0xc
c0026907:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002690a:	e8 c1 fd ff ff       	call   c00266d0 <PIC::ioWait()>
c002690f:	83 c4 10             	add    esp,0x10
c0026912:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026916:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002691c:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002691f:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026922:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026925:	ee                   	out    dx,al
c0026926:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002692a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026930:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026933:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026936:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026939:	ee                   	out    dx,al
c002693a:	90                   	nop
c002693b:	c9                   	leave  
c002693c:	c3                   	ret    
c002693d:	90                   	nop

c002693e <PIC::open(int, int, void*)>:
c002693e:	55                   	push   ebp
c002693f:	89 e5                	mov    ebp,esp
c0026941:	83 ec 18             	sub    esp,0x18
c0026944:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002694a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002694e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026951:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026955:	ee                   	out    dx,al
c0026956:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002695c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026960:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026963:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026967:	ee                   	out    dx,al
c0026968:	83 ec 0c             	sub    esp,0xc
c002696b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002696e:	e8 5f fe ff ff       	call   c00267d2 <PIC::remap()>
c0026973:	83 c4 10             	add    esp,0x10
c0026976:	b8 00 00 00 00       	mov    eax,0x0
c002697b:	c9                   	leave  
c002697c:	c3                   	ret    
c002697d:	90                   	nop

c002697e <APICTimer::close(int, int, void*)>:
c002697e:	b8 00 00 00 00       	mov    eax,0x0
c0026983:	c3                   	ret    

c0026984 <apicTimerHandler(regs*, void*)>:
c0026984:	83 ec 0c             	sub    esp,0xc
c0026987:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002698b:	8b 00                	mov    eax,DWORD PTR [eax]
c002698d:	99                   	cdq    
c002698e:	52                   	push   edx
c002698f:	50                   	push   eax
c0026990:	6a 00                	push   0x0
c0026992:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026997:	e8 98 07 00 00       	call   c0027134 <__udivdi3>
c002699c:	83 c4 10             	add    esp,0x10
c002699f:	83 ec 08             	sub    esp,0x8
c00269a2:	52                   	push   edx
c00269a3:	50                   	push   eax
c00269a4:	e8 f0 03 ff ff       	call   c0016d99 <timerHandler(unsigned long long)>
c00269a9:	83 c4 10             	add    esp,0x10
c00269ac:	90                   	nop
c00269ad:	83 c4 0c             	add    esp,0xc
c00269b0:	c3                   	ret    
c00269b1:	90                   	nop

c00269b2 <APICTimer::write(int)>:
c00269b2:	53                   	push   ebx
c00269b3:	83 ec 28             	sub    esp,0x28
c00269b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00269ba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00269be:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00269c4:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c00269c9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00269cf:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00269d5:	83 ec 0c             	sub    esp,0xc
c00269d8:	50                   	push   eax
c00269d9:	e8 de f4 ff ff       	call   c0025ebc <APIC::getBase()>
c00269de:	83 c4 10             	add    esp,0x10
c00269e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00269e5:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c00269ea:	8b 15 54 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f454
c00269f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00269f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00269f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00269fc:	05 e0 03 00 00       	add    eax,0x3e0
c0026a01:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026a07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026a0b:	05 80 03 00 00       	add    eax,0x380
c0026a10:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026a16:	fb                   	sti    
c0026a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026a1f:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026a24:	83 d2 00             	adc    edx,0x0
c0026a27:	89 c1                	mov    ecx,eax
c0026a29:	89 d3                	mov    ebx,edx
c0026a2b:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c0026a30:	8b 15 54 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f454
c0026a36:	39 c8                	cmp    eax,ecx
c0026a38:	89 d0                	mov    eax,edx
c0026a3a:	19 d8                	sbb    eax,ebx
c0026a3c:	73 02                	jae    c0026a40 <APICTimer::write(int)+0x8e>
c0026a3e:	eb d7                	jmp    c0026a17 <APICTimer::write(int)+0x65>
c0026a40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026a44:	05 20 03 00 00       	add    eax,0x320
c0026a49:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026a4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026a53:	05 90 03 00 00       	add    eax,0x390
c0026a58:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a5a:	f7 d0                	not    eax
c0026a5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026a60:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026a64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026a68:	ba 00 00 00 00       	mov    edx,0x0
c0026a6d:	f7 f3                	div    ebx
c0026a6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026a73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026a77:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026a7d:	0d 00 00 02 00       	or     eax,0x20000
c0026a82:	89 c2                	mov    edx,eax
c0026a84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026a88:	05 20 03 00 00       	add    eax,0x320
c0026a8d:	89 10                	mov    DWORD PTR [eax],edx
c0026a8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026a93:	05 e0 03 00 00       	add    eax,0x3e0
c0026a98:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026a9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026aa2:	05 80 03 00 00       	add    eax,0x380
c0026aa7:	89 c2                	mov    edx,eax
c0026aa9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026aad:	89 02                	mov    DWORD PTR [edx],eax
c0026aaf:	90                   	nop
c0026ab0:	83 c4 28             	add    esp,0x28
c0026ab3:	5b                   	pop    ebx
c0026ab4:	c3                   	ret    
c0026ab5:	90                   	nop

c0026ab6 <APICTimer::open(int, int, void*)>:
c0026ab6:	57                   	push   edi
c0026ab7:	56                   	push   esi
c0026ab8:	53                   	push   ebx
c0026ab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026abd:	8b 00                	mov    eax,DWORD PTR [eax]
c0026abf:	83 c0 24             	add    eax,0x24
c0026ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ac4:	83 ec 08             	sub    esp,0x8
c0026ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026acb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026acf:	ff d0                	call   eax
c0026ad1:	83 c4 10             	add    esp,0x10
c0026ad4:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0026ad9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026adf:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026ae5:	83 ec 0c             	sub    esp,0xc
c0026ae8:	50                   	push   eax
c0026ae9:	e8 ce f3 ff ff       	call   c0025ebc <APIC::getBase()>
c0026aee:	83 c4 10             	add    esp,0x10
c0026af1:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026afb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026b01:	0f b6 f8             	movzx  edi,al
c0026b04:	89 d0                	mov    eax,edx
c0026b06:	ba 00 00 00 00       	mov    edx,0x0
c0026b0b:	89 c1                	mov    ecx,eax
c0026b0d:	80 e5 ff             	and    ch,0xff
c0026b10:	89 cb                	mov    ebx,ecx
c0026b12:	0f b6 f2             	movzx  esi,dl
c0026b15:	89 d8                	mov    eax,ebx
c0026b17:	89 f2                	mov    edx,esi
c0026b19:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026b1d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026b20:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026b24:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026b28:	83 e0 00             	and    eax,0x0
c0026b2b:	09 d0                	or     eax,edx
c0026b2d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026b31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b35:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026b3b:	8d 50 01             	lea    edx,[eax+0x1]
c0026b3e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026b42:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026b48:	0f b6 d0             	movzx  edx,al
c0026b4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b4f:	83 c2 08             	add    edx,0x8
c0026b52:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026b56:	0f b6 c9             	movzx  ecx,cl
c0026b59:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026b5f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b67:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026b6b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026b79:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026b7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026b83:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026b89:	83 ec 0c             	sub    esp,0xc
c0026b8c:	51                   	push   ecx
c0026b8d:	6a 01                	push   0x1
c0026b8f:	68 84 69 02 c0       	push   0xc0026984
c0026b94:	52                   	push   edx
c0026b95:	50                   	push   eax
c0026b96:	e8 63 d6 fe ff       	call   c00141fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026b9b:	83 c4 20             	add    esp,0x20
c0026b9e:	89 c2                	mov    edx,eax
c0026ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ba4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026baa:	b8 00 00 00 00       	mov    eax,0x0
c0026baf:	5b                   	pop    ebx
c0026bb0:	5e                   	pop    esi
c0026bb1:	5f                   	pop    edi
c0026bb2:	c3                   	ret    
c0026bb3:	90                   	nop

c0026bb4 <APICTimer::APICTimer()>:
c0026bb4:	83 ec 0c             	sub    esp,0xc
c0026bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bbb:	83 ec 08             	sub    esp,0x8
c0026bbe:	68 64 dc 02 c0       	push   0xc002dc64
c0026bc3:	50                   	push   eax
c0026bc4:	e8 41 01 ff ff       	call   c0016d0a <Timer::Timer(char const*)>
c0026bc9:	83 c4 10             	add    esp,0x10
c0026bcc:	ba 78 dc 02 c0       	mov    edx,0xc002dc78
c0026bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bd5:	89 10                	mov    DWORD PTR [eax],edx
c0026bd7:	90                   	nop
c0026bd8:	83 c4 0c             	add    esp,0xc
c0026bdb:	c3                   	ret    

c0026bdc <PIT::write(int)>:
c0026bdc:	83 ec 10             	sub    esp,0x10
c0026bdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026be3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026be7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026bed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026bf1:	a3 84 31 03 c0       	mov    ds:0xc0033184,eax
c0026bf6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026bfb:	99                   	cdq    
c0026bfc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026c00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c04:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026c0b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026c10:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026c14:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026c19:	ee                   	out    dx,al
c0026c1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026c1e:	0f b6 c0             	movzx  eax,al
c0026c21:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026c28:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026c2c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026c30:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026c35:	ee                   	out    dx,al
c0026c36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026c3a:	c1 f8 08             	sar    eax,0x8
c0026c3d:	0f b6 c0             	movzx  eax,al
c0026c40:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026c47:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026c4b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026c4f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026c54:	ee                   	out    dx,al
c0026c55:	90                   	nop
c0026c56:	83 c4 10             	add    esp,0x10
c0026c59:	c3                   	ret    

c0026c5a <pitHandler(regs*, void*)>:
c0026c5a:	83 ec 0c             	sub    esp,0xc
c0026c5d:	a1 84 31 03 c0       	mov    eax,ds:0xc0033184
c0026c62:	99                   	cdq    
c0026c63:	52                   	push   edx
c0026c64:	50                   	push   eax
c0026c65:	6a 00                	push   0x0
c0026c67:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026c6c:	e8 c3 04 00 00       	call   c0027134 <__udivdi3>
c0026c71:	83 c4 10             	add    esp,0x10
c0026c74:	83 ec 08             	sub    esp,0x8
c0026c77:	52                   	push   edx
c0026c78:	50                   	push   eax
c0026c79:	e8 1b 01 ff ff       	call   c0016d99 <timerHandler(unsigned long long)>
c0026c7e:	83 c4 10             	add    esp,0x10
c0026c81:	90                   	nop
c0026c82:	83 c4 0c             	add    esp,0xc
c0026c85:	c3                   	ret    

c0026c86 <PIT::open(int, int, void*)>:
c0026c86:	83 ec 0c             	sub    esp,0xc
c0026c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c8f:	83 c0 24             	add    eax,0x24
c0026c92:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c94:	83 ec 08             	sub    esp,0x8
c0026c97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c9f:	ff d0                	call   eax
c0026ca1:	83 c4 10             	add    esp,0x10
c0026ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ca8:	83 ec 0c             	sub    esp,0xc
c0026cab:	6a 00                	push   0x0
c0026cad:	6a 01                	push   0x1
c0026caf:	68 5a 6c 02 c0       	push   0xc0026c5a
c0026cb4:	6a 00                	push   0x0
c0026cb6:	50                   	push   eax
c0026cb7:	e8 42 d5 fe ff       	call   c00141fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026cbc:	83 c4 20             	add    esp,0x20
c0026cbf:	89 c2                	mov    edx,eax
c0026cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cc5:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026ccb:	b8 00 00 00 00       	mov    eax,0x0
c0026cd0:	83 c4 0c             	add    esp,0xc
c0026cd3:	c3                   	ret    

c0026cd4 <PIT::close(int, int, void*)>:
c0026cd4:	83 ec 0c             	sub    esp,0xc
c0026cd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cdb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ce9:	6a 01                	push   0x1
c0026ceb:	68 5a 6c 02 c0       	push   0xc0026c5a
c0026cf0:	6a 00                	push   0x0
c0026cf2:	50                   	push   eax
c0026cf3:	e8 44 d5 fe ff       	call   c001423c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026cf8:	83 c4 10             	add    esp,0x10
c0026cfb:	b8 00 00 00 00       	mov    eax,0x0
c0026d00:	83 c4 0c             	add    esp,0xc
c0026d03:	c3                   	ret    

c0026d04 <PIT::PIT()>:
c0026d04:	83 ec 0c             	sub    esp,0xc
c0026d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d0b:	83 ec 08             	sub    esp,0x8
c0026d0e:	68 a0 dc 02 c0       	push   0xc002dca0
c0026d13:	50                   	push   eax
c0026d14:	e8 f1 ff fe ff       	call   c0016d0a <Timer::Timer(char const*)>
c0026d19:	83 c4 10             	add    esp,0x10
c0026d1c:	ba c8 dc 02 c0       	mov    edx,0xc002dcc8
c0026d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d25:	89 10                	mov    DWORD PTR [eax],edx
c0026d27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d2b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026d31:	0f b6 d0             	movzx  edx,al
c0026d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d38:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d43:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026d49:	0f b6 d0             	movzx  edx,al
c0026d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d50:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d59:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026d5f:	8d 50 01             	lea    edx,[eax+0x1]
c0026d62:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026d66:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026d6c:	0f b6 d0             	movzx  edx,al
c0026d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d73:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026d77:	83 e1 3f             	and    ecx,0x3f
c0026d7a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026d7e:	90                   	nop
c0026d7f:	83 c4 0c             	add    esp,0xc
c0026d82:	c3                   	ret    
c0026d83:	66 90                	xchg   ax,ax
c0026d85:	66 90                	xchg   ax,ax
c0026d87:	66 90                	xchg   ax,ax
c0026d89:	66 90                	xchg   ax,ax
c0026d8b:	66 90                	xchg   ax,ax
c0026d8d:	66 90                	xchg   ax,ax
c0026d8f:	90                   	nop

c0026d90 <avxDetect>:
c0026d90:	b8 00 00 00 00       	mov    eax,0x0
c0026d95:	c3                   	ret    

c0026d96 <avxSave>:
c0026d96:	c3                   	ret    

c0026d97 <avxLoad>:
c0026d97:	c3                   	ret    

c0026d98 <avxInit>:
c0026d98:	c3                   	ret    

c0026d99 <avxClose>:
c0026d99:	c3                   	ret    

c0026d9a <wouldSheSayYes>:
c0026d9a:	c3                   	ret    
c0026d9b:	49                   	dec    ecx
c0026d9c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026da0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026da4:	75 20                	jne    c0026dc6 <sseDetect.noSSE+0x1>
c0026da6:	4e                   	dec    esi
c0026da7:	79 61                	jns    c0026e0a <x87Detect+0x14>
c0026da9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026dae:	66 90                	xchg   ax,ax

c0026db0 <absolutelyNoChanceInHell>:
c0026db0:	b8 01 00 00 00       	mov    eax,0x1
c0026db5:	0f a2                	cpuid  
c0026db7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026dbd:	74 06                	je     c0026dc5 <sseDetect.noSSE>
c0026dbf:	b8 01 00 00 00       	mov    eax,0x1
c0026dc4:	c3                   	ret    

c0026dc5 <sseDetect.noSSE>:
c0026dc5:	31 c0                	xor    eax,eax
c0026dc7:	c3                   	ret    

c0026dc8 <sseSave>:
c0026dc8:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026dcd:	c3                   	ret    

c0026dce <sseLoad>:
c0026dce:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026dd3:	c3                   	ret    

c0026dd4 <sseInit>:
c0026dd4:	e8 49 00 00 00       	call   c0026e22 <x87Init>
c0026dd9:	0f 20 e0             	mov    eax,cr4
c0026ddc:	66 0d 00 06          	or     ax,0x600
c0026de0:	0f 22 e0             	mov    cr4,eax
c0026de3:	c3                   	ret    

c0026de4 <sseClose>:
c0026de4:	c3                   	ret    
c0026de5:	66 90                	xchg   ax,ax
c0026de7:	66 90                	xchg   ax,ax
c0026de9:	66 90                	xchg   ax,ax
c0026deb:	66 90                	xchg   ax,ax
c0026ded:	66 90                	xchg   ax,ax
c0026def:	90                   	nop

c0026df0 <value_37F>:
c0026df0:	7f 03                	jg     c0026df5 <value_37A+0x1>

c0026df2 <value_37E>:
c0026df2:	7e 03                	jle    c0026df7 <x87Detect+0x1>

c0026df4 <value_37A>:
c0026df4:	7a 03                	jp     c0026df9 <x87Detect+0x3>

c0026df6 <x87Detect>:
c0026df6:	b8 01 00 00 00       	mov    eax,0x1
c0026dfb:	0f a2                	cpuid  
c0026dfd:	f7 c2 01 00 00 00    	test   edx,0x1
c0026e03:	74 06                	je     c0026e0b <x87Detect.nox87>
c0026e05:	b8 01 00 00 00       	mov    eax,0x1
c0026e0a:	c3                   	ret    

c0026e0b <x87Detect.nox87>:
c0026e0b:	b8 00 00 00 00       	mov    eax,0x0
c0026e10:	c3                   	ret    

c0026e11 <x87Save>:
c0026e11:	55                   	push   ebp
c0026e12:	89 e5                	mov    ebp,esp
c0026e14:	9b dd 75 08          	fsave  [ebp+0x8]
c0026e18:	c9                   	leave  
c0026e19:	c3                   	ret    

c0026e1a <x87Load>:
c0026e1a:	55                   	push   ebp
c0026e1b:	89 e5                	mov    ebp,esp
c0026e1d:	dd 65 08             	frstor [ebp+0x8]
c0026e20:	c9                   	leave  
c0026e21:	c3                   	ret    

c0026e22 <x87Init>:
c0026e22:	9b db e3             	finit  
c0026e25:	0f 20 c0             	mov    eax,cr0
c0026e28:	66 25 fb ff          	and    ax,0xfffb
c0026e2c:	66 0d 22 00          	or     ax,0x22
c0026e30:	0f 22 c0             	mov    cr0,eax
c0026e33:	0f 06                	clts   
c0026e35:	d9 2d f4 6d 02 c0    	fldcw  WORD PTR ds:0xc0026df4
c0026e3b:	c3                   	ret    

c0026e3c <x87Close>:
c0026e3c:	c3                   	ret    
c0026e3d:	66 90                	xchg   ax,ax
c0026e3f:	90                   	nop

c0026e40 <__do_global_ctors_aux>:
c0026e40:	a1 78 9a 02 c0       	mov    eax,ds:0xc0029a78
c0026e45:	83 f8 ff             	cmp    eax,0xffffffff
c0026e48:	74 1a                	je     c0026e64 <__do_global_ctors_aux+0x24>
c0026e4a:	55                   	push   ebp
c0026e4b:	89 e5                	mov    ebp,esp
c0026e4d:	53                   	push   ebx
c0026e4e:	52                   	push   edx
c0026e4f:	bb 78 9a 02 c0       	mov    ebx,0xc0029a78
c0026e54:	ff d0                	call   eax
c0026e56:	83 eb 04             	sub    ebx,0x4
c0026e59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026e5b:	83 f8 ff             	cmp    eax,0xffffffff
c0026e5e:	75 f4                	jne    c0026e54 <__do_global_ctors_aux+0x14>
c0026e60:	58                   	pop    eax
c0026e61:	5b                   	pop    ebx
c0026e62:	5d                   	pop    ebp
c0026e63:	c3                   	ret    
c0026e64:	c3                   	ret    
c0026e65:	66 90                	xchg   ax,ax
c0026e67:	90                   	nop

c0026e68 <__divdi3>:
c0026e68:	55                   	push   ebp
c0026e69:	57                   	push   edi
c0026e6a:	56                   	push   esi
c0026e6b:	53                   	push   ebx
c0026e6c:	83 ec 1c             	sub    esp,0x1c
c0026e6f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026e73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026e77:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026e7a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026e7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026e82:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026e86:	85 db                	test   ebx,ebx
c0026e88:	0f 88 8e 00 00 00    	js     c0026f1c <__divdi3+0xb4>
c0026e8e:	89 dd                	mov    ebp,ebx
c0026e90:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026e98:	89 d3                	mov    ebx,edx
c0026e9a:	85 d2                	test   edx,edx
c0026e9c:	79 0d                	jns    c0026eab <__divdi3+0x43>
c0026e9e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026ea2:	f7 d8                	neg    eax
c0026ea4:	83 d2 00             	adc    edx,0x0
c0026ea7:	f7 da                	neg    edx
c0026ea9:	89 d3                	mov    ebx,edx
c0026eab:	89 c7                	mov    edi,eax
c0026ead:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026eb0:	85 db                	test   ebx,ebx
c0026eb2:	75 48                	jne    c0026efc <__divdi3+0x94>
c0026eb4:	39 ef                	cmp    edi,ebp
c0026eb6:	76 24                	jbe    c0026edc <__divdi3+0x74>
c0026eb8:	89 ea                	mov    edx,ebp
c0026eba:	f7 f7                	div    edi
c0026ebc:	89 c1                	mov    ecx,eax
c0026ebe:	31 f6                	xor    esi,esi
c0026ec0:	89 c8                	mov    eax,ecx
c0026ec2:	89 f2                	mov    edx,esi
c0026ec4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026ec8:	85 c9                	test   ecx,ecx
c0026eca:	74 07                	je     c0026ed3 <__divdi3+0x6b>
c0026ecc:	f7 d8                	neg    eax
c0026ece:	83 d2 00             	adc    edx,0x0
c0026ed1:	f7 da                	neg    edx
c0026ed3:	83 c4 1c             	add    esp,0x1c
c0026ed6:	5b                   	pop    ebx
c0026ed7:	5e                   	pop    esi
c0026ed8:	5f                   	pop    edi
c0026ed9:	5d                   	pop    ebp
c0026eda:	c3                   	ret    
c0026edb:	90                   	nop
c0026edc:	85 ff                	test   edi,edi
c0026ede:	75 0b                	jne    c0026eeb <__divdi3+0x83>
c0026ee0:	b8 01 00 00 00       	mov    eax,0x1
c0026ee5:	31 d2                	xor    edx,edx
c0026ee7:	f7 f3                	div    ebx
c0026ee9:	89 c7                	mov    edi,eax
c0026eeb:	31 d2                	xor    edx,edx
c0026eed:	89 e8                	mov    eax,ebp
c0026eef:	f7 f7                	div    edi
c0026ef1:	89 c6                	mov    esi,eax
c0026ef3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026ef6:	f7 f7                	div    edi
c0026ef8:	89 c1                	mov    ecx,eax
c0026efa:	eb c4                	jmp    c0026ec0 <__divdi3+0x58>
c0026efc:	39 eb                	cmp    ebx,ebp
c0026efe:	77 3c                	ja     c0026f3c <__divdi3+0xd4>
c0026f00:	0f bd f3             	bsr    esi,ebx
c0026f03:	83 f6 1f             	xor    esi,0x1f
c0026f06:	75 40                	jne    c0026f48 <__divdi3+0xe0>
c0026f08:	39 eb                	cmp    ebx,ebp
c0026f0a:	72 09                	jb     c0026f15 <__divdi3+0xad>
c0026f0c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026f0f:	0f 87 97 00 00 00    	ja     c0026fac <__divdi3+0x144>
c0026f15:	b9 01 00 00 00       	mov    ecx,0x1
c0026f1a:	eb a4                	jmp    c0026ec0 <__divdi3+0x58>
c0026f1c:	f7 d9                	neg    ecx
c0026f1e:	83 d3 00             	adc    ebx,0x0
c0026f21:	f7 db                	neg    ebx
c0026f23:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026f26:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026f2a:	89 dd                	mov    ebp,ebx
c0026f2c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026f34:	e9 5f ff ff ff       	jmp    c0026e98 <__divdi3+0x30>
c0026f39:	8d 76 00             	lea    esi,[esi+0x0]
c0026f3c:	31 f6                	xor    esi,esi
c0026f3e:	31 c9                	xor    ecx,ecx
c0026f40:	e9 7b ff ff ff       	jmp    c0026ec0 <__divdi3+0x58>
c0026f45:	8d 76 00             	lea    esi,[esi+0x0]
c0026f48:	b8 20 00 00 00       	mov    eax,0x20
c0026f4d:	29 f0                	sub    eax,esi
c0026f4f:	89 f1                	mov    ecx,esi
c0026f51:	d3 e3                	shl    ebx,cl
c0026f53:	89 fa                	mov    edx,edi
c0026f55:	88 c1                	mov    cl,al
c0026f57:	d3 ea                	shr    edx,cl
c0026f59:	09 da                	or     edx,ebx
c0026f5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026f5f:	89 f1                	mov    ecx,esi
c0026f61:	d3 e7                	shl    edi,cl
c0026f63:	89 eb                	mov    ebx,ebp
c0026f65:	88 c1                	mov    cl,al
c0026f67:	d3 eb                	shr    ebx,cl
c0026f69:	89 f1                	mov    ecx,esi
c0026f6b:	d3 e5                	shl    ebp,cl
c0026f6d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026f70:	88 c1                	mov    cl,al
c0026f72:	d3 ea                	shr    edx,cl
c0026f74:	09 d5                	or     ebp,edx
c0026f76:	89 e8                	mov    eax,ebp
c0026f78:	89 da                	mov    edx,ebx
c0026f7a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026f7e:	89 d3                	mov    ebx,edx
c0026f80:	89 c5                	mov    ebp,eax
c0026f82:	f7 e7                	mul    edi
c0026f84:	39 d3                	cmp    ebx,edx
c0026f86:	72 18                	jb     c0026fa0 <__divdi3+0x138>
c0026f88:	74 0a                	je     c0026f94 <__divdi3+0x12c>
c0026f8a:	89 e9                	mov    ecx,ebp
c0026f8c:	31 f6                	xor    esi,esi
c0026f8e:	e9 2d ff ff ff       	jmp    c0026ec0 <__divdi3+0x58>
c0026f93:	90                   	nop
c0026f94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026f97:	89 f1                	mov    ecx,esi
c0026f99:	d3 e7                	shl    edi,cl
c0026f9b:	39 c7                	cmp    edi,eax
c0026f9d:	73 eb                	jae    c0026f8a <__divdi3+0x122>
c0026f9f:	90                   	nop
c0026fa0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026fa3:	31 f6                	xor    esi,esi
c0026fa5:	e9 16 ff ff ff       	jmp    c0026ec0 <__divdi3+0x58>
c0026faa:	66 90                	xchg   ax,ax
c0026fac:	31 c9                	xor    ecx,ecx
c0026fae:	e9 0d ff ff ff       	jmp    c0026ec0 <__divdi3+0x58>
c0026fb3:	90                   	nop

c0026fb4 <__moddi3>:
c0026fb4:	55                   	push   ebp
c0026fb5:	57                   	push   edi
c0026fb6:	56                   	push   esi
c0026fb7:	53                   	push   ebx
c0026fb8:	83 ec 2c             	sub    esp,0x2c
c0026fbb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026fbf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026fc3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026fc7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026fcb:	85 db                	test   ebx,ebx
c0026fcd:	0f 88 85 00 00 00    	js     c0027058 <__moddi3+0xa4>
c0026fd3:	89 de                	mov    esi,ebx
c0026fd5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026fdd:	89 d7                	mov    edi,edx
c0026fdf:	85 d2                	test   edx,edx
c0026fe1:	79 09                	jns    c0026fec <__moddi3+0x38>
c0026fe3:	f7 d8                	neg    eax
c0026fe5:	83 d2 00             	adc    edx,0x0
c0026fe8:	f7 da                	neg    edx
c0026fea:	89 d7                	mov    edi,edx
c0026fec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026ff0:	89 cd                	mov    ebp,ecx
c0026ff2:	85 ff                	test   edi,edi
c0026ff4:	75 52                	jne    c0027048 <__moddi3+0x94>
c0026ff6:	89 c3                	mov    ebx,eax
c0026ff8:	39 f0                	cmp    eax,esi
c0026ffa:	76 24                	jbe    c0027020 <__moddi3+0x6c>
c0026ffc:	89 c8                	mov    eax,ecx
c0026ffe:	89 f2                	mov    edx,esi
c0027000:	f7 f3                	div    ebx
c0027002:	89 d6                	mov    esi,edx
c0027004:	89 f0                	mov    eax,esi
c0027006:	31 d2                	xor    edx,edx
c0027008:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002700c:	85 c9                	test   ecx,ecx
c002700e:	74 07                	je     c0027017 <__moddi3+0x63>
c0027010:	f7 d8                	neg    eax
c0027012:	83 d2 00             	adc    edx,0x0
c0027015:	f7 da                	neg    edx
c0027017:	83 c4 2c             	add    esp,0x2c
c002701a:	5b                   	pop    ebx
c002701b:	5e                   	pop    esi
c002701c:	5f                   	pop    edi
c002701d:	5d                   	pop    ebp
c002701e:	c3                   	ret    
c002701f:	90                   	nop
c0027020:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027024:	85 db                	test   ebx,ebx
c0027026:	75 0d                	jne    c0027035 <__moddi3+0x81>
c0027028:	b8 01 00 00 00       	mov    eax,0x1
c002702d:	31 d2                	xor    edx,edx
c002702f:	f7 f7                	div    edi
c0027031:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027035:	89 f0                	mov    eax,esi
c0027037:	31 d2                	xor    edx,edx
c0027039:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002703d:	f7 f7                	div    edi
c002703f:	89 e8                	mov    eax,ebp
c0027041:	f7 f7                	div    edi
c0027043:	89 d6                	mov    esi,edx
c0027045:	eb bd                	jmp    c0027004 <__moddi3+0x50>
c0027047:	90                   	nop
c0027048:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002704c:	39 f7                	cmp    edi,esi
c002704e:	76 20                	jbe    c0027070 <__moddi3+0xbc>
c0027050:	89 c8                	mov    eax,ecx
c0027052:	89 f2                	mov    edx,esi
c0027054:	eb b2                	jmp    c0027008 <__moddi3+0x54>
c0027056:	66 90                	xchg   ax,ax
c0027058:	f7 d9                	neg    ecx
c002705a:	83 d3 00             	adc    ebx,0x0
c002705d:	f7 db                	neg    ebx
c002705f:	89 de                	mov    esi,ebx
c0027061:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027069:	e9 6f ff ff ff       	jmp    c0026fdd <__moddi3+0x29>
c002706e:	66 90                	xchg   ax,ax
c0027070:	0f bd c7             	bsr    eax,edi
c0027073:	83 f0 1f             	xor    eax,0x1f
c0027076:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002707a:	75 24                	jne    c00270a0 <__moddi3+0xec>
c002707c:	39 f7                	cmp    edi,esi
c002707e:	72 06                	jb     c0027086 <__moddi3+0xd2>
c0027080:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027084:	77 0c                	ja     c0027092 <__moddi3+0xde>
c0027086:	89 e9                	mov    ecx,ebp
c0027088:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002708c:	19 fe                	sbb    esi,edi
c002708e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027092:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027096:	89 f2                	mov    edx,esi
c0027098:	e9 6b ff ff ff       	jmp    c0027008 <__moddi3+0x54>
c002709d:	8d 76 00             	lea    esi,[esi+0x0]
c00270a0:	b8 20 00 00 00       	mov    eax,0x20
c00270a5:	89 c2                	mov    edx,eax
c00270a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00270ab:	29 da                	sub    edx,ebx
c00270ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00270b1:	88 d9                	mov    cl,bl
c00270b3:	d3 e7                	shl    edi,cl
c00270b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00270b9:	88 d1                	mov    cl,dl
c00270bb:	d3 e8                	shr    eax,cl
c00270bd:	09 c7                	or     edi,eax
c00270bf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00270c3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00270c7:	89 d8                	mov    eax,ebx
c00270c9:	88 d9                	mov    cl,bl
c00270cb:	d3 e7                	shl    edi,cl
c00270cd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00270d1:	89 f3                	mov    ebx,esi
c00270d3:	88 d1                	mov    cl,dl
c00270d5:	d3 eb                	shr    ebx,cl
c00270d7:	89 c7                	mov    edi,eax
c00270d9:	88 c1                	mov    cl,al
c00270db:	d3 e6                	shl    esi,cl
c00270dd:	89 e8                	mov    eax,ebp
c00270df:	88 d1                	mov    cl,dl
c00270e1:	d3 e8                	shr    eax,cl
c00270e3:	09 f0                	or     eax,esi
c00270e5:	89 f9                	mov    ecx,edi
c00270e7:	d3 e5                	shl    ebp,cl
c00270e9:	89 da                	mov    edx,ebx
c00270eb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00270ef:	89 d3                	mov    ebx,edx
c00270f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00270f5:	89 c6                	mov    esi,eax
c00270f7:	89 d1                	mov    ecx,edx
c00270f9:	39 d3                	cmp    ebx,edx
c00270fb:	72 27                	jb     c0027124 <__moddi3+0x170>
c00270fd:	74 21                	je     c0027120 <__moddi3+0x16c>
c00270ff:	29 f5                	sub    ebp,esi
c0027101:	19 cb                	sbb    ebx,ecx
c0027103:	89 de                	mov    esi,ebx
c0027105:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0027109:	d3 e6                	shl    esi,cl
c002710b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002710f:	89 f9                	mov    ecx,edi
c0027111:	d3 ed                	shr    ebp,cl
c0027113:	09 ee                	or     esi,ebp
c0027115:	89 f0                	mov    eax,esi
c0027117:	d3 eb                	shr    ebx,cl
c0027119:	89 da                	mov    edx,ebx
c002711b:	e9 e8 fe ff ff       	jmp    c0027008 <__moddi3+0x54>
c0027120:	39 c5                	cmp    ebp,eax
c0027122:	73 db                	jae    c00270ff <__moddi3+0x14b>
c0027124:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027128:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002712c:	89 d1                	mov    ecx,edx
c002712e:	89 c6                	mov    esi,eax
c0027130:	eb cd                	jmp    c00270ff <__moddi3+0x14b>
c0027132:	66 90                	xchg   ax,ax

c0027134 <__udivdi3>:
c0027134:	55                   	push   ebp
c0027135:	57                   	push   edi
c0027136:	56                   	push   esi
c0027137:	53                   	push   ebx
c0027138:	83 ec 1c             	sub    esp,0x1c
c002713b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002713f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027143:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027147:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002714b:	85 d2                	test   edx,edx
c002714d:	75 41                	jne    c0027190 <__udivdi3+0x5c>
c002714f:	39 f7                	cmp    edi,esi
c0027151:	76 15                	jbe    c0027168 <__udivdi3+0x34>
c0027153:	89 e8                	mov    eax,ebp
c0027155:	89 f2                	mov    edx,esi
c0027157:	f7 f7                	div    edi
c0027159:	31 db                	xor    ebx,ebx
c002715b:	89 da                	mov    edx,ebx
c002715d:	83 c4 1c             	add    esp,0x1c
c0027160:	5b                   	pop    ebx
c0027161:	5e                   	pop    esi
c0027162:	5f                   	pop    edi
c0027163:	5d                   	pop    ebp
c0027164:	c3                   	ret    
c0027165:	8d 76 00             	lea    esi,[esi+0x0]
c0027168:	89 f9                	mov    ecx,edi
c002716a:	85 ff                	test   edi,edi
c002716c:	75 0b                	jne    c0027179 <__udivdi3+0x45>
c002716e:	b8 01 00 00 00       	mov    eax,0x1
c0027173:	31 d2                	xor    edx,edx
c0027175:	f7 f7                	div    edi
c0027177:	89 c1                	mov    ecx,eax
c0027179:	31 d2                	xor    edx,edx
c002717b:	89 f0                	mov    eax,esi
c002717d:	f7 f1                	div    ecx
c002717f:	89 c3                	mov    ebx,eax
c0027181:	89 e8                	mov    eax,ebp
c0027183:	f7 f1                	div    ecx
c0027185:	89 da                	mov    edx,ebx
c0027187:	83 c4 1c             	add    esp,0x1c
c002718a:	5b                   	pop    ebx
c002718b:	5e                   	pop    esi
c002718c:	5f                   	pop    edi
c002718d:	5d                   	pop    ebp
c002718e:	c3                   	ret    
c002718f:	90                   	nop
c0027190:	39 f2                	cmp    edx,esi
c0027192:	77 1c                	ja     c00271b0 <__udivdi3+0x7c>
c0027194:	0f bd da             	bsr    ebx,edx
c0027197:	83 f3 1f             	xor    ebx,0x1f
c002719a:	75 24                	jne    c00271c0 <__udivdi3+0x8c>
c002719c:	39 f2                	cmp    edx,esi
c002719e:	72 08                	jb     c00271a8 <__udivdi3+0x74>
c00271a0:	39 ef                	cmp    edi,ebp
c00271a2:	0f 87 84 00 00 00    	ja     c002722c <__udivdi3+0xf8>
c00271a8:	b8 01 00 00 00       	mov    eax,0x1
c00271ad:	eb ac                	jmp    c002715b <__udivdi3+0x27>
c00271af:	90                   	nop
c00271b0:	31 db                	xor    ebx,ebx
c00271b2:	31 c0                	xor    eax,eax
c00271b4:	89 da                	mov    edx,ebx
c00271b6:	83 c4 1c             	add    esp,0x1c
c00271b9:	5b                   	pop    ebx
c00271ba:	5e                   	pop    esi
c00271bb:	5f                   	pop    edi
c00271bc:	5d                   	pop    ebp
c00271bd:	c3                   	ret    
c00271be:	66 90                	xchg   ax,ax
c00271c0:	b8 20 00 00 00       	mov    eax,0x20
c00271c5:	29 d8                	sub    eax,ebx
c00271c7:	88 d9                	mov    cl,bl
c00271c9:	d3 e2                	shl    edx,cl
c00271cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00271cf:	89 fa                	mov    edx,edi
c00271d1:	88 c1                	mov    cl,al
c00271d3:	d3 ea                	shr    edx,cl
c00271d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00271d9:	09 d1                	or     ecx,edx
c00271db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00271df:	88 d9                	mov    cl,bl
c00271e1:	d3 e7                	shl    edi,cl
c00271e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00271e7:	89 f7                	mov    edi,esi
c00271e9:	88 c1                	mov    cl,al
c00271eb:	d3 ef                	shr    edi,cl
c00271ed:	88 d9                	mov    cl,bl
c00271ef:	d3 e6                	shl    esi,cl
c00271f1:	89 ea                	mov    edx,ebp
c00271f3:	88 c1                	mov    cl,al
c00271f5:	d3 ea                	shr    edx,cl
c00271f7:	09 d6                	or     esi,edx
c00271f9:	89 f0                	mov    eax,esi
c00271fb:	89 fa                	mov    edx,edi
c00271fd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027201:	89 d7                	mov    edi,edx
c0027203:	89 c6                	mov    esi,eax
c0027205:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027209:	39 d7                	cmp    edi,edx
c002720b:	72 13                	jb     c0027220 <__udivdi3+0xec>
c002720d:	74 09                	je     c0027218 <__udivdi3+0xe4>
c002720f:	89 f0                	mov    eax,esi
c0027211:	31 db                	xor    ebx,ebx
c0027213:	e9 43 ff ff ff       	jmp    c002715b <__udivdi3+0x27>
c0027218:	88 d9                	mov    cl,bl
c002721a:	d3 e5                	shl    ebp,cl
c002721c:	39 c5                	cmp    ebp,eax
c002721e:	73 ef                	jae    c002720f <__udivdi3+0xdb>
c0027220:	8d 46 ff             	lea    eax,[esi-0x1]
c0027223:	31 db                	xor    ebx,ebx
c0027225:	e9 31 ff ff ff       	jmp    c002715b <__udivdi3+0x27>
c002722a:	66 90                	xchg   ax,ax
c002722c:	31 c0                	xor    eax,eax
c002722e:	e9 28 ff ff ff       	jmp    c002715b <__udivdi3+0x27>
c0027233:	90                   	nop

c0027234 <__umoddi3>:
c0027234:	55                   	push   ebp
c0027235:	57                   	push   edi
c0027236:	56                   	push   esi
c0027237:	53                   	push   ebx
c0027238:	83 ec 1c             	sub    esp,0x1c
c002723b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002723f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027243:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027247:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002724b:	89 da                	mov    edx,ebx
c002724d:	85 c0                	test   eax,eax
c002724f:	75 37                	jne    c0027288 <__umoddi3+0x54>
c0027251:	39 df                	cmp    edi,ebx
c0027253:	76 13                	jbe    c0027268 <__umoddi3+0x34>
c0027255:	89 f0                	mov    eax,esi
c0027257:	f7 f7                	div    edi
c0027259:	89 d0                	mov    eax,edx
c002725b:	31 d2                	xor    edx,edx
c002725d:	83 c4 1c             	add    esp,0x1c
c0027260:	5b                   	pop    ebx
c0027261:	5e                   	pop    esi
c0027262:	5f                   	pop    edi
c0027263:	5d                   	pop    ebp
c0027264:	c3                   	ret    
c0027265:	8d 76 00             	lea    esi,[esi+0x0]
c0027268:	89 fd                	mov    ebp,edi
c002726a:	85 ff                	test   edi,edi
c002726c:	75 0b                	jne    c0027279 <__umoddi3+0x45>
c002726e:	b8 01 00 00 00       	mov    eax,0x1
c0027273:	31 d2                	xor    edx,edx
c0027275:	f7 f7                	div    edi
c0027277:	89 c5                	mov    ebp,eax
c0027279:	89 d8                	mov    eax,ebx
c002727b:	31 d2                	xor    edx,edx
c002727d:	f7 f5                	div    ebp
c002727f:	89 f0                	mov    eax,esi
c0027281:	f7 f5                	div    ebp
c0027283:	89 d0                	mov    eax,edx
c0027285:	eb d4                	jmp    c002725b <__umoddi3+0x27>
c0027287:	90                   	nop
c0027288:	89 f1                	mov    ecx,esi
c002728a:	39 d8                	cmp    eax,ebx
c002728c:	76 0a                	jbe    c0027298 <__umoddi3+0x64>
c002728e:	89 f0                	mov    eax,esi
c0027290:	83 c4 1c             	add    esp,0x1c
c0027293:	5b                   	pop    ebx
c0027294:	5e                   	pop    esi
c0027295:	5f                   	pop    edi
c0027296:	5d                   	pop    ebp
c0027297:	c3                   	ret    
c0027298:	0f bd e8             	bsr    ebp,eax
c002729b:	83 f5 1f             	xor    ebp,0x1f
c002729e:	75 1c                	jne    c00272bc <__umoddi3+0x88>
c00272a0:	39 d8                	cmp    eax,ebx
c00272a2:	72 04                	jb     c00272a8 <__umoddi3+0x74>
c00272a4:	39 f7                	cmp    edi,esi
c00272a6:	77 08                	ja     c00272b0 <__umoddi3+0x7c>
c00272a8:	89 da                	mov    edx,ebx
c00272aa:	29 fe                	sub    esi,edi
c00272ac:	19 c2                	sbb    edx,eax
c00272ae:	89 f1                	mov    ecx,esi
c00272b0:	89 c8                	mov    eax,ecx
c00272b2:	83 c4 1c             	add    esp,0x1c
c00272b5:	5b                   	pop    ebx
c00272b6:	5e                   	pop    esi
c00272b7:	5f                   	pop    edi
c00272b8:	5d                   	pop    ebp
c00272b9:	c3                   	ret    
c00272ba:	66 90                	xchg   ax,ax
c00272bc:	ba 20 00 00 00       	mov    edx,0x20
c00272c1:	29 ea                	sub    edx,ebp
c00272c3:	89 e9                	mov    ecx,ebp
c00272c5:	d3 e0                	shl    eax,cl
c00272c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00272cb:	89 f8                	mov    eax,edi
c00272cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00272d1:	88 d1                	mov    cl,dl
c00272d3:	d3 e8                	shr    eax,cl
c00272d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00272d9:	09 c1                	or     ecx,eax
c00272db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00272df:	89 e9                	mov    ecx,ebp
c00272e1:	d3 e7                	shl    edi,cl
c00272e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00272e7:	89 d8                	mov    eax,ebx
c00272e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00272ed:	88 d1                	mov    cl,dl
c00272ef:	d3 e8                	shr    eax,cl
c00272f1:	89 c7                	mov    edi,eax
c00272f3:	89 e9                	mov    ecx,ebp
c00272f5:	d3 e3                	shl    ebx,cl
c00272f7:	89 f0                	mov    eax,esi
c00272f9:	88 d1                	mov    cl,dl
c00272fb:	d3 e8                	shr    eax,cl
c00272fd:	09 d8                	or     eax,ebx
c00272ff:	89 e9                	mov    ecx,ebp
c0027301:	d3 e6                	shl    esi,cl
c0027303:	89 f3                	mov    ebx,esi
c0027305:	89 fa                	mov    edx,edi
c0027307:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002730b:	89 d1                	mov    ecx,edx
c002730d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027311:	89 c6                	mov    esi,eax
c0027313:	89 d7                	mov    edi,edx
c0027315:	39 d1                	cmp    ecx,edx
c0027317:	72 27                	jb     c0027340 <__umoddi3+0x10c>
c0027319:	74 21                	je     c002733c <__umoddi3+0x108>
c002731b:	89 ca                	mov    edx,ecx
c002731d:	29 f3                	sub    ebx,esi
c002731f:	19 fa                	sbb    edx,edi
c0027321:	89 d0                	mov    eax,edx
c0027323:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027327:	d3 e0                	shl    eax,cl
c0027329:	89 e9                	mov    ecx,ebp
c002732b:	d3 eb                	shr    ebx,cl
c002732d:	09 d8                	or     eax,ebx
c002732f:	d3 ea                	shr    edx,cl
c0027331:	83 c4 1c             	add    esp,0x1c
c0027334:	5b                   	pop    ebx
c0027335:	5e                   	pop    esi
c0027336:	5f                   	pop    edi
c0027337:	5d                   	pop    ebp
c0027338:	c3                   	ret    
c0027339:	8d 76 00             	lea    esi,[esi+0x0]
c002733c:	39 c3                	cmp    ebx,eax
c002733e:	73 db                	jae    c002731b <__umoddi3+0xe7>
c0027340:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027344:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027348:	89 d7                	mov    edi,edx
c002734a:	89 c6                	mov    esi,eax
c002734c:	eb cd                	jmp    c002731b <__umoddi3+0xe7>

c002734e <__addsf3>:
c002734e:	55                   	push   ebp
c002734f:	89 e5                	mov    ebp,esp
c0027351:	57                   	push   edi
c0027352:	56                   	push   esi
c0027353:	53                   	push   ebx
c0027354:	83 ec 08             	sub    esp,0x8
c0027357:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002735a:	89 fa                	mov    edx,edi
c002735c:	89 f8                	mov    eax,edi
c002735e:	c1 f8 17             	sar    eax,0x17
c0027361:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027364:	c1 e2 08             	shl    edx,0x8
c0027367:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002736d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027370:	89 de                	mov    esi,ebx
c0027372:	c1 fe 17             	sar    esi,0x17
c0027375:	c1 e3 08             	shl    ebx,0x8
c0027378:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002737e:	31 f0                	xor    eax,esi
c0027380:	0f 88 3b 01 00 00    	js     c00274c1 <__addsf3+0x173>
c0027386:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027389:	29 f1                	sub    ecx,esi
c002738b:	85 c9                	test   ecx,ecx
c002738d:	7e 54                	jle    c00273e3 <__addsf3+0x95>
c002738f:	89 f0                	mov    eax,esi
c0027391:	84 c0                	test   al,al
c0027393:	75 10                	jne    c00273a5 <__addsf3+0x57>
c0027395:	85 db                	test   ebx,ebx
c0027397:	0f 84 aa 02 00 00    	je     c0027647 <__addsf3+0x2f9>
c002739d:	49                   	dec    ecx
c002739e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00273a1:	74 38                	je     c00273db <__addsf3+0x8d>
c00273a3:	eb 13                	jmp    c00273b8 <__addsf3+0x6a>
c00273a5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00273a8:	f7 d0                	not    eax
c00273aa:	84 c0                	test   al,al
c00273ac:	0f 84 95 02 00 00    	je     c0027647 <__addsf3+0x2f9>
c00273b2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00273b8:	83 f9 1f             	cmp    ecx,0x1f
c00273bb:	0f 8f 86 02 00 00    	jg     c0027647 <__addsf3+0x2f9>
c00273c1:	89 de                	mov    esi,ebx
c00273c3:	d3 ee                	shr    esi,cl
c00273c5:	b8 20 00 00 00       	mov    eax,0x20
c00273ca:	29 c8                	sub    eax,ecx
c00273cc:	89 c1                	mov    ecx,eax
c00273ce:	d3 e3                	shl    ebx,cl
c00273d0:	31 c0                	xor    eax,eax
c00273d2:	85 db                	test   ebx,ebx
c00273d4:	0f 95 c0             	setne  al
c00273d7:	09 f0                	or     eax,esi
c00273d9:	01 d0                	add    eax,edx
c00273db:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00273de:	e9 b6 00 00 00       	jmp    c0027499 <__addsf3+0x14b>
c00273e3:	74 5c                	je     c0027441 <__addsf3+0xf3>
c00273e5:	89 f1                	mov    ecx,esi
c00273e7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00273ea:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00273ed:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00273f1:	75 14                	jne    c0027407 <__addsf3+0xb9>
c00273f3:	85 d2                	test   edx,edx
c00273f5:	0f 84 4c 02 00 00    	je     c0027647 <__addsf3+0x2f9>
c00273fb:	49                   	dec    ecx
c00273fc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00273ff:	0f 84 94 00 00 00    	je     c0027499 <__addsf3+0x14b>
c0027405:	eb 12                	jmp    c0027419 <__addsf3+0xcb>
c0027407:	89 f0                	mov    eax,esi
c0027409:	f7 d0                	not    eax
c002740b:	84 c0                	test   al,al
c002740d:	0f 84 34 02 00 00    	je     c0027647 <__addsf3+0x2f9>
c0027413:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027419:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002741c:	83 f9 1f             	cmp    ecx,0x1f
c002741f:	0f 8f 22 02 00 00    	jg     c0027647 <__addsf3+0x2f9>
c0027425:	89 d7                	mov    edi,edx
c0027427:	d3 ef                	shr    edi,cl
c0027429:	b8 20 00 00 00       	mov    eax,0x20
c002742e:	29 c8                	sub    eax,ecx
c0027430:	89 c1                	mov    ecx,eax
c0027432:	d3 e2                	shl    edx,cl
c0027434:	31 c0                	xor    eax,eax
c0027436:	85 d2                	test   edx,edx
c0027438:	0f 95 c0             	setne  al
c002743b:	09 f8                	or     eax,edi
c002743d:	01 d8                	add    eax,ebx
c002743f:	eb 58                	jmp    c0027499 <__addsf3+0x14b>
c0027441:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027444:	8d 70 01             	lea    esi,[eax+0x1]
c0027447:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002744d:	75 32                	jne    c0027481 <__addsf3+0x133>
c002744f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027453:	75 1f                	jne    c0027474 <__addsf3+0x126>
c0027455:	85 d2                	test   edx,edx
c0027457:	0f 84 e0 01 00 00    	je     c002763d <__addsf3+0x2ef>
c002745d:	85 db                	test   ebx,ebx
c002745f:	0f 84 e2 01 00 00    	je     c0027647 <__addsf3+0x2f9>
c0027465:	89 d0                	mov    eax,edx
c0027467:	01 d8                	add    eax,ebx
c0027469:	0f 89 a9 01 00 00    	jns    c0027618 <__addsf3+0x2ca>
c002746f:	e9 9d 01 00 00       	jmp    c0027611 <__addsf3+0x2c3>
c0027474:	85 d2                	test   edx,edx
c0027476:	0f 85 cb 01 00 00    	jne    c0027647 <__addsf3+0x2f9>
c002747c:	e9 bc 01 00 00       	jmp    c002763d <__addsf3+0x2ef>
c0027481:	31 c0                	xor    eax,eax
c0027483:	89 f1                	mov    ecx,esi
c0027485:	f7 d1                	not    ecx
c0027487:	84 c9                	test   cl,cl
c0027489:	0f 84 90 01 00 00    	je     c002761f <__addsf3+0x2d1>
c002748f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027492:	d1 e8                	shr    eax,1
c0027494:	e9 86 01 00 00       	jmp    c002761f <__addsf3+0x2d1>
c0027499:	85 c0                	test   eax,eax
c002749b:	0f 89 7e 01 00 00    	jns    c002761f <__addsf3+0x2d1>
c00274a1:	46                   	inc    esi
c00274a2:	89 f2                	mov    edx,esi
c00274a4:	f7 d2                	not    edx
c00274a6:	84 d2                	test   dl,dl
c00274a8:	0f 84 6f 01 00 00    	je     c002761d <__addsf3+0x2cf>
c00274ae:	89 c2                	mov    edx,eax
c00274b0:	83 e2 01             	and    edx,0x1
c00274b3:	d1 e8                	shr    eax,1
c00274b5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00274ba:	09 d0                	or     eax,edx
c00274bc:	e9 5e 01 00 00       	jmp    c002761f <__addsf3+0x2d1>
c00274c1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00274c5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00274c8:	89 f0                	mov    eax,esi
c00274ca:	0f b6 c0             	movzx  eax,al
c00274cd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00274d0:	29 c1                	sub    ecx,eax
c00274d2:	85 c9                	test   ecx,ecx
c00274d4:	7e 55                	jle    c002752b <__addsf3+0x1dd>
c00274d6:	85 c0                	test   eax,eax
c00274d8:	75 11                	jne    c00274eb <__addsf3+0x19d>
c00274da:	85 db                	test   ebx,ebx
c00274dc:	0f 84 65 01 00 00    	je     c0027647 <__addsf3+0x2f9>
c00274e2:	49                   	dec    ecx
c00274e3:	75 19                	jne    c00274fe <__addsf3+0x1b0>
c00274e5:	89 d0                	mov    eax,edx
c00274e7:	29 d8                	sub    eax,ebx
c00274e9:	eb 38                	jmp    c0027523 <__addsf3+0x1d5>
c00274eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00274ee:	f7 d0                	not    eax
c00274f0:	84 c0                	test   al,al
c00274f2:	0f 84 4f 01 00 00    	je     c0027647 <__addsf3+0x2f9>
c00274f8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00274fe:	83 f9 1f             	cmp    ecx,0x1f
c0027501:	0f 8f 40 01 00 00    	jg     c0027647 <__addsf3+0x2f9>
c0027507:	89 de                	mov    esi,ebx
c0027509:	d3 ee                	shr    esi,cl
c002750b:	b8 20 00 00 00       	mov    eax,0x20
c0027510:	29 c8                	sub    eax,ecx
c0027512:	89 c1                	mov    ecx,eax
c0027514:	d3 e3                	shl    ebx,cl
c0027516:	31 c0                	xor    eax,eax
c0027518:	85 db                	test   ebx,ebx
c002751a:	0f 95 c0             	setne  al
c002751d:	09 f0                	or     eax,esi
c002751f:	29 c2                	sub    edx,eax
c0027521:	89 d0                	mov    eax,edx
c0027523:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027526:	e9 af 00 00 00       	jmp    c00275da <__addsf3+0x28c>
c002752b:	74 5c                	je     c0027589 <__addsf3+0x23b>
c002752d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027530:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027533:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027537:	75 14                	jne    c002754d <__addsf3+0x1ff>
c0027539:	85 d2                	test   edx,edx
c002753b:	0f 84 06 01 00 00    	je     c0027647 <__addsf3+0x2f9>
c0027541:	48                   	dec    eax
c0027542:	75 1b                	jne    c002755f <__addsf3+0x211>
c0027544:	89 d8                	mov    eax,ebx
c0027546:	29 d0                	sub    eax,edx
c0027548:	e9 8d 00 00 00       	jmp    c00275da <__addsf3+0x28c>
c002754d:	89 f1                	mov    ecx,esi
c002754f:	f7 d1                	not    ecx
c0027551:	84 c9                	test   cl,cl
c0027553:	0f 84 ee 00 00 00    	je     c0027647 <__addsf3+0x2f9>
c0027559:	81 ca 00 00 00 80    	or     edx,0x80000000
c002755f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027562:	83 f8 1f             	cmp    eax,0x1f
c0027565:	0f 8f dc 00 00 00    	jg     c0027647 <__addsf3+0x2f9>
c002756b:	89 d7                	mov    edi,edx
c002756d:	88 c1                	mov    cl,al
c002756f:	d3 ef                	shr    edi,cl
c0027571:	b9 20 00 00 00       	mov    ecx,0x20
c0027576:	29 c1                	sub    ecx,eax
c0027578:	d3 e2                	shl    edx,cl
c002757a:	31 c0                	xor    eax,eax
c002757c:	85 d2                	test   edx,edx
c002757e:	0f 95 c0             	setne  al
c0027581:	09 f8                	or     eax,edi
c0027583:	29 c3                	sub    ebx,eax
c0027585:	89 d8                	mov    eax,ebx
c0027587:	eb 51                	jmp    c00275da <__addsf3+0x28c>
c0027589:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002758c:	40                   	inc    eax
c002758d:	a8 fe                	test   al,0xfe
c002758f:	75 3d                	jne    c00275ce <__addsf3+0x280>
c0027591:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027595:	0f 85 a7 00 00 00    	jne    c0027642 <__addsf3+0x2f4>
c002759b:	85 d2                	test   edx,edx
c002759d:	75 12                	jne    c00275b1 <__addsf3+0x263>
c002759f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275a2:	85 db                	test   ebx,ebx
c00275a4:	0f 85 9d 00 00 00    	jne    c0027647 <__addsf3+0x2f9>
c00275aa:	31 ff                	xor    edi,edi
c00275ac:	e9 96 00 00 00       	jmp    c0027647 <__addsf3+0x2f9>
c00275b1:	85 db                	test   ebx,ebx
c00275b3:	0f 84 8e 00 00 00    	je     c0027647 <__addsf3+0x2f9>
c00275b9:	89 d0                	mov    eax,edx
c00275bb:	29 d8                	sub    eax,ebx
c00275bd:	79 06                	jns    c00275c5 <__addsf3+0x277>
c00275bf:	89 d8                	mov    eax,ebx
c00275c1:	29 d0                	sub    eax,edx
c00275c3:	eb 5a                	jmp    c002761f <__addsf3+0x2d1>
c00275c5:	bf 00 00 00 00       	mov    edi,0x0
c00275ca:	74 7b                	je     c0027647 <__addsf3+0x2f9>
c00275cc:	eb 4a                	jmp    c0027618 <__addsf3+0x2ca>
c00275ce:	89 d0                	mov    eax,edx
c00275d0:	29 d8                	sub    eax,ebx
c00275d2:	79 12                	jns    c00275e6 <__addsf3+0x298>
c00275d4:	89 d8                	mov    eax,ebx
c00275d6:	29 d0                	sub    eax,edx
c00275d8:	eb 09                	jmp    c00275e3 <__addsf3+0x295>
c00275da:	85 c0                	test   eax,eax
c00275dc:	79 41                	jns    c002761f <__addsf3+0x2d1>
c00275de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00275e3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00275e6:	31 f6                	xor    esi,esi
c00275e8:	85 c0                	test   eax,eax
c00275ea:	74 33                	je     c002761f <__addsf3+0x2d1>
c00275ec:	0f bd c8             	bsr    ecx,eax
c00275ef:	83 f1 1f             	xor    ecx,0x1f
c00275f2:	d3 e0                	shl    eax,cl
c00275f4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00275f8:	39 ca                	cmp    edx,ecx
c00275fa:	7f 10                	jg     c002760c <__addsf3+0x2be>
c00275fc:	29 d1                	sub    ecx,edx
c00275fe:	41                   	inc    ecx
c00275ff:	d3 e8                	shr    eax,cl
c0027601:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027604:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002760a:	eb 13                	jmp    c002761f <__addsf3+0x2d1>
c002760c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002760f:	29 ce                	sub    esi,ecx
c0027611:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027616:	eb 07                	jmp    c002761f <__addsf3+0x2d1>
c0027618:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002761b:	eb 02                	jmp    c002761f <__addsf3+0x2d1>
c002761d:	31 c0                	xor    eax,eax
c002761f:	89 c2                	mov    edx,eax
c0027621:	c1 ea 08             	shr    edx,0x8
c0027624:	a8 7f                	test   al,0x7f
c0027626:	0f 95 c1             	setne  cl
c0027629:	09 d1                	or     ecx,edx
c002762b:	83 e1 01             	and    ecx,0x1
c002762e:	c1 e8 07             	shr    eax,0x7
c0027631:	21 c8                	and    eax,ecx
c0027633:	c1 e6 17             	shl    esi,0x17
c0027636:	09 d6                	or     esi,edx
c0027638:	8d 3c 30             	lea    edi,[eax+esi*1]
c002763b:	eb 0a                	jmp    c0027647 <__addsf3+0x2f9>
c002763d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027640:	eb 05                	jmp    c0027647 <__addsf3+0x2f9>
c0027642:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027647:	89 f8                	mov    eax,edi
c0027649:	5a                   	pop    edx
c002764a:	59                   	pop    ecx
c002764b:	5b                   	pop    ebx
c002764c:	5e                   	pop    esi
c002764d:	5f                   	pop    edi
c002764e:	5d                   	pop    ebp
c002764f:	c3                   	ret    

c0027650 <__subsf3>:
c0027650:	55                   	push   ebp
c0027651:	89 e5                	mov    ebp,esp
c0027653:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027656:	05 00 00 00 80       	add    eax,0x80000000
c002765b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002765e:	5d                   	pop    ebp
c002765f:	e9 ea fc ff ff       	jmp    c002734e <__addsf3>

c0027664 <__negsf2>:
c0027664:	55                   	push   ebp
c0027665:	89 e5                	mov    ebp,esp
c0027667:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002766a:	05 00 00 00 80       	add    eax,0x80000000
c002766f:	5d                   	pop    ebp
c0027670:	c3                   	ret    

c0027671 <__mulsf3>:
c0027671:	55                   	push   ebp
c0027672:	89 e5                	mov    ebp,esp
c0027674:	57                   	push   edi
c0027675:	56                   	push   esi
c0027676:	53                   	push   ebx
c0027677:	83 ec 1c             	sub    esp,0x1c
c002767a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002767d:	89 f0                	mov    eax,esi
c002767f:	89 f1                	mov    ecx,esi
c0027681:	c1 f9 17             	sar    ecx,0x17
c0027684:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027687:	c1 e0 08             	shl    eax,0x8
c002768a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002768f:	89 c1                	mov    ecx,eax
c0027691:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027694:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027697:	89 c7                	mov    edi,eax
c0027699:	c1 ff 17             	sar    edi,0x17
c002769c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00276a0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00276a3:	89 f8                	mov    eax,edi
c00276a5:	0f b6 c0             	movzx  eax,al
c00276a8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00276ab:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00276af:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00276b2:	42                   	inc    edx
c00276b3:	80 e2 fe             	and    dl,0xfe
c00276b6:	75 7b                	jne    c0027733 <__mulsf3+0xc2>
c00276b8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00276bc:	74 54                	je     c0027712 <__mulsf3+0xa1>
c00276be:	85 c9                	test   ecx,ecx
c00276c0:	0f 85 64 01 00 00    	jne    c002782a <__mulsf3+0x1b9>
c00276c6:	8d 57 01             	lea    edx,[edi+0x1]
c00276c9:	80 e2 fe             	and    dl,0xfe
c00276cc:	75 1f                	jne    c00276ed <__mulsf3+0x7c>
c00276ce:	85 c0                	test   eax,eax
c00276d0:	b8 00 00 00 00       	mov    eax,0x0
c00276d5:	74 29                	je     c0027700 <__mulsf3+0x8f>
c00276d7:	53                   	push   ebx
c00276d8:	53                   	push   ebx
c00276d9:	50                   	push   eax
c00276da:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00276dd:	e8 96 05 00 00       	call   c0027c78 <__nesf2>
c00276e2:	83 c4 10             	add    esp,0x10
c00276e5:	85 c0                	test   eax,eax
c00276e7:	0f 85 3a 01 00 00    	jne    c0027827 <__mulsf3+0x1b6>
c00276ed:	85 ff                	test   edi,edi
c00276ef:	0f 89 35 01 00 00    	jns    c002782a <__mulsf3+0x1b9>
c00276f5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00276fb:	e9 2a 01 00 00       	jmp    c002782a <__mulsf3+0x1b9>
c0027700:	51                   	push   ecx
c0027701:	51                   	push   ecx
c0027702:	50                   	push   eax
c0027703:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027706:	e8 6d 05 00 00       	call   c0027c78 <__nesf2>
c002770b:	83 c4 10             	add    esp,0x10
c002770e:	85 c0                	test   eax,eax
c0027710:	eb 15                	jmp    c0027727 <__mulsf3+0xb6>
c0027712:	85 c9                	test   ecx,ecx
c0027714:	74 0b                	je     c0027721 <__mulsf3+0xb0>
c0027716:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027719:	01 c9                	add    ecx,ecx
c002771b:	78 16                	js     c0027733 <__mulsf3+0xc2>
c002771d:	89 d3                	mov    ebx,edx
c002771f:	eb f5                	jmp    c0027716 <__mulsf3+0xa5>
c0027721:	89 f8                	mov    eax,edi
c0027723:	f7 d0                	not    eax
c0027725:	84 c0                	test   al,al
c0027727:	75 c4                	jne    c00276ed <__mulsf3+0x7c>
c0027729:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002772e:	e9 f7 00 00 00       	jmp    c002782a <__mulsf3+0x1b9>
c0027733:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027736:	c1 e6 08             	shl    esi,0x8
c0027739:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002773f:	8d 57 01             	lea    edx,[edi+0x1]
c0027742:	80 e2 fe             	and    dl,0xfe
c0027745:	75 63                	jne    c00277aa <__mulsf3+0x139>
c0027747:	85 c0                	test   eax,eax
c0027749:	74 2f                	je     c002777a <__mulsf3+0x109>
c002774b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002774f:	0f 89 d2 00 00 00    	jns    c0027827 <__mulsf3+0x1b6>
c0027755:	52                   	push   edx
c0027756:	52                   	push   edx
c0027757:	6a 00                	push   0x0
c0027759:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002775c:	e8 dc 04 00 00       	call   c0027c3d <__eqsf2>
c0027761:	83 c4 10             	add    esp,0x10
c0027764:	85 c0                	test   eax,eax
c0027766:	0f 85 bb 00 00 00    	jne    c0027827 <__mulsf3+0x1b6>
c002776c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002776f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027775:	e9 b0 00 00 00       	jmp    c002782a <__mulsf3+0x1b9>
c002777a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002777d:	50                   	push   eax
c002777e:	50                   	push   eax
c002777f:	6a 00                	push   0x0
c0027781:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027784:	e8 b4 04 00 00       	call   c0027c3d <__eqsf2>
c0027789:	83 c4 10             	add    esp,0x10
c002778c:	85 c0                	test   eax,eax
c002778e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027791:	75 0c                	jne    c002779f <__mulsf3+0x12e>
c0027793:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027797:	0f 89 8a 00 00 00    	jns    c0027827 <__mulsf3+0x1b6>
c002779d:	eb cd                	jmp    c002776c <__mulsf3+0xfb>
c002779f:	8d 43 ff             	lea    eax,[ebx-0x1]
c00277a2:	01 f6                	add    esi,esi
c00277a4:	78 04                	js     c00277aa <__mulsf3+0x139>
c00277a6:	89 c3                	mov    ebx,eax
c00277a8:	eb f5                	jmp    c002779f <__mulsf3+0x12e>
c00277aa:	89 c8                	mov    eax,ecx
c00277ac:	0d 00 00 00 80       	or     eax,0x80000000
c00277b1:	81 ce 00 00 00 80    	or     esi,0x80000000
c00277b7:	f7 e6                	mul    esi
c00277b9:	85 c0                	test   eax,eax
c00277bb:	0f 95 c0             	setne  al
c00277be:	0f b6 c0             	movzx  eax,al
c00277c1:	09 c2                	or     edx,eax
c00277c3:	78 03                	js     c00277c8 <__mulsf3+0x157>
c00277c5:	01 d2                	add    edx,edx
c00277c7:	4b                   	dec    ebx
c00277c8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00277ce:	7f 22                	jg     c00277f2 <__mulsf3+0x181>
c00277d0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00277d6:	85 db                	test   ebx,ebx
c00277d8:	7f 23                	jg     c00277fd <__mulsf3+0x18c>
c00277da:	83 fb e9             	cmp    ebx,0xffffffe9
c00277dd:	7c 1a                	jl     c00277f9 <__mulsf3+0x188>
c00277df:	81 ca 00 00 00 80    	or     edx,0x80000000
c00277e5:	b9 01 00 00 00       	mov    ecx,0x1
c00277ea:	29 d9                	sub    ecx,ebx
c00277ec:	d3 ea                	shr    edx,cl
c00277ee:	31 db                	xor    ebx,ebx
c00277f0:	eb 0b                	jmp    c00277fd <__mulsf3+0x18c>
c00277f2:	bb ff 00 00 00       	mov    ebx,0xff
c00277f7:	eb 02                	jmp    c00277fb <__mulsf3+0x18a>
c00277f9:	31 db                	xor    ebx,ebx
c00277fb:	31 d2                	xor    edx,edx
c00277fd:	89 d0                	mov    eax,edx
c00277ff:	c1 e8 08             	shr    eax,0x8
c0027802:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027805:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002780b:	09 fb                	or     ebx,edi
c002780d:	c1 e3 17             	shl    ebx,0x17
c0027810:	09 c3                	or     ebx,eax
c0027812:	f6 c2 7f             	test   dl,0x7f
c0027815:	0f 95 c1             	setne  cl
c0027818:	09 c8                	or     eax,ecx
c002781a:	83 e0 01             	and    eax,0x1
c002781d:	c1 ea 07             	shr    edx,0x7
c0027820:	21 c2                	and    edx,eax
c0027822:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027825:	eb 03                	jmp    c002782a <__mulsf3+0x1b9>
c0027827:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002782a:	89 f0                	mov    eax,esi
c002782c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002782f:	5b                   	pop    ebx
c0027830:	5e                   	pop    esi
c0027831:	5f                   	pop    edi
c0027832:	5d                   	pop    ebp
c0027833:	c3                   	ret    

c0027834 <__divsf3>:
c0027834:	55                   	push   ebp
c0027835:	89 e5                	mov    ebp,esp
c0027837:	57                   	push   edi
c0027838:	56                   	push   esi
c0027839:	53                   	push   ebx
c002783a:	83 ec 1c             	sub    esp,0x1c
c002783d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027840:	89 d8                	mov    eax,ebx
c0027842:	89 d9                	mov    ecx,ebx
c0027844:	c1 f9 17             	sar    ecx,0x17
c0027847:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002784a:	c1 e0 08             	shl    eax,0x8
c002784d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027852:	89 c1                	mov    ecx,eax
c0027854:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027857:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002785a:	89 c7                	mov    edi,eax
c002785c:	c1 ff 17             	sar    edi,0x17
c002785f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027863:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027866:	89 f8                	mov    eax,edi
c0027868:	0f b6 c0             	movzx  eax,al
c002786b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002786e:	29 c6                	sub    esi,eax
c0027870:	83 c6 7f             	add    esi,0x7f
c0027873:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027876:	42                   	inc    edx
c0027877:	80 e2 fe             	and    dl,0xfe
c002787a:	0f 85 9c 00 00 00    	jne    c002791c <__divsf3+0xe8>
c0027880:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027884:	74 33                	je     c00278b9 <__divsf3+0x85>
c0027886:	85 c9                	test   ecx,ecx
c0027888:	0f 85 c7 01 00 00    	jne    c0027a55 <__divsf3+0x221>
c002788e:	8d 57 01             	lea    edx,[edi+0x1]
c0027891:	80 e2 fe             	and    dl,0xfe
c0027894:	75 2f                	jne    c00278c5 <__divsf3+0x91>
c0027896:	85 c0                	test   eax,eax
c0027898:	74 2b                	je     c00278c5 <__divsf3+0x91>
c002789a:	51                   	push   ecx
c002789b:	51                   	push   ecx
c002789c:	6a 00                	push   0x0
c002789e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00278a1:	e8 d2 03 00 00       	call   c0027c78 <__nesf2>
c00278a6:	83 c4 10             	add    esp,0x10
c00278a9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00278ac:	85 c0                	test   eax,eax
c00278ae:	0f 85 a1 01 00 00    	jne    c0027a55 <__divsf3+0x221>
c00278b4:	e9 92 01 00 00       	jmp    c0027a4b <__divsf3+0x217>
c00278b9:	85 c9                	test   ecx,ecx
c00278bb:	75 1b                	jne    c00278d8 <__divsf3+0xa4>
c00278bd:	8d 57 01             	lea    edx,[edi+0x1]
c00278c0:	80 e2 fe             	and    dl,0xfe
c00278c3:	74 1e                	je     c00278e3 <__divsf3+0xaf>
c00278c5:	85 ff                	test   edi,edi
c00278c7:	0f 89 88 01 00 00    	jns    c0027a55 <__divsf3+0x221>
c00278cd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00278d3:	e9 7d 01 00 00       	jmp    c0027a55 <__divsf3+0x221>
c00278d8:	8d 56 ff             	lea    edx,[esi-0x1]
c00278db:	01 c9                	add    ecx,ecx
c00278dd:	78 3d                	js     c002791c <__divsf3+0xe8>
c00278df:	89 d6                	mov    esi,edx
c00278e1:	eb f5                	jmp    c00278d8 <__divsf3+0xa4>
c00278e3:	85 c0                	test   eax,eax
c00278e5:	b8 00 00 00 00       	mov    eax,0x0
c00278ea:	74 18                	je     c0027904 <__divsf3+0xd0>
c00278ec:	52                   	push   edx
c00278ed:	52                   	push   edx
c00278ee:	50                   	push   eax
c00278ef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00278f2:	e8 81 03 00 00       	call   c0027c78 <__nesf2>
c00278f7:	83 c4 10             	add    esp,0x10
c00278fa:	85 c0                	test   eax,eax
c00278fc:	0f 85 50 01 00 00    	jne    c0027a52 <__divsf3+0x21e>
c0027902:	eb c1                	jmp    c00278c5 <__divsf3+0x91>
c0027904:	56                   	push   esi
c0027905:	56                   	push   esi
c0027906:	50                   	push   eax
c0027907:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002790a:	e8 69 03 00 00       	call   c0027c78 <__nesf2>
c002790f:	83 c4 10             	add    esp,0x10
c0027912:	85 c0                	test   eax,eax
c0027914:	0f 84 31 01 00 00    	je     c0027a4b <__divsf3+0x217>
c002791a:	eb a9                	jmp    c00278c5 <__divsf3+0x91>
c002791c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002791f:	c1 e3 08             	shl    ebx,0x8
c0027922:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027928:	8d 57 01             	lea    edx,[edi+0x1]
c002792b:	80 e2 fe             	and    dl,0xfe
c002792e:	75 71                	jne    c00279a1 <__divsf3+0x16d>
c0027930:	85 c0                	test   eax,eax
c0027932:	ba 00 00 00 00       	mov    edx,0x0
c0027937:	74 2f                	je     c0027968 <__divsf3+0x134>
c0027939:	51                   	push   ecx
c002793a:	51                   	push   ecx
c002793b:	52                   	push   edx
c002793c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002793f:	e8 f9 02 00 00       	call   c0027c3d <__eqsf2>
c0027944:	83 c4 10             	add    esp,0x10
c0027947:	85 c0                	test   eax,eax
c0027949:	0f 85 03 01 00 00    	jne    c0027a52 <__divsf3+0x21e>
c002794f:	31 d2                	xor    edx,edx
c0027951:	89 d3                	mov    ebx,edx
c0027953:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027956:	31 f8                	xor    eax,edi
c0027958:	0f 89 f7 00 00 00    	jns    c0027a55 <__divsf3+0x221>
c002795e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027963:	e9 ed 00 00 00       	jmp    c0027a55 <__divsf3+0x221>
c0027968:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002796b:	50                   	push   eax
c002796c:	50                   	push   eax
c002796d:	52                   	push   edx
c002796e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027971:	e8 c7 02 00 00       	call   c0027c3d <__eqsf2>
c0027976:	83 c4 10             	add    esp,0x10
c0027979:	85 c0                	test   eax,eax
c002797b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002797e:	75 16                	jne    c0027996 <__divsf3+0x162>
c0027980:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027983:	31 fb                	xor    ebx,edi
c0027985:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002798b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027991:	e9 bf 00 00 00       	jmp    c0027a55 <__divsf3+0x221>
c0027996:	8d 46 01             	lea    eax,[esi+0x1]
c0027999:	01 db                	add    ebx,ebx
c002799b:	78 04                	js     c00279a1 <__divsf3+0x16d>
c002799d:	89 c6                	mov    esi,eax
c002799f:	eb f5                	jmp    c0027996 <__divsf3+0x162>
c00279a1:	89 c8                	mov    eax,ecx
c00279a3:	0d 00 00 00 80       	or     eax,0x80000000
c00279a8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00279ae:	31 d2                	xor    edx,edx
c00279b0:	39 d8                	cmp    eax,ebx
c00279b2:	72 07                	jb     c00279bb <__divsf3+0x187>
c00279b4:	29 d8                	sub    eax,ebx
c00279b6:	ba 01 00 00 00       	mov    edx,0x1
c00279bb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00279c2:	01 d2                	add    edx,edx
c00279c4:	89 c1                	mov    ecx,eax
c00279c6:	01 c0                	add    eax,eax
c00279c8:	85 c9                	test   ecx,ecx
c00279ca:	78 04                	js     c00279d0 <__divsf3+0x19c>
c00279cc:	39 c3                	cmp    ebx,eax
c00279ce:	77 05                	ja     c00279d5 <__divsf3+0x1a1>
c00279d0:	29 d8                	sub    eax,ebx
c00279d2:	83 ca 01             	or     edx,0x1
c00279d5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00279d8:	75 e8                	jne    c00279c2 <__divsf3+0x18e>
c00279da:	85 c0                	test   eax,eax
c00279dc:	0f 95 c0             	setne  al
c00279df:	0f b6 c0             	movzx  eax,al
c00279e2:	c1 e2 06             	shl    edx,0x6
c00279e5:	09 c2                	or     edx,eax
c00279e7:	78 03                	js     c00279ec <__divsf3+0x1b8>
c00279e9:	01 d2                	add    edx,edx
c00279eb:	4e                   	dec    esi
c00279ec:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00279f2:	7f 22                	jg     c0027a16 <__divsf3+0x1e2>
c00279f4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00279fa:	85 f6                	test   esi,esi
c00279fc:	7f 23                	jg     c0027a21 <__divsf3+0x1ed>
c00279fe:	83 fe e9             	cmp    esi,0xffffffe9
c0027a01:	7c 1a                	jl     c0027a1d <__divsf3+0x1e9>
c0027a03:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027a09:	b9 01 00 00 00       	mov    ecx,0x1
c0027a0e:	29 f1                	sub    ecx,esi
c0027a10:	d3 ea                	shr    edx,cl
c0027a12:	31 f6                	xor    esi,esi
c0027a14:	eb 0b                	jmp    c0027a21 <__divsf3+0x1ed>
c0027a16:	be ff 00 00 00       	mov    esi,0xff
c0027a1b:	eb 02                	jmp    c0027a1f <__divsf3+0x1eb>
c0027a1d:	31 f6                	xor    esi,esi
c0027a1f:	31 d2                	xor    edx,edx
c0027a21:	89 d0                	mov    eax,edx
c0027a23:	c1 e8 08             	shr    eax,0x8
c0027a26:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027a29:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027a2f:	09 fe                	or     esi,edi
c0027a31:	c1 e6 17             	shl    esi,0x17
c0027a34:	09 c6                	or     esi,eax
c0027a36:	f6 c2 7f             	test   dl,0x7f
c0027a39:	0f 95 c1             	setne  cl
c0027a3c:	09 c8                	or     eax,ecx
c0027a3e:	83 e0 01             	and    eax,0x1
c0027a41:	c1 ea 07             	shr    edx,0x7
c0027a44:	21 c2                	and    edx,eax
c0027a46:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027a49:	eb 0a                	jmp    c0027a55 <__divsf3+0x221>
c0027a4b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027a50:	eb 03                	jmp    c0027a55 <__divsf3+0x221>
c0027a52:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027a55:	89 d8                	mov    eax,ebx
c0027a57:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027a5a:	5b                   	pop    ebx
c0027a5b:	5e                   	pop    esi
c0027a5c:	5f                   	pop    edi
c0027a5d:	5d                   	pop    ebp
c0027a5e:	c3                   	ret    

c0027a5f <__floatsisf>:
c0027a5f:	55                   	push   ebp
c0027a60:	89 e5                	mov    ebp,esp
c0027a62:	53                   	push   ebx
c0027a63:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027a66:	85 d2                	test   edx,edx
c0027a68:	7e 2b                	jle    c0027a95 <__floatsisf+0x36>
c0027a6a:	0f bd ca             	bsr    ecx,edx
c0027a6d:	83 f1 1f             	xor    ecx,0x1f
c0027a70:	d3 e2                	shl    edx,cl
c0027a72:	89 d0                	mov    eax,edx
c0027a74:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a79:	89 c3                	mov    ebx,eax
c0027a7b:	c1 eb 08             	shr    ebx,0x8
c0027a7e:	80 e2 7f             	and    dl,0x7f
c0027a81:	0f 95 c2             	setne  dl
c0027a84:	09 da                	or     edx,ebx
c0027a86:	83 e2 01             	and    edx,0x1
c0027a89:	c1 e8 07             	shr    eax,0x7
c0027a8c:	21 c2                	and    edx,eax
c0027a8e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027a93:	eb 32                	jmp    c0027ac7 <__floatsisf+0x68>
c0027a95:	b8 00 00 00 00       	mov    eax,0x0
c0027a9a:	74 34                	je     c0027ad0 <__floatsisf+0x71>
c0027a9c:	f7 da                	neg    edx
c0027a9e:	0f bd ca             	bsr    ecx,edx
c0027aa1:	83 f1 1f             	xor    ecx,0x1f
c0027aa4:	d3 e2                	shl    edx,cl
c0027aa6:	89 d0                	mov    eax,edx
c0027aa8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027aad:	89 c3                	mov    ebx,eax
c0027aaf:	c1 eb 08             	shr    ebx,0x8
c0027ab2:	80 e2 7f             	and    dl,0x7f
c0027ab5:	0f 95 c2             	setne  dl
c0027ab8:	09 da                	or     edx,ebx
c0027aba:	83 e2 01             	and    edx,0x1
c0027abd:	c1 e8 07             	shr    eax,0x7
c0027ac0:	21 c2                	and    edx,eax
c0027ac2:	b8 9e 01 00 00       	mov    eax,0x19e
c0027ac7:	29 c8                	sub    eax,ecx
c0027ac9:	c1 e0 17             	shl    eax,0x17
c0027acc:	09 d8                	or     eax,ebx
c0027ace:	01 d0                	add    eax,edx
c0027ad0:	5b                   	pop    ebx
c0027ad1:	5d                   	pop    ebp
c0027ad2:	c3                   	ret    

c0027ad3 <__floatunsisf>:
c0027ad3:	55                   	push   ebp
c0027ad4:	89 e5                	mov    ebp,esp
c0027ad6:	53                   	push   ebx
c0027ad7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027ada:	31 c0                	xor    eax,eax
c0027adc:	85 d2                	test   edx,edx
c0027ade:	74 32                	je     c0027b12 <__floatunsisf+0x3f>
c0027ae0:	0f bd ca             	bsr    ecx,edx
c0027ae3:	83 f1 1f             	xor    ecx,0x1f
c0027ae6:	d3 e2                	shl    edx,cl
c0027ae8:	89 d0                	mov    eax,edx
c0027aea:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027aef:	89 c3                	mov    ebx,eax
c0027af1:	c1 eb 08             	shr    ebx,0x8
c0027af4:	80 e2 7f             	and    dl,0x7f
c0027af7:	0f 95 c2             	setne  dl
c0027afa:	09 da                	or     edx,ebx
c0027afc:	83 e2 01             	and    edx,0x1
c0027aff:	c1 e8 07             	shr    eax,0x7
c0027b02:	21 c2                	and    edx,eax
c0027b04:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b09:	29 c8                	sub    eax,ecx
c0027b0b:	c1 e0 17             	shl    eax,0x17
c0027b0e:	09 d8                	or     eax,ebx
c0027b10:	01 d0                	add    eax,edx
c0027b12:	5b                   	pop    ebx
c0027b13:	5d                   	pop    ebp
c0027b14:	c3                   	ret    

c0027b15 <__fixsfsi>:
c0027b15:	55                   	push   ebp
c0027b16:	89 e5                	mov    ebp,esp
c0027b18:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b1b:	89 d1                	mov    ecx,edx
c0027b1d:	c1 e1 08             	shl    ecx,0x8
c0027b20:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027b26:	c1 fa 17             	sar    edx,0x17
c0027b29:	78 1c                	js     c0027b47 <__fixsfsi+0x32>
c0027b2b:	83 ea 7f             	sub    edx,0x7f
c0027b2e:	31 c0                	xor    eax,eax
c0027b30:	83 fa 1e             	cmp    edx,0x1e
c0027b33:	77 40                	ja     c0027b75 <__fixsfsi+0x60>
c0027b35:	89 c8                	mov    eax,ecx
c0027b37:	0d 00 00 00 80       	or     eax,0x80000000
c0027b3c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027b41:	29 d1                	sub    ecx,edx
c0027b43:	d3 e8                	shr    eax,cl
c0027b45:	eb 2e                	jmp    c0027b75 <__fixsfsi+0x60>
c0027b47:	31 c0                	xor    eax,eax
c0027b49:	81 c2 81 00 00 00    	add    edx,0x81
c0027b4f:	78 24                	js     c0027b75 <__fixsfsi+0x60>
c0027b51:	83 fa 1e             	cmp    edx,0x1e
c0027b54:	7e 09                	jle    c0027b5f <__fixsfsi+0x4a>
c0027b56:	83 fa 1f             	cmp    edx,0x1f
c0027b59:	75 18                	jne    c0027b73 <__fixsfsi+0x5e>
c0027b5b:	85 c9                	test   ecx,ecx
c0027b5d:	75 14                	jne    c0027b73 <__fixsfsi+0x5e>
c0027b5f:	89 c8                	mov    eax,ecx
c0027b61:	0d 00 00 00 80       	or     eax,0x80000000
c0027b66:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027b6b:	29 d1                	sub    ecx,edx
c0027b6d:	d3 e8                	shr    eax,cl
c0027b6f:	f7 d8                	neg    eax
c0027b71:	eb 02                	jmp    c0027b75 <__fixsfsi+0x60>
c0027b73:	31 c0                	xor    eax,eax
c0027b75:	5d                   	pop    ebp
c0027b76:	c3                   	ret    

c0027b77 <__fixunssfsi>:
c0027b77:	55                   	push   ebp
c0027b78:	89 e5                	mov    ebp,esp
c0027b7a:	53                   	push   ebx
c0027b7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b7e:	89 d3                	mov    ebx,edx
c0027b80:	c1 fb 17             	sar    ebx,0x17
c0027b83:	83 eb 7f             	sub    ebx,0x7f
c0027b86:	31 c0                	xor    eax,eax
c0027b88:	83 fb 1f             	cmp    ebx,0x1f
c0027b8b:	77 18                	ja     c0027ba5 <__fixunssfsi+0x2e>
c0027b8d:	89 d0                	mov    eax,edx
c0027b8f:	c1 e0 08             	shl    eax,0x8
c0027b92:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027b97:	0d 00 00 00 80       	or     eax,0x80000000
c0027b9c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027ba1:	29 d9                	sub    ecx,ebx
c0027ba3:	d3 e8                	shr    eax,cl
c0027ba5:	5b                   	pop    ebx
c0027ba6:	5d                   	pop    ebp
c0027ba7:	c3                   	ret    

c0027ba8 <__cmpsf2>:
c0027ba8:	55                   	push   ebp
c0027ba9:	89 e5                	mov    ebp,esp
c0027bab:	57                   	push   edi
c0027bac:	56                   	push   esi
c0027bad:	53                   	push   ebx
c0027bae:	83 ec 24             	sub    esp,0x24
c0027bb1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027bb4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027bb7:	e8 4f 10 00 00       	call   c0028c0b <__truncdfsf2>
c0027bbc:	5a                   	pop    edx
c0027bbd:	59                   	pop    ecx
c0027bbe:	89 c3                	mov    ebx,eax
c0027bc0:	c1 e8 17             	shr    eax,0x17
c0027bc3:	0f b6 f0             	movzx  esi,al
c0027bc6:	89 d8                	mov    eax,ebx
c0027bc8:	c1 e8 1f             	shr    eax,0x1f
c0027bcb:	31 c6                	xor    esi,eax
c0027bcd:	c1 e3 08             	shl    ebx,0x8
c0027bd0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027bd3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027bd6:	e8 30 10 00 00       	call   c0028c0b <__truncdfsf2>
c0027bdb:	83 c4 10             	add    esp,0x10
c0027bde:	89 c1                	mov    ecx,eax
c0027be0:	c1 e9 17             	shr    ecx,0x17
c0027be3:	0f b6 c9             	movzx  ecx,cl
c0027be6:	89 c7                	mov    edi,eax
c0027be8:	c1 ef 1f             	shr    edi,0x1f
c0027beb:	89 ca                	mov    edx,ecx
c0027bed:	31 fa                	xor    edx,edi
c0027bef:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027bf2:	c1 e0 08             	shl    eax,0x8
c0027bf5:	89 c2                	mov    edx,eax
c0027bf7:	89 d8                	mov    eax,ebx
c0027bf9:	09 d0                	or     eax,edx
c0027bfb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c00:	09 f0                	or     eax,esi
c0027c02:	75 08                	jne    c0027c0c <__cmpsf2+0x64>
c0027c04:	31 c0                	xor    eax,eax
c0027c06:	39 f9                	cmp    ecx,edi
c0027c08:	75 0c                	jne    c0027c16 <__cmpsf2+0x6e>
c0027c0a:	eb 29                	jmp    c0027c35 <__cmpsf2+0x8d>
c0027c0c:	b8 01 00 00 00       	mov    eax,0x1
c0027c11:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027c14:	7f 1f                	jg     c0027c35 <__cmpsf2+0x8d>
c0027c16:	83 c8 ff             	or     eax,0xffffffff
c0027c19:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027c1c:	7c 17                	jl     c0027c35 <__cmpsf2+0x8d>
c0027c1e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027c24:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027c2a:	b8 01 00 00 00       	mov    eax,0x1
c0027c2f:	39 d3                	cmp    ebx,edx
c0027c31:	77 02                	ja     c0027c35 <__cmpsf2+0x8d>
c0027c33:	19 c0                	sbb    eax,eax
c0027c35:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027c38:	5b                   	pop    ebx
c0027c39:	5e                   	pop    esi
c0027c3a:	5f                   	pop    edi
c0027c3b:	5d                   	pop    ebp
c0027c3c:	c3                   	ret    

c0027c3d <__eqsf2>:
c0027c3d:	55                   	push   ebp
c0027c3e:	89 e5                	mov    ebp,esp
c0027c40:	83 ec 24             	sub    esp,0x24
c0027c43:	6a 01                	push   0x1
c0027c45:	83 ec 0c             	sub    esp,0xc
c0027c48:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c4b:	e8 df 10 00 00       	call   c0028d2f <__extendsfdf2>
c0027c50:	83 c4 10             	add    esp,0x10
c0027c53:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027c56:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027c59:	52                   	push   edx
c0027c5a:	50                   	push   eax
c0027c5b:	50                   	push   eax
c0027c5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027c5f:	e8 cb 10 00 00       	call   c0028d2f <__extendsfdf2>
c0027c64:	59                   	pop    ecx
c0027c65:	59                   	pop    ecx
c0027c66:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027c69:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027c6c:	52                   	push   edx
c0027c6d:	50                   	push   eax
c0027c6e:	e8 35 ff ff ff       	call   c0027ba8 <__cmpsf2>
c0027c73:	83 c4 20             	add    esp,0x20
c0027c76:	c9                   	leave  
c0027c77:	c3                   	ret    

c0027c78 <__nesf2>:
c0027c78:	eb c3                	jmp    c0027c3d <__eqsf2>

c0027c7a <__gtsf2>:
c0027c7a:	55                   	push   ebp
c0027c7b:	89 e5                	mov    ebp,esp
c0027c7d:	83 ec 24             	sub    esp,0x24
c0027c80:	6a ff                	push   0xffffffff
c0027c82:	83 ec 0c             	sub    esp,0xc
c0027c85:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c88:	e8 a2 10 00 00       	call   c0028d2f <__extendsfdf2>
c0027c8d:	83 c4 10             	add    esp,0x10
c0027c90:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027c93:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027c96:	52                   	push   edx
c0027c97:	50                   	push   eax
c0027c98:	50                   	push   eax
c0027c99:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027c9c:	e8 8e 10 00 00       	call   c0028d2f <__extendsfdf2>
c0027ca1:	59                   	pop    ecx
c0027ca2:	59                   	pop    ecx
c0027ca3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027ca6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027ca9:	52                   	push   edx
c0027caa:	50                   	push   eax
c0027cab:	e8 f8 fe ff ff       	call   c0027ba8 <__cmpsf2>
c0027cb0:	83 c4 20             	add    esp,0x20
c0027cb3:	c9                   	leave  
c0027cb4:	c3                   	ret    

c0027cb5 <__gesf2>:
c0027cb5:	eb c3                	jmp    c0027c7a <__gtsf2>

c0027cb7 <__ltsf2>:
c0027cb7:	eb 84                	jmp    c0027c3d <__eqsf2>

c0027cb9 <__lesf2>:
c0027cb9:	eb 82                	jmp    c0027c3d <__eqsf2>

c0027cbb <__adddf3>:
c0027cbb:	55                   	push   ebp
c0027cbc:	89 e5                	mov    ebp,esp
c0027cbe:	57                   	push   edi
c0027cbf:	56                   	push   esi
c0027cc0:	53                   	push   ebx
c0027cc1:	83 ec 24             	sub    esp,0x24
c0027cc4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027cc7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027cca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ccd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027cd0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027cd3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027cd6:	89 c8                	mov    eax,ecx
c0027cd8:	89 ce                	mov    esi,ecx
c0027cda:	c1 fe 14             	sar    esi,0x14
c0027cdd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027ce0:	89 fb                	mov    ebx,edi
c0027ce2:	89 fa                	mov    edx,edi
c0027ce4:	c1 e2 0b             	shl    edx,0xb
c0027ce7:	c1 e0 0b             	shl    eax,0xb
c0027cea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027cef:	c1 eb 15             	shr    ebx,0x15
c0027cf2:	09 d8                	or     eax,ebx
c0027cf4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027cf7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027cfa:	c1 fe 14             	sar    esi,0x14
c0027cfd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027d00:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027d03:	89 f3                	mov    ebx,esi
c0027d05:	c1 e3 0b             	shl    ebx,0xb
c0027d08:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027d0b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d0e:	c1 e3 0b             	shl    ebx,0xb
c0027d11:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027d17:	c1 ee 15             	shr    esi,0x15
c0027d1a:	09 f3                	or     ebx,esi
c0027d1c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027d1f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027d22:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027d25:	0f 88 5f 02 00 00    	js     c0027f8a <__adddf3+0x2cf>
c0027d2b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027d2e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027d31:	85 db                	test   ebx,ebx
c0027d33:	0f 8e c7 00 00 00    	jle    c0027e00 <__adddf3+0x145>
c0027d39:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027d40:	75 1a                	jne    c0027d5c <__adddf3+0xa1>
c0027d42:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027d45:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027d48:	0f 84 b2 05 00 00    	je     c0028300 <__adddf3+0x645>
c0027d4e:	4b                   	dec    ebx
c0027d4f:	75 23                	jne    c0027d74 <__adddf3+0xb9>
c0027d51:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027d54:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027d57:	e9 99 00 00 00       	jmp    c0027df5 <__adddf3+0x13a>
c0027d5c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027d5f:	f7 d6                	not    esi
c0027d61:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027d67:	0f 84 93 05 00 00    	je     c0028300 <__adddf3+0x645>
c0027d6d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027d74:	83 fb 1f             	cmp    ebx,0x1f
c0027d77:	7e 42                	jle    c0027dbb <__adddf3+0x100>
c0027d79:	83 fb 3f             	cmp    ebx,0x3f
c0027d7c:	0f 8f 7e 05 00 00    	jg     c0028300 <__adddf3+0x645>
c0027d82:	83 e3 1f             	and    ebx,0x1f
c0027d85:	89 d9                	mov    ecx,ebx
c0027d87:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027d8a:	d3 ef                	shr    edi,cl
c0027d8c:	31 db                	xor    ebx,ebx
c0027d8e:	85 c9                	test   ecx,ecx
c0027d90:	74 15                	je     c0027da7 <__adddf3+0xec>
c0027d92:	be 20 00 00 00       	mov    esi,0x20
c0027d97:	29 ce                	sub    esi,ecx
c0027d99:	89 f1                	mov    ecx,esi
c0027d9b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d9e:	d3 e6                	shl    esi,cl
c0027da0:	31 db                	xor    ebx,ebx
c0027da2:	85 f6                	test   esi,esi
c0027da4:	0f 95 c3             	setne  bl
c0027da7:	31 c9                	xor    ecx,ecx
c0027da9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027dad:	0f 95 c1             	setne  cl
c0027db0:	09 cf                	or     edi,ecx
c0027db2:	09 fb                	or     ebx,edi
c0027db4:	01 da                	add    edx,ebx
c0027db6:	83 d0 00             	adc    eax,0x0
c0027db9:	eb 3a                	jmp    c0027df5 <__adddf3+0x13a>
c0027dbb:	bf 20 00 00 00       	mov    edi,0x20
c0027dc0:	29 df                	sub    edi,ebx
c0027dc2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027dc5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027dc8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027dcb:	d3 e6                	shl    esi,cl
c0027dcd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027dd0:	88 d9                	mov    cl,bl
c0027dd2:	d3 ef                	shr    edi,cl
c0027dd4:	09 fe                	or     esi,edi
c0027dd6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027dd9:	88 d9                	mov    cl,bl
c0027ddb:	d3 ef                	shr    edi,cl
c0027ddd:	89 fb                	mov    ebx,edi
c0027ddf:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027de2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027de5:	d3 e7                	shl    edi,cl
c0027de7:	85 ff                	test   edi,edi
c0027de9:	0f 95 c1             	setne  cl
c0027dec:	0f b6 c9             	movzx  ecx,cl
c0027def:	09 ce                	or     esi,ecx
c0027df1:	01 f2                	add    edx,esi
c0027df3:	11 d8                	adc    eax,ebx
c0027df5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027df8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027dfb:	e9 52 01 00 00       	jmp    c0027f52 <__adddf3+0x297>
c0027e00:	0f 84 d5 00 00 00    	je     c0027edb <__adddf3+0x220>
c0027e06:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e09:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027e0c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027e0f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027e12:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027e19:	75 20                	jne    c0027e3b <__adddf3+0x180>
c0027e1b:	89 d6                	mov    esi,edx
c0027e1d:	09 c6                	or     esi,eax
c0027e1f:	0f 84 db 04 00 00    	je     c0028300 <__adddf3+0x645>
c0027e25:	4b                   	dec    ebx
c0027e26:	75 29                	jne    c0027e51 <__adddf3+0x196>
c0027e28:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e2b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027e2e:	01 d1                	add    ecx,edx
c0027e30:	11 c6                	adc    esi,eax
c0027e32:	89 f0                	mov    eax,esi
c0027e34:	89 ca                	mov    edx,ecx
c0027e36:	e9 17 01 00 00       	jmp    c0027f52 <__adddf3+0x297>
c0027e3b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027e3e:	f7 d6                	not    esi
c0027e40:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027e46:	0f 84 b4 04 00 00    	je     c0028300 <__adddf3+0x645>
c0027e4c:	0d 00 00 00 80       	or     eax,0x80000000
c0027e51:	83 fb 1f             	cmp    ebx,0x1f
c0027e54:	7e 48                	jle    c0027e9e <__adddf3+0x1e3>
c0027e56:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027e59:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027e5c:	83 fb 3f             	cmp    ebx,0x3f
c0027e5f:	0f 8f 9b 04 00 00    	jg     c0028300 <__adddf3+0x645>
c0027e65:	83 e3 1f             	and    ebx,0x1f
c0027e68:	89 d9                	mov    ecx,ebx
c0027e6a:	89 c7                	mov    edi,eax
c0027e6c:	d3 ef                	shr    edi,cl
c0027e6e:	31 db                	xor    ebx,ebx
c0027e70:	85 c9                	test   ecx,ecx
c0027e72:	74 12                	je     c0027e86 <__adddf3+0x1cb>
c0027e74:	be 20 00 00 00       	mov    esi,0x20
c0027e79:	29 ce                	sub    esi,ecx
c0027e7b:	89 f1                	mov    ecx,esi
c0027e7d:	d3 e0                	shl    eax,cl
c0027e7f:	31 db                	xor    ebx,ebx
c0027e81:	85 c0                	test   eax,eax
c0027e83:	0f 95 c3             	setne  bl
c0027e86:	31 c0                	xor    eax,eax
c0027e88:	85 d2                	test   edx,edx
c0027e8a:	0f 95 c0             	setne  al
c0027e8d:	09 c7                	or     edi,eax
c0027e8f:	09 fb                	or     ebx,edi
c0027e91:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e94:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027e97:	01 da                	add    edx,ebx
c0027e99:	83 d6 00             	adc    esi,0x0
c0027e9c:	eb 39                	jmp    c0027ed7 <__adddf3+0x21c>
c0027e9e:	be 20 00 00 00       	mov    esi,0x20
c0027ea3:	29 de                	sub    esi,ebx
c0027ea5:	89 c7                	mov    edi,eax
c0027ea7:	89 f1                	mov    ecx,esi
c0027ea9:	d3 e7                	shl    edi,cl
c0027eab:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027eae:	89 d7                	mov    edi,edx
c0027eb0:	88 d9                	mov    cl,bl
c0027eb2:	d3 ef                	shr    edi,cl
c0027eb4:	89 f9                	mov    ecx,edi
c0027eb6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027eb9:	09 cf                	or     edi,ecx
c0027ebb:	88 d9                	mov    cl,bl
c0027ebd:	d3 e8                	shr    eax,cl
c0027ebf:	89 f1                	mov    ecx,esi
c0027ec1:	d3 e2                	shl    edx,cl
c0027ec3:	85 d2                	test   edx,edx
c0027ec5:	0f 95 c2             	setne  dl
c0027ec8:	0f b6 d2             	movzx  edx,dl
c0027ecb:	09 d7                	or     edi,edx
c0027ecd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ed0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027ed3:	01 fa                	add    edx,edi
c0027ed5:	11 c6                	adc    esi,eax
c0027ed7:	89 f0                	mov    eax,esi
c0027ed9:	eb 77                	jmp    c0027f52 <__adddf3+0x297>
c0027edb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027ede:	46                   	inc    esi
c0027edf:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027ee2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027ee8:	75 41                	jne    c0027f2b <__adddf3+0x270>
c0027eea:	89 d3                	mov    ebx,edx
c0027eec:	09 c3                	or     ebx,eax
c0027eee:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027ef5:	75 27                	jne    c0027f1e <__adddf3+0x263>
c0027ef7:	85 db                	test   ebx,ebx
c0027ef9:	0f 84 fb 03 00 00    	je     c00282fa <__adddf3+0x63f>
c0027eff:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f02:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027f05:	0f 84 f5 03 00 00    	je     c0028300 <__adddf3+0x645>
c0027f0b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027f0e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027f11:	85 c0                	test   eax,eax
c0027f13:	0f 89 91 03 00 00    	jns    c00282aa <__adddf3+0x5ef>
c0027f19:	e9 85 03 00 00       	jmp    c00282a3 <__adddf3+0x5e8>
c0027f1e:	85 db                	test   ebx,ebx
c0027f20:	0f 85 da 03 00 00    	jne    c0028300 <__adddf3+0x645>
c0027f26:	e9 cf 03 00 00       	jmp    c00282fa <__adddf3+0x63f>
c0027f2b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027f2e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027f31:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f34:	f7 d1                	not    ecx
c0027f36:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027f3c:	0f 84 70 03 00 00    	je     c00282b2 <__adddf3+0x5f7>
c0027f42:	d1 ea                	shr    edx,1
c0027f44:	89 c1                	mov    ecx,eax
c0027f46:	c1 e1 1f             	shl    ecx,0x1f
c0027f49:	09 ca                	or     edx,ecx
c0027f4b:	d1 e8                	shr    eax,1
c0027f4d:	e9 6f 03 00 00       	jmp    c00282c1 <__adddf3+0x606>
c0027f52:	85 c0                	test   eax,eax
c0027f54:	0f 89 67 03 00 00    	jns    c00282c1 <__adddf3+0x606>
c0027f5a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027f5d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f60:	f7 d1                	not    ecx
c0027f62:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027f68:	0f 84 44 03 00 00    	je     c00282b2 <__adddf3+0x5f7>
c0027f6e:	89 d1                	mov    ecx,edx
c0027f70:	d1 e9                	shr    ecx,1
c0027f72:	83 e2 01             	and    edx,0x1
c0027f75:	09 ca                	or     edx,ecx
c0027f77:	89 c1                	mov    ecx,eax
c0027f79:	c1 e1 1f             	shl    ecx,0x1f
c0027f7c:	09 ca                	or     edx,ecx
c0027f7e:	d1 e8                	shr    eax,1
c0027f80:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027f85:	e9 37 03 00 00       	jmp    c00282c1 <__adddf3+0x606>
c0027f8a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027f8d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f93:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027f96:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f99:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f9f:	29 de                	sub    esi,ebx
c0027fa1:	85 f6                	test   esi,esi
c0027fa3:	0f 8e bd 00 00 00    	jle    c0028066 <__adddf3+0x3ab>
c0027fa9:	85 db                	test   ebx,ebx
c0027fab:	75 17                	jne    c0027fc4 <__adddf3+0x309>
c0027fad:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027fb0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027fb3:	0f 84 47 03 00 00    	je     c0028300 <__adddf3+0x645>
c0027fb9:	4e                   	dec    esi
c0027fba:	75 20                	jne    c0027fdc <__adddf3+0x321>
c0027fbc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027fbf:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027fc2:	eb 5b                	jmp    c002801f <__adddf3+0x364>
c0027fc4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027fc7:	f7 d3                	not    ebx
c0027fc9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027fcf:	0f 84 2b 03 00 00    	je     c0028300 <__adddf3+0x645>
c0027fd5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027fdc:	83 fe 1f             	cmp    esi,0x1f
c0027fdf:	7e 49                	jle    c002802a <__adddf3+0x36f>
c0027fe1:	83 fe 3f             	cmp    esi,0x3f
c0027fe4:	0f 8f 16 03 00 00    	jg     c0028300 <__adddf3+0x645>
c0027fea:	83 e6 1f             	and    esi,0x1f
c0027fed:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027ff0:	89 f1                	mov    ecx,esi
c0027ff2:	d3 ef                	shr    edi,cl
c0027ff4:	31 db                	xor    ebx,ebx
c0027ff6:	85 f6                	test   esi,esi
c0027ff8:	74 13                	je     c002800d <__adddf3+0x352>
c0027ffa:	b9 20 00 00 00       	mov    ecx,0x20
c0027fff:	29 f1                	sub    ecx,esi
c0028001:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028004:	d3 e6                	shl    esi,cl
c0028006:	31 db                	xor    ebx,ebx
c0028008:	85 f6                	test   esi,esi
c002800a:	0f 95 c3             	setne  bl
c002800d:	31 c9                	xor    ecx,ecx
c002800f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0028013:	0f 95 c1             	setne  cl
c0028016:	09 cf                	or     edi,ecx
c0028018:	09 fb                	or     ebx,edi
c002801a:	29 da                	sub    edx,ebx
c002801c:	83 d8 00             	sbb    eax,0x0
c002801f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028022:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028025:	e9 aa 01 00 00       	jmp    c00281d4 <__adddf3+0x519>
c002802a:	bf 20 00 00 00       	mov    edi,0x20
c002802f:	29 f7                	sub    edi,esi
c0028031:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028034:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028037:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002803a:	d3 e3                	shl    ebx,cl
c002803c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002803f:	89 f1                	mov    ecx,esi
c0028041:	d3 ef                	shr    edi,cl
c0028043:	09 fb                	or     ebx,edi
c0028045:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028048:	89 f1                	mov    ecx,esi
c002804a:	d3 ef                	shr    edi,cl
c002804c:	89 fe                	mov    esi,edi
c002804e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028051:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028054:	d3 e7                	shl    edi,cl
c0028056:	85 ff                	test   edi,edi
c0028058:	0f 95 c1             	setne  cl
c002805b:	0f b6 c9             	movzx  ecx,cl
c002805e:	09 cb                	or     ebx,ecx
c0028060:	29 da                	sub    edx,ebx
c0028062:	19 f0                	sbb    eax,esi
c0028064:	eb b9                	jmp    c002801f <__adddf3+0x364>
c0028066:	0f 84 cd 00 00 00    	je     c0028139 <__adddf3+0x47e>
c002806c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002806f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028072:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028075:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028079:	75 1b                	jne    c0028096 <__adddf3+0x3db>
c002807b:	89 d6                	mov    esi,edx
c002807d:	09 c6                	or     esi,eax
c002807f:	0f 84 7b 02 00 00    	je     c0028300 <__adddf3+0x645>
c0028085:	4b                   	dec    ebx
c0028086:	75 24                	jne    c00280ac <__adddf3+0x3f1>
c0028088:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002808b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002808e:	29 d1                	sub    ecx,edx
c0028090:	19 c6                	sbb    esi,eax
c0028092:	89 ca                	mov    edx,ecx
c0028094:	eb 61                	jmp    c00280f7 <__adddf3+0x43c>
c0028096:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028099:	f7 d6                	not    esi
c002809b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00280a1:	0f 84 59 02 00 00    	je     c0028300 <__adddf3+0x645>
c00280a7:	0d 00 00 00 80       	or     eax,0x80000000
c00280ac:	83 fb 1f             	cmp    ebx,0x1f
c00280af:	7e 4d                	jle    c00280fe <__adddf3+0x443>
c00280b1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00280b4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00280b7:	83 fb 3f             	cmp    ebx,0x3f
c00280ba:	0f 8f 40 02 00 00    	jg     c0028300 <__adddf3+0x645>
c00280c0:	83 e3 1f             	and    ebx,0x1f
c00280c3:	89 d9                	mov    ecx,ebx
c00280c5:	89 c7                	mov    edi,eax
c00280c7:	d3 ef                	shr    edi,cl
c00280c9:	31 db                	xor    ebx,ebx
c00280cb:	85 c9                	test   ecx,ecx
c00280cd:	74 12                	je     c00280e1 <__adddf3+0x426>
c00280cf:	be 20 00 00 00       	mov    esi,0x20
c00280d4:	29 ce                	sub    esi,ecx
c00280d6:	89 f1                	mov    ecx,esi
c00280d8:	d3 e0                	shl    eax,cl
c00280da:	31 db                	xor    ebx,ebx
c00280dc:	85 c0                	test   eax,eax
c00280de:	0f 95 c3             	setne  bl
c00280e1:	31 c0                	xor    eax,eax
c00280e3:	85 d2                	test   edx,edx
c00280e5:	0f 95 c0             	setne  al
c00280e8:	09 c7                	or     edi,eax
c00280ea:	09 fb                	or     ebx,edi
c00280ec:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280ef:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00280f2:	29 da                	sub    edx,ebx
c00280f4:	83 de 00             	sbb    esi,0x0
c00280f7:	89 f0                	mov    eax,esi
c00280f9:	e9 d6 00 00 00       	jmp    c00281d4 <__adddf3+0x519>
c00280fe:	be 20 00 00 00       	mov    esi,0x20
c0028103:	29 de                	sub    esi,ebx
c0028105:	89 c7                	mov    edi,eax
c0028107:	89 f1                	mov    ecx,esi
c0028109:	d3 e7                	shl    edi,cl
c002810b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002810e:	89 d7                	mov    edi,edx
c0028110:	88 d9                	mov    cl,bl
c0028112:	d3 ef                	shr    edi,cl
c0028114:	89 f9                	mov    ecx,edi
c0028116:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028119:	09 cf                	or     edi,ecx
c002811b:	88 d9                	mov    cl,bl
c002811d:	d3 e8                	shr    eax,cl
c002811f:	89 f1                	mov    ecx,esi
c0028121:	d3 e2                	shl    edx,cl
c0028123:	85 d2                	test   edx,edx
c0028125:	0f 95 c2             	setne  dl
c0028128:	0f b6 d2             	movzx  edx,dl
c002812b:	09 d7                	or     edi,edx
c002812d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028130:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028133:	29 fa                	sub    edx,edi
c0028135:	19 c6                	sbb    esi,eax
c0028137:	eb be                	jmp    c00280f7 <__adddf3+0x43c>
c0028139:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002813c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002813f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028145:	75 6a                	jne    c00281b1 <__adddf3+0x4f6>
c0028147:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002814b:	75 58                	jne    c00281a5 <__adddf3+0x4ea>
c002814d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028150:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028153:	89 d6                	mov    esi,edx
c0028155:	09 c6                	or     esi,eax
c0028157:	75 17                	jne    c0028170 <__adddf3+0x4b5>
c0028159:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002815c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002815f:	85 db                	test   ebx,ebx
c0028161:	0f 85 99 01 00 00    	jne    c0028300 <__adddf3+0x645>
c0028167:	31 ff                	xor    edi,edi
c0028169:	31 c9                	xor    ecx,ecx
c002816b:	e9 90 01 00 00       	jmp    c0028300 <__adddf3+0x645>
c0028170:	85 db                	test   ebx,ebx
c0028172:	0f 84 88 01 00 00    	je     c0028300 <__adddf3+0x645>
c0028178:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002817b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002817e:	85 c0                	test   eax,eax
c0028180:	79 10                	jns    c0028192 <__adddf3+0x4d7>
c0028182:	31 c9                	xor    ecx,ecx
c0028184:	f7 da                	neg    edx
c0028186:	0f 95 c1             	setne  cl
c0028189:	01 c8                	add    eax,ecx
c002818b:	f7 d8                	neg    eax
c002818d:	e9 2f 01 00 00       	jmp    c00282c1 <__adddf3+0x606>
c0028192:	31 ff                	xor    edi,edi
c0028194:	31 c9                	xor    ecx,ecx
c0028196:	89 c3                	mov    ebx,eax
c0028198:	09 d3                	or     ebx,edx
c002819a:	0f 84 60 01 00 00    	je     c0028300 <__adddf3+0x645>
c00281a0:	e9 05 01 00 00       	jmp    c00282aa <__adddf3+0x5ef>
c00281a5:	31 ff                	xor    edi,edi
c00281a7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00281ac:	e9 4f 01 00 00       	jmp    c0028300 <__adddf3+0x645>
c00281b1:	89 c1                	mov    ecx,eax
c00281b3:	89 d0                	mov    eax,edx
c00281b5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00281b8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00281bb:	89 ca                	mov    edx,ecx
c00281bd:	85 c9                	test   ecx,ecx
c00281bf:	79 2c                	jns    c00281ed <__adddf3+0x532>
c00281c1:	31 c9                	xor    ecx,ecx
c00281c3:	f7 d8                	neg    eax
c00281c5:	0f 95 c1             	setne  cl
c00281c8:	01 ca                	add    edx,ecx
c00281ca:	f7 da                	neg    edx
c00281cc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00281cf:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00281d2:	eb 19                	jmp    c00281ed <__adddf3+0x532>
c00281d4:	85 c0                	test   eax,eax
c00281d6:	0f 89 e5 00 00 00    	jns    c00282c1 <__adddf3+0x606>
c00281dc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00281e1:	89 c1                	mov    ecx,eax
c00281e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00281e6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00281e9:	89 d0                	mov    eax,edx
c00281eb:	89 ca                	mov    edx,ecx
c00281ed:	85 d2                	test   edx,edx
c00281ef:	74 59                	je     c002824a <__adddf3+0x58f>
c00281f1:	0f bd da             	bsr    ebx,edx
c00281f4:	83 f3 1f             	xor    ebx,0x1f
c00281f7:	88 d9                	mov    cl,bl
c00281f9:	d3 e2                	shl    edx,cl
c00281fb:	bf 20 00 00 00       	mov    edi,0x20
c0028200:	89 f9                	mov    ecx,edi
c0028202:	29 d9                	sub    ecx,ebx
c0028204:	89 c6                	mov    esi,eax
c0028206:	d3 ee                	shr    esi,cl
c0028208:	09 d6                	or     esi,edx
c002820a:	88 d9                	mov    cl,bl
c002820c:	d3 e0                	shl    eax,cl
c002820e:	89 c2                	mov    edx,eax
c0028210:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028213:	25 ff 07 00 00       	and    eax,0x7ff
c0028218:	39 d8                	cmp    eax,ebx
c002821a:	7f 22                	jg     c002823e <__adddf3+0x583>
c002821c:	29 c3                	sub    ebx,eax
c002821e:	43                   	inc    ebx
c002821f:	88 d9                	mov    cl,bl
c0028221:	d3 ea                	shr    edx,cl
c0028223:	29 df                	sub    edi,ebx
c0028225:	89 f9                	mov    ecx,edi
c0028227:	89 f0                	mov    eax,esi
c0028229:	d3 e0                	shl    eax,cl
c002822b:	09 c2                	or     edx,eax
c002822d:	89 f0                	mov    eax,esi
c002822f:	88 d9                	mov    cl,bl
c0028231:	d3 e8                	shr    eax,cl
c0028233:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028236:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002823c:	eb 6f                	jmp    c00282ad <__adddf3+0x5f2>
c002823e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028241:	29 d8                	sub    eax,ebx
c0028243:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028246:	89 f0                	mov    eax,esi
c0028248:	eb 59                	jmp    c00282a3 <__adddf3+0x5e8>
c002824a:	85 c0                	test   eax,eax
c002824c:	74 6a                	je     c00282b8 <__adddf3+0x5fd>
c002824e:	0f bd c8             	bsr    ecx,eax
c0028251:	83 f1 1f             	xor    ecx,0x1f
c0028254:	d3 e0                	shl    eax,cl
c0028256:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028259:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002825f:	83 c1 20             	add    ecx,0x20
c0028262:	39 cb                	cmp    ebx,ecx
c0028264:	7f 35                	jg     c002829b <__adddf3+0x5e0>
c0028266:	29 d9                	sub    ecx,ebx
c0028268:	8d 71 01             	lea    esi,[ecx+0x1]
c002826b:	83 fe 1f             	cmp    esi,0x1f
c002826e:	7e 09                	jle    c0028279 <__adddf3+0x5be>
c0028270:	83 e9 1f             	sub    ecx,0x1f
c0028273:	d3 e8                	shr    eax,cl
c0028275:	89 c3                	mov    ebx,eax
c0028277:	eb 11                	jmp    c002828a <__adddf3+0x5cf>
c0028279:	b9 20 00 00 00       	mov    ecx,0x20
c002827e:	29 f1                	sub    ecx,esi
c0028280:	89 c3                	mov    ebx,eax
c0028282:	d3 e3                	shl    ebx,cl
c0028284:	89 f1                	mov    ecx,esi
c0028286:	d3 e8                	shr    eax,cl
c0028288:	89 c2                	mov    edx,eax
c002828a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002828d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028292:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028295:	89 d0                	mov    eax,edx
c0028297:	89 da                	mov    edx,ebx
c0028299:	eb 26                	jmp    c00282c1 <__adddf3+0x606>
c002829b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002829e:	29 cf                	sub    edi,ecx
c00282a0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00282a3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00282a8:	eb 17                	jmp    c00282c1 <__adddf3+0x606>
c00282aa:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282ad:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00282b0:	eb 0f                	jmp    c00282c1 <__adddf3+0x606>
c00282b2:	31 d2                	xor    edx,edx
c00282b4:	31 c0                	xor    eax,eax
c00282b6:	eb 09                	jmp    c00282c1 <__adddf3+0x606>
c00282b8:	89 c2                	mov    edx,eax
c00282ba:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00282c1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00282c4:	c1 e1 14             	shl    ecx,0x14
c00282c7:	89 c3                	mov    ebx,eax
c00282c9:	c1 eb 0b             	shr    ebx,0xb
c00282cc:	09 d9                	or     ecx,ebx
c00282ce:	89 d3                	mov    ebx,edx
c00282d0:	c1 eb 0b             	shr    ebx,0xb
c00282d3:	c1 e0 15             	shl    eax,0x15
c00282d6:	09 d8                	or     eax,ebx
c00282d8:	89 c7                	mov    edi,eax
c00282da:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00282e0:	0f 95 c0             	setne  al
c00282e3:	89 c6                	mov    esi,eax
c00282e5:	09 f3                	or     ebx,esi
c00282e7:	83 e3 01             	and    ebx,0x1
c00282ea:	c1 ea 0a             	shr    edx,0xa
c00282ed:	21 da                	and    edx,ebx
c00282ef:	89 f8                	mov    eax,edi
c00282f1:	01 d0                	add    eax,edx
c00282f3:	83 d1 00             	adc    ecx,0x0
c00282f6:	89 c7                	mov    edi,eax
c00282f8:	eb 06                	jmp    c0028300 <__adddf3+0x645>
c00282fa:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00282fd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028300:	89 f8                	mov    eax,edi
c0028302:	89 ca                	mov    edx,ecx
c0028304:	83 c4 24             	add    esp,0x24
c0028307:	5b                   	pop    ebx
c0028308:	5e                   	pop    esi
c0028309:	5f                   	pop    edi
c002830a:	5d                   	pop    ebp
c002830b:	c3                   	ret    

c002830c <__subdf3>:
c002830c:	55                   	push   ebp
c002830d:	89 e5                	mov    ebp,esp
c002830f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028312:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028315:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002831b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002831e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028321:	5d                   	pop    ebp
c0028322:	e9 94 f9 ff ff       	jmp    c0027cbb <__adddf3>

c0028327 <__negdf2>:
c0028327:	55                   	push   ebp
c0028328:	89 e5                	mov    ebp,esp
c002832a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002832d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028330:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028336:	5d                   	pop    ebp
c0028337:	c3                   	ret    

c0028338 <__muldf3>:
c0028338:	55                   	push   ebp
c0028339:	89 e5                	mov    ebp,esp
c002833b:	57                   	push   edi
c002833c:	56                   	push   esi
c002833d:	53                   	push   ebx
c002833e:	83 ec 24             	sub    esp,0x24
c0028341:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028344:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028347:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002834a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002834d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028350:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028353:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028356:	89 c8                	mov    eax,ecx
c0028358:	c1 f8 14             	sar    eax,0x14
c002835b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002835e:	89 f8                	mov    eax,edi
c0028360:	89 fb                	mov    ebx,edi
c0028362:	c1 e3 0b             	shl    ebx,0xb
c0028365:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028368:	c1 e1 0b             	shl    ecx,0xb
c002836b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028371:	c1 e8 15             	shr    eax,0x15
c0028374:	09 c1                	or     ecx,eax
c0028376:	89 d6                	mov    esi,edx
c0028378:	89 d0                	mov    eax,edx
c002837a:	c1 f8 14             	sar    eax,0x14
c002837d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028380:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028383:	89 c3                	mov    ebx,eax
c0028385:	c1 e3 0b             	shl    ebx,0xb
c0028388:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002838b:	c1 e6 0b             	shl    esi,0xb
c002838e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028394:	c1 e8 15             	shr    eax,0x15
c0028397:	09 c6                	or     esi,eax
c0028399:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002839c:	25 ff 07 00 00       	and    eax,0x7ff
c00283a1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00283a4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00283a7:	25 ff 07 00 00       	and    eax,0x7ff
c00283ac:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00283af:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00283b2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00283b5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00283bc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00283bf:	40                   	inc    eax
c00283c0:	a9 fe 07 00 00       	test   eax,0x7fe
c00283c5:	0f 85 8d 00 00 00    	jne    c0028458 <__muldf3+0x120>
c00283cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00283ce:	09 c8                	or     eax,ecx
c00283d0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00283d4:	74 44                	je     c002841a <__muldf3+0xe2>
c00283d6:	85 c0                	test   eax,eax
c00283d8:	0f 85 31 02 00 00    	jne    c002860f <__muldf3+0x2d7>
c00283de:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00283e1:	40                   	inc    eax
c00283e2:	a9 fe 07 00 00       	test   eax,0x7fe
c00283e7:	75 13                	jne    c00283fc <__muldf3+0xc4>
c00283e9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00283ec:	09 f1                	or     ecx,esi
c00283ee:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00283f2:	74 22                	je     c0028416 <__muldf3+0xde>
c00283f4:	85 c9                	test   ecx,ecx
c00283f6:	0f 85 0d 02 00 00    	jne    c0028609 <__muldf3+0x2d1>
c00283fc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028400:	0f 89 09 02 00 00    	jns    c002860f <__muldf3+0x2d7>
c0028406:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028409:	05 00 00 00 80       	add    eax,0x80000000
c002840e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028411:	e9 f9 01 00 00       	jmp    c002860f <__muldf3+0x2d7>
c0028416:	85 c9                	test   ecx,ecx
c0028418:	eb 2e                	jmp    c0028448 <__muldf3+0x110>
c002841a:	85 c0                	test   eax,eax
c002841c:	74 20                	je     c002843e <__muldf3+0x106>
c002841e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028421:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028424:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028427:	c1 ef 1f             	shr    edi,0x1f
c002842a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002842d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028430:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028433:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028436:	09 f9                	or     ecx,edi
c0028438:	78 1e                	js     c0028458 <__muldf3+0x120>
c002843a:	89 c3                	mov    ebx,eax
c002843c:	eb e0                	jmp    c002841e <__muldf3+0xe6>
c002843e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028441:	f7 d0                	not    eax
c0028443:	a9 ff 07 00 00       	test   eax,0x7ff
c0028448:	75 b2                	jne    c00283fc <__muldf3+0xc4>
c002844a:	31 ff                	xor    edi,edi
c002844c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028453:	e9 b7 01 00 00       	jmp    c002860f <__muldf3+0x2d7>
c0028458:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002845b:	40                   	inc    eax
c002845c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028461:	75 57                	jne    c00284ba <__muldf3+0x182>
c0028463:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028466:	09 f0                	or     eax,esi
c0028468:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002846c:	74 23                	je     c0028491 <__muldf3+0x159>
c002846e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028472:	0f 89 91 01 00 00    	jns    c0028609 <__muldf3+0x2d1>
c0028478:	85 c0                	test   eax,eax
c002847a:	0f 85 89 01 00 00    	jne    c0028609 <__muldf3+0x2d1>
c0028480:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028483:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028489:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002848c:	e9 7e 01 00 00       	jmp    c002860f <__muldf3+0x2d7>
c0028491:	85 c0                	test   eax,eax
c0028493:	75 0c                	jne    c00284a1 <__muldf3+0x169>
c0028495:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028499:	0f 89 6a 01 00 00    	jns    c0028609 <__muldf3+0x2d1>
c002849f:	eb df                	jmp    c0028480 <__muldf3+0x148>
c00284a1:	01 f6                	add    esi,esi
c00284a3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00284a6:	c1 ea 1f             	shr    edx,0x1f
c00284a9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00284ac:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00284af:	8d 43 ff             	lea    eax,[ebx-0x1]
c00284b2:	09 d6                	or     esi,edx
c00284b4:	78 04                	js     c00284ba <__muldf3+0x182>
c00284b6:	89 c3                	mov    ebx,eax
c00284b8:	eb e7                	jmp    c00284a1 <__muldf3+0x169>
c00284ba:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00284c0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00284c6:	89 c8                	mov    eax,ecx
c00284c8:	f7 e6                	mul    esi
c00284ca:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00284cd:	89 c7                	mov    edi,eax
c00284cf:	89 c8                	mov    eax,ecx
c00284d1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00284d4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00284d7:	89 c1                	mov    ecx,eax
c00284d9:	89 f0                	mov    eax,esi
c00284db:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00284de:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00284e1:	89 c6                	mov    esi,eax
c00284e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00284e6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00284e9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00284ec:	31 c0                	xor    eax,eax
c00284ee:	01 f1                	add    ecx,esi
c00284f0:	0f 92 c0             	setb   al
c00284f3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00284f6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00284f9:	83 d6 00             	adc    esi,0x0
c00284fc:	01 c7                	add    edi,eax
c00284fe:	83 d6 00             	adc    esi,0x0
c0028501:	01 ca                	add    edx,ecx
c0028503:	0f 92 c1             	setb   cl
c0028506:	0f b6 c9             	movzx  ecx,cl
c0028509:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002850c:	83 d6 00             	adc    esi,0x0
c002850f:	01 cf                	add    edi,ecx
c0028511:	83 d6 00             	adc    esi,0x0
c0028514:	31 c9                	xor    ecx,ecx
c0028516:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028519:	0f 95 c1             	setne  cl
c002851c:	09 cf                	or     edi,ecx
c002851e:	85 f6                	test   esi,esi
c0028520:	78 0c                	js     c002852e <__muldf3+0x1f6>
c0028522:	01 f6                	add    esi,esi
c0028524:	89 f8                	mov    eax,edi
c0028526:	c1 e8 1f             	shr    eax,0x1f
c0028529:	09 c6                	or     esi,eax
c002852b:	01 ff                	add    edi,edi
c002852d:	4b                   	dec    ebx
c002852e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028534:	0f 8f 85 00 00 00    	jg     c00285bf <__muldf3+0x287>
c002853a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028540:	85 db                	test   ebx,ebx
c0028542:	0f 8f 84 00 00 00    	jg     c00285cc <__muldf3+0x294>
c0028548:	83 fb cc             	cmp    ebx,0xffffffcc
c002854b:	7c 79                	jl     c00285c6 <__muldf3+0x28e>
c002854d:	ba 01 00 00 00       	mov    edx,0x1
c0028552:	29 da                	sub    edx,ebx
c0028554:	81 ce 00 00 00 80    	or     esi,0x80000000
c002855a:	83 fa 1f             	cmp    edx,0x1f
c002855d:	7e 30                	jle    c002858f <__muldf3+0x257>
c002855f:	83 fa 20             	cmp    edx,0x20
c0028562:	75 0b                	jne    c002856f <__muldf3+0x237>
c0028564:	31 c0                	xor    eax,eax
c0028566:	85 ff                	test   edi,edi
c0028568:	0f 95 c0             	setne  al
c002856b:	89 c7                	mov    edi,eax
c002856d:	eb 1a                	jmp    c0028589 <__muldf3+0x251>
c002856f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028572:	89 f0                	mov    eax,esi
c0028574:	d3 e0                	shl    eax,cl
c0028576:	09 f8                	or     eax,edi
c0028578:	0f 95 c0             	setne  al
c002857b:	0f b6 c0             	movzx  eax,al
c002857e:	89 c7                	mov    edi,eax
c0028580:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028585:	29 d9                	sub    ecx,ebx
c0028587:	d3 ee                	shr    esi,cl
c0028589:	09 f7                	or     edi,esi
c002858b:	31 db                	xor    ebx,ebx
c002858d:	eb 3b                	jmp    c00285ca <__muldf3+0x292>
c002858f:	83 c3 1f             	add    ebx,0x1f
c0028592:	89 f0                	mov    eax,esi
c0028594:	88 d9                	mov    cl,bl
c0028596:	d3 e0                	shl    eax,cl
c0028598:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002859b:	89 f8                	mov    eax,edi
c002859d:	88 d1                	mov    cl,dl
c002859f:	d3 e8                	shr    eax,cl
c00285a1:	89 c1                	mov    ecx,eax
c00285a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00285a6:	09 c8                	or     eax,ecx
c00285a8:	88 d9                	mov    cl,bl
c00285aa:	d3 e7                	shl    edi,cl
c00285ac:	31 db                	xor    ebx,ebx
c00285ae:	85 ff                	test   edi,edi
c00285b0:	0f 95 c3             	setne  bl
c00285b3:	89 df                	mov    edi,ebx
c00285b5:	09 c7                	or     edi,eax
c00285b7:	88 d1                	mov    cl,dl
c00285b9:	d3 ee                	shr    esi,cl
c00285bb:	31 db                	xor    ebx,ebx
c00285bd:	eb 0d                	jmp    c00285cc <__muldf3+0x294>
c00285bf:	bb ff 07 00 00       	mov    ebx,0x7ff
c00285c4:	eb 02                	jmp    c00285c8 <__muldf3+0x290>
c00285c6:	31 db                	xor    ebx,ebx
c00285c8:	31 ff                	xor    edi,edi
c00285ca:	31 f6                	xor    esi,esi
c00285cc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00285cf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00285d2:	25 00 f8 ff ff       	and    eax,0xfffff800
c00285d7:	09 c3                	or     ebx,eax
c00285d9:	c1 e3 14             	shl    ebx,0x14
c00285dc:	89 f0                	mov    eax,esi
c00285de:	c1 e8 0b             	shr    eax,0xb
c00285e1:	09 c3                	or     ebx,eax
c00285e3:	89 f8                	mov    eax,edi
c00285e5:	c1 e8 0b             	shr    eax,0xb
c00285e8:	c1 e6 15             	shl    esi,0x15
c00285eb:	09 c6                	or     esi,eax
c00285ed:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00285f3:	0f 95 c1             	setne  cl
c00285f6:	09 c8                	or     eax,ecx
c00285f8:	83 e0 01             	and    eax,0x1
c00285fb:	c1 ef 0a             	shr    edi,0xa
c00285fe:	21 c7                	and    edi,eax
c0028600:	01 f7                	add    edi,esi
c0028602:	83 d3 00             	adc    ebx,0x0
c0028605:	89 da                	mov    edx,ebx
c0028607:	eb 03                	jmp    c002860c <__muldf3+0x2d4>
c0028609:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002860c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002860f:	89 f8                	mov    eax,edi
c0028611:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028614:	83 c4 24             	add    esp,0x24
c0028617:	5b                   	pop    ebx
c0028618:	5e                   	pop    esi
c0028619:	5f                   	pop    edi
c002861a:	5d                   	pop    ebp
c002861b:	c3                   	ret    

c002861c <__divdf3>:
c002861c:	55                   	push   ebp
c002861d:	89 e5                	mov    ebp,esp
c002861f:	57                   	push   edi
c0028620:	56                   	push   esi
c0028621:	53                   	push   ebx
c0028622:	83 ec 2c             	sub    esp,0x2c
c0028625:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028628:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002862b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002862e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028631:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028634:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028637:	89 ce                	mov    esi,ecx
c0028639:	89 c8                	mov    eax,ecx
c002863b:	c1 f8 14             	sar    eax,0x14
c002863e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028641:	89 f8                	mov    eax,edi
c0028643:	89 fb                	mov    ebx,edi
c0028645:	c1 e3 0b             	shl    ebx,0xb
c0028648:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002864b:	c1 e6 0b             	shl    esi,0xb
c002864e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028654:	c1 e8 15             	shr    eax,0x15
c0028657:	09 c6                	or     esi,eax
c0028659:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002865c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002865f:	89 c2                	mov    edx,eax
c0028661:	c1 fa 14             	sar    edx,0x14
c0028664:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028667:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002866a:	89 de                	mov    esi,ebx
c002866c:	c1 e6 0b             	shl    esi,0xb
c002866f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028672:	c1 e0 0b             	shl    eax,0xb
c0028675:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002867a:	c1 eb 15             	shr    ebx,0x15
c002867d:	09 d8                	or     eax,ebx
c002867f:	89 c2                	mov    edx,eax
c0028681:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028684:	25 ff 07 00 00       	and    eax,0x7ff
c0028689:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002868c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002868f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028695:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028698:	29 d8                	sub    eax,ebx
c002869a:	05 ff 03 00 00       	add    eax,0x3ff
c002869f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00286a2:	46                   	inc    esi
c00286a3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00286a9:	0f 85 a5 00 00 00    	jne    c0028754 <__divdf3+0x138>
c00286af:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00286b2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00286b5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00286b9:	74 2a                	je     c00286e5 <__divdf3+0xc9>
c00286bb:	85 f6                	test   esi,esi
c00286bd:	0f 85 cc 02 00 00    	jne    c002898f <__divdf3+0x373>
c00286c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00286c6:	40                   	inc    eax
c00286c7:	a9 fe 07 00 00       	test   eax,0x7fe
c00286cc:	75 26                	jne    c00286f4 <__divdf3+0xd8>
c00286ce:	85 db                	test   ebx,ebx
c00286d0:	74 22                	je     c00286f4 <__divdf3+0xd8>
c00286d2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00286d5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00286d8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00286db:	09 d0                	or     eax,edx
c00286dd:	0f 85 ac 02 00 00    	jne    c002898f <__divdf3+0x373>
c00286e3:	eb 63                	jmp    c0028748 <__divdf3+0x12c>
c00286e5:	85 f6                	test   esi,esi
c00286e7:	75 22                	jne    c002870b <__divdf3+0xef>
c00286e9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00286ec:	40                   	inc    eax
c00286ed:	a9 fe 07 00 00       	test   eax,0x7fe
c00286f2:	74 36                	je     c002872a <__divdf3+0x10e>
c00286f4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00286f8:	0f 89 91 02 00 00    	jns    c002898f <__divdf3+0x373>
c00286fe:	89 f8                	mov    eax,edi
c0028700:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028706:	e9 80 02 00 00       	jmp    c002898b <__divdf3+0x36f>
c002870b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002870e:	01 f6                	add    esi,esi
c0028710:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028713:	c1 ef 1f             	shr    edi,0x1f
c0028716:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028719:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002871c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002871f:	09 f7                	or     edi,esi
c0028721:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028724:	78 2e                	js     c0028754 <__divdf3+0x138>
c0028726:	89 c8                	mov    eax,ecx
c0028728:	eb e1                	jmp    c002870b <__divdf3+0xef>
c002872a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002872d:	09 d0                	or     eax,edx
c002872f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028733:	74 0f                	je     c0028744 <__divdf3+0x128>
c0028735:	85 c0                	test   eax,eax
c0028737:	74 bb                	je     c00286f4 <__divdf3+0xd8>
c0028739:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002873c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002873f:	e9 4b 02 00 00       	jmp    c002898f <__divdf3+0x373>
c0028744:	85 c0                	test   eax,eax
c0028746:	75 ac                	jne    c00286f4 <__divdf3+0xd8>
c0028748:	31 ff                	xor    edi,edi
c002874a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002874f:	e9 3b 02 00 00       	jmp    c002898f <__divdf3+0x373>
c0028754:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028757:	8d 4f 01             	lea    ecx,[edi+0x1]
c002875a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028760:	75 6b                	jne    c00287cd <__divdf3+0x1b1>
c0028762:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028765:	09 d6                	or     esi,edx
c0028767:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002876b:	74 28                	je     c0028795 <__divdf3+0x179>
c002876d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028770:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028773:	85 f6                	test   esi,esi
c0028775:	0f 85 14 02 00 00    	jne    c002898f <__divdf3+0x373>
c002877b:	31 ff                	xor    edi,edi
c002877d:	31 c9                	xor    ecx,ecx
c002877f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028782:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028785:	0f 89 04 02 00 00    	jns    c002898f <__divdf3+0x373>
c002878b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028790:	e9 fa 01 00 00       	jmp    c002898f <__divdf3+0x373>
c0028795:	85 f6                	test   esi,esi
c0028797:	75 1b                	jne    c00287b4 <__divdf3+0x198>
c0028799:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002879c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002879f:	25 00 00 00 80       	and    eax,0x80000000
c00287a4:	31 c9                	xor    ecx,ecx
c00287a6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00287ab:	89 cf                	mov    edi,ecx
c00287ad:	89 c1                	mov    ecx,eax
c00287af:	e9 db 01 00 00       	jmp    c002898f <__divdf3+0x373>
c00287b4:	01 d2                	add    edx,edx
c00287b6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00287b9:	c1 eb 1f             	shr    ebx,0x1f
c00287bc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00287bf:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00287c2:	8d 48 01             	lea    ecx,[eax+0x1]
c00287c5:	09 da                	or     edx,ebx
c00287c7:	78 04                	js     c00287cd <__divdf3+0x1b1>
c00287c9:	89 c8                	mov    eax,ecx
c00287cb:	eb e7                	jmp    c00287b4 <__divdf3+0x198>
c00287cd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00287d0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00287d6:	81 ca 00 00 00 80    	or     edx,0x80000000
c00287dc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00287df:	39 d6                	cmp    esi,edx
c00287e1:	77 0d                	ja     c00287f0 <__divdf3+0x1d4>
c00287e3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00287e6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00287e9:	72 1b                	jb     c0028806 <__divdf3+0x1ea>
c00287eb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00287ee:	75 16                	jne    c0028806 <__divdf3+0x1ea>
c00287f0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00287f3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00287f6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00287f9:	83 de 00             	sbb    esi,0x0
c00287fc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00287ff:	ba 01 00 00 00       	mov    edx,0x1
c0028804:	eb 02                	jmp    c0028808 <__divdf3+0x1ec>
c0028806:	31 d2                	xor    edx,edx
c0028808:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002880f:	31 ff                	xor    edi,edi
c0028811:	01 ff                	add    edi,edi
c0028813:	89 d1                	mov    ecx,edx
c0028815:	c1 e9 1f             	shr    ecx,0x1f
c0028818:	09 cf                	or     edi,ecx
c002881a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002881d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028820:	89 da                	mov    edx,ebx
c0028822:	89 f3                	mov    ebx,esi
c0028824:	8d 34 36             	lea    esi,[esi+esi*1]
c0028827:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002882a:	c1 e9 1f             	shr    ecx,0x1f
c002882d:	09 ce                	or     esi,ecx
c002882f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028832:	01 c9                	add    ecx,ecx
c0028834:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028837:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002883a:	85 db                	test   ebx,ebx
c002883c:	78 29                	js     c0028867 <__divdf3+0x24b>
c002883e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028841:	72 07                	jb     c002884a <__divdf3+0x22e>
c0028843:	75 3c                	jne    c0028881 <__divdf3+0x265>
c0028845:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028848:	77 37                	ja     c0028881 <__divdf3+0x265>
c002884a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002884d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028850:	31 d2                	xor    edx,edx
c0028852:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028855:	0f 97 c2             	seta   dl
c0028858:	29 d6                	sub    esi,edx
c002885a:	89 d9                	mov    ecx,ebx
c002885c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002885f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028862:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028865:	eb 17                	jmp    c002887e <__divdf3+0x262>
c0028867:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002886a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002886d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028870:	0f 97 c1             	seta   cl
c0028873:	0f b6 c9             	movzx  ecx,cl
c0028876:	29 ce                	sub    esi,ecx
c0028878:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002887b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002887e:	83 ca 01             	or     edx,0x1
c0028881:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028884:	75 8b                	jne    c0028811 <__divdf3+0x1f5>
c0028886:	c1 e7 09             	shl    edi,0x9
c0028889:	89 d1                	mov    ecx,edx
c002888b:	c1 e9 17             	shr    ecx,0x17
c002888e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028891:	09 f3                	or     ebx,esi
c0028893:	0f 95 c3             	setne  bl
c0028896:	0f b6 db             	movzx  ebx,bl
c0028899:	c1 e2 09             	shl    edx,0x9
c002889c:	09 d3                	or     ebx,edx
c002889e:	89 ca                	mov    edx,ecx
c00288a0:	09 fa                	or     edx,edi
c00288a2:	78 0c                	js     c00288b0 <__divdf3+0x294>
c00288a4:	01 d2                	add    edx,edx
c00288a6:	89 d9                	mov    ecx,ebx
c00288a8:	c1 e9 1f             	shr    ecx,0x1f
c00288ab:	09 ca                	or     edx,ecx
c00288ad:	01 db                	add    ebx,ebx
c00288af:	48                   	dec    eax
c00288b0:	3d fe 07 00 00       	cmp    eax,0x7fe
c00288b5:	0f 8f 83 00 00 00    	jg     c002893e <__divdf3+0x322>
c00288bb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00288c1:	85 c0                	test   eax,eax
c00288c3:	0f 8f 82 00 00 00    	jg     c002894b <__divdf3+0x32f>
c00288c9:	83 f8 cc             	cmp    eax,0xffffffcc
c00288cc:	7c 77                	jl     c0028945 <__divdf3+0x329>
c00288ce:	be 01 00 00 00       	mov    esi,0x1
c00288d3:	29 c6                	sub    esi,eax
c00288d5:	81 ca 00 00 00 80    	or     edx,0x80000000
c00288db:	83 fe 1f             	cmp    esi,0x1f
c00288de:	7e 2f                	jle    c002890f <__divdf3+0x2f3>
c00288e0:	83 fe 20             	cmp    esi,0x20
c00288e3:	75 0a                	jne    c00288ef <__divdf3+0x2d3>
c00288e5:	85 db                	test   ebx,ebx
c00288e7:	0f 95 c3             	setne  bl
c00288ea:	0f b6 db             	movzx  ebx,bl
c00288ed:	eb 1a                	jmp    c0028909 <__divdf3+0x2ed>
c00288ef:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00288f2:	89 d7                	mov    edi,edx
c00288f4:	d3 e7                	shl    edi,cl
c00288f6:	89 f9                	mov    ecx,edi
c00288f8:	09 d9                	or     ecx,ebx
c00288fa:	0f 95 c3             	setne  bl
c00288fd:	0f b6 db             	movzx  ebx,bl
c0028900:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028905:	29 c1                	sub    ecx,eax
c0028907:	d3 ea                	shr    edx,cl
c0028909:	09 d3                	or     ebx,edx
c002890b:	31 c0                	xor    eax,eax
c002890d:	eb 3a                	jmp    c0028949 <__divdf3+0x32d>
c002890f:	83 c0 1f             	add    eax,0x1f
c0028912:	89 d7                	mov    edi,edx
c0028914:	88 c1                	mov    cl,al
c0028916:	d3 e7                	shl    edi,cl
c0028918:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002891b:	89 df                	mov    edi,ebx
c002891d:	89 f1                	mov    ecx,esi
c002891f:	d3 ef                	shr    edi,cl
c0028921:	89 f9                	mov    ecx,edi
c0028923:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028926:	09 cf                	or     edi,ecx
c0028928:	88 c1                	mov    cl,al
c002892a:	d3 e3                	shl    ebx,cl
c002892c:	85 db                	test   ebx,ebx
c002892e:	0f 95 c3             	setne  bl
c0028931:	0f b6 db             	movzx  ebx,bl
c0028934:	09 fb                	or     ebx,edi
c0028936:	89 f1                	mov    ecx,esi
c0028938:	d3 ea                	shr    edx,cl
c002893a:	31 c0                	xor    eax,eax
c002893c:	eb 0d                	jmp    c002894b <__divdf3+0x32f>
c002893e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028943:	eb 02                	jmp    c0028947 <__divdf3+0x32b>
c0028945:	31 c0                	xor    eax,eax
c0028947:	31 db                	xor    ebx,ebx
c0028949:	31 d2                	xor    edx,edx
c002894b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c002894e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028951:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028957:	09 c8                	or     eax,ecx
c0028959:	c1 e0 14             	shl    eax,0x14
c002895c:	89 d1                	mov    ecx,edx
c002895e:	c1 e9 0b             	shr    ecx,0xb
c0028961:	09 c8                	or     eax,ecx
c0028963:	89 c6                	mov    esi,eax
c0028965:	89 d9                	mov    ecx,ebx
c0028967:	c1 e9 0b             	shr    ecx,0xb
c002896a:	c1 e2 15             	shl    edx,0x15
c002896d:	09 ca                	or     edx,ecx
c002896f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028975:	0f 95 c0             	setne  al
c0028978:	09 c1                	or     ecx,eax
c002897a:	83 e1 01             	and    ecx,0x1
c002897d:	c1 eb 0a             	shr    ebx,0xa
c0028980:	21 cb                	and    ebx,ecx
c0028982:	01 d3                	add    ebx,edx
c0028984:	89 d8                	mov    eax,ebx
c0028986:	83 d6 00             	adc    esi,0x0
c0028989:	89 f2                	mov    edx,esi
c002898b:	89 c7                	mov    edi,eax
c002898d:	89 d1                	mov    ecx,edx
c002898f:	89 f8                	mov    eax,edi
c0028991:	89 ca                	mov    edx,ecx
c0028993:	83 c4 2c             	add    esp,0x2c
c0028996:	5b                   	pop    ebx
c0028997:	5e                   	pop    esi
c0028998:	5f                   	pop    edi
c0028999:	5d                   	pop    ebp
c002899a:	c3                   	ret    

c002899b <__floatsidf>:
c002899b:	55                   	push   ebp
c002899c:	89 e5                	mov    ebp,esp
c002899e:	56                   	push   esi
c002899f:	53                   	push   ebx
c00289a0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00289a3:	85 db                	test   ebx,ebx
c00289a5:	7e 15                	jle    c00289bc <__floatsidf+0x21>
c00289a7:	0f bd cb             	bsr    ecx,ebx
c00289aa:	83 f1 1f             	xor    ecx,0x1f
c00289ad:	d3 e3                	shl    ebx,cl
c00289af:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00289b5:	b8 1e 04 00 00       	mov    eax,0x41e
c00289ba:	eb 21                	jmp    c00289dd <__floatsidf+0x42>
c00289bc:	b8 00 00 00 00       	mov    eax,0x0
c00289c1:	ba 00 00 00 00       	mov    edx,0x0
c00289c6:	74 2a                	je     c00289f2 <__floatsidf+0x57>
c00289c8:	f7 db                	neg    ebx
c00289ca:	0f bd cb             	bsr    ecx,ebx
c00289cd:	83 f1 1f             	xor    ecx,0x1f
c00289d0:	d3 e3                	shl    ebx,cl
c00289d2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00289d8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00289dd:	29 c8                	sub    eax,ecx
c00289df:	c1 e0 14             	shl    eax,0x14
c00289e2:	89 c1                	mov    ecx,eax
c00289e4:	89 de                	mov    esi,ebx
c00289e6:	c1 ee 0b             	shr    esi,0xb
c00289e9:	09 f1                	or     ecx,esi
c00289eb:	89 ca                	mov    edx,ecx
c00289ed:	c1 e3 15             	shl    ebx,0x15
c00289f0:	89 d8                	mov    eax,ebx
c00289f2:	5b                   	pop    ebx
c00289f3:	5e                   	pop    esi
c00289f4:	5d                   	pop    ebp
c00289f5:	c3                   	ret    

c00289f6 <__floatunsidf>:
c00289f6:	55                   	push   ebp
c00289f7:	89 e5                	mov    ebp,esp
c00289f9:	56                   	push   esi
c00289fa:	53                   	push   ebx
c00289fb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00289fe:	85 db                	test   ebx,ebx
c0028a00:	74 2a                	je     c0028a2c <__floatunsidf+0x36>
c0028a02:	0f bd cb             	bsr    ecx,ebx
c0028a05:	83 f1 1f             	xor    ecx,0x1f
c0028a08:	d3 e3                	shl    ebx,cl
c0028a0a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a10:	b8 1e 04 00 00       	mov    eax,0x41e
c0028a15:	29 c8                	sub    eax,ecx
c0028a17:	c1 e0 14             	shl    eax,0x14
c0028a1a:	89 c1                	mov    ecx,eax
c0028a1c:	89 de                	mov    esi,ebx
c0028a1e:	c1 ee 0b             	shr    esi,0xb
c0028a21:	09 f1                	or     ecx,esi
c0028a23:	89 ca                	mov    edx,ecx
c0028a25:	c1 e3 15             	shl    ebx,0x15
c0028a28:	89 d8                	mov    eax,ebx
c0028a2a:	eb 04                	jmp    c0028a30 <__floatunsidf+0x3a>
c0028a2c:	31 c0                	xor    eax,eax
c0028a2e:	31 d2                	xor    edx,edx
c0028a30:	5b                   	pop    ebx
c0028a31:	5e                   	pop    esi
c0028a32:	5d                   	pop    ebp
c0028a33:	c3                   	ret    

c0028a34 <__fixdfsi>:
c0028a34:	55                   	push   ebp
c0028a35:	89 e5                	mov    ebp,esp
c0028a37:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028a3a:	89 d1                	mov    ecx,edx
c0028a3c:	c1 e1 0b             	shl    ecx,0xb
c0028a3f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028a45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028a48:	c1 e8 15             	shr    eax,0x15
c0028a4b:	09 c1                	or     ecx,eax
c0028a4d:	c1 fa 14             	sar    edx,0x14
c0028a50:	78 1f                	js     c0028a71 <__fixdfsi+0x3d>
c0028a52:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028a58:	31 c0                	xor    eax,eax
c0028a5a:	83 fa 1e             	cmp    edx,0x1e
c0028a5d:	77 40                	ja     c0028a9f <__fixdfsi+0x6b>
c0028a5f:	89 c8                	mov    eax,ecx
c0028a61:	0d 00 00 00 80       	or     eax,0x80000000
c0028a66:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028a6b:	29 d1                	sub    ecx,edx
c0028a6d:	d3 e8                	shr    eax,cl
c0028a6f:	eb 2e                	jmp    c0028a9f <__fixdfsi+0x6b>
c0028a71:	31 c0                	xor    eax,eax
c0028a73:	81 c2 01 04 00 00    	add    edx,0x401
c0028a79:	78 24                	js     c0028a9f <__fixdfsi+0x6b>
c0028a7b:	83 fa 1e             	cmp    edx,0x1e
c0028a7e:	7e 09                	jle    c0028a89 <__fixdfsi+0x55>
c0028a80:	83 fa 1f             	cmp    edx,0x1f
c0028a83:	75 18                	jne    c0028a9d <__fixdfsi+0x69>
c0028a85:	85 c9                	test   ecx,ecx
c0028a87:	75 14                	jne    c0028a9d <__fixdfsi+0x69>
c0028a89:	89 c8                	mov    eax,ecx
c0028a8b:	0d 00 00 00 80       	or     eax,0x80000000
c0028a90:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028a95:	29 d1                	sub    ecx,edx
c0028a97:	d3 e8                	shr    eax,cl
c0028a99:	f7 d8                	neg    eax
c0028a9b:	eb 02                	jmp    c0028a9f <__fixdfsi+0x6b>
c0028a9d:	31 c0                	xor    eax,eax
c0028a9f:	5d                   	pop    ebp
c0028aa0:	c3                   	ret    

c0028aa1 <__fixunsdfsi>:
c0028aa1:	55                   	push   ebp
c0028aa2:	89 e5                	mov    ebp,esp
c0028aa4:	53                   	push   ebx
c0028aa5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028aa8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028aab:	89 d3                	mov    ebx,edx
c0028aad:	c1 fb 14             	sar    ebx,0x14
c0028ab0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028ab6:	31 c0                	xor    eax,eax
c0028ab8:	83 fb 1f             	cmp    ebx,0x1f
c0028abb:	77 1d                	ja     c0028ada <__fixunsdfsi+0x39>
c0028abd:	89 d0                	mov    eax,edx
c0028abf:	c1 e0 0b             	shl    eax,0xb
c0028ac2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028ac7:	c1 e9 15             	shr    ecx,0x15
c0028aca:	09 c8                	or     eax,ecx
c0028acc:	0d 00 00 00 80       	or     eax,0x80000000
c0028ad1:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028ad6:	29 d9                	sub    ecx,ebx
c0028ad8:	d3 e8                	shr    eax,cl
c0028ada:	5b                   	pop    ebx
c0028adb:	5d                   	pop    ebp
c0028adc:	c3                   	ret    

c0028add <__cmpdf2>:
c0028add:	55                   	push   ebp
c0028ade:	89 e5                	mov    ebp,esp
c0028ae0:	57                   	push   edi
c0028ae1:	56                   	push   esi
c0028ae2:	53                   	push   ebx
c0028ae3:	83 ec 0c             	sub    esp,0xc
c0028ae6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028ae9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028aec:	89 ca                	mov    edx,ecx
c0028aee:	c1 ea 14             	shr    edx,0x14
c0028af1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028af7:	89 cb                	mov    ebx,ecx
c0028af9:	c1 fb 1f             	sar    ebx,0x1f
c0028afc:	31 da                	xor    edx,ebx
c0028afe:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028b01:	89 df                	mov    edi,ebx
c0028b03:	c1 e7 0b             	shl    edi,0xb
c0028b06:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028b09:	c1 e1 0b             	shl    ecx,0xb
c0028b0c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028b12:	c1 eb 15             	shr    ebx,0x15
c0028b15:	09 d9                	or     ecx,ebx
c0028b17:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028b1a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028b1d:	89 ce                	mov    esi,ecx
c0028b1f:	c1 ee 14             	shr    esi,0x14
c0028b22:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028b28:	89 cb                	mov    ebx,ecx
c0028b2a:	c1 fb 1f             	sar    ebx,0x1f
c0028b2d:	31 de                	xor    esi,ebx
c0028b2f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028b32:	89 df                	mov    edi,ebx
c0028b34:	c1 e7 0b             	shl    edi,0xb
c0028b37:	c1 e1 0b             	shl    ecx,0xb
c0028b3a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028b40:	c1 eb 15             	shr    ebx,0x15
c0028b43:	09 d9                	or     ecx,ebx
c0028b45:	89 d3                	mov    ebx,edx
c0028b47:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028b4d:	43                   	inc    ebx
c0028b4e:	83 fb 01             	cmp    ebx,0x1
c0028b51:	77 08                	ja     c0028b5b <__cmpdf2+0x7e>
c0028b53:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028b56:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028b59:	75 68                	jne    c0028bc3 <__cmpdf2+0xe6>
c0028b5b:	89 f3                	mov    ebx,esi
c0028b5d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028b63:	43                   	inc    ebx
c0028b64:	83 fb 01             	cmp    ebx,0x1
c0028b67:	77 06                	ja     c0028b6f <__cmpdf2+0x92>
c0028b69:	89 fb                	mov    ebx,edi
c0028b6b:	09 cb                	or     ebx,ecx
c0028b6d:	75 54                	jne    c0028bc3 <__cmpdf2+0xe6>
c0028b6f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028b72:	09 f8                	or     eax,edi
c0028b74:	09 c8                	or     eax,ecx
c0028b76:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028b79:	75 12                	jne    c0028b8d <__cmpdf2+0xb0>
c0028b7b:	8d 42 01             	lea    eax,[edx+0x1]
c0028b7e:	83 f8 01             	cmp    eax,0x1
c0028b81:	77 0a                	ja     c0028b8d <__cmpdf2+0xb0>
c0028b83:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028b86:	31 c0                	xor    eax,eax
c0028b88:	83 fb 01             	cmp    ebx,0x1
c0028b8b:	76 36                	jbe    c0028bc3 <__cmpdf2+0xe6>
c0028b8d:	b8 01 00 00 00       	mov    eax,0x1
c0028b92:	39 f2                	cmp    edx,esi
c0028b94:	7f 2d                	jg     c0028bc3 <__cmpdf2+0xe6>
c0028b96:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028b9b:	7c 26                	jl     c0028bc3 <__cmpdf2+0xe6>
c0028b9d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028ba0:	77 07                	ja     c0028ba9 <__cmpdf2+0xcc>
c0028ba2:	72 16                	jb     c0028bba <__cmpdf2+0xdd>
c0028ba4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028ba7:	76 0a                	jbe    c0028bb3 <__cmpdf2+0xd6>
c0028ba9:	89 d0                	mov    eax,edx
c0028bab:	c1 f8 1f             	sar    eax,0x1f
c0028bae:	83 c8 01             	or     eax,0x1
c0028bb1:	eb 10                	jmp    c0028bc3 <__cmpdf2+0xe6>
c0028bb3:	b8 00 00 00 00       	mov    eax,0x0
c0028bb8:	73 09                	jae    c0028bc3 <__cmpdf2+0xe6>
c0028bba:	89 d0                	mov    eax,edx
c0028bbc:	c1 f8 1f             	sar    eax,0x1f
c0028bbf:	83 e0 02             	and    eax,0x2
c0028bc2:	48                   	dec    eax
c0028bc3:	83 c4 0c             	add    esp,0xc
c0028bc6:	5b                   	pop    ebx
c0028bc7:	5e                   	pop    esi
c0028bc8:	5f                   	pop    edi
c0028bc9:	5d                   	pop    ebp
c0028bca:	c3                   	ret    

c0028bcb <__eqdf2>:
c0028bcb:	55                   	push   ebp
c0028bcc:	89 e5                	mov    ebp,esp
c0028bce:	50                   	push   eax
c0028bcf:	6a 01                	push   0x1
c0028bd1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028bd4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028bd7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028bda:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028bdd:	e8 fb fe ff ff       	call   c0028add <__cmpdf2>
c0028be2:	83 c4 18             	add    esp,0x18
c0028be5:	c9                   	leave  
c0028be6:	c3                   	ret    

c0028be7 <__nedf2>:
c0028be7:	eb e2                	jmp    c0028bcb <__eqdf2>

c0028be9 <__gtdf2>:
c0028be9:	55                   	push   ebp
c0028bea:	89 e5                	mov    ebp,esp
c0028bec:	50                   	push   eax
c0028bed:	6a ff                	push   0xffffffff
c0028bef:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028bf2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028bf5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028bf8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028bfb:	e8 dd fe ff ff       	call   c0028add <__cmpdf2>
c0028c00:	83 c4 18             	add    esp,0x18
c0028c03:	c9                   	leave  
c0028c04:	c3                   	ret    

c0028c05 <__gedf2>:
c0028c05:	eb e2                	jmp    c0028be9 <__gtdf2>

c0028c07 <__ltdf2>:
c0028c07:	eb c2                	jmp    c0028bcb <__eqdf2>

c0028c09 <__ledf2>:
c0028c09:	eb c0                	jmp    c0028bcb <__eqdf2>

c0028c0b <__truncdfsf2>:
c0028c0b:	55                   	push   ebp
c0028c0c:	89 e5                	mov    ebp,esp
c0028c0e:	57                   	push   edi
c0028c0f:	56                   	push   esi
c0028c10:	53                   	push   ebx
c0028c11:	83 ec 0c             	sub    esp,0xc
c0028c14:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028c17:	89 d1                	mov    ecx,edx
c0028c19:	c1 f9 14             	sar    ecx,0x14
c0028c1c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028c1f:	89 df                	mov    edi,ebx
c0028c21:	c1 e7 0b             	shl    edi,0xb
c0028c24:	89 d0                	mov    eax,edx
c0028c26:	c1 e0 0b             	shl    eax,0xb
c0028c29:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028c2e:	c1 eb 15             	shr    ebx,0x15
c0028c31:	09 d8                	or     eax,ebx
c0028c33:	89 cb                	mov    ebx,ecx
c0028c35:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028c3b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028c41:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028c47:	0f 86 9e 00 00 00    	jbe    c0028ceb <__truncdfsf2+0xe0>
c0028c4d:	85 db                	test   ebx,ebx
c0028c4f:	75 0a                	jne    c0028c5b <__truncdfsf2+0x50>
c0028c51:	c1 fa 17             	sar    edx,0x17
c0028c54:	30 d2                	xor    dl,dl
c0028c56:	e9 84 00 00 00       	jmp    c0028cdf <__truncdfsf2+0xd4>
c0028c5b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028c61:	83 fe 83             	cmp    esi,0xffffff83
c0028c64:	7d 4b                	jge    c0028cb1 <__truncdfsf2+0xa6>
c0028c66:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028c6b:	29 f1                	sub    ecx,esi
c0028c6d:	83 f9 1f             	cmp    ecx,0x1f
c0028c70:	7f 6b                	jg     c0028cdd <__truncdfsf2+0xd2>
c0028c72:	0d 00 00 00 80       	or     eax,0x80000000
c0028c77:	89 c3                	mov    ebx,eax
c0028c79:	d3 eb                	shr    ebx,cl
c0028c7b:	be 01 00 00 00       	mov    esi,0x1
c0028c80:	d3 e6                	shl    esi,cl
c0028c82:	4e                   	dec    esi
c0028c83:	21 f0                	and    eax,esi
c0028c85:	09 f8                	or     eax,edi
c0028c87:	0f 95 c0             	setne  al
c0028c8a:	0f b6 c0             	movzx  eax,al
c0028c8d:	09 c3                	or     ebx,eax
c0028c8f:	89 d9                	mov    ecx,ebx
c0028c91:	c1 e9 08             	shr    ecx,0x8
c0028c94:	f6 c3 7f             	test   bl,0x7f
c0028c97:	0f 95 c0             	setne  al
c0028c9a:	09 c8                	or     eax,ecx
c0028c9c:	83 e0 01             	and    eax,0x1
c0028c9f:	c1 eb 07             	shr    ebx,0x7
c0028ca2:	21 c3                	and    ebx,eax
c0028ca4:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028caa:	09 d1                	or     ecx,edx
c0028cac:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028caf:	eb 76                	jmp    c0028d27 <__truncdfsf2+0x11c>
c0028cb1:	83 c6 80             	add    esi,0xffffff80
c0028cb4:	7e 1d                	jle    c0028cd3 <__truncdfsf2+0xc8>
c0028cb6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028cbc:	75 0b                	jne    c0028cc9 <__truncdfsf2+0xbe>
c0028cbe:	09 f8                	or     eax,edi
c0028cc0:	74 09                	je     c0028ccb <__truncdfsf2+0xc0>
c0028cc2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028cc7:	eb 02                	jmp    c0028ccb <__truncdfsf2+0xc0>
c0028cc9:	31 c0                	xor    eax,eax
c0028ccb:	c1 fa 17             	sar    edx,0x17
c0028cce:	80 ca ff             	or     dl,0xff
c0028cd1:	eb 0e                	jmp    c0028ce1 <__truncdfsf2+0xd6>
c0028cd3:	c1 fa 1f             	sar    edx,0x1f
c0028cd6:	c1 e2 08             	shl    edx,0x8
c0028cd9:	09 ca                	or     edx,ecx
c0028cdb:	eb 04                	jmp    c0028ce1 <__truncdfsf2+0xd6>
c0028cdd:	31 d2                	xor    edx,edx
c0028cdf:	31 c0                	xor    eax,eax
c0028ce1:	c1 e2 17             	shl    edx,0x17
c0028ce4:	c1 e8 08             	shr    eax,0x8
c0028ce7:	09 d0                	or     eax,edx
c0028ce9:	eb 3c                	jmp    c0028d27 <__truncdfsf2+0x11c>
c0028ceb:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028cf1:	89 ca                	mov    edx,ecx
c0028cf3:	c1 fa 0b             	sar    edx,0xb
c0028cf6:	c1 e2 08             	shl    edx,0x8
c0028cf9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028cfc:	31 db                	xor    ebx,ebx
c0028cfe:	85 ff                	test   edi,edi
c0028d00:	0f 95 c3             	setne  bl
c0028d03:	09 d8                	or     eax,ebx
c0028d05:	89 c3                	mov    ebx,eax
c0028d07:	c1 eb 08             	shr    ebx,0x8
c0028d0a:	a8 7f                	test   al,0x7f
c0028d0c:	0f 95 c2             	setne  dl
c0028d0f:	89 d6                	mov    esi,edx
c0028d11:	09 de                	or     esi,ebx
c0028d13:	83 e6 01             	and    esi,0x1
c0028d16:	c1 e8 07             	shr    eax,0x7
c0028d19:	21 f0                	and    eax,esi
c0028d1b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028d1e:	09 ca                	or     edx,ecx
c0028d20:	c1 e2 17             	shl    edx,0x17
c0028d23:	09 da                	or     edx,ebx
c0028d25:	01 d0                	add    eax,edx
c0028d27:	83 c4 0c             	add    esp,0xc
c0028d2a:	5b                   	pop    ebx
c0028d2b:	5e                   	pop    esi
c0028d2c:	5f                   	pop    edi
c0028d2d:	5d                   	pop    ebp
c0028d2e:	c3                   	ret    

c0028d2f <__extendsfdf2>:
c0028d2f:	55                   	push   ebp
c0028d30:	89 e5                	mov    ebp,esp
c0028d32:	57                   	push   edi
c0028d33:	56                   	push   esi
c0028d34:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028d37:	89 d1                	mov    ecx,edx
c0028d39:	c1 f9 17             	sar    ecx,0x17
c0028d3c:	c1 e2 08             	shl    edx,0x8
c0028d3f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028d45:	89 c8                	mov    eax,ecx
c0028d47:	80 e4 f8             	and    ah,0xf8
c0028d4a:	8d 71 01             	lea    esi,[ecx+0x1]
c0028d4d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028d53:	75 27                	jne    c0028d7c <__extendsfdf2+0x4d>
c0028d55:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028d5b:	75 18                	jne    c0028d75 <__extendsfdf2+0x46>
c0028d5d:	85 d2                	test   edx,edx
c0028d5f:	74 20                	je     c0028d81 <__extendsfdf2+0x52>
c0028d61:	41                   	inc    ecx
c0028d62:	01 d2                	add    edx,edx
c0028d64:	79 fb                	jns    c0028d61 <__extendsfdf2+0x32>
c0028d66:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028d6c:	29 c8                	sub    eax,ecx
c0028d6e:	05 81 03 00 00       	add    eax,0x381
c0028d73:	eb 0c                	jmp    c0028d81 <__extendsfdf2+0x52>
c0028d75:	05 00 07 00 00       	add    eax,0x700
c0028d7a:	eb 05                	jmp    c0028d81 <__extendsfdf2+0x52>
c0028d7c:	05 80 03 00 00       	add    eax,0x380
c0028d81:	c1 e0 14             	shl    eax,0x14
c0028d84:	89 c1                	mov    ecx,eax
c0028d86:	89 d0                	mov    eax,edx
c0028d88:	c1 e8 0b             	shr    eax,0xb
c0028d8b:	09 c1                	or     ecx,eax
c0028d8d:	c1 e2 15             	shl    edx,0x15
c0028d90:	89 d0                	mov    eax,edx
c0028d92:	89 ca                	mov    edx,ecx
c0028d94:	5e                   	pop    esi
c0028d95:	5f                   	pop    edi
c0028d96:	5d                   	pop    ebp
c0028d97:	c3                   	ret    
c0028d98:	66 90                	xchg   ax,ax
c0028d9a:	66 90                	xchg   ax,ax
c0028d9c:	66 90                	xchg   ax,ax
c0028d9e:	66 90                	xchg   ax,ax

c0028da0 <fabs>:
c0028da0:	83 ec 0c             	sub    esp,0xc
c0028da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da7:	89 04 24             	mov    DWORD PTR [esp],eax
c0028daa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028dae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028db3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028db7:	dd 04 24             	fld    QWORD PTR [esp]
c0028dba:	83 c4 0c             	add    esp,0xc
c0028dbd:	c3                   	ret    
c0028dbe:	66 90                	xchg   ax,ax

c0028dc0 <lrint>:
c0028dc0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028dc4:	83 ec 04             	sub    esp,0x4
c0028dc7:	db 1c 24             	fistp  DWORD PTR [esp]
c0028dca:	58                   	pop    eax
c0028dcb:	c3                   	ret    

c0028dcc <lrintf>:
c0028dcc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028dd0:	83 ec 04             	sub    esp,0x4
c0028dd3:	db 1c 24             	fistp  DWORD PTR [esp]
c0028dd6:	58                   	pop    eax
c0028dd7:	c3                   	ret    

Disassembly of section .init:

c0028dd8 <_init>:
c0028dd8:	55                   	push   ebp
c0028dd9:	89 e5                	mov    ebp,esp
c0028ddb:	e8 38 73 fd ff       	call   c0000118 <frame_dummy>
c0028de0:	e8 5b e0 ff ff       	call   c0026e40 <__do_global_ctors_aux>
c0028de5:	5d                   	pop    ebp
c0028de6:	c3                   	ret    

Disassembly of section .fini:

c0028de7 <_fini>:
c0028de7:	55                   	push   ebp
c0028de8:	89 e5                	mov    ebp,esp
c0028dea:	e8 b9 72 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028def:	5d                   	pop    ebp
c0028df0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028df2 <Computer::~Computer()>:
c0028df2:	83 ec 0c             	sub    esp,0xc
c0028df5:	ba 28 aa 02 c0       	mov    edx,0xc002aa28
c0028dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dfe:	89 10                	mov    DWORD PTR [eax],edx
c0028e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e04:	83 ec 0c             	sub    esp,0xc
c0028e07:	50                   	push   eax
c0028e08:	e8 3f b3 fe ff       	call   c001414c <Device::~Device()>
c0028e0d:	83 c4 10             	add    esp,0x10
c0028e10:	90                   	nop
c0028e11:	83 c4 0c             	add    esp,0xc
c0028e14:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028e16 <Computer::~Computer()>:
c0028e16:	83 ec 0c             	sub    esp,0xc
c0028e19:	83 ec 0c             	sub    esp,0xc
c0028e1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e20:	e8 cd ff ff ff       	call   c0028df2 <Computer::~Computer()>
c0028e25:	83 c4 10             	add    esp,0x10
c0028e28:	83 ec 08             	sub    esp,0x8
c0028e2b:	68 ec 01 00 00       	push   0x1ec
c0028e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e34:	e8 2c 9f fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0028e39:	83 c4 10             	add    esp,0x10
c0028e3c:	83 c4 0c             	add    esp,0xc
c0028e3f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028e40 <idleCommon()>:
c0028e40:	83 ec 0c             	sub    esp,0xc
c0028e43:	fa                   	cli    
c0028e44:	ff 05 08 23 03 c0    	inc    DWORD PTR ds:0xc0032308
c0028e4a:	e8 b7 55 ff ff       	call   c001e406 <schedule()>
c0028e4f:	a1 08 23 03 c0       	mov    eax,ds:0xc0032308
c0028e54:	48                   	dec    eax
c0028e55:	a3 08 23 03 c0       	mov    ds:0xc0032308,eax
c0028e5a:	75 01                	jne    c0028e5d <idleCommon()+0x1d>
c0028e5c:	fb                   	sti    
c0028e5d:	83 c4 0c             	add    esp,0xc
c0028e60:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028e62 <LinkedList<UnixFile>::~LinkedList()>:
c0028e62:	90                   	nop
c0028e63:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028e64 <LinkedList<UnixFile>::LinkedList()>:
c0028e64:	83 ec 0c             	sub    esp,0xc
c0028e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e80:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e8b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e95:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ea7:	83 ec 0c             	sub    esp,0xc
c0028eaa:	68 e6 ac 02 c0       	push   0xc002ace6
c0028eaf:	e8 91 9f fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c0028eb4:	83 c4 10             	add    esp,0x10
c0028eb7:	90                   	nop
c0028eb8:	83 c4 0c             	add    esp,0xc
c0028ebb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028ebc <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028ebc:	83 ec 0c             	sub    esp,0xc
c0028ebf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028ec4:	75 10                	jne    c0028ed6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028ec6:	83 ec 0c             	sub    esp,0xc
c0028ec9:	68 00 ad 02 c0       	push   0xc002ad00
c0028ece:	e8 32 19 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0028ed3:	83 c4 10             	add    esp,0x10
c0028ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eda:	8b 00                	mov    eax,DWORD PTR [eax]
c0028edc:	85 c0                	test   eax,eax
c0028ede:	74 34                	je     c0028f14 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ee7:	85 c0                	test   eax,eax
c0028ee9:	74 29                	je     c0028f14 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ef2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ef6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f01:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f0b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f12:	eb 65                	jmp    c0028f79 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f18:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f1a:	85 c0                	test   eax,eax
c0028f1c:	75 4b                	jne    c0028f69 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f25:	85 c0                	test   eax,eax
c0028f27:	75 40                	jne    c0028f69 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f31:	89 10                	mov    DWORD PTR [eax],edx
c0028f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f3b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f45:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f50:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f53:	85 c0                	test   eax,eax
c0028f55:	74 22                	je     c0028f79 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028f57:	83 ec 0c             	sub    esp,0xc
c0028f5a:	68 22 ad 02 c0       	push   0xc002ad22
c0028f5f:	e8 a1 18 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0028f64:	83 c4 10             	add    esp,0x10
c0028f67:	eb 10                	jmp    c0028f79 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028f69:	83 ec 0c             	sub    esp,0xc
c0028f6c:	68 2c ad 02 c0       	push   0xc002ad2c
c0028f71:	e8 8f 18 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0028f76:	83 c4 10             	add    esp,0x10
c0028f79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028f80:	8d 50 01             	lea    edx,[eax+0x1]
c0028f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f87:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028f8a:	90                   	nop
c0028f8b:	83 c4 0c             	add    esp,0xc
c0028f8e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028f90 <LinkedList<UnixFile>::getFirstElement()>:
c0028f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f94:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f96:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028f98 <LinkedList<UnixFile>::removeFirst()>:
c0028f98:	83 ec 0c             	sub    esp,0xc
c0028f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fa1:	85 c0                	test   eax,eax
c0028fa3:	75 12                	jne    c0028fb7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028fa5:	83 ec 0c             	sub    esp,0xc
c0028fa8:	68 38 ad 02 c0       	push   0xc002ad38
c0028fad:	e8 53 18 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0028fb2:	83 c4 10             	add    esp,0x10
c0028fb5:	eb 7e                	jmp    c0029035 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fbe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028fc1:	85 c0                	test   eax,eax
c0028fc3:	74 10                	je     c0028fd5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028fc5:	83 ec 0c             	sub    esp,0xc
c0028fc8:	68 83 ad 02 c0       	push   0xc002ad83
c0028fcd:	e8 33 18 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0028fd2:	83 c4 10             	add    esp,0x10
c0028fd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fdb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028fde:	85 c0                	test   eax,eax
c0028fe0:	75 33                	jne    c0029015 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ffb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ffe:	83 f8 01             	cmp    eax,0x1
c0029001:	74 21                	je     c0029024 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029003:	83 ec 0c             	sub    esp,0xc
c0029006:	68 5c ad 02 c0       	push   0xc002ad5c
c002900b:	e8 f5 17 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0029010:	83 c4 10             	add    esp,0x10
c0029013:	eb 0f                	jmp    c0029024 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029019:	8b 00                	mov    eax,DWORD PTR [eax]
c002901b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002901e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029022:	89 10                	mov    DWORD PTR [eax],edx
c0029024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029028:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002902b:	8d 50 ff             	lea    edx,[eax-0x1]
c002902e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029032:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029035:	83 c4 0c             	add    esp,0xc
c0029038:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002903a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002903a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002903e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029041:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029042 <DriverlessDevice::~DriverlessDevice()>:
c0029042:	ba 04 b5 02 c0       	mov    edx,0xc002b504
c0029047:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002904b:	89 10                	mov    DWORD PTR [eax],edx
c002904d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029051:	50                   	push   eax
c0029052:	e8 f5 b0 fe ff       	call   c001414c <Device::~Device()>
c0029057:	83 c4 04             	add    esp,0x4
c002905a:	90                   	nop
c002905b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002905c <DriverlessDevice::~DriverlessDevice()>:
c002905c:	83 ec 0c             	sub    esp,0xc
c002905f:	83 ec 0c             	sub    esp,0xc
c0029062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029066:	e8 d7 ff ff ff       	call   c0029042 <DriverlessDevice::~DriverlessDevice()>
c002906b:	83 c4 10             	add    esp,0x10
c002906e:	83 ec 08             	sub    esp,0x8
c0029071:	68 58 01 00 00       	push   0x158
c0029076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002907a:	e8 e6 9c fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c002907f:	83 c4 10             	add    esp,0x10
c0029082:	83 c4 0c             	add    esp,0xc
c0029085:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029086 <LinkedList<Device>::addElement(Device*)>:
c0029086:	83 ec 0c             	sub    esp,0xc
c0029089:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002908e:	75 10                	jne    c00290a0 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029090:	83 ec 0c             	sub    esp,0xc
c0029093:	68 00 ad 02 c0       	push   0xc002ad00
c0029098:	e8 68 17 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c002909d:	83 c4 10             	add    esp,0x10
c00290a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00290a6:	85 c0                	test   eax,eax
c00290a8:	74 3a                	je     c00290e4 <LinkedList<Device>::addElement(Device*)+0x5e>
c00290aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290b1:	85 c0                	test   eax,eax
c00290b3:	74 2f                	je     c00290e4 <LinkedList<Device>::addElement(Device*)+0x5e>
c00290b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00290c0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00290c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00290ce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00290d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290d8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00290e2:	eb 68                	jmp    c002914c <LinkedList<Device>::addElement(Device*)+0xc6>
c00290e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00290ea:	85 c0                	test   eax,eax
c00290ec:	75 4e                	jne    c002913c <LinkedList<Device>::addElement(Device*)+0xb6>
c00290ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290f5:	85 c0                	test   eax,eax
c00290f7:	75 43                	jne    c002913c <LinkedList<Device>::addElement(Device*)+0xb6>
c00290f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029101:	89 10                	mov    DWORD PTR [eax],edx
c0029103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029107:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002910b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002910e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029112:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029115:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002911f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029123:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029126:	85 c0                	test   eax,eax
c0029128:	74 22                	je     c002914c <LinkedList<Device>::addElement(Device*)+0xc6>
c002912a:	83 ec 0c             	sub    esp,0xc
c002912d:	68 22 ad 02 c0       	push   0xc002ad22
c0029132:	e8 ce 16 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0029137:	83 c4 10             	add    esp,0x10
c002913a:	eb 10                	jmp    c002914c <LinkedList<Device>::addElement(Device*)+0xc6>
c002913c:	83 ec 0c             	sub    esp,0xc
c002913f:	68 2c ad 02 c0       	push   0xc002ad2c
c0029144:	e8 bc 16 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0029149:	83 c4 10             	add    esp,0x10
c002914c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029150:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029153:	8d 50 01             	lea    edx,[eax+0x1]
c0029156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002915a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002915d:	90                   	nop
c002915e:	83 c4 0c             	add    esp,0xc
c0029161:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029162 <LinkedList<Device>::LinkedList()>:
c0029162:	83 ec 0c             	sub    esp,0xc
c0029165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029169:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002916f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029173:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002917a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002917e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029189:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002918f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029193:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002919a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002919e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291a5:	83 ec 0c             	sub    esp,0xc
c00291a8:	68 e6 ac 02 c0       	push   0xc002ace6
c00291ad:	e8 93 9c fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c00291b2:	83 c4 10             	add    esp,0x10
c00291b5:	90                   	nop
c00291b6:	83 c4 0c             	add    esp,0xc
c00291b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00291ba <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00291ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291be:	8b 00                	mov    eax,DWORD PTR [eax]
c00291c0:	85 c0                	test   eax,eax
c00291c2:	75 0e                	jne    c00291d2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00291c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291cb:	85 c0                	test   eax,eax
c00291cd:	75 03                	jne    c00291d2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00291cf:	b0 01                	mov    al,0x1
c00291d1:	c3                   	ret    
c00291d2:	b0 00                	mov    al,0x0
c00291d4:	90                   	nop
c00291d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00291d6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00291d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00291da:	8b 00                	mov    eax,DWORD PTR [eax]
c00291dc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00291de <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00291de:	83 ec 0c             	sub    esp,0xc
c00291e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00291e7:	85 c0                	test   eax,eax
c00291e9:	75 15                	jne    c0029200 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00291eb:	83 ec 0c             	sub    esp,0xc
c00291ee:	68 38 ad 02 c0       	push   0xc002ad38
c00291f3:	e8 0d 16 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c00291f8:	83 c4 10             	add    esp,0x10
c00291fb:	e9 88 00 00 00       	jmp    c0029288 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029204:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029207:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002920a:	85 c0                	test   eax,eax
c002920c:	0f 95 c0             	setne  al
c002920f:	84 c0                	test   al,al
c0029211:	74 10                	je     c0029223 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029213:	83 ec 0c             	sub    esp,0xc
c0029216:	68 83 ad 02 c0       	push   0xc002ad83
c002921b:	e8 e5 15 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0029220:	83 c4 10             	add    esp,0x10
c0029223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029227:	8b 00                	mov    eax,DWORD PTR [eax]
c0029229:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002922c:	85 c0                	test   eax,eax
c002922e:	0f 94 c0             	sete   al
c0029231:	84 c0                	test   al,al
c0029233:	74 33                	je     c0029268 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0029235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029239:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002923f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029243:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002924a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002924e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029251:	83 f8 01             	cmp    eax,0x1
c0029254:	74 21                	je     c0029277 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029256:	83 ec 0c             	sub    esp,0xc
c0029259:	68 5c ad 02 c0       	push   0xc002ad5c
c002925e:	e8 a2 15 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0029263:	83 c4 10             	add    esp,0x10
c0029266:	eb 0f                	jmp    c0029277 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002926c:	8b 00                	mov    eax,DWORD PTR [eax]
c002926e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029275:	89 10                	mov    DWORD PTR [eax],edx
c0029277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002927b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002927e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029285:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029288:	83 c4 0c             	add    esp,0xc
c002928b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002928c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002928c:	83 ec 0c             	sub    esp,0xc
c002928f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029294:	75 10                	jne    c00292a6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029296:	83 ec 0c             	sub    esp,0xc
c0029299:	68 00 ad 02 c0       	push   0xc002ad00
c002929e:	e8 62 15 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c00292a3:	83 c4 10             	add    esp,0x10
c00292a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00292ac:	85 c0                	test   eax,eax
c00292ae:	74 34                	je     c00292e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00292b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292b7:	85 c0                	test   eax,eax
c00292b9:	74 29                	je     c00292e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00292bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00292c6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00292c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00292d1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00292d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292db:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00292e2:	eb 65                	jmp    c0029349 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00292e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00292ea:	85 c0                	test   eax,eax
c00292ec:	75 4b                	jne    c0029339 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00292ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292f5:	85 c0                	test   eax,eax
c00292f7:	75 40                	jne    c0029339 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00292f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029301:	89 10                	mov    DWORD PTR [eax],edx
c0029303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029307:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002930b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002930e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029312:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029315:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002931c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029320:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029323:	85 c0                	test   eax,eax
c0029325:	74 22                	je     c0029349 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029327:	83 ec 0c             	sub    esp,0xc
c002932a:	68 22 ad 02 c0       	push   0xc002ad22
c002932f:	e8 d1 14 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0029334:	83 c4 10             	add    esp,0x10
c0029337:	eb 10                	jmp    c0029349 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029339:	83 ec 0c             	sub    esp,0xc
c002933c:	68 2c ad 02 c0       	push   0xc002ad2c
c0029341:	e8 bf 14 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0029346:	83 c4 10             	add    esp,0x10
c0029349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002934d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029350:	8d 50 01             	lea    edx,[eax+0x1]
c0029353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029357:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002935a:	90                   	nop
c002935b:	83 c4 0c             	add    esp,0xc
c002935e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029360 <ACPI::~ACPI()>:
c0029360:	83 ec 0c             	sub    esp,0xc
c0029363:	ba 30 bf 02 c0       	mov    edx,0xc002bf30
c0029368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002936c:	89 10                	mov    DWORD PTR [eax],edx
c002936e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029372:	83 ec 0c             	sub    esp,0xc
c0029375:	50                   	push   eax
c0029376:	e8 d1 ad fe ff       	call   c001414c <Device::~Device()>
c002937b:	83 c4 10             	add    esp,0x10
c002937e:	90                   	nop
c002937f:	83 c4 0c             	add    esp,0xc
c0029382:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029384 <ACPI::~ACPI()>:
c0029384:	83 ec 0c             	sub    esp,0xc
c0029387:	83 ec 0c             	sub    esp,0xc
c002938a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002938e:	e8 cd ff ff ff       	call   c0029360 <ACPI::~ACPI()>
c0029393:	83 c4 10             	add    esp,0x10
c0029396:	83 ec 08             	sub    esp,0x8
c0029399:	68 68 12 00 00       	push   0x1268
c002939e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293a2:	e8 be 99 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c00293a7:	83 c4 10             	add    esp,0x10
c00293aa:	83 c4 0c             	add    esp,0xc
c00293ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00293ae <LinkedList<Device>::~LinkedList()>:
c00293ae:	90                   	nop
c00293af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00293b0 <LinkedList<Device>::isEmpty()>:
c00293b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00293b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00293b6:	85 c0                	test   eax,eax
c00293b8:	75 0e                	jne    c00293c8 <LinkedList<Device>::isEmpty()+0x18>
c00293ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00293be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293c1:	85 c0                	test   eax,eax
c00293c3:	75 03                	jne    c00293c8 <LinkedList<Device>::isEmpty()+0x18>
c00293c5:	b0 01                	mov    al,0x1
c00293c7:	c3                   	ret    
c00293c8:	b0 00                	mov    al,0x0
c00293ca:	90                   	nop
c00293cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00293cc <LinkedList<Device>::getFirstElement()>:
c00293cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00293d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00293d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00293d4 <LinkedList<Device>::removeFirst()>:
c00293d4:	83 ec 0c             	sub    esp,0xc
c00293d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293db:	8b 00                	mov    eax,DWORD PTR [eax]
c00293dd:	85 c0                	test   eax,eax
c00293df:	75 15                	jne    c00293f6 <LinkedList<Device>::removeFirst()+0x22>
c00293e1:	83 ec 0c             	sub    esp,0xc
c00293e4:	68 38 ad 02 c0       	push   0xc002ad38
c00293e9:	e8 17 14 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c00293ee:	83 c4 10             	add    esp,0x10
c00293f1:	e9 87 00 00 00       	jmp    c002947d <LinkedList<Device>::removeFirst()+0xa9>
c00293f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293fd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029403:	85 c0                	test   eax,eax
c0029405:	74 10                	je     c0029417 <LinkedList<Device>::removeFirst()+0x43>
c0029407:	83 ec 0c             	sub    esp,0xc
c002940a:	68 83 ad 02 c0       	push   0xc002ad83
c002940f:	e8 f1 13 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0029414:	83 c4 10             	add    esp,0x10
c0029417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002941b:	8b 00                	mov    eax,DWORD PTR [eax]
c002941d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029423:	85 c0                	test   eax,eax
c0029425:	75 33                	jne    c002945a <LinkedList<Device>::removeFirst()+0x86>
c0029427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002942b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029435:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002943c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029440:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029443:	83 f8 01             	cmp    eax,0x1
c0029446:	74 24                	je     c002946c <LinkedList<Device>::removeFirst()+0x98>
c0029448:	83 ec 0c             	sub    esp,0xc
c002944b:	68 5c ad 02 c0       	push   0xc002ad5c
c0029450:	e8 b0 13 ff ff       	call   c001a805 <Krnl::panic(char const*)>
c0029455:	83 c4 10             	add    esp,0x10
c0029458:	eb 12                	jmp    c002946c <LinkedList<Device>::removeFirst()+0x98>
c002945a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002945e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029460:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002946a:	89 10                	mov    DWORD PTR [eax],edx
c002946c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029470:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029473:	8d 50 ff             	lea    edx,[eax-0x1]
c0029476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002947a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002947d:	83 c4 0c             	add    esp,0xc
c0029480:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029482 <CPU::~CPU()>:
c0029482:	83 ec 0c             	sub    esp,0xc
c0029485:	ba 20 c3 02 c0       	mov    edx,0xc002c320
c002948a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002948e:	89 10                	mov    DWORD PTR [eax],edx
c0029490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029494:	83 ec 0c             	sub    esp,0xc
c0029497:	50                   	push   eax
c0029498:	e8 af ac fe ff       	call   c001414c <Device::~Device()>
c002949d:	83 c4 10             	add    esp,0x10
c00294a0:	90                   	nop
c00294a1:	83 c4 0c             	add    esp,0xc
c00294a4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00294a6 <CPU::~CPU()>:
c00294a6:	83 ec 0c             	sub    esp,0xc
c00294a9:	83 ec 0c             	sub    esp,0xc
c00294ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294b0:	e8 cd ff ff ff       	call   c0029482 <CPU::~CPU()>
c00294b5:	83 c4 10             	add    esp,0x10
c00294b8:	83 ec 08             	sub    esp,0x8
c00294bb:	68 98 11 00 00       	push   0x1198
c00294c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00294c4:	e8 9c 98 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c00294c9:	83 c4 10             	add    esp,0x10
c00294cc:	83 c4 0c             	add    esp,0xc
c00294cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00294d0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00294d0:	90                   	nop
c00294d1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00294d2 <ThreadControlBlock::ThreadControlBlock()>:
c00294d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294d6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00294dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294e1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00294e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294ec:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00294f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294f7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00294fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029502:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002950d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029511:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029515:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029519:	90                   	nop
c002951a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002951c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002951c:	83 ec 0c             	sub    esp,0xc
c002951f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029523:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002952d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029538:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002953f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029543:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002954d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029558:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002955f:	83 ec 0c             	sub    esp,0xc
c0029562:	68 e6 ac 02 c0       	push   0xc002ace6
c0029567:	e8 d9 98 fe ff       	call   c0012e45 <Dbg::kprintf(char const*, ...)>
c002956c:	83 c4 10             	add    esp,0x10
c002956f:	90                   	nop
c0029570:	83 c4 0c             	add    esp,0xc
c0029573:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029574 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029578:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002957b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002957c <Vm::_FPUState::_FPUState()>:
c002957c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029580:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029587:	90                   	nop
c0029588:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002958a <PCI::~PCI()>:
c002958a:	83 ec 0c             	sub    esp,0xc
c002958d:	ba 24 d4 02 c0       	mov    edx,0xc002d424
c0029592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029596:	89 10                	mov    DWORD PTR [eax],edx
c0029598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002959c:	83 ec 0c             	sub    esp,0xc
c002959f:	50                   	push   eax
c00295a0:	e8 77 a5 fe ff       	call   c0013b1c <Bus::~Bus()>
c00295a5:	83 c4 10             	add    esp,0x10
c00295a8:	90                   	nop
c00295a9:	83 c4 0c             	add    esp,0xc
c00295ac:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00295ae <PCI::~PCI()>:
c00295ae:	83 ec 0c             	sub    esp,0xc
c00295b1:	83 ec 0c             	sub    esp,0xc
c00295b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295b8:	e8 cd ff ff ff       	call   c002958a <PCI::~PCI()>
c00295bd:	83 c4 10             	add    esp,0x10
c00295c0:	83 ec 08             	sub    esp,0x8
c00295c3:	68 58 01 00 00       	push   0x158
c00295c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295cc:	e8 94 97 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c00295d1:	83 c4 10             	add    esp,0x10
c00295d4:	83 c4 0c             	add    esp,0xc
c00295d7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00295d8 <IDE::~IDE()>:
c00295d8:	83 ec 0c             	sub    esp,0xc
c00295db:	ba 88 d6 02 c0       	mov    edx,0xc002d688
c00295e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e4:	89 10                	mov    DWORD PTR [eax],edx
c00295e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ea:	83 ec 0c             	sub    esp,0xc
c00295ed:	50                   	push   eax
c00295ee:	e8 57 b0 fe ff       	call   c001464a <HardDiskController::~HardDiskController()>
c00295f3:	83 c4 10             	add    esp,0x10
c00295f6:	90                   	nop
c00295f7:	83 c4 0c             	add    esp,0xc
c00295fa:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00295fc <IDE::~IDE()>:
c00295fc:	83 ec 0c             	sub    esp,0xc
c00295ff:	83 ec 0c             	sub    esp,0xc
c0029602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029606:	e8 cd ff ff ff       	call   c00295d8 <IDE::~IDE()>
c002960b:	83 c4 10             	add    esp,0x10
c002960e:	83 ec 08             	sub    esp,0x8
c0029611:	68 70 02 00 00       	push   0x270
c0029616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002961a:	e8 46 97 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c002961f:	83 c4 10             	add    esp,0x10
c0029622:	83 c4 0c             	add    esp,0xc
c0029625:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029626 <SATABus::~SATABus()>:
c0029626:	83 ec 0c             	sub    esp,0xc
c0029629:	ba 68 d7 02 c0       	mov    edx,0xc002d768
c002962e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029632:	89 10                	mov    DWORD PTR [eax],edx
c0029634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029638:	83 ec 0c             	sub    esp,0xc
c002963b:	50                   	push   eax
c002963c:	e8 09 b0 fe ff       	call   c001464a <HardDiskController::~HardDiskController()>
c0029641:	83 c4 10             	add    esp,0x10
c0029644:	90                   	nop
c0029645:	83 c4 0c             	add    esp,0xc
c0029648:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002964a <SATABus::~SATABus()>:
c002964a:	83 ec 0c             	sub    esp,0xc
c002964d:	83 ec 0c             	sub    esp,0xc
c0029650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029654:	e8 cd ff ff ff       	call   c0029626 <SATABus::~SATABus()>
c0029659:	83 c4 10             	add    esp,0x10
c002965c:	83 ec 08             	sub    esp,0x8
c002965f:	68 64 01 00 00       	push   0x164
c0029664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029668:	e8 f8 96 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c002966d:	83 c4 10             	add    esp,0x10
c0029670:	83 c4 0c             	add    esp,0xc
c0029673:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029674 <ATA::~ATA()>:
c0029674:	83 ec 0c             	sub    esp,0xc
c0029677:	ba b4 d7 02 c0       	mov    edx,0xc002d7b4
c002967c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029680:	89 10                	mov    DWORD PTR [eax],edx
c0029682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029686:	83 ec 0c             	sub    esp,0xc
c0029689:	50                   	push   eax
c002968a:	e8 ad b0 fe ff       	call   c001473c <PhysicalDisk::~PhysicalDisk()>
c002968f:	83 c4 10             	add    esp,0x10
c0029692:	90                   	nop
c0029693:	83 c4 0c             	add    esp,0xc
c0029696:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029698 <ATA::~ATA()>:
c0029698:	83 ec 0c             	sub    esp,0xc
c002969b:	83 ec 0c             	sub    esp,0xc
c002969e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296a2:	e8 cd ff ff ff       	call   c0029674 <ATA::~ATA()>
c00296a7:	83 c4 10             	add    esp,0x10
c00296aa:	83 ec 08             	sub    esp,0x8
c00296ad:	68 7c 01 00 00       	push   0x17c
c00296b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296b6:	e8 aa 96 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c00296bb:	83 c4 10             	add    esp,0x10
c00296be:	83 c4 0c             	add    esp,0xc
c00296c1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00296c2 <ATAPI::~ATAPI()>:
c00296c2:	83 ec 0c             	sub    esp,0xc
c00296c5:	ba ec d7 02 c0       	mov    edx,0xc002d7ec
c00296ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296ce:	89 10                	mov    DWORD PTR [eax],edx
c00296d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296d4:	83 ec 0c             	sub    esp,0xc
c00296d7:	50                   	push   eax
c00296d8:	e8 5f b0 fe ff       	call   c001473c <PhysicalDisk::~PhysicalDisk()>
c00296dd:	83 c4 10             	add    esp,0x10
c00296e0:	90                   	nop
c00296e1:	83 c4 0c             	add    esp,0xc
c00296e4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00296e6 <ATAPI::~ATAPI()>:
c00296e6:	83 ec 0c             	sub    esp,0xc
c00296e9:	83 ec 0c             	sub    esp,0xc
c00296ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296f0:	e8 cd ff ff ff       	call   c00296c2 <ATAPI::~ATAPI()>
c00296f5:	83 c4 10             	add    esp,0x10
c00296f8:	83 ec 08             	sub    esp,0x8
c00296fb:	68 80 01 00 00       	push   0x180
c0029700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029704:	e8 5c 96 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0029709:	83 c4 10             	add    esp,0x10
c002970c:	83 c4 0c             	add    esp,0xc
c002970f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029710 <SATA::~SATA()>:
c0029710:	83 ec 0c             	sub    esp,0xc
c0029713:	ba a0 d8 02 c0       	mov    edx,0xc002d8a0
c0029718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002971c:	89 10                	mov    DWORD PTR [eax],edx
c002971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029722:	83 ec 0c             	sub    esp,0xc
c0029725:	50                   	push   eax
c0029726:	e8 11 b0 fe ff       	call   c001473c <PhysicalDisk::~PhysicalDisk()>
c002972b:	83 c4 10             	add    esp,0x10
c002972e:	90                   	nop
c002972f:	83 c4 0c             	add    esp,0xc
c0029732:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029734 <SATA::~SATA()>:
c0029734:	83 ec 0c             	sub    esp,0xc
c0029737:	83 ec 0c             	sub    esp,0xc
c002973a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002973e:	e8 cd ff ff ff       	call   c0029710 <SATA::~SATA()>
c0029743:	83 c4 10             	add    esp,0x10
c0029746:	83 ec 08             	sub    esp,0x8
c0029749:	68 7c 01 00 00       	push   0x17c
c002974e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029752:	e8 0e 96 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0029757:	83 c4 10             	add    esp,0x10
c002975a:	83 c4 0c             	add    esp,0xc
c002975d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002975e <SATAPI::~SATAPI()>:
c002975e:	83 ec 0c             	sub    esp,0xc
c0029761:	ba 7c d9 02 c0       	mov    edx,0xc002d97c
c0029766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002976a:	89 10                	mov    DWORD PTR [eax],edx
c002976c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029770:	83 ec 0c             	sub    esp,0xc
c0029773:	50                   	push   eax
c0029774:	e8 c3 af fe ff       	call   c001473c <PhysicalDisk::~PhysicalDisk()>
c0029779:	83 c4 10             	add    esp,0x10
c002977c:	90                   	nop
c002977d:	83 c4 0c             	add    esp,0xc
c0029780:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029782 <SATAPI::~SATAPI()>:
c0029782:	83 ec 0c             	sub    esp,0xc
c0029785:	83 ec 0c             	sub    esp,0xc
c0029788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002978c:	e8 cd ff ff ff       	call   c002975e <SATAPI::~SATAPI()>
c0029791:	83 c4 10             	add    esp,0x10
c0029794:	83 ec 08             	sub    esp,0x8
c0029797:	68 80 01 00 00       	push   0x180
c002979c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297a0:	e8 c0 95 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c00297a5:	83 c4 10             	add    esp,0x10
c00297a8:	83 c4 0c             	add    esp,0xc
c00297ab:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00297ac <AVX::~AVX()>:
c00297ac:	83 ec 0c             	sub    esp,0xc
c00297af:	ba bc d9 02 c0       	mov    edx,0xc002d9bc
c00297b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b8:	89 10                	mov    DWORD PTR [eax],edx
c00297ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297be:	83 ec 0c             	sub    esp,0xc
c00297c1:	50                   	push   eax
c00297c2:	e8 f9 af fe ff       	call   c00147c0 <FPU::~FPU()>
c00297c7:	83 c4 10             	add    esp,0x10
c00297ca:	90                   	nop
c00297cb:	83 c4 0c             	add    esp,0xc
c00297ce:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00297d0 <AVX::~AVX()>:
c00297d0:	83 ec 0c             	sub    esp,0xc
c00297d3:	83 ec 0c             	sub    esp,0xc
c00297d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297da:	e8 cd ff ff ff       	call   c00297ac <AVX::~AVX()>
c00297df:	83 c4 10             	add    esp,0x10
c00297e2:	83 ec 08             	sub    esp,0x8
c00297e5:	68 58 01 00 00       	push   0x158
c00297ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297ee:	e8 72 95 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c00297f3:	83 c4 10             	add    esp,0x10
c00297f6:	83 c4 0c             	add    esp,0xc
c00297f9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00297fa <MMX::~MMX()>:
c00297fa:	83 ec 0c             	sub    esp,0xc
c00297fd:	ba fc d9 02 c0       	mov    edx,0xc002d9fc
c0029802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029806:	89 10                	mov    DWORD PTR [eax],edx
c0029808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002980c:	83 ec 0c             	sub    esp,0xc
c002980f:	50                   	push   eax
c0029810:	e8 ab af fe ff       	call   c00147c0 <FPU::~FPU()>
c0029815:	83 c4 10             	add    esp,0x10
c0029818:	90                   	nop
c0029819:	83 c4 0c             	add    esp,0xc
c002981c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002981e <MMX::~MMX()>:
c002981e:	83 ec 0c             	sub    esp,0xc
c0029821:	83 ec 0c             	sub    esp,0xc
c0029824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029828:	e8 cd ff ff ff       	call   c00297fa <MMX::~MMX()>
c002982d:	83 c4 10             	add    esp,0x10
c0029830:	83 ec 08             	sub    esp,0x8
c0029833:	68 58 01 00 00       	push   0x158
c0029838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002983c:	e8 24 95 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0029841:	83 c4 10             	add    esp,0x10
c0029844:	83 c4 0c             	add    esp,0xc
c0029847:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029848 <SSE::~SSE()>:
c0029848:	83 ec 0c             	sub    esp,0xc
c002984b:	ba 3c da 02 c0       	mov    edx,0xc002da3c
c0029850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029854:	89 10                	mov    DWORD PTR [eax],edx
c0029856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002985a:	83 ec 0c             	sub    esp,0xc
c002985d:	50                   	push   eax
c002985e:	e8 5d af fe ff       	call   c00147c0 <FPU::~FPU()>
c0029863:	83 c4 10             	add    esp,0x10
c0029866:	90                   	nop
c0029867:	83 c4 0c             	add    esp,0xc
c002986a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002986c <SSE::~SSE()>:
c002986c:	83 ec 0c             	sub    esp,0xc
c002986f:	83 ec 0c             	sub    esp,0xc
c0029872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029876:	e8 cd ff ff ff       	call   c0029848 <SSE::~SSE()>
c002987b:	83 c4 10             	add    esp,0x10
c002987e:	83 ec 08             	sub    esp,0x8
c0029881:	68 58 01 00 00       	push   0x158
c0029886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002988a:	e8 d6 94 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c002988f:	83 c4 10             	add    esp,0x10
c0029892:	83 c4 0c             	add    esp,0xc
c0029895:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029896 <x87::~x87()>:
c0029896:	83 ec 0c             	sub    esp,0xc
c0029899:	ba 7c da 02 c0       	mov    edx,0xc002da7c
c002989e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298a2:	89 10                	mov    DWORD PTR [eax],edx
c00298a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298a8:	83 ec 0c             	sub    esp,0xc
c00298ab:	50                   	push   eax
c00298ac:	e8 0f af fe ff       	call   c00147c0 <FPU::~FPU()>
c00298b1:	83 c4 10             	add    esp,0x10
c00298b4:	90                   	nop
c00298b5:	83 c4 0c             	add    esp,0xc
c00298b8:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00298ba <x87::~x87()>:
c00298ba:	83 ec 0c             	sub    esp,0xc
c00298bd:	83 ec 0c             	sub    esp,0xc
c00298c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298c4:	e8 cd ff ff ff       	call   c0029896 <x87::~x87()>
c00298c9:	83 c4 10             	add    esp,0x10
c00298cc:	83 ec 08             	sub    esp,0x8
c00298cf:	68 58 01 00 00       	push   0x158
c00298d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298d8:	e8 88 94 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c00298dd:	83 c4 10             	add    esp,0x10
c00298e0:	83 c4 0c             	add    esp,0xc
c00298e3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00298e4 <IOAPIC::~IOAPIC()>:
c00298e4:	83 ec 0c             	sub    esp,0xc
c00298e7:	ba d4 db 02 c0       	mov    edx,0xc002dbd4
c00298ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298f0:	89 10                	mov    DWORD PTR [eax],edx
c00298f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298f6:	83 ec 0c             	sub    esp,0xc
c00298f9:	50                   	push   eax
c00298fa:	e8 4d a8 fe ff       	call   c001414c <Device::~Device()>
c00298ff:	83 c4 10             	add    esp,0x10
c0029902:	90                   	nop
c0029903:	83 c4 0c             	add    esp,0xc
c0029906:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029908 <IOAPIC::~IOAPIC()>:
c0029908:	83 ec 0c             	sub    esp,0xc
c002990b:	83 ec 0c             	sub    esp,0xc
c002990e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029912:	e8 cd ff ff ff       	call   c00298e4 <IOAPIC::~IOAPIC()>
c0029917:	83 c4 10             	add    esp,0x10
c002991a:	83 ec 08             	sub    esp,0x8
c002991d:	68 68 01 00 00       	push   0x168
c0029922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029926:	e8 3a 94 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c002992b:	83 c4 10             	add    esp,0x10
c002992e:	83 c4 0c             	add    esp,0xc
c0029931:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029932 <APIC::~APIC()>:
c0029932:	83 ec 0c             	sub    esp,0xc
c0029935:	ba 8c db 02 c0       	mov    edx,0xc002db8c
c002993a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002993e:	89 10                	mov    DWORD PTR [eax],edx
c0029940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029944:	83 ec 0c             	sub    esp,0xc
c0029947:	50                   	push   eax
c0029948:	e8 3d b3 fe ff       	call   c0014c8a <InterruptController::~InterruptController()>
c002994d:	83 c4 10             	add    esp,0x10
c0029950:	90                   	nop
c0029951:	83 c4 0c             	add    esp,0xc
c0029954:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029956 <APIC::~APIC()>:
c0029956:	83 ec 0c             	sub    esp,0xc
c0029959:	83 ec 0c             	sub    esp,0xc
c002995c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029960:	e8 cd ff ff ff       	call   c0029932 <APIC::~APIC()>
c0029965:	83 c4 10             	add    esp,0x10
c0029968:	83 ec 08             	sub    esp,0x8
c002996b:	68 58 21 00 00       	push   0x2158
c0029970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029974:	e8 ec 93 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0029979:	83 c4 10             	add    esp,0x10
c002997c:	83 c4 0c             	add    esp,0xc
c002997f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029980 <PIC::~PIC()>:
c0029980:	83 ec 0c             	sub    esp,0xc
c0029983:	ba 24 dc 02 c0       	mov    edx,0xc002dc24
c0029988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002998c:	89 10                	mov    DWORD PTR [eax],edx
c002998e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029992:	83 ec 0c             	sub    esp,0xc
c0029995:	50                   	push   eax
c0029996:	e8 ef b2 fe ff       	call   c0014c8a <InterruptController::~InterruptController()>
c002999b:	83 c4 10             	add    esp,0x10
c002999e:	90                   	nop
c002999f:	83 c4 0c             	add    esp,0xc
c00299a2:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00299a4 <PIC::~PIC()>:
c00299a4:	83 ec 0c             	sub    esp,0xc
c00299a7:	83 ec 0c             	sub    esp,0xc
c00299aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299ae:	e8 cd ff ff ff       	call   c0029980 <PIC::~PIC()>
c00299b3:	83 c4 10             	add    esp,0x10
c00299b6:	83 ec 08             	sub    esp,0x8
c00299b9:	68 58 21 00 00       	push   0x2158
c00299be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299c2:	e8 9e 93 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c00299c7:	83 c4 10             	add    esp,0x10
c00299ca:	83 c4 0c             	add    esp,0xc
c00299cd:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00299ce <APICTimer::~APICTimer()>:
c00299ce:	83 ec 0c             	sub    esp,0xc
c00299d1:	ba 78 dc 02 c0       	mov    edx,0xc002dc78
c00299d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299da:	89 10                	mov    DWORD PTR [eax],edx
c00299dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299e0:	83 ec 0c             	sub    esp,0xc
c00299e3:	50                   	push   eax
c00299e4:	e8 57 d3 fe ff       	call   c0016d40 <Timer::~Timer()>
c00299e9:	83 c4 10             	add    esp,0x10
c00299ec:	90                   	nop
c00299ed:	83 c4 0c             	add    esp,0xc
c00299f0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00299f2 <APICTimer::~APICTimer()>:
c00299f2:	83 ec 0c             	sub    esp,0xc
c00299f5:	83 ec 0c             	sub    esp,0xc
c00299f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299fc:	e8 cd ff ff ff       	call   c00299ce <APICTimer::~APICTimer()>
c0029a01:	83 c4 10             	add    esp,0x10
c0029a04:	83 ec 08             	sub    esp,0x8
c0029a07:	68 60 01 00 00       	push   0x160
c0029a0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a10:	e8 50 93 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0029a15:	83 c4 10             	add    esp,0x10
c0029a18:	83 c4 0c             	add    esp,0xc
c0029a1b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029a1c <PIT::~PIT()>:
c0029a1c:	83 ec 0c             	sub    esp,0xc
c0029a1f:	ba c8 dc 02 c0       	mov    edx,0xc002dcc8
c0029a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a28:	89 10                	mov    DWORD PTR [eax],edx
c0029a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a2e:	83 ec 0c             	sub    esp,0xc
c0029a31:	50                   	push   eax
c0029a32:	e8 09 d3 fe ff       	call   c0016d40 <Timer::~Timer()>
c0029a37:	83 c4 10             	add    esp,0x10
c0029a3a:	90                   	nop
c0029a3b:	83 c4 0c             	add    esp,0xc
c0029a3e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029a40 <PIT::~PIT()>:
c0029a40:	83 ec 0c             	sub    esp,0xc
c0029a43:	83 ec 0c             	sub    esp,0xc
c0029a46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a4a:	e8 cd ff ff ff       	call   c0029a1c <PIT::~PIT()>
c0029a4f:	83 c4 10             	add    esp,0x10
c0029a52:	83 ec 08             	sub    esp,0x8
c0029a55:	68 5c 01 00 00       	push   0x15c
c0029a5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a5e:	e8 02 93 fe ff       	call   c0012d65 <operator delete(void*, unsigned long)>
c0029a63:	83 c4 10             	add    esp,0x10
c0029a66:	83 c4 0c             	add    esp,0xc
c0029a69:	c3                   	ret    
