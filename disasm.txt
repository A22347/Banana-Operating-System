
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e3 fb 00 00       	call   c000fc03 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 83 86 02 00       	call   c00286a8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 5e 92 02 c0       	mov    ebx,0xc002925e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 6c 92 02 c0    	cmp    ebx,0xc002926c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 d9 02 c0       	mov    eax,0xc002d9f8
c0000049:	3d f8 d9 02 c0       	cmp    eax,0xc002d9f8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 d9 02 c0       	push   0xc002d9f8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 d9 02 c0       	mov    eax,0xc002d9f8
c0000075:	2d f8 d9 02 c0       	sub    eax,0xc002d9f8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 d9 02 c0       	push   0xc002d9f8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e028,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 74 92 02 c0       	mov    ebx,0xc0029274
c00000bb:	81 eb 70 92 02 c0    	sub    ebx,0xc0029270
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 70 92 02 c0       	mov    esi,0xc0029270
c00000ca:	a1 2c e0 02 c0       	mov    eax,ds:0xc002e02c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c e0 02 c0       	mov    ds:0xc002e02c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c e0 02 c0       	mov    eax,ds:0xc002e02c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 d9 02 c0       	push   0xc002d9f8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e028,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 e0 02 c0       	push   0xc002e030
c000012c:	68 f8 d9 02 c0       	push   0xc002d9f8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 09 d6 01 00       	call   c001d9ac <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 02 29 01 00       	call   c0012cbd <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 e7 d5 01 00       	call   c001d9ac <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 35 da 01 00       	call   c001de19 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 1d e0 01 00       	call   c001e40a <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 70 e4 02 c0 	lgdtd  ds:0xc002e470
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 e0 45 01 00       	call   c0014bc1 <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>
c0000645:	66 90                	xchg   ax,ax
c0000647:	90                   	nop

c0000648 <memcmp>:
c0000648:	56                   	push   esi
c0000649:	53                   	push   ebx
c000064a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000064e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000652:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000656:	85 f6                	test   esi,esi
c0000658:	74 1d                	je     c0000677 <memcmp+0x2f>
c000065a:	8a 08                	mov    cl,BYTE PTR [eax]
c000065c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000065f:	38 cb                	cmp    bl,cl
c0000661:	75 19                	jne    c000067c <memcmp+0x34>
c0000663:	01 c6                	add    esi,eax
c0000665:	eb 0a                	jmp    c0000671 <memcmp+0x29>
c0000667:	90                   	nop
c0000668:	8a 08                	mov    cl,BYTE PTR [eax]
c000066a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000066d:	38 d9                	cmp    cl,bl
c000066f:	75 0b                	jne    c000067c <memcmp+0x34>
c0000671:	40                   	inc    eax
c0000672:	42                   	inc    edx
c0000673:	39 f0                	cmp    eax,esi
c0000675:	75 f1                	jne    c0000668 <memcmp+0x20>
c0000677:	31 c0                	xor    eax,eax
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    
c000067c:	0f b6 c1             	movzx  eax,cl
c000067f:	29 d8                	sub    eax,ebx
c0000681:	5b                   	pop    ebx
c0000682:	5e                   	pop    esi
c0000683:	c3                   	ret    

c0000684 <memmove>:
c0000684:	55                   	push   ebp
c0000685:	57                   	push   edi
c0000686:	56                   	push   esi
c0000687:	53                   	push   ebx
c0000688:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000068c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000690:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000694:	39 dd                	cmp    ebp,ebx
c0000696:	0f 83 80 00 00 00    	jae    c000071c <memmove+0x98>
c000069c:	85 d2                	test   edx,edx
c000069e:	74 74                	je     c0000714 <memmove+0x90>
c00006a0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006a6:	39 cd                	cmp    ebp,ecx
c00006a8:	0f 93 c1             	setae  cl
c00006ab:	39 f3                	cmp    ebx,esi
c00006ad:	0f 93 c0             	setae  al
c00006b0:	89 c6                	mov    esi,eax
c00006b2:	09 ce                	or     esi,ecx
c00006b4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006b7:	89 f0                	mov    eax,esi
c00006b9:	83 f9 0c             	cmp    ecx,0xc
c00006bc:	0f 97 c1             	seta   cl
c00006bf:	84 c8                	test   al,cl
c00006c1:	74 75                	je     c0000738 <memmove+0xb4>
c00006c3:	89 e9                	mov    ecx,ebp
c00006c5:	09 d9                	or     ecx,ebx
c00006c7:	83 e1 03             	and    ecx,0x3
c00006ca:	75 6c                	jne    c0000738 <memmove+0xb4>
c00006cc:	89 d7                	mov    edi,edx
c00006ce:	89 d9                	mov    ecx,ebx
c00006d0:	83 e7 fc             	and    edi,0xfffffffc
c00006d3:	89 ee                	mov    esi,ebp
c00006d5:	01 df                	add    edi,ebx
c00006d7:	90                   	nop
c00006d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006da:	83 c6 04             	add    esi,0x4
c00006dd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e0:	83 c1 04             	add    ecx,0x4
c00006e3:	39 f9                	cmp    ecx,edi
c00006e5:	75 f1                	jne    c00006d8 <memmove+0x54>
c00006e7:	89 d1                	mov    ecx,edx
c00006e9:	89 d7                	mov    edi,edx
c00006eb:	83 e1 fc             	and    ecx,0xfffffffc
c00006ee:	29 cf                	sub    edi,ecx
c00006f0:	01 cb                	add    ebx,ecx
c00006f2:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006f6:	39 ca                	cmp    edx,ecx
c00006f8:	74 1a                	je     c0000714 <memmove+0x90>
c00006fa:	8a 03                	mov    al,BYTE PTR [ebx]
c00006fc:	83 ff 01             	cmp    edi,0x1
c00006ff:	88 06                	mov    BYTE PTR [esi],al
c0000701:	74 11                	je     c0000714 <memmove+0x90>
c0000703:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000706:	83 ff 02             	cmp    edi,0x2
c0000709:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000070c:	74 06                	je     c0000714 <memmove+0x90>
c000070e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000711:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000714:	5b                   	pop    ebx
c0000715:	89 e8                	mov    eax,ebp
c0000717:	5e                   	pop    esi
c0000718:	5f                   	pop    edi
c0000719:	5d                   	pop    ebp
c000071a:	c3                   	ret    
c000071b:	90                   	nop
c000071c:	76 f6                	jbe    c0000714 <memmove+0x90>
c000071e:	85 d2                	test   edx,edx
c0000720:	74 f2                	je     c0000714 <memmove+0x90>
c0000722:	4b                   	dec    ebx
c0000723:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000726:	66 90                	xchg   ax,ax
c0000728:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000072e:	4a                   	dec    edx
c000072f:	75 f7                	jne    c0000728 <memmove+0xa4>
c0000731:	5b                   	pop    ebx
c0000732:	89 e8                	mov    eax,ebp
c0000734:	5e                   	pop    esi
c0000735:	5f                   	pop    edi
c0000736:	5d                   	pop    ebp
c0000737:	c3                   	ret    
c0000738:	01 ea                	add    edx,ebp
c000073a:	89 e9                	mov    ecx,ebp
c000073c:	8a 03                	mov    al,BYTE PTR [ebx]
c000073e:	41                   	inc    ecx
c000073f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000742:	43                   	inc    ebx
c0000743:	39 d1                	cmp    ecx,edx
c0000745:	75 f5                	jne    c000073c <memmove+0xb8>
c0000747:	eb cb                	jmp    c0000714 <memmove+0x90>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]

c000074c <memcpy>:
c000074c:	57                   	push   edi
c000074d:	56                   	push   esi
c000074e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000752:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000756:	a8 03                	test   al,0x3
c0000758:	74 12                	je     c000076c <memcpy+0x20>
c000075a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000075e:	89 c1                	mov    ecx,eax
c0000760:	fc                   	cld    
c0000761:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000763:	29 c7                	sub    edi,eax
c0000765:	5e                   	pop    esi
c0000766:	89 f8                	mov    eax,edi
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax
c000076c:	89 c1                	mov    ecx,eax
c000076e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000772:	c1 e9 02             	shr    ecx,0x2
c0000775:	fc                   	cld    
c0000776:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000778:	29 c7                	sub    edi,eax
c000077a:	5e                   	pop    esi
c000077b:	89 f8                	mov    eax,edi
c000077d:	5f                   	pop    edi
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <memset>:
c0000780:	57                   	push   edi
c0000781:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000785:	85 c9                	test   ecx,ecx
c0000787:	74 0b                	je     c0000794 <memset+0x14>
c0000789:	fc                   	cld    
c000078a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000792:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000798:	5f                   	pop    edi
c0000799:	c3                   	ret    
c000079a:	66 90                	xchg   ax,ax

c000079c <strlen>:
c000079c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00007a0:	31 c0                	xor    eax,eax
c00007a2:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00007a5:	74 09                	je     c00007b0 <strlen+0x14>
c00007a7:	90                   	nop
c00007a8:	40                   	inc    eax
c00007a9:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007ad:	75 f9                	jne    c00007a8 <strlen+0xc>
c00007af:	c3                   	ret    
c00007b0:	c3                   	ret    
c00007b1:	8d 76 00             	lea    esi,[esi+0x0]

c00007b4 <strpbrk>:
c00007b4:	57                   	push   edi
c00007b5:	56                   	push   esi
c00007b6:	53                   	push   ebx
c00007b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007bb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007bf:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007c1:	84 db                	test   bl,bl
c00007c3:	74 21                	je     c00007e6 <strpbrk+0x32>
c00007c5:	8a 07                	mov    al,BYTE PTR [edi]
c00007c7:	84 c0                	test   al,al
c00007c9:	74 14                	je     c00007df <strpbrk+0x2b>
c00007cb:	38 d8                	cmp    al,bl
c00007cd:	74 19                	je     c00007e8 <strpbrk+0x34>
c00007cf:	89 fa                	mov    edx,edi
c00007d1:	eb 05                	jmp    c00007d8 <strpbrk+0x24>
c00007d3:	90                   	nop
c00007d4:	38 d9                	cmp    cl,bl
c00007d6:	74 10                	je     c00007e8 <strpbrk+0x34>
c00007d8:	42                   	inc    edx
c00007d9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007db:	84 c9                	test   cl,cl
c00007dd:	75 f5                	jne    c00007d4 <strpbrk+0x20>
c00007df:	46                   	inc    esi
c00007e0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007e2:	84 db                	test   bl,bl
c00007e4:	75 e1                	jne    c00007c7 <strpbrk+0x13>
c00007e6:	31 f6                	xor    esi,esi
c00007e8:	89 f0                	mov    eax,esi
c00007ea:	5b                   	pop    ebx
c00007eb:	5e                   	pop    esi
c00007ec:	5f                   	pop    edi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strtok>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007fa:	85 db                	test   ebx,ebx
c00007fc:	75 07                	jne    c0000805 <strtok+0x15>
c00007fe:	eb 2c                	jmp    c000082c <strtok+0x3c>
c0000800:	43                   	inc    ebx
c0000801:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000805:	56                   	push   esi
c0000806:	53                   	push   ebx
c0000807:	e8 a8 ff ff ff       	call   c00007b4 <strpbrk>
c000080c:	5a                   	pop    edx
c000080d:	a3 48 e0 02 c0       	mov    ds:0xc002e048,eax
c0000812:	59                   	pop    ecx
c0000813:	39 d8                	cmp    eax,ebx
c0000815:	74 e9                	je     c0000800 <strtok+0x10>
c0000817:	85 c0                	test   eax,eax
c0000819:	74 1b                	je     c0000836 <strtok+0x46>
c000081b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000081e:	8d 50 01             	lea    edx,[eax+0x1]
c0000821:	89 d8                	mov    eax,ebx
c0000823:	89 15 48 e0 02 c0    	mov    DWORD PTR ds:0xc002e048,edx
c0000829:	5b                   	pop    ebx
c000082a:	5e                   	pop    esi
c000082b:	c3                   	ret    
c000082c:	8b 1d 48 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e048
c0000832:	85 db                	test   ebx,ebx
c0000834:	75 cf                	jne    c0000805 <strtok+0x15>
c0000836:	31 c0                	xor    eax,eax
c0000838:	5b                   	pop    ebx
c0000839:	5e                   	pop    esi
c000083a:	c3                   	ret    
c000083b:	90                   	nop

c000083c <strcpy>:
c000083c:	53                   	push   ebx
c000083d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000845:	89 c3                	mov    ebx,eax
c0000847:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000849:	84 d2                	test   dl,dl
c000084b:	74 0d                	je     c000085a <strcpy+0x1e>
c000084d:	8d 76 00             	lea    esi,[esi+0x0]
c0000850:	88 13                	mov    BYTE PTR [ebx],dl
c0000852:	41                   	inc    ecx
c0000853:	43                   	inc    ebx
c0000854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000856:	84 d2                	test   dl,dl
c0000858:	75 f6                	jne    c0000850 <strcpy+0x14>
c000085a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000085d:	5b                   	pop    ebx
c000085e:	c3                   	ret    
c000085f:	90                   	nop

c0000860 <strncpy>:
c0000860:	55                   	push   ebp
c0000861:	57                   	push   edi
c0000862:	56                   	push   esi
c0000863:	53                   	push   ebx
c0000864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000868:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000086c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000870:	85 c0                	test   eax,eax
c0000872:	74 39                	je     c00008ad <strncpy+0x4d>
c0000874:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000876:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000879:	8d 55 01             	lea    edx,[ebp+0x1]
c000087c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000087f:	84 db                	test   bl,bl
c0000881:	74 31                	je     c00008b4 <strncpy+0x54>
c0000883:	85 c9                	test   ecx,ecx
c0000885:	74 26                	je     c00008ad <strncpy+0x4d>
c0000887:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000088a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000088d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000890:	8d 46 02             	lea    eax,[esi+0x2]
c0000893:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000896:	84 db                	test   bl,bl
c0000898:	75 0f                	jne    c00008a9 <strncpy+0x49>
c000089a:	eb 18                	jmp    c00008b4 <strncpy+0x54>
c000089c:	40                   	inc    eax
c000089d:	42                   	inc    edx
c000089e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00008a1:	49                   	dec    ecx
c00008a2:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008a5:	84 db                	test   bl,bl
c00008a7:	74 0b                	je     c00008b4 <strncpy+0x54>
c00008a9:	85 c9                	test   ecx,ecx
c00008ab:	75 ef                	jne    c000089c <strncpy+0x3c>
c00008ad:	5b                   	pop    ebx
c00008ae:	89 e8                	mov    eax,ebp
c00008b0:	5e                   	pop    esi
c00008b1:	5f                   	pop    edi
c00008b2:	5d                   	pop    ebp
c00008b3:	c3                   	ret    
c00008b4:	85 c9                	test   ecx,ecx
c00008b6:	74 f5                	je     c00008ad <strncpy+0x4d>
c00008b8:	fc                   	cld    
c00008b9:	31 c0                	xor    eax,eax
c00008bb:	89 d7                	mov    edi,edx
c00008bd:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008bf:	89 e8                	mov    eax,ebp
c00008c1:	5b                   	pop    ebx
c00008c2:	5e                   	pop    esi
c00008c3:	5f                   	pop    edi
c00008c4:	5d                   	pop    ebp
c00008c5:	c3                   	ret    
c00008c6:	66 90                	xchg   ax,ax

c00008c8 <strcmp>:
c00008c8:	56                   	push   esi
c00008c9:	53                   	push   ebx
c00008ca:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008d4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008d7:	38 d1                	cmp    cl,dl
c00008d9:	75 1d                	jne    c00008f8 <strcmp+0x30>
c00008db:	84 c9                	test   cl,cl
c00008dd:	74 21                	je     c0000900 <strcmp+0x38>
c00008df:	b8 01 00 00 00       	mov    eax,0x1
c00008e4:	eb 07                	jmp    c00008ed <strcmp+0x25>
c00008e6:	66 90                	xchg   ax,ax
c00008e8:	40                   	inc    eax
c00008e9:	84 d2                	test   dl,dl
c00008eb:	74 13                	je     c0000900 <strcmp+0x38>
c00008ed:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008f0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008f4:	38 ca                	cmp    dl,cl
c00008f6:	74 f0                	je     c00008e8 <strcmp+0x20>
c00008f8:	0f b6 c2             	movzx  eax,dl
c00008fb:	5b                   	pop    ebx
c00008fc:	29 c8                	sub    eax,ecx
c00008fe:	5e                   	pop    esi
c00008ff:	c3                   	ret    
c0000900:	31 c0                	xor    eax,eax
c0000902:	5b                   	pop    ebx
c0000903:	5e                   	pop    esi
c0000904:	c3                   	ret    
c0000905:	8d 76 00             	lea    esi,[esi+0x0]

c0000908 <strchr>:
c0000908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000090c:	8a 10                	mov    dl,BYTE PTR [eax]
c000090e:	84 d2                	test   dl,dl
c0000910:	74 15                	je     c0000927 <strchr+0x1f>
c0000912:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000916:	38 ca                	cmp    dl,cl
c0000918:	75 06                	jne    c0000920 <strchr+0x18>
c000091a:	eb 0e                	jmp    c000092a <strchr+0x22>
c000091c:	38 ca                	cmp    dl,cl
c000091e:	74 09                	je     c0000929 <strchr+0x21>
c0000920:	40                   	inc    eax
c0000921:	8a 10                	mov    dl,BYTE PTR [eax]
c0000923:	84 d2                	test   dl,dl
c0000925:	75 f5                	jne    c000091c <strchr+0x14>
c0000927:	31 c0                	xor    eax,eax
c0000929:	c3                   	ret    
c000092a:	c3                   	ret    
c000092b:	90                   	nop

c000092c <strncmp>:
c000092c:	57                   	push   edi
c000092d:	56                   	push   esi
c000092e:	53                   	push   ebx
c000092f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000933:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000937:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000093b:	85 ff                	test   edi,edi
c000093d:	74 28                	je     c0000967 <strncmp+0x3b>
c000093f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000941:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000944:	38 d1                	cmp    cl,dl
c0000946:	75 28                	jne    c0000970 <strncmp+0x44>
c0000948:	8d 46 01             	lea    eax,[esi+0x1]
c000094b:	84 c9                	test   cl,cl
c000094d:	74 18                	je     c0000967 <strncmp+0x3b>
c000094f:	01 fe                	add    esi,edi
c0000951:	eb 0f                	jmp    c0000962 <strncmp+0x36>
c0000953:	90                   	nop
c0000954:	8a 10                	mov    dl,BYTE PTR [eax]
c0000956:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000959:	38 ca                	cmp    dl,cl
c000095b:	75 13                	jne    c0000970 <strncmp+0x44>
c000095d:	40                   	inc    eax
c000095e:	84 d2                	test   dl,dl
c0000960:	74 05                	je     c0000967 <strncmp+0x3b>
c0000962:	43                   	inc    ebx
c0000963:	39 c6                	cmp    esi,eax
c0000965:	75 ed                	jne    c0000954 <strncmp+0x28>
c0000967:	5b                   	pop    ebx
c0000968:	31 c0                	xor    eax,eax
c000096a:	5e                   	pop    esi
c000096b:	5f                   	pop    edi
c000096c:	c3                   	ret    
c000096d:	8d 76 00             	lea    esi,[esi+0x0]
c0000970:	5b                   	pop    ebx
c0000971:	0f b6 c2             	movzx  eax,dl
c0000974:	5e                   	pop    esi
c0000975:	29 c8                	sub    eax,ecx
c0000977:	5f                   	pop    edi
c0000978:	c3                   	ret    
c0000979:	8d 76 00             	lea    esi,[esi+0x0]

c000097c <strcat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000982:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000986:	89 c3                	mov    ebx,eax
c0000988:	eb 04                	jmp    c000098e <strcat+0x12>
c000098a:	66 90                	xchg   ax,ax
c000098c:	89 d3                	mov    ebx,edx
c000098e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f5                	jne    c000098c <strcat+0x10>
c0000997:	31 d2                	xor    edx,edx
c0000999:	8d 76 00             	lea    esi,[esi+0x0]
c000099c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000099f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00009a2:	42                   	inc    edx
c00009a3:	84 c9                	test   cl,cl
c00009a5:	75 f5                	jne    c000099c <strcat+0x20>
c00009a7:	5b                   	pop    ebx
c00009a8:	5e                   	pop    esi
c00009a9:	c3                   	ret    
c00009aa:	66 90                	xchg   ax,ax

c00009ac <strncat>:
c00009ac:	56                   	push   esi
c00009ad:	53                   	push   ebx
c00009ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009ba:	85 f6                	test   esi,esi
c00009bc:	74 1e                	je     c00009dc <strncat+0x30>
c00009be:	89 c2                	mov    edx,eax
c00009c0:	42                   	inc    edx
c00009c1:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009c5:	75 f9                	jne    c00009c0 <strncat+0x14>
c00009c7:	01 ce                	add    esi,ecx
c00009c9:	eb 06                	jmp    c00009d1 <strncat+0x25>
c00009cb:	90                   	nop
c00009cc:	39 f1                	cmp    ecx,esi
c00009ce:	74 10                	je     c00009e0 <strncat+0x34>
c00009d0:	42                   	inc    edx
c00009d1:	41                   	inc    ecx
c00009d2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009d5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d8:	84 db                	test   bl,bl
c00009da:	75 f0                	jne    c00009cc <strncat+0x20>
c00009dc:	5b                   	pop    ebx
c00009dd:	5e                   	pop    esi
c00009de:	c3                   	ret    
c00009df:	90                   	nop
c00009e0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009e3:	5b                   	pop    ebx
c00009e4:	5e                   	pop    esi
c00009e5:	c3                   	ret    
c00009e6:	66 90                	xchg   ax,ax

c00009e8 <strstr>:
c00009e8:	57                   	push   edi
c00009e9:	56                   	push   esi
c00009ea:	53                   	push   ebx
c00009eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009f3:	57                   	push   edi
c00009f4:	e8 a3 fd ff ff       	call   c000079c <strlen>
c00009f9:	59                   	pop    ecx
c00009fa:	85 c0                	test   eax,eax
c00009fc:	74 2a                	je     c0000a28 <strstr+0x40>
c00009fe:	89 c6                	mov    esi,eax
c0000a00:	eb 12                	jmp    c0000a14 <strstr+0x2c>
c0000a02:	66 90                	xchg   ax,ax
c0000a04:	56                   	push   esi
c0000a05:	57                   	push   edi
c0000a06:	53                   	push   ebx
c0000a07:	e8 3c fc ff ff       	call   c0000648 <memcmp>
c0000a0c:	83 c4 0c             	add    esp,0xc
c0000a0f:	85 c0                	test   eax,eax
c0000a11:	74 15                	je     c0000a28 <strstr+0x40>
c0000a13:	43                   	inc    ebx
c0000a14:	53                   	push   ebx
c0000a15:	e8 82 fd ff ff       	call   c000079c <strlen>
c0000a1a:	5a                   	pop    edx
c0000a1b:	39 f0                	cmp    eax,esi
c0000a1d:	73 e5                	jae    c0000a04 <strstr+0x1c>
c0000a1f:	5b                   	pop    ebx
c0000a20:	31 c0                	xor    eax,eax
c0000a22:	5e                   	pop    esi
c0000a23:	5f                   	pop    edi
c0000a24:	c3                   	ret    
c0000a25:	8d 76 00             	lea    esi,[esi+0x0]
c0000a28:	89 d8                	mov    eax,ebx
c0000a2a:	5b                   	pop    ebx
c0000a2b:	5e                   	pop    esi
c0000a2c:	5f                   	pop    edi
c0000a2d:	c3                   	ret    
c0000a2e:	66 90                	xchg   ax,ax

c0000a30 <toupper>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 80 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6d80],0x2
c0000a3e:	74 03                	je     c0000a43 <toupper+0x13>
c0000a40:	83 e8 20             	sub    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <tolower>:
c0000a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a48:	0f b6 d0             	movzx  edx,al
c0000a4b:	f6 82 80 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d80],0x1
c0000a52:	74 03                	je     c0000a57 <tolower+0x13>
c0000a54:	83 c0 20             	add    eax,0x20
c0000a57:	c3                   	ret    

c0000a58 <simple_strtoul>:
c0000a58:	55                   	push   ebp
c0000a59:	57                   	push   edi
c0000a5a:	56                   	push   esi
c0000a5b:	53                   	push   ebx
c0000a5c:	83 ec 08             	sub    esp,0x8
c0000a5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a63:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a67:	90                   	nop
c0000a68:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a6b:	f6 82 80 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6d80],0x8
c0000a72:	75 05                	jne    c0000a79 <simple_strtoul+0x21>
c0000a74:	80 fa 09             	cmp    dl,0x9
c0000a77:	75 03                	jne    c0000a7c <simple_strtoul+0x24>
c0000a79:	41                   	inc    ecx
c0000a7a:	eb ec                	jmp    c0000a68 <simple_strtoul+0x10>
c0000a7c:	80 fa 2d             	cmp    dl,0x2d
c0000a7f:	0f 84 1b 01 00 00    	je     c0000ba0 <simple_strtoul+0x148>
c0000a85:	80 fa 2b             	cmp    dl,0x2b
c0000a88:	0f 84 c2 00 00 00    	je     c0000b50 <simple_strtoul+0xf8>
c0000a8e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a96:	85 f6                	test   esi,esi
c0000a98:	0f 85 c3 00 00 00    	jne    c0000b61 <simple_strtoul+0x109>
c0000a9e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aa0:	80 fa 30             	cmp    dl,0x30
c0000aa3:	0f 84 47 01 00 00    	je     c0000bf0 <simple_strtoul+0x198>
c0000aa9:	be 0a 00 00 00       	mov    esi,0xa
c0000aae:	84 d2                	test   dl,dl
c0000ab0:	0f 84 6f 01 00 00    	je     c0000c25 <simple_strtoul+0x1cd>
c0000ab6:	31 ed                	xor    ebp,ebp
c0000ab8:	31 ff                	xor    edi,edi
c0000aba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ac1:	eb 2b                	jmp    c0000aee <simple_strtoul+0x96>
c0000ac3:	90                   	nop
c0000ac4:	83 eb 30             	sub    ebx,0x30
c0000ac7:	39 f3                	cmp    ebx,esi
c0000ac9:	73 4d                	jae    c0000b18 <simple_strtoul+0xc0>
c0000acb:	31 d2                	xor    edx,edx
c0000acd:	89 d8                	mov    eax,ebx
c0000acf:	f7 d0                	not    eax
c0000ad1:	f7 f6                	div    esi
c0000ad3:	39 f8                	cmp    eax,edi
c0000ad5:	0f 82 b1 00 00 00    	jb     c0000b8c <simple_strtoul+0x134>
c0000adb:	0f af fe             	imul   edi,esi
c0000ade:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ae5:	01 df                	add    edi,ebx
c0000ae7:	41                   	inc    ecx
c0000ae8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aea:	84 d2                	test   dl,dl
c0000aec:	74 2a                	je     c0000b18 <simple_strtoul+0xc0>
c0000aee:	0f b6 da             	movzx  ebx,dl
c0000af1:	f6 83 80 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6d80],0x4
c0000af8:	75 ca                	jne    c0000ac4 <simple_strtoul+0x6c>
c0000afa:	0f be d2             	movsx  edx,dl
c0000afd:	52                   	push   edx
c0000afe:	e8 2d ff ff ff       	call   c0000a30 <toupper>
c0000b03:	5b                   	pop    ebx
c0000b04:	0f b6 d0             	movzx  edx,al
c0000b07:	f6 82 80 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d80],0x1
c0000b0e:	74 08                	je     c0000b18 <simple_strtoul+0xc0>
c0000b10:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b13:	39 f3                	cmp    ebx,esi
c0000b15:	72 b4                	jb     c0000acb <simple_strtoul+0x73>
c0000b17:	90                   	nop
c0000b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b1c:	85 c0                	test   eax,eax
c0000b1e:	74 14                	je     c0000b34 <simple_strtoul+0xdc>
c0000b20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b23:	09 f8                	or     eax,edi
c0000b25:	75 71                	jne    c0000b98 <simple_strtoul+0x140>
c0000b27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b2f:	31 ff                	xor    edi,edi
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	90                   	nop
c0000b34:	4d                   	dec    ebp
c0000b35:	75 05                	jne    c0000b3c <simple_strtoul+0xe4>
c0000b37:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b3c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b41:	75 02                	jne    c0000b45 <simple_strtoul+0xed>
c0000b43:	f7 df                	neg    edi
c0000b45:	83 c4 08             	add    esp,0x8
c0000b48:	89 f8                	mov    eax,edi
c0000b4a:	5b                   	pop    ebx
c0000b4b:	5e                   	pop    esi
c0000b4c:	5f                   	pop    edi
c0000b4d:	5d                   	pop    ebp
c0000b4e:	c3                   	ret    
c0000b4f:	90                   	nop
c0000b50:	41                   	inc    ecx
c0000b51:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b59:	85 f6                	test   esi,esi
c0000b5b:	0f 84 3d ff ff ff    	je     c0000a9e <simple_strtoul+0x46>
c0000b61:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b64:	83 f8 22             	cmp    eax,0x22
c0000b67:	77 6a                	ja     c0000bd3 <simple_strtoul+0x17b>
c0000b69:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b6b:	83 fe 08             	cmp    esi,0x8
c0000b6e:	0f 84 a2 00 00 00    	je     c0000c16 <simple_strtoul+0x1be>
c0000b74:	83 fe 10             	cmp    esi,0x10
c0000b77:	0f 85 31 ff ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000b7d:	80 fa 30             	cmp    dl,0x30
c0000b80:	74 2c                	je     c0000bae <simple_strtoul+0x156>
c0000b82:	be 10 00 00 00       	mov    esi,0x10
c0000b87:	e9 22 ff ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000b8c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b91:	31 ff                	xor    edi,edi
c0000b93:	e9 4f ff ff ff       	jmp    c0000ae7 <simple_strtoul+0x8f>
c0000b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b9c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b9e:	eb 94                	jmp    c0000b34 <simple_strtoul+0xdc>
c0000ba0:	41                   	inc    ecx
c0000ba1:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba9:	e9 e8 fe ff ff       	jmp    c0000a96 <simple_strtoul+0x3e>
c0000bae:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bb2:	88 04 24             	mov    BYTE PTR [esp],al
c0000bb5:	50                   	push   eax
c0000bb6:	e8 89 fe ff ff       	call   c0000a44 <tolower>
c0000bbb:	5e                   	pop    esi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	0f 84 84 00 00 00    	je     c0000c49 <simple_strtoul+0x1f1>
c0000bc5:	41                   	inc    ecx
c0000bc6:	be 10 00 00 00       	mov    esi,0x10
c0000bcb:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bce:	e9 db fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000bd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bd7:	85 ff                	test   edi,edi
c0000bd9:	74 5c                	je     c0000c37 <simple_strtoul+0x1df>
c0000bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bdf:	85 c9                	test   ecx,ecx
c0000be1:	75 4e                	jne    c0000c31 <simple_strtoul+0x1d9>
c0000be3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be9:	31 ff                	xor    edi,edi
c0000beb:	e9 4c ff ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000bf0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bf4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bf7:	50                   	push   eax
c0000bf8:	e8 47 fe ff ff       	call   c0000a44 <tolower>
c0000bfd:	5d                   	pop    ebp
c0000bfe:	83 f8 78             	cmp    eax,0x78
c0000c01:	74 3b                	je     c0000c3e <simple_strtoul+0x1e6>
c0000c03:	41                   	inc    ecx
c0000c04:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000c07:	80 fa 30             	cmp    dl,0x30
c0000c0a:	74 13                	je     c0000c1f <simple_strtoul+0x1c7>
c0000c0c:	be 08 00 00 00       	mov    esi,0x8
c0000c11:	e9 98 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000c16:	80 fa 30             	cmp    dl,0x30
c0000c19:	0f 85 8f fe ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000c1f:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c22:	41                   	inc    ecx
c0000c23:	eb e7                	jmp    c0000c0c <simple_strtoul+0x1b4>
c0000c25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c29:	85 d2                	test   edx,edx
c0000c2b:	74 0a                	je     c0000c37 <simple_strtoul+0x1df>
c0000c2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c31:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c35:	89 30                	mov    DWORD PTR [eax],esi
c0000c37:	31 ff                	xor    edi,edi
c0000c39:	e9 fe fe ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000c3e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c41:	83 c1 02             	add    ecx,0x2
c0000c44:	e9 34 ff ff ff       	jmp    c0000b7d <simple_strtoul+0x125>
c0000c49:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c4c:	be 10 00 00 00       	mov    esi,0x10
c0000c51:	83 c1 02             	add    ecx,0x2
c0000c54:	e9 55 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>

c0000c59 <largebin_index>:
c0000c59:	89 c2                	mov    edx,eax
c0000c5b:	c1 ea 08             	shr    edx,0x8
c0000c5e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c64:	77 10                	ja     c0000c76 <largebin_index+0x1d>
c0000c66:	0f bd d2             	bsr    edx,edx
c0000c69:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c6c:	d3 e8                	shr    eax,cl
c0000c6e:	83 e0 03             	and    eax,0x3
c0000c71:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c75:	c3                   	ret    
c0000c76:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c7b:	c3                   	ret    

c0000c7c <malloc_init_state>:
c0000c7c:	53                   	push   ebx
c0000c7d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c80:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c86:	89 d1                	mov    ecx,edx
c0000c88:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c8b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c8e:	83 c2 08             	add    edx,0x8
c0000c91:	39 da                	cmp    edx,ebx
c0000c93:	75 f3                	jne    c0000c88 <malloc_init_state+0xc>
c0000c95:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c97:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ca1:	83 e2 03             	and    edx,0x3
c0000ca4:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cae:	83 ca 48             	or     edx,0x48
c0000cb1:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cbb:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cc5:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ccc:	89 10                	mov    DWORD PTR [eax],edx
c0000cce:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cd1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cdb:	5b                   	pop    ebx
c0000cdc:	c3                   	ret    

c0000cdd <malloc_consolidate>:
c0000cdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cdf:	85 d2                	test   edx,edx
c0000ce1:	0f 84 d8 00 00 00    	je     c0000dbf <malloc_consolidate+0xe2>
c0000ce7:	55                   	push   ebp
c0000ce8:	83 e2 fd             	and    edx,0xfffffffd
c0000ceb:	57                   	push   edi
c0000cec:	89 c5                	mov    ebp,eax
c0000cee:	56                   	push   esi
c0000cef:	8d 78 34             	lea    edi,[eax+0x34]
c0000cf2:	53                   	push   ebx
c0000cf3:	83 ec 10             	sub    esp,0x10
c0000cf6:	89 10                	mov    DWORD PTR [eax],edx
c0000cf8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cfc:	c1 ea 03             	shr    edx,0x3
c0000cff:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d03:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d07:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d0a:	85 d2                	test   edx,edx
c0000d0c:	0f 84 98 00 00 00    	je     c0000daa <malloc_consolidate+0xcd>
c0000d12:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d19:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d1c:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d1f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d23:	89 f9                	mov    ecx,edi
c0000d25:	83 e1 fe             	and    ecx,0xfffffffe
c0000d28:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d2b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d2e:	83 e3 fc             	and    ebx,0xfffffffc
c0000d31:	83 e7 01             	and    edi,0x1
c0000d34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d37:	75 14                	jne    c0000d4d <malloc_consolidate+0x70>
c0000d39:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d3b:	29 fa                	sub    edx,edi
c0000d3d:	01 f9                	add    ecx,edi
c0000d3f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d42:	89 fb                	mov    ebx,edi
c0000d44:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d47:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d4a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d4d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d50:	74 40                	je     c0000d92 <malloc_consolidate+0xb5>
c0000d52:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d55:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d58:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d5c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d5f:	83 e7 01             	and    edi,0x1
c0000d62:	75 0e                	jne    c0000d72 <malloc_consolidate+0x95>
c0000d64:	01 d9                	add    ecx,ebx
c0000d66:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d6f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d72:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d75:	89 ce                	mov    esi,ecx
c0000d77:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d7a:	83 ce 01             	or     esi,0x1
c0000d7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d80:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d83:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d86:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d8a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d8d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d90:	eb 0c                	jmp    c0000d9e <malloc_consolidate+0xc1>
c0000d92:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d95:	83 c9 01             	or     ecx,0x1
c0000d98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d9b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000da2:	85 d2                	test   edx,edx
c0000da4:	0f 85 6f ff ff ff    	jne    c0000d19 <malloc_consolidate+0x3c>
c0000daa:	83 c5 04             	add    ebp,0x4
c0000dad:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000db1:	0f 85 50 ff ff ff    	jne    c0000d07 <malloc_consolidate+0x2a>
c0000db7:	83 c4 10             	add    esp,0x10
c0000dba:	5b                   	pop    ebx
c0000dbb:	5e                   	pop    esi
c0000dbc:	5f                   	pop    edi
c0000dbd:	5d                   	pop    ebp
c0000dbe:	c3                   	ret    
c0000dbf:	e9 b8 fe ff ff       	jmp    c0000c7c <malloc_init_state>

c0000dc4 <dlfree>:
c0000dc4:	57                   	push   edi
c0000dc5:	56                   	push   esi
c0000dc6:	53                   	push   ebx
c0000dc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dcb:	85 db                	test   ebx,ebx
c0000dcd:	0f 84 e2 00 00 00    	je     c0000eb5 <dlfree+0xf1>
c0000dd3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dd6:	8b 0d 60 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e060
c0000ddc:	89 f0                	mov    eax,esi
c0000dde:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000de1:	83 e0 fc             	and    eax,0xfffffffc
c0000de4:	39 c1                	cmp    ecx,eax
c0000de6:	72 24                	jb     c0000e0c <dlfree+0x48>
c0000de8:	83 c9 03             	or     ecx,0x3
c0000deb:	c1 e8 03             	shr    eax,0x3
c0000dee:	89 0d 60 e0 02 c0    	mov    DWORD PTR ds:0xc002e060,ecx
c0000df4:	83 e8 02             	sub    eax,0x2
c0000df7:	8b 0c 85 64 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1f9c]
c0000dfe:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e00:	89 14 85 64 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f9c],edx
c0000e07:	e9 a9 00 00 00       	jmp    c0000eb5 <dlfree+0xf1>
c0000e0c:	83 e6 02             	and    esi,0x2
c0000e0f:	0f 85 a0 00 00 00    	jne    c0000eb5 <dlfree+0xf1>
c0000e15:	83 c9 01             	or     ecx,0x1
c0000e18:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e1b:	89 0d 60 e0 02 c0    	mov    DWORD PTR ds:0xc002e060,ecx
c0000e21:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e24:	83 e1 fc             	and    ecx,0xfffffffc
c0000e27:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e2b:	75 13                	jne    c0000e40 <dlfree+0x7c>
c0000e2d:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e30:	29 da                	sub    edx,ebx
c0000e32:	01 d8                	add    eax,ebx
c0000e34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e37:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e3a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e3d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e40:	39 35 8c e0 02 c0    	cmp    DWORD PTR ds:0xc002e08c,esi
c0000e46:	74 40                	je     c0000e88 <dlfree+0xc4>
c0000e48:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e4c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e4f:	80 e3 01             	and    bl,0x1
c0000e52:	75 0e                	jne    c0000e62 <dlfree+0x9e>
c0000e54:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e57:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e5a:	01 c8                	add    eax,ecx
c0000e5c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e5f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e62:	8b 0d 9c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e09c
c0000e68:	c7 42 0c 94 e0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e094
c0000e6f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e72:	89 15 9c e0 02 c0    	mov    DWORD PTR ds:0xc002e09c,edx
c0000e78:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e7b:	89 c1                	mov    ecx,eax
c0000e7d:	83 c9 01             	or     ecx,0x1
c0000e80:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e83:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e86:	eb 10                	jmp    c0000e98 <dlfree+0xd4>
c0000e88:	01 c8                	add    eax,ecx
c0000e8a:	89 c1                	mov    ecx,eax
c0000e8c:	83 c9 01             	or     ecx,0x1
c0000e8f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e92:	89 15 8c e0 02 c0    	mov    DWORD PTR ds:0xc002e08c,edx
c0000e98:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e9d:	76 16                	jbe    c0000eb5 <dlfree+0xf1>
c0000e9f:	f6 05 60 e0 02 c0 02 	test   BYTE PTR ds:0xc002e060,0x2
c0000ea6:	74 0d                	je     c0000eb5 <dlfree+0xf1>
c0000ea8:	5b                   	pop    ebx
c0000ea9:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	e9 28 fe ff ff       	jmp    c0000cdd <malloc_consolidate>
c0000eb5:	5b                   	pop    ebx
c0000eb6:	5e                   	pop    esi
c0000eb7:	5f                   	pop    edi
c0000eb8:	c3                   	ret    

c0000eb9 <sYSMALLOc>:
c0000eb9:	55                   	push   ebp
c0000eba:	57                   	push   edi
c0000ebb:	56                   	push   esi
c0000ebc:	53                   	push   ebx
c0000ebd:	89 d3                	mov    ebx,edx
c0000ebf:	83 ec 2c             	sub    esp,0x2c
c0000ec2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ec6:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ecc:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ecf:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ed2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ed6:	74 1f                	je     c0000ef7 <sYSMALLOc+0x3e>
c0000ed8:	89 d8                	mov    eax,ebx
c0000eda:	e8 fe fd ff ff       	call   c0000cdd <malloc_consolidate>
c0000edf:	83 ec 0c             	sub    esp,0xc
c0000ee2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ee6:	83 e8 07             	sub    eax,0x7
c0000ee9:	50                   	push   eax
c0000eea:	e8 30 02 00 00       	call   c000111f <dlmalloc>
c0000eef:	83 c4 10             	add    esp,0x10
c0000ef2:	e9 20 02 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000ef7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000efa:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f00:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f03:	83 e0 fc             	and    eax,0xfffffffc
c0000f06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f0e:	83 c0 10             	add    eax,0x10
c0000f11:	01 c1                	add    ecx,eax
c0000f13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f17:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f1e:	74 04                	je     c0000f24 <sYSMALLOc+0x6b>
c0000f20:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f24:	f7 da                	neg    edx
c0000f26:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f2e:	21 d1                	and    ecx,edx
c0000f30:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f34:	7f 07                	jg     c0000f3d <sYSMALLOc+0x84>
c0000f36:	31 c0                	xor    eax,eax
c0000f38:	e9 da 01 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000f3d:	83 ec 0c             	sub    esp,0xc
c0000f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f44:	e8 56 e7 00 00       	call   c000f69f <sbrk>
c0000f49:	83 c4 10             	add    esp,0x10
c0000f4c:	89 c6                	mov    esi,eax
c0000f4e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f51:	74 e3                	je     c0000f36 <sYSMALLOc+0x7d>
c0000f53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f57:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f5b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f5e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f64:	39 f1                	cmp    ecx,esi
c0000f66:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f6c:	75 13                	jne    c0000f81 <sYSMALLOc+0xc8>
c0000f6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f72:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f76:	83 c8 01             	or     eax,0x1
c0000f79:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f7c:	e9 3e 01 00 00       	jmp    c00010bf <sYSMALLOc+0x206>
c0000f81:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f87:	88 d0                	mov    al,dl
c0000f89:	83 e0 01             	and    eax,0x1
c0000f8c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f91:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f95:	0f 95 c0             	setne  al
c0000f98:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f9c:	39 f1                	cmp    ecx,esi
c0000f9e:	76 12                	jbe    c0000fb2 <sYSMALLOc+0xf9>
c0000fa0:	84 c0                	test   al,al
c0000fa2:	74 0e                	je     c0000fb2 <sYSMALLOc+0xf9>
c0000fa4:	83 e2 fe             	and    edx,0xfffffffe
c0000fa7:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fad:	e9 83 00 00 00       	jmp    c0001035 <sYSMALLOc+0x17c>
c0000fb2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fb7:	74 7c                	je     c0001035 <sYSMALLOc+0x17c>
c0000fb9:	84 c0                	test   al,al
c0000fbb:	74 0c                	je     c0000fc9 <sYSMALLOc+0x110>
c0000fbd:	89 f0                	mov    eax,esi
c0000fbf:	29 c8                	sub    eax,ecx
c0000fc1:	01 e8                	add    eax,ebp
c0000fc3:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc9:	89 f2                	mov    edx,esi
c0000fcb:	83 e2 07             	and    edx,0x7
c0000fce:	74 0c                	je     c0000fdc <sYSMALLOc+0x123>
c0000fd0:	b8 08 00 00 00       	mov    eax,0x8
c0000fd5:	29 d0                	sub    eax,edx
c0000fd7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fda:	eb 04                	jmp    c0000fe0 <sYSMALLOc+0x127>
c0000fdc:	89 f5                	mov    ebp,esi
c0000fde:	31 c0                	xor    eax,eax
c0000fe0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fe4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fec:	01 c1                	add    ecx,eax
c0000fee:	83 ec 0c             	sub    esp,0xc
c0000ff1:	01 f1                	add    ecx,esi
c0000ff3:	01 ca                	add    edx,ecx
c0000ff5:	29 c8                	sub    eax,ecx
c0000ff7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ffb:	01 c2                	add    edx,eax
c0000ffd:	52                   	push   edx
c0000ffe:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001002:	e8 98 e6 00 00       	call   c000f69f <sbrk>
c0001007:	83 c4 10             	add    esp,0x10
c000100a:	83 f8 ff             	cmp    eax,0xffffffff
c000100d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001011:	75 0f                	jne    c0001022 <sYSMALLOc+0x169>
c0001013:	83 ec 0c             	sub    esp,0xc
c0001016:	6a 00                	push   0x0
c0001018:	e8 82 e6 00 00       	call   c000f69f <sbrk>
c000101d:	83 c4 10             	add    esp,0x10
c0001020:	eb 30                	jmp    c0001052 <sYSMALLOc+0x199>
c0001022:	39 c6                	cmp    esi,eax
c0001024:	76 33                	jbe    c0001059 <sYSMALLOc+0x1a0>
c0001026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000102a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001031:	01 f0                	add    eax,esi
c0001033:	eb 1d                	jmp    c0001052 <sYSMALLOc+0x199>
c0001035:	83 ec 0c             	sub    esp,0xc
c0001038:	89 f5                	mov    ebp,esi
c000103a:	6a 00                	push   0x0
c000103c:	e8 5e e6 00 00       	call   c000f69f <sbrk>
c0001041:	89 c2                	mov    edx,eax
c0001043:	29 f2                	sub    edx,esi
c0001045:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001049:	83 c4 10             	add    esp,0x10
c000104c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001052:	31 d2                	xor    edx,edx
c0001054:	83 f8 ff             	cmp    eax,0xffffffff
c0001057:	74 66                	je     c00010bf <sYSMALLOc+0x206>
c0001059:	29 e8                	sub    eax,ebp
c000105b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000105e:	01 d0                	add    eax,edx
c0001060:	83 c8 01             	or     eax,0x1
c0001063:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001066:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000106c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001071:	74 4c                	je     c00010bf <sYSMALLOc+0x206>
c0001073:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001077:	83 e8 0c             	sub    eax,0xc
c000107a:	83 e0 f8             	and    eax,0xfffffff8
c000107d:	89 c2                	mov    edx,eax
c000107f:	83 ca 01             	or     edx,0x1
c0001082:	83 f8 0f             	cmp    eax,0xf
c0001085:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001088:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001090:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001098:	76 25                	jbe    c00010bf <sYSMALLOc+0x206>
c000109a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010a0:	83 ec 0c             	sub    esp,0xc
c00010a3:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010ad:	83 c7 08             	add    edi,0x8
c00010b0:	57                   	push   edi
c00010b1:	e8 0e fd ff ff       	call   c0000dc4 <dlfree>
c00010b6:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010bc:	83 c4 10             	add    esp,0x10
c00010bf:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010c5:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x21a>
c00010cd:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010d3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010df:	73 06                	jae    c00010e7 <sYSMALLOc+0x22e>
c00010e1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010e7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ed:	83 e2 fc             	and    edx,0xfffffffc
c00010f0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010f4:	0f 82 3c fe ff ff    	jb     c0000f36 <sYSMALLOc+0x7d>
c00010fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010fe:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001101:	29 fa                	sub    edx,edi
c0001103:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001106:	83 ca 01             	or     edx,0x1
c0001109:	89 fb                	mov    ebx,edi
c000110b:	83 c0 08             	add    eax,0x8
c000110e:	83 cb 01             	or     ebx,0x1
c0001111:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001114:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001117:	83 c4 2c             	add    esp,0x2c
c000111a:	5b                   	pop    ebx
c000111b:	5e                   	pop    esi
c000111c:	5f                   	pop    edi
c000111d:	5d                   	pop    ebp
c000111e:	c3                   	ret    

c000111f <dlmalloc>:
c000111f:	55                   	push   ebp
c0001120:	57                   	push   edi
c0001121:	56                   	push   esi
c0001122:	53                   	push   ebx
c0001123:	83 ec 1c             	sub    esp,0x1c
c0001126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000112a:	83 f8 df             	cmp    eax,0xffffffdf
c000112d:	0f 87 70 03 00 00    	ja     c00014a3 <dlmalloc+0x384>
c0001133:	83 c0 0b             	add    eax,0xb
c0001136:	be 10 00 00 00       	mov    esi,0x10
c000113b:	83 f8 0f             	cmp    eax,0xf
c000113e:	76 05                	jbe    c0001145 <dlmalloc+0x26>
c0001140:	83 e0 f8             	and    eax,0xfffffff8
c0001143:	89 c6                	mov    esi,eax
c0001145:	8b 3d 60 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e060
c000114b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001151:	75 17                	jne    c000116a <dlmalloc+0x4b>
c0001153:	85 ff                	test   edi,edi
c0001155:	0f 85 05 03 00 00    	jne    c0001460 <dlmalloc+0x341>
c000115b:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001160:	e8 78 fb ff ff       	call   c0000cdd <malloc_consolidate>
c0001165:	e9 f6 02 00 00       	jmp    c0001460 <dlmalloc+0x341>
c000116a:	39 f7                	cmp    edi,esi
c000116c:	72 1f                	jb     c000118d <dlmalloc+0x6e>
c000116e:	89 f2                	mov    edx,esi
c0001170:	c1 ea 03             	shr    edx,0x3
c0001173:	83 ea 02             	sub    edx,0x2
c0001176:	8b 04 95 64 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f9c]
c000117d:	85 c0                	test   eax,eax
c000117f:	74 0c                	je     c000118d <dlmalloc+0x6e>
c0001181:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001184:	89 0c 95 64 e0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1f9c],ecx
c000118b:	eb 30                	jmp    c00011bd <dlmalloc+0x9e>
c000118d:	89 f0                	mov    eax,esi
c000118f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001195:	77 2e                	ja     c00011c5 <dlmalloc+0xa6>
c0001197:	c1 e8 03             	shr    eax,0x3
c000119a:	8d 14 c5 94 e0 02 c0 	lea    edx,[eax*8-0x3ffd1f6c]
c00011a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a5:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011ab:	39 c3                	cmp    ebx,eax
c00011ad:	74 2e                	je     c00011dd <dlmalloc+0xbe>
c00011af:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011b2:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011b7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011ba:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011bd:	83 c0 08             	add    eax,0x8
c00011c0:	e9 e0 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c00011c5:	e8 8f fa ff ff       	call   c0000c59 <largebin_index>
c00011ca:	83 e7 02             	and    edi,0x2
c00011cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011d1:	74 0a                	je     c00011dd <dlmalloc+0xbe>
c00011d3:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c00011d8:	e8 00 fb ff ff       	call   c0000cdd <malloc_consolidate>
c00011dd:	8d 46 10             	lea    eax,[esi+0x10]
c00011e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e4:	8b 1d a0 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0a0
c00011ea:	81 fb 94 e0 02 c0    	cmp    ebx,0xc002e094
c00011f0:	0f 84 13 01 00 00    	je     c0001309 <dlmalloc+0x1ea>
c00011f6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011fc:	83 e7 fc             	and    edi,0xfffffffc
c00011ff:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001205:	77 4c                	ja     c0001253 <dlmalloc+0x134>
c0001207:	3d 94 e0 02 c0       	cmp    eax,0xc002e094
c000120c:	75 45                	jne    c0001253 <dlmalloc+0x134>
c000120e:	39 1d 90 e0 02 c0    	cmp    DWORD PTR ds:0xc002e090,ebx
c0001214:	75 3d                	jne    c0001253 <dlmalloc+0x134>
c0001216:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000121a:	73 37                	jae    c0001253 <dlmalloc+0x134>
c000121c:	8d 04 33             	lea    eax,[ebx+esi*1]
c000121f:	89 fa                	mov    edx,edi
c0001221:	a3 9c e0 02 c0       	mov    ds:0xc002e09c,eax
c0001226:	a3 a0 e0 02 c0       	mov    ds:0xc002e0a0,eax
c000122b:	a3 90 e0 02 c0       	mov    ds:0xc002e090,eax
c0001230:	29 f2                	sub    edx,esi
c0001232:	c7 40 08 94 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e094
c0001239:	c7 40 0c 94 e0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e094
c0001240:	83 ce 01             	or     esi,0x1
c0001243:	89 d1                	mov    ecx,edx
c0001245:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001248:	83 c9 01             	or     ecx,0x1
c000124b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000124e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001251:	eb 15                	jmp    c0001268 <dlmalloc+0x149>
c0001253:	a3 a0 e0 02 c0       	mov    ds:0xc002e0a0,eax
c0001258:	39 fe                	cmp    esi,edi
c000125a:	c7 40 08 94 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e094
c0001261:	75 0d                	jne    c0001270 <dlmalloc+0x151>
c0001263:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001268:	8d 43 08             	lea    eax,[ebx+0x8]
c000126b:	e9 35 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001270:	89 f8                	mov    eax,edi
c0001272:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001278:	77 19                	ja     c0001293 <dlmalloc+0x174>
c000127a:	c1 e8 03             	shr    eax,0x3
c000127d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001280:	83 c2 0d             	add    edx,0xd
c0001283:	8d 2c 95 58 e0 02 c0 	lea    ebp,[edx*4-0x3ffd1fa8]
c000128a:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c0001291:	eb 46                	jmp    c00012d9 <dlmalloc+0x1ba>
c0001293:	e8 c1 f9 ff ff       	call   c0000c59 <largebin_index>
c0001298:	8d 14 00             	lea    edx,[eax+eax*1]
c000129b:	83 c2 0d             	add    edx,0xd
c000129e:	8d 0c 95 60 e0 02 c0 	lea    ecx,[edx*4-0x3ffd1fa0]
c00012a5:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c00012ac:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012af:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012b3:	89 d5                	mov    ebp,edx
c00012b5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b9:	74 1e                	je     c00012d9 <dlmalloc+0x1ba>
c00012bb:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012be:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012c1:	77 12                	ja     c00012d5 <dlmalloc+0x1b6>
c00012c3:	83 cf 01             	or     edi,0x1
c00012c6:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c9:	76 05                	jbe    c00012d0 <dlmalloc+0x1b1>
c00012cb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ce:	eb f6                	jmp    c00012c6 <dlmalloc+0x1a7>
c00012d0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012d3:	eb 04                	jmp    c00012d9 <dlmalloc+0x1ba>
c00012d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d9:	89 c7                	mov    edi,eax
c00012db:	88 c1                	mov    cl,al
c00012dd:	c1 ff 05             	sar    edi,0x5
c00012e0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012e4:	bf 01 00 00 00       	mov    edi,0x1
c00012e9:	d3 e7                	shl    edi,cl
c00012eb:	89 f8                	mov    eax,edi
c00012ed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012f1:	09 04 bd 94 e3 02 c0 	or     DWORD PTR [edi*4-0x3ffd1c6c],eax
c00012f8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012fb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012fe:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001301:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001304:	e9 db fe ff ff       	jmp    c00011e4 <dlmalloc+0xc5>
c0001309:	81 fe ff 00 00 00    	cmp    esi,0xff
c000130f:	76 78                	jbe    c0001389 <dlmalloc+0x26a>
c0001311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001315:	8d 04 c5 94 e0 02 c0 	lea    eax,[eax*8-0x3ffd1f6c]
c000131c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000131f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001322:	39 ca                	cmp    edx,ecx
c0001324:	74 63                	je     c0001389 <dlmalloc+0x26a>
c0001326:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001329:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000132c:	83 e3 fc             	and    ebx,0xfffffffc
c000132f:	39 de                	cmp    esi,ebx
c0001331:	77 52                	ja     c0001385 <dlmalloc+0x266>
c0001333:	89 df                	mov    edi,ebx
c0001335:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001338:	29 f7                	sub    edi,esi
c000133a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000133d:	01 d3                	add    ebx,edx
c000133f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001342:	83 ff 0f             	cmp    edi,0xf
c0001345:	8d 42 08             	lea    eax,[edx+0x8]
c0001348:	77 09                	ja     c0001353 <dlmalloc+0x234>
c000134a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000134e:	e9 52 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001353:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001356:	83 ce 01             	or     esi,0x1
c0001359:	89 0d 9c e0 02 c0    	mov    DWORD PTR ds:0xc002e09c,ecx
c000135f:	89 0d a0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a0,ecx
c0001365:	c7 41 08 94 e0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e094
c000136c:	c7 41 0c 94 e0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e094
c0001373:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001376:	89 fa                	mov    edx,edi
c0001378:	83 ca 01             	or     edx,0x1
c000137b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000137e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001380:	e9 20 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001385:	89 c2                	mov    edx,eax
c0001387:	eb 99                	jmp    c0001322 <dlmalloc+0x203>
c0001389:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000138d:	b8 01 00 00 00       	mov    eax,0x1
c0001392:	41                   	inc    ecx
c0001393:	89 cb                	mov    ebx,ecx
c0001395:	8d 14 cd 8c e0 02 c0 	lea    edx,[ecx*8-0x3ffd1f74]
c000139c:	c1 eb 05             	shr    ebx,0x5
c000139f:	d3 e0                	shl    eax,cl
c00013a1:	8b 3c 9d 94 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1c6c]
c00013a8:	39 f8                	cmp    eax,edi
c00013aa:	77 04                	ja     c00013b0 <dlmalloc+0x291>
c00013ac:	85 c0                	test   eax,eax
c00013ae:	75 26                	jne    c00013d6 <dlmalloc+0x2b7>
c00013b0:	43                   	inc    ebx
c00013b1:	83 fb 02             	cmp    ebx,0x2
c00013b4:	0f 87 a6 00 00 00    	ja     c0001460 <dlmalloc+0x341>
c00013ba:	8b 3c 9d 94 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1c6c]
c00013c1:	85 ff                	test   edi,edi
c00013c3:	74 eb                	je     c00013b0 <dlmalloc+0x291>
c00013c5:	89 d8                	mov    eax,ebx
c00013c7:	c1 e0 06             	shl    eax,0x6
c00013ca:	8d 14 85 8c e0 02 c0 	lea    edx,[eax*4-0x3ffd1f74]
c00013d1:	b8 01 00 00 00       	mov    eax,0x1
c00013d6:	85 f8                	test   eax,edi
c00013d8:	75 07                	jne    c00013e1 <dlmalloc+0x2c2>
c00013da:	83 c2 08             	add    edx,0x8
c00013dd:	01 c0                	add    eax,eax
c00013df:	eb f5                	jmp    c00013d6 <dlmalloc+0x2b7>
c00013e1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013e4:	39 ca                	cmp    edx,ecx
c00013e6:	75 14                	jne    c00013fc <dlmalloc+0x2dd>
c00013e8:	89 c1                	mov    ecx,eax
c00013ea:	83 c2 08             	add    edx,0x8
c00013ed:	f7 d1                	not    ecx
c00013ef:	01 c0                	add    eax,eax
c00013f1:	21 cf                	and    edi,ecx
c00013f3:	89 3c 9d 94 e3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1c6c],edi
c00013fa:	eb ac                	jmp    c00013a8 <dlmalloc+0x289>
c00013fc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013ff:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001402:	83 e0 fc             	and    eax,0xfffffffc
c0001405:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001408:	89 c3                	mov    ebx,eax
c000140a:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000140d:	29 f3                	sub    ebx,esi
c000140f:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001412:	83 fb 0f             	cmp    ebx,0xf
c0001415:	8d 41 08             	lea    eax,[ecx+0x8]
c0001418:	77 09                	ja     c0001423 <dlmalloc+0x304>
c000141a:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000141e:	e9 82 00 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001423:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001426:	81 fe ff 00 00 00    	cmp    esi,0xff
c000142c:	89 3d 9c e0 02 c0    	mov    DWORD PTR ds:0xc002e09c,edi
c0001432:	89 3d a0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a0,edi
c0001438:	c7 47 08 94 e0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e094
c000143f:	c7 47 0c 94 e0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e094
c0001446:	77 06                	ja     c000144e <dlmalloc+0x32f>
c0001448:	89 3d 90 e0 02 c0    	mov    DWORD PTR ds:0xc002e090,edi
c000144e:	83 ce 01             	or     esi,0x1
c0001451:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001454:	89 d9                	mov    ecx,ebx
c0001456:	83 c9 01             	or     ecx,0x1
c0001459:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000145c:	89 1a                	mov    DWORD PTR [edx],ebx
c000145e:	eb 45                	jmp    c00014a5 <dlmalloc+0x386>
c0001460:	a1 8c e0 02 c0       	mov    eax,ds:0xc002e08c
c0001465:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000146b:	83 e2 fc             	and    edx,0xfffffffc
c000146e:	39 d1                	cmp    ecx,edx
c0001470:	77 1e                	ja     c0001490 <dlmalloc+0x371>
c0001472:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001475:	89 f3                	mov    ebx,esi
c0001477:	89 0d 8c e0 02 c0    	mov    DWORD PTR ds:0xc002e08c,ecx
c000147d:	83 cb 01             	or     ebx,0x1
c0001480:	29 f2                	sub    edx,esi
c0001482:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001485:	83 ca 01             	or     edx,0x1
c0001488:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000148b:	e9 2d fd ff ff       	jmp    c00011bd <dlmalloc+0x9e>
c0001490:	83 c4 1c             	add    esp,0x1c
c0001493:	89 f0                	mov    eax,esi
c0001495:	5b                   	pop    ebx
c0001496:	ba 60 e0 02 c0       	mov    edx,0xc002e060
c000149b:	5e                   	pop    esi
c000149c:	5f                   	pop    edi
c000149d:	5d                   	pop    ebp
c000149e:	e9 16 fa ff ff       	jmp    c0000eb9 <sYSMALLOc>
c00014a3:	31 c0                	xor    eax,eax
c00014a5:	83 c4 1c             	add    esp,0x1c
c00014a8:	5b                   	pop    ebx
c00014a9:	5e                   	pop    esi
c00014aa:	5f                   	pop    edi
c00014ab:	5d                   	pop    ebp
c00014ac:	c3                   	ret    

c00014ad <iALLOc>:
c00014ad:	55                   	push   ebp
c00014ae:	89 c5                	mov    ebp,eax
c00014b0:	57                   	push   edi
c00014b1:	56                   	push   esi
c00014b2:	53                   	push   ebx
c00014b3:	83 ec 2c             	sub    esp,0x2c
c00014b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014ba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014c2:	83 3d 60 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e060,0x0
c00014c9:	75 12                	jne    c00014dd <iALLOc+0x30>
c00014cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014cf:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c00014d4:	e8 04 f8 ff ff       	call   c0000cdd <malloc_consolidate>
c00014d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	74 12                	je     c00014f6 <iALLOc+0x49>
c00014e4:	85 ed                	test   ebp,ebp
c00014e6:	0f 84 64 01 00 00    	je     c0001650 <iALLOc+0x1a3>
c00014ec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014f4:	eb 33                	jmp    c0001529 <iALLOc+0x7c>
c00014f6:	85 ed                	test   ebp,ebp
c00014f8:	75 14                	jne    c000150e <iALLOc+0x61>
c00014fa:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001502:	83 c4 2c             	add    esp,0x2c
c0001505:	5b                   	pop    ebx
c0001506:	5e                   	pop    esi
c0001507:	5f                   	pop    edi
c0001508:	5d                   	pop    ebp
c0001509:	e9 11 fc ff ff       	jmp    c000111f <dlmalloc>
c000150e:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001515:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000151d:	83 f8 0f             	cmp    eax,0xf
c0001520:	76 07                	jbe    c0001529 <iALLOc+0x7c>
c0001522:	83 e0 f8             	and    eax,0xfffffff8
c0001525:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001529:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000152e:	75 09                	jne    c0001539 <iALLOc+0x8c>
c0001530:	89 d0                	mov    eax,edx
c0001532:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001535:	31 f6                	xor    esi,esi
c0001537:	eb 3b                	jmp    c0001574 <iALLOc+0xc7>
c0001539:	8b 02                	mov    eax,DWORD PTR [edx]
c000153b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001543:	83 c0 0b             	add    eax,0xb
c0001546:	83 f8 0f             	cmp    eax,0xf
c0001549:	76 07                	jbe    c0001552 <iALLOc+0xa5>
c000154b:	83 e0 f8             	and    eax,0xfffffff8
c000154e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001552:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001556:	0f af f5             	imul   esi,ebp
c0001559:	eb 25                	jmp    c0001580 <iALLOc+0xd3>
c000155b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000155d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001560:	bb 10 00 00 00       	mov    ebx,0x10
c0001565:	83 f9 0f             	cmp    ecx,0xf
c0001568:	76 05                	jbe    c000156f <iALLOc+0xc2>
c000156a:	83 e1 f8             	and    ecx,0xfffffff8
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	01 de                	add    esi,ebx
c0001571:	83 c0 04             	add    eax,0x4
c0001574:	39 c7                	cmp    edi,eax
c0001576:	75 e3                	jne    c000155b <iALLOc+0xae>
c0001578:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001580:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001584:	8b 1d b4 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3b4
c000158a:	83 ec 0c             	sub    esp,0xc
c000158d:	c7 05 b4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3b4,0x0
c0001597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000159b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000159f:	50                   	push   eax
c00015a0:	e8 7a fb ff ff       	call   c000111f <dlmalloc>
c00015a5:	83 c4 10             	add    esp,0x10
c00015a8:	89 1d b4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3b4,ebx
c00015ae:	85 c0                	test   eax,eax
c00015b0:	0f 84 92 00 00 00    	je     c0001648 <iALLOc+0x19b>
c00015b6:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b9:	8d 78 f8             	lea    edi,[eax-0x8]
c00015bc:	83 e3 fc             	and    ebx,0xfffffffc
c00015bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015c3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c8:	74 1e                	je     c00015e8 <iALLOc+0x13b>
c00015ca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ce:	89 d9                	mov    ecx,ebx
c00015d0:	52                   	push   edx
c00015d1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015d5:	83 e9 04             	sub    ecx,0x4
c00015d8:	51                   	push   ecx
c00015d9:	6a 00                	push   0x0
c00015db:	50                   	push   eax
c00015dc:	e8 9f f1 ff ff       	call   c0000780 <memset>
c00015e1:	83 c4 10             	add    esp,0x10
c00015e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015ed:	75 14                	jne    c0001603 <iALLOc+0x156>
c00015ef:	8d 04 37             	lea    eax,[edi+esi*1]
c00015f2:	29 f3                	sub    ebx,esi
c00015f4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015f7:	83 cb 01             	or     ebx,0x1
c00015fa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015fe:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001601:	89 f3                	mov    ebx,esi
c0001603:	31 c0                	xor    eax,eax
c0001605:	4d                   	dec    ebp
c0001606:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001609:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000160d:	39 c5                	cmp    ebp,eax
c000160f:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001612:	74 2c                	je     c0001640 <iALLOc+0x193>
c0001614:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001618:	85 c9                	test   ecx,ecx
c000161a:	75 15                	jne    c0001631 <iALLOc+0x184>
c000161c:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000161f:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001622:	b9 10 00 00 00       	mov    ecx,0x10
c0001627:	83 fe 0f             	cmp    esi,0xf
c000162a:	76 05                	jbe    c0001631 <iALLOc+0x184>
c000162c:	83 e6 f8             	and    esi,0xfffffff8
c000162f:	89 f1                	mov    ecx,esi
c0001631:	89 ce                	mov    esi,ecx
c0001633:	29 cb                	sub    ebx,ecx
c0001635:	83 ce 01             	or     esi,0x1
c0001638:	40                   	inc    eax
c0001639:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000163c:	01 cf                	add    edi,ecx
c000163e:	eb c6                	jmp    c0001606 <iALLOc+0x159>
c0001640:	83 cb 01             	or     ebx,0x1
c0001643:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001646:	eb 08                	jmp    c0001650 <iALLOc+0x1a3>
c0001648:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001654:	83 c4 2c             	add    esp,0x2c
c0001657:	5b                   	pop    ebx
c0001658:	5e                   	pop    esi
c0001659:	5f                   	pop    edi
c000165a:	5d                   	pop    ebp
c000165b:	c3                   	ret    

c000165c <dlrealloc>:
c000165c:	55                   	push   ebp
c000165d:	57                   	push   edi
c000165e:	56                   	push   esi
c000165f:	53                   	push   ebx
c0001660:	83 ec 1c             	sub    esp,0x1c
c0001663:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001667:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000166b:	85 db                	test   ebx,ebx
c000166d:	75 10                	jne    c000167f <dlrealloc+0x23>
c000166f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001673:	83 c4 1c             	add    esp,0x1c
c0001676:	5b                   	pop    ebx
c0001677:	5e                   	pop    esi
c0001678:	5f                   	pop    edi
c0001679:	5d                   	pop    ebp
c000167a:	e9 a0 fa ff ff       	jmp    c000111f <dlmalloc>
c000167f:	83 f8 df             	cmp    eax,0xffffffdf
c0001682:	76 07                	jbe    c000168b <dlrealloc+0x2f>
c0001684:	31 db                	xor    ebx,ebx
c0001686:	e9 7c 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c000168b:	83 c0 0b             	add    eax,0xb
c000168e:	bf 10 00 00 00       	mov    edi,0x10
c0001693:	83 f8 0f             	cmp    eax,0xf
c0001696:	76 05                	jbe    c000169d <dlrealloc+0x41>
c0001698:	83 e0 f8             	and    eax,0xfffffff8
c000169b:	89 c7                	mov    edi,eax
c000169d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016a0:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016a3:	89 c6                	mov    esi,eax
c00016a5:	83 e6 fc             	and    esi,0xfffffffc
c00016a8:	a8 02                	test   al,0x2
c00016aa:	75 d8                	jne    c0001684 <dlrealloc+0x28>
c00016ac:	39 f7                	cmp    edi,esi
c00016ae:	0f 86 15 01 00 00    	jbe    c00017c9 <dlrealloc+0x16d>
c00016b4:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016bb:	39 15 8c e0 02 c0    	cmp    DWORD PTR ds:0xc002e08c,edx
c00016c1:	75 33                	jne    c00016f6 <dlrealloc+0x9a>
c00016c3:	83 e1 fc             	and    ecx,0xfffffffc
c00016c6:	01 f1                	add    ecx,esi
c00016c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016cc:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016cf:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016d3:	77 49                	ja     c000171e <dlrealloc+0xc2>
c00016d5:	01 fd                	add    ebp,edi
c00016d7:	83 e0 01             	and    eax,0x1
c00016da:	09 f8                	or     eax,edi
c00016dc:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016df:	89 2d 8c e0 02 c0    	mov    DWORD PTR ds:0xc002e08c,ebp
c00016e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e9:	29 f8                	sub    eax,edi
c00016eb:	83 c8 01             	or     eax,0x1
c00016ee:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016f1:	e9 11 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c00016f6:	89 c8                	mov    eax,ecx
c00016f8:	83 e0 fe             	and    eax,0xfffffffe
c00016fb:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001700:	75 1c                	jne    c000171e <dlrealloc+0xc2>
c0001702:	83 e1 fc             	and    ecx,0xfffffffc
c0001705:	01 f1                	add    ecx,esi
c0001707:	39 cf                	cmp    edi,ecx
c0001709:	77 13                	ja     c000171e <dlrealloc+0xc2>
c000170b:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000170e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001711:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001714:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001717:	89 ce                	mov    esi,ecx
c0001719:	e9 ab 00 00 00       	jmp    c00017c9 <dlrealloc+0x16d>
c000171e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001722:	8d 47 f9             	lea    eax,[edi-0x7]
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	50                   	push   eax
c0001729:	e8 f1 f9 ff ff       	call   c000111f <dlmalloc>
c000172e:	83 c4 10             	add    esp,0x10
c0001731:	89 c1                	mov    ecx,eax
c0001733:	85 c0                	test   eax,eax
c0001735:	0f 84 49 ff ff ff    	je     c0001684 <dlrealloc+0x28>
c000173b:	8d 40 f8             	lea    eax,[eax-0x8]
c000173e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001742:	39 c2                	cmp    edx,eax
c0001744:	75 0a                	jne    c0001750 <dlrealloc+0xf4>
c0001746:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001749:	83 e0 fc             	and    eax,0xfffffffc
c000174c:	01 c6                	add    esi,eax
c000174e:	eb 79                	jmp    c00017c9 <dlrealloc+0x16d>
c0001750:	83 ee 04             	sub    esi,0x4
c0001753:	83 fe 27             	cmp    esi,0x27
c0001756:	76 16                	jbe    c000176e <dlrealloc+0x112>
c0001758:	50                   	push   eax
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	51                   	push   ecx
c000175c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001760:	e8 e7 ef ff ff       	call   c000074c <memcpy>
c0001765:	83 c4 10             	add    esp,0x10
c0001768:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000176c:	eb 43                	jmp    c00017b1 <dlrealloc+0x155>
c000176e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001770:	83 fe 13             	cmp    esi,0x13
c0001773:	89 01                	mov    DWORD PTR [ecx],eax
c0001775:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001778:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000177b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000177e:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001781:	76 2e                	jbe    c00017b1 <dlrealloc+0x155>
c0001783:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001786:	83 fe 1b             	cmp    esi,0x1b
c0001789:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000178c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000178f:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001792:	76 1d                	jbe    c00017b1 <dlrealloc+0x155>
c0001794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001797:	83 fe 23             	cmp    esi,0x23
c000179a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000179d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017a0:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017a3:	76 0c                	jbe    c00017b1 <dlrealloc+0x155>
c00017a5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a8:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017ae:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017b5:	83 ec 0c             	sub    esp,0xc
c00017b8:	53                   	push   ebx
c00017b9:	e8 06 f6 ff ff       	call   c0000dc4 <dlfree>
c00017be:	83 c4 10             	add    esp,0x10
c00017c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017c5:	89 cb                	mov    ebx,ecx
c00017c7:	eb 3e                	jmp    c0001807 <dlrealloc+0x1ab>
c00017c9:	89 f2                	mov    edx,esi
c00017cb:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017ce:	29 fa                	sub    edx,edi
c00017d0:	83 e1 01             	and    ecx,0x1
c00017d3:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017d7:	83 fa 0f             	cmp    edx,0xf
c00017da:	77 0b                	ja     c00017e7 <dlrealloc+0x18b>
c00017dc:	09 ce                	or     esi,ecx
c00017de:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017e1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017e5:	eb 20                	jmp    c0001807 <dlrealloc+0x1ab>
c00017e7:	01 fd                	add    ebp,edi
c00017e9:	83 ec 0c             	sub    esp,0xc
c00017ec:	09 cf                	or     edi,ecx
c00017ee:	83 ca 01             	or     edx,0x1
c00017f1:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017f4:	83 c5 08             	add    ebp,0x8
c00017f7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017fe:	55                   	push   ebp
c00017ff:	e8 c0 f5 ff ff       	call   c0000dc4 <dlfree>
c0001804:	83 c4 10             	add    esp,0x10
c0001807:	83 c4 1c             	add    esp,0x1c
c000180a:	89 d8                	mov    eax,ebx
c000180c:	5b                   	pop    ebx
c000180d:	5e                   	pop    esi
c000180e:	5f                   	pop    edi
c000180f:	5d                   	pop    ebp
c0001810:	c3                   	ret    

c0001811 <dlmemalign>:
c0001811:	55                   	push   ebp
c0001812:	57                   	push   edi
c0001813:	56                   	push   esi
c0001814:	53                   	push   ebx
c0001815:	83 ec 0c             	sub    esp,0xc
c0001818:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000181c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001820:	83 fa 08             	cmp    edx,0x8
c0001823:	77 10                	ja     c0001835 <dlmemalign+0x24>
c0001825:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001829:	83 c4 0c             	add    esp,0xc
c000182c:	5b                   	pop    ebx
c000182d:	5e                   	pop    esi
c000182e:	5f                   	pop    edi
c000182f:	5d                   	pop    ebp
c0001830:	e9 ea f8 ff ff       	jmp    c000111f <dlmalloc>
c0001835:	bf 10 00 00 00       	mov    edi,0x10
c000183a:	83 fa 0f             	cmp    edx,0xf
c000183d:	76 13                	jbe    c0001852 <dlmemalign+0x41>
c000183f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001842:	85 d1                	test   ecx,edx
c0001844:	75 04                	jne    c000184a <dlmemalign+0x39>
c0001846:	89 d7                	mov    edi,edx
c0001848:	eb 08                	jmp    c0001852 <dlmemalign+0x41>
c000184a:	39 d7                	cmp    edi,edx
c000184c:	73 04                	jae    c0001852 <dlmemalign+0x41>
c000184e:	01 ff                	add    edi,edi
c0001850:	eb f8                	jmp    c000184a <dlmemalign+0x39>
c0001852:	83 f8 df             	cmp    eax,0xffffffdf
c0001855:	76 07                	jbe    c000185e <dlmemalign+0x4d>
c0001857:	31 c0                	xor    eax,eax
c0001859:	e9 ce 00 00 00       	jmp    c000192c <dlmemalign+0x11b>
c000185e:	83 c0 0b             	add    eax,0xb
c0001861:	bd 10 00 00 00       	mov    ebp,0x10
c0001866:	83 f8 0f             	cmp    eax,0xf
c0001869:	76 05                	jbe    c0001870 <dlmemalign+0x5f>
c000186b:	83 e0 f8             	and    eax,0xfffffff8
c000186e:	89 c5                	mov    ebp,eax
c0001870:	83 ec 0c             	sub    esp,0xc
c0001873:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001877:	50                   	push   eax
c0001878:	e8 a2 f8 ff ff       	call   c000111f <dlmalloc>
c000187d:	83 c4 10             	add    esp,0x10
c0001880:	89 c1                	mov    ecx,eax
c0001882:	85 c0                	test   eax,eax
c0001884:	74 d1                	je     c0001857 <dlmemalign+0x46>
c0001886:	31 d2                	xor    edx,edx
c0001888:	8d 70 f8             	lea    esi,[eax-0x8]
c000188b:	f7 f7                	div    edi
c000188d:	85 d2                	test   edx,edx
c000188f:	74 62                	je     c00018f3 <dlmemalign+0xe2>
c0001891:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001895:	89 f8                	mov    eax,edi
c0001897:	f7 d8                	neg    eax
c0001899:	21 c3                	and    ebx,eax
c000189b:	83 eb 08             	sub    ebx,0x8
c000189e:	89 d8                	mov    eax,ebx
c00018a0:	29 f0                	sub    eax,esi
c00018a2:	83 f8 0f             	cmp    eax,0xf
c00018a5:	77 02                	ja     c00018a9 <dlmemalign+0x98>
c00018a7:	01 fb                	add    ebx,edi
c00018a9:	89 d8                	mov    eax,ebx
c00018ab:	29 f0                	sub    eax,esi
c00018ad:	89 c6                	mov    esi,eax
c00018af:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018b2:	89 c2                	mov    edx,eax
c00018b4:	83 e2 fc             	and    edx,0xfffffffc
c00018b7:	29 f2                	sub    edx,esi
c00018b9:	a8 02                	test   al,0x2
c00018bb:	74 10                	je     c00018cd <dlmemalign+0xbc>
c00018bd:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018c0:	83 ca 02             	or     edx,0x2
c00018c3:	8d 43 08             	lea    eax,[ebx+0x8]
c00018c6:	89 33                	mov    DWORD PTR [ebx],esi
c00018c8:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018cb:	eb 5f                	jmp    c000192c <dlmemalign+0x11b>
c00018cd:	83 ec 0c             	sub    esp,0xc
c00018d0:	89 d0                	mov    eax,edx
c00018d2:	83 c8 01             	or     eax,0x1
c00018d5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d8:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018dd:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018e0:	83 e0 01             	and    eax,0x1
c00018e3:	09 f0                	or     eax,esi
c00018e5:	89 de                	mov    esi,ebx
c00018e7:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018ea:	51                   	push   ecx
c00018eb:	e8 d4 f4 ff ff       	call   c0000dc4 <dlfree>
c00018f0:	83 c4 10             	add    esp,0x10
c00018f3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f6:	a8 02                	test   al,0x2
c00018f8:	75 2f                	jne    c0001929 <dlmemalign+0x118>
c00018fa:	83 e0 fc             	and    eax,0xfffffffc
c00018fd:	8d 55 10             	lea    edx,[ebp+0x10]
c0001900:	39 c2                	cmp    edx,eax
c0001902:	73 25                	jae    c0001929 <dlmemalign+0x118>
c0001904:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	29 e8                	sub    eax,ebp
c000190c:	83 c2 08             	add    edx,0x8
c000190f:	83 c8 01             	or     eax,0x1
c0001912:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001915:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001918:	83 e0 01             	and    eax,0x1
c000191b:	09 c5                	or     ebp,eax
c000191d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001920:	52                   	push   edx
c0001921:	e8 9e f4 ff ff       	call   c0000dc4 <dlfree>
c0001926:	83 c4 10             	add    esp,0x10
c0001929:	8d 46 08             	lea    eax,[esi+0x8]
c000192c:	83 c4 0c             	add    esp,0xc
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlcalloc>:
c0001934:	53                   	push   ebx
c0001935:	83 ec 14             	sub    esp,0x14
c0001938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000193c:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001941:	50                   	push   eax
c0001942:	e8 d8 f7 ff ff       	call   c000111f <dlmalloc>
c0001947:	83 c4 10             	add    esp,0x10
c000194a:	89 c3                	mov    ebx,eax
c000194c:	85 c0                	test   eax,eax
c000194e:	74 77                	je     c00019c7 <dlcalloc+0x93>
c0001950:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001953:	89 d0                	mov    eax,edx
c0001955:	83 e0 fc             	and    eax,0xfffffffc
c0001958:	80 e2 02             	and    dl,0x2
c000195b:	75 5a                	jne    c00019b7 <dlcalloc+0x83>
c000195d:	83 e8 04             	sub    eax,0x4
c0001960:	83 f8 27             	cmp    eax,0x27
c0001963:	76 03                	jbe    c0001968 <dlcalloc+0x34>
c0001965:	51                   	push   ecx
c0001966:	eb 53                	jmp    c00019bb <dlcalloc+0x87>
c0001968:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000196e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001975:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000197c:	83 f8 13             	cmp    eax,0x13
c000197f:	76 46                	jbe    c00019c7 <dlcalloc+0x93>
c0001981:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001988:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000198f:	83 f8 1b             	cmp    eax,0x1b
c0001992:	76 33                	jbe    c00019c7 <dlcalloc+0x93>
c0001994:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000199b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019a2:	83 f8 23             	cmp    eax,0x23
c00019a5:	76 20                	jbe    c00019c7 <dlcalloc+0x93>
c00019a7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019ae:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019b5:	eb 10                	jmp    c00019c7 <dlcalloc+0x93>
c00019b7:	83 e8 08             	sub    eax,0x8
c00019ba:	52                   	push   edx
c00019bb:	50                   	push   eax
c00019bc:	6a 00                	push   0x0
c00019be:	53                   	push   ebx
c00019bf:	e8 bc ed ff ff       	call   c0000780 <memset>
c00019c4:	83 c4 10             	add    esp,0x10
c00019c7:	89 d8                	mov    eax,ebx
c00019c9:	83 c4 08             	add    esp,0x8
c00019cc:	5b                   	pop    ebx
c00019cd:	c3                   	ret    

c00019ce <dlcfree>:
c00019ce:	e9 f1 f3 ff ff       	jmp    c0000dc4 <dlfree>

c00019d3 <dlindependent_calloc>:
c00019d3:	83 ec 28             	sub    esp,0x28
c00019d6:	b9 03 00 00 00       	mov    ecx,0x3
c00019db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ef:	e8 b9 fa ff ff       	call   c00014ad <iALLOc>
c00019f4:	83 c4 2c             	add    esp,0x2c
c00019f7:	c3                   	ret    

c00019f8 <dlindependent_comalloc>:
c00019f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a00:	31 c9                	xor    ecx,ecx
c0001a02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a0a:	e9 9e fa ff ff       	jmp    c00014ad <iALLOc>

c0001a0f <dlvalloc>:
c0001a0f:	83 ec 0c             	sub    esp,0xc
c0001a12:	83 3d 60 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e060,0x0
c0001a19:	75 0a                	jne    c0001a25 <dlvalloc+0x16>
c0001a1b:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001a20:	e8 b8 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a25:	50                   	push   eax
c0001a26:	50                   	push   eax
c0001a27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a2b:	ff 35 bc e3 02 c0    	push   DWORD PTR ds:0xc002e3bc
c0001a31:	e8 db fd ff ff       	call   c0001811 <dlmemalign>
c0001a36:	83 c4 1c             	add    esp,0x1c
c0001a39:	c3                   	ret    

c0001a3a <dlpvalloc>:
c0001a3a:	83 ec 0c             	sub    esp,0xc
c0001a3d:	83 3d 60 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e060,0x0
c0001a44:	75 0a                	jne    c0001a50 <dlpvalloc+0x16>
c0001a46:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001a4b:	e8 8d f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a50:	a1 bc e3 02 c0       	mov    eax,ds:0xc002e3bc
c0001a55:	89 c1                	mov    ecx,eax
c0001a57:	52                   	push   edx
c0001a58:	f7 d9                	neg    ecx
c0001a5a:	52                   	push   edx
c0001a5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a5f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a63:	21 ca                	and    edx,ecx
c0001a65:	52                   	push   edx
c0001a66:	50                   	push   eax
c0001a67:	e8 a5 fd ff ff       	call   c0001811 <dlmemalign>
c0001a6c:	83 c4 1c             	add    esp,0x1c
c0001a6f:	c3                   	ret    

c0001a70 <dlmalloc_trim>:
c0001a70:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001a75:	e8 63 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a7a:	31 c0                	xor    eax,eax
c0001a7c:	c3                   	ret    

c0001a7d <dlmalloc_usable_size>:
c0001a7d:	53                   	push   ebx
c0001a7e:	31 c0                	xor    eax,eax
c0001a80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a84:	85 c9                	test   ecx,ecx
c0001a86:	74 24                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001a88:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a8b:	f6 c2 02             	test   dl,0x2
c0001a8e:	74 08                	je     c0001a98 <dlmalloc_usable_size+0x1b>
c0001a90:	83 e2 fc             	and    edx,0xfffffffc
c0001a93:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a96:	eb 14                	jmp    c0001aac <dlmalloc_usable_size+0x2f>
c0001a98:	89 d3                	mov    ebx,edx
c0001a9a:	31 c0                	xor    eax,eax
c0001a9c:	83 e3 fe             	and    ebx,0xfffffffe
c0001a9f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001aa4:	74 06                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001aa6:	83 e2 fc             	and    edx,0xfffffffc
c0001aa9:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aac:	5b                   	pop    ebx
c0001aad:	c3                   	ret    

c0001aae <dlmallinfo>:
c0001aae:	55                   	push   ebp
c0001aaf:	57                   	push   edi
c0001ab0:	56                   	push   esi
c0001ab1:	53                   	push   ebx
c0001ab2:	83 ec 08             	sub    esp,0x8
c0001ab5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab9:	83 3d 8c e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e08c,0x0
c0001ac0:	75 0a                	jne    c0001acc <dlmallinfo+0x1e>
c0001ac2:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001ac7:	e8 11 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001acc:	a1 8c e0 02 c0       	mov    eax,ds:0xc002e08c
c0001ad1:	31 ed                	xor    ebp,ebp
c0001ad3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ad6:	31 c9                	xor    ecx,ecx
c0001ad8:	83 e0 fc             	and    eax,0xfffffffc
c0001adb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001adf:	31 c0                	xor    eax,eax
c0001ae1:	8b 14 85 64 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1f9c]
c0001ae8:	85 d2                	test   edx,edx
c0001aea:	74 0e                	je     c0001afa <dlmallinfo+0x4c>
c0001aec:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aef:	45                   	inc    ebp
c0001af0:	83 e6 fc             	and    esi,0xfffffffc
c0001af3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001af6:	01 f1                	add    ecx,esi
c0001af8:	eb ee                	jmp    c0001ae8 <dlmallinfo+0x3a>
c0001afa:	40                   	inc    eax
c0001afb:	83 f8 0a             	cmp    eax,0xa
c0001afe:	75 e1                	jne    c0001ae1 <dlmallinfo+0x33>
c0001b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b04:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b0b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b0e:	b8 94 e0 02 c0       	mov    eax,0xc002e094
c0001b13:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b16:	39 f0                	cmp    eax,esi
c0001b18:	74 10                	je     c0001b2a <dlmallinfo+0x7c>
c0001b1a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b1d:	ff 04 24             	inc    DWORD PTR [esp]
c0001b20:	83 e7 fc             	and    edi,0xfffffffc
c0001b23:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b26:	01 fa                	add    edx,edi
c0001b28:	eb ec                	jmp    c0001b16 <dlmallinfo+0x68>
c0001b2a:	83 c0 08             	add    eax,0x8
c0001b2d:	3d 8c e3 02 c0       	cmp    eax,0xc002e38c
c0001b32:	75 df                	jne    c0001b13 <dlmallinfo+0x65>
c0001b34:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b37:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b3a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b3d:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0001b42:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b45:	89 03                	mov    DWORD PTR [ebx],eax
c0001b47:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b4a:	8b 35 b0 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3b0
c0001b50:	29 d0                	sub    eax,edx
c0001b52:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b58:	8b 35 c4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3c4
c0001b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b62:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b65:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b68:	8b 35 d4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3d4
c0001b6e:	89 d8                	mov    eax,ebx
c0001b70:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b73:	83 c4 08             	add    esp,0x8
c0001b76:	5b                   	pop    ebx
c0001b77:	5e                   	pop    esi
c0001b78:	5f                   	pop    edi
c0001b79:	5d                   	pop    ebp
c0001b7a:	c2 04 00             	ret    0x4

c0001b7d <dlmalloc_stats>:
c0001b7d:	83 ec 30             	sub    esp,0x30
c0001b80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b84:	50                   	push   eax
c0001b85:	e8 24 ff ff ff       	call   c0001aae <dlmallinfo>
c0001b8a:	83 c4 30             	add    esp,0x30
c0001b8d:	c3                   	ret    

c0001b8e <dlmallopt>:
c0001b8e:	56                   	push   esi
c0001b8f:	b8 60 e0 02 c0       	mov    eax,0xc002e060
c0001b94:	53                   	push   ebx
c0001b95:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b9d:	e8 3b f1 ff ff       	call   c0000cdd <malloc_consolidate>
c0001ba2:	8d 46 04             	lea    eax,[esi+0x4]
c0001ba5:	83 f8 05             	cmp    eax,0x5
c0001ba8:	77 67                	ja     c0001c11 <dlmallopt+0x83>
c0001baa:	ff 24 85 84 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6c7c]
c0001bb1:	83 fb 50             	cmp    ebx,0x50
c0001bb4:	77 5b                	ja     c0001c11 <dlmallopt+0x83>
c0001bb6:	ba 08 00 00 00       	mov    edx,0x8
c0001bbb:	85 db                	test   ebx,ebx
c0001bbd:	74 12                	je     c0001bd1 <dlmallopt+0x43>
c0001bbf:	83 c3 0b             	add    ebx,0xb
c0001bc2:	ba 10 00 00 00       	mov    edx,0x10
c0001bc7:	83 fb 0f             	cmp    ebx,0xf
c0001bca:	76 05                	jbe    c0001bd1 <dlmallopt+0x43>
c0001bcc:	89 da                	mov    edx,ebx
c0001bce:	83 e2 f8             	and    edx,0xfffffff8
c0001bd1:	a1 60 e0 02 c0       	mov    eax,ds:0xc002e060
c0001bd6:	83 e0 03             	and    eax,0x3
c0001bd9:	09 d0                	or     eax,edx
c0001bdb:	a3 60 e0 02 c0       	mov    ds:0xc002e060,eax
c0001be0:	eb 31                	jmp    c0001c13 <dlmallopt+0x85>
c0001be2:	89 1d a4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a4,ebx
c0001be8:	eb 06                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bea:	89 1d a8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a8,ebx
c0001bf0:	be 01 00 00 00       	mov    esi,0x1
c0001bf5:	eb 1c                	jmp    c0001c13 <dlmallopt+0x85>
c0001bf7:	89 1d ac e3 02 c0    	mov    DWORD PTR ds:0xc002e3ac,ebx
c0001bfd:	eb f1                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bff:	31 f6                	xor    esi,esi
c0001c01:	85 db                	test   ebx,ebx
c0001c03:	75 0e                	jne    c0001c13 <dlmallopt+0x85>
c0001c05:	c7 05 b4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3b4,0x0
c0001c0f:	eb df                	jmp    c0001bf0 <dlmallopt+0x62>
c0001c11:	31 f6                	xor    esi,esi
c0001c13:	89 f0                	mov    eax,esi
c0001c15:	5b                   	pop    ebx
c0001c16:	5e                   	pop    esi
c0001c17:	c3                   	ret    

c0001c18 <disk_status>:
c0001c18:	31 c0                	xor    eax,eax
c0001c1a:	c3                   	ret    

c0001c1b <disk_initialize>:
c0001c1b:	31 c0                	xor    eax,eax
c0001c1d:	c3                   	ret    

c0001c1e <disk_read>:
c0001c1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c23:	0f b6 04 85 40 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce4c0]
c0001c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c2f:	e9 ce f1 01 00       	jmp    c0020e02 <fatWrapperReadDisk>

c0001c34 <disk_write>:
c0001c34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c39:	0f b6 04 85 40 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce4c0]
c0001c41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c45:	e9 ff f1 01 00       	jmp    c0020e49 <fatWrapperWriteDisk>

c0001c4a <disk_ioctl>:
c0001c4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c53:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c58:	0f b6 04 85 40 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce4c0]
c0001c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c64:	e9 27 f2 01 00       	jmp    c0020e90 <fatWrapperIoctl>

c0001c69 <ld_word>:
c0001c69:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c70:	c1 e2 08             	shl    edx,0x8
c0001c73:	09 d0                	or     eax,edx
c0001c75:	c3                   	ret    

c0001c76 <ld_dword>:
c0001c76:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c7a:	89 d1                	mov    ecx,edx
c0001c7c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c80:	c1 e1 08             	shl    ecx,0x8
c0001c83:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c86:	09 ca                	or     edx,ecx
c0001c88:	c1 e2 08             	shl    edx,0x8
c0001c8b:	09 d0                	or     eax,edx
c0001c8d:	c3                   	ret    

c0001c8e <ld_qword>:
c0001c8e:	57                   	push   edi
c0001c8f:	56                   	push   esi
c0001c90:	53                   	push   ebx
c0001c91:	31 db                	xor    ebx,ebx
c0001c93:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c96:	89 df                	mov    edi,ebx
c0001c98:	89 ce                	mov    esi,ecx
c0001c9a:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c9e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca2:	c1 e6 08             	shl    esi,0x8
c0001ca5:	09 f2                	or     edx,esi
c0001ca7:	89 d6                	mov    esi,edx
c0001ca9:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cad:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb1:	c1 e6 08             	shl    esi,0x8
c0001cb4:	09 f2                	or     edx,esi
c0001cb6:	89 d6                	mov    esi,edx
c0001cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cbc:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cc0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cc3:	c1 e6 08             	shl    esi,0x8
c0001cc6:	89 fb                	mov    ebx,edi
c0001cc8:	09 f2                	or     edx,esi
c0001cca:	89 d1                	mov    ecx,edx
c0001ccc:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cd0:	c1 e1 08             	shl    ecx,0x8
c0001cd3:	89 da                	mov    edx,ebx
c0001cd5:	09 c8                	or     eax,ecx
c0001cd7:	5b                   	pop    ebx
c0001cd8:	5e                   	pop    esi
c0001cd9:	5f                   	pop    edi
c0001cda:	c3                   	ret    

c0001cdb <st_word>:
c0001cdb:	66 89 10             	mov    WORD PTR [eax],dx
c0001cde:	c3                   	ret    

c0001cdf <st_dword>:
c0001cdf:	89 10                	mov    DWORD PTR [eax],edx
c0001ce1:	c3                   	ret    

c0001ce2 <st_qword>:
c0001ce2:	89 10                	mov    DWORD PTR [eax],edx
c0001ce4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ce7:	c3                   	ret    

c0001ce8 <mem_cpy>:
c0001ce8:	85 c9                	test   ecx,ecx
c0001cea:	74 10                	je     c0001cfc <mem_cpy+0x14>
c0001cec:	57                   	push   edi
c0001ced:	01 c1                	add    ecx,eax
c0001cef:	56                   	push   esi
c0001cf0:	89 c7                	mov    edi,eax
c0001cf2:	89 d6                	mov    esi,edx
c0001cf4:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cf5:	39 f9                	cmp    ecx,edi
c0001cf7:	75 fb                	jne    c0001cf4 <mem_cpy+0xc>
c0001cf9:	5e                   	pop    esi
c0001cfa:	5f                   	pop    edi
c0001cfb:	c3                   	ret    
c0001cfc:	c3                   	ret    

c0001cfd <mem_set>:
c0001cfd:	01 c1                	add    ecx,eax
c0001cff:	40                   	inc    eax
c0001d00:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d03:	39 c8                	cmp    eax,ecx
c0001d05:	75 f8                	jne    c0001cff <mem_set+0x2>
c0001d07:	c3                   	ret    

c0001d08 <mem_cmp>:
c0001d08:	57                   	push   edi
c0001d09:	56                   	push   esi
c0001d0a:	89 c6                	mov    esi,eax
c0001d0c:	53                   	push   ebx
c0001d0d:	46                   	inc    esi
c0001d0e:	42                   	inc    edx
c0001d0f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d13:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d17:	29 fb                	sub    ebx,edi
c0001d19:	89 cf                	mov    edi,ecx
c0001d1b:	29 f7                	sub    edi,esi
c0001d1d:	01 c7                	add    edi,eax
c0001d1f:	74 04                	je     c0001d25 <mem_cmp+0x1d>
c0001d21:	85 db                	test   ebx,ebx
c0001d23:	74 e8                	je     c0001d0d <mem_cmp+0x5>
c0001d25:	89 d8                	mov    eax,ebx
c0001d27:	5b                   	pop    ebx
c0001d28:	5e                   	pop    esi
c0001d29:	5f                   	pop    edi
c0001d2a:	c3                   	ret    

c0001d2b <chk_chr>:
c0001d2b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d2e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d31:	74 07                	je     c0001d3a <chk_chr+0xf>
c0001d33:	39 d1                	cmp    ecx,edx
c0001d35:	74 03                	je     c0001d3a <chk_chr+0xf>
c0001d37:	40                   	inc    eax
c0001d38:	eb f1                	jmp    c0001d2b <chk_chr>
c0001d3a:	89 c8                	mov    eax,ecx
c0001d3c:	c3                   	ret    

c0001d3d <dbc_1st>:
c0001d3d:	31 c0                	xor    eax,eax
c0001d3f:	c3                   	ret    

c0001d40 <dbc_2nd>:
c0001d40:	31 c0                	xor    eax,eax
c0001d42:	c3                   	ret    

c0001d43 <tchar2uni>:
c0001d43:	57                   	push   edi
c0001d44:	89 c7                	mov    edi,eax
c0001d46:	56                   	push   esi
c0001d47:	53                   	push   ebx
c0001d48:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d4a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d4c:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d4f:	84 c9                	test   cl,cl
c0001d51:	78 0a                	js     c0001d5d <tchar2uni+0x1a>
c0001d53:	0f b6 d1             	movzx  edx,cl
c0001d56:	89 f3                	mov    ebx,esi
c0001d58:	e9 9f 00 00 00       	jmp    c0001dfc <tchar2uni+0xb9>
c0001d5d:	88 ca                	mov    dl,cl
c0001d5f:	83 e2 e0             	and    edx,0xffffffe0
c0001d62:	80 fa c0             	cmp    dl,0xc0
c0001d65:	75 0c                	jne    c0001d73 <tchar2uni+0x30>
c0001d67:	89 ca                	mov    edx,ecx
c0001d69:	b9 01 00 00 00       	mov    ecx,0x1
c0001d6e:	83 e2 1f             	and    edx,0x1f
c0001d71:	eb 2e                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d73:	88 ca                	mov    dl,cl
c0001d75:	83 e2 f0             	and    edx,0xfffffff0
c0001d78:	80 fa e0             	cmp    dl,0xe0
c0001d7b:	75 0c                	jne    c0001d89 <tchar2uni+0x46>
c0001d7d:	89 ca                	mov    edx,ecx
c0001d7f:	b9 02 00 00 00       	mov    ecx,0x2
c0001d84:	83 e2 0f             	and    edx,0xf
c0001d87:	eb 18                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d89:	88 ca                	mov    dl,cl
c0001d8b:	83 e2 f8             	and    edx,0xfffffff8
c0001d8e:	88 d0                	mov    al,dl
c0001d90:	83 ca ff             	or     edx,0xffffffff
c0001d93:	3c f0                	cmp    al,0xf0
c0001d95:	75 6c                	jne    c0001e03 <tchar2uni+0xc0>
c0001d97:	89 ca                	mov    edx,ecx
c0001d99:	b9 03 00 00 00       	mov    ecx,0x3
c0001d9e:	83 e2 07             	and    edx,0x7
c0001da1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001da5:	46                   	inc    esi
c0001da6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da9:	88 c8                	mov    al,cl
c0001dab:	83 e0 c0             	and    eax,0xffffffc0
c0001dae:	3c 80                	cmp    al,0x80
c0001db0:	75 4e                	jne    c0001e00 <tchar2uni+0xbd>
c0001db2:	c1 e2 06             	shl    edx,0x6
c0001db5:	83 e1 3f             	and    ecx,0x3f
c0001db8:	09 ca                	or     edx,ecx
c0001dba:	39 de                	cmp    esi,ebx
c0001dbc:	75 e7                	jne    c0001da5 <tchar2uni+0x62>
c0001dbe:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001dc1:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dc7:	77 37                	ja     c0001e00 <tchar2uni+0xbd>
c0001dc9:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dcf:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dd5:	76 29                	jbe    c0001e00 <tchar2uni+0xbd>
c0001dd7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ddd:	76 1d                	jbe    c0001dfc <tchar2uni+0xb9>
c0001ddf:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001de5:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001deb:	c1 e1 06             	shl    ecx,0x6
c0001dee:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dfc:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dfe:	eb 03                	jmp    c0001e03 <tchar2uni+0xc0>
c0001e00:	83 ca ff             	or     edx,0xffffffff
c0001e03:	5b                   	pop    ebx
c0001e04:	89 d0                	mov    eax,edx
c0001e06:	5e                   	pop    esi
c0001e07:	5f                   	pop    edi
c0001e08:	c3                   	ret    

c0001e09 <put_utf>:
c0001e09:	53                   	push   ebx
c0001e0a:	83 f8 7f             	cmp    eax,0x7f
c0001e0d:	89 c3                	mov    ebx,eax
c0001e0f:	b0 00                	mov    al,0x0
c0001e11:	77 11                	ja     c0001e24 <put_utf+0x1b>
c0001e13:	85 c9                	test   ecx,ecx
c0001e15:	0f 84 e5 00 00 00    	je     c0001f00 <put_utf+0xf7>
c0001e1b:	88 1a                	mov    BYTE PTR [edx],bl
c0001e1d:	b0 01                	mov    al,0x1
c0001e1f:	e9 dc 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e24:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e2a:	77 23                	ja     c0001e4f <put_utf+0x46>
c0001e2c:	83 f9 01             	cmp    ecx,0x1
c0001e2f:	0f 86 cb 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e35:	89 d8                	mov    eax,ebx
c0001e37:	83 e3 3f             	and    ebx,0x3f
c0001e3a:	c1 e8 06             	shr    eax,0x6
c0001e3d:	83 cb 80             	or     ebx,0xffffff80
c0001e40:	83 c8 c0             	or     eax,0xffffffc0
c0001e43:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e46:	88 02                	mov    BYTE PTR [edx],al
c0001e48:	b0 02                	mov    al,0x2
c0001e4a:	e9 b1 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e4f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e55:	77 40                	ja     c0001e97 <put_utf+0x8e>
c0001e57:	83 f9 02             	cmp    ecx,0x2
c0001e5a:	0f 86 a0 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e60:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e66:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e6c:	0f 86 8e 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e72:	89 d8                	mov    eax,ebx
c0001e74:	c1 e8 0c             	shr    eax,0xc
c0001e77:	83 c8 e0             	or     eax,0xffffffe0
c0001e7a:	88 02                	mov    BYTE PTR [edx],al
c0001e7c:	89 d8                	mov    eax,ebx
c0001e7e:	83 e3 3f             	and    ebx,0x3f
c0001e81:	c1 e8 06             	shr    eax,0x6
c0001e84:	83 cb 80             	or     ebx,0xffffff80
c0001e87:	83 e0 3f             	and    eax,0x3f
c0001e8a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e8d:	83 c8 80             	or     eax,0xffffff80
c0001e90:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e93:	b0 03                	mov    al,0x3
c0001e95:	eb 69                	jmp    c0001f00 <put_utf+0xf7>
c0001e97:	83 f9 03             	cmp    ecx,0x3
c0001e9a:	76 64                	jbe    c0001f00 <put_utf+0xf7>
c0001e9c:	89 d9                	mov    ecx,ebx
c0001e9e:	0f b7 c3             	movzx  eax,bx
c0001ea1:	66 31 c9             	xor    cx,cx
c0001ea4:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001eaa:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001eb0:	c1 e9 06             	shr    ecx,0x6
c0001eb3:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb9:	77 43                	ja     c0001efe <put_utf+0xf5>
c0001ebb:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ec1:	77 3b                	ja     c0001efe <put_utf+0xf5>
c0001ec3:	09 cb                	or     ebx,ecx
c0001ec5:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ecb:	89 d8                	mov    eax,ebx
c0001ecd:	c1 e8 12             	shr    eax,0x12
c0001ed0:	83 c8 f0             	or     eax,0xfffffff0
c0001ed3:	88 02                	mov    BYTE PTR [edx],al
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 e0 3f             	and    eax,0x3f
c0001edd:	83 c8 80             	or     eax,0xffffff80
c0001ee0:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ee3:	89 d8                	mov    eax,ebx
c0001ee5:	83 e3 3f             	and    ebx,0x3f
c0001ee8:	c1 e8 06             	shr    eax,0x6
c0001eeb:	83 cb 80             	or     ebx,0xffffff80
c0001eee:	83 e0 3f             	and    eax,0x3f
c0001ef1:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ef4:	83 c8 80             	or     eax,0xffffff80
c0001ef7:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001efa:	b0 04                	mov    al,0x4
c0001efc:	eb 02                	jmp    c0001f00 <put_utf+0xf7>
c0001efe:	31 c0                	xor    eax,eax
c0001f00:	5b                   	pop    ebx
c0001f01:	c3                   	ret    

c0001f02 <clst2sect>:
c0001f02:	89 c1                	mov    ecx,eax
c0001f04:	83 ea 02             	sub    edx,0x2
c0001f07:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f0a:	83 e8 02             	sub    eax,0x2
c0001f0d:	39 d0                	cmp    eax,edx
c0001f0f:	76 0d                	jbe    c0001f1e <clst2sect+0x1c>
c0001f11:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f15:	f7 e2                	mul    edx
c0001f17:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f1a:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f1d:	c3                   	ret    
c0001f1e:	31 c0                	xor    eax,eax
c0001f20:	31 d2                	xor    edx,edx
c0001f22:	c3                   	ret    

c0001f23 <clmt_clust>:
c0001f23:	57                   	push   edi
c0001f24:	89 cf                	mov    edi,ecx
c0001f26:	56                   	push   esi
c0001f27:	89 d6                	mov    esi,edx
c0001f29:	53                   	push   ebx
c0001f2a:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f2e:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f31:	89 f2                	mov    edx,esi
c0001f33:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f35:	c1 ef 09             	shr    edi,0x9
c0001f38:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f3c:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f3f:	89 f9                	mov    ecx,edi
c0001f41:	31 ff                	xor    edi,edi
c0001f43:	57                   	push   edi
c0001f44:	56                   	push   esi
c0001f45:	51                   	push   ecx
c0001f46:	52                   	push   edx
c0001f47:	e8 b8 4a 02 00       	call   c0026a04 <__udivdi3>
c0001f4c:	83 c4 10             	add    esp,0x10
c0001f4f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f51:	85 d2                	test   edx,edx
c0001f53:	74 10                	je     c0001f65 <clmt_clust+0x42>
c0001f55:	39 d0                	cmp    eax,edx
c0001f57:	72 07                	jb     c0001f60 <clmt_clust+0x3d>
c0001f59:	29 d0                	sub    eax,edx
c0001f5b:	83 c3 08             	add    ebx,0x8
c0001f5e:	eb ef                	jmp    c0001f4f <clmt_clust+0x2c>
c0001f60:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f63:	89 c2                	mov    edx,eax
c0001f65:	5b                   	pop    ebx
c0001f66:	89 d0                	mov    eax,edx
c0001f68:	5e                   	pop    esi
c0001f69:	5f                   	pop    edi
c0001f6a:	c3                   	ret    

c0001f6b <pick_lfn>:
c0001f6b:	55                   	push   ebp
c0001f6c:	57                   	push   edi
c0001f6d:	56                   	push   esi
c0001f6e:	89 d6                	mov    esi,edx
c0001f70:	53                   	push   ebx
c0001f71:	89 c3                	mov    ebx,eax
c0001f73:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f76:	e8 ee fc ff ff       	call   c0001c69 <ld_word>
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 04                	je     c0001f84 <pick_lfn+0x19>
c0001f80:	31 c0                	xor    eax,eax
c0001f82:	eb 5c                	jmp    c0001fe0 <pick_lfn+0x75>
c0001f84:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f87:	bd 01 00 00 00       	mov    ebp,0x1
c0001f8c:	83 e1 bf             	and    ecx,0xffffffbf
c0001f8f:	31 ff                	xor    edi,edi
c0001f91:	49                   	dec    ecx
c0001f92:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f95:	0f b6 87 a0 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6b60]
c0001f9c:	01 f0                	add    eax,esi
c0001f9e:	e8 c6 fc ff ff       	call   c0001c69 <ld_word>
c0001fa3:	66 85 ed             	test   bp,bp
c0001fa6:	74 11                	je     c0001fb9 <pick_lfn+0x4e>
c0001fa8:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fae:	77 d0                	ja     c0001f80 <pick_lfn+0x15>
c0001fb0:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fb4:	89 c5                	mov    ebp,eax
c0001fb6:	41                   	inc    ecx
c0001fb7:	eb 04                	jmp    c0001fbd <pick_lfn+0x52>
c0001fb9:	66 40                	inc    ax
c0001fbb:	75 c3                	jne    c0001f80 <pick_lfn+0x15>
c0001fbd:	47                   	inc    edi
c0001fbe:	83 ff 0d             	cmp    edi,0xd
c0001fc1:	75 d2                	jne    c0001f95 <pick_lfn+0x2a>
c0001fc3:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fc6:	74 13                	je     c0001fdb <pick_lfn+0x70>
c0001fc8:	66 85 ed             	test   bp,bp
c0001fcb:	74 0e                	je     c0001fdb <pick_lfn+0x70>
c0001fcd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fd3:	77 ab                	ja     c0001f80 <pick_lfn+0x15>
c0001fd5:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fdb:	b8 01 00 00 00       	mov    eax,0x1
c0001fe0:	5b                   	pop    ebx
c0001fe1:	5e                   	pop    esi
c0001fe2:	5f                   	pop    edi
c0001fe3:	5d                   	pop    ebp
c0001fe4:	c3                   	ret    

c0001fe5 <put_lfn>:
c0001fe5:	55                   	push   ebp
c0001fe6:	31 ed                	xor    ebp,ebp
c0001fe8:	57                   	push   edi
c0001fe9:	89 d7                	mov    edi,edx
c0001feb:	56                   	push   esi
c0001fec:	31 f6                	xor    esi,esi
c0001fee:	53                   	push   ebx
c0001fef:	83 ec 08             	sub    esp,0x8
c0001ff2:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ff5:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ffd:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002003:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002006:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002009:	31 d2                	xor    edx,edx
c000200b:	e8 cb fc ff ff       	call   c0001cdb <st_word>
c0002010:	0f b6 d9             	movzx  ebx,cl
c0002013:	4b                   	dec    ebx
c0002014:	6b db 0d             	imul   ebx,ebx,0xd
c0002017:	66 83 fe ff          	cmp    si,0xffff
c000201b:	74 08                	je     c0002025 <put_lfn+0x40>
c000201d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002020:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002024:	43                   	inc    ebx
c0002025:	0f b6 85 a0 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6b60]
c000202c:	0f b7 d6             	movzx  edx,si
c000202f:	01 f8                	add    eax,edi
c0002031:	e8 a5 fc ff ff       	call   c0001cdb <st_word>
c0002036:	66 85 f6             	test   si,si
c0002039:	75 03                	jne    c000203e <put_lfn+0x59>
c000203b:	83 ce ff             	or     esi,0xffffffff
c000203e:	45                   	inc    ebp
c000203f:	83 fd 0d             	cmp    ebp,0xd
c0002042:	75 d3                	jne    c0002017 <put_lfn+0x32>
c0002044:	66 46                	inc    si
c0002046:	74 0a                	je     c0002052 <put_lfn+0x6d>
c0002048:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000204b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002050:	75 09                	jne    c000205b <put_lfn+0x76>
c0002052:	88 c8                	mov    al,cl
c0002054:	83 c8 40             	or     eax,0x40
c0002057:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000205b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000205f:	88 07                	mov    BYTE PTR [edi],al
c0002061:	83 c4 08             	add    esp,0x8
c0002064:	5b                   	pop    ebx
c0002065:	5e                   	pop    esi
c0002066:	5f                   	pop    edi
c0002067:	5d                   	pop    ebp
c0002068:	c3                   	ret    

c0002069 <gen_numname>:
c0002069:	57                   	push   edi
c000206a:	89 cf                	mov    edi,ecx
c000206c:	56                   	push   esi
c000206d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002072:	53                   	push   ebx
c0002073:	89 c6                	mov    esi,eax
c0002075:	83 ec 10             	sub    esp,0x10
c0002078:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000207c:	e8 67 fc ff ff       	call   c0001ce8 <mem_cpy>
c0002081:	83 fb 05             	cmp    ebx,0x5
c0002084:	76 2d                	jbe    c00020b3 <gen_numname+0x4a>
c0002086:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002089:	66 85 c0             	test   ax,ax
c000208c:	74 25                	je     c00020b3 <gen_numname+0x4a>
c000208e:	83 c7 02             	add    edi,0x2
c0002091:	ba 10 00 00 00       	mov    edx,0x10
c0002096:	01 db                	add    ebx,ebx
c0002098:	89 c1                	mov    ecx,eax
c000209a:	66 d1 e8             	shr    ax,1
c000209d:	83 e1 01             	and    ecx,0x1
c00020a0:	01 cb                	add    ebx,ecx
c00020a2:	0f ba e3 10          	bt     ebx,0x10
c00020a6:	73 06                	jae    c00020ae <gen_numname+0x45>
c00020a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020ae:	4a                   	dec    edx
c00020af:	75 e5                	jne    c0002096 <gen_numname+0x2d>
c00020b1:	eb d3                	jmp    c0002086 <gen_numname+0x1d>
c00020b3:	b8 07 00 00 00       	mov    eax,0x7
c00020b8:	88 d9                	mov    cl,bl
c00020ba:	83 e1 0f             	and    ecx,0xf
c00020bd:	8d 51 30             	lea    edx,[ecx+0x30]
c00020c0:	80 fa 39             	cmp    dl,0x39
c00020c3:	76 03                	jbe    c00020c8 <gen_numname+0x5f>
c00020c5:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c8:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020cb:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020cf:	89 da                	mov    edx,ebx
c00020d1:	c1 ea 04             	shr    edx,0x4
c00020d4:	83 fb 0f             	cmp    ebx,0xf
c00020d7:	76 06                	jbe    c00020df <gen_numname+0x76>
c00020d9:	89 c8                	mov    eax,ecx
c00020db:	89 d3                	mov    ebx,edx
c00020dd:	eb d9                	jmp    c00020b8 <gen_numname+0x4f>
c00020df:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020e4:	31 d2                	xor    edx,edx
c00020e6:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e9:	8d 04 16             	lea    eax,[esi+edx*1]
c00020ec:	39 ca                	cmp    edx,ecx
c00020ee:	73 18                	jae    c0002108 <gen_numname+0x9f>
c00020f0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020f3:	3c 20                	cmp    al,0x20
c00020f5:	74 11                	je     c0002108 <gen_numname+0x9f>
c00020f7:	e8 41 fc ff ff       	call   c0001d3d <dbc_1st>
c00020fc:	85 c0                	test   eax,eax
c00020fe:	74 05                	je     c0002105 <gen_numname+0x9c>
c0002100:	39 d3                	cmp    ebx,edx
c0002102:	74 04                	je     c0002108 <gen_numname+0x9f>
c0002104:	42                   	inc    edx
c0002105:	42                   	inc    edx
c0002106:	eb e1                	jmp    c00020e9 <gen_numname+0x80>
c0002108:	b0 20                	mov    al,0x20
c000210a:	83 f9 07             	cmp    ecx,0x7
c000210d:	77 05                	ja     c0002114 <gen_numname+0xab>
c000210f:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002113:	41                   	inc    ecx
c0002114:	42                   	inc    edx
c0002115:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002119:	83 fa 07             	cmp    edx,0x7
c000211c:	76 ea                	jbe    c0002108 <gen_numname+0x9f>
c000211e:	83 c4 10             	add    esp,0x10
c0002121:	5b                   	pop    ebx
c0002122:	5e                   	pop    esi
c0002123:	5f                   	pop    edi
c0002124:	c3                   	ret    

c0002125 <sum_sfn>:
c0002125:	31 c9                	xor    ecx,ecx
c0002127:	31 d2                	xor    edx,edx
c0002129:	d0 ca                	ror    dl,1
c000212b:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c000212e:	41                   	inc    ecx
c000212f:	83 f9 0b             	cmp    ecx,0xb
c0002132:	75 f5                	jne    c0002129 <sum_sfn+0x4>
c0002134:	88 d0                	mov    al,dl
c0002136:	c3                   	ret    

c0002137 <xdir_sum>:
c0002137:	56                   	push   esi
c0002138:	31 c9                	xor    ecx,ecx
c000213a:	53                   	push   ebx
c000213b:	31 d2                	xor    edx,edx
c000213d:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002141:	43                   	inc    ebx
c0002142:	c1 e3 05             	shl    ebx,0x5
c0002145:	83 fa 02             	cmp    edx,0x2
c0002148:	74 0b                	je     c0002155 <xdir_sum+0x1e>
c000214a:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000214e:	66 d1 c9             	ror    cx,1
c0002151:	01 f1                	add    ecx,esi
c0002153:	eb 05                	jmp    c000215a <xdir_sum+0x23>
c0002155:	ba 03 00 00 00       	mov    edx,0x3
c000215a:	42                   	inc    edx
c000215b:	39 d3                	cmp    ebx,edx
c000215d:	77 e6                	ja     c0002145 <xdir_sum+0xe>
c000215f:	89 c8                	mov    eax,ecx
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	c3                   	ret    

c0002164 <xsum32>:
c0002164:	d1 ca                	ror    edx,1
c0002166:	0f b6 c0             	movzx  eax,al
c0002169:	01 d0                	add    eax,edx
c000216b:	c3                   	ret    

c000216c <get_xfileinfo>:
c000216c:	55                   	push   ebp
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	57                   	push   edi
c0002170:	bd 40 00 00 00       	mov    ebp,0x40
c0002175:	56                   	push   esi
c0002176:	31 ff                	xor    edi,edi
c0002178:	53                   	push   ebx
c0002179:	89 c6                	mov    esi,eax
c000217b:	83 ec 0c             	sub    esp,0xc
c000217e:	89 d3                	mov    ebx,edx
c0002180:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002187:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000218b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000218e:	76 6d                	jbe    c00021fd <get_xfileinfo+0x91>
c0002190:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002196:	76 0b                	jbe    c00021a3 <get_xfileinfo+0x37>
c0002198:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000219c:	bf 01 00 00 00       	mov    edi,0x1
c00021a1:	eb 63                	jmp    c0002206 <get_xfileinfo+0x9a>
c00021a3:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a9:	75 03                	jne    c00021ae <get_xfileinfo+0x42>
c00021ab:	83 c5 02             	add    ebp,0x2
c00021ae:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021b1:	83 c5 02             	add    ebp,0x2
c00021b4:	e8 b0 fa ff ff       	call   c0001c69 <ld_word>
c00021b9:	ff 04 24             	inc    DWORD PTR [esp]
c00021bc:	66 85 c9             	test   cx,cx
c00021bf:	75 0d                	jne    c00021ce <get_xfileinfo+0x62>
c00021c1:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021c7:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021cc:	76 2b                	jbe    c00021f9 <get_xfileinfo+0x8d>
c00021ce:	c1 e1 10             	shl    ecx,0x10
c00021d1:	ba ff 00 00 00       	mov    edx,0xff
c00021d6:	0f b7 c0             	movzx  eax,ax
c00021d9:	29 fa                	sub    edx,edi
c00021db:	09 c8                	or     eax,ecx
c00021dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021e1:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e9:	e8 1b fc ff ff       	call   c0001e09 <put_utf>
c00021ee:	84 c0                	test   al,al
c00021f0:	74 a6                	je     c0002198 <get_xfileinfo+0x2c>
c00021f2:	0f b6 c0             	movzx  eax,al
c00021f5:	01 c7                	add    edi,eax
c00021f7:	31 c0                	xor    eax,eax
c00021f9:	89 c1                	mov    ecx,eax
c00021fb:	eb 8a                	jmp    c0002187 <get_xfileinfo+0x1b>
c00021fd:	85 ff                	test   edi,edi
c00021ff:	74 97                	je     c0002198 <get_xfileinfo+0x2c>
c0002201:	66 85 c9             	test   cx,cx
c0002204:	75 92                	jne    c0002198 <get_xfileinfo+0x2c>
c0002206:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000220b:	31 c0                	xor    eax,eax
c000220d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002211:	31 d2                	xor    edx,edx
c0002213:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002216:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002219:	80 e1 10             	and    cl,0x10
c000221c:	75 08                	jne    c0002226 <get_xfileinfo+0xba>
c000221e:	8d 46 38             	lea    eax,[esi+0x38]
c0002221:	e8 68 fa ff ff       	call   c0001c8e <ld_qword>
c0002226:	89 03                	mov    DWORD PTR [ebx],eax
c0002228:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000222b:	8d 46 0c             	lea    eax,[esi+0xc]
c000222e:	e8 36 fa ff ff       	call   c0001c69 <ld_word>
c0002233:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002237:	8d 46 0e             	lea    eax,[esi+0xe]
c000223a:	e8 2a fa ff ff       	call   c0001c69 <ld_word>
c000223f:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002243:	83 c4 0c             	add    esp,0xc
c0002246:	5b                   	pop    ebx
c0002247:	5e                   	pop    esi
c0002248:	5f                   	pop    edi
c0002249:	5d                   	pop    ebp
c000224a:	c3                   	ret    

c000224b <get_ldnumber>:
c000224b:	8b 10                	mov    edx,DWORD PTR [eax]
c000224d:	85 d2                	test   edx,edx
c000224f:	74 14                	je     c0002265 <get_ldnumber+0x1a>
c0002251:	56                   	push   esi
c0002252:	53                   	push   ebx
c0002253:	89 d3                	mov    ebx,edx
c0002255:	43                   	inc    ebx
c0002256:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002259:	80 f9 1f             	cmp    cl,0x1f
c000225c:	76 0d                	jbe    c000226b <get_ldnumber+0x20>
c000225e:	80 f9 3a             	cmp    cl,0x3a
c0002261:	75 f2                	jne    c0002255 <get_ldnumber+0xa>
c0002263:	eb 0a                	jmp    c000226f <get_ldnumber+0x24>
c0002265:	83 c9 ff             	or     ecx,0xffffffff
c0002268:	89 c8                	mov    eax,ecx
c000226a:	c3                   	ret    
c000226b:	31 c9                	xor    ecx,ecx
c000226d:	eb 24                	jmp    c0002293 <get_ldnumber+0x48>
c000226f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002272:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002275:	80 f9 09             	cmp    cl,0x9
c0002278:	77 16                	ja     c0002290 <get_ldnumber+0x45>
c000227a:	83 c2 02             	add    edx,0x2
c000227d:	83 c9 ff             	or     ecx,0xffffffff
c0002280:	39 d3                	cmp    ebx,edx
c0002282:	75 0f                	jne    c0002293 <get_ldnumber+0x48>
c0002284:	89 f2                	mov    edx,esi
c0002286:	89 18                	mov    DWORD PTR [eax],ebx
c0002288:	0f be ca             	movsx  ecx,dl
c000228b:	83 e9 30             	sub    ecx,0x30
c000228e:	eb 03                	jmp    c0002293 <get_ldnumber+0x48>
c0002290:	83 c9 ff             	or     ecx,0xffffffff
c0002293:	89 c8                	mov    eax,ecx
c0002295:	5b                   	pop    ebx
c0002296:	5e                   	pop    esi
c0002297:	c3                   	ret    

c0002298 <crc32>:
c0002298:	56                   	push   esi
c0002299:	89 d6                	mov    esi,edx
c000229b:	53                   	push   ebx
c000229c:	b2 01                	mov    dl,0x1
c000229e:	bb 08 00 00 00       	mov    ebx,0x8
c00022a3:	89 f1                	mov    ecx,esi
c00022a5:	84 d1                	test   cl,dl
c00022a7:	0f 95 c1             	setne  cl
c00022aa:	0f b6 c9             	movzx  ecx,cl
c00022ad:	31 c1                	xor    ecx,eax
c00022af:	89 c8                	mov    eax,ecx
c00022b1:	d1 e8                	shr    eax,1
c00022b3:	80 e1 01             	and    cl,0x1
c00022b6:	74 05                	je     c00022bd <crc32+0x25>
c00022b8:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022bd:	d1 e2                	shl    edx,1
c00022bf:	4b                   	dec    ebx
c00022c0:	75 e1                	jne    c00022a3 <crc32+0xb>
c00022c2:	5b                   	pop    ebx
c00022c3:	5e                   	pop    esi
c00022c4:	c3                   	ret    

c00022c5 <test_gpt_header>:
c00022c5:	55                   	push   ebp
c00022c6:	b9 10 00 00 00       	mov    ecx,0x10
c00022cb:	57                   	push   edi
c00022cc:	ba a0 93 02 c0       	mov    edx,0xc00293a0
c00022d1:	56                   	push   esi
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	53                   	push   ebx
c00022d5:	89 c3                	mov    ebx,eax
c00022d7:	e8 2c fa ff ff       	call   c0001d08 <mem_cmp>
c00022dc:	85 c0                	test   eax,eax
c00022de:	75 55                	jne    c0002335 <test_gpt_header+0x70>
c00022e0:	89 c7                	mov    edi,eax
c00022e2:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022e7:	83 ce ff             	or     esi,0xffffffff
c00022ea:	31 d2                	xor    edx,edx
c00022ec:	83 fd 03             	cmp    ebp,0x3
c00022ef:	76 05                	jbe    c00022f6 <test_gpt_header+0x31>
c00022f1:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022f6:	89 f0                	mov    eax,esi
c00022f8:	45                   	inc    ebp
c00022f9:	e8 9a ff ff ff       	call   c0002298 <crc32>
c00022fe:	83 fd 4c             	cmp    ebp,0x4c
c0002301:	89 c6                	mov    esi,eax
c0002303:	75 e5                	jne    c00022ea <test_gpt_header+0x25>
c0002305:	8d 43 10             	lea    eax,[ebx+0x10]
c0002308:	f7 d6                	not    esi
c000230a:	e8 67 f9 ff ff       	call   c0001c76 <ld_dword>
c000230f:	39 c6                	cmp    esi,eax
c0002311:	75 22                	jne    c0002335 <test_gpt_header+0x70>
c0002313:	8d 43 54             	lea    eax,[ebx+0x54]
c0002316:	e8 5b f9 ff ff       	call   c0001c76 <ld_dword>
c000231b:	83 c0 80             	add    eax,0xffffff80
c000231e:	75 15                	jne    c0002335 <test_gpt_header+0x70>
c0002320:	8d 43 50             	lea    eax,[ebx+0x50]
c0002323:	e8 4e f9 ff ff       	call   c0001c76 <ld_dword>
c0002328:	3d 80 00 00 00       	cmp    eax,0x80
c000232d:	0f 96 c0             	setbe  al
c0002330:	0f b6 c0             	movzx  eax,al
c0002333:	89 c7                	mov    edi,eax
c0002335:	5b                   	pop    ebx
c0002336:	89 f8                	mov    eax,edi
c0002338:	5e                   	pop    esi
c0002339:	5f                   	pop    edi
c000233a:	5d                   	pop    ebp
c000233b:	c3                   	ret    

c000233c <make_rand>:
c000233c:	56                   	push   esi
c000233d:	85 c0                	test   eax,eax
c000233f:	53                   	push   ebx
c0002340:	75 05                	jne    c0002347 <make_rand+0xb>
c0002342:	b8 01 00 00 00       	mov    eax,0x1
c0002347:	01 d1                	add    ecx,edx
c0002349:	bb 08 00 00 00       	mov    ebx,0x8
c000234e:	89 c6                	mov    esi,eax
c0002350:	d1 e8                	shr    eax,1
c0002352:	83 e6 01             	and    esi,0x1
c0002355:	85 f6                	test   esi,esi
c0002357:	74 05                	je     c000235e <make_rand+0x22>
c0002359:	35 00 00 00 a3       	xor    eax,0xa3000000
c000235e:	4b                   	dec    ebx
c000235f:	75 ed                	jne    c000234e <make_rand+0x12>
c0002361:	42                   	inc    edx
c0002362:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002365:	39 ca                	cmp    edx,ecx
c0002367:	75 e0                	jne    c0002349 <make_rand+0xd>
c0002369:	5b                   	pop    ebx
c000236a:	5e                   	pop    esi
c000236b:	c3                   	ret    

c000236c <validate>:
c000236c:	56                   	push   esi
c000236d:	53                   	push   ebx
c000236e:	89 d6                	mov    esi,edx
c0002370:	51                   	push   ecx
c0002371:	85 c0                	test   eax,eax
c0002373:	75 09                	jne    c000237e <validate+0x12>
c0002375:	b8 09 00 00 00       	mov    eax,0x9
c000237a:	31 c9                	xor    ecx,ecx
c000237c:	eb 2f                	jmp    c00023ad <validate+0x41>
c000237e:	89 c3                	mov    ebx,eax
c0002380:	8b 00                	mov    eax,DWORD PTR [eax]
c0002382:	85 c0                	test   eax,eax
c0002384:	74 ef                	je     c0002375 <validate+0x9>
c0002386:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002389:	74 ea                	je     c0002375 <validate+0x9>
c000238b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000238f:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002393:	75 e0                	jne    c0002375 <validate+0x9>
c0002395:	83 ec 0c             	sub    esp,0xc
c0002398:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000239c:	50                   	push   eax
c000239d:	e8 76 f8 ff ff       	call   c0001c18 <disk_status>
c00023a2:	83 c4 10             	add    esp,0x10
c00023a5:	a8 01                	test   al,0x1
c00023a7:	75 cc                	jne    c0002375 <validate+0x9>
c00023a9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023ab:	31 c0                	xor    eax,eax
c00023ad:	89 0e                	mov    DWORD PTR [esi],ecx
c00023af:	5a                   	pop    edx
c00023b0:	5b                   	pop    ebx
c00023b1:	5e                   	pop    esi
c00023b2:	c3                   	ret    

c00023b3 <sync_window>:
c00023b3:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023b7:	0f 84 85 00 00 00    	je     c0002442 <sync_window+0x8f>
c00023bd:	55                   	push   ebp
c00023be:	8d 68 54             	lea    ebp,[eax+0x54]
c00023c1:	57                   	push   edi
c00023c2:	56                   	push   esi
c00023c3:	53                   	push   ebx
c00023c4:	89 c3                	mov    ebx,eax
c00023c6:	83 ec 28             	sub    esp,0x28
c00023c9:	6a 01                	push   0x1
c00023cb:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023ce:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023d1:	55                   	push   ebp
c00023d2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023d6:	50                   	push   eax
c00023d7:	e8 58 f8 ff ff       	call   c0001c34 <disk_write>
c00023dc:	83 c4 20             	add    esp,0x20
c00023df:	ba 01 00 00 00       	mov    edx,0x1
c00023e4:	85 c0                	test   eax,eax
c00023e6:	75 50                	jne    c0002438 <sync_window+0x85>
c00023e8:	31 ff                	xor    edi,edi
c00023ea:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ed:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023f1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023f5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f8:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023fb:	89 c6                	mov    esi,eax
c00023fd:	89 d7                	mov    edi,edx
c00023ff:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002402:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002406:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002409:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000240d:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002411:	73 23                	jae    c0002436 <sync_window+0x83>
c0002413:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002417:	75 1d                	jne    c0002436 <sync_window+0x83>
c0002419:	83 ec 0c             	sub    esp,0xc
c000241c:	6a 01                	push   0x1
c000241e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002422:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002426:	52                   	push   edx
c0002427:	50                   	push   eax
c0002428:	55                   	push   ebp
c0002429:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000242d:	50                   	push   eax
c000242e:	e8 01 f8 ff ff       	call   c0001c34 <disk_write>
c0002433:	83 c4 20             	add    esp,0x20
c0002436:	31 d2                	xor    edx,edx
c0002438:	83 c4 1c             	add    esp,0x1c
c000243b:	89 d0                	mov    eax,edx
c000243d:	5b                   	pop    ebx
c000243e:	5e                   	pop    esi
c000243f:	5f                   	pop    edi
c0002440:	5d                   	pop    ebp
c0002441:	c3                   	ret    
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 d0                	mov    eax,edx
c0002446:	c3                   	ret    

c0002447 <move_window>:
c0002447:	56                   	push   esi
c0002448:	53                   	push   ebx
c0002449:	89 c3                	mov    ebx,eax
c000244b:	83 ec 14             	sub    esp,0x14
c000244e:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002451:	75 07                	jne    c000245a <move_window+0x13>
c0002453:	31 f6                	xor    esi,esi
c0002455:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002458:	74 59                	je     c00024b3 <move_window+0x6c>
c000245a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000245e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002462:	89 d8                	mov    eax,ebx
c0002464:	e8 4a ff ff ff       	call   c00023b3 <sync_window>
c0002469:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000246d:	89 c6                	mov    esi,eax
c000246f:	85 c0                	test   eax,eax
c0002471:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002475:	75 3c                	jne    c00024b3 <move_window+0x6c>
c0002477:	83 ec 0c             	sub    esp,0xc
c000247a:	8d 43 54             	lea    eax,[ebx+0x54]
c000247d:	6a 01                	push   0x1
c000247f:	51                   	push   ecx
c0002480:	52                   	push   edx
c0002481:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002485:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002489:	50                   	push   eax
c000248a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000248e:	50                   	push   eax
c000248f:	e8 8a f7 ff ff       	call   c0001c1e <disk_read>
c0002494:	83 c4 20             	add    esp,0x20
c0002497:	85 c0                	test   eax,eax
c0002499:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000249d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024a1:	74 0a                	je     c00024ad <move_window+0x66>
c00024a3:	83 ca ff             	or     edx,0xffffffff
c00024a6:	be 01 00 00 00       	mov    esi,0x1
c00024ab:	89 d1                	mov    ecx,edx
c00024ad:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024b0:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	83 c4 14             	add    esp,0x14
c00024b8:	5b                   	pop    ebx
c00024b9:	5e                   	pop    esi
c00024ba:	c3                   	ret    

c00024bb <check_fs>:
c00024bb:	53                   	push   ebx
c00024bc:	89 c3                	mov    ebx,eax
c00024be:	83 ec 08             	sub    esp,0x8
c00024c1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024c5:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024cc:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024d3:	e8 6f ff ff ff       	call   c0002447 <move_window>
c00024d8:	ba 04 00 00 00       	mov    edx,0x4
c00024dd:	85 c0                	test   eax,eax
c00024df:	0f 85 89 00 00 00    	jne    c000256e <check_fs+0xb3>
c00024e5:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024eb:	e8 79 f7 ff ff       	call   c0001c69 <ld_word>
c00024f0:	ba 03 00 00 00       	mov    edx,0x3
c00024f5:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f9:	75 73                	jne    c000256e <check_fs+0xb3>
c00024fb:	ba c0 94 02 c0       	mov    edx,0xc00294c0
c0002500:	8d 43 54             	lea    eax,[ebx+0x54]
c0002503:	b9 0b 00 00 00       	mov    ecx,0xb
c0002508:	e8 fb f7 ff ff       	call   c0001d08 <mem_cmp>
c000250d:	ba 01 00 00 00       	mov    edx,0x1
c0002512:	85 c0                	test   eax,eax
c0002514:	74 58                	je     c000256e <check_fs+0xb3>
c0002516:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002519:	8d 50 18             	lea    edx,[eax+0x18]
c000251c:	80 fa 01             	cmp    dl,0x1
c000251f:	76 09                	jbe    c000252a <check_fs+0x6f>
c0002521:	ba 02 00 00 00       	mov    edx,0x2
c0002526:	3c eb                	cmp    al,0xeb
c0002528:	75 44                	jne    c000256e <check_fs+0xb3>
c000252a:	ba 80 c8 02 c0       	mov    edx,0xc002c880
c000252f:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002535:	b9 03 00 00 00       	mov    ecx,0x3
c000253a:	e8 c9 f7 ff ff       	call   c0001d08 <mem_cmp>
c000253f:	31 d2                	xor    edx,edx
c0002541:	85 c0                	test   eax,eax
c0002543:	74 29                	je     c000256e <check_fs+0xb3>
c0002545:	ba cc 94 02 c0       	mov    edx,0xc00294cc
c000254a:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002550:	b9 05 00 00 00       	mov    ecx,0x5
c0002555:	e8 ae f7 ff ff       	call   c0001d08 <mem_cmp>
c000255a:	31 d2                	xor    edx,edx
c000255c:	85 c0                	test   eax,eax
c000255e:	74 0e                	je     c000256e <check_fs+0xb3>
c0002560:	31 d2                	xor    edx,edx
c0002562:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002569:	0f 95 c2             	setne  dl
c000256c:	01 d2                	add    edx,edx
c000256e:	89 d0                	mov    eax,edx
c0002570:	83 c4 08             	add    esp,0x8
c0002573:	5b                   	pop    ebx
c0002574:	c3                   	ret    

c0002575 <find_volume>:
c0002575:	55                   	push   ebp
c0002576:	31 c9                	xor    ecx,ecx
c0002578:	57                   	push   edi
c0002579:	56                   	push   esi
c000257a:	89 d6                	mov    esi,edx
c000257c:	53                   	push   ebx
c000257d:	31 d2                	xor    edx,edx
c000257f:	83 ec 3c             	sub    esp,0x3c
c0002582:	89 c3                	mov    ebx,eax
c0002584:	e8 32 ff ff ff       	call   c00024bb <check_fs>
c0002589:	83 f8 02             	cmp    eax,0x2
c000258c:	74 0e                	je     c000259c <find_volume+0x27>
c000258e:	0f 87 5d 01 00 00    	ja     c00026f1 <find_volume+0x17c>
c0002594:	85 f6                	test   esi,esi
c0002596:	0f 84 55 01 00 00    	je     c00026f1 <find_volume+0x17c>
c000259c:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025a3:	0f 85 dd 00 00 00    	jne    c0002686 <find_volume+0x111>
c00025a9:	31 c9                	xor    ecx,ecx
c00025ab:	ba 01 00 00 00       	mov    edx,0x1
c00025b0:	89 d8                	mov    eax,ebx
c00025b2:	e8 90 fe ff ff       	call   c0002447 <move_window>
c00025b7:	85 c0                	test   eax,eax
c00025b9:	74 0a                	je     c00025c5 <find_volume+0x50>
c00025bb:	b8 04 00 00 00       	mov    eax,0x4
c00025c0:	e9 2c 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025c5:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c8:	89 e8                	mov    eax,ebp
c00025ca:	e8 f6 fc ff ff       	call   c00022c5 <test_gpt_header>
c00025cf:	85 c0                	test   eax,eax
c00025d1:	75 0a                	jne    c00025dd <find_volume+0x68>
c00025d3:	b8 03 00 00 00       	mov    eax,0x3
c00025d8:	e9 14 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025dd:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025e3:	e8 8e f6 ff ff       	call   c0001c76 <ld_dword>
c00025e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025ec:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025f2:	e8 97 f6 ff ff       	call   c0001c8e <ld_qword>
c00025f7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002603:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002607:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000260f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002613:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002617:	74 ba                	je     c00025d3 <find_volume+0x5e>
c0002619:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000261d:	31 c9                	xor    ecx,ecx
c000261f:	c1 e7 07             	shl    edi,0x7
c0002622:	89 d8                	mov    eax,ebx
c0002624:	89 fa                	mov    edx,edi
c0002626:	c1 ea 09             	shr    edx,0x9
c0002629:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000262d:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002631:	e8 11 fe ff ff       	call   c0002447 <move_window>
c0002636:	85 c0                	test   eax,eax
c0002638:	75 81                	jne    c00025bb <find_volume+0x46>
c000263a:	81 e7 80 01 00 00    	and    edi,0x180
c0002640:	b9 10 00 00 00       	mov    ecx,0x10
c0002645:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002649:	ba b0 94 02 c0       	mov    edx,0xc00294b0
c000264e:	e8 b5 f6 ff ff       	call   c0001d08 <mem_cmp>
c0002653:	85 c0                	test   eax,eax
c0002655:	75 29                	jne    c0002680 <find_volume+0x10b>
c0002657:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000265b:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000265f:	e8 2a f6 ff ff       	call   c0001c8e <ld_qword>
c0002664:	89 d1                	mov    ecx,edx
c0002666:	89 c2                	mov    edx,eax
c0002668:	89 d8                	mov    eax,ebx
c000266a:	e8 4c fe ff ff       	call   c00024bb <check_fs>
c000266f:	85 f6                	test   esi,esi
c0002671:	75 07                	jne    c000267a <find_volume+0x105>
c0002673:	83 f8 01             	cmp    eax,0x1
c0002676:	77 08                	ja     c0002680 <find_volume+0x10b>
c0002678:	eb 77                	jmp    c00026f1 <find_volume+0x17c>
c000267a:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000267e:	74 71                	je     c00026f1 <find_volume+0x17c>
c0002680:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002684:	eb 89                	jmp    c000260f <find_volume+0x9a>
c0002686:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000268a:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002690:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002696:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000269a:	89 cd                	mov    ebp,ecx
c000269c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026a0:	89 f8                	mov    eax,edi
c00026a2:	83 c7 10             	add    edi,0x10
c00026a5:	e8 cc f5 ff ff       	call   c0001c76 <ld_dword>
c00026aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026ae:	89 01                	mov    DWORD PTR [ecx],eax
c00026b0:	83 c1 04             	add    ecx,0x4
c00026b3:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026b7:	75 e3                	jne    c000269c <find_volume+0x127>
c00026b9:	31 ff                	xor    edi,edi
c00026bb:	85 f6                	test   esi,esi
c00026bd:	74 03                	je     c00026c2 <find_volume+0x14d>
c00026bf:	8d 7e ff             	lea    edi,[esi-0x1]
c00026c2:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026c6:	85 d2                	test   edx,edx
c00026c8:	74 14                	je     c00026de <find_volume+0x169>
c00026ca:	31 c9                	xor    ecx,ecx
c00026cc:	89 d8                	mov    eax,ebx
c00026ce:	e8 e8 fd ff ff       	call   c00024bb <check_fs>
c00026d3:	83 f8 01             	cmp    eax,0x1
c00026d6:	76 19                	jbe    c00026f1 <find_volume+0x17c>
c00026d8:	85 f6                	test   esi,esi
c00026da:	74 0f                	je     c00026eb <find_volume+0x176>
c00026dc:	eb 13                	jmp    c00026f1 <find_volume+0x17c>
c00026de:	85 f6                	test   esi,esi
c00026e0:	0f 85 ed fe ff ff    	jne    c00025d3 <find_volume+0x5e>
c00026e6:	b8 03 00 00 00       	mov    eax,0x3
c00026eb:	47                   	inc    edi
c00026ec:	83 ff 03             	cmp    edi,0x3
c00026ef:	76 d1                	jbe    c00026c2 <find_volume+0x14d>
c00026f1:	83 c4 3c             	add    esp,0x3c
c00026f4:	5b                   	pop    ebx
c00026f5:	5e                   	pop    esi
c00026f6:	5f                   	pop    edi
c00026f7:	5d                   	pop    ebp
c00026f8:	c3                   	ret    

c00026f9 <mount_volume>:
c00026f9:	55                   	push   ebp
c00026fa:	57                   	push   edi
c00026fb:	89 cf                	mov    edi,ecx
c00026fd:	56                   	push   esi
c00026fe:	53                   	push   ebx
c00026ff:	bb 0b 00 00 00       	mov    ebx,0xb
c0002704:	83 ec 3c             	sub    esp,0x3c
c0002707:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000270d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002711:	e8 35 fb ff ff       	call   c000224b <get_ldnumber>
c0002716:	85 c0                	test   eax,eax
c0002718:	0f 88 3a 05 00 00    	js     c0002c58 <mount_volume+0x55f>
c000271e:	8b 2c 85 00 e4 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1c00]
c0002725:	89 c6                	mov    esi,eax
c0002727:	bb 0c 00 00 00       	mov    ebx,0xc
c000272c:	85 ed                	test   ebp,ebp
c000272e:	0f 84 24 05 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002734:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002738:	83 e7 fe             	and    edi,0xfffffffe
c000273b:	89 2a                	mov    DWORD PTR [edx],ebp
c000273d:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002741:	74 32                	je     c0002775 <mount_volume+0x7c>
c0002743:	83 ec 0c             	sub    esp,0xc
c0002746:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000274a:	50                   	push   eax
c000274b:	e8 c8 f4 ff ff       	call   c0001c18 <disk_status>
c0002750:	83 c4 10             	add    esp,0x10
c0002753:	a8 01                	test   al,0x1
c0002755:	75 1e                	jne    c0002775 <mount_volume+0x7c>
c0002757:	31 db                	xor    ebx,ebx
c0002759:	89 f9                	mov    ecx,edi
c000275b:	84 c9                	test   cl,cl
c000275d:	0f 84 f5 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002763:	a8 04                	test   al,0x4
c0002765:	0f 84 ed 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c000276b:	bb 0a 00 00 00       	mov    ebx,0xa
c0002770:	e9 e3 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002775:	83 ec 0c             	sub    esp,0xc
c0002778:	89 f0                	mov    eax,esi
c000277a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000277e:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002781:	0f b6 f0             	movzx  esi,al
c0002784:	bb 03 00 00 00       	mov    ebx,0x3
c0002789:	56                   	push   esi
c000278a:	e8 8c f4 ff ff       	call   c0001c1b <disk_initialize>
c000278f:	83 c4 10             	add    esp,0x10
c0002792:	a8 01                	test   al,0x1
c0002794:	0f 85 be 04 00 00    	jne    c0002c58 <mount_volume+0x55f>
c000279a:	89 f9                	mov    ecx,edi
c000279c:	84 c9                	test   cl,cl
c000279e:	74 04                	je     c00027a4 <mount_volume+0xab>
c00027a0:	a8 04                	test   al,0x4
c00027a2:	75 c7                	jne    c000276b <mount_volume+0x72>
c00027a4:	31 d2                	xor    edx,edx
c00027a6:	89 e8                	mov    eax,ebp
c00027a8:	e8 c8 fd ff ff       	call   c0002575 <find_volume>
c00027ad:	83 f8 04             	cmp    eax,0x4
c00027b0:	75 0a                	jne    c00027bc <mount_volume+0xc3>
c00027b2:	bb 01 00 00 00       	mov    ebx,0x1
c00027b7:	e9 9c 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027bc:	83 f8 01             	cmp    eax,0x1
c00027bf:	76 0a                	jbe    c00027cb <mount_volume+0xd2>
c00027c1:	bb 0d 00 00 00       	mov    ebx,0xd
c00027c6:	e9 8d 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027cb:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027ce:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d9:	75 17                	jne    c00027f2 <mount_volume+0xf9>
c00027db:	b8 0b 00 00 00       	mov    eax,0xb
c00027e0:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027e5:	75 da                	jne    c00027c1 <mount_volume+0xc8>
c00027e7:	40                   	inc    eax
c00027e8:	83 f8 40             	cmp    eax,0x40
c00027eb:	75 f3                	jne    c00027e0 <mount_volume+0xe7>
c00027ed:	e9 5a 02 00 00       	jmp    c0002a4c <mount_volume+0x353>
c00027f2:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027f5:	e8 6f f4 ff ff       	call   c0001c69 <ld_word>
c00027fa:	66 3d 00 02          	cmp    ax,0x200
c00027fe:	75 c1                	jne    c00027c1 <mount_volume+0xc8>
c0002800:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002803:	e8 61 f4 ff ff       	call   c0001c69 <ld_word>
c0002808:	0f b7 c0             	movzx  eax,ax
c000280b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000280f:	85 c0                	test   eax,eax
c0002811:	75 0c                	jne    c000281f <mount_volume+0x126>
c0002813:	8d 45 78             	lea    eax,[ebp+0x78]
c0002816:	e8 5b f4 ff ff       	call   c0001c76 <ld_dword>
c000281b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000281f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002823:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002826:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002829:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000282d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002830:	48                   	dec    eax
c0002831:	3c 01                	cmp    al,0x1
c0002833:	77 8c                	ja     c00027c1 <mount_volume+0xc8>
c0002835:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002839:	89 c3                	mov    ebx,eax
c000283b:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000283f:	66 85 c0             	test   ax,ax
c0002842:	0f 84 79 ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002848:	8d 40 ff             	lea    eax,[eax-0x1]
c000284b:	85 d8                	test   eax,ebx
c000284d:	0f 85 6e ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002853:	8d 45 65             	lea    eax,[ebp+0x65]
c0002856:	e8 0e f4 ff ff       	call   c0001c69 <ld_word>
c000285b:	89 c7                	mov    edi,eax
c000285d:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002861:	a8 0f                	test   al,0xf
c0002863:	0f 85 58 ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002869:	8d 45 67             	lea    eax,[ebp+0x67]
c000286c:	e8 f8 f3 ff ff       	call   c0001c69 <ld_word>
c0002871:	0f b7 f0             	movzx  esi,ax
c0002874:	85 f6                	test   esi,esi
c0002876:	75 0a                	jne    c0002882 <mount_volume+0x189>
c0002878:	8d 45 74             	lea    eax,[ebp+0x74]
c000287b:	e8 f6 f3 ff ff       	call   c0001c76 <ld_dword>
c0002880:	89 c6                	mov    esi,eax
c0002882:	8d 45 62             	lea    eax,[ebp+0x62]
c0002885:	e8 df f3 ff ff       	call   c0001c69 <ld_word>
c000288a:	66 85 c0             	test   ax,ax
c000288d:	0f 84 2e ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002893:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002898:	0f b7 c8             	movzx  ecx,ax
c000289b:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028a4:	89 fa                	mov    edx,edi
c00028a6:	66 c1 ea 04          	shr    dx,0x4
c00028aa:	0f b7 d2             	movzx  edx,dx
c00028ad:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028b1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b8:	39 c6                	cmp    esi,eax
c00028ba:	0f 82 01 ff ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028c0:	29 c6                	sub    esi,eax
c00028c2:	31 d2                	xor    edx,edx
c00028c4:	89 f0                	mov    eax,esi
c00028c6:	f7 f3                	div    ebx
c00028c8:	39 de                	cmp    esi,ebx
c00028ca:	0f 82 f1 fe ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028d0:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028d5:	0f 87 e6 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00028db:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028e0:	0f 86 63 03 00 00    	jbe    c0002c49 <mount_volume+0x550>
c00028e6:	bb 03 00 00 00       	mov    ebx,0x3
c00028eb:	8d 70 02             	lea    esi,[eax+0x2]
c00028ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028f6:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f9:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028fc:	31 d2                	xor    edx,edx
c00028fe:	89 c8                	mov    eax,ecx
c0002900:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002903:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002907:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000290b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000290f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002913:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002916:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002919:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000291d:	31 d2                	xor    edx,edx
c000291f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002923:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002927:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000292a:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000292d:	83 fb 03             	cmp    ebx,0x3
c0002930:	75 2b                	jne    c000295d <mount_volume+0x264>
c0002932:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002935:	e8 2f f3 ff ff       	call   c0001c69 <ld_word>
c000293a:	66 09 c7             	or     di,ax
c000293d:	0f 85 7e fe ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002943:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002949:	c1 e6 02             	shl    esi,0x2
c000294c:	e8 25 f3 ff ff       	call   c0001c76 <ld_dword>
c0002951:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002958:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000295b:	eb 30                	jmp    c000298d <mount_volume+0x294>
c000295d:	66 85 ff             	test   di,di
c0002960:	0f 84 5b fe ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002966:	31 d2                	xor    edx,edx
c0002968:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000296c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002970:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002974:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002977:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000297a:	83 fb 02             	cmp    ebx,0x2
c000297d:	75 04                	jne    c0002983 <mount_volume+0x28a>
c000297f:	01 f6                	add    esi,esi
c0002981:	eb 0a                	jmp    c000298d <mount_volume+0x294>
c0002983:	8d 04 76             	lea    eax,[esi+esi*2]
c0002986:	83 e6 01             	and    esi,0x1
c0002989:	d1 e8                	shr    eax,1
c000298b:	01 c6                	add    esi,eax
c000298d:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002993:	c1 ee 09             	shr    esi,0x9
c0002996:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000299a:	0f 87 21 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00029a0:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029a7:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029ae:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029b2:	83 fb 03             	cmp    ebx,0x3
c00029b5:	75 7a                	jne    c0002a31 <mount_volume+0x338>
c00029b7:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029bd:	e8 a7 f2 ff ff       	call   c0001c69 <ld_word>
c00029c2:	66 48                	dec    ax
c00029c4:	75 6b                	jne    c0002a31 <mount_volume+0x338>
c00029c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029ce:	83 c2 01             	add    edx,0x1
c00029d1:	89 e8                	mov    eax,ebp
c00029d3:	83 d1 00             	adc    ecx,0x0
c00029d6:	e8 6c fa ff ff       	call   c0002447 <move_window>
c00029db:	85 c0                	test   eax,eax
c00029dd:	75 52                	jne    c0002a31 <mount_volume+0x338>
c00029df:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029e3:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e9:	e8 7b f2 ff ff       	call   c0001c69 <ld_word>
c00029ee:	66 3d 55 aa          	cmp    ax,0xaa55
c00029f2:	75 3d                	jne    c0002a31 <mount_volume+0x338>
c00029f4:	8d 45 54             	lea    eax,[ebp+0x54]
c00029f7:	e8 7a f2 ff ff       	call   c0001c76 <ld_dword>
c00029fc:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a01:	75 2e                	jne    c0002a31 <mount_volume+0x338>
c0002a03:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a09:	e8 68 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a0e:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a13:	75 1c                	jne    c0002a31 <mount_volume+0x338>
c0002a15:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a1b:	e8 56 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a20:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a23:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a29:	e8 48 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a2e:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a31:	66 a1 e0 e3 02 c0    	mov    ax,ds:0xc002e3e0
c0002a37:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a3a:	40                   	inc    eax
c0002a3b:	31 db                	xor    ebx,ebx
c0002a3d:	66 a3 e0 e3 02 c0    	mov    ds:0xc002e3e0,ax
c0002a43:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a47:	e9 0c 02 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002a4c:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a52:	e8 12 f2 ff ff       	call   c0001c69 <ld_word>
c0002a57:	66 3d 00 01          	cmp    ax,0x100
c0002a5b:	0f 85 60 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a61:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a68:	0f 85 53 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a6e:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a74:	e8 15 f2 ff ff       	call   c0001c8e <ld_qword>
c0002a79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a81:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a87:	e8 ea f1 ff ff       	call   c0001c76 <ld_dword>
c0002a8c:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a8f:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a95:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a98:	fe c8                	dec    al
c0002a9a:	0f 85 21 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002aa0:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002aa7:	bb 01 00 00 00       	mov    ebx,0x1
c0002aac:	d3 e3                	shl    ebx,cl
c0002aae:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002ab2:	66 85 db             	test   bx,bx
c0002ab5:	0f 84 06 fd ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002abb:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ac1:	e8 b0 f1 ff ff       	call   c0001c76 <ld_dword>
c0002ac6:	89 c6                	mov    esi,eax
c0002ac8:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002acd:	0f 87 ee fc ff ff    	ja     c00027c1 <mount_volume+0xc8>
c0002ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ad7:	8d 40 02             	lea    eax,[eax+0x2]
c0002ada:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002add:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ae0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002ae7:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aed:	e8 84 f1 ff ff       	call   c0001c76 <ld_dword>
c0002af2:	31 d2                	xor    edx,edx
c0002af4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b00:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b04:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b07:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b0a:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b10:	e8 61 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b15:	31 d2                	xor    edx,edx
c0002b17:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b1f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b23:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b26:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b29:	0f b7 c3             	movzx  eax,bx
c0002b2c:	31 d2                	xor    edx,edx
c0002b2e:	0f af f0             	imul   esi,eax
c0002b31:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b35:	89 f0                	mov    eax,esi
c0002b37:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b3b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b3f:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b43:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b47:	39 c1                	cmp    ecx,eax
c0002b49:	89 df                	mov    edi,ebx
c0002b4b:	19 d7                	sbb    edi,edx
c0002b4d:	0f 82 6e fc ff ff    	jb     c00027c1 <mount_volume+0xc8>
c0002b53:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b59:	31 db                	xor    ebx,ebx
c0002b5b:	e8 16 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b60:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b67:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b6a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b72:	85 db                	test   ebx,ebx
c0002b74:	75 39                	jne    c0002baf <mount_volume+0x4b6>
c0002b76:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b7a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b7e:	0f 86 3d fc ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002b84:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b87:	31 ff                	xor    edi,edi
c0002b89:	89 e8                	mov    eax,ebp
c0002b8b:	e8 72 f3 ff ff       	call   c0001f02 <clst2sect>
c0002b90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b94:	01 c6                	add    esi,eax
c0002b96:	89 e8                	mov    eax,ebp
c0002b98:	11 d7                	adc    edi,edx
c0002b9a:	89 f2                	mov    edx,esi
c0002b9c:	89 f9                	mov    ecx,edi
c0002b9e:	e8 a4 f8 ff ff       	call   c0002447 <move_window>
c0002ba3:	85 c0                	test   eax,eax
c0002ba5:	0f 85 07 fc ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002bab:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002baf:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bb4:	74 0b                	je     c0002bc1 <mount_volume+0x4c8>
c0002bb6:	83 c3 20             	add    ebx,0x20
c0002bb9:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bbf:	eb b1                	jmp    c0002b72 <mount_volume+0x479>
c0002bc1:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bc4:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc8:	e8 a9 f0 ff ff       	call   c0001c76 <ld_dword>
c0002bcd:	89 c3                	mov    ebx,eax
c0002bcf:	83 f8 01             	cmp    eax,0x1
c0002bd2:	0f 86 e9 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002bd8:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bdb:	0f 86 e0 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002be1:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002be4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be8:	0f af c2             	imul   eax,edx
c0002beb:	31 d2                	xor    edx,edx
c0002bed:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bf0:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bf3:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bf6:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf9:	31 c9                	xor    ecx,ecx
c0002bfb:	89 da                	mov    edx,ebx
c0002bfd:	89 e8                	mov    eax,ebp
c0002bff:	c1 ea 07             	shr    edx,0x7
c0002c02:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c05:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c08:	e8 3a f8 ff ff       	call   c0002447 <move_window>
c0002c0d:	85 c0                	test   eax,eax
c0002c0f:	0f 85 9d fb ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002c15:	89 d8                	mov    eax,ebx
c0002c17:	83 e0 7f             	and    eax,0x7f
c0002c1a:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c1d:	e8 54 f0 ff ff       	call   c0001c76 <ld_dword>
c0002c22:	83 f8 ff             	cmp    eax,0xffffffff
c0002c25:	74 0a                	je     c0002c31 <mount_volume+0x538>
c0002c27:	43                   	inc    ebx
c0002c28:	39 d8                	cmp    eax,ebx
c0002c2a:	74 cd                	je     c0002bf9 <mount_volume+0x500>
c0002c2c:	e9 90 fb ff ff       	jmp    c00027c1 <mount_volume+0xc8>
c0002c31:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c38:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c3f:	bb 04 00 00 00       	mov    ebx,0x4
c0002c44:	e9 e8 fd ff ff       	jmp    c0002a31 <mount_volume+0x338>
c0002c49:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c4e:	19 db                	sbb    ebx,ebx
c0002c50:	83 c3 02             	add    ebx,0x2
c0002c53:	e9 93 fc ff ff       	jmp    c00028eb <mount_volume+0x1f2>
c0002c58:	83 c4 3c             	add    esp,0x3c
c0002c5b:	89 d8                	mov    eax,ebx
c0002c5d:	5b                   	pop    ebx
c0002c5e:	5e                   	pop    esi
c0002c5f:	5f                   	pop    edi
c0002c60:	5d                   	pop    ebp
c0002c61:	c3                   	ret    

c0002c62 <find_bitmap>:
c0002c62:	55                   	push   ebp
c0002c63:	57                   	push   edi
c0002c64:	89 c7                	mov    edi,eax
c0002c66:	56                   	push   esi
c0002c67:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c6a:	53                   	push   ebx
c0002c6b:	83 ec 1c             	sub    esp,0x1c
c0002c6e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c75:	83 e8 02             	sub    eax,0x2
c0002c78:	39 f0                	cmp    eax,esi
c0002c7a:	77 02                	ja     c0002c7e <find_bitmap+0x1c>
c0002c7c:	31 f6                	xor    esi,esi
c0002c7e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c82:	89 f3                	mov    ebx,esi
c0002c84:	31 ed                	xor    ebp,ebp
c0002c86:	31 c9                	xor    ecx,ecx
c0002c88:	89 da                	mov    edx,ebx
c0002c8a:	89 f8                	mov    eax,edi
c0002c8c:	c1 ea 0c             	shr    edx,0xc
c0002c8f:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c92:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c95:	e8 ad f7 ff ff       	call   c0002447 <move_window>
c0002c9a:	85 c0                	test   eax,eax
c0002c9c:	75 68                	jne    c0002d06 <find_bitmap+0xa4>
c0002c9e:	89 da                	mov    edx,ebx
c0002ca0:	89 d9                	mov    ecx,ebx
c0002ca2:	c1 ea 03             	shr    edx,0x3
c0002ca5:	83 e1 07             	and    ecx,0x7
c0002ca8:	b8 01 00 00 00       	mov    eax,0x1
c0002cad:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cb3:	d3 e0                	shl    eax,cl
c0002cb5:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb8:	83 e9 02             	sub    ecx,0x2
c0002cbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cbf:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cc3:	43                   	inc    ebx
c0002cc4:	21 c1                	and    ecx,eax
c0002cc6:	d1 e0                	shl    eax,1
c0002cc8:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ccc:	77 09                	ja     c0002cd7 <find_bitmap+0x75>
c0002cce:	31 db                	xor    ebx,ebx
c0002cd0:	ba 00 02 00 00       	mov    edx,0x200
c0002cd5:	31 c0                	xor    eax,eax
c0002cd7:	84 c9                	test   cl,cl
c0002cd9:	75 10                	jne    c0002ceb <find_bitmap+0x89>
c0002cdb:	45                   	inc    ebp
c0002cdc:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ce0:	75 0f                	jne    c0002cf1 <find_bitmap+0x8f>
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	83 c0 02             	add    eax,0x2
c0002ce9:	eb 22                	jmp    c0002d0d <find_bitmap+0xab>
c0002ceb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cef:	31 ed                	xor    ebp,ebp
c0002cf1:	39 de                	cmp    esi,ebx
c0002cf3:	74 16                	je     c0002d0b <find_bitmap+0xa9>
c0002cf5:	84 c0                	test   al,al
c0002cf7:	75 c6                	jne    c0002cbf <find_bitmap+0x5d>
c0002cf9:	42                   	inc    edx
c0002cfa:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d00:	77 84                	ja     c0002c86 <find_bitmap+0x24>
c0002d02:	b0 01                	mov    al,0x1
c0002d04:	eb b9                	jmp    c0002cbf <find_bitmap+0x5d>
c0002d06:	83 c8 ff             	or     eax,0xffffffff
c0002d09:	eb 02                	jmp    c0002d0d <find_bitmap+0xab>
c0002d0b:	31 c0                	xor    eax,eax
c0002d0d:	83 c4 1c             	add    esp,0x1c
c0002d10:	5b                   	pop    ebx
c0002d11:	5e                   	pop    esi
c0002d12:	5f                   	pop    edi
c0002d13:	5d                   	pop    ebp
c0002d14:	c3                   	ret    

c0002d15 <change_bitmap>:
c0002d15:	55                   	push   ebp
c0002d16:	89 cd                	mov    ebp,ecx
c0002d18:	57                   	push   edi
c0002d19:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d1c:	56                   	push   esi
c0002d1d:	89 c7                	mov    edi,eax
c0002d1f:	53                   	push   ebx
c0002d20:	89 c8                	mov    eax,ecx
c0002d22:	83 ec 1c             	sub    esp,0x1c
c0002d25:	31 d2                	xor    edx,edx
c0002d27:	89 ce                	mov    esi,ecx
c0002d29:	c1 e8 0c             	shr    eax,0xc
c0002d2c:	bb 01 00 00 00       	mov    ebx,0x1
c0002d31:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d34:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d37:	c1 ee 03             	shr    esi,0x3
c0002d3a:	83 e1 07             	and    ecx,0x7
c0002d3d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d43:	d3 e3                	shl    ebx,cl
c0002d45:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d49:	89 c1                	mov    ecx,eax
c0002d4b:	89 d3                	mov    ebx,edx
c0002d4d:	83 c1 01             	add    ecx,0x1
c0002d50:	83 d3 00             	adc    ebx,0x0
c0002d53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d57:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d5b:	89 d1                	mov    ecx,edx
c0002d5d:	89 c2                	mov    edx,eax
c0002d5f:	89 f8                	mov    eax,edi
c0002d61:	e8 e1 f6 ff ff       	call   c0002447 <move_window>
c0002d66:	89 c1                	mov    ecx,eax
c0002d68:	85 c0                	test   eax,eax
c0002d6a:	75 48                	jne    c0002db4 <change_bitmap+0x9f>
c0002d6c:	31 d2                	xor    edx,edx
c0002d6e:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d72:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d76:	0f 95 c2             	setne  dl
c0002d79:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d7d:	74 3c                	je     c0002dbb <change_bitmap+0xa6>
c0002d7f:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d83:	4d                   	dec    ebp
c0002d84:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d88:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d8c:	74 32                	je     c0002dc0 <change_bitmap+0xab>
c0002d8e:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d92:	75 d8                	jne    c0002d6c <change_bitmap+0x57>
c0002d94:	8d 46 01             	lea    eax,[esi+0x1]
c0002d97:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d9c:	89 c3                	mov    ebx,eax
c0002d9e:	31 f6                	xor    esi,esi
c0002da0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002dae:	74 99                	je     c0002d49 <change_bitmap+0x34>
c0002db0:	89 de                	mov    esi,ebx
c0002db2:	eb b8                	jmp    c0002d6c <change_bitmap+0x57>
c0002db4:	b9 01 00 00 00       	mov    ecx,0x1
c0002db9:	eb 05                	jmp    c0002dc0 <change_bitmap+0xab>
c0002dbb:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc0:	83 c4 1c             	add    esp,0x1c
c0002dc3:	89 c8                	mov    eax,ecx
c0002dc5:	5b                   	pop    ebx
c0002dc6:	5e                   	pop    esi
c0002dc7:	5f                   	pop    edi
c0002dc8:	5d                   	pop    ebp
c0002dc9:	c3                   	ret    

c0002dca <put_fat>:
c0002dca:	83 fa 01             	cmp    edx,0x1
c0002dcd:	0f 86 7b 01 00 00    	jbe    c0002f4e <put_fat+0x184>
c0002dd3:	55                   	push   ebp
c0002dd4:	57                   	push   edi
c0002dd5:	89 cf                	mov    edi,ecx
c0002dd7:	56                   	push   esi
c0002dd8:	b9 02 00 00 00       	mov    ecx,0x2
c0002ddd:	53                   	push   ebx
c0002dde:	89 c6                	mov    esi,eax
c0002de0:	83 ec 1c             	sub    esp,0x1c
c0002de3:	89 d3                	mov    ebx,edx
c0002de5:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de8:	0f 86 68 01 00 00    	jbe    c0002f56 <put_fat+0x18c>
c0002dee:	8a 00                	mov    al,BYTE PTR [eax]
c0002df0:	3c 02                	cmp    al,0x2
c0002df2:	0f 84 c7 00 00 00    	je     c0002ebf <put_fat+0xf5>
c0002df8:	77 09                	ja     c0002e03 <put_fat+0x39>
c0002dfa:	fe c8                	dec    al
c0002dfc:	74 17                	je     c0002e15 <put_fat+0x4b>
c0002dfe:	e9 53 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e03:	b9 02 00 00 00       	mov    ecx,0x2
c0002e08:	3c 04                	cmp    al,0x4
c0002e0a:	0f 86 e1 00 00 00    	jbe    c0002ef1 <put_fat+0x127>
c0002e10:	e9 41 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e15:	89 d5                	mov    ebp,edx
c0002e17:	31 c9                	xor    ecx,ecx
c0002e19:	d1 ed                	shr    ebp,1
c0002e1b:	89 f0                	mov    eax,esi
c0002e1d:	01 d5                	add    ebp,edx
c0002e1f:	89 ea                	mov    edx,ebp
c0002e21:	c1 ea 09             	shr    edx,0x9
c0002e24:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e27:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e2a:	e8 18 f6 ff ff       	call   c0002447 <move_window>
c0002e2f:	89 c1                	mov    ecx,eax
c0002e31:	85 c0                	test   eax,eax
c0002e33:	0f 85 1d 01 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e39:	8d 46 54             	lea    eax,[esi+0x54]
c0002e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e40:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e43:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e4d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e51:	89 f8                	mov    eax,edi
c0002e53:	83 e3 01             	and    ebx,0x1
c0002e56:	74 0d                	je     c0002e65 <put_fat+0x9b>
c0002e58:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e5b:	89 fa                	mov    edx,edi
c0002e5d:	83 e0 0f             	and    eax,0xf
c0002e60:	c1 e2 04             	shl    edx,0x4
c0002e63:	09 d0                	or     eax,edx
c0002e65:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e6c:	31 c9                	xor    ecx,ecx
c0002e6e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e72:	c1 ea 09             	shr    edx,0x9
c0002e75:	89 f0                	mov    eax,esi
c0002e77:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e7a:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e7d:	e8 c5 f5 ff ff       	call   c0002447 <move_window>
c0002e82:	89 c1                	mov    ecx,eax
c0002e84:	85 c0                	test   eax,eax
c0002e86:	0f 85 ca 00 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e8c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e96:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e9a:	85 db                	test   ebx,ebx
c0002e9c:	74 07                	je     c0002ea5 <put_fat+0xdb>
c0002e9e:	c1 ef 04             	shr    edi,0x4
c0002ea1:	89 fa                	mov    edx,edi
c0002ea3:	eb 0e                	jmp    c0002eb3 <put_fat+0xe9>
c0002ea5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea8:	c1 ef 08             	shr    edi,0x8
c0002eab:	83 e2 f0             	and    edx,0xfffffff0
c0002eae:	83 e7 0f             	and    edi,0xf
c0002eb1:	09 fa                	or     edx,edi
c0002eb3:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eb6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eba:	e9 97 00 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002ebf:	31 c9                	xor    ecx,ecx
c0002ec1:	c1 ea 08             	shr    edx,0x8
c0002ec4:	89 f0                	mov    eax,esi
c0002ec6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ecc:	e8 76 f5 ff ff       	call   c0002447 <move_window>
c0002ed1:	89 c1                	mov    ecx,eax
c0002ed3:	85 c0                	test   eax,eax
c0002ed5:	75 7f                	jne    c0002f56 <put_fat+0x18c>
c0002ed7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edb:	01 db                	add    ebx,ebx
c0002edd:	0f b7 d7             	movzx  edx,di
c0002ee0:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ee6:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002eea:	e8 ec ed ff ff       	call   c0001cdb <st_word>
c0002eef:	eb 53                	jmp    c0002f44 <put_fat+0x17a>
c0002ef1:	31 c9                	xor    ecx,ecx
c0002ef3:	c1 ea 07             	shr    edx,0x7
c0002ef6:	89 f0                	mov    eax,esi
c0002ef8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002efb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002efe:	e8 44 f5 ff ff       	call   c0002447 <move_window>
c0002f03:	89 c1                	mov    ecx,eax
c0002f05:	85 c0                	test   eax,eax
c0002f07:	75 4d                	jne    c0002f56 <put_fat+0x18c>
c0002f09:	c1 e3 02             	shl    ebx,0x2
c0002f0c:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f12:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f15:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f19:	74 1c                	je     c0002f37 <put_fat+0x16d>
c0002f1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f1f:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f25:	89 d8                	mov    eax,ebx
c0002f27:	e8 4a ed ff ff       	call   c0001c76 <ld_dword>
c0002f2c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f30:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f35:	09 c7                	or     edi,eax
c0002f37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f3b:	89 fa                	mov    edx,edi
c0002f3d:	89 d8                	mov    eax,ebx
c0002f3f:	e8 9b ed ff ff       	call   c0001cdf <st_dword>
c0002f44:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f4c:	eb 08                	jmp    c0002f56 <put_fat+0x18c>
c0002f4e:	b9 02 00 00 00       	mov    ecx,0x2
c0002f53:	89 c8                	mov    eax,ecx
c0002f55:	c3                   	ret    
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	89 c8                	mov    eax,ecx
c0002f5b:	5b                   	pop    ebx
c0002f5c:	5e                   	pop    esi
c0002f5d:	5f                   	pop    edi
c0002f5e:	5d                   	pop    ebp
c0002f5f:	c3                   	ret    

c0002f60 <fill_last_frag>:
c0002f60:	57                   	push   edi
c0002f61:	89 cf                	mov    edi,ecx
c0002f63:	56                   	push   esi
c0002f64:	89 d6                	mov    esi,edx
c0002f66:	53                   	push   ebx
c0002f67:	89 c3                	mov    ebx,eax
c0002f69:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f6c:	85 c0                	test   eax,eax
c0002f6e:	74 21                	je     c0002f91 <fill_last_frag+0x31>
c0002f70:	89 f9                	mov    ecx,edi
c0002f72:	83 f8 01             	cmp    eax,0x1
c0002f75:	76 05                	jbe    c0002f7c <fill_last_frag+0x1c>
c0002f77:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f7a:	29 c1                	sub    ecx,eax
c0002f7c:	8d 56 01             	lea    edx,[esi+0x1]
c0002f7f:	29 c2                	sub    edx,eax
c0002f81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f83:	e8 42 fe ff ff       	call   c0002dca <put_fat>
c0002f88:	85 c0                	test   eax,eax
c0002f8a:	75 05                	jne    c0002f91 <fill_last_frag+0x31>
c0002f8c:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f8f:	eb d8                	jmp    c0002f69 <fill_last_frag+0x9>
c0002f91:	5b                   	pop    ebx
c0002f92:	5e                   	pop    esi
c0002f93:	5f                   	pop    edi
c0002f94:	c3                   	ret    

c0002f95 <fill_first_frag>:
c0002f95:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f99:	75 2d                	jne    c0002fc8 <fill_first_frag+0x33>
c0002f9b:	57                   	push   edi
c0002f9c:	56                   	push   esi
c0002f9d:	53                   	push   ebx
c0002f9e:	89 c3                	mov    ebx,eax
c0002fa0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fa3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fa6:	01 d7                	add    edi,edx
c0002fa8:	39 fa                	cmp    edx,edi
c0002faa:	74 14                	je     c0002fc0 <fill_first_frag+0x2b>
c0002fac:	8d 72 01             	lea    esi,[edx+0x1]
c0002faf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fb1:	89 f1                	mov    ecx,esi
c0002fb3:	e8 12 fe ff ff       	call   c0002dca <put_fat>
c0002fb8:	89 f2                	mov    edx,esi
c0002fba:	85 c0                	test   eax,eax
c0002fbc:	74 ea                	je     c0002fa8 <fill_first_frag+0x13>
c0002fbe:	eb 0b                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc0:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc4:	31 c0                	xor    eax,eax
c0002fc6:	eb 03                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc8:	31 c0                	xor    eax,eax
c0002fca:	c3                   	ret    
c0002fcb:	5b                   	pop    ebx
c0002fcc:	5e                   	pop    esi
c0002fcd:	5f                   	pop    edi
c0002fce:	c3                   	ret    

c0002fcf <get_fat>:
c0002fcf:	83 fa 01             	cmp    edx,0x1
c0002fd2:	0f 86 db 01 00 00    	jbe    c00031b3 <get_fat+0x1e4>
c0002fd8:	55                   	push   ebp
c0002fd9:	b9 01 00 00 00       	mov    ecx,0x1
c0002fde:	57                   	push   edi
c0002fdf:	56                   	push   esi
c0002fe0:	53                   	push   ebx
c0002fe1:	83 ec 1c             	sub    esp,0x1c
c0002fe4:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fe6:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe9:	0f 86 cc 01 00 00    	jbe    c00031bb <get_fat+0x1ec>
c0002fef:	89 c3                	mov    ebx,eax
c0002ff1:	89 d6                	mov    esi,edx
c0002ff3:	8a 07                	mov    al,BYTE PTR [edi]
c0002ff5:	3c 02                	cmp    al,0x2
c0002ff7:	0f 84 99 00 00 00    	je     c0003096 <get_fat+0xc7>
c0002ffd:	77 09                	ja     c0003008 <get_fat+0x39>
c0002fff:	fe c8                	dec    al
c0003001:	74 1a                	je     c000301d <get_fat+0x4e>
c0003003:	e9 b3 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003008:	3c 03                	cmp    al,0x3
c000300a:	0f 84 b5 00 00 00    	je     c00030c5 <get_fat+0xf6>
c0003010:	3c 04                	cmp    al,0x4
c0003012:	0f 84 e3 00 00 00    	je     c00030fb <get_fat+0x12c>
c0003018:	e9 9e 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c000301d:	89 d3                	mov    ebx,edx
c000301f:	31 c9                	xor    ecx,ecx
c0003021:	d1 eb                	shr    ebx,1
c0003023:	89 f8                	mov    eax,edi
c0003025:	01 d3                	add    ebx,edx
c0003027:	89 da                	mov    edx,ebx
c0003029:	c1 ea 09             	shr    edx,0x9
c000302c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000302f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003032:	e8 10 f4 ff ff       	call   c0002447 <move_window>
c0003037:	85 c0                	test   eax,eax
c0003039:	74 08                	je     c0003043 <get_fat+0x74>
c000303b:	83 c9 ff             	or     ecx,0xffffffff
c000303e:	e9 78 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003043:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003046:	31 c9                	xor    ecx,ecx
c0003048:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000304e:	89 ea                	mov    edx,ebp
c0003050:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003054:	c1 ea 09             	shr    edx,0x9
c0003057:	89 f8                	mov    eax,edi
c0003059:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305c:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000305f:	e8 e3 f3 ff ff       	call   c0002447 <move_window>
c0003064:	85 c0                	test   eax,eax
c0003066:	75 d3                	jne    c000303b <get_fat+0x6c>
c0003068:	0f b6 c3             	movzx  eax,bl
c000306b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003071:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003076:	c1 e3 08             	shl    ebx,0x8
c0003079:	09 c3                	or     ebx,eax
c000307b:	89 d9                	mov    ecx,ebx
c000307d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003083:	83 e6 01             	and    esi,0x1
c0003086:	0f 84 2f 01 00 00    	je     c00031bb <get_fat+0x1ec>
c000308c:	89 d9                	mov    ecx,ebx
c000308e:	c1 e9 04             	shr    ecx,0x4
c0003091:	e9 25 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003096:	31 c9                	xor    ecx,ecx
c0003098:	c1 ea 08             	shr    edx,0x8
c000309b:	89 f8                	mov    eax,edi
c000309d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a0:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030a3:	e8 9f f3 ff ff       	call   c0002447 <move_window>
c00030a8:	85 c0                	test   eax,eax
c00030aa:	75 8f                	jne    c000303b <get_fat+0x6c>
c00030ac:	01 f6                	add    esi,esi
c00030ae:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030b4:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b8:	e8 ac eb ff ff       	call   c0001c69 <ld_word>
c00030bd:	0f b7 c8             	movzx  ecx,ax
c00030c0:	e9 f6 00 00 00       	jmp    c00031bb <get_fat+0x1ec>
c00030c5:	31 c9                	xor    ecx,ecx
c00030c7:	c1 ea 07             	shr    edx,0x7
c00030ca:	89 f8                	mov    eax,edi
c00030cc:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030cf:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030d2:	e8 70 f3 ff ff       	call   c0002447 <move_window>
c00030d7:	85 c0                	test   eax,eax
c00030d9:	0f 85 5c ff ff ff    	jne    c000303b <get_fat+0x6c>
c00030df:	c1 e6 02             	shl    esi,0x2
c00030e2:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e8:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030ec:	e8 85 eb ff ff       	call   c0001c76 <ld_dword>
c00030f1:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030f6:	e9 b4 00 00 00       	jmp    c00031af <get_fat+0x1e0>
c00030fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003101:	89 d1                	mov    ecx,edx
c0003103:	09 c1                	or     ecx,eax
c0003105:	74 06                	je     c000310d <get_fat+0x13e>
c0003107:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000310b:	75 0f                	jne    c000311c <get_fat+0x14d>
c000310d:	b9 01 00 00 00       	mov    ecx,0x1
c0003112:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003116:	0f 85 9f 00 00 00    	jne    c00031bb <get_fat+0x1ec>
c000311c:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003120:	89 f5                	mov    ebp,esi
c0003122:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003127:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000312a:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000312d:	80 f9 02             	cmp    cl,0x2
c0003130:	75 35                	jne    c0003167 <get_fat+0x198>
c0003132:	83 c0 ff             	add    eax,0xffffffff
c0003135:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000313a:	83 d2 ff             	adc    edx,0xffffffff
c000313d:	31 db                	xor    ebx,ebx
c000313f:	0f ac d0 09          	shrd   eax,edx,0x9
c0003143:	53                   	push   ebx
c0003144:	c1 ea 09             	shr    edx,0x9
c0003147:	51                   	push   ecx
c0003148:	52                   	push   edx
c0003149:	50                   	push   eax
c000314a:	e8 b5 38 02 00       	call   c0026a04 <__udivdi3>
c000314f:	83 c4 10             	add    esp,0x10
c0003152:	b9 01 00 00 00       	mov    ecx,0x1
c0003157:	39 c5                	cmp    ebp,eax
c0003159:	77 60                	ja     c00031bb <get_fat+0x1ec>
c000315b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003160:	74 59                	je     c00031bb <get_fat+0x1ec>
c0003162:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003165:	eb 54                	jmp    c00031bb <get_fat+0x1ec>
c0003167:	80 f9 03             	cmp    cl,0x3
c000316a:	75 05                	jne    c0003171 <get_fat+0x1a2>
c000316c:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000316f:	77 f1                	ja     c0003162 <get_fat+0x193>
c0003171:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003176:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000317a:	75 3f                	jne    c00031bb <get_fat+0x1ec>
c000317c:	31 c9                	xor    ecx,ecx
c000317e:	89 f2                	mov    edx,esi
c0003180:	89 f8                	mov    eax,edi
c0003182:	c1 ea 07             	shr    edx,0x7
c0003185:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003188:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000318b:	e8 b7 f2 ff ff       	call   c0002447 <move_window>
c0003190:	85 c0                	test   eax,eax
c0003192:	0f 85 a3 fe ff ff    	jne    c000303b <get_fat+0x6c>
c0003198:	c1 e6 02             	shl    esi,0x2
c000319b:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031a1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031a5:	e8 cc ea ff ff       	call   c0001c76 <ld_dword>
c00031aa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031af:	89 c1                	mov    ecx,eax
c00031b1:	eb 08                	jmp    c00031bb <get_fat+0x1ec>
c00031b3:	b9 01 00 00 00       	mov    ecx,0x1
c00031b8:	89 c8                	mov    eax,ecx
c00031ba:	c3                   	ret    
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	89 c8                	mov    eax,ecx
c00031c0:	5b                   	pop    ebx
c00031c1:	5e                   	pop    esi
c00031c2:	5f                   	pop    edi
c00031c3:	5d                   	pop    ebp
c00031c4:	c3                   	ret    

c00031c5 <dir_sdi>:
c00031c5:	55                   	push   ebp
c00031c6:	57                   	push   edi
c00031c7:	56                   	push   esi
c00031c8:	53                   	push   ebx
c00031c9:	89 c3                	mov    ebx,eax
c00031cb:	83 ec 1c             	sub    esp,0x1c
c00031ce:	8b 38                	mov    edi,DWORD PTR [eax]
c00031d0:	31 c0                	xor    eax,eax
c00031d2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031d5:	0f 94 c0             	sete   al
c00031d8:	48                   	dec    eax
c00031d9:	25 00 00 20 f0       	and    eax,0xf0200000
c00031de:	05 00 00 00 10       	add    eax,0x10000000
c00031e3:	39 d0                	cmp    eax,edx
c00031e5:	77 0a                	ja     c00031f1 <dir_sdi+0x2c>
c00031e7:	b8 02 00 00 00       	mov    eax,0x2
c00031ec:	e9 c4 00 00 00       	jmp    c00032b5 <dir_sdi+0xf0>
c00031f1:	89 d6                	mov    esi,edx
c00031f3:	f6 c2 1f             	test   dl,0x1f
c00031f6:	75 ef                	jne    c00031e7 <dir_sdi+0x22>
c00031f8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031fb:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031fe:	85 c9                	test   ecx,ecx
c0003200:	75 2d                	jne    c000322f <dir_sdi+0x6a>
c0003202:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003205:	77 1b                	ja     c0003222 <dir_sdi+0x5d>
c0003207:	89 f2                	mov    edx,esi
c0003209:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000320d:	c1 ea 05             	shr    edx,0x5
c0003210:	39 c2                	cmp    edx,eax
c0003212:	73 d3                	jae    c00031e7 <dir_sdi+0x22>
c0003214:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003217:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000321a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000321d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003220:	eb 4b                	jmp    c000326d <dir_sdi+0xa8>
c0003222:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003225:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003229:	85 c0                	test   eax,eax
c000322b:	74 da                	je     c0003207 <dir_sdi+0x42>
c000322d:	89 c1                	mov    ecx,eax
c000322f:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003233:	c1 e5 09             	shl    ebp,0x9
c0003236:	89 ca                	mov    edx,ecx
c0003238:	39 ee                	cmp    esi,ebp
c000323a:	72 1c                	jb     c0003258 <dir_sdi+0x93>
c000323c:	89 d8                	mov    eax,ebx
c000323e:	e8 8c fd ff ff       	call   c0002fcf <get_fat>
c0003243:	89 c1                	mov    ecx,eax
c0003245:	83 f8 ff             	cmp    eax,0xffffffff
c0003248:	74 66                	je     c00032b0 <dir_sdi+0xeb>
c000324a:	83 f8 01             	cmp    eax,0x1
c000324d:	76 98                	jbe    c00031e7 <dir_sdi+0x22>
c000324f:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003252:	76 93                	jbe    c00031e7 <dir_sdi+0x22>
c0003254:	29 ee                	sub    esi,ebp
c0003256:	eb de                	jmp    c0003236 <dir_sdi+0x71>
c0003258:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000325c:	89 f8                	mov    eax,edi
c000325e:	e8 9f ec ff ff       	call   c0001f02 <clst2sect>
c0003263:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003267:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000326a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000326d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003270:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003273:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003276:	89 d1                	mov    ecx,edx
c0003278:	09 c1                	or     ecx,eax
c000327a:	0f 84 67 ff ff ff    	je     c00031e7 <dir_sdi+0x22>
c0003280:	89 f1                	mov    ecx,esi
c0003282:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000328a:	c1 e9 09             	shr    ecx,0x9
c000328d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003291:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003295:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003299:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000329c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032a2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032a5:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032ac:	31 c0                	xor    eax,eax
c00032ae:	eb 05                	jmp    c00032b5 <dir_sdi+0xf0>
c00032b0:	b8 01 00 00 00       	mov    eax,0x1
c00032b5:	83 c4 1c             	add    esp,0x1c
c00032b8:	5b                   	pop    ebx
c00032b9:	5e                   	pop    esi
c00032ba:	5f                   	pop    edi
c00032bb:	5d                   	pop    ebp
c00032bc:	c3                   	ret    

c00032bd <create_chain>:
c00032bd:	55                   	push   ebp
c00032be:	89 c5                	mov    ebp,eax
c00032c0:	57                   	push   edi
c00032c1:	56                   	push   esi
c00032c2:	53                   	push   ebx
c00032c3:	83 ec 1c             	sub    esp,0x1c
c00032c6:	85 d2                	test   edx,edx
c00032c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ce:	75 0e                	jne    c00032de <create_chain+0x21>
c00032d0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032d3:	85 ff                	test   edi,edi
c00032d5:	74 39                	je     c0003310 <create_chain+0x53>
c00032d7:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032da:	77 39                	ja     c0003315 <create_chain+0x58>
c00032dc:	eb 32                	jmp    c0003310 <create_chain+0x53>
c00032de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032e2:	e8 e8 fc ff ff       	call   c0002fcf <get_fat>
c00032e7:	89 c3                	mov    ebx,eax
c00032e9:	83 f8 01             	cmp    eax,0x1
c00032ec:	77 0a                	ja     c00032f8 <create_chain+0x3b>
c00032ee:	bb 01 00 00 00       	mov    ebx,0x1
c00032f3:	e9 ba 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c00032f8:	83 f8 ff             	cmp    eax,0xffffffff
c00032fb:	0f 84 62 01 00 00    	je     c0003463 <create_chain+0x1a6>
c0003301:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003304:	0f 87 a8 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c000330a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000330e:	eb 05                	jmp    c0003315 <create_chain+0x58>
c0003310:	bf 01 00 00 00       	mov    edi,0x1
c0003315:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003319:	75 07                	jne    c0003322 <create_chain+0x65>
c000331b:	31 db                	xor    ebx,ebx
c000331d:	e9 90 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c0003322:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003325:	75 74                	jne    c000339b <create_chain+0xde>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	89 fa                	mov    edx,edi
c000332e:	89 f0                	mov    eax,esi
c0003330:	e8 2d f9 ff ff       	call   c0002c62 <find_bitmap>
c0003335:	89 c3                	mov    ebx,eax
c0003337:	8d 40 ff             	lea    eax,[eax-0x1]
c000333a:	83 f8 fd             	cmp    eax,0xfffffffd
c000333d:	0f 87 6f 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c0003343:	83 ec 0c             	sub    esp,0xc
c0003346:	b9 01 00 00 00       	mov    ecx,0x1
c000334b:	6a 01                	push   0x1
c000334d:	89 da                	mov    edx,ebx
c000334f:	89 f0                	mov    eax,esi
c0003351:	e8 bf f9 ff ff       	call   c0002d15 <change_bitmap>
c0003356:	83 c4 10             	add    esp,0x10
c0003359:	83 f8 02             	cmp    eax,0x2
c000335c:	74 90                	je     c00032ee <create_chain+0x31>
c000335e:	83 f8 01             	cmp    eax,0x1
c0003361:	0f 84 fc 00 00 00    	je     c0003463 <create_chain+0x1a6>
c0003367:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000336c:	75 09                	jne    c0003377 <create_chain+0xba>
c000336e:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003372:	e9 0c 01 00 00       	jmp    c0003483 <create_chain+0x1c6>
c0003377:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000337b:	0f 85 e7 00 00 00    	jne    c0003468 <create_chain+0x1ab>
c0003381:	8d 57 01             	lea    edx,[edi+0x1]
c0003384:	39 da                	cmp    edx,ebx
c0003386:	0f 84 f7 00 00 00    	je     c0003483 <create_chain+0x1c6>
c000338c:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000338f:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003393:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003396:	e9 cd 00 00 00       	jmp    c0003468 <create_chain+0x1ab>
c000339b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000339f:	75 41                	jne    c00033e2 <create_chain+0x125>
c00033a1:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033a4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a7:	77 05                	ja     c00033ae <create_chain+0xf1>
c00033a9:	bb 02 00 00 00       	mov    ebx,0x2
c00033ae:	89 da                	mov    edx,ebx
c00033b0:	89 e8                	mov    eax,ebp
c00033b2:	e8 18 fc ff ff       	call   c0002fcf <get_fat>
c00033b7:	83 f8 01             	cmp    eax,0x1
c00033ba:	0f 84 2e ff ff ff    	je     c00032ee <create_chain+0x31>
c00033c0:	83 f8 ff             	cmp    eax,0xffffffff
c00033c3:	0f 84 9a 00 00 00    	je     c0003463 <create_chain+0x1a6>
c00033c9:	85 c0                	test   eax,eax
c00033cb:	74 11                	je     c00033de <create_chain+0x121>
c00033cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d0:	83 f8 01             	cmp    eax,0x1
c00033d3:	76 0d                	jbe    c00033e2 <create_chain+0x125>
c00033d5:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d8:	76 08                	jbe    c00033e2 <create_chain+0x125>
c00033da:	89 c7                	mov    edi,eax
c00033dc:	eb 04                	jmp    c00033e2 <create_chain+0x125>
c00033de:	85 db                	test   ebx,ebx
c00033e0:	75 38                	jne    c000341a <create_chain+0x15d>
c00033e2:	89 fb                	mov    ebx,edi
c00033e4:	43                   	inc    ebx
c00033e5:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e8:	77 0e                	ja     c00033f8 <create_chain+0x13b>
c00033ea:	83 ff 01             	cmp    edi,0x1
c00033ed:	0f 86 28 ff ff ff    	jbe    c000331b <create_chain+0x5e>
c00033f3:	bb 02 00 00 00       	mov    ebx,0x2
c00033f8:	89 da                	mov    edx,ebx
c00033fa:	89 e8                	mov    eax,ebp
c00033fc:	e8 ce fb ff ff       	call   c0002fcf <get_fat>
c0003401:	85 c0                	test   eax,eax
c0003403:	74 15                	je     c000341a <create_chain+0x15d>
c0003405:	83 f8 01             	cmp    eax,0x1
c0003408:	0f 84 e0 fe ff ff    	je     c00032ee <create_chain+0x31>
c000340e:	40                   	inc    eax
c000340f:	74 52                	je     c0003463 <create_chain+0x1a6>
c0003411:	39 fb                	cmp    ebx,edi
c0003413:	75 cf                	jne    c00033e4 <create_chain+0x127>
c0003415:	e9 01 ff ff ff       	jmp    c000331b <create_chain+0x5e>
c000341a:	83 c9 ff             	or     ecx,0xffffffff
c000341d:	89 da                	mov    edx,ebx
c000341f:	89 f0                	mov    eax,esi
c0003421:	e8 a4 f9 ff ff       	call   c0002dca <put_fat>
c0003426:	85 c0                	test   eax,eax
c0003428:	75 32                	jne    c000345c <create_chain+0x19f>
c000342a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000342f:	74 11                	je     c0003442 <create_chain+0x185>
c0003431:	89 d9                	mov    ecx,ebx
c0003433:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003437:	89 f0                	mov    eax,esi
c0003439:	e8 8c f9 ff ff       	call   c0002dca <put_fat>
c000343e:	85 c0                	test   eax,eax
c0003440:	75 1a                	jne    c000345c <create_chain+0x19f>
c0003442:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003445:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003448:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000344b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000344e:	39 d0                	cmp    eax,edx
c0003450:	77 04                	ja     c0003456 <create_chain+0x199>
c0003452:	48                   	dec    eax
c0003453:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003456:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000345a:	eb 56                	jmp    c00034b2 <create_chain+0x1f5>
c000345c:	48                   	dec    eax
c000345d:	0f 85 8b fe ff ff    	jne    c00032ee <create_chain+0x31>
c0003463:	83 cb ff             	or     ebx,0xffffffff
c0003466:	eb 4a                	jmp    c00034b2 <create_chain+0x1f5>
c0003468:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000346c:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000346f:	41                   	inc    ecx
c0003470:	39 d9                	cmp    ecx,ebx
c0003472:	75 19                	jne    c000348d <create_chain+0x1d0>
c0003474:	b9 02 00 00 00       	mov    ecx,0x2
c0003479:	85 d2                	test   edx,edx
c000347b:	74 03                	je     c0003480 <create_chain+0x1c3>
c000347d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003480:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003483:	85 c0                	test   eax,eax
c0003485:	0f 85 63 fe ff ff    	jne    c00032ee <create_chain+0x31>
c000348b:	eb b5                	jmp    c0003442 <create_chain+0x185>
c000348d:	85 d2                	test   edx,edx
c000348f:	75 07                	jne    c0003498 <create_chain+0x1db>
c0003491:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000349e:	89 e8                	mov    eax,ebp
c00034a0:	e8 bb fa ff ff       	call   c0002f60 <fill_last_frag>
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 b3                	jne    c000345c <create_chain+0x19f>
c00034a9:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034b0:	eb 90                	jmp    c0003442 <create_chain+0x185>
c00034b2:	83 c4 1c             	add    esp,0x1c
c00034b5:	89 d8                	mov    eax,ebx
c00034b7:	5b                   	pop    ebx
c00034b8:	5e                   	pop    esi
c00034b9:	5f                   	pop    edi
c00034ba:	5d                   	pop    ebp
c00034bb:	c3                   	ret    

c00034bc <remove_chain>:
c00034bc:	55                   	push   ebp
c00034bd:	57                   	push   edi
c00034be:	56                   	push   esi
c00034bf:	53                   	push   ebx
c00034c0:	83 ec 1c             	sub    esp,0x1c
c00034c3:	83 fa 01             	cmp    edx,0x1
c00034c6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034ca:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034cc:	77 0a                	ja     c00034d8 <remove_chain+0x1c>
c00034ce:	b8 02 00 00 00       	mov    eax,0x2
c00034d3:	e9 24 01 00 00       	jmp    c00035fc <remove_chain+0x140>
c00034d8:	89 d6                	mov    esi,edx
c00034da:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034dd:	76 ef                	jbe    c00034ce <remove_chain+0x12>
c00034df:	89 c7                	mov    edi,eax
c00034e1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034e6:	75 06                	jne    c00034ee <remove_chain+0x32>
c00034e8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034ec:	eb 54                	jmp    c0003542 <remove_chain+0x86>
c00034ee:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f1:	75 06                	jne    c00034f9 <remove_chain+0x3d>
c00034f3:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034f7:	74 ef                	je     c00034e8 <remove_chain+0x2c>
c00034f9:	83 c9 ff             	or     ecx,0xffffffff
c00034fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003500:	89 d8                	mov    eax,ebx
c0003502:	e8 c3 f8 ff ff       	call   c0002dca <put_fat>
c0003507:	85 c0                	test   eax,eax
c0003509:	74 dd                	je     c00034e8 <remove_chain+0x2c>
c000350b:	e9 ec 00 00 00       	jmp    c00035fc <remove_chain+0x140>
c0003510:	83 f8 01             	cmp    eax,0x1
c0003513:	74 b9                	je     c00034ce <remove_chain+0x12>
c0003515:	83 f8 ff             	cmp    eax,0xffffffff
c0003518:	74 6d                	je     c0003587 <remove_chain+0xcb>
c000351a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000351d:	75 6f                	jne    c000358e <remove_chain+0xd2>
c000351f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003522:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003525:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003528:	39 d0                	cmp    eax,edx
c000352a:	73 08                	jae    c0003534 <remove_chain+0x78>
c000352c:	40                   	inc    eax
c000352d:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003531:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003534:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003537:	39 e9                	cmp    ecx,ebp
c0003539:	75 64                	jne    c000359f <remove_chain+0xe3>
c000353b:	89 ee                	mov    esi,ebp
c000353d:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003540:	76 0f                	jbe    c0003551 <remove_chain+0x95>
c0003542:	89 f2                	mov    edx,esi
c0003544:	89 f8                	mov    eax,edi
c0003546:	e8 84 fa ff ff       	call   c0002fcf <get_fat>
c000354b:	89 c5                	mov    ebp,eax
c000354d:	85 c0                	test   eax,eax
c000354f:	75 bf                	jne    c0003510 <remove_chain+0x54>
c0003551:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003554:	0f 85 a0 00 00 00    	jne    c00035fa <remove_chain+0x13e>
c000355a:	eb 6c                	jmp    c00035c8 <remove_chain+0x10c>
c000355c:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000355f:	84 c0                	test   al,al
c0003561:	75 7d                	jne    c00035e0 <remove_chain+0x124>
c0003563:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003566:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000356a:	0f 84 86 00 00 00    	je     c00035f6 <remove_chain+0x13a>
c0003570:	89 da                	mov    edx,ebx
c0003572:	89 f8                	mov    eax,edi
c0003574:	e8 56 fa ff ff       	call   c0002fcf <get_fat>
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	0f 86 4c ff ff ff    	jbe    c00034ce <remove_chain+0x12>
c0003582:	83 f8 ff             	cmp    eax,0xffffffff
c0003585:	75 4e                	jne    c00035d5 <remove_chain+0x119>
c0003587:	b8 01 00 00 00       	mov    eax,0x1
c000358c:	eb 6e                	jmp    c00035fc <remove_chain+0x140>
c000358e:	31 c9                	xor    ecx,ecx
c0003590:	89 f2                	mov    edx,esi
c0003592:	89 d8                	mov    eax,ebx
c0003594:	e8 31 f8 ff ff       	call   c0002dca <put_fat>
c0003599:	85 c0                	test   eax,eax
c000359b:	74 82                	je     c000351f <remove_chain+0x63>
c000359d:	eb 5d                	jmp    c00035fc <remove_chain+0x140>
c000359f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035a2:	75 1b                	jne    c00035bf <remove_chain+0x103>
c00035a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a8:	89 d8                	mov    eax,ebx
c00035aa:	83 ec 0c             	sub    esp,0xc
c00035ad:	6a 00                	push   0x0
c00035af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035b3:	e8 5d f7 ff ff       	call   c0002d15 <change_bitmap>
c00035b8:	83 c4 10             	add    esp,0x10
c00035bb:	85 c0                	test   eax,eax
c00035bd:	75 3d                	jne    c00035fc <remove_chain+0x140>
c00035bf:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035c3:	e9 73 ff ff ff       	jmp    c000353b <remove_chain+0x7f>
c00035c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035cd:	75 8d                	jne    c000355c <remove_chain+0xa0>
c00035cf:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035d3:	eb 25                	jmp    c00035fa <remove_chain+0x13e>
c00035d5:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d8:	89 c3                	mov    ebx,eax
c00035da:	39 c2                	cmp    edx,eax
c00035dc:	74 88                	je     c0003566 <remove_chain+0xaa>
c00035de:	eb 1a                	jmp    c00035fa <remove_chain+0x13e>
c00035e0:	3c 03                	cmp    al,0x3
c00035e2:	75 16                	jne    c00035fa <remove_chain+0x13e>
c00035e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035e7:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035eb:	77 0d                	ja     c00035fa <remove_chain+0x13e>
c00035ed:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035f0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035f4:	72 04                	jb     c00035fa <remove_chain+0x13e>
c00035f6:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035fa:	31 c0                	xor    eax,eax
c00035fc:	83 c4 1c             	add    esp,0x1c
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_clear>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	56                   	push   esi
c0003607:	89 c6                	mov    esi,eax
c0003609:	53                   	push   ebx
c000360a:	83 ec 1c             	sub    esp,0x1c
c000360d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003611:	e8 9d ed ff ff       	call   c00023b3 <sync_window>
c0003616:	85 c0                	test   eax,eax
c0003618:	0f 85 de 00 00 00    	jne    c00036fc <dir_clear+0xf8>
c000361e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003622:	89 f0                	mov    eax,esi
c0003624:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003627:	e8 d6 e8 ff ff       	call   c0001f02 <clst2sect>
c000362c:	b9 00 02 00 00       	mov    ecx,0x200
c0003631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003639:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000363c:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000363f:	89 e8                	mov    eax,ebp
c0003641:	31 d2                	xor    edx,edx
c0003643:	e8 b5 e6 ff ff       	call   c0001cfd <mem_set>
c0003648:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000364c:	c1 e3 09             	shl    ebx,0x9
c000364f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003655:	76 1f                	jbe    c0003676 <dir_clear+0x72>
c0003657:	bb 00 80 00 00       	mov    ebx,0x8000
c000365c:	eb 18                	jmp    c0003676 <dir_clear+0x72>
c000365e:	83 ec 0c             	sub    esp,0xc
c0003661:	53                   	push   ebx
c0003662:	e8 35 4e 00 00       	call   c000849c <ff_memalloc>
c0003667:	83 c4 10             	add    esp,0x10
c000366a:	89 c7                	mov    edi,eax
c000366c:	85 c0                	test   eax,eax
c000366e:	0f 85 8f 00 00 00    	jne    c0003703 <dir_clear+0xff>
c0003674:	d1 eb                	shr    ebx,1
c0003676:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000367c:	77 e0                	ja     c000365e <dir_clear+0x5a>
c000367e:	31 db                	xor    ebx,ebx
c0003680:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003684:	39 d8                	cmp    eax,ebx
c0003686:	76 66                	jbe    c00036ee <dir_clear+0xea>
c0003688:	83 ec 0c             	sub    esp,0xc
c000368b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000368f:	6a 01                	push   0x1
c0003691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003699:	55                   	push   ebp
c000369a:	50                   	push   eax
c000369b:	e8 94 e5 ff ff       	call   c0001c34 <disk_write>
c00036a0:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036a5:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036aa:	83 c4 20             	add    esp,0x20
c00036ad:	85 c0                	test   eax,eax
c00036af:	75 3d                	jne    c00036ee <dir_clear+0xea>
c00036b1:	43                   	inc    ebx
c00036b2:	eb cc                	jmp    c0003680 <dir_clear+0x7c>
c00036b4:	83 ec 0c             	sub    esp,0xc
c00036b7:	31 d2                	xor    edx,edx
c00036b9:	55                   	push   ebp
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036c0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036c4:	52                   	push   edx
c00036c5:	50                   	push   eax
c00036c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036ca:	57                   	push   edi
c00036cb:	50                   	push   eax
c00036cc:	e8 63 e5 ff ff       	call   c0001c34 <disk_write>
c00036d1:	83 c4 20             	add    esp,0x20
c00036d4:	85 c0                	test   eax,eax
c00036d6:	75 0a                	jne    c00036e2 <dir_clear+0xde>
c00036d8:	01 eb                	add    ebx,ebp
c00036da:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036de:	39 d8                	cmp    eax,ebx
c00036e0:	77 d2                	ja     c00036b4 <dir_clear+0xb0>
c00036e2:	83 ec 0c             	sub    esp,0xc
c00036e5:	57                   	push   edi
c00036e6:	e8 c7 4d 00 00       	call   c00084b2 <ff_memfree>
c00036eb:	83 c4 10             	add    esp,0x10
c00036ee:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036f2:	39 d8                	cmp    eax,ebx
c00036f4:	0f 95 c0             	setne  al
c00036f7:	0f b6 c0             	movzx  eax,al
c00036fa:	eb 19                	jmp    c0003715 <dir_clear+0x111>
c00036fc:	b8 01 00 00 00       	mov    eax,0x1
c0003701:	eb 12                	jmp    c0003715 <dir_clear+0x111>
c0003703:	89 d9                	mov    ecx,ebx
c0003705:	31 d2                	xor    edx,edx
c0003707:	c1 eb 09             	shr    ebx,0x9
c000370a:	e8 ee e5 ff ff       	call   c0001cfd <mem_set>
c000370f:	89 dd                	mov    ebp,ebx
c0003711:	31 db                	xor    ebx,ebx
c0003713:	eb c5                	jmp    c00036da <dir_clear+0xd6>
c0003715:	83 c4 1c             	add    esp,0x1c
c0003718:	5b                   	pop    ebx
c0003719:	5e                   	pop    esi
c000371a:	5f                   	pop    edi
c000371b:	5d                   	pop    ebp
c000371c:	c3                   	ret    

c000371d <dir_next>:
c000371d:	55                   	push   ebp
c000371e:	57                   	push   edi
c000371f:	56                   	push   esi
c0003720:	53                   	push   ebx
c0003721:	89 c3                	mov    ebx,eax
c0003723:	83 ec 1c             	sub    esp,0x1c
c0003726:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003728:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000372f:	8d 78 20             	lea    edi,[eax+0x20]
c0003732:	31 c0                	xor    eax,eax
c0003734:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003738:	0f 94 c0             	sete   al
c000373b:	48                   	dec    eax
c000373c:	25 00 00 20 f0       	and    eax,0xf0200000
c0003741:	05 00 00 00 10       	add    eax,0x10000000
c0003746:	39 f8                	cmp    eax,edi
c0003748:	77 0e                	ja     c0003758 <dir_next+0x3b>
c000374a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003751:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003758:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000375b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000375e:	b8 04 00 00 00       	mov    eax,0x4
c0003763:	89 ce                	mov    esi,ecx
c0003765:	09 d6                	or     esi,edx
c0003767:	0f 84 da 00 00 00    	je     c0003847 <dir_next+0x12a>
c000376d:	89 f8                	mov    eax,edi
c000376f:	25 ff 01 00 00       	and    eax,0x1ff
c0003774:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003778:	0f 85 b9 00 00 00    	jne    c0003837 <dir_next+0x11a>
c000377e:	83 c2 01             	add    edx,0x1
c0003781:	83 d1 00             	adc    ecx,0x0
c0003784:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003787:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000378a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000378d:	85 d2                	test   edx,edx
c000378f:	75 29                	jne    c00037ba <dir_next+0x9d>
c0003791:	89 fa                	mov    edx,edi
c0003793:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003797:	c1 ea 05             	shr    edx,0x5
c000379a:	39 c2                	cmp    edx,eax
c000379c:	0f 82 95 00 00 00    	jb     c0003837 <dir_next+0x11a>
c00037a2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037b0:	b8 04 00 00 00       	mov    eax,0x4
c00037b5:	e9 8d 00 00 00       	jmp    c0003847 <dir_next+0x12a>
c00037ba:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037be:	89 f9                	mov    ecx,edi
c00037c0:	48                   	dec    eax
c00037c1:	c1 e9 09             	shr    ecx,0x9
c00037c4:	85 c8                	test   eax,ecx
c00037c6:	75 6f                	jne    c0003837 <dir_next+0x11a>
c00037c8:	89 d8                	mov    eax,ebx
c00037ca:	e8 00 f8 ff ff       	call   c0002fcf <get_fat>
c00037cf:	89 c6                	mov    esi,eax
c00037d1:	83 f8 01             	cmp    eax,0x1
c00037d4:	77 07                	ja     c00037dd <dir_next+0xc0>
c00037d6:	b8 02 00 00 00       	mov    eax,0x2
c00037db:	eb 6a                	jmp    c0003847 <dir_next+0x12a>
c00037dd:	83 f8 ff             	cmp    eax,0xffffffff
c00037e0:	75 07                	jne    c00037e9 <dir_next+0xcc>
c00037e2:	b8 01 00 00 00       	mov    eax,0x1
c00037e7:	eb 5e                	jmp    c0003847 <dir_next+0x12a>
c00037e9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037ec:	77 37                	ja     c0003825 <dir_next+0x108>
c00037ee:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037f3:	74 ad                	je     c00037a2 <dir_next+0x85>
c00037f5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f8:	89 d8                	mov    eax,ebx
c00037fa:	e8 be fa ff ff       	call   c00032bd <create_chain>
c00037ff:	89 c6                	mov    esi,eax
c0003801:	b8 07 00 00 00       	mov    eax,0x7
c0003806:	85 f6                	test   esi,esi
c0003808:	74 3d                	je     c0003847 <dir_next+0x12a>
c000380a:	83 fe 01             	cmp    esi,0x1
c000380d:	74 c7                	je     c00037d6 <dir_next+0xb9>
c000380f:	83 fe ff             	cmp    esi,0xffffffff
c0003812:	74 ce                	je     c00037e2 <dir_next+0xc5>
c0003814:	89 f2                	mov    edx,esi
c0003816:	89 e8                	mov    eax,ebp
c0003818:	e8 e7 fd ff ff       	call   c0003604 <dir_clear>
c000381d:	85 c0                	test   eax,eax
c000381f:	75 c1                	jne    c00037e2 <dir_next+0xc5>
c0003821:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003825:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003828:	89 f2                	mov    edx,esi
c000382a:	89 e8                	mov    eax,ebp
c000382c:	e8 d1 e6 ff ff       	call   c0001f02 <clst2sect>
c0003831:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003834:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000383b:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000383e:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003842:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003845:	31 c0                	xor    eax,eax
c0003847:	83 c4 1c             	add    esp,0x1c
c000384a:	5b                   	pop    ebx
c000384b:	5e                   	pop    esi
c000384c:	5f                   	pop    edi
c000384d:	5d                   	pop    ebp
c000384e:	c3                   	ret    

c000384f <load_xdir>:
c000384f:	55                   	push   ebp
c0003850:	57                   	push   edi
c0003851:	56                   	push   esi
c0003852:	89 c6                	mov    esi,eax
c0003854:	53                   	push   ebx
c0003855:	83 ec 1c             	sub    esp,0x1c
c0003858:	8b 00                	mov    eax,DWORD PTR [eax]
c000385a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000385d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003860:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003863:	e8 df eb ff ff       	call   c0002447 <move_window>
c0003868:	89 c3                	mov    ebx,eax
c000386a:	85 c0                	test   eax,eax
c000386c:	0f 85 0c 01 00 00    	jne    c000397e <load_xdir+0x12f>
c0003872:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003875:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003878:	0f 85 fb 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c000387e:	89 f8                	mov    eax,edi
c0003880:	b9 20 00 00 00       	mov    ecx,0x20
c0003885:	e8 5e e4 ff ff       	call   c0001ce8 <mem_cpy>
c000388a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000388e:	40                   	inc    eax
c000388f:	c1 e0 05             	shl    eax,0x5
c0003892:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003896:	83 e8 60             	sub    eax,0x60
c0003899:	3d 00 02 00 00       	cmp    eax,0x200
c000389e:	0f 87 d5 00 00 00    	ja     c0003979 <load_xdir+0x12a>
c00038a4:	31 d2                	xor    edx,edx
c00038a6:	89 f0                	mov    eax,esi
c00038a8:	e8 70 fe ff ff       	call   c000371d <dir_next>
c00038ad:	89 c3                	mov    ebx,eax
c00038af:	83 f8 04             	cmp    eax,0x4
c00038b2:	0f 84 c1 00 00 00    	je     c0003979 <load_xdir+0x12a>
c00038b8:	85 c0                	test   eax,eax
c00038ba:	0f 85 be 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038c0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038c3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c8:	e8 7a eb ff ff       	call   c0002447 <move_window>
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	85 c0                	test   eax,eax
c00038d1:	0f 85 a7 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038d7:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038da:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038dd:	0f 85 96 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c00038e3:	8d 47 20             	lea    eax,[edi+0x20]
c00038e6:	b9 20 00 00 00       	mov    ecx,0x20
c00038eb:	e8 f8 e3 ff ff       	call   c0001ce8 <mem_cpy>
c00038f0:	31 d2                	xor    edx,edx
c00038f2:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038f6:	b9 0f 00 00 00       	mov    ecx,0xf
c00038fb:	83 c0 2c             	add    eax,0x2c
c00038fe:	f7 f1                	div    ecx
c0003900:	c1 e0 05             	shl    eax,0x5
c0003903:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003907:	77 70                	ja     c0003979 <load_xdir+0x12a>
c0003909:	bd 40 00 00 00       	mov    ebp,0x40
c000390e:	31 d2                	xor    edx,edx
c0003910:	89 f0                	mov    eax,esi
c0003912:	e8 06 fe ff ff       	call   c000371d <dir_next>
c0003917:	89 c3                	mov    ebx,eax
c0003919:	83 f8 04             	cmp    eax,0x4
c000391c:	74 5b                	je     c0003979 <load_xdir+0x12a>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 5c                	jne    c000397e <load_xdir+0x12f>
c0003922:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003925:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003928:	8b 06                	mov    eax,DWORD PTR [esi]
c000392a:	e8 18 eb ff ff       	call   c0002447 <move_window>
c000392f:	89 c3                	mov    ebx,eax
c0003931:	85 c0                	test   eax,eax
c0003933:	75 49                	jne    c000397e <load_xdir+0x12f>
c0003935:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003938:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000393b:	75 3c                	jne    c0003979 <load_xdir+0x12a>
c000393d:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003943:	77 0d                	ja     c0003952 <load_xdir+0x103>
c0003945:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003948:	b9 20 00 00 00       	mov    ecx,0x20
c000394d:	e8 96 e3 ff ff       	call   c0001ce8 <mem_cpy>
c0003952:	83 c5 20             	add    ebp,0x20
c0003955:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003959:	77 b3                	ja     c000390e <load_xdir+0xbf>
c000395b:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003961:	77 1b                	ja     c000397e <load_xdir+0x12f>
c0003963:	89 f8                	mov    eax,edi
c0003965:	e8 cd e7 ff ff       	call   c0002137 <xdir_sum>
c000396a:	89 c1                	mov    ecx,eax
c000396c:	8d 47 02             	lea    eax,[edi+0x2]
c000396f:	e8 f5 e2 ff ff       	call   c0001c69 <ld_word>
c0003974:	66 39 c1             	cmp    cx,ax
c0003977:	74 05                	je     c000397e <load_xdir+0x12f>
c0003979:	bb 02 00 00 00       	mov    ebx,0x2
c000397e:	83 c4 1c             	add    esp,0x1c
c0003981:	89 d8                	mov    eax,ebx
c0003983:	5b                   	pop    ebx
c0003984:	5e                   	pop    esi
c0003985:	5f                   	pop    edi
c0003986:	5d                   	pop    ebp
c0003987:	c3                   	ret    

c0003988 <load_obj_xdir>:
c0003988:	53                   	push   ebx
c0003989:	89 c3                	mov    ebx,eax
c000398b:	83 ec 08             	sub    esp,0x8
c000398e:	8b 02                	mov    eax,DWORD PTR [edx]
c0003990:	89 03                	mov    DWORD PTR [ebx],eax
c0003992:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003995:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003998:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000399b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000399e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039a1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a8:	30 c0                	xor    al,al
c00039aa:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039b1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039b4:	89 d8                	mov    eax,ebx
c00039b6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b9:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039bc:	e8 04 f8 ff ff       	call   c00031c5 <dir_sdi>
c00039c1:	85 c0                	test   eax,eax
c00039c3:	75 0b                	jne    c00039d0 <load_obj_xdir+0x48>
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	83 c4 08             	add    esp,0x8
c00039ca:	5b                   	pop    ebx
c00039cb:	e9 7f fe ff ff       	jmp    c000384f <load_xdir>
c00039d0:	83 c4 08             	add    esp,0x8
c00039d3:	5b                   	pop    ebx
c00039d4:	c3                   	ret    

c00039d5 <dir_read>:
c00039d5:	55                   	push   ebp
c00039d6:	bd 04 00 00 00       	mov    ebp,0x4
c00039db:	57                   	push   edi
c00039dc:	56                   	push   esi
c00039dd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039e2:	53                   	push   ebx
c00039e3:	89 c3                	mov    ebx,eax
c00039e5:	83 ec 1c             	sub    esp,0x1c
c00039e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039ec:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ee:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039f3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039f6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f9:	89 c8                	mov    eax,ecx
c00039fb:	09 d0                	or     eax,edx
c00039fd:	0f 84 25 01 00 00    	je     c0003b28 <dir_read+0x153>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	e8 3d ea ff ff       	call   c0002447 <move_window>
c0003a0a:	89 c5                	mov    ebp,eax
c0003a0c:	85 c0                	test   eax,eax
c0003a0e:	0f 85 23 01 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a14:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a17:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a19:	84 c9                	test   cl,cl
c0003a1b:	0f 84 11 01 00 00    	je     c0003b32 <dir_read+0x15d>
c0003a21:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a24:	75 48                	jne    c0003a6e <dir_read+0x99>
c0003a26:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a2b:	74 10                	je     c0003a3d <dir_read+0x68>
c0003a2d:	80 f9 83             	cmp    cl,0x83
c0003a30:	0f 85 dd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a36:	31 ed                	xor    ebp,ebp
c0003a38:	e9 08 01 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a3d:	80 f9 85             	cmp    cl,0x85
c0003a40:	0f 85 cd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a46:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a49:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a4c:	89 d8                	mov    eax,ebx
c0003a4e:	e8 fc fd ff ff       	call   c000384f <load_xdir>
c0003a53:	89 c5                	mov    ebp,eax
c0003a55:	85 c0                	test   eax,eax
c0003a57:	0f 85 da 00 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a5d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a60:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a63:	83 e0 3f             	and    eax,0x3f
c0003a66:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a69:	e9 d7 00 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a6e:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a71:	83 e0 3f             	and    eax,0x3f
c0003a74:	80 f9 2e             	cmp    cl,0x2e
c0003a77:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a7b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a7e:	0f 84 8a 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a84:	80 f9 e5             	cmp    cl,0xe5
c0003a87:	0f 84 81 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a91:	83 e0 1f             	and    eax,0x1f
c0003a94:	83 f8 08             	cmp    eax,0x8
c0003a97:	0f 94 c0             	sete   al
c0003a9a:	0f b6 c0             	movzx  eax,al
c0003a9d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003aa1:	75 6b                	jne    c0003b0e <dir_read+0x139>
c0003aa3:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa8:	75 44                	jne    c0003aee <dir_read+0x119>
c0003aaa:	f6 c1 40             	test   cl,0x40
c0003aad:	74 12                	je     c0003ac1 <dir_read+0xec>
c0003aaf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003ab2:	83 e1 bf             	and    ecx,0xffffffbf
c0003ab5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003abc:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003abf:	eb 06                	jmp    c0003ac7 <dir_read+0xf2>
c0003ac1:	89 f0                	mov    eax,esi
c0003ac3:	38 c8                	cmp    al,cl
c0003ac5:	75 47                	jne    c0003b0e <dir_read+0x139>
c0003ac7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003acb:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad0:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003ad3:	75 3e                	jne    c0003b13 <dir_read+0x13e>
c0003ad5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad9:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003adc:	e8 8a e4 ff ff       	call   c0001f6b <pick_lfn>
c0003ae1:	85 c0                	test   eax,eax
c0003ae3:	74 2e                	je     c0003b13 <dir_read+0x13e>
c0003ae5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae9:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aec:	eb 25                	jmp    c0003b13 <dir_read+0x13e>
c0003aee:	89 f0                	mov    eax,esi
c0003af0:	84 c0                	test   al,al
c0003af2:	75 11                	jne    c0003b05 <dir_read+0x130>
c0003af4:	89 d0                	mov    eax,edx
c0003af6:	e8 2a e6 ff ff       	call   c0002125 <sum_sfn>
c0003afb:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003aff:	0f 84 31 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b05:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b0c:	eb 37                	jmp    c0003b45 <dir_read+0x170>
c0003b0e:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b13:	31 d2                	xor    edx,edx
c0003b15:	89 d8                	mov    eax,ebx
c0003b17:	e8 01 fc ff ff       	call   c000371d <dir_next>
c0003b1c:	89 c5                	mov    ebp,eax
c0003b1e:	85 c0                	test   eax,eax
c0003b20:	0f 84 cd fe ff ff    	je     c00039f3 <dir_read+0x1e>
c0003b26:	eb 0f                	jmp    c0003b37 <dir_read+0x162>
c0003b28:	85 ed                	test   ebp,ebp
c0003b2a:	0f 84 06 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b30:	eb 05                	jmp    c0003b37 <dir_read+0x162>
c0003b32:	bd 04 00 00 00       	mov    ebp,0x4
c0003b37:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b3e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b45:	83 c4 1c             	add    esp,0x1c
c0003b48:	89 e8                	mov    eax,ebp
c0003b4a:	5b                   	pop    ebx
c0003b4b:	5e                   	pop    esi
c0003b4c:	5f                   	pop    edi
c0003b4d:	5d                   	pop    ebp
c0003b4e:	c3                   	ret    

c0003b4f <dir_alloc>:
c0003b4f:	55                   	push   ebp
c0003b50:	89 d5                	mov    ebp,edx
c0003b52:	57                   	push   edi
c0003b53:	31 d2                	xor    edx,edx
c0003b55:	56                   	push   esi
c0003b56:	53                   	push   ebx
c0003b57:	89 c3                	mov    ebx,eax
c0003b59:	83 ec 0c             	sub    esp,0xc
c0003b5c:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b5e:	e8 62 f6 ff ff       	call   c00031c5 <dir_sdi>
c0003b63:	85 c0                	test   eax,eax
c0003b65:	75 4e                	jne    c0003bb5 <dir_alloc+0x66>
c0003b67:	31 f6                	xor    esi,esi
c0003b69:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b6c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b6f:	89 f8                	mov    eax,edi
c0003b71:	e8 d1 e8 ff ff       	call   c0002447 <move_window>
c0003b76:	85 c0                	test   eax,eax
c0003b78:	75 3b                	jne    c0003bb5 <dir_alloc+0x66>
c0003b7a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b7d:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b80:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b82:	75 07                	jne    c0003b8b <dir_alloc+0x3c>
c0003b84:	f7 d2                	not    edx
c0003b86:	c0 ea 07             	shr    dl,0x7
c0003b89:	eb 0d                	jmp    c0003b98 <dir_alloc+0x49>
c0003b8b:	84 d2                	test   dl,dl
c0003b8d:	0f 94 c1             	sete   cl
c0003b90:	80 fa e5             	cmp    dl,0xe5
c0003b93:	0f 94 c2             	sete   dl
c0003b96:	09 ca                	or     edx,ecx
c0003b98:	84 d2                	test   dl,dl
c0003b9a:	74 07                	je     c0003ba3 <dir_alloc+0x54>
c0003b9c:	46                   	inc    esi
c0003b9d:	39 ee                	cmp    esi,ebp
c0003b9f:	75 04                	jne    c0003ba5 <dir_alloc+0x56>
c0003ba1:	eb 1c                	jmp    c0003bbf <dir_alloc+0x70>
c0003ba3:	31 f6                	xor    esi,esi
c0003ba5:	ba 01 00 00 00       	mov    edx,0x1
c0003baa:	89 d8                	mov    eax,ebx
c0003bac:	e8 6c fb ff ff       	call   c000371d <dir_next>
c0003bb1:	85 c0                	test   eax,eax
c0003bb3:	74 b4                	je     c0003b69 <dir_alloc+0x1a>
c0003bb5:	83 f8 04             	cmp    eax,0x4
c0003bb8:	75 05                	jne    c0003bbf <dir_alloc+0x70>
c0003bba:	b8 07 00 00 00       	mov    eax,0x7
c0003bbf:	83 c4 0c             	add    esp,0xc
c0003bc2:	5b                   	pop    ebx
c0003bc3:	5e                   	pop    esi
c0003bc4:	5f                   	pop    edi
c0003bc5:	5d                   	pop    ebp
c0003bc6:	c3                   	ret    

c0003bc7 <store_xdir>:
c0003bc7:	55                   	push   ebp
c0003bc8:	57                   	push   edi
c0003bc9:	89 c7                	mov    edi,eax
c0003bcb:	56                   	push   esi
c0003bcc:	53                   	push   ebx
c0003bcd:	83 ec 0c             	sub    esp,0xc
c0003bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bd2:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bd5:	89 e8                	mov    eax,ebp
c0003bd7:	e8 5b e5 ff ff       	call   c0002137 <xdir_sum>
c0003bdc:	0f b7 d0             	movzx  edx,ax
c0003bdf:	8d 45 02             	lea    eax,[ebp+0x2]
c0003be2:	e8 f4 e0 ff ff       	call   c0001cdb <st_word>
c0003be7:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003beb:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bee:	89 f8                	mov    eax,edi
c0003bf0:	e8 d0 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003bf5:	89 c6                	mov    esi,eax
c0003bf7:	85 f6                	test   esi,esi
c0003bf9:	75 3d                	jne    c0003c38 <store_xdir+0x71>
c0003bfb:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bfe:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c01:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c03:	e8 3f e8 ff ff       	call   c0002447 <move_window>
c0003c08:	89 c6                	mov    esi,eax
c0003c0a:	85 c0                	test   eax,eax
c0003c0c:	75 2a                	jne    c0003c38 <store_xdir+0x71>
c0003c0e:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c11:	b9 20 00 00 00       	mov    ecx,0x20
c0003c16:	89 ea                	mov    edx,ebp
c0003c18:	e8 cb e0 ff ff       	call   c0001ce8 <mem_cpy>
c0003c1d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c1f:	85 db                	test   ebx,ebx
c0003c21:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c25:	74 11                	je     c0003c38 <store_xdir+0x71>
c0003c27:	31 d2                	xor    edx,edx
c0003c29:	89 f8                	mov    eax,edi
c0003c2b:	83 c5 20             	add    ebp,0x20
c0003c2e:	e8 ea fa ff ff       	call   c000371d <dir_next>
c0003c33:	4b                   	dec    ebx
c0003c34:	89 c6                	mov    esi,eax
c0003c36:	eb bf                	jmp    c0003bf7 <store_xdir+0x30>
c0003c38:	89 f0                	mov    eax,esi
c0003c3a:	83 fe 02             	cmp    esi,0x2
c0003c3d:	76 05                	jbe    c0003c44 <store_xdir+0x7d>
c0003c3f:	b8 02 00 00 00       	mov    eax,0x2
c0003c44:	83 c4 0c             	add    esp,0xc
c0003c47:	5b                   	pop    ebx
c0003c48:	5e                   	pop    esi
c0003c49:	5f                   	pop    edi
c0003c4a:	5d                   	pop    ebp
c0003c4b:	c3                   	ret    

c0003c4c <dir_remove>:
c0003c4c:	57                   	push   edi
c0003c4d:	56                   	push   esi
c0003c4e:	53                   	push   ebx
c0003c4f:	89 c3                	mov    ebx,eax
c0003c51:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c54:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c56:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c59:	83 fa ff             	cmp    edx,0xffffffff
c0003c5c:	74 09                	je     c0003c67 <dir_remove+0x1b>
c0003c5e:	e8 62 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003c63:	85 c0                	test   eax,eax
c0003c65:	75 41                	jne    c0003ca8 <dir_remove+0x5c>
c0003c67:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c6a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c6d:	89 f0                	mov    eax,esi
c0003c6f:	e8 d3 e7 ff ff       	call   c0002447 <move_window>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	75 26                	jne    c0003c9e <dir_remove+0x52>
c0003c78:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c7b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c7e:	75 05                	jne    c0003c85 <dir_remove+0x39>
c0003c80:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c83:	eb 03                	jmp    c0003c88 <dir_remove+0x3c>
c0003c85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c8c:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c8f:	73 17                	jae    c0003ca8 <dir_remove+0x5c>
c0003c91:	31 d2                	xor    edx,edx
c0003c93:	89 d8                	mov    eax,ebx
c0003c95:	e8 83 fa ff ff       	call   c000371d <dir_next>
c0003c9a:	85 c0                	test   eax,eax
c0003c9c:	74 c9                	je     c0003c67 <dir_remove+0x1b>
c0003c9e:	83 f8 04             	cmp    eax,0x4
c0003ca1:	75 05                	jne    c0003ca8 <dir_remove+0x5c>
c0003ca3:	b8 02 00 00 00       	mov    eax,0x2
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	c3                   	ret    

c0003cac <create_name>:
c0003cac:	55                   	push   ebp
c0003cad:	89 d5                	mov    ebp,edx
c0003caf:	57                   	push   edi
c0003cb0:	89 c7                	mov    edi,eax
c0003cb2:	56                   	push   esi
c0003cb3:	31 f6                	xor    esi,esi
c0003cb5:	53                   	push   ebx
c0003cb6:	83 ec 3c             	sub    esp,0x3c
c0003cb9:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cbb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ccc:	e8 72 e0 ff ff       	call   c0001d43 <tchar2uni>
c0003cd1:	89 c3                	mov    ebx,eax
c0003cd3:	83 f8 ff             	cmp    eax,0xffffffff
c0003cd6:	75 0a                	jne    c0003ce2 <create_name+0x36>
c0003cd8:	b8 06 00 00 00       	mov    eax,0x6
c0003cdd:	e9 9e 02 00 00       	jmp    c0003f80 <create_name+0x2d4>
c0003ce2:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ce7:	76 0c                	jbe    c0003cf5 <create_name+0x49>
c0003ce9:	c1 e8 10             	shr    eax,0x10
c0003cec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cf0:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cf4:	46                   	inc    esi
c0003cf5:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf9:	76 4f                	jbe    c0003d4a <create_name+0x9e>
c0003cfb:	66 83 fb 5c          	cmp    bx,0x5c
c0003cff:	74 35                	je     c0003d36 <create_name+0x8a>
c0003d01:	66 83 fb 2f          	cmp    bx,0x2f
c0003d05:	74 2f                	je     c0003d36 <create_name+0x8a>
c0003d07:	66 83 fb 7f          	cmp    bx,0x7f
c0003d0b:	77 11                	ja     c0003d1e <create_name+0x72>
c0003d0d:	0f b7 d3             	movzx  edx,bx
c0003d10:	b8 d2 94 02 c0       	mov    eax,0xc00294d2
c0003d15:	e8 11 e0 ff ff       	call   c0001d2b <chk_chr>
c0003d1a:	85 c0                	test   eax,eax
c0003d1c:	75 ba                	jne    c0003cd8 <create_name+0x2c>
c0003d1e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d24:	77 b2                	ja     c0003cd8 <create_name+0x2c>
c0003d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d2a:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d2e:	46                   	inc    esi
c0003d2f:	eb 97                	jmp    c0003cc8 <create_name+0x1c>
c0003d31:	40                   	inc    eax
c0003d32:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d3a:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d3c:	80 fa 2f             	cmp    dl,0x2f
c0003d3f:	74 f0                	je     c0003d31 <create_name+0x85>
c0003d41:	80 fa 5c             	cmp    dl,0x5c
c0003d44:	74 eb                	je     c0003d31 <create_name+0x85>
c0003d46:	31 db                	xor    ebx,ebx
c0003d48:	eb 02                	jmp    c0003d4c <create_name+0xa0>
c0003d4a:	b3 04                	mov    bl,0x4
c0003d4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d50:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d53:	85 f6                	test   esi,esi
c0003d55:	74 18                	je     c0003d6f <create_name+0xc3>
c0003d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d5b:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d60:	66 83 f8 20          	cmp    ax,0x20
c0003d64:	74 06                	je     c0003d6c <create_name+0xc0>
c0003d66:	66 83 f8 2e          	cmp    ax,0x2e
c0003d6a:	75 03                	jne    c0003d6f <create_name+0xc3>
c0003d6c:	4e                   	dec    esi
c0003d6d:	eb e4                	jmp    c0003d53 <create_name+0xa7>
c0003d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d73:	31 ed                	xor    ebp,ebp
c0003d75:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d7b:	85 f6                	test   esi,esi
c0003d7d:	0f 84 55 ff ff ff    	je     c0003cd8 <create_name+0x2c>
c0003d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d87:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d8a:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d8e:	66 83 f8 20          	cmp    ax,0x20
c0003d92:	75 04                	jne    c0003d98 <create_name+0xec>
c0003d94:	89 d5                	mov    ebp,edx
c0003d96:	eb eb                	jmp    c0003d83 <create_name+0xd7>
c0003d98:	85 ed                	test   ebp,ebp
c0003d9a:	75 06                	jne    c0003da2 <create_name+0xf6>
c0003d9c:	66 83 f8 2e          	cmp    ax,0x2e
c0003da0:	75 08                	jne    c0003daa <create_name+0xfe>
c0003da2:	83 cb 03             	or     ebx,0x3
c0003da5:	eb 03                	jmp    c0003daa <create_name+0xfe>
c0003da7:	4e                   	dec    esi
c0003da8:	74 0c                	je     c0003db6 <create_name+0x10a>
c0003daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dae:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003db4:	75 f1                	jne    c0003da7 <create_name+0xfb>
c0003db6:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dbb:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003dbe:	ba 20 00 00 00       	mov    edx,0x20
c0003dc3:	e8 35 df ff ff       	call   c0001cfd <mem_set>
c0003dc8:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dd0:	31 c9                	xor    ecx,ecx
c0003dd2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dd7:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003de2:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003de6:	66 85 ed             	test   bp,bp
c0003de9:	0f 84 30 01 00 00    	je     c0003f1f <create_name+0x273>
c0003def:	66 83 fd 20          	cmp    bp,0x20
c0003df3:	74 10                	je     c0003e05 <create_name+0x159>
c0003df5:	66 83 fd 2e          	cmp    bp,0x2e
c0003df9:	75 13                	jne    c0003e0e <create_name+0x162>
c0003dfb:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dff:	0f 84 6b 01 00 00    	je     c0003f70 <create_name+0x2c4>
c0003e05:	83 cb 03             	or     ebx,0x3
c0003e08:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e0c:	eb c9                	jmp    c0003dd7 <create_name+0x12b>
c0003e0e:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e12:	73 0b                	jae    c0003e1f <create_name+0x173>
c0003e14:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e18:	75 47                	jne    c0003e61 <create_name+0x1b5>
c0003e1a:	e9 51 01 00 00       	jmp    c0003f70 <create_name+0x2c4>
c0003e1f:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e24:	75 10                	jne    c0003e36 <create_name+0x18a>
c0003e26:	83 cb 03             	or     ebx,0x3
c0003e29:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e31:	e9 e9 00 00 00       	jmp    c0003f1f <create_name+0x273>
c0003e36:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3a:	74 0d                	je     c0003e49 <create_name+0x19d>
c0003e3c:	83 cb 03             	or     ebx,0x3
c0003e3f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e43:	0f 87 d6 00 00 00    	ja     c0003f1f <create_name+0x273>
c0003e49:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e4e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e52:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e5a:	b9 08 00 00 00       	mov    ecx,0x8
c0003e5f:	eb a7                	jmp    c0003e08 <create_name+0x15c>
c0003e61:	66 83 fd 7f          	cmp    bp,0x7f
c0003e65:	76 68                	jbe    c0003ecf <create_name+0x223>
c0003e67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e6b:	88 da                	mov    dl,bl
c0003e6d:	83 ca 02             	or     edx,0x2
c0003e70:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e74:	50                   	push   eax
c0003e75:	50                   	push   eax
c0003e76:	68 b5 01 00 00       	push   0x1b5
c0003e7b:	55                   	push   ebp
c0003e7c:	e8 48 46 00 00       	call   c00084c9 <ff_uni2oem>
c0003e81:	83 c4 10             	add    esp,0x10
c0003e84:	89 c5                	mov    ebp,eax
c0003e86:	a8 80                	test   al,0x80
c0003e88:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	74 0c                	je     c0003e9e <create_name+0x1f2>
c0003e92:	83 e5 7f             	and    ebp,0x7f
c0003e95:	0f b6 ad 20 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6be0]
c0003e9c:	eb 2a                	jmp    c0003ec8 <create_name+0x21c>
c0003e9e:	66 3d ff 00          	cmp    ax,0xff
c0003ea2:	76 24                	jbe    c0003ec8 <create_name+0x21c>
c0003ea4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea8:	48                   	dec    eax
c0003ea9:	39 c8                	cmp    eax,ecx
c0003eab:	77 0c                	ja     c0003eb9 <create_name+0x20d>
c0003ead:	83 cb 03             	or     ebx,0x3
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	e9 4f ff ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003eb9:	89 e8                	mov    eax,ebp
c0003ebb:	88 d3                	mov    bl,dl
c0003ebd:	66 c1 e8 08          	shr    ax,0x8
c0003ec1:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ec5:	41                   	inc    ecx
c0003ec6:	eb 4b                	jmp    c0003f13 <create_name+0x267>
c0003ec8:	88 d3                	mov    bl,dl
c0003eca:	66 85 ed             	test   bp,bp
c0003ecd:	74 19                	je     c0003ee8 <create_name+0x23c>
c0003ecf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ed3:	0f b7 d5             	movzx  edx,bp
c0003ed6:	b8 db 94 02 c0       	mov    eax,0xc00294db
c0003edb:	e8 4b de ff ff       	call   c0001d2b <chk_chr>
c0003ee0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ee4:	85 c0                	test   eax,eax
c0003ee6:	74 0a                	je     c0003ef2 <create_name+0x246>
c0003ee8:	83 cb 03             	or     ebx,0x3
c0003eeb:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ef0:	eb 21                	jmp    c0003f13 <create_name+0x267>
c0003ef2:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ef5:	66 83 f8 19          	cmp    ax,0x19
c0003ef9:	77 07                	ja     c0003f02 <create_name+0x256>
c0003efb:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f00:	eb 11                	jmp    c0003f13 <create_name+0x267>
c0003f02:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f05:	66 83 f8 19          	cmp    ax,0x19
c0003f09:	77 08                	ja     c0003f13 <create_name+0x267>
c0003f0b:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f10:	83 ed 20             	sub    ebp,0x20
c0003f13:	89 e8                	mov    eax,ebp
c0003f15:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f19:	41                   	inc    ecx
c0003f1a:	e9 e9 fe ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003f1f:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f23:	75 04                	jne    c0003f29 <create_name+0x27d>
c0003f25:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f29:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f2e:	75 05                	jne    c0003f35 <create_name+0x289>
c0003f30:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f35:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f39:	83 e0 0c             	and    eax,0xc
c0003f3c:	3c 0c                	cmp    al,0xc
c0003f3e:	74 0b                	je     c0003f4b <create_name+0x29f>
c0003f40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f44:	83 e0 03             	and    eax,0x3
c0003f47:	3c 03                	cmp    al,0x3
c0003f49:	75 05                	jne    c0003f50 <create_name+0x2a4>
c0003f4b:	83 cb 02             	or     ebx,0x2
c0003f4e:	eb 19                	jmp    c0003f69 <create_name+0x2bd>
c0003f50:	f6 c3 02             	test   bl,0x2
c0003f53:	75 14                	jne    c0003f69 <create_name+0x2bd>
c0003f55:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f5a:	74 03                	je     c0003f5f <create_name+0x2b3>
c0003f5c:	83 cb 10             	or     ebx,0x10
c0003f5f:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f64:	74 03                	je     c0003f69 <create_name+0x2bd>
c0003f66:	83 cb 08             	or     ebx,0x8
c0003f69:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f6c:	31 c0                	xor    eax,eax
c0003f6e:	eb 10                	jmp    c0003f80 <create_name+0x2d4>
c0003f70:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f75:	0f 85 ce fe ff ff    	jne    c0003e49 <create_name+0x19d>
c0003f7b:	e9 a6 fe ff ff       	jmp    c0003e26 <create_name+0x17a>
c0003f80:	83 c4 3c             	add    esp,0x3c
c0003f83:	5b                   	pop    ebx
c0003f84:	5e                   	pop    esi
c0003f85:	5f                   	pop    edi
c0003f86:	5d                   	pop    ebp
c0003f87:	c3                   	ret    

c0003f88 <xname_sum>:
c0003f88:	56                   	push   esi
c0003f89:	53                   	push   ebx
c0003f8a:	89 c6                	mov    esi,eax
c0003f8c:	51                   	push   ecx
c0003f8d:	31 db                	xor    ebx,ebx
c0003f8f:	83 c6 02             	add    esi,0x2
c0003f92:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f96:	66 85 c0             	test   ax,ax
c0003f99:	74 1f                	je     c0003fba <xname_sum+0x32>
c0003f9b:	83 ec 0c             	sub    esp,0xc
c0003f9e:	66 d1 cb             	ror    bx,1
c0003fa1:	50                   	push   eax
c0003fa2:	e8 1e 46 00 00       	call   c00085c5 <ff_wtoupper>
c0003fa7:	83 c4 10             	add    esp,0x10
c0003faa:	0f b6 d0             	movzx  edx,al
c0003fad:	66 c1 e8 08          	shr    ax,0x8
c0003fb1:	01 d3                	add    ebx,edx
c0003fb3:	66 d1 cb             	ror    bx,1
c0003fb6:	01 c3                	add    ebx,eax
c0003fb8:	eb d5                	jmp    c0003f8f <xname_sum+0x7>
c0003fba:	89 d8                	mov    eax,ebx
c0003fbc:	5a                   	pop    edx
c0003fbd:	5b                   	pop    ebx
c0003fbe:	5e                   	pop    esi
c0003fbf:	c3                   	ret    

c0003fc0 <create_xdir>:
c0003fc0:	55                   	push   ebp
c0003fc1:	b9 40 00 00 00       	mov    ecx,0x40
c0003fc6:	57                   	push   edi
c0003fc7:	bd 01 00 00 00       	mov    ebp,0x1
c0003fcc:	56                   	push   esi
c0003fcd:	31 ff                	xor    edi,edi
c0003fcf:	53                   	push   ebx
c0003fd0:	be 40 00 00 00       	mov    esi,0x40
c0003fd5:	89 c3                	mov    ebx,eax
c0003fd7:	83 ec 1c             	sub    esp,0x1c
c0003fda:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fde:	31 d2                	xor    edx,edx
c0003fe0:	e8 18 dd ff ff       	call   c0001cfd <mem_set>
c0003fe5:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe8:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fec:	31 c9                	xor    ecx,ecx
c0003fee:	8d 46 01             	lea    eax,[esi+0x1]
c0003ff1:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ff5:	83 c6 02             	add    esi,0x2
c0003ff8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ffc:	66 85 ed             	test   bp,bp
c0003fff:	74 12                	je     c0004013 <create_xdir+0x53>
c0004001:	0f b6 c1             	movzx  eax,cl
c0004004:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004008:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c000400c:	66 83 fd 01          	cmp    bp,0x1
c0004010:	80 d9 ff             	sbb    cl,0xff
c0004013:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004016:	0f b7 d5             	movzx  edx,bp
c0004019:	83 c6 02             	add    esi,0x2
c000401c:	e8 ba dc ff ff       	call   c0001cdb <st_word>
c0004021:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004027:	75 d3                	jne    c0003ffc <create_xdir+0x3c>
c0004029:	8d 47 01             	lea    eax,[edi+0x1]
c000402c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004030:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004034:	0f b6 c1             	movzx  eax,cl
c0004037:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c000403c:	74 07                	je     c0004045 <create_xdir+0x85>
c000403e:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004043:	eb a9                	jmp    c0003fee <create_xdir+0x2e>
c0004045:	8d 47 02             	lea    eax,[edi+0x2]
c0004048:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c000404b:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000404e:	89 d0                	mov    eax,edx
c0004050:	e8 33 ff ff ff       	call   c0003f88 <xname_sum>
c0004055:	83 c4 1c             	add    esp,0x1c
c0004058:	0f b7 d0             	movzx  edx,ax
c000405b:	8d 43 24             	lea    eax,[ebx+0x24]
c000405e:	5b                   	pop    ebx
c000405f:	5e                   	pop    esi
c0004060:	5f                   	pop    edi
c0004061:	5d                   	pop    ebp
c0004062:	e9 74 dc ff ff       	jmp    c0001cdb <st_word>

c0004067 <cmp_lfn>:
c0004067:	55                   	push   ebp
c0004068:	57                   	push   edi
c0004069:	89 d7                	mov    edi,edx
c000406b:	56                   	push   esi
c000406c:	53                   	push   ebx
c000406d:	83 ec 1c             	sub    esp,0x1c
c0004070:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004074:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004077:	e8 ed db ff ff       	call   c0001c69 <ld_word>
c000407c:	66 85 c0             	test   ax,ax
c000407f:	74 07                	je     c0004088 <cmp_lfn+0x21>
c0004081:	31 c0                	xor    eax,eax
c0004083:	e9 9a 00 00 00       	jmp    c0004122 <cmp_lfn+0xbb>
c0004088:	8a 1f                	mov    bl,BYTE PTR [edi]
c000408a:	bd 01 00 00 00       	mov    ebp,0x1
c000408f:	83 e3 3f             	and    ebx,0x3f
c0004092:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000409a:	4b                   	dec    ebx
c000409b:	6b db 0d             	imul   ebx,ebx,0xd
c000409e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040a2:	0f b6 80 a0 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6b60]
c00040a9:	01 f8                	add    eax,edi
c00040ab:	e8 b9 db ff ff       	call   c0001c69 <ld_word>
c00040b0:	66 85 ed             	test   bp,bp
c00040b3:	89 c6                	mov    esi,eax
c00040b5:	74 3c                	je     c00040f3 <cmp_lfn+0x8c>
c00040b7:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040bd:	77 c2                	ja     c0004081 <cmp_lfn+0x1a>
c00040bf:	83 ec 0c             	sub    esp,0xc
c00040c2:	0f b7 c0             	movzx  eax,ax
c00040c5:	50                   	push   eax
c00040c6:	e8 fa 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040cb:	89 c5                	mov    ebp,eax
c00040cd:	8d 43 01             	lea    eax,[ebx+0x1]
c00040d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d8:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00040df:	e8 e1 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040e4:	83 c4 10             	add    esp,0x10
c00040e7:	39 c5                	cmp    ebp,eax
c00040e9:	75 96                	jne    c0004081 <cmp_lfn+0x1a>
c00040eb:	89 f5                	mov    ebp,esi
c00040ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040f1:	eb 04                	jmp    c00040f7 <cmp_lfn+0x90>
c00040f3:	66 46                	inc    si
c00040f5:	75 8a                	jne    c0004081 <cmp_lfn+0x1a>
c00040f7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040fb:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004100:	75 9c                	jne    c000409e <cmp_lfn+0x37>
c0004102:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004105:	74 16                	je     c000411d <cmp_lfn+0xb6>
c0004107:	66 85 ed             	test   bp,bp
c000410a:	74 11                	je     c000411d <cmp_lfn+0xb6>
c000410c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004110:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004115:	0f 94 c0             	sete   al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	eb 05                	jmp    c0004122 <cmp_lfn+0xbb>
c000411d:	b8 01 00 00 00       	mov    eax,0x1
c0004122:	83 c4 1c             	add    esp,0x1c
c0004125:	5b                   	pop    ebx
c0004126:	5e                   	pop    esi
c0004127:	5f                   	pop    edi
c0004128:	5d                   	pop    ebp
c0004129:	c3                   	ret    

c000412a <dir_find>:
c000412a:	55                   	push   ebp
c000412b:	31 d2                	xor    edx,edx
c000412d:	57                   	push   edi
c000412e:	56                   	push   esi
c000412f:	53                   	push   ebx
c0004130:	89 c3                	mov    ebx,eax
c0004132:	83 ec 1c             	sub    esp,0x1c
c0004135:	8b 30                	mov    esi,DWORD PTR [eax]
c0004137:	e8 89 f0 ff ff       	call   c00031c5 <dir_sdi>
c000413c:	89 04 24             	mov    DWORD PTR [esp],eax
c000413f:	85 c0                	test   eax,eax
c0004141:	0f 85 9e 01 00 00    	jne    c00042e5 <dir_find+0x1bb>
c0004147:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000414a:	0f 85 8d 00 00 00    	jne    c00041dd <dir_find+0xb3>
c0004150:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004153:	e8 30 fe ff ff       	call   c0003f88 <xname_sum>
c0004158:	89 c7                	mov    edi,eax
c000415a:	31 d2                	xor    edx,edx
c000415c:	89 d8                	mov    eax,ebx
c000415e:	e8 72 f8 ff ff       	call   c00039d5 <dir_read>
c0004163:	85 c0                	test   eax,eax
c0004165:	0f 85 5e 01 00 00    	jne    c00042c9 <dir_find+0x19f>
c000416b:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000416e:	8d 41 24             	lea    eax,[ecx+0x24]
c0004171:	e8 f3 da ff ff       	call   c0001c69 <ld_word>
c0004176:	66 39 f8             	cmp    ax,di
c0004179:	75 df                	jne    c000415a <dir_find+0x30>
c000417b:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000417e:	31 ed                	xor    ebp,ebp
c0004180:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004184:	ba 40 00 00 00       	mov    edx,0x40
c0004189:	89 e9                	mov    ecx,ebp
c000418b:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000418f:	0f 84 42 01 00 00    	je     c00042d7 <dir_find+0x1ad>
c0004195:	f6 c2 1f             	test   dl,0x1f
c0004198:	75 03                	jne    c000419d <dir_find+0x73>
c000419a:	83 c2 02             	add    edx,0x2
c000419d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041a1:	89 d0                	mov    eax,edx
c00041a3:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041a6:	e8 be da ff ff       	call   c0001c69 <ld_word>
c00041ab:	83 ec 0c             	sub    esp,0xc
c00041ae:	0f b7 c0             	movzx  eax,ax
c00041b1:	50                   	push   eax
c00041b2:	e8 0e 44 00 00       	call   c00085c5 <ff_wtoupper>
c00041b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041bb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041be:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00041c5:	e8 fb 43 00 00       	call   c00085c5 <ff_wtoupper>
c00041ca:	83 c4 10             	add    esp,0x10
c00041cd:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041d1:	75 87                	jne    c000415a <dir_find+0x30>
c00041d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041d7:	45                   	inc    ebp
c00041d8:	83 c2 02             	add    edx,0x2
c00041db:	eb ac                	jmp    c0004189 <dir_find+0x5f>
c00041dd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041e4:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e9:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ee:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041f1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041f4:	89 f0                	mov    eax,esi
c00041f6:	e8 4c e2 ff ff       	call   c0002447 <move_window>
c00041fb:	85 c0                	test   eax,eax
c00041fd:	0f 85 c6 00 00 00    	jne    c00042c9 <dir_find+0x19f>
c0004203:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004206:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004209:	84 c9                	test   cl,cl
c000420b:	0f 84 bd 00 00 00    	je     c00042ce <dir_find+0x1a4>
c0004211:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004214:	88 d0                	mov    al,dl
c0004216:	83 e0 3f             	and    eax,0x3f
c0004219:	80 f9 e5             	cmp    cl,0xe5
c000421c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000421f:	0f 84 87 00 00 00    	je     c00042ac <dir_find+0x182>
c0004225:	80 e2 08             	and    dl,0x8
c0004228:	74 06                	je     c0004230 <dir_find+0x106>
c000422a:	3c 0f                	cmp    al,0xf
c000422c:	75 7e                	jne    c00042ac <dir_find+0x182>
c000422e:	eb 04                	jmp    c0004234 <dir_find+0x10a>
c0004230:	3c 0f                	cmp    al,0xf
c0004232:	75 4c                	jne    c0004280 <dir_find+0x156>
c0004234:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004238:	75 7e                	jne    c00042b8 <dir_find+0x18e>
c000423a:	f6 c1 40             	test   cl,0x40
c000423d:	74 12                	je     c0004251 <dir_find+0x127>
c000423f:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004242:	83 e1 bf             	and    ecx,0xffffffbf
c0004245:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004249:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000424c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424f:	eb 06                	jmp    c0004257 <dir_find+0x12d>
c0004251:	89 f8                	mov    eax,edi
c0004253:	38 c8                	cmp    al,cl
c0004255:	75 5c                	jne    c00042b3 <dir_find+0x189>
c0004257:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000425b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004260:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004263:	75 53                	jne    c00042b8 <dir_find+0x18e>
c0004265:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004269:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000426c:	89 ea                	mov    edx,ebp
c000426e:	e8 f4 fd ff ff       	call   c0004067 <cmp_lfn>
c0004273:	85 c0                	test   eax,eax
c0004275:	74 41                	je     c00042b8 <dir_find+0x18e>
c0004277:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000427b:	8d 79 ff             	lea    edi,[ecx-0x1]
c000427e:	eb 38                	jmp    c00042b8 <dir_find+0x18e>
c0004280:	89 f8                	mov    eax,edi
c0004282:	84 c0                	test   al,al
c0004284:	75 0d                	jne    c0004293 <dir_find+0x169>
c0004286:	89 e8                	mov    eax,ebp
c0004288:	e8 98 de ff ff       	call   c0002125 <sum_sfn>
c000428d:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004291:	74 52                	je     c00042e5 <dir_find+0x1bb>
c0004293:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004297:	75 13                	jne    c00042ac <dir_find+0x182>
c0004299:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000429c:	b9 0b 00 00 00       	mov    ecx,0xb
c00042a1:	89 e8                	mov    eax,ebp
c00042a3:	e8 60 da ff ff       	call   c0001d08 <mem_cmp>
c00042a8:	85 c0                	test   eax,eax
c00042aa:	74 39                	je     c00042e5 <dir_find+0x1bb>
c00042ac:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042b3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b8:	31 d2                	xor    edx,edx
c00042ba:	89 d8                	mov    eax,ebx
c00042bc:	e8 5c f4 ff ff       	call   c000371d <dir_next>
c00042c1:	85 c0                	test   eax,eax
c00042c3:	0f 84 25 ff ff ff    	je     c00041ee <dir_find+0xc4>
c00042c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00042cc:	eb 17                	jmp    c00042e5 <dir_find+0x1bb>
c00042ce:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042d5:	eb 0e                	jmp    c00042e5 <dir_find+0x1bb>
c00042d7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042da:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042df:	0f 85 75 fe ff ff    	jne    c000415a <dir_find+0x30>
c00042e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e8:	83 c4 1c             	add    esp,0x1c
c00042eb:	5b                   	pop    ebx
c00042ec:	5e                   	pop    esi
c00042ed:	5f                   	pop    edi
c00042ee:	5d                   	pop    ebp
c00042ef:	c3                   	ret    

c00042f0 <dir_register>:
c00042f0:	55                   	push   ebp
c00042f1:	57                   	push   edi
c00042f2:	56                   	push   esi
c00042f3:	be 06 00 00 00       	mov    esi,0x6
c00042f8:	53                   	push   ebx
c00042f9:	83 ec 6c             	sub    esp,0x6c
c00042fc:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004300:	0f 85 62 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004306:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004308:	31 ff                	xor    edi,edi
c000430a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000430d:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004312:	74 03                	je     c0004317 <dir_register+0x27>
c0004314:	47                   	inc    edi
c0004315:	eb f6                	jmp    c000430d <dir_register+0x1d>
c0004317:	89 c3                	mov    ebx,eax
c0004319:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000431d:	0f 85 e1 00 00 00    	jne    c0004404 <dir_register+0x114>
c0004323:	83 c7 0e             	add    edi,0xe
c0004326:	b9 0f 00 00 00       	mov    ecx,0xf
c000432b:	89 f8                	mov    eax,edi
c000432d:	31 d2                	xor    edx,edx
c000432f:	f7 f1                	div    ecx
c0004331:	8d 50 02             	lea    edx,[eax+0x2]
c0004334:	89 c7                	mov    edi,eax
c0004336:	89 d8                	mov    eax,ebx
c0004338:	e8 12 f8 ff ff       	call   c0003b4f <dir_alloc>
c000433d:	89 c6                	mov    esi,eax
c000433f:	85 c0                	test   eax,eax
c0004341:	0f 85 21 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004347:	81 c7 01 00 00 08    	add    edi,0x8000001
c000434d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004350:	c1 e7 05             	shl    edi,0x5
c0004353:	29 f8                	sub    eax,edi
c0004355:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004358:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000435b:	a8 04                	test   al,0x4
c000435d:	0f 84 91 00 00 00    	je     c00043f4 <dir_register+0x104>
c0004363:	83 e0 fb             	and    eax,0xfffffffb
c0004366:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004369:	89 d8                	mov    eax,ebx
c000436b:	e8 25 ec ff ff       	call   c0002f95 <fill_first_frag>
c0004370:	85 c0                	test   eax,eax
c0004372:	0f 85 ee 01 00 00    	jne    c0004566 <dir_register+0x276>
c0004378:	83 c9 ff             	or     ecx,0xffffffff
c000437b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000437e:	89 d8                	mov    eax,ebx
c0004380:	e8 db eb ff ff       	call   c0002f60 <fill_last_frag>
c0004385:	85 c0                	test   eax,eax
c0004387:	0f 85 d9 01 00 00    	jne    c0004566 <dir_register+0x276>
c000438d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004391:	74 61                	je     c00043f4 <dir_register+0x104>
c0004393:	89 da                	mov    edx,ebx
c0004395:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004399:	e8 ea f5 ff ff       	call   c0003988 <load_obj_xdir>
c000439e:	85 c0                	test   eax,eax
c00043a0:	0f 85 c0 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043a6:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043aa:	31 c9                	xor    ecx,ecx
c00043ac:	c1 e2 09             	shl    edx,0x9
c00043af:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043b2:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043b5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b8:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043bb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043be:	83 c0 38             	add    eax,0x38
c00043c1:	e8 1c d9 ff ff       	call   c0001ce2 <st_qword>
c00043c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043cc:	83 c0 28             	add    eax,0x28
c00043cf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043d2:	e8 0b d9 ff ff       	call   c0001ce2 <st_qword>
c00043d7:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043da:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043dd:	83 c8 01             	or     eax,0x1
c00043e0:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043e7:	e8 db f7 ff ff       	call   c0003bc7 <store_xdir>
c00043ec:	85 c0                	test   eax,eax
c00043ee:	0f 85 72 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043f7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043fa:	e8 c1 fb ff ff       	call   c0003fc0 <create_xdir>
c00043ff:	e9 64 01 00 00       	jmp    c0004568 <dir_register+0x278>
c0004404:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004407:	b9 0c 00 00 00       	mov    ecx,0xc
c000440c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004410:	89 c2                	mov    edx,eax
c0004412:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004416:	e8 cd d8 ff ff       	call   c0001ce8 <mem_cpy>
c000441b:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004420:	74 58                	je     c000447a <dir_register+0x18a>
c0004422:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004426:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000442e:	83 ec 0c             	sub    esp,0xc
c0004431:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004434:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004438:	8d 54 24 24          	lea    edx,[esp+0x24]
c000443c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004440:	e8 24 dc ff ff       	call   c0002069 <gen_numname>
c0004445:	89 d8                	mov    eax,ebx
c0004447:	e8 de fc ff ff       	call   c000412a <dir_find>
c000444c:	83 c4 10             	add    esp,0x10
c000444f:	89 c6                	mov    esi,eax
c0004451:	85 c0                	test   eax,eax
c0004453:	75 15                	jne    c000446a <dir_register+0x17a>
c0004455:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004459:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000445e:	75 ce                	jne    c000442e <dir_register+0x13e>
c0004460:	be 07 00 00 00       	mov    esi,0x7
c0004465:	e9 fe 00 00 00       	jmp    c0004568 <dir_register+0x278>
c000446a:	83 f8 04             	cmp    eax,0x4
c000446d:	0f 85 f5 00 00 00    	jne    c0004568 <dir_register+0x278>
c0004473:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004477:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000447a:	b9 01 00 00 00       	mov    ecx,0x1
c000447f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004484:	74 0f                	je     c0004495 <dir_register+0x1a5>
c0004486:	b9 0d 00 00 00       	mov    ecx,0xd
c000448b:	8d 47 0c             	lea    eax,[edi+0xc]
c000448e:	31 d2                	xor    edx,edx
c0004490:	f7 f1                	div    ecx
c0004492:	8d 48 01             	lea    ecx,[eax+0x1]
c0004495:	89 ca                	mov    edx,ecx
c0004497:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000449b:	89 d8                	mov    eax,ebx
c000449d:	e8 ad f6 ff ff       	call   c0003b4f <dir_alloc>
c00044a2:	89 c6                	mov    esi,eax
c00044a4:	85 c0                	test   eax,eax
c00044a6:	0f 85 bc 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044b0:	49                   	dec    ecx
c00044b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044b5:	74 6a                	je     c0004521 <dir_register+0x231>
c00044b7:	89 c8                	mov    eax,ecx
c00044b9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044bc:	c1 e0 05             	shl    eax,0x5
c00044bf:	29 c2                	sub    edx,eax
c00044c1:	89 d8                	mov    eax,ebx
c00044c3:	e8 fd ec ff ff       	call   c00031c5 <dir_sdi>
c00044c8:	89 c6                	mov    esi,eax
c00044ca:	85 c0                	test   eax,eax
c00044cc:	0f 85 96 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044d6:	e8 4a dc ff ff       	call   c0002125 <sum_sfn>
c00044db:	0f b6 f8             	movzx  edi,al
c00044de:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e4:	89 e8                	mov    eax,ebp
c00044e6:	e8 5c df ff ff       	call   c0002447 <move_window>
c00044eb:	89 c6                	mov    esi,eax
c00044ed:	85 c0                	test   eax,eax
c00044ef:	75 77                	jne    c0004568 <dir_register+0x278>
c00044f1:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044f6:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f9:	83 ec 0c             	sub    esp,0xc
c00044fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044ff:	57                   	push   edi
c0004500:	e8 e0 da ff ff       	call   c0001fe5 <put_lfn>
c0004505:	31 d2                	xor    edx,edx
c0004507:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000450b:	89 d8                	mov    eax,ebx
c000450d:	e8 0b f2 ff ff       	call   c000371d <dir_next>
c0004512:	83 c4 10             	add    esp,0x10
c0004515:	89 c6                	mov    esi,eax
c0004517:	85 c0                	test   eax,eax
c0004519:	75 4d                	jne    c0004568 <dir_register+0x278>
c000451b:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c000451f:	75 bd                	jne    c00044de <dir_register+0x1ee>
c0004521:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004524:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004527:	89 e8                	mov    eax,ebp
c0004529:	e8 19 df ff ff       	call   c0002447 <move_window>
c000452e:	89 c6                	mov    esi,eax
c0004530:	85 c0                	test   eax,eax
c0004532:	75 34                	jne    c0004568 <dir_register+0x278>
c0004534:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004537:	b9 20 00 00 00       	mov    ecx,0x20
c000453c:	31 d2                	xor    edx,edx
c000453e:	e8 ba d7 ff ff       	call   c0001cfd <mem_set>
c0004543:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004546:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000454a:	b9 0b 00 00 00       	mov    ecx,0xb
c000454f:	e8 94 d7 ff ff       	call   c0001ce8 <mem_cpy>
c0004554:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004557:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000455a:	83 e0 18             	and    eax,0x18
c000455d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004560:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004564:	eb 02                	jmp    c0004568 <dir_register+0x278>
c0004566:	89 c6                	mov    esi,eax
c0004568:	83 c4 6c             	add    esp,0x6c
c000456b:	89 f0                	mov    eax,esi
c000456d:	5b                   	pop    ebx
c000456e:	5e                   	pop    esi
c000456f:	5f                   	pop    edi
c0004570:	5d                   	pop    ebp
c0004571:	c3                   	ret    

c0004572 <sync_fs>:
c0004572:	56                   	push   esi
c0004573:	53                   	push   ebx
c0004574:	53                   	push   ebx
c0004575:	89 c3                	mov    ebx,eax
c0004577:	e8 37 de ff ff       	call   c00023b3 <sync_window>
c000457c:	85 c0                	test   eax,eax
c000457e:	0f 85 b1 00 00 00    	jne    c0004635 <sync_fs+0xc3>
c0004584:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004587:	0f 85 8e 00 00 00    	jne    c000461b <sync_fs+0xa9>
c000458d:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004591:	0f 85 84 00 00 00    	jne    c000461b <sync_fs+0xa9>
c0004597:	b9 00 02 00 00       	mov    ecx,0x200
c000459c:	8d 73 54             	lea    esi,[ebx+0x54]
c000459f:	31 d2                	xor    edx,edx
c00045a1:	89 f0                	mov    eax,esi
c00045a3:	e8 55 d7 ff ff       	call   c0001cfd <mem_set>
c00045a8:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045ae:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045b3:	e8 23 d7 ff ff       	call   c0001cdb <st_word>
c00045b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00045bd:	89 f0                	mov    eax,esi
c00045bf:	e8 1b d7 ff ff       	call   c0001cdf <st_dword>
c00045c4:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00045cf:	e8 0b d7 ff ff       	call   c0001cdf <st_dword>
c00045d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045d7:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045dd:	e8 fd d6 ff ff       	call   c0001cdf <st_dword>
c00045e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045e5:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045eb:	e8 ef d6 ff ff       	call   c0001cdf <st_dword>
c00045f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045f3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045f6:	83 c0 01             	add    eax,0x1
c00045f9:	83 d2 00             	adc    edx,0x0
c00045fc:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045ff:	83 ec 0c             	sub    esp,0xc
c0004602:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004605:	6a 01                	push   0x1
c0004607:	52                   	push   edx
c0004608:	50                   	push   eax
c0004609:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000460d:	56                   	push   esi
c000460e:	50                   	push   eax
c000460f:	e8 20 d6 ff ff       	call   c0001c34 <disk_write>
c0004614:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004618:	83 c4 20             	add    esp,0x20
c000461b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000461f:	51                   	push   ecx
c0004620:	6a 00                	push   0x0
c0004622:	6a 00                	push   0x0
c0004624:	50                   	push   eax
c0004625:	e8 20 d6 ff ff       	call   c0001c4a <disk_ioctl>
c000462a:	83 c4 10             	add    esp,0x10
c000462d:	85 c0                	test   eax,eax
c000462f:	0f 95 c0             	setne  al
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	5a                   	pop    edx
c0004636:	5b                   	pop    ebx
c0004637:	5e                   	pop    esi
c0004638:	c3                   	ret    

c0004639 <create_partition>:
c0004639:	55                   	push   ebp
c000463a:	0f b6 c0             	movzx  eax,al
c000463d:	57                   	push   edi
c000463e:	56                   	push   esi
c000463f:	53                   	push   ebx
c0004640:	83 ec 60             	sub    esp,0x60
c0004643:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004647:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000464b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000464f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004653:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004657:	50                   	push   eax
c0004658:	6a 01                	push   0x1
c000465a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000465e:	e8 e7 d5 ff ff       	call   c0001c4a <disk_ioctl>
c0004663:	83 c4 10             	add    esp,0x10
c0004666:	85 c0                	test   eax,eax
c0004668:	74 0a                	je     c0004674 <create_partition+0x3b>
c000466a:	b8 01 00 00 00       	mov    eax,0x1
c000466f:	e9 67 05 00 00       	jmp    c0004bdb <create_partition+0x5a2>
c0004674:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004678:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000467c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004680:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004684:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004689:	0f 86 ed 03 00 00    	jbe    c0004a7c <create_partition+0x443>
c000468f:	83 c0 df             	add    eax,0xffffffdf
c0004692:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000469a:	83 d2 ff             	adc    edx,0xffffffff
c000469d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046a1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046ad:	83 c0 bd             	add    eax,0xffffffbd
c00046b0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046b7:	83 d2 ff             	adc    edx,0xffffffff
c00046ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046c2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046ca:	be 22 00 00 00       	mov    esi,0x22
c00046cf:	31 ff                	xor    edi,edi
c00046d1:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d9:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046e1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ed:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046f3:	75 0e                	jne    c0004703 <create_partition+0xca>
c00046f5:	b9 00 02 00 00       	mov    ecx,0x200
c00046fa:	31 d2                	xor    edx,edx
c00046fc:	89 d8                	mov    eax,ebx
c00046fe:	e8 fa d5 ff ff       	call   c0001cfd <mem_set>
c0004703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004707:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000470b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000470f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004712:	0f 84 23 01 00 00    	je     c000483b <create_partition+0x202>
c0004718:	89 f0                	mov    eax,esi
c000471a:	89 fa                	mov    edx,edi
c000471c:	05 ff 07 00 00       	add    eax,0x7ff
c0004721:	83 d2 00             	adc    edx,0x0
c0004724:	89 c1                	mov    ecx,eax
c0004726:	89 d7                	mov    edi,edx
c0004728:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000472e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004732:	89 ce                	mov    esi,ecx
c0004734:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004738:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000473c:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004740:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004747:	89 04 24             	mov    DWORD PTR [esp],eax
c000474a:	b8 64 00 00 00       	mov    eax,0x64
c000474f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004752:	b8 00 00 00 00       	mov    eax,0x0
c0004757:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000475b:	72 41                	jb     c000479e <create_partition+0x165>
c000475d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004765:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004769:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000476e:	01 c1                	add    ecx,eax
c0004770:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004774:	f7 24 24             	mul    DWORD PTR [esp]
c0004777:	6a 00                	push   0x0
c0004779:	01 ca                	add    edx,ecx
c000477b:	6a 64                	push   0x64
c000477d:	52                   	push   edx
c000477e:	50                   	push   eax
c000477f:	e8 80 22 02 00       	call   c0026a04 <__udivdi3>
c0004784:	83 c4 10             	add    esp,0x10
c0004787:	05 ff 07 00 00       	add    eax,0x7ff
c000478c:	83 d2 00             	adc    edx,0x0
c000478f:	89 c1                	mov    ecx,eax
c0004791:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004795:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000479b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000479e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047a5:	01 f0                	add    eax,esi
c00047a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ab:	11 fa                	adc    edx,edi
c00047ad:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047b1:	19 d1                	sbb    ecx,edx
c00047b3:	73 2e                	jae    c00047e3 <create_partition+0x1aa>
c00047b5:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b9:	89 f8                	mov    eax,edi
c00047bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047c2:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047c6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047ce:	73 6b                	jae    c000483b <create_partition+0x202>
c00047d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d8:	29 f0                	sub    eax,esi
c00047da:	19 fa                	sbb    edx,edi
c00047dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00047df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047e7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047ea:	74 4f                	je     c000483b <create_partition+0x202>
c00047ec:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ef:	b9 10 00 00 00       	mov    ecx,0x10
c00047f4:	ba b0 94 02 c0       	mov    edx,0xc00294b0
c00047f9:	e8 ea d4 ff ff       	call   c0001ce8 <mem_cpy>
c00047fe:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004802:	b9 10 00 00 00       	mov    ecx,0x10
c0004807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000480b:	e8 2c db ff ff       	call   c000233c <make_rand>
c0004810:	89 f2                	mov    edx,esi
c0004812:	89 f9                	mov    ecx,edi
c0004814:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004818:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000481c:	e8 c1 d4 ff ff       	call   c0001ce2 <st_qword>
c0004821:	03 34 24             	add    esi,DWORD PTR [esp]
c0004824:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004828:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000482c:	89 f2                	mov    edx,esi
c000482e:	89 f9                	mov    ecx,edi
c0004830:	83 c2 ff             	add    edx,0xffffffff
c0004833:	83 d1 ff             	adc    ecx,0xffffffff
c0004836:	e8 a7 d4 ff ff       	call   c0001ce2 <st_qword>
c000483b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000483f:	83 e8 80             	sub    eax,0xffffff80
c0004842:	89 c5                	mov    ebp,eax
c0004844:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004848:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000484e:	75 6b                	jne    c00048bb <create_partition+0x282>
c0004850:	45                   	inc    ebp
c0004851:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004855:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000485a:	e8 39 da ff ff       	call   c0002298 <crc32>
c000485f:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004865:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004869:	75 e5                	jne    c0004850 <create_partition+0x217>
c000486b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000486f:	31 d2                	xor    edx,edx
c0004871:	83 ec 0c             	sub    esp,0xc
c0004874:	c1 ed 09             	shr    ebp,0x9
c0004877:	6a 01                	push   0x1
c0004879:	8d 45 02             	lea    eax,[ebp+0x2]
c000487c:	52                   	push   edx
c000487d:	50                   	push   eax
c000487e:	53                   	push   ebx
c000487f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004883:	e8 ac d3 ff ff       	call   c0001c34 <disk_write>
c0004888:	83 c4 20             	add    esp,0x20
c000488b:	85 c0                	test   eax,eax
c000488d:	0f 85 d7 fd ff ff    	jne    c000466a <create_partition+0x31>
c0004893:	83 ec 0c             	sub    esp,0xc
c0004896:	31 d2                	xor    edx,edx
c0004898:	6a 01                	push   0x1
c000489a:	89 e8                	mov    eax,ebp
c000489c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048a0:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048a4:	52                   	push   edx
c00048a5:	50                   	push   eax
c00048a6:	53                   	push   ebx
c00048a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ab:	e8 84 d3 ff ff       	call   c0001c34 <disk_write>
c00048b0:	83 c4 20             	add    esp,0x20
c00048b3:	85 c0                	test   eax,eax
c00048b5:	0f 85 af fd ff ff    	jne    c000466a <create_partition+0x31>
c00048bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048c3:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c8:	74 0d                	je     c00048d7 <create_partition+0x29e>
c00048ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048d2:	e9 12 fe ff ff       	jmp    c00046e9 <create_partition+0xb0>
c00048d7:	31 d2                	xor    edx,edx
c00048d9:	b9 00 02 00 00       	mov    ecx,0x200
c00048de:	89 d8                	mov    eax,ebx
c00048e0:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048e3:	e8 15 d4 ff ff       	call   c0001cfd <mem_set>
c00048e8:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048eb:	b9 10 00 00 00       	mov    ecx,0x10
c00048f0:	ba a0 93 02 c0       	mov    edx,0xc00293a0
c00048f5:	89 d8                	mov    eax,ebx
c00048f7:	e8 ec d3 ff ff       	call   c0001ce8 <mem_cpy>
c00048fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004900:	8d 43 58             	lea    eax,[ebx+0x58]
c0004903:	f7 d2                	not    edx
c0004905:	e8 d5 d3 ff ff       	call   c0001cdf <st_dword>
c000490a:	8d 43 18             	lea    eax,[ebx+0x18]
c000490d:	31 c9                	xor    ecx,ecx
c000490f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004912:	ba 01 00 00 00       	mov    edx,0x1
c0004917:	e8 c6 d3 ff ff       	call   c0001ce2 <st_qword>
c000491c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004920:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004924:	83 c2 ff             	add    edx,0xffffffff
c0004927:	89 e8                	mov    eax,ebp
c0004929:	83 d1 ff             	adc    ecx,0xffffffff
c000492c:	e8 b1 d3 ff ff       	call   c0001ce2 <st_qword>
c0004931:	31 c9                	xor    ecx,ecx
c0004933:	8d 43 28             	lea    eax,[ebx+0x28]
c0004936:	ba 22 00 00 00       	mov    edx,0x22
c000493b:	e8 a2 d3 ff ff       	call   c0001ce2 <st_qword>
c0004940:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004944:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004948:	83 c2 de             	add    edx,0xffffffde
c000494b:	8d 43 30             	lea    eax,[ebx+0x30]
c000494e:	83 d1 ff             	adc    ecx,0xffffffff
c0004951:	31 f6                	xor    esi,esi
c0004953:	e8 8a d3 ff ff       	call   c0001ce2 <st_qword>
c0004958:	8d 43 54             	lea    eax,[ebx+0x54]
c000495b:	ba 80 00 00 00       	mov    edx,0x80
c0004960:	e8 7a d3 ff ff       	call   c0001cdf <st_dword>
c0004965:	8d 43 50             	lea    eax,[ebx+0x50]
c0004968:	ba 80 00 00 00       	mov    edx,0x80
c000496d:	e8 6d d3 ff ff       	call   c0001cdf <st_dword>
c0004972:	ba 02 00 00 00       	mov    edx,0x2
c0004977:	89 f8                	mov    eax,edi
c0004979:	e8 61 d3 ff ff       	call   c0001cdf <st_dword>
c000497e:	8d 53 38             	lea    edx,[ebx+0x38]
c0004981:	b9 10 00 00 00       	mov    ecx,0x10
c0004986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000498a:	e8 ad d9 ff ff       	call   c000233c <make_rand>
c000498f:	83 c8 ff             	or     eax,0xffffffff
c0004992:	46                   	inc    esi
c0004993:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004998:	e8 fb d8 ff ff       	call   c0002298 <crc32>
c000499d:	83 fe 5c             	cmp    esi,0x5c
c00049a0:	75 f0                	jne    c0004992 <create_partition+0x359>
c00049a2:	f7 d0                	not    eax
c00049a4:	8d 73 10             	lea    esi,[ebx+0x10]
c00049a7:	89 c2                	mov    edx,eax
c00049a9:	89 f0                	mov    eax,esi
c00049ab:	e8 2f d3 ff ff       	call   c0001cdf <st_dword>
c00049b0:	83 ec 0c             	sub    esp,0xc
c00049b3:	6a 01                	push   0x1
c00049b5:	6a 00                	push   0x0
c00049b7:	6a 01                	push   0x1
c00049b9:	53                   	push   ebx
c00049ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049be:	e8 71 d2 ff ff       	call   c0001c34 <disk_write>
c00049c3:	83 c4 20             	add    esp,0x20
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 9c fc ff ff    	jne    c000466a <create_partition+0x31>
c00049ce:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049d2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049d6:	83 c2 ff             	add    edx,0xffffffff
c00049d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049dc:	83 d1 ff             	adc    ecx,0xffffffff
c00049df:	e8 fe d2 ff ff       	call   c0001ce2 <st_qword>
c00049e4:	ba 01 00 00 00       	mov    edx,0x1
c00049e9:	31 c9                	xor    ecx,ecx
c00049eb:	89 e8                	mov    eax,ebp
c00049ed:	e8 f0 d2 ff ff       	call   c0001ce2 <st_qword>
c00049f2:	89 f8                	mov    eax,edi
c00049f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049fc:	31 ff                	xor    edi,edi
c00049fe:	e8 df d2 ff ff       	call   c0001ce2 <st_qword>
c0004a03:	89 f0                	mov    eax,esi
c0004a05:	31 d2                	xor    edx,edx
c0004a07:	e8 d3 d2 ff ff       	call   c0001cdf <st_dword>
c0004a0c:	83 c8 ff             	or     eax,0xffffffff
c0004a0f:	47                   	inc    edi
c0004a10:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a15:	e8 7e d8 ff ff       	call   c0002298 <crc32>
c0004a1a:	83 ff 5c             	cmp    edi,0x5c
c0004a1d:	75 f0                	jne    c0004a0f <create_partition+0x3d6>
c0004a1f:	f7 d0                	not    eax
c0004a21:	89 c2                	mov    edx,eax
c0004a23:	89 f0                	mov    eax,esi
c0004a25:	e8 b5 d2 ff ff       	call   c0001cdf <st_dword>
c0004a2a:	83 ec 0c             	sub    esp,0xc
c0004a2d:	6a 01                	push   0x1
c0004a2f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a33:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a37:	83 c0 ff             	add    eax,0xffffffff
c0004a3a:	83 d2 ff             	adc    edx,0xffffffff
c0004a3d:	52                   	push   edx
c0004a3e:	50                   	push   eax
c0004a3f:	53                   	push   ebx
c0004a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a44:	e8 eb d1 ff ff       	call   c0001c34 <disk_write>
c0004a49:	83 c4 20             	add    esp,0x20
c0004a4c:	85 c0                	test   eax,eax
c0004a4e:	0f 85 16 fc ff ff    	jne    c000466a <create_partition+0x31>
c0004a54:	31 d2                	xor    edx,edx
c0004a56:	89 d8                	mov    eax,ebx
c0004a58:	b9 00 02 00 00       	mov    ecx,0x200
c0004a5d:	e8 9b d2 ff ff       	call   c0001cfd <mem_set>
c0004a62:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a68:	b9 10 00 00 00       	mov    ecx,0x10
c0004a6d:	ba b0 93 02 c0       	mov    edx,0xc00293b0
c0004a72:	e8 71 d2 ff ff       	call   c0001ce8 <mem_cpy>
c0004a77:	e9 21 01 00 00       	jmp    c0004b9d <create_partition+0x564>
c0004a7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a80:	b9 05 00 00 00       	mov    ecx,0x5
c0004a85:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a88:	bf 08 00 00 00       	mov    edi,0x8
c0004a8d:	89 f8                	mov    eax,edi
c0004a8f:	31 d2                	xor    edx,edx
c0004a91:	0f b6 f0             	movzx  esi,al
c0004a94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a97:	f7 f6                	div    esi
c0004a99:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a9e:	76 0a                	jbe    c0004aaa <create_partition+0x471>
c0004aa0:	d1 e7                	shl    edi,1
c0004aa2:	49                   	dec    ecx
c0004aa3:	75 e8                	jne    c0004a8d <create_partition+0x454>
c0004aa5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aaa:	b9 00 02 00 00       	mov    ecx,0x200
c0004aaf:	31 d2                	xor    edx,edx
c0004ab1:	89 d8                	mov    eax,ebx
c0004ab3:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab9:	e8 3f d2 ff ff       	call   c0001cfd <mem_set>
c0004abe:	b9 64 00 00 00       	mov    ecx,0x64
c0004ac3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ac6:	31 d2                	xor    edx,edx
c0004ac8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ad0:	f7 f1                	div    ecx
c0004ad2:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004ad7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004adb:	89 f8                	mov    eax,edi
c0004add:	0f b6 c0             	movzx  eax,al
c0004ae0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004ae4:	e9 80 00 00 00       	jmp    c0004b69 <create_partition+0x530>
c0004ae9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aec:	29 cf                	sub    edi,ecx
c0004aee:	89 ca                	mov    edx,ecx
c0004af0:	89 f0                	mov    eax,esi
c0004af2:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004af7:	e8 e3 d1 ff ff       	call   c0001cdf <st_dword>
c0004afc:	8d 46 04             	lea    eax,[esi+0x4]
c0004aff:	89 fa                	mov    edx,edi
c0004b01:	83 c6 10             	add    esi,0x10
c0004b04:	e8 d6 d1 ff ff       	call   c0001cdf <st_dword>
c0004b09:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b0d:	31 d2                	xor    edx,edx
c0004b0f:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b12:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b16:	89 c8                	mov    eax,ecx
c0004b18:	01 f9                	add    ecx,edi
c0004b1a:	f7 f5                	div    ebp
c0004b1c:	89 d5                	mov    ebp,edx
c0004b1e:	31 d2                	xor    edx,edx
c0004b20:	45                   	inc    ebp
c0004b21:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b25:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b28:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b2b:	89 c2                	mov    edx,eax
c0004b2d:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b30:	c1 ea 02             	shr    edx,0x2
c0004b33:	83 e2 c0             	and    edx,0xffffffc0
c0004b36:	09 ea                	or     edx,ebp
c0004b38:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b3d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b40:	31 d2                	xor    edx,edx
c0004b42:	f7 f5                	div    ebp
c0004b44:	89 d7                	mov    edi,edx
c0004b46:	31 d2                	xor    edx,edx
c0004b48:	47                   	inc    edi
c0004b49:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b4d:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b50:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b53:	89 c5                	mov    ebp,eax
c0004b55:	c1 ed 02             	shr    ebp,0x2
c0004b58:	83 e5 c0             	and    ebp,0xffffffc0
c0004b5b:	09 ef                	or     edi,ebp
c0004b5d:	89 fa                	mov    edx,edi
c0004b5f:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b62:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b67:	74 34                	je     c0004b9d <create_partition+0x564>
c0004b69:	85 c9                	test   ecx,ecx
c0004b6b:	74 30                	je     c0004b9d <create_partition+0x564>
c0004b6d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b70:	76 2b                	jbe    c0004b9d <create_partition+0x564>
c0004b72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b7a:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b7d:	83 ff 64             	cmp    edi,0x64
c0004b80:	76 4b                	jbe    c0004bcd <create_partition+0x594>
c0004b82:	89 f8                	mov    eax,edi
c0004b84:	01 c8                	add    eax,ecx
c0004b86:	0f 82 5d ff ff ff    	jb     c0004ae9 <create_partition+0x4b0>
c0004b8c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b8f:	0f 87 54 ff ff ff    	ja     c0004ae9 <create_partition+0x4b0>
c0004b95:	85 ff                	test   edi,edi
c0004b97:	0f 85 51 ff ff ff    	jne    c0004aee <create_partition+0x4b5>
c0004b9d:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004ba3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba8:	e8 2e d1 ff ff       	call   c0001cdb <st_word>
c0004bad:	83 ec 0c             	sub    esp,0xc
c0004bb0:	6a 01                	push   0x1
c0004bb2:	6a 00                	push   0x0
c0004bb4:	6a 00                	push   0x0
c0004bb6:	53                   	push   ebx
c0004bb7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bbb:	e8 74 d0 ff ff       	call   c0001c34 <disk_write>
c0004bc0:	83 c4 20             	add    esp,0x20
c0004bc3:	85 c0                	test   eax,eax
c0004bc5:	0f 95 c0             	setne  al
c0004bc8:	0f b6 c0             	movzx  eax,al
c0004bcb:	eb 0e                	jmp    c0004bdb <create_partition+0x5a2>
c0004bcd:	74 07                	je     c0004bd6 <create_partition+0x59d>
c0004bcf:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bd4:	eb ac                	jmp    c0004b82 <create_partition+0x549>
c0004bd6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd9:	eb a7                	jmp    c0004b82 <create_partition+0x549>
c0004bdb:	83 c4 5c             	add    esp,0x5c
c0004bde:	5b                   	pop    ebx
c0004bdf:	5e                   	pop    esi
c0004be0:	5f                   	pop    edi
c0004be1:	5d                   	pop    ebp
c0004be2:	c3                   	ret    

c0004be3 <get_fileinfo>:
c0004be3:	55                   	push   ebp
c0004be4:	57                   	push   edi
c0004be5:	56                   	push   esi
c0004be6:	53                   	push   ebx
c0004be7:	83 ec 1c             	sub    esp,0x1c
c0004bea:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bec:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bf0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bf4:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bf7:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bfa:	0f 84 dc 01 00 00    	je     c0004ddc <get_fileinfo+0x1f9>
c0004c00:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c03:	75 0f                	jne    c0004c14 <get_fileinfo+0x31>
c0004c05:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c08:	83 c4 1c             	add    esp,0x1c
c0004c0b:	5b                   	pop    ebx
c0004c0c:	5e                   	pop    esi
c0004c0d:	5f                   	pop    edi
c0004c0e:	5d                   	pop    ebp
c0004c0f:	e9 58 d5 ff ff       	jmp    c000216c <get_xfileinfo>
c0004c14:	89 d3                	mov    ebx,edx
c0004c16:	89 c6                	mov    esi,eax
c0004c18:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c1c:	74 6a                	je     c0004c88 <get_fileinfo+0xa5>
c0004c1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c26:	31 ed                	xor    ebp,ebp
c0004c28:	31 ff                	xor    edi,edi
c0004c2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c35:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c39:	66 85 d2             	test   dx,dx
c0004c3c:	74 3e                	je     c0004c7c <get_fileinfo+0x99>
c0004c3e:	66 85 ed             	test   bp,bp
c0004c41:	75 0c                	jne    c0004c4f <get_fileinfo+0x6c>
c0004c43:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c49:	66 3d ff 07          	cmp    ax,0x7ff
c0004c4d:	76 22                	jbe    c0004c71 <get_fileinfo+0x8e>
c0004c4f:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c54:	89 e8                	mov    eax,ebp
c0004c56:	29 f9                	sub    ecx,edi
c0004c58:	c1 e0 10             	shl    eax,0x10
c0004c5b:	09 d0                	or     eax,edx
c0004c5d:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c61:	e8 a3 d1 ff ff       	call   c0001e09 <put_utf>
c0004c66:	84 c0                	test   al,al
c0004c68:	74 10                	je     c0004c7a <get_fileinfo+0x97>
c0004c6a:	0f b6 c0             	movzx  eax,al
c0004c6d:	31 d2                	xor    edx,edx
c0004c6f:	01 c7                	add    edi,eax
c0004c71:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c76:	89 d5                	mov    ebp,edx
c0004c78:	eb b0                	jmp    c0004c2a <get_fileinfo+0x47>
c0004c7a:	31 ff                	xor    edi,edi
c0004c7c:	66 85 ed             	test   bp,bp
c0004c7f:	74 02                	je     c0004c83 <get_fileinfo+0xa0>
c0004c81:	31 ff                	xor    edi,edi
c0004c83:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c88:	31 ff                	xor    edi,edi
c0004c8a:	31 c9                	xor    ecx,ecx
c0004c8c:	83 f9 0a             	cmp    ecx,0xa
c0004c8f:	0f 87 ad 00 00 00    	ja     c0004d42 <get_fileinfo+0x15f>
c0004c95:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c98:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c9b:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c9f:	66 83 fa 20          	cmp    dx,0x20
c0004ca3:	0f 84 92 00 00 00    	je     c0004d3b <get_fileinfo+0x158>
c0004ca9:	66 83 fa 05          	cmp    dx,0x5
c0004cad:	75 05                	jne    c0004cb4 <get_fileinfo+0xd1>
c0004caf:	ba e5 00 00 00       	mov    edx,0xe5
c0004cb4:	83 ff 0b             	cmp    edi,0xb
c0004cb7:	77 0b                	ja     c0004cc4 <get_fileinfo+0xe1>
c0004cb9:	83 fd 09             	cmp    ebp,0x9
c0004cbc:	75 06                	jne    c0004cc4 <get_fileinfo+0xe1>
c0004cbe:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cc3:	47                   	inc    edi
c0004cc4:	0f b7 c2             	movzx  eax,dx
c0004cc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ccb:	e8 6d d0 ff ff       	call   c0001d3d <dbc_1st>
c0004cd0:	85 c0                	test   eax,eax
c0004cd2:	74 2f                	je     c0004d03 <get_fileinfo+0x120>
c0004cd4:	83 fd 08             	cmp    ebp,0x8
c0004cd7:	74 2a                	je     c0004d03 <get_fileinfo+0x120>
c0004cd9:	83 fd 0b             	cmp    ebp,0xb
c0004cdc:	74 25                	je     c0004d03 <get_fileinfo+0x120>
c0004cde:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ce1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ce5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce9:	e8 52 d0 ff ff       	call   c0001d40 <dbc_2nd>
c0004cee:	85 c0                	test   eax,eax
c0004cf0:	74 11                	je     c0004d03 <get_fileinfo+0x120>
c0004cf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cf6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cfb:	c1 e2 08             	shl    edx,0x8
c0004cfe:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d01:	09 c2                	or     edx,eax
c0004d03:	0f b7 d2             	movzx  edx,dx
c0004d06:	50                   	push   eax
c0004d07:	50                   	push   eax
c0004d08:	68 b5 01 00 00       	push   0x1b5
c0004d0d:	52                   	push   edx
c0004d0e:	e8 46 38 00 00       	call   c0008559 <ff_oem2uni>
c0004d13:	83 c4 10             	add    esp,0x10
c0004d16:	66 85 c0             	test   ax,ax
c0004d19:	75 04                	jne    c0004d1f <get_fileinfo+0x13c>
c0004d1b:	31 ff                	xor    edi,edi
c0004d1d:	eb 23                	jmp    c0004d42 <get_fileinfo+0x15f>
c0004d1f:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d24:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d28:	29 f9                	sub    ecx,edi
c0004d2a:	0f b7 c0             	movzx  eax,ax
c0004d2d:	e8 d7 d0 ff ff       	call   c0001e09 <put_utf>
c0004d32:	84 c0                	test   al,al
c0004d34:	74 e5                	je     c0004d1b <get_fileinfo+0x138>
c0004d36:	0f b6 c0             	movzx  eax,al
c0004d39:	01 c7                	add    edi,eax
c0004d3b:	89 e9                	mov    ecx,ebp
c0004d3d:	e9 4a ff ff ff       	jmp    c0004c8c <get_fileinfo+0xa9>
c0004d42:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d47:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d4b:	75 54                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d4d:	85 ff                	test   edi,edi
c0004d4f:	75 0b                	jne    c0004d5c <get_fileinfo+0x179>
c0004d51:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d55:	ba 01 00 00 00       	mov    edx,0x1
c0004d5a:	eb 33                	jmp    c0004d8f <get_fileinfo+0x1ac>
c0004d5c:	b1 08                	mov    cl,0x8
c0004d5e:	31 d2                	xor    edx,edx
c0004d60:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d66:	84 c0                	test   al,al
c0004d68:	74 25                	je     c0004d8f <get_fileinfo+0x1ac>
c0004d6a:	66 83 f8 2e          	cmp    ax,0x2e
c0004d6e:	74 16                	je     c0004d86 <get_fileinfo+0x1a3>
c0004d70:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d73:	66 83 ff 19          	cmp    di,0x19
c0004d77:	77 0f                	ja     c0004d88 <get_fileinfo+0x1a5>
c0004d79:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d7c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d7f:	74 07                	je     c0004d88 <get_fileinfo+0x1a5>
c0004d81:	83 c0 20             	add    eax,0x20
c0004d84:	eb 02                	jmp    c0004d88 <get_fileinfo+0x1a5>
c0004d86:	b1 10                	mov    cl,0x10
c0004d88:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d8c:	42                   	inc    edx
c0004d8d:	eb d1                	jmp    c0004d60 <get_fileinfo+0x17d>
c0004d8f:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d97:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d9b:	75 04                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d9d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004da1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004da7:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004daa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dad:	83 c0 1c             	add    eax,0x1c
c0004db0:	e8 c1 ce ff ff       	call   c0001c76 <ld_dword>
c0004db5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dbc:	89 03                	mov    DWORD PTR [ebx],eax
c0004dbe:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc1:	83 c0 16             	add    eax,0x16
c0004dc4:	e8 a0 ce ff ff       	call   c0001c69 <ld_word>
c0004dc9:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dcd:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd0:	83 c0 18             	add    eax,0x18
c0004dd3:	e8 91 ce ff ff       	call   c0001c69 <ld_word>
c0004dd8:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ddc:	83 c4 1c             	add    esp,0x1c
c0004ddf:	5b                   	pop    ebx
c0004de0:	5e                   	pop    esi
c0004de1:	5f                   	pop    edi
c0004de2:	5d                   	pop    ebp
c0004de3:	c3                   	ret    

c0004de4 <ld_clust.isra.0>:
c0004de4:	56                   	push   esi
c0004de5:	89 c6                	mov    esi,eax
c0004de7:	53                   	push   ebx
c0004de8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004deb:	89 d3                	mov    ebx,edx
c0004ded:	e8 77 ce ff ff       	call   c0001c69 <ld_word>
c0004df2:	0f b7 c8             	movzx  ecx,ax
c0004df5:	89 f0                	mov    eax,esi
c0004df7:	3c 03                	cmp    al,0x3
c0004df9:	75 0d                	jne    c0004e08 <ld_clust.isra.0+0x24>
c0004dfb:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dfe:	e8 66 ce ff ff       	call   c0001c69 <ld_word>
c0004e03:	c1 e0 10             	shl    eax,0x10
c0004e06:	09 c1                	or     ecx,eax
c0004e08:	89 c8                	mov    eax,ecx
c0004e0a:	5b                   	pop    ebx
c0004e0b:	5e                   	pop    esi
c0004e0c:	c3                   	ret    

c0004e0d <st_clust.isra.1>:
c0004e0d:	56                   	push   esi
c0004e0e:	89 c6                	mov    esi,eax
c0004e10:	53                   	push   ebx
c0004e11:	89 d3                	mov    ebx,edx
c0004e13:	0f b7 d1             	movzx  edx,cx
c0004e16:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e19:	e8 bd ce ff ff       	call   c0001cdb <st_word>
c0004e1e:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e21:	75 0f                	jne    c0004e32 <st_clust.isra.1+0x25>
c0004e23:	c1 e9 10             	shr    ecx,0x10
c0004e26:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e29:	89 ca                	mov    edx,ecx
c0004e2b:	5b                   	pop    ebx
c0004e2c:	5e                   	pop    esi
c0004e2d:	e9 a9 ce ff ff       	jmp    c0001cdb <st_word>
c0004e32:	5b                   	pop    ebx
c0004e33:	5e                   	pop    esi
c0004e34:	c3                   	ret    

c0004e35 <init_alloc_info.isra.2>:
c0004e35:	56                   	push   esi
c0004e36:	53                   	push   ebx
c0004e37:	89 c6                	mov    esi,eax
c0004e39:	89 d3                	mov    ebx,edx
c0004e3b:	51                   	push   ecx
c0004e3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e3e:	83 c0 34             	add    eax,0x34
c0004e41:	e8 30 ce ff ff       	call   c0001c76 <ld_dword>
c0004e46:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e49:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e4b:	83 c0 38             	add    eax,0x38
c0004e4e:	e8 3b ce ff ff       	call   c0001c8e <ld_qword>
c0004e53:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e56:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e59:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e5b:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e5e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e65:	83 e0 02             	and    eax,0x2
c0004e68:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5b                   	pop    ebx
c0004e6d:	5e                   	pop    esi
c0004e6e:	c3                   	ret    

c0004e6f <follow_path>:
c0004e6f:	56                   	push   esi
c0004e70:	53                   	push   ebx
c0004e71:	89 c3                	mov    ebx,eax
c0004e73:	83 ec 14             	sub    esp,0x14
c0004e76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e7a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e80:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e82:	80 fa 5c             	cmp    dl,0x5c
c0004e85:	75 07                	jne    c0004e8e <follow_path+0x1f>
c0004e87:	40                   	inc    eax
c0004e88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e8c:	eb ee                	jmp    c0004e7c <follow_path+0xd>
c0004e8e:	80 fa 2f             	cmp    dl,0x2f
c0004e91:	74 f4                	je     c0004e87 <follow_path+0x18>
c0004e93:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e9a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ea1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ea4:	77 52                	ja     c0004ef8 <follow_path+0x89>
c0004ea6:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004eaa:	31 d2                	xor    edx,edx
c0004eac:	89 d8                	mov    eax,ebx
c0004eae:	e8 12 e3 ff ff       	call   c00031c5 <dir_sdi>
c0004eb3:	eb 7c                	jmp    c0004f31 <follow_path+0xc2>
c0004eb5:	89 d8                	mov    eax,ebx
c0004eb7:	e8 6e f2 ff ff       	call   c000412a <dir_find>
c0004ebc:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ebf:	85 c0                	test   eax,eax
c0004ec1:	75 46                	jne    c0004f09 <follow_path+0x9a>
c0004ec3:	80 e2 04             	and    dl,0x4
c0004ec6:	75 69                	jne    c0004f31 <follow_path+0xc2>
c0004ec8:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ecc:	74 5e                	je     c0004f2c <follow_path+0xbd>
c0004ece:	8a 06                	mov    al,BYTE PTR [esi]
c0004ed0:	3c 04                	cmp    al,0x4
c0004ed2:	75 41                	jne    c0004f15 <follow_path+0xa6>
c0004ed4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed7:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004edb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ede:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ee1:	30 c0                	xor    al,al
c0004ee3:	09 d0                	or     eax,edx
c0004ee5:	89 da                	mov    edx,ebx
c0004ee7:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004eea:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eed:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ef0:	8d 46 10             	lea    eax,[esi+0x10]
c0004ef3:	e8 3d ff ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0004ef8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004efc:	89 d8                	mov    eax,ebx
c0004efe:	e8 a9 ed ff ff       	call   c0003cac <create_name>
c0004f03:	85 c0                	test   eax,eax
c0004f05:	74 ae                	je     c0004eb5 <follow_path+0x46>
c0004f07:	eb 28                	jmp    c0004f31 <follow_path+0xc2>
c0004f09:	83 f8 04             	cmp    eax,0x4
c0004f0c:	75 23                	jne    c0004f31 <follow_path+0xc2>
c0004f0e:	80 e2 04             	and    dl,0x4
c0004f11:	74 19                	je     c0004f2c <follow_path+0xbd>
c0004f13:	eb 1c                	jmp    c0004f31 <follow_path+0xc2>
c0004f15:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f18:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f1e:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f22:	e8 bd fe ff ff       	call   c0004de4 <ld_clust.isra.0>
c0004f27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f2a:	eb cc                	jmp    c0004ef8 <follow_path+0x89>
c0004f2c:	b8 05 00 00 00       	mov    eax,0x5
c0004f31:	83 c4 14             	add    esp,0x14
c0004f34:	5b                   	pop    ebx
c0004f35:	5e                   	pop    esi
c0004f36:	c3                   	ret    

c0004f37 <f_mount>:
c0004f37:	53                   	push   ebx
c0004f38:	83 ec 18             	sub    esp,0x18
c0004f3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f3f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f4b:	e8 fb d2 ff ff       	call   c000224b <get_ldnumber>
c0004f50:	89 c2                	mov    edx,eax
c0004f52:	b8 0b 00 00 00       	mov    eax,0xb
c0004f57:	85 d2                	test   edx,edx
c0004f59:	78 39                	js     c0004f94 <f_mount+0x5d>
c0004f5b:	8b 04 95 00 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1c00]
c0004f62:	85 c0                	test   eax,eax
c0004f64:	74 03                	je     c0004f69 <f_mount+0x32>
c0004f66:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6d:	85 c0                	test   eax,eax
c0004f6f:	74 03                	je     c0004f74 <f_mount+0x3d>
c0004f71:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f78:	89 04 95 00 e4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1c00],eax
c0004f7f:	31 c0                	xor    eax,eax
c0004f81:	84 db                	test   bl,bl
c0004f83:	74 0f                	je     c0004f94 <f_mount+0x5d>
c0004f85:	31 c9                	xor    ecx,ecx
c0004f87:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f8b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f8f:	e8 65 d7 ff ff       	call   c00026f9 <mount_volume>
c0004f94:	83 c4 18             	add    esp,0x18
c0004f97:	5b                   	pop    ebx
c0004f98:	c3                   	ret    

c0004f99 <f_open>:
c0004f99:	55                   	push   ebp
c0004f9a:	bd 09 00 00 00       	mov    ebp,0x9
c0004f9f:	57                   	push   edi
c0004fa0:	56                   	push   esi
c0004fa1:	53                   	push   ebx
c0004fa2:	83 ec 7c             	sub    esp,0x7c
c0004fa5:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fac:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fb3:	85 db                	test   ebx,ebx
c0004fb5:	0f 84 10 04 00 00    	je     c00053cb <f_open+0x432>
c0004fbb:	89 fe                	mov    esi,edi
c0004fbd:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fc1:	83 e6 3f             	and    esi,0x3f
c0004fc4:	89 f0                	mov    eax,esi
c0004fc6:	0f b6 c8             	movzx  ecx,al
c0004fc9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fd0:	e8 24 d7 ff ff       	call   c00026f9 <mount_volume>
c0004fd5:	89 c5                	mov    ebp,eax
c0004fd7:	85 c0                	test   eax,eax
c0004fd9:	0f 85 e6 03 00 00    	jne    c00053c5 <f_open+0x42c>
c0004fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe3:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fec:	83 ec 0c             	sub    esp,0xc
c0004fef:	68 60 04 00 00       	push   0x460
c0004ff4:	e8 a3 34 00 00       	call   c000849c <ff_memalloc>
c0004ff9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ffd:	83 c4 10             	add    esp,0x10
c0005000:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005005:	0f 84 c0 03 00 00    	je     c00053cb <f_open+0x432>
c000500b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005013:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005019:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000501c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000501f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005026:	8d 44 24 24          	lea    eax,[esp+0x24]
c000502a:	e8 40 fe ff ff       	call   c0004e6f <follow_path>
c000502f:	89 c5                	mov    ebp,eax
c0005031:	85 c0                	test   eax,eax
c0005033:	75 0c                	jne    c0005041 <f_open+0xa8>
c0005035:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000503a:	79 05                	jns    c0005041 <f_open+0xa8>
c000503c:	bd 06 00 00 00       	mov    ebp,0x6
c0005041:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005047:	0f 84 84 01 00 00    	je     c00051d1 <f_open+0x238>
c000504d:	85 ed                	test   ebp,ebp
c000504f:	74 20                	je     c0005071 <f_open+0xd8>
c0005051:	83 fd 04             	cmp    ebp,0x4
c0005054:	0f 85 58 03 00 00    	jne    c00053b2 <f_open+0x419>
c000505a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000505e:	83 ce 08             	or     esi,0x8
c0005061:	e8 8a f2 ff ff       	call   c00042f0 <dir_register>
c0005066:	89 c5                	mov    ebp,eax
c0005068:	85 c0                	test   eax,eax
c000506a:	74 2f                	je     c000509b <f_open+0x102>
c000506c:	e9 41 03 00 00       	jmp    c00053b2 <f_open+0x419>
c0005071:	bd 07 00 00 00       	mov    ebp,0x7
c0005076:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c000507b:	0f 85 31 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005081:	bd 08 00 00 00       	mov    ebp,0x8
c0005086:	f7 c7 04 00 00 00    	test   edi,0x4
c000508c:	0f 85 20 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005092:	83 e7 08             	and    edi,0x8
c0005095:	0f 84 65 01 00 00    	je     c0005200 <f_open+0x267>
c000509b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000509f:	8a 02                	mov    al,BYTE PTR [edx]
c00050a1:	3c 04                	cmp    al,0x4
c00050a3:	0f 85 97 00 00 00    	jne    c0005140 <f_open+0x1a7>
c00050a9:	8d 42 10             	lea    eax,[edx+0x10]
c00050ac:	89 13                	mov    DWORD PTR [ebx],edx
c00050ae:	89 da                	mov    edx,ebx
c00050b0:	e8 80 fd ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c00050b5:	31 d2                	xor    edx,edx
c00050b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bb:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c3:	83 c0 02             	add    eax,0x2
c00050c6:	e8 32 cc ff ff       	call   c0001cfd <mem_set>
c00050cb:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050d0:	31 d2                	xor    edx,edx
c00050d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d9:	83 c0 26             	add    eax,0x26
c00050dc:	e8 1c cc ff ff       	call   c0001cfd <mem_set>
c00050e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e8:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050ec:	ba 00 00 21 50       	mov    edx,0x50210000
c00050f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050f4:	83 c0 08             	add    eax,0x8
c00050f7:	e8 e3 cb ff ff       	call   c0001cdf <st_dword>
c00050fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005100:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005103:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005107:	8d 44 24 24          	lea    eax,[esp+0x24]
c000510b:	e8 b7 ea ff ff       	call   c0003bc7 <store_xdir>
c0005110:	89 c5                	mov    ebp,eax
c0005112:	85 c0                	test   eax,eax
c0005114:	0f 85 98 02 00 00    	jne    c00053b2 <f_open+0x419>
c000511a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000511d:	85 d2                	test   edx,edx
c000511f:	0f 84 db 00 00 00    	je     c0005200 <f_open+0x267>
c0005125:	31 c9                	xor    ecx,ecx
c0005127:	89 d8                	mov    eax,ebx
c0005129:	e8 8e e3 ff ff       	call   c00034bc <remove_chain>
c000512e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005132:	89 c5                	mov    ebp,eax
c0005134:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005137:	48                   	dec    eax
c0005138:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000513b:	e9 b8 00 00 00       	jmp    c00051f8 <f_open+0x25f>
c0005140:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005144:	89 ea                	mov    edx,ebp
c0005146:	e8 99 fc ff ff       	call   c0004de4 <ld_clust.isra.0>
c000514b:	ba 00 00 21 50       	mov    edx,0x50210000
c0005150:	89 c7                	mov    edi,eax
c0005152:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005155:	e8 85 cb ff ff       	call   c0001cdf <st_dword>
c000515a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000515e:	31 c9                	xor    ecx,ecx
c0005160:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005168:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000516c:	e8 9c fc ff ff       	call   c0004e0d <st_clust.isra.1>
c0005171:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005175:	31 d2                	xor    edx,edx
c0005177:	83 c0 1c             	add    eax,0x1c
c000517a:	e8 60 cb ff ff       	call   c0001cdf <st_dword>
c000517f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005183:	85 ff                	test   edi,edi
c0005185:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005189:	74 75                	je     c0005200 <f_open+0x267>
c000518b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518f:	31 c9                	xor    ecx,ecx
c0005191:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005194:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005197:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000519b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000519f:	89 fa                	mov    edx,edi
c00051a1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051a5:	e8 12 e3 ff ff       	call   c00034bc <remove_chain>
c00051aa:	89 c5                	mov    ebp,eax
c00051ac:	85 c0                	test   eax,eax
c00051ae:	0f 85 fe 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c0:	4f                   	dec    edi
c00051c1:	e8 81 d2 ff ff       	call   c0002447 <move_window>
c00051c6:	89 c5                	mov    ebp,eax
c00051c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051cc:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051cf:	eb 27                	jmp    c00051f8 <f_open+0x25f>
c00051d1:	85 ed                	test   ebp,ebp
c00051d3:	0f 85 d9 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051d9:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051dd:	bd 04 00 00 00       	mov    ebp,0x4
c00051e2:	a8 10                	test   al,0x10
c00051e4:	0f 85 c8 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051ea:	83 e7 02             	and    edi,0x2
c00051ed:	74 11                	je     c0005200 <f_open+0x267>
c00051ef:	bd 07 00 00 00       	mov    ebp,0x7
c00051f4:	a8 01                	test   al,0x1
c00051f6:	eb 02                	jmp    c00051fa <f_open+0x261>
c00051f8:	85 ed                	test   ebp,ebp
c00051fa:	0f 85 b2 01 00 00    	jne    c00053b2 <f_open+0x419>
c0005200:	f7 c6 08 00 00 00    	test   esi,0x8
c0005206:	74 03                	je     c000520b <f_open+0x272>
c0005208:	83 ce 40             	or     esi,0x40
c000520b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000520f:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005212:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005215:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005218:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000521b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000521f:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005222:	8a 02                	mov    al,BYTE PTR [edx]
c0005224:	3c 04                	cmp    al,0x4
c0005226:	75 2a                	jne    c0005252 <f_open+0x2b9>
c0005228:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000522c:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005231:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005234:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005238:	30 c0                	xor    al,al
c000523a:	09 c8                	or     eax,ecx
c000523c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000523f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005243:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005246:	8d 42 10             	lea    eax,[edx+0x10]
c0005249:	89 da                	mov    edx,ebx
c000524b:	e8 e5 fb ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0005250:	eb 1c                	jmp    c000526e <f_open+0x2d5>
c0005252:	89 fa                	mov    edx,edi
c0005254:	e8 8b fb ff ff       	call   c0004de4 <ld_clust.isra.0>
c0005259:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000525c:	8d 47 1c             	lea    eax,[edi+0x1c]
c000525f:	e8 12 ca ff ff       	call   c0001c76 <ld_dword>
c0005264:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000526b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005272:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005279:	89 03                	mov    DWORD PTR [ebx],eax
c000527b:	31 d2                	xor    edx,edx
c000527d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005281:	b9 00 02 00 00       	mov    ecx,0x200
c0005286:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000528a:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000528e:	89 f0                	mov    eax,esi
c0005290:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005297:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000529a:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052a1:	8d 43 50             	lea    eax,[ebx+0x50]
c00052a4:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052ab:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052b6:	e8 42 ca ff ff       	call   c0001cfd <mem_set>
c00052bb:	83 e6 20             	and    esi,0x20
c00052be:	75 07                	jne    c00052c7 <f_open+0x32e>
c00052c0:	31 ed                	xor    ebp,ebp
c00052c2:	e9 eb 00 00 00       	jmp    c00053b2 <f_open+0x419>
c00052c7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052ca:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052dd:	74 e1                	je     c00052c0 <f_open+0x327>
c00052df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052e7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052ea:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052f1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052f4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f8:	31 ff                	xor    edi,edi
c00052fa:	c1 e5 09             	shl    ebp,0x9
c00052fd:	89 ee                	mov    esi,ebp
c00052ff:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005303:	89 f8                	mov    eax,edi
c0005305:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005309:	73 22                	jae    c000532d <f_open+0x394>
c000530b:	89 d8                	mov    eax,ebx
c000530d:	e8 bd dc ff ff       	call   c0002fcf <get_fat>
c0005312:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005316:	89 c2                	mov    edx,eax
c0005318:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000531c:	83 f8 01             	cmp    eax,0x1
c000531f:	76 10                	jbe    c0005331 <f_open+0x398>
c0005321:	83 f8 ff             	cmp    eax,0xffffffff
c0005324:	75 d9                	jne    c00052ff <f_open+0x366>
c0005326:	bd 01 00 00 00       	mov    ebp,0x1
c000532b:	eb 09                	jmp    c0005336 <f_open+0x39d>
c000532d:	31 ed                	xor    ebp,ebp
c000532f:	eb 05                	jmp    c0005336 <f_open+0x39d>
c0005331:	bd 02 00 00 00       	mov    ebp,0x2
c0005336:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005339:	85 ed                	test   ebp,ebp
c000533b:	75 75                	jne    c00053b2 <f_open+0x419>
c000533d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005341:	25 ff 01 00 00       	and    eax,0x1ff
c0005346:	0f 84 74 ff ff ff    	je     c00052c0 <f_open+0x327>
c000534c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005350:	bd 02 00 00 00       	mov    ebp,0x2
c0005355:	89 c8                	mov    eax,ecx
c0005357:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000535b:	e8 a2 cb ff ff       	call   c0001f02 <clst2sect>
c0005360:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005364:	89 d7                	mov    edi,edx
c0005366:	09 c7                	or     edi,eax
c0005368:	74 48                	je     c00053b2 <f_open+0x419>
c000536a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000536e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005372:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000537a:	0f ac fe 09          	shrd   esi,edi,0x9
c000537e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005382:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005386:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005389:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000538d:	83 ec 0c             	sub    esp,0xc
c0005390:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005393:	6a 01                	push   0x1
c0005395:	52                   	push   edx
c0005396:	50                   	push   eax
c0005397:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000539b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000539f:	50                   	push   eax
c00053a0:	e8 79 c8 ff ff       	call   c0001c1e <disk_read>
c00053a5:	83 c4 20             	add    esp,0x20
c00053a8:	85 c0                	test   eax,eax
c00053aa:	0f 95 c0             	setne  al
c00053ad:	0f b6 c0             	movzx  eax,al
c00053b0:	89 c5                	mov    ebp,eax
c00053b2:	83 ec 0c             	sub    esp,0xc
c00053b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b9:	e8 f4 30 00 00       	call   c00084b2 <ff_memfree>
c00053be:	83 c4 10             	add    esp,0x10
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	74 06                	je     c00053cb <f_open+0x432>
c00053c5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053cb:	83 c4 7c             	add    esp,0x7c
c00053ce:	89 e8                	mov    eax,ebp
c00053d0:	5b                   	pop    ebx
c00053d1:	5e                   	pop    esi
c00053d2:	5f                   	pop    edi
c00053d3:	5d                   	pop    ebp
c00053d4:	c3                   	ret    

c00053d5 <f_read>:
c00053d5:	55                   	push   ebp
c00053d6:	57                   	push   edi
c00053d7:	56                   	push   esi
c00053d8:	53                   	push   ebx
c00053d9:	83 ec 2c             	sub    esp,0x2c
c00053dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ee:	89 d8                	mov    eax,ebx
c00053f0:	e8 77 cf ff ff       	call   c000236c <validate>
c00053f5:	89 c5                	mov    ebp,eax
c00053f7:	85 c0                	test   eax,eax
c00053f9:	0f 85 4c 02 00 00    	jne    c000564b <f_read+0x276>
c00053ff:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005403:	85 ed                	test   ebp,ebp
c0005405:	0f 85 40 02 00 00    	jne    c000564b <f_read+0x276>
c000540b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000540f:	0f 84 31 02 00 00    	je     c0005646 <f_read+0x271>
c0005415:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005418:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000541b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000541e:	bf 00 00 00 00       	mov    edi,0x0
c0005423:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005426:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000542a:	89 d1                	mov    ecx,edx
c000542c:	19 f9                	sbb    ecx,edi
c000542e:	0f 83 cf 00 00 00    	jae    c0005503 <f_read+0x12e>
c0005434:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005438:	e9 c6 00 00 00       	jmp    c0005503 <f_read+0x12e>
c000543d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005440:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005443:	89 d0                	mov    eax,edx
c0005445:	25 ff 01 00 00       	and    eax,0x1ff
c000544a:	0f 85 c9 01 00 00    	jne    c0005619 <f_read+0x244>
c0005450:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005454:	89 d6                	mov    esi,edx
c0005456:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000545a:	89 cf                	mov    edi,ecx
c000545c:	48                   	dec    eax
c000545d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005461:	21 f0                	and    eax,esi
c0005463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005467:	0f 84 a6 00 00 00    	je     c0005513 <f_read+0x13e>
c000546d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005471:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005474:	89 c8                	mov    eax,ecx
c0005476:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005479:	e8 84 ca ff ff       	call   c0001f02 <clst2sect>
c000547e:	89 d7                	mov    edi,edx
c0005480:	09 c7                	or     edi,eax
c0005482:	0f 84 b4 00 00 00    	je     c000553c <f_read+0x167>
c0005488:	31 ff                	xor    edi,edi
c000548a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000548e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005491:	01 c6                	add    esi,eax
c0005493:	11 d7                	adc    edi,edx
c0005495:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000549d:	0f 86 fd 00 00 00    	jbe    c00055a0 <f_read+0x1cb>
c00054a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ab:	c1 e8 09             	shr    eax,0x9
c00054ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00054b1:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054b5:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b8:	39 c2                	cmp    edx,eax
c00054ba:	76 07                	jbe    c00054c3 <f_read+0xee>
c00054bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00054c3:	83 ec 0c             	sub    esp,0xc
c00054c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054ca:	57                   	push   edi
c00054cb:	56                   	push   esi
c00054cc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054d4:	50                   	push   eax
c00054d5:	e8 44 c7 ff ff       	call   c0001c1e <disk_read>
c00054da:	83 c4 20             	add    esp,0x20
c00054dd:	85 c0                	test   eax,eax
c00054df:	75 6e                	jne    c000554f <f_read+0x17a>
c00054e1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054e5:	78 7e                	js     c0005565 <f_read+0x190>
c00054e7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054ea:	c1 e6 09             	shl    esi,0x9
c00054ed:	31 ff                	xor    edi,edi
c00054ef:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054f7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054fb:	01 30                	add    DWORD PTR [eax],esi
c00054fd:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005500:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005503:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005508:	0f 85 2f ff ff ff    	jne    c000543d <f_read+0x68>
c000550e:	e9 38 01 00 00       	jmp    c000564b <f_read+0x276>
c0005513:	89 c8                	mov    eax,ecx
c0005515:	09 d0                	or     eax,edx
c0005517:	75 05                	jne    c000551e <f_read+0x149>
c0005519:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000551c:	eb 19                	jmp    c0005537 <f_read+0x162>
c000551e:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005522:	74 09                	je     c000552d <f_read+0x158>
c0005524:	89 d8                	mov    eax,ebx
c0005526:	e8 f8 c9 ff ff       	call   c0001f23 <clmt_clust>
c000552b:	eb 0a                	jmp    c0005537 <f_read+0x162>
c000552d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005530:	89 d8                	mov    eax,ebx
c0005532:	e8 98 da ff ff       	call   c0002fcf <get_fat>
c0005537:	83 f8 01             	cmp    eax,0x1
c000553a:	77 0e                	ja     c000554a <f_read+0x175>
c000553c:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005540:	bd 02 00 00 00       	mov    ebp,0x2
c0005545:	e9 01 01 00 00       	jmp    c000564b <f_read+0x276>
c000554a:	83 f8 ff             	cmp    eax,0xffffffff
c000554d:	75 0e                	jne    c000555d <f_read+0x188>
c000554f:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005553:	bd 01 00 00 00       	mov    ebp,0x1
c0005558:	e9 ee 00 00 00       	jmp    c000564b <f_read+0x276>
c000555d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005560:	e9 08 ff ff ff       	jmp    c000546d <f_read+0x98>
c0005565:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005568:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000556b:	29 f0                	sub    eax,esi
c000556d:	19 fa                	sbb    edx,edi
c000556f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005572:	89 d7                	mov    edi,edx
c0005574:	ba 00 00 00 00       	mov    edx,0x0
c0005579:	89 f9                	mov    ecx,edi
c000557b:	19 d1                	sbb    ecx,edx
c000557d:	0f 83 64 ff ff ff    	jae    c00054e7 <f_read+0x112>
c0005583:	89 c7                	mov    edi,eax
c0005585:	8d 53 50             	lea    edx,[ebx+0x50]
c0005588:	c1 e7 09             	shl    edi,0x9
c000558b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558f:	b9 00 02 00 00       	mov    ecx,0x200
c0005594:	01 f8                	add    eax,edi
c0005596:	e8 4d c7 ff ff       	call   c0001ce8 <mem_cpy>
c000559b:	e9 47 ff ff ff       	jmp    c00054e7 <f_read+0x112>
c00055a0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055a3:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055ad:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055b1:	75 05                	jne    c00055b8 <f_read+0x1e3>
c00055b3:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055b6:	74 5b                	je     c0005613 <f_read+0x23e>
c00055b8:	8d 43 50             	lea    eax,[ebx+0x50]
c00055bb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055c3:	79 2a                	jns    c00055ef <f_read+0x21a>
c00055c5:	83 ec 0c             	sub    esp,0xc
c00055c8:	6a 01                	push   0x1
c00055ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055da:	50                   	push   eax
c00055db:	e8 54 c6 ff ff       	call   c0001c34 <disk_write>
c00055e0:	83 c4 20             	add    esp,0x20
c00055e3:	85 c0                	test   eax,eax
c00055e5:	0f 85 64 ff ff ff    	jne    c000554f <f_read+0x17a>
c00055eb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ef:	83 ec 0c             	sub    esp,0xc
c00055f2:	6a 01                	push   0x1
c00055f4:	57                   	push   edi
c00055f5:	56                   	push   esi
c00055f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055fe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005602:	50                   	push   eax
c0005603:	e8 16 c6 ff ff       	call   c0001c1e <disk_read>
c0005608:	83 c4 20             	add    esp,0x20
c000560b:	85 c0                	test   eax,eax
c000560d:	0f 85 3c ff ff ff    	jne    c000554f <f_read+0x17a>
c0005613:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005616:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005619:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000561c:	ba 00 02 00 00       	mov    edx,0x200
c0005621:	25 ff 01 00 00       	and    eax,0x1ff
c0005626:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000562a:	29 c2                	sub    edx,eax
c000562c:	39 d6                	cmp    esi,edx
c000562e:	76 02                	jbe    c0005632 <f_read+0x25d>
c0005630:	89 d6                	mov    esi,edx
c0005632:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005636:	89 f1                	mov    ecx,esi
c0005638:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000563c:	e8 a7 c6 ff ff       	call   c0001ce8 <mem_cpy>
c0005641:	e9 a7 fe ff ff       	jmp    c00054ed <f_read+0x118>
c0005646:	bd 07 00 00 00       	mov    ebp,0x7
c000564b:	83 c4 2c             	add    esp,0x2c
c000564e:	89 e8                	mov    eax,ebp
c0005650:	5b                   	pop    ebx
c0005651:	5e                   	pop    esi
c0005652:	5f                   	pop    edi
c0005653:	5d                   	pop    ebp
c0005654:	c3                   	ret    

c0005655 <f_write>:
c0005655:	55                   	push   ebp
c0005656:	57                   	push   edi
c0005657:	56                   	push   esi
c0005658:	53                   	push   ebx
c0005659:	83 ec 2c             	sub    esp,0x2c
c000565c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005660:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005664:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000566a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000566e:	89 d8                	mov    eax,ebx
c0005670:	e8 f7 cc ff ff       	call   c000236c <validate>
c0005675:	89 c5                	mov    ebp,eax
c0005677:	85 c0                	test   eax,eax
c0005679:	0f 85 86 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000567f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005683:	85 ed                	test   ebp,ebp
c0005685:	0f 85 7a 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000568b:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000568f:	0f 84 6b 02 00 00    	je     c0005900 <f_write+0x2ab>
c0005695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005699:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569c:	0f 84 43 01 00 00    	je     c00057e5 <f_write+0x190>
c00056a2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056a5:	89 c1                	mov    ecx,eax
c00056a7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056ab:	0f 83 34 01 00 00    	jae    c00057e5 <f_write+0x190>
c00056b1:	f7 d0                	not    eax
c00056b3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056b7:	e9 29 01 00 00       	jmp    c00057e5 <f_write+0x190>
c00056bc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056bf:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056c2:	89 d0                	mov    eax,edx
c00056c4:	25 ff 01 00 00       	and    eax,0x1ff
c00056c9:	0f 85 00 02 00 00    	jne    c00058cf <f_write+0x27a>
c00056cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056d3:	89 d6                	mov    esi,edx
c00056d5:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d9:	89 cf                	mov    edi,ecx
c00056db:	48                   	dec    eax
c00056dc:	0f ac fe 09          	shrd   esi,edi,0x9
c00056e0:	21 f0                	and    eax,esi
c00056e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056e6:	0f 84 06 01 00 00    	je     c00057f2 <f_write+0x19d>
c00056ec:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056f0:	0f 88 6e 01 00 00    	js     c0005864 <f_write+0x20f>
c00056f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056fa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056fd:	89 c8                	mov    eax,ecx
c00056ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005703:	e8 fa c7 ff ff       	call   c0001f02 <clst2sect>
c0005708:	89 d1                	mov    ecx,edx
c000570a:	09 c1                	or     ecx,eax
c000570c:	0f 84 1c 01 00 00    	je     c000582e <f_write+0x1d9>
c0005712:	31 ff                	xor    edi,edi
c0005714:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005718:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000571c:	01 c6                	add    esi,eax
c000571e:	11 d7                	adc    edi,edx
c0005720:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005728:	0f 86 63 01 00 00    	jbe    c0005891 <f_write+0x23c>
c000572e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005736:	c1 e8 09             	shr    eax,0x9
c0005739:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000573d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005741:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005745:	39 c2                	cmp    edx,eax
c0005747:	76 08                	jbe    c0005751 <f_write+0xfc>
c0005749:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000574d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005751:	83 ec 0c             	sub    esp,0xc
c0005754:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005758:	57                   	push   edi
c0005759:	56                   	push   esi
c000575a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000575e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005762:	50                   	push   eax
c0005763:	e8 cc c4 ff ff       	call   c0001c34 <disk_write>
c0005768:	83 c4 20             	add    esp,0x20
c000576b:	85 c0                	test   eax,eax
c000576d:	0f 85 ce 00 00 00    	jne    c0005841 <f_write+0x1ec>
c0005773:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005776:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005779:	29 f0                	sub    eax,esi
c000577b:	19 fa                	sbb    edx,edi
c000577d:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005781:	89 d7                	mov    edi,edx
c0005783:	ba 00 00 00 00       	mov    edx,0x0
c0005788:	89 f9                	mov    ecx,edi
c000578a:	19 d1                	sbb    ecx,edx
c000578c:	73 1c                	jae    c00057aa <f_write+0x155>
c000578e:	89 c7                	mov    edi,eax
c0005790:	b9 00 02 00 00       	mov    ecx,0x200
c0005795:	c1 e7 09             	shl    edi,0x9
c0005798:	8d 43 50             	lea    eax,[ebx+0x50]
c000579b:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000579f:	89 fa                	mov    edx,edi
c00057a1:	e8 42 c5 ff ff       	call   c0001ce8 <mem_cpy>
c00057a6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057aa:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057ae:	c1 e6 09             	shl    esi,0x9
c00057b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057b5:	31 ff                	xor    edi,edi
c00057b7:	01 30                	add    DWORD PTR [eax],esi
c00057b9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057bd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c4:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057c7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057ca:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057cd:	89 c1                	mov    ecx,eax
c00057cf:	39 f2                	cmp    edx,esi
c00057d1:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057d4:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057d7:	19 f9                	sbb    ecx,edi
c00057d9:	73 04                	jae    c00057df <f_write+0x18a>
c00057db:	89 f2                	mov    edx,esi
c00057dd:	89 f8                	mov    eax,edi
c00057df:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057e2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057e5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057ea:	0f 85 cc fe ff ff    	jne    c00056bc <f_write+0x67>
c00057f0:	eb 2e                	jmp    c0005820 <f_write+0x1cb>
c00057f2:	89 c8                	mov    eax,ecx
c00057f4:	09 d0                	or     eax,edx
c00057f6:	75 0b                	jne    c0005803 <f_write+0x1ae>
c00057f8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057fb:	31 d2                	xor    edx,edx
c00057fd:	85 c0                	test   eax,eax
c00057ff:	75 28                	jne    c0005829 <f_write+0x1d4>
c0005801:	eb 12                	jmp    c0005815 <f_write+0x1c0>
c0005803:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005807:	74 09                	je     c0005812 <f_write+0x1bd>
c0005809:	89 d8                	mov    eax,ebx
c000580b:	e8 13 c7 ff ff       	call   c0001f23 <clmt_clust>
c0005810:	eb 0a                	jmp    c000581c <f_write+0x1c7>
c0005812:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005815:	89 d8                	mov    eax,ebx
c0005817:	e8 a1 da ff ff       	call   c00032bd <create_chain>
c000581c:	85 c0                	test   eax,eax
c000581e:	75 09                	jne    c0005829 <f_write+0x1d4>
c0005820:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005824:	e9 dc 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c0005829:	83 f8 01             	cmp    eax,0x1
c000582c:	75 0e                	jne    c000583c <f_write+0x1e7>
c000582e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005832:	bd 02 00 00 00       	mov    ebp,0x2
c0005837:	e9 c9 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000583c:	83 f8 ff             	cmp    eax,0xffffffff
c000583f:	75 0e                	jne    c000584f <f_write+0x1fa>
c0005841:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005845:	bd 01 00 00 00       	mov    ebp,0x1
c000584a:	e9 b6 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000584f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005852:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005856:	0f 85 90 fe ff ff    	jne    c00056ec <f_write+0x97>
c000585c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000585f:	e9 88 fe ff ff       	jmp    c00056ec <f_write+0x97>
c0005864:	83 ec 0c             	sub    esp,0xc
c0005867:	8d 43 50             	lea    eax,[ebx+0x50]
c000586a:	6a 01                	push   0x1
c000586c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000586f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005872:	50                   	push   eax
c0005873:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005877:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000587b:	50                   	push   eax
c000587c:	e8 b3 c3 ff ff       	call   c0001c34 <disk_write>
c0005881:	83 c4 20             	add    esp,0x20
c0005884:	85 c0                	test   eax,eax
c0005886:	75 b9                	jne    c0005841 <f_write+0x1ec>
c0005888:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000588c:	e9 65 fe ff ff       	jmp    c00056f6 <f_write+0xa1>
c0005891:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005894:	75 05                	jne    c000589b <f_write+0x246>
c0005896:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005899:	74 2e                	je     c00058c9 <f_write+0x274>
c000589b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000589e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058a1:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058a4:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058a7:	73 20                	jae    c00058c9 <f_write+0x274>
c00058a9:	83 ec 0c             	sub    esp,0xc
c00058ac:	8d 43 50             	lea    eax,[ebx+0x50]
c00058af:	6a 01                	push   0x1
c00058b1:	57                   	push   edi
c00058b2:	56                   	push   esi
c00058b3:	50                   	push   eax
c00058b4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b8:	50                   	push   eax
c00058b9:	e8 60 c3 ff ff       	call   c0001c1e <disk_read>
c00058be:	83 c4 20             	add    esp,0x20
c00058c1:	85 c0                	test   eax,eax
c00058c3:	0f 85 78 ff ff ff    	jne    c0005841 <f_write+0x1ec>
c00058c9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058cc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058cf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058d2:	ba 00 02 00 00       	mov    edx,0x200
c00058d7:	25 ff 01 00 00       	and    eax,0x1ff
c00058dc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058e0:	29 c2                	sub    edx,eax
c00058e2:	39 d6                	cmp    esi,edx
c00058e4:	76 02                	jbe    c00058e8 <f_write+0x293>
c00058e6:	89 d6                	mov    esi,edx
c00058e8:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058ec:	89 f1                	mov    ecx,esi
c00058ee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058f2:	e8 f1 c3 ff ff       	call   c0001ce8 <mem_cpy>
c00058f7:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058fb:	e9 b1 fe ff ff       	jmp    c00057b1 <f_write+0x15c>
c0005900:	bd 07 00 00 00       	mov    ebp,0x7
c0005905:	83 c4 2c             	add    esp,0x2c
c0005908:	89 e8                	mov    eax,ebp
c000590a:	5b                   	pop    ebx
c000590b:	5e                   	pop    esi
c000590c:	5f                   	pop    edi
c000590d:	5d                   	pop    ebp
c000590e:	c3                   	ret    

c000590f <f_sync>:
c000590f:	56                   	push   esi
c0005910:	53                   	push   ebx
c0005911:	83 ec 64             	sub    esp,0x64
c0005914:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005918:	8d 54 24 10          	lea    edx,[esp+0x10]
c000591c:	89 d8                	mov    eax,ebx
c000591e:	e8 49 ca ff ff       	call   c000236c <validate>
c0005923:	85 c0                	test   eax,eax
c0005925:	0f 85 ba 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000592b:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000592e:	f6 c2 40             	test   dl,0x40
c0005931:	0f 84 ae 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c0005937:	84 d2                	test   dl,dl
c0005939:	79 33                	jns    c000596e <f_sync+0x5f>
c000593b:	83 ec 0c             	sub    esp,0xc
c000593e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005941:	6a 01                	push   0x1
c0005943:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005946:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005949:	50                   	push   eax
c000594a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000594e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005952:	50                   	push   eax
c0005953:	e8 dc c2 ff ff       	call   c0001c34 <disk_write>
c0005958:	83 c4 20             	add    esp,0x20
c000595b:	89 c2                	mov    edx,eax
c000595d:	b8 01 00 00 00       	mov    eax,0x1
c0005962:	85 d2                	test   edx,edx
c0005964:	0f 85 7b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000596a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000596e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005972:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005975:	0f 85 11 01 00 00    	jne    c0005a8c <f_sync+0x17d>
c000597b:	89 d8                	mov    eax,ebx
c000597d:	e8 13 d6 ff ff       	call   c0002f95 <fill_first_frag>
c0005982:	85 c0                	test   eax,eax
c0005984:	0f 85 5b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000598a:	83 c9 ff             	or     ecx,0xffffffff
c000598d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005990:	89 d8                	mov    eax,ebx
c0005992:	e8 c9 d5 ff ff       	call   c0002f60 <fill_last_frag>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 46 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000599f:	83 ec 0c             	sub    esp,0xc
c00059a2:	68 60 04 00 00       	push   0x460
c00059a7:	e8 f0 2a 00 00       	call   c000849c <ff_memalloc>
c00059ac:	83 c4 10             	add    esp,0x10
c00059af:	89 c6                	mov    esi,eax
c00059b1:	b8 11 00 00 00       	mov    eax,0x11
c00059b6:	85 f6                	test   esi,esi
c00059b8:	0f 84 27 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c00059be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059cb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059ce:	89 da                	mov    edx,ebx
c00059d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059d4:	e8 af df ff ff       	call   c0003988 <load_obj_xdir>
c00059d9:	85 c0                	test   eax,eax
c00059db:	0f 85 95 00 00 00    	jne    c0005a76 <f_sync+0x167>
c00059e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e8:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059ec:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ef:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059f2:	83 ca 01             	or     edx,0x1
c00059f5:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059fb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fe:	83 c0 34             	add    eax,0x34
c0005a01:	e8 d9 c2 ff ff       	call   c0001cdf <st_dword>
c0005a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a0d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a10:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a13:	83 c0 38             	add    eax,0x38
c0005a16:	e8 c7 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a1b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a22:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a28:	83 c0 28             	add    eax,0x28
c0005a2b:	e8 b2 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a34:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a39:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a3c:	83 c0 0c             	add    eax,0xc
c0005a3f:	e8 9b c2 ff ff       	call   c0001cdf <st_dword>
c0005a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a48:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a4b:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a4f:	31 d2                	xor    edx,edx
c0005a51:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a54:	83 c0 10             	add    eax,0x10
c0005a57:	e8 83 c2 ff ff       	call   c0001cdf <st_dword>
c0005a5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a60:	e8 62 e1 ff ff       	call   c0003bc7 <store_xdir>
c0005a65:	85 c0                	test   eax,eax
c0005a67:	75 0d                	jne    c0005a76 <f_sync+0x167>
c0005a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a6d:	e8 00 eb ff ff       	call   c0004572 <sync_fs>
c0005a72:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a7a:	83 ec 0c             	sub    esp,0xc
c0005a7d:	56                   	push   esi
c0005a7e:	e8 2f 2a 00 00       	call   c00084b2 <ff_memfree>
c0005a83:	83 c4 10             	add    esp,0x10
c0005a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a8a:	eb 59                	jmp    c0005ae5 <f_sync+0x1d6>
c0005a8c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a8f:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a92:	e8 b0 c9 ff ff       	call   c0002447 <move_window>
c0005a97:	85 c0                	test   eax,eax
c0005a99:	75 4a                	jne    c0005ae5 <f_sync+0x1d6>
c0005a9b:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a9e:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005aa2:	89 f2                	mov    edx,esi
c0005aa4:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005aa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa9:	e8 5f f3 ff ff       	call   c0004e0d <st_clust.isra.1>
c0005aae:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ab1:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005ab4:	e8 26 c2 ff ff       	call   c0001cdf <st_dword>
c0005ab9:	8d 46 16             	lea    eax,[esi+0x16]
c0005abc:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ac1:	e8 19 c2 ff ff       	call   c0001cdf <st_dword>
c0005ac6:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac9:	31 d2                	xor    edx,edx
c0005acb:	e8 0b c2 ff ff       	call   c0001cdb <st_word>
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005adc:	e8 91 ea ff ff       	call   c0004572 <sync_fs>
c0005ae1:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005ae5:	83 c4 64             	add    esp,0x64
c0005ae8:	5b                   	pop    ebx
c0005ae9:	5e                   	pop    esi
c0005aea:	c3                   	ret    

c0005aeb <f_close>:
c0005aeb:	53                   	push   ebx
c0005aec:	83 ec 24             	sub    esp,0x24
c0005aef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005af3:	53                   	push   ebx
c0005af4:	e8 16 fe ff ff       	call   c000590f <f_sync>
c0005af9:	83 c4 10             	add    esp,0x10
c0005afc:	85 c0                	test   eax,eax
c0005afe:	75 15                	jne    c0005b15 <f_close+0x2a>
c0005b00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b04:	89 d8                	mov    eax,ebx
c0005b06:	e8 61 c8 ff ff       	call   c000236c <validate>
c0005b0b:	85 c0                	test   eax,eax
c0005b0d:	75 06                	jne    c0005b15 <f_close+0x2a>
c0005b0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b15:	83 c4 18             	add    esp,0x18
c0005b18:	5b                   	pop    ebx
c0005b19:	c3                   	ret    

c0005b1a <f_lseek>:
c0005b1a:	55                   	push   ebp
c0005b1b:	57                   	push   edi
c0005b1c:	56                   	push   esi
c0005b1d:	53                   	push   ebx
c0005b1e:	83 ec 3c             	sub    esp,0x3c
c0005b21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b25:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b29:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b3a:	e8 2d c8 ff ff       	call   c000236c <validate>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	85 c0                	test   eax,eax
c0005b45:	0f 85 7a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b4b:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b53:	85 c0                	test   eax,eax
c0005b55:	0f 85 6a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b5f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b62:	74 0c                	je     c0005b70 <f_lseek+0x56>
c0005b64:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b67:	85 c0                	test   eax,eax
c0005b69:	75 1f                	jne    c0005b8a <f_lseek+0x70>
c0005b6b:	e9 b5 01 00 00       	jmp    c0005d25 <f_lseek+0x20b>
c0005b70:	83 c9 ff             	or     ecx,0xffffffff
c0005b73:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b76:	89 d8                	mov    eax,ebx
c0005b78:	e8 e3 d3 ff ff       	call   c0002f60 <fill_last_frag>
c0005b7d:	85 c0                	test   eax,eax
c0005b7f:	74 e3                	je     c0005b64 <f_lseek+0x4a>
c0005b81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b85:	e9 3b 04 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005b8a:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b8f:	0f 85 ac 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b95:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b99:	0f 85 a2 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b9f:	8d 78 04             	lea    edi,[eax+0x4]
c0005ba2:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005ba5:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ba7:	be 02 00 00 00       	mov    esi,0x2
c0005bac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bb0:	85 ed                	test   ebp,ebp
c0005bb2:	74 73                	je     c0005c27 <f_lseek+0x10d>
c0005bb4:	89 e9                	mov    ecx,ebp
c0005bb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bbd:	ff 04 24             	inc    DWORD PTR [esp]
c0005bc0:	89 ca                	mov    edx,ecx
c0005bc2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bc6:	89 d8                	mov    eax,ebx
c0005bc8:	e8 02 d4 ff ff       	call   c0002fcf <get_fat>
c0005bcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd1:	83 f8 01             	cmp    eax,0x1
c0005bd4:	77 11                	ja     c0005be7 <f_lseek+0xcd>
c0005bd6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bda:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005be2:	e9 de 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005be7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bea:	75 11                	jne    c0005bfd <f_lseek+0xe3>
c0005bec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bf0:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf8:	e9 c8 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005bfd:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c00:	89 c1                	mov    ecx,eax
c0005c02:	39 c2                	cmp    edx,eax
c0005c04:	74 b7                	je     c0005bbd <f_lseek+0xa3>
c0005c06:	83 c6 02             	add    esi,0x2
c0005c09:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c0d:	72 0b                	jb     c0005c1a <f_lseek+0x100>
c0005c0f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c12:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c15:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c17:	83 c7 08             	add    edi,0x8
c0005c1a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c1e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c21:	76 04                	jbe    c0005c27 <f_lseek+0x10d>
c0005c23:	89 c5                	mov    ebp,eax
c0005c25:	eb 8d                	jmp    c0005bb4 <f_lseek+0x9a>
c0005c27:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c2a:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c2e:	89 30                	mov    DWORD PTR [eax],esi
c0005c30:	0f 87 87 03 00 00    	ja     c0005fbd <f_lseek+0x4a3>
c0005c36:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c3c:	e9 84 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005c41:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c44:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c53:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c5e:	73 0f                	jae    c0005c6f <f_lseek+0x155>
c0005c60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c63:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c77:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c7a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c81:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c85:	0f 84 3a 03 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005c8b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c93:	83 c6 ff             	add    esi,0xffffffff
c0005c96:	89 d8                	mov    eax,ebx
c0005c98:	83 d7 ff             	adc    edi,0xffffffff
c0005c9b:	89 f2                	mov    edx,esi
c0005c9d:	89 f9                	mov    ecx,edi
c0005c9f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ca3:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ca6:	e8 78 c2 ff ff       	call   c0001f23 <clmt_clust>
c0005cab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005caf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cb2:	89 c2                	mov    edx,eax
c0005cb4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb8:	89 c8                	mov    eax,ecx
c0005cba:	e8 43 c2 ff ff       	call   c0001f02 <clst2sect>
c0005cbf:	89 d7                	mov    edi,edx
c0005cc1:	09 c7                	or     edi,eax
c0005cc3:	0f 84 0d ff ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005cc9:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ccd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cd3:	0f 84 ec 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005cd9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ce1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ce4:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce8:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cec:	4d                   	dec    ebp
c0005ced:	31 ff                	xor    edi,edi
c0005cef:	21 ee                	and    esi,ebp
c0005cf1:	01 c6                	add    esi,eax
c0005cf3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf6:	11 d7                	adc    edi,edx
c0005cf8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cfb:	39 fa                	cmp    edx,edi
c0005cfd:	75 08                	jne    c0005d07 <f_lseek+0x1ed>
c0005cff:	39 f0                	cmp    eax,esi
c0005d01:	0f 84 be 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005d07:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d0a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d0e:	0f 89 80 02 00 00    	jns    c0005f94 <f_lseek+0x47a>
c0005d14:	83 ec 0c             	sub    esp,0xc
c0005d17:	6a 01                	push   0x1
c0005d19:	52                   	push   edx
c0005d1a:	50                   	push   eax
c0005d1b:	55                   	push   ebp
c0005d1c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d20:	e9 5a 02 00 00       	jmp    c0005f7f <f_lseek+0x465>
c0005d25:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d29:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d2c:	74 16                	je     c0005d44 <f_lseek+0x22a>
c0005d2e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d33:	76 0f                	jbe    c0005d44 <f_lseek+0x22a>
c0005d35:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d3c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d44:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d47:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d4a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d4d:	89 c7                	mov    edi,eax
c0005d4f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d53:	73 0d                	jae    c0005d62 <f_lseek+0x248>
c0005d55:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d59:	75 07                	jne    c0005d62 <f_lseek+0x248>
c0005d5b:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d62:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d65:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d68:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d6c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d73:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d7a:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d7d:	75 09                	jne    c0005d88 <f_lseek+0x26e>
c0005d7f:	31 f6                	xor    esi,esi
c0005d81:	31 ff                	xor    edi,edi
c0005d83:	e9 af 01 00 00       	jmp    c0005f37 <f_lseek+0x41d>
c0005d88:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d8c:	89 d7                	mov    edi,edx
c0005d8e:	c1 e1 09             	shl    ecx,0x9
c0005d91:	09 c7                	or     edi,eax
c0005d93:	89 cd                	mov    ebp,ecx
c0005d95:	74 6d                	je     c0005e04 <f_lseek+0x2ea>
c0005d97:	83 c0 ff             	add    eax,0xffffffff
c0005d9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d9e:	83 d2 ff             	adc    edx,0xffffffff
c0005da1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005da4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da8:	83 c0 ff             	add    eax,0xffffffff
c0005dab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005daf:	83 d2 ff             	adc    edx,0xffffffff
c0005db2:	31 ff                	xor    edi,edi
c0005db4:	57                   	push   edi
c0005db5:	51                   	push   ecx
c0005db6:	52                   	push   edx
c0005db7:	50                   	push   eax
c0005db8:	e8 47 0c 02 00       	call   c0026a04 <__udivdi3>
c0005dbd:	83 c4 10             	add    esp,0x10
c0005dc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc8:	57                   	push   edi
c0005dc9:	55                   	push   ebp
c0005dca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dd2:	e8 2d 0c 02 00       	call   c0026a04 <__udivdi3>
c0005dd7:	83 c4 10             	add    esp,0x10
c0005dda:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dde:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005de2:	19 d1                	sbb    ecx,edx
c0005de4:	72 1e                	jb     c0005e04 <f_lseek+0x2ea>
c0005de6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dea:	89 e9                	mov    ecx,ebp
c0005dec:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005def:	f7 d9                	neg    ecx
c0005df1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005df4:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df8:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dfb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dfe:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e02:	eb 28                	jmp    c0005e2c <f_lseek+0x312>
c0005e04:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e07:	85 c0                	test   eax,eax
c0005e09:	75 1e                	jne    c0005e29 <f_lseek+0x30f>
c0005e0b:	31 d2                	xor    edx,edx
c0005e0d:	89 d8                	mov    eax,ebx
c0005e0f:	e8 a9 d4 ff ff       	call   c00032bd <create_chain>
c0005e14:	83 f8 01             	cmp    eax,0x1
c0005e17:	0f 84 b9 fd ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005e1d:	83 f8 ff             	cmp    eax,0xffffffff
c0005e20:	0f 84 c6 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005e26:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e29:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e2c:	85 c0                	test   eax,eax
c0005e2e:	0f 84 4b ff ff ff    	je     c0005d7f <f_lseek+0x265>
c0005e34:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e38:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e40:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e43:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e47:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e4a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e4d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e51:	0f 83 9d 00 00 00    	jae    c0005ef4 <f_lseek+0x3da>
c0005e57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e5b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e5f:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e62:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e66:	01 f2                	add    edx,esi
c0005e68:	11 f9                	adc    ecx,edi
c0005e6a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e6e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e72:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e75:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e78:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e7b:	f6 c1 02             	test   cl,0x2
c0005e7e:	74 35                	je     c0005eb5 <f_lseek+0x39b>
c0005e80:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e84:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e87:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e8a:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e8e:	73 16                	jae    c0005ea6 <f_lseek+0x38c>
c0005e90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e98:	88 ca                	mov    dl,cl
c0005e9a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e9d:	83 ca 40             	or     edx,0x40
c0005ea0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ea3:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ea6:	89 c2                	mov    edx,eax
c0005ea8:	89 d8                	mov    eax,ebx
c0005eaa:	e8 0e d4 ff ff       	call   c00032bd <create_chain>
c0005eaf:	85 c0                	test   eax,eax
c0005eb1:	75 0b                	jne    c0005ebe <f_lseek+0x3a4>
c0005eb3:	eb 30                	jmp    c0005ee5 <f_lseek+0x3cb>
c0005eb5:	89 c2                	mov    edx,eax
c0005eb7:	89 d8                	mov    eax,ebx
c0005eb9:	e8 11 d1 ff ff       	call   c0002fcf <get_fat>
c0005ebe:	83 f8 ff             	cmp    eax,0xffffffff
c0005ec1:	0f 84 25 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005ec7:	83 f8 01             	cmp    eax,0x1
c0005eca:	0f 86 06 fd ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005ed0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ed4:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ed7:	0f 86 f9 fc ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005edd:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ee0:	e9 5b ff ff ff       	jmp    c0005e40 <f_lseek+0x326>
c0005ee5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ef4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ef7:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005efb:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005efe:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f01:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f04:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f0a:	0f 84 6f fe ff ff    	je     c0005d7f <f_lseek+0x265>
c0005f10:	89 c2                	mov    edx,eax
c0005f12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f16:	e8 e7 bf ff ff       	call   c0001f02 <clst2sect>
c0005f1b:	89 d7                	mov    edi,edx
c0005f1d:	09 c7                	or     edi,eax
c0005f1f:	0f 84 b1 fc ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005f25:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f29:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f2c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f30:	c1 ef 09             	shr    edi,0x9
c0005f33:	01 c6                	add    esi,eax
c0005f35:	11 d7                	adc    edi,edx
c0005f37:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f3a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f3d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f40:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f43:	19 d1                	sbb    ecx,edx
c0005f45:	73 0a                	jae    c0005f51 <f_lseek+0x437>
c0005f47:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f4a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f4d:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f51:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f56:	74 6d                	je     c0005fc5 <f_lseek+0x4ab>
c0005f58:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f5b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f5e:	39 fa                	cmp    edx,edi
c0005f60:	75 04                	jne    c0005f66 <f_lseek+0x44c>
c0005f62:	39 f0                	cmp    eax,esi
c0005f64:	74 5f                	je     c0005fc5 <f_lseek+0x4ab>
c0005f66:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f69:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f6d:	79 25                	jns    c0005f94 <f_lseek+0x47a>
c0005f6f:	83 ec 0c             	sub    esp,0xc
c0005f72:	6a 01                	push   0x1
c0005f74:	52                   	push   edx
c0005f75:	50                   	push   eax
c0005f76:	55                   	push   ebp
c0005f77:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f7b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f7f:	50                   	push   eax
c0005f80:	e8 af bc ff ff       	call   c0001c34 <disk_write>
c0005f85:	83 c4 20             	add    esp,0x20
c0005f88:	85 c0                	test   eax,eax
c0005f8a:	0f 85 5c fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005f90:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f94:	83 ec 0c             	sub    esp,0xc
c0005f97:	6a 01                	push   0x1
c0005f99:	57                   	push   edi
c0005f9a:	56                   	push   esi
c0005f9b:	55                   	push   ebp
c0005f9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fa0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fa4:	50                   	push   eax
c0005fa5:	e8 74 bc ff ff       	call   c0001c1e <disk_read>
c0005faa:	83 c4 20             	add    esp,0x20
c0005fad:	85 c0                	test   eax,eax
c0005faf:	0f 85 37 fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005fb5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fbb:	eb 08                	jmp    c0005fc5 <f_lseek+0x4ab>
c0005fbd:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc9:	83 c4 3c             	add    esp,0x3c
c0005fcc:	5b                   	pop    ebx
c0005fcd:	5e                   	pop    esi
c0005fce:	5f                   	pop    edi
c0005fcf:	5d                   	pop    ebp
c0005fd0:	c3                   	ret    

c0005fd1 <f_opendir>:
c0005fd1:	56                   	push   esi
c0005fd2:	b8 09 00 00 00       	mov    eax,0x9
c0005fd7:	53                   	push   ebx
c0005fd8:	83 ec 24             	sub    esp,0x24
c0005fdb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fdf:	85 db                	test   ebx,ebx
c0005fe1:	0f 84 e6 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0005fe7:	31 c9                	xor    ecx,ecx
c0005fe9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fed:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ff1:	e8 03 c7 ff ff       	call   c00026f9 <mount_volume>
c0005ff6:	85 c0                	test   eax,eax
c0005ff8:	0f 85 c9 00 00 00    	jne    c00060c7 <f_opendir+0xf6>
c0005ffe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006002:	83 ec 0c             	sub    esp,0xc
c0006005:	89 03                	mov    DWORD PTR [ebx],eax
c0006007:	68 60 04 00 00       	push   0x460
c000600c:	e8 8b 24 00 00       	call   c000849c <ff_memalloc>
c0006011:	83 c4 10             	add    esp,0x10
c0006014:	89 c6                	mov    esi,eax
c0006016:	b8 11 00 00 00       	mov    eax,0x11
c000601b:	85 f6                	test   esi,esi
c000601d:	0f 84 aa 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0006023:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006027:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000602d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006030:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006033:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006037:	89 d8                	mov    eax,ebx
c0006039:	e8 31 ee ff ff       	call   c0004e6f <follow_path>
c000603e:	85 c0                	test   eax,eax
c0006040:	75 61                	jne    c00060a3 <f_opendir+0xd2>
c0006042:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006046:	78 46                	js     c000608e <f_opendir+0xbd>
c0006048:	b8 05 00 00 00       	mov    eax,0x5
c000604d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006051:	74 50                	je     c00060a3 <f_opendir+0xd2>
c0006053:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006057:	8a 01                	mov    al,BYTE PTR [ecx]
c0006059:	3c 04                	cmp    al,0x4
c000605b:	75 26                	jne    c0006083 <f_opendir+0xb2>
c000605d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006060:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006063:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006066:	30 d2                	xor    dl,dl
c0006068:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000606c:	09 c2                	or     edx,eax
c000606e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006071:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006074:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006077:	89 da                	mov    edx,ebx
c0006079:	8d 41 10             	lea    eax,[ecx+0x10]
c000607c:	e8 b4 ed ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006081:	eb 0b                	jmp    c000608e <f_opendir+0xbd>
c0006083:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006086:	e8 59 ed ff ff       	call   c0004de4 <ld_clust.isra.0>
c000608b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000608e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006092:	31 d2                	xor    edx,edx
c0006094:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006098:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000609c:	89 d8                	mov    eax,ebx
c000609e:	e8 22 d1 ff ff       	call   c00031c5 <dir_sdi>
c00060a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060a7:	83 ec 0c             	sub    esp,0xc
c00060aa:	56                   	push   esi
c00060ab:	e8 02 24 00 00       	call   c00084b2 <ff_memfree>
c00060b0:	83 c4 10             	add    esp,0x10
c00060b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060b7:	83 f8 04             	cmp    eax,0x4
c00060ba:	74 06                	je     c00060c2 <f_opendir+0xf1>
c00060bc:	85 c0                	test   eax,eax
c00060be:	74 0d                	je     c00060cd <f_opendir+0xfc>
c00060c0:	eb 05                	jmp    c00060c7 <f_opendir+0xf6>
c00060c2:	b8 05 00 00 00       	mov    eax,0x5
c00060c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060cd:	83 c4 24             	add    esp,0x24
c00060d0:	5b                   	pop    ebx
c00060d1:	5e                   	pop    esi
c00060d2:	c3                   	ret    

c00060d3 <f_closedir>:
c00060d3:	53                   	push   ebx
c00060d4:	83 ec 18             	sub    esp,0x18
c00060d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060db:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060df:	89 d8                	mov    eax,ebx
c00060e1:	e8 86 c2 ff ff       	call   c000236c <validate>
c00060e6:	85 c0                	test   eax,eax
c00060e8:	75 06                	jne    c00060f0 <f_closedir+0x1d>
c00060ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060f0:	83 c4 18             	add    esp,0x18
c00060f3:	5b                   	pop    ebx
c00060f4:	c3                   	ret    

c00060f5 <f_readdir>:
c00060f5:	57                   	push   edi
c00060f6:	56                   	push   esi
c00060f7:	53                   	push   ebx
c00060f8:	83 ec 20             	sub    esp,0x20
c00060fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006103:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006107:	89 d8                	mov    eax,ebx
c0006109:	e8 5e c2 ff ff       	call   c000236c <validate>
c000610e:	85 c0                	test   eax,eax
c0006110:	75 77                	jne    c0006189 <f_readdir+0x94>
c0006112:	85 ff                	test   edi,edi
c0006114:	75 0b                	jne    c0006121 <f_readdir+0x2c>
c0006116:	31 d2                	xor    edx,edx
c0006118:	89 d8                	mov    eax,ebx
c000611a:	e8 a6 d0 ff ff       	call   c00031c5 <dir_sdi>
c000611f:	eb 68                	jmp    c0006189 <f_readdir+0x94>
c0006121:	83 ec 0c             	sub    esp,0xc
c0006124:	68 60 04 00 00       	push   0x460
c0006129:	e8 6e 23 00 00       	call   c000849c <ff_memalloc>
c000612e:	83 c4 10             	add    esp,0x10
c0006131:	89 c6                	mov    esi,eax
c0006133:	b8 11 00 00 00       	mov    eax,0x11
c0006138:	85 f6                	test   esi,esi
c000613a:	74 4d                	je     c0006189 <f_readdir+0x94>
c000613c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006140:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006146:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006149:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000614c:	31 d2                	xor    edx,edx
c000614e:	89 d8                	mov    eax,ebx
c0006150:	e8 80 d8 ff ff       	call   c00039d5 <dir_read>
c0006155:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000615a:	75 19                	jne    c0006175 <f_readdir+0x80>
c000615c:	89 fa                	mov    edx,edi
c000615e:	89 d8                	mov    eax,ebx
c0006160:	e8 7e ea ff ff       	call   c0004be3 <get_fileinfo>
c0006165:	31 d2                	xor    edx,edx
c0006167:	89 d8                	mov    eax,ebx
c0006169:	e8 af d5 ff ff       	call   c000371d <dir_next>
c000616e:	83 f8 04             	cmp    eax,0x4
c0006171:	75 02                	jne    c0006175 <f_readdir+0x80>
c0006173:	31 c0                	xor    eax,eax
c0006175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006179:	83 ec 0c             	sub    esp,0xc
c000617c:	56                   	push   esi
c000617d:	e8 30 23 00 00       	call   c00084b2 <ff_memfree>
c0006182:	83 c4 10             	add    esp,0x10
c0006185:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006189:	83 c4 20             	add    esp,0x20
c000618c:	5b                   	pop    ebx
c000618d:	5e                   	pop    esi
c000618e:	5f                   	pop    edi
c000618f:	c3                   	ret    

c0006190 <f_stat>:
c0006190:	57                   	push   edi
c0006191:	31 c9                	xor    ecx,ecx
c0006193:	56                   	push   esi
c0006194:	53                   	push   ebx
c0006195:	83 ec 50             	sub    esp,0x50
c0006198:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000619c:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061a0:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061a4:	e8 50 c5 ff ff       	call   c00026f9 <mount_volume>
c00061a9:	89 c3                	mov    ebx,eax
c00061ab:	85 c0                	test   eax,eax
c00061ad:	75 67                	jne    c0006216 <f_stat+0x86>
c00061af:	83 ec 0c             	sub    esp,0xc
c00061b2:	bb 11 00 00 00       	mov    ebx,0x11
c00061b7:	68 60 04 00 00       	push   0x460
c00061bc:	e8 db 22 00 00       	call   c000849c <ff_memalloc>
c00061c1:	83 c4 10             	add    esp,0x10
c00061c4:	89 c6                	mov    esi,eax
c00061c6:	85 c0                	test   eax,eax
c00061c8:	74 4c                	je     c0006216 <f_stat+0x86>
c00061ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061ce:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061d4:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061d7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061da:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061de:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061e2:	e8 88 ec ff ff       	call   c0004e6f <follow_path>
c00061e7:	89 c3                	mov    ebx,eax
c00061e9:	85 c0                	test   eax,eax
c00061eb:	75 1d                	jne    c000620a <f_stat+0x7a>
c00061ed:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061f2:	78 11                	js     c0006205 <f_stat+0x75>
c00061f4:	85 ff                	test   edi,edi
c00061f6:	74 12                	je     c000620a <f_stat+0x7a>
c00061f8:	89 fa                	mov    edx,edi
c00061fa:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061fe:	e8 e0 e9 ff ff       	call   c0004be3 <get_fileinfo>
c0006203:	eb 05                	jmp    c000620a <f_stat+0x7a>
c0006205:	bb 06 00 00 00       	mov    ebx,0x6
c000620a:	83 ec 0c             	sub    esp,0xc
c000620d:	56                   	push   esi
c000620e:	e8 9f 22 00 00       	call   c00084b2 <ff_memfree>
c0006213:	83 c4 10             	add    esp,0x10
c0006216:	83 c4 50             	add    esp,0x50
c0006219:	89 d8                	mov    eax,ebx
c000621b:	5b                   	pop    ebx
c000621c:	5e                   	pop    esi
c000621d:	5f                   	pop    edi
c000621e:	c3                   	ret    

c000621f <f_getfree>:
c000621f:	55                   	push   ebp
c0006220:	31 c9                	xor    ecx,ecx
c0006222:	57                   	push   edi
c0006223:	56                   	push   esi
c0006224:	53                   	push   ebx
c0006225:	83 ec 5c             	sub    esp,0x5c
c0006228:	8d 54 24 24          	lea    edx,[esp+0x24]
c000622c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006230:	e8 c4 c4 ff ff       	call   c00026f9 <mount_volume>
c0006235:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006239:	85 c0                	test   eax,eax
c000623b:	0f 85 9d 01 00 00    	jne    c00063de <f_getfree+0x1bf>
c0006241:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006245:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006249:	89 02                	mov    DWORD PTR [edx],eax
c000624b:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000624e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006251:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006254:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006258:	39 f2                	cmp    edx,esi
c000625a:	77 0b                	ja     c0006267 <f_getfree+0x48>
c000625c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006260:	89 10                	mov    DWORD PTR [eax],edx
c0006262:	e9 77 01 00 00       	jmp    c00063de <f_getfree+0x1bf>
c0006267:	8a 10                	mov    dl,BYTE PTR [eax]
c0006269:	80 fa 01             	cmp    dl,0x1
c000626c:	75 3a                	jne    c00062a8 <f_getfree+0x89>
c000626e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006272:	be 02 00 00 00       	mov    esi,0x2
c0006277:	31 db                	xor    ebx,ebx
c0006279:	89 f2                	mov    edx,esi
c000627b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000627f:	e8 4b cd ff ff       	call   c0002fcf <get_fat>
c0006284:	83 f8 ff             	cmp    eax,0xffffffff
c0006287:	0f 84 28 01 00 00    	je     c00063b5 <f_getfree+0x196>
c000628d:	83 f8 01             	cmp    eax,0x1
c0006290:	0f 84 29 01 00 00    	je     c00063bf <f_getfree+0x1a0>
c0006296:	83 d3 00             	adc    ebx,0x0
c0006299:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000629d:	46                   	inc    esi
c000629e:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062a1:	77 d6                	ja     c0006279 <f_getfree+0x5a>
c00062a3:	e9 25 01 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c00062a8:	80 fa 04             	cmp    dl,0x4
c00062ab:	0f 85 88 00 00 00    	jne    c0006339 <f_getfree+0x11a>
c00062b1:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062b4:	31 ed                	xor    ebp,ebp
c00062b6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c1:	31 db                	xor    ebx,ebx
c00062c3:	85 ed                	test   ebp,ebp
c00062c5:	75 3f                	jne    c0006306 <f_getfree+0xe7>
c00062c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062cf:	83 c0 01             	add    eax,0x1
c00062d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062d6:	83 d2 00             	adc    edx,0x0
c00062d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e9:	e8 59 c1 ff ff       	call   c0002447 <move_window>
c00062ee:	85 c0                	test   eax,eax
c00062f0:	0f 85 d3 00 00 00    	jne    c00063c9 <f_getfree+0x1aa>
c00062f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006302:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006306:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000630a:	8d 4e f8             	lea    ecx,[esi-0x8]
c000630d:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006311:	89 cf                	mov    edi,ecx
c0006313:	85 f6                	test   esi,esi
c0006315:	74 12                	je     c0006329 <f_getfree+0x10a>
c0006317:	88 c1                	mov    cl,al
c0006319:	83 e1 01             	and    ecx,0x1
c000631c:	80 f9 01             	cmp    cl,0x1
c000631f:	83 d3 00             	adc    ebx,0x0
c0006322:	d0 e8                	shr    al,1
c0006324:	4e                   	dec    esi
c0006325:	39 fe                	cmp    esi,edi
c0006327:	75 ea                	jne    c0006313 <f_getfree+0xf4>
c0006329:	45                   	inc    ebp
c000632a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006330:	85 f6                	test   esi,esi
c0006332:	75 8f                	jne    c00062c3 <f_getfree+0xa4>
c0006334:	e9 94 00 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c0006339:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000633c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000633f:	31 f6                	xor    esi,esi
c0006341:	31 db                	xor    ebx,ebx
c0006343:	85 f6                	test   esi,esi
c0006345:	75 1b                	jne    c0006362 <f_getfree+0x143>
c0006347:	89 d7                	mov    edi,edx
c0006349:	89 cd                	mov    ebp,ecx
c000634b:	83 c7 01             	add    edi,0x1
c000634e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006352:	83 d5 00             	adc    ebp,0x0
c0006355:	e8 ed c0 ff ff       	call   c0002447 <move_window>
c000635a:	85 c0                	test   eax,eax
c000635c:	75 6b                	jne    c00063c9 <f_getfree+0x1aa>
c000635e:	89 fa                	mov    edx,edi
c0006360:	89 e9                	mov    ecx,ebp
c0006362:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006366:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000636a:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000636e:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006371:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006375:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006379:	75 11                	jne    c000638c <f_getfree+0x16d>
c000637b:	e8 e9 b8 ff ff       	call   c0001c69 <ld_word>
c0006380:	66 83 f8 01          	cmp    ax,0x1
c0006384:	83 d3 00             	adc    ebx,0x0
c0006387:	83 c6 02             	add    esi,0x2
c000638a:	eb 13                	jmp    c000639f <f_getfree+0x180>
c000638c:	e8 e5 b8 ff ff       	call   c0001c76 <ld_dword>
c0006391:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006396:	83 f8 01             	cmp    eax,0x1
c0006399:	83 d3 00             	adc    ebx,0x0
c000639c:	83 c6 04             	add    esi,0x4
c000639f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063ad:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063b1:	75 90                	jne    c0006343 <f_getfree+0x124>
c00063b3:	eb 18                	jmp    c00063cd <f_getfree+0x1ae>
c00063b5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063bd:	eb 0e                	jmp    c00063cd <f_getfree+0x1ae>
c00063bf:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063c7:	eb 04                	jmp    c00063cd <f_getfree+0x1ae>
c00063c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063cd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063d1:	89 18                	mov    DWORD PTR [eax],ebx
c00063d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063d7:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063da:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e2:	83 c4 5c             	add    esp,0x5c
c00063e5:	5b                   	pop    ebx
c00063e6:	5e                   	pop    esi
c00063e7:	5f                   	pop    edi
c00063e8:	5d                   	pop    ebp
c00063e9:	c3                   	ret    

c00063ea <f_truncate>:
c00063ea:	56                   	push   esi
c00063eb:	53                   	push   ebx
c00063ec:	83 ec 14             	sub    esp,0x14
c00063ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063f3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063f7:	89 d8                	mov    eax,ebx
c00063f9:	e8 6e bf ff ff       	call   c000236c <validate>
c00063fe:	89 c6                	mov    esi,eax
c0006400:	85 c0                	test   eax,eax
c0006402:	0f 85 d2 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006408:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000640c:	85 f6                	test   esi,esi
c000640e:	0f 85 c6 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006414:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006418:	0f 84 b7 00 00 00    	je     c00064d5 <f_truncate+0xeb>
c000641e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006421:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006424:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006427:	89 d1                	mov    ecx,edx
c0006429:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000642c:	0f 83 a8 00 00 00    	jae    c00064da <f_truncate+0xf0>
c0006432:	09 c2                	or     edx,eax
c0006434:	75 15                	jne    c000644b <f_truncate+0x61>
c0006436:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006439:	31 c9                	xor    ecx,ecx
c000643b:	89 d8                	mov    eax,ebx
c000643d:	e8 7a d0 ff ff       	call   c00034bc <remove_chain>
c0006442:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006449:	eb 35                	jmp    c0006480 <f_truncate+0x96>
c000644b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000644e:	89 d8                	mov    eax,ebx
c0006450:	e8 7a cb ff ff       	call   c0002fcf <get_fat>
c0006455:	89 c2                	mov    edx,eax
c0006457:	b8 01 00 00 00       	mov    eax,0x1
c000645c:	83 fa ff             	cmp    edx,0xffffffff
c000645f:	74 1f                	je     c0006480 <f_truncate+0x96>
c0006461:	b8 02 00 00 00       	mov    eax,0x2
c0006466:	83 fa 01             	cmp    edx,0x1
c0006469:	74 15                	je     c0006480 <f_truncate+0x96>
c000646b:	31 c0                	xor    eax,eax
c000646d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006471:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006474:	76 0a                	jbe    c0006480 <f_truncate+0x96>
c0006476:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006479:	89 d8                	mov    eax,ebx
c000647b:	e8 3c d0 ff ff       	call   c00034bc <remove_chain>
c0006480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006483:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006486:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006489:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000648c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000648f:	83 ca 40             	or     edx,0x40
c0006492:	85 c0                	test   eax,eax
c0006494:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006497:	75 35                	jne    c00064ce <f_truncate+0xe4>
c0006499:	84 d2                	test   dl,dl
c000649b:	79 3d                	jns    c00064da <f_truncate+0xf0>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	8d 43 50             	lea    eax,[ebx+0x50]
c00064a3:	6a 01                	push   0x1
c00064a5:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064ab:	50                   	push   eax
c00064ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064b0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064b4:	50                   	push   eax
c00064b5:	e8 7a b7 ff ff       	call   c0001c34 <disk_write>
c00064ba:	83 c4 20             	add    esp,0x20
c00064bd:	85 c0                	test   eax,eax
c00064bf:	75 08                	jne    c00064c9 <f_truncate+0xdf>
c00064c1:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064c5:	31 f6                	xor    esi,esi
c00064c7:	eb 11                	jmp    c00064da <f_truncate+0xf0>
c00064c9:	b8 01 00 00 00       	mov    eax,0x1
c00064ce:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064d1:	89 c6                	mov    esi,eax
c00064d3:	eb 05                	jmp    c00064da <f_truncate+0xf0>
c00064d5:	be 07 00 00 00       	mov    esi,0x7
c00064da:	89 f0                	mov    eax,esi
c00064dc:	83 c4 14             	add    esp,0x14
c00064df:	5b                   	pop    ebx
c00064e0:	5e                   	pop    esi
c00064e1:	c3                   	ret    

c00064e2 <f_unlink>:
c00064e2:	56                   	push   esi
c00064e3:	b9 02 00 00 00       	mov    ecx,0x2
c00064e8:	53                   	push   ebx
c00064e9:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ef:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064f3:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064fa:	e8 fa c1 ff ff       	call   c00026f9 <mount_volume>
c00064ff:	85 c0                	test   eax,eax
c0006501:	0f 85 55 01 00 00    	jne    c000665c <f_unlink+0x17a>
c0006507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650b:	83 ec 0c             	sub    esp,0xc
c000650e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006512:	68 60 04 00 00       	push   0x460
c0006517:	e8 80 1f 00 00       	call   c000849c <ff_memalloc>
c000651c:	83 c4 10             	add    esp,0x10
c000651f:	89 c3                	mov    ebx,eax
c0006521:	b8 11 00 00 00       	mov    eax,0x11
c0006526:	85 db                	test   ebx,ebx
c0006528:	0f 84 2e 01 00 00    	je     c000665c <f_unlink+0x17a>
c000652e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006532:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006538:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000653b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000653e:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006545:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006549:	e8 21 e9 ff ff       	call   c0004e6f <follow_path>
c000654e:	85 c0                	test   eax,eax
c0006550:	0f 85 f2 00 00 00    	jne    c0006648 <f_unlink+0x166>
c0006556:	b8 06 00 00 00       	mov    eax,0x6
c000655b:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006563:	0f 88 df 00 00 00    	js     c0006648 <f_unlink+0x166>
c0006569:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000656e:	74 0a                	je     c000657a <f_unlink+0x98>
c0006570:	b8 07 00 00 00       	mov    eax,0x7
c0006575:	e9 ce 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c000657a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006582:	8a 02                	mov    al,BYTE PTR [edx]
c0006584:	3c 04                	cmp    al,0x4
c0006586:	75 12                	jne    c000659a <f_unlink+0xb8>
c0006588:	8d 42 10             	lea    eax,[edx+0x10]
c000658b:	8d 54 24 20          	lea    edx,[esp+0x20]
c000658f:	e8 a1 e8 ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006594:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006598:	eb 0e                	jmp    c00065a8 <f_unlink+0xc6>
c000659a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065a1:	e8 3e e8 ff ff       	call   c0004de4 <ld_clust.isra.0>
c00065a6:	89 c6                	mov    esi,eax
c00065a8:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065ad:	75 12                	jne    c00065c1 <f_unlink+0xdf>
c00065af:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065b3:	e8 94 d6 ff ff       	call   c0003c4c <dir_remove>
c00065b8:	85 c0                	test   eax,eax
c00065ba:	74 6c                	je     c0006628 <f_unlink+0x146>
c00065bc:	e9 87 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c00065c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065c5:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065cc:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065d3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065d6:	75 21                	jne    c00065f9 <f_unlink+0x117>
c00065d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065e0:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065e7:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ee:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065f2:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f9:	31 d2                	xor    edx,edx
c00065fb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006602:	e8 be cb ff ff       	call   c00031c5 <dir_sdi>
c0006607:	85 c0                	test   eax,eax
c0006609:	75 3d                	jne    c0006648 <f_unlink+0x166>
c000660b:	31 d2                	xor    edx,edx
c000660d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006614:	e8 bc d3 ff ff       	call   c00039d5 <dir_read>
c0006619:	85 c0                	test   eax,eax
c000661b:	0f 84 4f ff ff ff    	je     c0006570 <f_unlink+0x8e>
c0006621:	83 f8 04             	cmp    eax,0x4
c0006624:	75 22                	jne    c0006648 <f_unlink+0x166>
c0006626:	eb 87                	jmp    c00065af <f_unlink+0xcd>
c0006628:	85 f6                	test   esi,esi
c000662a:	75 0b                	jne    c0006637 <f_unlink+0x155>
c000662c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006630:	e8 3d df ff ff       	call   c0004572 <sync_fs>
c0006635:	eb 11                	jmp    c0006648 <f_unlink+0x166>
c0006637:	31 c9                	xor    ecx,ecx
c0006639:	89 f2                	mov    edx,esi
c000663b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000663f:	e8 78 ce ff ff       	call   c00034bc <remove_chain>
c0006644:	85 c0                	test   eax,eax
c0006646:	74 e4                	je     c000662c <f_unlink+0x14a>
c0006648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000664c:	83 ec 0c             	sub    esp,0xc
c000664f:	53                   	push   ebx
c0006650:	e8 5d 1e 00 00       	call   c00084b2 <ff_memfree>
c0006655:	83 c4 10             	add    esp,0x10
c0006658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000665c:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006662:	5b                   	pop    ebx
c0006663:	5e                   	pop    esi
c0006664:	c3                   	ret    

c0006665 <f_mkdir>:
c0006665:	57                   	push   edi
c0006666:	b9 02 00 00 00       	mov    ecx,0x2
c000666b:	56                   	push   esi
c000666c:	53                   	push   ebx
c000666d:	83 c4 80             	add    esp,0xffffff80
c0006670:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006674:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000667b:	e8 79 c0 ff ff       	call   c00026f9 <mount_volume>
c0006680:	89 c3                	mov    ebx,eax
c0006682:	85 c0                	test   eax,eax
c0006684:	0f 85 fe 01 00 00    	jne    c0006888 <f_mkdir+0x223>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	bb 11 00 00 00       	mov    ebx,0x11
c0006693:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006697:	83 ec 0c             	sub    esp,0xc
c000669a:	68 60 04 00 00       	push   0x460
c000669f:	e8 f8 1d 00 00       	call   c000849c <ff_memalloc>
c00066a4:	83 c4 10             	add    esp,0x10
c00066a7:	89 c7                	mov    edi,eax
c00066a9:	85 c0                	test   eax,eax
c00066ab:	0f 84 d7 01 00 00    	je     c0006888 <f_mkdir+0x223>
c00066b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b5:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066bb:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066be:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066c1:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066cc:	e8 9e e7 ff ff       	call   c0004e6f <follow_path>
c00066d1:	89 c3                	mov    ebx,eax
c00066d3:	85 c0                	test   eax,eax
c00066d5:	74 3e                	je     c0006715 <f_mkdir+0xb0>
c00066d7:	83 f8 04             	cmp    eax,0x4
c00066da:	75 3e                	jne    c000671a <f_mkdir+0xb5>
c00066dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e0:	31 d2                	xor    edx,edx
c00066e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066ea:	e8 ce cb ff ff       	call   c00032bd <create_chain>
c00066ef:	89 c6                	mov    esi,eax
c00066f1:	85 c0                	test   eax,eax
c00066f3:	74 0c                	je     c0006701 <f_mkdir+0x9c>
c00066f5:	bb 02 00 00 00       	mov    ebx,0x2
c00066fa:	83 f8 01             	cmp    eax,0x1
c00066fd:	74 07                	je     c0006706 <f_mkdir+0xa1>
c00066ff:	eb 2a                	jmp    c000672b <f_mkdir+0xc6>
c0006701:	bb 07 00 00 00       	mov    ebx,0x7
c0006706:	31 c9                	xor    ecx,ecx
c0006708:	89 f2                	mov    edx,esi
c000670a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000670e:	e8 a9 cd ff ff       	call   c00034bc <remove_chain>
c0006713:	eb 05                	jmp    c000671a <f_mkdir+0xb5>
c0006715:	bb 08 00 00 00       	mov    ebx,0x8
c000671a:	83 ec 0c             	sub    esp,0xc
c000671d:	57                   	push   edi
c000671e:	e8 8f 1d 00 00       	call   c00084b2 <ff_memfree>
c0006723:	83 c4 10             	add    esp,0x10
c0006726:	e9 5d 01 00 00       	jmp    c0006888 <f_mkdir+0x223>
c000672b:	bb 01 00 00 00       	mov    ebx,0x1
c0006730:	83 f8 ff             	cmp    eax,0xffffffff
c0006733:	74 d1                	je     c0006706 <f_mkdir+0xa1>
c0006735:	89 f2                	mov    edx,esi
c0006737:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673b:	e8 c4 ce ff ff       	call   c0003604 <dir_clear>
c0006740:	89 c3                	mov    ebx,eax
c0006742:	85 c0                	test   eax,eax
c0006744:	75 c0                	jne    c0006706 <f_mkdir+0xa1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000674d:	74 69                	je     c00067b8 <f_mkdir+0x153>
c000674f:	b9 0b 00 00 00       	mov    ecx,0xb
c0006754:	83 c0 54             	add    eax,0x54
c0006757:	ba 20 00 00 00       	mov    edx,0x20
c000675c:	e8 9c b5 ff ff       	call   c0001cfd <mem_set>
c0006761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006765:	ba 00 00 21 50       	mov    edx,0x50210000
c000676a:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000676e:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006772:	83 c0 6a             	add    eax,0x6a
c0006775:	e8 65 b5 ff ff       	call   c0001cdf <st_dword>
c000677a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677e:	89 f1                	mov    ecx,esi
c0006780:	8d 50 54             	lea    edx,[eax+0x54]
c0006783:	e8 85 e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678c:	b9 20 00 00 00       	mov    ecx,0x20
c0006791:	8d 50 54             	lea    edx,[eax+0x54]
c0006794:	83 c0 74             	add    eax,0x74
c0006797:	e8 4c b5 ff ff       	call   c0001ce8 <mem_cpy>
c000679c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a0:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067a4:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a8:	8d 50 74             	lea    edx,[eax+0x74]
c00067ab:	e8 5d e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c00067b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067bc:	e8 2f db ff ff       	call   c00042f0 <dir_register>
c00067c1:	89 c3                	mov    ebx,eax
c00067c3:	85 c0                	test   eax,eax
c00067c5:	0f 85 3b ff ff ff    	jne    c0006706 <f_mkdir+0xa1>
c00067cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067d2:	75 74                	jne    c0006848 <f_mkdir+0x1e3>
c00067d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d7:	ba 00 00 21 50       	mov    edx,0x50210000
c00067dc:	83 c0 0c             	add    eax,0xc
c00067df:	e8 fb b4 ff ff       	call   c0001cdf <st_dword>
c00067e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e8:	89 f2                	mov    edx,esi
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	83 c0 34             	add    eax,0x34
c00067f0:	e8 ea b4 ff ff       	call   c0001cdf <st_dword>
c00067f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006800:	c1 e2 09             	shl    edx,0x9
c0006803:	83 c0 38             	add    eax,0x38
c0006806:	e8 d4 b4 ff ff       	call   c0001cdf <st_dword>
c000680b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000680f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006813:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006816:	c1 e2 09             	shl    edx,0x9
c0006819:	83 c0 28             	add    eax,0x28
c000681c:	e8 be b4 ff ff       	call   c0001cdf <st_dword>
c0006821:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000682c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000682f:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006833:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006837:	e8 8b d3 ff ff       	call   c0003bc7 <store_xdir>
c000683c:	89 c3                	mov    ebx,eax
c000683e:	85 c0                	test   eax,eax
c0006840:	0f 85 d4 fe ff ff    	jne    c000671a <f_mkdir+0xb5>
c0006846:	eb 30                	jmp    c0006878 <f_mkdir+0x213>
c0006848:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000684c:	ba 00 00 21 50       	mov    edx,0x50210000
c0006851:	83 c0 16             	add    eax,0x16
c0006854:	e8 86 b4 ff ff       	call   c0001cdf <st_dword>
c0006859:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000685d:	89 f1                	mov    ecx,esi
c000685f:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006863:	e8 a5 e5 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006868:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000686c:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000687c:	e8 f1 dc ff ff       	call   c0004572 <sync_fs>
c0006881:	89 c3                	mov    ebx,eax
c0006883:	e9 92 fe ff ff       	jmp    c000671a <f_mkdir+0xb5>
c0006888:	83 ec 80             	sub    esp,0xffffff80
c000688b:	89 d8                	mov    eax,ebx
c000688d:	5b                   	pop    ebx
c000688e:	5e                   	pop    esi
c000688f:	5f                   	pop    edi
c0006890:	c3                   	ret    

c0006891 <f_rename>:
c0006891:	55                   	push   ebp
c0006892:	57                   	push   edi
c0006893:	56                   	push   esi
c0006894:	53                   	push   ebx
c0006895:	81 ec fc 00 00 00    	sub    esp,0xfc
c000689b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068a2:	e8 a4 b9 ff ff       	call   c000224b <get_ldnumber>
c00068a7:	b9 02 00 00 00       	mov    ecx,0x2
c00068ac:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068b0:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068b7:	e8 3d be ff ff       	call   c00026f9 <mount_volume>
c00068bc:	85 c0                	test   eax,eax
c00068be:	0f 85 b5 02 00 00    	jne    c0006b79 <f_rename+0x2e8>
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	83 ec 0c             	sub    esp,0xc
c00068cb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068cf:	68 60 04 00 00       	push   0x460
c00068d4:	e8 c3 1b 00 00       	call   c000849c <ff_memalloc>
c00068d9:	83 c4 10             	add    esp,0x10
c00068dc:	89 c3                	mov    ebx,eax
c00068de:	b8 11 00 00 00       	mov    eax,0x11
c00068e3:	85 db                	test   ebx,ebx
c00068e5:	0f 84 8e 02 00 00    	je     c0006b79 <f_rename+0x2e8>
c00068eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ef:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068f5:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068fb:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006902:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006906:	e8 64 e5 ff ff       	call   c0004e6f <follow_path>
c000690b:	85 c0                	test   eax,eax
c000690d:	0f 85 52 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006913:	b8 06 00 00 00       	mov    eax,0x6
c0006918:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006920:	0f 85 3f 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006926:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000692d:	0f 85 05 01 00 00    	jne    c0006a38 <f_rename+0x1a7>
c0006933:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006936:	b9 40 00 00 00       	mov    ecx,0x40
c000693b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693f:	e8 a4 b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006944:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006949:	8d 54 24 58          	lea    edx,[esp+0x58]
c000694d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006954:	e8 8f b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006959:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 03 e5 ff ff       	call   c0004e6f <follow_path>
c000696c:	85 c0                	test   eax,eax
c000696e:	75 29                	jne    c0006999 <f_rename+0x108>
c0006970:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006974:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000697b:	74 0a                	je     c0006987 <f_rename+0xf6>
c000697d:	b8 08 00 00 00       	mov    eax,0x8
c0006982:	e9 de 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006987:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000698e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006995:	75 e6                	jne    c000697d <f_rename+0xec>
c0006997:	eb 09                	jmp    c00069a2 <f_rename+0x111>
c0006999:	83 f8 04             	cmp    eax,0x4
c000699c:	0f 85 c3 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069a2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a9:	e8 42 d9 ff ff       	call   c00042f0 <dir_register>
c00069ae:	85 c0                	test   eax,eax
c00069b0:	0f 85 af 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ba:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069bd:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069c0:	89 c5                	mov    ebp,eax
c00069c2:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069c5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c9:	8d 46 24             	lea    eax,[esi+0x24]
c00069cc:	e8 98 b2 ff ff       	call   c0001c69 <ld_word>
c00069d1:	b9 40 00 00 00       	mov    ecx,0x40
c00069d6:	89 c7                	mov    edi,eax
c00069d8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069dc:	89 f0                	mov    eax,esi
c00069de:	e8 05 b3 ff ff       	call   c0001ce8 <mem_cpy>
c00069e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e7:	89 e9                	mov    ecx,ebp
c00069e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ec:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ef:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069f7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069fa:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069fd:	0f b7 d7             	movzx  edx,di
c0006a00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a03:	83 c0 24             	add    eax,0x24
c0006a06:	e8 d0 b2 ff ff       	call   c0001cdb <st_word>
c0006a0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a0f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a12:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a15:	a8 10                	test   al,0x10
c0006a17:	75 06                	jne    c0006a1f <f_rename+0x18e>
c0006a19:	83 c8 20             	or     eax,0x20
c0006a1c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a1f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a26:	e8 9c d1 ff ff       	call   c0003bc7 <store_xdir>
c0006a2b:	85 c0                	test   eax,eax
c0006a2d:	0f 84 1c 01 00 00    	je     c0006b4f <f_rename+0x2be>
c0006a33:	e9 2d 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006a38:	b9 20 00 00 00       	mov    ecx,0x20
c0006a3d:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a44:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a48:	e8 9b b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a4d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a52:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a56:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a5d:	e8 86 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a62:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a69:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a70:	e8 fa e3 ff ff       	call   c0004e6f <follow_path>
c0006a75:	85 c0                	test   eax,eax
c0006a77:	75 27                	jne    c0006aa0 <f_rename+0x20f>
c0006a79:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a7d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a84:	0f 85 f3 fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a8a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a91:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a98:	0f 85 df fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a9e:	eb 09                	jmp    c0006aa9 <f_rename+0x218>
c0006aa0:	83 f8 04             	cmp    eax,0x4
c0006aa3:	0f 85 bc 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006aa9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ab0:	e8 3b d8 ff ff       	call   c00042f0 <dir_register>
c0006ab5:	85 c0                	test   eax,eax
c0006ab7:	0f 85 a8 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006abd:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006ac4:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac9:	8d 46 0d             	lea    eax,[esi+0xd]
c0006acc:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ad0:	e8 13 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006ad5:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad9:	a8 10                	test   al,0x10
c0006adb:	75 03                	jne    c0006ae0 <f_rename+0x24f>
c0006add:	83 c8 20             	or     eax,0x20
c0006ae0:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006ae3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aeb:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aef:	74 5e                	je     c0006b4f <f_rename+0x2be>
c0006af1:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af8:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006afc:	74 51                	je     c0006b4f <f_rename+0x2be>
c0006afe:	89 f2                	mov    edx,esi
c0006b00:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b04:	8a 07                	mov    al,BYTE PTR [edi]
c0006b06:	e8 d9 e2 ff ff       	call   c0004de4 <ld_clust.isra.0>
c0006b0b:	89 c2                	mov    edx,eax
c0006b0d:	89 f8                	mov    eax,edi
c0006b0f:	e8 ee b3 ff ff       	call   c0001f02 <clst2sect>
c0006b14:	89 c6                	mov    esi,eax
c0006b16:	89 d1                	mov    ecx,edx
c0006b18:	b8 02 00 00 00       	mov    eax,0x2
c0006b1d:	09 f2                	or     edx,esi
c0006b1f:	74 44                	je     c0006b65 <f_rename+0x2d4>
c0006b21:	89 f2                	mov    edx,esi
c0006b23:	89 f8                	mov    eax,edi
c0006b25:	e8 1d b9 ff ff       	call   c0002447 <move_window>
c0006b2a:	85 c0                	test   eax,eax
c0006b2c:	75 37                	jne    c0006b65 <f_rename+0x2d4>
c0006b2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b32:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b36:	75 17                	jne    c0006b4f <f_rename+0x2be>
c0006b38:	8d 50 74             	lea    edx,[eax+0x74]
c0006b3b:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b42:	e8 c6 e2 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006b47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b4b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b4f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b53:	e8 f4 d0 ff ff       	call   c0003c4c <dir_remove>
c0006b58:	85 c0                	test   eax,eax
c0006b5a:	75 09                	jne    c0006b65 <f_rename+0x2d4>
c0006b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b60:	e8 0d da ff ff       	call   c0004572 <sync_fs>
c0006b65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b69:	83 ec 0c             	sub    esp,0xc
c0006b6c:	53                   	push   ebx
c0006b6d:	e8 40 19 00 00       	call   c00084b2 <ff_memfree>
c0006b72:	83 c4 10             	add    esp,0x10
c0006b75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b79:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b7f:	5b                   	pop    ebx
c0006b80:	5e                   	pop    esi
c0006b81:	5f                   	pop    edi
c0006b82:	5d                   	pop    ebp
c0006b83:	c3                   	ret    

c0006b84 <f_chmod>:
c0006b84:	57                   	push   edi
c0006b85:	b9 02 00 00 00       	mov    ecx,0x2
c0006b8a:	56                   	push   esi
c0006b8b:	53                   	push   ebx
c0006b8c:	83 ec 60             	sub    esp,0x60
c0006b8f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b93:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b97:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b9b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b9f:	e8 55 bb ff ff       	call   c00026f9 <mount_volume>
c0006ba4:	85 c0                	test   eax,eax
c0006ba6:	0f 85 af 00 00 00    	jne    c0006c5b <f_chmod+0xd7>
c0006bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb0:	83 ec 0c             	sub    esp,0xc
c0006bb3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bb7:	68 60 04 00 00       	push   0x460
c0006bbc:	e8 db 18 00 00       	call   c000849c <ff_memalloc>
c0006bc1:	83 c4 10             	add    esp,0x10
c0006bc4:	89 c6                	mov    esi,eax
c0006bc6:	b8 11 00 00 00       	mov    eax,0x11
c0006bcb:	85 f6                	test   esi,esi
c0006bcd:	0f 84 88 00 00 00    	je     c0006c5b <f_chmod+0xd7>
c0006bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bdd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006be0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006be3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006be7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006beb:	e8 7f e2 ff ff       	call   c0004e6f <follow_path>
c0006bf0:	85 c0                	test   eax,eax
c0006bf2:	75 53                	jne    c0006c47 <f_chmod+0xc3>
c0006bf4:	b8 06 00 00 00       	mov    eax,0x6
c0006bf9:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bfe:	75 47                	jne    c0006c47 <f_chmod+0xc3>
c0006c00:	89 f9                	mov    ecx,edi
c0006c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c06:	83 e1 27             	and    ecx,0x27
c0006c09:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c0c:	75 1d                	jne    c0006c2b <f_chmod+0xa7>
c0006c0e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c11:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c14:	21 cb                	and    ebx,ecx
c0006c16:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c19:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c1c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c20:	e8 a2 cf ff ff       	call   c0003bc7 <store_xdir>
c0006c25:	85 c0                	test   eax,eax
c0006c27:	75 1e                	jne    c0006c47 <f_chmod+0xc3>
c0006c29:	eb 13                	jmp    c0006c3e <f_chmod+0xba>
c0006c2b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c2f:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c32:	21 cb                	and    ebx,ecx
c0006c34:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c37:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c3a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c42:	e8 2b d9 ff ff       	call   c0004572 <sync_fs>
c0006c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c4b:	83 ec 0c             	sub    esp,0xc
c0006c4e:	56                   	push   esi
c0006c4f:	e8 5e 18 00 00       	call   c00084b2 <ff_memfree>
c0006c54:	83 c4 10             	add    esp,0x10
c0006c57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c5b:	83 c4 60             	add    esp,0x60
c0006c5e:	5b                   	pop    ebx
c0006c5f:	5e                   	pop    esi
c0006c60:	5f                   	pop    edi
c0006c61:	c3                   	ret    

c0006c62 <f_utime>:
c0006c62:	56                   	push   esi
c0006c63:	b9 02 00 00 00       	mov    ecx,0x2
c0006c68:	53                   	push   ebx
c0006c69:	83 ec 64             	sub    esp,0x64
c0006c6c:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c70:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c74:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c78:	e8 7c ba ff ff       	call   c00026f9 <mount_volume>
c0006c7d:	85 c0                	test   eax,eax
c0006c7f:	0f 85 b5 00 00 00    	jne    c0006d3a <f_utime+0xd8>
c0006c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c89:	83 ec 0c             	sub    esp,0xc
c0006c8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c90:	68 60 04 00 00       	push   0x460
c0006c95:	e8 02 18 00 00       	call   c000849c <ff_memalloc>
c0006c9a:	83 c4 10             	add    esp,0x10
c0006c9d:	89 c3                	mov    ebx,eax
c0006c9f:	b8 11 00 00 00       	mov    eax,0x11
c0006ca4:	85 db                	test   ebx,ebx
c0006ca6:	0f 84 8e 00 00 00    	je     c0006d3a <f_utime+0xd8>
c0006cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cb6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cbc:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cc0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cc4:	e8 a6 e1 ff ff       	call   c0004e6f <follow_path>
c0006cc9:	85 c0                	test   eax,eax
c0006ccb:	75 59                	jne    c0006d26 <f_utime+0xc4>
c0006ccd:	b8 06 00 00 00       	mov    eax,0x6
c0006cd2:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cd7:	75 4d                	jne    c0006d26 <f_utime+0xc4>
c0006cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdd:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ce1:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ce5:	c1 e2 10             	shl    edx,0x10
c0006ce8:	09 ca                	or     edx,ecx
c0006cea:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ced:	75 1a                	jne    c0006d09 <f_utime+0xa7>
c0006cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cf2:	83 c0 0c             	add    eax,0xc
c0006cf5:	e8 e5 af ff ff       	call   c0001cdf <st_dword>
c0006cfa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cfe:	e8 c4 ce ff ff       	call   c0003bc7 <store_xdir>
c0006d03:	85 c0                	test   eax,eax
c0006d05:	75 1f                	jne    c0006d26 <f_utime+0xc4>
c0006d07:	eb 14                	jmp    c0006d1d <f_utime+0xbb>
c0006d09:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d0d:	83 c0 16             	add    eax,0x16
c0006d10:	e8 ca af ff ff       	call   c0001cdf <st_dword>
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d21:	e8 4c d8 ff ff       	call   c0004572 <sync_fs>
c0006d26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d2a:	83 ec 0c             	sub    esp,0xc
c0006d2d:	53                   	push   ebx
c0006d2e:	e8 7f 17 00 00       	call   c00084b2 <ff_memfree>
c0006d33:	83 c4 10             	add    esp,0x10
c0006d36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d3a:	83 c4 64             	add    esp,0x64
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	c3                   	ret    

c0006d40 <f_getlabel>:
c0006d40:	55                   	push   ebp
c0006d41:	31 c9                	xor    ecx,ecx
c0006d43:	57                   	push   edi
c0006d44:	56                   	push   esi
c0006d45:	53                   	push   ebx
c0006d46:	83 ec 6c             	sub    esp,0x6c
c0006d49:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d4d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d54:	e8 a0 b9 ff ff       	call   c00026f9 <mount_volume>
c0006d59:	89 c6                	mov    esi,eax
c0006d5b:	85 c0                	test   eax,eax
c0006d5d:	0f 85 c1 01 00 00    	jne    c0006f24 <f_getlabel+0x1e4>
c0006d63:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d6b:	0f 84 5f 01 00 00    	je     c0006ed0 <f_getlabel+0x190>
c0006d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d75:	31 d2                	xor    edx,edx
c0006d77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d87:	e8 39 c4 ff ff       	call   c00031c5 <dir_sdi>
c0006d8c:	85 c0                	test   eax,eax
c0006d8e:	0f 85 2d 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006d94:	ba 01 00 00 00       	mov    edx,0x1
c0006d99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d9d:	e8 33 cc ff ff       	call   c00039d5 <dir_read>
c0006da2:	85 c0                	test   eax,eax
c0006da4:	0f 85 17 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dae:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006db1:	74 09                	je     c0006dbc <f_getlabel+0x7c>
c0006db3:	31 db                	xor    ebx,ebx
c0006db5:	31 c9                	xor    ecx,ecx
c0006db7:	e9 c8 00 00 00       	jmp    c0006e84 <f_getlabel+0x144>
c0006dbc:	31 ed                	xor    ebp,ebp
c0006dbe:	31 db                	xor    ebx,ebx
c0006dc0:	31 ff                	xor    edi,edi
c0006dc2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dc6:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dca:	39 fa                	cmp    edx,edi
c0006dcc:	76 4b                	jbe    c0006e19 <f_getlabel+0xd9>
c0006dce:	47                   	inc    edi
c0006dcf:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dd2:	01 d0                	add    eax,edx
c0006dd4:	e8 90 ae ff ff       	call   c0001c69 <ld_word>
c0006dd9:	66 85 ed             	test   bp,bp
c0006ddc:	75 0d                	jne    c0006deb <f_getlabel+0xab>
c0006dde:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006de4:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de9:	76 28                	jbe    c0006e13 <f_getlabel+0xd3>
c0006deb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006df2:	89 e9                	mov    ecx,ebp
c0006df4:	01 da                	add    edx,ebx
c0006df6:	c1 e1 10             	shl    ecx,0x10
c0006df9:	0f b7 c0             	movzx  eax,ax
c0006dfc:	09 c8                	or     eax,ecx
c0006dfe:	b9 04 00 00 00       	mov    ecx,0x4
c0006e03:	e8 01 b0 ff ff       	call   c0001e09 <put_utf>
c0006e08:	84 c0                	test   al,al
c0006e0a:	74 0b                	je     c0006e17 <f_getlabel+0xd7>
c0006e0c:	0f b6 c0             	movzx  eax,al
c0006e0f:	01 c3                	add    ebx,eax
c0006e11:	31 c0                	xor    eax,eax
c0006e13:	89 c5                	mov    ebp,eax
c0006e15:	eb ab                	jmp    c0006dc2 <f_getlabel+0x82>
c0006e17:	31 db                	xor    ebx,ebx
c0006e19:	66 85 ed             	test   bp,bp
c0006e1c:	74 02                	je     c0006e20 <f_getlabel+0xe0>
c0006e1e:	31 db                	xor    ebx,ebx
c0006e20:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e27:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e2b:	e9 a0 00 00 00       	jmp    c0006ed0 <f_getlabel+0x190>
c0006e30:	83 ff 0b             	cmp    edi,0xb
c0006e33:	74 11                	je     c0006e46 <f_getlabel+0x106>
c0006e35:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e3e:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e41:	c1 e0 08             	shl    eax,0x8
c0006e44:	09 c2                	or     edx,eax
c0006e46:	0f b7 d2             	movzx  edx,dx
c0006e49:	50                   	push   eax
c0006e4a:	50                   	push   eax
c0006e4b:	68 b5 01 00 00       	push   0x1b5
c0006e50:	52                   	push   edx
c0006e51:	e8 03 17 00 00       	call   c0008559 <ff_oem2uni>
c0006e56:	83 c4 10             	add    esp,0x10
c0006e59:	66 85 c0             	test   ax,ax
c0006e5c:	74 46                	je     c0006ea4 <f_getlabel+0x164>
c0006e5e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e65:	0f b7 c0             	movzx  eax,ax
c0006e68:	01 da                	add    edx,ebx
c0006e6a:	b9 04 00 00 00       	mov    ecx,0x4
c0006e6f:	e8 95 af ff ff       	call   c0001e09 <put_utf>
c0006e74:	84 c0                	test   al,al
c0006e76:	74 2c                	je     c0006ea4 <f_getlabel+0x164>
c0006e78:	0f b6 c0             	movzx  eax,al
c0006e7b:	01 c3                	add    ebx,eax
c0006e7d:	83 ff 0b             	cmp    edi,0xb
c0006e80:	74 24                	je     c0006ea6 <f_getlabel+0x166>
c0006e82:	89 f9                	mov    ecx,edi
c0006e84:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e88:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e8b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e90:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e99:	e8 9f ae ff ff       	call   c0001d3d <dbc_1st>
c0006e9e:	85 c0                	test   eax,eax
c0006ea0:	74 a4                	je     c0006e46 <f_getlabel+0x106>
c0006ea2:	eb 8c                	jmp    c0006e30 <f_getlabel+0xf0>
c0006ea4:	31 db                	xor    ebx,ebx
c0006ea6:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ead:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eb0:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eb7:	74 17                	je     c0006ed0 <f_getlabel+0x190>
c0006eb9:	4b                   	dec    ebx
c0006eba:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ebd:	74 ee                	je     c0006ead <f_getlabel+0x16d>
c0006ebf:	eb 0f                	jmp    c0006ed0 <f_getlabel+0x190>
c0006ec1:	83 f8 04             	cmp    eax,0x4
c0006ec4:	75 5c                	jne    c0006f22 <f_getlabel+0x1e2>
c0006ec6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ecd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ed0:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed8:	74 4a                	je     c0006f24 <f_getlabel+0x1e4>
c0006eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ede:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ee1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ee4:	e8 5e b5 ff ff       	call   c0002447 <move_window>
c0006ee9:	89 c6                	mov    esi,eax
c0006eeb:	85 c0                	test   eax,eax
c0006eed:	75 35                	jne    c0006f24 <f_getlabel+0x1e4>
c0006eef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ef3:	b8 43 00 00 00       	mov    eax,0x43
c0006ef8:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006efa:	80 f9 03             	cmp    cl,0x3
c0006efd:	74 0f                	je     c0006f0e <f_getlabel+0x1ce>
c0006eff:	31 c0                	xor    eax,eax
c0006f01:	80 f9 04             	cmp    cl,0x4
c0006f04:	0f 94 c0             	sete   al
c0006f07:	48                   	dec    eax
c0006f08:	83 e0 c3             	and    eax,0xffffffc3
c0006f0b:	83 c0 64             	add    eax,0x64
c0006f0e:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f12:	e8 5f ad ff ff       	call   c0001c76 <ld_dword>
c0006f17:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f1e:	89 07                	mov    DWORD PTR [edi],eax
c0006f20:	eb 02                	jmp    c0006f24 <f_getlabel+0x1e4>
c0006f22:	89 c6                	mov    esi,eax
c0006f24:	83 c4 6c             	add    esp,0x6c
c0006f27:	89 f0                	mov    eax,esi
c0006f29:	5b                   	pop    ebx
c0006f2a:	5e                   	pop    esi
c0006f2b:	5f                   	pop    edi
c0006f2c:	5d                   	pop    ebp
c0006f2d:	c3                   	ret    

c0006f2e <f_setlabel>:
c0006f2e:	56                   	push   esi
c0006f2f:	b9 02 00 00 00       	mov    ecx,0x2
c0006f34:	53                   	push   ebx
c0006f35:	83 ec 74             	sub    esp,0x74
c0006f38:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f3c:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f43:	e8 b1 b7 ff ff       	call   c00026f9 <mount_volume>
c0006f48:	89 c6                	mov    esi,eax
c0006f4a:	85 c0                	test   eax,eax
c0006f4c:	0f 85 41 02 00 00    	jne    c0007193 <f_setlabel+0x265>
c0006f52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f59:	0f 85 8e 00 00 00    	jne    c0006fed <f_setlabel+0xbf>
c0006f5f:	b9 16 00 00 00       	mov    ecx,0x16
c0006f64:	31 d2                	xor    edx,edx
c0006f66:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f6a:	31 db                	xor    ebx,ebx
c0006f6c:	e8 8c ad ff ff       	call   c0001cfd <mem_set>
c0006f71:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f78:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f7b:	0f 86 0a 01 00 00    	jbe    c000708b <f_setlabel+0x15d>
c0006f81:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f88:	e8 b6 ad ff ff       	call   c0001d43 <tchar2uni>
c0006f8d:	89 c6                	mov    esi,eax
c0006f8f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f94:	76 2a                	jbe    c0006fc0 <f_setlabel+0x92>
c0006f96:	83 f8 ff             	cmp    eax,0xffffffff
c0006f99:	74 05                	je     c0006fa0 <f_setlabel+0x72>
c0006f9b:	83 fb 09             	cmp    ebx,0x9
c0006f9e:	76 0a                	jbe    c0006faa <f_setlabel+0x7c>
c0006fa0:	be 06 00 00 00       	mov    esi,0x6
c0006fa5:	e9 e9 01 00 00       	jmp    c0007193 <f_setlabel+0x265>
c0006faa:	89 c2                	mov    edx,eax
c0006fac:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fb0:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb3:	c1 ea 10             	shr    edx,0x10
c0006fb6:	01 c8                	add    eax,ecx
c0006fb8:	43                   	inc    ebx
c0006fb9:	e8 1d ad ff ff       	call   c0001cdb <st_word>
c0006fbe:	eb 04                	jmp    c0006fc4 <f_setlabel+0x96>
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	74 dc                	je     c0006fa0 <f_setlabel+0x72>
c0006fc4:	89 f2                	mov    edx,esi
c0006fc6:	b8 f7 93 02 c0       	mov    eax,0xc00293f7
c0006fcb:	e8 5b ad ff ff       	call   c0001d2b <chk_chr>
c0006fd0:	85 c0                	test   eax,eax
c0006fd2:	75 cc                	jne    c0006fa0 <f_setlabel+0x72>
c0006fd4:	83 fb 0a             	cmp    ebx,0xa
c0006fd7:	77 c7                	ja     c0006fa0 <f_setlabel+0x72>
c0006fd9:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fdc:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fe0:	0f b7 d6             	movzx  edx,si
c0006fe3:	01 c8                	add    eax,ecx
c0006fe5:	43                   	inc    ebx
c0006fe6:	e8 f0 ac ff ff       	call   c0001cdb <st_word>
c0006feb:	eb 84                	jmp    c0006f71 <f_setlabel+0x43>
c0006fed:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ff2:	ba 20 00 00 00       	mov    edx,0x20
c0006ff7:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ffb:	31 db                	xor    ebx,ebx
c0006ffd:	e8 fb ac ff ff       	call   c0001cfd <mem_set>
c0007002:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007009:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000700c:	76 60                	jbe    c000706e <f_setlabel+0x140>
c000700e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007015:	e8 29 ad ff ff       	call   c0001d43 <tchar2uni>
c000701a:	3d ff ff 00 00       	cmp    eax,0xffff
c000701f:	0f 87 7b ff ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007025:	83 ec 0c             	sub    esp,0xc
c0007028:	50                   	push   eax
c0007029:	e8 97 15 00 00       	call   c00085c5 <ff_wtoupper>
c000702e:	5a                   	pop    edx
c000702f:	59                   	pop    ecx
c0007030:	68 b5 01 00 00       	push   0x1b5
c0007035:	50                   	push   eax
c0007036:	e8 8e 14 00 00       	call   c00084c9 <ff_uni2oem>
c000703b:	83 c4 10             	add    esp,0x10
c000703e:	89 c6                	mov    esi,eax
c0007040:	66 85 c0             	test   ax,ax
c0007043:	0f 84 57 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007049:	0f b7 d0             	movzx  edx,ax
c000704c:	b8 f0 93 02 c0       	mov    eax,0xc00293f0
c0007051:	e8 d5 ac ff ff       	call   c0001d2b <chk_chr>
c0007056:	85 c0                	test   eax,eax
c0007058:	0f 85 42 ff ff ff    	jne    c0006fa0 <f_setlabel+0x72>
c000705e:	66 81 fe ff 00       	cmp    si,0xff
c0007063:	0f 87 14 01 00 00    	ja     c000717d <f_setlabel+0x24f>
c0007069:	e9 fa 00 00 00       	jmp    c0007168 <f_setlabel+0x23a>
c000706e:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007073:	0f 84 27 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007079:	85 db                	test   ebx,ebx
c000707b:	74 0e                	je     c000708b <f_setlabel+0x15d>
c000707d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007080:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007085:	75 04                	jne    c000708b <f_setlabel+0x15d>
c0007087:	89 c3                	mov    ebx,eax
c0007089:	eb ee                	jmp    c0007079 <f_setlabel+0x14b>
c000708b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000708f:	31 d2                	xor    edx,edx
c0007091:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007095:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000709d:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070a1:	e8 1f c1 ff ff       	call   c00031c5 <dir_sdi>
c00070a6:	89 c6                	mov    esi,eax
c00070a8:	85 c0                	test   eax,eax
c00070aa:	0f 85 e3 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c00070b0:	ba 01 00 00 00       	mov    edx,0x1
c00070b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b9:	e8 17 c9 ff ff       	call   c00039d5 <dir_read>
c00070be:	85 c0                	test   eax,eax
c00070c0:	75 21                	jne    c00070e3 <f_setlabel+0x1b5>
c00070c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070c6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ca:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070cd:	74 5d                	je     c000712c <f_setlabel+0x1fe>
c00070cf:	85 db                	test   ebx,ebx
c00070d1:	74 0b                	je     c00070de <f_setlabel+0x1b0>
c00070d3:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d8:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070dc:	eb 70                	jmp    c000714e <f_setlabel+0x220>
c00070de:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070e1:	eb 70                	jmp    c0007153 <f_setlabel+0x225>
c00070e3:	83 f8 04             	cmp    eax,0x4
c00070e6:	75 7c                	jne    c0007164 <f_setlabel+0x236>
c00070e8:	85 db                	test   ebx,ebx
c00070ea:	0f 84 a3 00 00 00    	je     c0007193 <f_setlabel+0x265>
c00070f0:	ba 01 00 00 00       	mov    edx,0x1
c00070f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f9:	e8 51 ca ff ff       	call   c0003b4f <dir_alloc>
c00070fe:	89 c6                	mov    esi,eax
c0007100:	85 c0                	test   eax,eax
c0007102:	0f 85 8b 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c0007108:	31 d2                	xor    edx,edx
c000710a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710e:	b9 20 00 00 00       	mov    ecx,0x20
c0007113:	e8 e5 ab ff ff       	call   c0001cfd <mem_set>
c0007118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000711f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007123:	75 18                	jne    c000713d <f_setlabel+0x20f>
c0007125:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007128:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000712c:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c000712f:	b9 16 00 00 00       	mov    ecx,0x16
c0007134:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007138:	83 c0 02             	add    eax,0x2
c000713b:	eb 9b                	jmp    c00070d8 <f_setlabel+0x1aa>
c000713d:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007141:	b9 0b 00 00 00       	mov    ecx,0xb
c0007146:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000714a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000714e:	e8 95 ab ff ff       	call   c0001ce8 <mem_cpy>
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000715b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000715f:	e8 0e d4 ff ff       	call   c0004572 <sync_fs>
c0007164:	89 c6                	mov    esi,eax
c0007166:	eb 2b                	jmp    c0007193 <f_setlabel+0x265>
c0007168:	83 fb 0a             	cmp    ebx,0xa
c000716b:	0f 87 2f fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007171:	89 f0                	mov    eax,esi
c0007173:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007177:	43                   	inc    ebx
c0007178:	e9 85 fe ff ff       	jmp    c0007002 <f_setlabel+0xd4>
c000717d:	83 fb 09             	cmp    ebx,0x9
c0007180:	0f 87 1a fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007186:	89 f0                	mov    eax,esi
c0007188:	66 c1 e8 08          	shr    ax,0x8
c000718c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007190:	43                   	inc    ebx
c0007191:	eb de                	jmp    c0007171 <f_setlabel+0x243>
c0007193:	89 f0                	mov    eax,esi
c0007195:	83 c4 74             	add    esp,0x74
c0007198:	5b                   	pop    ebx
c0007199:	5e                   	pop    esi
c000719a:	c3                   	ret    

c000719b <f_forward>:
c000719b:	55                   	push   ebp
c000719c:	57                   	push   edi
c000719d:	56                   	push   esi
c000719e:	53                   	push   ebx
c000719f:	83 ec 2c             	sub    esp,0x2c
c00071a2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071a6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071b0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071b4:	89 d8                	mov    eax,ebx
c00071b6:	e8 b1 b1 ff ff       	call   c000236c <validate>
c00071bb:	89 c5                	mov    ebp,eax
c00071bd:	85 c0                	test   eax,eax
c00071bf:	0f 85 aa 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c9:	85 ed                	test   ebp,ebp
c00071cb:	0f 85 9e 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071d1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071d5:	0f 84 8f 01 00 00    	je     c000736a <f_forward+0x1cf>
c00071db:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071de:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071e1:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071e4:	bf 00 00 00 00       	mov    edi,0x0
c00071e9:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071ec:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071f0:	89 d1                	mov    ecx,edx
c00071f2:	19 f9                	sbb    ecx,edi
c00071f4:	0f 83 cf 00 00 00    	jae    c00072c9 <f_forward+0x12e>
c00071fa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071fe:	e9 c6 00 00 00       	jmp    c00072c9 <f_forward+0x12e>
c0007203:	50                   	push   eax
c0007204:	50                   	push   eax
c0007205:	6a 00                	push   0x0
c0007207:	6a 00                	push   0x0
c0007209:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000720d:	83 c4 10             	add    esp,0x10
c0007210:	85 c0                	test   eax,eax
c0007212:	0f 84 57 01 00 00    	je     c000736f <f_forward+0x1d4>
c0007218:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000721b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000721f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007222:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007226:	89 d7                	mov    edi,edx
c0007228:	8d 4e ff             	lea    ecx,[esi-0x1]
c000722b:	89 c6                	mov    esi,eax
c000722d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007231:	21 ce                	and    esi,ecx
c0007233:	89 c1                	mov    ecx,eax
c0007235:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000723b:	0f 84 98 00 00 00    	je     c00072d9 <f_forward+0x13e>
c0007241:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007245:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007248:	89 c8                	mov    eax,ecx
c000724a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000724e:	e8 af ac ff ff       	call   c0001f02 <clst2sect>
c0007253:	89 d7                	mov    edi,edx
c0007255:	09 c7                	or     edi,eax
c0007257:	0f 84 9e 00 00 00    	je     c00072fb <f_forward+0x160>
c000725d:	31 ff                	xor    edi,edi
c000725f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007262:	01 c6                	add    esi,eax
c0007264:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007268:	11 d7                	adc    edi,edx
c000726a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000726d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007270:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007274:	39 fa                	cmp    edx,edi
c0007276:	0f 85 a2 00 00 00    	jne    c000731e <f_forward+0x183>
c000727c:	39 f0                	cmp    eax,esi
c000727e:	0f 85 9a 00 00 00    	jne    c000731e <f_forward+0x183>
c0007284:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007287:	ba 00 02 00 00       	mov    edx,0x200
c000728c:	25 ff 01 00 00       	and    eax,0x1ff
c0007291:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007295:	29 c2                	sub    edx,eax
c0007297:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000729a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000729d:	39 d1                	cmp    ecx,edx
c000729f:	76 02                	jbe    c00072a3 <f_forward+0x108>
c00072a1:	89 d1                	mov    ecx,edx
c00072a3:	8d 73 50             	lea    esi,[ebx+0x50]
c00072a6:	52                   	push   edx
c00072a7:	01 c6                	add    esi,eax
c00072a9:	52                   	push   edx
c00072aa:	51                   	push   ecx
c00072ab:	56                   	push   esi
c00072ac:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072b0:	83 c4 10             	add    esp,0x10
c00072b3:	85 c0                	test   eax,eax
c00072b5:	74 44                	je     c00072fb <f_forward+0x160>
c00072b7:	31 ff                	xor    edi,edi
c00072b9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072bc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072bf:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072c3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072c7:	01 07                	add    DWORD PTR [edi],eax
c00072c9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072ce:	0f 85 2f ff ff ff    	jne    c0007203 <f_forward+0x68>
c00072d4:	e9 96 00 00 00       	jmp    c000736f <f_forward+0x1d4>
c00072d9:	85 f6                	test   esi,esi
c00072db:	0f 85 60 ff ff ff    	jne    c0007241 <f_forward+0xa6>
c00072e1:	89 d7                	mov    edi,edx
c00072e3:	09 c7                	or     edi,eax
c00072e5:	75 05                	jne    c00072ec <f_forward+0x151>
c00072e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072ea:	eb 0a                	jmp    c00072f6 <f_forward+0x15b>
c00072ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ef:	89 d8                	mov    eax,ebx
c00072f1:	e8 d9 bc ff ff       	call   c0002fcf <get_fat>
c00072f6:	83 f8 01             	cmp    eax,0x1
c00072f9:	77 0b                	ja     c0007306 <f_forward+0x16b>
c00072fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072ff:	bd 02 00 00 00       	mov    ebp,0x2
c0007304:	eb 69                	jmp    c000736f <f_forward+0x1d4>
c0007306:	83 f8 ff             	cmp    eax,0xffffffff
c0007309:	75 0b                	jne    c0007316 <f_forward+0x17b>
c000730b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000730f:	bd 01 00 00 00       	mov    ebp,0x1
c0007314:	eb 59                	jmp    c000736f <f_forward+0x1d4>
c0007316:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007319:	e9 23 ff ff ff       	jmp    c0007241 <f_forward+0xa6>
c000731e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007322:	79 20                	jns    c0007344 <f_forward+0x1a9>
c0007324:	83 ec 0c             	sub    esp,0xc
c0007327:	6a 01                	push   0x1
c0007329:	52                   	push   edx
c000732a:	50                   	push   eax
c000732b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000732f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007333:	50                   	push   eax
c0007334:	e8 fb a8 ff ff       	call   c0001c34 <disk_write>
c0007339:	83 c4 20             	add    esp,0x20
c000733c:	85 c0                	test   eax,eax
c000733e:	75 cb                	jne    c000730b <f_forward+0x170>
c0007340:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	6a 01                	push   0x1
c0007349:	57                   	push   edi
c000734a:	56                   	push   esi
c000734b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000734f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007353:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007357:	50                   	push   eax
c0007358:	e8 c1 a8 ff ff       	call   c0001c1e <disk_read>
c000735d:	83 c4 20             	add    esp,0x20
c0007360:	85 c0                	test   eax,eax
c0007362:	0f 84 1c ff ff ff    	je     c0007284 <f_forward+0xe9>
c0007368:	eb a1                	jmp    c000730b <f_forward+0x170>
c000736a:	bd 07 00 00 00       	mov    ebp,0x7
c000736f:	83 c4 2c             	add    esp,0x2c
c0007372:	89 e8                	mov    eax,ebp
c0007374:	5b                   	pop    ebx
c0007375:	5e                   	pop    esi
c0007376:	5f                   	pop    edi
c0007377:	5d                   	pop    ebp
c0007378:	c3                   	ret    

c0007379 <f_mkfs>:
c0007379:	55                   	push   ebp
c000737a:	57                   	push   edi
c000737b:	56                   	push   esi
c000737c:	53                   	push   ebx
c000737d:	bb 0b 00 00 00       	mov    ebx,0xb
c0007382:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007388:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000738f:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007396:	e8 b0 ae ff ff       	call   c000224b <get_ldnumber>
c000739b:	85 c0                	test   eax,eax
c000739d:	0f 88 ec 10 00 00    	js     c000848f <f_mkfs+0x1116>
c00073a3:	8b 14 85 00 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1c00]
c00073aa:	85 d2                	test   edx,edx
c00073ac:	74 03                	je     c00073b1 <f_mkfs+0x38>
c00073ae:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073b1:	85 f6                	test   esi,esi
c00073b3:	75 05                	jne    c00073ba <f_mkfs+0x41>
c00073b5:	be e0 93 02 c0       	mov    esi,0xc00293e0
c00073ba:	83 ec 0c             	sub    esp,0xc
c00073bd:	0f b6 c0             	movzx  eax,al
c00073c0:	bb 03 00 00 00       	mov    ebx,0x3
c00073c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073cd:	e8 49 a8 ff ff       	call   c0001c1b <disk_initialize>
c00073d2:	83 c4 10             	add    esp,0x10
c00073d5:	a8 01                	test   al,0x1
c00073d7:	0f 85 b2 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073dd:	bb 0a 00 00 00       	mov    ebx,0xa
c00073e2:	a8 04                	test   al,0x4
c00073e4:	0f 85 a5 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073ea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ed:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073f1:	85 c0                	test   eax,eax
c00073f3:	75 20                	jne    c0007415 <f_mkfs+0x9c>
c00073f5:	51                   	push   ecx
c00073f6:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073fa:	50                   	push   eax
c00073fb:	6a 03                	push   0x3
c00073fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007401:	e8 44 a8 ff ff       	call   c0001c4a <disk_ioctl>
c0007406:	83 c4 10             	add    esp,0x10
c0007409:	85 c0                	test   eax,eax
c000740b:	74 08                	je     c0007415 <f_mkfs+0x9c>
c000740d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007415:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007419:	8d 42 ff             	lea    eax,[edx-0x1]
c000741c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007421:	77 04                	ja     c0007427 <f_mkfs+0xae>
c0007423:	85 c2                	test   edx,eax
c0007425:	74 08                	je     c000742f <f_mkfs+0xb6>
c0007427:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000742f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007432:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007436:	48                   	dec    eax
c0007437:	3c 01                	cmp    al,0x1
c0007439:	76 05                	jbe    c0007440 <f_mkfs+0xc7>
c000743b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007440:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007447:	48                   	dec    eax
c0007448:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000744d:	77 07                	ja     c0007456 <f_mkfs+0xdd>
c000744f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007454:	74 08                	je     c000745e <f_mkfs+0xe5>
c0007456:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000745e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007461:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007467:	77 07                	ja     c0007470 <f_mkfs+0xf7>
c0007469:	8d 43 ff             	lea    eax,[ebx-0x1]
c000746c:	85 d8                	test   eax,ebx
c000746e:	74 02                	je     c0007472 <f_mkfs+0xf9>
c0007470:	31 db                	xor    ebx,ebx
c0007472:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000747d:	77 0a                	ja     c0007489 <f_mkfs+0x110>
c000747f:	bb 11 00 00 00       	mov    ebx,0x11
c0007484:	e9 06 10 00 00       	jmp    c000848f <f_mkfs+0x1116>
c0007489:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007490:	8b 36                	mov    esi,DWORD PTR [esi]
c0007492:	85 ed                	test   ebp,ebp
c0007494:	75 1e                	jne    c00074b4 <f_mkfs+0x13b>
c0007496:	83 ec 0c             	sub    esp,0xc
c0007499:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074a0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074a5:	50                   	push   eax
c00074a6:	e8 f1 0f 00 00       	call   c000849c <ff_memalloc>
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	89 c5                	mov    ebp,eax
c00074b0:	85 c0                	test   eax,eax
c00074b2:	74 cb                	je     c000747f <f_mkfs+0x106>
c00074b4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074bc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074c4:	52                   	push   edx
c00074c5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c9:	50                   	push   eax
c00074ca:	6a 01                	push   0x1
c00074cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074d0:	e8 75 a7 ff ff       	call   c0001c4a <disk_ioctl>
c00074d5:	83 c4 10             	add    esp,0x10
c00074d8:	85 c0                	test   eax,eax
c00074da:	0f 85 4a 0f 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00074e0:	89 f1                	mov    ecx,esi
c00074e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074ea:	83 e1 0f             	and    ecx,0xf
c00074ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074f5:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f9:	83 e6 08             	and    esi,0x8
c00074fc:	75 56                	jne    c0007554 <f_mkfs+0x1db>
c00074fe:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007502:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007506:	83 ff 00             	cmp    edi,0x0
c0007509:	76 20                	jbe    c000752b <f_mkfs+0x1b2>
c000750b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007510:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007518:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000751e:	83 d7 ff             	adc    edi,0xffffffff
c0007521:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007525:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007529:	eb 21                	jmp    c000754c <f_mkfs+0x1d3>
c000752b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007530:	39 f2                	cmp    edx,esi
c0007532:	19 f8                	sbb    eax,edi
c0007534:	73 1e                	jae    c0007554 <f_mkfs+0x1db>
c0007536:	83 c6 c1             	add    esi,0xffffffc1
c0007539:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007541:	83 d7 ff             	adc    edi,0xffffffff
c0007544:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007548:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000754c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007554:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007558:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000755c:	89 04 24             	mov    DWORD PTR [esp],eax
c000755f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007563:	31 c0                	xor    eax,eax
c0007565:	ba 7f 00 00 00       	mov    edx,0x7f
c000756a:	89 c7                	mov    edi,eax
c000756c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000756f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007573:	0f 83 c5 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007579:	89 df                	mov    edi,ebx
c000757b:	c1 ef 09             	shr    edi,0x9
c000757e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007582:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007589:	c1 ef 09             	shr    edi,0x9
c000758c:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007591:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007595:	74 29                	je     c00075c0 <f_mkfs+0x247>
c0007597:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000759d:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075a2:	0f 97 c2             	seta   dl
c00075a5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075ac:	0f 92 c0             	setb   al
c00075af:	08 c2                	or     dl,al
c00075b1:	75 5b                	jne    c000760e <f_mkfs+0x295>
c00075b3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b7:	83 e0 07             	and    eax,0x7
c00075ba:	3c 04                	cmp    al,0x4
c00075bc:	74 50                	je     c000760e <f_mkfs+0x295>
c00075be:	eb 1b                	jmp    c00075db <f_mkfs+0x262>
c00075c0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075c5:	0f 87 73 0a 00 00    	ja     c000803e <f_mkfs+0xcc5>
c00075cb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075d1:	76 08                	jbe    c00075db <f_mkfs+0x262>
c00075d3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075df:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075e3:	83 e0 01             	and    eax,0x1
c00075e6:	80 e1 02             	and    cl,0x2
c00075e9:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ed:	74 0d                	je     c00075fc <f_mkfs+0x283>
c00075ef:	84 c0                	test   al,al
c00075f1:	0f 84 53 09 00 00    	je     c0007f4a <f_mkfs+0xbd1>
c00075f7:	e9 12 08 00 00       	jmp    c0007e0e <f_mkfs+0xa95>
c00075fc:	bb 13 00 00 00       	mov    ebx,0x13
c0007601:	84 c0                	test   al,al
c0007603:	0f 85 05 08 00 00    	jne    c0007e0e <f_mkfs+0xa95>
c0007609:	e9 39 0e 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c000760e:	31 c0                	xor    eax,eax
c0007610:	ba ff 0f 00 00       	mov    edx,0xfff
c0007615:	89 c7                	mov    edi,eax
c0007617:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000761a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000761e:	0f 83 1a 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007624:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000762a:	77 39                	ja     c0007665 <f_mkfs+0x2ec>
c000762c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007631:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007639:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000763c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007640:	73 08                	jae    c000764a <f_mkfs+0x2d1>
c0007642:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000764a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000764f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007652:	b8 00 00 00 00       	mov    eax,0x0
c0007657:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000765b:	73 08                	jae    c0007665 <f_mkfs+0x2ec>
c000765d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007669:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000766d:	83 c0 20             	add    eax,0x20
c0007670:	83 d2 00             	adc    edx,0x0
c0007673:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007677:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000767b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000767f:	31 d2                	xor    edx,edx
c0007681:	31 ff                	xor    edi,edi
c0007683:	52                   	push   edx
c0007684:	89 fb                	mov    ebx,edi
c0007686:	50                   	push   eax
c0007687:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768f:	e8 70 f3 01 00       	call   c0026a04 <__udivdi3>
c0007694:	83 c4 10             	add    esp,0x10
c0007697:	c1 e0 02             	shl    eax,0x2
c000769a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000769e:	05 07 02 00 00       	add    eax,0x207
c00076a3:	89 f1                	mov    ecx,esi
c00076a5:	c1 e8 09             	shr    eax,0x9
c00076a8:	83 c1 ff             	add    ecx,0xffffffff
c00076ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076af:	83 d3 ff             	adc    ebx,0xffffffff
c00076b2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076b6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076ba:	31 d2                	xor    edx,edx
c00076bc:	01 c8                	add    eax,ecx
c00076be:	11 da                	adc    edx,ebx
c00076c0:	89 c1                	mov    ecx,eax
c00076c2:	f7 de                	neg    esi
c00076c4:	89 d0                	mov    eax,edx
c00076c6:	83 d7 00             	adc    edi,0x0
c00076c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076cd:	f7 df                	neg    edi
c00076cf:	21 f1                	and    ecx,esi
c00076d1:	21 f8                	and    eax,edi
c00076d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076db:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076df:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076e3:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ea:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ee:	0f ac d0 01          	shrd   eax,edx,0x1
c00076f2:	89 df                	mov    edi,ebx
c00076f4:	d1 ea                	shr    edx,1
c00076f6:	39 c1                	cmp    ecx,eax
c00076f8:	19 d7                	sbb    edi,edx
c00076fa:	0f 83 3e 09 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007704:	31 d2                	xor    edx,edx
c0007706:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000770a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000770e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007712:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007715:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007719:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000771d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007721:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007725:	83 f8 0f             	cmp    eax,0xf
c0007728:	0f 86 10 09 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c000772e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007736:	0f 87 02 09 00 00    	ja     c000803e <f_mkfs+0xcc5>
c000773c:	31 d2                	xor    edx,edx
c000773e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007742:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000774a:	83 c0 07             	add    eax,0x7
c000774d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007755:	c1 e8 03             	shr    eax,0x3
c0007758:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000775f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007767:	c1 e0 09             	shl    eax,0x9
c000776a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000776e:	48                   	dec    eax
c000776f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007773:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007777:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000777b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000777f:	31 d2                	xor    edx,edx
c0007781:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007785:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000778c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007790:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007795:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007799:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000779d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077a1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077a5:	31 ff                	xor    edi,edi
c00077a7:	31 f6                	xor    esi,esi
c00077a9:	31 db                	xor    ebx,ebx
c00077ab:	85 ff                	test   edi,edi
c00077ad:	74 05                	je     c00077b4 <f_mkfs+0x43b>
c00077af:	4f                   	dec    edi
c00077b0:	74 44                	je     c00077f6 <f_mkfs+0x47d>
c00077b2:	eb 4f                	jmp    c0007803 <f_mkfs+0x48a>
c00077b4:	83 ec 0c             	sub    esp,0xc
c00077b7:	0f b7 c3             	movzx  eax,bx
c00077ba:	50                   	push   eax
c00077bb:	e8 05 0e 00 00       	call   c00085c5 <ff_wtoupper>
c00077c0:	83 c4 10             	add    esp,0x10
c00077c3:	89 c1                	mov    ecx,eax
c00077c5:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c8:	66 39 c3             	cmp    bx,ax
c00077cb:	75 3e                	jne    c000780b <f_mkfs+0x492>
c00077cd:	be 01 00 00 00       	mov    esi,0x1
c00077d2:	89 df                	mov    edi,ebx
c00077d4:	66 01 f7             	add    di,si
c00077d7:	75 07                	jne    c00077e0 <f_mkfs+0x467>
c00077d9:	83 fe 7f             	cmp    esi,0x7f
c00077dc:	77 31                	ja     c000780f <f_mkfs+0x496>
c00077de:	eb 16                	jmp    c00077f6 <f_mkfs+0x47d>
c00077e0:	83 ec 0c             	sub    esp,0xc
c00077e3:	0f b7 ff             	movzx  edi,di
c00077e6:	57                   	push   edi
c00077e7:	e8 d9 0d 00 00       	call   c00085c5 <ff_wtoupper>
c00077ec:	83 c4 10             	add    esp,0x10
c00077ef:	39 c7                	cmp    edi,eax
c00077f1:	75 e6                	jne    c00077d9 <f_mkfs+0x460>
c00077f3:	46                   	inc    esi
c00077f4:	eb dc                	jmp    c00077d2 <f_mkfs+0x459>
c00077f6:	31 c0                	xor    eax,eax
c00077f8:	89 d9                	mov    ecx,ebx
c00077fa:	4e                   	dec    esi
c00077fb:	0f 95 c0             	setne  al
c00077fe:	43                   	inc    ebx
c00077ff:	89 c7                	mov    edi,eax
c0007801:	eb 14                	jmp    c0007817 <f_mkfs+0x49e>
c0007803:	89 f1                	mov    ecx,esi
c0007805:	01 f3                	add    ebx,esi
c0007807:	31 ff                	xor    edi,edi
c0007809:	eb 0c                	jmp    c0007817 <f_mkfs+0x49e>
c000780b:	89 d3                	mov    ebx,edx
c000780d:	eb 08                	jmp    c0007817 <f_mkfs+0x49e>
c000780f:	bf 02 00 00 00       	mov    edi,0x2
c0007814:	83 c9 ff             	or     ecx,0xffffffff
c0007817:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000781e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007822:	0f b6 c1             	movzx  eax,cl
c0007825:	e8 3a a9 ff ff       	call   c0002164 <xsum32>
c000782a:	66 c1 e9 08          	shr    cx,0x8
c000782e:	89 c2                	mov    edx,eax
c0007830:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007833:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007837:	0f b7 c1             	movzx  eax,cx
c000783a:	e8 25 a9 ff ff       	call   c0002164 <xsum32>
c000783f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007844:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007848:	66 85 db             	test   bx,bx
c000784b:	74 1f                	je     c000786c <f_mkfs+0x4f3>
c000784d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007850:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007857:	83 c0 02             	add    eax,0x2
c000785a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007860:	39 c2                	cmp    edx,eax
c0007862:	74 08                	je     c000786c <f_mkfs+0x4f3>
c0007864:	89 04 24             	mov    DWORD PTR [esp],eax
c0007867:	e9 3f ff ff ff       	jmp    c00077ab <f_mkfs+0x432>
c000786c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000786f:	83 ec 0c             	sub    esp,0xc
c0007872:	05 01 02 00 00       	add    eax,0x201
c0007877:	c1 e8 09             	shr    eax,0x9
c000787a:	50                   	push   eax
c000787b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000787f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007883:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007887:	55                   	push   ebp
c0007888:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788c:	e8 a3 a3 ff ff       	call   c0001c34 <disk_write>
c0007891:	83 c4 20             	add    esp,0x20
c0007894:	85 c0                	test   eax,eax
c0007896:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007899:	0f 85 8b 0b 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000789f:	89 d0                	mov    eax,edx
c00078a1:	31 d2                	xor    edx,edx
c00078a3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078a7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078ab:	66 85 db             	test   bx,bx
c00078ae:	74 04                	je     c00078b4 <f_mkfs+0x53b>
c00078b0:	31 c0                	xor    eax,eax
c00078b2:	eb b0                	jmp    c0007864 <f_mkfs+0x4eb>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078bc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078c0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078d3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078d7:	c1 eb 09             	shr    ebx,0x9
c00078da:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078e5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ed:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078f1:	8d 70 01             	lea    esi,[eax+0x1]
c00078f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078fc:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007903:	31 d2                	xor    edx,edx
c0007905:	25 00 fe ff ff       	and    eax,0xfffffe00
c000790a:	89 04 24             	mov    DWORD PTR [esp],eax
c000790d:	89 c1                	mov    ecx,eax
c000790f:	89 e8                	mov    eax,ebp
c0007911:	e8 e7 a3 ff ff       	call   c0001cfd <mem_set>
c0007916:	31 c0                	xor    eax,eax
c0007918:	39 04 24             	cmp    DWORD PTR [esp],eax
c000791b:	76 10                	jbe    c000792d <f_mkfs+0x5b4>
c000791d:	83 fe 07             	cmp    esi,0x7
c0007920:	76 0b                	jbe    c000792d <f_mkfs+0x5b4>
c0007922:	40                   	inc    eax
c0007923:	83 ee 08             	sub    esi,0x8
c0007926:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000792b:	eb eb                	jmp    c0007918 <f_mkfs+0x59f>
c000792d:	b2 01                	mov    dl,0x1
c000792f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007933:	85 f6                	test   esi,esi
c0007935:	74 0c                	je     c0007943 <f_mkfs+0x5ca>
c0007937:	39 04 24             	cmp    DWORD PTR [esp],eax
c000793a:	76 07                	jbe    c0007943 <f_mkfs+0x5ca>
c000793c:	08 11                	or     BYTE PTR [ecx],dl
c000793e:	4e                   	dec    esi
c000793f:	d1 e2                	shl    edx,1
c0007941:	eb f0                	jmp    c0007933 <f_mkfs+0x5ba>
c0007943:	89 df                	mov    edi,ebx
c0007945:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007949:	76 04                	jbe    c000794f <f_mkfs+0x5d6>
c000794b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000794f:	83 ec 0c             	sub    esp,0xc
c0007952:	57                   	push   edi
c0007953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007957:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000795b:	55                   	push   ebp
c000795c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007960:	e8 cf a2 ff ff       	call   c0001c34 <disk_write>
c0007965:	83 c4 20             	add    esp,0x20
c0007968:	85 c0                	test   eax,eax
c000796a:	0f 85 ba 0a 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007970:	31 d2                	xor    edx,edx
c0007972:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007976:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000797a:	29 fb                	sub    ebx,edi
c000797c:	0f 85 7a ff ff ff    	jne    c00078fc <f_mkfs+0x583>
c0007982:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007986:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000798e:	31 f6                	xor    esi,esi
c0007990:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007994:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007997:	31 d2                	xor    edx,edx
c0007999:	89 e8                	mov    eax,ebp
c000799b:	e8 5d a3 ff ff       	call   c0001cfd <mem_set>
c00079a0:	31 c9                	xor    ecx,ecx
c00079a2:	85 db                	test   ebx,ebx
c00079a4:	75 40                	jne    c00079e6 <f_mkfs+0x66d>
c00079a6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079ab:	89 e8                	mov    eax,ebp
c00079ad:	bb 02 00 00 00       	mov    ebx,0x2
c00079b2:	e8 28 a3 ff ff       	call   c0001cdf <st_dword>
c00079b7:	8d 45 04             	lea    eax,[ebp+0x4]
c00079ba:	83 ca ff             	or     edx,0xffffffff
c00079bd:	e8 1d a3 ff ff       	call   c0001cdf <st_dword>
c00079c2:	b9 08 00 00 00       	mov    ecx,0x8
c00079c7:	eb 1d                	jmp    c00079e6 <f_mkfs+0x66d>
c00079c9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079cc:	76 3b                	jbe    c0007a09 <f_mkfs+0x690>
c00079ce:	43                   	inc    ebx
c00079cf:	83 fe 01             	cmp    esi,0x1
c00079d2:	89 da                	mov    edx,ebx
c00079d4:	77 03                	ja     c00079d9 <f_mkfs+0x660>
c00079d6:	83 ca ff             	or     edx,0xffffffff
c00079d9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079dd:	4e                   	dec    esi
c00079de:	e8 fc a2 ff ff       	call   c0001cdf <st_dword>
c00079e3:	83 c1 04             	add    ecx,0x4
c00079e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ea:	85 f6                	test   esi,esi
c00079ec:	75 db                	jne    c00079c9 <f_mkfs+0x650>
c00079ee:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079f3:	77 14                	ja     c0007a09 <f_mkfs+0x690>
c00079f5:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f9:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a00:	85 f6                	test   esi,esi
c0007a02:	74 05                	je     c0007a09 <f_mkfs+0x690>
c0007a04:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a07:	77 dd                	ja     c00079e6 <f_mkfs+0x66d>
c0007a09:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a0d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a11:	39 cf                	cmp    edi,ecx
c0007a13:	76 02                	jbe    c0007a17 <f_mkfs+0x69e>
c0007a15:	89 cf                	mov    edi,ecx
c0007a17:	83 ec 0c             	sub    esp,0xc
c0007a1a:	57                   	push   edi
c0007a1b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a23:	55                   	push   ebp
c0007a24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a28:	e8 07 a2 ff ff       	call   c0001c34 <disk_write>
c0007a2d:	83 c4 20             	add    esp,0x20
c0007a30:	85 c0                	test   eax,eax
c0007a32:	0f 85 f2 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007a38:	31 d2                	xor    edx,edx
c0007a3a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a3e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a42:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a46:	0f 85 48 ff ff ff    	jne    c0007994 <f_mkfs+0x61b>
c0007a4c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a4f:	31 d2                	xor    edx,edx
c0007a51:	89 e8                	mov    eax,ebp
c0007a53:	31 ff                	xor    edi,edi
c0007a55:	e8 a3 a2 ff ff       	call   c0001cfd <mem_set>
c0007a5a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a5d:	ba 02 00 00 00       	mov    edx,0x2
c0007a62:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a66:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a6a:	e8 70 a2 ff ff       	call   c0001cdf <st_dword>
c0007a6f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a72:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a76:	e8 64 a2 ff ff       	call   c0001cdf <st_dword>
c0007a7b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a7e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a82:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a86:	e8 54 a2 ff ff       	call   c0001cdf <st_dword>
c0007a8b:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a8e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a92:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a96:	83 c2 02             	add    edx,0x2
c0007a99:	e8 41 a2 ff ff       	call   c0001cdf <st_dword>
c0007a9e:	8d 45 58             	lea    eax,[ebp+0x58]
c0007aa1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007aa5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa9:	e8 31 a2 ff ff       	call   c0001cdf <st_dword>
c0007aae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007ab7:	89 c6                	mov    esi,eax
c0007ab9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007abd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ac1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ac4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007acb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007acf:	39 cb                	cmp    ebx,ecx
c0007ad1:	76 02                	jbe    c0007ad5 <f_mkfs+0x75c>
c0007ad3:	89 cb                	mov    ebx,ecx
c0007ad5:	83 ec 0c             	sub    esp,0xc
c0007ad8:	53                   	push   ebx
c0007ad9:	57                   	push   edi
c0007ada:	56                   	push   esi
c0007adb:	55                   	push   ebp
c0007adc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae0:	e8 4f a1 ff ff       	call   c0001c34 <disk_write>
c0007ae5:	83 c4 20             	add    esp,0x20
c0007ae8:	85 c0                	test   eax,eax
c0007aea:	0f 85 3a 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007af0:	31 d2                	xor    edx,edx
c0007af2:	b9 00 02 00 00       	mov    ecx,0x200
c0007af7:	89 e8                	mov    eax,ebp
c0007af9:	e8 ff a1 ff ff       	call   c0001cfd <mem_set>
c0007afe:	31 d2                	xor    edx,edx
c0007b00:	01 de                	add    esi,ebx
c0007b02:	11 d7                	adc    edi,edx
c0007b04:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b07:	75 bf                	jne    c0007ac8 <f_mkfs+0x74f>
c0007b09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b0d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b11:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b19:	b9 00 02 00 00       	mov    ecx,0x200
c0007b1e:	31 d2                	xor    edx,edx
c0007b20:	89 e8                	mov    eax,ebp
c0007b22:	e8 d6 a1 ff ff       	call   c0001cfd <mem_set>
c0007b27:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b2c:	ba c0 94 02 c0       	mov    edx,0xc00294c0
c0007b31:	89 e8                	mov    eax,ebp
c0007b33:	e8 b0 a1 ff ff       	call   c0001ce8 <mem_cpy>
c0007b38:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b3f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b43:	e8 9a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b48:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b4c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b4f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b53:	e8 8a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b58:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b5b:	ba 20 00 00 00       	mov    edx,0x20
c0007b60:	e8 7a a1 ff ff       	call   c0001cdf <st_dword>
c0007b65:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b69:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b6d:	e8 6d a1 ff ff       	call   c0001cdf <st_dword>
c0007b72:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b7a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b7e:	e8 5c a1 ff ff       	call   c0001cdf <st_dword>
c0007b83:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b86:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b8a:	e8 50 a1 ff ff       	call   c0001cdf <st_dword>
c0007b8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b93:	8d 50 02             	lea    edx,[eax+0x2]
c0007b96:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b99:	e8 41 a1 ff ff       	call   c0001cdf <st_dword>
c0007b9e:	8d 45 64             	lea    eax,[ebp+0x64]
c0007ba1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ba6:	e8 34 a1 ff ff       	call   c0001cdf <st_dword>
c0007bab:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bae:	ba 00 01 00 00       	mov    edx,0x100
c0007bb3:	e8 23 a1 ff ff       	call   c0001cdb <st_word>
c0007bb8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bbc:	b8 0a 00 00 00       	mov    eax,0xa
c0007bc1:	48                   	dec    eax
c0007bc2:	74 05                	je     c0007bc9 <f_mkfs+0x850>
c0007bc4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bc7:	eb f8                	jmp    c0007bc1 <f_mkfs+0x848>
c0007bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bcd:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bd5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd9:	74 05                	je     c0007be0 <f_mkfs+0x867>
c0007bdb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bde:	eb f5                	jmp    c0007bd5 <f_mkfs+0x85c>
c0007be0:	8d 45 78             	lea    eax,[ebp+0x78]
c0007be3:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be8:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bee:	31 db                	xor    ebx,ebx
c0007bf0:	e8 e6 a0 ff ff       	call   c0001cdb <st_word>
c0007bf5:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bfb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c03:	e8 d3 a0 ff ff       	call   c0001cdb <st_word>
c0007c08:	31 c9                	xor    ecx,ecx
c0007c0a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c0d:	83 f8 01             	cmp    eax,0x1
c0007c10:	76 13                	jbe    c0007c25 <f_mkfs+0x8ac>
c0007c12:	83 f9 70             	cmp    ecx,0x70
c0007c15:	74 0e                	je     c0007c25 <f_mkfs+0x8ac>
c0007c17:	89 da                	mov    edx,ebx
c0007c19:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c1e:	e8 41 a5 ff ff       	call   c0002164 <xsum32>
c0007c23:	89 c3                	mov    ebx,eax
c0007c25:	41                   	inc    ecx
c0007c26:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c2c:	75 dc                	jne    c0007c0a <f_mkfs+0x891>
c0007c2e:	89 f0                	mov    eax,esi
c0007c30:	89 fa                	mov    edx,edi
c0007c32:	83 c0 01             	add    eax,0x1
c0007c35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c39:	83 d2 00             	adc    edx,0x0
c0007c3c:	83 ec 0c             	sub    esp,0xc
c0007c3f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c43:	6a 01                	push   0x1
c0007c45:	57                   	push   edi
c0007c46:	56                   	push   esi
c0007c47:	55                   	push   ebp
c0007c48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c4c:	e8 e3 9f ff ff       	call   c0001c34 <disk_write>
c0007c51:	83 c4 20             	add    esp,0x20
c0007c54:	85 c0                	test   eax,eax
c0007c56:	0f 85 ce 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007c5c:	31 d2                	xor    edx,edx
c0007c5e:	b9 00 02 00 00       	mov    ecx,0x200
c0007c63:	89 e8                	mov    eax,ebp
c0007c65:	e8 93 a0 ff ff       	call   c0001cfd <mem_set>
c0007c6a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c72:	e8 64 a0 ff ff       	call   c0001cdb <st_word>
c0007c77:	89 f0                	mov    eax,esi
c0007c79:	89 fa                	mov    edx,edi
c0007c7b:	83 c0 09             	add    eax,0x9
c0007c7e:	83 d2 00             	adc    edx,0x0
c0007c81:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c88:	31 c9                	xor    ecx,ecx
c0007c8a:	41                   	inc    ecx
c0007c8b:	89 da                	mov    edx,ebx
c0007c8d:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c92:	e8 cd a4 ff ff       	call   c0002164 <xsum32>
c0007c97:	89 c3                	mov    ebx,eax
c0007c99:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c9f:	75 e9                	jne    c0007c8a <f_mkfs+0x911>
c0007ca1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ca5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca9:	83 c0 01             	add    eax,0x1
c0007cac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cb0:	83 d2 00             	adc    edx,0x0
c0007cb3:	83 ec 0c             	sub    esp,0xc
c0007cb6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cba:	6a 01                	push   0x1
c0007cbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc4:	55                   	push   ebp
c0007cc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc9:	e8 66 9f ff ff       	call   c0001c34 <disk_write>
c0007cce:	83 c4 20             	add    esp,0x20
c0007cd1:	85 c0                	test   eax,eax
c0007cd3:	0f 85 51 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007cd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ce1:	75 09                	jne    c0007cec <f_mkfs+0x973>
c0007ce3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ce6:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cea:	74 12                	je     c0007cfe <f_mkfs+0x985>
c0007cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cf0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cfc:	eb 8a                	jmp    c0007c88 <f_mkfs+0x90f>
c0007cfe:	31 d2                	xor    edx,edx
c0007d00:	b9 00 02 00 00       	mov    ecx,0x200
c0007d05:	89 e8                	mov    eax,ebp
c0007d07:	e8 f1 9f ff ff       	call   c0001cfd <mem_set>
c0007d0c:	83 c6 0b             	add    esi,0xb
c0007d0f:	83 d7 00             	adc    edi,0x0
c0007d12:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d16:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d1a:	31 c9                	xor    ecx,ecx
c0007d1c:	41                   	inc    ecx
c0007d1d:	89 da                	mov    edx,ebx
c0007d1f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d24:	e8 3b a4 ff ff       	call   c0002164 <xsum32>
c0007d29:	89 c3                	mov    ebx,eax
c0007d2b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d31:	75 e9                	jne    c0007d1c <f_mkfs+0x9a3>
c0007d33:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d36:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d3a:	83 c6 01             	add    esi,0x1
c0007d3d:	83 d7 00             	adc    edi,0x0
c0007d40:	83 ec 0c             	sub    esp,0xc
c0007d43:	6a 01                	push   0x1
c0007d45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d4d:	55                   	push   ebp
c0007d4e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d52:	e8 dd 9e ff ff       	call   c0001c34 <disk_write>
c0007d57:	83 c4 20             	add    esp,0x20
c0007d5a:	85 c0                	test   eax,eax
c0007d5c:	0f 85 c8 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007d62:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d66:	75 06                	jne    c0007d6e <f_mkfs+0x9f5>
c0007d68:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d6c:	74 09                	je     c0007d77 <f_mkfs+0x9fe>
c0007d6e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d71:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d75:	eb a3                	jmp    c0007d1a <f_mkfs+0x9a1>
c0007d77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d7b:	89 da                	mov    edx,ebx
c0007d7d:	01 e8                	add    eax,ebp
c0007d7f:	e8 5b 9f ff ff       	call   c0001cdf <st_dword>
c0007d84:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d89:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d91:	75 e4                	jne    c0007d77 <f_mkfs+0x9fe>
c0007d93:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d96:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d9a:	83 c6 02             	add    esi,0x2
c0007d9d:	83 d7 00             	adc    edi,0x0
c0007da0:	83 ec 0c             	sub    esp,0xc
c0007da3:	6a 01                	push   0x1
c0007da5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dad:	55                   	push   ebp
c0007dae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007db2:	e8 7d 9e ff ff       	call   c0001c34 <disk_write>
c0007db7:	83 c4 20             	add    esp,0x20
c0007dba:	85 c0                	test   eax,eax
c0007dbc:	0f 85 68 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007dc2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dc7:	74 0d                	je     c0007dd6 <f_mkfs+0xa5d>
c0007dc9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dd1:	e9 43 fd ff ff       	jmp    c0007b19 <f_mkfs+0x7a0>
c0007dd6:	b1 07                	mov    cl,0x7
c0007dd8:	e9 e3 05 00 00       	jmp    c00083c0 <f_mkfs+0x1047>
c0007ddd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007de2:	0f 85 4f 02 00 00    	jne    c0008037 <f_mkfs+0xcbe>
c0007de8:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ded:	0f 86 22 02 00 00    	jbe    c0008015 <f_mkfs+0xc9c>
c0007df3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df8:	0f 85 81 06 00 00    	jne    c000847f <f_mkfs+0x1106>
c0007dfe:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e05:	83 f8 40             	cmp    eax,0x40
c0007e08:	0f 87 51 06 00 00    	ja     c000845f <f_mkfs+0x10e6>
c0007e0e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e12:	85 ff                	test   edi,edi
c0007e14:	75 1c                	jne    c0007e32 <f_mkfs+0xab9>
c0007e16:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e19:	ba c0 93 02 c0       	mov    edx,0xc00293c0
c0007e1e:	c1 e9 0c             	shr    ecx,0xc
c0007e21:	bf 01 00 00 00       	mov    edi,0x1
c0007e26:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e29:	66 85 c0             	test   ax,ax
c0007e2c:	0f 85 95 01 00 00    	jne    c0007fc7 <f_mkfs+0xc4e>
c0007e32:	31 d2                	xor    edx,edx
c0007e34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e37:	f7 f7                	div    edi
c0007e39:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e3e:	0f 86 95 01 00 00    	jbe    c0007fd9 <f_mkfs+0xc60>
c0007e44:	83 c0 02             	add    eax,0x2
c0007e47:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e4c:	01 c0                	add    eax,eax
c0007e4e:	05 ff 01 00 00       	add    eax,0x1ff
c0007e53:	be 01 00 00 00       	mov    esi,0x1
c0007e58:	c1 e8 09             	shr    eax,0x9
c0007e5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e63:	c1 e0 05             	shl    eax,0x5
c0007e66:	c1 e8 09             	shr    eax,0x9
c0007e69:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e6d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e72:	31 d2                	xor    edx,edx
c0007e74:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e78:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e7c:	89 f0                	mov    eax,esi
c0007e7e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e82:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e92:	31 d2                	xor    edx,edx
c0007e94:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e99:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e9d:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ea1:	31 db                	xor    ebx,ebx
c0007ea3:	01 c8                	add    eax,ecx
c0007ea5:	11 da                	adc    edx,ebx
c0007ea7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007eab:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007eaf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eb3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eb7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ebb:	f7 da                	neg    edx
c0007ebd:	21 d1                	and    ecx,edx
c0007ebf:	29 d9                	sub    ecx,ebx
c0007ec1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ec6:	0f 85 20 01 00 00    	jne    c0007fec <f_mkfs+0xc73>
c0007ecc:	31 db                	xor    ebx,ebx
c0007ece:	01 ce                	add    esi,ecx
c0007ed0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ed4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed8:	31 d2                	xor    edx,edx
c0007eda:	89 f8                	mov    eax,edi
c0007edc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ee0:	c1 e0 04             	shl    eax,0x4
c0007ee3:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ee7:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007eeb:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007eef:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ef3:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ef6:	19 d3                	sbb    ebx,edx
c0007ef8:	0f 82 40 01 00 00    	jb     c000803e <f_mkfs+0xcc5>
c0007efe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f01:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f05:	89 c8                	mov    eax,ecx
c0007f07:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f0c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f10:	29 f0                	sub    eax,esi
c0007f12:	29 d0                	sub    eax,edx
c0007f14:	31 d2                	xor    edx,edx
c0007f16:	f7 f7                	div    edi
c0007f18:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	0f 85 b8 fe ff ff    	jne    c0007ddd <f_mkfs+0xa64>
c0007f25:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f2a:	0f 87 1d 01 00 00    	ja     c000804d <f_mkfs+0xcd4>
c0007f30:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f35:	0f 85 03 01 00 00    	jne    c000803e <f_mkfs+0xcc5>
c0007f3b:	83 ff 01             	cmp    edi,0x1
c0007f3e:	0f 86 fa 00 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c0007f44:	d1 ef                	shr    edi,1
c0007f46:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f4a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f51:	85 db                	test   ebx,ebx
c0007f53:	75 2d                	jne    c0007f82 <f_mkfs+0xc09>
c0007f55:	89 cb                	mov    ebx,ecx
c0007f57:	ba d0 93 02 c0       	mov    edx,0xc00293d0
c0007f5c:	c1 eb 11             	shr    ebx,0x11
c0007f5f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f67:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f6a:	66 85 c0             	test   ax,ax
c0007f6d:	74 11                	je     c0007f80 <f_mkfs+0xc07>
c0007f6f:	83 c2 02             	add    edx,0x2
c0007f72:	39 d8                	cmp    eax,ebx
c0007f74:	77 0a                	ja     c0007f80 <f_mkfs+0xc07>
c0007f76:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f7a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f7e:	eb e7                	jmp    c0007f67 <f_mkfs+0xbee>
c0007f80:	31 db                	xor    ebx,ebx
c0007f82:	31 d2                	xor    edx,edx
c0007f84:	89 c8                	mov    eax,ecx
c0007f86:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f8a:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f91:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f96:	c1 ea 09             	shr    edx,0x9
c0007f99:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f9e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fa2:	0f 87 96 00 00 00    	ja     c000803e <f_mkfs+0xcc5>
c0007fa8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fac:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fb4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb8:	be 20 00 00 00       	mov    esi,0x20
c0007fbd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fc2:	e9 a6 fe ff ff       	jmp    c0007e6d <f_mkfs+0xaf4>
c0007fc7:	83 c2 02             	add    edx,0x2
c0007fca:	39 c8                	cmp    eax,ecx
c0007fcc:	0f 87 60 fe ff ff    	ja     c0007e32 <f_mkfs+0xab9>
c0007fd2:	01 ff                	add    edi,edi
c0007fd4:	e9 4d fe ff ff       	jmp    c0007e26 <f_mkfs+0xaad>
c0007fd9:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fdc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fe1:	40                   	inc    eax
c0007fe2:	d1 e8                	shr    eax,1
c0007fe4:	83 c0 03             	add    eax,0x3
c0007fe7:	e9 62 fe ff ff       	jmp    c0007e4e <f_mkfs+0xad5>
c0007fec:	31 d2                	xor    edx,edx
c0007fee:	89 c8                	mov    eax,ecx
c0007ff0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ff4:	85 d2                	test   edx,edx
c0007ff6:	74 0c                	je     c0008004 <f_mkfs+0xc8b>
c0007ff8:	49                   	dec    ecx
c0007ff9:	46                   	inc    esi
c0007ffa:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fff:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008004:	89 c8                	mov    eax,ecx
c0008006:	31 d2                	xor    edx,edx
c0008008:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000800c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008010:	e9 c3 fe ff ff       	jmp    c0007ed8 <f_mkfs+0xb5f>
c0008015:	3d f5 0f 00 00       	cmp    eax,0xff5
c000801a:	77 31                	ja     c000804d <f_mkfs+0xcd4>
c000801c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008021:	75 1b                	jne    c000803e <f_mkfs+0xcc5>
c0008023:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008026:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000802a:	3d 80 00 00 00       	cmp    eax,0x80
c000802f:	0f 86 d9 fd ff ff    	jbe    c0007e0e <f_mkfs+0xa95>
c0008035:	eb 07                	jmp    c000803e <f_mkfs+0xcc5>
c0008037:	3d f5 0f 00 00       	cmp    eax,0xff5
c000803c:	76 0a                	jbe    c0008048 <f_mkfs+0xccf>
c000803e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008043:	e9 ff 03 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c0008048:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000804d:	31 d2                	xor    edx,edx
c000804f:	b9 00 02 00 00       	mov    ecx,0x200
c0008054:	89 e8                	mov    eax,ebp
c0008056:	e8 a2 9c ff ff       	call   c0001cfd <mem_set>
c000805b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008060:	ba e2 94 02 c0       	mov    edx,0xc00294e2
c0008065:	89 e8                	mov    eax,ebp
c0008067:	e8 7c 9c ff ff       	call   c0001ce8 <mem_cpy>
c000806c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000806f:	ba 00 02 00 00       	mov    edx,0x200
c0008074:	e8 62 9c ff ff       	call   c0001cdb <st_word>
c0008079:	89 f8                	mov    eax,edi
c000807b:	0f b7 d6             	movzx  edx,si
c000807e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008081:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008084:	e8 52 9c ff ff       	call   c0001cdb <st_word>
c0008089:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000808d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008092:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008095:	75 08                	jne    c000809f <f_mkfs+0xd26>
c0008097:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000809f:	8d 45 11             	lea    eax,[ebp+0x11]
c00080a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080a6:	e8 30 9c ff ff       	call   c0001cdb <st_word>
c00080ab:	b8 ff ff 00 00       	mov    eax,0xffff
c00080b0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080b4:	39 d0                	cmp    eax,edx
c00080b6:	b8 00 00 00 00       	mov    eax,0x0
c00080bb:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080bf:	72 0a                	jb     c00080cb <f_mkfs+0xd52>
c00080c1:	8d 45 13             	lea    eax,[ebp+0x13]
c00080c4:	e8 12 9c ff ff       	call   c0001cdb <st_word>
c00080c9:	eb 08                	jmp    c00080d3 <f_mkfs+0xd5a>
c00080cb:	8d 45 20             	lea    eax,[ebp+0x20]
c00080ce:	e8 0c 9c ff ff       	call   c0001cdf <st_dword>
c00080d3:	8d 45 18             	lea    eax,[ebp+0x18]
c00080d6:	ba 3f 00 00 00       	mov    edx,0x3f
c00080db:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080df:	e8 f7 9b ff ff       	call   c0001cdb <st_word>
c00080e4:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080e7:	ba ff 00 00 00       	mov    edx,0xff
c00080ec:	e8 ea 9b ff ff       	call   c0001cdb <st_word>
c00080f1:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f8:	e8 e2 9b ff ff       	call   c0001cdf <st_dword>
c00080fd:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008102:	75 57                	jne    c000815b <f_mkfs+0xde2>
c0008104:	8d 45 43             	lea    eax,[ebp+0x43]
c0008107:	ba 00 00 21 50       	mov    edx,0x50210000
c000810c:	e8 ce 9b ff ff       	call   c0001cdf <st_dword>
c0008111:	8d 45 24             	lea    eax,[ebp+0x24]
c0008114:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008118:	e8 c2 9b ff ff       	call   c0001cdf <st_dword>
c000811d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008120:	ba 02 00 00 00       	mov    edx,0x2
c0008125:	e8 b5 9b ff ff       	call   c0001cdf <st_dword>
c000812a:	8d 45 30             	lea    eax,[ebp+0x30]
c000812d:	ba 01 00 00 00       	mov    edx,0x1
c0008132:	e8 a4 9b ff ff       	call   c0001cdb <st_word>
c0008137:	8d 45 32             	lea    eax,[ebp+0x32]
c000813a:	ba 06 00 00 00       	mov    edx,0x6
c000813f:	e8 97 9b ff ff       	call   c0001cdb <st_word>
c0008144:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008148:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000814c:	8d 45 47             	lea    eax,[ebp+0x47]
c000814f:	b9 13 00 00 00       	mov    ecx,0x13
c0008154:	ba ee 94 02 c0       	mov    edx,0xc00294ee
c0008159:	eb 2f                	jmp    c000818a <f_mkfs+0xe11>
c000815b:	8d 45 27             	lea    eax,[ebp+0x27]
c000815e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008163:	e8 77 9b ff ff       	call   c0001cdf <st_dword>
c0008168:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000816d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008170:	e8 66 9b ff ff       	call   c0001cdb <st_word>
c0008175:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008179:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000817d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008180:	b9 13 00 00 00       	mov    ecx,0x13
c0008185:	ba 02 95 02 c0       	mov    edx,0xc0029502
c000818a:	e8 59 9b ff ff       	call   c0001ce8 <mem_cpy>
c000818f:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008195:	ba 55 aa 00 00       	mov    edx,0xaa55
c000819a:	89 f0                	mov    eax,esi
c000819c:	e8 3a 9b ff ff       	call   c0001cdb <st_word>
c00081a1:	83 ec 0c             	sub    esp,0xc
c00081a4:	6a 01                	push   0x1
c00081a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ae:	55                   	push   ebp
c00081af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081b3:	e8 7c 9a ff ff       	call   c0001c34 <disk_write>
c00081b8:	83 c4 20             	add    esp,0x20
c00081bb:	85 c0                	test   eax,eax
c00081bd:	0f 85 67 02 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00081c3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c8:	0f 85 b7 00 00 00    	jne    c0008285 <f_mkfs+0xf0c>
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	6a 01                	push   0x1
c00081d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081db:	83 c0 06             	add    eax,0x6
c00081de:	83 d2 00             	adc    edx,0x0
c00081e1:	52                   	push   edx
c00081e2:	50                   	push   eax
c00081e3:	55                   	push   ebp
c00081e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e8:	e8 47 9a ff ff       	call   c0001c34 <disk_write>
c00081ed:	83 c4 20             	add    esp,0x20
c00081f0:	b9 00 02 00 00       	mov    ecx,0x200
c00081f5:	31 d2                	xor    edx,edx
c00081f7:	89 e8                	mov    eax,ebp
c00081f9:	e8 ff 9a ff ff       	call   c0001cfd <mem_set>
c00081fe:	ba 52 52 61 41       	mov    edx,0x41615252
c0008203:	89 e8                	mov    eax,ebp
c0008205:	e8 d5 9a ff ff       	call   c0001cdf <st_dword>
c000820a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008210:	ba 72 72 41 61       	mov    edx,0x61417272
c0008215:	e8 c5 9a ff ff       	call   c0001cdf <st_dword>
c000821a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000821d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008223:	e8 b7 9a ff ff       	call   c0001cdf <st_dword>
c0008228:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000822e:	ba 02 00 00 00       	mov    edx,0x2
c0008233:	e8 a7 9a ff ff       	call   c0001cdf <st_dword>
c0008238:	ba 55 aa 00 00       	mov    edx,0xaa55
c000823d:	89 f0                	mov    eax,esi
c000823f:	e8 97 9a ff ff       	call   c0001cdb <st_word>
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	6a 01                	push   0x1
c0008249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000824d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008251:	83 c0 07             	add    eax,0x7
c0008254:	83 d2 00             	adc    edx,0x0
c0008257:	52                   	push   edx
c0008258:	50                   	push   eax
c0008259:	55                   	push   ebp
c000825a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000825e:	e8 d1 99 ff ff       	call   c0001c34 <disk_write>
c0008263:	83 c4 14             	add    esp,0x14
c0008266:	6a 01                	push   0x1
c0008268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000826c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008270:	83 c0 01             	add    eax,0x1
c0008273:	83 d2 00             	adc    edx,0x0
c0008276:	52                   	push   edx
c0008277:	50                   	push   eax
c0008278:	55                   	push   ebp
c0008279:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000827d:	e8 b2 99 ff ff       	call   c0001c34 <disk_write>
c0008282:	83 c4 20             	add    esp,0x20
c0008285:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000828c:	31 d2                	xor    edx,edx
c000828e:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008294:	31 db                	xor    ebx,ebx
c0008296:	89 e8                	mov    eax,ebp
c0008298:	e8 60 9a ff ff       	call   c0001cfd <mem_set>
c000829d:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a9:	0f 94 c3             	sete   bl
c00082ac:	4b                   	dec    ebx
c00082ad:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082b3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082be:	75 21                	jne    c00082e1 <f_mkfs+0xf68>
c00082c0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082c5:	89 e8                	mov    eax,ebp
c00082c7:	e8 13 9a ff ff       	call   c0001cdf <st_dword>
c00082cc:	8d 45 04             	lea    eax,[ebp+0x4]
c00082cf:	83 ca ff             	or     edx,0xffffffff
c00082d2:	e8 08 9a ff ff       	call   c0001cdf <st_dword>
c00082d7:	8d 45 08             	lea    eax,[ebp+0x8]
c00082da:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082df:	eb 04                	jmp    c00082e5 <f_mkfs+0xf6c>
c00082e1:	89 da                	mov    edx,ebx
c00082e3:	89 e8                	mov    eax,ebp
c00082e5:	e8 f5 99 ff ff       	call   c0001cdf <st_dword>
c00082ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082f2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082fa:	39 ce                	cmp    esi,ecx
c00082fc:	76 02                	jbe    c0008300 <f_mkfs+0xf87>
c00082fe:	89 ce                	mov    esi,ecx
c0008300:	83 ec 0c             	sub    esp,0xc
c0008303:	56                   	push   esi
c0008304:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008308:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000830c:	55                   	push   ebp
c000830d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008311:	e8 1e 99 ff ff       	call   c0001c34 <disk_write>
c0008316:	83 c4 20             	add    esp,0x20
c0008319:	85 c0                	test   eax,eax
c000831b:	0f 85 09 01 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0008321:	31 d2                	xor    edx,edx
c0008323:	b9 00 02 00 00       	mov    ecx,0x200
c0008328:	89 e8                	mov    eax,ebp
c000832a:	e8 ce 99 ff ff       	call   c0001cfd <mem_set>
c000832f:	31 d2                	xor    edx,edx
c0008331:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008335:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008339:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000833d:	75 b3                	jne    c00082f2 <f_mkfs+0xf79>
c000833f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008342:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008349:	40                   	inc    eax
c000834a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000834e:	0f 87 65 ff ff ff    	ja     c00082b9 <f_mkfs+0xf40>
c0008354:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008359:	74 04                	je     c000835f <f_mkfs+0xfe6>
c000835b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000835f:	89 fb                	mov    ebx,edi
c0008361:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008365:	76 04                	jbe    c000836b <f_mkfs+0xff2>
c0008367:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000836b:	83 ec 0c             	sub    esp,0xc
c000836e:	53                   	push   ebx
c000836f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008373:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008377:	55                   	push   ebp
c0008378:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837c:	e8 b3 98 ff ff       	call   c0001c34 <disk_write>
c0008381:	83 c4 20             	add    esp,0x20
c0008384:	85 c0                	test   eax,eax
c0008386:	0f 85 9e 00 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000838c:	31 d2                	xor    edx,edx
c000838e:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008392:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008396:	29 df                	sub    edi,ebx
c0008398:	75 c5                	jne    c000835f <f_mkfs+0xfe6>
c000839a:	b1 0c                	mov    cl,0xc
c000839c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083a1:	74 1d                	je     c00083c0 <f_mkfs+0x1047>
c00083a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a8:	b1 06                	mov    cl,0x6
c00083aa:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083ae:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083b2:	72 0c                	jb     c00083c0 <f_mkfs+0x1047>
c00083b4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b9:	0f 94 c1             	sete   cl
c00083bc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083c0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083c5:	75 4c                	jne    c0008413 <f_mkfs+0x109a>
c00083c7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083cb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083cf:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083d6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083dd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e8:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083f3:	0f b6 c9             	movzx  ecx,cl
c00083f6:	83 ec 0c             	sub    esp,0xc
c00083f9:	55                   	push   ebp
c00083fa:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008405:	e8 2f c2 ff ff       	call   c0004639 <create_partition>
c000840a:	83 c4 10             	add    esp,0x10
c000840d:	89 c3                	mov    ebx,eax
c000840f:	85 c0                	test   eax,eax
c0008411:	75 34                	jne    c0008447 <f_mkfs+0x10ce>
c0008413:	31 db                	xor    ebx,ebx
c0008415:	50                   	push   eax
c0008416:	6a 00                	push   0x0
c0008418:	6a 00                	push   0x0
c000841a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000841e:	e8 27 98 ff ff       	call   c0001c4a <disk_ioctl>
c0008423:	83 c4 10             	add    esp,0x10
c0008426:	85 c0                	test   eax,eax
c0008428:	74 1d                	je     c0008447 <f_mkfs+0x10ce>
c000842a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008432:	75 0c                	jne    c0008440 <f_mkfs+0x10c7>
c0008434:	83 ec 0c             	sub    esp,0xc
c0008437:	55                   	push   ebp
c0008438:	e8 75 00 00 00       	call   c00084b2 <ff_memfree>
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	bb 01 00 00 00       	mov    ebx,0x1
c0008445:	eb 48                	jmp    c000848f <f_mkfs+0x1116>
c0008447:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000844f:	75 3e                	jne    c000848f <f_mkfs+0x1116>
c0008451:	83 ec 0c             	sub    esp,0xc
c0008454:	55                   	push   ebp
c0008455:	e8 58 00 00 00       	call   c00084b2 <ff_memfree>
c000845a:	83 c4 10             	add    esp,0x10
c000845d:	eb 30                	jmp    c000848f <f_mkfs+0x1116>
c000845f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008464:	0f 85 eb fa ff ff    	jne    c0007f55 <f_mkfs+0xbdc>
c000846a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000846e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008474:	0f 86 b8 f9 ff ff    	jbe    c0007e32 <f_mkfs+0xab9>
c000847a:	e9 bf fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000847f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008484:	0f 85 c0 fa ff ff    	jne    c0007f4a <f_mkfs+0xbd1>
c000848a:	e9 af fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000848f:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008495:	89 d8                	mov    eax,ebx
c0008497:	5b                   	pop    ebx
c0008498:	5e                   	pop    esi
c0008499:	5f                   	pop    edi
c000849a:	5d                   	pop    ebp
c000849b:	c3                   	ret    

c000849c <ff_memalloc>:
c000849c:	83 ec 0c             	sub    esp,0xc
c000849f:	83 ec 0c             	sub    esp,0xc
c00084a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084a6:	e8 a0 73 00 00       	call   c000f84b <malloc>
c00084ab:	83 c4 10             	add    esp,0x10
c00084ae:	83 c4 0c             	add    esp,0xc
c00084b1:	c3                   	ret    

c00084b2 <ff_memfree>:
c00084b2:	83 ec 0c             	sub    esp,0xc
c00084b5:	83 ec 0c             	sub    esp,0xc
c00084b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084bc:	e8 9a 73 00 00       	call   c000f85b <free>
c00084c1:	83 c4 10             	add    esp,0x10
c00084c4:	90                   	nop
c00084c5:	83 c4 0c             	add    esp,0xc
c00084c8:	c3                   	ret    

c00084c9 <ff_uni2oem>:
c00084c9:	83 ec 14             	sub    esp,0x14
c00084cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084d0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084d4:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084db:	c7 44 24 0c 20 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029820
c00084e3:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e8:	77 0b                	ja     c00084f5 <ff_uni2oem+0x2c>
c00084ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ee:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f3:	eb 5b                	jmp    c0008550 <ff_uni2oem+0x87>
c00084f5:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084fd:	77 51                	ja     c0008550 <ff_uni2oem+0x87>
c00084ff:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008505:	75 49                	jne    c0008550 <ff_uni2oem+0x87>
c0008507:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000850e:	eb 0b                	jmp    c000851b <ff_uni2oem+0x52>
c0008510:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008515:	40                   	inc    eax
c0008516:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000851b:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008521:	77 1b                	ja     c000853e <ff_uni2oem+0x75>
c0008523:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008528:	01 c0                	add    eax,eax
c000852a:	89 c2                	mov    edx,eax
c000852c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008530:	01 d0                	add    eax,edx
c0008532:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008535:	0f b7 c0             	movzx  eax,ax
c0008538:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000853c:	75 d2                	jne    c0008510 <ff_uni2oem+0x47>
c000853e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008543:	83 e8 80             	sub    eax,0xffffff80
c0008546:	25 ff 00 00 00       	and    eax,0xff
c000854b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008550:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008555:	83 c4 14             	add    esp,0x14
c0008558:	c3                   	ret    

c0008559 <ff_oem2uni>:
c0008559:	83 ec 18             	sub    esp,0x18
c000855c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008564:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008569:	66 89 04 24          	mov    WORD PTR [esp],ax
c000856d:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008574:	c7 44 24 10 20 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029820
c000857c:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008582:	77 0b                	ja     c000858f <ff_oem2uni+0x36>
c0008584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008588:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000858d:	eb 2d                	jmp    c00085bc <ff_oem2uni+0x63>
c000858f:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008595:	75 25                	jne    c00085bc <ff_oem2uni+0x63>
c0008597:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000859e:	77 1c                	ja     c00085bc <ff_oem2uni+0x63>
c00085a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085a5:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085aa:	01 c0                	add    eax,eax
c00085ac:	89 c2                	mov    edx,eax
c00085ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085b2:	01 d0                	add    eax,edx
c00085b4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085b7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085bc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085c1:	83 c4 18             	add    esp,0x18
c00085c4:	c3                   	ret    

c00085c5 <ff_wtoupper>:
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085d0:	0f 87 3e 01 00 00    	ja     c0008714 <ff_wtoupper+0x14f>
c00085d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085da:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085df:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085e6:	77 07                	ja     c00085ef <ff_wtoupper+0x2a>
c00085e8:	b8 20 96 02 c0       	mov    eax,0xc0029620
c00085ed:	eb 05                	jmp    c00085f4 <ff_wtoupper+0x2f>
c00085ef:	b8 60 95 02 c0       	mov    eax,0xc0029560
c00085f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085fc:	8d 50 02             	lea    edx,[eax+0x2]
c00085ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008603:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008606:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000860b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008611:	0f 84 f4 00 00 00    	je     c000870b <ff_wtoupper+0x146>
c0008617:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000861c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008621:	0f 82 e4 00 00 00    	jb     c000870b <ff_wtoupper+0x146>
c0008627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000862b:	8d 50 02             	lea    edx,[eax+0x2]
c000862e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008632:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008635:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000863a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000863f:	66 c1 e8 08          	shr    ax,0x8
c0008643:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008648:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000864f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008654:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008659:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000865e:	01 ca                	add    edx,ecx
c0008660:	39 d0                	cmp    eax,edx
c0008662:	0f 8d 86 00 00 00    	jge    c00086ee <ff_wtoupper+0x129>
c0008668:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000866d:	83 f8 08             	cmp    eax,0x8
c0008670:	0f 87 94 00 00 00    	ja     c000870a <ff_wtoupper+0x145>
c0008676:	8b 04 85 20 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ae0]
c000867d:	ff e0                	jmp    eax
c000867f:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008684:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008689:	29 c2                	sub    edx,eax
c000868b:	89 d0                	mov    eax,edx
c000868d:	01 c0                	add    eax,eax
c000868f:	89 c2                	mov    edx,eax
c0008691:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008695:	01 d0                	add    eax,edx
c0008697:	66 8b 00             	mov    ax,WORD PTR [eax]
c000869a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000869f:	eb 4b                	jmp    c00086ec <ff_wtoupper+0x127>
c00086a1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086a6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086aa:	83 e0 01             	and    eax,0x1
c00086ad:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086b2:	eb 38                	jmp    c00086ec <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086ba:	eb 30                	jmp    c00086ec <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086c2:	eb 28                	jmp    c00086ec <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086ca:	eb 20                	jmp    c00086ec <ff_wtoupper+0x127>
c00086cc:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086d2:	eb 18                	jmp    c00086ec <ff_wtoupper+0x127>
c00086d4:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086da:	eb 10                	jmp    c00086ec <ff_wtoupper+0x127>
c00086dc:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086e2:	eb 08                	jmp    c00086ec <ff_wtoupper+0x127>
c00086e4:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086eb:	90                   	nop
c00086ec:	eb 1c                	jmp    c000870a <ff_wtoupper+0x145>
c00086ee:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086f4:	0f 85 fe fe ff ff    	jne    c00085f8 <ff_wtoupper+0x33>
c00086fa:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086ff:	01 c0                	add    eax,eax
c0008701:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008705:	e9 ee fe ff ff       	jmp    c00085f8 <ff_wtoupper+0x33>
c000870a:	90                   	nop
c000870b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008710:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008714:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008718:	83 c4 10             	add    esp,0x10
c000871b:	c3                   	ret    

c000871c <psrc_set_converter>:
c000871c:	56                   	push   esi
c000871d:	89 d6                	mov    esi,edx
c000871f:	53                   	push   ebx
c0008720:	89 c3                	mov    ebx,eax
c0008722:	83 ec 0c             	sub    esp,0xc
c0008725:	52                   	push   edx
c0008726:	50                   	push   eax
c0008727:	e8 6f 55 00 00       	call   c000dc9b <sinc_set_converter>
c000872c:	83 c4 10             	add    esp,0x10
c000872f:	85 c0                	test   eax,eax
c0008731:	74 25                	je     c0008758 <psrc_set_converter+0x3c>
c0008733:	50                   	push   eax
c0008734:	50                   	push   eax
c0008735:	56                   	push   esi
c0008736:	53                   	push   ebx
c0008737:	e8 17 5d 00 00       	call   c000e453 <zoh_set_converter>
c000873c:	83 c4 10             	add    esp,0x10
c000873f:	85 c0                	test   eax,eax
c0008741:	74 15                	je     c0008758 <psrc_set_converter+0x3c>
c0008743:	51                   	push   ecx
c0008744:	51                   	push   ecx
c0008745:	56                   	push   esi
c0008746:	53                   	push   ebx
c0008747:	e8 0f 11 00 00       	call   c000985b <linear_set_converter>
c000874c:	83 c4 10             	add    esp,0x10
c000874f:	ba 0a 00 00 00       	mov    edx,0xa
c0008754:	85 c0                	test   eax,eax
c0008756:	75 02                	jne    c000875a <psrc_set_converter+0x3e>
c0008758:	31 d2                	xor    edx,edx
c000875a:	89 d0                	mov    eax,edx
c000875c:	5a                   	pop    edx
c000875d:	5b                   	pop    ebx
c000875e:	5e                   	pop    esi
c000875f:	c3                   	ret    

c0008760 <src_delete>:
c0008760:	53                   	push   ebx
c0008761:	83 ec 08             	sub    esp,0x8
c0008764:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008768:	85 db                	test   ebx,ebx
c000876a:	74 29                	je     c0008795 <src_delete+0x35>
c000876c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000876f:	85 c0                	test   eax,eax
c0008771:	74 0c                	je     c000877f <src_delete+0x1f>
c0008773:	83 ec 0c             	sub    esp,0xc
c0008776:	50                   	push   eax
c0008777:	e8 df 70 00 00       	call   c000f85b <free>
c000877c:	83 c4 10             	add    esp,0x10
c000877f:	50                   	push   eax
c0008780:	6a 3c                	push   0x3c
c0008782:	6a 00                	push   0x0
c0008784:	53                   	push   ebx
c0008785:	e8 f6 7f ff ff       	call   c0000780 <memset>
c000878a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000878d:	e8 c9 70 00 00       	call   c000f85b <free>
c0008792:	83 c4 10             	add    esp,0x10
c0008795:	31 c0                	xor    eax,eax
c0008797:	83 c4 08             	add    esp,0x8
c000879a:	5b                   	pop    ebx
c000879b:	c3                   	ret    

c000879c <src_process>:
c000879c:	55                   	push   ebp
c000879d:	57                   	push   edi
c000879e:	56                   	push   esi
c000879f:	53                   	push   ebx
c00087a0:	83 ec 1c             	sub    esp,0x1c
c00087a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00087a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087ab:	85 ed                	test   ebp,ebp
c00087ad:	0f 84 6f 01 00 00    	je     c0008922 <src_process+0x186>
c00087b3:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087b7:	0f 84 6c 01 00 00    	je     c0008929 <src_process+0x18d>
c00087bd:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087c1:	0f 84 62 01 00 00    	je     c0008929 <src_process+0x18d>
c00087c7:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087ce:	0f 85 5c 01 00 00    	jne    c0008930 <src_process+0x194>
c00087d4:	85 db                	test   ebx,ebx
c00087d6:	0f 84 5b 01 00 00    	je     c0008937 <src_process+0x19b>
c00087dc:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087de:	85 f6                	test   esi,esi
c00087e0:	0f 84 58 01 00 00    	je     c000893e <src_process+0x1a2>
c00087e6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e9:	85 ff                	test   edi,edi
c00087eb:	0f 84 4d 01 00 00    	je     c000893e <src_process+0x1a2>
c00087f1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087f4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087ff:	68 00 00 70 3f       	push   0x3f700000
c0008804:	6a 00                	push   0x0
c0008806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880e:	e8 c4 fc 01 00       	call   c00284d7 <__ltdf2>
c0008813:	83 c4 10             	add    esp,0x10
c0008816:	85 c0                	test   eax,eax
c0008818:	0f 88 27 01 00 00    	js     c0008945 <src_process+0x1a9>
c000881e:	68 00 00 70 40       	push   0x40700000
c0008823:	6a 00                	push   0x0
c0008825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008829:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000882d:	e8 87 fc 01 00       	call   c00284b9 <__gtdf2>
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	85 c0                	test   eax,eax
c0008837:	0f 8f 08 01 00 00    	jg     c0008945 <src_process+0x1a9>
c000883d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008841:	79 07                	jns    c000884a <src_process+0xae>
c0008843:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000884a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000884d:	85 c0                	test   eax,eax
c000884f:	79 50                	jns    c00088a1 <src_process+0x105>
c0008851:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008858:	39 fe                	cmp    esi,edi
c000885a:	72 37                	jb     c0008893 <src_process+0xf7>
c000885c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008863:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000886a:	68 00 00 70 3f       	push   0x3f700000
c000886f:	6a 00                	push   0x0
c0008871:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008874:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008877:	e8 5b fc 01 00       	call   c00284d7 <__ltdf2>
c000887c:	83 c4 10             	add    esp,0x10
c000887f:	85 c0                	test   eax,eax
c0008881:	79 37                	jns    c00088ba <src_process+0x11e>
c0008883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008887:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000888b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000888e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008891:	eb 27                	jmp    c00088ba <src_process+0x11e>
c0008893:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008896:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000889a:	8d 04 86             	lea    eax,[esi+eax*4]
c000889d:	39 c7                	cmp    edi,eax
c000889f:	eb 0d                	jmp    c00088ae <src_process+0x112>
c00088a1:	39 fe                	cmp    esi,edi
c00088a3:	72 ee                	jb     c0008893 <src_process+0xf7>
c00088a5:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a9:	8d 04 87             	lea    eax,[edi+eax*4]
c00088ac:	39 c6                	cmp    esi,eax
c00088ae:	73 ac                	jae    c000885c <src_process+0xc0>
c00088b0:	b8 10 00 00 00       	mov    eax,0x10
c00088b5:	e9 90 00 00 00       	jmp    c000894a <src_process+0x1ae>
c00088ba:	83 ec 10             	sub    esp,0x10
c00088bd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088c0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088c3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088c6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c9:	e8 0e f3 01 00       	call   c0027bdc <__subdf3>
c00088ce:	83 c4 18             	add    esp,0x18
c00088d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d9:	52                   	push   edx
c00088da:	50                   	push   eax
c00088db:	e8 90 fd 01 00       	call   c0028670 <fabs>
c00088e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e8:	83 c4 10             	add    esp,0x10
c00088eb:	68 af 03 d2 3c       	push   0x3cd203af
c00088f0:	68 16 56 e7 9e       	push   0x9ee75616
c00088f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088fd:	e8 d5 fb 01 00       	call   c00284d7 <__ltdf2>
c0008902:	83 c4 10             	add    esp,0x10
c0008905:	85 c0                	test   eax,eax
c0008907:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c000890b:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c000890f:	79 05                	jns    c0008916 <src_process+0x17a>
c0008911:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008914:	eb 03                	jmp    c0008919 <src_process+0x17d>
c0008916:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008919:	83 c4 1c             	add    esp,0x1c
c000891c:	5b                   	pop    ebx
c000891d:	5e                   	pop    esi
c000891e:	5f                   	pop    edi
c000891f:	5d                   	pop    ebp
c0008920:	ff e0                	jmp    eax
c0008922:	b8 02 00 00 00       	mov    eax,0x2
c0008927:	eb 21                	jmp    c000894a <src_process+0x1ae>
c0008929:	b8 07 00 00 00       	mov    eax,0x7
c000892e:	eb 1a                	jmp    c000894a <src_process+0x1ae>
c0008930:	b8 12 00 00 00       	mov    eax,0x12
c0008935:	eb 13                	jmp    c000894a <src_process+0x1ae>
c0008937:	b8 03 00 00 00       	mov    eax,0x3
c000893c:	eb 0c                	jmp    c000894a <src_process+0x1ae>
c000893e:	b8 04 00 00 00       	mov    eax,0x4
c0008943:	eb 05                	jmp    c000894a <src_process+0x1ae>
c0008945:	b8 06 00 00 00       	mov    eax,0x6
c000894a:	83 c4 1c             	add    esp,0x1c
c000894d:	5b                   	pop    ebx
c000894e:	5e                   	pop    esi
c000894f:	5f                   	pop    edi
c0008950:	5d                   	pop    ebp
c0008951:	c3                   	ret    

c0008952 <src_callback_read>:
c0008952:	55                   	push   ebp
c0008953:	57                   	push   edi
c0008954:	56                   	push   esi
c0008955:	53                   	push   ebx
c0008956:	83 ec 3c             	sub    esp,0x3c
c0008959:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000895d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008961:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008965:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008969:	85 ed                	test   ebp,ebp
c000896b:	0f 8e 52 01 00 00    	jle    c0008ac3 <src_callback_read+0x171>
c0008971:	85 db                	test   ebx,ebx
c0008973:	0f 84 4a 01 00 00    	je     c0008ac3 <src_callback_read+0x171>
c0008979:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008980:	74 0c                	je     c000898e <src_callback_read+0x3c>
c0008982:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008989:	e9 35 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c000898e:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008992:	75 0c                	jne    c00089a0 <src_callback_read+0x4e>
c0008994:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000899b:	e9 23 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c00089a0:	51                   	push   ecx
c00089a1:	6a 24                	push   0x24
c00089a3:	6a 00                	push   0x0
c00089a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a9:	50                   	push   eax
c00089aa:	e8 d1 7d ff ff       	call   c0000780 <memset>
c00089af:	83 c4 10             	add    esp,0x10
c00089b2:	68 00 00 70 3f       	push   0x3f700000
c00089b7:	6a 00                	push   0x0
c00089b9:	57                   	push   edi
c00089ba:	56                   	push   esi
c00089bb:	e8 17 fb 01 00       	call   c00284d7 <__ltdf2>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	85 c0                	test   eax,eax
c00089c5:	78 3e                	js     c0008a05 <src_callback_read+0xb3>
c00089c7:	68 00 00 70 40       	push   0x40700000
c00089cc:	6a 00                	push   0x0
c00089ce:	57                   	push   edi
c00089cf:	56                   	push   esi
c00089d0:	e8 e4 fa 01 00       	call   c00284b9 <__gtdf2>
c00089d5:	83 c4 10             	add    esp,0x10
c00089d8:	85 c0                	test   eax,eax
c00089da:	7f 29                	jg     c0008a05 <src_callback_read+0xb3>
c00089dc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089e0:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e8:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089ec:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ef:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089f7:	31 f6                	xor    esi,esi
c00089f9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a00:	e9 97 00 00 00       	jmp    c0008a9c <src_callback_read+0x14a>
c0008a05:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a0c:	e9 b2 00 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c0008a11:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a19:	52                   	push   edx
c0008a1a:	52                   	push   edx
c0008a1b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a1f:	50                   	push   eax
c0008a20:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a23:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	85 c0                	test   eax,eax
c0008a37:	75 08                	jne    c0008a41 <src_callback_read+0xef>
c0008a39:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a41:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a48:	50                   	push   eax
c0008a49:	50                   	push   eax
c0008a4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a4e:	50                   	push   eax
c0008a4f:	53                   	push   ebx
c0008a50:	e8 47 fd ff ff       	call   c000879c <src_process>
c0008a55:	83 c4 10             	add    esp,0x10
c0008a58:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a5f:	85 c0                	test   eax,eax
c0008a61:	75 49                	jne    c0008aac <src_callback_read+0x15a>
c0008a63:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a67:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a6a:	89 f9                	mov    ecx,edi
c0008a6c:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a70:	0f af ca             	imul   ecx,edx
c0008a73:	c1 e1 02             	shl    ecx,0x2
c0008a76:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a7e:	0f af d1             	imul   edx,ecx
c0008a81:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a85:	c1 e2 02             	shl    edx,0x2
c0008a88:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a8c:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a8f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a94:	74 12                	je     c0008aa8 <src_callback_read+0x156>
c0008a96:	39 d5                	cmp    ebp,edx
c0008a98:	7e 14                	jle    c0008aae <src_callback_read+0x15c>
c0008a9a:	89 d6                	mov    esi,edx
c0008a9c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008aa1:	75 9e                	jne    c0008a41 <src_callback_read+0xef>
c0008aa3:	e9 69 ff ff ff       	jmp    c0008a11 <src_callback_read+0xbf>
c0008aa8:	85 c9                	test   ecx,ecx
c0008aaa:	75 ea                	jne    c0008a96 <src_callback_read+0x144>
c0008aac:	89 f2                	mov    edx,esi
c0008aae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ab2:	85 c0                	test   eax,eax
c0008ab4:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008ab7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008abb:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008abe:	74 05                	je     c0008ac5 <src_callback_read+0x173>
c0008ac0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008ac3:	31 d2                	xor    edx,edx
c0008ac5:	83 c4 3c             	add    esp,0x3c
c0008ac8:	89 d0                	mov    eax,edx
c0008aca:	5b                   	pop    ebx
c0008acb:	5e                   	pop    esi
c0008acc:	5f                   	pop    edi
c0008acd:	5d                   	pop    ebp
c0008ace:	c3                   	ret    

c0008acf <src_set_ratio>:
c0008acf:	57                   	push   edi
c0008ad0:	ba 02 00 00 00       	mov    edx,0x2
c0008ad5:	56                   	push   esi
c0008ad6:	53                   	push   ebx
c0008ad7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008adb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008adf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008ae3:	85 db                	test   ebx,ebx
c0008ae5:	74 4c                	je     c0008b33 <src_set_ratio+0x64>
c0008ae7:	ba 07 00 00 00       	mov    edx,0x7
c0008aec:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008af0:	74 41                	je     c0008b33 <src_set_ratio+0x64>
c0008af2:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008af6:	74 3b                	je     c0008b33 <src_set_ratio+0x64>
c0008af8:	68 00 00 70 3f       	push   0x3f700000
c0008afd:	6a 00                	push   0x0
c0008aff:	57                   	push   edi
c0008b00:	56                   	push   esi
c0008b01:	e8 d1 f9 01 00       	call   c00284d7 <__ltdf2>
c0008b06:	83 c4 10             	add    esp,0x10
c0008b09:	ba 06 00 00 00       	mov    edx,0x6
c0008b0e:	85 c0                	test   eax,eax
c0008b10:	78 21                	js     c0008b33 <src_set_ratio+0x64>
c0008b12:	68 00 00 70 40       	push   0x40700000
c0008b17:	6a 00                	push   0x0
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	e8 99 f9 01 00       	call   c00284b9 <__gtdf2>
c0008b20:	83 c4 10             	add    esp,0x10
c0008b23:	ba 06 00 00 00       	mov    edx,0x6
c0008b28:	85 c0                	test   eax,eax
c0008b2a:	7f 07                	jg     c0008b33 <src_set_ratio+0x64>
c0008b2c:	89 33                	mov    DWORD PTR [ebx],esi
c0008b2e:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b31:	31 d2                	xor    edx,edx
c0008b33:	5b                   	pop    ebx
c0008b34:	89 d0                	mov    eax,edx
c0008b36:	5e                   	pop    esi
c0008b37:	5f                   	pop    edi
c0008b38:	c3                   	ret    

c0008b39 <src_get_channels>:
c0008b39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b3d:	b8 02 00 00 00       	mov    eax,0x2
c0008b42:	85 d2                	test   edx,edx
c0008b44:	74 14                	je     c0008b5a <src_get_channels+0x21>
c0008b46:	b8 07 00 00 00       	mov    eax,0x7
c0008b4b:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b4f:	74 09                	je     c0008b5a <src_get_channels+0x21>
c0008b51:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b55:	74 03                	je     c0008b5a <src_get_channels+0x21>
c0008b57:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b5a:	c3                   	ret    

c0008b5b <src_reset>:
c0008b5b:	53                   	push   ebx
c0008b5c:	b8 02 00 00 00       	mov    eax,0x2
c0008b61:	83 ec 08             	sub    esp,0x8
c0008b64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b68:	85 db                	test   ebx,ebx
c0008b6a:	74 36                	je     c0008ba2 <src_reset+0x47>
c0008b6c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b6f:	85 c0                	test   eax,eax
c0008b71:	74 09                	je     c0008b7c <src_reset+0x21>
c0008b73:	83 ec 0c             	sub    esp,0xc
c0008b76:	53                   	push   ebx
c0008b77:	ff d0                	call   eax
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	31 c0                	xor    eax,eax
c0008b7e:	31 d2                	xor    edx,edx
c0008b80:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b83:	89 03                	mov    DWORD PTR [ebx],eax
c0008b85:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b88:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b8b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b92:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b99:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008ba0:	31 c0                	xor    eax,eax
c0008ba2:	83 c4 08             	add    esp,0x8
c0008ba5:	5b                   	pop    ebx
c0008ba6:	c3                   	ret    

c0008ba7 <src_new>:
c0008ba7:	57                   	push   edi
c0008ba8:	56                   	push   esi
c0008ba9:	53                   	push   ebx
c0008baa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008bae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008bb2:	85 f6                	test   esi,esi
c0008bb4:	74 73                	je     c0008c29 <src_new+0x82>
c0008bb6:	85 ff                	test   edi,edi
c0008bb8:	7f 08                	jg     c0008bc2 <src_new+0x1b>
c0008bba:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bc0:	eb 1e                	jmp    c0008be0 <src_new+0x39>
c0008bc2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc8:	50                   	push   eax
c0008bc9:	50                   	push   eax
c0008bca:	6a 3c                	push   0x3c
c0008bcc:	6a 01                	push   0x1
c0008bce:	e8 a8 6c 00 00       	call   c000f87b <calloc>
c0008bd3:	83 c4 10             	add    esp,0x10
c0008bd6:	89 c3                	mov    ebx,eax
c0008bd8:	85 c0                	test   eax,eax
c0008bda:	75 10                	jne    c0008bec <src_new+0x45>
c0008bdc:	85 f6                	test   esi,esi
c0008bde:	75 04                	jne    c0008be4 <src_new+0x3d>
c0008be0:	31 db                	xor    ebx,ebx
c0008be2:	eb 4b                	jmp    c0008c2f <src_new+0x88>
c0008be4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bea:	eb 43                	jmp    c0008c2f <src_new+0x88>
c0008bec:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bef:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bfa:	e8 1d fb ff ff       	call   c000871c <psrc_set_converter>
c0008bff:	85 c0                	test   eax,eax
c0008c01:	74 18                	je     c0008c1b <src_new+0x74>
c0008c03:	85 f6                	test   esi,esi
c0008c05:	74 06                	je     c0008c0d <src_new+0x66>
c0008c07:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c0d:	83 ec 0c             	sub    esp,0xc
c0008c10:	53                   	push   ebx
c0008c11:	31 db                	xor    ebx,ebx
c0008c13:	e8 43 6c 00 00       	call   c000f85b <free>
c0008c18:	83 c4 10             	add    esp,0x10
c0008c1b:	83 ec 0c             	sub    esp,0xc
c0008c1e:	53                   	push   ebx
c0008c1f:	e8 37 ff ff ff       	call   c0008b5b <src_reset>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	eb 06                	jmp    c0008c2f <src_new+0x88>
c0008c29:	85 ff                	test   edi,edi
c0008c2b:	7f 9b                	jg     c0008bc8 <src_new+0x21>
c0008c2d:	eb b1                	jmp    c0008be0 <src_new+0x39>
c0008c2f:	89 d8                	mov    eax,ebx
c0008c31:	5b                   	pop    ebx
c0008c32:	5e                   	pop    esi
c0008c33:	5f                   	pop    edi
c0008c34:	c3                   	ret    

c0008c35 <src_callback_new>:
c0008c35:	56                   	push   esi
c0008c36:	53                   	push   ebx
c0008c37:	53                   	push   ebx
c0008c38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c40:	85 f6                	test   esi,esi
c0008c42:	75 0e                	jne    c0008c52 <src_callback_new+0x1d>
c0008c44:	31 db                	xor    ebx,ebx
c0008c46:	85 c0                	test   eax,eax
c0008c48:	74 47                	je     c0008c91 <src_callback_new+0x5c>
c0008c4a:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c50:	eb 3f                	jmp    c0008c91 <src_callback_new+0x5c>
c0008c52:	85 c0                	test   eax,eax
c0008c54:	74 06                	je     c0008c5c <src_callback_new+0x27>
c0008c56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c5c:	51                   	push   ecx
c0008c5d:	50                   	push   eax
c0008c5e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c66:	e8 3c ff ff ff       	call   c0008ba7 <src_new>
c0008c6b:	83 c4 10             	add    esp,0x10
c0008c6e:	89 c3                	mov    ebx,eax
c0008c70:	85 c0                	test   eax,eax
c0008c72:	74 1d                	je     c0008c91 <src_callback_new+0x5c>
c0008c74:	83 ec 0c             	sub    esp,0xc
c0008c77:	50                   	push   eax
c0008c78:	e8 de fe ff ff       	call   c0008b5b <src_reset>
c0008c7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c81:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c88:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c8b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c8e:	83 c4 10             	add    esp,0x10
c0008c91:	89 d8                	mov    eax,ebx
c0008c93:	5a                   	pop    edx
c0008c94:	5b                   	pop    ebx
c0008c95:	5e                   	pop    esi
c0008c96:	c3                   	ret    

c0008c97 <src_get_name>:
c0008c97:	53                   	push   ebx
c0008c98:	83 ec 14             	sub    esp,0x14
c0008c9b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c9f:	53                   	push   ebx
c0008ca0:	e8 d0 4f 00 00       	call   c000dc75 <sinc_get_name>
c0008ca5:	83 c4 10             	add    esp,0x10
c0008ca8:	85 c0                	test   eax,eax
c0008caa:	75 1d                	jne    c0008cc9 <src_get_name+0x32>
c0008cac:	83 ec 0c             	sub    esp,0xc
c0008caf:	53                   	push   ebx
c0008cb0:	e8 80 57 00 00       	call   c000e435 <zoh_get_name>
c0008cb5:	83 c4 10             	add    esp,0x10
c0008cb8:	85 c0                	test   eax,eax
c0008cba:	75 0d                	jne    c0008cc9 <src_get_name+0x32>
c0008cbc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cc0:	83 c4 08             	add    esp,0x8
c0008cc3:	5b                   	pop    ebx
c0008cc4:	e9 74 0b 00 00       	jmp    c000983d <linear_get_name>
c0008cc9:	83 c4 08             	add    esp,0x8
c0008ccc:	5b                   	pop    ebx
c0008ccd:	c3                   	ret    

c0008cce <src_get_description>:
c0008cce:	53                   	push   ebx
c0008ccf:	83 ec 14             	sub    esp,0x14
c0008cd2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cd6:	53                   	push   ebx
c0008cd7:	e8 ac 4f 00 00       	call   c000dc88 <sinc_get_description>
c0008cdc:	83 c4 10             	add    esp,0x10
c0008cdf:	85 c0                	test   eax,eax
c0008ce1:	75 1d                	jne    c0008d00 <src_get_description+0x32>
c0008ce3:	83 ec 0c             	sub    esp,0xc
c0008ce6:	53                   	push   ebx
c0008ce7:	e8 58 57 00 00       	call   c000e444 <zoh_get_description>
c0008cec:	83 c4 10             	add    esp,0x10
c0008cef:	85 c0                	test   eax,eax
c0008cf1:	75 0d                	jne    c0008d00 <src_get_description+0x32>
c0008cf3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cf7:	83 c4 08             	add    esp,0x8
c0008cfa:	5b                   	pop    ebx
c0008cfb:	e9 4c 0b 00 00       	jmp    c000984c <linear_get_description>
c0008d00:	83 c4 08             	add    esp,0x8
c0008d03:	5b                   	pop    ebx
c0008d04:	c3                   	ret    

c0008d05 <src_get_version>:
c0008d05:	b8 20 99 02 c0       	mov    eax,0xc0029920
c0008d0a:	c3                   	ret    

c0008d0b <src_is_valid_ratio>:
c0008d0b:	83 ec 1c             	sub    esp,0x1c
c0008d0e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d1e:	68 00 00 70 3f       	push   0x3f700000
c0008d23:	6a 00                	push   0x0
c0008d25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2d:	e8 a5 f7 01 00       	call   c00284d7 <__ltdf2>
c0008d32:	83 c4 10             	add    esp,0x10
c0008d35:	31 d2                	xor    edx,edx
c0008d37:	85 c0                	test   eax,eax
c0008d39:	78 1e                	js     c0008d59 <src_is_valid_ratio+0x4e>
c0008d3b:	68 00 00 70 40       	push   0x40700000
c0008d40:	6a 00                	push   0x0
c0008d42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d4a:	e8 6a f7 01 00       	call   c00284b9 <__gtdf2>
c0008d4f:	31 d2                	xor    edx,edx
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	85 c0                	test   eax,eax
c0008d56:	0f 9e c2             	setle  dl
c0008d59:	89 d0                	mov    eax,edx
c0008d5b:	83 c4 1c             	add    esp,0x1c
c0008d5e:	c3                   	ret    

c0008d5f <src_error>:
c0008d5f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d63:	31 c0                	xor    eax,eax
c0008d65:	85 d2                	test   edx,edx
c0008d67:	74 03                	je     c0008d6c <src_error+0xd>
c0008d69:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d6c:	c3                   	ret    

c0008d6d <src_strerror>:
c0008d6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d71:	31 c0                	xor    eax,eax
c0008d73:	83 fa 17             	cmp    edx,0x17
c0008d76:	77 07                	ja     c0008d7f <src_strerror+0x12>
c0008d78:	8b 04 95 80 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6280]
c0008d7f:	c3                   	ret    

c0008d80 <src_simple>:
c0008d80:	56                   	push   esi
c0008d81:	53                   	push   ebx
c0008d82:	83 ec 18             	sub    esp,0x18
c0008d85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d89:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d8d:	50                   	push   eax
c0008d8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d96:	e8 0c fe ff ff       	call   c0008ba7 <src_new>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	85 c0                	test   eax,eax
c0008da0:	75 06                	jne    c0008da8 <src_simple+0x28>
c0008da2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008da6:	eb 25                	jmp    c0008dcd <src_simple+0x4d>
c0008da8:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008daf:	89 c3                	mov    ebx,eax
c0008db1:	50                   	push   eax
c0008db2:	50                   	push   eax
c0008db3:	56                   	push   esi
c0008db4:	53                   	push   ebx
c0008db5:	e8 e2 f9 ff ff       	call   c000879c <src_process>
c0008dba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008dbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008dc1:	e8 9a f9 ff ff       	call   c0008760 <src_delete>
c0008dc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dca:	83 c4 10             	add    esp,0x10
c0008dcd:	83 c4 14             	add    esp,0x14
c0008dd0:	5b                   	pop    ebx
c0008dd1:	5e                   	pop    esi
c0008dd2:	c3                   	ret    

c0008dd3 <src_short_to_float_array>:
c0008dd3:	53                   	push   ebx
c0008dd4:	83 ec 18             	sub    esp,0x18
c0008dd7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ddb:	85 db                	test   ebx,ebx
c0008ddd:	74 54                	je     c0008e33 <src_short_to_float_array+0x60>
c0008ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008de3:	4b                   	dec    ebx
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008deb:	50                   	push   eax
c0008dec:	e8 7a f4 01 00       	call   c002826b <__floatsidf>
c0008df1:	83 c4 10             	add    esp,0x10
c0008df4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dfc:	68 00 00 00 3f       	push   0x3f000000
c0008e01:	6a 00                	push   0x0
c0008e03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e0b:	e8 f8 ed 01 00       	call   c0027c08 <__muldf3>
c0008e10:	59                   	pop    ecx
c0008e11:	59                   	pop    ecx
c0008e12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e22:	e8 b4 f6 01 00       	call   c00284db <__truncdfsf2>
c0008e27:	83 c4 10             	add    esp,0x10
c0008e2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e2e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e31:	eb a8                	jmp    c0008ddb <src_short_to_float_array+0x8>
c0008e33:	83 c4 18             	add    esp,0x18
c0008e36:	5b                   	pop    ebx
c0008e37:	c3                   	ret    

c0008e38 <src_float_to_short_array>:
c0008e38:	56                   	push   esi
c0008e39:	53                   	push   ebx
c0008e3a:	83 ec 14             	sub    esp,0x14
c0008e3d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e45:	85 db                	test   ebx,ebx
c0008e47:	0f 84 a4 00 00 00    	je     c0008ef1 <src_float_to_short_array+0xb9>
c0008e4d:	83 ec 0c             	sub    esp,0xc
c0008e50:	4b                   	dec    ebx
c0008e51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e55:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e58:	e8 a2 f7 01 00       	call   c00285ff <__extendsfdf2>
c0008e5d:	83 c4 10             	add    esp,0x10
c0008e60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e68:	68 00 00 e0 41       	push   0x41e00000
c0008e6d:	6a 00                	push   0x0
c0008e6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e77:	e8 8c ed 01 00       	call   c0027c08 <__muldf3>
c0008e7c:	83 c4 10             	add    esp,0x10
c0008e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e87:	68 ff ff df 41       	push   0x41dfffff
c0008e8c:	68 00 00 c0 ff       	push   0xffc00000
c0008e91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e99:	e8 37 f6 01 00       	call   c00284d5 <__gedf2>
c0008e9e:	83 c4 10             	add    esp,0x10
c0008ea1:	85 c0                	test   eax,eax
c0008ea3:	78 08                	js     c0008ead <src_float_to_short_array+0x75>
c0008ea5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008eab:	eb 98                	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ead:	68 00 00 e0 c1       	push   0xc1e00000
c0008eb2:	6a 00                	push   0x0
c0008eb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ebc:	e8 18 f6 01 00       	call   c00284d9 <__ledf2>
c0008ec1:	83 c4 10             	add    esp,0x10
c0008ec4:	85 c0                	test   eax,eax
c0008ec6:	7f 0b                	jg     c0008ed3 <src_float_to_short_array+0x9b>
c0008ec8:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ece:	e9 72 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ed3:	50                   	push   eax
c0008ed4:	50                   	push   eax
c0008ed5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edd:	e8 ae f7 01 00       	call   c0028690 <lrint>
c0008ee2:	83 c4 10             	add    esp,0x10
c0008ee5:	c1 f8 10             	sar    eax,0x10
c0008ee8:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eec:	e9 54 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ef1:	83 c4 14             	add    esp,0x14
c0008ef4:	5b                   	pop    ebx
c0008ef5:	5e                   	pop    esi
c0008ef6:	c3                   	ret    

c0008ef7 <src_int_to_float_array>:
c0008ef7:	53                   	push   ebx
c0008ef8:	83 ec 18             	sub    esp,0x18
c0008efb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008eff:	85 db                	test   ebx,ebx
c0008f01:	74 52                	je     c0008f55 <src_int_to_float_array+0x5e>
c0008f03:	83 ec 0c             	sub    esp,0xc
c0008f06:	4b                   	dec    ebx
c0008f07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f0b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f0e:	e8 58 f3 01 00       	call   c002826b <__floatsidf>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f1e:	68 00 00 00 3e       	push   0x3e000000
c0008f23:	6a 00                	push   0x0
c0008f25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f2d:	e8 d6 ec 01 00       	call   c0027c08 <__muldf3>
c0008f32:	59                   	pop    ecx
c0008f33:	59                   	pop    ecx
c0008f34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f44:	e8 92 f5 01 00       	call   c00284db <__truncdfsf2>
c0008f49:	83 c4 10             	add    esp,0x10
c0008f4c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f50:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f53:	eb aa                	jmp    c0008eff <src_int_to_float_array+0x8>
c0008f55:	83 c4 18             	add    esp,0x18
c0008f58:	5b                   	pop    ebx
c0008f59:	c3                   	ret    

c0008f5a <src_float_to_int_array>:
c0008f5a:	56                   	push   esi
c0008f5b:	53                   	push   ebx
c0008f5c:	83 ec 14             	sub    esp,0x14
c0008f5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f63:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f67:	85 db                	test   ebx,ebx
c0008f69:	0f 84 a2 00 00 00    	je     c0009011 <src_float_to_int_array+0xb7>
c0008f6f:	83 ec 0c             	sub    esp,0xc
c0008f72:	4b                   	dec    ebx
c0008f73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f77:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f7a:	e8 80 f6 01 00       	call   c00285ff <__extendsfdf2>
c0008f7f:	83 c4 10             	add    esp,0x10
c0008f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8a:	68 00 00 e0 41       	push   0x41e00000
c0008f8f:	6a 00                	push   0x0
c0008f91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	e8 6a ec 01 00       	call   c0027c08 <__muldf3>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fa5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa9:	68 ff ff df 41       	push   0x41dfffff
c0008fae:	68 00 00 c0 ff       	push   0xffc00000
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	e8 15 f5 01 00       	call   c00284d5 <__gedf2>
c0008fc0:	83 c4 10             	add    esp,0x10
c0008fc3:	85 c0                	test   eax,eax
c0008fc5:	78 09                	js     c0008fd0 <src_float_to_int_array+0x76>
c0008fc7:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fce:	eb 97                	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008fd0:	68 00 00 e0 c1       	push   0xc1e00000
c0008fd5:	6a 00                	push   0x0
c0008fd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdf:	e8 f5 f4 01 00       	call   c00284d9 <__ledf2>
c0008fe4:	83 c4 10             	add    esp,0x10
c0008fe7:	85 c0                	test   eax,eax
c0008fe9:	7f 0c                	jg     c0008ff7 <src_float_to_int_array+0x9d>
c0008feb:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008ff2:	e9 70 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008ff7:	50                   	push   eax
c0008ff8:	50                   	push   eax
c0008ff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009001:	e8 8a f6 01 00       	call   c0028690 <lrint>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c000900c:	e9 56 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0009011:	83 c4 14             	add    esp,0x14
c0009014:	5b                   	pop    ebx
c0009015:	5e                   	pop    esi
c0009016:	c3                   	ret    

c0009017 <linear_vari_process>:
c0009017:	55                   	push   ebp
c0009018:	31 d2                	xor    edx,edx
c000901a:	57                   	push   edi
c000901b:	56                   	push   esi
c000901c:	53                   	push   ebx
c000901d:	83 ec 3c             	sub    esp,0x3c
c0009020:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009024:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009028:	0f 8e d3 07 00 00    	jle    c0009801 <linear_vari_process+0x7ea>
c000902e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009032:	ba 05 00 00 00       	mov    edx,0x5
c0009037:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000903a:	85 db                	test   ebx,ebx
c000903c:	0f 84 bf 07 00 00    	je     c0009801 <linear_vari_process+0x7ea>
c0009042:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009045:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009049:	74 19                	je     c0009064 <linear_vari_process+0x4d>
c000904b:	31 d2                	xor    edx,edx
c000904d:	39 c2                	cmp    edx,eax
c000904f:	7d 0c                	jge    c000905d <linear_vari_process+0x46>
c0009051:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009053:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009056:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000905a:	42                   	inc    edx
c000905b:	eb f0                	jmp    c000904d <linear_vari_process+0x36>
c000905d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009064:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009067:	0f af d0             	imul   edx,eax
c000906a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000906d:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009071:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009078:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000907b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009082:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009086:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009089:	8b 00                	mov    eax,DWORD PTR [eax]
c000908b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000908f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009093:	68 00 00 70 3f       	push   0x3f700000
c0009098:	6a 00                	push   0x0
c000909a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a2:	e8 30 f4 01 00       	call   c00284d7 <__ltdf2>
c00090a7:	83 c4 10             	add    esp,0x10
c00090aa:	ba 16 00 00 00       	mov    edx,0x16
c00090af:	85 c0                	test   eax,eax
c00090b1:	0f 88 4a 07 00 00    	js     c0009801 <linear_vari_process+0x7ea>
c00090b7:	68 00 00 70 40       	push   0x40700000
c00090bc:	6a 00                	push   0x0
c00090be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 ee f3 01 00       	call   c00284b9 <__gtdf2>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	ba 16 00 00 00       	mov    edx,0x16
c00090d3:	85 c0                	test   eax,eax
c00090d5:	0f 8f 26 07 00 00    	jg     c0009801 <linear_vari_process+0x7ea>
c00090db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090df:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ed:	68 00 00 f0 3f       	push   0x3ff00000
c00090f2:	6a 00                	push   0x0
c00090f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fc:	e8 d6 f3 01 00       	call   c00284d7 <__ltdf2>
c0009101:	83 c4 10             	add    esp,0x10
c0009104:	85 c0                	test   eax,eax
c0009106:	0f 89 89 02 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c000910c:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000910f:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009112:	0f 8d 7d 02 00 00    	jge    c0009395 <linear_vari_process+0x37e>
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000911e:	e8 48 f1 01 00       	call   c002826b <__floatsidf>
c0009123:	83 c4 10             	add    esp,0x10
c0009126:	89 04 24             	mov    DWORD PTR [esp],eax
c0009129:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000912d:	68 00 00 f0 3f       	push   0x3ff00000
c0009132:	6a 00                	push   0x0
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000913c:	e8 4a e4 01 00       	call   c002758b <__adddf3>
c0009141:	83 c4 10             	add    esp,0x10
c0009144:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009148:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000914c:	52                   	push   edx
c000914d:	50                   	push   eax
c000914e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009152:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009156:	e8 ad ea 01 00       	call   c0027c08 <__muldf3>
c000915b:	5d                   	pop    ebp
c000915c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009160:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009164:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009167:	e8 ff f0 01 00       	call   c002826b <__floatsidf>
c000916c:	83 c4 10             	add    esp,0x10
c000916f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009173:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009177:	52                   	push   edx
c0009178:	50                   	push   eax
c0009179:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000917d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009181:	e8 05 e4 01 00       	call   c002758b <__adddf3>
c0009186:	59                   	pop    ecx
c0009187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000918b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000918f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009192:	e8 d4 f0 01 00       	call   c002826b <__floatsidf>
c0009197:	83 c4 10             	add    esp,0x10
c000919a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000919e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00091a2:	52                   	push   edx
c00091a3:	50                   	push   eax
c00091a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091ac:	e8 24 f3 01 00       	call   c00284d5 <__gedf2>
c00091b1:	83 c4 10             	add    esp,0x10
c00091b4:	85 c0                	test   eax,eax
c00091b6:	0f 89 d9 01 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c00091bc:	85 ff                	test   edi,edi
c00091be:	0f 8e f4 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c00091c4:	83 ec 10             	sub    esp,0x10
c00091c7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091d4:	ff 30                	push   DWORD PTR [eax]
c00091d6:	e8 01 ea 01 00       	call   c0027bdc <__subdf3>
c00091db:	83 c4 18             	add    esp,0x18
c00091de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091e6:	52                   	push   edx
c00091e7:	50                   	push   eax
c00091e8:	e8 83 f4 01 00       	call   c0028670 <fabs>
c00091ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091f5:	83 c4 10             	add    esp,0x10
c00091f8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091fd:	68 23 42 92 0c       	push   0xc924223
c0009202:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009206:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000920a:	e8 aa f2 01 00       	call   c00284b9 <__gtdf2>
c000920f:	83 c4 10             	add    esp,0x10
c0009212:	85 c0                	test   eax,eax
c0009214:	0f 8e 9e 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c000921a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000921e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009221:	8b 00                	mov    eax,DWORD PTR [eax]
c0009223:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009227:	89 04 24             	mov    DWORD PTR [esp],eax
c000922a:	52                   	push   edx
c000922b:	50                   	push   eax
c000922c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000922f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009232:	e8 a5 e9 01 00       	call   c0027bdc <__subdf3>
c0009237:	59                   	pop    ecx
c0009238:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000923c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009240:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009243:	e8 23 f0 01 00       	call   c002826b <__floatsidf>
c0009248:	83 c4 10             	add    esp,0x10
c000924b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000924f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009253:	52                   	push   edx
c0009254:	50                   	push   eax
c0009255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 a6 e9 01 00       	call   c0027c08 <__muldf3>
c0009262:	5f                   	pop    edi
c0009263:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009267:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000926b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000926e:	e8 f8 ef 01 00       	call   c002826b <__floatsidf>
c0009273:	83 c4 10             	add    esp,0x10
c0009276:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000927a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000927e:	52                   	push   edx
c000927f:	50                   	push   eax
c0009280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009288:	e8 5f ec 01 00       	call   c0027eec <__divdf3>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009294:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009298:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000929c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a8:	e8 de e2 01 00       	call   c002758b <__adddf3>
c00092ad:	83 c4 10             	add    esp,0x10
c00092b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b8:	31 ff                	xor    edi,edi
c00092ba:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092bd:	0f 8e 9d 00 00 00    	jle    c0009360 <linear_vari_process+0x349>
c00092c3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092c6:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092cd:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00092d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00092d6:	52                   	push   edx
c00092d7:	52                   	push   edx
c00092d8:	55                   	push   ebp
c00092d9:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092dc:	47                   	inc    edi
c00092dd:	e8 3e dc 01 00       	call   c0026f20 <__subsf3>
c00092e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00092e5:	e8 15 f3 01 00       	call   c00285ff <__extendsfdf2>
c00092ea:	83 c4 10             	add    esp,0x10
c00092ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009305:	e8 fe e8 01 00       	call   c0027c08 <__muldf3>
c000930a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000930d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009311:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009315:	e8 e5 f2 01 00       	call   c00285ff <__extendsfdf2>
c000931a:	83 c4 10             	add    esp,0x10
c000931d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009321:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009325:	52                   	push   edx
c0009326:	50                   	push   eax
c0009327:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932f:	e8 57 e2 01 00       	call   c002758b <__adddf3>
c0009334:	59                   	pop    ecx
c0009335:	5d                   	pop    ebp
c0009336:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000933a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000933e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009342:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009346:	e8 90 f1 01 00       	call   c00284db <__truncdfsf2>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009351:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009355:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009358:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000935b:	e9 5a ff ff ff       	jmp    c00092ba <linear_vari_process+0x2a3>
c0009360:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009368:	68 00 00 f0 3f       	push   0x3ff00000
c000936d:	6a 00                	push   0x0
c000936f:	e8 78 eb 01 00       	call   c0027eec <__divdf3>
c0009374:	83 c4 10             	add    esp,0x10
c0009377:	89 04 24             	mov    DWORD PTR [esp],eax
c000937a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000937e:	52                   	push   edx
c000937f:	50                   	push   eax
c0009380:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009388:	e8 fe e1 01 00       	call   c002758b <__adddf3>
c000938d:	83 c4 10             	add    esp,0x10
c0009390:	e9 50 fd ff ff       	jmp    c00090e5 <linear_vari_process+0xce>
c0009395:	50                   	push   eax
c0009396:	50                   	push   eax
c0009397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939f:	e8 ec f2 01 00       	call   c0028690 <lrint>
c00093a4:	83 ec 0c             	sub    esp,0xc
c00093a7:	50                   	push   eax
c00093a8:	e8 be ee 01 00       	call   c002826b <__floatsidf>
c00093ad:	83 c4 10             	add    esp,0x10
c00093b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b8:	52                   	push   edx
c00093b9:	50                   	push   eax
c00093ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093c2:	e8 15 e8 01 00       	call   c0027bdc <__subdf3>
c00093c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093cf:	83 c4 20             	add    esp,0x20
c00093d2:	6a 00                	push   0x0
c00093d4:	6a 00                	push   0x0
c00093d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093de:	e8 f4 f0 01 00       	call   c00284d7 <__ltdf2>
c00093e3:	83 c4 10             	add    esp,0x10
c00093e6:	85 c0                	test   eax,eax
c00093e8:	79 1e                	jns    c0009408 <linear_vari_process+0x3f1>
c00093ea:	68 00 00 f0 3f       	push   0x3ff00000
c00093ef:	6a 00                	push   0x0
c00093f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f9:	e8 8d e1 01 00       	call   c002758b <__adddf3>
c00093fe:	83 c4 10             	add    esp,0x10
c0009401:	89 04 24             	mov    DWORD PTR [esp],eax
c0009404:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009408:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000940b:	83 ec 10             	sub    esp,0x10
c000940e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009412:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009416:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941e:	e8 b9 e7 01 00       	call   c0027bdc <__subdf3>
c0009423:	83 c4 18             	add    esp,0x18
c0009426:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000942a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000942e:	52                   	push   edx
c000942f:	50                   	push   eax
c0009430:	e8 5b f2 01 00       	call   c0028690 <lrint>
c0009435:	83 c4 10             	add    esp,0x10
c0009438:	0f af f8             	imul   edi,eax
c000943b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000943e:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009441:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009444:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009447:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000944a:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000944e:	0f 8d 13 03 00 00    	jge    c0009767 <linear_vari_process+0x750>
c0009454:	83 ec 0c             	sub    esp,0xc
c0009457:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000945a:	e8 0c ee 01 00       	call   c002826b <__floatsidf>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009466:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000946a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009472:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009476:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947a:	e8 89 e7 01 00       	call   c0027c08 <__muldf3>
c000947f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009482:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009486:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948a:	e8 dc ed 01 00       	call   c002826b <__floatsidf>
c000948f:	83 c4 10             	add    esp,0x10
c0009492:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009496:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949a:	52                   	push   edx
c000949b:	50                   	push   eax
c000949c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	e8 e2 e0 01 00       	call   c002758b <__adddf3>
c00094a9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094b4:	e8 b2 ed 01 00       	call   c002826b <__floatsidf>
c00094b9:	83 c4 10             	add    esp,0x10
c00094bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094c4:	52                   	push   edx
c00094c5:	50                   	push   eax
c00094c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ce:	e8 04 f0 01 00       	call   c00284d7 <__ltdf2>
c00094d3:	83 c4 10             	add    esp,0x10
c00094d6:	85 c0                	test   eax,eax
c00094d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094dc:	0f 89 85 02 00 00    	jns    c0009767 <linear_vari_process+0x750>
c00094e2:	85 c9                	test   ecx,ecx
c00094e4:	0f 8e f5 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c00094ea:	83 ec 10             	sub    esp,0x10
c00094ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094f0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094f3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094f7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094fa:	ff 30                	push   DWORD PTR [eax]
c00094fc:	e8 db e6 01 00       	call   c0027bdc <__subdf3>
c0009501:	83 c4 18             	add    esp,0x18
c0009504:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009508:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000950c:	52                   	push   edx
c000950d:	50                   	push   eax
c000950e:	e8 5d f1 01 00       	call   c0028670 <fabs>
c0009513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009517:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000951b:	83 c4 10             	add    esp,0x10
c000951e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009523:	68 23 42 92 0c       	push   0xc924223
c0009528:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000952c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009530:	e8 84 ef 01 00       	call   c00284b9 <__gtdf2>
c0009535:	83 c4 10             	add    esp,0x10
c0009538:	85 c0                	test   eax,eax
c000953a:	0f 8e 9f 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c0009540:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009544:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009547:	8b 00                	mov    eax,DWORD PTR [eax]
c0009549:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000954d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009551:	52                   	push   edx
c0009552:	50                   	push   eax
c0009553:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009556:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009559:	e8 7e e6 01 00       	call   c0027bdc <__subdf3>
c000955e:	5f                   	pop    edi
c000955f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009563:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009567:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000956a:	e8 fc ec 01 00       	call   c002826b <__floatsidf>
c000956f:	83 c4 10             	add    esp,0x10
c0009572:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009576:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957a:	52                   	push   edx
c000957b:	50                   	push   eax
c000957c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009584:	e8 7f e6 01 00       	call   c0027c08 <__muldf3>
c0009589:	5d                   	pop    ebp
c000958a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000958e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009592:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009595:	e8 d1 ec 01 00       	call   c002826b <__floatsidf>
c000959a:	83 c4 10             	add    esp,0x10
c000959d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095a5:	52                   	push   edx
c00095a6:	50                   	push   eax
c00095a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095af:	e8 38 e9 01 00       	call   c0027eec <__divdf3>
c00095b4:	83 c4 10             	add    esp,0x10
c00095b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cf:	e8 b7 df 01 00       	call   c002758b <__adddf3>
c00095d4:	83 c4 10             	add    esp,0x10
c00095d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095df:	31 ff                	xor    edi,edi
c00095e1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095e4:	39 f8                	cmp    eax,edi
c00095e6:	0f 8e ac 00 00 00    	jle    c0009698 <linear_vari_process+0x681>
c00095ec:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ee:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095f1:	29 c1                	sub    ecx,eax
c00095f3:	89 c8                	mov    eax,ecx
c00095f5:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f8:	01 f8                	add    eax,edi
c00095fa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095fe:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009601:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009604:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009608:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000960b:	51                   	push   ecx
c000960c:	01 f8                	add    eax,edi
c000960e:	51                   	push   ecx
c000960f:	47                   	inc    edi
c0009610:	55                   	push   ebp
c0009611:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009614:	e8 07 d9 01 00       	call   c0026f20 <__subsf3>
c0009619:	89 04 24             	mov    DWORD PTR [esp],eax
c000961c:	e8 de ef 01 00       	call   c00285ff <__extendsfdf2>
c0009621:	83 c4 10             	add    esp,0x10
c0009624:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009628:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000962c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009630:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009634:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963c:	e8 c7 e5 01 00       	call   c0027c08 <__muldf3>
c0009641:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009644:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000964c:	e8 ae ef 01 00       	call   c00285ff <__extendsfdf2>
c0009651:	83 c4 10             	add    esp,0x10
c0009654:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009658:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000965c:	52                   	push   edx
c000965d:	50                   	push   eax
c000965e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009662:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009666:	e8 20 df 01 00       	call   c002758b <__adddf3>
c000966b:	5d                   	pop    ebp
c000966c:	59                   	pop    ecx
c000966d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009671:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009675:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009679:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000967d:	e8 59 ee 01 00       	call   c00284db <__truncdfsf2>
c0009682:	83 c4 10             	add    esp,0x10
c0009685:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009689:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000968d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009690:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009693:	e9 49 ff ff ff       	jmp    c00095e1 <linear_vari_process+0x5ca>
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a0:	68 00 00 f0 3f       	push   0x3ff00000
c00096a5:	6a 00                	push   0x0
c00096a7:	e8 40 e8 01 00       	call   c0027eec <__divdf3>
c00096ac:	83 c4 10             	add    esp,0x10
c00096af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c7:	e8 bf de 01 00       	call   c002758b <__adddf3>
c00096cc:	59                   	pop    ecx
c00096cd:	5f                   	pop    edi
c00096ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096de:	e8 ad ef 01 00       	call   c0028690 <lrint>
c00096e3:	83 ec 0c             	sub    esp,0xc
c00096e6:	50                   	push   eax
c00096e7:	e8 7f eb 01 00       	call   c002826b <__floatsidf>
c00096ec:	83 c4 10             	add    esp,0x10
c00096ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096f3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096f7:	52                   	push   edx
c00096f8:	50                   	push   eax
c00096f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009701:	e8 d6 e4 01 00       	call   c0027bdc <__subdf3>
c0009706:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000970a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000970e:	83 c4 20             	add    esp,0x20
c0009711:	6a 00                	push   0x0
c0009713:	6a 00                	push   0x0
c0009715:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009719:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000971d:	e8 b5 ed 01 00       	call   c00284d7 <__ltdf2>
c0009722:	83 c4 10             	add    esp,0x10
c0009725:	85 c0                	test   eax,eax
c0009727:	79 1e                	jns    c0009747 <linear_vari_process+0x730>
c0009729:	68 00 00 f0 3f       	push   0x3ff00000
c000972e:	6a 00                	push   0x0
c0009730:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009734:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009738:	e8 4e de 01 00       	call   c002758b <__adddf3>
c000973d:	83 c4 10             	add    esp,0x10
c0009740:	89 04 24             	mov    DWORD PTR [esp],eax
c0009743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009747:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000974a:	83 ec 10             	sub    esp,0x10
c000974d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009755:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009759:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000975d:	e8 7a e4 01 00       	call   c0027bdc <__subdf3>
c0009762:	e9 bc fc ff ff       	jmp    c0009423 <linear_vari_process+0x40c>
c0009767:	39 fd                	cmp    ebp,edi
c0009769:	7d 38                	jge    c00097a3 <linear_vari_process+0x78c>
c000976b:	83 ec 0c             	sub    esp,0xc
c000976e:	89 f8                	mov    eax,edi
c0009770:	29 e8                	sub    eax,ebp
c0009772:	99                   	cdq    
c0009773:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009776:	50                   	push   eax
c0009777:	e8 ef ea 01 00       	call   c002826b <__floatsidf>
c000977c:	83 c4 10             	add    esp,0x10
c000977f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009783:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009787:	52                   	push   edx
c0009788:	50                   	push   eax
c0009789:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000978d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009791:	e8 f5 dd 01 00       	call   c002758b <__adddf3>
c0009796:	83 c4 10             	add    esp,0x10
c0009799:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000979c:	89 04 24             	mov    DWORD PTR [esp],eax
c000979f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097a3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097ae:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097b1:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097b4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097b7:	85 c0                	test   eax,eax
c00097b9:	7f 29                	jg     c00097e4 <linear_vari_process+0x7cd>
c00097bb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097c7:	89 01                	mov    DWORD PTR [ecx],eax
c00097c9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097cf:	99                   	cdq    
c00097d0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097d6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d9:	99                   	cdq    
c00097da:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097dd:	31 d2                	xor    edx,edx
c00097df:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097e2:	eb 1d                	jmp    c0009801 <linear_vari_process+0x7ea>
c00097e4:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097e7:	31 d2                	xor    edx,edx
c00097e9:	29 c8                	sub    eax,ecx
c00097eb:	c1 e0 02             	shl    eax,0x2
c00097ee:	39 d1                	cmp    ecx,edx
c00097f0:	7e c9                	jle    c00097bb <linear_vari_process+0x7a4>
c00097f2:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097f4:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097f7:	83 c0 04             	add    eax,0x4
c00097fa:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097fe:	42                   	inc    edx
c00097ff:	eb ed                	jmp    c00097ee <linear_vari_process+0x7d7>
c0009801:	83 c4 3c             	add    esp,0x3c
c0009804:	89 d0                	mov    eax,edx
c0009806:	5b                   	pop    ebx
c0009807:	5e                   	pop    esi
c0009808:	5f                   	pop    edi
c0009809:	5d                   	pop    ebp
c000980a:	c3                   	ret    

c000980b <linear_reset>:
c000980b:	83 ec 0c             	sub    esp,0xc
c000980e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009812:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009815:	85 c0                	test   eax,eax
c0009817:	74 20                	je     c0009839 <linear_reset+0x2e>
c0009819:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000981c:	83 c0 1c             	add    eax,0x1c
c000981f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009822:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009829:	c1 e2 02             	shl    edx,0x2
c000982c:	51                   	push   ecx
c000982d:	52                   	push   edx
c000982e:	6a 00                	push   0x0
c0009830:	50                   	push   eax
c0009831:	e8 4a 6f ff ff       	call   c0000780 <memset>
c0009836:	83 c4 10             	add    esp,0x10
c0009839:	83 c4 0c             	add    esp,0xc
c000983c:	c3                   	ret    

c000983d <linear_get_name>:
c000983d:	31 c0                	xor    eax,eax
c000983f:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009844:	75 05                	jne    c000984b <linear_get_name+0xe>
c0009846:	b8 e0 9d 02 c0       	mov    eax,0xc0029de0
c000984b:	c3                   	ret    

c000984c <linear_get_description>:
c000984c:	31 c0                	xor    eax,eax
c000984e:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009853:	75 05                	jne    c000985a <linear_get_description+0xe>
c0009855:	b8 f4 9d 02 c0       	mov    eax,0xc0029df4
c000985a:	c3                   	ret    

c000985b <linear_set_converter>:
c000985b:	53                   	push   ebx
c000985c:	b8 0a 00 00 00       	mov    eax,0xa
c0009861:	83 ec 08             	sub    esp,0x8
c0009864:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009868:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000986d:	75 6e                	jne    c00098dd <linear_set_converter+0x82>
c000986f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009872:	85 c0                	test   eax,eax
c0009874:	74 13                	je     c0009889 <linear_set_converter+0x2e>
c0009876:	83 ec 0c             	sub    esp,0xc
c0009879:	50                   	push   eax
c000987a:	e8 dc 5f 00 00       	call   c000f85b <free>
c000987f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009886:	83 c4 10             	add    esp,0x10
c0009889:	50                   	push   eax
c000988a:	50                   	push   eax
c000988b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000988e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009895:	50                   	push   eax
c0009896:	6a 01                	push   0x1
c0009898:	e8 de 5f 00 00       	call   c000f87b <calloc>
c000989d:	83 c4 10             	add    esp,0x10
c00098a0:	89 c2                	mov    edx,eax
c00098a2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00098a5:	85 d2                	test   edx,edx
c00098a7:	b8 01 00 00 00       	mov    eax,0x1
c00098ac:	74 2f                	je     c00098dd <linear_set_converter+0x82>
c00098ae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098b1:	83 ec 0c             	sub    esp,0xc
c00098b4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098b7:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098bd:	c7 43 24 17 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009017
c00098c4:	c7 43 20 17 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009017
c00098cb:	c7 43 28 0b 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000980b
c00098d2:	53                   	push   ebx
c00098d3:	e8 33 ff ff ff       	call   c000980b <linear_reset>
c00098d8:	83 c4 10             	add    esp,0x10
c00098db:	31 c0                	xor    eax,eax
c00098dd:	83 c4 08             	add    esp,0x8
c00098e0:	5b                   	pop    ebx
c00098e1:	c3                   	ret    

c00098e2 <int_to_fp>:
c00098e2:	c1 e0 0c             	shl    eax,0xc
c00098e5:	c3                   	ret    

c00098e6 <fp_to_int>:
c00098e6:	c1 f8 0c             	sar    eax,0xc
c00098e9:	c3                   	ret    

c00098ea <fp_fraction_part>:
c00098ea:	25 ff 0f 00 00       	and    eax,0xfff
c00098ef:	c3                   	ret    

c00098f0 <fp_to_double>:
c00098f0:	83 ec 1c             	sub    esp,0x1c
c00098f3:	e8 f2 ff ff ff       	call   c00098ea <fp_fraction_part>
c00098f8:	83 ec 0c             	sub    esp,0xc
c00098fb:	50                   	push   eax
c00098fc:	e8 6a e9 01 00       	call   c002826b <__floatsidf>
c0009901:	83 c4 10             	add    esp,0x10
c0009904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000990c:	68 00 00 30 3f       	push   0x3f300000
c0009911:	6a 00                	push   0x0
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 e8 e2 01 00       	call   c0027c08 <__muldf3>
c0009920:	83 c4 2c             	add    esp,0x2c
c0009923:	c3                   	ret    

c0009924 <calc_output_single>:
c0009924:	55                   	push   ebp
c0009925:	57                   	push   edi
c0009926:	56                   	push   esi
c0009927:	89 c6                	mov    esi,eax
c0009929:	53                   	push   ebx
c000992a:	89 d3                	mov    ebx,edx
c000992c:	83 ec 4c             	sub    esp,0x4c
c000992f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009933:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009936:	e8 a7 ff ff ff       	call   c00098e2 <int_to_fp>
c000993b:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000993e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009942:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009946:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000994a:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000994d:	99                   	cdq    
c000994e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009956:	f7 fb                	idiv   ebx
c0009958:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009960:	89 da                	mov    edx,ebx
c0009962:	0f af d0             	imul   edx,eax
c0009965:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009969:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000996d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009971:	29 c2                	sub    edx,eax
c0009973:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000997a:	83 c5 04             	add    ebp,0x4
c000997d:	e8 6e ff ff ff       	call   c00098f0 <fp_to_double>
c0009982:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009986:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000998a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000998e:	e8 53 ff ff ff       	call   c00098e6 <fp_to_int>
c0009993:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009996:	52                   	push   edx
c0009997:	52                   	push   edx
c0009998:	51                   	push   ecx
c0009999:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000999d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00099a1:	e8 7a d5 01 00       	call   c0026f20 <__subsf3>
c00099a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a9:	e8 51 ec 01 00       	call   c00285ff <__extendsfdf2>
c00099ae:	83 c4 10             	add    esp,0x10
c00099b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c9:	e8 3a e2 01 00       	call   c0027c08 <__muldf3>
c00099ce:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099d6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099dd:	e8 1d ec 01 00       	call   c00285ff <__extendsfdf2>
c00099e2:	83 c4 10             	add    esp,0x10
c00099e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ed:	52                   	push   edx
c00099ee:	50                   	push   eax
c00099ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f7:	e8 8f db 01 00       	call   c002758b <__adddf3>
c00099fc:	59                   	pop    ecx
c00099fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009a01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009a05:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a0b:	e8 ef eb 01 00       	call   c00285ff <__extendsfdf2>
c0009a10:	83 c4 10             	add    esp,0x10
c0009a13:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a1b:	52                   	push   edx
c0009a1c:	50                   	push   eax
c0009a1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a25:	e8 de e1 01 00       	call   c0027c08 <__muldf3>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a35:	52                   	push   edx
c0009a36:	50                   	push   eax
c0009a37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3f:	e8 47 db 01 00       	call   c002758b <__adddf3>
c0009a44:	83 c4 10             	add    esp,0x10
c0009a47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a4f:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a53:	0f 89 1d ff ff ff    	jns    c0009976 <calc_output_single+0x52>
c0009a59:	89 d9                	mov    ecx,ebx
c0009a5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a5f:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a63:	89 dd                	mov    ebp,ebx
c0009a65:	29 c8                	sub    eax,ecx
c0009a67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a6f:	99                   	cdq    
c0009a70:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a78:	f7 fb                	idiv   ebx
c0009a7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a7e:	0f af e8             	imul   ebp,eax
c0009a81:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a85:	01 cd                	add    ebp,ecx
c0009a87:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a8a:	89 e8                	mov    eax,ebp
c0009a8c:	83 ee 04             	sub    esi,0x4
c0009a8f:	e8 5c fe ff ff       	call   c00098f0 <fp_to_double>
c0009a94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a9c:	89 e8                	mov    eax,ebp
c0009a9e:	29 dd                	sub    ebp,ebx
c0009aa0:	e8 41 fe ff ff       	call   c00098e6 <fp_to_int>
c0009aa5:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa8:	52                   	push   edx
c0009aa9:	52                   	push   edx
c0009aaa:	51                   	push   ecx
c0009aab:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aaf:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ab3:	e8 68 d4 01 00       	call   c0026f20 <__subsf3>
c0009ab8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009abb:	e8 3f eb 01 00       	call   c00285ff <__extendsfdf2>
c0009ac0:	83 c4 10             	add    esp,0x10
c0009ac3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ac7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009acb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ad3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009adb:	e8 28 e1 01 00       	call   c0027c08 <__muldf3>
c0009ae0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009ae4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aeb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aef:	e8 0b eb 01 00       	call   c00285ff <__extendsfdf2>
c0009af4:	83 c4 10             	add    esp,0x10
c0009af7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009afb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aff:	52                   	push   edx
c0009b00:	50                   	push   eax
c0009b01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b09:	e8 7d da 01 00       	call   c002758b <__adddf3>
c0009b0e:	59                   	pop    ecx
c0009b0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b13:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b17:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b1d:	e8 dd ea 01 00       	call   c00285ff <__extendsfdf2>
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b29:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b2d:	52                   	push   edx
c0009b2e:	50                   	push   eax
c0009b2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b37:	e8 cc e0 01 00       	call   c0027c08 <__muldf3>
c0009b3c:	83 c4 10             	add    esp,0x10
c0009b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b47:	52                   	push   edx
c0009b48:	50                   	push   eax
c0009b49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b51:	e8 35 da 01 00       	call   c002758b <__adddf3>
c0009b56:	83 c4 10             	add    esp,0x10
c0009b59:	85 ed                	test   ebp,ebp
c0009b5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b5f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b63:	0f 8f 21 ff ff ff    	jg     c0009a8a <calc_output_single+0x166>
c0009b69:	52                   	push   edx
c0009b6a:	50                   	push   eax
c0009b6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b73:	e8 13 da 01 00       	call   c002758b <__adddf3>
c0009b78:	83 c4 5c             	add    esp,0x5c
c0009b7b:	5b                   	pop    ebx
c0009b7c:	5e                   	pop    esi
c0009b7d:	5f                   	pop    edi
c0009b7e:	5d                   	pop    ebp
c0009b7f:	c3                   	ret    

c0009b80 <calc_output_stereo>:
c0009b80:	55                   	push   ebp
c0009b81:	89 cd                	mov    ebp,ecx
c0009b83:	57                   	push   edi
c0009b84:	56                   	push   esi
c0009b85:	53                   	push   ebx
c0009b86:	89 c3                	mov    ebx,eax
c0009b88:	83 ec 6c             	sub    esp,0x6c
c0009b8b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b8f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b96:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b9d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009ba1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009ba5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba8:	e8 35 fd ff ff       	call   c00098e2 <int_to_fp>
c0009bad:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bb5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bc1:	29 c8                	sub    eax,ecx
c0009bc3:	99                   	cdq    
c0009bc4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bcc:	0f af d0             	imul   edx,eax
c0009bcf:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bd2:	31 d2                	xor    edx,edx
c0009bd4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bdc:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bdf:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009be3:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009be6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bea:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bee:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bf1:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bf6:	29 c1                	sub    ecx,eax
c0009bf8:	31 c0                	xor    eax,eax
c0009bfa:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c05:	83 c7 08             	add    edi,0x8
c0009c08:	e8 e3 fc ff ff       	call   c00098f0 <fp_to_double>
c0009c0d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c11:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c19:	e8 c8 fc ff ff       	call   c00098e6 <fp_to_int>
c0009c1e:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c21:	52                   	push   edx
c0009c22:	52                   	push   edx
c0009c23:	51                   	push   ecx
c0009c24:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c28:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c2c:	e8 ef d2 01 00       	call   c0026f20 <__subsf3>
c0009c31:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c34:	e8 c6 e9 01 00       	call   c00285ff <__extendsfdf2>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c40:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c4c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c50:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c54:	e8 af df 01 00       	call   c0027c08 <__muldf3>
c0009c59:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c5d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c61:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c64:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c68:	e8 92 e9 01 00       	call   c00285ff <__extendsfdf2>
c0009c6d:	83 c4 10             	add    esp,0x10
c0009c70:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c74:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c78:	52                   	push   edx
c0009c79:	50                   	push   eax
c0009c7a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c82:	e8 04 d9 01 00       	call   c002758b <__adddf3>
c0009c87:	59                   	pop    ecx
c0009c88:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c8c:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c90:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c96:	e8 64 e9 01 00       	call   c00285ff <__extendsfdf2>
c0009c9b:	83 c4 10             	add    esp,0x10
c0009c9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ca2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ca6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009caa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb6:	e8 4d df 01 00       	call   c0027c08 <__muldf3>
c0009cbb:	83 c4 10             	add    esp,0x10
c0009cbe:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cc2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cc6:	52                   	push   edx
c0009cc7:	50                   	push   eax
c0009cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cd0:	e8 b6 d8 01 00       	call   c002758b <__adddf3>
c0009cd5:	59                   	pop    ecx
c0009cd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cda:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cde:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ce4:	e8 16 e9 01 00       	call   c00285ff <__extendsfdf2>
c0009ce9:	83 c4 10             	add    esp,0x10
c0009cec:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cf0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cfc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d00:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d04:	e8 ff de 01 00       	call   c0027c08 <__muldf3>
c0009d09:	83 c4 10             	add    esp,0x10
c0009d0c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d10:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d14:	52                   	push   edx
c0009d15:	50                   	push   eax
c0009d16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1e:	e8 68 d8 01 00       	call   c002758b <__adddf3>
c0009d23:	83 c4 10             	add    esp,0x10
c0009d26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d2a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d2e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d32:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d36:	0f 89 c5 fe ff ff    	jns    c0009c01 <calc_output_stereo+0x81>
c0009d3c:	29 e9                	sub    ecx,ebp
c0009d3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d42:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d46:	29 c8                	sub    eax,ecx
c0009d48:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d50:	99                   	cdq    
c0009d51:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d55:	31 d2                	xor    edx,edx
c0009d57:	0f af f8             	imul   edi,eax
c0009d5a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d5e:	40                   	inc    eax
c0009d5f:	01 cf                	add    edi,ecx
c0009d61:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d66:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d6a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d72:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d7b:	89 f8                	mov    eax,edi
c0009d7d:	83 eb 08             	sub    ebx,0x8
c0009d80:	e8 6b fb ff ff       	call   c00098f0 <fp_to_double>
c0009d85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d8d:	89 f8                	mov    eax,edi
c0009d8f:	e8 52 fb ff ff       	call   c00098e6 <fp_to_int>
c0009d94:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d97:	52                   	push   edx
c0009d98:	52                   	push   edx
c0009d99:	55                   	push   ebp
c0009d9a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d9e:	e8 7d d1 01 00       	call   c0026f20 <__subsf3>
c0009da3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009da6:	e8 54 e8 01 00       	call   c00285ff <__extendsfdf2>
c0009dab:	83 c4 10             	add    esp,0x10
c0009dae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009db2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009db6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dbe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc6:	e8 3d de 01 00       	call   c0027c08 <__muldf3>
c0009dcb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dd2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dd6:	e8 24 e8 01 00       	call   c00285ff <__extendsfdf2>
c0009ddb:	83 c4 10             	add    esp,0x10
c0009dde:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009de2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009de6:	52                   	push   edx
c0009de7:	50                   	push   eax
c0009de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009df0:	e8 96 d7 01 00       	call   c002758b <__adddf3>
c0009df5:	59                   	pop    ecx
c0009df6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dfa:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dfe:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009e04:	e8 f6 e7 01 00       	call   c00285ff <__extendsfdf2>
c0009e09:	83 c4 10             	add    esp,0x10
c0009e0c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e10:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e24:	e8 df dd 01 00       	call   c0027c08 <__muldf3>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e30:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e34:	52                   	push   edx
c0009e35:	50                   	push   eax
c0009e36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3e:	e8 48 d7 01 00       	call   c002758b <__adddf3>
c0009e43:	5d                   	pop    ebp
c0009e44:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e48:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e4c:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e52:	e8 a8 e7 01 00       	call   c00285ff <__extendsfdf2>
c0009e57:	83 c4 10             	add    esp,0x10
c0009e5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e5e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e72:	e8 91 dd 01 00       	call   c0027c08 <__muldf3>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e82:	52                   	push   edx
c0009e83:	50                   	push   eax
c0009e84:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e8c:	e8 fa d6 01 00       	call   c002758b <__adddf3>
c0009e91:	83 c4 10             	add    esp,0x10
c0009e94:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e98:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e9c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ea0:	85 ff                	test   edi,edi
c0009ea2:	0f 8f d3 fe ff ff    	jg     c0009d7b <calc_output_stereo+0x1fb>
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb8:	e8 ce d6 01 00       	call   c002758b <__adddf3>
c0009ebd:	83 c4 10             	add    esp,0x10
c0009ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ec4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ecc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ed0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed8:	e8 2b dd 01 00       	call   c0027c08 <__muldf3>
c0009edd:	59                   	pop    ecx
c0009ede:	5b                   	pop    ebx
c0009edf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ee3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eef:	e8 e7 e5 01 00       	call   c00284db <__truncdfsf2>
c0009ef4:	83 c4 10             	add    esp,0x10
c0009ef7:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009efe:	89 03                	mov    DWORD PTR [ebx],eax
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f10:	e8 76 d6 01 00       	call   c002758b <__adddf3>
c0009f15:	83 c4 10             	add    esp,0x10
c0009f18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f30:	e8 d3 dc 01 00       	call   c0027c08 <__muldf3>
c0009f35:	5e                   	pop    esi
c0009f36:	5f                   	pop    edi
c0009f37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f47:	e8 8f e5 01 00       	call   c00284db <__truncdfsf2>
c0009f4c:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f53:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f56:	83 c4 7c             	add    esp,0x7c
c0009f59:	5b                   	pop    ebx
c0009f5a:	5e                   	pop    esi
c0009f5b:	5f                   	pop    edi
c0009f5c:	5d                   	pop    ebp
c0009f5d:	c3                   	ret    

c0009f5e <calc_output_quad>:
c0009f5e:	55                   	push   ebp
c0009f5f:	57                   	push   edi
c0009f60:	56                   	push   esi
c0009f61:	89 c6                	mov    esi,eax
c0009f63:	53                   	push   ebx
c0009f64:	83 ec 7c             	sub    esp,0x7c
c0009f67:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f6b:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f6f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f76:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f85:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f88:	e8 55 f9 ff ff       	call   c00098e2 <int_to_fp>
c0009f8d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f90:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f93:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f97:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f9b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f9f:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009fa3:	99                   	cdq    
c0009fa4:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fac:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009faf:	31 d2                	xor    edx,edx
c0009fb1:	0f af d8             	imul   ebx,eax
c0009fb4:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fbc:	0f af c7             	imul   eax,edi
c0009fbf:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fc3:	29 c1                	sub    ecx,eax
c0009fc5:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fcd:	31 c0                	xor    eax,eax
c0009fcf:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fe2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fe6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fea:	89 d8                	mov    eax,ebx
c0009fec:	83 c7 10             	add    edi,0x10
c0009fef:	e8 fc f8 ff ff       	call   c00098f0 <fp_to_double>
c0009ff4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ffc:	89 d8                	mov    eax,ebx
c0009ffe:	e8 e3 f8 ff ff       	call   c00098e6 <fp_to_int>
c000a003:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a007:	52                   	push   edx
c000a008:	52                   	push   edx
c000a009:	51                   	push   ecx
c000a00a:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a00e:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a012:	e8 09 cf 01 00       	call   c0026f20 <__subsf3>
c000a017:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01a:	e8 e0 e5 01 00       	call   c00285ff <__extendsfdf2>
c000a01f:	83 c4 10             	add    esp,0x10
c000a022:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a026:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a032:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a036:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03a:	e8 c9 db 01 00       	call   c0027c08 <__muldf3>
c000a03f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a043:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a047:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a04a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a04e:	e8 ac e5 01 00       	call   c00285ff <__extendsfdf2>
c000a053:	83 c4 10             	add    esp,0x10
c000a056:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05e:	52                   	push   edx
c000a05f:	50                   	push   eax
c000a060:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a064:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a068:	e8 1e d5 01 00       	call   c002758b <__adddf3>
c000a06d:	59                   	pop    ecx
c000a06e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a072:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a076:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a07c:	e8 7e e5 01 00       	call   c00285ff <__extendsfdf2>
c000a081:	83 c4 10             	add    esp,0x10
c000a084:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a088:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a094:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a098:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09c:	e8 67 db 01 00       	call   c0027c08 <__muldf3>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ac:	52                   	push   edx
c000a0ad:	50                   	push   eax
c000a0ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b6:	e8 d0 d4 01 00       	call   c002758b <__adddf3>
c000a0bb:	59                   	pop    ecx
c000a0bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0c0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0c4:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0ca:	e8 30 e5 01 00       	call   c00285ff <__extendsfdf2>
c000a0cf:	83 c4 10             	add    esp,0x10
c000a0d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ea:	e8 19 db 01 00       	call   c0027c08 <__muldf3>
c000a0ef:	83 c4 10             	add    esp,0x10
c000a0f2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0fa:	52                   	push   edx
c000a0fb:	50                   	push   eax
c000a0fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a100:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a104:	e8 82 d4 01 00       	call   c002758b <__adddf3>
c000a109:	59                   	pop    ecx
c000a10a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a10e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a112:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a118:	e8 e2 e4 01 00       	call   c00285ff <__extendsfdf2>
c000a11d:	83 c4 10             	add    esp,0x10
c000a120:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a124:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a130:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a134:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a138:	e8 cb da 01 00       	call   c0027c08 <__muldf3>
c000a13d:	83 c4 10             	add    esp,0x10
c000a140:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a144:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a148:	52                   	push   edx
c000a149:	50                   	push   eax
c000a14a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a152:	e8 34 d4 01 00       	call   c002758b <__adddf3>
c000a157:	59                   	pop    ecx
c000a158:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a15c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a160:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a166:	e8 94 e4 01 00       	call   c00285ff <__extendsfdf2>
c000a16b:	83 c4 10             	add    esp,0x10
c000a16e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a172:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a182:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a186:	e8 7d da 01 00       	call   c0027c08 <__muldf3>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a196:	52                   	push   edx
c000a197:	50                   	push   eax
c000a198:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a19c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1a0:	e8 e6 d3 01 00       	call   c002758b <__adddf3>
c000a1a5:	83 c4 10             	add    esp,0x10
c000a1a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1ac:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1b0:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1b4:	0f 89 30 fe ff ff    	jns    c0009fea <calc_output_quad+0x8c>
c000a1ba:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1c2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1c6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1ca:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1d2:	29 c8                	sub    eax,ecx
c000a1d4:	99                   	cdq    
c000a1d5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d9:	31 d2                	xor    edx,edx
c000a1db:	0f af d8             	imul   ebx,eax
c000a1de:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1e2:	40                   	inc    eax
c000a1e3:	01 cb                	add    ebx,ecx
c000a1e5:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1ea:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ee:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1f6:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a201:	31 c0                	xor    eax,eax
c000a203:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a207:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a20b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a20f:	89 d8                	mov    eax,ebx
c000a211:	83 ee 10             	sub    esi,0x10
c000a214:	e8 d7 f6 ff ff       	call   c00098f0 <fp_to_double>
c000a219:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a21d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a221:	89 d8                	mov    eax,ebx
c000a223:	e8 be f6 ff ff       	call   c00098e6 <fp_to_int>
c000a228:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a22c:	52                   	push   edx
c000a22d:	52                   	push   edx
c000a22e:	57                   	push   edi
c000a22f:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a233:	e8 e8 cc 01 00       	call   c0026f20 <__subsf3>
c000a238:	89 04 24             	mov    DWORD PTR [esp],eax
c000a23b:	e8 bf e3 01 00       	call   c00285ff <__extendsfdf2>
c000a240:	83 c4 10             	add    esp,0x10
c000a243:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a247:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a24b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a253:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a257:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a25b:	e8 a8 d9 01 00       	call   c0027c08 <__muldf3>
c000a260:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a26b:	e8 8f e3 01 00       	call   c00285ff <__extendsfdf2>
c000a270:	83 c4 10             	add    esp,0x10
c000a273:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a277:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a27b:	52                   	push   edx
c000a27c:	50                   	push   eax
c000a27d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a281:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a285:	e8 01 d3 01 00       	call   c002758b <__adddf3>
c000a28a:	59                   	pop    ecx
c000a28b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a28f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a293:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a299:	e8 61 e3 01 00       	call   c00285ff <__extendsfdf2>
c000a29e:	83 c4 10             	add    esp,0x10
c000a2a1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2a5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b9:	e8 4a d9 01 00       	call   c0027c08 <__muldf3>
c000a2be:	83 c4 10             	add    esp,0x10
c000a2c1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2c5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c9:	52                   	push   edx
c000a2ca:	50                   	push   eax
c000a2cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2d3:	e8 b3 d2 01 00       	call   c002758b <__adddf3>
c000a2d8:	5f                   	pop    edi
c000a2d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2dd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2e1:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2e7:	e8 13 e3 01 00       	call   c00285ff <__extendsfdf2>
c000a2ec:	83 c4 10             	add    esp,0x10
c000a2ef:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2f3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a303:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a307:	e8 fc d8 01 00       	call   c0027c08 <__muldf3>
c000a30c:	83 c4 10             	add    esp,0x10
c000a30f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a313:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a317:	52                   	push   edx
c000a318:	50                   	push   eax
c000a319:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a31d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a321:	e8 65 d2 01 00       	call   c002758b <__adddf3>
c000a326:	59                   	pop    ecx
c000a327:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a32b:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a32f:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a335:	e8 c5 e2 01 00       	call   c00285ff <__extendsfdf2>
c000a33a:	83 c4 10             	add    esp,0x10
c000a33d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a341:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a34d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a351:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a355:	e8 ae d8 01 00       	call   c0027c08 <__muldf3>
c000a35a:	83 c4 10             	add    esp,0x10
c000a35d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a361:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a365:	52                   	push   edx
c000a366:	50                   	push   eax
c000a367:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36f:	e8 17 d2 01 00       	call   c002758b <__adddf3>
c000a374:	5f                   	pop    edi
c000a375:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a379:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a37d:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a383:	e8 77 e2 01 00       	call   c00285ff <__extendsfdf2>
c000a388:	83 c4 10             	add    esp,0x10
c000a38b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a38f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a397:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a39b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3a3:	e8 60 d8 01 00       	call   c0027c08 <__muldf3>
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3b3:	52                   	push   edx
c000a3b4:	50                   	push   eax
c000a3b5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3bd:	e8 c9 d1 01 00       	call   c002758b <__adddf3>
c000a3c2:	83 c4 10             	add    esp,0x10
c000a3c5:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3cd:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3d1:	85 db                	test   ebx,ebx
c000a3d3:	0f 8f 36 fe ff ff    	jg     c000a20f <calc_output_quad+0x2b1>
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e9:	e8 9d d1 01 00       	call   c002758b <__adddf3>
c000a3ee:	83 c4 10             	add    esp,0x10
c000a3f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a405:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a409:	e8 fa d7 01 00       	call   c0027c08 <__muldf3>
c000a40e:	59                   	pop    ecx
c000a40f:	5b                   	pop    ebx
c000a410:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a414:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a418:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a420:	e8 b6 e0 01 00       	call   c00284db <__truncdfsf2>
c000a425:	83 c4 10             	add    esp,0x10
c000a428:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a42f:	89 06                	mov    DWORD PTR [esi],eax
c000a431:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a435:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a439:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a43d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a441:	e8 45 d1 01 00       	call   c002758b <__adddf3>
c000a446:	83 c4 10             	add    esp,0x10
c000a449:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a44d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a461:	e8 a2 d7 01 00       	call   c0027c08 <__muldf3>
c000a466:	5e                   	pop    esi
c000a467:	5f                   	pop    edi
c000a468:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a46c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 5e e0 01 00       	call   c00284db <__truncdfsf2>
c000a47d:	83 c4 10             	add    esp,0x10
c000a480:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a487:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a48a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a492:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a496:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a49a:	e8 ec d0 01 00       	call   c002758b <__adddf3>
c000a49f:	83 c4 10             	add    esp,0x10
c000a4a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ba:	e8 49 d7 01 00       	call   c0027c08 <__muldf3>
c000a4bf:	5d                   	pop    ebp
c000a4c0:	59                   	pop    ecx
c000a4c1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 05 e0 01 00       	call   c00284db <__truncdfsf2>
c000a4d6:	83 c4 10             	add    esp,0x10
c000a4d9:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4e0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4f3:	e8 93 d0 01 00       	call   c002758b <__adddf3>
c000a4f8:	83 c4 10             	add    esp,0x10
c000a4fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a513:	e8 f0 d6 01 00       	call   c0027c08 <__muldf3>
c000a518:	5b                   	pop    ebx
c000a519:	5e                   	pop    esi
c000a51a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a51e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a522:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a526:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52a:	e8 ac df 01 00       	call   c00284db <__truncdfsf2>
c000a52f:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a536:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a539:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a53f:	5b                   	pop    ebx
c000a540:	5e                   	pop    esi
c000a541:	5f                   	pop    edi
c000a542:	5d                   	pop    ebp
c000a543:	c3                   	ret    

c000a544 <calc_output_hex>:
c000a544:	55                   	push   ebp
c000a545:	89 cd                	mov    ebp,ecx
c000a547:	57                   	push   edi
c000a548:	56                   	push   esi
c000a549:	53                   	push   ebx
c000a54a:	89 c3                	mov    ebx,eax
c000a54c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a552:	89 14 24             	mov    DWORD PTR [esp],edx
c000a555:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a55c:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a563:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a567:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a56b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a56e:	e8 6f f3 ff ff       	call   c00098e2 <int_to_fp>
c000a573:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a576:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a57a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a57d:	29 c8                	sub    eax,ecx
c000a57f:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a583:	99                   	cdq    
c000a584:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a58c:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a58f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a597:	0f af f8             	imul   edi,eax
c000a59a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a59d:	01 cf                	add    edi,ecx
c000a59f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a5a3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a5a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5aa:	0f af c2             	imul   eax,edx
c000a5ad:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5b1:	29 c1                	sub    ecx,eax
c000a5b3:	31 d2                	xor    edx,edx
c000a5b5:	31 c0                	xor    eax,eax
c000a5b7:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5ce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5d6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5e2:	89 f8                	mov    eax,edi
c000a5e4:	e8 07 f3 ff ff       	call   c00098f0 <fp_to_double>
c000a5e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5f1:	89 f8                	mov    eax,edi
c000a5f3:	e8 ee f2 ff ff       	call   c00098e6 <fp_to_int>
c000a5f8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5fc:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5ff:	52                   	push   edx
c000a600:	52                   	push   edx
c000a601:	51                   	push   ecx
c000a602:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a606:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a60d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a611:	e8 0a c9 01 00       	call   c0026f20 <__subsf3>
c000a616:	89 04 24             	mov    DWORD PTR [esp],eax
c000a619:	e8 e1 df 01 00       	call   c00285ff <__extendsfdf2>
c000a61e:	83 c4 10             	add    esp,0x10
c000a621:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a625:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a631:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a635:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a639:	e8 ca d5 01 00       	call   c0027c08 <__muldf3>
c000a63e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a642:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a646:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a649:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a64d:	e8 ad df 01 00       	call   c00285ff <__extendsfdf2>
c000a652:	83 c4 10             	add    esp,0x10
c000a655:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a659:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a65d:	52                   	push   edx
c000a65e:	50                   	push   eax
c000a65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a667:	e8 1f cf 01 00       	call   c002758b <__adddf3>
c000a66c:	59                   	pop    ecx
c000a66d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a671:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a675:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a67b:	e8 7f df 01 00       	call   c00285ff <__extendsfdf2>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a687:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a693:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a697:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a69b:	e8 68 d5 01 00       	call   c0027c08 <__muldf3>
c000a6a0:	83 c4 10             	add    esp,0x10
c000a6a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6a7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6ab:	52                   	push   edx
c000a6ac:	50                   	push   eax
c000a6ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b5:	e8 d1 ce 01 00       	call   c002758b <__adddf3>
c000a6ba:	59                   	pop    ecx
c000a6bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6bf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6c3:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c9:	e8 31 df 01 00       	call   c00285ff <__extendsfdf2>
c000a6ce:	83 c4 10             	add    esp,0x10
c000a6d1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6d5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e9:	e8 1a d5 01 00       	call   c0027c08 <__muldf3>
c000a6ee:	83 c4 10             	add    esp,0x10
c000a6f1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6f5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f9:	52                   	push   edx
c000a6fa:	50                   	push   eax
c000a6fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a703:	e8 83 ce 01 00       	call   c002758b <__adddf3>
c000a708:	59                   	pop    ecx
c000a709:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a70d:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a711:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a717:	e8 e3 de 01 00       	call   c00285ff <__extendsfdf2>
c000a71c:	83 c4 10             	add    esp,0x10
c000a71f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a723:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a733:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a737:	e8 cc d4 01 00       	call   c0027c08 <__muldf3>
c000a73c:	83 c4 10             	add    esp,0x10
c000a73f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a743:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a747:	52                   	push   edx
c000a748:	50                   	push   eax
c000a749:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a74d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a751:	e8 35 ce 01 00       	call   c002758b <__adddf3>
c000a756:	59                   	pop    ecx
c000a757:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a75b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a75f:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a765:	e8 95 de 01 00       	call   c00285ff <__extendsfdf2>
c000a76a:	83 c4 10             	add    esp,0x10
c000a76d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a771:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a775:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a779:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a77d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a781:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a785:	e8 7e d4 01 00       	call   c0027c08 <__muldf3>
c000a78a:	83 c4 10             	add    esp,0x10
c000a78d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a791:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a795:	52                   	push   edx
c000a796:	50                   	push   eax
c000a797:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79f:	e8 e7 cd 01 00       	call   c002758b <__adddf3>
c000a7a4:	59                   	pop    ecx
c000a7a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a9:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7ad:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7b3:	e8 47 de 01 00       	call   c00285ff <__extendsfdf2>
c000a7b8:	83 c4 10             	add    esp,0x10
c000a7bb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7bf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7d3:	e8 30 d4 01 00       	call   c0027c08 <__muldf3>
c000a7d8:	83 c4 10             	add    esp,0x10
c000a7db:	83 c6 18             	add    esi,0x18
c000a7de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7e6:	52                   	push   edx
c000a7e7:	50                   	push   eax
c000a7e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7f0:	e8 96 cd 01 00       	call   c002758b <__adddf3>
c000a7f5:	59                   	pop    ecx
c000a7f6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7fa:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7fe:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a804:	e8 f6 dd 01 00       	call   c00285ff <__extendsfdf2>
c000a809:	83 c4 10             	add    esp,0x10
c000a80c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a810:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a814:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a81c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a820:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a824:	e8 df d3 01 00       	call   c0027c08 <__muldf3>
c000a829:	83 c4 10             	add    esp,0x10
c000a82c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a830:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a834:	52                   	push   edx
c000a835:	50                   	push   eax
c000a836:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83e:	e8 48 cd 01 00       	call   c002758b <__adddf3>
c000a843:	83 c4 10             	add    esp,0x10
c000a846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a84e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a851:	0f 89 8b fd ff ff    	jns    c000a5e2 <calc_output_hex+0x9e>
c000a857:	31 f6                	xor    esi,esi
c000a859:	31 ff                	xor    edi,edi
c000a85b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a85f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a862:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a866:	29 e9                	sub    ecx,ebp
c000a868:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a86c:	29 c8                	sub    eax,ecx
c000a86e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a871:	99                   	cdq    
c000a872:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a876:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a879:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a87d:	0f af e8             	imul   ebp,eax
c000a880:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a884:	40                   	inc    eax
c000a885:	01 cd                	add    ebp,ecx
c000a887:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a88c:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a890:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a894:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a898:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a89b:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a89f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a8a3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a8a7:	89 e8                	mov    eax,ebp
c000a8a9:	e8 42 f0 ff ff       	call   c00098f0 <fp_to_double>
c000a8ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8b6:	89 e8                	mov    eax,ebp
c000a8b8:	e8 29 f0 ff ff       	call   c00098e6 <fp_to_int>
c000a8bd:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8c1:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8c4:	52                   	push   edx
c000a8c5:	52                   	push   edx
c000a8c6:	51                   	push   ecx
c000a8c7:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8ce:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8d5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d9:	e8 42 c6 01 00       	call   c0026f20 <__subsf3>
c000a8de:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8e1:	e8 19 dd 01 00       	call   c00285ff <__extendsfdf2>
c000a8e6:	83 c4 10             	add    esp,0x10
c000a8e9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ed:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8fd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a901:	e8 02 d3 01 00       	call   c0027c08 <__muldf3>
c000a906:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a90d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a911:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a914:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a918:	e8 e2 dc 01 00       	call   c00285ff <__extendsfdf2>
c000a91d:	83 c4 10             	add    esp,0x10
c000a920:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a924:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a928:	52                   	push   edx
c000a929:	50                   	push   eax
c000a92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a932:	e8 54 cc 01 00       	call   c002758b <__adddf3>
c000a937:	59                   	pop    ecx
c000a938:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a93c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a940:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a946:	e8 b4 dc 01 00       	call   c00285ff <__extendsfdf2>
c000a94b:	83 c4 10             	add    esp,0x10
c000a94e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a952:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a956:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a962:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a966:	e8 9d d2 01 00       	call   c0027c08 <__muldf3>
c000a96b:	83 c4 10             	add    esp,0x10
c000a96e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a972:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a976:	52                   	push   edx
c000a977:	50                   	push   eax
c000a978:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a97c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a980:	e8 06 cc 01 00       	call   c002758b <__adddf3>
c000a985:	59                   	pop    ecx
c000a986:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a98a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a98e:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a994:	e8 66 dc 01 00       	call   c00285ff <__extendsfdf2>
c000a999:	83 c4 10             	add    esp,0x10
c000a99c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9a0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ac:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b4:	e8 4f d2 01 00       	call   c0027c08 <__muldf3>
c000a9b9:	83 c4 10             	add    esp,0x10
c000a9bc:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9c4:	52                   	push   edx
c000a9c5:	50                   	push   eax
c000a9c6:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ca:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ce:	e8 b8 cb 01 00       	call   c002758b <__adddf3>
c000a9d3:	59                   	pop    ecx
c000a9d4:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d8:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9dc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9e2:	e8 18 dc 01 00       	call   c00285ff <__extendsfdf2>
c000a9e7:	83 c4 10             	add    esp,0x10
c000a9ea:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ee:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9fa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fe:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa02:	e8 01 d2 01 00       	call   c0027c08 <__muldf3>
c000aa07:	83 c4 10             	add    esp,0x10
c000aa0a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa0e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa12:	52                   	push   edx
c000aa13:	50                   	push   eax
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa1c:	e8 6a cb 01 00       	call   c002758b <__adddf3>
c000aa21:	59                   	pop    ecx
c000aa22:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa26:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa2a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa30:	e8 ca db 01 00       	call   c00285ff <__extendsfdf2>
c000aa35:	83 c4 10             	add    esp,0x10
c000aa38:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa3c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa48:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa4c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa50:	e8 b3 d1 01 00       	call   c0027c08 <__muldf3>
c000aa55:	83 c4 10             	add    esp,0x10
c000aa58:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa5c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa60:	52                   	push   edx
c000aa61:	50                   	push   eax
c000aa62:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa66:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa6a:	e8 1c cb 01 00       	call   c002758b <__adddf3>
c000aa6f:	59                   	pop    ecx
c000aa70:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa74:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa78:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa7e:	e8 7c db 01 00       	call   c00285ff <__extendsfdf2>
c000aa83:	83 c4 10             	add    esp,0x10
c000aa86:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa8a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa96:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9e:	e8 65 d1 01 00       	call   c0027c08 <__muldf3>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	83 eb 18             	sub    ebx,0x18
c000aaa9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaad:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab1:	52                   	push   edx
c000aab2:	50                   	push   eax
c000aab3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aabb:	e8 cb ca 01 00       	call   c002758b <__adddf3>
c000aac0:	59                   	pop    ecx
c000aac1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aac5:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac9:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aacf:	e8 2b db 01 00       	call   c00285ff <__extendsfdf2>
c000aad4:	83 c4 10             	add    esp,0x10
c000aad7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aadb:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aadf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaeb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaef:	e8 14 d1 01 00       	call   c0027c08 <__muldf3>
c000aaf4:	83 c4 10             	add    esp,0x10
c000aaf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aafb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaff:	52                   	push   edx
c000ab00:	50                   	push   eax
c000ab01:	57                   	push   edi
c000ab02:	56                   	push   esi
c000ab03:	e8 83 ca 01 00       	call   c002758b <__adddf3>
c000ab08:	83 c4 10             	add    esp,0x10
c000ab0b:	89 c6                	mov    esi,eax
c000ab0d:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab10:	89 d7                	mov    edi,edx
c000ab12:	85 ed                	test   ebp,ebp
c000ab14:	0f 8f 8d fd ff ff    	jg     c000a8a7 <calc_output_hex+0x363>
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab2a:	e8 5c ca 01 00       	call   c002758b <__adddf3>
c000ab2f:	83 c4 10             	add    esp,0x10
c000ab32:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab49:	e8 ba d0 01 00       	call   c0027c08 <__muldf3>
c000ab4e:	59                   	pop    ecx
c000ab4f:	5b                   	pop    ebx
c000ab50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab60:	e8 76 d9 01 00       	call   c00284db <__truncdfsf2>
c000ab65:	83 c4 10             	add    esp,0x10
c000ab68:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab6f:	89 03                	mov    DWORD PTR [ebx],eax
c000ab71:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab81:	e8 05 ca 01 00       	call   c002758b <__adddf3>
c000ab86:	83 c4 10             	add    esp,0x10
c000ab89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aba0:	e8 63 d0 01 00       	call   c0027c08 <__muldf3>
c000aba5:	5d                   	pop    ebp
c000aba6:	59                   	pop    ecx
c000aba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb7:	e8 1f d9 01 00       	call   c00284db <__truncdfsf2>
c000abbc:	83 c4 10             	add    esp,0x10
c000abbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abc6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abcd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abd1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd9:	e8 ad c9 01 00       	call   c002758b <__adddf3>
c000abde:	83 c4 10             	add    esp,0x10
c000abe1:	89 04 24             	mov    DWORD PTR [esp],eax
c000abe4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf8:	e8 0b d0 01 00       	call   c0027c08 <__muldf3>
c000abfd:	5b                   	pop    ebx
c000abfe:	5d                   	pop    ebp
c000abff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0f:	e8 c7 d8 01 00       	call   c00284db <__truncdfsf2>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac21:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac25:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac31:	e8 55 c9 01 00       	call   c002758b <__adddf3>
c000ac36:	83 c4 10             	add    esp,0x10
c000ac39:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac50:	e8 b3 cf 01 00       	call   c0027c08 <__muldf3>
c000ac55:	59                   	pop    ecx
c000ac56:	5b                   	pop    ebx
c000ac57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac67:	e8 6f d8 01 00       	call   c00284db <__truncdfsf2>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac76:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac89:	e8 fd c8 01 00       	call   c002758b <__adddf3>
c000ac8e:	83 c4 10             	add    esp,0x10
c000ac91:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac94:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca8:	e8 5b cf 01 00       	call   c0027c08 <__muldf3>
c000acad:	5d                   	pop    ebp
c000acae:	59                   	pop    ecx
c000acaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acb7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbf:	e8 17 d8 01 00       	call   c00284db <__truncdfsf2>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acce:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acd1:	57                   	push   edi
c000acd2:	56                   	push   esi
c000acd3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acdb:	e8 ab c8 01 00       	call   c002758b <__adddf3>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ace6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acfa:	e8 09 cf 01 00       	call   c0027c08 <__muldf3>
c000acff:	5b                   	pop    ebx
c000ad00:	5e                   	pop    esi
c000ad01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad11:	e8 c5 d7 01 00       	call   c00284db <__truncdfsf2>
c000ad16:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad1d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad20:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad26:	5b                   	pop    ebx
c000ad27:	5e                   	pop    esi
c000ad28:	5f                   	pop    edi
c000ad29:	5d                   	pop    ebp
c000ad2a:	c3                   	ret    

c000ad2b <sinc_reset>:
c000ad2b:	56                   	push   esi
c000ad2c:	53                   	push   ebx
c000ad2d:	51                   	push   ecx
c000ad2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad32:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad35:	85 db                	test   ebx,ebx
c000ad37:	74 59                	je     c000ad92 <sinc_reset+0x67>
c000ad39:	31 d2                	xor    edx,edx
c000ad3b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad42:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad45:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad48:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad4f:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad56:	31 c0                	xor    eax,eax
c000ad58:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad5e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad64:	52                   	push   edx
c000ad65:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad68:	c1 e0 02             	shl    eax,0x2
c000ad6b:	50                   	push   eax
c000ad6c:	6a 00                	push   0x0
c000ad6e:	56                   	push   esi
c000ad6f:	e8 0c 5a ff ff       	call   c0000780 <memset>
c000ad74:	83 c4 0c             	add    esp,0xc
c000ad77:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad7a:	c1 e0 02             	shl    eax,0x2
c000ad7d:	50                   	push   eax
c000ad7e:	68 aa 00 00 00       	push   0xaa
c000ad83:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad86:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad89:	50                   	push   eax
c000ad8a:	e8 f1 59 ff ff       	call   c0000780 <memset>
c000ad8f:	83 c4 10             	add    esp,0x10
c000ad92:	58                   	pop    eax
c000ad93:	5b                   	pop    ebx
c000ad94:	5e                   	pop    esi
c000ad95:	c3                   	ret    

c000ad96 <calc_output_multi>:
c000ad96:	55                   	push   ebp
c000ad97:	57                   	push   edi
c000ad98:	56                   	push   esi
c000ad99:	89 c6                	mov    esi,eax
c000ad9b:	53                   	push   ebx
c000ad9c:	83 ec 4c             	sub    esp,0x4c
c000ad9f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ada3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ada7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000adab:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000adaf:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adb7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adbb:	8d 46 44             	lea    eax,[esi+0x44]
c000adbe:	89 04 24             	mov    DWORD PTR [esp],eax
c000adc1:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adcb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adce:	e8 0f eb ff ff       	call   c00098e2 <int_to_fp>
c000add3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000add6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adda:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adde:	99                   	cdq    
c000addf:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ade3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ade7:	0f af d0             	imul   edx,eax
c000adea:	0f af c3             	imul   eax,ebx
c000aded:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adf1:	29 c1                	sub    ecx,eax
c000adf3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adfb:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ae02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae06:	57                   	push   edi
c000ae07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae0b:	6a 00                	push   0x0
c000ae0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae11:	e8 6a 59 ff ff       	call   c0000780 <memset>
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae1d:	89 df                	mov    edi,ebx
c000ae1f:	e8 cc ea ff ff       	call   c00098f0 <fp_to_double>
c000ae24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae30:	e8 b1 ea ff ff       	call   c00098e6 <fp_to_int>
c000ae35:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae38:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae3b:	51                   	push   ecx
c000ae3c:	51                   	push   ecx
c000ae3d:	55                   	push   ebp
c000ae3e:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae42:	e8 d9 c0 01 00       	call   c0026f20 <__subsf3>
c000ae47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae4a:	e8 b0 d7 01 00       	call   c00285ff <__extendsfdf2>
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae6a:	e8 99 cd 01 00       	call   c0027c08 <__muldf3>
c000ae6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae7a:	e8 80 d7 01 00       	call   c00285ff <__extendsfdf2>
c000ae7f:	83 c4 10             	add    esp,0x10
c000ae82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae8a:	52                   	push   edx
c000ae8b:	50                   	push   eax
c000ae8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae94:	e8 f2 c6 01 00       	call   c002758b <__adddf3>
c000ae99:	83 c4 10             	add    esp,0x10
c000ae9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aea0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aea4:	89 f8                	mov    eax,edi
c000aea6:	b9 08 00 00 00       	mov    ecx,0x8
c000aeab:	99                   	cdq    
c000aeac:	f7 f9                	idiv   ecx
c000aeae:	4a                   	dec    edx
c000aeaf:	83 fa 06             	cmp    edx,0x6
c000aeb2:	77 07                	ja     c000aebb <calc_output_multi+0x125>
c000aeb4:	ff 24 95 24 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61dc]
c000aebb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aebe:	4f                   	dec    edi
c000aebf:	83 ec 0c             	sub    esp,0xc
c000aec2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aec5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aed0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aed4:	e8 26 d7 01 00       	call   c00285ff <__extendsfdf2>
c000aed9:	83 c4 10             	add    esp,0x10
c000aedc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef4:	e8 0f cd 01 00       	call   c0027c08 <__muldf3>
c000aef9:	83 c4 10             	add    esp,0x10
c000aefc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af00:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af04:	52                   	push   edx
c000af05:	50                   	push   eax
c000af06:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af09:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af0c:	e8 7a c6 01 00       	call   c002758b <__adddf3>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af17:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af1a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af1d:	4f                   	dec    edi
c000af1e:	83 ec 0c             	sub    esp,0xc
c000af21:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af28:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af2f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af33:	e8 c7 d6 01 00       	call   c00285ff <__extendsfdf2>
c000af38:	83 c4 10             	add    esp,0x10
c000af3b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af3f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af53:	e8 b0 cc 01 00       	call   c0027c08 <__muldf3>
c000af58:	83 c4 10             	add    esp,0x10
c000af5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af63:	52                   	push   edx
c000af64:	50                   	push   eax
c000af65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af6b:	e8 1b c6 01 00       	call   c002758b <__adddf3>
c000af70:	83 c4 10             	add    esp,0x10
c000af73:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af76:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af7c:	4f                   	dec    edi
c000af7d:	83 ec 0c             	sub    esp,0xc
c000af80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af92:	e8 68 d6 01 00       	call   c00285ff <__extendsfdf2>
c000af97:	83 c4 10             	add    esp,0x10
c000af9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afb2:	e8 51 cc 01 00       	call   c0027c08 <__muldf3>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afc2:	52                   	push   edx
c000afc3:	50                   	push   eax
c000afc4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afc7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afca:	e8 bc c5 01 00       	call   c002758b <__adddf3>
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afd5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afdb:	4f                   	dec    edi
c000afdc:	83 ec 0c             	sub    esp,0xc
c000afdf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afe2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afe6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aff1:	e8 09 d6 01 00       	call   c00285ff <__extendsfdf2>
c000aff6:	83 c4 10             	add    esp,0x10
c000aff9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000affd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b005:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b009:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b00d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b011:	e8 f2 cb 01 00       	call   c0027c08 <__muldf3>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b021:	52                   	push   edx
c000b022:	50                   	push   eax
c000b023:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b026:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b029:	e8 5d c5 01 00       	call   c002758b <__adddf3>
c000b02e:	83 c4 10             	add    esp,0x10
c000b031:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b034:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b037:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b03a:	4f                   	dec    edi
c000b03b:	83 ec 0c             	sub    esp,0xc
c000b03e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b041:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b045:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b04c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b050:	e8 aa d5 01 00       	call   c00285ff <__extendsfdf2>
c000b055:	83 c4 10             	add    esp,0x10
c000b058:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b05c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b068:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b06c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b070:	e8 93 cb 01 00       	call   c0027c08 <__muldf3>
c000b075:	83 c4 10             	add    esp,0x10
c000b078:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b080:	52                   	push   edx
c000b081:	50                   	push   eax
c000b082:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b085:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b088:	e8 fe c4 01 00       	call   c002758b <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b093:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b096:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b099:	4f                   	dec    edi
c000b09a:	83 ec 0c             	sub    esp,0xc
c000b09d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0a4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0ab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0af:	e8 4b d5 01 00       	call   c00285ff <__extendsfdf2>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0bb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cf:	e8 34 cb 01 00       	call   c0027c08 <__muldf3>
c000b0d4:	83 c4 10             	add    esp,0x10
c000b0d7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0db:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0df:	52                   	push   edx
c000b0e0:	50                   	push   eax
c000b0e1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0e4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0e7:	e8 9f c4 01 00       	call   c002758b <__adddf3>
c000b0ec:	83 c4 10             	add    esp,0x10
c000b0ef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0f2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f8:	4f                   	dec    edi
c000b0f9:	83 ec 0c             	sub    esp,0xc
c000b0fc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b103:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b10a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b10e:	e8 ec d4 01 00       	call   c00285ff <__extendsfdf2>
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b11a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b11e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b126:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12e:	e8 d5 ca 01 00       	call   c0027c08 <__muldf3>
c000b133:	83 c4 10             	add    esp,0x10
c000b136:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b13a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13e:	52                   	push   edx
c000b13f:	50                   	push   eax
c000b140:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b143:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b146:	e8 40 c4 01 00       	call   c002758b <__adddf3>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b151:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b154:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b157:	4f                   	dec    edi
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b15e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b162:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b169:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b16d:	e8 8d d4 01 00       	call   c00285ff <__extendsfdf2>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b179:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b17d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b181:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b185:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b189:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b18d:	e8 76 ca 01 00       	call   c0027c08 <__muldf3>
c000b192:	83 c4 10             	add    esp,0x10
c000b195:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b199:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b19d:	52                   	push   edx
c000b19e:	50                   	push   eax
c000b19f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1a5:	e8 e1 c3 01 00       	call   c002758b <__adddf3>
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1b3:	85 ff                	test   edi,edi
c000b1b5:	0f 8f e9 fc ff ff    	jg     c000aea4 <calc_output_multi+0x10e>
c000b1bb:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1bf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1c3:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1c7:	0f 89 4c fc ff ff    	jns    c000ae19 <calc_output_multi+0x83>
c000b1cd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1d5:	29 c8                	sub    eax,ecx
c000b1d7:	99                   	cdq    
c000b1d8:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1e0:	0f af d0             	imul   edx,eax
c000b1e3:	40                   	inc    eax
c000b1e4:	01 d1                	add    ecx,edx
c000b1e6:	0f af c3             	imul   eax,ebx
c000b1e9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ed:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1f4:	55                   	push   ebp
c000b1f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f9:	6a 00                	push   0x0
c000b1fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1ff:	e8 7c 55 ff ff       	call   c0000780 <memset>
c000b204:	83 c4 10             	add    esp,0x10
c000b207:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b20b:	e8 e0 e6 ff ff       	call   c00098f0 <fp_to_double>
c000b210:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b214:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b218:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b21c:	e8 c5 e6 ff ff       	call   c00098e6 <fp_to_int>
c000b221:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b224:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b227:	57                   	push   edi
c000b228:	57                   	push   edi
c000b229:	89 df                	mov    edi,ebx
c000b22b:	55                   	push   ebp
c000b22c:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b230:	e8 eb bc 01 00       	call   c0026f20 <__subsf3>
c000b235:	89 04 24             	mov    DWORD PTR [esp],eax
c000b238:	e8 c2 d3 01 00       	call   c00285ff <__extendsfdf2>
c000b23d:	83 c4 10             	add    esp,0x10
c000b240:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b244:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b24c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b250:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b254:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b258:	e8 ab c9 01 00       	call   c0027c08 <__muldf3>
c000b25d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b260:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b264:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b268:	e8 92 d3 01 00       	call   c00285ff <__extendsfdf2>
c000b26d:	83 c4 10             	add    esp,0x10
c000b270:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b274:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b278:	52                   	push   edx
c000b279:	50                   	push   eax
c000b27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b282:	e8 04 c3 01 00       	call   c002758b <__adddf3>
c000b287:	83 c4 10             	add    esp,0x10
c000b28a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b28e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b292:	89 f8                	mov    eax,edi
c000b294:	b9 08 00 00 00       	mov    ecx,0x8
c000b299:	99                   	cdq    
c000b29a:	f7 f9                	idiv   ecx
c000b29c:	4a                   	dec    edx
c000b29d:	83 fa 06             	cmp    edx,0x6
c000b2a0:	77 07                	ja     c000b2a9 <calc_output_multi+0x513>
c000b2a2:	ff 24 95 40 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61c0]
c000b2a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ad:	4f                   	dec    edi
c000b2ae:	83 ec 0c             	sub    esp,0xc
c000b2b1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2bf:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2c3:	e8 37 d3 01 00       	call   c00285ff <__extendsfdf2>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2e3:	e8 20 c9 01 00       	call   c0027c08 <__muldf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f3:	52                   	push   edx
c000b2f4:	50                   	push   eax
c000b2f5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2fb:	e8 8b c2 01 00       	call   c002758b <__adddf3>
c000b300:	83 c4 10             	add    esp,0x10
c000b303:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b306:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b30d:	4f                   	dec    edi
c000b30e:	83 ec 0c             	sub    esp,0xc
c000b311:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b314:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b318:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b31f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b323:	e8 d7 d2 01 00       	call   c00285ff <__extendsfdf2>
c000b328:	83 c4 10             	add    esp,0x10
c000b32b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b32f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b333:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b337:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b33b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b343:	e8 c0 c8 01 00       	call   c0027c08 <__muldf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b353:	52                   	push   edx
c000b354:	50                   	push   eax
c000b355:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b358:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b35b:	e8 2b c2 01 00       	call   c002758b <__adddf3>
c000b360:	83 c4 10             	add    esp,0x10
c000b363:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b366:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b369:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b36d:	4f                   	dec    edi
c000b36e:	83 ec 0c             	sub    esp,0xc
c000b371:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b374:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b378:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b37f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b383:	e8 77 d2 01 00       	call   c00285ff <__extendsfdf2>
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b38f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b39b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3a3:	e8 60 c8 01 00       	call   c0027c08 <__muldf3>
c000b3a8:	83 c4 10             	add    esp,0x10
c000b3ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b3:	52                   	push   edx
c000b3b4:	50                   	push   eax
c000b3b5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3bb:	e8 cb c1 01 00       	call   c002758b <__adddf3>
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3c6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3cd:	4f                   	dec    edi
c000b3ce:	83 ec 0c             	sub    esp,0xc
c000b3d1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3df:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3e3:	e8 17 d2 01 00       	call   c00285ff <__extendsfdf2>
c000b3e8:	83 c4 10             	add    esp,0x10
c000b3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b403:	e8 00 c8 01 00       	call   c0027c08 <__muldf3>
c000b408:	83 c4 10             	add    esp,0x10
c000b40b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b413:	52                   	push   edx
c000b414:	50                   	push   eax
c000b415:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b418:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b41b:	e8 6b c1 01 00       	call   c002758b <__adddf3>
c000b420:	83 c4 10             	add    esp,0x10
c000b423:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b426:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b429:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b42d:	4f                   	dec    edi
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b434:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b438:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b43f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b443:	e8 b7 d1 01 00       	call   c00285ff <__extendsfdf2>
c000b448:	83 c4 10             	add    esp,0x10
c000b44b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b44f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b463:	e8 a0 c7 01 00       	call   c0027c08 <__muldf3>
c000b468:	83 c4 10             	add    esp,0x10
c000b46b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b473:	52                   	push   edx
c000b474:	50                   	push   eax
c000b475:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b478:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b47b:	e8 0b c1 01 00       	call   c002758b <__adddf3>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b486:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48d:	4f                   	dec    edi
c000b48e:	83 ec 0c             	sub    esp,0xc
c000b491:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b494:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b498:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b49f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4a3:	e8 57 d1 01 00       	call   c00285ff <__extendsfdf2>
c000b4a8:	83 c4 10             	add    esp,0x10
c000b4ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4c3:	e8 40 c7 01 00       	call   c0027c08 <__muldf3>
c000b4c8:	83 c4 10             	add    esp,0x10
c000b4cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d3:	52                   	push   edx
c000b4d4:	50                   	push   eax
c000b4d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4db:	e8 ab c0 01 00       	call   c002758b <__adddf3>
c000b4e0:	83 c4 10             	add    esp,0x10
c000b4e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ed:	4f                   	dec    edi
c000b4ee:	83 ec 0c             	sub    esp,0xc
c000b4f1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4ff:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b503:	e8 f7 d0 01 00       	call   c00285ff <__extendsfdf2>
c000b508:	83 c4 10             	add    esp,0x10
c000b50b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b50f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b517:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b523:	e8 e0 c6 01 00       	call   c0027c08 <__muldf3>
c000b528:	83 c4 10             	add    esp,0x10
c000b52b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b533:	52                   	push   edx
c000b534:	50                   	push   eax
c000b535:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b538:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b53b:	e8 4b c0 01 00       	call   c002758b <__adddf3>
c000b540:	83 c4 10             	add    esp,0x10
c000b543:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b546:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54d:	4f                   	dec    edi
c000b54e:	83 ec 0c             	sub    esp,0xc
c000b551:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b554:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b558:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b55f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b563:	e8 97 d0 01 00       	call   c00285ff <__extendsfdf2>
c000b568:	83 c4 10             	add    esp,0x10
c000b56b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b56f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b573:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b583:	e8 80 c6 01 00       	call   c0027c08 <__muldf3>
c000b588:	83 c4 10             	add    esp,0x10
c000b58b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b58f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b593:	52                   	push   edx
c000b594:	50                   	push   eax
c000b595:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b598:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b59b:	e8 eb bf 01 00       	call   c002758b <__adddf3>
c000b5a0:	83 c4 10             	add    esp,0x10
c000b5a3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5a6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a9:	85 ff                	test   edi,edi
c000b5ab:	0f 8f e1 fc ff ff    	jg     c000b292 <calc_output_multi+0x4fc>
c000b5b1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5b5:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b9:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5c2:	0f 8f 3f fc ff ff    	jg     c000b207 <calc_output_multi+0x471>
c000b5c8:	be 08 00 00 00       	mov    esi,0x8
c000b5cd:	89 d8                	mov    eax,ebx
c000b5cf:	99                   	cdq    
c000b5d0:	f7 fe                	idiv   esi
c000b5d2:	4a                   	dec    edx
c000b5d3:	83 fa 06             	cmp    edx,0x6
c000b5d6:	77 07                	ja     c000b5df <calc_output_multi+0x849>
c000b5d8:	ff 24 95 5c 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61a4]
c000b5df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e3:	4b                   	dec    ebx
c000b5e4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f6:	e8 90 bf 01 00       	call   c002758b <__adddf3>
c000b5fb:	83 c4 10             	add    esp,0x10
c000b5fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b602:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b612:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b616:	e8 ed c5 01 00       	call   c0027c08 <__muldf3>
c000b61b:	5d                   	pop    ebp
c000b61c:	59                   	pop    ecx
c000b61d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b621:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	e8 a9 ce 01 00       	call   c00284db <__truncdfsf2>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b639:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b63c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b640:	4b                   	dec    ebx
c000b641:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b645:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b64c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b650:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b653:	e8 33 bf 01 00       	call   c002758b <__adddf3>
c000b658:	83 c4 10             	add    esp,0x10
c000b65b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b65f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b667:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b673:	e8 90 c5 01 00       	call   c0027c08 <__muldf3>
c000b678:	59                   	pop    ecx
c000b679:	5f                   	pop    edi
c000b67a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b67e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b682:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	e8 4c ce 01 00       	call   c00284db <__truncdfsf2>
c000b68f:	83 c4 10             	add    esp,0x10
c000b692:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b696:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b69d:	4b                   	dec    ebx
c000b69e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6b0:	e8 d6 be 01 00       	call   c002758b <__adddf3>
c000b6b5:	83 c4 10             	add    esp,0x10
c000b6b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d0:	e8 33 c5 01 00       	call   c0027c08 <__muldf3>
c000b6d5:	5f                   	pop    edi
c000b6d6:	5d                   	pop    ebp
c000b6d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	e8 ef cd 01 00       	call   c00284db <__truncdfsf2>
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6f3:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6fa:	4b                   	dec    ebx
c000b6fb:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ff:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b702:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b706:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b70a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b70d:	e8 79 be 01 00       	call   c002758b <__adddf3>
c000b712:	83 c4 10             	add    esp,0x10
c000b715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b719:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b71d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b725:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b729:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b72d:	e8 d6 c4 01 00       	call   c0027c08 <__muldf3>
c000b732:	5d                   	pop    ebp
c000b733:	59                   	pop    ecx
c000b734:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b738:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	e8 92 cd 01 00       	call   c00284db <__truncdfsf2>
c000b749:	83 c4 10             	add    esp,0x10
c000b74c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b750:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b757:	4b                   	dec    ebx
c000b758:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b75f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b763:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b767:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b76a:	e8 1c be 01 00       	call   c002758b <__adddf3>
c000b76f:	83 c4 10             	add    esp,0x10
c000b772:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b776:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b78a:	e8 79 c4 01 00       	call   c0027c08 <__muldf3>
c000b78f:	59                   	pop    ecx
c000b790:	5f                   	pop    edi
c000b791:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b795:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	e8 35 cd 01 00       	call   c00284db <__truncdfsf2>
c000b7a6:	83 c4 10             	add    esp,0x10
c000b7a9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7ad:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b4:	4b                   	dec    ebx
c000b7b5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7c4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7c7:	e8 bf bd 01 00       	call   c002758b <__adddf3>
c000b7cc:	83 c4 10             	add    esp,0x10
c000b7cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e7:	e8 1c c4 01 00       	call   c0027c08 <__muldf3>
c000b7ec:	5f                   	pop    edi
c000b7ed:	5d                   	pop    ebp
c000b7ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	e8 d8 cc 01 00       	call   c00284db <__truncdfsf2>
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b80a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b80d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b811:	4b                   	dec    ebx
c000b812:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b816:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b81d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b821:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b824:	e8 62 bd 01 00       	call   c002758b <__adddf3>
c000b829:	83 c4 10             	add    esp,0x10
c000b82c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b830:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b83c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b840:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b844:	e8 bf c3 01 00       	call   c0027c08 <__muldf3>
c000b849:	5d                   	pop    ebp
c000b84a:	59                   	pop    ecx
c000b84b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b84f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b853:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	e8 7b cc 01 00       	call   c00284db <__truncdfsf2>
c000b860:	83 c4 10             	add    esp,0x10
c000b863:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b867:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b86e:	4b                   	dec    ebx
c000b86f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b873:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b87a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b87e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b881:	e8 05 bd 01 00       	call   c002758b <__adddf3>
c000b886:	83 c4 10             	add    esp,0x10
c000b889:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b88d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b899:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b89d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8a1:	e8 62 c3 01 00       	call   c0027c08 <__muldf3>
c000b8a6:	59                   	pop    ecx
c000b8a7:	5f                   	pop    edi
c000b8a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b8:	e8 1e cc 01 00       	call   c00284db <__truncdfsf2>
c000b8bd:	83 c4 10             	add    esp,0x10
c000b8c0:	85 db                	test   ebx,ebx
c000b8c2:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8c6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c9:	0f 8f fe fc ff ff    	jg     c000b5cd <calc_output_multi+0x837>
c000b8cf:	83 c4 4c             	add    esp,0x4c
c000b8d2:	5b                   	pop    ebx
c000b8d3:	5e                   	pop    esi
c000b8d4:	5f                   	pop    edi
c000b8d5:	5d                   	pop    ebp
c000b8d6:	c3                   	ret    

c000b8d7 <double_to_fp>:
c000b8d7:	83 ec 0c             	sub    esp,0xc
c000b8da:	68 00 00 b0 40       	push   0x40b00000
c000b8df:	6a 00                	push   0x0
c000b8e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e9:	e8 1a c3 01 00       	call   c0027c08 <__muldf3>
c000b8ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8f6:	83 c4 1c             	add    esp,0x1c
c000b8f9:	e9 92 cd 01 00       	jmp    c0028690 <lrint>

c000b8fe <prepare_data>:
c000b8fe:	55                   	push   ebp
c000b8ff:	57                   	push   edi
c000b900:	56                   	push   esi
c000b901:	53                   	push   ebx
c000b902:	83 ec 1c             	sub    esp,0x1c
c000b905:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b909:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b90d:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b911:	0f 89 57 01 00 00    	jns    c000ba6e <prepare_data+0x170>
c000b917:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b91a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91d:	85 d2                	test   edx,edx
c000b91f:	75 0d                	jne    c000b92e <prepare_data+0x30>
c000b921:	8d 14 36             	lea    edx,[esi+esi*1]
c000b924:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b927:	29 d0                	sub    eax,edx
c000b929:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b92c:	eb 44                	jmp    c000b972 <prepare_data+0x74>
c000b92e:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b931:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b934:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b937:	39 c1                	cmp    ecx,eax
c000b939:	7d 04                	jge    c000b93f <prepare_data+0x41>
c000b93b:	29 d0                	sub    eax,edx
c000b93d:	eb 2d                	jmp    c000b96c <prepare_data+0x6e>
c000b93f:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b945:	29 d7                	sub    edi,edx
c000b947:	01 f7                	add    edi,esi
c000b949:	51                   	push   ecx
c000b94a:	29 f2                	sub    edx,esi
c000b94c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b953:	8d 14 90             	lea    edx,[eax+edx*4]
c000b956:	51                   	push   ecx
c000b957:	52                   	push   edx
c000b958:	50                   	push   eax
c000b959:	e8 26 4d ff ff       	call   c0000684 <memmove>
c000b95e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b961:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b964:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b967:	29 f0                	sub    eax,esi
c000b969:	83 c4 10             	add    esp,0x10
c000b96c:	29 f0                	sub    eax,esi
c000b96e:	79 02                	jns    c000b972 <prepare_data+0x74>
c000b970:	31 c0                	xor    eax,eax
c000b972:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b975:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b978:	29 ef                	sub    edi,ebp
c000b97a:	39 c7                	cmp    edi,eax
c000b97c:	7e 02                	jle    c000b980 <prepare_data+0x82>
c000b97e:	89 c7                	mov    edi,eax
c000b980:	89 f8                	mov    eax,edi
c000b982:	99                   	cdq    
c000b983:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b986:	b8 15 00 00 00       	mov    eax,0x15
c000b98b:	29 d7                	sub    edi,edx
c000b98d:	0f 88 dd 00 00 00    	js     c000ba70 <prepare_data+0x172>
c000b993:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b996:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b999:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b99c:	0f 8f ce 00 00 00    	jg     c000ba70 <prepare_data+0x172>
c000b9a2:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a8:	50                   	push   eax
c000b9a9:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9b0:	50                   	push   eax
c000b9b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9b7:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9ba:	50                   	push   eax
c000b9bb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9c2:	50                   	push   eax
c000b9c3:	e8 84 4d ff ff       	call   c000074c <memcpy>
c000b9c8:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9cb:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9ce:	01 fd                	add    ebp,edi
c000b9d0:	01 f9                	add    ecx,edi
c000b9d2:	83 c4 10             	add    esp,0x10
c000b9d5:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d8:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9db:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9e2:	0f 85 86 00 00 00    	jne    c000ba6e <prepare_data+0x170>
c000b9e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9eb:	89 e8                	mov    eax,ebp
c000b9ed:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9f0:	29 c8                	sub    eax,ecx
c000b9f2:	39 f8                	cmp    eax,edi
c000b9f4:	7d 78                	jge    c000ba6e <prepare_data+0x170>
c000b9f6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9fa:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9fe:	74 6e                	je     c000ba6e <prepare_data+0x170>
c000ba00:	8d 7e 04             	lea    edi,[esi+0x4]
c000ba03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ba07:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba0a:	29 ef                	sub    edi,ebp
c000ba0c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba10:	7c 29                	jl     c000ba3b <prepare_data+0x13d>
c000ba12:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba15:	29 f1                	sub    ecx,esi
c000ba17:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba1e:	55                   	push   ebp
c000ba1f:	50                   	push   eax
c000ba20:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba23:	50                   	push   eax
c000ba24:	52                   	push   edx
c000ba25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba29:	e8 56 4c ff ff       	call   c0000684 <memmove>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba34:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba3b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba3e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba41:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba44:	83 c6 05             	add    esi,0x5
c000ba47:	78 07                	js     c000ba50 <prepare_data+0x152>
c000ba49:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba4c:	39 cf                	cmp    edi,ecx
c000ba4e:	7e 04                	jle    c000ba54 <prepare_data+0x156>
c000ba50:	89 ce                	mov    esi,ecx
c000ba52:	29 c6                	sub    esi,eax
c000ba54:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba57:	51                   	push   ecx
c000ba58:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba5f:	51                   	push   ecx
c000ba60:	6a 00                	push   0x0
c000ba62:	50                   	push   eax
c000ba63:	e8 18 4d ff ff       	call   c0000780 <memset>
c000ba68:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	31 c0                	xor    eax,eax
c000ba70:	83 c4 1c             	add    esp,0x1c
c000ba73:	5b                   	pop    ebx
c000ba74:	5e                   	pop    esi
c000ba75:	5f                   	pop    edi
c000ba76:	5d                   	pop    ebp
c000ba77:	c3                   	ret    

c000ba78 <sinc_multichan_vari_process>:
c000ba78:	55                   	push   ebp
c000ba79:	ba 05 00 00 00       	mov    edx,0x5
c000ba7e:	57                   	push   edi
c000ba7f:	56                   	push   esi
c000ba80:	53                   	push   ebx
c000ba81:	83 ec 4c             	sub    esp,0x4c
c000ba84:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba88:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba8c:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba8f:	85 db                	test   ebx,ebx
c000ba91:	0f 84 9b 06 00 00    	je     c000c132 <sinc_multichan_vari_process+0x6ba>
c000ba97:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba9a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba9d:	0f af c5             	imul   eax,ebp
c000baa0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000baa3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000baa6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bab4:	0f af c5             	imul   eax,ebp
c000bab7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000baba:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000babd:	8b 06                	mov    eax,DWORD PTR [esi]
c000babf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bac3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac7:	68 00 00 70 3f       	push   0x3f700000
c000bacc:	6a 00                	push   0x0
c000bace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad6:	e8 fc c9 01 00       	call   c00284d7 <__ltdf2>
c000badb:	83 c4 10             	add    esp,0x10
c000bade:	ba 16 00 00 00       	mov    edx,0x16
c000bae3:	85 c0                	test   eax,eax
c000bae5:	0f 88 47 06 00 00    	js     c000c132 <sinc_multichan_vari_process+0x6ba>
c000baeb:	68 00 00 70 40       	push   0x40700000
c000baf0:	6a 00                	push   0x0
c000baf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafa:	e8 ba c9 01 00       	call   c00284b9 <__gtdf2>
c000baff:	83 c4 10             	add    esp,0x10
c000bb02:	ba 16 00 00 00       	mov    edx,0x16
c000bb07:	85 c0                	test   eax,eax
c000bb09:	0f 8f 23 06 00 00    	jg     c000c132 <sinc_multichan_vari_process+0x6ba>
c000bb0f:	83 ec 0c             	sub    esp,0xc
c000bb12:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb15:	e8 51 c7 01 00       	call   c002826b <__floatsidf>
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb25:	68 00 00 00 40       	push   0x40000000
c000bb2a:	6a 00                	push   0x0
c000bb2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb34:	e8 52 ba 01 00       	call   c002758b <__adddf3>
c000bb39:	59                   	pop    ecx
c000bb3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb3e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb42:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb45:	e8 21 c7 01 00       	call   c002826b <__floatsidf>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb55:	52                   	push   edx
c000bb56:	50                   	push   eax
c000bb57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5f:	e8 88 c3 01 00       	call   c0027eec <__divdf3>
c000bb64:	83 c4 10             	add    esp,0x10
c000bb67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb6f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb72:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8d:	e8 27 c9 01 00       	call   c00284b9 <__gtdf2>
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	85 c0                	test   eax,eax
c000bb97:	7e 2d                	jle    c000bbc6 <sinc_multichan_vari_process+0x14e>
c000bb99:	68 00 00 f0 3f       	push   0x3ff00000
c000bb9e:	6a 00                	push   0x0
c000bba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba8:	e8 2a c9 01 00       	call   c00284d7 <__ltdf2>
c000bbad:	83 c4 10             	add    esp,0x10
c000bbb0:	85 c0                	test   eax,eax
c000bbb2:	79 4d                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbc4:	eb 1b                	jmp    c000bbe1 <sinc_multichan_vari_process+0x169>
c000bbc6:	68 00 00 f0 3f       	push   0x3ff00000
c000bbcb:	6a 00                	push   0x0
c000bbcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd5:	e8 fd c8 01 00       	call   c00284d7 <__ltdf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	79 20                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbe1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbf1:	e8 f6 c2 01 00       	call   c0027eec <__divdf3>
c000bbf6:	83 c4 10             	add    esp,0x10
c000bbf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbfd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc01:	50                   	push   eax
c000bc02:	50                   	push   eax
c000bc03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0b:	e8 80 ca 01 00       	call   c0028690 <lrint>
c000bc10:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc13:	40                   	inc    eax
c000bc14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc18:	0f af c5             	imul   eax,ebp
c000bc1b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc1f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc26:	58                   	pop    eax
c000bc27:	5a                   	pop    edx
c000bc28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc30:	e8 5b ca 01 00       	call   c0028690 <lrint>
c000bc35:	83 ec 0c             	sub    esp,0xc
c000bc38:	50                   	push   eax
c000bc39:	e8 2d c6 01 00       	call   c002826b <__floatsidf>
c000bc3e:	83 c4 10             	add    esp,0x10
c000bc41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc49:	52                   	push   edx
c000bc4a:	50                   	push   eax
c000bc4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc53:	e8 84 bf 01 00       	call   c0027bdc <__subdf3>
c000bc58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc5c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc60:	83 c4 20             	add    esp,0x20
c000bc63:	6a 00                	push   0x0
c000bc65:	6a 00                	push   0x0
c000bc67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6f:	e8 63 c8 01 00       	call   c00284d7 <__ltdf2>
c000bc74:	83 c4 10             	add    esp,0x10
c000bc77:	85 c0                	test   eax,eax
c000bc79:	79 1f                	jns    c000bc9a <sinc_multichan_vari_process+0x222>
c000bc7b:	68 00 00 f0 3f       	push   0x3ff00000
c000bc80:	6a 00                	push   0x0
c000bc82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc8a:	e8 fc b8 01 00       	call   c002758b <__adddf3>
c000bc8f:	83 c4 10             	add    esp,0x10
c000bc92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc9a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc9d:	83 ec 10             	sub    esp,0x10
c000bca0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bca4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb7:	e8 20 bf 01 00       	call   c0027bdc <__subdf3>
c000bcbc:	83 c4 18             	add    esp,0x18
c000bcbf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcc7:	52                   	push   edx
c000bcc8:	50                   	push   eax
c000bcc9:	e8 c2 c9 01 00       	call   c0028690 <lrint>
c000bcce:	0f af e8             	imul   ebp,eax
c000bcd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcd5:	01 e8                	add    eax,ebp
c000bcd7:	99                   	cdq    
c000bcd8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcdb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce6:	68 00 00 f0 3f       	push   0x3ff00000
c000bceb:	6a 00                	push   0x0
c000bced:	e8 fa c1 01 00       	call   c0027eec <__divdf3>
c000bcf2:	83 c4 10             	add    esp,0x10
c000bcf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcfd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bd02:	68 23 42 92 0c       	push   0xc924223
c000bd07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0f:	e8 77 b8 01 00       	call   c002758b <__adddf3>
c000bd14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd18:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd1c:	83 c4 20             	add    esp,0x20
c000bd1f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd27:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd32:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd35:	7d 50                	jge    c000bd87 <sinc_multichan_vari_process+0x30f>
c000bd37:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd3a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd3d:	01 c8                	add    eax,ecx
c000bd3f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd42:	99                   	cdq    
c000bd43:	f7 f9                	idiv   ecx
c000bd45:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd49:	7d 0c                	jge    c000bd57 <sinc_multichan_vari_process+0x2df>
c000bd4b:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd4e:	85 ed                	test   ebp,ebp
c000bd50:	79 6b                	jns    c000bdbd <sinc_multichan_vari_process+0x345>
c000bd52:	e9 e6 00 00 00       	jmp    c000be3d <sinc_multichan_vari_process+0x3c5>
c000bd57:	50                   	push   eax
c000bd58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd5c:	57                   	push   edi
c000bd5d:	53                   	push   ebx
c000bd5e:	e8 9b fb ff ff       	call   c000b8fe <prepare_data>
c000bd63:	83 c4 10             	add    esp,0x10
c000bd66:	89 c2                	mov    edx,eax
c000bd68:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd6b:	85 c0                	test   eax,eax
c000bd6d:	0f 85 bf 03 00 00    	jne    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bd73:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd76:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd79:	01 c8                	add    eax,ecx
c000bd7b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd7e:	99                   	cdq    
c000bd7f:	f7 f9                	idiv   ecx
c000bd81:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd85:	7c c4                	jl     c000bd4b <sinc_multichan_vari_process+0x2d3>
c000bd87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd8f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd92:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd9d:	89 06                	mov    DWORD PTR [esi],eax
c000bd9f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bda2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bda5:	99                   	cdq    
c000bda6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda9:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bdac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bdaf:	99                   	cdq    
c000bdb0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdb3:	31 d2                	xor    edx,edx
c000bdb5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb8:	e9 75 03 00 00       	jmp    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bdbd:	83 ec 0c             	sub    esp,0xc
c000bdc0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdc3:	e8 a3 c4 01 00       	call   c002826b <__floatsidf>
c000bdc8:	83 c4 10             	add    esp,0x10
c000bdcb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdcf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde3:	e8 a3 b7 01 00       	call   c002758b <__adddf3>
c000bde8:	83 c4 10             	add    esp,0x10
c000bdeb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdf3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	e8 83 b7 01 00       	call   c002758b <__adddf3>
c000be08:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be13:	e8 53 c4 01 00       	call   c002826b <__floatsidf>
c000be18:	83 c4 10             	add    esp,0x10
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be2d:	e8 a3 c6 01 00       	call   c00284d5 <__gedf2>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	85 c0                	test   eax,eax
c000be37:	0f 89 4a ff ff ff    	jns    c000bd87 <sinc_multichan_vari_process+0x30f>
c000be3d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be41:	0f 8e ed 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be47:	83 ec 10             	sub    esp,0x10
c000be4a:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be4d:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be50:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be53:	ff 36                	push   DWORD PTR [esi]
c000be55:	e8 82 bd 01 00       	call   c0027bdc <__subdf3>
c000be5a:	83 c4 18             	add    esp,0x18
c000be5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be65:	52                   	push   edx
c000be66:	50                   	push   eax
c000be67:	e8 04 c8 01 00       	call   c0028670 <fabs>
c000be6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be74:	83 c4 10             	add    esp,0x10
c000be77:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be7c:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be89:	e8 2b c6 01 00       	call   c00284b9 <__gtdf2>
c000be8e:	83 c4 10             	add    esp,0x10
c000be91:	85 c0                	test   eax,eax
c000be93:	0f 8e 9b 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be99:	8b 06                	mov    eax,DWORD PTR [esi]
c000be9b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bea2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bea6:	52                   	push   edx
c000bea7:	50                   	push   eax
c000bea8:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000beab:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000beae:	e8 29 bd 01 00       	call   c0027bdc <__subdf3>
c000beb3:	59                   	pop    ecx
c000beb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bebc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bebf:	e8 a7 c3 01 00       	call   c002826b <__floatsidf>
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000becb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000becf:	52                   	push   edx
c000bed0:	50                   	push   eax
c000bed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed9:	e8 2a bd 01 00       	call   c0027c08 <__muldf3>
c000bede:	5d                   	pop    ebp
c000bedf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bee3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bee7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000beea:	e8 7c c3 01 00       	call   c002826b <__floatsidf>
c000beef:	83 c4 10             	add    esp,0x10
c000bef2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000befa:	52                   	push   edx
c000befb:	50                   	push   eax
c000befc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf04:	e8 e3 bf 01 00       	call   c0027eec <__divdf3>
c000bf09:	83 c4 10             	add    esp,0x10
c000bf0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf10:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf24:	e8 62 b6 01 00       	call   c002758b <__adddf3>
c000bf29:	83 c4 10             	add    esp,0x10
c000bf2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf34:	83 ec 0c             	sub    esp,0xc
c000bf37:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf3a:	e8 2c c3 01 00       	call   c002826b <__floatsidf>
c000bf3f:	83 c4 10             	add    esp,0x10
c000bf42:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5a:	e8 78 c5 01 00       	call   c00284d7 <__ltdf2>
c000bf5f:	83 c4 10             	add    esp,0x10
c000bf62:	85 c0                	test   eax,eax
c000bf64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf6c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf70:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf74:	78 10                	js     c000bf86 <sinc_multichan_vari_process+0x50e>
c000bf76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf96:	e8 6d bc 01 00       	call   c0027c08 <__muldf3>
c000bf9b:	59                   	pop    ecx
c000bf9c:	5d                   	pop    ebp
c000bf9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfa1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bfa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfad:	e8 25 f9 ff ff       	call   c000b8d7 <double_to_fp>
c000bfb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb6:	89 c5                	mov    ebp,eax
c000bfb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc4:	e8 3f bc 01 00       	call   c0027c08 <__muldf3>
c000bfc9:	83 c4 18             	add    esp,0x18
c000bfcc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfd0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfd4:	52                   	push   edx
c000bfd5:	50                   	push   eax
c000bfd6:	e8 fc f8 ff ff       	call   c000b8d7 <double_to_fp>
c000bfdb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfde:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfe2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfe5:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe8:	50                   	push   eax
c000bfe9:	50                   	push   eax
c000bfea:	50                   	push   eax
c000bfeb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfee:	e8 78 c2 01 00       	call   c002826b <__floatsidf>
c000bff3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bff7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c007:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c00b:	e8 dc be 01 00       	call   c0027eec <__divdf3>
c000c010:	83 c4 1c             	add    esp,0x1c
c000c013:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c017:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c01b:	52                   	push   edx
c000c01c:	89 ea                	mov    edx,ebp
c000c01e:	50                   	push   eax
c000c01f:	89 d8                	mov    eax,ebx
c000c021:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c024:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c028:	e8 69 ed ff ff       	call   c000ad96 <calc_output_multi>
c000c02d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c030:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c033:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c037:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c03b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c043:	e8 a4 be 01 00       	call   c0027eec <__divdf3>
c000c048:	83 c4 10             	add    esp,0x10
c000c04b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c04f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c053:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c057:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c05b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c063:	e8 23 b5 01 00       	call   c002758b <__adddf3>
c000c068:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c06c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c070:	83 c4 28             	add    esp,0x28
c000c073:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c077:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07b:	e8 10 c6 01 00       	call   c0028690 <lrint>
c000c080:	83 ec 0c             	sub    esp,0xc
c000c083:	50                   	push   eax
c000c084:	e8 e2 c1 01 00       	call   c002826b <__floatsidf>
c000c089:	83 c4 10             	add    esp,0x10
c000c08c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c090:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c094:	52                   	push   edx
c000c095:	50                   	push   eax
c000c096:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09e:	e8 39 bb 01 00       	call   c0027bdc <__subdf3>
c000c0a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ab:	83 c4 20             	add    esp,0x20
c000c0ae:	6a 00                	push   0x0
c000c0b0:	6a 00                	push   0x0
c000c0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ba:	e8 18 c4 01 00       	call   c00284d7 <__ltdf2>
c000c0bf:	83 c4 10             	add    esp,0x10
c000c0c2:	85 c0                	test   eax,eax
c000c0c4:	79 20                	jns    c000c0e6 <sinc_multichan_vari_process+0x66e>
c000c0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d6:	e8 b0 b4 01 00       	call   c002758b <__adddf3>
c000c0db:	83 c4 10             	add    esp,0x10
c000c0de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0e6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e9:	83 ec 10             	sub    esp,0x10
c000c0ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c103:	e8 d4 ba 01 00       	call   c0027bdc <__subdf3>
c000c108:	83 c4 18             	add    esp,0x18
c000c10b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c10f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c113:	52                   	push   edx
c000c114:	50                   	push   eax
c000c115:	e8 76 c5 01 00       	call   c0028690 <lrint>
c000c11a:	0f af e8             	imul   ebp,eax
c000c11d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c121:	83 c4 10             	add    esp,0x10
c000c124:	01 e8                	add    eax,ebp
c000c126:	99                   	cdq    
c000c127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c12d:	e9 fd fb ff ff       	jmp    c000bd2f <sinc_multichan_vari_process+0x2b7>
c000c132:	83 c4 4c             	add    esp,0x4c
c000c135:	89 d0                	mov    eax,edx
c000c137:	5b                   	pop    ebx
c000c138:	5e                   	pop    esi
c000c139:	5f                   	pop    edi
c000c13a:	5d                   	pop    ebp
c000c13b:	c3                   	ret    

c000c13c <sinc_hex_vari_process>:
c000c13c:	55                   	push   ebp
c000c13d:	ba 05 00 00 00       	mov    edx,0x5
c000c142:	57                   	push   edi
c000c143:	56                   	push   esi
c000c144:	53                   	push   ebx
c000c145:	83 ec 4c             	sub    esp,0x4c
c000c148:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c14c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c150:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c153:	85 db                	test   ebx,ebx
c000c155:	0f 84 9c 06 00 00    	je     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c15b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c15e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c161:	0f af c7             	imul   eax,edi
c000c164:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c167:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c16a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c171:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c178:	0f af c7             	imul   eax,edi
c000c17b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c17e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c181:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c184:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c188:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c18c:	68 00 00 70 3f       	push   0x3f700000
c000c191:	6a 00                	push   0x0
c000c193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c19b:	e8 37 c3 01 00       	call   c00284d7 <__ltdf2>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	ba 16 00 00 00       	mov    edx,0x16
c000c1a8:	85 c0                	test   eax,eax
c000c1aa:	0f 88 47 06 00 00    	js     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1b0:	68 00 00 70 40       	push   0x40700000
c000c1b5:	6a 00                	push   0x0
c000c1b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bf:	e8 f5 c2 01 00       	call   c00284b9 <__gtdf2>
c000c1c4:	83 c4 10             	add    esp,0x10
c000c1c7:	ba 16 00 00 00       	mov    edx,0x16
c000c1cc:	85 c0                	test   eax,eax
c000c1ce:	0f 8f 23 06 00 00    	jg     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1d4:	83 ec 0c             	sub    esp,0xc
c000c1d7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1da:	e8 8c c0 01 00       	call   c002826b <__floatsidf>
c000c1df:	83 c4 10             	add    esp,0x10
c000c1e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1ea:	68 00 00 00 40       	push   0x40000000
c000c1ef:	6a 00                	push   0x0
c000c1f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f9:	e8 8d b3 01 00       	call   c002758b <__adddf3>
c000c1fe:	59                   	pop    ecx
c000c1ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c203:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c207:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c20a:	e8 5c c0 01 00       	call   c002826b <__floatsidf>
c000c20f:	83 c4 10             	add    esp,0x10
c000c212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c216:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c21a:	52                   	push   edx
c000c21b:	50                   	push   eax
c000c21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c224:	e8 c3 bc 01 00       	call   c0027eec <__divdf3>
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c230:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c234:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c237:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c23a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c23e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c252:	e8 62 c2 01 00       	call   c00284b9 <__gtdf2>
c000c257:	83 c4 10             	add    esp,0x10
c000c25a:	85 c0                	test   eax,eax
c000c25c:	7e 2d                	jle    c000c28b <sinc_hex_vari_process+0x14f>
c000c25e:	68 00 00 f0 3f       	push   0x3ff00000
c000c263:	6a 00                	push   0x0
c000c265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c26d:	e8 65 c2 01 00       	call   c00284d7 <__ltdf2>
c000c272:	83 c4 10             	add    esp,0x10
c000c275:	85 c0                	test   eax,eax
c000c277:	79 4d                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c289:	eb 1b                	jmp    c000c2a6 <sinc_hex_vari_process+0x16a>
c000c28b:	68 00 00 f0 3f       	push   0x3ff00000
c000c290:	6a 00                	push   0x0
c000c292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c29a:	e8 38 c2 01 00       	call   c00284d7 <__ltdf2>
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	85 c0                	test   eax,eax
c000c2a4:	79 20                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c2a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b6:	e8 31 bc 01 00       	call   c0027eec <__divdf3>
c000c2bb:	83 c4 10             	add    esp,0x10
c000c2be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2c6:	50                   	push   eax
c000c2c7:	50                   	push   eax
c000c2c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d0:	e8 bb c3 01 00       	call   c0028690 <lrint>
c000c2d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d8:	40                   	inc    eax
c000c2d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2dd:	0f af c7             	imul   eax,edi
c000c2e0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2eb:	58                   	pop    eax
c000c2ec:	5a                   	pop    edx
c000c2ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f5:	e8 96 c3 01 00       	call   c0028690 <lrint>
c000c2fa:	83 ec 0c             	sub    esp,0xc
c000c2fd:	50                   	push   eax
c000c2fe:	e8 68 bf 01 00       	call   c002826b <__floatsidf>
c000c303:	83 c4 10             	add    esp,0x10
c000c306:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c30a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c30e:	52                   	push   edx
c000c30f:	50                   	push   eax
c000c310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c314:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c318:	e8 bf b8 01 00       	call   c0027bdc <__subdf3>
c000c31d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c321:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c325:	83 c4 20             	add    esp,0x20
c000c328:	6a 00                	push   0x0
c000c32a:	6a 00                	push   0x0
c000c32c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c330:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c334:	e8 9e c1 01 00       	call   c00284d7 <__ltdf2>
c000c339:	83 c4 10             	add    esp,0x10
c000c33c:	85 c0                	test   eax,eax
c000c33e:	79 1f                	jns    c000c35f <sinc_hex_vari_process+0x223>
c000c340:	68 00 00 f0 3f       	push   0x3ff00000
c000c345:	6a 00                	push   0x0
c000c347:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34f:	e8 37 b2 01 00       	call   c002758b <__adddf3>
c000c354:	83 c4 10             	add    esp,0x10
c000c357:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c35b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c35f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c362:	83 ec 10             	sub    esp,0x10
c000c365:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c369:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c374:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c378:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c37c:	e8 5b b8 01 00       	call   c0027bdc <__subdf3>
c000c381:	83 c4 18             	add    esp,0x18
c000c384:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c388:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c38c:	52                   	push   edx
c000c38d:	50                   	push   eax
c000c38e:	e8 fd c2 01 00       	call   c0028690 <lrint>
c000c393:	0f af f8             	imul   edi,eax
c000c396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c39a:	01 f8                	add    eax,edi
c000c39c:	99                   	cdq    
c000c39d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c3a0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c3a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ab:	68 00 00 f0 3f       	push   0x3ff00000
c000c3b0:	6a 00                	push   0x0
c000c3b2:	e8 35 bb 01 00       	call   c0027eec <__divdf3>
c000c3b7:	83 c4 10             	add    esp,0x10
c000c3ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3c2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3c7:	68 23 42 92 0c       	push   0xc924223
c000c3cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d4:	e8 b2 b1 01 00       	call   c002758b <__adddf3>
c000c3d9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3dd:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3e1:	83 c4 20             	add    esp,0x20
c000c3e4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3ec:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3f4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3f7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3fa:	7d 50                	jge    c000c44c <sinc_hex_vari_process+0x310>
c000c3fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c402:	01 c8                	add    eax,ecx
c000c404:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c407:	99                   	cdq    
c000c408:	f7 f9                	idiv   ecx
c000c40a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c40e:	7d 0c                	jge    c000c41c <sinc_hex_vari_process+0x2e0>
c000c410:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c413:	85 ff                	test   edi,edi
c000c415:	79 6c                	jns    c000c483 <sinc_hex_vari_process+0x347>
c000c417:	e9 e7 00 00 00       	jmp    c000c503 <sinc_hex_vari_process+0x3c7>
c000c41c:	50                   	push   eax
c000c41d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c421:	56                   	push   esi
c000c422:	53                   	push   ebx
c000c423:	e8 d6 f4 ff ff       	call   c000b8fe <prepare_data>
c000c428:	83 c4 10             	add    esp,0x10
c000c42b:	89 c2                	mov    edx,eax
c000c42d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c430:	85 c0                	test   eax,eax
c000c432:	0f 85 bf 03 00 00    	jne    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c438:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c43b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c43e:	01 c8                	add    eax,ecx
c000c440:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c443:	99                   	cdq    
c000c444:	f7 f9                	idiv   ecx
c000c446:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c44a:	7c c4                	jl     c000c410 <sinc_hex_vari_process+0x2d4>
c000c44c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c450:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c454:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c457:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c45e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c462:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c465:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c468:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c46b:	99                   	cdq    
c000c46c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c46f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c472:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c475:	99                   	cdq    
c000c476:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c479:	31 d2                	xor    edx,edx
c000c47b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c47e:	e9 74 03 00 00       	jmp    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c483:	83 ec 0c             	sub    esp,0xc
c000c486:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c489:	e8 dd bd 01 00       	call   c002826b <__floatsidf>
c000c48e:	83 c4 10             	add    esp,0x10
c000c491:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c495:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c499:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a9:	e8 dd b0 01 00       	call   c002758b <__adddf3>
c000c4ae:	83 c4 10             	add    esp,0x10
c000c4b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c9:	e8 bd b0 01 00       	call   c002758b <__adddf3>
c000c4ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d9:	e8 8d bd 01 00       	call   c002826b <__floatsidf>
c000c4de:	83 c4 10             	add    esp,0x10
c000c4e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e9:	52                   	push   edx
c000c4ea:	50                   	push   eax
c000c4eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4f3:	e8 dd bf 01 00       	call   c00284d5 <__gedf2>
c000c4f8:	83 c4 10             	add    esp,0x10
c000c4fb:	85 c0                	test   eax,eax
c000c4fd:	0f 89 49 ff ff ff    	jns    c000c44c <sinc_hex_vari_process+0x310>
c000c503:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c507:	0f 8e ef 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c50d:	83 ec 10             	sub    esp,0x10
c000c510:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c513:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c516:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c519:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c51c:	e8 bb b6 01 00       	call   c0027bdc <__subdf3>
c000c521:	83 c4 18             	add    esp,0x18
c000c524:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c528:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	e8 3d c1 01 00       	call   c0028670 <fabs>
c000c533:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c537:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c53b:	83 c4 10             	add    esp,0x10
c000c53e:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c543:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c54c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c550:	e8 64 bf 01 00       	call   c00284b9 <__gtdf2>
c000c555:	83 c4 10             	add    esp,0x10
c000c558:	85 c0                	test   eax,eax
c000c55a:	0f 8e 9c 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c560:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c563:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c566:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c56a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c56e:	52                   	push   edx
c000c56f:	50                   	push   eax
c000c570:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c573:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c576:	e8 61 b6 01 00       	call   c0027bdc <__subdf3>
c000c57b:	59                   	pop    ecx
c000c57c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c580:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c584:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c587:	e8 df bc 01 00       	call   c002826b <__floatsidf>
c000c58c:	83 c4 10             	add    esp,0x10
c000c58f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c593:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c597:	52                   	push   edx
c000c598:	50                   	push   eax
c000c599:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c59d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a1:	e8 62 b6 01 00       	call   c0027c08 <__muldf3>
c000c5a6:	5f                   	pop    edi
c000c5a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5ab:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5af:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5b2:	e8 b4 bc 01 00       	call   c002826b <__floatsidf>
c000c5b7:	83 c4 10             	add    esp,0x10
c000c5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5c2:	52                   	push   edx
c000c5c3:	50                   	push   eax
c000c5c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5cc:	e8 1b b9 01 00       	call   c0027eec <__divdf3>
c000c5d1:	83 c4 10             	add    esp,0x10
c000c5d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5ec:	e8 9a af 01 00       	call   c002758b <__adddf3>
c000c5f1:	83 c4 10             	add    esp,0x10
c000c5f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5fc:	83 ec 0c             	sub    esp,0xc
c000c5ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c602:	e8 64 bc 01 00       	call   c002826b <__floatsidf>
c000c607:	83 c4 10             	add    esp,0x10
c000c60a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c60e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c622:	e8 b0 be 01 00       	call   c00284d7 <__ltdf2>
c000c627:	83 c4 10             	add    esp,0x10
c000c62a:	85 c0                	test   eax,eax
c000c62c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c630:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c634:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c638:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c63c:	78 10                	js     c000c64e <sinc_hex_vari_process+0x512>
c000c63e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c642:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c646:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c64a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c64e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c652:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c656:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65e:	e8 a5 b5 01 00       	call   c0027c08 <__muldf3>
c000c663:	59                   	pop    ecx
c000c664:	5f                   	pop    edi
c000c665:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c669:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c671:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c675:	e8 5d f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c67a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67e:	89 c7                	mov    edi,eax
c000c680:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c684:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c688:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c68c:	e8 77 b5 01 00       	call   c0027c08 <__muldf3>
c000c691:	83 c4 18             	add    esp,0x18
c000c694:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c698:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c69c:	52                   	push   edx
c000c69d:	50                   	push   eax
c000c69e:	e8 34 f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c6a3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c6a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6aa:	83 c4 0c             	add    esp,0xc
c000c6ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6b0:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6b3:	50                   	push   eax
c000c6b4:	50                   	push   eax
c000c6b5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b8:	e8 ae bb 01 00       	call   c002826b <__floatsidf>
c000c6bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6c1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d5:	e8 12 b8 01 00       	call   c0027eec <__divdf3>
c000c6da:	83 c4 18             	add    esp,0x18
c000c6dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6e5:	52                   	push   edx
c000c6e6:	89 fa                	mov    edx,edi
c000c6e8:	50                   	push   eax
c000c6e9:	89 d8                	mov    eax,ebx
c000c6eb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ef:	e8 50 de ff ff       	call   c000a544 <calc_output_hex>
c000c6f4:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c700:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c704:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c708:	e8 df b7 01 00       	call   c0027eec <__divdf3>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c714:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c724:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c728:	e8 5e ae 01 00       	call   c002758b <__adddf3>
c000c72d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c731:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c735:	83 c4 18             	add    esp,0x18
c000c738:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	e8 4b bf 01 00       	call   c0028690 <lrint>
c000c745:	83 ec 0c             	sub    esp,0xc
c000c748:	50                   	push   eax
c000c749:	e8 1d bb 01 00       	call   c002826b <__floatsidf>
c000c74e:	83 c4 10             	add    esp,0x10
c000c751:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c755:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c759:	52                   	push   edx
c000c75a:	50                   	push   eax
c000c75b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c763:	e8 74 b4 01 00       	call   c0027bdc <__subdf3>
c000c768:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c76c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c770:	83 c4 20             	add    esp,0x20
c000c773:	6a 00                	push   0x0
c000c775:	6a 00                	push   0x0
c000c777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77f:	e8 53 bd 01 00       	call   c00284d7 <__ltdf2>
c000c784:	83 c4 10             	add    esp,0x10
c000c787:	85 c0                	test   eax,eax
c000c789:	79 20                	jns    c000c7ab <sinc_hex_vari_process+0x66f>
c000c78b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c793:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c797:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79b:	e8 eb ad 01 00       	call   c002758b <__adddf3>
c000c7a0:	83 c4 10             	add    esp,0x10
c000c7a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7ab:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7ae:	83 ec 10             	sub    esp,0x10
c000c7b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c8:	e8 0f b4 01 00       	call   c0027bdc <__subdf3>
c000c7cd:	83 c4 18             	add    esp,0x18
c000c7d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d8:	52                   	push   edx
c000c7d9:	50                   	push   eax
c000c7da:	e8 b1 be 01 00       	call   c0028690 <lrint>
c000c7df:	0f af f8             	imul   edi,eax
c000c7e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7e6:	83 c4 10             	add    esp,0x10
c000c7e9:	01 f8                	add    eax,edi
c000c7eb:	99                   	cdq    
c000c7ec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7f2:	e9 fd fb ff ff       	jmp    c000c3f4 <sinc_hex_vari_process+0x2b8>
c000c7f7:	83 c4 4c             	add    esp,0x4c
c000c7fa:	89 d0                	mov    eax,edx
c000c7fc:	5b                   	pop    ebx
c000c7fd:	5e                   	pop    esi
c000c7fe:	5f                   	pop    edi
c000c7ff:	5d                   	pop    ebp
c000c800:	c3                   	ret    

c000c801 <sinc_quad_vari_process>:
c000c801:	55                   	push   ebp
c000c802:	ba 05 00 00 00       	mov    edx,0x5
c000c807:	57                   	push   edi
c000c808:	56                   	push   esi
c000c809:	53                   	push   ebx
c000c80a:	83 ec 4c             	sub    esp,0x4c
c000c80d:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c811:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c815:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c818:	85 db                	test   ebx,ebx
c000c81a:	0f 84 9c 06 00 00    	je     c000cebc <sinc_quad_vari_process+0x6bb>
c000c820:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c823:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c826:	0f af c7             	imul   eax,edi
c000c829:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c82c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c82f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c836:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c83d:	0f af c7             	imul   eax,edi
c000c840:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c843:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c846:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c849:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c84d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c851:	68 00 00 70 3f       	push   0x3f700000
c000c856:	6a 00                	push   0x0
c000c858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c860:	e8 72 bc 01 00       	call   c00284d7 <__ltdf2>
c000c865:	83 c4 10             	add    esp,0x10
c000c868:	ba 16 00 00 00       	mov    edx,0x16
c000c86d:	85 c0                	test   eax,eax
c000c86f:	0f 88 47 06 00 00    	js     c000cebc <sinc_quad_vari_process+0x6bb>
c000c875:	68 00 00 70 40       	push   0x40700000
c000c87a:	6a 00                	push   0x0
c000c87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c884:	e8 30 bc 01 00       	call   c00284b9 <__gtdf2>
c000c889:	83 c4 10             	add    esp,0x10
c000c88c:	ba 16 00 00 00       	mov    edx,0x16
c000c891:	85 c0                	test   eax,eax
c000c893:	0f 8f 23 06 00 00    	jg     c000cebc <sinc_quad_vari_process+0x6bb>
c000c899:	83 ec 0c             	sub    esp,0xc
c000c89c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c89f:	e8 c7 b9 01 00       	call   c002826b <__floatsidf>
c000c8a4:	83 c4 10             	add    esp,0x10
c000c8a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8af:	68 00 00 00 40       	push   0x40000000
c000c8b4:	6a 00                	push   0x0
c000c8b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8be:	e8 c8 ac 01 00       	call   c002758b <__adddf3>
c000c8c3:	59                   	pop    ecx
c000c8c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8cc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8cf:	e8 97 b9 01 00       	call   c002826b <__floatsidf>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8df:	52                   	push   edx
c000c8e0:	50                   	push   eax
c000c8e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e9:	e8 fe b5 01 00       	call   c0027eec <__divdf3>
c000c8ee:	83 c4 10             	add    esp,0x10
c000c8f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8fc:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c903:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c917:	e8 9d bb 01 00       	call   c00284b9 <__gtdf2>
c000c91c:	83 c4 10             	add    esp,0x10
c000c91f:	85 c0                	test   eax,eax
c000c921:	7e 2d                	jle    c000c950 <sinc_quad_vari_process+0x14f>
c000c923:	68 00 00 f0 3f       	push   0x3ff00000
c000c928:	6a 00                	push   0x0
c000c92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c932:	e8 a0 bb 01 00       	call   c00284d7 <__ltdf2>
c000c937:	83 c4 10             	add    esp,0x10
c000c93a:	85 c0                	test   eax,eax
c000c93c:	79 4d                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c942:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c946:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c94a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c94e:	eb 1b                	jmp    c000c96b <sinc_quad_vari_process+0x16a>
c000c950:	68 00 00 f0 3f       	push   0x3ff00000
c000c955:	6a 00                	push   0x0
c000c957:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95f:	e8 73 bb 01 00       	call   c00284d7 <__ltdf2>
c000c964:	83 c4 10             	add    esp,0x10
c000c967:	85 c0                	test   eax,eax
c000c969:	79 20                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c96b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c973:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c977:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c97b:	e8 6c b5 01 00       	call   c0027eec <__divdf3>
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c987:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c98b:	50                   	push   eax
c000c98c:	50                   	push   eax
c000c98d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c995:	e8 f6 bc 01 00       	call   c0028690 <lrint>
c000c99a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c99d:	40                   	inc    eax
c000c99e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a2:	0f af c7             	imul   eax,edi
c000c9a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9b0:	58                   	pop    eax
c000c9b1:	5a                   	pop    edx
c000c9b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ba:	e8 d1 bc 01 00       	call   c0028690 <lrint>
c000c9bf:	83 ec 0c             	sub    esp,0xc
c000c9c2:	50                   	push   eax
c000c9c3:	e8 a3 b8 01 00       	call   c002826b <__floatsidf>
c000c9c8:	83 c4 10             	add    esp,0x10
c000c9cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9d3:	52                   	push   edx
c000c9d4:	50                   	push   eax
c000c9d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9dd:	e8 fa b1 01 00       	call   c0027bdc <__subdf3>
c000c9e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9ea:	83 c4 20             	add    esp,0x20
c000c9ed:	6a 00                	push   0x0
c000c9ef:	6a 00                	push   0x0
c000c9f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f9:	e8 d9 ba 01 00       	call   c00284d7 <__ltdf2>
c000c9fe:	83 c4 10             	add    esp,0x10
c000ca01:	85 c0                	test   eax,eax
c000ca03:	79 1f                	jns    c000ca24 <sinc_quad_vari_process+0x223>
c000ca05:	68 00 00 f0 3f       	push   0x3ff00000
c000ca0a:	6a 00                	push   0x0
c000ca0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca14:	e8 72 ab 01 00       	call   c002758b <__adddf3>
c000ca19:	83 c4 10             	add    esp,0x10
c000ca1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca24:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca27:	83 ec 10             	sub    esp,0x10
c000ca2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca2e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca41:	e8 96 b1 01 00       	call   c0027bdc <__subdf3>
c000ca46:	83 c4 18             	add    esp,0x18
c000ca49:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca51:	52                   	push   edx
c000ca52:	50                   	push   eax
c000ca53:	e8 38 bc 01 00       	call   c0028690 <lrint>
c000ca58:	0f af f8             	imul   edi,eax
c000ca5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca5f:	01 f8                	add    eax,edi
c000ca61:	99                   	cdq    
c000ca62:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca65:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca70:	68 00 00 f0 3f       	push   0x3ff00000
c000ca75:	6a 00                	push   0x0
c000ca77:	e8 70 b4 01 00       	call   c0027eec <__divdf3>
c000ca7c:	83 c4 10             	add    esp,0x10
c000ca7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca87:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca8c:	68 23 42 92 0c       	push   0xc924223
c000ca91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca99:	e8 ed aa 01 00       	call   c002758b <__adddf3>
c000ca9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000caa2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000caa6:	83 c4 20             	add    esp,0x20
c000caa9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cab1:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cabc:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cabf:	7d 50                	jge    c000cb11 <sinc_quad_vari_process+0x310>
c000cac1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cac4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac7:	01 c8                	add    eax,ecx
c000cac9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cacc:	99                   	cdq    
c000cacd:	f7 f9                	idiv   ecx
c000cacf:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cad3:	7d 0c                	jge    c000cae1 <sinc_quad_vari_process+0x2e0>
c000cad5:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad8:	85 ff                	test   edi,edi
c000cada:	79 6c                	jns    c000cb48 <sinc_quad_vari_process+0x347>
c000cadc:	e9 e7 00 00 00       	jmp    c000cbc8 <sinc_quad_vari_process+0x3c7>
c000cae1:	50                   	push   eax
c000cae2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cae6:	56                   	push   esi
c000cae7:	53                   	push   ebx
c000cae8:	e8 11 ee ff ff       	call   c000b8fe <prepare_data>
c000caed:	83 c4 10             	add    esp,0x10
c000caf0:	89 c2                	mov    edx,eax
c000caf2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caf5:	85 c0                	test   eax,eax
c000caf7:	0f 85 bf 03 00 00    	jne    c000cebc <sinc_quad_vari_process+0x6bb>
c000cafd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cb00:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cb03:	01 c8                	add    eax,ecx
c000cb05:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb08:	99                   	cdq    
c000cb09:	f7 f9                	idiv   ecx
c000cb0b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb0f:	7c c4                	jl     c000cad5 <sinc_quad_vari_process+0x2d4>
c000cb11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb19:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb1c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb27:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb2a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb2d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb30:	99                   	cdq    
c000cb31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb37:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb3a:	99                   	cdq    
c000cb3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb3e:	31 d2                	xor    edx,edx
c000cb40:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb43:	e9 74 03 00 00       	jmp    c000cebc <sinc_quad_vari_process+0x6bb>
c000cb48:	83 ec 0c             	sub    esp,0xc
c000cb4b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb4e:	e8 18 b7 01 00       	call   c002826b <__floatsidf>
c000cb53:	83 c4 10             	add    esp,0x10
c000cb56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb5a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6e:	e8 18 aa 01 00       	call   c002758b <__adddf3>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8e:	e8 f8 a9 01 00       	call   c002758b <__adddf3>
c000cb93:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb9e:	e8 c8 b6 01 00       	call   c002826b <__floatsidf>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbaa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbae:	52                   	push   edx
c000cbaf:	50                   	push   eax
c000cbb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb8:	e8 18 b9 01 00       	call   c00284d5 <__gedf2>
c000cbbd:	83 c4 10             	add    esp,0x10
c000cbc0:	85 c0                	test   eax,eax
c000cbc2:	0f 89 49 ff ff ff    	jns    c000cb11 <sinc_quad_vari_process+0x310>
c000cbc8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbcc:	0f 8e ef 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cbd2:	83 ec 10             	sub    esp,0x10
c000cbd5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbdb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbde:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbe1:	e8 f6 af 01 00       	call   c0027bdc <__subdf3>
c000cbe6:	83 c4 18             	add    esp,0x18
c000cbe9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	e8 78 ba 01 00       	call   c0028670 <fabs>
c000cbf8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbfc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cc00:	83 c4 10             	add    esp,0x10
c000cc03:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc08:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc15:	e8 9f b8 01 00       	call   c00284b9 <__gtdf2>
c000cc1a:	83 c4 10             	add    esp,0x10
c000cc1d:	85 c0                	test   eax,eax
c000cc1f:	0f 8e 9c 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cc25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc28:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc2f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc33:	52                   	push   edx
c000cc34:	50                   	push   eax
c000cc35:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc38:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc3b:	e8 9c af 01 00       	call   c0027bdc <__subdf3>
c000cc40:	59                   	pop    ecx
c000cc41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc45:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc49:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc4c:	e8 1a b6 01 00       	call   c002826b <__floatsidf>
c000cc51:	83 c4 10             	add    esp,0x10
c000cc54:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc58:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc5c:	52                   	push   edx
c000cc5d:	50                   	push   eax
c000cc5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc66:	e8 9d af 01 00       	call   c0027c08 <__muldf3>
c000cc6b:	5f                   	pop    edi
c000cc6c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc70:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc74:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc77:	e8 ef b5 01 00       	call   c002826b <__floatsidf>
c000cc7c:	83 c4 10             	add    esp,0x10
c000cc7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc87:	52                   	push   edx
c000cc88:	50                   	push   eax
c000cc89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc91:	e8 56 b2 01 00       	call   c0027eec <__divdf3>
c000cc96:	83 c4 10             	add    esp,0x10
c000cc99:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc9d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cca1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccb1:	e8 d5 a8 01 00       	call   c002758b <__adddf3>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccc1:	83 ec 0c             	sub    esp,0xc
c000ccc4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccc7:	e8 9f b5 01 00       	call   c002826b <__floatsidf>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce7:	e8 eb b7 01 00       	call   c00284d7 <__ltdf2>
c000ccec:	83 c4 10             	add    esp,0x10
c000ccef:	85 c0                	test   eax,eax
c000ccf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccf5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccfd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cd01:	78 10                	js     c000cd13 <sinc_quad_vari_process+0x512>
c000cd03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd23:	e8 e0 ae 01 00       	call   c0027c08 <__muldf3>
c000cd28:	59                   	pop    ecx
c000cd29:	5f                   	pop    edi
c000cd2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd3a:	e8 98 eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd43:	89 c7                	mov    edi,eax
c000cd45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd51:	e8 b2 ae 01 00       	call   c0027c08 <__muldf3>
c000cd56:	83 c4 18             	add    esp,0x18
c000cd59:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd61:	52                   	push   edx
c000cd62:	50                   	push   eax
c000cd63:	e8 6f eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd68:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd6b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd6f:	83 c4 0c             	add    esp,0xc
c000cd72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd75:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd78:	50                   	push   eax
c000cd79:	50                   	push   eax
c000cd7a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd7d:	e8 e9 b4 01 00       	call   c002826b <__floatsidf>
c000cd82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd9a:	e8 4d b1 01 00       	call   c0027eec <__divdf3>
c000cd9f:	83 c4 18             	add    esp,0x18
c000cda2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cda6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdaa:	52                   	push   edx
c000cdab:	89 fa                	mov    edx,edi
c000cdad:	50                   	push   eax
c000cdae:	89 d8                	mov    eax,ebx
c000cdb0:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdb4:	e8 a5 d1 ff ff       	call   c0009f5e <calc_output_quad>
c000cdb9:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdbd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdcd:	e8 1a b1 01 00       	call   c0027eec <__divdf3>
c000cdd2:	83 c4 10             	add    esp,0x10
c000cdd5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cded:	e8 99 a7 01 00       	call   c002758b <__adddf3>
c000cdf2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdf6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdfa:	83 c4 18             	add    esp,0x18
c000cdfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	e8 86 b8 01 00       	call   c0028690 <lrint>
c000ce0a:	83 ec 0c             	sub    esp,0xc
c000ce0d:	50                   	push   eax
c000ce0e:	e8 58 b4 01 00       	call   c002826b <__floatsidf>
c000ce13:	83 c4 10             	add    esp,0x10
c000ce16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce1e:	52                   	push   edx
c000ce1f:	50                   	push   eax
c000ce20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce28:	e8 af ad 01 00       	call   c0027bdc <__subdf3>
c000ce2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce35:	83 c4 20             	add    esp,0x20
c000ce38:	6a 00                	push   0x0
c000ce3a:	6a 00                	push   0x0
c000ce3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce44:	e8 8e b6 01 00       	call   c00284d7 <__ltdf2>
c000ce49:	83 c4 10             	add    esp,0x10
c000ce4c:	85 c0                	test   eax,eax
c000ce4e:	79 20                	jns    c000ce70 <sinc_quad_vari_process+0x66f>
c000ce50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce60:	e8 26 a7 01 00       	call   c002758b <__adddf3>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce70:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce73:	83 ec 10             	sub    esp,0x10
c000ce76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce7a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce8d:	e8 4a ad 01 00       	call   c0027bdc <__subdf3>
c000ce92:	83 c4 18             	add    esp,0x18
c000ce95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce9d:	52                   	push   edx
c000ce9e:	50                   	push   eax
c000ce9f:	e8 ec b7 01 00       	call   c0028690 <lrint>
c000cea4:	0f af f8             	imul   edi,eax
c000cea7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	01 f8                	add    eax,edi
c000ceb0:	99                   	cdq    
c000ceb1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceb4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceb7:	e9 fd fb ff ff       	jmp    c000cab9 <sinc_quad_vari_process+0x2b8>
c000cebc:	83 c4 4c             	add    esp,0x4c
c000cebf:	89 d0                	mov    eax,edx
c000cec1:	5b                   	pop    ebx
c000cec2:	5e                   	pop    esi
c000cec3:	5f                   	pop    edi
c000cec4:	5d                   	pop    ebp
c000cec5:	c3                   	ret    

c000cec6 <sinc_stereo_vari_process>:
c000cec6:	55                   	push   ebp
c000cec7:	ba 05 00 00 00       	mov    edx,0x5
c000cecc:	57                   	push   edi
c000cecd:	56                   	push   esi
c000cece:	53                   	push   ebx
c000cecf:	83 ec 4c             	sub    esp,0x4c
c000ced2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ced6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ceda:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cedd:	85 db                	test   ebx,ebx
c000cedf:	0f 84 9c 06 00 00    	je     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cee5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ceeb:	0f af c7             	imul   eax,edi
c000ceee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cef1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cef4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cefb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cf02:	0f af c7             	imul   eax,edi
c000cf05:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf08:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf16:	68 00 00 70 3f       	push   0x3f700000
c000cf1b:	6a 00                	push   0x0
c000cf1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf25:	e8 ad b5 01 00       	call   c00284d7 <__ltdf2>
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	ba 16 00 00 00       	mov    edx,0x16
c000cf32:	85 c0                	test   eax,eax
c000cf34:	0f 88 47 06 00 00    	js     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf3a:	68 00 00 70 40       	push   0x40700000
c000cf3f:	6a 00                	push   0x0
c000cf41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf49:	e8 6b b5 01 00       	call   c00284b9 <__gtdf2>
c000cf4e:	83 c4 10             	add    esp,0x10
c000cf51:	ba 16 00 00 00       	mov    edx,0x16
c000cf56:	85 c0                	test   eax,eax
c000cf58:	0f 8f 23 06 00 00    	jg     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf5e:	83 ec 0c             	sub    esp,0xc
c000cf61:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf64:	e8 02 b3 01 00       	call   c002826b <__floatsidf>
c000cf69:	83 c4 10             	add    esp,0x10
c000cf6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf74:	68 00 00 00 40       	push   0x40000000
c000cf79:	6a 00                	push   0x0
c000cf7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf83:	e8 03 a6 01 00       	call   c002758b <__adddf3>
c000cf88:	59                   	pop    ecx
c000cf89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf8d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf91:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf94:	e8 d2 b2 01 00       	call   c002826b <__floatsidf>
c000cf99:	83 c4 10             	add    esp,0x10
c000cf9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfa0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfa4:	52                   	push   edx
c000cfa5:	50                   	push   eax
c000cfa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfae:	e8 39 af 01 00       	call   c0027eec <__divdf3>
c000cfb3:	83 c4 10             	add    esp,0x10
c000cfb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfbe:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfc1:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfdc:	e8 d8 b4 01 00       	call   c00284b9 <__gtdf2>
c000cfe1:	83 c4 10             	add    esp,0x10
c000cfe4:	85 c0                	test   eax,eax
c000cfe6:	7e 2d                	jle    c000d015 <sinc_stereo_vari_process+0x14f>
c000cfe8:	68 00 00 f0 3f       	push   0x3ff00000
c000cfed:	6a 00                	push   0x0
c000cfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff7:	e8 db b4 01 00       	call   c00284d7 <__ltdf2>
c000cffc:	83 c4 10             	add    esp,0x10
c000cfff:	85 c0                	test   eax,eax
c000d001:	79 4d                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d007:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d00b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d00f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d013:	eb 1b                	jmp    c000d030 <sinc_stereo_vari_process+0x16a>
c000d015:	68 00 00 f0 3f       	push   0x3ff00000
c000d01a:	6a 00                	push   0x0
c000d01c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d020:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d024:	e8 ae b4 01 00       	call   c00284d7 <__ltdf2>
c000d029:	83 c4 10             	add    esp,0x10
c000d02c:	85 c0                	test   eax,eax
c000d02e:	79 20                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d030:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d034:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d038:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d040:	e8 a7 ae 01 00       	call   c0027eec <__divdf3>
c000d045:	83 c4 10             	add    esp,0x10
c000d048:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d04c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d050:	50                   	push   eax
c000d051:	50                   	push   eax
c000d052:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05a:	e8 31 b6 01 00       	call   c0028690 <lrint>
c000d05f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d062:	40                   	inc    eax
c000d063:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d067:	0f af c7             	imul   eax,edi
c000d06a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d06e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d071:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d075:	58                   	pop    eax
c000d076:	5a                   	pop    edx
c000d077:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07f:	e8 0c b6 01 00       	call   c0028690 <lrint>
c000d084:	83 ec 0c             	sub    esp,0xc
c000d087:	50                   	push   eax
c000d088:	e8 de b1 01 00       	call   c002826b <__floatsidf>
c000d08d:	83 c4 10             	add    esp,0x10
c000d090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d094:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d098:	52                   	push   edx
c000d099:	50                   	push   eax
c000d09a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0a2:	e8 35 ab 01 00       	call   c0027bdc <__subdf3>
c000d0a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0af:	83 c4 20             	add    esp,0x20
c000d0b2:	6a 00                	push   0x0
c000d0b4:	6a 00                	push   0x0
c000d0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0be:	e8 14 b4 01 00       	call   c00284d7 <__ltdf2>
c000d0c3:	83 c4 10             	add    esp,0x10
c000d0c6:	85 c0                	test   eax,eax
c000d0c8:	79 1f                	jns    c000d0e9 <sinc_stereo_vari_process+0x223>
c000d0ca:	68 00 00 f0 3f       	push   0x3ff00000
c000d0cf:	6a 00                	push   0x0
c000d0d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d9:	e8 ad a4 01 00       	call   c002758b <__adddf3>
c000d0de:	83 c4 10             	add    esp,0x10
c000d0e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0ec:	83 ec 10             	sub    esp,0x10
c000d0ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0f3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d102:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d106:	e8 d1 aa 01 00       	call   c0027bdc <__subdf3>
c000d10b:	83 c4 18             	add    esp,0x18
c000d10e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d112:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d116:	52                   	push   edx
c000d117:	50                   	push   eax
c000d118:	e8 73 b5 01 00       	call   c0028690 <lrint>
c000d11d:	0f af f8             	imul   edi,eax
c000d120:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d124:	01 f8                	add    eax,edi
c000d126:	99                   	cdq    
c000d127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d12d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d131:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d135:	68 00 00 f0 3f       	push   0x3ff00000
c000d13a:	6a 00                	push   0x0
c000d13c:	e8 ab ad 01 00       	call   c0027eec <__divdf3>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d148:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d14c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d151:	68 23 42 92 0c       	push   0xc924223
c000d156:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15e:	e8 28 a4 01 00       	call   c002758b <__adddf3>
c000d163:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d167:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d16b:	83 c4 20             	add    esp,0x20
c000d16e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d176:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d17e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d181:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d184:	7d 50                	jge    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d186:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d189:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d18c:	01 c8                	add    eax,ecx
c000d18e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d191:	99                   	cdq    
c000d192:	f7 f9                	idiv   ecx
c000d194:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d198:	7d 0c                	jge    c000d1a6 <sinc_stereo_vari_process+0x2e0>
c000d19a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d19d:	85 ff                	test   edi,edi
c000d19f:	79 6c                	jns    c000d20d <sinc_stereo_vari_process+0x347>
c000d1a1:	e9 e7 00 00 00       	jmp    c000d28d <sinc_stereo_vari_process+0x3c7>
c000d1a6:	50                   	push   eax
c000d1a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ab:	56                   	push   esi
c000d1ac:	53                   	push   ebx
c000d1ad:	e8 4c e7 ff ff       	call   c000b8fe <prepare_data>
c000d1b2:	83 c4 10             	add    esp,0x10
c000d1b5:	89 c2                	mov    edx,eax
c000d1b7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1ba:	85 c0                	test   eax,eax
c000d1bc:	0f 85 bf 03 00 00    	jne    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d1c2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c8:	01 c8                	add    eax,ecx
c000d1ca:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1cd:	99                   	cdq    
c000d1ce:	f7 f9                	idiv   ecx
c000d1d0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1d4:	7c c4                	jl     c000d19a <sinc_stereo_vari_process+0x2d4>
c000d1d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1de:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1e1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ec:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ef:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1f5:	99                   	cdq    
c000d1f6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1ff:	99                   	cdq    
c000d200:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d203:	31 d2                	xor    edx,edx
c000d205:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d208:	e9 74 03 00 00       	jmp    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d20d:	83 ec 0c             	sub    esp,0xc
c000d210:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d213:	e8 53 b0 01 00       	call   c002826b <__floatsidf>
c000d218:	83 c4 10             	add    esp,0x10
c000d21b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d21f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d223:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d227:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d233:	e8 53 a3 01 00       	call   c002758b <__adddf3>
c000d238:	83 c4 10             	add    esp,0x10
c000d23b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d23f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d243:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d247:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d253:	e8 33 a3 01 00       	call   c002758b <__adddf3>
c000d258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d25b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d25f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d263:	e8 03 b0 01 00       	call   c002826b <__floatsidf>
c000d268:	83 c4 10             	add    esp,0x10
c000d26b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d26f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d273:	52                   	push   edx
c000d274:	50                   	push   eax
c000d275:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d279:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d27d:	e8 53 b2 01 00       	call   c00284d5 <__gedf2>
c000d282:	83 c4 10             	add    esp,0x10
c000d285:	85 c0                	test   eax,eax
c000d287:	0f 89 49 ff ff ff    	jns    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d28d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d291:	0f 8e ef 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d297:	83 ec 10             	sub    esp,0x10
c000d29a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d29d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2a0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2a3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d2a6:	e8 31 a9 01 00       	call   c0027bdc <__subdf3>
c000d2ab:	83 c4 18             	add    esp,0x18
c000d2ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	e8 b3 b3 01 00       	call   c0028670 <fabs>
c000d2bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2c5:	83 c4 10             	add    esp,0x10
c000d2c8:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2cd:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2da:	e8 da b1 01 00       	call   c00284b9 <__gtdf2>
c000d2df:	83 c4 10             	add    esp,0x10
c000d2e2:	85 c0                	test   eax,eax
c000d2e4:	0f 8e 9c 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d2ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ed:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f8:	52                   	push   edx
c000d2f9:	50                   	push   eax
c000d2fa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2fd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d300:	e8 d7 a8 01 00       	call   c0027bdc <__subdf3>
c000d305:	59                   	pop    ecx
c000d306:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d30e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d311:	e8 55 af 01 00       	call   c002826b <__floatsidf>
c000d316:	83 c4 10             	add    esp,0x10
c000d319:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d31d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d321:	52                   	push   edx
c000d322:	50                   	push   eax
c000d323:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32b:	e8 d8 a8 01 00       	call   c0027c08 <__muldf3>
c000d330:	5f                   	pop    edi
c000d331:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d335:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d339:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d33c:	e8 2a af 01 00       	call   c002826b <__floatsidf>
c000d341:	83 c4 10             	add    esp,0x10
c000d344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d348:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d34c:	52                   	push   edx
c000d34d:	50                   	push   eax
c000d34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d352:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d356:	e8 91 ab 01 00       	call   c0027eec <__divdf3>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d362:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d372:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d376:	e8 10 a2 01 00       	call   c002758b <__adddf3>
c000d37b:	83 c4 10             	add    esp,0x10
c000d37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d386:	83 ec 0c             	sub    esp,0xc
c000d389:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d38c:	e8 da ae 01 00       	call   c002826b <__floatsidf>
c000d391:	83 c4 10             	add    esp,0x10
c000d394:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d398:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ac:	e8 26 b1 01 00       	call   c00284d7 <__ltdf2>
c000d3b1:	83 c4 10             	add    esp,0x10
c000d3b4:	85 c0                	test   eax,eax
c000d3b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3be:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3c2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3c6:	78 10                	js     c000d3d8 <sinc_stereo_vari_process+0x512>
c000d3c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3d4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e8:	e8 1b a8 01 00       	call   c0027c08 <__muldf3>
c000d3ed:	59                   	pop    ecx
c000d3ee:	5f                   	pop    edi
c000d3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3ff:	e8 d3 e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d404:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d408:	89 c7                	mov    edi,eax
c000d40a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d40e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d416:	e8 ed a7 01 00       	call   c0027c08 <__muldf3>
c000d41b:	83 c4 18             	add    esp,0x18
c000d41e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d422:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d426:	52                   	push   edx
c000d427:	50                   	push   eax
c000d428:	e8 aa e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d42d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d430:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d434:	83 c4 0c             	add    esp,0xc
c000d437:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d43a:	8d 04 90             	lea    eax,[eax+edx*4]
c000d43d:	50                   	push   eax
c000d43e:	50                   	push   eax
c000d43f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d442:	e8 24 ae 01 00       	call   c002826b <__floatsidf>
c000d447:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d44b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45f:	e8 88 aa 01 00       	call   c0027eec <__divdf3>
c000d464:	83 c4 18             	add    esp,0x18
c000d467:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d46b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d46f:	52                   	push   edx
c000d470:	89 fa                	mov    edx,edi
c000d472:	50                   	push   eax
c000d473:	89 d8                	mov    eax,ebx
c000d475:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d479:	e8 02 c7 ff ff       	call   c0009b80 <calc_output_stereo>
c000d47e:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d482:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d486:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d48a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d492:	e8 55 aa 01 00       	call   c0027eec <__divdf3>
c000d497:	83 c4 10             	add    esp,0x10
c000d49a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d49e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4b2:	e8 d4 a0 01 00       	call   c002758b <__adddf3>
c000d4b7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4bb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4bf:	83 c4 18             	add    esp,0x18
c000d4c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	e8 c1 b1 01 00       	call   c0028690 <lrint>
c000d4cf:	83 ec 0c             	sub    esp,0xc
c000d4d2:	50                   	push   eax
c000d4d3:	e8 93 ad 01 00       	call   c002826b <__floatsidf>
c000d4d8:	83 c4 10             	add    esp,0x10
c000d4db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4e3:	52                   	push   edx
c000d4e4:	50                   	push   eax
c000d4e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ed:	e8 ea a6 01 00       	call   c0027bdc <__subdf3>
c000d4f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4fa:	83 c4 20             	add    esp,0x20
c000d4fd:	6a 00                	push   0x0
c000d4ff:	6a 00                	push   0x0
c000d501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d509:	e8 c9 af 01 00       	call   c00284d7 <__ltdf2>
c000d50e:	83 c4 10             	add    esp,0x10
c000d511:	85 c0                	test   eax,eax
c000d513:	79 20                	jns    c000d535 <sinc_stereo_vari_process+0x66f>
c000d515:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d519:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d525:	e8 61 a0 01 00       	call   c002758b <__adddf3>
c000d52a:	83 c4 10             	add    esp,0x10
c000d52d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d531:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d535:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d538:	83 ec 10             	sub    esp,0x10
c000d53b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d53f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d552:	e8 85 a6 01 00       	call   c0027bdc <__subdf3>
c000d557:	83 c4 18             	add    esp,0x18
c000d55a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d55e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d562:	52                   	push   edx
c000d563:	50                   	push   eax
c000d564:	e8 27 b1 01 00       	call   c0028690 <lrint>
c000d569:	0f af f8             	imul   edi,eax
c000d56c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	01 f8                	add    eax,edi
c000d575:	99                   	cdq    
c000d576:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d579:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d57c:	e9 fd fb ff ff       	jmp    c000d17e <sinc_stereo_vari_process+0x2b8>
c000d581:	83 c4 4c             	add    esp,0x4c
c000d584:	89 d0                	mov    eax,edx
c000d586:	5b                   	pop    ebx
c000d587:	5e                   	pop    esi
c000d588:	5f                   	pop    edi
c000d589:	5d                   	pop    ebp
c000d58a:	c3                   	ret    

c000d58b <sinc_mono_vari_process>:
c000d58b:	55                   	push   ebp
c000d58c:	ba 05 00 00 00       	mov    edx,0x5
c000d591:	57                   	push   edi
c000d592:	56                   	push   esi
c000d593:	53                   	push   ebx
c000d594:	83 ec 4c             	sub    esp,0x4c
c000d597:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d59b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d59f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d5a2:	85 db                	test   ebx,ebx
c000d5a4:	0f 84 c1 06 00 00    	je     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d5aa:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5b0:	0f af c7             	imul   eax,edi
c000d5b3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5b6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5c0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5c7:	0f af c7             	imul   eax,edi
c000d5ca:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5cd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5d1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5de:	68 00 00 70 3f       	push   0x3f700000
c000d5e3:	6a 00                	push   0x0
c000d5e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ed:	e8 e5 ae 01 00       	call   c00284d7 <__ltdf2>
c000d5f2:	83 c4 10             	add    esp,0x10
c000d5f5:	ba 16 00 00 00       	mov    edx,0x16
c000d5fa:	85 c0                	test   eax,eax
c000d5fc:	0f 88 69 06 00 00    	js     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d602:	68 00 00 70 40       	push   0x40700000
c000d607:	6a 00                	push   0x0
c000d609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d60d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d611:	e8 a3 ae 01 00       	call   c00284b9 <__gtdf2>
c000d616:	83 c4 10             	add    esp,0x10
c000d619:	ba 16 00 00 00       	mov    edx,0x16
c000d61e:	85 c0                	test   eax,eax
c000d620:	0f 8f 45 06 00 00    	jg     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d626:	83 ec 0c             	sub    esp,0xc
c000d629:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d62c:	e8 3a ac 01 00       	call   c002826b <__floatsidf>
c000d631:	83 c4 10             	add    esp,0x10
c000d634:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d638:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d63c:	68 00 00 00 40       	push   0x40000000
c000d641:	6a 00                	push   0x0
c000d643:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64b:	e8 3b 9f 01 00       	call   c002758b <__adddf3>
c000d650:	59                   	pop    ecx
c000d651:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d655:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d659:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d65c:	e8 0a ac 01 00       	call   c002826b <__floatsidf>
c000d661:	83 c4 10             	add    esp,0x10
c000d664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d668:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d66c:	52                   	push   edx
c000d66d:	50                   	push   eax
c000d66e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d676:	e8 71 a8 01 00       	call   c0027eec <__divdf3>
c000d67b:	83 c4 10             	add    esp,0x10
c000d67e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d682:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d686:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d689:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d68c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a4:	e8 10 ae 01 00       	call   c00284b9 <__gtdf2>
c000d6a9:	83 c4 10             	add    esp,0x10
c000d6ac:	85 c0                	test   eax,eax
c000d6ae:	7e 2d                	jle    c000d6dd <sinc_mono_vari_process+0x152>
c000d6b0:	68 00 00 f0 3f       	push   0x3ff00000
c000d6b5:	6a 00                	push   0x0
c000d6b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bf:	e8 13 ae 01 00       	call   c00284d7 <__ltdf2>
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	85 c0                	test   eax,eax
c000d6c9:	79 4d                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6db:	eb 1b                	jmp    c000d6f8 <sinc_mono_vari_process+0x16d>
c000d6dd:	68 00 00 f0 3f       	push   0x3ff00000
c000d6e2:	6a 00                	push   0x0
c000d6e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6ec:	e8 e6 ad 01 00       	call   c00284d7 <__ltdf2>
c000d6f1:	83 c4 10             	add    esp,0x10
c000d6f4:	85 c0                	test   eax,eax
c000d6f6:	79 20                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d700:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d704:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d708:	e8 df a7 01 00       	call   c0027eec <__divdf3>
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d714:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d718:	50                   	push   eax
c000d719:	50                   	push   eax
c000d71a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d722:	e8 69 af 01 00       	call   c0028690 <lrint>
c000d727:	40                   	inc    eax
c000d728:	0f af c7             	imul   eax,edi
c000d72b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d72f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d733:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d736:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d739:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d73d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d741:	58                   	pop    eax
c000d742:	5a                   	pop    edx
c000d743:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d747:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d74b:	e8 40 af 01 00       	call   c0028690 <lrint>
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	50                   	push   eax
c000d754:	e8 12 ab 01 00       	call   c002826b <__floatsidf>
c000d759:	83 c4 10             	add    esp,0x10
c000d75c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d760:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d764:	52                   	push   edx
c000d765:	50                   	push   eax
c000d766:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76e:	e8 69 a4 01 00       	call   c0027bdc <__subdf3>
c000d773:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d777:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d77b:	83 c4 20             	add    esp,0x20
c000d77e:	6a 00                	push   0x0
c000d780:	6a 00                	push   0x0
c000d782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d78a:	e8 48 ad 01 00       	call   c00284d7 <__ltdf2>
c000d78f:	83 c4 10             	add    esp,0x10
c000d792:	85 c0                	test   eax,eax
c000d794:	79 1f                	jns    c000d7b5 <sinc_mono_vari_process+0x22a>
c000d796:	68 00 00 f0 3f       	push   0x3ff00000
c000d79b:	6a 00                	push   0x0
c000d79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a5:	e8 e1 9d 01 00       	call   c002758b <__adddf3>
c000d7aa:	83 c4 10             	add    esp,0x10
c000d7ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7b5:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7bb:	83 ec 10             	sub    esp,0x10
c000d7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ce:	e8 09 a4 01 00       	call   c0027bdc <__subdf3>
c000d7d3:	83 c4 18             	add    esp,0x18
c000d7d6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7de:	52                   	push   edx
c000d7df:	50                   	push   eax
c000d7e0:	e8 ab ae 01 00       	call   c0028690 <lrint>
c000d7e5:	0f af f8             	imul   edi,eax
c000d7e8:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7eb:	31 ff                	xor    edi,edi
c000d7ed:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7f2:	99                   	cdq    
c000d7f3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7f6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d801:	55                   	push   ebp
c000d802:	57                   	push   edi
c000d803:	e8 e4 a6 01 00       	call   c0027eec <__divdf3>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d813:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d818:	68 23 42 92 0c       	push   0xc924223
c000d81d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d821:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d825:	e8 61 9d 01 00       	call   c002758b <__adddf3>
c000d82a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d82e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d832:	83 c4 20             	add    esp,0x20
c000d835:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d839:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d83d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d840:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d843:	7d 54                	jge    c000d899 <sinc_mono_vari_process+0x30e>
c000d845:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d848:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d84b:	01 c8                	add    eax,ecx
c000d84d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d850:	99                   	cdq    
c000d851:	f7 f9                	idiv   ecx
c000d853:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d857:	7d 0c                	jge    c000d865 <sinc_mono_vari_process+0x2da>
c000d859:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d85c:	85 ff                	test   edi,edi
c000d85e:	79 73                	jns    c000d8d3 <sinc_mono_vari_process+0x348>
c000d860:	e9 ee 00 00 00       	jmp    c000d953 <sinc_mono_vari_process+0x3c8>
c000d865:	50                   	push   eax
c000d866:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d86a:	56                   	push   esi
c000d86b:	53                   	push   ebx
c000d86c:	e8 8d e0 ff ff       	call   c000b8fe <prepare_data>
c000d871:	89 c2                	mov    edx,eax
c000d873:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d877:	83 c4 10             	add    esp,0x10
c000d87a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d87d:	85 d2                	test   edx,edx
c000d87f:	0f 85 e6 03 00 00    	jne    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d885:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d888:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d88b:	01 c8                	add    eax,ecx
c000d88d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d890:	99                   	cdq    
c000d891:	f7 f9                	idiv   ecx
c000d893:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d897:	7c c0                	jl     c000d859 <sinc_mono_vari_process+0x2ce>
c000d899:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d89d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8a5:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8b3:	89 01                	mov    DWORD PTR [ecx],eax
c000d8b5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8bb:	99                   	cdq    
c000d8bc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8bf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8c2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8c5:	99                   	cdq    
c000d8c6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c9:	31 d2                	xor    edx,edx
c000d8cb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8ce:	e9 98 03 00 00       	jmp    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d8d3:	83 ec 0c             	sub    esp,0xc
c000d8d6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d9:	e8 8d a9 01 00       	call   c002826b <__floatsidf>
c000d8de:	83 c4 10             	add    esp,0x10
c000d8e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f9:	e8 8d 9c 01 00       	call   c002758b <__adddf3>
c000d8fe:	83 c4 10             	add    esp,0x10
c000d901:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d905:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d909:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d90d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d911:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d919:	e8 6d 9c 01 00       	call   c002758b <__adddf3>
c000d91e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d921:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d925:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d929:	e8 3d a9 01 00       	call   c002826b <__floatsidf>
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d935:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d939:	52                   	push   edx
c000d93a:	50                   	push   eax
c000d93b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d943:	e8 71 ab 01 00       	call   c00284b9 <__gtdf2>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	85 c0                	test   eax,eax
c000d94d:	0f 8f 46 ff ff ff    	jg     c000d899 <sinc_mono_vari_process+0x30e>
c000d953:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d957:	0f 8e f5 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d95d:	83 ec 10             	sub    esp,0x10
c000d960:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d963:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d966:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d96a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d96d:	ff 30                	push   DWORD PTR [eax]
c000d96f:	e8 68 a2 01 00       	call   c0027bdc <__subdf3>
c000d974:	83 c4 18             	add    esp,0x18
c000d977:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d97b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d97f:	52                   	push   edx
c000d980:	50                   	push   eax
c000d981:	e8 ea ac 01 00       	call   c0028670 <fabs>
c000d986:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d98a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d98e:	83 c4 10             	add    esp,0x10
c000d991:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d996:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d99b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9a3:	e8 11 ab 01 00       	call   c00284b9 <__gtdf2>
c000d9a8:	83 c4 10             	add    esp,0x10
c000d9ab:	85 c0                	test   eax,eax
c000d9ad:	0f 8e 9f 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d9b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9c4:	52                   	push   edx
c000d9c5:	50                   	push   eax
c000d9c6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9cc:	e8 0b a2 01 00       	call   c0027bdc <__subdf3>
c000d9d1:	5f                   	pop    edi
c000d9d2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9da:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9dd:	e8 89 a8 01 00       	call   c002826b <__floatsidf>
c000d9e2:	83 c4 10             	add    esp,0x10
c000d9e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ed:	52                   	push   edx
c000d9ee:	50                   	push   eax
c000d9ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f7:	e8 0c a2 01 00       	call   c0027c08 <__muldf3>
c000d9fc:	5d                   	pop    ebp
c000d9fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000da01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000da05:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da08:	e8 5e a8 01 00       	call   c002826b <__floatsidf>
c000da0d:	83 c4 10             	add    esp,0x10
c000da10:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da14:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da18:	52                   	push   edx
c000da19:	50                   	push   eax
c000da1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da22:	e8 c5 a4 01 00       	call   c0027eec <__divdf3>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da2e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da42:	e8 44 9b 01 00       	call   c002758b <__adddf3>
c000da47:	83 c4 10             	add    esp,0x10
c000da4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da4e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da52:	83 ec 0c             	sub    esp,0xc
c000da55:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da58:	e8 0e a8 01 00       	call   c002826b <__floatsidf>
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da78:	e8 5a aa 01 00       	call   c00284d7 <__ltdf2>
c000da7d:	83 c4 10             	add    esp,0x10
c000da80:	85 c0                	test   eax,eax
c000da82:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da86:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da8a:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da8e:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da92:	78 10                	js     c000daa4 <sinc_mono_vari_process+0x519>
c000da94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000daa4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab4:	e8 4f a1 01 00       	call   c0027c08 <__muldf3>
c000dab9:	59                   	pop    ecx
c000daba:	5f                   	pop    edi
c000dabb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dabf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dacb:	e8 07 de ff ff       	call   c000b8d7 <double_to_fp>
c000dad0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad4:	89 c7                	mov    edi,eax
c000dad6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dada:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dade:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dae2:	e8 21 a1 01 00       	call   c0027c08 <__muldf3>
c000dae7:	83 c4 18             	add    esp,0x18
c000daea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daf2:	52                   	push   edx
c000daf3:	50                   	push   eax
c000daf4:	e8 de dd ff ff       	call   c000b8d7 <double_to_fp>
c000daf9:	83 ec 0c             	sub    esp,0xc
c000dafc:	89 c5                	mov    ebp,eax
c000dafe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db01:	e8 65 a7 01 00       	call   c002826b <__floatsidf>
c000db06:	83 c4 10             	add    esp,0x10
c000db09:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db0d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db11:	52                   	push   edx
c000db12:	50                   	push   eax
c000db13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1b:	e8 cc a3 01 00       	call   c0027eec <__divdf3>
c000db20:	83 c4 10             	add    esp,0x10
c000db23:	89 e9                	mov    ecx,ebp
c000db25:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db29:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db2d:	89 d8                	mov    eax,ebx
c000db2f:	89 fa                	mov    edx,edi
c000db31:	e8 ee bd ff ff       	call   c0009924 <calc_output_single>
c000db36:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db39:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db44:	52                   	push   edx
c000db45:	50                   	push   eax
c000db46:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4e:	e8 b5 a0 01 00       	call   c0027c08 <__muldf3>
c000db53:	59                   	pop    ecx
c000db54:	59                   	pop    ecx
c000db55:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db59:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db65:	e8 71 a9 01 00       	call   c00284db <__truncdfsf2>
c000db6a:	83 c4 10             	add    esp,0x10
c000db6d:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db70:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db83:	e8 64 a3 01 00       	call   c0027eec <__divdf3>
c000db88:	83 c4 10             	add    esp,0x10
c000db8b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db8f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dba3:	e8 e3 99 01 00       	call   c002758b <__adddf3>
c000dba8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dbac:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dbb0:	83 c4 18             	add    esp,0x18
c000dbb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbbb:	e8 d0 aa 01 00       	call   c0028690 <lrint>
c000dbc0:	83 ec 0c             	sub    esp,0xc
c000dbc3:	50                   	push   eax
c000dbc4:	e8 a2 a6 01 00       	call   c002826b <__floatsidf>
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbd4:	52                   	push   edx
c000dbd5:	50                   	push   eax
c000dbd6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbde:	e8 f9 9f 01 00       	call   c0027bdc <__subdf3>
c000dbe3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbe7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbeb:	83 c4 20             	add    esp,0x20
c000dbee:	6a 00                	push   0x0
c000dbf0:	6a 00                	push   0x0
c000dbf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbfa:	e8 d8 a8 01 00       	call   c00284d7 <__ltdf2>
c000dbff:	83 c4 10             	add    esp,0x10
c000dc02:	85 c0                	test   eax,eax
c000dc04:	79 20                	jns    c000dc26 <sinc_mono_vari_process+0x69b>
c000dc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc16:	e8 70 99 01 00       	call   c002758b <__adddf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc26:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc29:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc2c:	83 ec 10             	sub    esp,0x10
c000dc2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3f:	e8 98 9f 01 00       	call   c0027bdc <__subdf3>
c000dc44:	83 c4 18             	add    esp,0x18
c000dc47:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc4f:	52                   	push   edx
c000dc50:	50                   	push   eax
c000dc51:	e8 3a aa 01 00       	call   c0028690 <lrint>
c000dc56:	83 c4 10             	add    esp,0x10
c000dc59:	0f af f8             	imul   edi,eax
c000dc5c:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc5f:	99                   	cdq    
c000dc60:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc63:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc66:	e9 d2 fb ff ff       	jmp    c000d83d <sinc_mono_vari_process+0x2b2>
c000dc6b:	83 c4 4c             	add    esp,0x4c
c000dc6e:	89 d0                	mov    eax,edx
c000dc70:	5b                   	pop    ebx
c000dc71:	5e                   	pop    esi
c000dc72:	5f                   	pop    edi
c000dc73:	5d                   	pop    ebp
c000dc74:	c3                   	ret    

c000dc75 <sinc_get_name>:
c000dc75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc79:	31 c0                	xor    eax,eax
c000dc7b:	83 fa 02             	cmp    edx,0x2
c000dc7e:	77 07                	ja     c000dc87 <sinc_get_name+0x12>
c000dc80:	8b 04 95 84 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd617c]
c000dc87:	c3                   	ret    

c000dc88 <sinc_get_description>:
c000dc88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc8c:	31 c0                	xor    eax,eax
c000dc8e:	83 fa 02             	cmp    edx,0x2
c000dc91:	77 07                	ja     c000dc9a <sinc_get_description+0x12>
c000dc93:	8b 04 95 78 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6188]
c000dc9a:	c3                   	ret    

c000dc9b <sinc_set_converter>:
c000dc9b:	53                   	push   ebx
c000dc9c:	81 ec 58 08 00 00    	sub    esp,0x858
c000dca2:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dcac:	85 c0                	test   eax,eax
c000dcae:	74 13                	je     c000dcc3 <sinc_set_converter+0x28>
c000dcb0:	83 ec 0c             	sub    esp,0xc
c000dcb3:	50                   	push   eax
c000dcb4:	e8 a2 1b 00 00       	call   c000f85b <free>
c000dcb9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcc0:	83 c4 10             	add    esp,0x10
c000dcc3:	50                   	push   eax
c000dcc4:	68 44 08 00 00       	push   0x844
c000dcc9:	6a 00                	push   0x0
c000dccb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dccf:	50                   	push   eax
c000dcd0:	e8 ab 2a ff ff       	call   c0000780 <memset>
c000dcd5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd8:	83 c4 10             	add    esp,0x10
c000dcdb:	b8 0b 00 00 00       	mov    eax,0xb
c000dce0:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dce6:	7f 6e                	jg     c000dd56 <sinc_set_converter+0xbb>
c000dce8:	83 fa 01             	cmp    edx,0x1
c000dceb:	75 10                	jne    c000dcfd <sinc_set_converter+0x62>
c000dced:	c7 43 24 8b d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d58b
c000dcf4:	c7 43 20 8b d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d58b
c000dcfb:	eb 4d                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dcfd:	83 fa 02             	cmp    edx,0x2
c000dd00:	75 10                	jne    c000dd12 <sinc_set_converter+0x77>
c000dd02:	c7 43 24 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cec6
c000dd09:	c7 43 20 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cec6
c000dd10:	eb 38                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd12:	83 fa 04             	cmp    edx,0x4
c000dd15:	75 10                	jne    c000dd27 <sinc_set_converter+0x8c>
c000dd17:	c7 43 24 01 c8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c801
c000dd1e:	c7 43 20 01 c8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c801
c000dd25:	eb 23                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd27:	83 fa 06             	cmp    edx,0x6
c000dd2a:	75 10                	jne    c000dd3c <sinc_set_converter+0xa1>
c000dd2c:	c7 43 24 3c c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c13c
c000dd33:	c7 43 20 3c c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c13c
c000dd3a:	eb 0e                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd3c:	c7 43 24 78 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba78
c000dd43:	c7 43 20 78 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba78
c000dd4a:	c7 43 28 2b ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad2b
c000dd51:	b8 0a 00 00 00       	mov    eax,0xa
c000dd56:	81 c4 58 08 00 00    	add    esp,0x858
c000dd5c:	5b                   	pop    ebx
c000dd5d:	c3                   	ret    

c000dd5e <zoh_vari_process>:
c000dd5e:	55                   	push   ebp
c000dd5f:	31 d2                	xor    edx,edx
c000dd61:	57                   	push   edi
c000dd62:	56                   	push   esi
c000dd63:	53                   	push   ebx
c000dd64:	83 ec 3c             	sub    esp,0x3c
c000dd67:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd6b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd6f:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd73:	0f 8e 80 06 00 00    	jle    c000e3f9 <zoh_vari_process+0x69b>
c000dd79:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd7c:	ba 05 00 00 00       	mov    edx,0x5
c000dd81:	85 db                	test   ebx,ebx
c000dd83:	0f 84 70 06 00 00    	je     c000e3f9 <zoh_vari_process+0x69b>
c000dd89:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd8c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd90:	74 19                	je     c000ddab <zoh_vari_process+0x4d>
c000dd92:	31 d2                	xor    edx,edx
c000dd94:	39 c2                	cmp    edx,eax
c000dd96:	7d 0c                	jge    c000dda4 <zoh_vari_process+0x46>
c000dd98:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd9a:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd9d:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dda1:	42                   	inc    edx
c000dda2:	eb f0                	jmp    c000dd94 <zoh_vari_process+0x36>
c000dda4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ddab:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ddae:	0f af d0             	imul   edx,eax
c000ddb1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddb4:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddbf:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddc2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddcc:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddd6:	68 00 00 70 3f       	push   0x3f700000
c000dddb:	6a 00                	push   0x0
c000dddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde5:	e8 ed a6 01 00       	call   c00284d7 <__ltdf2>
c000ddea:	83 c4 10             	add    esp,0x10
c000dded:	ba 16 00 00 00       	mov    edx,0x16
c000ddf2:	85 c0                	test   eax,eax
c000ddf4:	0f 88 ff 05 00 00    	js     c000e3f9 <zoh_vari_process+0x69b>
c000ddfa:	68 00 00 70 40       	push   0x40700000
c000ddff:	6a 00                	push   0x0
c000de01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de09:	e8 ab a6 01 00       	call   c00284b9 <__gtdf2>
c000de0e:	83 c4 10             	add    esp,0x10
c000de11:	ba 16 00 00 00       	mov    edx,0x16
c000de16:	85 c0                	test   eax,eax
c000de18:	0f 8f db 05 00 00    	jg     c000e3f9 <zoh_vari_process+0x69b>
c000de1e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de21:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de2c:	68 00 00 f0 3f       	push   0x3ff00000
c000de31:	6a 00                	push   0x0
c000de33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de3b:	e8 97 a6 01 00       	call   c00284d7 <__ltdf2>
c000de40:	83 c4 10             	add    esp,0x10
c000de43:	85 c0                	test   eax,eax
c000de45:	0f 89 da 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000de4b:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de4e:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de51:	0f 8d ce 01 00 00    	jge    c000e025 <zoh_vari_process+0x2c7>
c000de57:	83 ec 0c             	sub    esp,0xc
c000de5a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de5d:	e8 09 a4 01 00       	call   c002826b <__floatsidf>
c000de62:	83 c4 10             	add    esp,0x10
c000de65:	89 04 24             	mov    DWORD PTR [esp],eax
c000de68:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7c:	e8 87 9d 01 00       	call   c0027c08 <__muldf3>
c000de81:	59                   	pop    ecx
c000de82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de8d:	e8 d9 a3 01 00       	call   c002826b <__floatsidf>
c000de92:	83 c4 10             	add    esp,0x10
c000de95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9d:	52                   	push   edx
c000de9e:	50                   	push   eax
c000de9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea7:	e8 df 96 01 00       	call   c002758b <__adddf3>
c000deac:	59                   	pop    ecx
c000dead:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000deb1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000deb5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb8:	e8 ae a3 01 00       	call   c002826b <__floatsidf>
c000debd:	83 c4 10             	add    esp,0x10
c000dec0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dec4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec8:	52                   	push   edx
c000dec9:	50                   	push   eax
c000deca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dece:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ded2:	e8 fe a5 01 00       	call   c00284d5 <__gedf2>
c000ded7:	83 c4 10             	add    esp,0x10
c000deda:	85 c0                	test   eax,eax
c000dedc:	0f 89 43 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000dee2:	85 ed                	test   ebp,ebp
c000dee4:	0f 8e ec 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000deea:	83 ec 10             	sub    esp,0x10
c000deed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000def0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000def3:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000def6:	ff 37                	push   DWORD PTR [edi]
c000def8:	e8 df 9c 01 00       	call   c0027bdc <__subdf3>
c000defd:	83 c4 18             	add    esp,0x18
c000df00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df08:	52                   	push   edx
c000df09:	50                   	push   eax
c000df0a:	e8 61 a7 01 00       	call   c0028670 <fabs>
c000df0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df13:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df1f:	68 23 42 92 0c       	push   0xc924223
c000df24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df2c:	e8 88 a5 01 00       	call   c00284b9 <__gtdf2>
c000df31:	83 c4 10             	add    esp,0x10
c000df34:	85 c0                	test   eax,eax
c000df36:	0f 8e 9a 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000df3c:	8b 07                	mov    eax,DWORD PTR [edi]
c000df3e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df41:	89 04 24             	mov    DWORD PTR [esp],eax
c000df44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df48:	52                   	push   edx
c000df49:	50                   	push   eax
c000df4a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df4d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df50:	e8 87 9c 01 00       	call   c0027bdc <__subdf3>
c000df55:	59                   	pop    ecx
c000df56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df5e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df61:	e8 05 a3 01 00       	call   c002826b <__floatsidf>
c000df66:	83 c4 10             	add    esp,0x10
c000df69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df71:	52                   	push   edx
c000df72:	50                   	push   eax
c000df73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7b:	e8 88 9c 01 00       	call   c0027c08 <__muldf3>
c000df80:	5d                   	pop    ebp
c000df81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df89:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df8c:	e8 da a2 01 00       	call   c002826b <__floatsidf>
c000df91:	83 c4 10             	add    esp,0x10
c000df94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df9c:	52                   	push   edx
c000df9d:	50                   	push   eax
c000df9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa6:	e8 41 9f 01 00       	call   c0027eec <__divdf3>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfba:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc6:	e8 c0 95 01 00       	call   c002758b <__adddf3>
c000dfcb:	83 c4 10             	add    esp,0x10
c000dfce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd6:	31 c0                	xor    eax,eax
c000dfd8:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfdb:	7e 13                	jle    c000dff0 <zoh_vari_process+0x292>
c000dfdd:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfe1:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfe4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfe7:	40                   	inc    eax
c000dfe8:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfeb:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfee:	eb e8                	jmp    c000dfd8 <zoh_vari_process+0x27a>
c000dff0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff8:	68 00 00 f0 3f       	push   0x3ff00000
c000dffd:	6a 00                	push   0x0
c000dfff:	e8 e8 9e 01 00       	call   c0027eec <__divdf3>
c000e004:	83 c4 10             	add    esp,0x10
c000e007:	89 04 24             	mov    DWORD PTR [esp],eax
c000e00a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e00e:	52                   	push   edx
c000e00f:	50                   	push   eax
c000e010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e018:	e8 6e 95 01 00       	call   c002758b <__adddf3>
c000e01d:	83 c4 10             	add    esp,0x10
c000e020:	e9 ff fd ff ff       	jmp    c000de24 <zoh_vari_process+0xc6>
c000e025:	55                   	push   ebp
c000e026:	55                   	push   ebp
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 5c a6 01 00       	call   c0028690 <lrint>
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	50                   	push   eax
c000e038:	e8 2e a2 01 00       	call   c002826b <__floatsidf>
c000e03d:	83 c4 10             	add    esp,0x10
c000e040:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e044:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e048:	52                   	push   edx
c000e049:	50                   	push   eax
c000e04a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e052:	e8 85 9b 01 00       	call   c0027bdc <__subdf3>
c000e057:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e05b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e05f:	83 c4 20             	add    esp,0x20
c000e062:	6a 00                	push   0x0
c000e064:	6a 00                	push   0x0
c000e066:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06e:	e8 64 a4 01 00       	call   c00284d7 <__ltdf2>
c000e073:	83 c4 10             	add    esp,0x10
c000e076:	85 c0                	test   eax,eax
c000e078:	79 1e                	jns    c000e098 <zoh_vari_process+0x33a>
c000e07a:	68 00 00 f0 3f       	push   0x3ff00000
c000e07f:	6a 00                	push   0x0
c000e081:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e085:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e089:	e8 fd 94 01 00       	call   c002758b <__adddf3>
c000e08e:	83 c4 10             	add    esp,0x10
c000e091:	89 04 24             	mov    DWORD PTR [esp],eax
c000e094:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e098:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e09b:	83 ec 10             	sub    esp,0x10
c000e09e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ae:	e8 29 9b 01 00       	call   c0027bdc <__subdf3>
c000e0b3:	83 c4 18             	add    esp,0x18
c000e0b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0be:	52                   	push   edx
c000e0bf:	50                   	push   eax
c000e0c0:	e8 cb a5 01 00       	call   c0028690 <lrint>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	0f af e8             	imul   ebp,eax
c000e0cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0ce:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0d1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0df:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0e2:	0f 8d 7a 02 00 00    	jge    c000e362 <zoh_vari_process+0x604>
c000e0e8:	83 ec 0c             	sub    esp,0xc
c000e0eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ee:	e8 78 a1 01 00       	call   c002826b <__floatsidf>
c000e0f3:	83 c4 10             	add    esp,0x10
c000e0f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0fe:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e102:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e106:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10e:	e8 f5 9a 01 00       	call   c0027c08 <__muldf3>
c000e113:	59                   	pop    ecx
c000e114:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e118:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e11c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e120:	e8 46 a1 01 00       	call   c002826b <__floatsidf>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e130:	52                   	push   edx
c000e131:	50                   	push   eax
c000e132:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e136:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13a:	e8 4c 94 01 00       	call   c002758b <__adddf3>
c000e13f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e142:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e146:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e14a:	e8 1c a1 01 00       	call   c002826b <__floatsidf>
c000e14f:	83 c4 10             	add    esp,0x10
c000e152:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e156:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e15a:	52                   	push   edx
c000e15b:	50                   	push   eax
c000e15c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e160:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e164:	e8 70 a3 01 00       	call   c00284d9 <__ledf2>
c000e169:	83 c4 10             	add    esp,0x10
c000e16c:	85 c0                	test   eax,eax
c000e16e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e172:	0f 8f ea 01 00 00    	jg     c000e362 <zoh_vari_process+0x604>
c000e178:	85 c9                	test   ecx,ecx
c000e17a:	0f 8e ed 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e180:	83 ec 10             	sub    esp,0x10
c000e183:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e186:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e189:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e18c:	ff 37                	push   DWORD PTR [edi]
c000e18e:	e8 49 9a 01 00       	call   c0027bdc <__subdf3>
c000e193:	83 c4 18             	add    esp,0x18
c000e196:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e19a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e19e:	52                   	push   edx
c000e19f:	50                   	push   eax
c000e1a0:	e8 cb a4 01 00       	call   c0028670 <fabs>
c000e1a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1ad:	83 c4 10             	add    esp,0x10
c000e1b0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1b5:	68 23 42 92 0c       	push   0xc924223
c000e1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1c2:	e8 f2 a2 01 00       	call   c00284b9 <__gtdf2>
c000e1c7:	83 c4 10             	add    esp,0x10
c000e1ca:	85 c0                	test   eax,eax
c000e1cc:	0f 8e 9b 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e1d2:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1d4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1df:	52                   	push   edx
c000e1e0:	50                   	push   eax
c000e1e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1e7:	e8 f0 99 01 00       	call   c0027bdc <__subdf3>
c000e1ec:	5d                   	pop    ebp
c000e1ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1f5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f8:	e8 6e a0 01 00       	call   c002826b <__floatsidf>
c000e1fd:	83 c4 10             	add    esp,0x10
c000e200:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e204:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e208:	52                   	push   edx
c000e209:	50                   	push   eax
c000e20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e212:	e8 f1 99 01 00       	call   c0027c08 <__muldf3>
c000e217:	59                   	pop    ecx
c000e218:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e21c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e220:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e223:	e8 43 a0 01 00       	call   c002826b <__floatsidf>
c000e228:	83 c4 10             	add    esp,0x10
c000e22b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e22f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e233:	52                   	push   edx
c000e234:	50                   	push   eax
c000e235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e23d:	e8 aa 9c 01 00       	call   c0027eec <__divdf3>
c000e242:	83 c4 10             	add    esp,0x10
c000e245:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e249:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e24d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e25d:	e8 29 93 01 00       	call   c002758b <__adddf3>
c000e262:	83 c4 10             	add    esp,0x10
c000e265:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e269:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e26d:	31 d2                	xor    edx,edx
c000e26f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e272:	39 d0                	cmp    eax,edx
c000e274:	7e 1d                	jle    c000e293 <zoh_vari_process+0x535>
c000e276:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e279:	29 c1                	sub    ecx,eax
c000e27b:	89 c8                	mov    eax,ecx
c000e27d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e27f:	01 d0                	add    eax,edx
c000e281:	42                   	inc    edx
c000e282:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e285:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e288:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e28b:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e28e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e291:	eb dc                	jmp    c000e26f <zoh_vari_process+0x511>
c000e293:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e297:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e29b:	68 00 00 f0 3f       	push   0x3ff00000
c000e2a0:	6a 00                	push   0x0
c000e2a2:	e8 45 9c 01 00       	call   c0027eec <__divdf3>
c000e2a7:	83 c4 10             	add    esp,0x10
c000e2aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c2:	e8 c4 92 01 00       	call   c002758b <__adddf3>
c000e2c7:	5d                   	pop    ebp
c000e2c8:	59                   	pop    ecx
c000e2c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d9:	e8 b2 a3 01 00       	call   c0028690 <lrint>
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	50                   	push   eax
c000e2e2:	e8 84 9f 01 00       	call   c002826b <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2f2:	52                   	push   edx
c000e2f3:	50                   	push   eax
c000e2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2fc:	e8 db 98 01 00       	call   c0027bdc <__subdf3>
c000e301:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e305:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e309:	83 c4 20             	add    esp,0x20
c000e30c:	6a 00                	push   0x0
c000e30e:	6a 00                	push   0x0
c000e310:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e314:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e318:	e8 ba a1 01 00       	call   c00284d7 <__ltdf2>
c000e31d:	83 c4 10             	add    esp,0x10
c000e320:	85 c0                	test   eax,eax
c000e322:	79 1e                	jns    c000e342 <zoh_vari_process+0x5e4>
c000e324:	68 00 00 f0 3f       	push   0x3ff00000
c000e329:	6a 00                	push   0x0
c000e32b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e333:	e8 53 92 01 00       	call   c002758b <__adddf3>
c000e338:	83 c4 10             	add    esp,0x10
c000e33b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e33e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e342:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e345:	83 ec 10             	sub    esp,0x10
c000e348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e34c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e350:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e354:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e358:	e8 7f 98 01 00       	call   c0027bdc <__subdf3>
c000e35d:	e9 51 fd ff ff       	jmp    c000e0b3 <zoh_vari_process+0x355>
c000e362:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e366:	7d 3a                	jge    c000e3a2 <zoh_vari_process+0x644>
c000e368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36c:	83 ec 0c             	sub    esp,0xc
c000e36f:	29 e8                	sub    eax,ebp
c000e371:	99                   	cdq    
c000e372:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e375:	50                   	push   eax
c000e376:	e8 f0 9e 01 00       	call   c002826b <__floatsidf>
c000e37b:	83 c4 10             	add    esp,0x10
c000e37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e386:	52                   	push   edx
c000e387:	50                   	push   eax
c000e388:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e38c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e390:	e8 f6 91 01 00       	call   c002758b <__adddf3>
c000e395:	83 c4 10             	add    esp,0x10
c000e398:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e39b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e39e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e3a2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e3a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a9:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3ac:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3b2:	85 c0                	test   eax,eax
c000e3b4:	7f 25                	jg     c000e3db <zoh_vari_process+0x67d>
c000e3b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3be:	89 07                	mov    DWORD PTR [edi],eax
c000e3c0:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3c6:	99                   	cdq    
c000e3c7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ca:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3d0:	99                   	cdq    
c000e3d1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3d4:	31 d2                	xor    edx,edx
c000e3d6:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d9:	eb 1e                	jmp    c000e3f9 <zoh_vari_process+0x69b>
c000e3db:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3de:	31 d2                	xor    edx,edx
c000e3e0:	29 c8                	sub    eax,ecx
c000e3e2:	c1 e0 02             	shl    eax,0x2
c000e3e5:	39 d1                	cmp    ecx,edx
c000e3e7:	7e cd                	jle    c000e3b6 <zoh_vari_process+0x658>
c000e3e9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3eb:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ef:	83 c0 04             	add    eax,0x4
c000e3f2:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3f6:	42                   	inc    edx
c000e3f7:	eb ec                	jmp    c000e3e5 <zoh_vari_process+0x687>
c000e3f9:	83 c4 3c             	add    esp,0x3c
c000e3fc:	89 d0                	mov    eax,edx
c000e3fe:	5b                   	pop    ebx
c000e3ff:	5e                   	pop    esi
c000e400:	5f                   	pop    edi
c000e401:	5d                   	pop    ebp
c000e402:	c3                   	ret    

c000e403 <zoh_reset>:
c000e403:	83 ec 0c             	sub    esp,0xc
c000e406:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e40a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e40d:	85 c0                	test   eax,eax
c000e40f:	74 20                	je     c000e431 <zoh_reset+0x2e>
c000e411:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e414:	83 c0 1c             	add    eax,0x1c
c000e417:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e41a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e421:	c1 e2 02             	shl    edx,0x2
c000e424:	51                   	push   ecx
c000e425:	52                   	push   edx
c000e426:	6a 00                	push   0x0
c000e428:	50                   	push   eax
c000e429:	e8 52 23 ff ff       	call   c0000780 <memset>
c000e42e:	83 c4 10             	add    esp,0x10
c000e431:	83 c4 0c             	add    esp,0xc
c000e434:	c3                   	ret    

c000e435 <zoh_get_name>:
c000e435:	31 c0                	xor    eax,eax
c000e437:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e43c:	75 05                	jne    c000e443 <zoh_get_name+0xe>
c000e43e:	b8 9e 9f 02 c0       	mov    eax,0xc0029f9e
c000e443:	c3                   	ret    

c000e444 <zoh_get_description>:
c000e444:	31 c0                	xor    eax,eax
c000e446:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e44b:	75 05                	jne    c000e452 <zoh_get_description+0xe>
c000e44d:	b8 af 9f 02 c0       	mov    eax,0xc0029faf
c000e452:	c3                   	ret    

c000e453 <zoh_set_converter>:
c000e453:	53                   	push   ebx
c000e454:	b8 0a 00 00 00       	mov    eax,0xa
c000e459:	83 ec 08             	sub    esp,0x8
c000e45c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e460:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e465:	75 6e                	jne    c000e4d5 <zoh_set_converter+0x82>
c000e467:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e46a:	85 c0                	test   eax,eax
c000e46c:	74 13                	je     c000e481 <zoh_set_converter+0x2e>
c000e46e:	83 ec 0c             	sub    esp,0xc
c000e471:	50                   	push   eax
c000e472:	e8 e4 13 00 00       	call   c000f85b <free>
c000e477:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e47e:	83 c4 10             	add    esp,0x10
c000e481:	50                   	push   eax
c000e482:	50                   	push   eax
c000e483:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e486:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e48d:	50                   	push   eax
c000e48e:	6a 01                	push   0x1
c000e490:	e8 e6 13 00 00       	call   c000f87b <calloc>
c000e495:	83 c4 10             	add    esp,0x10
c000e498:	89 c2                	mov    edx,eax
c000e49a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e49d:	85 d2                	test   edx,edx
c000e49f:	b8 01 00 00 00       	mov    eax,0x1
c000e4a4:	74 2f                	je     c000e4d5 <zoh_set_converter+0x82>
c000e4a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a9:	83 ec 0c             	sub    esp,0xc
c000e4ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4af:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4b5:	c7 43 24 5e dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd5e
c000e4bc:	c7 43 20 5e dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd5e
c000e4c3:	c7 43 28 03 e4 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e403
c000e4ca:	53                   	push   ebx
c000e4cb:	e8 33 ff ff ff       	call   c000e403 <zoh_reset>
c000e4d0:	83 c4 10             	add    esp,0x10
c000e4d3:	31 c0                	xor    eax,eax
c000e4d5:	83 c4 08             	add    esp,0x8
c000e4d8:	5b                   	pop    ebx
c000e4d9:	c3                   	ret    

c000e4da <CPU::current()>:
c000e4da:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c000e4df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4e5:	90                   	nop
c000e4e6:	c3                   	ret    

c000e4e7 <operator new(unsigned long)>:
c000e4e7:	83 ec 0c             	sub    esp,0xc
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4f1:	e8 55 13 00 00       	call   c000f84b <malloc>
c000e4f6:	83 c4 10             	add    esp,0x10
c000e4f9:	83 c4 0c             	add    esp,0xc
c000e4fc:	c3                   	ret    

c000e4fd <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4fd:	83 ec 0c             	sub    esp,0xc
c000e500:	83 ec 08             	sub    esp,0x8
c000e503:	68 e6 9f 02 c0       	push   0xc0029fe6
c000e508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e50c:	e8 b7 23 ff ff       	call   c00008c8 <strcmp>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	0f 94 c0             	sete   al
c000e519:	84 c0                	test   al,al
c000e51b:	74 0a                	je     c000e527 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e51d:	b8 68 e4 02 c0       	mov    eax,0xc002e468
c000e522:	e9 e3 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e527:	83 ec 08             	sub    esp,0x8
c000e52a:	68 ef 9f 02 c0       	push   0xc0029fef
c000e52f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e533:	e8 90 23 ff ff       	call   c00008c8 <strcmp>
c000e538:	83 c4 10             	add    esp,0x10
c000e53b:	85 c0                	test   eax,eax
c000e53d:	0f 94 c0             	sete   al
c000e540:	84 c0                	test   al,al
c000e542:	74 0a                	je     c000e54e <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e544:	b8 04 6a 02 c0       	mov    eax,0xc0026a04
c000e549:	e9 bc 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e54e:	83 ec 08             	sub    esp,0x8
c000e551:	68 f9 9f 02 c0       	push   0xc0029ff9
c000e556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e55a:	e8 69 23 ff ff       	call   c00008c8 <strcmp>
c000e55f:	83 c4 10             	add    esp,0x10
c000e562:	85 c0                	test   eax,eax
c000e564:	0f 94 c0             	sete   al
c000e567:	84 c0                	test   al,al
c000e569:	74 0a                	je     c000e575 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e56b:	b8 38 67 02 c0       	mov    eax,0xc0026738
c000e570:	e9 95 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e575:	83 ec 08             	sub    esp,0x8
c000e578:	68 02 a0 02 c0       	push   0xc002a002
c000e57d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e581:	e8 42 23 ff ff       	call   c00008c8 <strcmp>
c000e586:	83 c4 10             	add    esp,0x10
c000e589:	85 c0                	test   eax,eax
c000e58b:	0f 94 c0             	sete   al
c000e58e:	84 c0                	test   al,al
c000e590:	74 07                	je     c000e599 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e592:	b8 04 6b 02 c0       	mov    eax,0xc0026b04
c000e597:	eb 71                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e599:	83 ec 08             	sub    esp,0x8
c000e59c:	68 0c a0 02 c0       	push   0xc002a00c
c000e5a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5a5:	e8 1e 23 ff ff       	call   c00008c8 <strcmp>
c000e5aa:	83 c4 10             	add    esp,0x10
c000e5ad:	85 c0                	test   eax,eax
c000e5af:	0f 94 c0             	sete   al
c000e5b2:	84 c0                	test   al,al
c000e5b4:	74 07                	je     c000e5bd <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5b6:	b8 84 68 02 c0       	mov    eax,0xc0026884
c000e5bb:	eb 4d                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5bd:	83 ec 08             	sub    esp,0x8
c000e5c0:	68 15 a0 02 c0       	push   0xc002a015
c000e5c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c9:	e8 fa 22 ff ff       	call   c00008c8 <strcmp>
c000e5ce:	83 c4 10             	add    esp,0x10
c000e5d1:	85 c0                	test   eax,eax
c000e5d3:	0f 94 c0             	sete   al
c000e5d6:	84 c0                	test   al,al
c000e5d8:	74 07                	je     c000e5e1 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5da:	b8 6c e4 02 c0       	mov    eax,0xc002e46c
c000e5df:	eb 29                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5e1:	83 ec 08             	sub    esp,0x8
c000e5e4:	68 22 a0 02 c0       	push   0xc002a022
c000e5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5ed:	e8 d6 22 ff ff       	call   c00008c8 <strcmp>
c000e5f2:	83 c4 10             	add    esp,0x10
c000e5f5:	85 c0                	test   eax,eax
c000e5f7:	0f 94 c0             	sete   al
c000e5fa:	84 c0                	test   al,al
c000e5fc:	74 07                	je     c000e605 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5fe:	b8 6d e4 02 c0       	mov    eax,0xc002e46d
c000e603:	eb 05                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e605:	b8 00 00 00 00       	mov    eax,0x0
c000e60a:	83 c4 0c             	add    esp,0xc
c000e60d:	c3                   	ret    

c000e60e <Computer::close(int, int, void*)>:
c000e60e:	57                   	push   edi
c000e60f:	56                   	push   esi
c000e610:	53                   	push   ebx
c000e611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e619:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e61d:	83 ec 0c             	sub    esp,0xc
c000e620:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e626:	e8 51 5e 00 00       	call   c001447c <Device::closeAll()>
c000e62b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e631:	83 c4 10             	add    esp,0x10
c000e634:	8b 10                	mov    edx,DWORD PTR [eax]
c000e636:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e63a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e642:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e646:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e64a:	5b                   	pop    ebx
c000e64b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e64e:	5e                   	pop    esi
c000e64f:	5f                   	pop    edi
c000e650:	ff e0                	jmp    eax

c000e652 <Krnl::firstTask()>:
c000e652:	53                   	push   ebx
c000e653:	83 ec 14             	sub    esp,0x14
c000e656:	fb                   	sti    
c000e657:	68 3f 07 00 00       	push   0x73f
c000e65c:	e8 ea 11 00 00       	call   c000f84b <malloc>
c000e661:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e668:	89 c3                	mov    ebx,eax
c000e66a:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c000e670:	68 2f a0 02 c0       	push   0xc002a02f
c000e675:	6a 01                	push   0x1
c000e677:	50                   	push   eax
c000e678:	e8 9d f5 00 00       	call   c001dc1a <Process::Process(bool, char const*, Process*, char**)>
c000e67d:	83 c4 20             	add    esp,0x20
c000e680:	68 ff 00 00 00       	push   0xff
c000e685:	6a 00                	push   0x0
c000e687:	68 dd f1 00 c0       	push   0xc000f1dd
c000e68c:	53                   	push   ebx
c000e68d:	e8 86 f8 00 00       	call   c001df18 <Process::createThread(void (*)(void*), void*, int)>
c000e692:	6a 7a                	push   0x7a
c000e694:	6a 00                	push   0x0
c000e696:	68 b0 e7 01 c0       	push   0xc001e7b0
c000e69b:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c000e6a1:	e8 72 f8 00 00       	call   c001df18 <Process::createThread(void (*)(void*), void*, int)>
c000e6a6:	83 c4 20             	add    esp,0x20
c000e6a9:	a3 88 19 03 c0       	mov    ds:0xc0031988,eax
c000e6ae:	c6 05 6d e4 02 c0 01 	mov    BYTE PTR ds:0xc002e46d,0x1
c000e6b5:	e8 77 04 01 00       	call   c001eb31 <Vm::initialise8086()>
c000e6ba:	e8 a5 4b 00 00       	call   c0013264 <Fs::initVFS()>
c000e6bf:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c000e6c4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6ca:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6cc:	6a 00                	push   0x0
c000e6ce:	6a 00                	push   0x0
c000e6d0:	6a 00                	push   0x0
c000e6d2:	50                   	push   eax
c000e6d3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6d6:	e8 cf de 00 00       	call   c001c5aa <Sys::loadSyscalls()>
c000e6db:	e8 f2 bd 00 00       	call   c001a4d2 <Krnl::loadSystemEnv()>
c000e6e0:	83 c4 0c             	add    esp,0xc
c000e6e3:	6a 3a                	push   0x3a
c000e6e5:	68 3c a0 02 c0       	push   0xc002a03c
c000e6ea:	68 45 a0 02 c0       	push   0xc002a045
c000e6ef:	e8 04 cb 00 00       	call   c001b1f8 <Reg::readIntWithDefault(char*, char*, int)>
c000e6f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6f7:	e8 50 56 00 00       	call   c0013d4c <User::loadClockSettings(int)>
c000e6fc:	58                   	pop    eax
c000e6fd:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c000e702:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e708:	e8 43 5d 00 00       	call   c0014450 <Device::loadDriversForAll()>
c000e70d:	e8 06 b9 00 00       	call   c001a018 <Krnl::startCPUs()>
c000e712:	5a                   	pop    edx
c000e713:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c000e719:	59                   	pop    ecx
c000e71a:	6a 01                	push   0x1
c000e71c:	68 4d a0 02 c0       	push   0xc002a04d
c000e721:	e8 18 f0 00 00       	call   c001d73e <Thr::loadDLL(char const*, bool)>
c000e726:	5a                   	pop    edx
c000e727:	59                   	pop    ecx
c000e728:	53                   	push   ebx
c000e729:	50                   	push   eax
c000e72a:	e8 43 f2 00 00       	call   c001d972 <Thr::executeDLL(unsigned long, void*)>
c000e72f:	83 c4 10             	add    esp,0x10
c000e732:	83 ec 0c             	sub    esp,0xc
c000e735:	6a 02                	push   0x2
c000e737:	e8 7a fb 00 00       	call   c001e2b6 <blockTask(TaskState)>
c000e73c:	83 c4 10             	add    esp,0x10
c000e73f:	eb f1                	jmp    c000e732 <Krnl::firstTask()+0xe0>
c000e741:	90                   	nop

c000e742 <Computer::Computer()>:
c000e742:	83 ec 0c             	sub    esp,0xc
c000e745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e749:	83 ec 08             	sub    esp,0x8
c000e74c:	68 69 a0 02 c0       	push   0xc002a069
c000e751:	50                   	push   eax
c000e752:	e8 9f 5d 00 00       	call   c00144f6 <Device::Device(char const*)>
c000e757:	83 c4 10             	add    esp,0x10
c000e75a:	ba 08 a2 02 c0       	mov    edx,0xc002a208
c000e75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e763:	89 10                	mov    DWORD PTR [eax],edx
c000e765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e769:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e777:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e785:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e78b:	83 ca 04             	or     edx,0x4
c000e78e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e798:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e79e:	0f b6 d0             	movzx  edx,al
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7b6:	0f b6 d0             	movzx  edx,al
c000e7b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bd:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7cc:	8d 50 01             	lea    edx,[eax+0x1]
c000e7cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7d3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d9:	0f b6 d0             	movzx  edx,al
c000e7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7e4:	83 e1 3f             	and    ecx,0x3f
c000e7e7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f5:	0f b6 d0             	movzx  edx,al
c000e7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fc:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e807:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80d:	0f b6 d0             	movzx  edx,al
c000e810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e814:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e823:	8d 50 01             	lea    edx,[eax+0x1]
c000e826:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e82a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e830:	0f b6 d0             	movzx  edx,al
c000e833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e837:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e83b:	83 e1 3f             	and    ecx,0x3f
c000e83e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e846:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84c:	0f b6 d0             	movzx  edx,al
c000e84f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e853:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e864:	0f b6 d0             	movzx  edx,al
c000e867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e87a:	8d 50 01             	lea    edx,[eax+0x1]
c000e87d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e881:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e887:	0f b6 d0             	movzx  edx,al
c000e88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e88e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e892:	83 e1 3f             	and    ecx,0x3f
c000e895:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e899:	90                   	nop
c000e89a:	83 c4 0c             	add    esp,0xc
c000e89d:	c3                   	ret    

c000e89e <Computer::setBootMessage(char const*)>:
c000e89e:	c3                   	ret    
c000e89f:	90                   	nop

c000e8a0 <Computer::detectFeatures()>:
c000e8a0:	55                   	push   ebp
c000e8a1:	57                   	push   edi
c000e8a2:	56                   	push   esi
c000e8a3:	53                   	push   ebx
c000e8a4:	83 ec 1c             	sub    esp,0x1c
c000e8a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ab:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8b5:	e8 2a 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8ba:	85 c0                	test   eax,eax
c000e8bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8c2:	0f 95 c2             	setne  dl
c000e8c5:	83 e0 fd             	and    eax,0xfffffffd
c000e8c8:	d1 e2                	shl    edx,1
c000e8ca:	09 d0                	or     eax,edx
c000e8cc:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8d2:	a8 02                	test   al,0x2
c000e8d4:	75 46                	jne    c000e91c <Computer::detectFeatures()+0x7c>
c000e8d6:	f6 05 81 e4 02 c0 04 	test   BYTE PTR ds:0xc002e481,0x4
c000e8dd:	74 07                	je     c000e8e6 <Computer::detectFeatures()+0x46>
c000e8df:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8e6:	e8 db 7d 01 00       	call   c00266c6 <x87Detect>
c000e8eb:	83 e0 01             	and    eax,0x1
c000e8ee:	c1 e0 04             	shl    eax,0x4
c000e8f1:	88 c2                	mov    dl,al
c000e8f3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f9:	83 e0 ef             	and    eax,0xffffffef
c000e8fc:	09 d0                	or     eax,edx
c000e8fe:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e904:	a8 10                	test   al,0x10
c000e906:	0f 85 2a 01 00 00    	jne    c000ea36 <Computer::detectFeatures()+0x196>
c000e90c:	84 c0                	test   al,al
c000e90e:	0f 88 45 01 00 00    	js     c000ea59 <Computer::detectFeatures()+0x1b9>
c000e914:	83 c4 1c             	add    esp,0x1c
c000e917:	5b                   	pop    ebx
c000e918:	5e                   	pop    esi
c000e919:	5f                   	pop    edi
c000e91a:	5d                   	pop    ebp
c000e91b:	c3                   	ret    
c000e91c:	83 ec 0c             	sub    esp,0xc
c000e91f:	6a 20                	push   0x20
c000e921:	e8 04 a4 00 00       	call   c0018d2a <CPU::cpuidCheckEDX(unsigned int)>
c000e926:	83 e0 01             	and    eax,0x1
c000e929:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e930:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e936:	83 e0 f7             	and    eax,0xfffffff7
c000e939:	09 d0                	or     eax,edx
c000e93b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e941:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e948:	e8 dd a3 00 00       	call   c0018d2a <CPU::cpuidCheckEDX(unsigned int)>
c000e94d:	83 e0 01             	and    eax,0x1
c000e950:	88 c2                	mov    dl,al
c000e952:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e958:	83 e0 fe             	and    eax,0xfffffffe
c000e95b:	09 d0                	or     eax,edx
c000e95d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e963:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e96a:	e8 bb a3 00 00       	call   c0018d2a <CPU::cpuidCheckEDX(unsigned int)>
c000e96f:	c1 e0 07             	shl    eax,0x7
c000e972:	88 c2                	mov    dl,al
c000e974:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e97a:	83 e0 7f             	and    eax,0x7f
c000e97d:	09 d0                	or     eax,edx
c000e97f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e985:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e98c:	e8 99 a3 00 00       	call   c0018d2a <CPU::cpuidCheckEDX(unsigned int)>
c000e991:	83 c4 10             	add    esp,0x10
c000e994:	83 e0 01             	and    eax,0x1
c000e997:	c1 e0 05             	shl    eax,0x5
c000e99a:	88 c2                	mov    dl,al
c000e99c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9a2:	83 e0 df             	and    eax,0xffffffdf
c000e9a5:	09 d0                	or     eax,edx
c000e9a7:	f7 05 80 e4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e480,0x401
c000e9b1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b7:	0f 84 c2 00 00 00    	je     c000ea7f <Computer::detectFeatures()+0x1df>
c000e9bd:	83 e0 fe             	and    eax,0xfffffffe
c000e9c0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9c6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9cc:	88 c2                	mov    dl,al
c000e9ce:	83 e2 09             	and    edx,0x9
c000e9d1:	fe ca                	dec    dl
c000e9d3:	75 09                	jne    c000e9de <Computer::detectFeatures()+0x13e>
c000e9d5:	83 e0 fe             	and    eax,0xfffffffe
c000e9d8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9de:	83 ec 0c             	sub    esp,0xc
c000e9e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9e5:	50                   	push   eax
c000e9e6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9ea:	55                   	push   ebp
c000e9eb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9ef:	57                   	push   edi
c000e9f0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9f4:	56                   	push   esi
c000e9f5:	68 00 00 00 80       	push   0x80000000
c000e9fa:	e8 a7 a2 00 00       	call   c0018ca6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9ff:	83 c4 20             	add    esp,0x20
c000ea02:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea0d:	0f 86 c3 fe ff ff    	jbe    c000e8d6 <Computer::detectFeatures()+0x36>
c000ea13:	83 ec 0c             	sub    esp,0xc
c000ea16:	50                   	push   eax
c000ea17:	55                   	push   ebp
c000ea18:	57                   	push   edi
c000ea19:	56                   	push   esi
c000ea1a:	68 01 00 00 80       	push   0x80000001
c000ea1f:	e8 82 a2 00 00       	call   c0018ca6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea24:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea2e:	83 c4 20             	add    esp,0x20
c000ea31:	e9 a0 fe ff ff       	jmp    c000e8d6 <Computer::detectFeatures()+0x36>
c000ea36:	e8 45 7c 01 00       	call   c0026680 <absolutelyNoChanceInHell>
c000ea3b:	88 c2                	mov    dl,al
c000ea3d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea43:	c1 e2 07             	shl    edx,0x7
c000ea46:	83 e0 7f             	and    eax,0x7f
c000ea49:	09 d0                	or     eax,edx
c000ea4b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea51:	84 c0                	test   al,al
c000ea53:	0f 89 bb fe ff ff    	jns    c000e914 <Computer::detectFeatures()+0x74>
c000ea59:	e8 02 7c 01 00       	call   c0026660 <avxDetect>
c000ea5e:	83 e0 01             	and    eax,0x1
c000ea61:	c1 e0 05             	shl    eax,0x5
c000ea64:	88 c2                	mov    dl,al
c000ea66:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea6c:	83 e0 df             	and    eax,0xffffffdf
c000ea6f:	09 d0                	or     eax,edx
c000ea71:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea77:	83 c4 1c             	add    esp,0x1c
c000ea7a:	5b                   	pop    ebx
c000ea7b:	5e                   	pop    esi
c000ea7c:	5f                   	pop    edi
c000ea7d:	5d                   	pop    ebp
c000ea7e:	c3                   	ret    
c000ea7f:	83 ec 0c             	sub    esp,0xc
c000ea82:	68 00 02 00 00       	push   0x200
c000ea87:	e8 9e a2 00 00       	call   c0018d2a <CPU::cpuidCheckEDX(unsigned int)>
c000ea8c:	83 c4 10             	add    esp,0x10
c000ea8f:	83 e0 01             	and    eax,0x1
c000ea92:	88 c2                	mov    dl,al
c000ea94:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea9a:	83 e0 fe             	and    eax,0xfffffffe
c000ea9d:	09 d0                	or     eax,edx
c000ea9f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaa5:	e9 1c ff ff ff       	jmp    c000e9c6 <Computer::detectFeatures()+0x126>

c000eaaa <Computer::displayFeatures()>:
c000eaaa:	53                   	push   ebx
c000eaab:	83 ec 14             	sub    esp,0x14
c000eaae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eab2:	68 79 a0 02 c0       	push   0xc002a079
c000eab7:	e8 23 44 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000eabc:	83 c4 10             	add    esp,0x10
c000eabf:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eac6:	0f 85 73 02 00 00    	jne    c000ed3f <Computer::displayFeatures()+0x295>
c000eacc:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ead1:	83 ec 08             	sub    esp,0x8
c000ead4:	50                   	push   eax
c000ead5:	68 8c a0 02 c0       	push   0xc002a08c
c000eada:	e8 00 44 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000eadf:	83 c4 10             	add    esp,0x10
c000eae2:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae9:	0f 85 8c 02 00 00    	jne    c000ed7b <Computer::displayFeatures()+0x2d1>
c000eaef:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000eaf4:	83 ec 08             	sub    esp,0x8
c000eaf7:	50                   	push   eax
c000eaf8:	68 9d a0 02 c0       	push   0xc002a09d
c000eafd:	e8 dd 43 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000eb02:	83 c4 10             	add    esp,0x10
c000eb05:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb0c:	0f 85 5f 02 00 00    	jne    c000ed71 <Computer::displayFeatures()+0x2c7>
c000eb12:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000eb17:	83 ec 08             	sub    esp,0x8
c000eb1a:	50                   	push   eax
c000eb1b:	68 ae a0 02 c0       	push   0xc002a0ae
c000eb20:	e8 ba 43 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000eb25:	83 c4 10             	add    esp,0x10
c000eb28:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb2f:	0f 85 32 02 00 00    	jne    c000ed67 <Computer::displayFeatures()+0x2bd>
c000eb35:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000eb3a:	83 ec 08             	sub    esp,0x8
c000eb3d:	50                   	push   eax
c000eb3e:	68 bf a0 02 c0       	push   0xc002a0bf
c000eb43:	e8 97 43 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000eb48:	83 c4 10             	add    esp,0x10
c000eb4b:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb52:	0f 85 05 02 00 00    	jne    c000ed5d <Computer::displayFeatures()+0x2b3>
c000eb58:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000eb5d:	83 ec 08             	sub    esp,0x8
c000eb60:	50                   	push   eax
c000eb61:	68 d0 a0 02 c0       	push   0xc002a0d0
c000eb66:	e8 74 43 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000eb6b:	83 c4 10             	add    esp,0x10
c000eb6e:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb75:	0f 85 d8 01 00 00    	jne    c000ed53 <Computer::displayFeatures()+0x2a9>
c000eb7b:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000eb80:	83 ec 08             	sub    esp,0x8
c000eb83:	50                   	push   eax
c000eb84:	68 e1 a0 02 c0       	push   0xc002a0e1
c000eb89:	e8 51 43 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000eb8e:	83 c4 10             	add    esp,0x10
c000eb91:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb98:	0f 85 ab 01 00 00    	jne    c000ed49 <Computer::displayFeatures()+0x29f>
c000eb9e:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000eba3:	83 ec 08             	sub    esp,0x8
c000eba6:	50                   	push   eax
c000eba7:	68 f2 a0 02 c0       	push   0xc002a0f2
c000ebac:	e8 2e 43 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000ebb1:	83 c4 10             	add    esp,0x10
c000ebb4:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebbb:	0f 88 1b 02 00 00    	js     c000eddc <Computer::displayFeatures()+0x332>
c000ebc1:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ebc6:	83 ec 08             	sub    esp,0x8
c000ebc9:	50                   	push   eax
c000ebca:	68 03 a1 02 c0       	push   0xc002a103
c000ebcf:	e8 0b 43 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000ebd4:	83 c4 10             	add    esp,0x10
c000ebd7:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebde:	0f 85 a1 01 00 00    	jne    c000ed85 <Computer::displayFeatures()+0x2db>
c000ebe4:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ebe9:	83 ec 08             	sub    esp,0x8
c000ebec:	50                   	push   eax
c000ebed:	68 14 a1 02 c0       	push   0xc002a114
c000ebf2:	e8 e8 42 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000ebf7:	83 c4 10             	add    esp,0x10
c000ebfa:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec01:	0f 85 cb 01 00 00    	jne    c000edd2 <Computer::displayFeatures()+0x328>
c000ec07:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ec0c:	83 ec 08             	sub    esp,0x8
c000ec0f:	50                   	push   eax
c000ec10:	68 25 a1 02 c0       	push   0xc002a125
c000ec15:	e8 c5 42 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000ec1a:	83 c4 10             	add    esp,0x10
c000ec1d:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec24:	0f 85 9e 01 00 00    	jne    c000edc8 <Computer::displayFeatures()+0x31e>
c000ec2a:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ec2f:	83 ec 08             	sub    esp,0x8
c000ec32:	50                   	push   eax
c000ec33:	68 36 a1 02 c0       	push   0xc002a136
c000ec38:	e8 a2 42 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000ec3d:	83 c4 10             	add    esp,0x10
c000ec40:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec47:	0f 85 71 01 00 00    	jne    c000edbe <Computer::displayFeatures()+0x314>
c000ec4d:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ec52:	83 ec 08             	sub    esp,0x8
c000ec55:	50                   	push   eax
c000ec56:	68 47 a1 02 c0       	push   0xc002a147
c000ec5b:	e8 7f 42 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000ec60:	83 c4 10             	add    esp,0x10
c000ec63:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec6a:	0f 85 44 01 00 00    	jne    c000edb4 <Computer::displayFeatures()+0x30a>
c000ec70:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ec75:	83 ec 08             	sub    esp,0x8
c000ec78:	50                   	push   eax
c000ec79:	68 58 a1 02 c0       	push   0xc002a158
c000ec7e:	e8 5c 42 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000ec83:	83 c4 10             	add    esp,0x10
c000ec86:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec8d:	0f 85 17 01 00 00    	jne    c000edaa <Computer::displayFeatures()+0x300>
c000ec93:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ec98:	83 ec 08             	sub    esp,0x8
c000ec9b:	50                   	push   eax
c000ec9c:	68 69 a1 02 c0       	push   0xc002a169
c000eca1:	e8 39 42 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000eca6:	83 c4 10             	add    esp,0x10
c000eca9:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecb0:	0f 85 ea 00 00 00    	jne    c000eda0 <Computer::displayFeatures()+0x2f6>
c000ecb6:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ecbb:	83 ec 08             	sub    esp,0x8
c000ecbe:	50                   	push   eax
c000ecbf:	68 7a a1 02 c0       	push   0xc002a17a
c000ecc4:	e8 16 42 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000ecc9:	83 c4 10             	add    esp,0x10
c000eccc:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ecd3:	0f 88 0d 01 00 00    	js     c000ede6 <Computer::displayFeatures()+0x33c>
c000ecd9:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ecde:	83 ec 08             	sub    esp,0x8
c000ece1:	50                   	push   eax
c000ece2:	68 8b a1 02 c0       	push   0xc002a18b
c000ece7:	e8 f3 41 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000ecec:	83 c4 10             	add    esp,0x10
c000ecef:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecf6:	0f 85 9a 00 00 00    	jne    c000ed96 <Computer::displayFeatures()+0x2ec>
c000ecfc:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ed01:	83 ec 08             	sub    esp,0x8
c000ed04:	50                   	push   eax
c000ed05:	68 9c a1 02 c0       	push   0xc002a19c
c000ed0a:	e8 d0 41 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000ed0f:	83 c4 10             	add    esp,0x10
c000ed12:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed19:	75 74                	jne    c000ed8f <Computer::displayFeatures()+0x2e5>
c000ed1b:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 ad a1 02 c0       	push   0xc002a1ad
c000ed29:	e8 b1 41 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000ed2e:	c7 44 24 20 40 bb 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bb40
c000ed36:	83 c4 18             	add    esp,0x18
c000ed39:	5b                   	pop    ebx
c000ed3a:	e9 a0 41 00 00       	jmp    c0012edf <Dbg::kprintf(char const*, ...)>
c000ed3f:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed44:	e9 88 fd ff ff       	jmp    c000ead1 <Computer::displayFeatures()+0x27>
c000ed49:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed4e:	e9 50 fe ff ff       	jmp    c000eba3 <Computer::displayFeatures()+0xf9>
c000ed53:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed58:	e9 23 fe ff ff       	jmp    c000eb80 <Computer::displayFeatures()+0xd6>
c000ed5d:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed62:	e9 f6 fd ff ff       	jmp    c000eb5d <Computer::displayFeatures()+0xb3>
c000ed67:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed6c:	e9 c9 fd ff ff       	jmp    c000eb3a <Computer::displayFeatures()+0x90>
c000ed71:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed76:	e9 9c fd ff ff       	jmp    c000eb17 <Computer::displayFeatures()+0x6d>
c000ed7b:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed80:	e9 6f fd ff ff       	jmp    c000eaf4 <Computer::displayFeatures()+0x4a>
c000ed85:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed8a:	e9 5a fe ff ff       	jmp    c000ebe9 <Computer::displayFeatures()+0x13f>
c000ed8f:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed94:	eb 8a                	jmp    c000ed20 <Computer::displayFeatures()+0x276>
c000ed96:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ed9b:	e9 61 ff ff ff       	jmp    c000ed01 <Computer::displayFeatures()+0x257>
c000eda0:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000eda5:	e9 11 ff ff ff       	jmp    c000ecbb <Computer::displayFeatures()+0x211>
c000edaa:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000edaf:	e9 e4 fe ff ff       	jmp    c000ec98 <Computer::displayFeatures()+0x1ee>
c000edb4:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000edb9:	e9 b7 fe ff ff       	jmp    c000ec75 <Computer::displayFeatures()+0x1cb>
c000edbe:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000edc3:	e9 8a fe ff ff       	jmp    c000ec52 <Computer::displayFeatures()+0x1a8>
c000edc8:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000edcd:	e9 5d fe ff ff       	jmp    c000ec2f <Computer::displayFeatures()+0x185>
c000edd2:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000edd7:	e9 30 fe ff ff       	jmp    c000ec0c <Computer::displayFeatures()+0x162>
c000eddc:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000ede1:	e9 e0 fd ff ff       	jmp    c000ebc6 <Computer::displayFeatures()+0x11c>
c000ede6:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c000edeb:	e9 ee fe ff ff       	jmp    c000ecde <Computer::displayFeatures()+0x234>

c000edf0 <Computer::rdmsr(unsigned int)>:
c000edf0:	83 ec 0c             	sub    esp,0xc
c000edf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edf7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edfe:	74 0a                	je     c000ee0a <Computer::rdmsr(unsigned int)+0x1a>
c000ee00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee04:	0f 32                	rdmsr  
c000ee06:	83 c4 0c             	add    esp,0xc
c000ee09:	c3                   	ret    
c000ee0a:	83 ec 0c             	sub    esp,0xc
c000ee0d:	68 be a1 02 c0       	push   0xc002a1be
c000ee12:	e8 f4 b7 00 00       	call   c001a60b <Krnl::panic(char const*)>
c000ee17:	83 c4 10             	add    esp,0x10
c000ee1a:	eb e4                	jmp    c000ee00 <Computer::rdmsr(unsigned int)+0x10>

c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee1c:	57                   	push   edi
c000ee1d:	56                   	push   esi
c000ee1e:	52                   	push   edx
c000ee1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee23:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee32:	74 0e                	je     c000ee42 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee38:	89 f0                	mov    eax,esi
c000ee3a:	89 fa                	mov    edx,edi
c000ee3c:	0f 30                	wrmsr  
c000ee3e:	58                   	pop    eax
c000ee3f:	5e                   	pop    esi
c000ee40:	5f                   	pop    edi
c000ee41:	c3                   	ret    
c000ee42:	83 ec 0c             	sub    esp,0xc
c000ee45:	68 c4 a1 02 c0       	push   0xc002a1c4
c000ee4a:	e8 bc b7 00 00       	call   c001a60b <Krnl::panic(char const*)>
c000ee4f:	83 c4 10             	add    esp,0x10
c000ee52:	eb e0                	jmp    c000ee34 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee54 <Computer::nmiEnabled()>:
c000ee54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee58:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee5e:	c3                   	ret    
c000ee5f:	90                   	nop

c000ee60 <Computer::readCMOS(unsigned char)>:
c000ee60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee64:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee6b:	19 c0                	sbb    eax,eax
c000ee6d:	83 e0 80             	and    eax,0xffffff80
c000ee70:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee74:	e6 70                	out    0x70,al
c000ee76:	e4 71                	in     al,0x71
c000ee78:	c3                   	ret    
c000ee79:	90                   	nop

c000ee7a <Computer::enableNMI(bool)>:
c000ee7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee82:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee88:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee90:	eb ce                	jmp    c000ee60 <Computer::readCMOS(unsigned char)>

c000ee92 <Computer::open(int, int, void*)>:
c000ee92:	56                   	push   esi
c000ee93:	53                   	push   ebx
c000ee94:	83 ec 10             	sub    esp,0x10
c000ee97:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee9b:	f6 05 80 e4 02 c0 04 	test   BYTE PTR ds:0xc002e480,0x4
c000eea2:	68 68 12 00 00       	push   0x1268
c000eea7:	0f 94 05 a4 d3 02 c0 	sete   BYTE PTR ds:0xc002d3a4
c000eeae:	e8 98 09 00 00       	call   c000f84b <malloc>
c000eeb3:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeb6:	89 c6                	mov    esi,eax
c000eeb8:	e8 3d 93 00 00       	call   c00181fa <ACPI::ACPI()>
c000eebd:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eec3:	58                   	pop    eax
c000eec4:	5a                   	pop    edx
c000eec5:	56                   	push   esi
c000eec6:	53                   	push   ebx
c000eec7:	e8 3a 54 00 00       	call   c0014306 <Device::addChild(Device*)>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 cc f9 ff ff       	call   c000e8a0 <Computer::detectFeatures()>
c000eed4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eed7:	e8 ce fb ff ff       	call   c000eaaa <Computer::displayFeatures()>
c000eedc:	59                   	pop    ecx
c000eedd:	5e                   	pop    esi
c000eede:	6a 01                	push   0x1
c000eee0:	53                   	push   ebx
c000eee1:	e8 94 ff ff ff       	call   c000ee7a <Computer::enableNMI(bool)>
c000eee6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eeed:	e8 59 09 00 00       	call   c000f84b <malloc>
c000eef2:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef5:	89 c6                	mov    esi,eax
c000eef7:	e8 e6 9e 00 00       	call   c0018de2 <CPU::CPU()>
c000eefc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef02:	58                   	pop    eax
c000ef03:	5a                   	pop    edx
c000ef04:	56                   	push   esi
c000ef05:	53                   	push   ebx
c000ef06:	e8 fb 53 00 00       	call   c0014306 <Device::addChild(Device*)>
c000ef0b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef11:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef17:	6a 00                	push   0x0
c000ef19:	6a 00                	push   0x0
c000ef1b:	50                   	push   eax
c000ef1c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef1f:	83 c4 20             	add    esp,0x20
c000ef22:	e8 65 59 00 00       	call   c001488c <setupFPU()>
c000ef27:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef2d:	85 c0                	test   eax,eax
c000ef2f:	74 1f                	je     c000ef50 <Computer::open(int, int, void*)+0xbe>
c000ef31:	83 ec 08             	sub    esp,0x8
c000ef34:	50                   	push   eax
c000ef35:	53                   	push   ebx
c000ef36:	e8 cb 53 00 00       	call   c0014306 <Device::addChild(Device*)>
c000ef3b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef41:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef43:	6a 00                	push   0x0
c000ef45:	6a 00                	push   0x0
c000ef47:	6a 00                	push   0x0
c000ef49:	50                   	push   eax
c000ef4a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef4d:	83 c4 20             	add    esp,0x20
c000ef50:	83 ec 0c             	sub    esp,0xc
c000ef53:	68 52 e6 00 c0       	push   0xc000e652
c000ef58:	e8 dd f0 00 00       	call   c001e03a <setupMultitasking(void (*)())>
c000ef5d:	83 c4 14             	add    esp,0x14
c000ef60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef65:	5b                   	pop    ebx
c000ef66:	5e                   	pop    esi
c000ef67:	c3                   	ret    

c000ef68 <Computer::disableNMI()>:
c000ef68:	6a 00                	push   0x0
c000ef6a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef6e:	e8 07 ff ff ff       	call   c000ee7a <Computer::enableNMI(bool)>
c000ef73:	58                   	pop    eax
c000ef74:	5a                   	pop    edx
c000ef75:	c3                   	ret    

c000ef76 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef7a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef81:	19 c0                	sbb    eax,eax
c000ef83:	83 e0 80             	and    eax,0xffffff80
c000ef86:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef8a:	e6 70                	out    0x70,al
c000ef8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef90:	e6 71                	out    0x71,al
c000ef92:	c3                   	ret    
c000ef93:	90                   	nop

c000ef94 <Computer::handleNMI()>:
c000ef94:	56                   	push   esi
c000ef95:	53                   	push   ebx
c000ef96:	83 ec 10             	sub    esp,0x10
c000ef99:	e4 92                	in     al,0x92
c000ef9b:	89 c6                	mov    esi,eax
c000ef9d:	e4 61                	in     al,0x61
c000ef9f:	68 ca a1 02 c0       	push   0xc002a1ca
c000efa4:	88 c3                	mov    bl,al
c000efa6:	e8 34 3f 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000efab:	83 c4 10             	add    esp,0x10
c000efae:	83 e6 10             	and    esi,0x10
c000efb1:	75 0d                	jne    c000efc0 <Computer::handleNMI()+0x2c>
c000efb3:	f6 c3 40             	test   bl,0x40
c000efb6:	75 1d                	jne    c000efd5 <Computer::handleNMI()+0x41>
c000efb8:	84 db                	test   bl,bl
c000efba:	78 2d                	js     c000efe9 <Computer::handleNMI()+0x55>
c000efbc:	58                   	pop    eax
c000efbd:	5b                   	pop    ebx
c000efbe:	5e                   	pop    esi
c000efbf:	c3                   	ret    
c000efc0:	83 ec 0c             	sub    esp,0xc
c000efc3:	68 db a1 02 c0       	push   0xc002a1db
c000efc8:	e8 3e b6 00 00       	call   c001a60b <Krnl::panic(char const*)>
c000efcd:	83 c4 10             	add    esp,0x10
c000efd0:	f6 c3 40             	test   bl,0x40
c000efd3:	74 e3                	je     c000efb8 <Computer::handleNMI()+0x24>
c000efd5:	83 ec 0c             	sub    esp,0xc
c000efd8:	68 e8 a1 02 c0       	push   0xc002a1e8
c000efdd:	e8 29 b6 00 00       	call   c001a60b <Krnl::panic(char const*)>
c000efe2:	83 c4 10             	add    esp,0x10
c000efe5:	84 db                	test   bl,bl
c000efe7:	79 d3                	jns    c000efbc <Computer::handleNMI()+0x28>
c000efe9:	c7 44 24 10 f2 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1f2
c000eff1:	5a                   	pop    edx
c000eff2:	5b                   	pop    ebx
c000eff3:	5e                   	pop    esi
c000eff4:	e9 12 b6 00 00       	jmp    c001a60b <Krnl::panic(char const*)>
c000eff9:	90                   	nop

c000effa <Computer::setDiskActivityLight(int, bool)>:
c000effa:	56                   	push   esi
c000effb:	53                   	push   ebx
c000effc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f000:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f005:	77 1b                	ja     c000f022 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f007:	e4 92                	in     al,0x92
c000f009:	bb 40 00 00 00       	mov    ebx,0x40
c000f00e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f012:	89 da                	mov    edx,ebx
c000f014:	d3 e2                	shl    edx,cl
c000f016:	89 f1                	mov    ecx,esi
c000f018:	f7 d2                	not    edx
c000f01a:	d3 e3                	shl    ebx,cl
c000f01c:	21 d0                	and    eax,edx
c000f01e:	09 d8                	or     eax,ebx
c000f020:	e6 92                	out    0x92,al
c000f022:	5b                   	pop    ebx
c000f023:	5e                   	pop    esi
c000f024:	c3                   	ret    
c000f025:	90                   	nop

c000f026 <GDTEntry::setBase(unsigned int)>:
c000f026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f02e:	89 c1                	mov    ecx,eax
c000f030:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f034:	c1 e9 10             	shr    ecx,0x10
c000f037:	c1 e8 18             	shr    eax,0x18
c000f03a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f03d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f040:	c3                   	ret    
c000f041:	90                   	nop

c000f042 <GDTEntry::setLimit(unsigned int)>:
c000f042:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f046:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f04a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f04d:	66 89 01             	mov    WORD PTR [ecx],ax
c000f050:	83 e2 f0             	and    edx,0xfffffff0
c000f053:	c1 e8 10             	shr    eax,0x10
c000f056:	83 e0 0f             	and    eax,0xf
c000f059:	09 d0                	or     eax,edx
c000f05b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f05e:	c3                   	ret    
c000f05f:	90                   	nop

c000f060 <GDT::GDT()>:
c000f060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f064:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f06e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f074:	90                   	nop
c000f075:	c3                   	ret    

c000f076 <GDT::addEntry(GDTEntry)>:
c000f076:	53                   	push   ebx
c000f077:	83 ec 0c             	sub    esp,0xc
c000f07a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f07e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f080:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f087:	52                   	push   edx
c000f088:	50                   	push   eax
c000f089:	68 2c a2 02 c0       	push   0xc002a22c
c000f08e:	e8 4c 3e 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000f093:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f095:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f099:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f09d:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0a1:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0a5:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a8:	c1 e0 03             	shl    eax,0x3
c000f0ab:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ad:	83 c4 18             	add    esp,0x18
c000f0b0:	5b                   	pop    ebx
c000f0b1:	c3                   	ret    

c000f0b2 <GDT::getNumberOfEntries()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b8:	c3                   	ret    
c000f0b9:	90                   	nop

c000f0ba <GDT::flush()>:
c000f0ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0be:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0c0:	83 c0 04             	add    eax,0x4
c000f0c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0ca:	a3 72 e4 02 c0       	mov    ds:0xc002e472,eax
c000f0cf:	66 89 15 70 e4 02 c0 	mov    WORD PTR ds:0xc002e470,dx
c000f0d6:	e9 75 13 ff ff       	jmp    c0000450 <loadGDT>
c000f0db:	90                   	nop

c000f0dc <GDT::setup()>:
c000f0dc:	55                   	push   ebp
c000f0dd:	57                   	push   edi
c000f0de:	56                   	push   esi
c000f0df:	53                   	push   ebx
c000f0e0:	83 ec 3c             	sub    esp,0x3c
c000f0e3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0e7:	6a 00                	push   0x0
c000f0e9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 33 ff ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f0f3:	6a 00                	push   0x0
c000f0f5:	53                   	push   ebx
c000f0f6:	e8 47 ff ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f0fb:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f103:	6a 00                	push   0x0
c000f105:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f109:	53                   	push   ebx
c000f10a:	e8 17 ff ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f10f:	68 ff ff ff 00       	push   0xffffff
c000f114:	53                   	push   ebx
c000f115:	e8 28 ff ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f11a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f11e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f123:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f128:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f12c:	83 c4 20             	add    esp,0x20
c000f12f:	6a 00                	push   0x0
c000f131:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f135:	53                   	push   ebx
c000f136:	e8 eb fe ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f13b:	68 ff ff ff 00       	push   0xffffff
c000f140:	53                   	push   ebx
c000f141:	e8 fc fe ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f146:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f14a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f14e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f152:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f156:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f15a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f15f:	0d 00 92 c0 00       	or     eax,0xc09200
c000f164:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f168:	89 d8                	mov    eax,ebx
c000f16a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f16e:	80 cc 60             	or     ah,0x60
c000f171:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f175:	83 c4 0c             	add    esp,0xc
c000f178:	89 f8                	mov    eax,edi
c000f17a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17e:	80 cc 60             	or     ah,0x60
c000f181:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f185:	89 c7                	mov    edi,eax
c000f187:	55                   	push   ebp
c000f188:	e8 e9 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f18d:	83 c4 0c             	add    esp,0xc
c000f190:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f194:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f198:	55                   	push   ebp
c000f199:	e8 d8 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f19e:	83 c4 0c             	add    esp,0xc
c000f1a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a9:	55                   	push   ebp
c000f1aa:	e8 c7 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1af:	83 c4 0c             	add    esp,0xc
c000f1b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1ba:	53                   	push   ebx
c000f1bb:	51                   	push   ecx
c000f1bc:	55                   	push   ebp
c000f1bd:	e8 b4 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1c2:	83 c4 0c             	add    esp,0xc
c000f1c5:	57                   	push   edi
c000f1c6:	56                   	push   esi
c000f1c7:	55                   	push   ebp
c000f1c8:	e8 a9 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1cd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1d0:	e8 e5 fe ff ff       	call   c000f0ba <GDT::flush()>
c000f1d5:	83 c4 4c             	add    esp,0x4c
c000f1d8:	5b                   	pop    ebx
c000f1d9:	5e                   	pop    esi
c000f1da:	5f                   	pop    edi
c000f1db:	5d                   	pop    ebp
c000f1dc:	c3                   	ret    

c000f1dd <idleFunction(void*)>:
c000f1dd:	53                   	push   ebx
c000f1de:	83 ec 08             	sub    esp,0x8
c000f1e1:	e8 02 ec 00 00       	call   c001dde8 <unlockScheduler()>
c000f1e6:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c000f1eb:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1f1:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f8:	74 3c                	je     c000f236 <idleFunction(void*)+0x59>
c000f1fa:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f201:	74 33                	je     c000f236 <idleFunction(void*)+0x59>
c000f203:	31 db                	xor    ebx,ebx
c000f205:	52                   	push   edx
c000f206:	52                   	push   edx
c000f207:	68 e1 00 00 00       	push   0xe1
c000f20c:	50                   	push   eax
c000f20d:	e8 de fb ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c000f212:	53                   	push   ebx
c000f213:	83 e0 02             	and    eax,0x2
c000f216:	50                   	push   eax
c000f217:	68 e1 00 00 00       	push   0xe1
c000f21c:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c000f222:	e8 f5 fb ff ff       	call   c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>
c000f227:	83 c4 20             	add    esp,0x20
c000f22a:	e8 50 10 ff ff       	call   c000027f <doTPAUSE>
c000f22f:	e8 dc 94 01 00       	call   c0028710 <idleCommon()>
c000f234:	eb f4                	jmp    c000f22a <idleFunction(void*)+0x4d>
c000f236:	fb                   	sti    
c000f237:	f4                   	hlt    
c000f238:	e8 d3 94 01 00       	call   c0028710 <idleCommon()>
c000f23d:	eb f7                	jmp    c000f236 <idleFunction(void*)+0x59>
c000f23f:	90                   	nop

c000f240 <IDTEntry::IDTEntry(bool)>:
c000f240:	83 ec 04             	sub    esp,0x4
c000f243:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f247:	88 04 24             	mov    BYTE PTR [esp],al
c000f24a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f24e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f25c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f260:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f263:	83 e2 f0             	and    edx,0xfffffff0
c000f266:	83 ca 0e             	or     edx,0xe
c000f269:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f26c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f270:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f273:	83 e2 ef             	and    edx,0xffffffef
c000f276:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f279:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f27d:	74 04                	je     c000f283 <IDTEntry::IDTEntry(bool)+0x43>
c000f27f:	b2 03                	mov    dl,0x3
c000f281:	eb 02                	jmp    c000f285 <IDTEntry::IDTEntry(bool)+0x45>
c000f283:	b2 00                	mov    dl,0x0
c000f285:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f289:	83 e2 03             	and    edx,0x3
c000f28c:	88 d1                	mov    cl,dl
c000f28e:	c1 e1 05             	shl    ecx,0x5
c000f291:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f294:	83 e2 9f             	and    edx,0xffffff9f
c000f297:	09 ca                	or     edx,ecx
c000f299:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f29c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2a3:	83 ca 80             	or     edx,0xffffff80
c000f2a6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a9:	90                   	nop
c000f2aa:	83 c4 04             	add    esp,0x4
c000f2ad:	c3                   	ret    

c000f2ae <IDTEntry::setOffset(unsigned int)>:
c000f2ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b6:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b9:	c1 e8 10             	shr    eax,0x10
c000f2bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2c0:	c3                   	ret    
c000f2c1:	90                   	nop

c000f2c2 <IDT::IDT()>:
c000f2c2:	90                   	nop
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c8:	83 c0 30             	add    eax,0x30
c000f2cb:	c3                   	ret    

c000f2cc <IDT::addEntry(IDTEntry, int)>:
c000f2cc:	53                   	push   ebx
c000f2cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2dd:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2e0:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2e4:	5b                   	pop    ebx
c000f2e5:	c3                   	ret    

c000f2e6 <IDT::addEntry(int, void (*)(), bool)>:
c000f2e6:	53                   	push   ebx
c000f2e7:	83 ec 10             	sub    esp,0x10
c000f2ea:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2ef:	50                   	push   eax
c000f2f0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2f4:	53                   	push   ebx
c000f2f5:	e8 46 ff ff ff       	call   c000f240 <IDTEntry::IDTEntry(bool)>
c000f2fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2fe:	53                   	push   ebx
c000f2ff:	e8 aa ff ff ff       	call   c000f2ae <IDTEntry::setOffset(unsigned int)>
c000f304:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f308:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f30c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f314:	e8 b3 ff ff ff       	call   c000f2cc <IDT::addEntry(IDTEntry, int)>
c000f319:	83 c4 30             	add    esp,0x30
c000f31c:	5b                   	pop    ebx
c000f31d:	c3                   	ret    

c000f31e <IDT::flush()>:
c000f31e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f322:	66 c7 05 78 e4 02 c0 ff 07 	mov    WORD PTR ds:0xc002e478,0x7ff
c000f32b:	a3 7a e4 02 c0       	mov    ds:0xc002e47a,eax
c000f330:	0f 01 1d 78 e4 02 c0 	lidtd  ds:0xc002e478
c000f337:	c3                   	ret    

c000f338 <IDT::setup()>:
c000f338:	57                   	push   edi
c000f339:	56                   	push   esi
c000f33a:	53                   	push   ebx
c000f33b:	83 ec 10             	sub    esp,0x10
c000f33e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f342:	6a 00                	push   0x0
c000f344:	68 70 04 00 c0       	push   0xc0000470
c000f349:	6a 00                	push   0x0
c000f34b:	53                   	push   ebx
c000f34c:	e8 95 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f351:	6a 00                	push   0x0
c000f353:	68 80 04 00 c0       	push   0xc0000480
c000f358:	6a 01                	push   0x1
c000f35a:	53                   	push   ebx
c000f35b:	e8 86 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	83 c4 20             	add    esp,0x20
c000f363:	6a 00                	push   0x0
c000f365:	68 8a 04 00 c0       	push   0xc000048a
c000f36a:	6a 02                	push   0x2
c000f36c:	53                   	push   ebx
c000f36d:	e8 74 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f372:	6a 00                	push   0x0
c000f374:	68 94 04 00 c0       	push   0xc0000494
c000f379:	6a 03                	push   0x3
c000f37b:	53                   	push   ebx
c000f37c:	e8 65 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f381:	83 c4 20             	add    esp,0x20
c000f384:	6a 00                	push   0x0
c000f386:	68 9e 04 00 c0       	push   0xc000049e
c000f38b:	6a 04                	push   0x4
c000f38d:	53                   	push   ebx
c000f38e:	e8 53 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f393:	6a 00                	push   0x0
c000f395:	68 a8 04 00 c0       	push   0xc00004a8
c000f39a:	6a 05                	push   0x5
c000f39c:	53                   	push   ebx
c000f39d:	e8 44 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3a2:	83 c4 20             	add    esp,0x20
c000f3a5:	6a 00                	push   0x0
c000f3a7:	68 b2 04 00 c0       	push   0xc00004b2
c000f3ac:	6a 06                	push   0x6
c000f3ae:	53                   	push   ebx
c000f3af:	e8 32 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3b4:	6a 00                	push   0x0
c000f3b6:	68 bc 04 00 c0       	push   0xc00004bc
c000f3bb:	6a 07                	push   0x7
c000f3bd:	53                   	push   ebx
c000f3be:	e8 23 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3c3:	83 c4 20             	add    esp,0x20
c000f3c6:	6a 00                	push   0x0
c000f3c8:	68 c6 04 00 c0       	push   0xc00004c6
c000f3cd:	6a 08                	push   0x8
c000f3cf:	53                   	push   ebx
c000f3d0:	e8 11 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3d5:	6a 00                	push   0x0
c000f3d7:	68 ce 04 00 c0       	push   0xc00004ce
c000f3dc:	6a 09                	push   0x9
c000f3de:	53                   	push   ebx
c000f3df:	e8 02 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3e4:	83 c4 20             	add    esp,0x20
c000f3e7:	6a 00                	push   0x0
c000f3e9:	68 d8 04 00 c0       	push   0xc00004d8
c000f3ee:	6a 0a                	push   0xa
c000f3f0:	53                   	push   ebx
c000f3f1:	e8 f0 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3f6:	6a 00                	push   0x0
c000f3f8:	68 e0 04 00 c0       	push   0xc00004e0
c000f3fd:	6a 0b                	push   0xb
c000f3ff:	53                   	push   ebx
c000f400:	e8 e1 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f405:	83 c4 20             	add    esp,0x20
c000f408:	6a 00                	push   0x0
c000f40a:	68 e8 04 00 c0       	push   0xc00004e8
c000f40f:	6a 0c                	push   0xc
c000f411:	53                   	push   ebx
c000f412:	e8 cf fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f417:	6a 00                	push   0x0
c000f419:	68 f0 04 00 c0       	push   0xc00004f0
c000f41e:	6a 0d                	push   0xd
c000f420:	53                   	push   ebx
c000f421:	e8 c0 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f426:	83 c4 20             	add    esp,0x20
c000f429:	6a 00                	push   0x0
c000f42b:	68 f8 04 00 c0       	push   0xc00004f8
c000f430:	6a 0e                	push   0xe
c000f432:	53                   	push   ebx
c000f433:	e8 ae fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f438:	6a 00                	push   0x0
c000f43a:	68 00 05 00 c0       	push   0xc0000500
c000f43f:	6a 0f                	push   0xf
c000f441:	53                   	push   ebx
c000f442:	e8 9f fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f447:	83 c4 20             	add    esp,0x20
c000f44a:	6a 00                	push   0x0
c000f44c:	68 0a 05 00 c0       	push   0xc000050a
c000f451:	6a 10                	push   0x10
c000f453:	53                   	push   ebx
c000f454:	e8 8d fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f459:	6a 00                	push   0x0
c000f45b:	68 14 05 00 c0       	push   0xc0000514
c000f460:	6a 11                	push   0x11
c000f462:	53                   	push   ebx
c000f463:	e8 7e fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f468:	83 c4 20             	add    esp,0x20
c000f46b:	6a 00                	push   0x0
c000f46d:	68 1e 05 00 c0       	push   0xc000051e
c000f472:	6a 12                	push   0x12
c000f474:	53                   	push   ebx
c000f475:	e8 6c fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f47a:	6a 01                	push   0x1
c000f47c:	68 b8 05 00 c0       	push   0xc00005b8
c000f481:	6a 60                	push   0x60
c000f483:	53                   	push   ebx
c000f484:	e8 5d fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f489:	83 c4 20             	add    esp,0x20
c000f48c:	6a 00                	push   0x0
c000f48e:	68 bf 05 00 c0       	push   0xc00005bf
c000f493:	6a 20                	push   0x20
c000f495:	53                   	push   ebx
c000f496:	e8 4b fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f49b:	6a 00                	push   0x0
c000f49d:	68 aa 05 00 c0       	push   0xc00005aa
c000f4a2:	6a 21                	push   0x21
c000f4a4:	53                   	push   ebx
c000f4a5:	e8 3c fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4aa:	83 c4 20             	add    esp,0x20
c000f4ad:	6a 00                	push   0x0
c000f4af:	68 b1 05 00 c0       	push   0xc00005b1
c000f4b4:	6a 22                	push   0x22
c000f4b6:	53                   	push   ebx
c000f4b7:	e8 2a fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4bc:	6a 00                	push   0x0
c000f4be:	68 28 05 00 c0       	push   0xc0000528
c000f4c3:	6a 23                	push   0x23
c000f4c5:	53                   	push   ebx
c000f4c6:	e8 1b fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4cb:	83 c4 20             	add    esp,0x20
c000f4ce:	6a 00                	push   0x0
c000f4d0:	68 32 05 00 c0       	push   0xc0000532
c000f4d5:	6a 24                	push   0x24
c000f4d7:	53                   	push   ebx
c000f4d8:	e8 09 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4dd:	6a 00                	push   0x0
c000f4df:	68 3c 05 00 c0       	push   0xc000053c
c000f4e4:	6a 25                	push   0x25
c000f4e6:	53                   	push   ebx
c000f4e7:	e8 fa fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4ec:	83 c4 20             	add    esp,0x20
c000f4ef:	6a 00                	push   0x0
c000f4f1:	68 46 05 00 c0       	push   0xc0000546
c000f4f6:	6a 26                	push   0x26
c000f4f8:	53                   	push   ebx
c000f4f9:	e8 e8 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4fe:	6a 00                	push   0x0
c000f500:	68 50 05 00 c0       	push   0xc0000550
c000f505:	6a 27                	push   0x27
c000f507:	53                   	push   ebx
c000f508:	e8 d9 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f50d:	83 c4 20             	add    esp,0x20
c000f510:	6a 00                	push   0x0
c000f512:	68 5a 05 00 c0       	push   0xc000055a
c000f517:	6a 28                	push   0x28
c000f519:	53                   	push   ebx
c000f51a:	e8 c7 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f51f:	6a 00                	push   0x0
c000f521:	68 64 05 00 c0       	push   0xc0000564
c000f526:	6a 29                	push   0x29
c000f528:	53                   	push   ebx
c000f529:	e8 b8 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f52e:	83 c4 20             	add    esp,0x20
c000f531:	6a 00                	push   0x0
c000f533:	68 6e 05 00 c0       	push   0xc000056e
c000f538:	6a 2a                	push   0x2a
c000f53a:	53                   	push   ebx
c000f53b:	e8 a6 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f540:	6a 00                	push   0x0
c000f542:	68 78 05 00 c0       	push   0xc0000578
c000f547:	6a 2b                	push   0x2b
c000f549:	53                   	push   ebx
c000f54a:	e8 97 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f54f:	83 c4 20             	add    esp,0x20
c000f552:	6a 00                	push   0x0
c000f554:	68 82 05 00 c0       	push   0xc0000582
c000f559:	6a 2c                	push   0x2c
c000f55b:	53                   	push   ebx
c000f55c:	e8 85 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f561:	6a 00                	push   0x0
c000f563:	68 8c 05 00 c0       	push   0xc000058c
c000f568:	6a 2d                	push   0x2d
c000f56a:	53                   	push   ebx
c000f56b:	e8 76 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f570:	83 c4 20             	add    esp,0x20
c000f573:	6a 00                	push   0x0
c000f575:	68 96 05 00 c0       	push   0xc0000596
c000f57a:	6a 2e                	push   0x2e
c000f57c:	53                   	push   ebx
c000f57d:	e8 64 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f582:	6a 00                	push   0x0
c000f584:	68 a0 05 00 c0       	push   0xc00005a0
c000f589:	6a 2f                	push   0x2f
c000f58b:	53                   	push   ebx
c000f58c:	e8 55 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f591:	83 c4 20             	add    esp,0x20
c000f594:	6a 00                	push   0x0
c000f596:	68 f5 05 00 c0       	push   0xc00005f5
c000f59b:	6a 30                	push   0x30
c000f59d:	53                   	push   ebx
c000f59e:	e8 43 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5a3:	6a 00                	push   0x0
c000f5a5:	68 ff 05 00 c0       	push   0xc00005ff
c000f5aa:	6a 31                	push   0x31
c000f5ac:	53                   	push   ebx
c000f5ad:	e8 34 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5b2:	83 c4 20             	add    esp,0x20
c000f5b5:	6a 00                	push   0x0
c000f5b7:	68 09 06 00 c0       	push   0xc0000609
c000f5bc:	6a 32                	push   0x32
c000f5be:	53                   	push   ebx
c000f5bf:	e8 22 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5c4:	6a 00                	push   0x0
c000f5c6:	68 13 06 00 c0       	push   0xc0000613
c000f5cb:	6a 33                	push   0x33
c000f5cd:	53                   	push   ebx
c000f5ce:	e8 13 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5d3:	83 c4 20             	add    esp,0x20
c000f5d6:	6a 00                	push   0x0
c000f5d8:	68 1d 06 00 c0       	push   0xc000061d
c000f5dd:	6a 34                	push   0x34
c000f5df:	53                   	push   ebx
c000f5e0:	e8 01 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5e5:	6a 00                	push   0x0
c000f5e7:	68 27 06 00 c0       	push   0xc0000627
c000f5ec:	6a 35                	push   0x35
c000f5ee:	53                   	push   ebx
c000f5ef:	e8 f2 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5f4:	83 c4 20             	add    esp,0x20
c000f5f7:	6a 00                	push   0x0
c000f5f9:	68 31 06 00 c0       	push   0xc0000631
c000f5fe:	6a 36                	push   0x36
c000f600:	53                   	push   ebx
c000f601:	e8 e0 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f606:	6a 00                	push   0x0
c000f608:	68 3b 06 00 c0       	push   0xc000063b
c000f60d:	6a 37                	push   0x37
c000f60f:	53                   	push   ebx
c000f610:	e8 d1 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f615:	83 c4 20             	add    esp,0x20
c000f618:	e8 c9 27 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f61d:	52                   	push   edx
c000f61e:	6a 03                	push   0x3
c000f620:	6a 02                	push   0x2
c000f622:	50                   	push   eax
c000f623:	e8 10 2e 00 00       	call   c0012438 <VAS::allocatePages(int, int)>
c000f628:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f62f:	89 c6                	mov    esi,eax
c000f631:	e8 15 02 00 00       	call   c000f84b <malloc>
c000f636:	81 c6 00 20 00 00    	add    esi,0x2000
c000f63c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f63f:	89 c7                	mov    edi,eax
c000f641:	e8 36 1e 00 00       	call   c001147c <TSS::TSS()>
c000f646:	83 c4 0c             	add    esp,0xc
c000f649:	68 c6 04 00 c0       	push   0xc00004c6
c000f64e:	56                   	push   esi
c000f64f:	57                   	push   edi
c000f650:	e8 67 1e 00 00       	call   c00114bc <TSS::setup(unsigned long, unsigned long)>
c000f655:	59                   	pop    ecx
c000f656:	89 c6                	mov    esi,eax
c000f658:	5f                   	pop    edi
c000f659:	6a 00                	push   0x0
c000f65b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f65f:	50                   	push   eax
c000f660:	e8 db fb ff ff       	call   c000f240 <IDTEntry::IDTEntry(bool)>
c000f665:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f669:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f66e:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f675:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f67b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f67f:	80 ce 05             	or     dh,0x5
c000f682:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f685:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f68d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f690:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f693:	e8 86 fc ff ff       	call   c000f31e <IDT::flush()>
c000f698:	83 c4 20             	add    esp,0x20
c000f69b:	5b                   	pop    ebx
c000f69c:	5e                   	pop    esi
c000f69d:	5f                   	pop    edi
c000f69e:	c3                   	ret    

c000f69f <sbrk>:
c000f69f:	55                   	push   ebp
c000f6a0:	57                   	push   edi
c000f6a1:	56                   	push   esi
c000f6a2:	53                   	push   ebx
c000f6a3:	83 ec 1c             	sub    esp,0x1c
c000f6a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6aa:	85 c0                	test   eax,eax
c000f6ac:	74 3e                	je     c000f6ec <sbrk+0x4d>
c000f6ae:	78 43                	js     c000f6f3 <sbrk+0x54>
c000f6b0:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c000f6b6:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6bc:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6c2:	83 e2 01             	and    edx,0x1
c000f6c5:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c9:	8b 0d 94 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d394
c000f6cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6d3:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d8:	89 c2                	mov    edx,eax
c000f6da:	78 2f                	js     c000f70b <sbrk+0x6c>
c000f6dc:	c1 fa 0c             	sar    edx,0xc
c000f6df:	89 d7                	mov    edi,edx
c000f6e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6e5:	be 00 00 00 00       	mov    esi,0x0
c000f6ea:	eb 36                	jmp    c000f722 <sbrk+0x83>
c000f6ec:	a1 94 d3 02 c0       	mov    eax,ds:0xc002d394
c000f6f1:	eb 74                	jmp    c000f767 <sbrk+0xc8>
c000f6f3:	83 ec 08             	sub    esp,0x8
c000f6f6:	50                   	push   eax
c000f6f7:	68 48 a2 02 c0       	push   0xc002a248
c000f6fc:	e8 de 37 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000f701:	83 c4 10             	add    esp,0x10
c000f704:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f709:	eb 5c                	jmp    c000f767 <sbrk+0xc8>
c000f70b:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f711:	eb c9                	jmp    c000f6dc <sbrk+0x3d>
c000f713:	81 05 94 d3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d394,0x1000
c000f71d:	46                   	inc    esi
c000f71e:	39 f7                	cmp    edi,esi
c000f720:	74 34                	je     c000f756 <sbrk+0xb7>
c000f722:	e8 bf 26 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f727:	89 c3                	mov    ebx,eax
c000f729:	8b 2d 94 d3 02 c0    	mov    ebp,DWORD PTR ds:0xc002d394
c000f72f:	e8 b9 07 00 00       	call   c000feed <Phys::allocatePage()>
c000f734:	68 01 0c 00 00       	push   0xc01
c000f739:	55                   	push   ebp
c000f73a:	50                   	push   eax
c000f73b:	53                   	push   ebx
c000f73c:	e8 f7 2b 00 00       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f741:	83 c4 10             	add    esp,0x10
c000f744:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f749:	74 c8                	je     c000f713 <sbrk+0x74>
c000f74b:	8b 1d 94 d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d394
c000f751:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f754:	eb bd                	jmp    c000f713 <sbrk+0x74>
c000f756:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f75b:	75 12                	jne    c000f76f <sbrk+0xd0>
c000f75d:	0f 20 d8             	mov    eax,cr3
c000f760:	0f 22 d8             	mov    cr3,eax
c000f763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f767:	83 c4 1c             	add    esp,0x1c
c000f76a:	5b                   	pop    ebx
c000f76b:	5e                   	pop    esi
c000f76c:	5f                   	pop    edi
c000f76d:	5d                   	pop    ebp
c000f76e:	c3                   	ret    
c000f76f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f773:	89 cb                	mov    ebx,ecx
c000f775:	c1 eb 0a             	shr    ebx,0xa
c000f778:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f77e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f788:	c1 e0 0c             	shl    eax,0xc
c000f78b:	01 c8                	add    eax,ecx
c000f78d:	c1 e8 0a             	shr    eax,0xa
c000f790:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f795:	2d 00 00 40 00       	sub    eax,0x400000
c000f79a:	39 c3                	cmp    ebx,eax
c000f79c:	77 c5                	ja     c000f763 <sbrk+0xc4>
c000f79e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7a7:	39 d8                	cmp    eax,ebx
c000f7a9:	73 f3                	jae    c000f79e <sbrk+0xff>
c000f7ab:	eb b6                	jmp    c000f763 <sbrk+0xc4>

c000f7ad <mmap>:
c000f7ad:	83 ec 18             	sub    esp,0x18
c000f7b0:	68 78 a2 02 c0       	push   0xc002a278
c000f7b5:	e8 51 ae 00 00       	call   c001a60b <Krnl::panic(char const*)>
c000f7ba:	b8 00 00 00 00       	mov    eax,0x0
c000f7bf:	83 c4 1c             	add    esp,0x1c
c000f7c2:	c3                   	ret    

c000f7c3 <munmap>:
c000f7c3:	83 ec 18             	sub    esp,0x18
c000f7c6:	68 7d a2 02 c0       	push   0xc002a27d
c000f7cb:	e8 3b ae 00 00       	call   c001a60b <Krnl::panic(char const*)>
c000f7d0:	b8 00 00 00 00       	mov    eax,0x0
c000f7d5:	83 c4 1c             	add    esp,0x1c
c000f7d8:	c3                   	ret    

c000f7d9 <liballoc_lock()>:
c000f7d9:	83 ec 0c             	sub    esp,0xc
c000f7dc:	e8 05 e6 00 00       	call   c001dde6 <lockScheduler()>
c000f7e1:	b8 00 00 00 00       	mov    eax,0x0
c000f7e6:	83 c4 0c             	add    esp,0xc
c000f7e9:	c3                   	ret    

c000f7ea <liballoc_unlock()>:
c000f7ea:	83 ec 0c             	sub    esp,0xc
c000f7ed:	e8 f6 e5 00 00       	call   c001dde8 <unlockScheduler()>
c000f7f2:	b8 00 00 00 00       	mov    eax,0x0
c000f7f7:	83 c4 0c             	add    esp,0xc
c000f7fa:	c3                   	ret    

c000f7fb <liballoc_alloc(int)>:
c000f7fb:	83 ec 0c             	sub    esp,0xc
c000f7fe:	e8 e3 25 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f803:	83 ec 04             	sub    esp,0x4
c000f806:	68 01 08 00 00       	push   0x801
c000f80b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f80f:	50                   	push   eax
c000f810:	e8 23 2c 00 00       	call   c0012438 <VAS::allocatePages(int, int)>
c000f815:	83 c4 1c             	add    esp,0x1c
c000f818:	c3                   	ret    

c000f819 <liballoc_free(void*, int)>:
c000f819:	83 ec 0c             	sub    esp,0xc
c000f81c:	e8 c5 25 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f821:	83 ec 08             	sub    esp,0x8
c000f824:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f828:	50                   	push   eax
c000f829:	e8 c6 28 00 00       	call   c00120f4 <VAS::freeAllocatedPages(unsigned long)>
c000f82e:	b8 00 00 00 00       	mov    eax,0x0
c000f833:	83 c4 1c             	add    esp,0x1c
c000f836:	c3                   	ret    

c000f837 <realloc>:
c000f837:	83 ec 14             	sub    esp,0x14
c000f83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f842:	e8 15 1e ff ff       	call   c000165c <dlrealloc>
c000f847:	83 c4 1c             	add    esp,0x1c
c000f84a:	c3                   	ret    

c000f84b <malloc>:
c000f84b:	83 ec 18             	sub    esp,0x18
c000f84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f852:	e8 c8 18 ff ff       	call   c000111f <dlmalloc>
c000f857:	83 c4 1c             	add    esp,0x1c
c000f85a:	c3                   	ret    

c000f85b <free>:
c000f85b:	83 ec 18             	sub    esp,0x18
c000f85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f862:	e8 5d 15 ff ff       	call   c0000dc4 <dlfree>
c000f867:	83 c4 1c             	add    esp,0x1c
c000f86a:	c3                   	ret    

c000f86b <rfree>:
c000f86b:	83 ec 18             	sub    esp,0x18
c000f86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f872:	e8 4d 15 ff ff       	call   c0000dc4 <dlfree>
c000f877:	83 c4 1c             	add    esp,0x1c
c000f87a:	c3                   	ret    

c000f87b <calloc>:
c000f87b:	56                   	push   esi
c000f87c:	53                   	push   ebx
c000f87d:	83 ec 10             	sub    esp,0x10
c000f880:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f884:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f889:	53                   	push   ebx
c000f88a:	e8 bc ff ff ff       	call   c000f84b <malloc>
c000f88f:	89 c6                	mov    esi,eax
c000f891:	83 c4 0c             	add    esp,0xc
c000f894:	53                   	push   ebx
c000f895:	6a 00                	push   0x0
c000f897:	50                   	push   eax
c000f898:	e8 e3 0e ff ff       	call   c0000780 <memset>
c000f89d:	89 f0                	mov    eax,esi
c000f89f:	83 c4 14             	add    esp,0x14
c000f8a2:	5b                   	pop    ebx
c000f8a3:	5e                   	pop    esi
c000f8a4:	c3                   	ret    

c000f8a5 <hwTextMode_loadInData(VgaText*)>:
c000f8a5:	55                   	push   ebp
c000f8a6:	a1 a0 d3 02 c0       	mov    eax,ds:0xc002d3a0
c000f8ab:	57                   	push   edi
c000f8ac:	56                   	push   esi
c000f8ad:	53                   	push   ebx
c000f8ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8b2:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b8:	85 d2                	test   edx,edx
c000f8ba:	7e 2f                	jle    c000f8eb <hwTextMode_loadInData(VgaText*)+0x46>
c000f8bc:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8c2:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8c5:	31 f6                	xor    esi,esi
c000f8c7:	29 fd                	sub    ebp,edi
c000f8c9:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8cc:	31 c0                	xor    eax,eax
c000f8ce:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8d2:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8d6:	40                   	inc    eax
c000f8d7:	83 f8 50             	cmp    eax,0x50
c000f8da:	75 f2                	jne    c000f8ce <hwTextMode_loadInData(VgaText*)+0x29>
c000f8dc:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8e2:	46                   	inc    esi
c000f8e3:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e9:	7f de                	jg     c000f8c9 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8eb:	5b                   	pop    ebx
c000f8ec:	5e                   	pop    esi
c000f8ed:	5f                   	pop    edi
c000f8ee:	5d                   	pop    ebp
c000f8ef:	c3                   	ret    

c000f8f0 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8f0:	55                   	push   ebp
c000f8f1:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000f8f8:	57                   	push   edi
c000f8f9:	56                   	push   esi
c000f8fa:	53                   	push   ebx
c000f8fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8ff:	75 50                	jne    c000f951 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f901:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f907:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f90d:	8b 15 a0 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d3a0
c000f913:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f917:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f91d:	eb 0e                	jmp    c000f92d <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f91f:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f925:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f92b:	89 da                	mov    edx,ebx
c000f92d:	83 e5 0f             	and    ebp,0xf
c000f930:	c1 e0 04             	shl    eax,0x4
c000f933:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f936:	0f b6 c0             	movzx  eax,al
c000f939:	41                   	inc    ecx
c000f93a:	09 e8                	or     eax,ebp
c000f93c:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f940:	c1 e0 08             	shl    eax,0x8
c000f943:	09 e8                	or     eax,ebp
c000f945:	39 fb                	cmp    ebx,edi
c000f947:	66 89 02             	mov    WORD PTR [edx],ax
c000f94a:	75 d3                	jne    c000f91f <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f94c:	5b                   	pop    ebx
c000f94d:	5e                   	pop    esi
c000f94e:	5f                   	pop    edi
c000f94f:	5d                   	pop    ebp
c000f950:	c3                   	ret    
c000f951:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f95b:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f965:	31 c0                	xor    eax,eax
c000f967:	bd 02 00 00 00       	mov    ebp,0x2
c000f96c:	eb 9f                	jmp    c000f90d <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f96e <hwTextMode_showCursor(VgaText*, bool)>:
c000f96e:	56                   	push   esi
c000f96f:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000f976:	53                   	push   ebx
c000f977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f97b:	75 39                	jne    c000f9b6 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f97d:	84 c0                	test   al,al
c000f97f:	74 38                	je     c000f9b9 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f981:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f986:	b0 0a                	mov    al,0xa
c000f988:	89 da                	mov    edx,ebx
c000f98a:	ee                   	out    dx,al
c000f98b:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f990:	89 ca                	mov    edx,ecx
c000f992:	ec                   	in     al,dx
c000f993:	b2 0f                	mov    dl,0xf
c000f995:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f999:	83 e0 c0             	and    eax,0xffffffc0
c000f99c:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f9a2:	09 d0                	or     eax,edx
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ee                   	out    dx,al
c000f9a7:	b0 0b                	mov    al,0xb
c000f9a9:	89 da                	mov    edx,ebx
c000f9ab:	ee                   	out    dx,al
c000f9ac:	89 ca                	mov    edx,ecx
c000f9ae:	ec                   	in     al,dx
c000f9af:	83 e0 e0             	and    eax,0xffffffe0
c000f9b2:	83 c8 0f             	or     eax,0xf
c000f9b5:	ee                   	out    dx,al
c000f9b6:	5b                   	pop    ebx
c000f9b7:	5e                   	pop    esi
c000f9b8:	c3                   	ret    
c000f9b9:	b0 0a                	mov    al,0xa
c000f9bb:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9c0:	ee                   	out    dx,al
c000f9c1:	b0 20                	mov    al,0x20
c000f9c3:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c8:	ee                   	out    dx,al
c000f9c9:	5b                   	pop    ebx
c000f9ca:	5e                   	pop    esi
c000f9cb:	c3                   	ret    

c000f9cc <hwTextMode_update(VgaText*)>:
c000f9cc:	c3                   	ret    

c000f9cd <hwTextMode_updateCursor(VgaText*)>:
c000f9cd:	56                   	push   esi
c000f9ce:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000f9d5:	53                   	push   ebx
c000f9d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9da:	75 3f                	jne    c000fa1b <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9dc:	be d4 03 00 00       	mov    esi,0x3d4
c000f9e1:	b9 19 00 00 00       	mov    ecx,0x19
c000f9e6:	89 f2                	mov    edx,esi
c000f9e8:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9ee:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9f4:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9f7:	c1 e1 04             	shl    ecx,0x4
c000f9fa:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000fa00:	b0 0f                	mov    al,0xf
c000fa02:	ee                   	out    dx,al
c000fa03:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa08:	88 c8                	mov    al,cl
c000fa0a:	89 da                	mov    edx,ebx
c000fa0c:	ee                   	out    dx,al
c000fa0d:	b0 0e                	mov    al,0xe
c000fa0f:	89 f2                	mov    edx,esi
c000fa11:	ee                   	out    dx,al
c000fa12:	89 c8                	mov    eax,ecx
c000fa14:	89 da                	mov    edx,ebx
c000fa16:	66 c1 e8 08          	shr    ax,0x8
c000fa1a:	ee                   	out    dx,al
c000fa1b:	5b                   	pop    ebx
c000fa1c:	5e                   	pop    esi
c000fa1d:	c3                   	ret    

c000fa1e <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa22:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000fa29:	75 38                	jne    c000fa63 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa2b:	ba da 03 00 00       	mov    edx,0x3da
c000fa30:	84 c0                	test   al,al
c000fa32:	75 18                	jne    c000fa4c <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa34:	ec                   	in     al,dx
c000fa35:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa3a:	b0 30                	mov    al,0x30
c000fa3c:	89 ca                	mov    edx,ecx
c000fa3e:	ee                   	out    dx,al
c000fa3f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa44:	ec                   	in     al,dx
c000fa45:	83 c8 08             	or     eax,0x8
c000fa48:	89 ca                	mov    edx,ecx
c000fa4a:	ee                   	out    dx,al
c000fa4b:	c3                   	ret    
c000fa4c:	ec                   	in     al,dx
c000fa4d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa52:	b0 30                	mov    al,0x30
c000fa54:	89 ca                	mov    edx,ecx
c000fa56:	ee                   	out    dx,al
c000fa57:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa5c:	ec                   	in     al,dx
c000fa5d:	83 e0 f7             	and    eax,0xfffffff7
c000fa60:	89 ca                	mov    edx,ecx
c000fa62:	ee                   	out    dx,al
c000fa63:	c3                   	ret    

c000fa64 <hwTextMode_scrollScreen(VgaText*)>:
c000fa64:	55                   	push   ebp
c000fa65:	57                   	push   edi
c000fa66:	56                   	push   esi
c000fa67:	53                   	push   ebx
c000fa68:	83 ec 1c             	sub    esp,0x1c
c000fa6b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa6f:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000fa76:	74 14                	je     c000fa8c <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa78:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa82:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa8c:	a1 a0 d3 02 c0       	mov    eax,ds:0xc002d3a0
c000fa91:	bd 02 00 00 00       	mov    ebp,0x2
c000fa96:	05 a0 00 00 00       	add    eax,0xa0
c000fa9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa9f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000faa3:	31 c0                	xor    eax,eax
c000faa5:	eb 0b                	jmp    c000fab2 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000faa7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faad:	74 57                	je     c000fb06 <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faaf:	43                   	inc    ebx
c000fab0:	89 f0                	mov    eax,esi
c000fab2:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab8:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fabe:	88 13                	mov    BYTE PTR [ebx],dl
c000fac0:	8d 70 01             	lea    esi,[eax+0x1]
c000fac3:	83 fd 18             	cmp    ebp,0x18
c000fac6:	75 df                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac8:	a8 01                	test   al,0x1
c000faca:	75 13                	jne    c000fadf <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000facc:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000facf:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fad5:	75 d8                	jne    c000faaf <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000fad7:	83 c4 1c             	add    esp,0x1c
c000fada:	5b                   	pop    ebx
c000fadb:	5e                   	pop    esi
c000fadc:	5f                   	pop    edi
c000fadd:	5d                   	pop    ebp
c000fade:	c3                   	ret    
c000fadf:	83 ec 08             	sub    esp,0x8
c000fae2:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae9:	50                   	push   eax
c000faea:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000faee:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faf5:	50                   	push   eax
c000faf6:	e8 53 0c 00 00       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c000fafb:	83 c4 10             	add    esp,0x10
c000fafe:	88 07                	mov    BYTE PTR [edi],al
c000fb00:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb04:	eb c9                	jmp    c000facf <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fb06:	45                   	inc    ebp
c000fb07:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb0f:	eb 8e                	jmp    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb11 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb11:	57                   	push   edi
c000fb12:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000fb19:	56                   	push   esi
c000fb1a:	53                   	push   ebx
c000fb1b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb1f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb23:	75 65                	jne    c000fb8a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb25:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb2a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb2f:	83 ec 08             	sub    esp,0x8
c000fb32:	52                   	push   edx
c000fb33:	50                   	push   eax
c000fb34:	e8 15 0c 00 00       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb39:	5a                   	pop    edx
c000fb3a:	0f b6 c0             	movzx  eax,al
c000fb3d:	59                   	pop    ecx
c000fb3e:	50                   	push   eax
c000fb3f:	0f be c3             	movsx  eax,bl
c000fb42:	50                   	push   eax
c000fb43:	e8 ac 0c 00 00       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb48:	83 c4 10             	add    esp,0x10
c000fb4b:	8b 35 a0 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d3a0
c000fb51:	80 3d 00 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e500,0x0
c000fb58:	74 07                	je     c000fb61 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb5a:	66 0f be c3          	movsx  ax,bl
c000fb5e:	80 cc 02             	or     ah,0x2
c000fb61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb65:	ba 19 00 00 00       	mov    edx,0x19
c000fb6a:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb70:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb73:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb76:	c1 e1 04             	shl    ecx,0x4
c000fb79:	c1 e2 04             	shl    edx,0x4
c000fb7c:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb80:	01 ca                	add    edx,ecx
c000fb82:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb86:	5b                   	pop    ebx
c000fb87:	5e                   	pop    esi
c000fb88:	5f                   	pop    edi
c000fb89:	c3                   	ret    
c000fb8a:	b8 02 00 00 00       	mov    eax,0x2
c000fb8f:	31 d2                	xor    edx,edx
c000fb91:	eb 9c                	jmp    c000fb2f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb93 <setupTextMode()>:
c000fb93:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb98:	83 e0 30             	and    eax,0x30
c000fb9b:	66 83 f8 30          	cmp    ax,0x30
c000fb9f:	75 11                	jne    c000fbb2 <setupTextMode()+0x1f>
c000fba1:	81 2d a0 d3 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d3a0,0x8000
c000fbab:	c6 05 00 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e500,0x1
c000fbb2:	c7 05 38 e5 02 c0 1e fa 00 c0 	mov    DWORD PTR ds:0xc002e538,0xc000fa1e
c000fbbc:	c7 05 24 e5 02 c0 a5 f8 00 c0 	mov    DWORD PTR ds:0xc002e524,0xc000f8a5
c000fbc6:	c7 05 20 e5 02 c0 f0 f8 00 c0 	mov    DWORD PTR ds:0xc002e520,0xc000f8f0
c000fbd0:	c7 05 2c e5 02 c0 64 fa 00 c0 	mov    DWORD PTR ds:0xc002e52c,0xc000fa64
c000fbda:	c7 05 34 e5 02 c0 6e f9 00 c0 	mov    DWORD PTR ds:0xc002e534,0xc000f96e
c000fbe4:	c7 05 28 e5 02 c0 cc f9 00 c0 	mov    DWORD PTR ds:0xc002e528,0xc000f9cc
c000fbee:	c7 05 30 e5 02 c0 cd f9 00 c0 	mov    DWORD PTR ds:0xc002e530,0xc000f9cd
c000fbf8:	c7 05 3c e5 02 c0 11 fb 00 c0 	mov    DWORD PTR ds:0xc002e53c,0xc000fb11
c000fc02:	c3                   	ret    

c000fc03 <kernel_main>:
c000fc03:	57                   	push   edi
c000fc04:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc09:	56                   	push   esi
c000fc0a:	31 f6                	xor    esi,esi
c000fc0c:	53                   	push   ebx
c000fc0d:	83 ec 20             	sub    esp,0x20
c000fc10:	e8 93 09 00 00       	call   c00105a8 <installVgaTextImplementation()>
c000fc15:	e8 79 ff ff ff       	call   c000fb93 <setupTextMode()>
c000fc1a:	89 f0                	mov    eax,esi
c000fc1c:	89 fa                	mov    edx,edi
c000fc1e:	ee                   	out    dx,al
c000fc1f:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc24:	b0 80                	mov    al,0x80
c000fc26:	89 da                	mov    edx,ebx
c000fc28:	ee                   	out    dx,al
c000fc29:	b1 03                	mov    cl,0x3
c000fc2b:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc30:	88 c8                	mov    al,cl
c000fc32:	ee                   	out    dx,al
c000fc33:	89 f0                	mov    eax,esi
c000fc35:	89 fa                	mov    edx,edi
c000fc37:	ee                   	out    dx,al
c000fc38:	88 c8                	mov    al,cl
c000fc3a:	89 da                	mov    edx,ebx
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 c7                	mov    al,0xc7
c000fc3f:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc44:	ee                   	out    dx,al
c000fc45:	b0 0b                	mov    al,0xb
c000fc47:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc4c:	ee                   	out    dx,al
c000fc4d:	83 ec 0c             	sub    esp,0xc
c000fc50:	68 84 a2 02 c0       	push   0xc002a284
c000fc55:	e8 85 32 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000fc5a:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc5f:	05 ff 0f 00 00       	add    eax,0xfff
c000fc64:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc69:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc6c:	e8 f3 03 00 00       	call   c0010064 <Phys::physicalMemorySetup(unsigned int)>
c000fc71:	e8 94 20 00 00       	call   c0011d0a <Virt::virtualMemorySetup()>
c000fc76:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc7c:	83 c4 10             	add    esp,0x10
c000fc7f:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc85:	75 0e                	jne    c000fc95 <kernel_main+0x92>
c000fc87:	89 d8                	mov    eax,ebx
c000fc89:	25 48 03 00 00       	and    eax,0x348
c000fc8e:	3d 00 03 00 00       	cmp    eax,0x300
c000fc93:	74 10                	je     c000fca5 <kernel_main+0xa2>
c000fc95:	83 ec 0c             	sub    esp,0xc
c000fc98:	68 41 bb 02 c0       	push   0xc002bb41
c000fc9d:	e8 69 a9 00 00       	call   c001a60b <Krnl::panic(char const*)>
c000fca2:	83 c4 10             	add    esp,0x10
c000fca5:	83 ec 0c             	sub    esp,0xc
c000fca8:	89 1d 80 e4 02 c0    	mov    DWORD PTR ds:0xc002e480,ebx
c000fcae:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcb2:	53                   	push   ebx
c000fcb3:	e8 64 22 00 00       	call   c0011f1c <VAS::VAS()>
c000fcb8:	89 1d f0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5f0,ebx
c000fcbe:	e8 5d 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcc3:	c7 04 24 9b a2 02 c0 	mov    DWORD PTR [esp],0xc002a29b
c000fcca:	e8 10 32 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000fccf:	e8 b5 20 00 00       	call   c0011d89 <Virt::swappingSetup()>
c000fcd4:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcdb:	e8 6b fb ff ff       	call   c000f84b <malloc>
c000fce0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fce3:	89 c6                	mov    esi,eax
c000fce5:	e8 58 ea ff ff       	call   c000e742 <Computer::Computer()>
c000fcea:	58                   	pop    eax
c000fceb:	89 35 68 e4 02 c0    	mov    DWORD PTR ds:0xc002e468,esi
c000fcf1:	5a                   	pop    edx
c000fcf2:	56                   	push   esi
c000fcf3:	68 b8 a2 02 c0       	push   0xc002a2b8
c000fcf8:	e8 e2 31 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000fcfd:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c000fd02:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd04:	6a 00                	push   0x0
c000fd06:	6a 00                	push   0x0
c000fd08:	6a 00                	push   0x0
c000fd0a:	50                   	push   eax
c000fd0b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd0e:	83 c4 14             	add    esp,0x14
c000fd11:	53                   	push   ebx
c000fd12:	e8 b5 24 00 00       	call   c00121cc <VAS::~VAS()>
c000fd17:	c7 04 24 cb a2 02 c0 	mov    DWORD PTR [esp],0xc002a2cb
c000fd1e:	e8 e8 a8 00 00       	call   c001a60b <Krnl::panic(char const*)>
c000fd23:	83 c4 30             	add    esp,0x30
c000fd26:	5b                   	pop    ebx
c000fd27:	5e                   	pop    esi
c000fd28:	5f                   	pop    edi
c000fd29:	c3                   	ret    

c000fd2a <Phys::allocateDMA(unsigned long)>:
c000fd2a:	55                   	push   ebp
c000fd2b:	31 d2                	xor    edx,edx
c000fd2d:	57                   	push   edi
c000fd2e:	31 ed                	xor    ebp,ebp
c000fd30:	56                   	push   esi
c000fd31:	31 c9                	xor    ecx,ecx
c000fd33:	53                   	push   ebx
c000fd34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd38:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd3e:	31 c0                	xor    eax,eax
c000fd40:	c1 ee 0c             	shr    esi,0xc
c000fd43:	eb 17                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x32>
c000fd45:	85 c9                	test   ecx,ecx
c000fd47:	75 04                	jne    c000fd4d <Phys::allocateDMA(unsigned long)+0x23>
c000fd49:	89 d5                	mov    ebp,edx
c000fd4b:	89 d0                	mov    eax,edx
c000fd4d:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd50:	39 de                	cmp    esi,ebx
c000fd52:	74 20                	je     c000fd74 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd54:	42                   	inc    edx
c000fd55:	89 d9                	mov    ecx,ebx
c000fd57:	83 fa 2f             	cmp    edx,0x2f
c000fd5a:	7f 11                	jg     c000fd6d <Phys::allocateDMA(unsigned long)+0x43>
c000fd5c:	80 ba c0 e4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1b40],0x0
c000fd63:	74 e0                	je     c000fd45 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd65:	31 c9                	xor    ecx,ecx
c000fd67:	42                   	inc    edx
c000fd68:	83 fa 2f             	cmp    edx,0x2f
c000fd6b:	7e ef                	jle    c000fd5c <Phys::allocateDMA(unsigned long)+0x32>
c000fd6d:	5b                   	pop    ebx
c000fd6e:	31 c0                	xor    eax,eax
c000fd70:	5e                   	pop    esi
c000fd71:	5f                   	pop    edi
c000fd72:	5d                   	pop    ebp
c000fd73:	c3                   	ret    
c000fd74:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd77:	89 d7                	mov    edi,edx
c000fd79:	4f                   	dec    edi
c000fd7a:	79 03                	jns    c000fd7f <Phys::allocateDMA(unsigned long)+0x55>
c000fd7c:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd7f:	c1 ff 04             	sar    edi,0x4
c000fd82:	89 c2                	mov    edx,eax
c000fd84:	c1 fa 04             	sar    edx,0x4
c000fd87:	39 fa                	cmp    edx,edi
c000fd89:	75 2f                	jne    c000fdba <Phys::allocateDMA(unsigned long)+0x90>
c000fd8b:	85 db                	test   ebx,ebx
c000fd8d:	74 1a                	je     c000fda9 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd8f:	be c0 e4 02 c0       	mov    esi,0xc002e4c0
c000fd94:	8d 90 c0 e4 02 c0    	lea    edx,[eax-0x3ffd1b40]
c000fd9a:	f7 d6                	not    esi
c000fd9c:	29 c6                	sub    esi,eax
c000fd9e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fda1:	42                   	inc    edx
c000fda2:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fda5:	39 d9                	cmp    ecx,ebx
c000fda7:	7f f5                	jg     c000fd9e <Phys::allocateDMA(unsigned long)+0x74>
c000fda9:	85 ff                	test   edi,edi
c000fdab:	74 13                	je     c000fdc0 <Phys::allocateDMA(unsigned long)+0x96>
c000fdad:	5b                   	pop    ebx
c000fdae:	05 50 20 0c 00       	add    eax,0xc2050
c000fdb3:	5e                   	pop    esi
c000fdb4:	c1 e0 0c             	shl    eax,0xc
c000fdb7:	5f                   	pop    edi
c000fdb8:	5d                   	pop    ebp
c000fdb9:	c3                   	ret    
c000fdba:	89 ea                	mov    edx,ebp
c000fdbc:	31 c9                	xor    ecx,ecx
c000fdbe:	eb a7                	jmp    c000fd67 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdc0:	5b                   	pop    ebx
c000fdc1:	c1 e0 0c             	shl    eax,0xc
c000fdc4:	5e                   	pop    esi
c000fdc5:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdca:	5f                   	pop    edi
c000fdcb:	5d                   	pop    ebp
c000fdcc:	c3                   	ret    

c000fdcd <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdd1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdd5:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fddb:	c1 e9 0c             	shr    ecx,0xc
c000fdde:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fde3:	76 25                	jbe    c000fe0a <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fde5:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdea:	c1 e8 0c             	shr    eax,0xc
c000fded:	8d 50 10             	lea    edx,[eax+0x10]
c000fdf0:	85 c9                	test   ecx,ecx
c000fdf2:	74 15                	je     c000fe09 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdf4:	8d 82 c0 e4 02 c0    	lea    eax,[edx-0x3ffd1b40]
c000fdfa:	8d 94 11 c0 e4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1b40]
c000fe01:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe04:	40                   	inc    eax
c000fe05:	39 d0                	cmp    eax,edx
c000fe07:	75 f8                	jne    c000fe01 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe09:	c3                   	ret    
c000fe0a:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe10:	c1 ea 0c             	shr    edx,0xc
c000fe13:	eb db                	jmp    c000fdf0 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe15 <Phys::setPageState(unsigned long, bool)>:
c000fe15:	56                   	push   esi
c000fe16:	ba 01 00 00 00       	mov    edx,0x1
c000fe1b:	53                   	push   ebx
c000fe1c:	8b 35 98 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d398
c000fe22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe2a:	89 c8                	mov    eax,ecx
c000fe2c:	83 e1 07             	and    ecx,0x7
c000fe2f:	c1 e8 03             	shr    eax,0x3
c000fe32:	d3 e3                	shl    ebx,cl
c000fe34:	01 c6                	add    esi,eax
c000fe36:	d3 e2                	shl    edx,cl
c000fe38:	f7 d2                	not    edx
c000fe3a:	20 16                	and    BYTE PTR [esi],dl
c000fe3c:	03 05 98 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d398
c000fe42:	08 18                	or     BYTE PTR [eax],bl
c000fe44:	5b                   	pop    ebx
c000fe45:	5e                   	pop    esi
c000fe46:	c3                   	ret    

c000fe47 <Phys::getPageState(unsigned long)>:
c000fe47:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe4b:	8b 15 98 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d398
c000fe51:	89 c8                	mov    eax,ecx
c000fe53:	83 e1 07             	and    ecx,0x7
c000fe56:	c1 e8 03             	shr    eax,0x3
c000fe59:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe5d:	d3 f8                	sar    eax,cl
c000fe5f:	83 e0 01             	and    eax,0x1
c000fe62:	c3                   	ret    

c000fe63 <Phys::freePage(unsigned long)>:
c000fe63:	53                   	push   ebx
c000fe64:	83 ec 08             	sub    esp,0x8
c000fe67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe6b:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe71:	76 57                	jbe    c000feca <Phys::freePage(unsigned long)+0x67>
c000fe73:	c1 eb 0c             	shr    ebx,0xc
c000fe76:	53                   	push   ebx
c000fe77:	e8 cb ff ff ff       	call   c000fe47 <Phys::getPageState(unsigned long)>
c000fe7c:	5a                   	pop    edx
c000fe7d:	84 c0                	test   al,al
c000fe7f:	74 5b                	je     c000fedc <Phys::freePage(unsigned long)+0x79>
c000fe81:	a1 b0 e4 02 c0       	mov    eax,ds:0xc002e4b0
c000fe86:	48                   	dec    eax
c000fe87:	a3 b0 e4 02 c0       	mov    ds:0xc002e4b0,eax
c000fe8c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe8f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe92:	c1 e0 02             	shl    eax,0x2
c000fe95:	99                   	cdq    
c000fe96:	f7 3d b4 e4 02 c0    	idiv   DWORD PTR ds:0xc002e4b4
c000fe9c:	39 05 ac e4 02 c0    	cmp    DWORD PTR ds:0xc002e4ac,eax
c000fea2:	75 13                	jne    c000feb7 <Phys::freePage(unsigned long)+0x54>
c000fea4:	83 ec 08             	sub    esp,0x8
c000fea7:	6a 00                	push   0x0
c000fea9:	53                   	push   ebx
c000feaa:	e8 66 ff ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c000feaf:	83 c4 10             	add    esp,0x10
c000feb2:	83 c4 08             	add    esp,0x8
c000feb5:	5b                   	pop    ebx
c000feb6:	c3                   	ret    
c000feb7:	83 ec 0c             	sub    esp,0xc
c000feba:	a3 ac e4 02 c0       	mov    ds:0xc002e4ac,eax
c000febf:	50                   	push   eax
c000fec0:	e8 77 0a 00 00       	call   c001093c <VgaText::updateRAMUsageDisplay(int)>
c000fec5:	83 c4 10             	add    esp,0x10
c000fec8:	eb da                	jmp    c000fea4 <Phys::freePage(unsigned long)+0x41>
c000feca:	68 00 10 00 00       	push   0x1000
c000fecf:	53                   	push   ebx
c000fed0:	e8 f8 fe ff ff       	call   c000fdcd <Phys::freeDMA(unsigned long, unsigned long)>
c000fed5:	59                   	pop    ecx
c000fed6:	5b                   	pop    ebx
c000fed7:	83 c4 08             	add    esp,0x8
c000feda:	5b                   	pop    ebx
c000fedb:	c3                   	ret    
c000fedc:	c7 44 24 10 e6 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2e6
c000fee4:	83 c4 08             	add    esp,0x8
c000fee7:	5b                   	pop    ebx
c000fee8:	e9 1e a7 00 00       	jmp    c001a60b <Krnl::panic(char const*)>

c000feed <Phys::allocatePage()>:
c000feed:	56                   	push   esi
c000feee:	53                   	push   ebx
c000feef:	51                   	push   ecx
c000fef0:	8b 35 a4 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4a4
c000fef6:	89 f3                	mov    ebx,esi
c000fef8:	eb 0a                	jmp    c000ff04 <Phys::allocatePage()+0x17>
c000fefa:	89 1d a4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4a4,ebx
c000ff00:	39 de                	cmp    esi,ebx
c000ff02:	74 24                	je     c000ff28 <Phys::allocatePage()+0x3b>
c000ff04:	53                   	push   ebx
c000ff05:	e8 3d ff ff ff       	call   c000fe47 <Phys::getPageState(unsigned long)>
c000ff0a:	5a                   	pop    edx
c000ff0b:	84 c0                	test   al,al
c000ff0d:	74 77                	je     c000ff86 <Phys::allocatePage()+0x99>
c000ff0f:	43                   	inc    ebx
c000ff10:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff16:	75 e2                	jne    c000fefa <Phys::allocatePage()+0xd>
c000ff18:	31 db                	xor    ebx,ebx
c000ff1a:	c7 05 a4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4a4,0x0
c000ff24:	39 de                	cmp    esi,ebx
c000ff26:	75 dc                	jne    c000ff04 <Phys::allocatePage()+0x17>
c000ff28:	83 ec 0c             	sub    esp,0xc
c000ff2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff30:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff33:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff39:	e8 ce 2c 00 00       	call   c0012c0c <VAS::scanForEviction()>
c000ff3e:	83 c4 10             	add    esp,0x10
c000ff41:	85 c0                	test   eax,eax
c000ff43:	75 76                	jne    c000ffbb <Phys::allocatePage()+0xce>
c000ff45:	83 ec 0c             	sub    esp,0xc
c000ff48:	68 fc a2 02 c0       	push   0xc002a2fc
c000ff4d:	e8 8d 2f 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c000ff52:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff59:	e8 cc fd ff ff       	call   c000fd2a <Phys::allocateDMA(unsigned long)>
c000ff5e:	83 c4 10             	add    esp,0x10
c000ff61:	85 c0                	test   eax,eax
c000ff63:	75 56                	jne    c000ffbb <Phys::allocatePage()+0xce>
c000ff65:	83 ec 0c             	sub    esp,0xc
c000ff68:	68 0d a3 02 c0       	push   0xc002a30d
c000ff6d:	e8 99 a6 00 00       	call   c001a60b <Krnl::panic(char const*)>
c000ff72:	83 c4 10             	add    esp,0x10
c000ff75:	8b 1d a4 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4a4
c000ff7b:	53                   	push   ebx
c000ff7c:	e8 c6 fe ff ff       	call   c000fe47 <Phys::getPageState(unsigned long)>
c000ff81:	5a                   	pop    edx
c000ff82:	84 c0                	test   al,al
c000ff84:	75 89                	jne    c000ff0f <Phys::allocatePage()+0x22>
c000ff86:	6a 01                	push   0x1
c000ff88:	53                   	push   ebx
c000ff89:	e8 87 fe ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c000ff8e:	a1 b0 e4 02 c0       	mov    eax,ds:0xc002e4b0
c000ff93:	59                   	pop    ecx
c000ff94:	40                   	inc    eax
c000ff95:	5b                   	pop    ebx
c000ff96:	a3 b0 e4 02 c0       	mov    ds:0xc002e4b0,eax
c000ff9b:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff9e:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffa1:	c1 e0 02             	shl    eax,0x2
c000ffa4:	99                   	cdq    
c000ffa5:	f7 3d b4 e4 02 c0    	idiv   DWORD PTR ds:0xc002e4b4
c000ffab:	39 05 ac e4 02 c0    	cmp    DWORD PTR ds:0xc002e4ac,eax
c000ffb1:	75 0c                	jne    c000ffbf <Phys::allocatePage()+0xd2>
c000ffb3:	a1 a4 e4 02 c0       	mov    eax,ds:0xc002e4a4
c000ffb8:	c1 e0 0c             	shl    eax,0xc
c000ffbb:	5a                   	pop    edx
c000ffbc:	5b                   	pop    ebx
c000ffbd:	5e                   	pop    esi
c000ffbe:	c3                   	ret    
c000ffbf:	83 ec 0c             	sub    esp,0xc
c000ffc2:	a3 ac e4 02 c0       	mov    ds:0xc002e4ac,eax
c000ffc7:	50                   	push   eax
c000ffc8:	e8 6f 09 00 00       	call   c001093c <VgaText::updateRAMUsageDisplay(int)>
c000ffcd:	83 c4 10             	add    esp,0x10
c000ffd0:	eb e1                	jmp    c000ffb3 <Phys::allocatePage()+0xc6>

c000ffd2 <Phys::allocateContiguousPages(int)>:
c000ffd2:	57                   	push   edi
c000ffd3:	56                   	push   esi
c000ffd4:	53                   	push   ebx
c000ffd5:	31 db                	xor    ebx,ebx
c000ffd7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffdb:	e8 06 de 00 00       	call   c001dde6 <lockScheduler()>
c000ffe0:	85 db                	test   ebx,ebx
c000ffe2:	75 11                	jne    c000fff5 <Phys::allocateContiguousPages(int)+0x23>
c000ffe4:	e8 04 ff ff ff       	call   c000feed <Phys::allocatePage()>
c000ffe9:	83 ff 01             	cmp    edi,0x1
c000ffec:	89 c6                	mov    esi,eax
c000ffee:	74 21                	je     c0010011 <Phys::allocateContiguousPages(int)+0x3f>
c000fff0:	bb 01 00 00 00       	mov    ebx,0x1
c000fff5:	e8 f3 fe ff ff       	call   c000feed <Phys::allocatePage()>
c000fffa:	89 da                	mov    edx,ebx
c000fffc:	c1 e2 0c             	shl    edx,0xc
c000ffff:	01 f2                	add    edx,esi
c0010001:	39 c2                	cmp    edx,eax
c0010003:	74 17                	je     c001001c <Phys::allocateContiguousPages(int)+0x4a>
c0010005:	bb 01 00 00 00       	mov    ebx,0x1
c001000a:	89 c6                	mov    esi,eax
c001000c:	83 ff 01             	cmp    edi,0x1
c001000f:	75 e4                	jne    c000fff5 <Phys::allocateContiguousPages(int)+0x23>
c0010011:	e8 d2 dd 00 00       	call   c001dde8 <unlockScheduler()>
c0010016:	89 f0                	mov    eax,esi
c0010018:	5b                   	pop    ebx
c0010019:	5e                   	pop    esi
c001001a:	5f                   	pop    edi
c001001b:	c3                   	ret    
c001001c:	43                   	inc    ebx
c001001d:	39 fb                	cmp    ebx,edi
c001001f:	75 bf                	jne    c000ffe0 <Phys::allocateContiguousPages(int)+0xe>
c0010021:	e8 c2 dd 00 00       	call   c001dde8 <unlockScheduler()>
c0010026:	89 f0                	mov    eax,esi
c0010028:	5b                   	pop    ebx
c0010029:	5e                   	pop    esi
c001002a:	5f                   	pop    edi
c001002b:	c3                   	ret    

c001002c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001002c:	56                   	push   esi
c001002d:	53                   	push   ebx
c001002e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010032:	39 1d a8 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4a8,ebx
c0010038:	73 06                	jae    c0010040 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001003a:	89 1d a8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4a8,ebx
c0010040:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010044:	c1 eb 0c             	shr    ebx,0xc
c0010047:	c1 e8 0c             	shr    eax,0xc
c001004a:	39 d8                	cmp    eax,ebx
c001004c:	73 13                	jae    c0010061 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001004e:	6a 00                	push   0x0
c0010050:	8d 70 01             	lea    esi,[eax+0x1]
c0010053:	50                   	push   eax
c0010054:	e8 bc fd ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c0010059:	5a                   	pop    edx
c001005a:	89 f0                	mov    eax,esi
c001005c:	59                   	pop    ecx
c001005d:	39 f3                	cmp    ebx,esi
c001005f:	75 ed                	jne    c001004e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010061:	5b                   	pop    ebx
c0010062:	5e                   	pop    esi
c0010063:	c3                   	ret    

c0010064 <Phys::physicalMemorySetup(unsigned int)>:
c0010064:	55                   	push   ebp
c0010065:	57                   	push   edi
c0010066:	56                   	push   esi
c0010067:	53                   	push   ebx
c0010068:	31 db                	xor    ebx,ebx
c001006a:	83 ec 40             	sub    esp,0x40
c001006d:	6a 30                	push   0x30
c001006f:	6a 00                	push   0x0
c0010071:	68 c0 e4 02 c0       	push   0xc002e4c0
c0010076:	e8 05 07 ff ff       	call   c0000780 <memset>
c001007b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001007f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010084:	05 00 10 00 00       	add    eax,0x1000
c0010089:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001008d:	83 c4 10             	add    esp,0x10
c0010090:	83 ec 08             	sub    esp,0x8
c0010093:	6a 01                	push   0x1
c0010095:	53                   	push   ebx
c0010096:	43                   	inc    ebx
c0010097:	e8 79 fd ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c001009c:	83 c4 10             	add    esp,0x10
c001009f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100a5:	75 e9                	jne    c0010090 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100a7:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100ae:	66 85 c0             	test   ax,ax
c00100b1:	0f 84 8e 01 00 00    	je     c0010245 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100bb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100c7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100d0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100d8:	eb 15                	jmp    c00100ef <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100da:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100de:	83 c3 18             	add    ebx,0x18
c00100e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100e5:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100e9:	0f 84 66 01 00 00    	je     c0010255 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100f5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010100:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010102:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010105:	01 f0                	add    eax,esi
c0010107:	55                   	push   ebp
c0010108:	11 fa                	adc    edx,edi
c001010a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001010e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010112:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010116:	56                   	push   esi
c0010117:	68 48 a3 02 c0       	push   0xc002a348
c001011c:	e8 be 2d 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0010121:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010125:	83 c4 10             	add    esp,0x10
c0010128:	09 f8                	or     eax,edi
c001012a:	0f 85 25 01 00 00    	jne    c0010255 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010130:	4d                   	dec    ebp
c0010131:	75 a7                	jne    c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010133:	ba 00 00 08 00       	mov    edx,0x80000
c0010138:	89 c1                	mov    ecx,eax
c001013a:	39 f2                	cmp    edx,esi
c001013c:	19 f9                	sbb    ecx,edi
c001013e:	0f 82 a7 00 00 00    	jb     c00101eb <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010144:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010148:	89 c1                	mov    ecx,eax
c001014a:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001014e:	0f 83 97 00 00 00    	jae    c00101eb <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010154:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010159:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001015d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010161:	39 fa                	cmp    edx,edi
c0010163:	19 e8                	sbb    eax,ebp
c0010165:	0f 82 14 01 00 00    	jb     c001027f <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001016b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001016f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010173:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010179:	ba ff 1f 00 00       	mov    edx,0x1fff
c001017e:	83 d5 ff             	adc    ebp,0xffffffff
c0010181:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010185:	31 c0                	xor    eax,eax
c0010187:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001018b:	39 fa                	cmp    edx,edi
c001018d:	89 c1                	mov    ecx,eax
c001018f:	19 e9                	sbb    ecx,ebp
c0010191:	0f 83 43 ff ff ff    	jae    c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010197:	be 00 00 08 00       	mov    esi,0x80000
c001019c:	50                   	push   eax
c001019d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101a1:	57                   	push   edi
c00101a2:	56                   	push   esi
c00101a3:	68 6c a3 02 c0       	push   0xc002a36c
c00101a8:	e8 32 2d 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00101ad:	5a                   	pop    edx
c00101ae:	59                   	pop    ecx
c00101af:	57                   	push   edi
c00101b0:	56                   	push   esi
c00101b1:	e8 76 fe ff ff       	call   c001002c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101b6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101be:	83 c4 0c             	add    esp,0xc
c00101c1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101c5:	03 05 b4 e4 02 c0    	add    eax,DWORD PTR ds:0xc002e4b4
c00101cb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101d2:	a3 b4 e4 02 c0       	mov    ds:0xc002e4b4,eax
c00101d7:	52                   	push   edx
c00101d8:	50                   	push   eax
c00101d9:	68 29 a3 02 c0       	push   0xc002a329
c00101de:	e8 fc 2c 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00101e3:	83 c4 10             	add    esp,0x10
c00101e6:	e9 ef fe ff ff       	jmp    c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101eb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101f7:	39 ea                	cmp    edx,ebp
c00101f9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101fd:	0f 82 d7 fe ff ff    	jb     c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010203:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010208:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001020c:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010210:	0f 83 c4 fe ff ff    	jae    c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010216:	39 ee                	cmp    esi,ebp
c0010218:	89 f8                	mov    eax,edi
c001021a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001021e:	0f 83 78 ff ff ff    	jae    c001019c <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010224:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010228:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001022c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010234:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010238:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001023c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010240:	e9 57 ff ff ff       	jmp    c001019c <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010245:	83 ec 0c             	sub    esp,0xc
c0010248:	68 1b a3 02 c0       	push   0xc002a31b
c001024d:	e8 b9 a3 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0010252:	83 c4 10             	add    esp,0x10
c0010255:	bb 40 01 00 00       	mov    ebx,0x140
c001025a:	83 ec 08             	sub    esp,0x8
c001025d:	6a 00                	push   0x0
c001025f:	53                   	push   ebx
c0010260:	43                   	inc    ebx
c0010261:	e8 af fb ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c0010266:	ff 05 b4 e4 02 c0    	inc    DWORD PTR ds:0xc002e4b4
c001026c:	83 c4 10             	add    esp,0x10
c001026f:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010275:	75 e3                	jne    c001025a <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010277:	83 c4 3c             	add    esp,0x3c
c001027a:	5b                   	pop    ebx
c001027b:	5e                   	pop    esi
c001027c:	5f                   	pop    edi
c001027d:	5d                   	pop    ebp
c001027e:	c3                   	ret    
c001027f:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010287:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001028f:	e9 d7 fe ff ff       	jmp    c001016b <Phys::physicalMemorySetup(unsigned int)+0x107>

c0010294 <Pipe::isAtty()>:
c0010294:	31 c0                	xor    eax,eax
c0010296:	c3                   	ret    
c0010297:	90                   	nop

c0010298 <Pipe::~Pipe()>:
c0010298:	83 ec 0c             	sub    esp,0xc
c001029b:	ba d8 a3 02 c0       	mov    edx,0xc002a3d8
c00102a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a4:	89 10                	mov    DWORD PTR [eax],edx
c00102a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102aa:	83 ec 0c             	sub    esp,0xc
c00102ad:	50                   	push   eax
c00102ae:	e8 37 16 00 00       	call   c00118ea <UnixFile::~UnixFile()>
c00102b3:	83 c4 10             	add    esp,0x10
c00102b6:	90                   	nop
c00102b7:	83 c4 0c             	add    esp,0xc
c00102ba:	c3                   	ret    
c00102bb:	90                   	nop

c00102bc <Pipe::~Pipe()>:
c00102bc:	83 ec 0c             	sub    esp,0xc
c00102bf:	83 ec 0c             	sub    esp,0xc
c00102c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c6:	e8 cd ff ff ff       	call   c0010298 <Pipe::~Pipe()>
c00102cb:	83 c4 10             	add    esp,0x10
c00102ce:	83 ec 08             	sub    esp,0x8
c00102d1:	6a 20                	push   0x20
c00102d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d7:	e8 23 2b 00 00       	call   c0012dff <operator delete(void*, unsigned long)>
c00102dc:	83 c4 10             	add    esp,0x10
c00102df:	83 c4 0c             	add    esp,0xc
c00102e2:	c3                   	ret    
c00102e3:	90                   	nop

c00102e4 <Pipe::read(unsigned long long, void*, int*)>:
c00102e4:	55                   	push   ebp
c00102e5:	57                   	push   edi
c00102e6:	56                   	push   esi
c00102e7:	53                   	push   ebx
c00102e8:	83 ec 1c             	sub    esp,0x1c
c00102eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102ef:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102f7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102fa:	89 c8                	mov    eax,ecx
c00102fc:	99                   	cdq    
c00102fd:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010301:	74 19                	je     c001031c <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010303:	39 f9                	cmp    ecx,edi
c0010305:	89 d1                	mov    ecx,edx
c0010307:	19 f1                	sbb    ecx,esi
c0010309:	73 11                	jae    c001031c <Pipe::read(unsigned long long, void*, int*)+0x38>
c001030b:	e8 d6 da 00 00       	call   c001dde6 <lockScheduler()>
c0010310:	e8 47 de 00 00       	call   c001e15c <schedule()>
c0010315:	e8 ce da 00 00       	call   c001dde8 <unlockScheduler()>
c001031a:	eb db                	jmp    c00102f7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001031c:	39 f8                	cmp    eax,edi
c001031e:	89 d1                	mov    ecx,edx
c0010320:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010324:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010328:	19 f1                	sbb    ecx,esi
c001032a:	73 08                	jae    c0010334 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001032c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010330:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010334:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010337:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001033a:	29 c6                	sub    esi,eax
c001033c:	89 f1                	mov    ecx,esi
c001033e:	c1 f9 1f             	sar    ecx,0x1f
c0010341:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010345:	89 ca                	mov    edx,ecx
c0010347:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001034b:	19 d1                	sbb    ecx,edx
c001034d:	73 04                	jae    c0010353 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001034f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010353:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010357:	89 fd                	mov    ebp,edi
c0010359:	29 f5                	sub    ebp,esi
c001035b:	85 f6                	test   esi,esi
c001035d:	74 12                	je     c0010371 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001035f:	52                   	push   edx
c0010360:	56                   	push   esi
c0010361:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010364:	50                   	push   eax
c0010365:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010369:	e8 de 03 ff ff       	call   c000074c <memcpy>
c001036e:	83 c4 10             	add    esp,0x10
c0010371:	85 ed                	test   ebp,ebp
c0010373:	74 12                	je     c0010387 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010375:	50                   	push   eax
c0010376:	55                   	push   ebp
c0010377:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001037a:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c001037e:	56                   	push   esi
c001037f:	e8 c8 03 ff ff       	call   c000074c <memcpy>
c0010384:	83 c4 10             	add    esp,0x10
c0010387:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001038a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001038d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010390:	99                   	cdq    
c0010391:	89 f7                	mov    edi,esi
c0010393:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010397:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001039b:	c1 ff 1f             	sar    edi,0x1f
c001039e:	57                   	push   edi
c001039f:	56                   	push   esi
c00103a0:	52                   	push   edx
c00103a1:	50                   	push   eax
c00103a2:	e8 5d 67 01 00       	call   c0026b04 <__umoddi3>
c00103a7:	83 c4 10             	add    esp,0x10
c00103aa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103ad:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103b2:	75 10                	jne    c00103c4 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103b4:	83 ec 0c             	sub    esp,0xc
c00103b7:	68 95 a3 02 c0       	push   0xc002a395
c00103bc:	e8 4a a2 00 00       	call   c001a60b <Krnl::panic(char const*)>
c00103c1:	83 c4 10             	add    esp,0x10
c00103c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103cc:	89 10                	mov    DWORD PTR [eax],edx
c00103ce:	83 c4 1c             	add    esp,0x1c
c00103d1:	31 c0                	xor    eax,eax
c00103d3:	5b                   	pop    ebx
c00103d4:	5e                   	pop    esi
c00103d5:	5f                   	pop    edi
c00103d6:	5d                   	pop    ebp
c00103d7:	c3                   	ret    

c00103d8 <Pipe::write(unsigned long long, void*, int*)>:
c00103d8:	55                   	push   ebp
c00103d9:	57                   	push   edi
c00103da:	56                   	push   esi
c00103db:	53                   	push   ebx
c00103dc:	83 ec 1c             	sub    esp,0x1c
c00103df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103e3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00103ee:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103f1:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103f8:	89 de                	mov    esi,ebx
c00103fa:	89 df                	mov    edi,ebx
c00103fc:	c1 ff 1f             	sar    edi,0x1f
c00103ff:	01 c6                	add    esi,eax
c0010401:	89 c8                	mov    eax,ecx
c0010403:	11 d7                	adc    edi,edx
c0010405:	99                   	cdq    
c0010406:	39 f1                	cmp    ecx,esi
c0010408:	89 d0                	mov    eax,edx
c001040a:	19 f8                	sbb    eax,edi
c001040c:	b8 01 00 00 00       	mov    eax,0x1
c0010411:	0f 82 80 00 00 00    	jb     c0010497 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010417:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001041a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001041d:	01 d8                	add    eax,ebx
c001041f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010423:	99                   	cdq    
c0010424:	f7 f9                	idiv   ecx
c0010426:	29 d1                	sub    ecx,edx
c0010428:	89 d7                	mov    edi,edx
c001042a:	89 c8                	mov    eax,ecx
c001042c:	99                   	cdq    
c001042d:	39 ce                	cmp    esi,ecx
c001042f:	19 d3                	sbb    ebx,edx
c0010431:	bb 00 00 00 00       	mov    ebx,0x0
c0010436:	72 04                	jb     c001043c <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010438:	89 f3                	mov    ebx,esi
c001043a:	29 cb                	sub    ebx,ecx
c001043c:	89 f1                	mov    ecx,esi
c001043e:	29 d9                	sub    ecx,ebx
c0010440:	74 1a                	je     c001045c <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010442:	52                   	push   edx
c0010443:	51                   	push   ecx
c0010444:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010448:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001044c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001044f:	57                   	push   edi
c0010450:	e8 f7 02 ff ff       	call   c000074c <memcpy>
c0010455:	83 c4 10             	add    esp,0x10
c0010458:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001045c:	85 db                	test   ebx,ebx
c001045e:	74 12                	je     c0010472 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010460:	50                   	push   eax
c0010461:	53                   	push   ebx
c0010462:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010466:	51                   	push   ecx
c0010467:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001046a:	e8 dd 02 ff ff       	call   c000074c <memcpy>
c001046f:	83 c4 10             	add    esp,0x10
c0010472:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010475:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001047a:	75 10                	jne    c001048c <Pipe::write(unsigned long long, void*, int*)+0xb4>
c001047c:	83 ec 0c             	sub    esp,0xc
c001047f:	68 b1 a3 02 c0       	push   0xc002a3b1
c0010484:	e8 82 a1 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0010489:	83 c4 10             	add    esp,0x10
c001048c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010490:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010493:	89 38                	mov    DWORD PTR [eax],edi
c0010495:	31 c0                	xor    eax,eax
c0010497:	83 c4 1c             	add    esp,0x1c
c001049a:	5b                   	pop    ebx
c001049b:	5e                   	pop    esi
c001049c:	5f                   	pop    edi
c001049d:	5d                   	pop    ebp
c001049e:	c3                   	ret    
c001049f:	90                   	nop

c00104a0 <Pipe::Pipe(int)>:
c00104a0:	83 ec 0c             	sub    esp,0xc
c00104a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a7:	83 ec 08             	sub    esp,0x8
c00104aa:	6a 00                	push   0x0
c00104ac:	50                   	push   eax
c00104ad:	e8 56 12 00 00       	call   c0011708 <UnixFile::UnixFile(int)>
c00104b2:	83 c4 10             	add    esp,0x10
c00104b5:	ba d8 a3 02 c0       	mov    edx,0xc002a3d8
c00104ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104be:	89 10                	mov    DWORD PTR [eax],edx
c00104c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cf:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104da:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104e5:	83 ec 0c             	sub    esp,0xc
c00104e8:	50                   	push   eax
c00104e9:	e8 5d f3 ff ff       	call   c000f84b <malloc>
c00104ee:	83 c4 10             	add    esp,0x10
c00104f1:	89 c2                	mov    edx,eax
c00104f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fe:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010502:	90                   	nop
c0010503:	83 c4 0c             	add    esp,0xc
c0010506:	c3                   	ret    
c0010507:	90                   	nop

c0010508 <VgaText::isAtty()>:
c0010508:	b0 01                	mov    al,0x1
c001050a:	c3                   	ret    
c001050b:	90                   	nop

c001050c <VgaText::~VgaText()>:
c001050c:	83 ec 0c             	sub    esp,0xc
c001050f:	ba 94 a4 02 c0       	mov    edx,0xc002a494
c0010514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010518:	89 10                	mov    DWORD PTR [eax],edx
c001051a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051e:	83 ec 0c             	sub    esp,0xc
c0010521:	50                   	push   eax
c0010522:	e8 c3 13 00 00       	call   c00118ea <UnixFile::~UnixFile()>
c0010527:	83 c4 10             	add    esp,0x10
c001052a:	90                   	nop
c001052b:	83 c4 0c             	add    esp,0xc
c001052e:	c3                   	ret    
c001052f:	90                   	nop

c0010530 <VgaText::~VgaText()>:
c0010530:	83 ec 0c             	sub    esp,0xc
c0010533:	83 ec 0c             	sub    esp,0xc
c0010536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053a:	e8 cd ff ff ff       	call   c001050c <VgaText::~VgaText()>
c001053f:	83 c4 10             	add    esp,0x10
c0010542:	83 ec 08             	sub    esp,0x8
c0010545:	68 60 12 00 00       	push   0x1260
c001054a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001054e:	e8 ac 28 00 00       	call   c0012dff <operator delete(void*, unsigned long)>
c0010553:	83 c4 10             	add    esp,0x10
c0010556:	83 c4 0c             	add    esp,0xc
c0010559:	c3                   	ret    

c001055a <VgaText::read(unsigned long long, void*, int*)>:
c001055a:	83 ec 10             	sub    esp,0x10
c001055d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010561:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010569:	e8 8e 5d 00 00       	call   c00162fc <readKeyboard(VgaText*, char*, unsigned long)>
c001056e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010572:	89 02                	mov    DWORD PTR [edx],eax
c0010574:	31 c0                	xor    eax,eax
c0010576:	83 c4 1c             	add    esp,0x1c
c0010579:	c3                   	ret    

c001057a <setTerminalScrollLock(bool)>:
c001057a:	c3                   	ret    

c001057b <addToTerminalCycle(VgaText*)>:
c001057b:	8b 15 40 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e540
c0010581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010585:	85 d2                	test   edx,edx
c0010587:	75 0c                	jne    c0010595 <addToTerminalCycle(VgaText*)+0x1a>
c0010589:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c001058f:	a3 40 e5 02 c0       	mov    ds:0xc002e540,eax
c0010594:	c3                   	ret    
c0010595:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001059b:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105a1:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105a7:	c3                   	ret    

c00105a8 <installVgaTextImplementation()>:
c00105a8:	83 ec 10             	sub    esp,0x10
c00105ab:	6a 20                	push   0x20
c00105ad:	6a 00                	push   0x0
c00105af:	68 20 e5 02 c0       	push   0xc002e520
c00105b4:	e8 c7 01 ff ff       	call   c0000780 <memset>
c00105b9:	83 c4 1c             	add    esp,0x1c
c00105bc:	c3                   	ret    

c00105bd <scrollTerminalScrollLock(int)>:
c00105bd:	c3                   	ret    

c00105be <VgaText::load()>:
c00105be:	53                   	push   ebx
c00105bf:	31 c0                	xor    eax,eax
c00105c1:	83 ec 58             	sub    esp,0x58
c00105c4:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105c8:	89 e2                	mov    edx,esp
c00105ca:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105ce:	40                   	inc    eax
c00105cf:	83 f8 50             	cmp    eax,0x50
c00105d2:	75 f6                	jne    c00105ca <VgaText::load()+0xc>
c00105d4:	31 c0                	xor    eax,eax
c00105d6:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105dd:	84 c9                	test   cl,cl
c00105df:	74 06                	je     c00105e7 <VgaText::load()+0x29>
c00105e1:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105e4:	40                   	inc    eax
c00105e5:	eb ef                	jmp    c00105d6 <VgaText::load()+0x18>
c00105e7:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105ed:	85 c0                	test   eax,eax
c00105ef:	74 09                	je     c00105fa <VgaText::load()+0x3c>
c00105f1:	51                   	push   ecx
c00105f2:	51                   	push   ecx
c00105f3:	52                   	push   edx
c00105f4:	53                   	push   ebx
c00105f5:	ff d0                	call   eax
c00105f7:	83 c4 10             	add    esp,0x10
c00105fa:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010600:	85 c0                	test   eax,eax
c0010602:	74 09                	je     c001060d <VgaText::load()+0x4f>
c0010604:	83 ec 0c             	sub    esp,0xc
c0010607:	53                   	push   ebx
c0010608:	ff d0                	call   eax
c001060a:	83 c4 10             	add    esp,0x10
c001060d:	83 c4 58             	add    esp,0x58
c0010610:	5b                   	pop    ebx
c0010611:	c3                   	ret    

c0010612 <VgaText::updateCursor()>:
c0010612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010616:	39 05 44 e5 02 c0    	cmp    DWORD PTR ds:0xc002e544,eax
c001061c:	75 0c                	jne    c001062a <VgaText::updateCursor()+0x18>
c001061e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010624:	85 c0                	test   eax,eax
c0010626:	74 02                	je     c001062a <VgaText::updateCursor()+0x18>
c0010628:	ff e0                	jmp    eax
c001062a:	c3                   	ret    
c001062b:	90                   	nop

c001062c <VgaText::showCursor(bool)>:
c001062c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010630:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010634:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001063a:	c3                   	ret    
c001063b:	90                   	nop

c001063c <VgaText::disableBlink(bool)>:
c001063c:	56                   	push   esi
c001063d:	53                   	push   ebx
c001063e:	51                   	push   ecx
c001063f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010647:	39 1d 44 e5 02 c0    	cmp    DWORD PTR ds:0xc002e544,ebx
c001064d:	75 18                	jne    c0010667 <VgaText::disableBlink(bool)+0x2b>
c001064f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010655:	85 c0                	test   eax,eax
c0010657:	74 0e                	je     c0010667 <VgaText::disableBlink(bool)+0x2b>
c0010659:	89 f1                	mov    ecx,esi
c001065b:	52                   	push   edx
c001065c:	52                   	push   edx
c001065d:	0f b6 d1             	movzx  edx,cl
c0010660:	52                   	push   edx
c0010661:	53                   	push   ebx
c0010662:	ff d0                	call   eax
c0010664:	83 c4 10             	add    esp,0x10
c0010667:	89 f0                	mov    eax,esi
c0010669:	83 f0 01             	xor    eax,0x1
c001066c:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010672:	58                   	pop    eax
c0010673:	5b                   	pop    ebx
c0010674:	5e                   	pop    esi
c0010675:	c3                   	ret    

c0010676 <VgaText::doANSI_SGR(int)>:
c0010676:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001067a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001067e:	85 d2                	test   edx,edx
c0010680:	75 14                	jne    c0010696 <VgaText::doANSI_SGR(int)+0x20>
c0010682:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010688:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001068e:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010694:	eb 65                	jmp    c00106fb <VgaText::doANSI_SGR(int)+0x85>
c0010696:	83 fa 07             	cmp    edx,0x7
c0010699:	75 14                	jne    c00106af <VgaText::doANSI_SGR(int)+0x39>
c001069b:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106a1:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106a7:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106ad:	eb 4c                	jmp    c00106fb <VgaText::doANSI_SGR(int)+0x85>
c00106af:	83 fa 1b             	cmp    edx,0x1b
c00106b2:	74 ce                	je     c0010682 <VgaText::doANSI_SGR(int)+0xc>
c00106b4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106b7:	83 f9 07             	cmp    ecx,0x7
c00106ba:	77 09                	ja     c00106c5 <VgaText::doANSI_SGR(int)+0x4f>
c00106bc:	8b 14 8d c0 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2c40]
c00106c3:	eb 20                	jmp    c00106e5 <VgaText::doANSI_SGR(int)+0x6f>
c00106c5:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106c8:	83 f9 07             	cmp    ecx,0x7
c00106cb:	77 09                	ja     c00106d6 <VgaText::doANSI_SGR(int)+0x60>
c00106cd:	8b 14 8d c0 d3 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2c40]
c00106d4:	eb 25                	jmp    c00106fb <VgaText::doANSI_SGR(int)+0x85>
c00106d6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106d9:	83 f9 07             	cmp    ecx,0x7
c00106dc:	77 0e                	ja     c00106ec <VgaText::doANSI_SGR(int)+0x76>
c00106de:	8b 14 95 78 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d88]
c00106e5:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106eb:	c3                   	ret    
c00106ec:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106ef:	83 f9 07             	cmp    ecx,0x7
c00106f2:	77 0d                	ja     c0010701 <VgaText::doANSI_SGR(int)+0x8b>
c00106f4:	8b 14 95 50 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2db0]
c00106fb:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010701:	c3                   	ret    

c0010702 <VgaText::setDefaultBgColour(VgaColour)>:
c0010702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010706:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001070a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010710:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010716:	c3                   	ret    
c0010717:	90                   	nop

c0010718 <VgaText::setDefaultFgColour(VgaColour)>:
c0010718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001071c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010720:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010726:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001072c:	c3                   	ret    
c001072d:	90                   	nop

c001072e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001072e:	53                   	push   ebx
c001072f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010733:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010737:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001073b:	51                   	push   ecx
c001073c:	e8 c1 ff ff ff       	call   c0010702 <VgaText::setDefaultBgColour(VgaColour)>
c0010741:	58                   	pop    eax
c0010742:	5a                   	pop    edx
c0010743:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010747:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001074b:	5b                   	pop    ebx
c001074c:	eb ca                	jmp    c0010718 <VgaText::setDefaultFgColour(VgaColour)>

c001074e <VgaText::combineColours(unsigned char, unsigned char)>:
c001074e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010752:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010757:	83 e0 0f             	and    eax,0xf
c001075a:	c1 e2 04             	shl    edx,0x4
c001075d:	09 d0                	or     eax,edx
c001075f:	c3                   	ret    

c0010760 <VgaText::scrollScreen()>:
c0010760:	57                   	push   edi
c0010761:	56                   	push   esi
c0010762:	be 01 00 00 00       	mov    esi,0x1
c0010767:	53                   	push   ebx
c0010768:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001076c:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010772:	31 ff                	xor    edi,edi
c0010774:	01 d9                	add    ecx,ebx
c0010776:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010779:	83 fe 17             	cmp    esi,0x17
c001077c:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010782:	75 28                	jne    c00107ac <VgaText::scrollScreen()+0x4c>
c0010784:	f7 c7 01 00 00 00    	test   edi,0x1
c001078a:	74 1c                	je     c00107a8 <VgaText::scrollScreen()+0x48>
c001078c:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010793:	50                   	push   eax
c0010794:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001079b:	50                   	push   eax
c001079c:	e8 ad ff ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c00107a1:	5a                   	pop    edx
c00107a2:	5a                   	pop    edx
c00107a3:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107a6:	eb 04                	jmp    c00107ac <VgaText::scrollScreen()+0x4c>
c00107a8:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107ac:	47                   	inc    edi
c00107ad:	41                   	inc    ecx
c00107ae:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107b4:	75 c0                	jne    c0010776 <VgaText::scrollScreen()+0x16>
c00107b6:	46                   	inc    esi
c00107b7:	83 fe 18             	cmp    esi,0x18
c00107ba:	75 b0                	jne    c001076c <VgaText::scrollScreen()+0xc>
c00107bc:	39 1d 44 e5 02 c0    	cmp    DWORD PTR ds:0xc002e544,ebx
c00107c2:	75 24                	jne    c00107e8 <VgaText::scrollScreen()+0x88>
c00107c4:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107cb:	74 08                	je     c00107d5 <VgaText::scrollScreen()+0x75>
c00107cd:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107d3:	eb 13                	jmp    c00107e8 <VgaText::scrollScreen()+0x88>
c00107d5:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107db:	85 c0                	test   eax,eax
c00107dd:	74 09                	je     c00107e8 <VgaText::scrollScreen()+0x88>
c00107df:	83 ec 0c             	sub    esp,0xc
c00107e2:	53                   	push   ebx
c00107e3:	ff d0                	call   eax
c00107e5:	83 c4 10             	add    esp,0x10
c00107e8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107ec:	5b                   	pop    ebx
c00107ed:	5e                   	pop    esi
c00107ee:	5f                   	pop    edi
c00107ef:	e9 1e fe ff ff       	jmp    c0010612 <VgaText::updateCursor()>

c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107f9:	c1 e0 08             	shl    eax,0x8
c00107fc:	89 c2                	mov    edx,eax
c00107fe:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010803:	09 d0                	or     eax,edx
c0010805:	c3                   	ret    

c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010806:	53                   	push   ebx
c0010807:	83 ec 08             	sub    esp,0x8
c001080a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001080e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010813:	50                   	push   eax
c0010814:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010819:	50                   	push   eax
c001081a:	e8 2f ff ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c001081f:	5a                   	pop    edx
c0010820:	0f b6 c0             	movzx  eax,al
c0010823:	5b                   	pop    ebx
c0010824:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010829:	50                   	push   eax
c001082a:	53                   	push   ebx
c001082b:	e8 c4 ff ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010830:	5a                   	pop    edx
c0010831:	5a                   	pop    edx
c0010832:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010838:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001083c:	0f b7 d2             	movzx  edx,dx
c001083f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010844:	39 0d 44 e5 02 c0    	cmp    DWORD PTR ds:0xc002e544,ecx
c001084a:	75 14                	jne    c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001084c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010852:	85 c0                	test   eax,eax
c0010854:	74 0a                	je     c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010856:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001085a:	83 c4 08             	add    esp,0x8
c001085d:	5b                   	pop    ebx
c001085e:	ff e0                	jmp    eax
c0010860:	83 c4 08             	add    esp,0x8
c0010863:	5b                   	pop    ebx
c0010864:	c3                   	ret    
c0010865:	90                   	nop

c0010866 <VgaText::getCursorX()>:
c0010866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001086a:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010870:	c3                   	ret    
c0010871:	90                   	nop

c0010872 <VgaText::getCursorY()>:
c0010872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010876:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c001087c:	c3                   	ret    
c001087d:	90                   	nop

c001087e <VgaText::setCursor(int, int)>:
c001087e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010882:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010886:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001088c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010890:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010896:	e9 77 fd ff ff       	jmp    c0010612 <VgaText::updateCursor()>
c001089b:	90                   	nop

c001089c <VgaText::setCursorX(int)>:
c001089c:	83 ec 10             	sub    esp,0x10
c001089f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108a3:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ad:	50                   	push   eax
c00108ae:	e8 cb ff ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c00108b3:	83 c4 1c             	add    esp,0x1c
c00108b6:	c3                   	ret    
c00108b7:	90                   	nop

c00108b8 <VgaText::setCursorY(int)>:
c00108b8:	83 ec 10             	sub    esp,0x10
c00108bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108c3:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108c9:	50                   	push   eax
c00108ca:	e8 af ff ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c00108cf:	83 c4 1c             	add    esp,0x1c
c00108d2:	c3                   	ret    
c00108d3:	90                   	nop

c00108d4 <VgaText::incrementCursor(bool)>:
c00108d4:	56                   	push   esi
c00108d5:	53                   	push   ebx
c00108d6:	51                   	push   ecx
c00108d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108df:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108e5:	40                   	inc    eax
c00108e6:	83 f8 50             	cmp    eax,0x50
c00108e9:	74 08                	je     c00108f3 <VgaText::incrementCursor(bool)+0x1f>
c00108eb:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108f1:	eb 33                	jmp    c0010926 <VgaText::incrementCursor(bool)+0x52>
c00108f3:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108f9:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010903:	8d 50 01             	lea    edx,[eax+0x1]
c0010906:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001090c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010912:	75 12                	jne    c0010926 <VgaText::incrementCursor(bool)+0x52>
c0010914:	83 ec 0c             	sub    esp,0xc
c0010917:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001091d:	53                   	push   ebx
c001091e:	e8 3d fe ff ff       	call   c0010760 <VgaText::scrollScreen()>
c0010923:	83 c4 10             	add    esp,0x10
c0010926:	89 f0                	mov    eax,esi
c0010928:	84 c0                	test   al,al
c001092a:	74 0c                	je     c0010938 <VgaText::incrementCursor(bool)+0x64>
c001092c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010930:	5a                   	pop    edx
c0010931:	5b                   	pop    ebx
c0010932:	5e                   	pop    esi
c0010933:	e9 da fc ff ff       	jmp    c0010612 <VgaText::updateCursor()>
c0010938:	58                   	pop    eax
c0010939:	5b                   	pop    ebx
c001093a:	5e                   	pop    esi
c001093b:	c3                   	ret    

c001093c <VgaText::updateRAMUsageDisplay(int)>:
c001093c:	56                   	push   esi
c001093d:	8b 35 a0 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d3a0
c0010943:	53                   	push   ebx
c0010944:	bb 0a 00 00 00       	mov    ebx,0xa
c0010949:	6a 0f                	push   0xf
c001094b:	6a 00                	push   0x0
c001094d:	e8 fc fd ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c0010952:	5a                   	pop    edx
c0010953:	59                   	pop    ecx
c0010954:	0f b6 c8             	movzx  ecx,al
c0010957:	51                   	push   ecx
c0010958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095c:	99                   	cdq    
c001095d:	f7 fb                	idiv   ebx
c001095f:	89 d3                	mov    ebx,edx
c0010961:	83 c0 30             	add    eax,0x30
c0010964:	83 c3 30             	add    ebx,0x30
c0010967:	0f be c0             	movsx  eax,al
c001096a:	0f b6 db             	movzx  ebx,bl
c001096d:	50                   	push   eax
c001096e:	e8 81 fe ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010973:	5a                   	pop    edx
c0010974:	5a                   	pop    edx
c0010975:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c001097c:	51                   	push   ecx
c001097d:	53                   	push   ebx
c001097e:	e8 71 fe ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010983:	5b                   	pop    ebx
c0010984:	5a                   	pop    edx
c0010985:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c001098c:	51                   	push   ecx
c001098d:	6a 25                	push   0x25
c001098f:	e8 60 fe ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010994:	59                   	pop    ecx
c0010995:	5b                   	pop    ebx
c0010996:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c001099d:	5b                   	pop    ebx
c001099e:	5e                   	pop    esi
c001099f:	c3                   	ret    

c00109a0 <VgaText::updateDiskUsage()>:
c00109a0:	55                   	push   ebp
c00109a1:	bd 10 27 00 00       	mov    ebp,0x2710
c00109a6:	57                   	push   edi
c00109a7:	8b 3d a0 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d3a0
c00109ad:	56                   	push   esi
c00109ae:	53                   	push   ebx
c00109af:	6a 0f                	push   0xf
c00109b1:	6a 00                	push   0x0
c00109b3:	e8 96 fd ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c00109b8:	5a                   	pop    edx
c00109b9:	0f b6 d8             	movzx  ebx,al
c00109bc:	59                   	pop    ecx
c00109bd:	8b 35 c8 27 03 c0    	mov    esi,DWORD PTR ds:0xc00327c8
c00109c3:	53                   	push   ebx
c00109c4:	b9 0a 00 00 00       	mov    ecx,0xa
c00109c9:	89 f0                	mov    eax,esi
c00109cb:	99                   	cdq    
c00109cc:	f7 fd                	idiv   ebp
c00109ce:	99                   	cdq    
c00109cf:	f7 f9                	idiv   ecx
c00109d1:	8d 42 30             	lea    eax,[edx+0x30]
c00109d4:	0f b6 c0             	movzx  eax,al
c00109d7:	50                   	push   eax
c00109d8:	e8 17 fe ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109dd:	5d                   	pop    ebp
c00109de:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109e3:	5a                   	pop    edx
c00109e4:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109e8:	53                   	push   ebx
c00109e9:	89 f0                	mov    eax,esi
c00109eb:	99                   	cdq    
c00109ec:	f7 fd                	idiv   ebp
c00109ee:	99                   	cdq    
c00109ef:	f7 f9                	idiv   ecx
c00109f1:	8d 42 30             	lea    eax,[edx+0x30]
c00109f4:	0f b6 c0             	movzx  eax,al
c00109f7:	50                   	push   eax
c00109f8:	e8 f7 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109fd:	5d                   	pop    ebp
c00109fe:	bd 64 00 00 00       	mov    ebp,0x64
c0010a03:	5a                   	pop    edx
c0010a04:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a0b:	53                   	push   ebx
c0010a0c:	89 f0                	mov    eax,esi
c0010a0e:	99                   	cdq    
c0010a0f:	f7 fd                	idiv   ebp
c0010a11:	99                   	cdq    
c0010a12:	f7 f9                	idiv   ecx
c0010a14:	8d 42 30             	lea    eax,[edx+0x30]
c0010a17:	0f b6 c0             	movzx  eax,al
c0010a1a:	50                   	push   eax
c0010a1b:	e8 d4 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a20:	5d                   	pop    ebp
c0010a21:	5a                   	pop    edx
c0010a22:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a29:	53                   	push   ebx
c0010a2a:	89 f0                	mov    eax,esi
c0010a2c:	99                   	cdq    
c0010a2d:	f7 f9                	idiv   ecx
c0010a2f:	89 d6                	mov    esi,edx
c0010a31:	99                   	cdq    
c0010a32:	f7 f9                	idiv   ecx
c0010a34:	8d 42 30             	lea    eax,[edx+0x30]
c0010a37:	0f b6 c0             	movzx  eax,al
c0010a3a:	50                   	push   eax
c0010a3b:	e8 b4 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a40:	5d                   	pop    ebp
c0010a41:	5a                   	pop    edx
c0010a42:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a49:	53                   	push   ebx
c0010a4a:	8d 46 30             	lea    eax,[esi+0x30]
c0010a4d:	0f b6 f0             	movzx  esi,al
c0010a50:	56                   	push   esi
c0010a51:	e8 9e fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a56:	5e                   	pop    esi
c0010a57:	8b 35 c4 27 03 c0    	mov    esi,DWORD PTR ds:0xc00327c4
c0010a5d:	5d                   	pop    ebp
c0010a5e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a65:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a6a:	53                   	push   ebx
c0010a6b:	89 f0                	mov    eax,esi
c0010a6d:	99                   	cdq    
c0010a6e:	f7 fd                	idiv   ebp
c0010a70:	99                   	cdq    
c0010a71:	f7 f9                	idiv   ecx
c0010a73:	8d 42 30             	lea    eax,[edx+0x30]
c0010a76:	0f b6 c0             	movzx  eax,al
c0010a79:	50                   	push   eax
c0010a7a:	e8 75 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a7f:	5a                   	pop    edx
c0010a80:	5d                   	pop    ebp
c0010a81:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a88:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a8d:	53                   	push   ebx
c0010a8e:	89 f0                	mov    eax,esi
c0010a90:	99                   	cdq    
c0010a91:	f7 fd                	idiv   ebp
c0010a93:	99                   	cdq    
c0010a94:	f7 f9                	idiv   ecx
c0010a96:	8d 42 30             	lea    eax,[edx+0x30]
c0010a99:	0f b6 c0             	movzx  eax,al
c0010a9c:	50                   	push   eax
c0010a9d:	e8 52 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aa2:	5a                   	pop    edx
c0010aa3:	5d                   	pop    ebp
c0010aa4:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aab:	bd 64 00 00 00       	mov    ebp,0x64
c0010ab0:	53                   	push   ebx
c0010ab1:	89 f0                	mov    eax,esi
c0010ab3:	99                   	cdq    
c0010ab4:	f7 fd                	idiv   ebp
c0010ab6:	99                   	cdq    
c0010ab7:	f7 f9                	idiv   ecx
c0010ab9:	83 c2 30             	add    edx,0x30
c0010abc:	0f b6 d2             	movzx  edx,dl
c0010abf:	52                   	push   edx
c0010ac0:	e8 2f fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ac5:	5a                   	pop    edx
c0010ac6:	5d                   	pop    ebp
c0010ac7:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010ace:	53                   	push   ebx
c0010acf:	89 f0                	mov    eax,esi
c0010ad1:	99                   	cdq    
c0010ad2:	f7 f9                	idiv   ecx
c0010ad4:	89 d6                	mov    esi,edx
c0010ad6:	99                   	cdq    
c0010ad7:	f7 f9                	idiv   ecx
c0010ad9:	8d 42 30             	lea    eax,[edx+0x30]
c0010adc:	0f b6 c0             	movzx  eax,al
c0010adf:	50                   	push   eax
c0010ae0:	e8 0f fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ae5:	5a                   	pop    edx
c0010ae6:	59                   	pop    ecx
c0010ae7:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010aee:	53                   	push   ebx
c0010aef:	8d 46 30             	lea    eax,[esi+0x30]
c0010af2:	0f b6 f0             	movzx  esi,al
c0010af5:	56                   	push   esi
c0010af6:	e8 f9 fc ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010afb:	5b                   	pop    ebx
c0010afc:	5e                   	pop    esi
c0010afd:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b04:	5b                   	pop    ebx
c0010b05:	5e                   	pop    esi
c0010b06:	5f                   	pop    edi
c0010b07:	5d                   	pop    ebp
c0010b08:	c3                   	ret    
c0010b09:	90                   	nop

c0010b0a <VgaText::updateTitle()>:
c0010b0a:	53                   	push   ebx
c0010b0b:	31 c0                	xor    eax,eax
c0010b0d:	83 ec 58             	sub    esp,0x58
c0010b10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b14:	89 e1                	mov    ecx,esp
c0010b16:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b1a:	40                   	inc    eax
c0010b1b:	83 f8 50             	cmp    eax,0x50
c0010b1e:	75 f6                	jne    c0010b16 <VgaText::updateTitle()+0xc>
c0010b20:	31 c0                	xor    eax,eax
c0010b22:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b29:	84 db                	test   bl,bl
c0010b2b:	74 06                	je     c0010b33 <VgaText::updateTitle()+0x29>
c0010b2d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b30:	40                   	inc    eax
c0010b31:	eb ef                	jmp    c0010b22 <VgaText::updateTitle()+0x18>
c0010b33:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b39:	85 c0                	test   eax,eax
c0010b3b:	74 09                	je     c0010b46 <VgaText::updateTitle()+0x3c>
c0010b3d:	53                   	push   ebx
c0010b3e:	53                   	push   ebx
c0010b3f:	51                   	push   ecx
c0010b40:	52                   	push   edx
c0010b41:	ff d0                	call   eax
c0010b43:	83 c4 10             	add    esp,0x10
c0010b46:	e8 55 fe ff ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c0010b4b:	83 c4 58             	add    esp,0x58
c0010b4e:	5b                   	pop    ebx
c0010b4f:	c3                   	ret    

c0010b50 <VgaText::setTitleTextColour(VgaColour)>:
c0010b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b58:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b5e:	eb aa                	jmp    c0010b0a <VgaText::updateTitle()>

c0010b60 <VgaText::setTitleColour(VgaColour)>:
c0010b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b68:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b6e:	eb 9a                	jmp    c0010b0a <VgaText::updateTitle()>

c0010b70 <VgaText::setTitle(char*)>:
c0010b70:	53                   	push   ebx
c0010b71:	83 ec 10             	sub    esp,0x10
c0010b74:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b7c:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b82:	50                   	push   eax
c0010b83:	e8 b4 fc fe ff       	call   c000083c <strcpy>
c0010b88:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b8c:	83 c4 18             	add    esp,0x18
c0010b8f:	5b                   	pop    ebx
c0010b90:	e9 75 ff ff ff       	jmp    c0010b0a <VgaText::updateTitle()>
c0010b95:	90                   	nop

c0010b96 <VgaText::decrementCursor(bool)>:
c0010b96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b9e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010ba4:	85 c0                	test   eax,eax
c0010ba6:	74 07                	je     c0010baf <VgaText::decrementCursor(bool)+0x19>
c0010ba8:	48                   	dec    eax
c0010ba9:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010baf:	84 c9                	test   cl,cl
c0010bb1:	74 09                	je     c0010bbc <VgaText::decrementCursor(bool)+0x26>
c0010bb3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010bb7:	e9 56 fa ff ff       	jmp    c0010612 <VgaText::updateCursor()>
c0010bbc:	c3                   	ret    
c0010bbd:	90                   	nop

c0010bbe <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bbe:	53                   	push   ebx
c0010bbf:	83 ec 08             	sub    esp,0x8
c0010bc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bd2:	3c 07                	cmp    al,0x7
c0010bd4:	75 2a                	jne    c0010c00 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bd6:	a1 f8 e5 02 c0       	mov    eax,ds:0xc002e5f8
c0010bdb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010be3:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010beb:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bf7:	83 c4 08             	add    esp,0x8
c0010bfa:	5b                   	pop    ebx
c0010bfb:	e9 de 30 00 00       	jmp    c0013cde <Buzzer::beep(int, int, bool)>
c0010c00:	3c 0d                	cmp    al,0xd
c0010c02:	75 0c                	jne    c0010c10 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c04:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c0e:	eb 3b                	jmp    c0010c4b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c10:	3c 0a                	cmp    al,0xa
c0010c12:	75 40                	jne    c0010c54 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c14:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c1a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c24:	8d 50 01             	lea    edx,[eax+0x1]
c0010c27:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c2d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c33:	75 12                	jne    c0010c47 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c35:	83 ec 0c             	sub    esp,0xc
c0010c38:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c3e:	53                   	push   ebx
c0010c3f:	e8 1c fb ff ff       	call   c0010760 <VgaText::scrollScreen()>
c0010c44:	83 c4 10             	add    esp,0x10
c0010c47:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c4b:	83 c4 08             	add    esp,0x8
c0010c4e:	5b                   	pop    ebx
c0010c4f:	e9 be f9 ff ff       	jmp    c0010612 <VgaText::updateCursor()>
c0010c54:	3c 08                	cmp    al,0x8
c0010c56:	75 31                	jne    c0010c89 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c58:	50                   	push   eax
c0010c59:	50                   	push   eax
c0010c5a:	6a 01                	push   0x1
c0010c5c:	53                   	push   ebx
c0010c5d:	e8 34 ff ff ff       	call   c0010b96 <VgaText::decrementCursor(bool)>
c0010c62:	5a                   	pop    edx
c0010c63:	59                   	pop    ecx
c0010c64:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c6a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c70:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c76:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c7c:	6a 20                	push   0x20
c0010c7e:	53                   	push   ebx
c0010c7f:	e8 82 fb ff ff       	call   c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c84:	83 c4 28             	add    esp,0x28
c0010c87:	5b                   	pop    ebx
c0010c88:	c3                   	ret    
c0010c89:	83 ec 08             	sub    esp,0x8
c0010c8c:	0f be c0             	movsx  eax,al
c0010c8f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c95:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c9b:	51                   	push   ecx
c0010c9c:	52                   	push   edx
c0010c9d:	50                   	push   eax
c0010c9e:	53                   	push   ebx
c0010c9f:	e8 62 fb ff ff       	call   c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ca4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010ca8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cb0:	83 c4 28             	add    esp,0x28
c0010cb3:	5b                   	pop    ebx
c0010cb4:	e9 1b fc ff ff       	jmp    c00108d4 <VgaText::incrementCursor(bool)>
c0010cb9:	90                   	nop

c0010cba <VgaText::isShowingCursor()>:
c0010cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cbe:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cc4:	c3                   	ret    
c0010cc5:	90                   	nop

c0010cc6 <VgaText::isBlinkDisabled()>:
c0010cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cca:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010cd0:	83 f0 01             	xor    eax,0x1
c0010cd3:	c3                   	ret    

c0010cd4 <VgaText::setCursorHeight(int)>:
c0010cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cdc:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010ce2:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010ce9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ced:	e9 3a f9 ff ff       	jmp    c001062c <VgaText::showCursor(bool)>

c0010cf2 <VgaText::getCursorHeight()>:
c0010cf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf6:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cfc:	c3                   	ret    

c0010cfd <setActiveTerminal(VgaText*)>:
c0010cfd:	53                   	push   ebx
c0010cfe:	83 ec 08             	sub    esp,0x8
c0010d01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d05:	85 db                	test   ebx,ebx
c0010d07:	75 11                	jne    c0010d1a <setActiveTerminal(VgaText*)+0x1d>
c0010d09:	c7 44 24 10 ec a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a3ec
c0010d11:	83 c4 08             	add    esp,0x8
c0010d14:	5b                   	pop    ebx
c0010d15:	e9 f1 98 00 00       	jmp    c001a60b <Krnl::panic(char const*)>
c0010d1a:	50                   	push   eax
c0010d1b:	50                   	push   eax
c0010d1c:	53                   	push   ebx
c0010d1d:	68 fa a3 02 c0       	push   0xc002a3fa
c0010d22:	e8 b8 21 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0010d27:	a1 44 e5 02 c0       	mov    eax,ds:0xc002e544
c0010d2c:	83 c4 10             	add    esp,0x10
c0010d2f:	85 c0                	test   eax,eax
c0010d31:	74 0c                	je     c0010d3f <setActiveTerminal(VgaText*)+0x42>
c0010d33:	83 ec 0c             	sub    esp,0xc
c0010d36:	50                   	push   eax
c0010d37:	e8 d6 f8 ff ff       	call   c0010612 <VgaText::updateCursor()>
c0010d3c:	83 c4 10             	add    esp,0x10
c0010d3f:	89 1d 44 e5 02 c0    	mov    DWORD PTR ds:0xc002e544,ebx
c0010d45:	51                   	push   ecx
c0010d46:	51                   	push   ecx
c0010d47:	53                   	push   ebx
c0010d48:	68 12 a4 02 c0       	push   0xc002a412
c0010d4d:	e8 8d 21 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0010d52:	83 c4 0c             	add    esp,0xc
c0010d55:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d5b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d61:	53                   	push   ebx
c0010d62:	e8 17 fb ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c0010d67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d6a:	e8 57 ff ff ff       	call   c0010cc6 <VgaText::isBlinkDisabled()>
c0010d6f:	5a                   	pop    edx
c0010d70:	0f b6 c0             	movzx  eax,al
c0010d73:	59                   	pop    ecx
c0010d74:	50                   	push   eax
c0010d75:	53                   	push   ebx
c0010d76:	e8 c1 f8 ff ff       	call   c001063c <VgaText::disableBlink(bool)>
c0010d7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d7e:	e8 6f ff ff ff       	call   c0010cf2 <VgaText::getCursorHeight()>
c0010d83:	5a                   	pop    edx
c0010d84:	59                   	pop    ecx
c0010d85:	50                   	push   eax
c0010d86:	53                   	push   ebx
c0010d87:	e8 48 ff ff ff       	call   c0010cd4 <VgaText::setCursorHeight(int)>
c0010d8c:	83 c4 10             	add    esp,0x10
c0010d8f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d96:	75 0a                	jne    c0010da2 <setActiveTerminal(VgaText*)+0xa5>
c0010d98:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010da2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010da6:	83 c4 08             	add    esp,0x8
c0010da9:	5b                   	pop    ebx
c0010daa:	e9 0f f8 ff ff       	jmp    c00105be <VgaText::load()>

c0010daf <doTerminalCycle()>:
c0010daf:	83 ec 18             	sub    esp,0x18
c0010db2:	a1 40 e5 02 c0       	mov    eax,ds:0xc002e540
c0010db7:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010dbd:	50                   	push   eax
c0010dbe:	a3 40 e5 02 c0       	mov    ds:0xc002e540,eax
c0010dc3:	e8 35 ff ff ff       	call   c0010cfd <setActiveTerminal(VgaText*)>
c0010dc8:	83 c4 1c             	add    esp,0x1c
c0010dcb:	c3                   	ret    

c0010dcc <VgaText::doUpdate()>:
c0010dcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd0:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010dd6:	85 c0                	test   eax,eax
c0010dd8:	74 02                	je     c0010ddc <VgaText::doUpdate()+0x10>
c0010dda:	ff e0                	jmp    eax
c0010ddc:	c3                   	ret    
c0010ddd:	90                   	nop

c0010dde <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dde:	55                   	push   ebp
c0010ddf:	57                   	push   edi
c0010de0:	56                   	push   esi
c0010de1:	53                   	push   ebx
c0010de2:	83 ec 1c             	sub    esp,0x1c
c0010de5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010de9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dee:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010df5:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010df8:	50                   	push   eax
c0010df9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dfe:	50                   	push   eax
c0010dff:	e8 4a f9 ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c0010e04:	59                   	pop    ecx
c0010e05:	0f b6 c0             	movzx  eax,al
c0010e08:	5b                   	pop    ebx
c0010e09:	31 c9                	xor    ecx,ecx
c0010e0b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e13:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e17:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e21:	0f b7 db             	movzx  ebx,bx
c0010e24:	01 db                	add    ebx,ebx
c0010e26:	01 fb                	add    ebx,edi
c0010e28:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e2b:	84 c0                	test   al,al
c0010e2d:	0f 84 38 01 00 00    	je     c0010f6b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e33:	3c 0d                	cmp    al,0xd
c0010e35:	75 0f                	jne    c0010e46 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e37:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e41:	e9 1f 01 00 00       	jmp    c0010f65 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e46:	3c 0a                	cmp    al,0xa
c0010e48:	75 5b                	jne    c0010ea5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e4a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e50:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e5a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e5d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e63:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e69:	75 12                	jne    c0010e7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e6b:	83 ec 0c             	sub    esp,0xc
c0010e6e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e74:	55                   	push   ebp
c0010e75:	e8 e6 f8 ff ff       	call   c0010760 <VgaText::scrollScreen()>
c0010e7a:	83 c4 10             	add    esp,0x10
c0010e7d:	83 ec 0c             	sub    esp,0xc
c0010e80:	55                   	push   ebp
c0010e81:	e8 8c f7 ff ff       	call   c0010612 <VgaText::updateCursor()>
c0010e86:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e97:	31 c9                	xor    ecx,ecx
c0010e99:	0f b7 db             	movzx  ebx,bx
c0010e9c:	01 db                	add    ebx,ebx
c0010e9e:	01 fb                	add    ebx,edi
c0010ea0:	e9 c0 00 00 00       	jmp    c0010f65 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ea5:	3c 08                	cmp    al,0x8
c0010ea7:	75 4e                	jne    c0010ef7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ea9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ead:	53                   	push   ebx
c0010eae:	53                   	push   ebx
c0010eaf:	6a 01                	push   0x1
c0010eb1:	55                   	push   ebp
c0010eb2:	e8 df fc ff ff       	call   c0010b96 <VgaText::decrementCursor(bool)>
c0010eb7:	58                   	pop    eax
c0010eb8:	5a                   	pop    edx
c0010eb9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010ebf:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ec5:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ecb:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ed1:	6a 20                	push   0x20
c0010ed3:	55                   	push   ebp
c0010ed4:	e8 2d f9 ff ff       	call   c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ed9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ee1:	83 c4 20             	add    esp,0x20
c0010ee4:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eea:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010eee:	0f b7 db             	movzx  ebx,bx
c0010ef1:	01 db                	add    ebx,ebx
c0010ef3:	01 fb                	add    ebx,edi
c0010ef5:	eb 6e                	jmp    c0010f65 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ef7:	51                   	push   ecx
c0010ef8:	51                   	push   ecx
c0010ef9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010efd:	50                   	push   eax
c0010efe:	e8 f1 f8 ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f03:	83 c4 10             	add    esp,0x10
c0010f06:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f09:	39 2d 44 e5 02 c0    	cmp    DWORD PTR ds:0xc002e544,ebp
c0010f0f:	75 2a                	jne    c0010f3b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f11:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f17:	85 c0                	test   eax,eax
c0010f19:	74 20                	je     c0010f3b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f1b:	52                   	push   edx
c0010f1c:	52                   	push   edx
c0010f1d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f23:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f2d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f31:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f34:	51                   	push   ecx
c0010f35:	55                   	push   ebp
c0010f36:	ff d0                	call   eax
c0010f38:	83 c4 20             	add    esp,0x20
c0010f3b:	83 c3 02             	add    ebx,0x2
c0010f3e:	50                   	push   eax
c0010f3f:	50                   	push   eax
c0010f40:	6a 00                	push   0x0
c0010f42:	55                   	push   ebp
c0010f43:	e8 8c f9 ff ff       	call   c00108d4 <VgaText::incrementCursor(bool)>
c0010f48:	83 c4 10             	add    esp,0x10
c0010f4b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f52:	75 0f                	jne    c0010f63 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f54:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f5c:	0f b7 db             	movzx  ebx,bx
c0010f5f:	01 db                	add    ebx,ebx
c0010f61:	01 fb                	add    ebx,edi
c0010f63:	b1 01                	mov    cl,0x1
c0010f65:	46                   	inc    esi
c0010f66:	e9 bd fe ff ff       	jmp    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f6b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f6f:	83 ec 0c             	sub    esp,0xc
c0010f72:	55                   	push   ebp
c0010f73:	e8 9a f6 ff ff       	call   c0010612 <VgaText::updateCursor()>
c0010f78:	83 c4 10             	add    esp,0x10
c0010f7b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f7f:	84 c9                	test   cl,cl
c0010f81:	74 0c                	je     c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f83:	83 ec 0c             	sub    esp,0xc
c0010f86:	55                   	push   ebp
c0010f87:	e8 40 fe ff ff       	call   c0010dcc <VgaText::doUpdate()>
c0010f8c:	83 c4 10             	add    esp,0x10
c0010f8f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f96:	83 c4 1c             	add    esp,0x1c
c0010f99:	5b                   	pop    ebx
c0010f9a:	5e                   	pop    esi
c0010f9b:	5f                   	pop    edi
c0010f9c:	5d                   	pop    ebp
c0010f9d:	c3                   	ret    

c0010f9e <VgaText::clearScreen()>:
c0010f9e:	57                   	push   edi
c0010f9f:	56                   	push   esi
c0010fa0:	31 f6                	xor    esi,esi
c0010fa2:	53                   	push   ebx
c0010fa3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fa7:	52                   	push   edx
c0010fa8:	6a 00                	push   0x0
c0010faa:	6a 00                	push   0x0
c0010fac:	53                   	push   ebx
c0010fad:	e8 cc f8 ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c0010fb2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fb9:	83 c4 10             	add    esp,0x10
c0010fbc:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010fc2:	7e 26                	jle    c0010fea <VgaText::clearScreen()+0x4c>
c0010fc4:	31 ff                	xor    edi,edi
c0010fc6:	50                   	push   eax
c0010fc7:	50                   	push   eax
c0010fc8:	56                   	push   esi
c0010fc9:	57                   	push   edi
c0010fca:	47                   	inc    edi
c0010fcb:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fd1:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fd7:	6a 20                	push   0x20
c0010fd9:	53                   	push   ebx
c0010fda:	e8 27 f8 ff ff       	call   c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fdf:	83 c4 20             	add    esp,0x20
c0010fe2:	83 ff 50             	cmp    edi,0x50
c0010fe5:	75 df                	jne    c0010fc6 <VgaText::clearScreen()+0x28>
c0010fe7:	46                   	inc    esi
c0010fe8:	eb d2                	jmp    c0010fbc <VgaText::clearScreen()+0x1e>
c0010fea:	83 ec 0c             	sub    esp,0xc
c0010fed:	53                   	push   ebx
c0010fee:	e8 d9 fd ff ff       	call   c0010dcc <VgaText::doUpdate()>
c0010ff3:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010ffa:	83 c4 10             	add    esp,0x10
c0010ffd:	5b                   	pop    ebx
c0010ffe:	5e                   	pop    esi
c0010fff:	5f                   	pop    edi
c0011000:	c3                   	ret    
c0011001:	90                   	nop

c0011002 <VgaText::putchar(char)>:
c0011002:	56                   	push   esi
c0011003:	53                   	push   ebx
c0011004:	83 ec 14             	sub    esp,0x14
c0011007:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001100b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001100f:	3c 5b                	cmp    al,0x5b
c0011011:	75 21                	jne    c0011034 <VgaText::putchar(char)+0x32>
c0011013:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001101a:	74 28                	je     c0011044 <VgaText::putchar(char)+0x42>
c001101c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011025:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001102f:	e9 e2 00 00 00       	jmp    c0011116 <VgaText::putchar(char)+0x114>
c0011034:	3c 1b                	cmp    al,0x1b
c0011036:	75 0c                	jne    c0011044 <VgaText::putchar(char)+0x42>
c0011038:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001103f:	e9 d2 00 00 00       	jmp    c0011116 <VgaText::putchar(char)+0x114>
c0011044:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001104a:	84 c9                	test   cl,cl
c001104c:	0f 84 ab 00 00 00    	je     c00110fd <VgaText::putchar(char)+0xfb>
c0011052:	8d 50 c0             	lea    edx,[eax-0x40]
c0011055:	80 fa 3e             	cmp    dl,0x3e
c0011058:	0f 87 82 00 00 00    	ja     c00110e0 <VgaText::putchar(char)+0xde>
c001105e:	3c 6d                	cmp    al,0x6d
c0011060:	75 4d                	jne    c00110af <VgaText::putchar(char)+0xad>
c0011062:	31 f6                	xor    esi,esi
c0011064:	31 d2                	xor    edx,edx
c0011066:	31 c0                	xor    eax,eax
c0011068:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001106e:	7e 30                	jle    c00110a0 <VgaText::putchar(char)+0x9e>
c0011070:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011078:	80 fa 3b             	cmp    dl,0x3b
c001107b:	75 17                	jne    c0011094 <VgaText::putchar(char)+0x92>
c001107d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011081:	50                   	push   eax
c0011082:	53                   	push   ebx
c0011083:	e8 ee f5 ff ff       	call   c0010676 <VgaText::doANSI_SGR(int)>
c0011088:	59                   	pop    ecx
c0011089:	31 d2                	xor    edx,edx
c001108b:	58                   	pop    eax
c001108c:	31 c0                	xor    eax,eax
c001108e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011092:	eb 09                	jmp    c001109d <VgaText::putchar(char)+0x9b>
c0011094:	6b c0 0a             	imul   eax,eax,0xa
c0011097:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001109b:	88 ca                	mov    dl,cl
c001109d:	46                   	inc    esi
c001109e:	eb c8                	jmp    c0011068 <VgaText::putchar(char)+0x66>
c00110a0:	84 d2                	test   dl,dl
c00110a2:	74 31                	je     c00110d5 <VgaText::putchar(char)+0xd3>
c00110a4:	50                   	push   eax
c00110a5:	53                   	push   ebx
c00110a6:	e8 cb f5 ff ff       	call   c0010676 <VgaText::doANSI_SGR(int)>
c00110ab:	58                   	pop    eax
c00110ac:	5a                   	pop    edx
c00110ad:	eb 26                	jmp    c00110d5 <VgaText::putchar(char)+0xd3>
c00110af:	3c 4a                	cmp    al,0x4a
c00110b1:	75 22                	jne    c00110d5 <VgaText::putchar(char)+0xd3>
c00110b3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110ba:	75 19                	jne    c00110d5 <VgaText::putchar(char)+0xd3>
c00110bc:	83 ec 0c             	sub    esp,0xc
c00110bf:	53                   	push   ebx
c00110c0:	e8 d9 fe ff ff       	call   c0010f9e <VgaText::clearScreen()>
c00110c5:	83 c4 0c             	add    esp,0xc
c00110c8:	6a 00                	push   0x0
c00110ca:	6a 00                	push   0x0
c00110cc:	53                   	push   ebx
c00110cd:	e8 ac f7 ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c00110d2:	83 c4 10             	add    esp,0x10
c00110d5:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110de:	eb 36                	jmp    c0011116 <VgaText::putchar(char)+0x114>
c00110e0:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110e6:	83 fa 0e             	cmp    edx,0xe
c00110e9:	7f 2b                	jg     c0011116 <VgaText::putchar(char)+0x114>
c00110eb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110ee:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110f4:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110fb:	eb 19                	jmp    c0011116 <VgaText::putchar(char)+0x114>
c00110fd:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011103:	0f be c0             	movsx  eax,al
c0011106:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001110c:	50                   	push   eax
c001110d:	53                   	push   ebx
c001110e:	e8 ab fa ff ff       	call   c0010bbe <VgaText::putchar(char, VgaColour, VgaColour)>
c0011113:	83 c4 10             	add    esp,0x10
c0011116:	83 c4 14             	add    esp,0x14
c0011119:	5b                   	pop    ebx
c001111a:	5e                   	pop    esi
c001111b:	c3                   	ret    

c001111c <VgaText::puts(char const*)>:
c001111c:	53                   	push   ebx
c001111d:	83 ec 08             	sub    esp,0x8
c0011120:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011124:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011127:	84 c0                	test   al,al
c0011129:	74 12                	je     c001113d <VgaText::puts(char const*)+0x21>
c001112b:	43                   	inc    ebx
c001112c:	51                   	push   ecx
c001112d:	51                   	push   ecx
c001112e:	50                   	push   eax
c001112f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011133:	e8 ca fe ff ff       	call   c0011002 <VgaText::putchar(char)>
c0011138:	83 c4 10             	add    esp,0x10
c001113b:	eb e7                	jmp    c0011124 <VgaText::puts(char const*)+0x8>
c001113d:	83 c4 08             	add    esp,0x8
c0011140:	5b                   	pop    ebx
c0011141:	c3                   	ret    

c0011142 <VgaText::putx(unsigned int)>:
c0011142:	57                   	push   edi
c0011143:	b9 11 00 00 00       	mov    ecx,0x11
c0011148:	56                   	push   esi
c0011149:	be 2e a4 02 c0       	mov    esi,0xc002a42e
c001114e:	53                   	push   ebx
c001114f:	83 ec 20             	sub    esp,0x20
c0011152:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011156:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001115a:	fc                   	cld    
c001115b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001115d:	be 08 00 00 00       	mov    esi,0x8
c0011162:	50                   	push   eax
c0011163:	50                   	push   eax
c0011164:	89 d8                	mov    eax,ebx
c0011166:	c1 e3 04             	shl    ebx,0x4
c0011169:	c1 e8 1c             	shr    eax,0x1c
c001116c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011171:	50                   	push   eax
c0011172:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011176:	e8 87 fe ff ff       	call   c0011002 <VgaText::putchar(char)>
c001117b:	83 c4 10             	add    esp,0x10
c001117e:	4e                   	dec    esi
c001117f:	75 e1                	jne    c0011162 <VgaText::putx(unsigned int)+0x20>
c0011181:	83 c4 20             	add    esp,0x20
c0011184:	5b                   	pop    ebx
c0011185:	5e                   	pop    esi
c0011186:	5f                   	pop    edi
c0011187:	c3                   	ret    

c0011188 <VgaText::VgaText(char const*)>:
c0011188:	57                   	push   edi
c0011189:	56                   	push   esi
c001118a:	53                   	push   ebx
c001118b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118f:	83 ec 08             	sub    esp,0x8
c0011192:	6a 00                	push   0x0
c0011194:	50                   	push   eax
c0011195:	e8 6e 05 00 00       	call   c0011708 <UnixFile::UnixFile(int)>
c001119a:	83 c4 10             	add    esp,0x10
c001119d:	ba 94 a4 02 c0       	mov    edx,0xc002a494
c00111a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a6:	89 10                	mov    DWORD PTR [eax],edx
c00111a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ac:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ba:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c8:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d3:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111de:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ec:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fa:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011205:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001120c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011210:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011216:	bb 20 e5 02 c0       	mov    ebx,0xc002e520
c001121b:	b8 08 00 00 00       	mov    eax,0x8
c0011220:	fc                   	cld    
c0011221:	89 d7                	mov    edi,edx
c0011223:	89 de                	mov    esi,ebx
c0011225:	89 c1                	mov    ecx,eax
c0011227:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122d:	05 1e 10 00 00       	add    eax,0x101e
c0011232:	83 ec 08             	sub    esp,0x8
c0011235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011239:	50                   	push   eax
c001123a:	e8 fd f5 fe ff       	call   c000083c <strcpy>
c001123f:	83 c4 10             	add    esp,0x10
c0011242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011246:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011254:	83 c0 0c             	add    eax,0xc
c0011257:	83 ec 04             	sub    esp,0x4
c001125a:	68 00 0f 00 00       	push   0xf00
c001125f:	6a 00                	push   0x0
c0011261:	50                   	push   eax
c0011262:	e8 19 f5 fe ff       	call   c0000780 <memset>
c0011267:	83 c4 10             	add    esp,0x10
c001126a:	83 ec 04             	sub    esp,0x4
c001126d:	6a 00                	push   0x0
c001126f:	6a 07                	push   0x7
c0011271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011275:	e8 b4 f4 ff ff       	call   c001072e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001127a:	83 c4 10             	add    esp,0x10
c001127d:	83 ec 08             	sub    esp,0x8
c0011280:	6a 02                	push   0x2
c0011282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011286:	e8 49 fa ff ff       	call   c0010cd4 <VgaText::setCursorHeight(int)>
c001128b:	83 c4 10             	add    esp,0x10
c001128e:	83 ec 04             	sub    esp,0x4
c0011291:	6a 00                	push   0x0
c0011293:	6a 00                	push   0x0
c0011295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011299:	e8 e0 f5 ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c001129e:	83 c4 10             	add    esp,0x10
c00112a1:	83 ec 08             	sub    esp,0x8
c00112a4:	6a 01                	push   0x1
c00112a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112aa:	e8 7d f3 ff ff       	call   c001062c <VgaText::showCursor(bool)>
c00112af:	83 c4 10             	add    esp,0x10
c00112b2:	83 ec 08             	sub    esp,0x8
c00112b5:	6a 01                	push   0x1
c00112b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112bb:	e8 7c f3 ff ff       	call   c001063c <VgaText::disableBlink(bool)>
c00112c0:	83 c4 10             	add    esp,0x10
c00112c3:	83 ec 0c             	sub    esp,0xc
c00112c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ca:	e8 cf fc ff ff       	call   c0010f9e <VgaText::clearScreen()>
c00112cf:	83 c4 10             	add    esp,0x10
c00112d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d6:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112e1:	05 9e 10 00 00       	add    eax,0x109e
c00112e6:	83 ec 04             	sub    esp,0x4
c00112e9:	68 96 00 00 00       	push   0x96
c00112ee:	6a 00                	push   0x0
c00112f0:	50                   	push   eax
c00112f1:	e8 8a f4 fe ff       	call   c0000780 <memset>
c00112f6:	83 c4 10             	add    esp,0x10
c00112f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112fd:	05 34 11 00 00       	add    eax,0x1134
c0011302:	83 ec 04             	sub    esp,0x4
c0011305:	68 2c 01 00 00       	push   0x12c
c001130a:	6a 00                	push   0x0
c001130c:	50                   	push   eax
c001130d:	e8 6e f4 fe ff       	call   c0000780 <memset>
c0011312:	83 c4 10             	add    esp,0x10
c0011315:	90                   	nop
c0011316:	5b                   	pop    ebx
c0011317:	5e                   	pop    esi
c0011318:	5f                   	pop    edi
c0011319:	c3                   	ret    

c001131a <VgaText::receiveKey(unsigned char)>:
c001131a:	55                   	push   ebp
c001131b:	57                   	push   edi
c001131c:	56                   	push   esi
c001131d:	53                   	push   ebx
c001131e:	83 ec 1c             	sub    esp,0x1c
c0011321:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011325:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011329:	84 db                	test   bl,bl
c001132b:	0f 84 c9 00 00 00    	je     c00113fa <VgaText::receiveKey(unsigned char)+0xe0>
c0011331:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011337:	80 fb 08             	cmp    bl,0x8
c001133a:	75 2c                	jne    c0011368 <VgaText::receiveKey(unsigned char)+0x4e>
c001133c:	83 ec 0c             	sub    esp,0xc
c001133f:	57                   	push   edi
c0011340:	e8 57 f4 fe ff       	call   c000079c <strlen>
c0011345:	83 c4 10             	add    esp,0x10
c0011348:	85 c0                	test   eax,eax
c001134a:	74 41                	je     c001138d <VgaText::receiveKey(unsigned char)+0x73>
c001134c:	50                   	push   eax
c001134d:	50                   	push   eax
c001134e:	6a 08                	push   0x8
c0011350:	56                   	push   esi
c0011351:	e8 ac fc ff ff       	call   c0011002 <VgaText::putchar(char)>
c0011356:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011359:	e8 3e f4 fe ff       	call   c000079c <strlen>
c001135e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011366:	eb 22                	jmp    c001138a <VgaText::receiveKey(unsigned char)+0x70>
c0011368:	0f be c3             	movsx  eax,bl
c001136b:	52                   	push   edx
c001136c:	52                   	push   edx
c001136d:	50                   	push   eax
c001136e:	56                   	push   esi
c001136f:	e8 8e fc ff ff       	call   c0011002 <VgaText::putchar(char)>
c0011374:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011378:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001137d:	59                   	pop    ecx
c001137e:	5d                   	pop    ebp
c001137f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011383:	50                   	push   eax
c0011384:	57                   	push   edi
c0011385:	e8 f2 f5 fe ff       	call   c000097c <strcat>
c001138a:	83 c4 10             	add    esp,0x10
c001138d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011394:	75 05                	jne    c001139b <VgaText::receiveKey(unsigned char)+0x81>
c0011396:	80 fb 0a             	cmp    bl,0xa
c0011399:	75 53                	jne    c00113ee <VgaText::receiveKey(unsigned char)+0xd4>
c001139b:	83 ec 0c             	sub    esp,0xc
c001139e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113a4:	53                   	push   ebx
c00113a5:	e8 f2 f3 fe ff       	call   c000079c <strlen>
c00113aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113ad:	89 c5                	mov    ebp,eax
c00113af:	e8 e8 f3 fe ff       	call   c000079c <strlen>
c00113b4:	83 c4 10             	add    esp,0x10
c00113b7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113bb:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113c0:	76 10                	jbe    c00113d2 <VgaText::receiveKey(unsigned char)+0xb8>
c00113c2:	83 ec 0c             	sub    esp,0xc
c00113c5:	68 3f a4 02 c0       	push   0xc002a43f
c00113ca:	e8 3c 92 00 00       	call   c001a60b <Krnl::panic(char const*)>
c00113cf:	83 c4 10             	add    esp,0x10
c00113d2:	50                   	push   eax
c00113d3:	50                   	push   eax
c00113d4:	57                   	push   edi
c00113d5:	53                   	push   ebx
c00113d6:	e8 a1 f5 fe ff       	call   c000097c <strcat>
c00113db:	83 c4 0c             	add    esp,0xc
c00113de:	68 96 00 00 00       	push   0x96
c00113e3:	6a 00                	push   0x0
c00113e5:	57                   	push   edi
c00113e6:	e8 95 f3 fe ff       	call   c0000780 <memset>
c00113eb:	83 c4 10             	add    esp,0x10
c00113ee:	83 ec 0c             	sub    esp,0xc
c00113f1:	56                   	push   esi
c00113f2:	e8 d5 f9 ff ff       	call   c0010dcc <VgaText::doUpdate()>
c00113f7:	83 c4 10             	add    esp,0x10
c00113fa:	83 c4 1c             	add    esp,0x1c
c00113fd:	5b                   	pop    ebx
c00113fe:	5e                   	pop    esi
c00113ff:	5f                   	pop    edi
c0011400:	5d                   	pop    ebp
c0011401:	c3                   	ret    

c0011402 <VgaText::write(unsigned long long, void*, int*)>:
c0011402:	55                   	push   ebp
c0011403:	57                   	push   edi
c0011404:	56                   	push   esi
c0011405:	53                   	push   ebx
c0011406:	83 ec 0c             	sub    esp,0xc
c0011409:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001140d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011411:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011415:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001141c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001141f:	39 eb                	cmp    ebx,ebp
c0011421:	74 13                	je     c0011436 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011423:	43                   	inc    ebx
c0011424:	50                   	push   eax
c0011425:	50                   	push   eax
c0011426:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001142a:	50                   	push   eax
c001142b:	56                   	push   esi
c001142c:	e8 d1 fb ff ff       	call   c0011002 <VgaText::putchar(char)>
c0011431:	83 c4 10             	add    esp,0x10
c0011434:	eb e9                	jmp    c001141f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011436:	83 ec 0c             	sub    esp,0xc
c0011439:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011440:	56                   	push   esi
c0011441:	e8 86 f9 ff ff       	call   c0010dcc <VgaText::doUpdate()>
c0011446:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001144a:	89 38                	mov    DWORD PTR [eax],edi
c001144c:	83 c4 1c             	add    esp,0x1c
c001144f:	31 c0                	xor    eax,eax
c0011451:	5b                   	pop    ebx
c0011452:	5e                   	pop    esi
c0011453:	5f                   	pop    edi
c0011454:	5d                   	pop    ebp
c0011455:	c3                   	ret    

c0011456 <newTerminal(char*)>:
c0011456:	83 ec 28             	sub    esp,0x28
c0011459:	68 60 12 00 00       	push   0x1260
c001145e:	e8 e8 e3 ff ff       	call   c000f84b <malloc>
c0011463:	5a                   	pop    edx
c0011464:	59                   	pop    ecx
c0011465:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011469:	50                   	push   eax
c001146a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001146e:	e8 15 fd ff ff       	call   c0011188 <VgaText::VgaText(char const*)>
c0011473:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011477:	83 c4 2c             	add    esp,0x2c
c001147a:	c3                   	ret    
c001147b:	90                   	nop

c001147c <TSS::TSS()>:
c001147c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011480:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011487:	90                   	nop
c0011488:	c3                   	ret    
c0011489:	90                   	nop

c001148a <TSS::setESP(unsigned long)>:
c001148a:	55                   	push   ebp
c001148b:	89 e5                	mov    ebp,esp
c001148d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011490:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011493:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011496:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011499:	90                   	nop
c001149a:	5d                   	pop    ebp
c001149b:	c3                   	ret    

c001149c <TSS::flush()>:
c001149c:	55                   	push   ebp
c001149d:	89 e5                	mov    ebp,esp
c001149f:	83 ec 10             	sub    esp,0x10
c00114a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00114a7:	83 c8 03             	or     eax,0x3
c00114aa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114ae:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114b2:	66 89 d0             	mov    ax,dx
c00114b5:	0f 00 d8             	ltr    ax
c00114b8:	90                   	nop
c00114b9:	c9                   	leave  
c00114ba:	c3                   	ret    
c00114bb:	90                   	nop

c00114bc <TSS::setup(unsigned long, unsigned long)>:
c00114bc:	55                   	push   ebp
c00114bd:	89 e5                	mov    ebp,esp
c00114bf:	83 ec 18             	sub    esp,0x18
c00114c2:	83 ec 0c             	sub    esp,0xc
c00114c5:	6a 68                	push   0x68
c00114c7:	e8 7f e3 ff ff       	call   c000f84b <malloc>
c00114cc:	83 c4 10             	add    esp,0x10
c00114cf:	89 c2                	mov    edx,eax
c00114d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114dd:	83 ec 04             	sub    esp,0x4
c00114e0:	6a 68                	push   0x68
c00114e2:	6a 00                	push   0x0
c00114e4:	50                   	push   eax
c00114e5:	e8 96 f2 fe ff       	call   c0000780 <memset>
c00114ea:	83 c4 10             	add    esp,0x10
c00114ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ff:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011508:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001150e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011514:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011517:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001151d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011520:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011523:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011547:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001154d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011553:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011562:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001156e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011577:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001157e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011581:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011584:	0f 20 da             	mov    edx,cr3
c0011587:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001158a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001158d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011593:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011596:	83 ec 08             	sub    esp,0x8
c0011599:	50                   	push   eax
c001159a:	8d 45 ec             	lea    eax,[ebp-0x14]
c001159d:	50                   	push   eax
c001159e:	e8 83 da ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c00115a3:	83 c4 10             	add    esp,0x10
c00115a6:	83 ec 08             	sub    esp,0x8
c00115a9:	6a 68                	push   0x68
c00115ab:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115ae:	50                   	push   eax
c00115af:	e8 8e da ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c00115b4:	83 c4 10             	add    esp,0x10
c00115b7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115bb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115be:	83 e0 0f             	and    eax,0xf
c00115c1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115c4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115c7:	83 c8 40             	or     eax,0x40
c00115ca:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115cd:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00115d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115d8:	05 78 01 00 00       	add    eax,0x178
c00115dd:	83 ec 04             	sub    esp,0x4
c00115e0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115e3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115e6:	50                   	push   eax
c00115e7:	e8 8a da ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c00115ec:	83 c4 10             	add    esp,0x10
c00115ef:	89 c2                	mov    edx,eax
c00115f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f4:	89 10                	mov    DWORD PTR [eax],edx
c00115f6:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00115fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011601:	05 78 01 00 00       	add    eax,0x178
c0011606:	83 ec 0c             	sub    esp,0xc
c0011609:	50                   	push   eax
c001160a:	e8 ab da ff ff       	call   c000f0ba <GDT::flush()>
c001160f:	83 c4 10             	add    esp,0x10
c0011612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011615:	8b 00                	mov    eax,DWORD PTR [eax]
c0011617:	83 ec 08             	sub    esp,0x8
c001161a:	50                   	push   eax
c001161b:	68 a8 a4 02 c0       	push   0xc002a4a8
c0011620:	e8 ba 18 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0011625:	83 c4 10             	add    esp,0x10
c0011628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001162b:	8b 00                	mov    eax,DWORD PTR [eax]
c001162d:	c9                   	leave  
c001162e:	c3                   	ret    
c001162f:	90                   	nop

c0011630 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011634:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011638:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001163b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011640:	75 08                	jne    c001164a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011642:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011648:	eb 38                	jmp    c0011682 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001164a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001164f:	75 17                	jne    c0011668 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011651:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011656:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011659:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001165f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011661:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011665:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011668:	89 c1                	mov    ecx,eax
c001166a:	83 e1 fd             	and    ecx,0xfffffffd
c001166d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011673:	74 cd                	je     c0011642 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011675:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001167a:	83 e0 ef             	and    eax,0xffffffef
c001167d:	83 f8 08             	cmp    eax,0x8
c0011680:	76 c0                	jbe    c0011642 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011682:	31 c0                	xor    eax,eax
c0011684:	c3                   	ret    
c0011685:	90                   	nop

c0011686 <ReservedFilename::isAtty()>:
c0011686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001168a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001168d:	31 c0                	xor    eax,eax
c001168f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011695:	74 09                	je     c00116a0 <ReservedFilename::isAtty()+0x1a>
c0011697:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001169d:	0f 94 c0             	sete   al
c00116a0:	c3                   	ret    
c00116a1:	90                   	nop

c00116a2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116b1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116b6:	75 08                	jne    c00116c0 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116b8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116be:	eb 3d                	jmp    c00116fd <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116c0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116c5:	75 17                	jne    c00116de <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116cf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116d5:	8b 10                	mov    edx,DWORD PTR [eax]
c00116d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116db:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116de:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116e3:	75 04                	jne    c00116e9 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116e5:	89 0a                	mov    DWORD PTR [edx],ecx
c00116e7:	eb 14                	jmp    c00116fd <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116e9:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116ee:	74 c8                	je     c00116b8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116f0:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116f5:	83 e0 ef             	and    eax,0xffffffef
c00116f8:	83 f8 08             	cmp    eax,0x8
c00116fb:	76 bb                	jbe    c00116b8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116fd:	31 c0                	xor    eax,eax
c00116ff:	c3                   	ret    

c0011700 <UnixFile::getFileDescriptor()>:
c0011700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011704:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011707:	c3                   	ret    

c0011708 <UnixFile::UnixFile(int)>:
c0011708:	53                   	push   ebx
c0011709:	83 ec 28             	sub    esp,0x28
c001170c:	ba 94 a5 02 c0       	mov    edx,0xc002a594
c0011711:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011715:	89 10                	mov    DWORD PTR [eax],edx
c0011717:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001171f:	0f 8f 8c 01 00 00    	jg     c00118b1 <UnixFile::UnixFile(int)+0x1a9>
c0011725:	a1 00 d4 02 c0       	mov    eax,ds:0xc002d400
c001172a:	8d 50 01             	lea    edx,[eax+0x1]
c001172d:	89 15 00 d4 02 c0    	mov    DWORD PTR ds:0xc002d400,edx
c0011733:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011737:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001173a:	83 ec 08             	sub    esp,0x8
c001173d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011741:	68 d8 e5 02 c0       	push   0xc002e5d8
c0011746:	e8 35 70 01 00       	call   c0028780 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001174b:	83 c4 10             	add    esp,0x10
c001174e:	a0 d4 e5 02 c0       	mov    al,ds:0xc002e5d4
c0011753:	83 f0 01             	xor    eax,0x1
c0011756:	84 c0                	test   al,al
c0011758:	0f 84 54 01 00 00    	je     c00118b2 <UnixFile::UnixFile(int)+0x1aa>
c001175e:	c6 05 d4 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5d4,0x1
c0011765:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001176d:	83 ec 0c             	sub    esp,0xc
c0011770:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011774:	e8 d2 e0 ff ff       	call   c000f84b <malloc>
c0011779:	83 c4 10             	add    esp,0x10
c001177c:	89 c3                	mov    ebx,eax
c001177e:	83 ec 08             	sub    esp,0x8
c0011781:	68 03 ff ff 0f       	push   0xfffff03
c0011786:	53                   	push   ebx
c0011787:	e8 2c 01 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c001178c:	83 c4 10             	add    esp,0x10
c001178f:	89 1d cc e5 02 c0    	mov    DWORD PTR ds:0xc002e5cc,ebx
c0011795:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001179d:	83 ec 0c             	sub    esp,0xc
c00117a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117a4:	e8 a2 e0 ff ff       	call   c000f84b <malloc>
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	89 c3                	mov    ebx,eax
c00117ae:	83 ec 08             	sub    esp,0x8
c00117b1:	68 01 ff ff 0f       	push   0xfffff01
c00117b6:	53                   	push   ebx
c00117b7:	e8 fc 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c00117bc:	83 c4 10             	add    esp,0x10
c00117bf:	89 1d d0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5d0,ebx
c00117c5:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117cd:	83 ec 0c             	sub    esp,0xc
c00117d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117d4:	e8 72 e0 ff ff       	call   c000f84b <malloc>
c00117d9:	83 c4 10             	add    esp,0x10
c00117dc:	89 c3                	mov    ebx,eax
c00117de:	83 ec 08             	sub    esp,0x8
c00117e1:	68 00 ff ff 0f       	push   0xfffff00
c00117e6:	53                   	push   ebx
c00117e7:	e8 cc 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c00117ec:	83 c4 10             	add    esp,0x10
c00117ef:	89 1d c4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c4,ebx
c00117f5:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117fd:	83 ec 0c             	sub    esp,0xc
c0011800:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011804:	e8 42 e0 ff ff       	call   c000f84b <malloc>
c0011809:	83 c4 10             	add    esp,0x10
c001180c:	89 c3                	mov    ebx,eax
c001180e:	83 ec 08             	sub    esp,0x8
c0011811:	68 02 ff ff 0f       	push   0xfffff02
c0011816:	53                   	push   ebx
c0011817:	e8 9c 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	89 1d c8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5c8,ebx
c0011825:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001182d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011832:	7f 7e                	jg     c00118b2 <UnixFile::UnixFile(int)+0x1aa>
c0011834:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001183c:	83 ec 0c             	sub    esp,0xc
c001183f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011843:	e8 03 e0 ff ff       	call   c000f84b <malloc>
c0011848:	83 c4 10             	add    esp,0x10
c001184b:	89 c3                	mov    ebx,eax
c001184d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011851:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011856:	83 ec 08             	sub    esp,0x8
c0011859:	50                   	push   eax
c001185a:	53                   	push   ebx
c001185b:	e8 58 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c0011860:	83 c4 10             	add    esp,0x10
c0011863:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011867:	89 1c 85 a0 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a60],ebx
c001186e:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011876:	83 ec 0c             	sub    esp,0xc
c0011879:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001187d:	e8 c9 df ff ff       	call   c000f84b <malloc>
c0011882:	83 c4 10             	add    esp,0x10
c0011885:	89 c3                	mov    ebx,eax
c0011887:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001188b:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011890:	83 ec 08             	sub    esp,0x8
c0011893:	50                   	push   eax
c0011894:	53                   	push   ebx
c0011895:	e8 1e 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c001189a:	83 c4 10             	add    esp,0x10
c001189d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118a1:	89 1c 85 60 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1aa0],ebx
c00118a8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118ac:	e9 7c ff ff ff       	jmp    c001182d <UnixFile::UnixFile(int)+0x125>
c00118b1:	90                   	nop
c00118b2:	83 c4 28             	add    esp,0x28
c00118b5:	5b                   	pop    ebx
c00118b6:	c3                   	ret    
c00118b7:	90                   	nop

c00118b8 <ReservedFilename::ReservedFilename(int)>:
c00118b8:	83 ec 0c             	sub    esp,0xc
c00118bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118bf:	83 ec 08             	sub    esp,0x8
c00118c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118c6:	50                   	push   eax
c00118c7:	e8 3c fe ff ff       	call   c0011708 <UnixFile::UnixFile(int)>
c00118cc:	83 c4 10             	add    esp,0x10
c00118cf:	ba b0 a5 02 c0       	mov    edx,0xc002a5b0
c00118d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d8:	89 10                	mov    DWORD PTR [eax],edx
c00118da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118e5:	90                   	nop
c00118e6:	83 c4 0c             	add    esp,0xc
c00118e9:	c3                   	ret    

c00118ea <UnixFile::~UnixFile()>:
c00118ea:	83 ec 1c             	sub    esp,0x1c
c00118ed:	ba 94 a5 02 c0       	mov    edx,0xc002a594
c00118f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118f6:	89 10                	mov    DWORD PTR [eax],edx
c00118f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ff:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011904:	7f 73                	jg     c0011979 <UnixFile::~UnixFile()+0x8f>
c0011906:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001190e:	83 ec 0c             	sub    esp,0xc
c0011911:	68 d8 e5 02 c0       	push   0xc002e5d8
c0011916:	e8 39 6f 01 00       	call   c0028854 <LinkedList<UnixFile>::getFirstElement()>
c001191b:	83 c4 10             	add    esp,0x10
c001191e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011922:	83 ec 0c             	sub    esp,0xc
c0011925:	68 d8 e5 02 c0       	push   0xc002e5d8
c001192a:	e8 2d 6f 01 00       	call   c002885c <LinkedList<UnixFile>::removeFirst()>
c001192f:	83 c4 10             	add    esp,0x10
c0011932:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011936:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001193a:	74 40                	je     c001197c <UnixFile::~UnixFile()+0x92>
c001193c:	83 ec 08             	sub    esp,0x8
c001193f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011943:	68 d8 e5 02 c0       	push   0xc002e5d8
c0011948:	e8 33 6e 01 00       	call   c0028780 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001194d:	83 c4 10             	add    esp,0x10
c0011950:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011954:	8d 50 01             	lea    edx,[eax+0x1]
c0011957:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001195b:	3d 88 13 00 00       	cmp    eax,0x1388
c0011960:	0f 94 c0             	sete   al
c0011963:	84 c0                	test   al,al
c0011965:	74 a7                	je     c001190e <UnixFile::~UnixFile()+0x24>
c0011967:	83 ec 0c             	sub    esp,0xc
c001196a:	68 6c a5 02 c0       	push   0xc002a56c
c001196f:	e8 97 8c 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0011974:	83 c4 10             	add    esp,0x10
c0011977:	eb 95                	jmp    c001190e <UnixFile::~UnixFile()+0x24>
c0011979:	90                   	nop
c001197a:	eb 01                	jmp    c001197d <UnixFile::~UnixFile()+0x93>
c001197c:	90                   	nop
c001197d:	90                   	nop
c001197e:	83 c4 1c             	add    esp,0x1c
c0011981:	c3                   	ret    

c0011982 <UnixFile::~UnixFile()>:
c0011982:	83 ec 0c             	sub    esp,0xc
c0011985:	83 ec 0c             	sub    esp,0xc
c0011988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001198c:	e8 59 ff ff ff       	call   c00118ea <UnixFile::~UnixFile()>
c0011991:	83 c4 10             	add    esp,0x10
c0011994:	83 ec 08             	sub    esp,0x8
c0011997:	6a 0c                	push   0xc
c0011999:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001199d:	e8 5d 14 00 00       	call   c0012dff <operator delete(void*, unsigned long)>
c00119a2:	83 c4 10             	add    esp,0x10
c00119a5:	83 c4 0c             	add    esp,0xc
c00119a8:	c3                   	ret    
c00119a9:	90                   	nop

c00119aa <ReservedFilename::~ReservedFilename()>:
c00119aa:	83 ec 0c             	sub    esp,0xc
c00119ad:	ba b0 a5 02 c0       	mov    edx,0xc002a5b0
c00119b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b6:	89 10                	mov    DWORD PTR [eax],edx
c00119b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119bc:	83 ec 0c             	sub    esp,0xc
c00119bf:	50                   	push   eax
c00119c0:	e8 25 ff ff ff       	call   c00118ea <UnixFile::~UnixFile()>
c00119c5:	83 c4 10             	add    esp,0x10
c00119c8:	90                   	nop
c00119c9:	83 c4 0c             	add    esp,0xc
c00119cc:	c3                   	ret    
c00119cd:	90                   	nop

c00119ce <ReservedFilename::~ReservedFilename()>:
c00119ce:	83 ec 0c             	sub    esp,0xc
c00119d1:	83 ec 0c             	sub    esp,0xc
c00119d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d8:	e8 cd ff ff ff       	call   c00119aa <ReservedFilename::~ReservedFilename()>
c00119dd:	83 c4 10             	add    esp,0x10
c00119e0:	83 ec 08             	sub    esp,0x8
c00119e3:	6a 0c                	push   0xc
c00119e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e9:	e8 11 14 00 00       	call   c0012dff <operator delete(void*, unsigned long)>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	83 c4 0c             	add    esp,0xc
c00119f4:	c3                   	ret    

c00119f5 <getFromFileDescriptor(int)>:
c00119f5:	53                   	push   ebx
c00119f6:	83 ec 08             	sub    esp,0x8
c00119f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119fd:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a03:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a09:	7f 2c                	jg     c0011a37 <getFromFileDescriptor(int)+0x42>
c0011a0b:	83 ec 0c             	sub    esp,0xc
c0011a0e:	68 d8 e5 02 c0       	push   0xc002e5d8
c0011a13:	e8 3c 6e 01 00       	call   c0028854 <LinkedList<UnixFile>::getFirstElement()>
c0011a18:	83 c4 10             	add    esp,0x10
c0011a1b:	85 c0                	test   eax,eax
c0011a1d:	75 04                	jne    c0011a23 <getFromFileDescriptor(int)+0x2e>
c0011a1f:	31 c0                	xor    eax,eax
c0011a21:	eb 6e                	jmp    c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a23:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a26:	74 69                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a28:	52                   	push   edx
c0011a29:	52                   	push   edx
c0011a2a:	50                   	push   eax
c0011a2b:	68 d8 e5 02 c0       	push   0xc002e5d8
c0011a30:	e8 c9 6e 01 00       	call   c00288fe <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a35:	eb e1                	jmp    c0011a18 <getFromFileDescriptor(int)+0x23>
c0011a37:	a1 cc e5 02 c0       	mov    eax,ds:0xc002e5cc
c0011a3c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a42:	74 4d                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a44:	a1 d0 e5 02 c0       	mov    eax,ds:0xc002e5d0
c0011a49:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a4f:	74 40                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a51:	a1 c8 e5 02 c0       	mov    eax,ds:0xc002e5c8
c0011a56:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a5c:	74 33                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a5e:	a1 c4 e5 02 c0       	mov    eax,ds:0xc002e5c4
c0011a63:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a69:	74 26                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a6b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a71:	83 f8 08             	cmp    eax,0x8
c0011a74:	77 09                	ja     c0011a7f <getFromFileDescriptor(int)+0x8a>
c0011a76:	8b 04 85 a0 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1a60]
c0011a7d:	eb 12                	jmp    c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a7f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a85:	83 fb 08             	cmp    ebx,0x8
c0011a88:	77 95                	ja     c0011a1f <getFromFileDescriptor(int)+0x2a>
c0011a8a:	8b 04 9d 60 e5 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1aa0]
c0011a91:	83 c4 08             	add    esp,0x8
c0011a94:	5b                   	pop    ebx
c0011a95:	c3                   	ret    

c0011a96 <__static_initialization_and_destruction_0(int, int)>:
c0011a96:	83 ec 0c             	sub    esp,0xc
c0011a99:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a9e:	75 34                	jne    c0011ad4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aa0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011aa8:	75 2a                	jne    c0011ad4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aaa:	83 ec 0c             	sub    esp,0xc
c0011aad:	68 d8 e5 02 c0       	push   0xc002e5d8
c0011ab2:	e8 71 6c 01 00       	call   c0028728 <LinkedList<UnixFile>::LinkedList()>
c0011ab7:	83 c4 10             	add    esp,0x10
c0011aba:	83 ec 04             	sub    esp,0x4
c0011abd:	68 90 d3 02 c0       	push   0xc002d390
c0011ac2:	68 d8 e5 02 c0       	push   0xc002e5d8
c0011ac7:	68 26 87 02 c0       	push   0xc0028726
c0011acc:	e8 a8 12 00 00       	call   c0012d79 <__cxa_atexit>
c0011ad1:	83 c4 10             	add    esp,0x10
c0011ad4:	90                   	nop
c0011ad5:	83 c4 0c             	add    esp,0xc
c0011ad8:	c3                   	ret    

c0011ad9 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011ad9:	83 ec 0c             	sub    esp,0xc
c0011adc:	83 ec 08             	sub    esp,0x8
c0011adf:	68 ff ff 00 00       	push   0xffff
c0011ae4:	6a 01                	push   0x1
c0011ae6:	e8 ab ff ff ff       	call   c0011a96 <__static_initialization_and_destruction_0(int, int)>
c0011aeb:	83 c4 10             	add    esp,0x10
c0011aee:	83 c4 0c             	add    esp,0xc
c0011af1:	c3                   	ret    

c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011af2:	53                   	push   ebx
c0011af3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011af7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011afb:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b01:	89 c8                	mov    eax,ecx
c0011b03:	d1 e8                	shr    eax,1
c0011b05:	03 05 08 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d408
c0011b0b:	83 e1 01             	and    ecx,0x1
c0011b0e:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b10:	75 09                	jne    c0011b1b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b12:	83 e2 f0             	and    edx,0xfffffff0
c0011b15:	09 da                	or     edx,ebx
c0011b17:	88 10                	mov    BYTE PTR [eax],dl
c0011b19:	5b                   	pop    ebx
c0011b1a:	c3                   	ret    
c0011b1b:	c1 e3 04             	shl    ebx,0x4
c0011b1e:	83 e2 0f             	and    edx,0xf
c0011b21:	09 da                	or     edx,ebx
c0011b23:	88 10                	mov    BYTE PTR [eax],dl
c0011b25:	5b                   	pop    ebx
c0011b26:	c3                   	ret    

c0011b27 <Virt::getPageState(unsigned long)>:
c0011b27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b2b:	8b 0d 08 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d408
c0011b31:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b37:	89 d0                	mov    eax,edx
c0011b39:	d1 e8                	shr    eax,1
c0011b3b:	83 e2 01             	and    edx,0x1
c0011b3e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b41:	75 04                	jne    c0011b47 <Virt::getPageState(unsigned long)+0x20>
c0011b43:	83 e0 0f             	and    eax,0xf
c0011b46:	c3                   	ret    
c0011b47:	c0 e8 04             	shr    al,0x4
c0011b4a:	c3                   	ret    

c0011b4b <Virt::allocateKernelVirtualPages(int)>:
c0011b4b:	55                   	push   ebp
c0011b4c:	31 ed                	xor    ebp,ebp
c0011b4e:	57                   	push   edi
c0011b4f:	56                   	push   esi
c0011b50:	53                   	push   ebx
c0011b51:	31 db                	xor    ebx,ebx
c0011b53:	83 ec 1c             	sub    esp,0x1c
c0011b56:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b5a:	8b 3d 04 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d404
c0011b60:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b65:	57                   	push   edi
c0011b66:	e8 bc ff ff ff       	call   c0011b27 <Virt::getPageState(unsigned long)>
c0011b6b:	5a                   	pop    edx
c0011b6c:	84 c0                	test   al,al
c0011b6e:	75 3a                	jne    c0011baa <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b70:	85 db                	test   ebx,ebx
c0011b72:	75 02                	jne    c0011b76 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b74:	89 fd                	mov    ebp,edi
c0011b76:	43                   	inc    ebx
c0011b77:	39 f3                	cmp    ebx,esi
c0011b79:	74 5a                	je     c0011bd5 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b7b:	47                   	inc    edi
c0011b7c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b82:	76 31                	jbe    c0011bb5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b84:	c7 05 04 d4 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d404,0xc8000
c0011b8e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b93:	75 28                	jne    c0011bbd <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b95:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b9a:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b9f:	57                   	push   edi
c0011ba0:	e8 82 ff ff ff       	call   c0011b27 <Virt::getPageState(unsigned long)>
c0011ba5:	5a                   	pop    edx
c0011ba6:	84 c0                	test   al,al
c0011ba8:	74 c6                	je     c0011b70 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011baa:	31 db                	xor    ebx,ebx
c0011bac:	47                   	inc    edi
c0011bad:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bb3:	77 cf                	ja     c0011b84 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011bb5:	89 3d 04 d4 02 c0    	mov    DWORD PTR ds:0xc002d404,edi
c0011bbb:	eb a8                	jmp    c0011b65 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bbd:	83 ec 0c             	sub    esp,0xc
c0011bc0:	68 c4 a5 02 c0       	push   0xc002a5c4
c0011bc5:	e8 41 8a 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0011bca:	8b 3d 04 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d404
c0011bd0:	83 c4 10             	add    esp,0x10
c0011bd3:	eb 90                	jmp    c0011b65 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bd5:	89 2d 04 d4 02 c0    	mov    DWORD PTR ds:0xc002d404,ebp
c0011bdb:	4b                   	dec    ebx
c0011bdc:	74 5f                	je     c0011c3d <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bde:	85 f6                	test   esi,esi
c0011be0:	74 3d                	je     c0011c1f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011be2:	89 e8                	mov    eax,ebp
c0011be4:	31 db                	xor    ebx,ebx
c0011be6:	8d 7e ff             	lea    edi,[esi-0x1]
c0011be9:	eb 14                	jmp    c0011bff <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011beb:	6a 01                	push   0x1
c0011bed:	43                   	inc    ebx
c0011bee:	50                   	push   eax
c0011bef:	e8 fe fe ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bf4:	58                   	pop    eax
c0011bf5:	39 f3                	cmp    ebx,esi
c0011bf7:	5a                   	pop    edx
c0011bf8:	74 25                	je     c0011c1f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bfa:	a1 04 d4 02 c0       	mov    eax,ds:0xc002d404
c0011bff:	8d 50 01             	lea    edx,[eax+0x1]
c0011c02:	85 db                	test   ebx,ebx
c0011c04:	89 15 04 d4 02 c0    	mov    DWORD PTR ds:0xc002d404,edx
c0011c0a:	74 20                	je     c0011c2c <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c0c:	39 df                	cmp    edi,ebx
c0011c0e:	75 db                	jne    c0011beb <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c10:	6a 03                	push   0x3
c0011c12:	43                   	inc    ebx
c0011c13:	50                   	push   eax
c0011c14:	e8 d9 fe ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c19:	59                   	pop    ecx
c0011c1a:	39 f3                	cmp    ebx,esi
c0011c1c:	58                   	pop    eax
c0011c1d:	75 db                	jne    c0011bfa <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c1f:	83 c4 1c             	add    esp,0x1c
c0011c22:	89 e8                	mov    eax,ebp
c0011c24:	5b                   	pop    ebx
c0011c25:	c1 e0 0c             	shl    eax,0xc
c0011c28:	5e                   	pop    esi
c0011c29:	5f                   	pop    edi
c0011c2a:	5d                   	pop    ebp
c0011c2b:	c3                   	ret    
c0011c2c:	6a 02                	push   0x2
c0011c2e:	bb 01 00 00 00       	mov    ebx,0x1
c0011c33:	50                   	push   eax
c0011c34:	e8 b9 fe ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c39:	58                   	pop    eax
c0011c3a:	5a                   	pop    edx
c0011c3b:	eb bd                	jmp    c0011bfa <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c3d:	6a 04                	push   0x4
c0011c3f:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c42:	55                   	push   ebp
c0011c43:	a3 04 d4 02 c0       	mov    ds:0xc002d404,eax
c0011c48:	e8 a5 fe ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c4d:	59                   	pop    ecx
c0011c4e:	89 e8                	mov    eax,ebp
c0011c50:	5b                   	pop    ebx
c0011c51:	c1 e0 0c             	shl    eax,0xc
c0011c54:	83 c4 1c             	add    esp,0x1c
c0011c57:	5b                   	pop    ebx
c0011c58:	5e                   	pop    esi
c0011c59:	5f                   	pop    edi
c0011c5a:	5d                   	pop    ebp
c0011c5b:	c3                   	ret    

c0011c5c <Virt::freeSwapfilePage(unsigned long)>:
c0011c5c:	53                   	push   ebx
c0011c5d:	8b 15 ec e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5ec
c0011c63:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c67:	b8 01 00 00 00       	mov    eax,0x1
c0011c6c:	89 cb                	mov    ebx,ecx
c0011c6e:	d3 e0                	shl    eax,cl
c0011c70:	c1 eb 05             	shr    ebx,0x5
c0011c73:	f7 d0                	not    eax
c0011c75:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011c78:	5b                   	pop    ebx
c0011c79:	c3                   	ret    

c0011c7a <Virt::swapIDToSector(unsigned long)>:
c0011c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c7e:	0f af 05 0c d4 02 c0 	imul   eax,DWORD PTR ds:0xc002d40c
c0011c85:	03 05 14 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d414
c0011c8b:	c3                   	ret    

c0011c8c <Virt::allocateSwapfilePage()>:
c0011c8c:	55                   	push   ebp
c0011c8d:	31 d2                	xor    edx,edx
c0011c8f:	57                   	push   edi
c0011c90:	56                   	push   esi
c0011c91:	53                   	push   ebx
c0011c92:	83 ec 0c             	sub    esp,0xc
c0011c95:	8b 0d 0c d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d40c
c0011c9b:	a1 10 d4 02 c0       	mov    eax,ds:0xc002d410
c0011ca0:	f7 f1                	div    ecx
c0011ca2:	39 0d 10 d4 02 c0    	cmp    DWORD PTR ds:0xc002d410,ecx
c0011ca8:	72 2d                	jb     c0011cd7 <Virt::allocateSwapfilePage()+0x4b>
c0011caa:	8b 35 ec e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5ec
c0011cb0:	8b 16                	mov    edx,DWORD PTR [esi]
c0011cb2:	f6 c2 01             	test   dl,0x1
c0011cb5:	74 3c                	je     c0011cf3 <Virt::allocateSwapfilePage()+0x67>
c0011cb7:	31 c9                	xor    ecx,ecx
c0011cb9:	bf 01 00 00 00       	mov    edi,0x1
c0011cbe:	eb 12                	jmp    c0011cd2 <Virt::allocateSwapfilePage()+0x46>
c0011cc0:	89 fd                	mov    ebp,edi
c0011cc2:	89 ca                	mov    edx,ecx
c0011cc4:	d3 e5                	shl    ebp,cl
c0011cc6:	c1 ea 05             	shr    edx,0x5
c0011cc9:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011ccc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cce:	85 ea                	test   edx,ebp
c0011cd0:	74 2a                	je     c0011cfc <Virt::allocateSwapfilePage()+0x70>
c0011cd2:	41                   	inc    ecx
c0011cd3:	39 c8                	cmp    eax,ecx
c0011cd5:	77 e9                	ja     c0011cc0 <Virt::allocateSwapfilePage()+0x34>
c0011cd7:	83 ec 0c             	sub    esp,0xc
c0011cda:	68 4b a7 02 c0       	push   0xc002a74b
c0011cdf:	e8 27 89 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0011ce4:	83 c4 10             	add    esp,0x10
c0011ce7:	31 c9                	xor    ecx,ecx
c0011ce9:	83 c4 0c             	add    esp,0xc
c0011cec:	89 c8                	mov    eax,ecx
c0011cee:	5b                   	pop    ebx
c0011cef:	5e                   	pop    esi
c0011cf0:	5f                   	pop    edi
c0011cf1:	5d                   	pop    ebp
c0011cf2:	c3                   	ret    
c0011cf3:	89 f3                	mov    ebx,esi
c0011cf5:	bd 01 00 00 00       	mov    ebp,0x1
c0011cfa:	31 c9                	xor    ecx,ecx
c0011cfc:	09 ea                	or     edx,ebp
c0011cfe:	89 c8                	mov    eax,ecx
c0011d00:	89 13                	mov    DWORD PTR [ebx],edx
c0011d02:	83 c4 0c             	add    esp,0xc
c0011d05:	5b                   	pop    ebx
c0011d06:	5e                   	pop    esi
c0011d07:	5f                   	pop    edi
c0011d08:	5d                   	pop    ebp
c0011d09:	c3                   	ret    

c0011d0a <Virt::virtualMemorySetup()>:
c0011d0a:	53                   	push   ebx
c0011d0b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d10:	83 ec 08             	sub    esp,0x8
c0011d13:	6a 0f                	push   0xf
c0011d15:	53                   	push   ebx
c0011d16:	43                   	inc    ebx
c0011d17:	e8 d6 fd ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d1c:	59                   	pop    ecx
c0011d1d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d23:	58                   	pop    eax
c0011d24:	75 ed                	jne    c0011d13 <Virt::virtualMemorySetup()+0x9>
c0011d26:	83 ec 08             	sub    esp,0x8
c0011d29:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d2e:	68 00 00 00 c8       	push   0xc8000000
c0011d33:	68 62 a7 02 c0       	push   0xc002a762
c0011d38:	e8 a2 11 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0011d3d:	58                   	pop    eax
c0011d3e:	5a                   	pop    edx
c0011d3f:	68 00 f0 ff ef       	push   0xeffff000
c0011d44:	68 76 a7 02 c0       	push   0xc002a776
c0011d49:	e8 91 11 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0011d4e:	83 c4 10             	add    esp,0x10
c0011d51:	83 ec 08             	sub    esp,0x8
c0011d54:	6a 00                	push   0x0
c0011d56:	53                   	push   ebx
c0011d57:	43                   	inc    ebx
c0011d58:	e8 95 fd ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d5d:	83 c4 10             	add    esp,0x10
c0011d60:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d66:	75 e9                	jne    c0011d51 <Virt::virtualMemorySetup()+0x47>
c0011d68:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d6d:	83 ec 08             	sub    esp,0x8
c0011d70:	6a 0f                	push   0xf
c0011d72:	53                   	push   ebx
c0011d73:	43                   	inc    ebx
c0011d74:	e8 79 fd ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d79:	83 c4 10             	add    esp,0x10
c0011d7c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011d82:	75 e9                	jne    c0011d6d <Virt::virtualMemorySetup()+0x63>
c0011d84:	83 c4 08             	add    esp,0x8
c0011d87:	5b                   	pop    ebx
c0011d88:	c3                   	ret    

c0011d89 <Virt::swappingSetup()>:
c0011d89:	83 ec 14             	sub    esp,0x14
c0011d8c:	31 d2                	xor    edx,edx
c0011d8e:	a1 10 d4 02 c0       	mov    eax,ds:0xc002d410
c0011d93:	f7 35 0c d4 02 c0    	div    DWORD PTR ds:0xc002d40c
c0011d99:	c1 e8 05             	shr    eax,0x5
c0011d9c:	50                   	push   eax
c0011d9d:	68 8a a7 02 c0       	push   0xc002a78a
c0011da2:	e8 38 11 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0011da7:	a1 10 d4 02 c0       	mov    eax,ds:0xc002d410
c0011dac:	31 d2                	xor    edx,edx
c0011dae:	f7 35 0c d4 02 c0    	div    DWORD PTR ds:0xc002d40c
c0011db4:	c1 e8 05             	shr    eax,0x5
c0011db7:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dba:	e8 8c da ff ff       	call   c000f84b <malloc>
c0011dbf:	83 c4 0c             	add    esp,0xc
c0011dc2:	89 c1                	mov    ecx,eax
c0011dc4:	a3 ec e5 02 c0       	mov    ds:0xc002e5ec,eax
c0011dc9:	31 d2                	xor    edx,edx
c0011dcb:	a1 10 d4 02 c0       	mov    eax,ds:0xc002d410
c0011dd0:	f7 35 0c d4 02 c0    	div    DWORD PTR ds:0xc002d40c
c0011dd6:	c1 e8 05             	shr    eax,0x5
c0011dd9:	50                   	push   eax
c0011dda:	6a 00                	push   0x0
c0011ddc:	51                   	push   ecx
c0011ddd:	e8 9e e9 fe ff       	call   c0000780 <memset>
c0011de2:	83 c4 1c             	add    esp,0x1c
c0011de5:	c3                   	ret    

c0011de6 <Virt::getAKernelVAS()>:
c0011de6:	a1 f0 e5 02 c0       	mov    eax,ds:0xc002e5f0
c0011deb:	c3                   	ret    

c0011dec <Virt::setupPageSwapping(int)>:
c0011dec:	57                   	push   edi
c0011ded:	56                   	push   esi
c0011dee:	53                   	push   ebx
c0011def:	83 ec 1c             	sub    esp,0x1c
c0011df2:	68 14 01 00 00       	push   0x114
c0011df7:	e8 4f da ff ff       	call   c000f84b <malloc>
c0011dfc:	83 c4 0c             	add    esp,0xc
c0011dff:	89 c6                	mov    esi,eax
c0011e01:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c0011e07:	68 a5 a7 02 c0       	push   0xc002a7a5
c0011e0c:	50                   	push   eax
c0011e0d:	e8 26 16 00 00       	call   c0013438 <File::File(char const*, Process*)>
c0011e12:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e15:	e8 fa 17 00 00       	call   c0013614 <File::unlink()>
c0011e1a:	58                   	pop    eax
c0011e1b:	5a                   	pop    edx
c0011e1c:	6a 12                	push   0x12
c0011e1e:	56                   	push   esi
c0011e1f:	e8 78 16 00 00       	call   c001349c <File::open(FileOpenMode)>
c0011e24:	83 c4 10             	add    esp,0x10
c0011e27:	85 c0                	test   eax,eax
c0011e29:	0f 85 ca 00 00 00    	jne    c0011ef9 <Virt::setupPageSwapping(int)+0x10d>
c0011e2f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e33:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e3b:	c1 e3 08             	shl    ebx,0x8
c0011e3e:	83 ec 0c             	sub    esp,0xc
c0011e41:	68 00 00 01 00       	push   0x10000
c0011e46:	e8 00 da ff ff       	call   c000f84b <malloc>
c0011e4b:	83 c4 0c             	add    esp,0xc
c0011e4e:	89 c7                	mov    edi,eax
c0011e50:	68 00 00 01 00       	push   0x10000
c0011e55:	6a 00                	push   0x0
c0011e57:	50                   	push   eax
c0011e58:	e8 23 e9 fe ff       	call   c0000780 <memset>
c0011e5d:	83 c4 10             	add    esp,0x10
c0011e60:	85 db                	test   ebx,ebx
c0011e62:	79 03                	jns    c0011e67 <Virt::setupPageSwapping(int)+0x7b>
c0011e64:	83 c3 0f             	add    ebx,0xf
c0011e67:	c1 fb 04             	sar    ebx,0x4
c0011e6a:	4b                   	dec    ebx
c0011e6b:	83 fb ff             	cmp    ebx,0xffffffff
c0011e6e:	74 4b                	je     c0011ebb <Virt::setupPageSwapping(int)+0xcf>
c0011e70:	83 ec 0c             	sub    esp,0xc
c0011e73:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e75:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011e79:	52                   	push   edx
c0011e7a:	57                   	push   edi
c0011e7b:	6a 00                	push   0x0
c0011e7d:	68 00 00 01 00       	push   0x10000
c0011e82:	56                   	push   esi
c0011e83:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011e86:	83 c4 20             	add    esp,0x20
c0011e89:	85 c0                	test   eax,eax
c0011e8b:	75 59                	jne    c0011ee6 <Virt::setupPageSwapping(int)+0xfa>
c0011e8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e91:	3d 00 00 01 00       	cmp    eax,0x10000
c0011e96:	74 d2                	je     c0011e6a <Virt::setupPageSwapping(int)+0x7e>
c0011e98:	83 ec 08             	sub    esp,0x8
c0011e9b:	4b                   	dec    ebx
c0011e9c:	50                   	push   eax
c0011e9d:	68 f8 a7 02 c0       	push   0xc002a7f8
c0011ea2:	e8 38 10 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0011ea7:	c7 04 24 01 a8 02 c0 	mov    DWORD PTR [esp],0xc002a801
c0011eae:	e8 58 87 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0011eb3:	83 c4 10             	add    esp,0x10
c0011eb6:	83 fb ff             	cmp    ebx,0xffffffff
c0011eb9:	75 b5                	jne    c0011e70 <Virt::setupPageSwapping(int)+0x84>
c0011ebb:	83 ec 0c             	sub    esp,0xc
c0011ebe:	56                   	push   esi
c0011ebf:	e8 36 16 00 00       	call   c00134fa <File::close()>
c0011ec4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ec7:	e8 9f d9 ff ff       	call   c000f86b <rfree>
c0011ecc:	83 c4 10             	add    esp,0x10
c0011ecf:	85 f6                	test   esi,esi
c0011ed1:	74 0c                	je     c0011edf <Virt::setupPageSwapping(int)+0xf3>
c0011ed3:	83 ec 0c             	sub    esp,0xc
c0011ed6:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ed8:	56                   	push   esi
c0011ed9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011edc:	83 c4 10             	add    esp,0x10
c0011edf:	83 c4 10             	add    esp,0x10
c0011ee2:	5b                   	pop    ebx
c0011ee3:	5e                   	pop    esi
c0011ee4:	5f                   	pop    edi
c0011ee5:	c3                   	ret    
c0011ee6:	83 ec 08             	sub    esp,0x8
c0011ee9:	50                   	push   eax
c0011eea:	68 e0 a7 02 c0       	push   0xc002a7e0
c0011eef:	e8 eb 0f 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0011ef4:	83 c4 10             	add    esp,0x10
c0011ef7:	eb 94                	jmp    c0011e8d <Virt::setupPageSwapping(int)+0xa1>
c0011ef9:	83 ec 08             	sub    esp,0x8
c0011efc:	50                   	push   eax
c0011efd:	68 bc a7 02 c0       	push   0xc002a7bc
c0011f02:	e8 d8 0f 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0011f07:	c7 04 24 c5 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7c5
c0011f0e:	e8 f8 86 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0011f13:	83 c4 10             	add    esp,0x10
c0011f16:	e9 14 ff ff ff       	jmp    c0011e2f <Virt::setupPageSwapping(int)+0x43>
c0011f1b:	90                   	nop

c0011f1c <VAS::VAS()>:
c0011f1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f20:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f2b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f36:	a3 f0 e5 02 c0       	mov    ds:0xc002e5f0,eax
c0011f3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f3f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f47:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f4e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011f55:	90                   	nop
c0011f56:	c3                   	ret    
c0011f57:	90                   	nop

c0011f58 <VAS::VAS(VAS*)>:
c0011f58:	83 ec 0c             	sub    esp,0xc
c0011f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f5f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f6a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f71:	83 ec 0c             	sub    esp,0xc
c0011f74:	68 e4 a5 02 c0       	push   0xc002a5e4
c0011f79:	e8 8d 86 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0011f7e:	83 c4 10             	add    esp,0x10
c0011f81:	90                   	nop
c0011f82:	83 c4 0c             	add    esp,0xc
c0011f85:	c3                   	ret    

c0011f86 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011f86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f8a:	89 c2                	mov    edx,eax
c0011f8c:	c1 e8 0a             	shr    eax,0xa
c0011f8f:	c1 ea 16             	shr    edx,0x16
c0011f92:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011f97:	19 c9                	sbb    ecx,ecx
c0011f99:	c1 e2 0c             	shl    edx,0xc
c0011f9c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fa2:	25 fc 0f 00 00       	and    eax,0xffc
c0011fa7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fae:	01 d0                	add    eax,edx
c0011fb0:	c3                   	ret    
c0011fb1:	90                   	nop

c0011fb2 <VAS::getPageTableEntry(unsigned long)>:
c0011fb2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fb6:	89 ca                	mov    edx,ecx
c0011fb8:	c1 e9 0a             	shr    ecx,0xa
c0011fbb:	c1 ea 16             	shr    edx,0x16
c0011fbe:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011fc4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011fca:	c1 e0 0c             	shl    eax,0xc
c0011fcd:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011fd0:	c3                   	ret    

c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011fd1:	57                   	push   edi
c0011fd2:	56                   	push   esi
c0011fd3:	be 01 00 00 00       	mov    esi,0x1
c0011fd8:	53                   	push   ebx
c0011fd9:	83 ec 10             	sub    esp,0x10
c0011fdc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fe0:	c1 eb 0c             	shr    ebx,0xc
c0011fe3:	eb 3f                	jmp    c0012024 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011fe5:	e8 fc fd ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0011fea:	83 ec 08             	sub    esp,0x8
c0011fed:	57                   	push   edi
c0011fee:	50                   	push   eax
c0011fef:	e8 be ff ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c0011ff4:	83 c4 10             	add    esp,0x10
c0011ff7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ff9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ffd:	f6 c4 04             	test   ah,0x4
c0012000:	75 5f                	jne    c0012061 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012002:	80 fa 04             	cmp    dl,0x4
c0012005:	74 78                	je     c001207f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012007:	80 fa 02             	cmp    dl,0x2
c001200a:	0f 84 88 00 00 00    	je     c0012098 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012010:	80 fa 03             	cmp    dl,0x3
c0012013:	0f 84 ad 00 00 00    	je     c00120c6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012019:	fe ca                	dec    dl
c001201b:	0f 84 92 00 00 00    	je     c00120b3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012021:	43                   	inc    ebx
c0012022:	31 f6                	xor    esi,esi
c0012024:	53                   	push   ebx
c0012025:	e8 fd fa ff ff       	call   c0011b27 <Virt::getPageState(unsigned long)>
c001202a:	5f                   	pop    edi
c001202b:	89 df                	mov    edi,ebx
c001202d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012031:	c1 e7 0c             	shl    edi,0xc
c0012034:	84 c0                	test   al,al
c0012036:	75 ad                	jne    c0011fe5 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012038:	83 ec 0c             	sub    esp,0xc
c001203b:	68 07 a8 02 c0       	push   0xc002a807
c0012040:	e8 c6 85 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0012045:	e8 9c fd ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001204a:	5a                   	pop    edx
c001204b:	59                   	pop    ecx
c001204c:	57                   	push   edi
c001204d:	50                   	push   eax
c001204e:	e8 5f ff ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c0012053:	83 c4 10             	add    esp,0x10
c0012056:	8b 00                	mov    eax,DWORD PTR [eax]
c0012058:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001205c:	f6 c4 04             	test   ah,0x4
c001205f:	74 c0                	je     c0012021 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012061:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0012065:	25 00 f0 ff ff       	and    eax,0xfffff000
c001206a:	83 ec 0c             	sub    esp,0xc
c001206d:	50                   	push   eax
c001206e:	e8 f0 dd ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c0012073:	83 c4 10             	add    esp,0x10
c0012076:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001207a:	80 fa 04             	cmp    dl,0x4
c001207d:	75 88                	jne    c0012007 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c001207f:	89 f0                	mov    eax,esi
c0012081:	84 c0                	test   al,al
c0012083:	75 47                	jne    c00120cc <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0012085:	c7 44 24 20 08 a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a608
c001208d:	83 c4 10             	add    esp,0x10
c0012090:	5b                   	pop    ebx
c0012091:	5e                   	pop    esi
c0012092:	5f                   	pop    edi
c0012093:	e9 73 85 00 00       	jmp    c001a60b <Krnl::panic(char const*)>
c0012098:	89 f0                	mov    eax,esi
c001209a:	84 c0                	test   al,al
c001209c:	75 15                	jne    c00120b3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001209e:	83 ec 0c             	sub    esp,0xc
c00120a1:	68 23 a8 02 c0       	push   0xc002a823
c00120a6:	e8 60 85 00 00       	call   c001a60b <Krnl::panic(char const*)>
c00120ab:	83 c4 10             	add    esp,0x10
c00120ae:	e9 6e ff ff ff       	jmp    c0012021 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120b3:	83 ec 08             	sub    esp,0x8
c00120b6:	6a 00                	push   0x0
c00120b8:	53                   	push   ebx
c00120b9:	e8 34 fa ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120be:	83 c4 10             	add    esp,0x10
c00120c1:	e9 5b ff ff ff       	jmp    c0012021 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120c6:	89 f0                	mov    eax,esi
c00120c8:	84 c0                	test   al,al
c00120ca:	75 15                	jne    c00120e1 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120cc:	83 ec 08             	sub    esp,0x8
c00120cf:	6a 00                	push   0x0
c00120d1:	53                   	push   ebx
c00120d2:	e8 1b fa ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120d7:	83 c4 10             	add    esp,0x10
c00120da:	83 c4 10             	add    esp,0x10
c00120dd:	5b                   	pop    ebx
c00120de:	5e                   	pop    esi
c00120df:	5f                   	pop    edi
c00120e0:	c3                   	ret    
c00120e1:	c7 44 24 20 3f a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a83f
c00120e9:	83 c4 10             	add    esp,0x10
c00120ec:	5b                   	pop    ebx
c00120ed:	5e                   	pop    esi
c00120ee:	5f                   	pop    edi
c00120ef:	e9 17 85 00 00       	jmp    c001a60b <Krnl::panic(char const*)>

c00120f4 <VAS::freeAllocatedPages(unsigned long)>:
c00120f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120fc:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012100:	74 09                	je     c001210b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012102:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012106:	e9 c6 fe ff ff       	jmp    c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)>
c001210b:	c7 44 24 04 2c a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a62c
c0012113:	e9 c7 0d 00 00       	jmp    c0012edf <Dbg::kprintf(char const*, ...)>

c0012118 <VAS::virtualToPhysical(unsigned long)>:
c0012118:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001211c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012120:	e8 8d fe ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c0012125:	5a                   	pop    edx
c0012126:	8b 00                	mov    eax,DWORD PTR [eax]
c0012128:	59                   	pop    ecx
c0012129:	25 00 f0 ff ff       	and    eax,0xfffff000
c001212e:	c3                   	ret    
c001212f:	90                   	nop

c0012130 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012130:	55                   	push   ebp
c0012131:	57                   	push   edi
c0012132:	56                   	push   esi
c0012133:	53                   	push   ebx
c0012134:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012138:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001213c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012140:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012144:	85 db                	test   ebx,ebx
c0012146:	7e 22                	jle    c001216a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012148:	c1 e3 0c             	shl    ebx,0xc
c001214b:	01 f3                	add    ebx,esi
c001214d:	56                   	push   esi
c001214e:	81 c6 00 10 00 00    	add    esi,0x1000
c0012154:	55                   	push   ebp
c0012155:	e8 58 fe ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c001215a:	5a                   	pop    edx
c001215b:	59                   	pop    ecx
c001215c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001215e:	21 f9                	and    ecx,edi
c0012160:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012164:	39 f3                	cmp    ebx,esi
c0012166:	89 08                	mov    DWORD PTR [eax],ecx
c0012168:	75 e3                	jne    c001214d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001216a:	5b                   	pop    ebx
c001216b:	5e                   	pop    esi
c001216c:	5f                   	pop    edi
c001216d:	5d                   	pop    ebp
c001216e:	c3                   	ret    
c001216f:	90                   	nop

c0012170 <VAS::setToWriteCombining(unsigned long, int)>:
c0012170:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0012175:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001217b:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012182:	75 01                	jne    c0012185 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012184:	c3                   	ret    
c0012185:	68 80 00 00 00       	push   0x80
c001218a:	6a ff                	push   0xffffffff
c001218c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012190:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012194:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012198:	e8 93 ff ff ff       	call   c0012130 <VAS::reflagRange(unsigned long, int, int, int)>
c001219d:	83 c4 14             	add    esp,0x14
c00121a0:	c3                   	ret    
c00121a1:	90                   	nop

c00121a2 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121a2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121ab:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00121ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121b2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00121b5:	19 c0                	sbb    eax,eax
c00121b7:	83 ca 03             	or     edx,0x3
c00121ba:	83 e0 fc             	and    eax,0xfffffffc
c00121bd:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121c4:	0f 20 d8             	mov    eax,cr3
c00121c7:	0f 22 d8             	mov    cr3,eax
c00121ca:	c3                   	ret    
c00121cb:	90                   	nop

c00121cc <VAS::~VAS()>:
c00121cc:	83 ec 2c             	sub    esp,0x2c
c00121cf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00121d7:	e8 0a bc 00 00       	call   c001dde6 <lockScheduler()>
c00121dc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00121e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121e6:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121ec:	83 ec 04             	sub    esp,0x4
c00121ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00121f3:	6a 01                	push   0x1
c00121f5:	50                   	push   eax
c00121f6:	e8 a7 ff ff ff       	call   c00121a2 <VAS::mapOtherVASIn(bool, VAS*)>
c00121fb:	83 c4 10             	add    esp,0x10
c00121fe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012206:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001220e:	0f 8f d7 00 00 00    	jg     c00122eb <VAS::~VAS()+0x11f>
c0012214:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012218:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001221b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001221f:	c1 e2 02             	shl    edx,0x2
c0012222:	01 d0                	add    eax,edx
c0012224:	8b 00                	mov    eax,DWORD PTR [eax]
c0012226:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001222a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001222e:	83 e0 01             	and    eax,0x1
c0012231:	0f 84 ab 00 00 00    	je     c00122e2 <VAS::~VAS()+0x116>
c0012237:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001223f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012247:	7f 75                	jg     c00122be <VAS::~VAS()+0xf2>
c0012249:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001224d:	c1 e0 0a             	shl    eax,0xa
c0012250:	89 c2                	mov    edx,eax
c0012252:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012256:	01 d0                	add    eax,edx
c0012258:	c1 e0 0c             	shl    eax,0xc
c001225b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001225f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012264:	8b 00                	mov    eax,DWORD PTR [eax]
c0012266:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012269:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001226f:	83 ec 04             	sub    esp,0x4
c0012272:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012276:	6a 01                	push   0x1
c0012278:	50                   	push   eax
c0012279:	e8 08 fd ff ff       	call   c0011f86 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001227e:	83 c4 10             	add    esp,0x10
c0012281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012285:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012289:	8b 00                	mov    eax,DWORD PTR [eax]
c001228b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001228f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012293:	25 01 04 00 00       	and    eax,0x401
c0012298:	3d 01 04 00 00       	cmp    eax,0x401
c001229d:	75 19                	jne    c00122b8 <VAS::~VAS()+0xec>
c001229f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122a8:	83 ec 0c             	sub    esp,0xc
c00122ab:	50                   	push   eax
c00122ac:	e8 b2 db ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c00122b1:	83 c4 10             	add    esp,0x10
c00122b4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122b8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122bc:	eb 81                	jmp    c001223f <VAS::~VAS()+0x73>
c00122be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122c2:	25 00 04 00 00       	and    eax,0x400
c00122c7:	74 19                	je     c00122e2 <VAS::~VAS()+0x116>
c00122c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122d2:	83 ec 0c             	sub    esp,0xc
c00122d5:	50                   	push   eax
c00122d6:	e8 88 db ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c00122db:	83 c4 10             	add    esp,0x10
c00122de:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122e2:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122e6:	e9 1b ff ff ff       	jmp    c0012206 <VAS::~VAS()+0x3a>
c00122eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122f2:	83 ec 0c             	sub    esp,0xc
c00122f5:	50                   	push   eax
c00122f6:	e8 d6 fc ff ff       	call   c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)>
c00122fb:	83 c4 10             	add    esp,0x10
c00122fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012302:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012305:	83 ec 0c             	sub    esp,0xc
c0012308:	50                   	push   eax
c0012309:	e8 55 db ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c001230e:	83 c4 10             	add    esp,0x10
c0012311:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012315:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012319:	c1 e0 02             	shl    eax,0x2
c001231c:	83 ec 08             	sub    esp,0x8
c001231f:	50                   	push   eax
c0012320:	68 50 a6 02 c0       	push   0xc002a650
c0012325:	e8 b5 0b 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001232a:	83 c4 10             	add    esp,0x10
c001232d:	e8 b6 ba 00 00       	call   c001dde8 <unlockScheduler()>
c0012332:	90                   	nop
c0012333:	83 c4 2c             	add    esp,0x2c
c0012336:	c3                   	ret    
c0012337:	90                   	nop

c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012338:	55                   	push   ebp
c0012339:	57                   	push   edi
c001233a:	56                   	push   esi
c001233b:	53                   	push   ebx
c001233c:	83 ec 1c             	sub    esp,0x1c
c001233f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012343:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012347:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001234d:	77 08                	ja     c0012357 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001234f:	0f 20 d8             	mov    eax,cr3
c0012352:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012355:	75 47                	jne    c001239e <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012357:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001235b:	09 d8                	or     eax,ebx
c001235d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012362:	75 57                	jne    c00123bb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012364:	89 de                	mov    esi,ebx
c0012366:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012369:	c1 ee 16             	shr    esi,0x16
c001236c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012373:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012377:	74 54                	je     c00123cd <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012379:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001237d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012383:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012387:	c1 e6 0c             	shl    esi,0xc
c001238a:	c1 eb 0a             	shr    ebx,0xa
c001238d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012393:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012396:	83 c4 1c             	add    esp,0x1c
c0012399:	5b                   	pop    ebx
c001239a:	5e                   	pop    esi
c001239b:	5f                   	pop    edi
c001239c:	5d                   	pop    ebp
c001239d:	c3                   	ret    
c001239e:	83 ec 0c             	sub    esp,0xc
c00123a1:	68 70 a6 02 c0       	push   0xc002a670
c00123a6:	e8 34 0b 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00123ab:	83 c4 10             	add    esp,0x10
c00123ae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123b2:	09 d8                	or     eax,ebx
c00123b4:	a9 ff 0f 00 00       	test   eax,0xfff
c00123b9:	74 a9                	je     c0012364 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123bb:	83 ec 0c             	sub    esp,0xc
c00123be:	68 d8 a6 02 c0       	push   0xc002a6d8
c00123c3:	e8 43 82 00 00       	call   c001a60b <Krnl::panic(char const*)>
c00123c8:	83 c4 10             	add    esp,0x10
c00123cb:	eb 97                	jmp    c0012364 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123d1:	e8 17 db ff ff       	call   c000feed <Phys::allocatePage()>
c00123d6:	89 c5                	mov    ebp,eax
c00123d8:	e8 09 fa ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c00123dd:	83 ec 0c             	sub    esp,0xc
c00123e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00123e4:	6a 01                	push   0x1
c00123e6:	e8 60 f7 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c00123eb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00123f2:	6a 01                	push   0x1
c00123f4:	50                   	push   eax
c00123f5:	55                   	push   ebp
c00123f6:	81 cd 07 04 00 00    	or     ebp,0x407
c00123fc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012400:	51                   	push   ecx
c0012401:	e8 26 02 00 00       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012406:	83 c4 1c             	add    esp,0x1c
c0012409:	68 00 10 00 00       	push   0x1000
c001240e:	6a 00                	push   0x0
c0012410:	50                   	push   eax
c0012411:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012415:	e8 66 e3 fe ff       	call   c0000780 <memset>
c001241a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001241e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012421:	e8 ab fb ff ff       	call   c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)>
c0012426:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001242a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001242d:	83 c4 10             	add    esp,0x10
c0012430:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012433:	e9 41 ff ff ff       	jmp    c0012379 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012438 <VAS::allocatePages(int, int)>:
c0012438:	55                   	push   ebp
c0012439:	57                   	push   edi
c001243a:	56                   	push   esi
c001243b:	53                   	push   ebx
c001243c:	83 ec 1c             	sub    esp,0x1c
c001243f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012443:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0012448:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001244e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012454:	83 e0 01             	and    eax,0x1
c0012457:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001245b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001245f:	0f 85 cc 00 00 00    	jne    c0012531 <VAS::allocatePages(int, int)+0xf9>
c0012465:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012468:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001246c:	85 c0                	test   eax,eax
c001246e:	0f 84 a1 00 00 00    	je     c0012515 <VAS::allocatePages(int, int)+0xdd>
c0012474:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012478:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001247c:	c1 e6 0c             	shl    esi,0xc
c001247f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012483:	85 c0                	test   eax,eax
c0012485:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012488:	7e 33                	jle    c00124bd <VAS::allocatePages(int, int)+0x85>
c001248a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001248e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012492:	81 cd 00 04 00 00    	or     ebp,0x400
c0012498:	e8 50 da ff ff       	call   c000feed <Phys::allocatePage()>
c001249d:	55                   	push   ebp
c001249e:	53                   	push   ebx
c001249f:	50                   	push   eax
c00124a0:	57                   	push   edi
c00124a1:	e8 92 fe ff ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124a6:	83 c4 10             	add    esp,0x10
c00124a9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ae:	74 03                	je     c00124b3 <VAS::allocatePages(int, int)+0x7b>
c00124b0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124b9:	39 de                	cmp    esi,ebx
c00124bb:	75 db                	jne    c0012498 <VAS::allocatePages(int, int)+0x60>
c00124bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124c2:	75 12                	jne    c00124d6 <VAS::allocatePages(int, int)+0x9e>
c00124c4:	0f 20 d8             	mov    eax,cr3
c00124c7:	0f 22 d8             	mov    cr3,eax
c00124ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124ce:	83 c4 1c             	add    esp,0x1c
c00124d1:	5b                   	pop    ebx
c00124d2:	5e                   	pop    esi
c00124d3:	5f                   	pop    edi
c00124d4:	5d                   	pop    ebp
c00124d5:	c3                   	ret    
c00124d6:	c1 ee 0a             	shr    esi,0xa
c00124d9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124dd:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00124e3:	c1 eb 0a             	shr    ebx,0xa
c00124e6:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00124ec:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124f2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124f8:	39 c3                	cmp    ebx,eax
c00124fa:	77 ce                	ja     c00124ca <VAS::allocatePages(int, int)+0x92>
c00124fc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124ff:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012505:	39 d8                	cmp    eax,ebx
c0012507:	73 f3                	jae    c00124fc <VAS::allocatePages(int, int)+0xc4>
c0012509:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001250d:	83 c4 1c             	add    esp,0x1c
c0012510:	5b                   	pop    ebx
c0012511:	5e                   	pop    esi
c0012512:	5f                   	pop    edi
c0012513:	5d                   	pop    ebp
c0012514:	c3                   	ret    
c0012515:	83 ec 0c             	sub    esp,0xc
c0012518:	68 fc a6 02 c0       	push   0xc002a6fc
c001251d:	e8 e9 80 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0012522:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012525:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012529:	83 c4 10             	add    esp,0x10
c001252c:	e9 43 ff ff ff       	jmp    c0012474 <VAS::allocatePages(int, int)+0x3c>
c0012531:	83 ec 0c             	sub    esp,0xc
c0012534:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012538:	e8 0e f6 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c001253d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012541:	83 c4 10             	add    esp,0x10
c0012544:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012549:	0f 87 9b 00 00 00    	ja     c00125ea <VAS::allocatePages(int, int)+0x1b2>
c001254f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012553:	85 d2                	test   edx,edx
c0012555:	7e 3c                	jle    c0012593 <VAS::allocatePages(int, int)+0x15b>
c0012557:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001255b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001255f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012563:	c1 e5 0c             	shl    ebp,0xc
c0012566:	81 ce 00 04 00 00    	or     esi,0x400
c001256c:	01 dd                	add    ebp,ebx
c001256e:	e8 7a d9 ff ff       	call   c000feed <Phys::allocatePage()>
c0012573:	56                   	push   esi
c0012574:	53                   	push   ebx
c0012575:	50                   	push   eax
c0012576:	57                   	push   edi
c0012577:	e8 bc fd ff ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c001257c:	83 c4 10             	add    esp,0x10
c001257f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012584:	74 03                	je     c0012589 <VAS::allocatePages(int, int)+0x151>
c0012586:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012589:	81 c3 00 10 00 00    	add    ebx,0x1000
c001258f:	39 dd                	cmp    ebp,ebx
c0012591:	75 db                	jne    c001256e <VAS::allocatePages(int, int)+0x136>
c0012593:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012598:	0f 84 26 ff ff ff    	je     c00124c4 <VAS::allocatePages(int, int)+0x8c>
c001259e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125a6:	89 d3                	mov    ebx,edx
c00125a8:	c1 e0 0c             	shl    eax,0xc
c00125ab:	c1 eb 0a             	shr    ebx,0xa
c00125ae:	01 d0                	add    eax,edx
c00125b0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125b6:	c1 e8 0a             	shr    eax,0xa
c00125b9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125bf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125c4:	2d 00 00 40 00       	sub    eax,0x400000
c00125c9:	39 c3                	cmp    ebx,eax
c00125cb:	0f 87 f9 fe ff ff    	ja     c00124ca <VAS::allocatePages(int, int)+0x92>
c00125d1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125d4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125da:	39 d8                	cmp    eax,ebx
c00125dc:	73 f3                	jae    c00125d1 <VAS::allocatePages(int, int)+0x199>
c00125de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125e2:	83 c4 1c             	add    esp,0x1c
c00125e5:	5b                   	pop    ebx
c00125e6:	5e                   	pop    esi
c00125e7:	5f                   	pop    edi
c00125e8:	5d                   	pop    ebp
c00125e9:	c3                   	ret    
c00125ea:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00125ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125f5:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00125fc:	0f 84 4d ff ff ff    	je     c001254f <VAS::allocatePages(int, int)+0x117>
c0012602:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001260a:	e9 40 ff ff ff       	jmp    c001254f <VAS::allocatePages(int, int)+0x117>
c001260f:	90                   	nop

c0012610 <VAS::setCPUSpecific(unsigned long)>:
c0012610:	83 ec 0c             	sub    esp,0xc
c0012613:	6a 05                	push   0x5
c0012615:	68 00 00 40 c2       	push   0xc2400000
c001261a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001261e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012622:	e8 11 fd ff ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012627:	83 c4 1c             	add    esp,0x1c
c001262a:	c3                   	ret    
c001262b:	90                   	nop

c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001262c:	55                   	push   ebp
c001262d:	57                   	push   edi
c001262e:	56                   	push   esi
c001262f:	53                   	push   ebx
c0012630:	83 ec 1c             	sub    esp,0x1c
c0012633:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0012638:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001263c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012642:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012646:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001264c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012650:	83 e0 01             	and    eax,0x1
c0012653:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012657:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001265b:	85 c0                	test   eax,eax
c001265d:	7e 39                	jle    c0012698 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001265f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012663:	89 f3                	mov    ebx,esi
c0012665:	c1 e0 0c             	shl    eax,0xc
c0012668:	01 f0                	add    eax,esi
c001266a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001266e:	55                   	push   ebp
c001266f:	53                   	push   ebx
c0012670:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012674:	29 f0                	sub    eax,esi
c0012676:	01 d8                	add    eax,ebx
c0012678:	50                   	push   eax
c0012679:	57                   	push   edi
c001267a:	e8 b9 fc ff ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c001267f:	83 c4 10             	add    esp,0x10
c0012682:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012687:	74 03                	je     c001268c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012689:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001268c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012692:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012696:	75 d6                	jne    c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012698:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001269d:	75 10                	jne    c00126af <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001269f:	0f 20 d8             	mov    eax,cr3
c00126a2:	0f 22 d8             	mov    cr3,eax
c00126a5:	83 c4 1c             	add    esp,0x1c
c00126a8:	89 f0                	mov    eax,esi
c00126aa:	5b                   	pop    ebx
c00126ab:	5e                   	pop    esi
c00126ac:	5f                   	pop    edi
c00126ad:	5d                   	pop    ebp
c00126ae:	c3                   	ret    
c00126af:	89 f3                	mov    ebx,esi
c00126b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b5:	c1 eb 0a             	shr    ebx,0xa
c00126b8:	c1 e0 0c             	shl    eax,0xc
c00126bb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126c1:	01 f0                	add    eax,esi
c00126c3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126c9:	c1 e8 0a             	shr    eax,0xa
c00126cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126d1:	2d 00 00 40 00       	sub    eax,0x400000
c00126d6:	39 c3                	cmp    ebx,eax
c00126d8:	77 cb                	ja     c00126a5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00126da:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126dd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126e3:	39 d8                	cmp    eax,ebx
c00126e5:	73 f3                	jae    c00126da <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00126e7:	83 c4 1c             	add    esp,0x1c
c00126ea:	89 f0                	mov    eax,esi
c00126ec:	5b                   	pop    ebx
c00126ed:	5e                   	pop    esi
c00126ee:	5f                   	pop    edi
c00126ef:	5d                   	pop    ebp
c00126f0:	c3                   	ret    
c00126f1:	90                   	nop

c00126f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00126f2:	55                   	push   ebp
c00126f3:	57                   	push   edi
c00126f4:	56                   	push   esi
c00126f5:	53                   	push   ebx
c00126f6:	83 ec 1c             	sub    esp,0x1c
c00126f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126fd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012701:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012705:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012709:	a9 ff 0f 00 00       	test   eax,0xfff
c001270e:	75 4a                	jne    c001275a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012710:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012714:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012717:	c1 eb 16             	shr    ebx,0x16
c001271a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012721:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012725:	74 4d                	je     c0012774 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012727:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001272b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001272f:	c1 e8 0a             	shr    eax,0xa
c0012732:	80 fa 01             	cmp    dl,0x1
c0012735:	19 d2                	sbb    edx,edx
c0012737:	c1 e3 0c             	shl    ebx,0xc
c001273a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001273e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012744:	25 fc 0f 00 00       	and    eax,0xffc
c0012749:	01 d8                	add    eax,ebx
c001274b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012752:	83 c4 1c             	add    esp,0x1c
c0012755:	5b                   	pop    ebx
c0012756:	5e                   	pop    esi
c0012757:	5f                   	pop    edi
c0012758:	5d                   	pop    ebp
c0012759:	c3                   	ret    
c001275a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001275e:	83 ec 0c             	sub    esp,0xc
c0012761:	68 28 a7 02 c0       	push   0xc002a728
c0012766:	e8 a0 7e 00 00       	call   c001a60b <Krnl::panic(char const*)>
c001276b:	83 c4 10             	add    esp,0x10
c001276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012772:	eb 9c                	jmp    c0012710 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012774:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012778:	e8 70 d7 ff ff       	call   c000feed <Phys::allocatePage()>
c001277d:	89 c5                	mov    ebp,eax
c001277f:	e8 62 f6 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0012784:	83 ec 0c             	sub    esp,0xc
c0012787:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001278b:	6a 01                	push   0x1
c001278d:	e8 b9 f3 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0012792:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012799:	6a 01                	push   0x1
c001279b:	50                   	push   eax
c001279c:	55                   	push   ebp
c001279d:	81 cd 07 04 00 00    	or     ebp,0x407
c00127a3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127a7:	51                   	push   ecx
c00127a8:	e8 7f fe ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127ad:	83 c4 1c             	add    esp,0x1c
c00127b0:	68 00 10 00 00       	push   0x1000
c00127b5:	6a 00                	push   0x0
c00127b7:	50                   	push   eax
c00127b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127bc:	e8 bf df fe ff       	call   c0000780 <memset>
c00127c1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127c5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127c8:	e8 04 f8 ff ff       	call   c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)>
c00127cd:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00127d0:	83 c4 10             	add    esp,0x10
c00127d3:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00127d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127da:	e9 48 ff ff ff       	jmp    c0012727 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00127df:	90                   	nop

c00127e0 <VAS::VAS(bool)>:
c00127e0:	53                   	push   ebx
c00127e1:	83 ec 28             	sub    esp,0x28
c00127e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00127ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00127f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127fb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012802:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012806:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001280a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001280d:	e8 db d6 ff ff       	call   c000feed <Phys::allocatePage()>
c0012812:	89 c2                	mov    edx,eax
c0012814:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012818:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001281b:	e8 c6 f5 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0012820:	89 c3                	mov    ebx,eax
c0012822:	83 ec 0c             	sub    esp,0xc
c0012825:	6a 01                	push   0x1
c0012827:	e8 1f f3 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c001282c:	83 c4 10             	add    esp,0x10
c001282f:	89 c2                	mov    edx,eax
c0012831:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012835:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012838:	83 ec 0c             	sub    esp,0xc
c001283b:	6a 03                	push   0x3
c001283d:	6a 01                	push   0x1
c001283f:	52                   	push   edx
c0012840:	50                   	push   eax
c0012841:	53                   	push   ebx
c0012842:	e8 e5 fd ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012847:	83 c4 20             	add    esp,0x20
c001284a:	89 c2                	mov    edx,eax
c001284c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012850:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012853:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001285b:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012863:	7f 1c                	jg     c0012881 <VAS::VAS(bool)+0xa1>
c0012865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012869:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001286c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012870:	c1 e2 02             	shl    edx,0x2
c0012873:	01 d0                	add    eax,edx
c0012875:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001287b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001287f:	eb da                	jmp    c001285b <VAS::VAS(bool)+0x7b>
c0012881:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012889:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012891:	7f 7a                	jg     c001290d <VAS::VAS(bool)+0x12d>
c0012893:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012897:	2d 00 02 00 00       	sub    eax,0x200
c001289c:	c1 e0 0c             	shl    eax,0xc
c001289f:	83 c8 03             	or     eax,0x3
c00128a2:	89 c2                	mov    edx,eax
c00128a4:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00128a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128af:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128b5:	83 e0 10             	and    eax,0x10
c00128b8:	84 c0                	test   al,al
c00128ba:	74 07                	je     c00128c3 <VAS::VAS(bool)+0xe3>
c00128bc:	b8 00 01 00 00       	mov    eax,0x100
c00128c1:	eb 05                	jmp    c00128c8 <VAS::VAS(bool)+0xe8>
c00128c3:	b8 00 00 00 00       	mov    eax,0x0
c00128c8:	09 d0                	or     eax,edx
c00128ca:	89 c1                	mov    ecx,eax
c00128cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128d7:	c1 e2 02             	shl    edx,0x2
c00128da:	01 d0                	add    eax,edx
c00128dc:	89 ca                	mov    edx,ecx
c00128de:	89 10                	mov    DWORD PTR [eax],edx
c00128e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128e4:	2d 40 03 00 00       	sub    eax,0x340
c00128e9:	83 f8 7f             	cmp    eax,0x7f
c00128ec:	77 16                	ja     c0012904 <VAS::VAS(bool)+0x124>
c00128ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128f9:	c1 e2 02             	shl    edx,0x2
c00128fc:	01 d0                	add    eax,edx
c00128fe:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012904:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012908:	e9 7c ff ff ff       	jmp    c0012889 <VAS::VAS(bool)+0xa9>
c001290d:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0012912:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012918:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001291e:	83 e0 10             	and    eax,0x10
c0012921:	84 c0                	test   al,al
c0012923:	74 07                	je     c001292c <VAS::VAS(bool)+0x14c>
c0012925:	b8 03 41 00 00       	mov    eax,0x4103
c001292a:	eb 05                	jmp    c0012931 <VAS::VAS(bool)+0x151>
c001292c:	b8 03 40 00 00       	mov    eax,0x4003
c0012931:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012935:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012938:	81 c2 20 0c 00 00    	add    edx,0xc20
c001293e:	89 02                	mov    DWORD PTR [edx],eax
c0012940:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0012945:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001294b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012951:	83 ec 08             	sub    esp,0x8
c0012954:	50                   	push   eax
c0012955:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012959:	e8 b2 fc ff ff       	call   c0012610 <VAS::setCPUSpecific(unsigned long)>
c001295e:	83 c4 10             	add    esp,0x10
c0012961:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012965:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012968:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001296d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012973:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012979:	83 e0 10             	and    eax,0x10
c001297c:	84 c0                	test   al,al
c001297e:	74 07                	je     c0012987 <VAS::VAS(bool)+0x1a7>
c0012980:	b8 00 01 00 00       	mov    eax,0x100
c0012985:	eb 05                	jmp    c001298c <VAS::VAS(bool)+0x1ac>
c0012987:	b8 00 00 00 00       	mov    eax,0x0
c001298c:	09 c2                	or     edx,eax
c001298e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012992:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012995:	05 fc 0f 00 00       	add    eax,0xffc
c001299a:	83 ca 03             	or     edx,0x3
c001299d:	89 10                	mov    DWORD PTR [eax],edx
c001299f:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00129a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129aa:	83 ec 0c             	sub    esp,0xc
c00129ad:	50                   	push   eax
c00129ae:	e8 3f 1c 00 00       	call   c00145f2 <Device::getName()>
c00129b3:	83 c4 10             	add    esp,0x10
c00129b6:	83 ec 08             	sub    esp,0x8
c00129b9:	68 59 a8 02 c0       	push   0xc002a859
c00129be:	50                   	push   eax
c00129bf:	e8 04 df fe ff       	call   c00008c8 <strcmp>
c00129c4:	83 c4 10             	add    esp,0x10
c00129c7:	85 c0                	test   eax,eax
c00129c9:	0f 94 c0             	sete   al
c00129cc:	84 c0                	test   al,al
c00129ce:	74 70                	je     c0012a40 <VAS::VAS(bool)+0x260>
c00129d0:	e8 f4 b3 00 00       	call   c001ddc9 <disableIRQs()>
c00129d5:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00129da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129e0:	05 7c 09 00 00       	add    eax,0x97c
c00129e5:	83 ec 0c             	sub    esp,0xc
c00129e8:	50                   	push   eax
c00129e9:	e8 d6 c8 ff ff       	call   c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129ee:	83 c4 10             	add    esp,0x10
c00129f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129f6:	89 c3                	mov    ebx,eax
c00129f8:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00129fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a03:	05 7c 09 00 00       	add    eax,0x97c
c0012a08:	83 ec 0c             	sub    esp,0xc
c0012a0b:	50                   	push   eax
c0012a0c:	e8 b3 c8 ff ff       	call   c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a11:	83 c4 10             	add    esp,0x10
c0012a14:	83 ec 08             	sub    esp,0x8
c0012a17:	50                   	push   eax
c0012a18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a1c:	e8 91 f5 ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c0012a21:	83 c4 10             	add    esp,0x10
c0012a24:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a26:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a2b:	6a 11                	push   0x11
c0012a2d:	53                   	push   ebx
c0012a2e:	50                   	push   eax
c0012a2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a33:	e8 00 f9 ff ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a38:	83 c4 10             	add    esp,0x10
c0012a3b:	e8 97 b3 00 00       	call   c001ddd7 <enableIRQs()>
c0012a40:	90                   	nop
c0012a41:	83 c4 28             	add    esp,0x28
c0012a44:	5b                   	pop    ebx
c0012a45:	c3                   	ret    

c0012a46 <VAS::evict(unsigned long)>:
c0012a46:	55                   	push   ebp
c0012a47:	57                   	push   edi
c0012a48:	56                   	push   esi
c0012a49:	53                   	push   ebx
c0012a4a:	83 ec 1c             	sub    esp,0x1c
c0012a4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a51:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a59:	e8 2e f2 ff ff       	call   c0011c8c <Virt::allocateSwapfilePage()>
c0012a5e:	89 c7                	mov    edi,eax
c0012a60:	a1 0c d4 02 c0       	mov    eax,ds:0xc002d40c
c0012a65:	85 c0                	test   eax,eax
c0012a67:	7e 3d                	jle    c0012aa6 <VAS::evict(unsigned long)+0x60>
c0012a69:	89 ee                	mov    esi,ebp
c0012a6b:	31 db                	xor    ebx,ebx
c0012a6d:	83 ec 0c             	sub    esp,0xc
c0012a70:	57                   	push   edi
c0012a71:	e8 04 f2 ff ff       	call   c0011c7a <Virt::swapIDToSector(unsigned long)>
c0012a76:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a79:	01 d8                	add    eax,ebx
c0012a7b:	6a 01                	push   0x1
c0012a7d:	31 d2                	xor    edx,edx
c0012a7f:	43                   	inc    ebx
c0012a80:	52                   	push   edx
c0012a81:	81 c6 00 02 00 00    	add    esi,0x200
c0012a87:	50                   	push   eax
c0012a88:	0f be 05 18 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d418
c0012a8f:	ff 34 85 7c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1684]
c0012a96:	e8 3b 3d 00 00       	call   c00167d6 <LogicalDisk::write(unsigned long long, int, void*)>
c0012a9b:	83 c4 20             	add    esp,0x20
c0012a9e:	39 1d 0c d4 02 c0    	cmp    DWORD PTR ds:0xc002d40c,ebx
c0012aa4:	7f c7                	jg     c0012a6d <VAS::evict(unsigned long)+0x27>
c0012aa6:	83 ec 08             	sub    esp,0x8
c0012aa9:	c1 e7 0b             	shl    edi,0xb
c0012aac:	55                   	push   ebp
c0012aad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ab1:	e8 fc f4 ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c0012ab6:	83 c4 0c             	add    esp,0xc
c0012ab9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012abb:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ac1:	09 d7                	or     edi,edx
c0012ac3:	89 38                	mov    DWORD PTR [eax],edi
c0012ac5:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0012aca:	40                   	inc    eax
c0012acb:	a3 e8 e5 02 c0       	mov    ds:0xc002e5e8,eax
c0012ad0:	0f 20 da             	mov    edx,cr3
c0012ad3:	0f 22 da             	mov    cr3,edx
c0012ad6:	50                   	push   eax
c0012ad7:	55                   	push   ebp
c0012ad8:	68 67 a8 02 c0       	push   0xc002a867
c0012add:	e8 fd 03 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0012ae2:	a1 e4 e5 02 c0       	mov    eax,ds:0xc002e5e4
c0012ae7:	c7 44 24 40 7c a8 02 c0 	mov    DWORD PTR [esp+0x40],0xc002a87c
c0012aef:	8d 50 01             	lea    edx,[eax+0x1]
c0012af2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012af6:	89 15 e4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e4,edx
c0012afc:	83 c4 2c             	add    esp,0x2c
c0012aff:	5b                   	pop    ebx
c0012b00:	5e                   	pop    esi
c0012b01:	5f                   	pop    edi
c0012b02:	5d                   	pop    ebp
c0012b03:	e9 d7 03 00 00       	jmp    c0012edf <Dbg::kprintf(char const*, ...)>

c0012b08 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b08:	55                   	push   ebp
c0012b09:	57                   	push   edi
c0012b0a:	56                   	push   esi
c0012b0b:	53                   	push   ebx
c0012b0c:	83 ec 0c             	sub    esp,0xc
c0012b0f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012b13:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012b19:	0f 84 d1 00 00 00    	je     c0012bf0 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012b1f:	56                   	push   esi
c0012b20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012b24:	e8 89 f4 ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c0012b29:	5b                   	pop    ebx
c0012b2a:	85 c0                	test   eax,eax
c0012b2c:	5f                   	pop    edi
c0012b2d:	89 c3                	mov    ebx,eax
c0012b2f:	0f 84 bb 00 00 00    	je     c0012bf0 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012b35:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b37:	31 c0                	xor    eax,eax
c0012b39:	89 fa                	mov    edx,edi
c0012b3b:	81 e2 01 04 00 00    	and    edx,0x401
c0012b41:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012b47:	0f 85 a5 00 00 00    	jne    c0012bf2 <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012b4d:	e8 9b d3 ff ff       	call   c000feed <Phys::allocatePage()>
c0012b52:	c1 ef 0b             	shr    edi,0xb
c0012b55:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b57:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012b5d:	09 c2                	or     edx,eax
c0012b5f:	81 ca 01 08 00 00    	or     edx,0x801
c0012b65:	89 13                	mov    DWORD PTR [ebx],edx
c0012b67:	8b 0d 0c d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d40c
c0012b6d:	85 c9                	test   ecx,ecx
c0012b6f:	7e 3d                	jle    c0012bae <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012b71:	89 f5                	mov    ebp,esi
c0012b73:	31 db                	xor    ebx,ebx
c0012b75:	83 ec 0c             	sub    esp,0xc
c0012b78:	57                   	push   edi
c0012b79:	e8 fc f0 ff ff       	call   c0011c7a <Virt::swapIDToSector(unsigned long)>
c0012b7e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b81:	01 d8                	add    eax,ebx
c0012b83:	6a 01                	push   0x1
c0012b85:	31 d2                	xor    edx,edx
c0012b87:	43                   	inc    ebx
c0012b88:	52                   	push   edx
c0012b89:	81 c5 00 02 00 00    	add    ebp,0x200
c0012b8f:	50                   	push   eax
c0012b90:	0f be 05 18 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d418
c0012b97:	ff 34 85 7c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1684]
c0012b9e:	e8 c7 3b 00 00       	call   c001676a <LogicalDisk::read(unsigned long long, int, void*)>
c0012ba3:	83 c4 20             	add    esp,0x20
c0012ba6:	39 1d 0c d4 02 c0    	cmp    DWORD PTR ds:0xc002d40c,ebx
c0012bac:	7f c7                	jg     c0012b75 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012bae:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c0012bb3:	48                   	dec    eax
c0012bb4:	52                   	push   edx
c0012bb5:	a3 e8 e5 02 c0       	mov    ds:0xc002e5e8,eax
c0012bba:	50                   	push   eax
c0012bbb:	56                   	push   esi
c0012bbc:	68 8d a8 02 c0       	push   0xc002a88d
c0012bc1:	e8 19 03 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0012bc6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012bc9:	e8 8e f0 ff ff       	call   c0011c5c <Virt::freeSwapfilePage(unsigned long)>
c0012bce:	e8 15 b2 00 00       	call   c001dde8 <unlockScheduler()>
c0012bd3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bd7:	83 c4 10             	add    esp,0x10
c0012bda:	25 ff 0f 00 00       	and    eax,0xfff
c0012bdf:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012be4:	77 14                	ja     c0012bfa <VAS::tryLoadBackOffDisk(unsigned long)+0xf2>
c0012be6:	0f 20 d8             	mov    eax,cr3
c0012be9:	0f 22 d8             	mov    cr3,eax
c0012bec:	b0 01                	mov    al,0x1
c0012bee:	eb 02                	jmp    c0012bf2 <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012bf0:	31 c0                	xor    eax,eax
c0012bf2:	83 c4 0c             	add    esp,0xc
c0012bf5:	5b                   	pop    ebx
c0012bf6:	5e                   	pop    esi
c0012bf7:	5f                   	pop    edi
c0012bf8:	5d                   	pop    ebp
c0012bf9:	c3                   	ret    
c0012bfa:	83 ec 0c             	sub    esp,0xc
c0012bfd:	68 a2 a8 02 c0       	push   0xc002a8a2
c0012c02:	e8 d8 02 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0012c07:	83 c4 10             	add    esp,0x10
c0012c0a:	eb da                	jmp    c0012be6 <VAS::tryLoadBackOffDisk(unsigned long)+0xde>

c0012c0c <VAS::scanForEviction()>:
c0012c0c:	57                   	push   edi
c0012c0d:	56                   	push   esi
c0012c0e:	53                   	push   ebx
c0012c0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c13:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c16:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c1c:	75 0e                	jne    c0012c2c <VAS::scanForEviction()+0x20>
c0012c1e:	89 da                	mov    edx,ebx
c0012c20:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c23:	c1 ea 16             	shr    edx,0x16
c0012c26:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c2a:	74 48                	je     c0012c74 <VAS::scanForEviction()+0x68>
c0012c2c:	53                   	push   ebx
c0012c2d:	56                   	push   esi
c0012c2e:	e8 7f f3 ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c0012c33:	5a                   	pop    edx
c0012c34:	8b 38                	mov    edi,DWORD PTR [eax]
c0012c36:	59                   	pop    ecx
c0012c37:	89 fa                	mov    edx,edi
c0012c39:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012c3f:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012c45:	74 3d                	je     c0012c84 <VAS::scanForEviction()+0x78>
c0012c47:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012c4d:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012c53:	76 2a                	jbe    c0012c7f <VAS::scanForEviction()+0x73>
c0012c55:	31 db                	xor    ebx,ebx
c0012c57:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012c5e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c64:	75 c6                	jne    c0012c2c <VAS::scanForEviction()+0x20>
c0012c66:	89 da                	mov    edx,ebx
c0012c68:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c6b:	c1 ea 16             	shr    edx,0x16
c0012c6e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c72:	75 b8                	jne    c0012c2c <VAS::scanForEviction()+0x20>
c0012c74:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c7a:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c7d:	eb 97                	jmp    c0012c16 <VAS::scanForEviction()+0xa>
c0012c7f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c82:	eb 92                	jmp    c0012c16 <VAS::scanForEviction()+0xa>
c0012c84:	f7 c7 01 00 00 00    	test   edi,0x1
c0012c8a:	74 bb                	je     c0012c47 <VAS::scanForEviction()+0x3b>
c0012c8c:	f7 c7 20 00 00 00    	test   edi,0x20
c0012c92:	74 0a                	je     c0012c9e <VAS::scanForEviction()+0x92>
c0012c94:	83 e7 df             	and    edi,0xffffffdf
c0012c97:	89 38                	mov    DWORD PTR [eax],edi
c0012c99:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c9c:	eb a9                	jmp    c0012c47 <VAS::scanForEviction()+0x3b>
c0012c9e:	83 ec 08             	sub    esp,0x8
c0012ca1:	53                   	push   ebx
c0012ca2:	56                   	push   esi
c0012ca3:	e8 9e fd ff ff       	call   c0012a46 <VAS::evict(unsigned long)>
c0012ca8:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012caf:	83 c4 10             	add    esp,0x10
c0012cb2:	89 f8                	mov    eax,edi
c0012cb4:	5b                   	pop    ebx
c0012cb5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012cba:	5e                   	pop    esi
c0012cbb:	5f                   	pop    edi
c0012cbc:	c3                   	ret    

c0012cbd <mapVASFirstTime>:
c0012cbd:	55                   	push   ebp
c0012cbe:	57                   	push   edi
c0012cbf:	56                   	push   esi
c0012cc0:	53                   	push   ebx
c0012cc1:	83 ec 0c             	sub    esp,0xc
c0012cc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cc9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012ccc:	4a                   	dec    edx
c0012ccd:	0f 84 8e 00 00 00    	je     c0012d61 <mapVASFirstTime+0xa4>
c0012cd3:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012cd6:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012cd9:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012cde:	c1 e5 15             	shl    ebp,0x15
c0012ce1:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012ce6:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012cec:	29 eb                	sub    ebx,ebp
c0012cee:	29 ee                	sub    esi,ebp
c0012cf0:	e8 f8 d1 ff ff       	call   c000feed <Phys::allocatePage()>
c0012cf5:	83 ec 0c             	sub    esp,0xc
c0012cf8:	68 03 04 00 00       	push   0x403
c0012cfd:	6a 01                	push   0x1
c0012cff:	53                   	push   ebx
c0012d00:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d06:	50                   	push   eax
c0012d07:	57                   	push   edi
c0012d08:	e8 1f f9 ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d0d:	83 c4 20             	add    esp,0x20
c0012d10:	39 f3                	cmp    ebx,esi
c0012d12:	75 dc                	jne    c0012cf0 <mapVASFirstTime+0x33>
c0012d14:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d19:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d1e:	29 ee                	sub    esi,ebp
c0012d20:	29 e8                	sub    eax,ebp
c0012d22:	89 c5                	mov    ebp,eax
c0012d24:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d28:	19 db                	sbb    ebx,ebx
c0012d2a:	e8 be d1 ff ff       	call   c000feed <Phys::allocatePage()>
c0012d2f:	83 e3 04             	and    ebx,0x4
c0012d32:	83 ec 0c             	sub    esp,0xc
c0012d35:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d3b:	53                   	push   ebx
c0012d3c:	6a 01                	push   0x1
c0012d3e:	56                   	push   esi
c0012d3f:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d45:	50                   	push   eax
c0012d46:	57                   	push   edi
c0012d47:	e8 e0 f8 ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d4c:	83 c4 20             	add    esp,0x20
c0012d4f:	39 f5                	cmp    ebp,esi
c0012d51:	75 d1                	jne    c0012d24 <mapVASFirstTime+0x67>
c0012d53:	0f 20 d8             	mov    eax,cr3
c0012d56:	0f 22 d8             	mov    cr3,eax
c0012d59:	83 c4 0c             	add    esp,0xc
c0012d5c:	5b                   	pop    ebx
c0012d5d:	5e                   	pop    esi
c0012d5e:	5f                   	pop    edi
c0012d5f:	5d                   	pop    ebp
c0012d60:	c3                   	ret    
c0012d61:	83 ec 0c             	sub    esp,0xc
c0012d64:	68 b2 a8 02 c0       	push   0xc002a8b2
c0012d69:	e8 71 01 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0012d6e:	83 c4 10             	add    esp,0x10
c0012d71:	83 c4 0c             	add    esp,0xc
c0012d74:	5b                   	pop    ebx
c0012d75:	5e                   	pop    esi
c0012d76:	5f                   	pop    edi
c0012d77:	5d                   	pop    ebp
c0012d78:	c3                   	ret    

c0012d79 <__cxa_atexit>:
c0012d79:	31 c0                	xor    eax,eax
c0012d7b:	c3                   	ret    

c0012d7c <__cxa_finalize>:
c0012d7c:	c3                   	ret    

c0012d7d <__stack_chk_fail>:
c0012d7d:	55                   	push   ebp
c0012d7e:	89 e5                	mov    ebp,esp
c0012d80:	83 ec 14             	sub    esp,0x14
c0012d83:	68 cb a8 02 c0       	push   0xc002a8cb
c0012d88:	e8 52 01 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0012d8d:	58                   	pop    eax
c0012d8e:	5a                   	pop    edx
c0012d8f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d92:	68 1b a9 02 c0       	push   0xc002a91b
c0012d97:	e8 43 01 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0012d9c:	59                   	pop    ecx
c0012d9d:	58                   	pop    eax
c0012d9e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012da1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012da4:	68 1b a9 02 c0       	push   0xc002a91b
c0012da9:	e8 31 01 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0012dae:	5a                   	pop    edx
c0012daf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012db2:	59                   	pop    ecx
c0012db3:	8b 00                	mov    eax,DWORD PTR [eax]
c0012db5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012db8:	68 1b a9 02 c0       	push   0xc002a91b
c0012dbd:	e8 1d 01 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0012dc2:	5a                   	pop    edx
c0012dc3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dc6:	59                   	pop    ecx
c0012dc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dcb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012dce:	68 1b a9 02 c0       	push   0xc002a91b
c0012dd3:	e8 07 01 00 00       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0012dd8:	c7 04 24 23 a9 02 c0 	mov    DWORD PTR [esp],0xc002a923
c0012ddf:	e8 27 78 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0012de4:	83 c4 10             	add    esp,0x10
c0012de7:	c9                   	leave  
c0012de8:	c3                   	ret    

c0012de9 <__cxa_pure_virtual>:
c0012de9:	83 ec 18             	sub    esp,0x18
c0012dec:	68 3b a9 02 c0       	push   0xc002a93b
c0012df1:	e8 15 78 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0012df6:	83 c4 1c             	add    esp,0x1c
c0012df9:	c3                   	ret    

c0012dfa <operator new[](unsigned long)>:
c0012dfa:	e9 4c ca ff ff       	jmp    c000f84b <malloc>

c0012dff <operator delete(void*, unsigned long)>:
c0012dff:	e9 67 ca ff ff       	jmp    c000f86b <rfree>

c0012e04 <operator delete[](void*)>:
c0012e04:	e9 62 ca ff ff       	jmp    c000f86b <rfree>

c0012e09 <operator delete[](void*, unsigned long)>:
c0012e09:	e9 5d ca ff ff       	jmp    c000f86b <rfree>

c0012e0e <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e0e:	57                   	push   edi
c0012e0f:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e14:	56                   	push   esi
c0012e15:	be 50 a9 02 c0       	mov    esi,0xc002a950
c0012e1a:	53                   	push   ebx
c0012e1b:	83 ec 40             	sub    esp,0x40
c0012e1e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e22:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e26:	fc                   	cld    
c0012e27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e29:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e2d:	83 f9 3e             	cmp    ecx,0x3e
c0012e30:	7e 05                	jle    c0012e37 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e32:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e37:	89 df                	mov    edi,ebx
c0012e39:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e3d:	eb 02                	jmp    c0012e41 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e3f:	89 c7                	mov    edi,eax
c0012e41:	31 d2                	xor    edx,edx
c0012e43:	46                   	inc    esi
c0012e44:	89 f8                	mov    eax,edi
c0012e46:	f7 f1                	div    ecx
c0012e48:	39 cf                	cmp    edi,ecx
c0012e4a:	73 f3                	jae    c0012e3f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e4c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e4f:	eb 02                	jmp    c0012e53 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e51:	89 c3                	mov    ebx,eax
c0012e53:	31 d2                	xor    edx,edx
c0012e55:	4e                   	dec    esi
c0012e56:	89 d8                	mov    eax,ebx
c0012e58:	f7 f1                	div    ecx
c0012e5a:	39 cb                	cmp    ebx,ecx
c0012e5c:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e60:	88 16                	mov    BYTE PTR [esi],dl
c0012e62:	73 ed                	jae    c0012e51 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e64:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e68:	83 c4 40             	add    esp,0x40
c0012e6b:	5b                   	pop    ebx
c0012e6c:	5e                   	pop    esi
c0012e6d:	5f                   	pop    edi
c0012e6e:	c3                   	ret    

c0012e6f <Dbg::logc(char)>:
c0012e6f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e73:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e78:	ec                   	in     al,dx
c0012e79:	a8 20                	test   al,0x20
c0012e7b:	74 fb                	je     c0012e78 <Dbg::logc(char)+0x9>
c0012e7d:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e82:	88 c8                	mov    al,cl
c0012e84:	ee                   	out    dx,al
c0012e85:	c3                   	ret    

c0012e86 <Dbg::logs(char*)>:
c0012e86:	53                   	push   ebx
c0012e87:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e8b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e8e:	84 c0                	test   al,al
c0012e90:	74 0f                	je     c0012ea1 <Dbg::logs(char*)+0x1b>
c0012e92:	50                   	push   eax
c0012e93:	43                   	inc    ebx
c0012e94:	e8 d6 ff ff ff       	call   c0012e6f <Dbg::logc(char)>
c0012e99:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e9c:	5a                   	pop    edx
c0012e9d:	84 c0                	test   al,al
c0012e9f:	75 f1                	jne    c0012e92 <Dbg::logs(char*)+0xc>
c0012ea1:	5b                   	pop    ebx
c0012ea2:	c3                   	ret    

c0012ea3 <Dbg::logWriteInt(unsigned int)>:
c0012ea3:	83 ec 10             	sub    esp,0x10
c0012ea6:	6a 0a                	push   0xa
c0012ea8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012eac:	50                   	push   eax
c0012ead:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eb1:	e8 58 ff ff ff       	call   c0012e0e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012eb6:	50                   	push   eax
c0012eb7:	e8 ca ff ff ff       	call   c0012e86 <Dbg::logs(char*)>
c0012ebc:	83 c4 20             	add    esp,0x20
c0012ebf:	c3                   	ret    

c0012ec0 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012ec0:	83 ec 10             	sub    esp,0x10
c0012ec3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ec7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ecb:	50                   	push   eax
c0012ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ed0:	e8 39 ff ff ff       	call   c0012e0e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ed5:	50                   	push   eax
c0012ed6:	e8 ab ff ff ff       	call   c0012e86 <Dbg::logs(char*)>
c0012edb:	83 c4 20             	add    esp,0x20
c0012ede:	c3                   	ret    

c0012edf <Dbg::kprintf(char const*, ...)>:
c0012edf:	55                   	push   ebp
c0012ee0:	57                   	push   edi
c0012ee1:	56                   	push   esi
c0012ee2:	53                   	push   ebx
c0012ee3:	83 ec 0c             	sub    esp,0xc
c0012ee6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012eea:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012eee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ef2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012ef5:	84 c0                	test   al,al
c0012ef7:	74 4a                	je     c0012f43 <Dbg::kprintf(char const*, ...)+0x64>
c0012ef9:	31 db                	xor    ebx,ebx
c0012efb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012efe:	3c 25                	cmp    al,0x25
c0012f00:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f03:	0f 85 e4 00 00 00    	jne    c0012fed <Dbg::kprintf(char const*, ...)+0x10e>
c0012f09:	83 c3 02             	add    ebx,0x2
c0012f0c:	8a 07                	mov    al,BYTE PTR [edi]
c0012f0e:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f11:	83 e8 25             	sub    eax,0x25
c0012f14:	3c 53                	cmp    al,0x53
c0012f16:	0f 87 ba 00 00 00    	ja     c0012fd6 <Dbg::kprintf(char const*, ...)+0xf7>
c0012f1c:	0f b6 c0             	movzx  eax,al
c0012f1f:	ff 24 85 90 a9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5670]
c0012f26:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f2a:	89 c8                	mov    eax,ecx
c0012f2c:	83 c1 04             	add    ecx,0x4
c0012f2f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f33:	ff 30                	push   DWORD PTR [eax]
c0012f35:	e8 4c ff ff ff       	call   c0012e86 <Dbg::logs(char*)>
c0012f3a:	58                   	pop    eax
c0012f3b:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f3f:	84 c0                	test   al,al
c0012f41:	75 b8                	jne    c0012efb <Dbg::kprintf(char const*, ...)+0x1c>
c0012f43:	83 c4 0c             	add    esp,0xc
c0012f46:	5b                   	pop    ebx
c0012f47:	5e                   	pop    esi
c0012f48:	5f                   	pop    edi
c0012f49:	5d                   	pop    ebp
c0012f4a:	c3                   	ret    
c0012f4b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f4f:	89 d0                	mov    eax,edx
c0012f51:	83 c2 04             	add    edx,0x4
c0012f54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f58:	ff 30                	push   DWORD PTR [eax]
c0012f5a:	e8 44 ff ff ff       	call   c0012ea3 <Dbg::logWriteInt(unsigned int)>
c0012f5f:	58                   	pop    eax
c0012f60:	eb d9                	jmp    c0012f3b <Dbg::kprintf(char const*, ...)+0x5c>
c0012f62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f66:	89 d0                	mov    eax,edx
c0012f68:	83 c2 04             	add    edx,0x4
c0012f6b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f72:	50                   	push   eax
c0012f73:	e8 f7 fe ff ff       	call   c0012e6f <Dbg::logc(char)>
c0012f78:	58                   	pop    eax
c0012f79:	eb c0                	jmp    c0012f3b <Dbg::kprintf(char const*, ...)+0x5c>
c0012f7b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f7f:	89 c8                	mov    eax,ecx
c0012f81:	83 c1 04             	add    ecx,0x4
c0012f84:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f88:	ff 30                	push   DWORD PTR [eax]
c0012f8a:	e8 14 ff ff ff       	call   c0012ea3 <Dbg::logWriteInt(unsigned int)>
c0012f8f:	5f                   	pop    edi
c0012f90:	eb a9                	jmp    c0012f3b <Dbg::kprintf(char const*, ...)+0x5c>
c0012f92:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f96:	89 c8                	mov    eax,ecx
c0012f98:	83 c1 04             	add    ecx,0x4
c0012f9b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f9f:	6a 10                	push   0x10
c0012fa1:	ff 30                	push   DWORD PTR [eax]
c0012fa3:	e8 18 ff ff ff       	call   c0012ec0 <Dbg::logWriteIntBase(unsigned int, int)>
c0012fa8:	59                   	pop    ecx
c0012fa9:	5f                   	pop    edi
c0012faa:	eb 8f                	jmp    c0012f3b <Dbg::kprintf(char const*, ...)+0x5c>
c0012fac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fb0:	89 d0                	mov    eax,edx
c0012fb2:	83 c2 08             	add    edx,0x8
c0012fb5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fb9:	6a 10                	push   0x10
c0012fbb:	ff 30                	push   DWORD PTR [eax]
c0012fbd:	e8 fe fe ff ff       	call   c0012ec0 <Dbg::logWriteIntBase(unsigned int, int)>
c0012fc2:	58                   	pop    eax
c0012fc3:	5a                   	pop    edx
c0012fc4:	e9 72 ff ff ff       	jmp    c0012f3b <Dbg::kprintf(char const*, ...)+0x5c>
c0012fc9:	6a 25                	push   0x25
c0012fcb:	e8 9f fe ff ff       	call   c0012e6f <Dbg::logc(char)>
c0012fd0:	58                   	pop    eax
c0012fd1:	e9 65 ff ff ff       	jmp    c0012f3b <Dbg::kprintf(char const*, ...)+0x5c>
c0012fd6:	6a 25                	push   0x25
c0012fd8:	e8 92 fe ff ff       	call   c0012e6f <Dbg::logc(char)>
c0012fdd:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012fe0:	50                   	push   eax
c0012fe1:	e8 89 fe ff ff       	call   c0012e6f <Dbg::logc(char)>
c0012fe6:	5a                   	pop    edx
c0012fe7:	59                   	pop    ecx
c0012fe8:	e9 4e ff ff ff       	jmp    c0012f3b <Dbg::kprintf(char const*, ...)+0x5c>
c0012fed:	50                   	push   eax
c0012fee:	89 eb                	mov    ebx,ebp
c0012ff0:	e8 7a fe ff ff       	call   c0012e6f <Dbg::logc(char)>
c0012ff5:	89 fd                	mov    ebp,edi
c0012ff7:	58                   	pop    eax
c0012ff8:	e9 3e ff ff ff       	jmp    c0012f3b <Dbg::kprintf(char const*, ...)+0x5c>
c0012ffd:	90                   	nop

c0012ffe <File::read(unsigned long long, void*, int*)>:
c0012ffe:	53                   	push   ebx
c0012fff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013003:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013007:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001300e:	3c 19                	cmp    al,0x19
c0013010:	77 35                	ja     c0013047 <File::read(unsigned long long, void*, int*)+0x49>
c0013012:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0013019:	85 c0                	test   eax,eax
c001301b:	74 2a                	je     c0013047 <File::read(unsigned long long, void*, int*)+0x49>
c001301d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013023:	85 c0                	test   eax,eax
c0013025:	74 20                	je     c0013047 <File::read(unsigned long long, void*, int*)+0x49>
c0013027:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001302b:	74 21                	je     c001304e <File::read(unsigned long long, void*, int*)+0x50>
c001302d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001302f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013033:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013039:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001303d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013041:	5b                   	pop    ebx
c0013042:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013045:	ff e0                	jmp    eax
c0013047:	b8 0b 00 00 00       	mov    eax,0xb
c001304c:	eb 05                	jmp    c0013053 <File::read(unsigned long long, void*, int*)+0x55>
c001304e:	b8 05 00 00 00       	mov    eax,0x5
c0013053:	5b                   	pop    ebx
c0013054:	c3                   	ret    
c0013055:	90                   	nop

c0013056 <File::write(unsigned long long, void*, int*)>:
c0013056:	53                   	push   ebx
c0013057:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001305b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001305f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013066:	3c 19                	cmp    al,0x19
c0013068:	77 35                	ja     c001309f <File::write(unsigned long long, void*, int*)+0x49>
c001306a:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0013071:	85 c0                	test   eax,eax
c0013073:	74 2a                	je     c001309f <File::write(unsigned long long, void*, int*)+0x49>
c0013075:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001307b:	85 c0                	test   eax,eax
c001307d:	74 20                	je     c001309f <File::write(unsigned long long, void*, int*)+0x49>
c001307f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013083:	74 21                	je     c00130a6 <File::write(unsigned long long, void*, int*)+0x50>
c0013085:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013087:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001308b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013091:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013095:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013099:	5b                   	pop    ebx
c001309a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001309d:	ff e0                	jmp    eax
c001309f:	b8 0b 00 00 00       	mov    eax,0xb
c00130a4:	eb 05                	jmp    c00130ab <File::write(unsigned long long, void*, int*)+0x55>
c00130a6:	b8 05 00 00 00       	mov    eax,0x5
c00130ab:	5b                   	pop    ebx
c00130ac:	c3                   	ret    
c00130ad:	90                   	nop

c00130ae <Directory::read(unsigned long long, void*, int*)>:
c00130ae:	53                   	push   ebx
c00130af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130b7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130be:	3c 19                	cmp    al,0x19
c00130c0:	77 35                	ja     c00130f7 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130c2:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c00130c9:	85 c0                	test   eax,eax
c00130cb:	74 2a                	je     c00130f7 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130cd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130d3:	85 c0                	test   eax,eax
c00130d5:	74 20                	je     c00130f7 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130d7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130db:	74 21                	je     c00130fe <Directory::read(unsigned long long, void*, int*)+0x50>
c00130dd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130e3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130f1:	5b                   	pop    ebx
c00130f2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00130f5:	ff e0                	jmp    eax
c00130f7:	b8 0b 00 00 00       	mov    eax,0xb
c00130fc:	eb 05                	jmp    c0013103 <Directory::read(unsigned long long, void*, int*)+0x55>
c00130fe:	b8 05 00 00 00       	mov    eax,0x5
c0013103:	5b                   	pop    ebx
c0013104:	c3                   	ret    
c0013105:	90                   	nop

c0013106 <Directory::write(unsigned long long, void*, int*)>:
c0013106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001310a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013111:	b8 0b 00 00 00       	mov    eax,0xb
c0013116:	80 fa 19             	cmp    dl,0x19
c0013119:	77 18                	ja     c0013133 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001311b:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c0013122:	85 d2                	test   edx,edx
c0013124:	74 0d                	je     c0013133 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013126:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001312d:	19 c0                	sbb    eax,eax
c001312f:	83 e0 0a             	and    eax,0xa
c0013132:	40                   	inc    eax
c0013133:	c3                   	ret    

c0013134 <File::isAtty()>:
c0013134:	31 c0                	xor    eax,eax
c0013136:	c3                   	ret    
c0013137:	90                   	nop

c0013138 <Directory::isAtty()>:
c0013138:	31 c0                	xor    eax,eax
c001313a:	c3                   	ret    
c001313b:	90                   	nop

c001313c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001313c:	b8 0a 00 00 00       	mov    eax,0xa
c0013141:	c3                   	ret    

c0013142 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013142:	b8 0a 00 00 00       	mov    eax,0xa
c0013147:	c3                   	ret    

c0013148 <File::~File()>:
c0013148:	83 ec 0c             	sub    esp,0xc
c001314b:	ba 4c ab 02 c0       	mov    edx,0xc002ab4c
c0013150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013154:	89 10                	mov    DWORD PTR [eax],edx
c0013156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001315a:	83 ec 0c             	sub    esp,0xc
c001315d:	50                   	push   eax
c001315e:	e8 87 e7 ff ff       	call   c00118ea <UnixFile::~UnixFile()>
c0013163:	83 c4 10             	add    esp,0x10
c0013166:	90                   	nop
c0013167:	83 c4 0c             	add    esp,0xc
c001316a:	c3                   	ret    
c001316b:	90                   	nop

c001316c <File::~File()>:
c001316c:	83 ec 0c             	sub    esp,0xc
c001316f:	83 ec 0c             	sub    esp,0xc
c0013172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013176:	e8 cd ff ff ff       	call   c0013148 <File::~File()>
c001317b:	83 c4 10             	add    esp,0x10
c001317e:	83 ec 08             	sub    esp,0x8
c0013181:	68 14 01 00 00       	push   0x114
c0013186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001318a:	e8 70 fc ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c001318f:	83 c4 10             	add    esp,0x10
c0013192:	83 c4 0c             	add    esp,0xc
c0013195:	c3                   	ret    

c0013196 <Directory::~Directory()>:
c0013196:	83 ec 0c             	sub    esp,0xc
c0013199:	ba 68 ab 02 c0       	mov    edx,0xc002ab68
c001319e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a2:	89 10                	mov    DWORD PTR [eax],edx
c00131a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a8:	83 ec 0c             	sub    esp,0xc
c00131ab:	50                   	push   eax
c00131ac:	e8 39 e7 ff ff       	call   c00118ea <UnixFile::~UnixFile()>
c00131b1:	83 c4 10             	add    esp,0x10
c00131b4:	90                   	nop
c00131b5:	83 c4 0c             	add    esp,0xc
c00131b8:	c3                   	ret    
c00131b9:	90                   	nop

c00131ba <Directory::~Directory()>:
c00131ba:	83 ec 0c             	sub    esp,0xc
c00131bd:	83 ec 0c             	sub    esp,0xc
c00131c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131c4:	e8 cd ff ff ff       	call   c0013196 <Directory::~Directory()>
c00131c9:	83 c4 10             	add    esp,0x10
c00131cc:	83 ec 08             	sub    esp,0x8
c00131cf:	68 14 01 00 00       	push   0x114
c00131d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131d8:	e8 22 fc ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c00131dd:	83 c4 10             	add    esp,0x10
c00131e0:	83 c4 0c             	add    esp,0xc
c00131e3:	c3                   	ret    

c00131e4 <Filesystem::Filesystem()>:
c00131e4:	ba e8 aa 02 c0       	mov    edx,0xc002aae8
c00131e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131ed:	89 10                	mov    DWORD PTR [eax],edx
c00131ef:	8b 15 f4 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5f4
c00131f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131f9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00131fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013200:	a3 f4 e5 02 c0       	mov    ds:0xc002e5f4,eax
c0013205:	90                   	nop
c0013206:	c3                   	ret    
c0013207:	90                   	nop

c0013208 <Filesystem::~Filesystem()>:
c0013208:	ba e8 aa 02 c0       	mov    edx,0xc002aae8
c001320d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013211:	89 10                	mov    DWORD PTR [eax],edx
c0013213:	90                   	nop
c0013214:	c3                   	ret    
c0013215:	90                   	nop

c0013216 <Filesystem::~Filesystem()>:
c0013216:	83 ec 0c             	sub    esp,0xc
c0013219:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001321d:	e8 e6 ff ff ff       	call   c0013208 <Filesystem::~Filesystem()>
c0013222:	83 c4 04             	add    esp,0x4
c0013225:	83 ec 08             	sub    esp,0x8
c0013228:	6a 08                	push   0x8
c001322a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001322e:	e8 cc fb ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0013233:	83 c4 10             	add    esp,0x10
c0013236:	83 c4 0c             	add    esp,0xc
c0013239:	c3                   	ret    

c001323a <Fs::getcwd(Process*, char*, int)>:
c001323a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001323e:	31 c0                	xor    eax,eax
c0013240:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013243:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013247:	7d 15                	jge    c001325e <Fs::getcwd(Process*, char*, int)+0x24>
c0013249:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001324d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013254:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013257:	84 c9                	test   cl,cl
c0013259:	74 06                	je     c0013261 <Fs::getcwd(Process*, char*, int)+0x27>
c001325b:	40                   	inc    eax
c001325c:	eb e2                	jmp    c0013240 <Fs::getcwd(Process*, char*, int)+0x6>
c001325e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013261:	31 c0                	xor    eax,eax
c0013263:	c3                   	ret    

c0013264 <Fs::initVFS()>:
c0013264:	83 ec 18             	sub    esp,0x18
c0013267:	6a 08                	push   0x8
c0013269:	e8 dd c5 ff ff       	call   c000f84b <malloc>
c001326e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013271:	e8 1e dd 00 00       	call   c0020f94 <FAT::FAT()>
c0013276:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001327d:	e8 c9 c5 ff ff       	call   c000f84b <malloc>
c0013282:	89 04 24             	mov    DWORD PTR [esp],eax
c0013285:	e8 62 ef 00 00       	call   c00221ec <ISO9660::ISO9660()>
c001328a:	83 c4 1c             	add    esp,0x1c
c001328d:	c3                   	ret    

c001328e <Fs::standardiseFiles(char*, char const*, char const*)>:
c001328e:	55                   	push   ebp
c001328f:	57                   	push   edi
c0013290:	56                   	push   esi
c0013291:	53                   	push   ebx
c0013292:	81 ec 10 04 00 00    	sub    esp,0x410
c0013298:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001329f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00132a6:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00132ad:	68 00 04 00 00       	push   0x400
c00132b2:	6a 00                	push   0x0
c00132b4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00132b8:	56                   	push   esi
c00132b9:	e8 c2 d4 fe ff       	call   c0000780 <memset>
c00132be:	83 c4 10             	add    esp,0x10
c00132c1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00132c5:	75 0b                	jne    c00132d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00132c7:	50                   	push   eax
c00132c8:	50                   	push   eax
c00132c9:	57                   	push   edi
c00132ca:	56                   	push   esi
c00132cb:	e8 6c d5 fe ff       	call   c000083c <strcpy>
c00132d0:	eb 41                	jmp    c0013313 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00132d2:	8a 07                	mov    al,BYTE PTR [edi]
c00132d4:	3c 5c                	cmp    al,0x5c
c00132d6:	74 04                	je     c00132dc <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00132d8:	3c 2f                	cmp    al,0x2f
c00132da:	75 18                	jne    c00132f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00132dc:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00132df:	3c 60                	cmp    al,0x60
c00132e1:	7e 03                	jle    c00132e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00132e3:	83 e8 20             	sub    eax,0x20
c00132e6:	88 04 24             	mov    BYTE PTR [esp],al
c00132e9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132f0:	50                   	push   eax
c00132f1:	50                   	push   eax
c00132f2:	eb 18                	jmp    c001330c <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00132f4:	50                   	push   eax
c00132f5:	50                   	push   eax
c00132f6:	55                   	push   ebp
c00132f7:	56                   	push   esi
c00132f8:	e8 3f d5 fe ff       	call   c000083c <strcpy>
c00132fd:	5a                   	pop    edx
c00132fe:	59                   	pop    ecx
c00132ff:	68 31 c2 02 c0       	push   0xc002c231
c0013304:	56                   	push   esi
c0013305:	e8 72 d6 fe ff       	call   c000097c <strcat>
c001330a:	5d                   	pop    ebp
c001330b:	58                   	pop    eax
c001330c:	57                   	push   edi
c001330d:	56                   	push   esi
c001330e:	e8 69 d6 fe ff       	call   c000097c <strcat>
c0013313:	83 c4 10             	add    esp,0x10
c0013316:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013319:	3c 60                	cmp    al,0x60
c001331b:	7e 03                	jle    c0013320 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001331d:	83 e8 20             	sub    eax,0x20
c0013320:	88 04 24             	mov    BYTE PTR [esp],al
c0013323:	88 03                	mov    BYTE PTR [ebx],al
c0013325:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001332c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013332:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013336:	bf 03 00 00 00       	mov    edi,0x3
c001333b:	b8 03 00 00 00       	mov    eax,0x3
c0013340:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013343:	84 d2                	test   dl,dl
c0013345:	0f 84 91 00 00 00    	je     c00133dc <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c001334b:	8d 4f 01             	lea    ecx,[edi+0x1]
c001334e:	80 fa 5c             	cmp    dl,0x5c
c0013351:	74 05                	je     c0013358 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013353:	80 fa 2f             	cmp    dl,0x2f
c0013356:	75 12                	jne    c001336a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013358:	89 c5                	mov    ebp,eax
c001335a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001335f:	74 09                	je     c001336a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013361:	40                   	inc    eax
c0013362:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013366:	89 cf                	mov    edi,ecx
c0013368:	eb d6                	jmp    c0013340 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c001336a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001336f:	75 5b                	jne    c00133cc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013371:	80 fa 2e             	cmp    dl,0x2e
c0013374:	75 56                	jne    c00133cc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013376:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c001337a:	74 19                	je     c0013395 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c001337c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013381:	74 53                	je     c00133d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013383:	89 f9                	mov    ecx,edi
c0013385:	41                   	inc    ecx
c0013386:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013389:	80 fa 2f             	cmp    dl,0x2f
c001338c:	74 f7                	je     c0013385 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001338e:	80 fa 5c             	cmp    dl,0x5c
c0013391:	74 f2                	je     c0013385 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013393:	eb d1                	jmp    c0013366 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013395:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001339a:	74 3a                	je     c00133d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001339c:	83 f8 03             	cmp    eax,0x3
c001339f:	74 c5                	je     c0013366 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133a1:	41                   	inc    ecx
c00133a2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133a5:	80 fa 2f             	cmp    dl,0x2f
c00133a8:	74 f7                	je     c00133a1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133aa:	80 fa 5c             	cmp    dl,0x5c
c00133ad:	74 f2                	je     c00133a1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133af:	48                   	dec    eax
c00133b0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133b4:	75 06                	jne    c00133bc <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133b6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133ba:	eb f3                	jmp    c00133af <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00133bc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133c0:	74 07                	je     c00133c9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00133c2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133c6:	48                   	dec    eax
c00133c7:	eb f3                	jmp    c00133bc <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133c9:	40                   	inc    eax
c00133ca:	eb 9a                	jmp    c0013366 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133cc:	80 fa 2f             	cmp    dl,0x2f
c00133cf:	74 95                	je     c0013366 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133d1:	80 fa 5c             	cmp    dl,0x5c
c00133d4:	74 90                	je     c0013366 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133d6:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00133d9:	40                   	inc    eax
c00133da:	eb 8a                	jmp    c0013366 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133dc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133e0:	83 ec 0c             	sub    esp,0xc
c00133e3:	53                   	push   ebx
c00133e4:	e8 b3 d3 fe ff       	call   c000079c <strlen>
c00133e9:	83 c4 10             	add    esp,0x10
c00133ec:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00133f1:	75 26                	jne    c0013419 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00133f3:	83 ec 0c             	sub    esp,0xc
c00133f6:	53                   	push   ebx
c00133f7:	e8 a0 d3 fe ff       	call   c000079c <strlen>
c00133fc:	83 c4 10             	add    esp,0x10
c00133ff:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013404:	74 26                	je     c001342c <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013406:	83 ec 0c             	sub    esp,0xc
c0013409:	53                   	push   ebx
c001340a:	e8 8d d3 fe ff       	call   c000079c <strlen>
c001340f:	83 c4 10             	add    esp,0x10
c0013412:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013417:	eb c7                	jmp    c00133e0 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013419:	83 ec 0c             	sub    esp,0xc
c001341c:	53                   	push   ebx
c001341d:	e8 7a d3 fe ff       	call   c000079c <strlen>
c0013422:	83 c4 10             	add    esp,0x10
c0013425:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001342a:	74 c7                	je     c00133f3 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001342c:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013432:	5b                   	pop    ebx
c0013433:	5e                   	pop    esi
c0013434:	5f                   	pop    edi
c0013435:	5d                   	pop    ebp
c0013436:	c3                   	ret    
c0013437:	90                   	nop

c0013438 <File::File(char const*, Process*)>:
c0013438:	83 ec 0c             	sub    esp,0xc
c001343b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001343f:	83 ec 08             	sub    esp,0x8
c0013442:	6a 00                	push   0x0
c0013444:	50                   	push   eax
c0013445:	e8 be e2 ff ff       	call   c0011708 <UnixFile::UnixFile(int)>
c001344a:	83 c4 10             	add    esp,0x10
c001344d:	ba 4c ab 02 c0       	mov    edx,0xc002ab4c
c0013452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013456:	89 10                	mov    DWORD PTR [eax],edx
c0013458:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001345c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013466:	83 c0 0d             	add    eax,0xd
c0013469:	83 ec 04             	sub    esp,0x4
c001346c:	52                   	push   edx
c001346d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013471:	50                   	push   eax
c0013472:	e8 17 fe ff ff       	call   c001328e <Fs::standardiseFiles(char*, char const*, char const*)>
c0013477:	83 c4 10             	add    esp,0x10
c001347a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001347e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013481:	8d 50 bf             	lea    edx,[eax-0x41]
c0013484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013488:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001348e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013492:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013496:	90                   	nop
c0013497:	83 c4 0c             	add    esp,0xc
c001349a:	c3                   	ret    
c001349b:	90                   	nop

c001349c <File::open(FileOpenMode)>:
c001349c:	53                   	push   ebx
c001349d:	b8 0b 00 00 00       	mov    eax,0xb
c00134a2:	83 ec 08             	sub    esp,0x8
c00134a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134a9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00134b0:	80 fa 19             	cmp    dl,0x19
c00134b3:	77 40                	ja     c00134f5 <File::open(FileOpenMode)+0x59>
c00134b5:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c00134bc:	85 d2                	test   edx,edx
c00134be:	74 35                	je     c00134f5 <File::open(FileOpenMode)+0x59>
c00134c0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134c6:	85 d2                	test   edx,edx
c00134c8:	74 2b                	je     c00134f5 <File::open(FileOpenMode)+0x59>
c00134ca:	b8 06 00 00 00       	mov    eax,0x6
c00134cf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00134d3:	75 20                	jne    c00134f5 <File::open(FileOpenMode)+0x59>
c00134d5:	8b 02                	mov    eax,DWORD PTR [edx]
c00134d7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00134dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134e1:	51                   	push   ecx
c00134e2:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00134e5:	51                   	push   ecx
c00134e6:	52                   	push   edx
c00134e7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00134ea:	83 c4 10             	add    esp,0x10
c00134ed:	85 c0                	test   eax,eax
c00134ef:	75 04                	jne    c00134f5 <File::open(FileOpenMode)+0x59>
c00134f1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134f5:	83 c4 08             	add    esp,0x8
c00134f8:	5b                   	pop    ebx
c00134f9:	c3                   	ret    

c00134fa <File::close()>:
c00134fa:	53                   	push   ebx
c00134fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013500:	83 ec 08             	sub    esp,0x8
c0013503:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013507:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001350e:	80 fa 19             	cmp    dl,0x19
c0013511:	77 41                	ja     c0013554 <File::close()+0x5a>
c0013513:	8b 1c 95 80 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1580]
c001351a:	85 db                	test   ebx,ebx
c001351c:	74 36                	je     c0013554 <File::close()+0x5a>
c001351e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013525:	74 2d                	je     c0013554 <File::close()+0x5a>
c0013527:	b8 05 00 00 00       	mov    eax,0x5
c001352c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013530:	74 22                	je     c0013554 <File::close()+0x5a>
c0013532:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013536:	8b 04 95 80 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1580]
c001353d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013543:	53                   	push   ebx
c0013544:	53                   	push   ebx
c0013545:	8b 10                	mov    edx,DWORD PTR [eax]
c0013547:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001354d:	50                   	push   eax
c001354e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013551:	83 c4 10             	add    esp,0x10
c0013554:	83 c4 08             	add    esp,0x8
c0013557:	5b                   	pop    ebx
c0013558:	c3                   	ret    
c0013559:	90                   	nop

c001355a <File::seek(unsigned long long)>:
c001355a:	56                   	push   esi
c001355b:	53                   	push   ebx
c001355c:	b8 0b 00 00 00       	mov    eax,0xb
c0013561:	51                   	push   ecx
c0013562:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013566:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001356a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013571:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013575:	80 fa 19             	cmp    dl,0x19
c0013578:	77 31                	ja     c00135ab <File::seek(unsigned long long)+0x51>
c001357a:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c0013581:	85 d2                	test   edx,edx
c0013583:	74 26                	je     c00135ab <File::seek(unsigned long long)+0x51>
c0013585:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001358b:	85 d2                	test   edx,edx
c001358d:	74 1c                	je     c00135ab <File::seek(unsigned long long)+0x51>
c001358f:	b8 05 00 00 00       	mov    eax,0x5
c0013594:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013598:	74 11                	je     c00135ab <File::seek(unsigned long long)+0x51>
c001359a:	8b 02                	mov    eax,DWORD PTR [edx]
c001359c:	53                   	push   ebx
c001359d:	51                   	push   ecx
c001359e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00135a4:	52                   	push   edx
c00135a5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135a8:	83 c4 10             	add    esp,0x10
c00135ab:	5a                   	pop    edx
c00135ac:	5b                   	pop    ebx
c00135ad:	5e                   	pop    esi
c00135ae:	c3                   	ret    
c00135af:	90                   	nop

c00135b0 <File::tell(unsigned long long*)>:
c00135b0:	83 ec 0c             	sub    esp,0xc
c00135b3:	b8 0b 00 00 00       	mov    eax,0xb
c00135b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135bc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135c3:	80 fa 19             	cmp    dl,0x19
c00135c6:	77 34                	ja     c00135fc <File::tell(unsigned long long*)+0x4c>
c00135c8:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c00135cf:	85 d2                	test   edx,edx
c00135d1:	74 29                	je     c00135fc <File::tell(unsigned long long*)+0x4c>
c00135d3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135d9:	85 d2                	test   edx,edx
c00135db:	74 1f                	je     c00135fc <File::tell(unsigned long long*)+0x4c>
c00135dd:	b8 05 00 00 00       	mov    eax,0x5
c00135e2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135e6:	74 14                	je     c00135fc <File::tell(unsigned long long*)+0x4c>
c00135e8:	50                   	push   eax
c00135e9:	8b 02                	mov    eax,DWORD PTR [edx]
c00135eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135ef:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135f5:	52                   	push   edx
c00135f6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00135f9:	83 c4 10             	add    esp,0x10
c00135fc:	83 c4 0c             	add    esp,0xc
c00135ff:	c3                   	ret    

c0013600 <File::rewind()>:
c0013600:	83 ec 10             	sub    esp,0x10
c0013603:	6a 00                	push   0x0
c0013605:	6a 00                	push   0x0
c0013607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001360b:	e8 4a ff ff ff       	call   c001355a <File::seek(unsigned long long)>
c0013610:	83 c4 1c             	add    esp,0x1c
c0013613:	c3                   	ret    

c0013614 <File::unlink()>:
c0013614:	83 ec 0c             	sub    esp,0xc
c0013617:	b8 0b 00 00 00       	mov    eax,0xb
c001361c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013620:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013627:	80 f9 19             	cmp    cl,0x19
c001362a:	77 2f                	ja     c001365b <File::unlink()+0x47>
c001362c:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0013633:	85 c9                	test   ecx,ecx
c0013635:	74 24                	je     c001365b <File::unlink()+0x47>
c0013637:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001363d:	85 c9                	test   ecx,ecx
c001363f:	74 1a                	je     c001365b <File::unlink()+0x47>
c0013641:	b8 06 00 00 00       	mov    eax,0x6
c0013646:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001364a:	75 0f                	jne    c001365b <File::unlink()+0x47>
c001364c:	83 c2 0d             	add    edx,0xd
c001364f:	50                   	push   eax
c0013650:	50                   	push   eax
c0013651:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013653:	52                   	push   edx
c0013654:	51                   	push   ecx
c0013655:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013658:	83 c4 10             	add    esp,0x10
c001365b:	83 c4 0c             	add    esp,0xc
c001365e:	c3                   	ret    
c001365f:	90                   	nop

c0013660 <File::rename(char const*)>:
c0013660:	83 ec 0c             	sub    esp,0xc
c0013663:	b8 0b 00 00 00       	mov    eax,0xb
c0013668:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001366c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013673:	80 f9 19             	cmp    cl,0x19
c0013676:	77 32                	ja     c00136aa <File::rename(char const*)+0x4a>
c0013678:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c001367f:	85 c9                	test   ecx,ecx
c0013681:	74 27                	je     c00136aa <File::rename(char const*)+0x4a>
c0013683:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013689:	85 c9                	test   ecx,ecx
c001368b:	74 1d                	je     c00136aa <File::rename(char const*)+0x4a>
c001368d:	b8 06 00 00 00       	mov    eax,0x6
c0013692:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013696:	75 12                	jne    c00136aa <File::rename(char const*)+0x4a>
c0013698:	83 c2 0d             	add    edx,0xd
c001369b:	50                   	push   eax
c001369c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001369e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136a2:	52                   	push   edx
c00136a3:	51                   	push   ecx
c00136a4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136a7:	83 c4 10             	add    esp,0x10
c00136aa:	83 c4 0c             	add    esp,0xc
c00136ad:	c3                   	ret    

c00136ae <File::chfatattr(unsigned char, unsigned char)>:
c00136ae:	57                   	push   edi
c00136af:	b8 0b 00 00 00       	mov    eax,0xb
c00136b4:	56                   	push   esi
c00136b5:	53                   	push   ebx
c00136b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136ba:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136be:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136c5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136c9:	80 f9 19             	cmp    cl,0x19
c00136cc:	77 37                	ja     c0013705 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136ce:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c00136d5:	85 c9                	test   ecx,ecx
c00136d7:	74 2c                	je     c0013705 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136d9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136df:	85 c9                	test   ecx,ecx
c00136e1:	74 22                	je     c0013705 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136e3:	b8 06 00 00 00       	mov    eax,0x6
c00136e8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136ec:	75 17                	jne    c0013705 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136ee:	8b 39                	mov    edi,DWORD PTR [ecx]
c00136f0:	89 f0                	mov    eax,esi
c00136f2:	83 c2 0d             	add    edx,0xd
c00136f5:	0f b6 f0             	movzx  esi,al
c00136f8:	0f b6 db             	movzx  ebx,bl
c00136fb:	56                   	push   esi
c00136fc:	53                   	push   ebx
c00136fd:	52                   	push   edx
c00136fe:	51                   	push   ecx
c00136ff:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013702:	83 c4 10             	add    esp,0x10
c0013705:	5b                   	pop    ebx
c0013706:	5e                   	pop    esi
c0013707:	5f                   	pop    edi
c0013708:	c3                   	ret    
c0013709:	90                   	nop

c001370a <File::exists()>:
c001370a:	83 ec 0c             	sub    esp,0xc
c001370d:	31 c0                	xor    eax,eax
c001370f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013713:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001371a:	80 f9 19             	cmp    cl,0x19
c001371d:	77 24                	ja     c0013743 <File::exists()+0x39>
c001371f:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0013726:	85 c9                	test   ecx,ecx
c0013728:	74 19                	je     c0013743 <File::exists()+0x39>
c001372a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013730:	85 c9                	test   ecx,ecx
c0013732:	74 0f                	je     c0013743 <File::exists()+0x39>
c0013734:	83 c2 0d             	add    edx,0xd
c0013737:	50                   	push   eax
c0013738:	50                   	push   eax
c0013739:	8b 01                	mov    eax,DWORD PTR [ecx]
c001373b:	52                   	push   edx
c001373c:	51                   	push   ecx
c001373d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013740:	83 c4 10             	add    esp,0x10
c0013743:	83 c4 0c             	add    esp,0xc
c0013746:	c3                   	ret    
c0013747:	90                   	nop

c0013748 <File::stat(unsigned long long*, bool*)>:
c0013748:	56                   	push   esi
c0013749:	53                   	push   ebx
c001374a:	50                   	push   eax
c001374b:	b8 0b 00 00 00       	mov    eax,0xb
c0013750:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013754:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013758:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001375f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013763:	80 f9 19             	cmp    cl,0x19
c0013766:	77 3d                	ja     c00137a5 <File::stat(unsigned long long*, bool*)+0x5d>
c0013768:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c001376f:	85 c9                	test   ecx,ecx
c0013771:	74 32                	je     c00137a5 <File::stat(unsigned long long*, bool*)+0x5d>
c0013773:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013779:	85 c9                	test   ecx,ecx
c001377b:	74 28                	je     c00137a5 <File::stat(unsigned long long*, bool*)+0x5d>
c001377d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001377f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013783:	74 13                	je     c0013798 <File::stat(unsigned long long*, bool*)+0x50>
c0013785:	83 ec 04             	sub    esp,0x4
c0013788:	56                   	push   esi
c0013789:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001378f:	51                   	push   ecx
c0013790:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013793:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013796:	eb 0a                	jmp    c00137a2 <File::stat(unsigned long long*, bool*)+0x5a>
c0013798:	53                   	push   ebx
c0013799:	83 c2 0d             	add    edx,0xd
c001379c:	56                   	push   esi
c001379d:	52                   	push   edx
c001379e:	51                   	push   ecx
c001379f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00137a2:	83 c4 10             	add    esp,0x10
c00137a5:	5a                   	pop    edx
c00137a6:	5b                   	pop    ebx
c00137a7:	5e                   	pop    esi
c00137a8:	c3                   	ret    

c00137a9 <Fs::setcwd(Process*, char*)>:
c00137a9:	55                   	push   ebp
c00137aa:	57                   	push   edi
c00137ab:	56                   	push   esi
c00137ac:	53                   	push   ebx
c00137ad:	81 ec 20 02 00 00    	sub    esp,0x220
c00137b3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00137ba:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00137c0:	57                   	push   edi
c00137c1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00137c8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00137cc:	56                   	push   esi
c00137cd:	e8 bc fa ff ff       	call   c001328e <Fs::standardiseFiles(char*, char const*, char const*)>
c00137d2:	89 34 24             	mov    DWORD PTR [esp],esi
c00137d5:	e8 c2 cf fe ff       	call   c000079c <strlen>
c00137da:	83 c4 10             	add    esp,0x10
c00137dd:	83 f8 02             	cmp    eax,0x2
c00137e0:	77 17                	ja     c00137f9 <Fs::setcwd(Process*, char*)+0x50>
c00137e2:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00137e7:	83 e8 41             	sub    eax,0x41
c00137ea:	83 f8 19             	cmp    eax,0x19
c00137ed:	76 24                	jbe    c0013813 <Fs::setcwd(Process*, char*)+0x6a>
c00137ef:	b8 03 00 00 00       	mov    eax,0x3
c00137f4:	e9 e0 00 00 00       	jmp    c00138d9 <Fs::setcwd(Process*, char*)+0x130>
c00137f9:	83 ec 0c             	sub    esp,0xc
c00137fc:	56                   	push   esi
c00137fd:	e8 9a cf fe ff       	call   c000079c <strlen>
c0013802:	83 c4 10             	add    esp,0x10
c0013805:	83 f8 03             	cmp    eax,0x3
c0013808:	75 34                	jne    c001383e <Fs::setcwd(Process*, char*)+0x95>
c001380a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001380f:	75 2d                	jne    c001383e <Fs::setcwd(Process*, char*)+0x95>
c0013811:	eb cf                	jmp    c00137e2 <Fs::setcwd(Process*, char*)+0x39>
c0013813:	8b 14 85 80 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1580]
c001381a:	b8 05 00 00 00       	mov    eax,0x5
c001381f:	85 d2                	test   edx,edx
c0013821:	0f 84 b2 00 00 00    	je     c00138d9 <Fs::setcwd(Process*, char*)+0x130>
c0013827:	b8 06 00 00 00       	mov    eax,0x6
c001382c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013833:	0f 85 92 00 00 00    	jne    c00138cb <Fs::setcwd(Process*, char*)+0x122>
c0013839:	e9 9b 00 00 00       	jmp    c00138d9 <Fs::setcwd(Process*, char*)+0x130>
c001383e:	83 ec 0c             	sub    esp,0xc
c0013841:	68 14 01 00 00       	push   0x114
c0013846:	e8 00 c0 ff ff       	call   c000f84b <malloc>
c001384b:	83 c4 0c             	add    esp,0xc
c001384e:	89 c3                	mov    ebx,eax
c0013850:	55                   	push   ebp
c0013851:	56                   	push   esi
c0013852:	50                   	push   eax
c0013853:	e8 e0 fb ff ff       	call   c0013438 <File::File(char const*, Process*)>
c0013858:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001385d:	83 c4 0c             	add    esp,0xc
c0013860:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013864:	50                   	push   eax
c0013865:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013869:	50                   	push   eax
c001386a:	53                   	push   ebx
c001386b:	e8 d8 fe ff ff       	call   c0013748 <File::stat(unsigned long long*, bool*)>
c0013870:	83 c4 10             	add    esp,0x10
c0013873:	83 f8 02             	cmp    eax,0x2
c0013876:	74 04                	je     c001387c <Fs::setcwd(Process*, char*)+0xd3>
c0013878:	85 c0                	test   eax,eax
c001387a:	74 1c                	je     c0013898 <Fs::setcwd(Process*, char*)+0xef>
c001387c:	b8 01 00 00 00       	mov    eax,0x1
c0013881:	85 db                	test   ebx,ebx
c0013883:	74 54                	je     c00138d9 <Fs::setcwd(Process*, char*)+0x130>
c0013885:	83 ec 0c             	sub    esp,0xc
c0013888:	8b 03                	mov    eax,DWORD PTR [ebx]
c001388a:	53                   	push   ebx
c001388b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001388e:	83 c4 10             	add    esp,0x10
c0013891:	b8 01 00 00 00       	mov    eax,0x1
c0013896:	eb 41                	jmp    c00138d9 <Fs::setcwd(Process*, char*)+0x130>
c0013898:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001389d:	75 1c                	jne    c00138bb <Fs::setcwd(Process*, char*)+0x112>
c001389f:	b8 02 00 00 00       	mov    eax,0x2
c00138a4:	85 db                	test   ebx,ebx
c00138a6:	74 31                	je     c00138d9 <Fs::setcwd(Process*, char*)+0x130>
c00138a8:	83 ec 0c             	sub    esp,0xc
c00138ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138ad:	53                   	push   ebx
c00138ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138b1:	83 c4 10             	add    esp,0x10
c00138b4:	b8 02 00 00 00       	mov    eax,0x2
c00138b9:	eb 1e                	jmp    c00138d9 <Fs::setcwd(Process*, char*)+0x130>
c00138bb:	85 db                	test   ebx,ebx
c00138bd:	74 0c                	je     c00138cb <Fs::setcwd(Process*, char*)+0x122>
c00138bf:	83 ec 0c             	sub    esp,0xc
c00138c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138c4:	53                   	push   ebx
c00138c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138c8:	83 c4 10             	add    esp,0x10
c00138cb:	50                   	push   eax
c00138cc:	50                   	push   eax
c00138cd:	56                   	push   esi
c00138ce:	57                   	push   edi
c00138cf:	e8 68 cf fe ff       	call   c000083c <strcpy>
c00138d4:	83 c4 10             	add    esp,0x10
c00138d7:	31 c0                	xor    eax,eax
c00138d9:	81 c4 1c 02 00 00    	add    esp,0x21c
c00138df:	5b                   	pop    ebx
c00138e0:	5e                   	pop    esi
c00138e1:	5f                   	pop    edi
c00138e2:	5d                   	pop    ebp
c00138e3:	c3                   	ret    

c00138e4 <Directory::Directory(char const*, Process*)>:
c00138e4:	83 ec 0c             	sub    esp,0xc
c00138e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138eb:	83 ec 08             	sub    esp,0x8
c00138ee:	6a 00                	push   0x0
c00138f0:	50                   	push   eax
c00138f1:	e8 12 de ff ff       	call   c0011708 <UnixFile::UnixFile(int)>
c00138f6:	83 c4 10             	add    esp,0x10
c00138f9:	ba 68 ab 02 c0       	mov    edx,0xc002ab68
c00138fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013902:	89 10                	mov    DWORD PTR [eax],edx
c0013904:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013908:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001390e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013912:	83 c0 0d             	add    eax,0xd
c0013915:	83 ec 04             	sub    esp,0x4
c0013918:	52                   	push   edx
c0013919:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001391d:	50                   	push   eax
c001391e:	e8 6b f9 ff ff       	call   c001328e <Fs::standardiseFiles(char*, char const*, char const*)>
c0013923:	83 c4 10             	add    esp,0x10
c0013926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001392d:	8d 50 bf             	lea    edx,[eax-0x41]
c0013930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013934:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001393a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001393e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013942:	90                   	nop
c0013943:	83 c4 0c             	add    esp,0xc
c0013946:	c3                   	ret    
c0013947:	90                   	nop

c0013948 <Directory::open()>:
c0013948:	53                   	push   ebx
c0013949:	b8 0b 00 00 00       	mov    eax,0xb
c001394e:	83 ec 08             	sub    esp,0x8
c0013951:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013955:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001395c:	80 fa 19             	cmp    dl,0x19
c001395f:	77 3d                	ja     c001399e <Directory::open()+0x56>
c0013961:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c0013968:	85 d2                	test   edx,edx
c001396a:	74 32                	je     c001399e <Directory::open()+0x56>
c001396c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013972:	85 d2                	test   edx,edx
c0013974:	74 28                	je     c001399e <Directory::open()+0x56>
c0013976:	b8 06 00 00 00       	mov    eax,0x6
c001397b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001397f:	75 1d                	jne    c001399e <Directory::open()+0x56>
c0013981:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013987:	50                   	push   eax
c0013988:	8b 02                	mov    eax,DWORD PTR [edx]
c001398a:	51                   	push   ecx
c001398b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001398e:	51                   	push   ecx
c001398f:	52                   	push   edx
c0013990:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013993:	83 c4 10             	add    esp,0x10
c0013996:	85 c0                	test   eax,eax
c0013998:	75 04                	jne    c001399e <Directory::open()+0x56>
c001399a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001399e:	83 c4 08             	add    esp,0x8
c00139a1:	5b                   	pop    ebx
c00139a2:	c3                   	ret    
c00139a3:	90                   	nop

c00139a4 <Directory::close()>:
c00139a4:	53                   	push   ebx
c00139a5:	b8 0b 00 00 00       	mov    eax,0xb
c00139aa:	83 ec 08             	sub    esp,0x8
c00139ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139b1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139b8:	80 fa 19             	cmp    dl,0x19
c00139bb:	77 41                	ja     c00139fe <Directory::close()+0x5a>
c00139bd:	8b 1c 95 80 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1580]
c00139c4:	85 db                	test   ebx,ebx
c00139c6:	74 36                	je     c00139fe <Directory::close()+0x5a>
c00139c8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00139cf:	74 2d                	je     c00139fe <Directory::close()+0x5a>
c00139d1:	b8 05 00 00 00       	mov    eax,0x5
c00139d6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00139da:	74 22                	je     c00139fe <Directory::close()+0x5a>
c00139dc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00139e0:	8b 04 95 80 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1580]
c00139e7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00139ed:	53                   	push   ebx
c00139ee:	53                   	push   ebx
c00139ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00139f1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00139f7:	50                   	push   eax
c00139f8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00139fb:	83 c4 10             	add    esp,0x10
c00139fe:	83 c4 08             	add    esp,0x8
c0013a01:	5b                   	pop    ebx
c0013a02:	c3                   	ret    
c0013a03:	90                   	nop

c0013a04 <Directory::unlink()>:
c0013a04:	83 ec 0c             	sub    esp,0xc
c0013a07:	b8 0b 00 00 00       	mov    eax,0xb
c0013a0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a10:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a17:	80 f9 19             	cmp    cl,0x19
c0013a1a:	77 2f                	ja     c0013a4b <Directory::unlink()+0x47>
c0013a1c:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0013a23:	85 c9                	test   ecx,ecx
c0013a25:	74 24                	je     c0013a4b <Directory::unlink()+0x47>
c0013a27:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a2d:	85 c9                	test   ecx,ecx
c0013a2f:	74 1a                	je     c0013a4b <Directory::unlink()+0x47>
c0013a31:	b8 06 00 00 00       	mov    eax,0x6
c0013a36:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a3a:	75 0f                	jne    c0013a4b <Directory::unlink()+0x47>
c0013a3c:	83 c2 0d             	add    edx,0xd
c0013a3f:	50                   	push   eax
c0013a40:	50                   	push   eax
c0013a41:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a43:	52                   	push   edx
c0013a44:	51                   	push   ecx
c0013a45:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a48:	83 c4 10             	add    esp,0x10
c0013a4b:	83 c4 0c             	add    esp,0xc
c0013a4e:	c3                   	ret    
c0013a4f:	90                   	nop

c0013a50 <Directory::rename(char const*)>:
c0013a50:	83 ec 0c             	sub    esp,0xc
c0013a53:	b8 0b 00 00 00       	mov    eax,0xb
c0013a58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a5c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a63:	80 f9 19             	cmp    cl,0x19
c0013a66:	77 32                	ja     c0013a9a <Directory::rename(char const*)+0x4a>
c0013a68:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0013a6f:	85 c9                	test   ecx,ecx
c0013a71:	74 27                	je     c0013a9a <Directory::rename(char const*)+0x4a>
c0013a73:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a79:	85 c9                	test   ecx,ecx
c0013a7b:	74 1d                	je     c0013a9a <Directory::rename(char const*)+0x4a>
c0013a7d:	b8 06 00 00 00       	mov    eax,0x6
c0013a82:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a86:	75 12                	jne    c0013a9a <Directory::rename(char const*)+0x4a>
c0013a88:	83 c2 0d             	add    edx,0xd
c0013a8b:	50                   	push   eax
c0013a8c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a92:	52                   	push   edx
c0013a93:	51                   	push   ecx
c0013a94:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a97:	83 c4 10             	add    esp,0x10
c0013a9a:	83 c4 0c             	add    esp,0xc
c0013a9d:	c3                   	ret    

c0013a9e <Directory::exists()>:
c0013a9e:	83 ec 0c             	sub    esp,0xc
c0013aa1:	31 c0                	xor    eax,eax
c0013aa3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aa7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aae:	80 f9 19             	cmp    cl,0x19
c0013ab1:	77 24                	ja     c0013ad7 <Directory::exists()+0x39>
c0013ab3:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0013aba:	85 c9                	test   ecx,ecx
c0013abc:	74 19                	je     c0013ad7 <Directory::exists()+0x39>
c0013abe:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ac4:	85 c9                	test   ecx,ecx
c0013ac6:	74 0f                	je     c0013ad7 <Directory::exists()+0x39>
c0013ac8:	83 c2 0d             	add    edx,0xd
c0013acb:	50                   	push   eax
c0013acc:	50                   	push   eax
c0013acd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013acf:	52                   	push   edx
c0013ad0:	51                   	push   ecx
c0013ad1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013ad4:	83 c4 10             	add    esp,0x10
c0013ad7:	83 c4 0c             	add    esp,0xc
c0013ada:	c3                   	ret    
c0013adb:	90                   	nop

c0013adc <Directory::read(dirent*)>:
c0013adc:	83 ec 1c             	sub    esp,0x1c
c0013adf:	b8 0b 00 00 00       	mov    eax,0xb
c0013ae4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013ae8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013aef:	80 fa 19             	cmp    dl,0x19
c0013af2:	77 30                	ja     c0013b24 <Directory::read(dirent*)+0x48>
c0013af4:	8b 14 95 80 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1580]
c0013afb:	85 d2                	test   edx,edx
c0013afd:	74 25                	je     c0013b24 <Directory::read(dirent*)+0x48>
c0013aff:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b06:	74 1c                	je     c0013b24 <Directory::read(dirent*)+0x48>
c0013b08:	83 ec 0c             	sub    esp,0xc
c0013b0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b0d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b11:	52                   	push   edx
c0013b12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b16:	6a 00                	push   0x0
c0013b18:	68 10 01 00 00       	push   0x110
c0013b1d:	51                   	push   ecx
c0013b1e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b21:	83 c4 20             	add    esp,0x20
c0013b24:	83 c4 1c             	add    esp,0x1c
c0013b27:	c3                   	ret    

c0013b28 <Directory::create()>:
c0013b28:	83 ec 0c             	sub    esp,0xc
c0013b2b:	b8 0b 00 00 00       	mov    eax,0xb
c0013b30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b34:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b3b:	80 f9 19             	cmp    cl,0x19
c0013b3e:	77 2f                	ja     c0013b6f <Directory::create()+0x47>
c0013b40:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0013b47:	85 c9                	test   ecx,ecx
c0013b49:	74 24                	je     c0013b6f <Directory::create()+0x47>
c0013b4b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b51:	85 c9                	test   ecx,ecx
c0013b53:	74 1a                	je     c0013b6f <Directory::create()+0x47>
c0013b55:	b8 06 00 00 00       	mov    eax,0x6
c0013b5a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b5e:	75 0f                	jne    c0013b6f <Directory::create()+0x47>
c0013b60:	83 c2 0d             	add    edx,0xd
c0013b63:	50                   	push   eax
c0013b64:	50                   	push   eax
c0013b65:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b67:	52                   	push   edx
c0013b68:	51                   	push   ecx
c0013b69:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b6c:	83 c4 10             	add    esp,0x10
c0013b6f:	83 c4 0c             	add    esp,0xc
c0013b72:	c3                   	ret    
c0013b73:	90                   	nop

c0013b74 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b74:	b8 0a 00 00 00       	mov    eax,0xa
c0013b79:	c3                   	ret    

c0013b7a <Bus::Bus(char const*)>:
c0013b7a:	83 ec 0c             	sub    esp,0xc
c0013b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b81:	83 ec 08             	sub    esp,0x8
c0013b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b88:	50                   	push   eax
c0013b89:	e8 68 09 00 00       	call   c00144f6 <Device::Device(char const*)>
c0013b8e:	83 c4 10             	add    esp,0x10
c0013b91:	ba 84 ab 02 c0       	mov    edx,0xc002ab84
c0013b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b9a:	89 10                	mov    DWORD PTR [eax],edx
c0013b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ba0:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013baa:	90                   	nop
c0013bab:	83 c4 0c             	add    esp,0xc
c0013bae:	c3                   	ret    
c0013baf:	90                   	nop

c0013bb0 <Bus::~Bus()>:
c0013bb0:	83 ec 0c             	sub    esp,0xc
c0013bb3:	ba 84 ab 02 c0       	mov    edx,0xc002ab84
c0013bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bbc:	89 10                	mov    DWORD PTR [eax],edx
c0013bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bc2:	83 ec 0c             	sub    esp,0xc
c0013bc5:	50                   	push   eax
c0013bc6:	e8 0d 06 00 00       	call   c00141d8 <Device::~Device()>
c0013bcb:	83 c4 10             	add    esp,0x10
c0013bce:	90                   	nop
c0013bcf:	83 c4 0c             	add    esp,0xc
c0013bd2:	c3                   	ret    
c0013bd3:	90                   	nop

c0013bd4 <Bus::~Bus()>:
c0013bd4:	83 ec 0c             	sub    esp,0xc
c0013bd7:	83 ec 0c             	sub    esp,0xc
c0013bda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bde:	e8 cd ff ff ff       	call   c0013bb0 <Bus::~Bus()>
c0013be3:	83 c4 10             	add    esp,0x10
c0013be6:	83 ec 08             	sub    esp,0x8
c0013be9:	68 58 01 00 00       	push   0x158
c0013bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bf2:	e8 08 f2 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0013bf7:	83 c4 10             	add    esp,0x10
c0013bfa:	83 c4 0c             	add    esp,0xc
c0013bfd:	c3                   	ret    

c0013bfe <Buzzer::Buzzer(char const*)>:
c0013bfe:	83 ec 0c             	sub    esp,0xc
c0013c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c05:	83 ec 08             	sub    esp,0x8
c0013c08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c0c:	50                   	push   eax
c0013c0d:	e8 e4 08 00 00       	call   c00144f6 <Device::Device(char const*)>
c0013c12:	83 c4 10             	add    esp,0x10
c0013c15:	ba b0 ab 02 c0       	mov    edx,0xc002abb0
c0013c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c1e:	89 10                	mov    DWORD PTR [eax],edx
c0013c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c24:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c32:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c3c:	90                   	nop
c0013c3d:	83 c4 0c             	add    esp,0xc
c0013c40:	c3                   	ret    
c0013c41:	90                   	nop

c0013c42 <Buzzer::~Buzzer()>:
c0013c42:	83 ec 0c             	sub    esp,0xc
c0013c45:	ba b0 ab 02 c0       	mov    edx,0xc002abb0
c0013c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c4e:	89 10                	mov    DWORD PTR [eax],edx
c0013c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c54:	83 ec 0c             	sub    esp,0xc
c0013c57:	50                   	push   eax
c0013c58:	e8 7b 05 00 00       	call   c00141d8 <Device::~Device()>
c0013c5d:	83 c4 10             	add    esp,0x10
c0013c60:	90                   	nop
c0013c61:	83 c4 0c             	add    esp,0xc
c0013c64:	c3                   	ret    
c0013c65:	90                   	nop

c0013c66 <Buzzer::~Buzzer()>:
c0013c66:	83 ec 0c             	sub    esp,0xc
c0013c69:	83 ec 0c             	sub    esp,0xc
c0013c6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c70:	e8 cd ff ff ff       	call   c0013c42 <Buzzer::~Buzzer()>
c0013c75:	83 c4 10             	add    esp,0x10
c0013c78:	83 ec 08             	sub    esp,0x8
c0013c7b:	68 5c 01 00 00       	push   0x15c
c0013c80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c84:	e8 76 f1 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0013c89:	83 c4 10             	add    esp,0x10
c0013c8c:	83 c4 0c             	add    esp,0xc
c0013c8f:	c3                   	ret    

c0013c90 <Buzzer::stop()>:
c0013c90:	83 ec 14             	sub    esp,0x14
c0013c93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c97:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c99:	6a 00                	push   0x0
c0013c9b:	50                   	push   eax
c0013c9c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c9f:	83 c4 1c             	add    esp,0x1c
c0013ca2:	c3                   	ret    

c0013ca3 <beepThread(void*)>:
c0013ca3:	53                   	push   ebx
c0013ca4:	83 ec 08             	sub    esp,0x8
c0013ca7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cab:	e8 38 a1 00 00       	call   c001dde8 <unlockScheduler()>
c0013cb0:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013cb5:	52                   	push   edx
c0013cb6:	52                   	push   edx
c0013cb7:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013cbd:	52                   	push   edx
c0013cbe:	50                   	push   eax
c0013cbf:	e8 ac a6 00 00       	call   c001e370 <nanoSleep(unsigned long long)>
c0013cc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cc7:	e8 c4 ff ff ff       	call   c0013c90 <Buzzer::stop()>
c0013ccc:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013cd4:	83 c4 18             	add    esp,0x18
c0013cd7:	5b                   	pop    ebx
c0013cd8:	e9 d9 a5 00 00       	jmp    c001e2b6 <blockTask(TaskState)>
c0013cdd:	90                   	nop

c0013cde <Buzzer::beep(int, int, bool)>:
c0013cde:	57                   	push   edi
c0013cdf:	56                   	push   esi
c0013ce0:	53                   	push   ebx
c0013ce1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ce5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ce9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ced:	52                   	push   edx
c0013cee:	52                   	push   edx
c0013cef:	8b 06                	mov    eax,DWORD PTR [esi]
c0013cf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cf5:	56                   	push   esi
c0013cf6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013cf9:	83 c4 10             	add    esp,0x10
c0013cfc:	89 f8                	mov    eax,edi
c0013cfe:	84 c0                	test   al,al
c0013d00:	74 1f                	je     c0013d21 <Buzzer::beep(int, int, bool)+0x43>
c0013d02:	50                   	push   eax
c0013d03:	50                   	push   eax
c0013d04:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d0a:	99                   	cdq    
c0013d0b:	52                   	push   edx
c0013d0c:	50                   	push   eax
c0013d0d:	e8 5e a6 00 00       	call   c001e370 <nanoSleep(unsigned long long)>
c0013d12:	83 c4 10             	add    esp,0x10
c0013d15:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d19:	5b                   	pop    ebx
c0013d1a:	5e                   	pop    esi
c0013d1b:	5f                   	pop    edi
c0013d1c:	e9 6f ff ff ff       	jmp    c0013c90 <Buzzer::stop()>
c0013d21:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d27:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0013d2c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d34:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d38:	c7 44 24 14 a3 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013ca3
c0013d40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d44:	5b                   	pop    ebx
c0013d45:	5e                   	pop    esi
c0013d46:	5f                   	pop    edi
c0013d47:	e9 cc a1 00 00       	jmp    c001df18 <Process::createThread(void (*)(void*), void*, int)>

c0013d4c <User::loadClockSettings(int)>:
c0013d4c:	53                   	push   ebx
c0013d4d:	83 ec 14             	sub    esp,0x14
c0013d50:	68 14 01 00 00       	push   0x114
c0013d55:	e8 f1 ba ff ff       	call   c000f84b <malloc>
c0013d5a:	83 c4 0c             	add    esp,0xc
c0013d5d:	89 c3                	mov    ebx,eax
c0013d5f:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c0013d65:	68 d8 ab 02 c0       	push   0xc002abd8
c0013d6a:	50                   	push   eax
c0013d6b:	e8 c8 f6 ff ff       	call   c0013438 <File::File(char const*, Process*)>
c0013d70:	58                   	pop    eax
c0013d71:	5a                   	pop    edx
c0013d72:	6a 01                	push   0x1
c0013d74:	53                   	push   ebx
c0013d75:	e8 22 f7 ff ff       	call   c001349c <File::open(FileOpenMode)>
c0013d7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d7d:	e8 78 f7 ff ff       	call   c00134fa <File::close()>
c0013d82:	83 c4 10             	add    esp,0x10
c0013d85:	85 db                	test   ebx,ebx
c0013d87:	74 0f                	je     c0013d98 <User::loadClockSettings(int)+0x4c>
c0013d89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d8b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d92:	83 c4 08             	add    esp,0x8
c0013d95:	5b                   	pop    ebx
c0013d96:	ff e0                	jmp    eax
c0013d98:	83 c4 08             	add    esp,0x8
c0013d9b:	5b                   	pop    ebx
c0013d9c:	c3                   	ret    
c0013d9d:	90                   	nop

c0013d9e <Clock::Clock(char const*)>:
c0013d9e:	83 ec 0c             	sub    esp,0xc
c0013da1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da5:	83 ec 08             	sub    esp,0x8
c0013da8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dac:	50                   	push   eax
c0013dad:	e8 44 07 00 00       	call   c00144f6 <Device::Device(char const*)>
c0013db2:	83 c4 10             	add    esp,0x10
c0013db5:	ba 00 ac 02 c0       	mov    edx,0xc002ac00
c0013dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dbe:	89 10                	mov    DWORD PTR [eax],edx
c0013dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dc4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013dce:	90                   	nop
c0013dcf:	83 c4 0c             	add    esp,0xc
c0013dd2:	c3                   	ret    
c0013dd3:	90                   	nop

c0013dd4 <Clock::~Clock()>:
c0013dd4:	83 ec 0c             	sub    esp,0xc
c0013dd7:	ba 00 ac 02 c0       	mov    edx,0xc002ac00
c0013ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de0:	89 10                	mov    DWORD PTR [eax],edx
c0013de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de6:	83 ec 0c             	sub    esp,0xc
c0013de9:	50                   	push   eax
c0013dea:	e8 e9 03 00 00       	call   c00141d8 <Device::~Device()>
c0013def:	83 c4 10             	add    esp,0x10
c0013df2:	90                   	nop
c0013df3:	83 c4 0c             	add    esp,0xc
c0013df6:	c3                   	ret    
c0013df7:	90                   	nop

c0013df8 <Clock::~Clock()>:
c0013df8:	83 ec 0c             	sub    esp,0xc
c0013dfb:	83 ec 0c             	sub    esp,0xc
c0013dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e02:	e8 cd ff ff ff       	call   c0013dd4 <Clock::~Clock()>
c0013e07:	83 c4 10             	add    esp,0x10
c0013e0a:	83 ec 08             	sub    esp,0x8
c0013e0d:	68 58 01 00 00       	push   0x158
c0013e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e16:	e8 e4 ef ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0013e1b:	83 c4 10             	add    esp,0x10
c0013e1e:	83 c4 0c             	add    esp,0xc
c0013e21:	c3                   	ret    

c0013e22 <Clock::timeInSecondsLocal()>:
c0013e22:	53                   	push   ebx
c0013e23:	83 ec 14             	sub    esp,0x14
c0013e26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e2c:	50                   	push   eax
c0013e2d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e30:	0f b6 0d fc e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e5fc
c0013e37:	03 0d 00 e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e600
c0013e3d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e43:	89 cb                	mov    ebx,ecx
c0013e45:	c1 fb 1f             	sar    ebx,0x1f
c0013e48:	01 c8                	add    eax,ecx
c0013e4a:	11 da                	adc    edx,ebx
c0013e4c:	83 c4 10             	add    esp,0x10
c0013e4f:	31 c9                	xor    ecx,ecx
c0013e51:	80 3d fd e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5fd,0x0
c0013e58:	74 05                	je     c0013e5f <Clock::timeInSecondsLocal()+0x3d>
c0013e5a:	b9 08 07 00 00       	mov    ecx,0x708
c0013e5f:	31 db                	xor    ebx,ebx
c0013e61:	01 c8                	add    eax,ecx
c0013e63:	11 da                	adc    edx,ebx
c0013e65:	83 c4 08             	add    esp,0x8
c0013e68:	5b                   	pop    ebx
c0013e69:	c3                   	ret    

c0013e6a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e6a:	57                   	push   edi
c0013e6b:	56                   	push   esi
c0013e6c:	53                   	push   ebx
c0013e6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e71:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e75:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e77:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e7b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e7e:	0f b6 05 fc e5 02 c0 	movzx  eax,BYTE PTR ds:0xc002e5fc
c0013e85:	03 05 00 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e600
c0013e8b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e91:	99                   	cdq    
c0013e92:	29 c6                	sub    esi,eax
c0013e94:	19 d7                	sbb    edi,edx
c0013e96:	89 f0                	mov    eax,esi
c0013e98:	89 fa                	mov    edx,edi
c0013e9a:	31 f6                	xor    esi,esi
c0013e9c:	80 3d fd e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5fd,0x0
c0013ea3:	74 05                	je     c0013eaa <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013ea5:	be 08 07 00 00       	mov    esi,0x708
c0013eaa:	31 ff                	xor    edi,edi
c0013eac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013eb0:	29 f0                	sub    eax,esi
c0013eb2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013eb6:	19 fa                	sbb    edx,edi
c0013eb8:	89 d8                	mov    eax,ebx
c0013eba:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013ebe:	5b                   	pop    ebx
c0013ebf:	5e                   	pop    esi
c0013ec0:	5f                   	pop    edi
c0013ec1:	ff e0                	jmp    eax

c0013ec3 <datetimeToSeconds(datetime_t)>:
c0013ec3:	55                   	push   ebp
c0013ec4:	57                   	push   edi
c0013ec5:	56                   	push   esi
c0013ec6:	53                   	push   ebx
c0013ec7:	83 ec 14             	sub    esp,0x14
c0013eca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013ece:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013ed2:	89 d3                	mov    ebx,edx
c0013ed4:	0f b6 c6             	movzx  eax,dh
c0013ed7:	c1 eb 10             	shr    ebx,0x10
c0013eda:	48                   	dec    eax
c0013edb:	66 81 eb 6c 07       	sub    bx,0x76c
c0013ee0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013ee4:	0f b6 f5             	movzx  esi,ch
c0013ee7:	89 cf                	mov    edi,ecx
c0013ee9:	6b f6 3c             	imul   esi,esi,0x3c
c0013eec:	c1 ef 10             	shr    edi,0x10
c0013eef:	0f b6 c9             	movzx  ecx,cl
c0013ef2:	89 f8                	mov    eax,edi
c0013ef4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013efa:	0f b6 f8             	movzx  edi,al
c0013efd:	0f b6 d2             	movzx  edx,dl
c0013f00:	01 fe                	add    esi,edi
c0013f02:	01 f1                	add    ecx,esi
c0013f04:	0f b7 f3             	movzx  esi,bx
c0013f07:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f0b:	c1 f9 1f             	sar    ecx,0x1f
c0013f0e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f13:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f17:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f1c:	8b 0c 8d 40 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd53c0]
c0013f23:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f27:	76 29                	jbe    c0013f52 <datetimeToSeconds(datetime_t)+0x8f>
c0013f29:	f6 c3 03             	test   bl,0x3
c0013f2c:	75 24                	jne    c0013f52 <datetimeToSeconds(datetime_t)+0x8f>
c0013f2e:	31 d2                	xor    edx,edx
c0013f30:	bf 64 00 00 00       	mov    edi,0x64
c0013f35:	89 d8                	mov    eax,ebx
c0013f37:	66 f7 f7             	div    di
c0013f3a:	66 85 d2             	test   dx,dx
c0013f3d:	75 12                	jne    c0013f51 <datetimeToSeconds(datetime_t)+0x8e>
c0013f3f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f45:	bf 90 01 00 00       	mov    edi,0x190
c0013f4a:	99                   	cdq    
c0013f4b:	f7 ff                	idiv   edi
c0013f4d:	85 d2                	test   edx,edx
c0013f4f:	75 01                	jne    c0013f52 <datetimeToSeconds(datetime_t)+0x8f>
c0013f51:	41                   	inc    ecx
c0013f52:	66 83 fb 46          	cmp    bx,0x46
c0013f56:	76 45                	jbe    c0013f9d <datetimeToSeconds(datetime_t)+0xda>
c0013f58:	bb 46 00 00 00       	mov    ebx,0x46
c0013f5d:	bf 64 00 00 00       	mov    edi,0x64
c0013f62:	bd 90 01 00 00       	mov    ebp,0x190
c0013f67:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f6c:	f6 c3 03             	test   bl,0x3
c0013f6f:	75 23                	jne    c0013f94 <datetimeToSeconds(datetime_t)+0xd1>
c0013f71:	89 d8                	mov    eax,ebx
c0013f73:	99                   	cdq    
c0013f74:	f7 ff                	idiv   edi
c0013f76:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f7b:	85 d2                	test   edx,edx
c0013f7d:	75 15                	jne    c0013f94 <datetimeToSeconds(datetime_t)+0xd1>
c0013f7f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f85:	99                   	cdq    
c0013f86:	f7 fd                	idiv   ebp
c0013f88:	83 fa 01             	cmp    edx,0x1
c0013f8b:	19 c0                	sbb    eax,eax
c0013f8d:	f7 d0                	not    eax
c0013f8f:	05 6e 01 00 00       	add    eax,0x16e
c0013f94:	01 c1                	add    ecx,eax
c0013f96:	43                   	inc    ebx
c0013f97:	39 f3                	cmp    ebx,esi
c0013f99:	7c cc                	jl     c0013f67 <datetimeToSeconds(datetime_t)+0xa4>
c0013f9b:	eb 35                	jmp    c0013fd2 <datetimeToSeconds(datetime_t)+0x10f>
c0013f9d:	74 33                	je     c0013fd2 <datetimeToSeconds(datetime_t)+0x10f>
c0013f9f:	b8 45 00 00 00       	mov    eax,0x45
c0013fa4:	89 c2                	mov    edx,eax
c0013fa6:	83 e2 03             	and    edx,0x3
c0013fa9:	39 f0                	cmp    eax,esi
c0013fab:	7e 0f                	jle    c0013fbc <datetimeToSeconds(datetime_t)+0xf9>
c0013fad:	83 fa 01             	cmp    edx,0x1
c0013fb0:	19 d2                	sbb    edx,edx
c0013fb2:	48                   	dec    eax
c0013fb3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013fba:	eb e8                	jmp    c0013fa4 <datetimeToSeconds(datetime_t)+0xe1>
c0013fbc:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fc1:	85 d2                	test   edx,edx
c0013fc3:	75 0b                	jne    c0013fd0 <datetimeToSeconds(datetime_t)+0x10d>
c0013fc5:	66 83 fb 01          	cmp    bx,0x1
c0013fc9:	19 c0                	sbb    eax,eax
c0013fcb:	05 6e 01 00 00       	add    eax,0x16e
c0013fd0:	29 c1                	sub    ecx,eax
c0013fd2:	b8 80 51 01 00       	mov    eax,0x15180
c0013fd7:	f7 e9                	imul   ecx
c0013fd9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013fdd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013fe1:	83 c4 14             	add    esp,0x14
c0013fe4:	5b                   	pop    ebx
c0013fe5:	5e                   	pop    esi
c0013fe6:	5f                   	pop    edi
c0013fe7:	5d                   	pop    ebp
c0013fe8:	c3                   	ret    
c0013fe9:	90                   	nop

c0013fea <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013fea:	57                   	push   edi
c0013feb:	56                   	push   esi
c0013fec:	53                   	push   ebx
c0013fed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ff1:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ff3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013ff6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ffa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ffe:	e8 c0 fe ff ff       	call   c0013ec3 <datetimeToSeconds(datetime_t)>
c0014003:	59                   	pop    ecx
c0014004:	0f b6 0d fc e5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e5fc
c001400b:	5b                   	pop    ebx
c001400c:	03 0d 00 e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e600
c0014012:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014018:	89 cb                	mov    ebx,ecx
c001401a:	c1 fb 1f             	sar    ebx,0x1f
c001401d:	29 c8                	sub    eax,ecx
c001401f:	19 da                	sbb    edx,ebx
c0014021:	31 c9                	xor    ecx,ecx
c0014023:	80 3d fd e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5fd,0x0
c001402a:	74 05                	je     c0014031 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001402c:	b9 08 07 00 00       	mov    ecx,0x708
c0014031:	31 db                	xor    ebx,ebx
c0014033:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014037:	29 c8                	sub    eax,ecx
c0014039:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001403d:	19 da                	sbb    edx,ebx
c001403f:	89 f8                	mov    eax,edi
c0014041:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014045:	5b                   	pop    ebx
c0014046:	5e                   	pop    esi
c0014047:	5f                   	pop    edi
c0014048:	ff e0                	jmp    eax

c001404a <secondsToDatetime(unsigned long long)>:
c001404a:	55                   	push   ebp
c001404b:	57                   	push   edi
c001404c:	56                   	push   esi
c001404d:	53                   	push   ebx
c001404e:	83 ec 1c             	sub    esp,0x1c
c0014051:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014055:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014059:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001405d:	6a 00                	push   0x0
c001405f:	68 80 51 01 00       	push   0x15180
c0014064:	55                   	push   ebp
c0014065:	57                   	push   edi
c0014066:	e8 99 29 01 00       	call   c0026a04 <__udivdi3>
c001406b:	83 c4 10             	add    esp,0x10
c001406e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014074:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014078:	6a 00                	push   0x0
c001407a:	68 80 51 01 00       	push   0x15180
c001407f:	55                   	push   ebp
c0014080:	57                   	push   edi
c0014081:	bf 10 0e 00 00       	mov    edi,0xe10
c0014086:	e8 79 2a 01 00       	call   c0026b04 <__umoddi3>
c001408b:	83 c4 10             	add    esp,0x10
c001408e:	99                   	cdq    
c001408f:	f7 ff                	idiv   edi
c0014091:	bf 3c 00 00 00       	mov    edi,0x3c
c0014096:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014099:	89 d0                	mov    eax,edx
c001409b:	99                   	cdq    
c001409c:	f7 ff                	idiv   edi
c001409e:	85 db                	test   ebx,ebx
c00140a0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00140a3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00140a6:	79 11                	jns    c00140b9 <secondsToDatetime(unsigned long long)+0x6f>
c00140a8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140ac:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00140b2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140b7:	eb 07                	jmp    c00140c0 <secondsToDatetime(unsigned long long)+0x76>
c00140b9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140be:	89 d8                	mov    eax,ebx
c00140c0:	bf b4 05 00 00       	mov    edi,0x5b4
c00140c5:	99                   	cdq    
c00140c6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00140cb:	f7 f9                	idiv   ecx
c00140cd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00140d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140d6:	31 d2                	xor    edx,edx
c00140d8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00140e0:	01 c3                	add    ebx,eax
c00140e2:	89 d8                	mov    eax,ebx
c00140e4:	f7 f1                	div    ecx
c00140e6:	31 d2                	xor    edx,edx
c00140e8:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00140eb:	89 d8                	mov    eax,ebx
c00140ed:	f7 f7                	div    edi
c00140ef:	31 d2                	xor    edx,edx
c00140f1:	29 c1                	sub    ecx,eax
c00140f3:	89 d8                	mov    eax,ebx
c00140f5:	f7 f5                	div    ebp
c00140f7:	bd 6d 01 00 00       	mov    ebp,0x16d
c00140fc:	29 c1                	sub    ecx,eax
c00140fe:	31 d2                	xor    edx,edx
c0014100:	89 c8                	mov    eax,ecx
c0014102:	f7 f5                	div    ebp
c0014104:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001410d:	31 d2                	xor    edx,edx
c001410f:	89 c8                	mov    eax,ecx
c0014111:	f7 f5                	div    ebp
c0014113:	31 d2                	xor    edx,edx
c0014115:	01 c3                	add    ebx,eax
c0014117:	89 c8                	mov    eax,ecx
c0014119:	f7 f7                	div    edi
c001411b:	bf 99 00 00 00       	mov    edi,0x99
c0014120:	29 c3                	sub    ebx,eax
c0014122:	31 d2                	xor    edx,edx
c0014124:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001412c:	29 c3                	sub    ebx,eax
c001412e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014131:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014134:	bb 05 00 00 00       	mov    ebx,0x5
c0014139:	83 c1 02             	add    ecx,0x2
c001413c:	89 c8                	mov    eax,ecx
c001413e:	f7 f7                	div    edi
c0014140:	31 d2                	xor    edx,edx
c0014142:	89 c7                	mov    edi,eax
c0014144:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001414a:	83 c0 02             	add    eax,0x2
c001414d:	f7 f3                	div    ebx
c001414f:	89 eb                	mov    ebx,ebp
c0014151:	29 c3                	sub    ebx,eax
c0014153:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014159:	88 1e                	mov    BYTE PTR [esi],bl
c001415b:	19 c0                	sbb    eax,eax
c001415d:	31 d2                	xor    edx,edx
c001415f:	83 e0 0c             	and    eax,0xc
c0014162:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014166:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001416e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014172:	83 f9 01             	cmp    ecx,0x1
c0014175:	0f 96 c2             	setbe  dl
c0014178:	41                   	inc    ecx
c0014179:	01 d0                	add    eax,edx
c001417b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001417e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014182:	83 c4 1c             	add    esp,0x1c
c0014185:	89 f0                	mov    eax,esi
c0014187:	5b                   	pop    ebx
c0014188:	5e                   	pop    esi
c0014189:	5f                   	pop    edi
c001418a:	5d                   	pop    ebp
c001418b:	c2 04 00             	ret    0x4

c001418e <Clock::timeInDatetimeLocal()>:
c001418e:	53                   	push   ebx
c001418f:	83 ec 14             	sub    esp,0x14
c0014192:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014196:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001419a:	e8 83 fc ff ff       	call   c0013e22 <Clock::timeInSecondsLocal()>
c001419f:	83 c4 0c             	add    esp,0xc
c00141a2:	52                   	push   edx
c00141a3:	50                   	push   eax
c00141a4:	53                   	push   ebx
c00141a5:	e8 a0 fe ff ff       	call   c001404a <secondsToDatetime(unsigned long long)>
c00141aa:	89 d8                	mov    eax,ebx
c00141ac:	83 c4 14             	add    esp,0x14
c00141af:	5b                   	pop    ebx
c00141b0:	c2 04 00             	ret    0x4
c00141b3:	90                   	nop

c00141b4 <Device::hibernate()>:
c00141b4:	c3                   	ret    
c00141b5:	90                   	nop

c00141b6 <Device::wake()>:
c00141b6:	c3                   	ret    
c00141b7:	90                   	nop

c00141b8 <Device::detect()>:
c00141b8:	c3                   	ret    
c00141b9:	90                   	nop

c00141ba <Device::disableLegacy()>:
c00141ba:	c3                   	ret    
c00141bb:	90                   	nop

c00141bc <Device::powerSaving(PowerSavingLevel)>:
c00141bc:	c3                   	ret    
c00141bd:	90                   	nop

c00141be <DriverlessDevice::close(int, int, void*)>:
c00141be:	31 c0                	xor    eax,eax
c00141c0:	c3                   	ret    
c00141c1:	90                   	nop

c00141c2 <DriverlessDevice::detect()>:
c00141c2:	c3                   	ret    
c00141c3:	90                   	nop

c00141c4 <DriverlessDevice::open(int, int, void*)>:
c00141c4:	83 ec 18             	sub    esp,0x18
c00141c7:	68 70 ac 02 c0       	push   0xc002ac70
c00141cc:	e8 3a 64 00 00       	call   c001a60b <Krnl::panic(char const*)>
c00141d1:	83 c8 ff             	or     eax,0xffffffff
c00141d4:	83 c4 1c             	add    esp,0x1c
c00141d7:	c3                   	ret    

c00141d8 <Device::~Device()>:
c00141d8:	ba 98 ac 02 c0       	mov    edx,0xc002ac98
c00141dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141e1:	89 10                	mov    DWORD PTR [eax],edx
c00141e3:	90                   	nop
c00141e4:	c3                   	ret    
c00141e5:	90                   	nop

c00141e6 <Device::~Device()>:
c00141e6:	83 ec 0c             	sub    esp,0xc
c00141e9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00141ed:	e8 e6 ff ff ff       	call   c00141d8 <Device::~Device()>
c00141f2:	83 c4 04             	add    esp,0x4
c00141f5:	83 ec 08             	sub    esp,0x8
c00141f8:	68 58 01 00 00       	push   0x158
c00141fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014201:	e8 f9 eb ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0014206:	83 c4 10             	add    esp,0x10
c0014209:	83 c4 0c             	add    esp,0xc
c001420c:	c3                   	ret    
c001420d:	90                   	nop

c001420e <Device::findAndLoadDriver()>:
c001420e:	c3                   	ret    
c001420f:	90                   	nop

c0014210 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014210:	57                   	push   edi
c0014211:	b9 09 00 00 00       	mov    ecx,0x9
c0014216:	56                   	push   esi
c0014217:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001421b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001421f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014229:	81 c7 18 01 00 00    	add    edi,0x118
c001422f:	fc                   	cld    
c0014230:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014232:	5e                   	pop    esi
c0014233:	5f                   	pop    edi
c0014234:	c3                   	ret    
c0014235:	90                   	nop

c0014236 <Device::preOpenACPI(void*, char*, char*)>:
c0014236:	56                   	push   esi
c0014237:	53                   	push   ebx
c0014238:	83 ec 08             	sub    esp,0x8
c001423b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001423f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014243:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001424d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014251:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014257:	6a 1e                	push   0x1e
c0014259:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001425f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014263:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014269:	50                   	push   eax
c001426a:	e8 dd c4 fe ff       	call   c000074c <memcpy>
c001426f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014273:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014277:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001427f:	83 c4 14             	add    esp,0x14
c0014282:	5b                   	pop    ebx
c0014283:	5e                   	pop    esi
c0014284:	e9 c3 c4 fe ff       	jmp    c000074c <memcpy>
c0014289:	90                   	nop

c001428a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001428a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001428e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014293:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001429a:	75 0b                	jne    c00142a7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c001429c:	8b 00                	mov    eax,DWORD PTR [eax]
c001429e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142a2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00142a5:	eb 1e                	jmp    c00142c5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00142a7:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00142ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142b2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142b8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142ba:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142c2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00142c5:	ff e0                	jmp    eax
c00142c7:	90                   	nop

c00142c8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00142c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142cc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142d1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142d8:	75 0b                	jne    c00142e5 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00142da:	8b 00                	mov    eax,DWORD PTR [eax]
c00142dc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142e0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00142e3:	eb 1e                	jmp    c0014303 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00142e5:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00142ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142f0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142f6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142f8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014300:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014303:	ff e0                	jmp    eax
c0014305:	90                   	nop

c0014306 <Device::addChild(Device*)>:
c0014306:	53                   	push   ebx
c0014307:	83 ec 08             	sub    esp,0x8
c001430a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001430e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014312:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014318:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001431e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014320:	85 d2                	test   edx,edx
c0014322:	74 04                	je     c0014328 <Device::addChild(Device*)+0x22>
c0014324:	89 d3                	mov    ebx,edx
c0014326:	eb f6                	jmp    c001431e <Device::addChild(Device*)+0x18>
c0014328:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001432b:	83 ec 0c             	sub    esp,0xc
c001432e:	6a 08                	push   0x8
c0014330:	e8 16 b5 ff ff       	call   c000f84b <malloc>
c0014335:	89 03                	mov    DWORD PTR [ebx],eax
c0014337:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001433d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014344:	83 c4 18             	add    esp,0x18
c0014347:	5b                   	pop    ebx
c0014348:	c3                   	ret    
c0014349:	90                   	nop

c001434a <Device::removeAllChildren()>:
c001434a:	56                   	push   esi
c001434b:	53                   	push   ebx
c001434c:	52                   	push   edx
c001434d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014351:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014357:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001435a:	74 17                	je     c0014373 <Device::removeAllChildren()+0x29>
c001435c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001435f:	85 c0                	test   eax,eax
c0014361:	74 0c                	je     c001436f <Device::removeAllChildren()+0x25>
c0014363:	83 ec 0c             	sub    esp,0xc
c0014366:	8b 10                	mov    edx,DWORD PTR [eax]
c0014368:	50                   	push   eax
c0014369:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001436c:	83 c4 10             	add    esp,0x10
c001436f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014371:	eb e4                	jmp    c0014357 <Device::removeAllChildren()+0xd>
c0014373:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014379:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001437f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014385:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001438c:	58                   	pop    eax
c001438d:	5b                   	pop    ebx
c001438e:	5e                   	pop    esi
c001438f:	c3                   	ret    

c0014390 <Device::hibernateAll()>:
c0014390:	53                   	push   ebx
c0014391:	83 ec 14             	sub    esp,0x14
c0014394:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014398:	8b 03                	mov    eax,DWORD PTR [ebx]
c001439a:	53                   	push   ebx
c001439b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001439e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143a4:	83 c4 10             	add    esp,0x10
c00143a7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143aa:	74 0f                	je     c00143bb <Device::hibernateAll()+0x2b>
c00143ac:	83 ec 0c             	sub    esp,0xc
c00143af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143b2:	e8 d9 ff ff ff       	call   c0014390 <Device::hibernateAll()>
c00143b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143b9:	eb e9                	jmp    c00143a4 <Device::hibernateAll()+0x14>
c00143bb:	83 c4 08             	add    esp,0x8
c00143be:	5b                   	pop    ebx
c00143bf:	c3                   	ret    

c00143c0 <Device::wakeAll()>:
c00143c0:	53                   	push   ebx
c00143c1:	83 ec 14             	sub    esp,0x14
c00143c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ca:	53                   	push   ebx
c00143cb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00143ce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143d4:	83 c4 10             	add    esp,0x10
c00143d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143da:	74 0f                	je     c00143eb <Device::wakeAll()+0x2b>
c00143dc:	83 ec 0c             	sub    esp,0xc
c00143df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143e2:	e8 d9 ff ff ff       	call   c00143c0 <Device::wakeAll()>
c00143e7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143e9:	eb e9                	jmp    c00143d4 <Device::wakeAll()+0x14>
c00143eb:	83 c4 08             	add    esp,0x8
c00143ee:	5b                   	pop    ebx
c00143ef:	c3                   	ret    

c00143f0 <Device::detectAll()>:
c00143f0:	53                   	push   ebx
c00143f1:	83 ec 14             	sub    esp,0x14
c00143f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143fa:	53                   	push   ebx
c00143fb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00143fe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014404:	83 c4 10             	add    esp,0x10
c0014407:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001440a:	74 0f                	je     c001441b <Device::detectAll()+0x2b>
c001440c:	83 ec 0c             	sub    esp,0xc
c001440f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014412:	e8 d9 ff ff ff       	call   c00143f0 <Device::detectAll()>
c0014417:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014419:	eb e9                	jmp    c0014404 <Device::detectAll()+0x14>
c001441b:	83 c4 08             	add    esp,0x8
c001441e:	5b                   	pop    ebx
c001441f:	c3                   	ret    

c0014420 <Device::disableLegacyAll()>:
c0014420:	53                   	push   ebx
c0014421:	83 ec 14             	sub    esp,0x14
c0014424:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014428:	8b 03                	mov    eax,DWORD PTR [ebx]
c001442a:	53                   	push   ebx
c001442b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001442e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014434:	83 c4 10             	add    esp,0x10
c0014437:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001443a:	74 0f                	je     c001444b <Device::disableLegacyAll()+0x2b>
c001443c:	83 ec 0c             	sub    esp,0xc
c001443f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014442:	e8 d9 ff ff ff       	call   c0014420 <Device::disableLegacyAll()>
c0014447:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014449:	eb e9                	jmp    c0014434 <Device::disableLegacyAll()+0x14>
c001444b:	83 c4 08             	add    esp,0x8
c001444e:	5b                   	pop    ebx
c001444f:	c3                   	ret    

c0014450 <Device::loadDriversForAll()>:
c0014450:	53                   	push   ebx
c0014451:	83 ec 08             	sub    esp,0x8
c0014454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014458:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001445e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014460:	85 db                	test   ebx,ebx
c0014462:	74 12                	je     c0014476 <Device::loadDriversForAll()+0x26>
c0014464:	83 ec 0c             	sub    esp,0xc
c0014467:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001446a:	e8 e1 ff ff ff       	call   c0014450 <Device::loadDriversForAll()>
c001446f:	83 c4 10             	add    esp,0x10
c0014472:	89 d8                	mov    eax,ebx
c0014474:	eb e8                	jmp    c001445e <Device::loadDriversForAll()+0xe>
c0014476:	83 c4 08             	add    esp,0x8
c0014479:	5b                   	pop    ebx
c001447a:	c3                   	ret    
c001447b:	90                   	nop

c001447c <Device::closeAll()>:
c001447c:	53                   	push   ebx
c001447d:	83 ec 08             	sub    esp,0x8
c0014480:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014484:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014486:	6a 00                	push   0x0
c0014488:	6a 00                	push   0x0
c001448a:	6a 00                	push   0x0
c001448c:	53                   	push   ebx
c001448d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014490:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014496:	83 c4 10             	add    esp,0x10
c0014499:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001449c:	74 0f                	je     c00144ad <Device::closeAll()+0x31>
c001449e:	83 ec 0c             	sub    esp,0xc
c00144a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144a4:	e8 d3 ff ff ff       	call   c001447c <Device::closeAll()>
c00144a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144ab:	eb e9                	jmp    c0014496 <Device::closeAll()+0x1a>
c00144ad:	83 c4 08             	add    esp,0x8
c00144b0:	5b                   	pop    ebx
c00144b1:	c3                   	ret    

c00144b2 <Device::powerSavingAll(PowerSavingLevel)>:
c00144b2:	56                   	push   esi
c00144b3:	53                   	push   ebx
c00144b4:	83 ec 0c             	sub    esp,0xc
c00144b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144bb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00144bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144c1:	56                   	push   esi
c00144c2:	53                   	push   ebx
c00144c3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00144c6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144cc:	83 c4 10             	add    esp,0x10
c00144cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144d2:	74 0f                	je     c00144e3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00144d4:	52                   	push   edx
c00144d5:	52                   	push   edx
c00144d6:	56                   	push   esi
c00144d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144da:	e8 d3 ff ff ff       	call   c00144b2 <Device::powerSavingAll(PowerSavingLevel)>
c00144df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144e1:	eb e9                	jmp    c00144cc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00144e3:	58                   	pop    eax
c00144e4:	5b                   	pop    ebx
c00144e5:	5e                   	pop    esi
c00144e6:	c3                   	ret    
c00144e7:	90                   	nop

c00144e8 <Device::setName(char const*)>:
c00144e8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00144f0:	e9 47 c3 fe ff       	jmp    c000083c <strcpy>
c00144f5:	90                   	nop

c00144f6 <Device::Device(char const*)>:
c00144f6:	83 ec 1c             	sub    esp,0x1c
c00144f9:	ba 98 ac 02 c0       	mov    edx,0xc002ac98
c00144fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014502:	89 10                	mov    DWORD PTR [eax],edx
c0014504:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014508:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014516:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014524:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001452e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014532:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001453c:	83 ec 08             	sub    esp,0x8
c001453f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014543:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014547:	e8 9c ff ff ff       	call   c00144e8 <Device::setName(char const*)>
c001454c:	83 c4 10             	add    esp,0x10
c001454f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014557:	83 ec 0c             	sub    esp,0xc
c001455a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001455e:	e8 e8 b2 ff ff       	call   c000f84b <malloc>
c0014563:	83 c4 10             	add    esp,0x10
c0014566:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001456c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014573:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014577:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001457d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014581:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014587:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001458d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014591:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014597:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001459e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00145a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ad:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00145b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145e2:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00145ec:	90                   	nop
c00145ed:	83 c4 1c             	add    esp,0x1c
c00145f0:	c3                   	ret    
c00145f1:	90                   	nop

c00145f2 <Device::getName()>:
c00145f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145f6:	05 d0 00 00 00       	add    eax,0xd0
c00145fb:	c3                   	ret    

c00145fc <DriverlessDevice::DriverlessDevice(char const*)>:
c00145fc:	83 ec 0c             	sub    esp,0xc
c00145ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014603:	83 ec 08             	sub    esp,0x8
c0014606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001460a:	50                   	push   eax
c001460b:	e8 e6 fe ff ff       	call   c00144f6 <Device::Device(char const*)>
c0014610:	83 c4 10             	add    esp,0x10
c0014613:	ba c4 ac 02 c0       	mov    edx,0xc002acc4
c0014618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001461c:	89 10                	mov    DWORD PTR [eax],edx
c001461e:	90                   	nop
c001461f:	83 c4 0c             	add    esp,0xc
c0014622:	c3                   	ret    
c0014623:	90                   	nop

c0014624 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014624:	57                   	push   edi
c0014625:	56                   	push   esi
c0014626:	53                   	push   ebx
c0014627:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001462b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001462f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014633:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014639:	75 0c                	jne    c0014647 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001463b:	52                   	push   edx
c001463c:	52                   	push   edx
c001463d:	53                   	push   ebx
c001463e:	56                   	push   esi
c001463f:	e8 06 43 01 00       	call   c002894a <LinkedList<Device>::addElement(Device*)>
c0014644:	83 c4 10             	add    esp,0x10
c0014647:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001464d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014650:	74 12                	je     c0014664 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014652:	50                   	push   eax
c0014653:	57                   	push   edi
c0014654:	56                   	push   esi
c0014655:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014658:	e8 c7 ff ff ff       	call   c0014624 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001465d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001465f:	83 c4 10             	add    esp,0x10
c0014662:	eb e9                	jmp    c001464d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014664:	5b                   	pop    ebx
c0014665:	5e                   	pop    esi
c0014666:	5f                   	pop    edi
c0014667:	c3                   	ret    

c0014668 <getDevicesOfType(DeviceType)>:
c0014668:	53                   	push   ebx
c0014669:	83 ec 14             	sub    esp,0x14
c001466c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014670:	53                   	push   ebx
c0014671:	e8 b0 43 01 00       	call   c0028a26 <LinkedList<Device>::LinkedList()>
c0014676:	83 c4 0c             	add    esp,0xc
c0014679:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001467d:	53                   	push   ebx
c001467e:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c0014684:	e8 9b ff ff ff       	call   c0014624 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014689:	89 d8                	mov    eax,ebx
c001468b:	83 c4 18             	add    esp,0x18
c001468e:	5b                   	pop    ebx
c001468f:	c2 04 00             	ret    0x4

c0014692 <HardDiskController::HardDiskController(char const*)>:
c0014692:	83 ec 0c             	sub    esp,0xc
c0014695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014699:	83 ec 08             	sub    esp,0x8
c001469c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146a0:	50                   	push   eax
c00146a1:	e8 50 fe ff ff       	call   c00144f6 <Device::Device(char const*)>
c00146a6:	83 c4 10             	add    esp,0x10
c00146a9:	ba f0 ac 02 c0       	mov    edx,0xc002acf0
c00146ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b2:	89 10                	mov    DWORD PTR [eax],edx
c00146b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b8:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00146c2:	90                   	nop
c00146c3:	83 c4 0c             	add    esp,0xc
c00146c6:	c3                   	ret    
c00146c7:	90                   	nop

c00146c8 <HardDiskController::~HardDiskController()>:
c00146c8:	83 ec 0c             	sub    esp,0xc
c00146cb:	ba f0 ac 02 c0       	mov    edx,0xc002acf0
c00146d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d4:	89 10                	mov    DWORD PTR [eax],edx
c00146d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146da:	83 ec 0c             	sub    esp,0xc
c00146dd:	50                   	push   eax
c00146de:	e8 f5 fa ff ff       	call   c00141d8 <Device::~Device()>
c00146e3:	83 c4 10             	add    esp,0x10
c00146e6:	90                   	nop
c00146e7:	83 c4 0c             	add    esp,0xc
c00146ea:	c3                   	ret    
c00146eb:	90                   	nop

c00146ec <HardDiskController::~HardDiskController()>:
c00146ec:	83 ec 0c             	sub    esp,0xc
c00146ef:	83 ec 0c             	sub    esp,0xc
c00146f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146f6:	e8 cd ff ff ff       	call   c00146c8 <HardDiskController::~HardDiskController()>
c00146fb:	83 c4 10             	add    esp,0x10
c00146fe:	83 ec 08             	sub    esp,0x8
c0014701:	68 58 01 00 00       	push   0x158
c0014706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001470a:	e8 f0 e6 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c001470f:	83 c4 10             	add    esp,0x10
c0014712:	83 c4 0c             	add    esp,0xc
c0014715:	c3                   	ret    

c0014716 <PhysicalDisk::eject()>:
c0014716:	83 ec 18             	sub    esp,0x18
c0014719:	68 14 ad 02 c0       	push   0xc002ad14
c001471e:	e8 bc e7 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0014723:	83 c8 ff             	or     eax,0xffffffff
c0014726:	83 c4 1c             	add    esp,0x1c
c0014729:	c3                   	ret    

c001472a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001472a:	83 ec 0c             	sub    esp,0xc
c001472d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014731:	83 ec 08             	sub    esp,0x8
c0014734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014738:	50                   	push   eax
c0014739:	e8 b8 fd ff ff       	call   c00144f6 <Device::Device(char const*)>
c001473e:	83 c4 10             	add    esp,0x10
c0014741:	ba 44 ad 02 c0       	mov    edx,0xc002ad44
c0014746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474a:	89 10                	mov    DWORD PTR [eax],edx
c001474c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014750:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001475b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014766:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014774:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014778:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001477e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014782:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001478c:	90                   	nop
c001478d:	83 c4 0c             	add    esp,0xc
c0014790:	c3                   	ret    
c0014791:	90                   	nop

c0014792 <PhysicalDisk::startCache()>:
c0014792:	56                   	push   esi
c0014793:	53                   	push   ebx
c0014794:	83 ec 10             	sub    esp,0x10
c0014797:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001479b:	6a 44                	push   0x44
c001479d:	e8 a9 b0 ff ff       	call   c000f84b <malloc>
c00147a2:	89 c6                	mov    esi,eax
c00147a4:	58                   	pop    eax
c00147a5:	5a                   	pop    edx
c00147a6:	53                   	push   ebx
c00147a7:	56                   	push   esi
c00147a8:	e8 a3 27 00 00       	call   c0016f50 <VCache::VCache(PhysicalDisk*)>
c00147ad:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00147b3:	83 c4 14             	add    esp,0x14
c00147b6:	5b                   	pop    ebx
c00147b7:	5e                   	pop    esi
c00147b8:	c3                   	ret    
c00147b9:	90                   	nop

c00147ba <PhysicalDisk::~PhysicalDisk()>:
c00147ba:	83 ec 0c             	sub    esp,0xc
c00147bd:	ba 44 ad 02 c0       	mov    edx,0xc002ad44
c00147c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c6:	89 10                	mov    DWORD PTR [eax],edx
c00147c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147cc:	83 ec 0c             	sub    esp,0xc
c00147cf:	50                   	push   eax
c00147d0:	e8 03 fa ff ff       	call   c00141d8 <Device::~Device()>
c00147d5:	83 c4 10             	add    esp,0x10
c00147d8:	90                   	nop
c00147d9:	83 c4 0c             	add    esp,0xc
c00147dc:	c3                   	ret    
c00147dd:	90                   	nop

c00147de <PhysicalDisk::~PhysicalDisk()>:
c00147de:	83 ec 0c             	sub    esp,0xc
c00147e1:	83 ec 0c             	sub    esp,0xc
c00147e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147e8:	e8 cd ff ff ff       	call   c00147ba <PhysicalDisk::~PhysicalDisk()>
c00147ed:	83 c4 10             	add    esp,0x10
c00147f0:	83 ec 08             	sub    esp,0x8
c00147f3:	68 6c 01 00 00       	push   0x16c
c00147f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147fc:	e8 fe e5 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0014801:	83 c4 10             	add    esp,0x10
c0014804:	83 c4 0c             	add    esp,0xc
c0014807:	c3                   	ret    

c0014808 <FPU::FPU(char const*)>:
c0014808:	83 ec 0c             	sub    esp,0xc
c001480b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001480f:	83 ec 08             	sub    esp,0x8
c0014812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014816:	50                   	push   eax
c0014817:	e8 da fc ff ff       	call   c00144f6 <Device::Device(char const*)>
c001481c:	83 c4 10             	add    esp,0x10
c001481f:	ba 88 ad 02 c0       	mov    edx,0xc002ad88
c0014824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014828:	89 10                	mov    DWORD PTR [eax],edx
c001482a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001482e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014838:	90                   	nop
c0014839:	83 c4 0c             	add    esp,0xc
c001483c:	c3                   	ret    
c001483d:	90                   	nop

c001483e <FPU::~FPU()>:
c001483e:	83 ec 0c             	sub    esp,0xc
c0014841:	ba 88 ad 02 c0       	mov    edx,0xc002ad88
c0014846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001484a:	89 10                	mov    DWORD PTR [eax],edx
c001484c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014850:	83 ec 0c             	sub    esp,0xc
c0014853:	50                   	push   eax
c0014854:	e8 7f f9 ff ff       	call   c00141d8 <Device::~Device()>
c0014859:	83 c4 10             	add    esp,0x10
c001485c:	90                   	nop
c001485d:	83 c4 0c             	add    esp,0xc
c0014860:	c3                   	ret    
c0014861:	90                   	nop

c0014862 <FPU::~FPU()>:
c0014862:	83 ec 0c             	sub    esp,0xc
c0014865:	83 ec 0c             	sub    esp,0xc
c0014868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001486c:	e8 cd ff ff ff       	call   c001483e <FPU::~FPU()>
c0014871:	83 c4 10             	add    esp,0x10
c0014874:	83 ec 08             	sub    esp,0x8
c0014877:	68 58 01 00 00       	push   0x158
c001487c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014880:	e8 7a e5 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0014885:	83 c4 10             	add    esp,0x10
c0014888:	83 c4 0c             	add    esp,0xc
c001488b:	c3                   	ret    

c001488c <setupFPU()>:
c001488c:	53                   	push   ebx
c001488d:	83 ec 08             	sub    esp,0x8
c0014890:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c0014896:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001489d:	74 19                	je     c00148b8 <setupFPU()+0x2c>
c001489f:	83 ec 0c             	sub    esp,0xc
c00148a2:	68 58 01 00 00       	push   0x158
c00148a7:	e8 9f af ff ff       	call   c000f84b <malloc>
c00148ac:	89 c3                	mov    ebx,eax
c00148ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00148b1:	e8 d0 0c 01 00       	call   c0025586 <AVX::AVX()>
c00148b6:	eb 5b                	jmp    c0014913 <setupFPU()+0x87>
c00148b8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00148be:	84 c0                	test   al,al
c00148c0:	79 19                	jns    c00148db <setupFPU()+0x4f>
c00148c2:	83 ec 0c             	sub    esp,0xc
c00148c5:	68 58 01 00 00       	push   0x158
c00148ca:	e8 7c af ff ff       	call   c000f84b <malloc>
c00148cf:	89 c3                	mov    ebx,eax
c00148d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00148d4:	e8 d3 0d 01 00       	call   c00256ac <SSE::SSE()>
c00148d9:	eb 38                	jmp    c0014913 <setupFPU()+0x87>
c00148db:	a8 20                	test   al,0x20
c00148dd:	74 19                	je     c00148f8 <setupFPU()+0x6c>
c00148df:	83 ec 0c             	sub    esp,0xc
c00148e2:	68 58 01 00 00       	push   0x158
c00148e7:	e8 5f af ff ff       	call   c000f84b <malloc>
c00148ec:	89 c3                	mov    ebx,eax
c00148ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00148f1:	e8 20 0d 01 00       	call   c0025616 <MMX::MMX()>
c00148f6:	eb 1b                	jmp    c0014913 <setupFPU()+0x87>
c00148f8:	a8 10                	test   al,0x10
c00148fa:	74 1c                	je     c0014918 <setupFPU()+0x8c>
c00148fc:	83 ec 0c             	sub    esp,0xc
c00148ff:	68 58 01 00 00       	push   0x158
c0014904:	e8 42 af ff ff       	call   c000f84b <malloc>
c0014909:	89 c3                	mov    ebx,eax
c001490b:	89 04 24             	mov    DWORD PTR [esp],eax
c001490e:	e8 27 0e 01 00       	call   c002573a <x87::x87()>
c0014913:	83 c4 10             	add    esp,0x10
c0014916:	eb 24                	jmp    c001493c <setupFPU()+0xb0>
c0014918:	83 e0 ef             	and    eax,0xffffffef
c001491b:	83 ec 0c             	sub    esp,0xc
c001491e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014924:	68 74 ad 02 c0       	push   0xc002ad74
c0014929:	e8 b1 e5 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001492e:	0f 20 c0             	mov    eax,cr0
c0014931:	83 c8 04             	or     eax,0x4
c0014934:	0f 22 c0             	mov    cr0,eax
c0014937:	31 db                	xor    ebx,ebx
c0014939:	83 c4 10             	add    esp,0x10
c001493c:	89 d8                	mov    eax,ebx
c001493e:	83 c4 08             	add    esp,0x8
c0014941:	5b                   	pop    ebx
c0014942:	c3                   	ret    
c0014943:	90                   	nop

c0014944 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014944:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014948:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001494c:	c1 e0 04             	shl    eax,0x4
c001494f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014953:	8d 50 10             	lea    edx,[eax+0x10]
c0014956:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001495c:	74 08                	je     c0014966 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001495e:	83 c0 04             	add    eax,0x4
c0014961:	39 d0                	cmp    eax,edx
c0014963:	75 f1                	jne    c0014956 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014965:	c3                   	ret    
c0014966:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014970:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001497a:	eb e2                	jmp    c001495e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001497c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001497c:	57                   	push   edi
c001497d:	31 c0                	xor    eax,eax
c001497f:	56                   	push   esi
c0014980:	53                   	push   ebx
c0014981:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014985:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014989:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001498d:	89 da                	mov    edx,ebx
c001498f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014993:	c1 e2 04             	shl    edx,0x4
c0014996:	01 ca                	add    edx,ecx
c0014998:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00149a0:	74 16                	je     c00149b8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00149a2:	40                   	inc    eax
c00149a3:	83 f8 04             	cmp    eax,0x4
c00149a6:	75 f0                	jne    c0014998 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00149a8:	c7 44 24 10 b8 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002adb8
c00149b0:	5b                   	pop    ebx
c00149b1:	5e                   	pop    esi
c00149b2:	5f                   	pop    edi
c00149b3:	e9 53 5c 00 00       	jmp    c001a60b <Krnl::panic(char const*)>
c00149b8:	8d 04 98             	lea    eax,[eax+ebx*4]
c00149bb:	8d 04 81             	lea    eax,[ecx+eax*4]
c00149be:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00149c4:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00149ca:	5b                   	pop    ebx
c00149cb:	5e                   	pop    esi
c00149cc:	5f                   	pop    edi
c00149cd:	c3                   	ret    

c00149ce <doubleFault(regs*, void*)>:
c00149ce:	55                   	push   ebp
c00149cf:	89 e5                	mov    ebp,esp
c00149d1:	83 ec 08             	sub    esp,0x8
c00149d4:	83 ec 0c             	sub    esp,0xc
c00149d7:	68 f3 ad 02 c0       	push   0xc002adf3
c00149dc:	e8 2a 5c 00 00       	call   c001a60b <Krnl::panic(char const*)>
c00149e1:	83 c4 10             	add    esp,0x10
c00149e4:	90                   	nop
c00149e5:	c9                   	leave  
c00149e6:	c3                   	ret    
c00149e7:	90                   	nop

c00149e8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00149e8:	56                   	push   esi
c00149e9:	53                   	push   ebx
c00149ea:	50                   	push   eax
c00149eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149f3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149f8:	75 35                	jne    c0014a2f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00149fa:	8d 43 20             	lea    eax,[ebx+0x20]
c00149fd:	31 d2                	xor    edx,edx
c00149ff:	89 c1                	mov    ecx,eax
c0014a01:	c1 e1 04             	shl    ecx,0x4
c0014a04:	01 f1                	add    ecx,esi
c0014a06:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a0e:	74 3e                	je     c0014a4e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a10:	42                   	inc    edx
c0014a11:	83 fa 04             	cmp    edx,0x4
c0014a14:	75 f0                	jne    c0014a06 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a16:	83 ec 0c             	sub    esp,0xc
c0014a19:	68 38 ae 02 c0       	push   0xc002ae38
c0014a1e:	e8 e8 5b 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0014a23:	83 c4 10             	add    esp,0x10
c0014a26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a2b:	5a                   	pop    edx
c0014a2c:	5b                   	pop    ebx
c0014a2d:	5e                   	pop    esi
c0014a2e:	c3                   	ret    
c0014a2f:	83 ec 0c             	sub    esp,0xc
c0014a32:	56                   	push   esi
c0014a33:	e8 ba fb ff ff       	call   c00145f2 <Device::getName()>
c0014a38:	83 c4 10             	add    esp,0x10
c0014a3b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a3e:	75 ba                	jne    c00149fa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a40:	83 fb 0f             	cmp    ebx,0xf
c0014a43:	7f 29                	jg     c0014a6e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a45:	0f b6 9b c0 d6 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2940]
c0014a4c:	eb ac                	jmp    c00149fa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a4e:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a51:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a55:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a58:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a5e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a62:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a68:	89 d8                	mov    eax,ebx
c0014a6a:	5a                   	pop    edx
c0014a6b:	5b                   	pop    ebx
c0014a6c:	5e                   	pop    esi
c0014a6d:	c3                   	ret    
c0014a6e:	83 ec 0c             	sub    esp,0xc
c0014a71:	68 00 ae 02 c0       	push   0xc002ae00
c0014a76:	e8 90 5b 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0014a7b:	83 c4 10             	add    esp,0x10
c0014a7e:	e9 77 ff ff ff       	jmp    c00149fa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a83:	90                   	nop

c0014a84 <InterruptController::clearAllHandlers(int, bool)>:
c0014a84:	56                   	push   esi
c0014a85:	53                   	push   ebx
c0014a86:	52                   	push   edx
c0014a87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a8b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a8f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a94:	75 61                	jne    c0014af7 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a96:	8d 46 20             	lea    eax,[esi+0x20]
c0014a99:	c1 e6 04             	shl    esi,0x4
c0014a9c:	c1 e0 04             	shl    eax,0x4
c0014a9f:	01 de                	add    esi,ebx
c0014aa1:	01 d8                	add    eax,ebx
c0014aa3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014aad:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014ab7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014ac1:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014acb:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014ad5:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014adf:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014ae9:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014af3:	58                   	pop    eax
c0014af4:	5b                   	pop    ebx
c0014af5:	5e                   	pop    esi
c0014af6:	c3                   	ret    
c0014af7:	83 ec 0c             	sub    esp,0xc
c0014afa:	53                   	push   ebx
c0014afb:	e8 f2 fa ff ff       	call   c00145f2 <Device::getName()>
c0014b00:	83 c4 10             	add    esp,0x10
c0014b03:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b06:	75 8e                	jne    c0014a96 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b08:	83 fe 0f             	cmp    esi,0xf
c0014b0b:	7f 09                	jg     c0014b16 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b0d:	0f b6 b6 c0 d6 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2940]
c0014b14:	eb 80                	jmp    c0014a96 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b16:	83 ec 0c             	sub    esp,0xc
c0014b19:	68 74 ae 02 c0       	push   0xc002ae74
c0014b1e:	e8 e8 5a 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0014b23:	83 c4 10             	add    esp,0x10
c0014b26:	e9 6b ff ff ff       	jmp    c0014a96 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b2b:	90                   	nop

c0014b2c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b2c:	56                   	push   esi
c0014b2d:	53                   	push   ebx
c0014b2e:	52                   	push   edx
c0014b2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b33:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b37:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b3c:	75 3a                	jne    c0014b78 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b42:	8d 50 20             	lea    edx,[eax+0x20]
c0014b45:	c1 e2 04             	shl    edx,0x4
c0014b48:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b4b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b4f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b55:	74 0b                	je     c0014b62 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b57:	83 c0 04             	add    eax,0x4
c0014b5a:	39 d0                	cmp    eax,edx
c0014b5c:	75 f1                	jne    c0014b4f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b5e:	58                   	pop    eax
c0014b5f:	5b                   	pop    ebx
c0014b60:	5e                   	pop    esi
c0014b61:	c3                   	ret    
c0014b62:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b6c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b76:	eb df                	jmp    c0014b57 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b78:	83 ec 0c             	sub    esp,0xc
c0014b7b:	56                   	push   esi
c0014b7c:	e8 71 fa ff ff       	call   c00145f2 <Device::getName()>
c0014b81:	83 c4 10             	add    esp,0x10
c0014b84:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b87:	75 b5                	jne    c0014b3e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b89:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b8e:	7f 11                	jg     c0014ba1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b94:	0f b6 80 c0 d6 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2940]
c0014b9b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b9f:	eb 9d                	jmp    c0014b3e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014ba1:	83 ec 0c             	sub    esp,0xc
c0014ba4:	68 74 ae 02 c0       	push   0xc002ae74
c0014ba9:	e8 5d 5a 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0014bae:	83 c4 10             	add    esp,0x10
c0014bb1:	eb 8b                	jmp    c0014b3e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014bb3 <nmiHandler(regs*, void*)>:
c0014bb3:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0014bb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bbc:	e9 d3 a3 ff ff       	jmp    c000ef94 <Computer::handleNMI()>

c0014bc1 <int_handler>:
c0014bc1:	55                   	push   ebp
c0014bc2:	57                   	push   edi
c0014bc3:	56                   	push   esi
c0014bc4:	53                   	push   ebx
c0014bc5:	83 ec 0c             	sub    esp,0xc
c0014bc8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014bcc:	80 3d c4 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fc4,0x0
c0014bd3:	74 0b                	je     c0014be0 <int_handler+0x1f>
c0014bd5:	fa                   	cli    
c0014bd6:	f4                   	hlt    
c0014bd7:	80 3d c4 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fc4,0x0
c0014bde:	75 f5                	jne    c0014bd5 <int_handler+0x14>
c0014be0:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0014be5:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014be8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014bee:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014bf4:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bf7:	83 f8 17             	cmp    eax,0x17
c0014bfa:	77 13                	ja     c0014c0f <int_handler+0x4e>
c0014bfc:	83 ec 08             	sub    esp,0x8
c0014bff:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c01:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c04:	0f b6 c0             	movzx  eax,al
c0014c07:	50                   	push   eax
c0014c08:	57                   	push   edi
c0014c09:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c0c:	83 c4 10             	add    esp,0x10
c0014c0f:	83 c3 15             	add    ebx,0x15
c0014c12:	c1 e3 04             	shl    ebx,0x4
c0014c15:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c19:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c20:	31 db                	xor    ebx,ebx
c0014c22:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c26:	85 c0                	test   eax,eax
c0014c28:	74 13                	je     c0014c3d <int_handler+0x7c>
c0014c2a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c2d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c31:	74 1c                	je     c0014c4f <int_handler+0x8e>
c0014c33:	83 ec 08             	sub    esp,0x8
c0014c36:	52                   	push   edx
c0014c37:	56                   	push   esi
c0014c38:	ff d0                	call   eax
c0014c3a:	83 c4 10             	add    esp,0x10
c0014c3d:	43                   	inc    ebx
c0014c3e:	83 fb 04             	cmp    ebx,0x4
c0014c41:	75 df                	jne    c0014c22 <int_handler+0x61>
c0014c43:	83 c4 0c             	add    esp,0xc
c0014c46:	31 c0                	xor    eax,eax
c0014c48:	5b                   	pop    ebx
c0014c49:	31 d2                	xor    edx,edx
c0014c4b:	5e                   	pop    esi
c0014c4c:	5f                   	pop    edi
c0014c4d:	5d                   	pop    ebp
c0014c4e:	c3                   	ret    
c0014c4f:	83 ec 08             	sub    esp,0x8
c0014c52:	52                   	push   edx
c0014c53:	56                   	push   esi
c0014c54:	ff d0                	call   eax
c0014c56:	83 c4 10             	add    esp,0x10
c0014c59:	83 c4 0c             	add    esp,0xc
c0014c5c:	5b                   	pop    ebx
c0014c5d:	5e                   	pop    esi
c0014c5e:	5f                   	pop    edi
c0014c5f:	5d                   	pop    ebp
c0014c60:	c3                   	ret    
c0014c61:	90                   	nop

c0014c62 <InterruptController::InterruptController(char const*)>:
c0014c62:	83 ec 1c             	sub    esp,0x1c
c0014c65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c69:	83 ec 08             	sub    esp,0x8
c0014c6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c70:	50                   	push   eax
c0014c71:	e8 80 f8 ff ff       	call   c00144f6 <Device::Device(char const*)>
c0014c76:	83 c4 10             	add    esp,0x10
c0014c79:	ba 34 b1 02 c0       	mov    edx,0xc002b134
c0014c7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c82:	89 10                	mov    DWORD PTR [eax],edx
c0014c84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c88:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c92:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c9a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014ca2:	7f 5e                	jg     c0014d02 <InterruptController::InterruptController(char const*)+0xa0>
c0014ca4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014cac:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014cb1:	7f 49                	jg     c0014cfc <InterruptController::InterruptController(char const*)+0x9a>
c0014cb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014cbb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cc6:	01 ca                	add    edx,ecx
c0014cc8:	83 c2 54             	add    edx,0x54
c0014ccb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014cd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cd7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014cdb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014ce2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014ce6:	01 ca                	add    edx,ecx
c0014ce8:	81 c2 54 04 00 00    	add    edx,0x454
c0014cee:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014cf6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014cfa:	eb b0                	jmp    c0014cac <InterruptController::InterruptController(char const*)+0x4a>
c0014cfc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d00:	eb 98                	jmp    c0014c9a <InterruptController::InterruptController(char const*)+0x38>
c0014d02:	90                   	nop
c0014d03:	83 c4 1c             	add    esp,0x1c
c0014d06:	c3                   	ret    
c0014d07:	90                   	nop

c0014d08 <InterruptController::~InterruptController()>:
c0014d08:	83 ec 0c             	sub    esp,0xc
c0014d0b:	ba 34 b1 02 c0       	mov    edx,0xc002b134
c0014d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d14:	89 10                	mov    DWORD PTR [eax],edx
c0014d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d1a:	83 ec 0c             	sub    esp,0xc
c0014d1d:	50                   	push   eax
c0014d1e:	e8 b5 f4 ff ff       	call   c00141d8 <Device::~Device()>
c0014d23:	83 c4 10             	add    esp,0x10
c0014d26:	90                   	nop
c0014d27:	83 c4 0c             	add    esp,0xc
c0014d2a:	c3                   	ret    
c0014d2b:	90                   	nop

c0014d2c <InterruptController::~InterruptController()>:
c0014d2c:	83 ec 0c             	sub    esp,0xc
c0014d2f:	83 ec 0c             	sub    esp,0xc
c0014d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d36:	e8 cd ff ff ff       	call   c0014d08 <InterruptController::~InterruptController()>
c0014d3b:	83 c4 10             	add    esp,0x10
c0014d3e:	83 ec 08             	sub    esp,0x8
c0014d41:	68 58 21 00 00       	push   0x2158
c0014d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d4a:	e8 b0 e0 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0014d4f:	83 c4 10             	add    esp,0x10
c0014d52:	83 c4 0c             	add    esp,0xc
c0014d55:	c3                   	ret    

c0014d56 <displayDebugInfo(regs*)>:
c0014d56:	55                   	push   ebp
c0014d57:	57                   	push   edi
c0014d58:	56                   	push   esi
c0014d59:	53                   	push   ebx
c0014d5a:	83 ec 24             	sub    esp,0x24
c0014d5d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d61:	0f 20 c2             	mov    edx,cr0
c0014d64:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d68:	0f 20 d7             	mov    edi,cr2
c0014d6b:	0f 20 de             	mov    esi,cr3
c0014d6e:	0f 20 e5             	mov    ebp,cr4
c0014d71:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d74:	68 ae ae 02 c0       	push   0xc002aeae
c0014d79:	e8 61 e1 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0014d7e:	59                   	pop    ecx
c0014d7f:	58                   	pop    eax
c0014d80:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d83:	68 b9 ae 02 c0       	push   0xc002aeb9
c0014d88:	e8 52 e1 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0014d8d:	58                   	pop    eax
c0014d8e:	5a                   	pop    edx
c0014d8f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d92:	68 c4 ae 02 c0       	push   0xc002aec4
c0014d97:	e8 43 e1 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0014d9c:	59                   	pop    ecx
c0014d9d:	58                   	pop    eax
c0014d9e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014da1:	68 cf ae 02 c0       	push   0xc002aecf
c0014da6:	e8 34 e1 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0014dab:	58                   	pop    eax
c0014dac:	5a                   	pop    edx
c0014dad:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014db0:	68 da ae 02 c0       	push   0xc002aeda
c0014db5:	e8 25 e1 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0014dba:	59                   	pop    ecx
c0014dbb:	58                   	pop    eax
c0014dbc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014dbf:	68 e5 ae 02 c0       	push   0xc002aee5
c0014dc4:	e8 16 e1 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0014dc9:	58                   	pop    eax
c0014dca:	5a                   	pop    edx
c0014dcb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014dce:	68 f0 ae 02 c0       	push   0xc002aef0
c0014dd3:	e8 07 e1 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0014dd8:	59                   	pop    ecx
c0014dd9:	58                   	pop    eax
c0014dda:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014ddd:	68 fb ae 02 c0       	push   0xc002aefb
c0014de2:	e8 f8 e0 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0014de7:	58                   	pop    eax
c0014de8:	5a                   	pop    edx
c0014de9:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014dec:	68 06 af 02 c0       	push   0xc002af06
c0014df1:	e8 e9 e0 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0014df6:	59                   	pop    ecx
c0014df7:	58                   	pop    eax
c0014df8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014dfb:	68 15 af 02 c0       	push   0xc002af15
c0014e00:	e8 da e0 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0014e05:	58                   	pop    eax
c0014e06:	5a                   	pop    edx
c0014e07:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e0a:	68 20 af 02 c0       	push   0xc002af20
c0014e0f:	e8 cb e0 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0014e14:	59                   	pop    ecx
c0014e15:	58                   	pop    eax
c0014e16:	57                   	push   edi
c0014e17:	68 2b af 02 c0       	push   0xc002af2b
c0014e1c:	e8 be e0 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0014e21:	58                   	pop    eax
c0014e22:	5a                   	pop    edx
c0014e23:	56                   	push   esi
c0014e24:	68 36 af 02 c0       	push   0xc002af36
c0014e29:	e8 b1 e0 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0014e2e:	59                   	pop    ecx
c0014e2f:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014e34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e3a:	e8 be be ff ff       	call   c0010cfd <setActiveTerminal(VgaText*)>
c0014e3f:	58                   	pop    eax
c0014e40:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e43:	5a                   	pop    edx
c0014e44:	c1 e0 05             	shl    eax,0x5
c0014e47:	05 20 d4 02 c0       	add    eax,0xc002d420
c0014e4c:	50                   	push   eax
c0014e4d:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014e52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e58:	e8 bf c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014e5d:	59                   	pop    ecx
c0014e5e:	58                   	pop    eax
c0014e5f:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014e64:	68 41 af 02 c0       	push   0xc002af41
c0014e69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e6f:	e8 a8 c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014e74:	58                   	pop    eax
c0014e75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e7a:	5a                   	pop    edx
c0014e7b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e7e:	83 c0 0c             	add    eax,0xc
c0014e81:	50                   	push   eax
c0014e82:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014e87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e8d:	e8 8a c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014e92:	59                   	pop    ecx
c0014e93:	58                   	pop    eax
c0014e94:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014e99:	68 4a af 02 c0       	push   0xc002af4a
c0014e9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ea4:	e8 73 c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014ea9:	58                   	pop    eax
c0014eaa:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014eaf:	5a                   	pop    edx
c0014eb0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014eb3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eb9:	e8 84 c2 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014ebe:	59                   	pop    ecx
c0014ebf:	58                   	pop    eax
c0014ec0:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014ec5:	68 52 af 02 c0       	push   0xc002af52
c0014eca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed0:	e8 47 c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014ed5:	58                   	pop    eax
c0014ed6:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014edb:	5a                   	pop    edx
c0014edc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014edf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee5:	e8 58 c2 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014eea:	59                   	pop    ecx
c0014eeb:	58                   	pop    eax
c0014eec:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014ef1:	68 5a af 02 c0       	push   0xc002af5a
c0014ef6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014efc:	e8 1b c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014f01:	58                   	pop    eax
c0014f02:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f07:	5a                   	pop    edx
c0014f08:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f0b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f11:	e8 2c c2 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014f16:	59                   	pop    ecx
c0014f17:	58                   	pop    eax
c0014f18:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f1d:	68 62 af 02 c0       	push   0xc002af62
c0014f22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f28:	e8 ef c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014f2d:	58                   	pop    eax
c0014f2e:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f33:	5a                   	pop    edx
c0014f34:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f37:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f3d:	e8 00 c2 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014f42:	59                   	pop    ecx
c0014f43:	58                   	pop    eax
c0014f44:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f49:	68 6a af 02 c0       	push   0xc002af6a
c0014f4e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f54:	e8 c3 c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014f59:	58                   	pop    eax
c0014f5a:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f5f:	5a                   	pop    edx
c0014f60:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f69:	e8 d4 c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014f6e:	59                   	pop    ecx
c0014f6f:	58                   	pop    eax
c0014f70:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f75:	68 72 af 02 c0       	push   0xc002af72
c0014f7a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f80:	e8 97 c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014f85:	58                   	pop    eax
c0014f86:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014f8b:	5a                   	pop    edx
c0014f8c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f8f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f95:	e8 a8 c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014f9a:	59                   	pop    ecx
c0014f9b:	58                   	pop    eax
c0014f9c:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014fa1:	68 7a af 02 c0       	push   0xc002af7a
c0014fa6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fac:	e8 6b c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014fb1:	58                   	pop    eax
c0014fb2:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014fb7:	5a                   	pop    edx
c0014fb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014fbc:	52                   	push   edx
c0014fbd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc3:	e8 7a c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014fc8:	59                   	pop    ecx
c0014fc9:	58                   	pop    eax
c0014fca:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014fcf:	68 83 af 02 c0       	push   0xc002af83
c0014fd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fda:	e8 3d c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014fdf:	58                   	pop    eax
c0014fe0:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014fe5:	5a                   	pop    edx
c0014fe6:	57                   	push   edi
c0014fe7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fed:	e8 50 c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014ff2:	59                   	pop    ecx
c0014ff3:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0014ff8:	5f                   	pop    edi
c0014ff9:	68 8b af 02 c0       	push   0xc002af8b
c0014ffe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015004:	e8 13 c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0015009:	58                   	pop    eax
c001500a:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001500f:	5a                   	pop    edx
c0015010:	56                   	push   esi
c0015011:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015017:	e8 26 c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001501c:	59                   	pop    ecx
c001501d:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015022:	5e                   	pop    esi
c0015023:	68 93 af 02 c0       	push   0xc002af93
c0015028:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001502e:	e8 e9 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0015033:	5f                   	pop    edi
c0015034:	58                   	pop    eax
c0015035:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001503a:	55                   	push   ebp
c001503b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015041:	e8 fc c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015046:	58                   	pop    eax
c0015047:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001504c:	5a                   	pop    edx
c001504d:	68 9b af 02 c0       	push   0xc002af9b
c0015052:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015058:	e8 bf c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001505d:	0f 21 c0             	mov    eax,db0
c0015060:	59                   	pop    ecx
c0015061:	5e                   	pop    esi
c0015062:	50                   	push   eax
c0015063:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015068:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506e:	e8 cf c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015073:	5f                   	pop    edi
c0015074:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015079:	5d                   	pop    ebp
c001507a:	68 a4 af 02 c0       	push   0xc002afa4
c001507f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015085:	e8 92 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001508a:	0f 21 c8             	mov    eax,db1
c001508d:	5a                   	pop    edx
c001508e:	59                   	pop    ecx
c001508f:	50                   	push   eax
c0015090:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015095:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001509b:	e8 a2 c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c00150a0:	5e                   	pop    esi
c00150a1:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00150a6:	5f                   	pop    edi
c00150a7:	68 ac af 02 c0       	push   0xc002afac
c00150ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b2:	e8 65 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c00150b7:	0f 21 d0             	mov    eax,db2
c00150ba:	5d                   	pop    ebp
c00150bb:	5a                   	pop    edx
c00150bc:	50                   	push   eax
c00150bd:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00150c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c8:	e8 75 c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c00150cd:	59                   	pop    ecx
c00150ce:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00150d3:	5e                   	pop    esi
c00150d4:	68 b4 af 02 c0       	push   0xc002afb4
c00150d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150df:	e8 38 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c00150e4:	0f 21 d8             	mov    eax,db3
c00150e7:	5f                   	pop    edi
c00150e8:	5d                   	pop    ebp
c00150e9:	50                   	push   eax
c00150ea:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00150ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f5:	e8 48 c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c00150fa:	58                   	pop    eax
c00150fb:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015100:	5a                   	pop    edx
c0015101:	68 bc af 02 c0       	push   0xc002afbc
c0015106:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001510c:	e8 0b c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0015111:	0f 21 f0             	mov    eax,db6
c0015114:	59                   	pop    ecx
c0015115:	5e                   	pop    esi
c0015116:	50                   	push   eax
c0015117:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001511c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015122:	e8 1b c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015127:	5f                   	pop    edi
c0015128:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001512d:	5d                   	pop    ebp
c001512e:	68 c4 af 02 c0       	push   0xc002afc4
c0015133:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015139:	e8 de bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c001513e:	0f 21 f8             	mov    eax,db7
c0015141:	5a                   	pop    edx
c0015142:	59                   	pop    ecx
c0015143:	50                   	push   eax
c0015144:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015149:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001514f:	e8 ee bf ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015154:	5e                   	pop    esi
c0015155:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015158:	e8 90 85 00 00       	call   c001d6ed <Thr::getDriverNameFromAddress(unsigned long)>
c001515d:	83 c4 10             	add    esp,0x10
c0015160:	85 c0                	test   eax,eax
c0015162:	74 7d                	je     c00151e1 <displayDebugInfo(regs*)+0x48b>
c0015164:	89 c6                	mov    esi,eax
c0015166:	50                   	push   eax
c0015167:	50                   	push   eax
c0015168:	56                   	push   esi
c0015169:	68 cc af 02 c0       	push   0xc002afcc
c001516e:	e8 6c dd ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0015173:	5a                   	pop    edx
c0015174:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015179:	59                   	pop    ecx
c001517a:	68 da af 02 c0       	push   0xc002afda
c001517f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015185:	e8 92 bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c001518a:	5f                   	pop    edi
c001518b:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c0015190:	5d                   	pop    ebp
c0015191:	56                   	push   esi
c0015192:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015198:	e8 7f bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c001519d:	58                   	pop    eax
c001519e:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00151a3:	5a                   	pop    edx
c00151a4:	68 e6 af 02 c0       	push   0xc002afe6
c00151a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151af:	e8 68 bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c00151b4:	59                   	pop    ecx
c00151b5:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00151ba:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00151c0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151c3:	e8 5c 85 00 00       	call   c001d724 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00151c8:	5b                   	pop    ebx
c00151c9:	5d                   	pop    ebp
c00151ca:	50                   	push   eax
c00151cb:	57                   	push   edi
c00151cc:	e8 71 bf ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c00151d1:	58                   	pop    eax
c00151d2:	5a                   	pop    edx
c00151d3:	56                   	push   esi
c00151d4:	68 f2 af 02 c0       	push   0xc002aff2
c00151d9:	e8 01 dd ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00151de:	83 c4 10             	add    esp,0x10
c00151e1:	fa                   	cli    
c00151e2:	f4                   	hlt    
c00151e3:	eb fe                	jmp    c00151e3 <displayDebugInfo(regs*)+0x48d>

c00151e5 <x87EmulHandler(regs*, void*)>:
c00151e5:	83 ec 0c             	sub    esp,0xc
c00151e8:	0f 20 c2             	mov    edx,cr0
c00151eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151f0:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00151f4:	75 4b                	jne    c0015241 <x87EmulHandler(regs*, void*)+0x5c>
c00151f6:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00151fb:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0015201:	85 c0                	test   eax,eax
c0015203:	74 05                	je     c001520a <x87EmulHandler(regs*, void*)+0x25>
c0015205:	83 e2 08             	and    edx,0x8
c0015208:	75 17                	jne    c0015221 <x87EmulHandler(regs*, void*)+0x3c>
c001520a:	83 ec 0c             	sub    esp,0xc
c001520d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015211:	e8 9e a8 00 00       	call   c001fab4 <Vm::x87Handler(regs*)>
c0015216:	83 c4 10             	add    esp,0x10
c0015219:	84 c0                	test   al,al
c001521b:	74 24                	je     c0015241 <x87EmulHandler(regs*, void*)+0x5c>
c001521d:	83 c4 0c             	add    esp,0xc
c0015220:	c3                   	ret    
c0015221:	83 ec 0c             	sub    esp,0xc
c0015224:	68 18 b0 02 c0       	push   0xc002b018
c0015229:	e8 b1 dc ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001522e:	0f 06                	clts   
c0015230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015235:	83 c4 10             	add    esp,0x10
c0015238:	a3 08 e6 02 c0       	mov    ds:0xc002e608,eax
c001523d:	83 c4 0c             	add    esp,0xc
c0015240:	c3                   	ret    
c0015241:	83 ec 0c             	sub    esp,0xc
c0015244:	68 02 b0 02 c0       	push   0xc002b002
c0015249:	e8 91 dc ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001524e:	5a                   	pop    edx
c001524f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015253:	e8 fe fa ff ff       	call   c0014d56 <displayDebugInfo(regs*)>

c0015258 <gpFault(regs*, void*)>:
c0015258:	53                   	push   ebx
c0015259:	83 ec 14             	sub    esp,0x14
c001525c:	c7 05 04 e6 02 c0 31 ee 01 c0 	mov    DWORD PTR ds:0xc002e604,0xc001ee31
c0015266:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001526a:	53                   	push   ebx
c001526b:	e8 c1 9b 00 00       	call   c001ee31 <Vm::faultHandler(regs*)>
c0015270:	83 c4 10             	add    esp,0x10
c0015273:	84 c0                	test   al,al
c0015275:	74 05                	je     c001527c <gpFault(regs*, void*)+0x24>
c0015277:	83 c4 08             	add    esp,0x8
c001527a:	5b                   	pop    ebx
c001527b:	c3                   	ret    
c001527c:	83 ec 0c             	sub    esp,0xc
c001527f:	68 25 b0 02 c0       	push   0xc002b025
c0015284:	e8 56 dc ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0015289:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001528c:	e8 c5 fa ff ff       	call   c0014d56 <displayDebugInfo(regs*)>

c0015291 <pgFault(regs*, void*)>:
c0015291:	83 ec 14             	sub    esp,0x14
c0015294:	0f 20 d0             	mov    eax,cr2
c0015297:	50                   	push   eax
c0015298:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001529d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152a0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152a6:	e8 5d d8 ff ff       	call   c0012b08 <VAS::tryLoadBackOffDisk(unsigned long)>
c00152ab:	83 c4 10             	add    esp,0x10
c00152ae:	84 c0                	test   al,al
c00152b0:	74 04                	je     c00152b6 <pgFault(regs*, void*)+0x25>
c00152b2:	83 c4 0c             	add    esp,0xc
c00152b5:	c3                   	ret    
c00152b6:	83 ec 0c             	sub    esp,0xc
c00152b9:	68 40 b0 02 c0       	push   0xc002b040
c00152be:	e8 1c dc ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00152c3:	58                   	pop    eax
c00152c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152c8:	e8 89 fa ff ff       	call   c0014d56 <displayDebugInfo(regs*)>

c00152cd <otherISRHandler(regs*, void*)>:
c00152cd:	53                   	push   ebx
c00152ce:	83 ec 0c             	sub    esp,0xc
c00152d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00152d5:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00152d8:	50                   	push   eax
c00152d9:	50                   	push   eax
c00152da:	68 4d b0 02 c0       	push   0xc002b04d
c00152df:	e8 fb db ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00152e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152e7:	e8 6a fa ff ff       	call   c0014d56 <displayDebugInfo(regs*)>

c00152ec <opcodeFault(regs*, void*)>:
c00152ec:	55                   	push   ebp
c00152ed:	89 e5                	mov    ebp,esp
c00152ef:	56                   	push   esi
c00152f0:	53                   	push   ebx
c00152f1:	83 ec 40             	sub    esp,0x40
c00152f4:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00152f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152ff:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015305:	84 c0                	test   al,al
c0015307:	74 24                	je     c001532d <opcodeFault(regs*, void*)+0x41>
c0015309:	83 ec 0c             	sub    esp,0xc
c001530c:	68 6c b0 02 c0       	push   0xc002b06c
c0015311:	e8 c9 db ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0015316:	83 c4 10             	add    esp,0x10
c0015319:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001531f:	8d 50 19             	lea    edx,[eax+0x19]
c0015322:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015325:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015328:	e9 be 05 00 00       	jmp    c00158eb <opcodeFault(regs*, void*)+0x5ff>
c001532d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015330:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015333:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015336:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001533a:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001533e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015341:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015344:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015347:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534a:	8a 00                	mov    al,BYTE PTR [eax]
c001534c:	3c f0                	cmp    al,0xf0
c001534e:	75 17                	jne    c0015367 <opcodeFault(regs*, void*)+0x7b>
c0015350:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015356:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015359:	8d 50 01             	lea    edx,[eax+0x1]
c001535c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015362:	e9 da 00 00 00       	jmp    c0015441 <opcodeFault(regs*, void*)+0x155>
c0015367:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536a:	8a 00                	mov    al,BYTE PTR [eax]
c001536c:	3c f2                	cmp    al,0xf2
c001536e:	74 09                	je     c0015379 <opcodeFault(regs*, void*)+0x8d>
c0015370:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015373:	8a 00                	mov    al,BYTE PTR [eax]
c0015375:	3c f3                	cmp    al,0xf3
c0015377:	75 1b                	jne    c0015394 <opcodeFault(regs*, void*)+0xa8>
c0015379:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001537d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015380:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015383:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015386:	8d 50 01             	lea    edx,[eax+0x1]
c0015389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001538f:	e9 ad 00 00 00       	jmp    c0015441 <opcodeFault(regs*, void*)+0x155>
c0015394:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015397:	8a 00                	mov    al,BYTE PTR [eax]
c0015399:	3c 66                	cmp    al,0x66
c001539b:	75 1f                	jne    c00153bc <opcodeFault(regs*, void*)+0xd0>
c001539d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153a1:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153a5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153ae:	8d 50 01             	lea    edx,[eax+0x1]
c00153b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153b7:	e9 85 00 00 00       	jmp    c0015441 <opcodeFault(regs*, void*)+0x155>
c00153bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bf:	8a 00                	mov    al,BYTE PTR [eax]
c00153c1:	3c 67                	cmp    al,0x67
c00153c3:	75 18                	jne    c00153dd <opcodeFault(regs*, void*)+0xf1>
c00153c5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153c9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153cf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153d2:	8d 50 01             	lea    edx,[eax+0x1]
c00153d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153db:	eb 64                	jmp    c0015441 <opcodeFault(regs*, void*)+0x155>
c00153dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e0:	8a 00                	mov    al,BYTE PTR [eax]
c00153e2:	3c 2e                	cmp    al,0x2e
c00153e4:	74 09                	je     c00153ef <opcodeFault(regs*, void*)+0x103>
c00153e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e9:	8a 00                	mov    al,BYTE PTR [eax]
c00153eb:	3c 3e                	cmp    al,0x3e
c00153ed:	75 18                	jne    c0015407 <opcodeFault(regs*, void*)+0x11b>
c00153ef:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153f3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153fc:	8d 50 01             	lea    edx,[eax+0x1]
c00153ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015402:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015405:	eb 3a                	jmp    c0015441 <opcodeFault(regs*, void*)+0x155>
c0015407:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540a:	8a 00                	mov    al,BYTE PTR [eax]
c001540c:	3c 36                	cmp    al,0x36
c001540e:	74 1b                	je     c001542b <opcodeFault(regs*, void*)+0x13f>
c0015410:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015413:	8a 00                	mov    al,BYTE PTR [eax]
c0015415:	3c 26                	cmp    al,0x26
c0015417:	74 12                	je     c001542b <opcodeFault(regs*, void*)+0x13f>
c0015419:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541c:	8a 00                	mov    al,BYTE PTR [eax]
c001541e:	3c 64                	cmp    al,0x64
c0015420:	74 09                	je     c001542b <opcodeFault(regs*, void*)+0x13f>
c0015422:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015425:	8a 00                	mov    al,BYTE PTR [eax]
c0015427:	3c 65                	cmp    al,0x65
c0015429:	75 16                	jne    c0015441 <opcodeFault(regs*, void*)+0x155>
c001542b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001542f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015435:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015438:	8d 50 01             	lea    edx,[eax+0x1]
c001543b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015441:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015444:	8a 00                	mov    al,BYTE PTR [eax]
c0015446:	3c 0f                	cmp    al,0xf
c0015448:	0f 85 ad 00 00 00    	jne    c00154fb <opcodeFault(regs*, void*)+0x20f>
c001544e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015451:	40                   	inc    eax
c0015452:	8a 00                	mov    al,BYTE PTR [eax]
c0015454:	3c c2                	cmp    al,0xc2
c0015456:	74 0e                	je     c0015466 <opcodeFault(regs*, void*)+0x17a>
c0015458:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545b:	40                   	inc    eax
c001545c:	8a 00                	mov    al,BYTE PTR [eax]
c001545e:	3c c3                	cmp    al,0xc3
c0015460:	0f 85 95 00 00 00    	jne    c00154fb <opcodeFault(regs*, void*)+0x20f>
c0015466:	83 ec 0c             	sub    esp,0xc
c0015469:	68 8f b0 02 c0       	push   0xc002b08f
c001546e:	e8 6c da ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0015473:	83 c4 10             	add    esp,0x10
c0015476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015479:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001547c:	8d 50 01             	lea    edx,[eax+0x1]
c001547f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015482:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015485:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015488:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548b:	8a 00                	mov    al,BYTE PTR [eax]
c001548d:	8d 50 fe             	lea    edx,[eax-0x2]
c0015490:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015493:	88 10                	mov    BYTE PTR [eax],dl
c0015495:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015498:	50                   	push   eax
c0015499:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001549c:	50                   	push   eax
c001549d:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154a0:	50                   	push   eax
c00154a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154a4:	e8 29 48 00 00       	call   c0019cd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154a9:	83 c4 10             	add    esp,0x10
c00154ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154b2:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154b5:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154b8:	01 d0                	add    eax,edx
c00154ba:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154c3:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154c6:	48                   	dec    eax
c00154c7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00154ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cd:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00154d0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d6:	83 ec 04             	sub    esp,0x4
c00154d9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00154dc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00154df:	50                   	push   eax
c00154e0:	e8 cf ac fe ff       	call   c00001b4 <voodooXADD>
c00154e5:	83 c4 10             	add    esp,0x10
c00154e8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00154eb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00154ee:	01 c2                	add    edx,eax
c00154f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154f6:	e9 f0 03 00 00       	jmp    c00158eb <opcodeFault(regs*, void*)+0x5ff>
c00154fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015500:	3c 0f                	cmp    al,0xf
c0015502:	0f 85 8b 01 00 00    	jne    c0015693 <opcodeFault(regs*, void*)+0x3a7>
c0015508:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550b:	40                   	inc    eax
c001550c:	8a 00                	mov    al,BYTE PTR [eax]
c001550e:	3c c7                	cmp    al,0xc7
c0015510:	0f 86 7d 01 00 00    	jbe    c0015693 <opcodeFault(regs*, void*)+0x3a7>
c0015516:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015519:	40                   	inc    eax
c001551a:	8a 00                	mov    al,BYTE PTR [eax]
c001551c:	3c cf                	cmp    al,0xcf
c001551e:	0f 87 6f 01 00 00    	ja     c0015693 <opcodeFault(regs*, void*)+0x3a7>
c0015524:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015527:	40                   	inc    eax
c0015528:	8a 00                	mov    al,BYTE PTR [eax]
c001552a:	83 c0 38             	add    eax,0x38
c001552d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015530:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015534:	75 0b                	jne    c0015541 <opcodeFault(regs*, void*)+0x255>
c0015536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015539:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001553c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001553f:	eb 75                	jmp    c00155b6 <opcodeFault(regs*, void*)+0x2ca>
c0015541:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015545:	75 0b                	jne    c0015552 <opcodeFault(regs*, void*)+0x266>
c0015547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001554d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015550:	eb 64                	jmp    c00155b6 <opcodeFault(regs*, void*)+0x2ca>
c0015552:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015556:	75 0b                	jne    c0015563 <opcodeFault(regs*, void*)+0x277>
c0015558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001555e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015561:	eb 53                	jmp    c00155b6 <opcodeFault(regs*, void*)+0x2ca>
c0015563:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015567:	75 0b                	jne    c0015574 <opcodeFault(regs*, void*)+0x288>
c0015569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001556f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015572:	eb 42                	jmp    c00155b6 <opcodeFault(regs*, void*)+0x2ca>
c0015574:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015578:	75 0b                	jne    c0015585 <opcodeFault(regs*, void*)+0x299>
c001557a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015580:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015583:	eb 31                	jmp    c00155b6 <opcodeFault(regs*, void*)+0x2ca>
c0015585:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015589:	75 0b                	jne    c0015596 <opcodeFault(regs*, void*)+0x2aa>
c001558b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015591:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015594:	eb 20                	jmp    c00155b6 <opcodeFault(regs*, void*)+0x2ca>
c0015596:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001559a:	75 0b                	jne    c00155a7 <opcodeFault(regs*, void*)+0x2bb>
c001559c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155a2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155a5:	eb 0f                	jmp    c00155b6 <opcodeFault(regs*, void*)+0x2ca>
c00155a7:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155ab:	75 09                	jne    c00155b6 <opcodeFault(regs*, void*)+0x2ca>
c00155ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155b3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155b6:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155ba:	74 10                	je     c00155cc <opcodeFault(regs*, void*)+0x2e0>
c00155bc:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155c3:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00155ca:	eb 2d                	jmp    c00155f9 <opcodeFault(regs*, void*)+0x30d>
c00155cc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155cf:	c1 e0 18             	shl    eax,0x18
c00155d2:	89 c2                	mov    edx,eax
c00155d4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155d7:	c1 e0 08             	shl    eax,0x8
c00155da:	25 00 00 ff 00       	and    eax,0xff0000
c00155df:	09 c2                	or     edx,eax
c00155e1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155e4:	c1 e8 08             	shr    eax,0x8
c00155e7:	25 00 ff 00 00       	and    eax,0xff00
c00155ec:	09 c2                	or     edx,eax
c00155ee:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155f1:	c1 e8 18             	shr    eax,0x18
c00155f4:	09 d0                	or     eax,edx
c00155f6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155f9:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00155fd:	75 0b                	jne    c001560a <opcodeFault(regs*, void*)+0x31e>
c00155ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015602:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015605:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015608:	eb 75                	jmp    c001567f <opcodeFault(regs*, void*)+0x393>
c001560a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001560e:	75 0b                	jne    c001561b <opcodeFault(regs*, void*)+0x32f>
c0015610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015613:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015616:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015619:	eb 64                	jmp    c001567f <opcodeFault(regs*, void*)+0x393>
c001561b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001561f:	75 0b                	jne    c001562c <opcodeFault(regs*, void*)+0x340>
c0015621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015624:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015627:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001562a:	eb 53                	jmp    c001567f <opcodeFault(regs*, void*)+0x393>
c001562c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015630:	75 0b                	jne    c001563d <opcodeFault(regs*, void*)+0x351>
c0015632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015635:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015638:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001563b:	eb 42                	jmp    c001567f <opcodeFault(regs*, void*)+0x393>
c001563d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015641:	75 0b                	jne    c001564e <opcodeFault(regs*, void*)+0x362>
c0015643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015646:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015649:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001564c:	eb 31                	jmp    c001567f <opcodeFault(regs*, void*)+0x393>
c001564e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015652:	75 0b                	jne    c001565f <opcodeFault(regs*, void*)+0x373>
c0015654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015657:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001565a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001565d:	eb 20                	jmp    c001567f <opcodeFault(regs*, void*)+0x393>
c001565f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015663:	75 0b                	jne    c0015670 <opcodeFault(regs*, void*)+0x384>
c0015665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015668:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001566b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001566e:	eb 0f                	jmp    c001567f <opcodeFault(regs*, void*)+0x393>
c0015670:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015674:	75 09                	jne    c001567f <opcodeFault(regs*, void*)+0x393>
c0015676:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015679:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001567c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001567f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015682:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015685:	8d 50 02             	lea    edx,[eax+0x2]
c0015688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001568e:	e9 58 02 00 00       	jmp    c00158eb <opcodeFault(regs*, void*)+0x5ff>
c0015693:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015696:	8a 00                	mov    al,BYTE PTR [eax]
c0015698:	3c 0f                	cmp    al,0xf
c001569a:	0f 85 76 01 00 00    	jne    c0015816 <opcodeFault(regs*, void*)+0x52a>
c00156a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a3:	40                   	inc    eax
c00156a4:	8a 00                	mov    al,BYTE PTR [eax]
c00156a6:	3c c7                	cmp    al,0xc7
c00156a8:	0f 85 68 01 00 00    	jne    c0015816 <opcodeFault(regs*, void*)+0x52a>
c00156ae:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156b7:	8d 50 01             	lea    edx,[eax+0x1]
c00156ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156c0:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156c3:	50                   	push   eax
c00156c4:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156c7:	50                   	push   eax
c00156c8:	8d 45 bc             	lea    eax,[ebp-0x44]
c00156cb:	50                   	push   eax
c00156cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156cf:	e8 fe 45 00 00       	call   c0019cd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00156d4:	83 c4 10             	add    esp,0x10
c00156d7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00156da:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00156dd:	83 f0 01             	xor    eax,0x1
c00156e0:	84 c0                	test   al,al
c00156e2:	0f 84 2e 01 00 00    	je     c0015816 <opcodeFault(regs*, void*)+0x52a>
c00156e8:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00156eb:	3c 01                	cmp    al,0x1
c00156ed:	0f 85 23 01 00 00    	jne    c0015816 <opcodeFault(regs*, void*)+0x52a>
c00156f3:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00156f6:	83 f0 01             	xor    eax,0x1
c00156f9:	84 c0                	test   al,al
c00156fb:	0f 84 15 01 00 00    	je     c0015816 <opcodeFault(regs*, void*)+0x52a>
c0015701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015704:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015707:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001570a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015711:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015714:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015717:	89 c2                	mov    edx,eax
c0015719:	b8 00 00 00 00       	mov    eax,0x0
c001571e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015721:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015727:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001572a:	ba 00 00 00 00       	mov    edx,0x0
c001572f:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015732:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015738:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001573b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001573e:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015745:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015748:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001574b:	89 c2                	mov    edx,eax
c001574d:	b8 00 00 00 00       	mov    eax,0x0
c0015752:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015755:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001575e:	ba 00 00 00 00       	mov    edx,0x0
c0015763:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015766:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015769:	e8 78 86 00 00       	call   c001dde6 <lockScheduler()>
c001576e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015771:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015774:	8b 00                	mov    eax,DWORD PTR [eax]
c0015776:	89 c1                	mov    ecx,eax
c0015778:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001577b:	89 cb                	mov    ebx,ecx
c001577d:	89 d0                	mov    eax,edx
c001577f:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015782:	89 c6                	mov    esi,eax
c0015784:	89 f0                	mov    eax,esi
c0015786:	09 d8                	or     eax,ebx
c0015788:	85 c0                	test   eax,eax
c001578a:	75 21                	jne    c00157ad <opcodeFault(regs*, void*)+0x4c1>
c001578c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001578f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015792:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015795:	89 01                	mov    DWORD PTR [ecx],eax
c0015797:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001579a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157a0:	83 c8 40             	or     eax,0x40
c00157a3:	89 c2                	mov    edx,eax
c00157a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157ab:	eb 3e                	jmp    c00157eb <opcodeFault(regs*, void*)+0x4ff>
c00157ad:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157b0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157b8:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157bb:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c1:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157c4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157c7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157ca:	89 d0                	mov    eax,edx
c00157cc:	31 d2                	xor    edx,edx
c00157ce:	89 c3                	mov    ebx,eax
c00157d0:	89 d6                	mov    esi,edx
c00157d2:	89 da                	mov    edx,ebx
c00157d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00157da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157e0:	83 e0 bf             	and    eax,0xffffffbf
c00157e3:	89 c2                	mov    edx,eax
c00157e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157eb:	e8 f8 85 00 00       	call   c001dde8 <unlockScheduler()>
c00157f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157f6:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00157f9:	01 c2                	add    edx,eax
c00157fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015801:	83 ec 0c             	sub    esp,0xc
c0015804:	68 9e b0 02 c0       	push   0xc002b09e
c0015809:	e8 d1 d6 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001580e:	83 c4 10             	add    esp,0x10
c0015811:	e9 d5 00 00 00       	jmp    c00158eb <opcodeFault(regs*, void*)+0x5ff>
c0015816:	83 ec 0c             	sub    esp,0xc
c0015819:	68 b1 b0 02 c0       	push   0xc002b0b1
c001581e:	e8 bc d6 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0015823:	83 c4 10             	add    esp,0x10
c0015826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015829:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001582c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015832:	c1 e0 04             	shl    eax,0x4
c0015835:	01 d0                	add    eax,edx
c0015837:	83 c0 03             	add    eax,0x3
c001583a:	8a 00                	mov    al,BYTE PTR [eax]
c001583c:	0f b6 d8             	movzx  ebx,al
c001583f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015842:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015848:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001584b:	c1 e0 04             	shl    eax,0x4
c001584e:	01 d0                	add    eax,edx
c0015850:	83 c0 02             	add    eax,0x2
c0015853:	8a 00                	mov    al,BYTE PTR [eax]
c0015855:	0f b6 c8             	movzx  ecx,al
c0015858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001585e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015861:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015864:	c1 e0 04             	shl    eax,0x4
c0015867:	01 d0                	add    eax,edx
c0015869:	40                   	inc    eax
c001586a:	8a 00                	mov    al,BYTE PTR [eax]
c001586c:	0f b6 d0             	movzx  edx,al
c001586f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015872:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015878:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001587b:	c1 e0 04             	shl    eax,0x4
c001587e:	01 f0                	add    eax,esi
c0015880:	8a 00                	mov    al,BYTE PTR [eax]
c0015882:	0f b6 c0             	movzx  eax,al
c0015885:	83 ec 0c             	sub    esp,0xc
c0015888:	53                   	push   ebx
c0015889:	51                   	push   ecx
c001588a:	52                   	push   edx
c001588b:	50                   	push   eax
c001588c:	68 c4 b0 02 c0       	push   0xc002b0c4
c0015891:	e8 49 d6 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0015896:	83 c4 20             	add    esp,0x20
c0015899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001589f:	83 c0 03             	add    eax,0x3
c00158a2:	8a 00                	mov    al,BYTE PTR [eax]
c00158a4:	0f b6 d8             	movzx  ebx,al
c00158a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158aa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158ad:	83 c0 02             	add    eax,0x2
c00158b0:	8a 00                	mov    al,BYTE PTR [eax]
c00158b2:	0f b6 c8             	movzx  ecx,al
c00158b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158bb:	40                   	inc    eax
c00158bc:	8a 00                	mov    al,BYTE PTR [eax]
c00158be:	0f b6 d0             	movzx  edx,al
c00158c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158c7:	8a 00                	mov    al,BYTE PTR [eax]
c00158c9:	0f b6 c0             	movzx  eax,al
c00158cc:	83 ec 0c             	sub    esp,0xc
c00158cf:	53                   	push   ebx
c00158d0:	51                   	push   ecx
c00158d1:	52                   	push   edx
c00158d2:	50                   	push   eax
c00158d3:	68 ec b0 02 c0       	push   0xc002b0ec
c00158d8:	e8 02 d6 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00158dd:	83 c4 20             	add    esp,0x20
c00158e0:	83 ec 0c             	sub    esp,0xc
c00158e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00158e6:	e8 6b f4 ff ff       	call   c0014d56 <displayDebugInfo(regs*)>
c00158eb:	8d 65 f8             	lea    esp,[ebp-0x8]
c00158ee:	5b                   	pop    ebx
c00158ef:	5e                   	pop    esi
c00158f0:	5d                   	pop    ebp
c00158f1:	c3                   	ret    

c00158f2 <displayProgramFault(char const*)>:
c00158f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158f7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158fa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015900:	85 c0                	test   eax,eax
c0015902:	74 15                	je     c0015919 <displayProgramFault(char const*)+0x27>
c0015904:	83 ec 0c             	sub    esp,0xc
c0015907:	6a 04                	push   0x4
c0015909:	6a 0f                	push   0xf
c001590b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001590f:	50                   	push   eax
c0015910:	e8 c9 b4 ff ff       	call   c0010dde <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015915:	83 c4 1c             	add    esp,0x1c
c0015918:	c3                   	ret    
c0015919:	c3                   	ret    

c001591a <setupInterruptController()>:
c001591a:	55                   	push   ebp
c001591b:	89 e5                	mov    ebp,esp
c001591d:	53                   	push   ebx
c001591e:	83 ec 24             	sub    esp,0x24
c0015921:	b8 00 00 00 00       	mov    eax,0x0
c0015926:	85 c0                	test   eax,eax
c0015928:	0f 95 c0             	setne  al
c001592b:	84 c0                	test   al,al
c001592d:	74 5b                	je     c001598a <setupInterruptController()+0x70>
c001592f:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015936:	83 ec 0c             	sub    esp,0xc
c0015939:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001593c:	e8 0a 9f ff ff       	call   c000f84b <malloc>
c0015941:	83 c4 10             	add    esp,0x10
c0015944:	89 c3                	mov    ebx,eax
c0015946:	83 ec 0c             	sub    esp,0xc
c0015949:	53                   	push   ebx
c001594a:	e8 29 00 01 00       	call   c0025978 <APIC::APIC()>
c001594f:	83 c4 10             	add    esp,0x10
c0015952:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015955:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015958:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001595b:	8b 00                	mov    eax,DWORD PTR [eax]
c001595d:	83 c0 08             	add    eax,0x8
c0015960:	8b 00                	mov    eax,DWORD PTR [eax]
c0015962:	6a 00                	push   0x0
c0015964:	6a 00                	push   0x0
c0015966:	6a 00                	push   0x0
c0015968:	52                   	push   edx
c0015969:	ff d0                	call   eax
c001596b:	83 c4 10             	add    esp,0x10
c001596e:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0015973:	83 ec 08             	sub    esp,0x8
c0015976:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015979:	50                   	push   eax
c001597a:	e8 87 e9 ff ff       	call   c0014306 <Device::addChild(Device*)>
c001597f:	83 c4 10             	add    esp,0x10
c0015982:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015985:	e9 89 03 00 00       	jmp    c0015d13 <setupInterruptController()+0x3f9>
c001598a:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c001598f:	84 c0                	test   al,al
c0015991:	75 24                	jne    c00159b7 <setupInterruptController()+0x9d>
c0015993:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0015998:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001599e:	83 e2 fe             	and    edx,0xfffffffe
c00159a1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00159a7:	83 ec 0c             	sub    esp,0xc
c00159aa:	68 11 b1 02 c0       	push   0xc002b111
c00159af:	e8 2b d5 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00159b4:	83 c4 10             	add    esp,0x10
c00159b7:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00159bc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159c2:	83 e0 01             	and    eax,0x1
c00159c5:	84 c0                	test   al,al
c00159c7:	0f 95 c0             	setne  al
c00159ca:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159cd:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00159da:	e8 6c 9e ff ff       	call   c000f84b <malloc>
c00159df:	83 c4 10             	add    esp,0x10
c00159e2:	89 c3                	mov    ebx,eax
c00159e4:	83 ec 0c             	sub    esp,0xc
c00159e7:	53                   	push   ebx
c00159e8:	e8 e3 04 01 00       	call   c0025ed0 <PIC::PIC()>
c00159ed:	83 c4 10             	add    esp,0x10
c00159f0:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159f3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fb:	83 c0 08             	add    eax,0x8
c00159fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a00:	6a 00                	push   0x0
c0015a02:	6a 00                	push   0x0
c0015a04:	6a 00                	push   0x0
c0015a06:	52                   	push   edx
c0015a07:	ff d0                	call   eax
c0015a09:	83 c4 10             	add    esp,0x10
c0015a0c:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a10:	74 73                	je     c0015a85 <setupInterruptController()+0x16b>
c0015a12:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a18:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1a:	83 c0 0c             	add    eax,0xc
c0015a1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1f:	6a 00                	push   0x0
c0015a21:	6a 00                	push   0x0
c0015a23:	6a 00                	push   0x0
c0015a25:	52                   	push   edx
c0015a26:	ff d0                	call   eax
c0015a28:	83 c4 10             	add    esp,0x10
c0015a2b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a2f:	74 15                	je     c0015a46 <setupInterruptController()+0x12c>
c0015a31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a34:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a36:	83 c0 04             	add    eax,0x4
c0015a39:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3b:	83 ec 0c             	sub    esp,0xc
c0015a3e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a41:	ff d0                	call   eax
c0015a43:	83 c4 10             	add    esp,0x10
c0015a46:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a4d:	83 ec 0c             	sub    esp,0xc
c0015a50:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a53:	e8 f3 9d ff ff       	call   c000f84b <malloc>
c0015a58:	83 c4 10             	add    esp,0x10
c0015a5b:	89 c3                	mov    ebx,eax
c0015a5d:	83 ec 0c             	sub    esp,0xc
c0015a60:	53                   	push   ebx
c0015a61:	e8 12 ff 00 00       	call   c0025978 <APIC::APIC()>
c0015a66:	83 c4 10             	add    esp,0x10
c0015a69:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a6c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a72:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a74:	83 c0 08             	add    eax,0x8
c0015a77:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a79:	6a 00                	push   0x0
c0015a7b:	6a 00                	push   0x0
c0015a7d:	6a 00                	push   0x0
c0015a7f:	52                   	push   edx
c0015a80:	ff d0                	call   eax
c0015a82:	83 c4 10             	add    esp,0x10
c0015a85:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0015a8a:	83 ec 08             	sub    esp,0x8
c0015a8d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a90:	50                   	push   eax
c0015a91:	e8 70 e8 ff ff       	call   c0014306 <Device::addChild(Device*)>
c0015a96:	83 c4 10             	add    esp,0x10
c0015a99:	c7 05 08 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e608,0x0
c0015aa3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa8:	83 c0 24             	add    eax,0x24
c0015aab:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aad:	6a 00                	push   0x0
c0015aaf:	68 cd 52 01 c0       	push   0xc00152cd
c0015ab4:	6a 00                	push   0x0
c0015ab6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ab9:	ff d0                	call   eax
c0015abb:	83 c4 10             	add    esp,0x10
c0015abe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac3:	83 c0 24             	add    eax,0x24
c0015ac6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac8:	6a 00                	push   0x0
c0015aca:	68 cd 52 01 c0       	push   0xc00152cd
c0015acf:	6a 01                	push   0x1
c0015ad1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad4:	ff d0                	call   eax
c0015ad6:	83 c4 10             	add    esp,0x10
c0015ad9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015adc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ade:	83 c0 24             	add    eax,0x24
c0015ae1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae3:	6a 00                	push   0x0
c0015ae5:	68 b3 4b 01 c0       	push   0xc0014bb3
c0015aea:	6a 02                	push   0x2
c0015aec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aef:	ff d0                	call   eax
c0015af1:	83 c4 10             	add    esp,0x10
c0015af4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af9:	83 c0 24             	add    eax,0x24
c0015afc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afe:	6a 00                	push   0x0
c0015b00:	68 cd 52 01 c0       	push   0xc00152cd
c0015b05:	6a 03                	push   0x3
c0015b07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b0a:	ff d0                	call   eax
c0015b0c:	83 c4 10             	add    esp,0x10
c0015b0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b14:	83 c0 24             	add    eax,0x24
c0015b17:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b19:	6a 00                	push   0x0
c0015b1b:	68 cd 52 01 c0       	push   0xc00152cd
c0015b20:	6a 04                	push   0x4
c0015b22:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b25:	ff d0                	call   eax
c0015b27:	83 c4 10             	add    esp,0x10
c0015b2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2f:	83 c0 24             	add    eax,0x24
c0015b32:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b34:	6a 00                	push   0x0
c0015b36:	68 cd 52 01 c0       	push   0xc00152cd
c0015b3b:	6a 05                	push   0x5
c0015b3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b40:	ff d0                	call   eax
c0015b42:	83 c4 10             	add    esp,0x10
c0015b45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b48:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4a:	83 c0 24             	add    eax,0x24
c0015b4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4f:	6a 00                	push   0x0
c0015b51:	68 ec 52 01 c0       	push   0xc00152ec
c0015b56:	6a 06                	push   0x6
c0015b58:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5b:	ff d0                	call   eax
c0015b5d:	83 c4 10             	add    esp,0x10
c0015b60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b65:	83 c0 24             	add    eax,0x24
c0015b68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6a:	6a 00                	push   0x0
c0015b6c:	68 e5 51 01 c0       	push   0xc00151e5
c0015b71:	6a 07                	push   0x7
c0015b73:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b76:	ff d0                	call   eax
c0015b78:	83 c4 10             	add    esp,0x10
c0015b7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b80:	83 c0 24             	add    eax,0x24
c0015b83:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b85:	6a 00                	push   0x0
c0015b87:	68 ce 49 01 c0       	push   0xc00149ce
c0015b8c:	6a 08                	push   0x8
c0015b8e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b91:	ff d0                	call   eax
c0015b93:	83 c4 10             	add    esp,0x10
c0015b96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b99:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9b:	83 c0 24             	add    eax,0x24
c0015b9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba0:	6a 00                	push   0x0
c0015ba2:	68 cd 52 01 c0       	push   0xc00152cd
c0015ba7:	6a 09                	push   0x9
c0015ba9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bac:	ff d0                	call   eax
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb6:	83 c0 24             	add    eax,0x24
c0015bb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbb:	6a 00                	push   0x0
c0015bbd:	68 cd 52 01 c0       	push   0xc00152cd
c0015bc2:	6a 0a                	push   0xa
c0015bc4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc7:	ff d0                	call   eax
c0015bc9:	83 c4 10             	add    esp,0x10
c0015bcc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd1:	83 c0 24             	add    eax,0x24
c0015bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd6:	6a 00                	push   0x0
c0015bd8:	68 cd 52 01 c0       	push   0xc00152cd
c0015bdd:	6a 0b                	push   0xb
c0015bdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be2:	ff d0                	call   eax
c0015be4:	83 c4 10             	add    esp,0x10
c0015be7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bea:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bec:	83 c0 24             	add    eax,0x24
c0015bef:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf1:	6a 00                	push   0x0
c0015bf3:	68 cd 52 01 c0       	push   0xc00152cd
c0015bf8:	6a 0c                	push   0xc
c0015bfa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bfd:	ff d0                	call   eax
c0015bff:	83 c4 10             	add    esp,0x10
c0015c02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c07:	83 c0 24             	add    eax,0x24
c0015c0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0c:	6a 00                	push   0x0
c0015c0e:	68 58 52 01 c0       	push   0xc0015258
c0015c13:	6a 0d                	push   0xd
c0015c15:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c18:	ff d0                	call   eax
c0015c1a:	83 c4 10             	add    esp,0x10
c0015c1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c20:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c22:	83 c0 24             	add    eax,0x24
c0015c25:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c27:	6a 00                	push   0x0
c0015c29:	68 91 52 01 c0       	push   0xc0015291
c0015c2e:	6a 0e                	push   0xe
c0015c30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c33:	ff d0                	call   eax
c0015c35:	83 c4 10             	add    esp,0x10
c0015c38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3d:	83 c0 24             	add    eax,0x24
c0015c40:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c42:	6a 00                	push   0x0
c0015c44:	68 cd 52 01 c0       	push   0xc00152cd
c0015c49:	6a 0f                	push   0xf
c0015c4b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c4e:	ff d0                	call   eax
c0015c50:	83 c4 10             	add    esp,0x10
c0015c53:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c56:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c58:	83 c0 24             	add    eax,0x24
c0015c5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5d:	6a 00                	push   0x0
c0015c5f:	68 cd 52 01 c0       	push   0xc00152cd
c0015c64:	6a 10                	push   0x10
c0015c66:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c69:	ff d0                	call   eax
c0015c6b:	83 c4 10             	add    esp,0x10
c0015c6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c71:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c73:	83 c0 24             	add    eax,0x24
c0015c76:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c78:	6a 00                	push   0x0
c0015c7a:	68 cd 52 01 c0       	push   0xc00152cd
c0015c7f:	6a 11                	push   0x11
c0015c81:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c84:	ff d0                	call   eax
c0015c86:	83 c4 10             	add    esp,0x10
c0015c89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8e:	83 c0 24             	add    eax,0x24
c0015c91:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c93:	6a 00                	push   0x0
c0015c95:	68 cd 52 01 c0       	push   0xc00152cd
c0015c9a:	6a 12                	push   0x12
c0015c9c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c9f:	ff d0                	call   eax
c0015ca1:	83 c4 10             	add    esp,0x10
c0015ca4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca9:	83 c0 24             	add    eax,0x24
c0015cac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cae:	6a 00                	push   0x0
c0015cb0:	68 cd 52 01 c0       	push   0xc00152cd
c0015cb5:	6a 13                	push   0x13
c0015cb7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cba:	ff d0                	call   eax
c0015cbc:	83 c4 10             	add    esp,0x10
c0015cbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc4:	83 c0 24             	add    eax,0x24
c0015cc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc9:	6a 00                	push   0x0
c0015ccb:	68 cd 52 01 c0       	push   0xc00152cd
c0015cd0:	6a 14                	push   0x14
c0015cd2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cd5:	ff d0                	call   eax
c0015cd7:	83 c4 10             	add    esp,0x10
c0015cda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cdf:	83 c0 24             	add    eax,0x24
c0015ce2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce4:	6a 00                	push   0x0
c0015ce6:	68 cd 52 01 c0       	push   0xc00152cd
c0015ceb:	6a 1e                	push   0x1e
c0015ced:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cf0:	ff d0                	call   eax
c0015cf2:	83 c4 10             	add    esp,0x10
c0015cf5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cfa:	83 c0 24             	add    eax,0x24
c0015cfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cff:	6a 00                	push   0x0
c0015d01:	68 95 c7 01 c0       	push   0xc001c795
c0015d06:	6a 60                	push   0x60
c0015d08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d0b:	ff d0                	call   eax
c0015d0d:	83 c4 10             	add    esp,0x10
c0015d10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d13:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d16:	c9                   	leave  
c0015d17:	c3                   	ret    

c0015d18 <InterruptController::convertLegacyIRQNumber(int)>:
c0015d18:	55                   	push   ebp
c0015d19:	89 e5                	mov    ebp,esp
c0015d1b:	83 ec 08             	sub    esp,0x8
c0015d1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d21:	83 ec 0c             	sub    esp,0xc
c0015d24:	50                   	push   eax
c0015d25:	e8 c8 e8 ff ff       	call   c00145f2 <Device::getName()>
c0015d2a:	83 c4 10             	add    esp,0x10
c0015d2d:	8a 00                	mov    al,BYTE PTR [eax]
c0015d2f:	3c 41                	cmp    al,0x41
c0015d31:	0f 94 c0             	sete   al
c0015d34:	84 c0                	test   al,al
c0015d36:	74 28                	je     c0015d60 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d38:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d3c:	7f 12                	jg     c0015d50 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d41:	05 c0 d6 02 c0       	add    eax,0xc002d6c0
c0015d46:	8a 00                	mov    al,BYTE PTR [eax]
c0015d48:	0f b6 c0             	movzx  eax,al
c0015d4b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d4e:	eb 10                	jmp    c0015d60 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d50:	83 ec 0c             	sub    esp,0xc
c0015d53:	68 00 ae 02 c0       	push   0xc002ae00
c0015d58:	e8 ae 48 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0015d5d:	83 c4 10             	add    esp,0x10
c0015d60:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d63:	c9                   	leave  
c0015d64:	c3                   	ret    
c0015d65:	90                   	nop

c0015d66 <startGUI(void*)>:
c0015d66:	55                   	push   ebp
c0015d67:	89 e5                	mov    ebp,esp
c0015d69:	53                   	push   ebx
c0015d6a:	83 ec 04             	sub    esp,0x4
c0015d6d:	e8 76 80 00 00       	call   c001dde8 <unlockScheduler()>
c0015d72:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c0015d78:	83 ec 08             	sub    esp,0x8
c0015d7b:	6a 01                	push   0x1
c0015d7d:	68 74 b1 02 c0       	push   0xc002b174
c0015d82:	e8 b7 79 00 00       	call   c001d73e <Thr::loadDLL(char const*, bool)>
c0015d87:	83 c4 10             	add    esp,0x10
c0015d8a:	83 ec 08             	sub    esp,0x8
c0015d8d:	53                   	push   ebx
c0015d8e:	50                   	push   eax
c0015d8f:	e8 de 7b 00 00       	call   c001d972 <Thr::executeDLL(unsigned long, void*)>
c0015d94:	83 c4 10             	add    esp,0x10
c0015d97:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c0015d9d:	83 ec 08             	sub    esp,0x8
c0015da0:	6a 01                	push   0x1
c0015da2:	68 8e b1 02 c0       	push   0xc002b18e
c0015da7:	e8 92 79 00 00       	call   c001d73e <Thr::loadDLL(char const*, bool)>
c0015dac:	83 c4 10             	add    esp,0x10
c0015daf:	83 ec 08             	sub    esp,0x8
c0015db2:	53                   	push   ebx
c0015db3:	50                   	push   eax
c0015db4:	e8 b9 7b 00 00       	call   c001d972 <Thr::executeDLL(unsigned long, void*)>
c0015db9:	83 c4 10             	add    esp,0x10
c0015dbc:	90                   	nop
c0015dbd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dc0:	c9                   	leave  
c0015dc1:	c3                   	ret    

c0015dc2 <startGUIVESA(void*)>:
c0015dc2:	55                   	push   ebp
c0015dc3:	89 e5                	mov    ebp,esp
c0015dc5:	53                   	push   ebx
c0015dc6:	83 ec 04             	sub    esp,0x4
c0015dc9:	e8 1a 80 00 00       	call   c001dde8 <unlockScheduler()>
c0015dce:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c0015dd4:	83 ec 08             	sub    esp,0x8
c0015dd7:	6a 01                	push   0x1
c0015dd9:	68 a8 b1 02 c0       	push   0xc002b1a8
c0015dde:	e8 5b 79 00 00       	call   c001d73e <Thr::loadDLL(char const*, bool)>
c0015de3:	83 c4 10             	add    esp,0x10
c0015de6:	83 ec 08             	sub    esp,0x8
c0015de9:	53                   	push   ebx
c0015dea:	50                   	push   eax
c0015deb:	e8 82 7b 00 00       	call   c001d972 <Thr::executeDLL(unsigned long, void*)>
c0015df0:	83 c4 10             	add    esp,0x10
c0015df3:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c0015df9:	83 ec 08             	sub    esp,0x8
c0015dfc:	6a 01                	push   0x1
c0015dfe:	68 8e b1 02 c0       	push   0xc002b18e
c0015e03:	e8 36 79 00 00       	call   c001d73e <Thr::loadDLL(char const*, bool)>
c0015e08:	83 c4 10             	add    esp,0x10
c0015e0b:	83 ec 08             	sub    esp,0x8
c0015e0e:	53                   	push   ebx
c0015e0f:	50                   	push   eax
c0015e10:	e8 5d 7b 00 00       	call   c001d972 <Thr::executeDLL(unsigned long, void*)>
c0015e15:	83 c4 10             	add    esp,0x10
c0015e18:	90                   	nop
c0015e19:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e1c:	c9                   	leave  
c0015e1d:	c3                   	ret    

c0015e1e <sendKeyToTerminal(unsigned char)>:
c0015e1e:	55                   	push   ebp
c0015e1f:	89 e5                	mov    ebp,esp
c0015e21:	83 ec 28             	sub    esp,0x28
c0015e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e27:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e2a:	a1 44 e5 02 c0       	mov    eax,ds:0xc002e544
c0015e2f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e33:	83 ec 08             	sub    esp,0x8
c0015e36:	52                   	push   edx
c0015e37:	50                   	push   eax
c0015e38:	e8 dd b4 ff ff       	call   c001131a <VgaText::receiveKey(unsigned char)>
c0015e3d:	83 c4 10             	add    esp,0x10
c0015e40:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e44:	75 41                	jne    c0015e87 <sendKeyToTerminal(unsigned char)+0x69>
c0015e46:	e8 c2 7f 00 00       	call   c001de0d <lockStuff()>
c0015e4b:	a1 20 e6 02 c0       	mov    eax,ds:0xc002e620
c0015e50:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e53:	c7 05 20 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e620,0x0
c0015e5d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e61:	74 1f                	je     c0015e82 <sendKeyToTerminal(unsigned char)+0x64>
c0015e63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e66:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e6c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e6f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e72:	83 ec 0c             	sub    esp,0xc
c0015e75:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e78:	e8 bb 85 00 00       	call   c001e438 <unblockTask(ThreadControlBlock*)>
c0015e7d:	83 c4 10             	add    esp,0x10
c0015e80:	eb db                	jmp    c0015e5d <sendKeyToTerminal(unsigned char)+0x3f>
c0015e82:	e8 5a 83 00 00       	call   c001e1e1 <unlockStuff()>
c0015e87:	90                   	nop
c0015e88:	c9                   	leave  
c0015e89:	c3                   	ret    

c0015e8a <sendKeyboardToken(KeyboardToken)>:
c0015e8a:	55                   	push   ebp
c0015e8b:	89 e5                	mov    ebp,esp
c0015e8d:	83 ec 18             	sub    esp,0x18
c0015e90:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e96:	0f b7 c0             	movzx  eax,ax
c0015e99:	83 f2 01             	xor    edx,0x1
c0015e9c:	88 90 40 e6 02 c0    	mov    BYTE PTR [eax-0x3ffd19c0],dl
c0015ea2:	a1 28 e6 02 c0       	mov    eax,ds:0xc002e628
c0015ea7:	85 c0                	test   eax,eax
c0015ea9:	74 24                	je     c0015ecf <sendKeyboardToken(KeyboardToken)+0x45>
c0015eab:	8b 0d 28 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e628
c0015eb1:	83 ec 04             	sub    esp,0x4
c0015eb4:	68 40 e6 02 c0       	push   0xc002e640
c0015eb9:	83 ec 08             	sub    esp,0x8
c0015ebc:	89 e2                	mov    edx,esp
c0015ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec1:	89 02                	mov    DWORD PTR [edx],eax
c0015ec3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ec6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015eca:	ff d1                	call   ecx
c0015ecc:	83 c4 10             	add    esp,0x10
c0015ecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed2:	66 3d 03 02          	cmp    ax,0x203
c0015ed6:	75 07                	jne    c0015edf <sendKeyboardToken(KeyboardToken)+0x55>
c0015ed8:	a0 40 e7 02 c0       	mov    al,ds:0xc002e740
c0015edd:	84 c0                	test   al,al
c0015edf:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ee3:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ee6:	a0 48 ea 02 c0       	mov    al,ds:0xc002ea48
c0015eeb:	38 c2                	cmp    dl,al
c0015eed:	74 1c                	je     c0015f0b <sendKeyboardToken(KeyboardToken)+0x81>
c0015eef:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ef2:	a2 48 ea 02 c0       	mov    ds:0xc002ea48,al
c0015ef7:	a0 48 ea 02 c0       	mov    al,ds:0xc002ea48
c0015efc:	0f b6 c0             	movzx  eax,al
c0015eff:	83 ec 0c             	sub    esp,0xc
c0015f02:	50                   	push   eax
c0015f03:	e8 72 a6 ff ff       	call   c001057a <setTerminalScrollLock(bool)>
c0015f08:	83 c4 10             	add    esp,0x10
c0015f0b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f0e:	84 c0                	test   al,al
c0015f10:	0f 84 ae 00 00 00    	je     c0015fc4 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f19:	66 3d 10 03          	cmp    ax,0x310
c0015f1d:	75 06                	jne    c0015f25 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f1f:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f28:	66 3d 11 03          	cmp    ax,0x311
c0015f2c:	75 06                	jne    c0015f34 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f2e:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f37:	66 3d 12 03          	cmp    ax,0x312
c0015f3b:	75 06                	jne    c0015f43 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f3d:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f46:	66 3d 13 03          	cmp    ax,0x313
c0015f4a:	75 06                	jne    c0015f52 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f4c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f55:	66 3d 14 03          	cmp    ax,0x314
c0015f59:	75 06                	jne    c0015f61 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f5b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f64:	66 3d 15 03          	cmp    ax,0x315
c0015f68:	75 06                	jne    c0015f70 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f6a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f73:	66 3d 16 03          	cmp    ax,0x316
c0015f77:	75 06                	jne    c0015f7f <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f79:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f82:	66 3d 17 03          	cmp    ax,0x317
c0015f86:	75 06                	jne    c0015f8e <sendKeyboardToken(KeyboardToken)+0x104>
c0015f88:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f91:	66 3d 18 03          	cmp    ax,0x318
c0015f95:	75 06                	jne    c0015f9d <sendKeyboardToken(KeyboardToken)+0x113>
c0015f97:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa0:	66 3d 19 03          	cmp    ax,0x319
c0015fa4:	75 06                	jne    c0015fac <sendKeyboardToken(KeyboardToken)+0x122>
c0015fa6:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015faf:	66 3d 1a 03          	cmp    ax,0x31a
c0015fb3:	0f 85 c9 00 00 00    	jne    c0016082 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fb9:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fbf:	e9 be 00 00 00       	jmp    c0016082 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc7:	66 3d 10 03          	cmp    ax,0x310
c0015fcb:	75 0a                	jne    c0015fd7 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fcd:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fd3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fda:	66 3d 11 03          	cmp    ax,0x311
c0015fde:	75 0a                	jne    c0015fea <sendKeyboardToken(KeyboardToken)+0x160>
c0015fe0:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015fe6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fed:	66 3d 12 03          	cmp    ax,0x312
c0015ff1:	75 0a                	jne    c0015ffd <sendKeyboardToken(KeyboardToken)+0x173>
c0015ff3:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015ff9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016000:	66 3d 13 03          	cmp    ax,0x313
c0016004:	75 0a                	jne    c0016010 <sendKeyboardToken(KeyboardToken)+0x186>
c0016006:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001600c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016013:	66 3d 14 03          	cmp    ax,0x314
c0016017:	75 0a                	jne    c0016023 <sendKeyboardToken(KeyboardToken)+0x199>
c0016019:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001601f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016026:	66 3d 15 03          	cmp    ax,0x315
c001602a:	75 0a                	jne    c0016036 <sendKeyboardToken(KeyboardToken)+0x1ac>
c001602c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016032:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016039:	66 3d 16 03          	cmp    ax,0x316
c001603d:	75 0a                	jne    c0016049 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001603f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016045:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604c:	66 3d 17 03          	cmp    ax,0x317
c0016050:	75 0a                	jne    c001605c <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016052:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016058:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001605c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605f:	66 3d 18 03          	cmp    ax,0x318
c0016063:	75 0a                	jne    c001606f <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016065:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001606b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001606f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016072:	66 3d 19 03          	cmp    ax,0x319
c0016076:	75 0a                	jne    c0016082 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016078:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001607e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016082:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016085:	66 3d 00 02          	cmp    ax,0x200
c0016089:	75 2c                	jne    c00160b7 <sendKeyboardToken(KeyboardToken)+0x22d>
c001608b:	a0 40 ea 02 c0       	mov    al,ds:0xc002ea40
c0016090:	83 f0 01             	xor    eax,0x1
c0016093:	84 c0                	test   al,al
c0016095:	74 20                	je     c00160b7 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016097:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001609c:	6a 01                	push   0x1
c001609e:	6a 00                	push   0x0
c00160a0:	68 66 5d 01 c0       	push   0xc0015d66
c00160a5:	50                   	push   eax
c00160a6:	e8 6d 7e 00 00       	call   c001df18 <Process::createThread(void (*)(void*), void*, int)>
c00160ab:	83 c4 10             	add    esp,0x10
c00160ae:	c6 05 40 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea40,0x1
c00160b5:	eb 33                	jmp    c00160ea <sendKeyboardToken(KeyboardToken)+0x260>
c00160b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ba:	66 3d 01 02          	cmp    ax,0x201
c00160be:	75 2a                	jne    c00160ea <sendKeyboardToken(KeyboardToken)+0x260>
c00160c0:	a0 40 ea 02 c0       	mov    al,ds:0xc002ea40
c00160c5:	83 f0 01             	xor    eax,0x1
c00160c8:	84 c0                	test   al,al
c00160ca:	74 1e                	je     c00160ea <sendKeyboardToken(KeyboardToken)+0x260>
c00160cc:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00160d1:	6a 01                	push   0x1
c00160d3:	6a 00                	push   0x0
c00160d5:	68 c2 5d 01 c0       	push   0xc0015dc2
c00160da:	50                   	push   eax
c00160db:	e8 38 7e 00 00       	call   c001df18 <Process::createThread(void (*)(void*), void*, int)>
c00160e0:	83 c4 10             	add    esp,0x10
c00160e3:	c6 05 40 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea40,0x1
c00160ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ed:	66 3d 1d 03          	cmp    ax,0x31d
c00160f1:	75 06                	jne    c00160f9 <sendKeyboardToken(KeyboardToken)+0x26f>
c00160f3:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160fc:	66 3d 1c 03          	cmp    ax,0x31c
c0016100:	75 06                	jne    c0016108 <sendKeyboardToken(KeyboardToken)+0x27e>
c0016102:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610b:	66 3d 1b 03          	cmp    ax,0x31b
c001610f:	75 06                	jne    c0016117 <sendKeyboardToken(KeyboardToken)+0x28d>
c0016111:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611a:	66 3d 1e 03          	cmp    ax,0x31e
c001611e:	75 06                	jne    c0016126 <sendKeyboardToken(KeyboardToken)+0x29c>
c0016120:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016129:	66 3d 1f 03          	cmp    ax,0x31f
c001612d:	75 06                	jne    c0016135 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001612f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016138:	66 3d 1a 03          	cmp    ax,0x31a
c001613c:	75 06                	jne    c0016144 <sendKeyboardToken(KeyboardToken)+0x2ba>
c001613e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016144:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016148:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001614b:	83 f0 01             	xor    eax,0x1
c001614e:	84 c0                	test   al,al
c0016150:	74 77                	je     c00161c9 <sendKeyboardToken(KeyboardToken)+0x33f>
c0016152:	a0 41 e7 02 c0       	mov    al,ds:0xc002e741
c0016157:	84 c0                	test   al,al
c0016159:	74 41                	je     c001619c <sendKeyboardToken(KeyboardToken)+0x312>
c001615b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001615f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016163:	74 2b                	je     c0016190 <sendKeyboardToken(KeyboardToken)+0x306>
c0016165:	8b 15 44 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea44
c001616b:	89 d0                	mov    eax,edx
c001616d:	c1 e0 02             	shl    eax,0x2
c0016170:	01 d0                	add    eax,edx
c0016172:	01 c0                	add    eax,eax
c0016174:	a3 44 ea 02 c0       	mov    ds:0xc002ea44,eax
c0016179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001617c:	0f b7 c0             	movzx  eax,ax
c001617f:	8d 50 d0             	lea    edx,[eax-0x30]
c0016182:	a1 44 ea 02 c0       	mov    eax,ds:0xc002ea44
c0016187:	01 d0                	add    eax,edx
c0016189:	a3 44 ea 02 c0       	mov    ds:0xc002ea44,eax
c001618e:	eb 6d                	jmp    c00161fd <sendKeyboardToken(KeyboardToken)+0x373>
c0016190:	c7 05 44 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea44,0x0
c001619a:	eb 61                	jmp    c00161fd <sendKeyboardToken(KeyboardToken)+0x373>
c001619c:	a1 44 ea 02 c0       	mov    eax,ds:0xc002ea44
c00161a1:	85 c0                	test   eax,eax
c00161a3:	74 18                	je     c00161bd <sendKeyboardToken(KeyboardToken)+0x333>
c00161a5:	a1 44 ea 02 c0       	mov    eax,ds:0xc002ea44
c00161aa:	0f b6 c0             	movzx  eax,al
c00161ad:	83 ec 0c             	sub    esp,0xc
c00161b0:	50                   	push   eax
c00161b1:	e8 68 fc ff ff       	call   c0015e1e <sendKeyToTerminal(unsigned char)>
c00161b6:	83 c4 10             	add    esp,0x10
c00161b9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161bd:	c7 05 44 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea44,0x0
c00161c7:	eb 34                	jmp    c00161fd <sendKeyboardToken(KeyboardToken)+0x373>
c00161c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161cc:	66 3d 01 01          	cmp    ax,0x101
c00161d0:	75 2b                	jne    c00161fd <sendKeyboardToken(KeyboardToken)+0x373>
c00161d2:	a1 44 ea 02 c0       	mov    eax,ds:0xc002ea44
c00161d7:	85 c0                	test   eax,eax
c00161d9:	74 18                	je     c00161f3 <sendKeyboardToken(KeyboardToken)+0x369>
c00161db:	a1 44 ea 02 c0       	mov    eax,ds:0xc002ea44
c00161e0:	0f b6 c0             	movzx  eax,al
c00161e3:	83 ec 0c             	sub    esp,0xc
c00161e6:	50                   	push   eax
c00161e7:	e8 32 fc ff ff       	call   c0015e1e <sendKeyToTerminal(unsigned char)>
c00161ec:	83 c4 10             	add    esp,0x10
c00161ef:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161f3:	c7 05 44 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea44,0x0
c00161fd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016200:	83 f0 01             	xor    eax,0x1
c0016203:	84 c0                	test   al,al
c0016205:	74 4c                	je     c0016253 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016207:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001620a:	83 f0 01             	xor    eax,0x1
c001620d:	84 c0                	test   al,al
c001620f:	74 42                	je     c0016253 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016211:	a0 40 e7 02 c0       	mov    al,ds:0xc002e740
c0016216:	83 f0 01             	xor    eax,0x1
c0016219:	84 c0                	test   al,al
c001621b:	74 36                	je     c0016253 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001621d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016220:	66 83 f8 1f          	cmp    ax,0x1f
c0016224:	76 09                	jbe    c001622f <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016226:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016229:	66 83 f8 7e          	cmp    ax,0x7e
c001622d:	76 12                	jbe    c0016241 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001622f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016232:	66 83 f8 0a          	cmp    ax,0xa
c0016236:	74 09                	je     c0016241 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623b:	66 83 f8 08          	cmp    ax,0x8
c001623f:	75 12                	jne    c0016253 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016241:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016244:	0f b6 c0             	movzx  eax,al
c0016247:	83 ec 0c             	sub    esp,0xc
c001624a:	50                   	push   eax
c001624b:	e8 ce fb ff ff       	call   c0015e1e <sendKeyToTerminal(unsigned char)>
c0016250:	83 c4 10             	add    esp,0x10
c0016253:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016256:	83 f0 01             	xor    eax,0x1
c0016259:	84 c0                	test   al,al
c001625b:	74 4f                	je     c00162ac <sendKeyboardToken(KeyboardToken)+0x422>
c001625d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016260:	83 f0 01             	xor    eax,0x1
c0016263:	84 c0                	test   al,al
c0016265:	74 45                	je     c00162ac <sendKeyboardToken(KeyboardToken)+0x422>
c0016267:	a0 40 e7 02 c0       	mov    al,ds:0xc002e740
c001626c:	84 c0                	test   al,al
c001626e:	74 3c                	je     c00162ac <sendKeyboardToken(KeyboardToken)+0x422>
c0016270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016273:	66 83 f8 3f          	cmp    ax,0x3f
c0016277:	76 33                	jbe    c00162ac <sendKeyboardToken(KeyboardToken)+0x422>
c0016279:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001627c:	66 83 f8 7f          	cmp    ax,0x7f
c0016280:	77 2a                	ja     c00162ac <sendKeyboardToken(KeyboardToken)+0x422>
c0016282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016285:	88 c2                	mov    dl,al
c0016287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001628a:	66 83 f8 5f          	cmp    ax,0x5f
c001628e:	76 04                	jbe    c0016294 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016290:	b0 20                	mov    al,0x20
c0016292:	eb 02                	jmp    c0016296 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016294:	b0 00                	mov    al,0x0
c0016296:	29 c2                	sub    edx,eax
c0016298:	88 d0                	mov    al,dl
c001629a:	83 e8 40             	sub    eax,0x40
c001629d:	0f b6 c0             	movzx  eax,al
c00162a0:	83 ec 0c             	sub    esp,0xc
c00162a3:	50                   	push   eax
c00162a4:	e8 75 fb ff ff       	call   c0015e1e <sendKeyToTerminal(unsigned char)>
c00162a9:	83 c4 10             	add    esp,0x10
c00162ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162af:	66 3d 00 03          	cmp    ax,0x300
c00162b3:	75 0f                	jne    c00162c4 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162b5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162b8:	83 f0 01             	xor    eax,0x1
c00162bb:	84 c0                	test   al,al
c00162bd:	74 05                	je     c00162c4 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162bf:	e8 eb aa ff ff       	call   c0010daf <doTerminalCycle()>
c00162c4:	90                   	nop
c00162c5:	c9                   	leave  
c00162c6:	c3                   	ret    

c00162c7 <clearInternalKeybuffer(VgaText*)>:
c00162c7:	55                   	push   ebp
c00162c8:	89 e5                	mov    ebp,esp
c00162ca:	83 ec 08             	sub    esp,0x8
c00162cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d0:	05 34 11 00 00       	add    eax,0x1134
c00162d5:	83 ec 0c             	sub    esp,0xc
c00162d8:	50                   	push   eax
c00162d9:	e8 be a4 fe ff       	call   c000079c <strlen>
c00162de:	83 c4 10             	add    esp,0x10
c00162e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162e4:	81 c2 34 11 00 00    	add    edx,0x1134
c00162ea:	83 ec 04             	sub    esp,0x4
c00162ed:	50                   	push   eax
c00162ee:	6a 00                	push   0x0
c00162f0:	52                   	push   edx
c00162f1:	e8 8a a4 fe ff       	call   c0000780 <memset>
c00162f6:	83 c4 10             	add    esp,0x10
c00162f9:	90                   	nop
c00162fa:	c9                   	leave  
c00162fb:	c3                   	ret    

c00162fc <readKeyboard(VgaText*, char*, unsigned long)>:
c00162fc:	55                   	push   ebp
c00162fd:	89 e5                	mov    ebp,esp
c00162ff:	83 ec 18             	sub    esp,0x18
c0016302:	fb                   	sti    
c0016303:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001630a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001630e:	0f 84 8a 00 00 00    	je     c001639e <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016317:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001631d:	84 c0                	test   al,al
c001631f:	75 11                	jne    c0016332 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016321:	e8 c0 7a 00 00       	call   c001dde6 <lockScheduler()>
c0016326:	e8 31 7e 00 00       	call   c001e15c <schedule()>
c001632b:	e8 b8 7a 00 00       	call   c001dde8 <unlockScheduler()>
c0016330:	eb e2                	jmp    c0016314 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0016332:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016335:	8d 50 01             	lea    edx,[eax+0x1]
c0016338:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001633b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001633e:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016344:	88 10                	mov    BYTE PTR [eax],dl
c0016346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016349:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001634f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016355:	05 34 11 00 00       	add    eax,0x1134
c001635a:	83 ec 0c             	sub    esp,0xc
c001635d:	50                   	push   eax
c001635e:	e8 39 a4 fe ff       	call   c000079c <strlen>
c0016363:	83 c4 10             	add    esp,0x10
c0016366:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016369:	81 c2 34 11 00 00    	add    edx,0x1134
c001636f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016372:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016375:	81 c2 34 11 00 00    	add    edx,0x1134
c001637b:	83 ec 04             	sub    esp,0x4
c001637e:	50                   	push   eax
c001637f:	51                   	push   ecx
c0016380:	52                   	push   edx
c0016381:	e8 fe a2 fe ff       	call   c0000684 <memmove>
c0016386:	83 c4 10             	add    esp,0x10
c0016389:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001638c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001638f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016393:	0f 85 71 ff ff ff    	jne    c001630a <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016399:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001639c:	eb 03                	jmp    c00163a1 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001639e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163a1:	c9                   	leave  
c00163a2:	c3                   	ret    
c00163a3:	90                   	nop

c00163a4 <Keyboard::Keyboard(char const*)>:
c00163a4:	83 ec 0c             	sub    esp,0xc
c00163a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ab:	83 ec 08             	sub    esp,0x8
c00163ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b2:	50                   	push   eax
c00163b3:	e8 3e e1 ff ff       	call   c00144f6 <Device::Device(char const*)>
c00163b8:	83 c4 10             	add    esp,0x10
c00163bb:	ba cc b1 02 c0       	mov    edx,0xc002b1cc
c00163c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c4:	89 10                	mov    DWORD PTR [eax],edx
c00163c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ca:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00163d4:	c6 05 24 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e624,0x1
c00163db:	90                   	nop
c00163dc:	83 c4 0c             	add    esp,0xc
c00163df:	c3                   	ret    

c00163e0 <Keyboard::~Keyboard()>:
c00163e0:	83 ec 0c             	sub    esp,0xc
c00163e3:	ba cc b1 02 c0       	mov    edx,0xc002b1cc
c00163e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ec:	89 10                	mov    DWORD PTR [eax],edx
c00163ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f2:	83 ec 0c             	sub    esp,0xc
c00163f5:	50                   	push   eax
c00163f6:	e8 dd dd ff ff       	call   c00141d8 <Device::~Device()>
c00163fb:	83 c4 10             	add    esp,0x10
c00163fe:	90                   	nop
c00163ff:	83 c4 0c             	add    esp,0xc
c0016402:	c3                   	ret    
c0016403:	90                   	nop

c0016404 <Keyboard::~Keyboard()>:
c0016404:	83 ec 0c             	sub    esp,0xc
c0016407:	83 ec 0c             	sub    esp,0xc
c001640a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001640e:	e8 cd ff ff ff       	call   c00163e0 <Keyboard::~Keyboard()>
c0016413:	83 c4 10             	add    esp,0x10
c0016416:	83 ec 08             	sub    esp,0x8
c0016419:	68 5c 01 00 00       	push   0x15c
c001641e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016422:	e8 d8 c9 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0016427:	83 c4 10             	add    esp,0x10
c001642a:	83 c4 0c             	add    esp,0xc
c001642d:	c3                   	ret    

c001642e <LogicalDisk::close(int, int, void*)>:
c001642e:	83 c8 ff             	or     eax,0xffffffff
c0016431:	c3                   	ret    

c0016432 <LogicalDisk::~LogicalDisk()>:
c0016432:	83 ec 0c             	sub    esp,0xc
c0016435:	ba 7c b2 02 c0       	mov    edx,0xc002b27c
c001643a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643e:	89 10                	mov    DWORD PTR [eax],edx
c0016440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016444:	83 ec 0c             	sub    esp,0xc
c0016447:	50                   	push   eax
c0016448:	e8 8b dd ff ff       	call   c00141d8 <Device::~Device()>
c001644d:	83 c4 10             	add    esp,0x10
c0016450:	90                   	nop
c0016451:	83 c4 0c             	add    esp,0xc
c0016454:	c3                   	ret    
c0016455:	90                   	nop

c0016456 <LogicalDisk::~LogicalDisk()>:
c0016456:	83 ec 0c             	sub    esp,0xc
c0016459:	83 ec 0c             	sub    esp,0xc
c001645c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016460:	e8 cd ff ff ff       	call   c0016432 <LogicalDisk::~LogicalDisk()>
c0016465:	83 c4 10             	add    esp,0x10
c0016468:	83 ec 08             	sub    esp,0x8
c001646b:	68 74 01 00 00       	push   0x174
c0016470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016474:	e8 86 c9 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0016479:	83 c4 10             	add    esp,0x10
c001647c:	83 c4 0c             	add    esp,0xc
c001647f:	c3                   	ret    

c0016480 <LogicalDisk::open(int, int, void*)>:
c0016480:	83 ec 18             	sub    esp,0x18
c0016483:	68 f8 b1 02 c0       	push   0xc002b1f8
c0016488:	e8 7e 41 00 00       	call   c001a60b <Krnl::panic(char const*)>
c001648d:	83 c8 ff             	or     eax,0xffffffff
c0016490:	83 c4 1c             	add    esp,0x1c
c0016493:	c3                   	ret    

c0016494 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016494:	53                   	push   ebx
c0016495:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016499:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001649d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164a1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164a7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164ad:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00164b3:	77 10                	ja     c00164c5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00164b5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00164bb:	89 d3                	mov    ebx,edx
c00164bd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00164c3:	72 05                	jb     c00164ca <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00164c5:	83 c8 ff             	or     eax,0xffffffff
c00164c8:	89 c2                	mov    edx,eax
c00164ca:	5b                   	pop    ebx
c00164cb:	c3                   	ret    

c00164cc <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00164cc:	56                   	push   esi
c00164cd:	83 c8 ff             	or     eax,0xffffffff
c00164d0:	53                   	push   ebx
c00164d1:	89 c2                	mov    edx,eax
c00164d3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00164d7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00164db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00164df:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00164e5:	77 27                	ja     c001650e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164e7:	89 d8                	mov    eax,ebx
c00164e9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00164ef:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00164f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164fa:	89 c2                	mov    edx,eax
c00164fc:	73 10                	jae    c001650e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00164fe:	89 c8                	mov    eax,ecx
c0016500:	89 da                	mov    edx,ebx
c0016502:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016508:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001650e:	5b                   	pop    ebx
c001650f:	5e                   	pop    esi
c0016510:	c3                   	ret    
c0016511:	90                   	nop

c0016512 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016512:	83 ec 1c             	sub    esp,0x1c
c0016515:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016519:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001651d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016521:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016525:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016529:	89 04 24             	mov    DWORD PTR [esp],eax
c001652c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016530:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016538:	83 ec 08             	sub    esp,0x8
c001653b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001653f:	50                   	push   eax
c0016540:	e8 b1 df ff ff       	call   c00144f6 <Device::Device(char const*)>
c0016545:	83 c4 10             	add    esp,0x10
c0016548:	ba 7c b2 02 c0       	mov    edx,0xc002b27c
c001654d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016551:	89 10                	mov    DWORD PTR [eax],edx
c0016553:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016557:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001655e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016562:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016569:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001656d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016577:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001657b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001657f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016583:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016589:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001658f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016593:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001659a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00165a0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165ae:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00165b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165c2:	90                   	nop
c00165c3:	83 c4 1c             	add    esp,0x1c
c00165c6:	c3                   	ret    
c00165c7:	90                   	nop

c00165c8 <LogicalDisk::assignDriveLetter()>:
c00165c8:	55                   	push   ebp
c00165c9:	57                   	push   edi
c00165ca:	56                   	push   esi
c00165cb:	53                   	push   ebx
c00165cc:	83 ec 14             	sub    esp,0x14
c00165cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165d3:	8b 3d 60 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea60
c00165d9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00165df:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00165e3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00165e9:	8b 3d 64 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea64
c00165ef:	3c 01                	cmp    al,0x1
c00165f1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00165f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00165f9:	19 c0                	sbb    eax,eax
c00165fb:	83 e0 02             	and    eax,0x2
c00165fe:	83 c0 41             	add    eax,0x41
c0016601:	0f be e8             	movsx  ebp,al
c0016604:	3c 43                	cmp    al,0x43
c0016606:	75 10                	jne    c0016618 <LogicalDisk::assignDriveLetter()+0x50>
c0016608:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001660f:	75 5d                	jne    c001666e <LogicalDisk::assignDriveLetter()+0xa6>
c0016611:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016616:	75 56                	jne    c001666e <LogicalDisk::assignDriveLetter()+0xa6>
c0016618:	8d 75 bf             	lea    esi,[ebp-0x41]
c001661b:	ba 01 00 00 00       	mov    edx,0x1
c0016620:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016624:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016628:	d3 e2                	shl    edx,cl
c001662a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001662e:	89 d7                	mov    edi,edx
c0016630:	89 d6                	mov    esi,edx
c0016632:	c1 ff 1f             	sar    edi,0x1f
c0016635:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016639:	21 f9                	and    ecx,edi
c001663b:	09 d1                	or     ecx,edx
c001663d:	75 2f                	jne    c001666e <LogicalDisk::assignDriveLetter()+0xa6>
c001663f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016647:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001664d:	09 f2                	or     edx,esi
c001664f:	89 15 60 ea 02 c0    	mov    DWORD PTR ds:0xc002ea60,edx
c0016655:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016659:	09 fa                	or     edx,edi
c001665b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001665f:	89 15 64 ea 02 c0    	mov    DWORD PTR ds:0xc002ea64,edx
c0016665:	89 1c bd 80 ea 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1580],ebx
c001666c:	eb 08                	jmp    c0016676 <LogicalDisk::assignDriveLetter()+0xae>
c001666e:	45                   	inc    ebp
c001666f:	40                   	inc    eax
c0016670:	3c 5b                	cmp    al,0x5b
c0016672:	75 90                	jne    c0016604 <LogicalDisk::assignDriveLetter()+0x3c>
c0016674:	31 c0                	xor    eax,eax
c0016676:	83 c4 14             	add    esp,0x14
c0016679:	5b                   	pop    ebx
c001667a:	5e                   	pop    esi
c001667b:	5f                   	pop    edi
c001667c:	5d                   	pop    ebp
c001667d:	c3                   	ret    

c001667e <LogicalDisk::mount()>:
c001667e:	56                   	push   esi
c001667f:	53                   	push   ebx
c0016680:	51                   	push   ecx
c0016681:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016685:	8b 1d f4 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5f4
c001668b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016695:	85 db                	test   ebx,ebx
c0016697:	74 50                	je     c00166e9 <LogicalDisk::mount()+0x6b>
c0016699:	e8 33 77 00 00       	call   c001ddd1 <getIRQNestingLevel()>
c001669e:	52                   	push   edx
c001669f:	52                   	push   edx
c00166a0:	50                   	push   eax
c00166a1:	68 1c b2 02 c0       	push   0xc002b21c
c00166a6:	e8 34 c8 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00166ab:	83 c4 0c             	add    esp,0xc
c00166ae:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00166b5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166b7:	83 e8 41             	sub    eax,0x41
c00166ba:	50                   	push   eax
c00166bb:	56                   	push   esi
c00166bc:	53                   	push   ebx
c00166bd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00166c0:	83 c4 10             	add    esp,0x10
c00166c3:	84 c0                	test   al,al
c00166c5:	74 08                	je     c00166cf <LogicalDisk::mount()+0x51>
c00166c7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00166cd:	eb 1c                	jmp    c00166eb <LogicalDisk::mount()+0x6d>
c00166cf:	e8 fd 76 00 00       	call   c001ddd1 <getIRQNestingLevel()>
c00166d4:	51                   	push   ecx
c00166d5:	51                   	push   ecx
c00166d6:	50                   	push   eax
c00166d7:	68 37 b2 02 c0       	push   0xc002b237
c00166dc:	e8 fe c7 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00166e1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00166e4:	83 c4 10             	add    esp,0x10
c00166e7:	eb ac                	jmp    c0016695 <LogicalDisk::mount()+0x17>
c00166e9:	31 c0                	xor    eax,eax
c00166eb:	5a                   	pop    edx
c00166ec:	5b                   	pop    ebx
c00166ed:	5e                   	pop    esi
c00166ee:	c3                   	ret    
c00166ef:	90                   	nop

c00166f0 <LogicalDisk::unmount()>:
c00166f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166f4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166fe:	c3                   	ret    
c00166ff:	90                   	nop

c0016700 <LogicalDisk::eject()>:
c0016700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016704:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001670a:	8b 10                	mov    edx,DWORD PTR [eax]
c001670c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016710:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016713:	90                   	nop

c0016714 <LogicalDisk::unassignDriveLetter()>:
c0016714:	57                   	push   edi
c0016715:	56                   	push   esi
c0016716:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001671a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016721:	84 c9                	test   cl,cl
c0016723:	75 0f                	jne    c0016734 <LogicalDisk::unassignDriveLetter()+0x20>
c0016725:	c7 44 24 0c 52 b2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b252
c001672d:	5e                   	pop    esi
c001672e:	5f                   	pop    edi
c001672f:	e9 d7 3e 00 00       	jmp    c001a60b <Krnl::panic(char const*)>
c0016734:	83 e9 41             	sub    ecx,0x41
c0016737:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001673e:	b8 01 00 00 00       	mov    eax,0x1
c0016743:	c7 04 8d 80 ea 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1580],0x0
c001674e:	d3 e0                	shl    eax,cl
c0016750:	89 c7                	mov    edi,eax
c0016752:	f7 d0                	not    eax
c0016754:	c1 ff 1f             	sar    edi,0x1f
c0016757:	21 05 60 ea 02 c0    	and    DWORD PTR ds:0xc002ea60,eax
c001675d:	89 fe                	mov    esi,edi
c001675f:	f7 d6                	not    esi
c0016761:	21 35 64 ea 02 c0    	and    DWORD PTR ds:0xc002ea64,esi
c0016767:	5e                   	pop    esi
c0016768:	5f                   	pop    edi
c0016769:	c3                   	ret    

c001676a <LogicalDisk::read(unsigned long long, int, void*)>:
c001676a:	57                   	push   edi
c001676b:	56                   	push   esi
c001676c:	53                   	push   ebx
c001676d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016771:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016775:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016779:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001677d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016783:	77 41                	ja     c00167c6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016785:	99                   	cdq    
c0016786:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001678c:	01 c8                	add    eax,ecx
c001678e:	11 da                	adc    edx,ebx
c0016790:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016796:	19 d7                	sbb    edi,edx
c0016798:	72 33                	jb     c00167cd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001679a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167a0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167a6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167aa:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167ae:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167b4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167be:	5b                   	pop    ebx
c00167bf:	5e                   	pop    esi
c00167c0:	5f                   	pop    edi
c00167c1:	e9 b0 0a 00 00       	jmp    c0017276 <VCache::read(unsigned long long, int, void*)>
c00167c6:	b8 05 00 00 00       	mov    eax,0x5
c00167cb:	eb 05                	jmp    c00167d2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00167cd:	b8 07 00 00 00       	mov    eax,0x7
c00167d2:	5b                   	pop    ebx
c00167d3:	5e                   	pop    esi
c00167d4:	5f                   	pop    edi
c00167d5:	c3                   	ret    

c00167d6 <LogicalDisk::write(unsigned long long, int, void*)>:
c00167d6:	57                   	push   edi
c00167d7:	56                   	push   esi
c00167d8:	53                   	push   ebx
c00167d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167e1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167e9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167ef:	77 41                	ja     c0016832 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00167f1:	99                   	cdq    
c00167f2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167f8:	01 c8                	add    eax,ecx
c00167fa:	11 da                	adc    edx,ebx
c00167fc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016802:	19 d7                	sbb    edi,edx
c0016804:	72 33                	jb     c0016839 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016806:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001680c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016812:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016816:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001681a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016820:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016826:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001682a:	5b                   	pop    ebx
c001682b:	5e                   	pop    esi
c001682c:	5f                   	pop    edi
c001682d:	e9 4e 09 00 00       	jmp    c0017180 <VCache::write(unsigned long long, int, void*)>
c0016832:	b8 05 00 00 00       	mov    eax,0x5
c0016837:	eb 05                	jmp    c001683e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016839:	b8 07 00 00 00       	mov    eax,0x7
c001683e:	5b                   	pop    ebx
c001683f:	5e                   	pop    esi
c0016840:	5f                   	pop    edi
c0016841:	c3                   	ret    

c0016842 <Mouse::Mouse(char const*)>:
c0016842:	83 ec 0c             	sub    esp,0xc
c0016845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016849:	83 ec 08             	sub    esp,0x8
c001684c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016850:	50                   	push   eax
c0016851:	e8 a0 dc ff ff       	call   c00144f6 <Device::Device(char const*)>
c0016856:	83 c4 10             	add    esp,0x10
c0016859:	ba a8 b2 02 c0       	mov    edx,0xc002b2a8
c001685e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016862:	89 10                	mov    DWORD PTR [eax],edx
c0016864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016868:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016872:	90                   	nop
c0016873:	83 c4 0c             	add    esp,0xc
c0016876:	c3                   	ret    
c0016877:	90                   	nop

c0016878 <Mouse::~Mouse()>:
c0016878:	83 ec 0c             	sub    esp,0xc
c001687b:	ba a8 b2 02 c0       	mov    edx,0xc002b2a8
c0016880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016884:	89 10                	mov    DWORD PTR [eax],edx
c0016886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001688a:	83 ec 0c             	sub    esp,0xc
c001688d:	50                   	push   eax
c001688e:	e8 45 d9 ff ff       	call   c00141d8 <Device::~Device()>
c0016893:	83 c4 10             	add    esp,0x10
c0016896:	90                   	nop
c0016897:	83 c4 0c             	add    esp,0xc
c001689a:	c3                   	ret    
c001689b:	90                   	nop

c001689c <Mouse::~Mouse()>:
c001689c:	83 ec 0c             	sub    esp,0xc
c001689f:	83 ec 0c             	sub    esp,0xc
c00168a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168a6:	e8 cd ff ff ff       	call   c0016878 <Mouse::~Mouse()>
c00168ab:	83 c4 10             	add    esp,0x10
c00168ae:	83 ec 08             	sub    esp,0x8
c00168b1:	68 58 01 00 00       	push   0x158
c00168b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ba:	e8 40 c5 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c00168bf:	83 c4 10             	add    esp,0x10
c00168c2:	83 c4 0c             	add    esp,0xc
c00168c5:	c3                   	ret    

c00168c6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00168c6:	55                   	push   ebp
c00168c7:	57                   	push   edi
c00168c8:	56                   	push   esi
c00168c9:	53                   	push   ebx
c00168ca:	81 ec 28 01 00 00    	sub    esp,0x128
c00168d0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00168d7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00168de:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00168e5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00168ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168f0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00168f4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168fb:	e8 f2 dc ff ff       	call   c00145f2 <Device::getName()>
c0016900:	5a                   	pop    edx
c0016901:	59                   	pop    ecx
c0016902:	50                   	push   eax
c0016903:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016907:	55                   	push   ebp
c0016908:	e8 2f 9f fe ff       	call   c000083c <strcpy>
c001690d:	5b                   	pop    ebx
c001690e:	58                   	pop    eax
c001690f:	68 cc b2 02 c0       	push   0xc002b2cc
c0016914:	55                   	push   ebp
c0016915:	e8 62 a0 fe ff       	call   c000097c <strcat>
c001691a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016921:	e8 25 8f ff ff       	call   c000f84b <malloc>
c0016926:	83 c4 0c             	add    esp,0xc
c0016929:	89 c3                	mov    ebx,eax
c001692b:	57                   	push   edi
c001692c:	56                   	push   esi
c001692d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016931:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016935:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001693c:	55                   	push   ebp
c001693d:	50                   	push   eax
c001693e:	e8 cf fb ff ff       	call   c0016512 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016943:	83 c4 14             	add    esp,0x14
c0016946:	53                   	push   ebx
c0016947:	e8 7c fc ff ff       	call   c00165c8 <LogicalDisk::assignDriveLetter()>
c001694c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001694f:	89 c6                	mov    esi,eax
c0016951:	e8 28 fd ff ff       	call   c001667e <LogicalDisk::mount()>
c0016956:	58                   	pop    eax
c0016957:	5a                   	pop    edx
c0016958:	53                   	push   ebx
c0016959:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016960:	e8 a1 d9 ff ff       	call   c0014306 <Device::addChild(Device*)>
c0016965:	59                   	pop    ecx
c0016966:	89 f0                	mov    eax,esi
c0016968:	5b                   	pop    ebx
c0016969:	0f be f0             	movsx  esi,al
c001696c:	56                   	push   esi
c001696d:	68 d7 b2 02 c0       	push   0xc002b2d7
c0016972:	e8 68 c5 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0016977:	81 c4 2c 01 00 00    	add    esp,0x12c
c001697d:	5b                   	pop    ebx
c001697e:	5e                   	pop    esi
c001697f:	5f                   	pop    edi
c0016980:	5d                   	pop    ebp
c0016981:	c3                   	ret    

c0016982 <createPartitionsForDisk(PhysicalDisk*)>:
c0016982:	55                   	push   ebp
c0016983:	57                   	push   edi
c0016984:	56                   	push   esi
c0016985:	53                   	push   ebx
c0016986:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001698c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016993:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016999:	3d 00 02 00 00       	cmp    eax,0x200
c001699e:	74 27                	je     c00169c7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00169a0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00169a6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00169ac:	83 ec 10             	sub    esp,0x10
c00169af:	0f a4 f7 0a          	shld   edi,esi,0xa
c00169b3:	99                   	cdq    
c00169b4:	c1 e6 0a             	shl    esi,0xa
c00169b7:	52                   	push   edx
c00169b8:	89 fd                	mov    ebp,edi
c00169ba:	50                   	push   eax
c00169bb:	55                   	push   ebp
c00169bc:	56                   	push   esi
c00169bd:	e8 42 00 01 00       	call   c0026a04 <__udivdi3>
c00169c2:	e9 b1 00 00 00       	jmp    c0016a78 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169c7:	83 ec 0c             	sub    esp,0xc
c00169ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169cc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00169d0:	56                   	push   esi
c00169d1:	6a 01                	push   0x1
c00169d3:	6a 00                	push   0x0
c00169d5:	6a 00                	push   0x0
c00169d7:	53                   	push   ebx
c00169d8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00169db:	83 c4 20             	add    esp,0x20
c00169de:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00169e6:	75 0a                	jne    c00169f2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00169e8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00169f0:	74 2c                	je     c0016a1e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00169f2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169f8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169fe:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a04:	83 ec 10             	sub    esp,0x10
c0016a07:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a0b:	89 f7                	mov    edi,esi
c0016a0d:	c1 e0 0a             	shl    eax,0xa
c0016a10:	c1 ff 1f             	sar    edi,0x1f
c0016a13:	57                   	push   edi
c0016a14:	56                   	push   esi
c0016a15:	52                   	push   edx
c0016a16:	50                   	push   eax
c0016a17:	e8 e8 ff 00 00       	call   c0026a04 <__udivdi3>
c0016a1c:	eb 5a                	jmp    c0016a78 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a1e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a25:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a2c:	83 e1 7f             	and    ecx,0x7f
c0016a2f:	83 e0 7f             	and    eax,0x7f
c0016a32:	01 c1                	add    ecx,eax
c0016a34:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a3b:	83 e0 7f             	and    eax,0x7f
c0016a3e:	01 c1                	add    ecx,eax
c0016a40:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a47:	83 e0 7f             	and    eax,0x7f
c0016a4a:	00 c1                	add    cl,al
c0016a4c:	74 41                	je     c0016a8f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a4e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a54:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a5a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a60:	83 ec 10             	sub    esp,0x10
c0016a63:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a67:	89 f7                	mov    edi,esi
c0016a69:	c1 e0 0a             	shl    eax,0xa
c0016a6c:	c1 ff 1f             	sar    edi,0x1f
c0016a6f:	57                   	push   edi
c0016a70:	56                   	push   esi
c0016a71:	52                   	push   edx
c0016a72:	50                   	push   eax
c0016a73:	e8 8c ff 00 00       	call   c0026a04 <__udivdi3>
c0016a78:	83 c4 14             	add    esp,0x14
c0016a7b:	52                   	push   edx
c0016a7c:	50                   	push   eax
c0016a7d:	6a 00                	push   0x0
c0016a7f:	6a 00                	push   0x0
c0016a81:	53                   	push   ebx
c0016a82:	e8 3f fe ff ff       	call   c00168c6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a87:	83 c4 20             	add    esp,0x20
c0016a8a:	e9 79 01 00 00       	jmp    c0016c08 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a8f:	89 f0                	mov    eax,esi
c0016a91:	31 f6                	xor    esi,esi
c0016a93:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a9a:	75 02                	jne    c0016a9e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016a9c:	89 f1                	mov    ecx,esi
c0016a9e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016aa5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016aac:	c1 e2 08             	shl    edx,0x8
c0016aaf:	c1 e7 10             	shl    edi,0x10
c0016ab2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016aba:	09 fa                	or     edx,edi
c0016abc:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016ac4:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016acb:	83 c0 10             	add    eax,0x10
c0016ace:	09 fa                	or     edx,edi
c0016ad0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016ad7:	c1 e7 18             	shl    edi,0x18
c0016ada:	09 fa                	or     edx,edi
c0016adc:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016ae3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016ae7:	c1 e7 10             	shl    edi,0x10
c0016aea:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016af1:	c1 e2 08             	shl    edx,0x8
c0016af4:	09 fa                	or     edx,edi
c0016af6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016afd:	09 fa                	or     edx,edi
c0016aff:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b06:	c1 e7 18             	shl    edi,0x18
c0016b09:	09 fa                	or     edx,edi
c0016b0b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b0f:	46                   	inc    esi
c0016b10:	83 fe 04             	cmp    esi,0x4
c0016b13:	0f 85 7a ff ff ff    	jne    c0016a93 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b1d:	83 f0 01             	xor    eax,0x1
c0016b20:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b24:	75 57                	jne    c0016b7d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b2a:	83 f0 01             	xor    eax,0x1
c0016b2d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b31:	75 4a                	jne    c0016b7d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b33:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b37:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b3f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b47:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b4d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b53:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b59:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b5d:	89 f7                	mov    edi,esi
c0016b5f:	c1 e0 0a             	shl    eax,0xa
c0016b62:	c1 ff 1f             	sar    edi,0x1f
c0016b65:	57                   	push   edi
c0016b66:	56                   	push   esi
c0016b67:	52                   	push   edx
c0016b68:	50                   	push   eax
c0016b69:	e8 96 fe 00 00       	call   c0026a04 <__udivdi3>
c0016b6e:	83 c4 10             	add    esp,0x10
c0016b71:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b75:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b79:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016b7d:	84 c9                	test   cl,cl
c0016b7f:	74 53                	je     c0016bd4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016b81:	0f b6 c9             	movzx  ecx,cl
c0016b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b8c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b90:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b9c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016ba0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016ba4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ba8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016bac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bb4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016bb8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016bbc:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016bc0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016bc4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bc8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bcc:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016bd0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016bd4:	31 ed                	xor    ebp,ebp
c0016bd6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016bda:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016bde:	89 f8                	mov    eax,edi
c0016be0:	09 f0                	or     eax,esi
c0016be2:	74 1e                	je     c0016c02 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016be4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016be8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016bec:	89 d1                	mov    ecx,edx
c0016bee:	09 c1                	or     ecx,eax
c0016bf0:	74 10                	je     c0016c02 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016bf2:	83 ec 0c             	sub    esp,0xc
c0016bf5:	57                   	push   edi
c0016bf6:	56                   	push   esi
c0016bf7:	52                   	push   edx
c0016bf8:	50                   	push   eax
c0016bf9:	53                   	push   ebx
c0016bfa:	e8 c7 fc ff ff       	call   c00168c6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016bff:	83 c4 20             	add    esp,0x20
c0016c02:	45                   	inc    ebp
c0016c03:	83 fd 04             	cmp    ebp,0x4
c0016c06:	75 ce                	jne    c0016bd6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c08:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c0e:	5b                   	pop    ebx
c0016c0f:	5e                   	pop    esi
c0016c10:	5f                   	pop    edi
c0016c11:	5d                   	pop    ebp
c0016c12:	c3                   	ret    
c0016c13:	90                   	nop

c0016c14 <Serial::Serial(char const*)>:
c0016c14:	83 ec 0c             	sub    esp,0xc
c0016c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c1b:	83 ec 08             	sub    esp,0x8
c0016c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c22:	50                   	push   eax
c0016c23:	e8 ce d8 ff ff       	call   c00144f6 <Device::Device(char const*)>
c0016c28:	83 c4 10             	add    esp,0x10
c0016c2b:	ba 04 b3 02 c0       	mov    edx,0xc002b304
c0016c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c34:	89 10                	mov    DWORD PTR [eax],edx
c0016c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c3a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c44:	90                   	nop
c0016c45:	83 c4 0c             	add    esp,0xc
c0016c48:	c3                   	ret    
c0016c49:	90                   	nop

c0016c4a <Serial::~Serial()>:
c0016c4a:	83 ec 0c             	sub    esp,0xc
c0016c4d:	ba 04 b3 02 c0       	mov    edx,0xc002b304
c0016c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c56:	89 10                	mov    DWORD PTR [eax],edx
c0016c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5c:	83 ec 0c             	sub    esp,0xc
c0016c5f:	50                   	push   eax
c0016c60:	e8 73 d5 ff ff       	call   c00141d8 <Device::~Device()>
c0016c65:	83 c4 10             	add    esp,0x10
c0016c68:	90                   	nop
c0016c69:	83 c4 0c             	add    esp,0xc
c0016c6c:	c3                   	ret    
c0016c6d:	90                   	nop

c0016c6e <Serial::~Serial()>:
c0016c6e:	83 ec 0c             	sub    esp,0xc
c0016c71:	83 ec 0c             	sub    esp,0xc
c0016c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c78:	e8 cd ff ff ff       	call   c0016c4a <Serial::~Serial()>
c0016c7d:	83 c4 10             	add    esp,0x10
c0016c80:	83 ec 08             	sub    esp,0x8
c0016c83:	68 58 01 00 00       	push   0x158
c0016c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c8c:	e8 6e c1 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0016c91:	83 c4 10             	add    esp,0x10
c0016c94:	83 c4 0c             	add    esp,0xc
c0016c97:	c3                   	ret    

c0016c98 <Timer::Timer(char const*)>:
c0016c98:	83 ec 0c             	sub    esp,0xc
c0016c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c9f:	83 ec 08             	sub    esp,0x8
c0016ca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ca6:	50                   	push   eax
c0016ca7:	e8 4a d8 ff ff       	call   c00144f6 <Device::Device(char const*)>
c0016cac:	83 c4 10             	add    esp,0x10
c0016caf:	ba 48 b3 02 c0       	mov    edx,0xc002b348
c0016cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb8:	89 10                	mov    DWORD PTR [eax],edx
c0016cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cbe:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016cc8:	90                   	nop
c0016cc9:	83 c4 0c             	add    esp,0xc
c0016ccc:	c3                   	ret    
c0016ccd:	90                   	nop

c0016cce <Timer::~Timer()>:
c0016cce:	83 ec 0c             	sub    esp,0xc
c0016cd1:	ba 48 b3 02 c0       	mov    edx,0xc002b348
c0016cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cda:	89 10                	mov    DWORD PTR [eax],edx
c0016cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce0:	83 ec 0c             	sub    esp,0xc
c0016ce3:	50                   	push   eax
c0016ce4:	e8 ef d4 ff ff       	call   c00141d8 <Device::~Device()>
c0016ce9:	83 c4 10             	add    esp,0x10
c0016cec:	90                   	nop
c0016ced:	83 c4 0c             	add    esp,0xc
c0016cf0:	c3                   	ret    
c0016cf1:	90                   	nop

c0016cf2 <Timer::~Timer()>:
c0016cf2:	83 ec 0c             	sub    esp,0xc
c0016cf5:	83 ec 0c             	sub    esp,0xc
c0016cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cfc:	e8 cd ff ff ff       	call   c0016cce <Timer::~Timer()>
c0016d01:	83 c4 10             	add    esp,0x10
c0016d04:	83 ec 08             	sub    esp,0x8
c0016d07:	68 5c 01 00 00       	push   0x15c
c0016d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d10:	e8 ea c0 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0016d15:	83 c4 10             	add    esp,0x10
c0016d18:	83 c4 0c             	add    esp,0xc
c0016d1b:	c3                   	ret    

c0016d1c <Timer::read()>:
c0016d1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d20:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d26:	c3                   	ret    

c0016d27 <timerHandler(unsigned long long)>:
c0016d27:	55                   	push   ebp
c0016d28:	57                   	push   edi
c0016d29:	56                   	push   esi
c0016d2a:	53                   	push   ebx
c0016d2b:	83 ec 0c             	sub    esp,0xc
c0016d2e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d32:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d36:	01 35 f0 ea 02 c0    	add    DWORD PTR ds:0xc002eaf0,esi
c0016d3c:	11 3d f4 ea 02 c0    	adc    DWORD PTR ds:0xc002eaf4,edi
c0016d42:	80 3d 6d e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e46d,0x0
c0016d49:	0f 84 07 01 00 00    	je     c0016e56 <timerHandler(unsigned long long)+0x12f>
c0016d4f:	e8 b9 70 00 00       	call   c001de0d <lockStuff()>
c0016d54:	83 ec 0c             	sub    esp,0xc
c0016d57:	68 bc 19 03 c0       	push   0xc00319bc
c0016d5c:	e8 1d 1d 01 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d61:	c7 04 24 bc 19 03 c0 	mov    DWORD PTR [esp],0xc00319bc
c0016d68:	89 c3                	mov    ebx,eax
c0016d6a:	e8 17 1d 01 00       	call   c0028a86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d6f:	83 c4 10             	add    esp,0x10
c0016d72:	84 c0                	test   al,al
c0016d74:	74 60                	je     c0016dd6 <timerHandler(unsigned long long)+0xaf>
c0016d76:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d7c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016d7f:	85 c0                	test   eax,eax
c0016d81:	0f 85 91 00 00 00    	jne    c0016e18 <timerHandler(unsigned long long)+0xf1>
c0016d87:	e9 be 00 00 00       	jmp    c0016e4a <timerHandler(unsigned long long)+0x123>
c0016d8c:	83 ec 0c             	sub    esp,0xc
c0016d8f:	55                   	push   ebp
c0016d90:	e8 a3 76 00 00       	call   c001e438 <unblockTask(ThreadControlBlock*)>
c0016d95:	83 c4 10             	add    esp,0x10
c0016d98:	39 eb                	cmp    ebx,ebp
c0016d9a:	75 12                	jne    c0016dae <timerHandler(unsigned long long)+0x87>
c0016d9c:	83 ec 0c             	sub    esp,0xc
c0016d9f:	68 bc 19 03 c0       	push   0xc00319bc
c0016da4:	e8 d5 1c 01 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016da9:	89 c3                	mov    ebx,eax
c0016dab:	83 c4 10             	add    esp,0x10
c0016dae:	83 ec 0c             	sub    esp,0xc
c0016db1:	68 bc 19 03 c0       	push   0xc00319bc
c0016db6:	e8 cb 1c 01 00       	call   c0028a86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dbb:	83 c4 10             	add    esp,0x10
c0016dbe:	84 c0                	test   al,al
c0016dc0:	75 b4                	jne    c0016d76 <timerHandler(unsigned long long)+0x4f>
c0016dc2:	83 ec 0c             	sub    esp,0xc
c0016dc5:	68 bc 19 03 c0       	push   0xc00319bc
c0016dca:	e8 af 1c 01 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dcf:	83 c4 10             	add    esp,0x10
c0016dd2:	39 d8                	cmp    eax,ebx
c0016dd4:	74 a0                	je     c0016d76 <timerHandler(unsigned long long)+0x4f>
c0016dd6:	83 ec 0c             	sub    esp,0xc
c0016dd9:	68 bc 19 03 c0       	push   0xc00319bc
c0016dde:	e8 9b 1c 01 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016de3:	c7 04 24 bc 19 03 c0 	mov    DWORD PTR [esp],0xc00319bc
c0016dea:	89 c5                	mov    ebp,eax
c0016dec:	e8 b1 1c 01 00       	call   c0028aa2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016df1:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016df4:	83 c4 10             	add    esp,0x10
c0016df7:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016dfa:	39 15 f0 ea 02 c0    	cmp    DWORD PTR ds:0xc002eaf0,edx
c0016e00:	a1 f4 ea 02 c0       	mov    eax,ds:0xc002eaf4
c0016e05:	19 c8                	sbb    eax,ecx
c0016e07:	73 83                	jae    c0016d8c <timerHandler(unsigned long long)+0x65>
c0016e09:	50                   	push   eax
c0016e0a:	50                   	push   eax
c0016e0b:	55                   	push   ebp
c0016e0c:	68 bc 19 03 c0       	push   0xc00319bc
c0016e11:	e8 3a 1d 01 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e16:	eb 93                	jmp    c0016dab <timerHandler(unsigned long long)+0x84>
c0016e18:	80 3d 6c e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e46c,0x0
c0016e1f:	74 29                	je     c0016e4a <timerHandler(unsigned long long)+0x123>
c0016e21:	39 c6                	cmp    esi,eax
c0016e23:	bb 00 00 00 00       	mov    ebx,0x0
c0016e28:	19 df                	sbb    edi,ebx
c0016e2a:	72 19                	jb     c0016e45 <timerHandler(unsigned long long)+0x11e>
c0016e2c:	e8 b5 6f 00 00       	call   c001dde6 <lockScheduler()>
c0016e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e36:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e39:	e8 1e 73 00 00       	call   c001e15c <schedule()>
c0016e3e:	e8 a5 6f 00 00       	call   c001dde8 <unlockScheduler()>
c0016e43:	eb 05                	jmp    c0016e4a <timerHandler(unsigned long long)+0x123>
c0016e45:	29 f0                	sub    eax,esi
c0016e47:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e4a:	83 c4 0c             	add    esp,0xc
c0016e4d:	5b                   	pop    ebx
c0016e4e:	5e                   	pop    esi
c0016e4f:	5f                   	pop    edi
c0016e50:	5d                   	pop    ebp
c0016e51:	e9 8b 73 00 00       	jmp    c001e1e1 <unlockStuff()>
c0016e56:	83 c4 0c             	add    esp,0xc
c0016e59:	5b                   	pop    ebx
c0016e5a:	5e                   	pop    esi
c0016e5b:	5f                   	pop    edi
c0016e5c:	5d                   	pop    ebp
c0016e5d:	c3                   	ret    

c0016e5e <setupTimer(int)>:
c0016e5e:	57                   	push   edi
c0016e5f:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0016e64:	56                   	push   esi
c0016e65:	53                   	push   ebx
c0016e66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e6a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e70:	83 ec 0c             	sub    esp,0xc
c0016e73:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e79:	e8 74 d7 ff ff       	call   c00145f2 <Device::getName()>
c0016e7e:	83 c4 10             	add    esp,0x10
c0016e81:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016e84:	0f 85 8d 00 00 00    	jne    c0016f17 <setupTimer(int)+0xb9>
c0016e8a:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0016e8f:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e96:	74 7f                	je     c0016f17 <setupTimer(int)+0xb9>
c0016e98:	83 ec 0c             	sub    esp,0xc
c0016e9b:	68 5c 01 00 00       	push   0x15c
c0016ea0:	e8 a6 89 ff ff       	call   c000f84b <malloc>
c0016ea5:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ea8:	89 c3                	mov    ebx,eax
c0016eaa:	e8 2b f7 00 00       	call   c00265da <PIT::PIT()>
c0016eaf:	59                   	pop    ecx
c0016eb0:	5f                   	pop    edi
c0016eb1:	53                   	push   ebx
c0016eb2:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c0016eb8:	e8 49 d4 ff ff       	call   c0014306 <Device::addChild(Device*)>
c0016ebd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ebf:	6a 00                	push   0x0
c0016ec1:	6a 00                	push   0x0
c0016ec3:	56                   	push   esi
c0016ec4:	53                   	push   ebx
c0016ec5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ec8:	83 c4 14             	add    esp,0x14
c0016ecb:	68 60 01 00 00       	push   0x160
c0016ed0:	e8 76 89 ff ff       	call   c000f84b <malloc>
c0016ed5:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ed8:	89 c7                	mov    edi,eax
c0016eda:	e8 ab f5 00 00       	call   c002648a <APICTimer::APICTimer()>
c0016edf:	6a 00                	push   0x0
c0016ee1:	6a 00                	push   0x0
c0016ee3:	56                   	push   esi
c0016ee4:	57                   	push   edi
c0016ee5:	e8 a2 f4 00 00       	call   c002638c <APICTimer::open(int, int, void*)>
c0016eea:	83 c4 20             	add    esp,0x20
c0016eed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016eef:	6a 00                	push   0x0
c0016ef1:	6a 00                	push   0x0
c0016ef3:	6a 00                	push   0x0
c0016ef5:	53                   	push   ebx
c0016ef6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ef9:	58                   	pop    eax
c0016efa:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0016eff:	5a                   	pop    edx
c0016f00:	57                   	push   edi
c0016f01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f07:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f0d:	e8 f4 d3 ff ff       	call   c0014306 <Device::addChild(Device*)>
c0016f12:	83 c4 10             	add    esp,0x10
c0016f15:	eb 33                	jmp    c0016f4a <setupTimer(int)+0xec>
c0016f17:	83 ec 0c             	sub    esp,0xc
c0016f1a:	68 5c 01 00 00       	push   0x15c
c0016f1f:	e8 27 89 ff ff       	call   c000f84b <malloc>
c0016f24:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f27:	89 c3                	mov    ebx,eax
c0016f29:	e8 ac f6 00 00       	call   c00265da <PIT::PIT()>
c0016f2e:	58                   	pop    eax
c0016f2f:	5a                   	pop    edx
c0016f30:	53                   	push   ebx
c0016f31:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c0016f37:	e8 ca d3 ff ff       	call   c0014306 <Device::addChild(Device*)>
c0016f3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f3e:	6a 00                	push   0x0
c0016f40:	6a 00                	push   0x0
c0016f42:	56                   	push   esi
c0016f43:	53                   	push   ebx
c0016f44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f47:	83 c4 20             	add    esp,0x20
c0016f4a:	89 d8                	mov    eax,ebx
c0016f4c:	5b                   	pop    ebx
c0016f4d:	5e                   	pop    esi
c0016f4e:	5f                   	pop    edi
c0016f4f:	c3                   	ret    

c0016f50 <VCache::VCache(PhysicalDisk*)>:
c0016f50:	53                   	push   ebx
c0016f51:	83 ec 18             	sub    esp,0x18
c0016f54:	ba 78 b3 02 c0       	mov    edx,0xc002b378
c0016f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f5d:	89 10                	mov    DWORD PTR [eax],edx
c0016f5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f63:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f6e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016f75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f79:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016f80:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f92:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016fa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016fac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016fb7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016fbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fca:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016fce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016fd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fda:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016fe1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016fe9:	83 ec 0c             	sub    esp,0xc
c0016fec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ff0:	e8 56 88 ff ff       	call   c000f84b <malloc>
c0016ff5:	83 c4 10             	add    esp,0x10
c0016ff8:	89 c3                	mov    ebx,eax
c0016ffa:	83 ec 0c             	sub    esp,0xc
c0016ffd:	53                   	push   ebx
c0016ffe:	e8 03 6f 00 00       	call   c001df06 <Mutex::Mutex()>
c0017003:	83 c4 10             	add    esp,0x10
c0017006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001700d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017011:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017015:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017023:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017027:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001702d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017031:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017034:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017038:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001703e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017044:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017048:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001704b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001704e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017052:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017056:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001705a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017060:	05 00 01 00 00       	add    eax,0x100
c0017065:	c1 e0 04             	shl    eax,0x4
c0017068:	83 ec 0c             	sub    esp,0xc
c001706b:	50                   	push   eax
c001706c:	e8 da 87 ff ff       	call   c000f84b <malloc>
c0017071:	83 c4 10             	add    esp,0x10
c0017074:	89 c2                	mov    edx,eax
c0017076:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001707d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017081:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017088:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001708c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017090:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017094:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001709a:	c1 e0 07             	shl    eax,0x7
c001709d:	83 ec 0c             	sub    esp,0xc
c00170a0:	50                   	push   eax
c00170a1:	e8 a5 87 ff ff       	call   c000f84b <malloc>
c00170a6:	83 c4 10             	add    esp,0x10
c00170a9:	89 c2                	mov    edx,eax
c00170ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170af:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00170b2:	90                   	nop
c00170b3:	83 c4 18             	add    esp,0x18
c00170b6:	5b                   	pop    ebx
c00170b7:	c3                   	ret    

c00170b8 <VCache::invalidateReadBuffer()>:
c00170b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170bc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00170c2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170c6:	c3                   	ret    
c00170c7:	90                   	nop

c00170c8 <VCache::writeWriteBuffer()>:
c00170c8:	53                   	push   ebx
c00170c9:	83 ec 14             	sub    esp,0x14
c00170cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00170d0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00170d5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170d8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00170db:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00170de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00170e1:	50                   	push   eax
c00170e2:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170e5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00170ec:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00170f3:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00170f7:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00170fe:	83 c4 28             	add    esp,0x28
c0017101:	5b                   	pop    ebx
c0017102:	c3                   	ret    
c0017103:	90                   	nop

c0017104 <VCache::~VCache()>:
c0017104:	83 ec 0c             	sub    esp,0xc
c0017107:	ba 78 b3 02 c0       	mov    edx,0xc002b378
c001710c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017110:	89 10                	mov    DWORD PTR [eax],edx
c0017112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017116:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017119:	84 c0                	test   al,al
c001711b:	74 0f                	je     c001712c <VCache::~VCache()+0x28>
c001711d:	83 ec 0c             	sub    esp,0xc
c0017120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017124:	e8 9f ff ff ff       	call   c00170c8 <VCache::writeWriteBuffer()>
c0017129:	83 c4 10             	add    esp,0x10
c001712c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017130:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017133:	83 ec 0c             	sub    esp,0xc
c0017136:	50                   	push   eax
c0017137:	e8 1f 87 ff ff       	call   c000f85b <free>
c001713c:	83 c4 10             	add    esp,0x10
c001713f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017143:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017146:	83 ec 0c             	sub    esp,0xc
c0017149:	50                   	push   eax
c001714a:	e8 0c 87 ff ff       	call   c000f85b <free>
c001714f:	83 c4 10             	add    esp,0x10
c0017152:	90                   	nop
c0017153:	83 c4 0c             	add    esp,0xc
c0017156:	c3                   	ret    
c0017157:	90                   	nop

c0017158 <VCache::~VCache()>:
c0017158:	83 ec 0c             	sub    esp,0xc
c001715b:	83 ec 0c             	sub    esp,0xc
c001715e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017162:	e8 9d ff ff ff       	call   c0017104 <VCache::~VCache()>
c0017167:	83 c4 10             	add    esp,0x10
c001716a:	83 ec 08             	sub    esp,0x8
c001716d:	6a 44                	push   0x44
c001716f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017173:	e8 87 bc ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0017178:	83 c4 10             	add    esp,0x10
c001717b:	83 c4 0c             	add    esp,0xc
c001717e:	c3                   	ret    
c001717f:	90                   	nop

c0017180 <VCache::write(unsigned long long, int, void*)>:
c0017180:	55                   	push   ebp
c0017181:	57                   	push   edi
c0017182:	56                   	push   esi
c0017183:	53                   	push   ebx
c0017184:	83 ec 28             	sub    esp,0x28
c0017187:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001718b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001718f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017193:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017197:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001719a:	e8 03 72 00 00       	call   c001e3a2 <Semaphore::acquire()>
c001719f:	83 c4 10             	add    esp,0x10
c00171a2:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00171a6:	74 0c                	je     c00171b4 <VCache::write(unsigned long long, int, void*)+0x34>
c00171a8:	83 ec 0c             	sub    esp,0xc
c00171ab:	53                   	push   ebx
c00171ac:	e8 07 ff ff ff       	call   c00170b8 <VCache::invalidateReadBuffer()>
c00171b1:	83 c4 10             	add    esp,0x10
c00171b4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171b8:	74 66                	je     c0017220 <VCache::write(unsigned long long, int, void*)+0xa0>
c00171ba:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171bd:	99                   	cdq    
c00171be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171c2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00171c5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00171c8:	89 c1                	mov    ecx,eax
c00171ca:	89 d0                	mov    eax,edx
c00171cc:	31 f1                	xor    ecx,esi
c00171ce:	31 f8                	xor    eax,edi
c00171d0:	89 ca                	mov    edx,ecx
c00171d2:	09 c2                	or     edx,eax
c00171d4:	75 3e                	jne    c0017214 <VCache::write(unsigned long long, int, void*)+0x94>
c00171d6:	83 fd 01             	cmp    ebp,0x1
c00171d9:	75 39                	jne    c0017214 <VCache::write(unsigned long long, int, void*)+0x94>
c00171db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171de:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171e4:	51                   	push   ecx
c00171e5:	50                   	push   eax
c00171e6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00171ee:	0f af c8             	imul   ecx,eax
c00171f1:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00171f4:	51                   	push   ecx
c00171f5:	e8 52 95 fe ff       	call   c000074c <memcpy>
c00171fa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171fd:	83 c4 10             	add    esp,0x10
c0017200:	40                   	inc    eax
c0017201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017204:	83 c0 80             	add    eax,0xffffff80
c0017207:	75 57                	jne    c0017260 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017209:	83 ec 0c             	sub    esp,0xc
c001720c:	53                   	push   ebx
c001720d:	e8 b6 fe ff ff       	call   c00170c8 <VCache::writeWriteBuffer()>
c0017212:	eb 34                	jmp    c0017248 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017214:	83 ec 0c             	sub    esp,0xc
c0017217:	53                   	push   ebx
c0017218:	e8 ab fe ff ff       	call   c00170c8 <VCache::writeWriteBuffer()>
c001721d:	83 c4 10             	add    esp,0x10
c0017220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017223:	83 fd 7f             	cmp    ebp,0x7f
c0017226:	7f 25                	jg     c001724d <VCache::write(unsigned long long, int, void*)+0xcd>
c0017228:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001722b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001722e:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017231:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017235:	52                   	push   edx
c0017236:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001723c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017240:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017243:	e8 04 95 fe ff       	call   c000074c <memcpy>
c0017248:	83 c4 10             	add    esp,0x10
c001724b:	eb 13                	jmp    c0017260 <VCache::write(unsigned long long, int, void*)+0xe0>
c001724d:	83 ec 0c             	sub    esp,0xc
c0017250:	8b 10                	mov    edx,DWORD PTR [eax]
c0017252:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017256:	55                   	push   ebp
c0017257:	57                   	push   edi
c0017258:	56                   	push   esi
c0017259:	50                   	push   eax
c001725a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001725d:	83 c4 20             	add    esp,0x20
c0017260:	83 ec 0c             	sub    esp,0xc
c0017263:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017266:	e8 e5 76 00 00       	call   c001e950 <Semaphore::release()>
c001726b:	83 c4 2c             	add    esp,0x2c
c001726e:	31 c0                	xor    eax,eax
c0017270:	5b                   	pop    ebx
c0017271:	5e                   	pop    esi
c0017272:	5f                   	pop    edi
c0017273:	5d                   	pop    ebp
c0017274:	c3                   	ret    
c0017275:	90                   	nop

c0017276 <VCache::read(unsigned long long, int, void*)>:
c0017276:	55                   	push   ebp
c0017277:	57                   	push   edi
c0017278:	56                   	push   esi
c0017279:	53                   	push   ebx
c001727a:	83 ec 28             	sub    esp,0x28
c001727d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017281:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017285:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017289:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001728d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017291:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017295:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017299:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001729c:	e8 01 71 00 00       	call   c001e3a2 <Semaphore::acquire()>
c00172a1:	83 c4 10             	add    esp,0x10
c00172a4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172a8:	74 0c                	je     c00172b6 <VCache::read(unsigned long long, int, void*)+0x40>
c00172aa:	83 ec 0c             	sub    esp,0xc
c00172ad:	53                   	push   ebx
c00172ae:	e8 15 fe ff ff       	call   c00170c8 <VCache::writeWriteBuffer()>
c00172b3:	83 c4 10             	add    esp,0x10
c00172b6:	83 fe 01             	cmp    esi,0x1
c00172b9:	0f 85 80 00 00 00    	jne    c001733f <VCache::read(unsigned long long, int, void*)+0xc9>
c00172bf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172c2:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00172c9:	75 74                	jne    c001733f <VCache::read(unsigned long long, int, void*)+0xc9>
c00172cb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172ce:	89 d1                	mov    ecx,edx
c00172d0:	f7 d9                	neg    ecx
c00172d2:	89 cf                	mov    edi,ecx
c00172d4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00172d8:	c1 ff 1f             	sar    edi,0x1f
c00172db:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00172de:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00172e2:	89 ce                	mov    esi,ecx
c00172e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172e8:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00172ec:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172f0:	89 cf                	mov    edi,ecx
c00172f2:	74 0a                	je     c00172fe <VCache::read(unsigned long long, int, void*)+0x88>
c00172f4:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00172f7:	75 05                	jne    c00172fe <VCache::read(unsigned long long, int, void*)+0x88>
c00172f9:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00172fc:	74 1c                	je     c001731a <VCache::read(unsigned long long, int, void*)+0xa4>
c00172fe:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017302:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017305:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017308:	83 ec 0c             	sub    esp,0xc
c001730b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001730d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017310:	52                   	push   edx
c0017311:	57                   	push   edi
c0017312:	56                   	push   esi
c0017313:	50                   	push   eax
c0017314:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017317:	83 c4 20             	add    esp,0x20
c001731a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001731d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017323:	50                   	push   eax
c0017324:	52                   	push   edx
c0017325:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017328:	48                   	dec    eax
c0017329:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c001732d:	0f af c2             	imul   eax,edx
c0017330:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017333:	50                   	push   eax
c0017334:	55                   	push   ebp
c0017335:	e8 12 94 fe ff       	call   c000074c <memcpy>
c001733a:	83 c4 10             	add    esp,0x10
c001733d:	eb 21                	jmp    c0017360 <VCache::read(unsigned long long, int, void*)+0xea>
c001733f:	83 ec 0c             	sub    esp,0xc
c0017342:	53                   	push   ebx
c0017343:	e8 70 fd ff ff       	call   c00170b8 <VCache::invalidateReadBuffer()>
c0017348:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001734b:	8b 10                	mov    edx,DWORD PTR [eax]
c001734d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017350:	56                   	push   esi
c0017351:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017355:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017359:	50                   	push   eax
c001735a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001735d:	83 c4 20             	add    esp,0x20
c0017360:	83 ec 0c             	sub    esp,0xc
c0017363:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017366:	e8 e5 75 00 00       	call   c001e950 <Semaphore::release()>
c001736b:	83 c4 2c             	add    esp,0x2c
c001736e:	31 c0                	xor    eax,eax
c0017370:	5b                   	pop    ebx
c0017371:	5e                   	pop    esi
c0017372:	5f                   	pop    edi
c0017373:	5d                   	pop    ebp
c0017374:	c3                   	ret    
c0017375:	90                   	nop

c0017376 <Video::putrect(int, int, int, int, unsigned int)>:
c0017376:	55                   	push   ebp
c0017377:	57                   	push   edi
c0017378:	56                   	push   esi
c0017379:	53                   	push   ebx
c001737a:	83 ec 1c             	sub    esp,0x1c
c001737d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017381:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017385:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017389:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001738d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017391:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017395:	01 df                	add    edi,ebx
c0017397:	39 fb                	cmp    ebx,edi
c0017399:	7d 1f                	jge    c00173ba <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001739b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001739f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00173a3:	7d 12                	jge    c00173b7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00173a5:	8b 16                	mov    edx,DWORD PTR [esi]
c00173a7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00173ab:	53                   	push   ebx
c00173ac:	55                   	push   ebp
c00173ad:	45                   	inc    ebp
c00173ae:	56                   	push   esi
c00173af:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00173b2:	83 c4 10             	add    esp,0x10
c00173b5:	eb e8                	jmp    c001739f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00173b7:	43                   	inc    ebx
c00173b8:	eb dd                	jmp    c0017397 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00173ba:	83 c4 1c             	add    esp,0x1c
c00173bd:	5b                   	pop    ebx
c00173be:	5e                   	pop    esi
c00173bf:	5f                   	pop    edi
c00173c0:	5d                   	pop    ebp
c00173c1:	c3                   	ret    

c00173c2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00173c2:	55                   	push   ebp
c00173c3:	57                   	push   edi
c00173c4:	31 ff                	xor    edi,edi
c00173c6:	56                   	push   esi
c00173c7:	53                   	push   ebx
c00173c8:	83 ec 1c             	sub    esp,0x1c
c00173cb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00173cf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00173d3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00173da:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00173df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00173e3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00173e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173eb:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00173ee:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173f2:	01 f9                	add    ecx,edi
c00173f4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00173f8:	7d 2f                	jge    c0017429 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00173fa:	31 f6                	xor    esi,esi
c00173fc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017400:	01 f2                	add    edx,esi
c0017402:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017406:	7d 1a                	jge    c0017422 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017408:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001740b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001740e:	46                   	inc    esi
c001740f:	51                   	push   ecx
c0017410:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017414:	52                   	push   edx
c0017415:	55                   	push   ebp
c0017416:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017419:	83 c4 10             	add    esp,0x10
c001741c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017420:	eb da                	jmp    c00173fc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017422:	47                   	inc    edi
c0017423:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017427:	eb c5                	jmp    c00173ee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017429:	83 c4 1c             	add    esp,0x1c
c001742c:	5b                   	pop    ebx
c001742d:	5e                   	pop    esi
c001742e:	5f                   	pop    edi
c001742f:	5d                   	pop    ebp
c0017430:	c3                   	ret    
c0017431:	90                   	nop

c0017432 <Video::blit(unsigned int*, int, int, int, int)>:
c0017432:	55                   	push   ebp
c0017433:	57                   	push   edi
c0017434:	56                   	push   esi
c0017435:	53                   	push   ebx
c0017436:	83 ec 1c             	sub    esp,0x1c
c0017439:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001743d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017441:	85 c0                	test   eax,eax
c0017443:	79 02                	jns    c0017447 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017445:	31 c0                	xor    eax,eax
c0017447:	c1 e0 02             	shl    eax,0x2
c001744a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001744e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017452:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017456:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001745a:	39 d8                	cmp    eax,ebx
c001745c:	7e 49                	jle    c00174a7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001745e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017464:	7c 41                	jl     c00174a7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017466:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001746a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001746e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017472:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017476:	39 f9                	cmp    ecx,edi
c0017478:	7e 22                	jle    c001749c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001747a:	83 c5 04             	add    ebp,0x4
c001747d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017483:	7c 14                	jl     c0017499 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017485:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017487:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001748a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001748e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017492:	56                   	push   esi
c0017493:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017496:	83 c4 10             	add    esp,0x10
c0017499:	47                   	inc    edi
c001749a:	eb d2                	jmp    c001746e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001749c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174a0:	43                   	inc    ebx
c00174a1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00174a5:	eb ab                	jmp    c0017452 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00174a7:	83 c4 1c             	add    esp,0x1c
c00174aa:	5b                   	pop    ebx
c00174ab:	5e                   	pop    esi
c00174ac:	5f                   	pop    edi
c00174ad:	5d                   	pop    ebp
c00174ae:	c3                   	ret    
c00174af:	90                   	nop

c00174b0 <Video::clearScreen(unsigned int)>:
c00174b0:	57                   	push   edi
c00174b1:	56                   	push   esi
c00174b2:	53                   	push   ebx
c00174b3:	31 db                	xor    ebx,ebx
c00174b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174b9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174bf:	7e 1f                	jle    c00174e0 <Video::clearScreen(unsigned int)+0x30>
c00174c1:	31 ff                	xor    edi,edi
c00174c3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174c9:	7e 12                	jle    c00174dd <Video::clearScreen(unsigned int)+0x2d>
c00174cb:	8b 06                	mov    eax,DWORD PTR [esi]
c00174cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174d1:	53                   	push   ebx
c00174d2:	57                   	push   edi
c00174d3:	47                   	inc    edi
c00174d4:	56                   	push   esi
c00174d5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174d8:	83 c4 10             	add    esp,0x10
c00174db:	eb e6                	jmp    c00174c3 <Video::clearScreen(unsigned int)+0x13>
c00174dd:	43                   	inc    ebx
c00174de:	eb d9                	jmp    c00174b9 <Video::clearScreen(unsigned int)+0x9>
c00174e0:	5b                   	pop    ebx
c00174e1:	5e                   	pop    esi
c00174e2:	5f                   	pop    edi
c00174e3:	c3                   	ret    

c00174e4 <Video::putpixel(int, int, unsigned int)>:
c00174e4:	c7 44 24 04 80 b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b380
c00174ec:	e9 1a 31 00 00       	jmp    c001a60b <Krnl::panic(char const*)>
c00174f1:	90                   	nop

c00174f2 <Video::Video(char const*)>:
c00174f2:	83 ec 0c             	sub    esp,0xc
c00174f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174f9:	83 ec 08             	sub    esp,0x8
c00174fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017500:	50                   	push   eax
c0017501:	e8 f0 cf ff ff       	call   c00144f6 <Device::Device(char const*)>
c0017506:	83 c4 10             	add    esp,0x10
c0017509:	ba 04 b4 02 c0       	mov    edx,0xc002b404
c001750e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017512:	89 10                	mov    DWORD PTR [eax],edx
c0017514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017518:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017522:	90                   	nop
c0017523:	83 c4 0c             	add    esp,0xc
c0017526:	c3                   	ret    
c0017527:	90                   	nop

c0017528 <Video::~Video()>:
c0017528:	83 ec 0c             	sub    esp,0xc
c001752b:	ba 04 b4 02 c0       	mov    edx,0xc002b404
c0017530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017534:	89 10                	mov    DWORD PTR [eax],edx
c0017536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001753a:	83 ec 0c             	sub    esp,0xc
c001753d:	50                   	push   eax
c001753e:	e8 95 cc ff ff       	call   c00141d8 <Device::~Device()>
c0017543:	83 c4 10             	add    esp,0x10
c0017546:	90                   	nop
c0017547:	83 c4 0c             	add    esp,0xc
c001754a:	c3                   	ret    
c001754b:	90                   	nop

c001754c <Video::~Video()>:
c001754c:	83 ec 0c             	sub    esp,0xc
c001754f:	83 ec 0c             	sub    esp,0xc
c0017552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017556:	e8 cd ff ff ff       	call   c0017528 <Video::~Video()>
c001755b:	83 c4 10             	add    esp,0x10
c001755e:	83 ec 08             	sub    esp,0x8
c0017561:	68 64 01 00 00       	push   0x164
c0017566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001756a:	e8 90 b8 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c001756f:	83 c4 10             	add    esp,0x10
c0017572:	83 c4 0c             	add    esp,0xc
c0017575:	c3                   	ret    

c0017576 <Video::isMonochrome()>:
c0017576:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001757a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017580:	c3                   	ret    
c0017581:	90                   	nop

c0017582 <Video::getWidth()>:
c0017582:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017586:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001758c:	c3                   	ret    
c001758d:	90                   	nop

c001758e <Video::getHeight()>:
c001758e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017592:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017598:	c3                   	ret    
c0017599:	90                   	nop

c001759a <Video::drawCursor(int, int, unsigned char*, int)>:
c001759a:	55                   	push   ebp
c001759b:	57                   	push   edi
c001759c:	56                   	push   esi
c001759d:	53                   	push   ebx
c001759e:	83 ec 2c             	sub    esp,0x2c
c00175a1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175a5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00175a9:	83 f8 01             	cmp    eax,0x1
c00175ac:	19 c9                	sbb    ecx,ecx
c00175ae:	31 db                	xor    ebx,ebx
c00175b0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00175b4:	89 cd                	mov    ebp,ecx
c00175b6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00175be:	f7 d5                	not    ebp
c00175c0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00175c6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175ca:	01 d8                	add    eax,ebx
c00175cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175d0:	56                   	push   esi
c00175d1:	e8 b8 ff ff ff       	call   c001758e <Video::getHeight()>
c00175d6:	59                   	pop    ecx
c00175d7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00175db:	7e 70                	jle    c001764d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00175dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175e1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00175e5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00175e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175ec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00175f0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00175f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175fb:	89 f8                	mov    eax,edi
c00175fd:	83 c0 20             	add    eax,0x20
c0017600:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017604:	56                   	push   esi
c0017605:	e8 78 ff ff ff       	call   c0017582 <Video::getWidth()>
c001760a:	5a                   	pop    edx
c001760b:	39 c7                	cmp    edi,eax
c001760d:	7d 34                	jge    c0017643 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001760f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017614:	74 05                	je     c001761b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017616:	8b 06                	mov    eax,DWORD PTR [esi]
c0017618:	55                   	push   ebp
c0017619:	eb 0d                	jmp    c0017628 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001761b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017620:	74 12                	je     c0017634 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017622:	8b 06                	mov    eax,DWORD PTR [esi]
c0017624:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017628:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001762c:	57                   	push   edi
c001762d:	56                   	push   esi
c001762e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017631:	83 c4 10             	add    esp,0x10
c0017634:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017638:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001763c:	47                   	inc    edi
c001763d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017641:	75 c1                	jne    c0017604 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017643:	43                   	inc    ebx
c0017644:	83 fb 20             	cmp    ebx,0x20
c0017647:	0f 85 79 ff ff ff    	jne    c00175c6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001764d:	83 c4 2c             	add    esp,0x2c
c0017650:	5b                   	pop    ebx
c0017651:	5e                   	pop    esi
c0017652:	5f                   	pop    edi
c0017653:	5d                   	pop    ebp
c0017654:	c3                   	ret    
c0017655:	90                   	nop

c0017656 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017656:	55                   	push   ebp
c0017657:	57                   	push   edi
c0017658:	56                   	push   esi
c0017659:	53                   	push   ebx
c001765a:	83 ec 28             	sub    esp,0x28
c001765d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017661:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017665:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017669:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001766d:	c1 e7 08             	shl    edi,0x8
c0017670:	01 c7                	add    edi,eax
c0017672:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017676:	c1 e0 08             	shl    eax,0x8
c0017679:	01 d0                	add    eax,edx
c001767b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001767f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017683:	0f af c7             	imul   eax,edi
c0017686:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001768d:	50                   	push   eax
c001768e:	e8 b8 81 ff ff       	call   c000f84b <malloc>
c0017693:	83 c4 10             	add    esp,0x10
c0017696:	89 c5                	mov    ebp,eax
c0017698:	85 c0                	test   eax,eax
c001769a:	75 15                	jne    c00176b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001769c:	83 ec 0c             	sub    esp,0xc
c001769f:	68 a1 b3 02 c0       	push   0xc002b3a1
c00176a4:	e8 36 b8 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00176a9:	83 c4 10             	add    esp,0x10
c00176ac:	e9 1c 01 00 00       	jmp    c00177cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00176b1:	be 12 00 00 00       	mov    esi,0x12
c00176b6:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176ba:	74 11                	je     c00176cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00176bc:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00176c0:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00176c4:	c1 fe 03             	sar    esi,0x3
c00176c7:	0f af f0             	imul   esi,eax
c00176ca:	83 c6 12             	add    esi,0x12
c00176cd:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00176d1:	74 04                	je     c00176d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00176d3:	85 ff                	test   edi,edi
c00176d5:	75 12                	jne    c00176e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00176d7:	83 ec 0c             	sub    esp,0xc
c00176da:	68 b8 b3 02 c0       	push   0xc002b3b8
c00176df:	e8 fb b7 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00176e4:	e9 ce 00 00 00       	jmp    c00177b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00176e9:	52                   	push   edx
c00176ea:	52                   	push   edx
c00176eb:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00176ef:	50                   	push   eax
c00176f0:	68 cd b3 02 c0       	push   0xc002b3cd
c00176f5:	e8 e5 b7 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00176fa:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00176fe:	83 c4 10             	add    esp,0x10
c0017701:	80 fa 02             	cmp    dl,0x2
c0017704:	0f 85 98 00 00 00    	jne    c00177a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001770a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001770f:	75 10                	jne    c0017721 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017711:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017715:	75 0a                	jne    c0017721 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017717:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001771a:	83 e8 18             	sub    eax,0x18
c001771d:	a8 f7                	test   al,0xf7
c001771f:	74 0a                	je     c001772b <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017721:	83 ec 0c             	sub    esp,0xc
c0017724:	68 da b3 02 c0       	push   0xc002b3da
c0017729:	eb 7f                	jmp    c00177aa <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001772b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017733:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001773b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001773f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017747:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001774b:	75 0c                	jne    c0017759 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001774d:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017752:	c1 e0 18             	shl    eax,0x18
c0017755:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017759:	41                   	inc    ecx
c001775a:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001775f:	c1 e2 10             	shl    edx,0x10
c0017762:	89 d0                	mov    eax,edx
c0017764:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017769:	c1 e2 08             	shl    edx,0x8
c001776c:	09 c2                	or     edx,eax
c001776e:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017772:	09 c2                	or     edx,eax
c0017774:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017778:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001777c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017780:	c1 f8 03             	sar    eax,0x3
c0017783:	01 c6                	add    esi,eax
c0017785:	89 c8                	mov    eax,ecx
c0017787:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001778b:	39 c7                	cmp    edi,eax
c001778d:	7f b0                	jg     c001773f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001778f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017793:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017797:	39 14 24             	cmp    DWORD PTR [esp],edx
c001779a:	7e 22                	jle    c00177be <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001779c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00177a0:	eb 99                	jmp    c001773b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00177a2:	50                   	push   eax
c00177a3:	50                   	push   eax
c00177a4:	52                   	push   edx
c00177a5:	68 e8 b3 02 c0       	push   0xc002b3e8
c00177aa:	e8 30 b7 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00177af:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00177b2:	e8 a4 80 ff ff       	call   c000f85b <free>
c00177b7:	83 c4 10             	add    esp,0x10
c00177ba:	31 ed                	xor    ebp,ebp
c00177bc:	eb 0f                	jmp    c00177cd <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177c2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00177c5:	89 38                	mov    DWORD PTR [eax],edi
c00177c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177cb:	89 08                	mov    DWORD PTR [eax],ecx
c00177cd:	83 c4 1c             	add    esp,0x1c
c00177d0:	89 e8                	mov    eax,ebp
c00177d2:	5b                   	pop    ebx
c00177d3:	5e                   	pop    esi
c00177d4:	5f                   	pop    edi
c00177d5:	5d                   	pop    ebp
c00177d6:	c3                   	ret    
c00177d7:	90                   	nop

c00177d8 <Video::putTGA(int, int, unsigned char*, int)>:
c00177d8:	55                   	push   ebp
c00177d9:	57                   	push   edi
c00177da:	56                   	push   esi
c00177db:	53                   	push   ebx
c00177dc:	83 ec 28             	sub    esp,0x28
c00177df:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00177e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177e7:	50                   	push   eax
c00177e8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177ec:	50                   	push   eax
c00177ed:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177f1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00177f5:	56                   	push   esi
c00177f6:	e8 5b fe ff ff       	call   c0017656 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00177fb:	83 c4 20             	add    esp,0x20
c00177fe:	85 c0                	test   eax,eax
c0017800:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017804:	74 35                	je     c001783b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017806:	89 c7                	mov    edi,eax
c0017808:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001780c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017810:	39 d8                	cmp    eax,ebx
c0017812:	7e 27                	jle    c001783b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017814:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017818:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001781c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017820:	39 e8                	cmp    eax,ebp
c0017822:	7e 14                	jle    c0017838 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017824:	8b 06                	mov    eax,DWORD PTR [esi]
c0017826:	83 c7 04             	add    edi,0x4
c0017829:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001782c:	53                   	push   ebx
c001782d:	55                   	push   ebp
c001782e:	45                   	inc    ebp
c001782f:	56                   	push   esi
c0017830:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017833:	83 c4 10             	add    esp,0x10
c0017836:	eb e0                	jmp    c0017818 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017838:	43                   	inc    ebx
c0017839:	eb cd                	jmp    c0017808 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001783b:	83 c4 1c             	add    esp,0x1c
c001783e:	5b                   	pop    ebx
c001783f:	5e                   	pop    esi
c0017840:	5f                   	pop    edi
c0017841:	5d                   	pop    ebp
c0017842:	c3                   	ret    
c0017843:	90                   	nop

c0017844 <ACPI::close(int, int, void*)>:
c0017844:	83 ec 1c             	sub    esp,0x1c
c0017847:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001784f:	74 0a                	je     c001785b <ACPI::close(int, int, void*)+0x17>
c0017851:	b8 00 00 00 00       	mov    eax,0x0
c0017856:	e9 9a 00 00 00       	jmp    c00178f5 <ACPI::close(int, int, void*)+0xb1>
c001785b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017860:	75 37                	jne    c0017899 <ACPI::close(int, int, void*)+0x55>
c0017862:	83 ec 0c             	sub    esp,0xc
c0017865:	68 44 b4 02 c0       	push   0xc002b444
c001786a:	e8 70 b6 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001786f:	83 c4 10             	add    esp,0x10
c0017872:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c0017877:	85 c0                	test   eax,eax
c0017879:	74 07                	je     c0017882 <ACPI::close(int, int, void*)+0x3e>
c001787b:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c0017880:	ff d0                	call   eax
c0017882:	83 ec 0c             	sub    esp,0xc
c0017885:	68 74 b5 02 c0       	push   0xc002b574
c001788a:	e8 7c 2d 00 00       	call   c001a60b <Krnl::panic(char const*)>
c001788f:	83 c4 10             	add    esp,0x10
c0017892:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017897:	eb 5c                	jmp    c00178f5 <ACPI::close(int, int, void*)+0xb1>
c0017899:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001789e:	75 50                	jne    c00178f0 <ACPI::close(int, int, void*)+0xac>
c00178a0:	a1 24 0b 03 c0       	mov    eax,ds:0xc0030b24
c00178a5:	85 c0                	test   eax,eax
c00178a7:	74 07                	je     c00178b0 <ACPI::close(int, int, void*)+0x6c>
c00178a9:	a1 24 0b 03 c0       	mov    eax,ds:0xc0030b24
c00178ae:	ff d0                	call   eax
c00178b0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00178b5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178ba:	83 e0 02             	and    eax,0x2
c00178bd:	74 1c                	je     c00178db <ACPI::close(int, int, void*)+0x97>
c00178bf:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00178c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178ca:	89 c2                	mov    edx,eax
c00178cc:	ec                   	in     al,dx
c00178cd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00178d1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00178d5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178d9:	eb da                	jmp    c00178b5 <ACPI::close(int, int, void*)+0x71>
c00178db:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00178e2:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00178e7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00178eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00178ef:	ee                   	out    dx,al
c00178f0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178f5:	83 c4 1c             	add    esp,0x1c
c00178f8:	c3                   	ret    

c00178f9 <findRSDP()>:
c00178f9:	83 ec 1c             	sub    esp,0x1c
c00178fc:	83 ec 0c             	sub    esp,0xc
c00178ff:	68 51 b4 02 c0       	push   0xc002b451
c0017904:	e8 d6 b5 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0017909:	83 c4 10             	add    esp,0x10
c001790c:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017911:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017917:	83 e0 04             	and    eax,0x4
c001791a:	84 c0                	test   al,al
c001791c:	75 07                	jne    c0017925 <findRSDP()+0x2c>
c001791e:	b8 00 00 00 00       	mov    eax,0x0
c0017923:	eb 6a                	jmp    c001798f <findRSDP()+0x96>
c0017925:	a1 b4 e4 02 c0       	mov    eax,ds:0xc002e4b4
c001792a:	3d ff 07 00 00       	cmp    eax,0x7ff
c001792f:	7f 1b                	jg     c001794c <findRSDP()+0x53>
c0017931:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017936:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001793c:	83 e2 fb             	and    edx,0xfffffffb
c001793f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017945:	b8 00 00 00 00       	mov    eax,0x0
c001794a:	eb 43                	jmp    c001798f <findRSDP()+0x96>
c001794c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017954:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001795c:	77 2c                	ja     c001798a <findRSDP()+0x91>
c001795e:	83 ec 04             	sub    esp,0x4
c0017961:	6a 08                	push   0x8
c0017963:	68 5f b4 02 c0       	push   0xc002b45f
c0017968:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001796c:	e8 d7 8c fe ff       	call   c0000648 <memcmp>
c0017971:	83 c4 10             	add    esp,0x10
c0017974:	85 c0                	test   eax,eax
c0017976:	0f 94 c0             	sete   al
c0017979:	84 c0                	test   al,al
c001797b:	74 06                	je     c0017983 <findRSDP()+0x8a>
c001797d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017981:	eb 0c                	jmp    c001798f <findRSDP()+0x96>
c0017983:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017988:	eb ca                	jmp    c0017954 <findRSDP()+0x5b>
c001798a:	b8 00 00 00 00       	mov    eax,0x0
c001798f:	83 c4 1c             	add    esp,0x1c
c0017992:	c3                   	ret    

c0017993 <loadACPITables(unsigned char*)>:
c0017993:	56                   	push   esi
c0017994:	53                   	push   ebx
c0017995:	83 ec 44             	sub    esp,0x44
c0017998:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001799d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179a3:	83 e0 04             	and    eax,0x4
c00179a6:	84 c0                	test   al,al
c00179a8:	0f 84 05 02 00 00    	je     c0017bb3 <loadACPITables(unsigned char*)+0x220>
c00179ae:	a0 40 0d 03 c0       	mov    al,ds:0xc0030d40
c00179b3:	84 c0                	test   al,al
c00179b5:	74 75                	je     c0017a2c <loadACPITables(unsigned char*)+0x99>
c00179b7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179c6:	83 e8 24             	sub    eax,0x24
c00179c9:	c1 e8 03             	shr    eax,0x3
c00179cc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179d0:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00179d8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179dc:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00179e0:	0f 8d b2 00 00 00    	jge    c0017a98 <loadACPITables(unsigned char*)+0x105>
c00179e6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179ea:	83 c0 24             	add    eax,0x24
c00179ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179f5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179f9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179fd:	c1 e0 03             	shl    eax,0x3
c0017a00:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a08:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a0d:	89 c1                	mov    ecx,eax
c0017a0f:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c0017a14:	8d 50 01             	lea    edx,[eax+0x1]
c0017a17:	89 15 2c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b2c,edx
c0017a1d:	89 ca                	mov    edx,ecx
c0017a1f:	89 14 c5 44 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf4bc],edx
c0017a26:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a2a:	eb ac                	jmp    c00179d8 <loadACPITables(unsigned char*)+0x45>
c0017a2c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a3b:	83 e8 24             	sub    eax,0x24
c0017a3e:	c1 e8 02             	shr    eax,0x2
c0017a41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a45:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a4d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a51:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a55:	7d 41                	jge    c0017a98 <loadACPITables(unsigned char*)+0x105>
c0017a57:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a5b:	83 c0 24             	add    eax,0x24
c0017a5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a6e:	c1 e0 02             	shl    eax,0x2
c0017a71:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a79:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a7b:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c0017a80:	8d 50 01             	lea    edx,[eax+0x1]
c0017a83:	89 15 2c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b2c,edx
c0017a89:	89 ca                	mov    edx,ecx
c0017a8b:	89 14 c5 44 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf4bc],edx
c0017a92:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a96:	eb b5                	jmp    c0017a4d <loadACPITables(unsigned char*)+0xba>
c0017a98:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017aa0:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c0017aa5:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017aa9:	0f 8d 05 01 00 00    	jge    c0017bb4 <loadACPITables(unsigned char*)+0x221>
c0017aaf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ab3:	8b 04 c5 44 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf4bc]
c0017aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ac2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aca:	25 ff 0f 00 00       	and    eax,0xfff
c0017acf:	89 c6                	mov    esi,eax
c0017ad1:	e8 10 a3 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017ad6:	89 c3                	mov    ebx,eax
c0017ad8:	83 ec 0c             	sub    esp,0xc
c0017adb:	6a 01                	push   0x1
c0017add:	e8 69 a0 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0017ae2:	83 c4 10             	add    esp,0x10
c0017ae5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ae9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017aef:	83 ec 0c             	sub    esp,0xc
c0017af2:	6a 01                	push   0x1
c0017af4:	6a 01                	push   0x1
c0017af6:	50                   	push   eax
c0017af7:	52                   	push   edx
c0017af8:	53                   	push   ebx
c0017af9:	e8 2e ab ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017afe:	83 c4 20             	add    esp,0x20
c0017b01:	09 f0                	or     eax,esi
c0017b03:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b07:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b0b:	c1 e0 03             	shl    eax,0x3
c0017b0e:	05 40 0b 03 c0       	add    eax,0xc0030b40
c0017b13:	83 ec 04             	sub    esp,0x4
c0017b16:	6a 04                	push   0x4
c0017b18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b1c:	50                   	push   eax
c0017b1d:	e8 2a 8c fe ff       	call   c000074c <memcpy>
c0017b22:	83 c4 10             	add    esp,0x10
c0017b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b29:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b34:	05 00 10 00 00       	add    eax,0x1000
c0017b39:	c1 e8 0c             	shr    eax,0xc
c0017b3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b44:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b4b:	25 ff 0f 00 00       	and    eax,0xfff
c0017b50:	89 c6                	mov    esi,eax
c0017b52:	e8 8f a2 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017b57:	89 c3                	mov    ebx,eax
c0017b59:	83 ec 0c             	sub    esp,0xc
c0017b5c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b60:	e8 e6 9f ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0017b65:	83 c4 10             	add    esp,0x10
c0017b68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b6c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b72:	83 ec 0c             	sub    esp,0xc
c0017b75:	6a 01                	push   0x1
c0017b77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b7b:	50                   	push   eax
c0017b7c:	52                   	push   edx
c0017b7d:	53                   	push   ebx
c0017b7e:	e8 a9 aa ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b83:	83 c4 20             	add    esp,0x20
c0017b86:	09 f0                	or     eax,esi
c0017b88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b8f:	83 ec 0c             	sub    esp,0xc
c0017b92:	50                   	push   eax
c0017b93:	e8 39 a4 ff ff       	call   c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)>
c0017b98:	83 c4 10             	add    esp,0x10
c0017b9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017ba3:	89 14 c5 44 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf4bc],edx
c0017baa:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017bae:	e9 ed fe ff ff       	jmp    c0017aa0 <loadACPITables(unsigned char*)+0x10d>
c0017bb3:	90                   	nop
c0017bb4:	83 c4 44             	add    esp,0x44
c0017bb7:	5b                   	pop    ebx
c0017bb8:	5e                   	pop    esi
c0017bb9:	c3                   	ret    

c0017bba <findRSDT(unsigned char*)>:
c0017bba:	56                   	push   esi
c0017bbb:	53                   	push   ebx
c0017bbc:	83 ec 44             	sub    esp,0x44
c0017bbf:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017bc4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bca:	83 e0 04             	and    eax,0x4
c0017bcd:	84 c0                	test   al,al
c0017bcf:	75 0a                	jne    c0017bdb <findRSDT(unsigned char*)+0x21>
c0017bd1:	b8 00 00 00 00       	mov    eax,0x0
c0017bd6:	e9 f7 00 00 00       	jmp    c0017cd2 <findRSDT(unsigned char*)+0x118>
c0017bdb:	83 ec 04             	sub    esp,0x4
c0017bde:	6a 24                	push   0x24
c0017be0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017be4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017be8:	50                   	push   eax
c0017be9:	e8 5e 8b fe ff       	call   c000074c <memcpy>
c0017bee:	83 c4 10             	add    esp,0x10
c0017bf1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017bf5:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017bf9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c05:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c09:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c11:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c15:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c19:	25 ff 0f 00 00       	and    eax,0xfff
c0017c1e:	89 c6                	mov    esi,eax
c0017c20:	e8 c1 a1 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017c25:	89 c3                	mov    ebx,eax
c0017c27:	83 ec 0c             	sub    esp,0xc
c0017c2a:	6a 02                	push   0x2
c0017c2c:	e8 1a 9f ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0017c31:	83 c4 10             	add    esp,0x10
c0017c34:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c38:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c3e:	83 ec 0c             	sub    esp,0xc
c0017c41:	6a 01                	push   0x1
c0017c43:	6a 02                	push   0x2
c0017c45:	50                   	push   eax
c0017c46:	52                   	push   edx
c0017c47:	53                   	push   ebx
c0017c48:	e8 df a9 ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c4d:	83 c4 20             	add    esp,0x20
c0017c50:	09 f0                	or     eax,esi
c0017c52:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c5a:	25 ff 0f 00 00       	and    eax,0xfff
c0017c5f:	89 c6                	mov    esi,eax
c0017c61:	e8 80 a1 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017c66:	89 c3                	mov    ebx,eax
c0017c68:	83 ec 0c             	sub    esp,0xc
c0017c6b:	6a 02                	push   0x2
c0017c6d:	e8 d9 9e ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0017c72:	83 c4 10             	add    esp,0x10
c0017c75:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c79:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c7f:	83 ec 0c             	sub    esp,0xc
c0017c82:	6a 01                	push   0x1
c0017c84:	6a 02                	push   0x2
c0017c86:	50                   	push   eax
c0017c87:	52                   	push   edx
c0017c88:	53                   	push   ebx
c0017c89:	e8 9e a9 ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c8e:	83 c4 20             	add    esp,0x20
c0017c91:	09 f0                	or     eax,esi
c0017c93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c97:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c9c:	75 11                	jne    c0017caf <findRSDT(unsigned char*)+0xf5>
c0017c9e:	c6 05 40 0d 03 c0 00 	mov    BYTE PTR ds:0xc0030d40,0x0
c0017ca5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ca9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cad:	eb 1f                	jmp    c0017cce <findRSDT(unsigned char*)+0x114>
c0017caf:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017cb4:	75 11                	jne    c0017cc7 <findRSDT(unsigned char*)+0x10d>
c0017cb6:	c6 05 40 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030d40,0x1
c0017cbd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cc1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cc5:	eb 07                	jmp    c0017cce <findRSDT(unsigned char*)+0x114>
c0017cc7:	b8 00 00 00 00       	mov    eax,0x0
c0017ccc:	eb 04                	jmp    c0017cd2 <findRSDT(unsigned char*)+0x118>
c0017cce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017cd2:	83 c4 44             	add    esp,0x44
c0017cd5:	5b                   	pop    ebx
c0017cd6:	5e                   	pop    esi
c0017cd7:	c3                   	ret    

c0017cd8 <findDataTable(unsigned char*, char*)>:
c0017cd8:	83 ec 1c             	sub    esp,0x1c
c0017cdb:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017ce0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ce6:	83 e0 04             	and    eax,0x4
c0017ce9:	84 c0                	test   al,al
c0017ceb:	75 07                	jne    c0017cf4 <findDataTable(unsigned char*, char*)+0x1c>
c0017ced:	b8 00 00 00 00       	mov    eax,0x0
c0017cf2:	eb 7c                	jmp    c0017d70 <findDataTable(unsigned char*, char*)+0x98>
c0017cf4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017cfc:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c0017d01:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d05:	7d 3a                	jge    c0017d41 <findDataTable(unsigned char*, char*)+0x69>
c0017d07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d0b:	c1 e0 03             	shl    eax,0x3
c0017d0e:	05 40 0b 03 c0       	add    eax,0xc0030b40
c0017d13:	83 ec 04             	sub    esp,0x4
c0017d16:	6a 04                	push   0x4
c0017d18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d1c:	50                   	push   eax
c0017d1d:	e8 26 89 fe ff       	call   c0000648 <memcmp>
c0017d22:	83 c4 10             	add    esp,0x10
c0017d25:	85 c0                	test   eax,eax
c0017d27:	0f 94 c0             	sete   al
c0017d2a:	84 c0                	test   al,al
c0017d2c:	74 0d                	je     c0017d3b <findDataTable(unsigned char*, char*)+0x63>
c0017d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d32:	8b 04 c5 44 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf4bc]
c0017d39:	eb 35                	jmp    c0017d70 <findDataTable(unsigned char*, char*)+0x98>
c0017d3b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d3f:	eb bb                	jmp    c0017cfc <findDataTable(unsigned char*, char*)+0x24>
c0017d41:	a0 40 0d 03 c0       	mov    al,ds:0xc0030d40
c0017d46:	84 c0                	test   al,al
c0017d48:	74 07                	je     c0017d51 <findDataTable(unsigned char*, char*)+0x79>
c0017d4a:	b8 58 00 00 00       	mov    eax,0x58
c0017d4f:	eb 05                	jmp    c0017d56 <findDataTable(unsigned char*, char*)+0x7e>
c0017d51:	b8 52 00 00 00       	mov    eax,0x52
c0017d56:	83 ec 04             	sub    esp,0x4
c0017d59:	50                   	push   eax
c0017d5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d5e:	68 98 b5 02 c0       	push   0xc002b598
c0017d63:	e8 77 b1 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0017d68:	83 c4 10             	add    esp,0x10
c0017d6b:	b8 00 00 00 00       	mov    eax,0x0
c0017d70:	83 c4 1c             	add    esp,0x1c
c0017d73:	c3                   	ret    

c0017d74 <scanMADT()>:
c0017d74:	53                   	push   ebx
c0017d75:	83 ec 38             	sub    esp,0x38
c0017d78:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017d7d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d83:	83 e0 04             	and    eax,0x4
c0017d86:	84 c0                	test   al,al
c0017d88:	0f 84 63 04 00 00    	je     c00181f1 <scanMADT()+0x47d>
c0017d8e:	e8 66 fb ff ff       	call   c00178f9 <findRSDP()>
c0017d93:	a3 4c 0d 03 c0       	mov    ds:0xc0030d4c,eax
c0017d98:	a1 4c 0d 03 c0       	mov    eax,ds:0xc0030d4c
c0017d9d:	85 c0                	test   eax,eax
c0017d9f:	75 19                	jne    c0017dba <scanMADT()+0x46>
c0017da1:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017da6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dac:	83 e2 fb             	and    edx,0xfffffffb
c0017daf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017db5:	e9 3b 04 00 00       	jmp    c00181f5 <scanMADT()+0x481>
c0017dba:	a1 4c 0d 03 c0       	mov    eax,ds:0xc0030d4c
c0017dbf:	83 ec 0c             	sub    esp,0xc
c0017dc2:	50                   	push   eax
c0017dc3:	e8 f2 fd ff ff       	call   c0017bba <findRSDT(unsigned char*)>
c0017dc8:	83 c4 10             	add    esp,0x10
c0017dcb:	a3 48 0d 03 c0       	mov    ds:0xc0030d48,eax
c0017dd0:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c0017dd5:	85 c0                	test   eax,eax
c0017dd7:	75 19                	jne    c0017df2 <scanMADT()+0x7e>
c0017dd9:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017dde:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017de4:	83 e2 fb             	and    edx,0xfffffffb
c0017de7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ded:	e9 03 04 00 00       	jmp    c00181f5 <scanMADT()+0x481>
c0017df2:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c0017df7:	83 ec 0c             	sub    esp,0xc
c0017dfa:	50                   	push   eax
c0017dfb:	e8 93 fb ff ff       	call   c0017993 <loadACPITables(unsigned char*)>
c0017e00:	83 c4 10             	add    esp,0x10
c0017e03:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c0017e08:	83 ec 08             	sub    esp,0x8
c0017e0b:	68 68 b4 02 c0       	push   0xc002b468
c0017e10:	50                   	push   eax
c0017e11:	e8 c2 fe ff ff       	call   c0017cd8 <findDataTable(unsigned char*, char*)>
c0017e16:	83 c4 10             	add    esp,0x10
c0017e19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e1d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e22:	75 19                	jne    c0017e3d <scanMADT()+0xc9>
c0017e24:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0017e29:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e2f:	83 e2 fe             	and    edx,0xfffffffe
c0017e32:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e38:	e9 b8 03 00 00       	jmp    c00181f5 <scanMADT()+0x481>
c0017e3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e4c:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e50:	0f 87 9f 03 00 00    	ja     c00181f5 <scanMADT()+0x481>
c0017e56:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e5e:	0f 87 91 03 00 00    	ja     c00181f5 <scanMADT()+0x481>
c0017e64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e68:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e6c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e70:	8d 50 01             	lea    edx,[eax+0x1]
c0017e73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e77:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e7b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e7f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e87:	8d 50 01             	lea    edx,[eax+0x1]
c0017e8a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e8e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e92:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e96:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e9a:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e9f:	0f 86 4f 03 00 00    	jbe    c00181f4 <scanMADT()+0x480>
c0017ea5:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017eaa:	75 57                	jne    c0017f03 <scanMADT()+0x18f>
c0017eac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb0:	8d 50 01             	lea    edx,[eax+0x1]
c0017eb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eb7:	8a 15 40 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f40
c0017ebd:	0f b6 d2             	movzx  edx,dl
c0017ec0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ec4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ec8:	88 82 80 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf080],al
c0017ece:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed2:	8d 50 01             	lea    edx,[eax+0x1]
c0017ed5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ed9:	8a 15 40 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f40
c0017edf:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ee2:	88 0d 40 0f 03 c0    	mov    BYTE PTR ds:0xc0030f40,cl
c0017ee8:	0f b6 d2             	movzx  edx,dl
c0017eeb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017eef:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ef3:	88 82 60 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf0a0],al
c0017ef9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017efe:	e9 da 02 00 00       	jmp    c00181dd <scanMADT()+0x469>
c0017f03:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f08:	0f 85 14 01 00 00    	jne    c0018022 <scanMADT()+0x2ae>
c0017f0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f12:	8d 50 01             	lea    edx,[eax+0x1]
c0017f15:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f19:	8a 15 00 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e00
c0017f1f:	0f b6 d2             	movzx  edx,dl
c0017f22:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f26:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f2a:	88 82 20 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf1e0],al
c0017f30:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f3c:	01 d0                	add    eax,edx
c0017f3e:	83 c0 2c             	add    eax,0x2c
c0017f41:	8a 00                	mov    al,BYTE PTR [eax]
c0017f43:	0f b6 d0             	movzx  edx,al
c0017f46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f4a:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f51:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f55:	0f b6 c0             	movzx  eax,al
c0017f58:	c1 e0 08             	shl    eax,0x8
c0017f5b:	89 d1                	mov    ecx,edx
c0017f5d:	09 c1                	or     ecx,eax
c0017f5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f63:	8d 50 02             	lea    edx,[eax+0x2]
c0017f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f6a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f6e:	0f b6 c0             	movzx  eax,al
c0017f71:	c1 e0 10             	shl    eax,0x10
c0017f74:	09 c1                	or     ecx,eax
c0017f76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f7a:	8d 50 03             	lea    edx,[eax+0x3]
c0017f7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f81:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f85:	0f b6 c0             	movzx  eax,al
c0017f88:	c1 e0 18             	shl    eax,0x18
c0017f8b:	09 c1                	or     ecx,eax
c0017f8d:	89 ca                	mov    edx,ecx
c0017f8f:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0017f94:	0f b6 c0             	movzx  eax,al
c0017f97:	89 14 85 40 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1c0],edx
c0017f9e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fa3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fa7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fab:	01 d0                	add    eax,edx
c0017fad:	83 c0 2c             	add    eax,0x2c
c0017fb0:	8a 00                	mov    al,BYTE PTR [eax]
c0017fb2:	0f b6 d0             	movzx  edx,al
c0017fb5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb9:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fbc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fc0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fc4:	0f b6 c0             	movzx  eax,al
c0017fc7:	c1 e0 08             	shl    eax,0x8
c0017fca:	89 d1                	mov    ecx,edx
c0017fcc:	09 c1                	or     ecx,eax
c0017fce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd2:	8d 50 02             	lea    edx,[eax+0x2]
c0017fd5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fd9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fdd:	0f b6 c0             	movzx  eax,al
c0017fe0:	c1 e0 10             	shl    eax,0x10
c0017fe3:	09 c1                	or     ecx,eax
c0017fe5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe9:	8d 50 03             	lea    edx,[eax+0x3]
c0017fec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ff0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ff4:	0f b6 c0             	movzx  eax,al
c0017ff7:	c1 e0 18             	shl    eax,0x18
c0017ffa:	09 c1                	or     ecx,eax
c0017ffc:	89 ca                	mov    edx,ecx
c0017ffe:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0018003:	0f b6 c0             	movzx  eax,al
c0018006:	89 14 85 c0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf140],edx
c001800d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018012:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0018017:	40                   	inc    eax
c0018018:	a2 00 0e 03 c0       	mov    ds:0xc0030e00,al
c001801d:	e9 bb 01 00 00       	jmp    c00181dd <scanMADT()+0x469>
c0018022:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0018027:	0f 85 e9 00 00 00    	jne    c0018116 <scanMADT()+0x3a2>
c001802d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018031:	8d 50 01             	lea    edx,[eax+0x1]
c0018034:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018038:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001803c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018040:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018044:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018048:	8d 50 01             	lea    edx,[eax+0x1]
c001804b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001804f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018053:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018057:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001805b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001805f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018063:	01 d0                	add    eax,edx
c0018065:	83 c0 2c             	add    eax,0x2c
c0018068:	8a 00                	mov    al,BYTE PTR [eax]
c001806a:	0f b6 d0             	movzx  edx,al
c001806d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018071:	8d 48 01             	lea    ecx,[eax+0x1]
c0018074:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018078:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001807c:	0f b6 c0             	movzx  eax,al
c001807f:	c1 e0 08             	shl    eax,0x8
c0018082:	89 d1                	mov    ecx,edx
c0018084:	09 c1                	or     ecx,eax
c0018086:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001808a:	8d 50 02             	lea    edx,[eax+0x2]
c001808d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018091:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018095:	0f b6 c0             	movzx  eax,al
c0018098:	c1 e0 10             	shl    eax,0x10
c001809b:	09 c1                	or     ecx,eax
c001809d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a1:	8d 50 03             	lea    edx,[eax+0x3]
c00180a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180a8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180ac:	0f b6 c0             	movzx  eax,al
c00180af:	c1 e0 18             	shl    eax,0x18
c00180b2:	09 c8                	or     eax,ecx
c00180b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00180b8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c5:	01 d0                	add    eax,edx
c00180c7:	83 c0 2c             	add    eax,0x2c
c00180ca:	8a 00                	mov    al,BYTE PTR [eax]
c00180cc:	0f b6 c0             	movzx  eax,al
c00180cf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00180d3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00180d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180da:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00180de:	0f b6 d2             	movzx  edx,dl
c00180e1:	c1 e2 08             	shl    edx,0x8
c00180e4:	09 d0                	or     eax,edx
c00180e6:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00180eb:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180f0:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00180f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180f9:	88 90 c0 d6 02 c0    	mov    BYTE PTR [eax-0x3ffd2940],dl
c00180ff:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018104:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018109:	66 89 84 12 e0 0d 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf220],ax
c0018111:	e9 c7 00 00 00       	jmp    c00181dd <scanMADT()+0x469>
c0018116:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001811b:	0f 85 b0 00 00 00    	jne    c00181d1 <scanMADT()+0x45d>
c0018121:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018125:	8d 50 01             	lea    edx,[eax+0x1]
c0018128:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001812c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018130:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018134:	0f b6 c0             	movzx  eax,al
c0018137:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001813b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001813f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018143:	01 d0                	add    eax,edx
c0018145:	83 c0 2c             	add    eax,0x2c
c0018148:	8a 00                	mov    al,BYTE PTR [eax]
c001814a:	0f b6 d0             	movzx  edx,al
c001814d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018151:	8d 48 01             	lea    ecx,[eax+0x1]
c0018154:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018158:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001815c:	0f b6 c0             	movzx  eax,al
c001815f:	c1 e0 08             	shl    eax,0x8
c0018162:	09 d0                	or     eax,edx
c0018164:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018168:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001816d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018171:	8d 50 01             	lea    edx,[eax+0x1]
c0018174:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018178:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001817c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018180:	0f b6 c0             	movzx  eax,al
c0018183:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001818b:	c1 e0 08             	shl    eax,0x8
c001818e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018192:	89 c1                	mov    ecx,eax
c0018194:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018198:	c1 e0 18             	shl    eax,0x18
c001819b:	89 c3                	mov    ebx,eax
c001819d:	a1 50 0d 03 c0       	mov    eax,ds:0xc0030d50
c00181a2:	8d 50 01             	lea    edx,[eax+0x1]
c00181a5:	89 15 50 0d 03 c0    	mov    DWORD PTR ds:0xc0030d50,edx
c00181ab:	09 d9                	or     ecx,ebx
c00181ad:	89 ca                	mov    edx,ecx
c00181af:	89 14 85 60 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2a0],edx
c00181b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00181ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181c2:	68 c8 b5 02 c0       	push   0xc002b5c8
c00181c7:	e8 13 ad ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00181cc:	83 c4 10             	add    esp,0x10
c00181cf:	eb 0c                	jmp    c00181dd <scanMADT()+0x469>
c00181d1:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00181d6:	75 05                	jne    c00181dd <scanMADT()+0x469>
c00181d8:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00181dd:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00181e2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181e6:	01 d0                	add    eax,edx
c00181e8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00181ec:	e9 54 fc ff ff       	jmp    c0017e45 <scanMADT()+0xd1>
c00181f1:	90                   	nop
c00181f2:	eb 01                	jmp    c00181f5 <scanMADT()+0x481>
c00181f4:	90                   	nop
c00181f5:	83 c4 38             	add    esp,0x38
c00181f8:	5b                   	pop    ebx
c00181f9:	c3                   	ret    

c00181fa <ACPI::ACPI()>:
c00181fa:	83 ec 0c             	sub    esp,0xc
c00181fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018201:	83 ec 08             	sub    esp,0x8
c0018204:	68 6d b4 02 c0       	push   0xc002b46d
c0018209:	50                   	push   eax
c001820a:	e8 e7 c2 ff ff       	call   c00144f6 <Device::Device(char const*)>
c001820f:	83 c4 10             	add    esp,0x10
c0018212:	ba 3c b6 02 c0       	mov    edx,0xc002b63c
c0018217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821b:	89 10                	mov    DWORD PTR [eax],edx
c001821d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018221:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822c:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823a:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018248:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001824f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018253:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001825a:	e8 15 fb ff ff       	call   c0017d74 <scanMADT()>
c001825f:	90                   	nop
c0018260:	83 c4 0c             	add    esp,0xc
c0018263:	c3                   	ret    

c0018264 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018264:	83 ec 2c             	sub    esp,0x2c
c0018267:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001826b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001826f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018273:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018277:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001827c:	88 d0                	mov    al,dl
c001827e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018282:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018287:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001828f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018293:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018299:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001829d:	0f 8d 97 00 00 00    	jge    c001833a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00182a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182ab:	83 c2 2a             	add    edx,0x2a
c00182ae:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00182b2:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00182b7:	75 78                	jne    c0018331 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182c1:	83 c2 2a             	add    edx,0x2a
c00182c4:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00182c8:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00182cc:	75 63                	jne    c0018331 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182ce:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00182d3:	74 3a                	je     c001830f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00182d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182dd:	83 c2 2a             	add    edx,0x2a
c00182e0:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00182e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00182eb:	39 c2                	cmp    edx,eax
c00182ed:	74 10                	je     c00182ff <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00182ef:	83 ec 0c             	sub    esp,0xc
c00182f2:	68 04 b6 02 c0       	push   0xc002b604
c00182f7:	e8 0f 23 00 00       	call   c001a60b <Krnl::panic(char const*)>
c00182fc:	83 c4 10             	add    esp,0x10
c00182ff:	83 ec 0c             	sub    esp,0xc
c0018302:	68 72 b4 02 c0       	push   0xc002b472
c0018307:	e8 ff 22 00 00       	call   c001a60b <Krnl::panic(char const*)>
c001830c:	83 c4 10             	add    esp,0x10
c001830f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018313:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018317:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001831b:	83 c2 2a             	add    edx,0x2a
c001831e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018322:	8b 02                	mov    eax,DWORD PTR [edx]
c0018324:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018327:	89 01                	mov    DWORD PTR [ecx],eax
c0018329:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001832c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018331:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018335:	e9 55 ff ff ff       	jmp    c001828f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001833a:	90                   	nop
c001833b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001833f:	83 c4 2c             	add    esp,0x2c
c0018342:	c2 04 00             	ret    0x4
c0018345:	90                   	nop

c0018346 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018346:	83 ec 1c             	sub    esp,0x1c
c0018349:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001834d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018351:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018355:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001835a:	88 c8                	mov    al,cl
c001835c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018360:	88 d0                	mov    al,dl
c0018362:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001836a:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018370:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018374:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018377:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001837b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001837f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018383:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018389:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001838d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018390:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018394:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018399:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001839d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183a3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00183aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183ae:	83 c2 2a             	add    edx,0x2a
c00183b1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00183b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183b9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183c3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183c6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183ca:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00183ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183d2:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183d8:	8d 50 01             	lea    edx,[eax+0x1]
c00183db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183df:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00183e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183e9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183ef:	3d 00 02 00 00       	cmp    eax,0x200
c00183f4:	75 10                	jne    c0018406 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00183f6:	83 ec 0c             	sub    esp,0xc
c00183f9:	68 81 b4 02 c0       	push   0xc002b481
c00183fe:	e8 08 22 00 00       	call   c001a60b <Krnl::panic(char const*)>
c0018403:	83 c4 10             	add    esp,0x10
c0018406:	90                   	nop
c0018407:	83 c4 1c             	add    esp,0x1c
c001840a:	c3                   	ret    
c001840b:	90                   	nop

c001840c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001840c:	b8 00 00 00 00       	mov    eax,0x0
c0018411:	c3                   	ret    

c0018412 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018412:	83 ec 1c             	sub    esp,0x1c
c0018415:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018419:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001841c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018420:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0018425:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001842a:	83 ec 08             	sub    esp,0x8
c001842d:	52                   	push   edx
c001842e:	50                   	push   eax
c001842f:	e8 2c 6a ff ff       	call   c000ee60 <Computer::readCMOS(unsigned char)>
c0018434:	83 c4 10             	add    esp,0x10
c0018437:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001843b:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0018440:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018445:	83 ec 04             	sub    esp,0x4
c0018448:	6a 01                	push   0x1
c001844a:	52                   	push   edx
c001844b:	50                   	push   eax
c001844c:	e8 25 6b ff ff       	call   c000ef76 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018451:	83 c4 10             	add    esp,0x10
c0018454:	90                   	nop
c0018455:	83 c4 1c             	add    esp,0x1c
c0018458:	c3                   	ret    
c0018459:	90                   	nop

c001845a <ACPI::open(int, int, void*)>:
c001845a:	53                   	push   ebx
c001845b:	83 ec 28             	sub    esp,0x28
c001845e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018462:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018469:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001846d:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018474:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0018479:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001847f:	83 e0 04             	and    eax,0x4
c0018482:	84 c0                	test   al,al
c0018484:	74 47                	je     c00184cd <ACPI::open(int, int, void*)+0x73>
c0018486:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c001848b:	83 ec 08             	sub    esp,0x8
c001848e:	68 9e b4 02 c0       	push   0xc002b49e
c0018493:	50                   	push   eax
c0018494:	e8 3f f8 ff ff       	call   c0017cd8 <findDataTable(unsigned char*, char*)>
c0018499:	83 c4 10             	add    esp,0x10
c001849c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00184a0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00184a5:	74 26                	je     c00184cd <ACPI::open(int, int, void*)+0x73>
c00184a7:	83 ec 0c             	sub    esp,0xc
c00184aa:	68 a3 b4 02 c0       	push   0xc002b4a3
c00184af:	e8 2b aa ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00184b4:	83 c4 10             	add    esp,0x10
c00184b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184bb:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184c6:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184cd:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00184d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184d9:	8a 00                	mov    al,BYTE PTR [eax]
c00184db:	3c 01                	cmp    al,0x1
c00184dd:	75 28                	jne    c0018507 <ACPI::open(int, int, void*)+0xad>
c00184df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184e3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ee:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184f5:	83 ec 0c             	sub    esp,0xc
c00184f8:	68 b4 b4 02 c0       	push   0xc002b4b4
c00184fd:	e8 dd a9 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018502:	83 c4 10             	add    esp,0x10
c0018505:	eb 25                	jmp    c001852c <ACPI::open(int, int, void*)+0xd2>
c0018507:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001850b:	8a 00                	mov    al,BYTE PTR [eax]
c001850d:	3c 02                	cmp    al,0x2
c001850f:	75 1b                	jne    c001852c <ACPI::open(int, int, void*)+0xd2>
c0018511:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018515:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001851c:	83 ec 0c             	sub    esp,0xc
c001851f:	68 bc b4 02 c0       	push   0xc002b4bc
c0018524:	e8 b6 a9 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018529:	83 c4 10             	add    esp,0x10
c001852c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018530:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018536:	83 f0 01             	xor    eax,0x1
c0018539:	84 c0                	test   al,al
c001853b:	74 6a                	je     c00185a7 <ACPI::open(int, int, void*)+0x14d>
c001853d:	83 ec 0c             	sub    esp,0xc
c0018540:	68 c4 b4 02 c0       	push   0xc002b4c4
c0018545:	e8 95 a9 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001854a:	83 c4 10             	add    esp,0x10
c001854d:	e8 fe 7b fe ff       	call   c0000150 <manualPCIProbe>
c0018552:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018556:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c001855b:	75 28                	jne    c0018585 <ACPI::open(int, int, void*)+0x12b>
c001855d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018561:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018568:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001856c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018573:	83 ec 0c             	sub    esp,0xc
c0018576:	68 d2 b4 02 c0       	push   0xc002b4d2
c001857b:	e8 5f a9 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018580:	83 c4 10             	add    esp,0x10
c0018583:	eb 22                	jmp    c00185a7 <ACPI::open(int, int, void*)+0x14d>
c0018585:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c001858a:	75 1b                	jne    c00185a7 <ACPI::open(int, int, void*)+0x14d>
c001858c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018590:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018597:	83 ec 0c             	sub    esp,0xc
c001859a:	68 dc b4 02 c0       	push   0xc002b4dc
c001859f:	e8 3b a9 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00185a4:	83 c4 10             	add    esp,0x10
c00185a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185ab:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185b1:	84 c0                	test   al,al
c00185b3:	74 13                	je     c00185c8 <ACPI::open(int, int, void*)+0x16e>
c00185b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185b9:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00185bf:	83 f0 01             	xor    eax,0x1
c00185c2:	0f b6 c0             	movzx  eax,al
c00185c5:	40                   	inc    eax
c00185c6:	eb 05                	jmp    c00185cd <ACPI::open(int, int, void*)+0x173>
c00185c8:	b8 00 00 00 00       	mov    eax,0x0
c00185cd:	83 ec 08             	sub    esp,0x8
c00185d0:	50                   	push   eax
c00185d1:	68 e6 b4 02 c0       	push   0xc002b4e6
c00185d6:	e8 04 a9 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00185db:	83 c4 10             	add    esp,0x10
c00185de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185e2:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185e8:	84 c0                	test   al,al
c00185ea:	74 67                	je     c0018653 <ACPI::open(int, int, void*)+0x1f9>
c00185ec:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00185f4:	83 ec 0c             	sub    esp,0xc
c00185f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185fb:	e8 4b 72 ff ff       	call   c000f84b <malloc>
c0018600:	83 c4 10             	add    esp,0x10
c0018603:	89 c3                	mov    ebx,eax
c0018605:	83 ec 0c             	sub    esp,0xc
c0018608:	53                   	push   ebx
c0018609:	e8 16 a3 00 00       	call   c0022924 <PCI::PCI()>
c001860e:	83 c4 10             	add    esp,0x10
c0018611:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018615:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018619:	83 ec 08             	sub    esp,0x8
c001861c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018620:	50                   	push   eax
c0018621:	e8 e0 bc ff ff       	call   c0014306 <Device::addChild(Device*)>
c0018626:	83 c4 10             	add    esp,0x10
c0018629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001862d:	8b 00                	mov    eax,DWORD PTR [eax]
c001862f:	83 c0 08             	add    eax,0x8
c0018632:	8b 00                	mov    eax,DWORD PTR [eax]
c0018634:	6a 00                	push   0x0
c0018636:	6a 00                	push   0x0
c0018638:	6a 00                	push   0x0
c001863a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001863e:	ff d0                	call   eax
c0018640:	83 c4 10             	add    esp,0x10
c0018643:	83 ec 0c             	sub    esp,0xc
c0018646:	68 ef b4 02 c0       	push   0xc002b4ef
c001864b:	e8 8f a8 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018650:	83 c4 10             	add    esp,0x10
c0018653:	83 ec 0c             	sub    esp,0xc
c0018656:	68 fa b4 02 c0       	push   0xc002b4fa
c001865b:	e8 81 46 00 00       	call   c001cce1 <Thr::loadKernelSymbolTable(char const*)>
c0018660:	83 c4 10             	add    esp,0x10
c0018663:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c0018669:	83 ec 08             	sub    esp,0x8
c001866c:	6a 01                	push   0x1
c001866e:	68 18 b5 02 c0       	push   0xc002b518
c0018673:	e8 c6 50 00 00       	call   c001d73e <Thr::loadDLL(char const*, bool)>
c0018678:	83 c4 10             	add    esp,0x10
c001867b:	83 ec 08             	sub    esp,0x8
c001867e:	53                   	push   ebx
c001867f:	50                   	push   eax
c0018680:	e8 ed 52 00 00       	call   c001d972 <Thr::executeDLL(unsigned long, void*)>
c0018685:	83 c4 10             	add    esp,0x10
c0018688:	8b 1d 68 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e468
c001868e:	83 ec 08             	sub    esp,0x8
c0018691:	6a 01                	push   0x1
c0018693:	68 35 b5 02 c0       	push   0xc002b535
c0018698:	e8 a1 50 00 00       	call   c001d73e <Thr::loadDLL(char const*, bool)>
c001869d:	83 c4 10             	add    esp,0x10
c00186a0:	83 ec 08             	sub    esp,0x8
c00186a3:	53                   	push   ebx
c00186a4:	50                   	push   eax
c00186a5:	e8 c8 52 00 00       	call   c001d972 <Thr::executeDLL(unsigned long, void*)>
c00186aa:	83 c4 10             	add    esp,0x10
c00186ad:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00186b2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00186b8:	83 e0 04             	and    eax,0x4
c00186bb:	84 c0                	test   al,al
c00186bd:	0f 84 d2 00 00 00    	je     c0018795 <ACPI::open(int, int, void*)+0x33b>
c00186c3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00186ca:	83 ec 0c             	sub    esp,0xc
c00186cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00186d1:	e8 75 71 ff ff       	call   c000f84b <malloc>
c00186d6:	83 c4 10             	add    esp,0x10
c00186d9:	89 c3                	mov    ebx,eax
c00186db:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c00186e0:	83 ec 04             	sub    esp,0x4
c00186e3:	50                   	push   eax
c00186e4:	68 52 b5 02 c0       	push   0xc002b552
c00186e9:	53                   	push   ebx
c00186ea:	e8 49 ad ff ff       	call   c0013438 <File::File(char const*, Process*)>
c00186ef:	83 c4 10             	add    esp,0x10
c00186f2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00186f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186fb:	74 17                	je     c0018714 <ACPI::open(int, int, void*)+0x2ba>
c00186fd:	83 ec 0c             	sub    esp,0xc
c0018700:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018704:	e8 01 b0 ff ff       	call   c001370a <File::exists()>
c0018709:	83 c4 10             	add    esp,0x10
c001870c:	84 c0                	test   al,al
c001870e:	74 04                	je     c0018714 <ACPI::open(int, int, void*)+0x2ba>
c0018710:	b0 01                	mov    al,0x1
c0018712:	eb 02                	jmp    c0018716 <ACPI::open(int, int, void*)+0x2bc>
c0018714:	b0 00                	mov    al,0x0
c0018716:	84 c0                	test   al,al
c0018718:	74 22                	je     c001873c <ACPI::open(int, int, void*)+0x2e2>
c001871a:	83 ec 08             	sub    esp,0x8
c001871d:	6a 01                	push   0x1
c001871f:	68 52 b5 02 c0       	push   0xc002b552
c0018724:	e8 15 50 00 00       	call   c001d73e <Thr::loadDLL(char const*, bool)>
c0018729:	83 c4 10             	add    esp,0x10
c001872c:	83 ec 08             	sub    esp,0x8
c001872f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018733:	50                   	push   eax
c0018734:	e8 39 52 00 00       	call   c001d972 <Thr::executeDLL(unsigned long, void*)>
c0018739:	83 c4 10             	add    esp,0x10
c001873c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018741:	74 1e                	je     c0018761 <ACPI::open(int, int, void*)+0x307>
c0018743:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018748:	74 17                	je     c0018761 <ACPI::open(int, int, void*)+0x307>
c001874a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001874e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018750:	83 c0 08             	add    eax,0x8
c0018753:	8b 00                	mov    eax,DWORD PTR [eax]
c0018755:	83 ec 0c             	sub    esp,0xc
c0018758:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001875c:	ff d0                	call   eax
c001875e:	83 c4 10             	add    esp,0x10
c0018761:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c0018766:	83 ec 08             	sub    esp,0x8
c0018769:	68 6f b5 02 c0       	push   0xc002b56f
c001876e:	50                   	push   eax
c001876f:	e8 64 f5 ff ff       	call   c0017cd8 <findDataTable(unsigned char*, char*)>
c0018774:	83 c4 10             	add    esp,0x10
c0018777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001877b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018780:	74 13                	je     c0018795 <ACPI::open(int, int, void*)+0x33b>
c0018782:	83 ec 08             	sub    esp,0x8
c0018785:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018789:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001878d:	e8 80 fc ff ff       	call   c0018412 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018792:	83 c4 10             	add    esp,0x10
c0018795:	b8 00 00 00 00       	mov    eax,0x0
c001879a:	83 c4 28             	add    esp,0x28
c001879d:	5b                   	pop    ebx
c001879e:	c3                   	ret    
c001879f:	90                   	nop

c00187a0 <ACPI::sleep()>:
c00187a0:	83 ec 0c             	sub    esp,0xc
c00187a3:	a1 20 0b 03 c0       	mov    eax,ds:0xc0030b20
c00187a8:	85 c0                	test   eax,eax
c00187aa:	74 07                	je     c00187b3 <ACPI::sleep()+0x13>
c00187ac:	a1 20 0b 03 c0       	mov    eax,ds:0xc0030b20
c00187b1:	ff d0                	call   eax
c00187b3:	90                   	nop
c00187b4:	83 c4 0c             	add    esp,0xc
c00187b7:	c3                   	ret    

c00187b8 <CPU::close(int, int, void*)>:
c00187b8:	31 c0                	xor    eax,eax
c00187ba:	c3                   	ret    
c00187bb:	90                   	nop

c00187bc <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00187bc:	55                   	push   ebp
c00187bd:	57                   	push   edi
c00187be:	56                   	push   esi
c00187bf:	53                   	push   ebx
c00187c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00187c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187c8:	89 ce                	mov    esi,ecx
c00187ca:	89 d5                	mov    ebp,edx
c00187cc:	80 f9 04             	cmp    cl,0x4
c00187cf:	75 28                	jne    c00187f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00187d1:	8d 42 f9             	lea    eax,[edx-0x7]
c00187d4:	3c 03                	cmp    al,0x3
c00187d6:	0f 86 63 01 00 00    	jbe    c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187dc:	80 fa 03             	cmp    dl,0x3
c00187df:	0f 84 5a 01 00 00    	je     c001893f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187e5:	8d 7a f2             	lea    edi,[edx-0xe]
c00187e8:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c00187ed:	89 fb                	mov    ebx,edi
c00187ef:	80 fb 01             	cmp    bl,0x1
c00187f2:	77 4e                	ja     c0018842 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00187f4:	e9 52 01 00 00       	jmp    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187f9:	80 f9 05             	cmp    cl,0x5
c00187fc:	75 4d                	jne    c001884b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00187fe:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018803:	80 fa 03             	cmp    dl,0x3
c0018806:	0f 86 3f 01 00 00    	jbe    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001880c:	8d 7a fa             	lea    edi,[edx-0x6]
c001880f:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018814:	89 fb                	mov    ebx,edi
c0018816:	80 fb 01             	cmp    bl,0x1
c0018819:	0f 86 2c 01 00 00    	jbe    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001881f:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018824:	80 fa 08             	cmp    dl,0x8
c0018827:	0f 84 1e 01 00 00    	je     c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001882d:	89 d7                	mov    edi,edx
c001882f:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018834:	83 e7 fb             	and    edi,0xfffffffb
c0018837:	89 fb                	mov    ebx,edi
c0018839:	80 fb 09             	cmp    bl,0x9
c001883c:	0f 84 09 01 00 00    	je     c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018842:	31 c0                	xor    eax,eax
c0018844:	89 eb                	mov    ebx,ebp
c0018846:	0f b6 fb             	movzx  edi,bl
c0018849:	eb 30                	jmp    c001887b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001884b:	31 c0                	xor    eax,eax
c001884d:	80 f9 06             	cmp    cl,0x6
c0018850:	75 f2                	jne    c0018844 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018852:	80 fa 0a             	cmp    dl,0xa
c0018855:	77 ed                	ja     c0018844 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018857:	bf de 05 00 00       	mov    edi,0x5de
c001885c:	0f a3 d7             	bt     edi,edx
c001885f:	73 e3                	jae    c0018844 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018861:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018866:	e9 e0 00 00 00       	jmp    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001886b:	39 c7                	cmp    edi,eax
c001886d:	0f 84 d3 00 00 00    	je     c0018946 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018873:	40                   	inc    eax
c0018874:	3d d0 00 00 00       	cmp    eax,0xd0
c0018879:	74 09                	je     c0018884 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001887b:	89 f3                	mov    ebx,esi
c001887d:	80 fb 0f             	cmp    bl,0xf
c0018880:	75 f1                	jne    c0018873 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018882:	eb e7                	jmp    c001886b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018884:	80 f9 10             	cmp    cl,0x10
c0018887:	75 14                	jne    c001889d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018889:	8d 42 fc             	lea    eax,[edx-0x4]
c001888c:	83 e0 fb             	and    eax,0xfffffffb
c001888f:	3c 02                	cmp    al,0x2
c0018891:	76 34                	jbe    c00188c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018893:	b8 52 b9 02 c0       	mov    eax,0xc002b952
c0018898:	80 fa 02             	cmp    dl,0x2
c001889b:	eb 24                	jmp    c00188c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001889d:	80 f9 11             	cmp    cl,0x11
c00188a0:	75 13                	jne    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00188a2:	b8 52 b9 02 c0       	mov    eax,0xc002b952
c00188a7:	80 fa 03             	cmp    dl,0x3
c00188aa:	0f 85 9b 00 00 00    	jne    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b0:	e9 91 00 00 00       	jmp    c0018946 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188b5:	80 f9 12             	cmp    cl,0x12
c00188b8:	75 14                	jne    c00188ce <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00188ba:	b8 52 b9 02 c0       	mov    eax,0xc002b952
c00188bf:	fe ca                	dec    dl
c00188c1:	0f 85 84 00 00 00    	jne    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c7:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c00188cc:	eb 7d                	jmp    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ce:	80 f9 14             	cmp    cl,0x14
c00188d1:	75 12                	jne    c00188e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00188d3:	4a                   	dec    edx
c00188d4:	b8 52 b9 02 c0       	mov    eax,0xc002b952
c00188d9:	80 fa 01             	cmp    dl,0x1
c00188dc:	77 6d                	ja     c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188de:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c00188e3:	eb 66                	jmp    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e5:	80 f9 15             	cmp    cl,0x15
c00188e8:	75 31                	jne    c001891b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00188ea:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c00188ef:	80 fa 01             	cmp    dl,0x1
c00188f2:	74 57                	je     c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f4:	b8 52 b9 02 c0       	mov    eax,0xc002b952
c00188f9:	80 fa 13             	cmp    dl,0x13
c00188fc:	76 0c                	jbe    c001890a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00188fe:	80 fa 30             	cmp    dl,0x30
c0018901:	75 48                	jne    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018903:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018908:	eb 41                	jmp    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001890a:	b9 04 00 09 00       	mov    ecx,0x90004
c001890f:	0f a3 d1             	bt     ecx,edx
c0018912:	73 37                	jae    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018914:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018919:	eb 30                	jmp    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891b:	b8 52 b9 02 c0       	mov    eax,0xc002b952
c0018920:	80 f9 16             	cmp    cl,0x16
c0018923:	75 26                	jne    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018925:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c001892a:	84 d2                	test   dl,dl
c001892c:	74 1d                	je     c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001892e:	b8 52 b9 02 c0       	mov    eax,0xc002b952
c0018933:	80 fa 30             	cmp    dl,0x30
c0018936:	75 13                	jne    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018938:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c001893d:	eb 0c                	jmp    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001893f:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018944:	eb 05                	jmp    c001894b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018946:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c001894b:	5b                   	pop    ebx
c001894c:	5e                   	pop    esi
c001894d:	5f                   	pop    edi
c001894e:	5d                   	pop    ebp
c001894f:	c3                   	ret    

c0018950 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018950:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018954:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018958:	80 f9 04             	cmp    cl,0x4
c001895b:	75 6b                	jne    c00189c8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001895d:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018962:	80 fa 01             	cmp    dl,0x1
c0018965:	0f 86 92 02 00 00    	jbe    c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896b:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018970:	80 fa 02             	cmp    dl,0x2
c0018973:	0f 84 84 02 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018979:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c001897e:	80 fa 03             	cmp    dl,0x3
c0018981:	0f 84 76 02 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018987:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c001898c:	80 fa 04             	cmp    dl,0x4
c001898f:	0f 84 68 02 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018995:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c001899a:	80 fa 05             	cmp    dl,0x5
c001899d:	0f 84 5a 02 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a3:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c00189a8:	80 fa 07             	cmp    dl,0x7
c00189ab:	0f 84 4c 02 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b1:	83 ea 08             	sub    edx,0x8
c00189b4:	b8 52 b9 02 c0       	mov    eax,0xc002b952
c00189b9:	80 fa 01             	cmp    dl,0x1
c00189bc:	0f 87 3b 02 00 00    	ja     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c2:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c00189c7:	c3                   	ret    
c00189c8:	80 f9 05             	cmp    cl,0x5
c00189cb:	75 45                	jne    c0018a12 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00189cd:	8d 4a ff             	lea    ecx,[edx-0x1]
c00189d0:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c00189d5:	80 f9 02             	cmp    cl,0x2
c00189d8:	0f 86 1f 02 00 00    	jbe    c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189de:	80 fa 04             	cmp    dl,0x4
c00189e1:	0f 84 f3 01 00 00    	je     c0018bda <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00189e7:	80 fa 07             	cmp    dl,0x7
c00189ea:	0f 84 0d 02 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f0:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c00189f5:	80 fa 08             	cmp    dl,0x8
c00189f8:	0f 84 ff 01 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fe:	b8 52 b9 02 c0       	mov    eax,0xc002b952
c0018a03:	80 fa 09             	cmp    dl,0x9
c0018a06:	0f 85 f1 01 00 00    	jne    c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0c:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018a11:	c3                   	ret    
c0018a12:	80 f9 06             	cmp    cl,0x6
c0018a15:	0f 85 85 01 00 00    	jne    c0018ba0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a1b:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018a20:	80 fa 01             	cmp    dl,0x1
c0018a23:	0f 84 d4 01 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a29:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a2c:	3c 01                	cmp    al,0x1
c0018a2e:	0f 86 ac 01 00 00    	jbe    c0018be0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a34:	80 fa 03             	cmp    dl,0x3
c0018a37:	0f 84 a3 01 00 00    	je     c0018be0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a3d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a40:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018a45:	80 f9 01             	cmp    cl,0x1
c0018a48:	0f 86 af 01 00 00    	jbe    c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a4e:	80 fa 09             	cmp    dl,0x9
c0018a51:	0f 84 8f 01 00 00    	je     c0018be6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a57:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a5a:	80 f9 01             	cmp    cl,0x1
c0018a5d:	0f 86 9a 01 00 00    	jbe    c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a63:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018a68:	80 fa 0d             	cmp    dl,0xd
c0018a6b:	0f 84 8c 01 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a71:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018a76:	80 fa 0e             	cmp    dl,0xe
c0018a79:	0f 84 7e 01 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a7f:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018a84:	80 fa 0f             	cmp    dl,0xf
c0018a87:	0f 84 70 01 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8d:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018a92:	80 fa 15             	cmp    dl,0x15
c0018a95:	0f 84 62 01 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9b:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a9e:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018aa3:	80 f9 01             	cmp    cl,0x1
c0018aa6:	0f 86 51 01 00 00    	jbe    c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aac:	80 fa 1a             	cmp    dl,0x1a
c0018aaf:	0f 84 37 01 00 00    	je     c0018bec <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018ab5:	80 fa 1c             	cmp    dl,0x1c
c0018ab8:	0f 84 34 01 00 00    	je     c0018bf2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018abe:	80 fa 1d             	cmp    dl,0x1d
c0018ac1:	0f 84 36 01 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac7:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018acc:	80 fa 25             	cmp    dl,0x25
c0018acf:	0f 84 28 01 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad5:	8d 4a da             	lea    ecx,[edx-0x26]
c0018ad8:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018add:	80 f9 01             	cmp    cl,0x1
c0018ae0:	0f 86 17 01 00 00    	jbe    c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae6:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018aeb:	80 fa 2a             	cmp    dl,0x2a
c0018aee:	0f 84 09 01 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af4:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018af9:	80 fa 2c             	cmp    dl,0x2c
c0018afc:	0f 84 fb 00 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b02:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018b07:	80 fa 2d             	cmp    dl,0x2d
c0018b0a:	0f 84 ed 00 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b10:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018b15:	80 fa 2e             	cmp    dl,0x2e
c0018b18:	0f 84 df 00 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1e:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018b23:	80 fa 2f             	cmp    dl,0x2f
c0018b26:	0f 84 d1 00 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2c:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b2f:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018b34:	80 f9 01             	cmp    cl,0x1
c0018b37:	0f 86 c0 00 00 00    	jbe    c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3d:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018b42:	80 fa 37             	cmp    dl,0x37
c0018b45:	0f 84 b2 00 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4b:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018b50:	80 fa 3a             	cmp    dl,0x3a
c0018b53:	0f 84 a4 00 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b59:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018b5e:	80 fa 3c             	cmp    dl,0x3c
c0018b61:	0f 84 96 00 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b67:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018b6c:	80 fa 3d             	cmp    dl,0x3d
c0018b6f:	0f 84 88 00 00 00    	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b75:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018b7a:	80 fa 3e             	cmp    dl,0x3e
c0018b7d:	74 7e                	je     c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b7f:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b82:	3c 01                	cmp    al,0x1
c0018b84:	76 72                	jbe    c0018bf8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b86:	80 fa 3f             	cmp    dl,0x3f
c0018b89:	74 6d                	je     c0018bf8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b8b:	80 fa 4a             	cmp    dl,0x4a
c0018b8e:	74 0a                	je     c0018b9a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b90:	b8 52 b9 02 c0       	mov    eax,0xc002b952
c0018b95:	80 fa 4d             	cmp    dl,0x4d
c0018b98:	75 63                	jne    c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b9a:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018b9f:	c3                   	ret    
c0018ba0:	b8 52 b9 02 c0       	mov    eax,0xc002b952
c0018ba5:	80 f9 0b             	cmp    cl,0xb
c0018ba8:	75 0a                	jne    c0018bb4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018baa:	fe ca                	dec    dl
c0018bac:	75 4f                	jne    c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bae:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018bb3:	c3                   	ret    
c0018bb4:	80 f9 0f             	cmp    cl,0xf
c0018bb7:	75 44                	jne    c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb9:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018bbe:	80 fa 02             	cmp    dl,0x2
c0018bc1:	76 3a                	jbe    c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc3:	8d 42 fd             	lea    eax,[edx-0x3]
c0018bc6:	3c 01                	cmp    al,0x1
c0018bc8:	76 0a                	jbe    c0018bd4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018bca:	b8 52 b9 02 c0       	mov    eax,0xc002b952
c0018bcf:	80 fa 06             	cmp    dl,0x6
c0018bd2:	75 29                	jne    c0018bfd <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd4:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018bd9:	c3                   	ret    
c0018bda:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018bdf:	c3                   	ret    
c0018be0:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018be5:	c3                   	ret    
c0018be6:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018beb:	c3                   	ret    
c0018bec:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018bf1:	c3                   	ret    
c0018bf2:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018bf7:	c3                   	ret    
c0018bf8:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018bfd:	c3                   	ret    

c0018bfe <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018bfe:	60                   	pusha  
c0018bff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c0b:	9c                   	pushf  
c0018c0c:	fa                   	cli    
c0018c0d:	0f 09                	wbinvd 
c0018c0f:	0f 30                	wrmsr  
c0018c11:	9d                   	popf   
c0018c12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c16:	89 02                	mov    DWORD PTR [edx],eax
c0018c18:	61                   	popa   
c0018c19:	c3                   	ret    

c0018c1a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c1a:	60                   	pusha  
c0018c1b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c1f:	9c                   	pushf  
c0018c20:	fa                   	cli    
c0018c21:	0f 09                	wbinvd 
c0018c23:	31 c0                	xor    eax,eax
c0018c25:	31 d2                	xor    edx,edx
c0018c27:	0f 32                	rdmsr  
c0018c29:	9d                   	popf   
c0018c2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c2e:	89 02                	mov    DWORD PTR [edx],eax
c0018c30:	61                   	popa   
c0018c31:	c3                   	ret    

c0018c32 <CPU::AMD_K6_writeback(int, int, int)>:
c0018c32:	56                   	push   esi
c0018c33:	53                   	push   ebx
c0018c34:	83 ec 10             	sub    esp,0x10
c0018c37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c3b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c40:	75 5d                	jne    c0018c9f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c42:	83 f8 08             	cmp    eax,0x8
c0018c45:	75 09                	jne    c0018c50 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c47:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c4c:	7e 13                	jle    c0018c61 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c4e:	eb 30                	jmp    c0018c80 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c50:	83 f8 06             	cmp    eax,0x6
c0018c53:	7c 4a                	jl     c0018c9f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c55:	83 f8 07             	cmp    eax,0x7
c0018c58:	7e 07                	jle    c0018c61 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c5a:	83 f8 09             	cmp    eax,0x9
c0018c5d:	74 21                	je     c0018c80 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c5f:	eb 3e                	jmp    c0018c9f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c61:	89 e6                	mov    esi,esp
c0018c63:	8b 1d a8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4a8
c0018c69:	56                   	push   esi
c0018c6a:	c1 eb 15             	shr    ebx,0x15
c0018c6d:	68 82 00 00 c0       	push   0xc0000082
c0018c72:	83 e3 7e             	and    ebx,0x7e
c0018c75:	e8 a0 ff ff ff       	call   c0018c1a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c7a:	56                   	push   esi
c0018c7b:	6a 00                	push   0x0
c0018c7d:	53                   	push   ebx
c0018c7e:	eb 12                	jmp    c0018c92 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c80:	89 e3                	mov    ebx,esp
c0018c82:	53                   	push   ebx
c0018c83:	68 82 00 00 c0       	push   0xc0000082
c0018c88:	e8 8d ff ff ff       	call   c0018c1a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c8d:	53                   	push   ebx
c0018c8e:	6a 00                	push   0x0
c0018c90:	6a 00                	push   0x0
c0018c92:	68 82 00 00 c0       	push   0xc0000082
c0018c97:	e8 62 ff ff ff       	call   c0018bfe <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c9c:	83 c4 18             	add    esp,0x18
c0018c9f:	83 c4 10             	add    esp,0x10
c0018ca2:	5b                   	pop    ebx
c0018ca3:	5e                   	pop    esi
c0018ca4:	c3                   	ret    
c0018ca5:	90                   	nop

c0018ca6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018ca6:	55                   	push   ebp
c0018ca7:	57                   	push   edi
c0018ca8:	56                   	push   esi
c0018ca9:	53                   	push   ebx
c0018caa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cae:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018cb2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018cb6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018cba:	39 05 80 d9 02 c0    	cmp    DWORD PTR ds:0xc002d980,eax
c0018cc0:	75 23                	jne    c0018ce5 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018cc2:	a1 ac 0f 03 c0       	mov    eax,ds:0xc0030fac
c0018cc7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018ccb:	89 06                	mov    DWORD PTR [esi],eax
c0018ccd:	a1 a8 0f 03 c0       	mov    eax,ds:0xc0030fa8
c0018cd2:	89 07                	mov    DWORD PTR [edi],eax
c0018cd4:	a1 a4 0f 03 c0       	mov    eax,ds:0xc0030fa4
c0018cd9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018cdc:	a1 a0 0f 03 c0       	mov    eax,ds:0xc0030fa0
c0018ce1:	89 02                	mov    DWORD PTR [edx],eax
c0018ce3:	eb 3f                	jmp    c0018d24 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018ce5:	31 c9                	xor    ecx,ecx
c0018ce7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ceb:	0f a2                	cpuid  
c0018ced:	89 06                	mov    DWORD PTR [esi],eax
c0018cef:	89 1f                	mov    DWORD PTR [edi],ebx
c0018cf1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018cf5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018cf8:	89 10                	mov    DWORD PTR [eax],edx
c0018cfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cfe:	a3 80 d9 02 c0       	mov    ds:0xc002d980,eax
c0018d03:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d05:	a3 ac 0f 03 c0       	mov    ds:0xc0030fac,eax
c0018d0a:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d0c:	a3 a8 0f 03 c0       	mov    ds:0xc0030fa8,eax
c0018d11:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d14:	a3 a4 0f 03 c0       	mov    ds:0xc0030fa4,eax
c0018d19:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d1f:	a3 a0 0f 03 c0       	mov    ds:0xc0030fa0,eax
c0018d24:	5b                   	pop    ebx
c0018d25:	5e                   	pop    esi
c0018d26:	5f                   	pop    edi
c0018d27:	5d                   	pop    ebp
c0018d28:	c3                   	ret    
c0018d29:	90                   	nop

c0018d2a <CPU::cpuidCheckEDX(unsigned int)>:
c0018d2a:	83 ec 10             	sub    esp,0x10
c0018d2d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d31:	50                   	push   eax
c0018d32:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d36:	50                   	push   eax
c0018d37:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d3b:	50                   	push   eax
c0018d3c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d40:	50                   	push   eax
c0018d41:	6a 01                	push   0x1
c0018d43:	e8 5e ff ff ff       	call   c0018ca6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d48:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d4c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d50:	0f 95 c0             	setne  al
c0018d53:	83 c4 24             	add    esp,0x24
c0018d56:	c3                   	ret    
c0018d57:	90                   	nop

c0018d58 <CPU::cpuidCheckECX(unsigned int)>:
c0018d58:	83 ec 10             	sub    esp,0x10
c0018d5b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d5f:	50                   	push   eax
c0018d60:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d64:	50                   	push   eax
c0018d65:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d69:	50                   	push   eax
c0018d6a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d6e:	50                   	push   eax
c0018d6f:	6a 01                	push   0x1
c0018d71:	e8 30 ff ff ff       	call   c0018ca6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d7a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d7e:	0f 95 c0             	setne  al
c0018d81:	83 c4 24             	add    esp,0x24
c0018d84:	c3                   	ret    
c0018d85:	90                   	nop

c0018d86 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d86:	83 ec 10             	sub    esp,0x10
c0018d89:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d8d:	50                   	push   eax
c0018d8e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d92:	50                   	push   eax
c0018d93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d97:	50                   	push   eax
c0018d98:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d9c:	50                   	push   eax
c0018d9d:	6a 07                	push   0x7
c0018d9f:	e8 02 ff ff ff       	call   c0018ca6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018da4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018da8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018dac:	0f 95 c0             	setne  al
c0018daf:	83 c4 24             	add    esp,0x24
c0018db2:	c3                   	ret    
c0018db3:	90                   	nop

c0018db4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018db4:	83 ec 10             	sub    esp,0x10
c0018db7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dbb:	50                   	push   eax
c0018dbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc0:	50                   	push   eax
c0018dc1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc5:	50                   	push   eax
c0018dc6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dca:	50                   	push   eax
c0018dcb:	6a 07                	push   0x7
c0018dcd:	e8 d4 fe ff ff       	call   c0018ca6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dd6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018dda:	0f 95 c0             	setne  al
c0018ddd:	83 c4 24             	add    esp,0x24
c0018de0:	c3                   	ret    
c0018de1:	90                   	nop

c0018de2 <CPU::CPU()>:
c0018de2:	83 ec 0c             	sub    esp,0xc
c0018de5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018de9:	83 ec 08             	sub    esp,0x8
c0018dec:	68 52 b9 02 c0       	push   0xc002b952
c0018df1:	50                   	push   eax
c0018df2:	e8 ff b6 ff ff       	call   c00144f6 <Device::Device(char const*)>
c0018df7:	83 c4 10             	add    esp,0x10
c0018dfa:	ba 2c ba 02 c0       	mov    edx,0xc002ba2c
c0018dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e03:	89 10                	mov    DWORD PTR [eax],edx
c0018e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e09:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e17:	05 78 01 00 00       	add    eax,0x178
c0018e1c:	83 ec 0c             	sub    esp,0xc
c0018e1f:	50                   	push   eax
c0018e20:	e8 3b 62 ff ff       	call   c000f060 <GDT::GDT()>
c0018e25:	83 c4 10             	add    esp,0x10
c0018e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e2c:	05 7c 09 00 00       	add    eax,0x97c
c0018e31:	83 ec 0c             	sub    esp,0xc
c0018e34:	50                   	push   eax
c0018e35:	e8 88 64 ff ff       	call   c000f2c2 <IDT::IDT()>
c0018e3a:	83 c4 10             	add    esp,0x10
c0018e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e41:	05 7c 11 00 00       	add    eax,0x117c
c0018e46:	83 ec 0c             	sub    esp,0xc
c0018e49:	50                   	push   eax
c0018e4a:	e8 2d 86 ff ff       	call   c001147c <TSS::TSS()>
c0018e4f:	83 c4 10             	add    esp,0x10
c0018e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e56:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e61:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e6b:	90                   	nop
c0018e6c:	83 c4 0c             	add    esp,0xc
c0018e6f:	c3                   	ret    

c0018e70 <CPU::displayFeatures()>:
c0018e70:	53                   	push   ebx
c0018e71:	83 ec 10             	sub    esp,0x10
c0018e74:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e78:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e7e:	68 60 b6 02 c0       	push   0xc002b660
c0018e83:	e8 57 a0 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018e88:	59                   	pop    ecx
c0018e89:	58                   	pop    eax
c0018e8a:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e90:	50                   	push   eax
c0018e91:	68 71 b6 02 c0       	push   0xc002b671
c0018e96:	e8 44 a0 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018e9b:	58                   	pop    eax
c0018e9c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ea2:	5a                   	pop    edx
c0018ea3:	c1 e8 0e             	shr    eax,0xe
c0018ea6:	0f b6 c0             	movzx  eax,al
c0018ea9:	50                   	push   eax
c0018eaa:	68 82 b6 02 c0       	push   0xc002b682
c0018eaf:	e8 2b a0 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018eb4:	59                   	pop    ecx
c0018eb5:	58                   	pop    eax
c0018eb6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ebc:	66 c1 e8 06          	shr    ax,0x6
c0018ec0:	0f b6 c0             	movzx  eax,al
c0018ec3:	50                   	push   eax
c0018ec4:	68 93 b6 02 c0       	push   0xc002b693
c0018ec9:	e8 11 a0 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018ece:	c7 04 24 40 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb40
c0018ed5:	e8 05 a0 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018eda:	83 c4 10             	add    esp,0x10
c0018edd:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0018ee2:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018ee9:	74 05                	je     c0018ef0 <CPU::displayFeatures()+0x80>
c0018eeb:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018ef0:	52                   	push   edx
c0018ef1:	52                   	push   edx
c0018ef2:	50                   	push   eax
c0018ef3:	68 a4 b6 02 c0       	push   0xc002b6a4
c0018ef8:	e8 e2 9f ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018efd:	83 c4 10             	add    esp,0x10
c0018f00:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018f05:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f0c:	78 05                	js     c0018f13 <CPU::displayFeatures()+0xa3>
c0018f0e:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0018f13:	51                   	push   ecx
c0018f14:	51                   	push   ecx
c0018f15:	50                   	push   eax
c0018f16:	68 bb b6 02 c0       	push   0xc002b6bb
c0018f1b:	e8 bf 9f ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018f20:	83 c4 10             	add    esp,0x10
c0018f23:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018f28:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f2f:	75 05                	jne    c0018f36 <CPU::displayFeatures()+0xc6>
c0018f31:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0018f36:	52                   	push   edx
c0018f37:	52                   	push   edx
c0018f38:	50                   	push   eax
c0018f39:	68 d2 b6 02 c0       	push   0xc002b6d2
c0018f3e:	e8 9c 9f ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018f43:	83 c4 10             	add    esp,0x10
c0018f46:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018f4b:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f52:	75 05                	jne    c0018f59 <CPU::displayFeatures()+0xe9>
c0018f54:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0018f59:	51                   	push   ecx
c0018f5a:	51                   	push   ecx
c0018f5b:	50                   	push   eax
c0018f5c:	68 e9 b6 02 c0       	push   0xc002b6e9
c0018f61:	e8 79 9f ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018f66:	83 c4 10             	add    esp,0x10
c0018f69:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018f6e:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f75:	75 05                	jne    c0018f7c <CPU::displayFeatures()+0x10c>
c0018f77:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0018f7c:	52                   	push   edx
c0018f7d:	52                   	push   edx
c0018f7e:	50                   	push   eax
c0018f7f:	68 00 b7 02 c0       	push   0xc002b700
c0018f84:	e8 56 9f ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018f89:	83 c4 10             	add    esp,0x10
c0018f8c:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018f91:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f98:	75 05                	jne    c0018f9f <CPU::displayFeatures()+0x12f>
c0018f9a:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0018f9f:	51                   	push   ecx
c0018fa0:	51                   	push   ecx
c0018fa1:	50                   	push   eax
c0018fa2:	68 17 b7 02 c0       	push   0xc002b717
c0018fa7:	e8 33 9f ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018fac:	83 c4 10             	add    esp,0x10
c0018faf:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018fb4:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018fbb:	75 05                	jne    c0018fc2 <CPU::displayFeatures()+0x152>
c0018fbd:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0018fc2:	52                   	push   edx
c0018fc3:	52                   	push   edx
c0018fc4:	50                   	push   eax
c0018fc5:	68 2e b7 02 c0       	push   0xc002b72e
c0018fca:	e8 10 9f ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018fcf:	83 c4 10             	add    esp,0x10
c0018fd2:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018fd7:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018fde:	75 05                	jne    c0018fe5 <CPU::displayFeatures()+0x175>
c0018fe0:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0018fe5:	51                   	push   ecx
c0018fe6:	51                   	push   ecx
c0018fe7:	50                   	push   eax
c0018fe8:	68 45 b7 02 c0       	push   0xc002b745
c0018fed:	e8 ed 9e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0018ff2:	83 c4 10             	add    esp,0x10
c0018ff5:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0018ffa:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019001:	75 05                	jne    c0019008 <CPU::displayFeatures()+0x198>
c0019003:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0019008:	52                   	push   edx
c0019009:	52                   	push   edx
c001900a:	50                   	push   eax
c001900b:	68 5c b7 02 c0       	push   0xc002b75c
c0019010:	e8 ca 9e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0019015:	83 c4 10             	add    esp,0x10
c0019018:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c001901d:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019024:	75 05                	jne    c001902b <CPU::displayFeatures()+0x1bb>
c0019026:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c001902b:	51                   	push   ecx
c001902c:	51                   	push   ecx
c001902d:	50                   	push   eax
c001902e:	68 73 b7 02 c0       	push   0xc002b773
c0019033:	e8 a7 9e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0019038:	83 c4 10             	add    esp,0x10
c001903b:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0019040:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019047:	75 05                	jne    c001904e <CPU::displayFeatures()+0x1de>
c0019049:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c001904e:	52                   	push   edx
c001904f:	52                   	push   edx
c0019050:	50                   	push   eax
c0019051:	68 8a b7 02 c0       	push   0xc002b78a
c0019056:	e8 84 9e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001905b:	83 c4 10             	add    esp,0x10
c001905e:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0019063:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001906a:	75 05                	jne    c0019071 <CPU::displayFeatures()+0x201>
c001906c:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0019071:	51                   	push   ecx
c0019072:	51                   	push   ecx
c0019073:	50                   	push   eax
c0019074:	68 a1 b7 02 c0       	push   0xc002b7a1
c0019079:	e8 61 9e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001907e:	83 c4 10             	add    esp,0x10
c0019081:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c0019086:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001908d:	75 05                	jne    c0019094 <CPU::displayFeatures()+0x224>
c001908f:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c0019094:	52                   	push   edx
c0019095:	52                   	push   edx
c0019096:	50                   	push   eax
c0019097:	68 b8 b7 02 c0       	push   0xc002b7b8
c001909c:	e8 3e 9e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00190a1:	83 c4 10             	add    esp,0x10
c00190a4:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c00190a9:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00190b0:	78 05                	js     c00190b7 <CPU::displayFeatures()+0x247>
c00190b2:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c00190b7:	51                   	push   ecx
c00190b8:	51                   	push   ecx
c00190b9:	50                   	push   eax
c00190ba:	68 cf b7 02 c0       	push   0xc002b7cf
c00190bf:	e8 1b 9e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00190c4:	83 c4 10             	add    esp,0x10
c00190c7:	b8 72 a0 02 c0       	mov    eax,0xc002a072
c00190cc:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00190d3:	75 05                	jne    c00190da <CPU::displayFeatures()+0x26a>
c00190d5:	b8 76 a0 02 c0       	mov    eax,0xc002a076
c00190da:	52                   	push   edx
c00190db:	52                   	push   edx
c00190dc:	50                   	push   eax
c00190dd:	68 e6 b7 02 c0       	push   0xc002b7e6
c00190e2:	e8 f8 9d ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00190e7:	83 c4 18             	add    esp,0x18
c00190ea:	5b                   	pop    ebx
c00190eb:	c3                   	ret    

c00190ec <CPU::detectFeatures()>:
c00190ec:	55                   	push   ebp
c00190ed:	57                   	push   edi
c00190ee:	56                   	push   esi
c00190ef:	53                   	push   ebx
c00190f0:	83 ec 50             	sub    esp,0x50
c00190f3:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00190f7:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019101:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019108:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001910e:	6a 0d                	push   0xd
c0019110:	6a 00                	push   0x0
c0019112:	57                   	push   edi
c0019113:	e8 68 76 fe ff       	call   c0000780 <memset>
c0019118:	83 c4 10             	add    esp,0x10
c001911b:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0019120:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019127:	0f 84 20 09 00 00    	je     c0019a4d <CPU::detectFeatures()+0x961>
c001912d:	83 ec 0c             	sub    esp,0xc
c0019130:	6a 10                	push   0x10
c0019132:	e8 f3 fb ff ff       	call   c0018d2a <CPU::cpuidCheckEDX(unsigned int)>
c0019137:	83 e0 01             	and    eax,0x1
c001913a:	8d 14 00             	lea    edx,[eax+eax*1]
c001913d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019143:	83 e0 fd             	and    eax,0xfffffffd
c0019146:	09 d0                	or     eax,edx
c0019148:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001914e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019155:	e8 d0 fb ff ff       	call   c0018d2a <CPU::cpuidCheckEDX(unsigned int)>
c001915a:	83 e0 01             	and    eax,0x1
c001915d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019164:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001916a:	83 e0 fb             	and    eax,0xfffffffb
c001916d:	09 d0                	or     eax,edx
c001916f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019175:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001917c:	e8 a9 fb ff ff       	call   c0018d2a <CPU::cpuidCheckEDX(unsigned int)>
c0019181:	83 e0 01             	and    eax,0x1
c0019184:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001918b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019191:	83 e0 f7             	and    eax,0xfffffff7
c0019194:	09 d0                	or     eax,edx
c0019196:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001919c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00191a3:	e8 82 fb ff ff       	call   c0018d2a <CPU::cpuidCheckEDX(unsigned int)>
c00191a8:	83 e0 01             	and    eax,0x1
c00191ab:	c1 e0 04             	shl    eax,0x4
c00191ae:	88 c2                	mov    dl,al
c00191b0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191b6:	83 e0 ef             	and    eax,0xffffffef
c00191b9:	09 d0                	or     eax,edx
c00191bb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191c1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00191c8:	e8 5d fb ff ff       	call   c0018d2a <CPU::cpuidCheckEDX(unsigned int)>
c00191cd:	83 e0 01             	and    eax,0x1
c00191d0:	c1 e0 05             	shl    eax,0x5
c00191d3:	88 c2                	mov    dl,al
c00191d5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191db:	83 e0 df             	and    eax,0xffffffdf
c00191de:	09 d0                	or     eax,edx
c00191e0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191e6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00191ed:	e8 38 fb ff ff       	call   c0018d2a <CPU::cpuidCheckEDX(unsigned int)>
c00191f2:	83 e0 01             	and    eax,0x1
c00191f5:	8d 14 00             	lea    edx,[eax+eax*1]
c00191f8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191fe:	83 e0 fd             	and    eax,0xfffffffd
c0019201:	09 d0                	or     eax,edx
c0019203:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019209:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019210:	e8 15 fb ff ff       	call   c0018d2a <CPU::cpuidCheckEDX(unsigned int)>
c0019215:	83 e0 01             	and    eax,0x1
c0019218:	c1 e0 06             	shl    eax,0x6
c001921b:	88 c2                	mov    dl,al
c001921d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019223:	83 e0 bf             	and    eax,0xffffffbf
c0019226:	09 d0                	or     eax,edx
c0019228:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001922e:	58                   	pop    eax
c001922f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019233:	56                   	push   esi
c0019234:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019238:	55                   	push   ebp
c0019239:	8d 44 24 28          	lea    eax,[esp+0x28]
c001923d:	50                   	push   eax
c001923e:	8d 54 24 28          	lea    edx,[esp+0x28]
c0019242:	52                   	push   edx
c0019243:	6a 00                	push   0x0
c0019245:	e8 5c fa ff ff       	call   c0018ca6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001924a:	83 c4 1c             	add    esp,0x1c
c001924d:	6a 04                	push   0x4
c001924f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019253:	50                   	push   eax
c0019254:	57                   	push   edi
c0019255:	e8 f2 74 fe ff       	call   c000074c <memcpy>
c001925a:	83 c4 0c             	add    esp,0xc
c001925d:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019263:	6a 04                	push   0x4
c0019265:	56                   	push   esi
c0019266:	50                   	push   eax
c0019267:	e8 e0 74 fe ff       	call   c000074c <memcpy>
c001926c:	83 c4 0c             	add    esp,0xc
c001926f:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019275:	6a 04                	push   0x4
c0019277:	55                   	push   ebp
c0019278:	50                   	push   eax
c0019279:	e8 ce 74 fe ff       	call   c000074c <memcpy>
c001927e:	58                   	pop    eax
c001927f:	5a                   	pop    edx
c0019280:	68 fd b7 02 c0       	push   0xc002b7fd
c0019285:	57                   	push   edi
c0019286:	e8 3d 76 fe ff       	call   c00008c8 <strcmp>
c001928b:	83 c4 10             	add    esp,0x10
c001928e:	85 c0                	test   eax,eax
c0019290:	75 0f                	jne    c00192a1 <CPU::detectFeatures()+0x1b5>
c0019292:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001929c:	e9 22 02 00 00       	jmp    c00194c3 <CPU::detectFeatures()+0x3d7>
c00192a1:	50                   	push   eax
c00192a2:	50                   	push   eax
c00192a3:	68 0a b8 02 c0       	push   0xc002b80a
c00192a8:	57                   	push   edi
c00192a9:	e8 1a 76 fe ff       	call   c00008c8 <strcmp>
c00192ae:	83 c4 10             	add    esp,0x10
c00192b1:	85 c0                	test   eax,eax
c00192b3:	74 dd                	je     c0019292 <CPU::detectFeatures()+0x1a6>
c00192b5:	51                   	push   ecx
c00192b6:	51                   	push   ecx
c00192b7:	68 17 b8 02 c0       	push   0xc002b817
c00192bc:	57                   	push   edi
c00192bd:	e8 06 76 fe ff       	call   c00008c8 <strcmp>
c00192c2:	83 c4 10             	add    esp,0x10
c00192c5:	85 c0                	test   eax,eax
c00192c7:	74 2a                	je     c00192f3 <CPU::detectFeatures()+0x207>
c00192c9:	52                   	push   edx
c00192ca:	52                   	push   edx
c00192cb:	68 24 b8 02 c0       	push   0xc002b824
c00192d0:	57                   	push   edi
c00192d1:	e8 f2 75 fe ff       	call   c00008c8 <strcmp>
c00192d6:	83 c4 10             	add    esp,0x10
c00192d9:	85 c0                	test   eax,eax
c00192db:	74 16                	je     c00192f3 <CPU::detectFeatures()+0x207>
c00192dd:	50                   	push   eax
c00192de:	50                   	push   eax
c00192df:	68 31 b8 02 c0       	push   0xc002b831
c00192e4:	57                   	push   edi
c00192e5:	e8 de 75 fe ff       	call   c00008c8 <strcmp>
c00192ea:	83 c4 10             	add    esp,0x10
c00192ed:	85 c0                	test   eax,eax
c00192ef:	74 48                	je     c0019339 <CPU::detectFeatures()+0x24d>
c00192f1:	eb 0f                	jmp    c0019302 <CPU::detectFeatures()+0x216>
c00192f3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00192fd:	e9 c1 01 00 00       	jmp    c00194c3 <CPU::detectFeatures()+0x3d7>
c0019302:	50                   	push   eax
c0019303:	50                   	push   eax
c0019304:	68 3e b8 02 c0       	push   0xc002b83e
c0019309:	57                   	push   edi
c001930a:	e8 b9 75 fe ff       	call   c00008c8 <strcmp>
c001930f:	83 c4 10             	add    esp,0x10
c0019312:	85 c0                	test   eax,eax
c0019314:	74 23                	je     c0019339 <CPU::detectFeatures()+0x24d>
c0019316:	50                   	push   eax
c0019317:	50                   	push   eax
c0019318:	68 4b b8 02 c0       	push   0xc002b84b
c001931d:	57                   	push   edi
c001931e:	e8 a5 75 fe ff       	call   c00008c8 <strcmp>
c0019323:	83 c4 10             	add    esp,0x10
c0019326:	85 c0                	test   eax,eax
c0019328:	75 1e                	jne    c0019348 <CPU::detectFeatures()+0x25c>
c001932a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019334:	e9 8a 01 00 00       	jmp    c00194c3 <CPU::detectFeatures()+0x3d7>
c0019339:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019343:	e9 7b 01 00 00       	jmp    c00194c3 <CPU::detectFeatures()+0x3d7>
c0019348:	50                   	push   eax
c0019349:	50                   	push   eax
c001934a:	68 58 b8 02 c0       	push   0xc002b858
c001934f:	57                   	push   edi
c0019350:	e8 73 75 fe ff       	call   c00008c8 <strcmp>
c0019355:	83 c4 10             	add    esp,0x10
c0019358:	85 c0                	test   eax,eax
c001935a:	75 0f                	jne    c001936b <CPU::detectFeatures()+0x27f>
c001935c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019366:	e9 58 01 00 00       	jmp    c00194c3 <CPU::detectFeatures()+0x3d7>
c001936b:	50                   	push   eax
c001936c:	50                   	push   eax
c001936d:	68 17 b8 02 c0       	push   0xc002b817
c0019372:	57                   	push   edi
c0019373:	e8 50 75 fe ff       	call   c00008c8 <strcmp>
c0019378:	83 c4 10             	add    esp,0x10
c001937b:	85 c0                	test   eax,eax
c001937d:	75 0f                	jne    c001938e <CPU::detectFeatures()+0x2a2>
c001937f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019389:	e9 35 01 00 00       	jmp    c00194c3 <CPU::detectFeatures()+0x3d7>
c001938e:	50                   	push   eax
c001938f:	50                   	push   eax
c0019390:	68 65 b8 02 c0       	push   0xc002b865
c0019395:	57                   	push   edi
c0019396:	e8 2d 75 fe ff       	call   c00008c8 <strcmp>
c001939b:	83 c4 10             	add    esp,0x10
c001939e:	85 c0                	test   eax,eax
c00193a0:	75 0f                	jne    c00193b1 <CPU::detectFeatures()+0x2c5>
c00193a2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00193ac:	e9 12 01 00 00       	jmp    c00194c3 <CPU::detectFeatures()+0x3d7>
c00193b1:	51                   	push   ecx
c00193b2:	51                   	push   ecx
c00193b3:	68 72 b8 02 c0       	push   0xc002b872
c00193b8:	57                   	push   edi
c00193b9:	e8 0a 75 fe ff       	call   c00008c8 <strcmp>
c00193be:	83 c4 10             	add    esp,0x10
c00193c1:	85 c0                	test   eax,eax
c00193c3:	75 0f                	jne    c00193d4 <CPU::detectFeatures()+0x2e8>
c00193c5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00193cf:	e9 ef 00 00 00       	jmp    c00194c3 <CPU::detectFeatures()+0x3d7>
c00193d4:	52                   	push   edx
c00193d5:	52                   	push   edx
c00193d6:	68 7f b8 02 c0       	push   0xc002b87f
c00193db:	57                   	push   edi
c00193dc:	e8 e7 74 fe ff       	call   c00008c8 <strcmp>
c00193e1:	83 c4 10             	add    esp,0x10
c00193e4:	85 c0                	test   eax,eax
c00193e6:	75 0f                	jne    c00193f7 <CPU::detectFeatures()+0x30b>
c00193e8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00193f2:	e9 cc 00 00 00       	jmp    c00194c3 <CPU::detectFeatures()+0x3d7>
c00193f7:	50                   	push   eax
c00193f8:	50                   	push   eax
c00193f9:	68 8c b8 02 c0       	push   0xc002b88c
c00193fe:	57                   	push   edi
c00193ff:	e8 c4 74 fe ff       	call   c00008c8 <strcmp>
c0019404:	83 c4 10             	add    esp,0x10
c0019407:	85 c0                	test   eax,eax
c0019409:	75 0f                	jne    c001941a <CPU::detectFeatures()+0x32e>
c001940b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019415:	e9 a9 00 00 00       	jmp    c00194c3 <CPU::detectFeatures()+0x3d7>
c001941a:	50                   	push   eax
c001941b:	50                   	push   eax
c001941c:	68 99 b8 02 c0       	push   0xc002b899
c0019421:	57                   	push   edi
c0019422:	e8 a1 74 fe ff       	call   c00008c8 <strcmp>
c0019427:	83 c4 10             	add    esp,0x10
c001942a:	85 c0                	test   eax,eax
c001942c:	75 0f                	jne    c001943d <CPU::detectFeatures()+0x351>
c001942e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019438:	e9 86 00 00 00       	jmp    c00194c3 <CPU::detectFeatures()+0x3d7>
c001943d:	50                   	push   eax
c001943e:	50                   	push   eax
c001943f:	68 a6 b8 02 c0       	push   0xc002b8a6
c0019444:	57                   	push   edi
c0019445:	e8 7e 74 fe ff       	call   c00008c8 <strcmp>
c001944a:	83 c4 10             	add    esp,0x10
c001944d:	85 c0                	test   eax,eax
c001944f:	75 0c                	jne    c001945d <CPU::detectFeatures()+0x371>
c0019451:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001945b:	eb 66                	jmp    c00194c3 <CPU::detectFeatures()+0x3d7>
c001945d:	50                   	push   eax
c001945e:	50                   	push   eax
c001945f:	68 b3 b8 02 c0       	push   0xc002b8b3
c0019464:	57                   	push   edi
c0019465:	e8 5e 74 fe ff       	call   c00008c8 <strcmp>
c001946a:	83 c4 10             	add    esp,0x10
c001946d:	85 c0                	test   eax,eax
c001946f:	75 0c                	jne    c001947d <CPU::detectFeatures()+0x391>
c0019471:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001947b:	eb 46                	jmp    c00194c3 <CPU::detectFeatures()+0x3d7>
c001947d:	50                   	push   eax
c001947e:	50                   	push   eax
c001947f:	68 c0 b8 02 c0       	push   0xc002b8c0
c0019484:	57                   	push   edi
c0019485:	e8 3e 74 fe ff       	call   c00008c8 <strcmp>
c001948a:	83 c4 10             	add    esp,0x10
c001948d:	85 c0                	test   eax,eax
c001948f:	74 e0                	je     c0019471 <CPU::detectFeatures()+0x385>
c0019491:	50                   	push   eax
c0019492:	50                   	push   eax
c0019493:	68 cd b8 02 c0       	push   0xc002b8cd
c0019498:	57                   	push   edi
c0019499:	e8 2a 74 fe ff       	call   c00008c8 <strcmp>
c001949e:	83 c4 10             	add    esp,0x10
c00194a1:	85 c0                	test   eax,eax
c00194a3:	74 cc                	je     c0019471 <CPU::detectFeatures()+0x385>
c00194a5:	51                   	push   ecx
c00194a6:	51                   	push   ecx
c00194a7:	68 da b8 02 c0       	push   0xc002b8da
c00194ac:	57                   	push   edi
c00194ad:	e8 16 74 fe ff       	call   c00008c8 <strcmp>
c00194b2:	83 c4 10             	add    esp,0x10
c00194b5:	85 c0                	test   eax,eax
c00194b7:	74 b8                	je     c0019471 <CPU::detectFeatures()+0x385>
c00194b9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00194c3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00194c8:	0f 86 be 00 00 00    	jbe    c001958c <CPU::detectFeatures()+0x4a0>
c00194ce:	83 ec 0c             	sub    esp,0xc
c00194d1:	68 80 00 00 00       	push   0x80
c00194d6:	e8 ab f8 ff ff       	call   c0018d86 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194db:	83 e0 01             	and    eax,0x1
c00194de:	c1 e0 06             	shl    eax,0x6
c00194e1:	88 c2                	mov    dl,al
c00194e3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194e9:	83 e0 bf             	and    eax,0xffffffbf
c00194ec:	09 d0                	or     eax,edx
c00194ee:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194f4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00194fb:	e8 86 f8 ff ff       	call   c0018d86 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019500:	83 e0 01             	and    eax,0x1
c0019503:	c1 e0 04             	shl    eax,0x4
c0019506:	88 c2                	mov    dl,al
c0019508:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001950e:	83 e0 ef             	and    eax,0xffffffef
c0019511:	09 d0                	or     eax,edx
c0019513:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019519:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019520:	e8 61 f8 ff ff       	call   c0018d86 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019525:	c1 e0 07             	shl    eax,0x7
c0019528:	88 c2                	mov    dl,al
c001952a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019530:	83 e0 7f             	and    eax,0x7f
c0019533:	09 d0                	or     eax,edx
c0019535:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001953b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019542:	e8 6d f8 ff ff       	call   c0018db4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019547:	83 e0 01             	and    eax,0x1
c001954a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019551:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019557:	83 e0 f7             	and    eax,0xfffffff7
c001955a:	09 d0                	or     eax,edx
c001955c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019562:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019569:	e8 46 f8 ff ff       	call   c0018db4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001956e:	83 c4 10             	add    esp,0x10
c0019571:	83 e0 01             	and    eax,0x1
c0019574:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001957b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019581:	83 e0 fb             	and    eax,0xfffffffb
c0019584:	09 d0                	or     eax,edx
c0019586:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001958c:	83 ec 0c             	sub    esp,0xc
c001958f:	56                   	push   esi
c0019590:	55                   	push   ebp
c0019591:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019595:	57                   	push   edi
c0019596:	8d 44 24 28          	lea    eax,[esp+0x28]
c001959a:	50                   	push   eax
c001959b:	6a 01                	push   0x1
c001959d:	e8 04 f7 ff ff       	call   c0018ca6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195a2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00195a6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00195ac:	88 ca                	mov    dl,cl
c00195ae:	83 e0 f0             	and    eax,0xfffffff0
c00195b1:	83 e2 0f             	and    edx,0xf
c00195b4:	09 d0                	or     eax,edx
c00195b6:	88 ca                	mov    dl,cl
c00195b8:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00195be:	c0 ea 04             	shr    dl,0x4
c00195c1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00195c5:	0f b6 c2             	movzx  eax,dl
c00195c8:	83 c4 20             	add    esp,0x20
c00195cb:	c1 e0 06             	shl    eax,0x6
c00195ce:	89 c5                	mov    ebp,eax
c00195d0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195d6:	66 25 3f c0          	and    ax,0xc03f
c00195da:	09 e8                	or     eax,ebp
c00195dc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195e3:	89 c8                	mov    eax,ecx
c00195e5:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00195eb:	c1 e8 08             	shr    eax,0x8
c00195ee:	83 e2 3f             	and    edx,0x3f
c00195f1:	83 e0 0f             	and    eax,0xf
c00195f4:	89 c5                	mov    ebp,eax
c00195f6:	c1 e5 06             	shl    ebp,0x6
c00195f9:	09 d5                	or     ebp,edx
c00195fb:	89 ea                	mov    edx,ebp
c00195fd:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019603:	88 c2                	mov    dl,al
c0019605:	c0 ea 02             	shr    dl,0x2
c0019608:	89 d5                	mov    ebp,edx
c001960a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019610:	83 e2 c0             	and    edx,0xffffffc0
c0019613:	09 d5                	or     ebp,edx
c0019615:	89 ea                	mov    edx,ebp
c0019617:	89 cd                	mov    ebp,ecx
c0019619:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001961f:	c1 ed 0c             	shr    ebp,0xc
c0019622:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019628:	83 e5 03             	and    ebp,0x3
c001962b:	83 e2 cf             	and    edx,0xffffffcf
c001962e:	c1 e5 04             	shl    ebp,0x4
c0019631:	09 d5                	or     ebp,edx
c0019633:	3c 06                	cmp    al,0x6
c0019635:	89 ea                	mov    edx,ebp
c0019637:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001963d:	74 04                	je     c0019643 <CPU::detectFeatures()+0x557>
c001963f:	3c 0f                	cmp    al,0xf
c0019641:	75 5c                	jne    c001969f <CPU::detectFeatures()+0x5b3>
c0019643:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019647:	89 cd                	mov    ebp,ecx
c0019649:	c1 ed 10             	shr    ebp,0x10
c001964c:	c1 e5 04             	shl    ebp,0x4
c001964f:	09 ea                	or     edx,ebp
c0019651:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019657:	0f b6 d2             	movzx  edx,dl
c001965a:	66 81 e5 3f c0       	and    bp,0xc03f
c001965f:	c1 e2 06             	shl    edx,0x6
c0019662:	09 ea                	or     edx,ebp
c0019664:	3c 0f                	cmp    al,0xf
c0019666:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001966d:	75 30                	jne    c001969f <CPU::detectFeatures()+0x5b3>
c001966f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019675:	c1 e9 14             	shr    ecx,0x14
c0019678:	83 e0 3f             	and    eax,0x3f
c001967b:	83 c1 0f             	add    ecx,0xf
c001967e:	88 ca                	mov    dl,cl
c0019680:	c0 e9 02             	shr    cl,0x2
c0019683:	c1 e2 06             	shl    edx,0x6
c0019686:	09 d0                	or     eax,edx
c0019688:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001968e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019694:	83 e0 c0             	and    eax,0xffffffc0
c0019697:	09 c1                	or     ecx,eax
c0019699:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001969f:	83 ec 0c             	sub    esp,0xc
c00196a2:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00196a9:	56                   	push   esi
c00196aa:	8d 44 24 28          	lea    eax,[esp+0x28]
c00196ae:	50                   	push   eax
c00196af:	57                   	push   edi
c00196b0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00196b4:	55                   	push   ebp
c00196b5:	68 00 00 00 80       	push   0x80000000
c00196ba:	e8 e7 f5 ff ff       	call   c0018ca6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196bf:	83 c4 20             	add    esp,0x20
c00196c2:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00196ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196ce:	76 1e                	jbe    c00196ee <CPU::detectFeatures()+0x602>
c00196d0:	83 ec 0c             	sub    esp,0xc
c00196d3:	56                   	push   esi
c00196d4:	50                   	push   eax
c00196d5:	57                   	push   edi
c00196d6:	55                   	push   ebp
c00196d7:	68 01 00 00 80       	push   0x80000001
c00196dc:	e8 c5 f5 ff ff       	call   c0018ca6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196e1:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00196eb:	83 c4 20             	add    esp,0x20
c00196ee:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00196f4:	83 f8 01             	cmp    eax,0x1
c00196f7:	75 6f                	jne    c0019768 <CPU::detectFeatures()+0x67c>
c00196f9:	51                   	push   ecx
c00196fa:	51                   	push   ecx
c00196fb:	68 e6 b8 02 c0       	push   0xc002b8e6
c0019700:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019704:	56                   	push   esi
c0019705:	e8 32 71 fe ff       	call   c000083c <strcpy>
c001970a:	5f                   	pop    edi
c001970b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019711:	5d                   	pop    ebp
c0019712:	66 c1 e8 06          	shr    ax,0x6
c0019716:	0f b6 c0             	movzx  eax,al
c0019719:	50                   	push   eax
c001971a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019720:	c1 e8 0e             	shr    eax,0xe
c0019723:	0f b6 c0             	movzx  eax,al
c0019726:	50                   	push   eax
c0019727:	e8 24 f2 ff ff       	call   c0018950 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001972c:	5a                   	pop    edx
c001972d:	59                   	pop    ecx
c001972e:	50                   	push   eax
c001972f:	56                   	push   esi
c0019730:	e8 47 72 fe ff       	call   c000097c <strcat>
c0019735:	5f                   	pop    edi
c0019736:	5d                   	pop    ebp
c0019737:	56                   	push   esi
c0019738:	53                   	push   ebx
c0019739:	e8 aa ad ff ff       	call   c00144e8 <Device::setName(char const*)>
c001973e:	58                   	pop    eax
c001973f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019745:	5a                   	pop    edx
c0019746:	68 ed b8 02 c0       	push   0xc002b8ed
c001974b:	50                   	push   eax
c001974c:	e8 77 71 fe ff       	call   c00008c8 <strcmp>
c0019751:	83 c4 10             	add    esp,0x10
c0019754:	85 c0                	test   eax,eax
c0019756:	0f 85 71 03 00 00    	jne    c0019acd <CPU::detectFeatures()+0x9e1>
c001975c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019763:	e9 65 03 00 00       	jmp    c0019acd <CPU::detectFeatures()+0x9e1>
c0019768:	83 f8 02             	cmp    eax,0x2
c001976b:	0f 85 b5 00 00 00    	jne    c0019826 <CPU::detectFeatures()+0x73a>
c0019771:	57                   	push   edi
c0019772:	57                   	push   edi
c0019773:	68 ff b8 02 c0       	push   0xc002b8ff
c0019778:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001977c:	56                   	push   esi
c001977d:	e8 ba 70 fe ff       	call   c000083c <strcpy>
c0019782:	5d                   	pop    ebp
c0019783:	58                   	pop    eax
c0019784:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001978a:	66 c1 e8 06          	shr    ax,0x6
c001978e:	0f b6 c0             	movzx  eax,al
c0019791:	50                   	push   eax
c0019792:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019798:	c1 e8 0e             	shr    eax,0xe
c001979b:	0f b6 c0             	movzx  eax,al
c001979e:	50                   	push   eax
c001979f:	e8 18 f0 ff ff       	call   c00187bc <CPU::lookupAMDName(unsigned char, unsigned char)>
c00197a4:	5a                   	pop    edx
c00197a5:	59                   	pop    ecx
c00197a6:	50                   	push   eax
c00197a7:	56                   	push   esi
c00197a8:	e8 cf 71 fe ff       	call   c000097c <strcat>
c00197ad:	5f                   	pop    edi
c00197ae:	5d                   	pop    ebp
c00197af:	56                   	push   esi
c00197b0:	53                   	push   ebx
c00197b1:	e8 32 ad ff ff       	call   c00144e8 <Device::setName(char const*)>
c00197b6:	58                   	pop    eax
c00197b7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197bd:	5a                   	pop    edx
c00197be:	68 04 b9 02 c0       	push   0xc002b904
c00197c3:	50                   	push   eax
c00197c4:	e8 ff 70 fe ff       	call   c00008c8 <strcmp>
c00197c9:	83 c4 10             	add    esp,0x10
c00197cc:	85 c0                	test   eax,eax
c00197ce:	75 20                	jne    c00197f0 <CPU::detectFeatures()+0x704>
c00197d0:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c00197d6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00197dc:	a8 01                	test   al,0x1
c00197de:	74 10                	je     c00197f0 <CPU::detectFeatures()+0x704>
c00197e0:	83 e0 fe             	and    eax,0xfffffffe
c00197e3:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00197e9:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00197f0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197f6:	c1 e8 0e             	shr    eax,0xe
c00197f9:	3c 05                	cmp    al,0x5
c00197fb:	0f 85 cc 02 00 00    	jne    c0019acd <CPU::detectFeatures()+0x9e1>
c0019801:	56                   	push   esi
c0019802:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019808:	83 e0 0f             	and    eax,0xf
c001980b:	50                   	push   eax
c001980c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019812:	66 c1 e8 06          	shr    ax,0x6
c0019816:	0f b6 c0             	movzx  eax,al
c0019819:	50                   	push   eax
c001981a:	6a 05                	push   0x5
c001981c:	e8 11 f4 ff ff       	call   c0018c32 <CPU::AMD_K6_writeback(int, int, int)>
c0019821:	e9 1f 02 00 00       	jmp    c0019a45 <CPU::detectFeatures()+0x959>
c0019826:	8d 50 fd             	lea    edx,[eax-0x3]
c0019829:	83 fa 01             	cmp    edx,0x1
c001982c:	76 09                	jbe    c0019837 <CPU::detectFeatures()+0x74b>
c001982e:	83 f8 06             	cmp    eax,0x6
c0019831:	0f 85 91 01 00 00    	jne    c00199c8 <CPU::detectFeatures()+0x8dc>
c0019837:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001983d:	c1 ea 0e             	shr    edx,0xe
c0019840:	80 fa 05             	cmp    dl,0x5
c0019843:	75 7b                	jne    c00198c0 <CPU::detectFeatures()+0x7d4>
c0019845:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001984b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019850:	66 81 fa 00 01       	cmp    dx,0x100
c0019855:	75 0c                	jne    c0019863 <CPU::detectFeatures()+0x777>
c0019857:	51                   	push   ecx
c0019858:	51                   	push   ecx
c0019859:	68 0b b9 02 c0       	push   0xc002b90b
c001985e:	e9 dc 01 00 00       	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c0019863:	66 81 fa 00 02       	cmp    dx,0x200
c0019868:	75 0c                	jne    c0019876 <CPU::detectFeatures()+0x78a>
c001986a:	52                   	push   edx
c001986b:	52                   	push   edx
c001986c:	68 1e b9 02 c0       	push   0xc002b91e
c0019871:	e9 c9 01 00 00       	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c0019876:	66 81 fa 40 02       	cmp    dx,0x240
c001987b:	75 0c                	jne    c0019889 <CPU::detectFeatures()+0x79d>
c001987d:	50                   	push   eax
c001987e:	50                   	push   eax
c001987f:	68 30 b9 02 c0       	push   0xc002b930
c0019884:	e9 b6 01 00 00       	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c0019889:	83 f8 06             	cmp    eax,0x6
c001988c:	75 0c                	jne    c001989a <CPU::detectFeatures()+0x7ae>
c001988e:	50                   	push   eax
c001988f:	50                   	push   eax
c0019890:	68 42 b9 02 c0       	push   0xc002b942
c0019895:	e9 a5 01 00 00       	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c001989a:	83 f8 04             	cmp    eax,0x4
c001989d:	75 0c                	jne    c00198ab <CPU::detectFeatures()+0x7bf>
c001989f:	50                   	push   eax
c00198a0:	50                   	push   eax
c00198a1:	68 4e b9 02 c0       	push   0xc002b94e
c00198a6:	e9 94 01 00 00       	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c00198ab:	83 f8 03             	cmp    eax,0x3
c00198ae:	0f 85 19 02 00 00    	jne    c0019acd <CPU::detectFeatures()+0x9e1>
c00198b4:	50                   	push   eax
c00198b5:	50                   	push   eax
c00198b6:	68 56 b9 02 c0       	push   0xc002b956
c00198bb:	e9 7f 01 00 00       	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c00198c0:	80 fa 06             	cmp    dl,0x6
c00198c3:	0f 85 db 00 00 00    	jne    c00199a4 <CPU::detectFeatures()+0x8b8>
c00198c9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198cf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198d4:	66 81 fa 80 01       	cmp    dx,0x180
c00198d9:	75 0c                	jne    c00198e7 <CPU::detectFeatures()+0x7fb>
c00198db:	50                   	push   eax
c00198dc:	50                   	push   eax
c00198dd:	68 61 b9 02 c0       	push   0xc002b961
c00198e2:	e9 58 01 00 00       	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c00198e7:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00198ed:	66 f7 c1 80 ff       	test   cx,0xff80
c00198f2:	75 0c                	jne    c0019900 <CPU::detectFeatures()+0x814>
c00198f4:	50                   	push   eax
c00198f5:	50                   	push   eax
c00198f6:	68 71 b9 02 c0       	push   0xc002b971
c00198fb:	e9 3f 01 00 00       	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c0019900:	66 81 fa 40 02       	cmp    dx,0x240
c0019905:	75 0c                	jne    c0019913 <CPU::detectFeatures()+0x827>
c0019907:	55                   	push   ebp
c0019908:	55                   	push   ebp
c0019909:	68 78 b9 02 c0       	push   0xc002b978
c001990e:	e9 2c 01 00 00       	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c0019913:	66 81 fa 80 02       	cmp    dx,0x280
c0019918:	75 0c                	jne    c0019926 <CPU::detectFeatures()+0x83a>
c001991a:	57                   	push   edi
c001991b:	57                   	push   edi
c001991c:	68 81 b9 02 c0       	push   0xc002b981
c0019921:	e9 19 01 00 00       	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c0019926:	66 81 fa 40 03       	cmp    dx,0x340
c001992b:	74 ed                	je     c001991a <CPU::detectFeatures()+0x82e>
c001992d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019932:	75 0c                	jne    c0019940 <CPU::detectFeatures()+0x854>
c0019934:	56                   	push   esi
c0019935:	56                   	push   esi
c0019936:	68 88 b9 02 c0       	push   0xc002b988
c001993b:	e9 ff 00 00 00       	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c0019940:	83 f8 06             	cmp    eax,0x6
c0019943:	0f 84 45 ff ff ff    	je     c001988e <CPU::detectFeatures()+0x7a2>
c0019949:	83 f8 04             	cmp    eax,0x4
c001994c:	0f 84 4d ff ff ff    	je     c001989f <CPU::detectFeatures()+0x7b3>
c0019952:	83 f8 03             	cmp    eax,0x3
c0019955:	0f 85 72 01 00 00    	jne    c0019acd <CPU::detectFeatures()+0x9e1>
c001995b:	51                   	push   ecx
c001995c:	51                   	push   ecx
c001995d:	68 91 b9 02 c0       	push   0xc002b991
c0019962:	53                   	push   ebx
c0019963:	e8 80 ab ff ff       	call   c00144e8 <Device::setName(char const*)>
c0019968:	b1 c1                	mov    cl,0xc1
c001996a:	88 c8                	mov    al,cl
c001996c:	e6 22                	out    0x22,al
c001996e:	e4 23                	in     al,0x23
c0019970:	88 c2                	mov    dl,al
c0019972:	88 c8                	mov    al,cl
c0019974:	e6 22                	out    0x22,al
c0019976:	88 d0                	mov    al,dl
c0019978:	83 c8 10             	or     eax,0x10
c001997b:	e6 23                	out    0x23,al
c001997d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019984:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019987:	89 d0                	mov    eax,edx
c0019989:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001998f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019993:	40                   	inc    eax
c0019994:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001999a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001999f:	e9 a1 00 00 00       	jmp    c0019a45 <CPU::detectFeatures()+0x959>
c00199a4:	83 f8 06             	cmp    eax,0x6
c00199a7:	0f 84 e1 fe ff ff    	je     c001988e <CPU::detectFeatures()+0x7a2>
c00199ad:	83 f8 04             	cmp    eax,0x4
c00199b0:	0f 84 e9 fe ff ff    	je     c001989f <CPU::detectFeatures()+0x7b3>
c00199b6:	83 f8 03             	cmp    eax,0x3
c00199b9:	0f 85 0e 01 00 00    	jne    c0019acd <CPU::detectFeatures()+0x9e1>
c00199bf:	52                   	push   edx
c00199c0:	52                   	push   edx
c00199c1:	68 9c b9 02 c0       	push   0xc002b99c
c00199c6:	eb 77                	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c00199c8:	83 f8 07             	cmp    eax,0x7
c00199cb:	75 09                	jne    c00199d6 <CPU::detectFeatures()+0x8ea>
c00199cd:	50                   	push   eax
c00199ce:	50                   	push   eax
c00199cf:	68 a6 b9 02 c0       	push   0xc002b9a6
c00199d4:	eb 69                	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c00199d6:	83 f8 0a             	cmp    eax,0xa
c00199d9:	75 09                	jne    c00199e4 <CPU::detectFeatures()+0x8f8>
c00199db:	50                   	push   eax
c00199dc:	50                   	push   eax
c00199dd:	68 b1 b9 02 c0       	push   0xc002b9b1
c00199e2:	eb 5b                	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c00199e4:	83 f8 0b             	cmp    eax,0xb
c00199e7:	75 09                	jne    c00199f2 <CPU::detectFeatures()+0x906>
c00199e9:	50                   	push   eax
c00199ea:	50                   	push   eax
c00199eb:	68 b9 b9 02 c0       	push   0xc002b9b9
c00199f0:	eb 4d                	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c00199f2:	83 f8 08             	cmp    eax,0x8
c00199f5:	75 09                	jne    c0019a00 <CPU::detectFeatures()+0x914>
c00199f7:	50                   	push   eax
c00199f8:	50                   	push   eax
c00199f9:	68 c2 b9 02 c0       	push   0xc002b9c2
c00199fe:	eb 3f                	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c0019a00:	83 f8 09             	cmp    eax,0x9
c0019a03:	75 09                	jne    c0019a0e <CPU::detectFeatures()+0x922>
c0019a05:	50                   	push   eax
c0019a06:	50                   	push   eax
c0019a07:	68 ca b9 02 c0       	push   0xc002b9ca
c0019a0c:	eb 31                	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c0019a0e:	83 f8 05             	cmp    eax,0x5
c0019a11:	75 09                	jne    c0019a1c <CPU::detectFeatures()+0x930>
c0019a13:	50                   	push   eax
c0019a14:	50                   	push   eax
c0019a15:	68 d2 b9 02 c0       	push   0xc002b9d2
c0019a1a:	eb 23                	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c0019a1c:	83 f8 0c             	cmp    eax,0xc
c0019a1f:	75 09                	jne    c0019a2a <CPU::detectFeatures()+0x93e>
c0019a21:	55                   	push   ebp
c0019a22:	55                   	push   ebp
c0019a23:	68 e0 b9 02 c0       	push   0xc002b9e0
c0019a28:	eb 15                	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c0019a2a:	83 f8 0d             	cmp    eax,0xd
c0019a2d:	75 09                	jne    c0019a38 <CPU::detectFeatures()+0x94c>
c0019a2f:	57                   	push   edi
c0019a30:	57                   	push   edi
c0019a31:	68 eb b9 02 c0       	push   0xc002b9eb
c0019a36:	eb 07                	jmp    c0019a3f <CPU::detectFeatures()+0x953>
c0019a38:	56                   	push   esi
c0019a39:	56                   	push   esi
c0019a3a:	68 ff b9 02 c0       	push   0xc002b9ff
c0019a3f:	53                   	push   ebx
c0019a40:	e8 a3 aa ff ff       	call   c00144e8 <Device::setName(char const*)>
c0019a45:	83 c4 10             	add    esp,0x10
c0019a48:	e9 80 00 00 00       	jmp    c0019acd <CPU::detectFeatures()+0x9e1>
c0019a4d:	51                   	push   ecx
c0019a4e:	51                   	push   ecx
c0019a4f:	68 4b b8 02 c0       	push   0xc002b84b
c0019a54:	57                   	push   edi
c0019a55:	e8 e2 6d fe ff       	call   c000083c <strcpy>
c0019a5a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a64:	e8 45 68 fe ff       	call   c00002ae <is486>
c0019a69:	83 c4 10             	add    esp,0x10
c0019a6c:	85 c0                	test   eax,eax
c0019a6e:	74 2b                	je     c0019a9b <CPU::detectFeatures()+0x9af>
c0019a70:	52                   	push   edx
c0019a71:	52                   	push   edx
c0019a72:	68 0b ba 02 c0       	push   0xc002ba0b
c0019a77:	53                   	push   ebx
c0019a78:	e8 6b aa ff ff       	call   c00144e8 <Device::setName(char const*)>
c0019a7d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a84:	0f 20 c0             	mov    eax,cr0
c0019a87:	83 e0 14             	and    eax,0x14
c0019a8a:	83 c4 10             	add    esp,0x10
c0019a8d:	83 f8 04             	cmp    eax,0x4
c0019a90:	75 1f                	jne    c0019ab1 <CPU::detectFeatures()+0x9c5>
c0019a92:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a99:	eb 32                	jmp    c0019acd <CPU::detectFeatures()+0x9e1>
c0019a9b:	50                   	push   eax
c0019a9c:	50                   	push   eax
c0019a9d:	68 16 ba 02 c0       	push   0xc002ba16
c0019aa2:	53                   	push   ebx
c0019aa3:	e8 40 aa ff ff       	call   c00144e8 <Device::setName(char const*)>
c0019aa8:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019aaf:	eb d3                	jmp    c0019a84 <CPU::detectFeatures()+0x998>
c0019ab1:	e8 d3 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019ab6:	83 e0 01             	and    eax,0x1
c0019ab9:	8d 14 00             	lea    edx,[eax+eax*1]
c0019abc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019ac2:	83 e0 fd             	and    eax,0xfffffffd
c0019ac5:	09 d0                	or     eax,edx
c0019ac7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019acd:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019ad4:	83 c4 4c             	add    esp,0x4c
c0019ad7:	5b                   	pop    ebx
c0019ad8:	5e                   	pop    esi
c0019ad9:	5f                   	pop    edi
c0019ada:	5d                   	pop    ebp
c0019adb:	c3                   	ret    

c0019adc <CPU::setupSMEP()>:
c0019adc:	0f 20 e0             	mov    eax,cr4
c0019adf:	0d 00 00 10 00       	or     eax,0x100000
c0019ae4:	0f 22 e0             	mov    cr4,eax
c0019ae7:	c3                   	ret    

c0019ae8 <CPU::setupUMIP()>:
c0019ae8:	0f 20 e0             	mov    eax,cr4
c0019aeb:	80 cc 08             	or     ah,0x8
c0019aee:	0f 22 e0             	mov    cr4,eax
c0019af1:	c3                   	ret    

c0019af2 <CPU::setupTSC()>:
c0019af2:	0f 20 e0             	mov    eax,cr4
c0019af5:	83 c8 04             	or     eax,0x4
c0019af8:	0f 22 e0             	mov    cr4,eax
c0019afb:	c3                   	ret    

c0019afc <CPU::setupLargePages()>:
c0019afc:	0f 20 e0             	mov    eax,cr4
c0019aff:	83 c8 10             	or     eax,0x10
c0019b02:	0f 22 e0             	mov    cr4,eax
c0019b05:	c3                   	ret    

c0019b06 <CPU::setupPAT()>:
c0019b06:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0019b0b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b12:	74 2c                	je     c0019b40 <CPU::setupPAT()+0x3a>
c0019b14:	53                   	push   ebx
c0019b15:	83 ec 10             	sub    esp,0x10
c0019b18:	68 77 02 00 00       	push   0x277
c0019b1d:	50                   	push   eax
c0019b1e:	e8 cd 52 ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0019b23:	83 e2 f8             	and    edx,0xfffffff8
c0019b26:	83 ca 01             	or     edx,0x1
c0019b29:	52                   	push   edx
c0019b2a:	50                   	push   eax
c0019b2b:	68 77 02 00 00       	push   0x277
c0019b30:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c0019b36:	e8 e1 52 ff ff       	call   c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b3b:	83 c4 28             	add    esp,0x28
c0019b3e:	5b                   	pop    ebx
c0019b3f:	c3                   	ret    
c0019b40:	c3                   	ret    
c0019b41:	90                   	nop

c0019b42 <CPU::setupMTRR()>:
c0019b42:	c3                   	ret    
c0019b43:	90                   	nop

c0019b44 <CPU::setupGlobalPages()>:
c0019b44:	0f 20 e0             	mov    eax,cr4
c0019b47:	0c 80                	or     al,0x80
c0019b49:	0f 22 e0             	mov    cr4,eax
c0019b4c:	c3                   	ret    
c0019b4d:	90                   	nop

c0019b4e <CPU::allowUsermodeDataAccess()>:
c0019b4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b52:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b59:	74 03                	je     c0019b5e <CPU::allowUsermodeDataAccess()+0x10>
c0019b5b:	0f 01 cb             	stac   
c0019b5e:	c3                   	ret    
c0019b5f:	90                   	nop

c0019b60 <CPU::prohibitUsermodeDataAccess()>:
c0019b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b64:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b6b:	74 03                	je     c0019b70 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b6d:	0f 01 ca             	clac   
c0019b70:	c3                   	ret    
c0019b71:	90                   	nop

c0019b72 <CPU::setupSMAP()>:
c0019b72:	0f 20 e0             	mov    eax,cr4
c0019b75:	0d 00 00 20 00       	or     eax,0x200000
c0019b7a:	0f 22 e0             	mov    cr4,eax
c0019b7d:	eb e1                	jmp    c0019b60 <CPU::prohibitUsermodeDataAccess()>
c0019b7f:	90                   	nop

c0019b80 <CPU::setupFeatures()>:
c0019b80:	83 ec 0c             	sub    esp,0xc
c0019b83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b87:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b8e:	74 07                	je     c0019b97 <CPU::setupFeatures()+0x17>
c0019b90:	52                   	push   edx
c0019b91:	e8 46 ff ff ff       	call   c0019adc <CPU::setupSMEP()>
c0019b96:	58                   	pop    eax
c0019b97:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b9e:	74 07                	je     c0019ba7 <CPU::setupFeatures()+0x27>
c0019ba0:	52                   	push   edx
c0019ba1:	e8 cc ff ff ff       	call   c0019b72 <CPU::setupSMAP()>
c0019ba6:	58                   	pop    eax
c0019ba7:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019bae:	74 07                	je     c0019bb7 <CPU::setupFeatures()+0x37>
c0019bb0:	52                   	push   edx
c0019bb1:	e8 32 ff ff ff       	call   c0019ae8 <CPU::setupUMIP()>
c0019bb6:	58                   	pop    eax
c0019bb7:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019bbe:	74 07                	je     c0019bc7 <CPU::setupFeatures()+0x47>
c0019bc0:	52                   	push   edx
c0019bc1:	e8 2c ff ff ff       	call   c0019af2 <CPU::setupTSC()>
c0019bc6:	58                   	pop    eax
c0019bc7:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019bce:	74 07                	je     c0019bd7 <CPU::setupFeatures()+0x57>
c0019bd0:	52                   	push   edx
c0019bd1:	e8 26 ff ff ff       	call   c0019afc <CPU::setupLargePages()>
c0019bd6:	59                   	pop    ecx
c0019bd7:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019bde:	74 07                	je     c0019be7 <CPU::setupFeatures()+0x67>
c0019be0:	52                   	push   edx
c0019be1:	e8 5e ff ff ff       	call   c0019b44 <CPU::setupGlobalPages()>
c0019be6:	58                   	pop    eax
c0019be7:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019bee:	74 0c                	je     c0019bfc <CPU::setupFeatures()+0x7c>
c0019bf0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019bf4:	83 c4 0c             	add    esp,0xc
c0019bf7:	e9 0a ff ff ff       	jmp    c0019b06 <CPU::setupPAT()>
c0019bfc:	83 c4 0c             	add    esp,0xc
c0019bff:	c3                   	ret    

c0019c00 <CPU::open(int, int, void*)>:
c0019c00:	57                   	push   edi
c0019c01:	56                   	push   esi
c0019c02:	53                   	push   ebx
c0019c03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c0b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c11:	83 ec 0c             	sub    esp,0xc
c0019c14:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c1a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c20:	50                   	push   eax
c0019c21:	e8 b6 54 ff ff       	call   c000f0dc <GDT::setup()>
c0019c26:	83 c4 0c             	add    esp,0xc
c0019c29:	6a 00                	push   0x0
c0019c2b:	68 ef be ad de       	push   0xdeadbeef
c0019c30:	57                   	push   edi
c0019c31:	e8 86 78 ff ff       	call   c00114bc <TSS::setup(unsigned long, unsigned long)>
c0019c36:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c39:	e8 5e 78 ff ff       	call   c001149c <TSS::flush()>
c0019c3e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c44:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c47:	e8 ec 56 ff ff       	call   c000f338 <IDT::setup()>
c0019c4c:	b8 00 04 00 00       	mov    eax,0x400
c0019c51:	0f 23 f8             	mov    db7,eax
c0019c54:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c5e:	e8 8a 62 ff ff       	call   c000feed <Phys::allocatePage()>
c0019c63:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c69:	89 30                	mov    DWORD PTR [eax],esi
c0019c6b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c71:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c74:	58                   	pop    eax
c0019c75:	5a                   	pop    edx
c0019c76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c80:	e8 8b 89 ff ff       	call   c0012610 <VAS::setCPUSpecific(unsigned long)>
c0019c85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c88:	e8 5f f4 ff ff       	call   c00190ec <CPU::detectFeatures()>
c0019c8d:	e8 88 bc ff ff       	call   c001591a <setupInterruptController()>
c0019c92:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c98:	a1 80 e4 02 c0       	mov    eax,ds:0xc002e480
c0019c9d:	83 e0 10             	and    eax,0x10
c0019ca0:	83 f8 01             	cmp    eax,0x1
c0019ca3:	19 c0                	sbb    eax,eax
c0019ca5:	83 e0 46             	and    eax,0x46
c0019ca8:	83 c0 1e             	add    eax,0x1e
c0019cab:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cae:	e8 ab d1 ff ff       	call   c0016e5e <setupTimer(int)>
c0019cb3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019cb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cbc:	e8 bf fe ff ff       	call   c0019b80 <CPU::setupFeatures()>
c0019cc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cc4:	e8 a7 f1 ff ff       	call   c0018e70 <CPU::displayFeatures()>
c0019cc9:	83 c4 10             	add    esp,0x10
c0019ccc:	31 c0                	xor    eax,eax
c0019cce:	5b                   	pop    ebx
c0019ccf:	5e                   	pop    esi
c0019cd0:	5f                   	pop    edi
c0019cd1:	c3                   	ret    

c0019cd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019cd2:	57                   	push   edi
c0019cd3:	56                   	push   esi
c0019cd4:	53                   	push   ebx
c0019cd5:	51                   	push   ecx
c0019cd6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019cda:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019cdd:	0f 02 c0             	lar    eax,ax
c0019ce0:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019ce3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019ce7:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019cea:	88 ca                	mov    dl,cl
c0019cec:	c0 ea 06             	shr    dl,0x6
c0019cef:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019cf3:	89 ca                	mov    edx,ecx
c0019cf5:	66 c1 ea 03          	shr    dx,0x3
c0019cf9:	83 e2 07             	and    edx,0x7
c0019cfc:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d01:	88 17                	mov    BYTE PTR [edi],dl
c0019d03:	0f 84 a6 01 00 00    	je     c0019eaf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d09:	83 e1 07             	and    ecx,0x7
c0019d0c:	80 f9 04             	cmp    cl,0x4
c0019d0f:	0f 84 98 00 00 00    	je     c0019dad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d15:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d1a:	0f 95 c0             	setne  al
c0019d1d:	80 f9 05             	cmp    cl,0x5
c0019d20:	0f 95 c2             	setne  dl
c0019d23:	08 c2                	or     dl,al
c0019d25:	74 79                	je     c0019da0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d27:	84 c9                	test   cl,cl
c0019d29:	75 05                	jne    c0019d30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d2b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d2e:	eb 3c                	jmp    c0019d6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d30:	80 f9 01             	cmp    cl,0x1
c0019d33:	75 05                	jne    c0019d3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d35:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d38:	eb 32                	jmp    c0019d6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d3a:	80 f9 02             	cmp    cl,0x2
c0019d3d:	75 05                	jne    c0019d44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d3f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d42:	eb 28                	jmp    c0019d6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d44:	31 c0                	xor    eax,eax
c0019d46:	80 f9 03             	cmp    cl,0x3
c0019d49:	75 05                	jne    c0019d50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d4b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d4e:	eb 1c                	jmp    c0019d6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d50:	80 f9 05             	cmp    cl,0x5
c0019d53:	75 05                	jne    c0019d5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d55:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d58:	eb 12                	jmp    c0019d6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d5a:	80 f9 06             	cmp    cl,0x6
c0019d5d:	75 05                	jne    c0019d64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d5f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d62:	eb 08                	jmp    c0019d6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d64:	80 f9 07             	cmp    cl,0x7
c0019d67:	75 03                	jne    c0019d6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d69:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d6c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d71:	75 10                	jne    c0019d83 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d73:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d77:	b9 03 00 00 00       	mov    ecx,0x3
c0019d7c:	01 d0                	add    eax,edx
c0019d7e:	e9 37 01 00 00       	jmp    c0019eba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d83:	b9 02 00 00 00       	mov    ecx,0x2
c0019d88:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019d8d:	0f 85 27 01 00 00    	jne    c0019eba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d93:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d96:	b9 06 00 00 00       	mov    ecx,0x6
c0019d9b:	e9 1a 01 00 00       	jmp    c0019eba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019da0:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019da3:	b9 06 00 00 00       	mov    ecx,0x6
c0019da8:	e9 0f 01 00 00       	jmp    c0019ebc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019dad:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019db0:	88 ca                	mov    dl,cl
c0019db2:	c0 ea 06             	shr    dl,0x6
c0019db5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019db9:	89 ca                	mov    edx,ecx
c0019dbb:	66 c1 ea 03          	shr    dx,0x3
c0019dbf:	83 e2 07             	and    edx,0x7
c0019dc2:	80 e1 07             	and    cl,0x7
c0019dc5:	75 05                	jne    c0019dcc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019dc7:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019dca:	eb 4c                	jmp    c0019e18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dcc:	80 f9 01             	cmp    cl,0x1
c0019dcf:	75 05                	jne    c0019dd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019dd1:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019dd4:	eb 42                	jmp    c0019e18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dd6:	80 f9 02             	cmp    cl,0x2
c0019dd9:	75 05                	jne    c0019de0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019ddb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019dde:	eb 38                	jmp    c0019e18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019de0:	80 f9 03             	cmp    cl,0x3
c0019de3:	75 05                	jne    c0019dea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019de5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019de8:	eb 2e                	jmp    c0019e18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dea:	80 f9 04             	cmp    cl,0x4
c0019ded:	75 12                	jne    c0019e01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019def:	f6 c4 60             	test   ah,0x60
c0019df2:	75 08                	jne    c0019dfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019df4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019df7:	8d 78 14             	lea    edi,[eax+0x14]
c0019dfa:	eb 1c                	jmp    c0019e18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dfc:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019dff:	eb 17                	jmp    c0019e18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e01:	80 f9 05             	cmp    cl,0x5
c0019e04:	75 05                	jne    c0019e0b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e06:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e09:	eb 0d                	jmp    c0019e18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e0b:	80 f9 06             	cmp    cl,0x6
c0019e0e:	75 05                	jne    c0019e15 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e10:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e13:	eb 03                	jmp    c0019e18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e15:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e18:	84 d2                	test   dl,dl
c0019e1a:	75 05                	jne    c0019e21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e1c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e1f:	eb 3c                	jmp    c0019e5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e21:	80 fa 01             	cmp    dl,0x1
c0019e24:	75 05                	jne    c0019e2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e26:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e29:	eb 32                	jmp    c0019e5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e2b:	80 fa 02             	cmp    dl,0x2
c0019e2e:	75 05                	jne    c0019e35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e30:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e33:	eb 28                	jmp    c0019e5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e35:	80 fa 03             	cmp    dl,0x3
c0019e38:	75 05                	jne    c0019e3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e3a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e3d:	eb 1e                	jmp    c0019e5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e3f:	31 c0                	xor    eax,eax
c0019e41:	80 fa 04             	cmp    dl,0x4
c0019e44:	74 17                	je     c0019e5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e46:	80 fa 05             	cmp    dl,0x5
c0019e49:	75 05                	jne    c0019e50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e4b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e4e:	eb 0d                	jmp    c0019e5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e50:	80 fa 06             	cmp    dl,0x6
c0019e53:	75 05                	jne    c0019e5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e55:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e58:	eb 03                	jmp    c0019e5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e5a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e5d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e62:	0f 94 c2             	sete   dl
c0019e65:	80 f9 05             	cmp    cl,0x5
c0019e68:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e6c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e71:	d3 e0                	shl    eax,cl
c0019e73:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e77:	74 0a                	je     c0019e83 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e79:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e7c:	b9 07 00 00 00       	mov    ecx,0x7
c0019e81:	eb 37                	jmp    c0019eba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e83:	01 f8                	add    eax,edi
c0019e85:	b9 03 00 00 00       	mov    ecx,0x3
c0019e8a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e8f:	74 2b                	je     c0019ebc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e91:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e96:	75 0d                	jne    c0019ea5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e98:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e9c:	01 c8                	add    eax,ecx
c0019e9e:	b9 04 00 00 00       	mov    ecx,0x4
c0019ea3:	eb 17                	jmp    c0019ebc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ea5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ea8:	b9 07 00 00 00       	mov    ecx,0x7
c0019ead:	eb 0d                	jmp    c0019ebc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019eaf:	b9 02 00 00 00       	mov    ecx,0x2
c0019eb4:	b2 01                	mov    dl,0x1
c0019eb6:	31 c0                	xor    eax,eax
c0019eb8:	eb 02                	jmp    c0019ebc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019eba:	31 d2                	xor    edx,edx
c0019ebc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019ec0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019ec2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019ec6:	88 11                	mov    BYTE PTR [ecx],dl
c0019ec8:	5a                   	pop    edx
c0019ec9:	5b                   	pop    ebx
c0019eca:	5e                   	pop    esi
c0019ecb:	5f                   	pop    edi
c0019ecc:	c3                   	ret    

c0019ecd <Krnl::smpEntry()>:
c0019ecd:	eb fe                	jmp    c0019ecd <Krnl::smpEntry()>

c0019ecf <Krnl::startCPU(int)>:
c0019ecf:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0019ed4:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019edb:	0f 84 36 01 00 00    	je     c001a017 <Krnl::startCPU(int)+0x148>
c0019ee1:	53                   	push   ebx
c0019ee2:	83 ec 08             	sub    esp,0x8
c0019ee5:	e8 fc 3e 00 00       	call   c001dde6 <lockScheduler()>
c0019eea:	52                   	push   edx
c0019eeb:	52                   	push   edx
c0019eec:	6a 1b                	push   0x1b
c0019eee:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c0019ef4:	e8 f7 4e ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0019ef9:	59                   	pop    ecx
c0019efa:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019eff:	89 c3                	mov    ebx,eax
c0019f01:	58                   	pop    eax
c0019f02:	53                   	push   ebx
c0019f03:	68 50 ba 02 c0       	push   0xc002ba50
c0019f08:	e8 d2 8f ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0019f0d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f1b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f25:	c1 e0 18             	shl    eax,0x18
c0019f28:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f2e:	83 c4 10             	add    esp,0x10
c0019f31:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f37:	09 c2                	or     edx,eax
c0019f39:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f3f:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f45:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f4b:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f51:	80 cd c5             	or     ch,0xc5
c0019f54:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f5a:	f3 90                	pause  
c0019f5c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f5e:	0f ba e1 0c          	bt     ecx,0xc
c0019f62:	72 f6                	jb     c0019f5a <Krnl::startCPU(int)+0x8b>
c0019f64:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f6a:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f70:	09 c1                	or     ecx,eax
c0019f72:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f78:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f7e:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f84:	80 cd 85             	or     ch,0x85
c0019f87:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f8d:	f3 90                	pause  
c0019f8f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f91:	0f ba e1 0c          	bt     ecx,0xc
c0019f95:	72 f6                	jb     c0019f8d <Krnl::startCPU(int)+0xbe>
c0019f97:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fa1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fa7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fad:	09 c1                	or     ecx,eax
c0019faf:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fb5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fbb:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019fc1:	81 c9 02 06 00 00    	or     ecx,0x602
c0019fc7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fcd:	f3 90                	pause  
c0019fcf:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fd1:	0f ba e1 0c          	bt     ecx,0xc
c0019fd5:	72 f6                	jb     c0019fcd <Krnl::startCPU(int)+0xfe>
c0019fd7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fe1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fe7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fed:	09 c8                	or     eax,ecx
c0019fef:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019ff5:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019ffb:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a000:	0d 02 06 00 00       	or     eax,0x602
c001a005:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a00b:	f3 90                	pause  
c001a00d:	8b 02                	mov    eax,DWORD PTR [edx]
c001a00f:	0f ba e0 0c          	bt     eax,0xc
c001a013:	72 f6                	jb     c001a00b <Krnl::startCPU(int)+0x13c>
c001a015:	eb fe                	jmp    c001a015 <Krnl::startCPU(int)+0x146>
c001a017:	c3                   	ret    

c001a018 <Krnl::startCPUs()>:
c001a018:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001a01d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a023:	88 c2                	mov    dl,al
c001a025:	83 e2 0a             	and    edx,0xa
c001a028:	80 fa 0a             	cmp    dl,0xa
c001a02b:	75 09                	jne    c001a036 <Krnl::startCPUs()+0x1e>
c001a02d:	a8 01                	test   al,0x1
c001a02f:	74 05                	je     c001a036 <Krnl::startCPUs()+0x1e>
c001a031:	e9 65 61 fe ff       	jmp    c000019b <prepareTramp>
c001a036:	c3                   	ret    
c001a037:	90                   	nop

c001a038 <EnvVarContainer::getEnv(char const*)>:
c001a038:	57                   	push   edi
c001a039:	56                   	push   esi
c001a03a:	53                   	push   ebx
c001a03b:	31 db                	xor    ebx,ebx
c001a03d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a041:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a043:	7e 2b                	jle    c001a070 <EnvVarContainer::getEnv(char const*)+0x38>
c001a045:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a04c:	50                   	push   eax
c001a04d:	50                   	push   eax
c001a04e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a051:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a054:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a058:	e8 6b 68 fe ff       	call   c00008c8 <strcmp>
c001a05d:	83 c4 10             	add    esp,0x10
c001a060:	85 c0                	test   eax,eax
c001a062:	75 09                	jne    c001a06d <EnvVarContainer::getEnv(char const*)+0x35>
c001a064:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a067:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a06b:	eb 05                	jmp    c001a072 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a06d:	43                   	inc    ebx
c001a06e:	eb d1                	jmp    c001a041 <EnvVarContainer::getEnv(char const*)+0x9>
c001a070:	31 c0                	xor    eax,eax
c001a072:	5b                   	pop    ebx
c001a073:	5e                   	pop    esi
c001a074:	5f                   	pop    edi
c001a075:	c3                   	ret    

c001a076 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a076:	57                   	push   edi
c001a077:	56                   	push   esi
c001a078:	53                   	push   ebx
c001a079:	83 ec 1c             	sub    esp,0x1c
c001a07c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a080:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a084:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a088:	57                   	push   edi
c001a089:	e8 0e 67 fe ff       	call   c000079c <strlen>
c001a08e:	40                   	inc    eax
c001a08f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a092:	e8 b4 57 ff ff       	call   c000f84b <malloc>
c001a097:	89 34 24             	mov    DWORD PTR [esp],esi
c001a09a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a09e:	e8 f9 66 fe ff       	call   c000079c <strlen>
c001a0a3:	40                   	inc    eax
c001a0a4:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0a7:	e8 9f 57 ff ff       	call   c000f84b <malloc>
c001a0ac:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0b3:	e8 e4 66 fe ff       	call   c000079c <strlen>
c001a0b8:	83 c4 0c             	add    esp,0xc
c001a0bb:	40                   	inc    eax
c001a0bc:	50                   	push   eax
c001a0bd:	6a 00                	push   0x0
c001a0bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0c3:	e8 b8 66 fe ff       	call   c0000780 <memset>
c001a0c8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0cb:	e8 cc 66 fe ff       	call   c000079c <strlen>
c001a0d0:	83 c4 0c             	add    esp,0xc
c001a0d3:	40                   	inc    eax
c001a0d4:	50                   	push   eax
c001a0d5:	57                   	push   edi
c001a0d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0da:	e8 6d 66 fe ff       	call   c000074c <memcpy>
c001a0df:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0e2:	e8 b5 66 fe ff       	call   c000079c <strlen>
c001a0e7:	83 c4 0c             	add    esp,0xc
c001a0ea:	40                   	inc    eax
c001a0eb:	50                   	push   eax
c001a0ec:	6a 00                	push   0x0
c001a0ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0f2:	e8 89 66 fe ff       	call   c0000780 <memset>
c001a0f7:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0fa:	e8 9d 66 fe ff       	call   c000079c <strlen>
c001a0ff:	83 c4 0c             	add    esp,0xc
c001a102:	40                   	inc    eax
c001a103:	50                   	push   eax
c001a104:	56                   	push   esi
c001a105:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a109:	e8 3e 66 fe ff       	call   c000074c <memcpy>
c001a10e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a110:	40                   	inc    eax
c001a111:	89 03                	mov    DWORD PTR [ebx],eax
c001a113:	c1 e0 03             	shl    eax,0x3
c001a116:	5a                   	pop    edx
c001a117:	59                   	pop    ecx
c001a118:	50                   	push   eax
c001a119:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a11c:	e8 16 57 ff ff       	call   c000f837 <realloc>
c001a121:	83 c4 0c             	add    esp,0xc
c001a124:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a127:	6a 08                	push   0x8
c001a129:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a12d:	52                   	push   edx
c001a12e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a130:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a134:	50                   	push   eax
c001a135:	e8 12 66 fe ff       	call   c000074c <memcpy>
c001a13a:	83 c4 20             	add    esp,0x20
c001a13d:	5b                   	pop    ebx
c001a13e:	5e                   	pop    esi
c001a13f:	5f                   	pop    edi
c001a140:	c3                   	ret    
c001a141:	90                   	nop

c001a142 <EnvVarContainer::deleteEnv(char const*)>:
c001a142:	c3                   	ret    
c001a143:	90                   	nop

c001a144 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a144:	55                   	push   ebp
c001a145:	57                   	push   edi
c001a146:	56                   	push   esi
c001a147:	53                   	push   ebx
c001a148:	81 ec 38 01 00 00    	sub    esp,0x138
c001a14e:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a155:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a15c:	68 14 01 00 00       	push   0x114
c001a161:	e8 e5 56 ff ff       	call   c000f84b <malloc>
c001a166:	83 c4 0c             	add    esp,0xc
c001a169:	89 c7                	mov    edi,eax
c001a16b:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a16e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a175:	50                   	push   eax
c001a176:	e8 bd 92 ff ff       	call   c0013438 <File::File(char const*, Process*)>
c001a17b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a17e:	e8 87 95 ff ff       	call   c001370a <File::exists()>
c001a183:	83 c4 10             	add    esp,0x10
c001a186:	84 c0                	test   al,al
c001a188:	75 31                	jne    c001a1bb <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a18a:	51                   	push   ecx
c001a18b:	51                   	push   ecx
c001a18c:	6a 12                	push   0x12
c001a18e:	57                   	push   edi
c001a18f:	e8 08 93 ff ff       	call   c001349c <File::open(FileOpenMode)>
c001a194:	8b 07                	mov    eax,DWORD PTR [edi]
c001a196:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a199:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a19c:	e8 fb 65 fe ff       	call   c000079c <strlen>
c001a1a1:	5a                   	pop    edx
c001a1a2:	31 d2                	xor    edx,edx
c001a1a4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1a8:	51                   	push   ecx
c001a1a9:	55                   	push   ebp
c001a1aa:	52                   	push   edx
c001a1ab:	50                   	push   eax
c001a1ac:	57                   	push   edi
c001a1ad:	ff d3                	call   ebx
c001a1af:	83 c4 14             	add    esp,0x14
c001a1b2:	57                   	push   edi
c001a1b3:	e8 42 93 ff ff       	call   c00134fa <File::close()>
c001a1b8:	83 c4 10             	add    esp,0x10
c001a1bb:	31 db                	xor    ebx,ebx
c001a1bd:	50                   	push   eax
c001a1be:	31 ed                	xor    ebp,ebp
c001a1c0:	68 00 01 00 00       	push   0x100
c001a1c5:	6a 00                	push   0x0
c001a1c7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a1cb:	50                   	push   eax
c001a1cc:	e8 af 65 fe ff       	call   c0000780 <memset>
c001a1d1:	58                   	pop    eax
c001a1d2:	5a                   	pop    edx
c001a1d3:	6a 01                	push   0x1
c001a1d5:	57                   	push   edi
c001a1d6:	e8 c1 92 ff ff       	call   c001349c <File::open(FileOpenMode)>
c001a1db:	83 c4 10             	add    esp,0x10
c001a1de:	83 ec 0c             	sub    esp,0xc
c001a1e1:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1e3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1e7:	51                   	push   ecx
c001a1e8:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a1ec:	52                   	push   edx
c001a1ed:	6a 00                	push   0x0
c001a1ef:	6a 01                	push   0x1
c001a1f1:	57                   	push   edi
c001a1f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1f5:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a1f9:	83 c4 20             	add    esp,0x20
c001a1fc:	3c 0d                	cmp    al,0xd
c001a1fe:	0f 84 12 01 00 00    	je     c001a316 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a204:	85 db                	test   ebx,ebx
c001a206:	0f 84 fd 00 00 00    	je     c001a309 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a20c:	3c 0a                	cmp    al,0xa
c001a20e:	74 13                	je     c001a223 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a210:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a215:	74 0c                	je     c001a223 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a217:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a21d:	0f 8e e6 00 00 00    	jle    c001a309 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a223:	83 ec 0c             	sub    esp,0xc
c001a226:	8d 53 01             	lea    edx,[ebx+0x1]
c001a229:	29 dd                	sub    ebp,ebx
c001a22b:	52                   	push   edx
c001a22c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a230:	e8 16 56 ff ff       	call   c000f84b <malloc>
c001a235:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a23c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a23f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a243:	e8 03 56 ff ff       	call   c000f84b <malloc>
c001a248:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a24c:	83 c4 0c             	add    esp,0xc
c001a24f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a253:	52                   	push   edx
c001a254:	6a 00                	push   0x0
c001a256:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a25a:	e8 21 65 fe ff       	call   c0000780 <memset>
c001a25f:	83 c4 0c             	add    esp,0xc
c001a262:	53                   	push   ebx
c001a263:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a267:	55                   	push   ebp
c001a268:	01 eb                	add    ebx,ebp
c001a26a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a26e:	e8 d9 64 fe ff       	call   c000074c <memcpy>
c001a273:	83 c4 0c             	add    esp,0xc
c001a276:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a27a:	51                   	push   ecx
c001a27b:	6a 00                	push   0x0
c001a27d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a281:	e8 fa 64 fe ff       	call   c0000780 <memset>
c001a286:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a289:	e8 0e 65 fe ff       	call   c000079c <strlen>
c001a28e:	83 c4 0c             	add    esp,0xc
c001a291:	50                   	push   eax
c001a292:	53                   	push   ebx
c001a293:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a297:	e8 b0 64 fe ff       	call   c000074c <memcpy>
c001a29c:	5b                   	pop    ebx
c001a29d:	58                   	pop    eax
c001a29e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2a2:	68 61 ba 02 c0       	push   0xc002ba61
c001a2a7:	e8 33 8c ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001a2ac:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2ae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a2b1:	40                   	inc    eax
c001a2b2:	83 c4 10             	add    esp,0x10
c001a2b5:	89 06                	mov    DWORD PTR [esi],eax
c001a2b7:	85 d2                	test   edx,edx
c001a2b9:	75 0c                	jne    c001a2c7 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a2bb:	83 ec 0c             	sub    esp,0xc
c001a2be:	6a 08                	push   0x8
c001a2c0:	e8 86 55 ff ff       	call   c000f84b <malloc>
c001a2c5:	eb 0c                	jmp    c001a2d3 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a2c7:	c1 e0 03             	shl    eax,0x3
c001a2ca:	51                   	push   ecx
c001a2cb:	51                   	push   ecx
c001a2cc:	50                   	push   eax
c001a2cd:	52                   	push   edx
c001a2ce:	e8 64 55 ff ff       	call   c000f837 <realloc>
c001a2d3:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a2d6:	83 c4 10             	add    esp,0x10
c001a2d9:	31 db                	xor    ebx,ebx
c001a2db:	52                   	push   edx
c001a2dc:	6a 08                	push   0x8
c001a2de:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a2e2:	50                   	push   eax
c001a2e3:	8b 16                	mov    edx,DWORD PTR [esi]
c001a2e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2e8:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a2ec:	50                   	push   eax
c001a2ed:	e8 5a 64 fe ff       	call   c000074c <memcpy>
c001a2f2:	83 c4 0c             	add    esp,0xc
c001a2f5:	68 00 01 00 00       	push   0x100
c001a2fa:	6a 00                	push   0x0
c001a2fc:	55                   	push   ebp
c001a2fd:	31 ed                	xor    ebp,ebp
c001a2ff:	e8 7c 64 fe ff       	call   c0000780 <memset>
c001a304:	83 c4 10             	add    esp,0x10
c001a307:	eb 0d                	jmp    c001a316 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a309:	3c 3d                	cmp    al,0x3d
c001a30b:	74 07                	je     c001a314 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a30d:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a311:	45                   	inc    ebp
c001a312:	eb 02                	jmp    c001a316 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a314:	89 eb                	mov    ebx,ebp
c001a316:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a31b:	0f 85 bd fe ff ff    	jne    c001a1de <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a321:	50                   	push   eax
c001a322:	50                   	push   eax
c001a323:	ff 36                	push   DWORD PTR [esi]
c001a325:	68 6f ba 02 c0       	push   0xc002ba6f
c001a32a:	e8 b0 8b ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001a32f:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a335:	5b                   	pop    ebx
c001a336:	5e                   	pop    esi
c001a337:	5f                   	pop    edi
c001a338:	5d                   	pop    ebp
c001a339:	c3                   	ret    

c001a33a <EnvVarContainer::__loadSystem()>:
c001a33a:	83 ec 10             	sub    esp,0x10
c001a33d:	68 a0 d9 02 c0       	push   0xc002d9a0
c001a342:	68 9a ba 02 c0       	push   0xc002ba9a
c001a347:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a34b:	e8 f4 fd ff ff       	call   c001a144 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a350:	83 c4 1c             	add    esp,0x1c
c001a353:	c3                   	ret    

c001a354 <EnvVarContainer::__loadUser()>:
c001a354:	c3                   	ret    
c001a355:	90                   	nop

c001a356 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a356:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a35a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a364:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a368:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a36b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a36f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a376:	90                   	nop
c001a377:	c3                   	ret    

c001a378 <EnvVarContainer::~EnvVarContainer()>:
c001a378:	83 ec 0c             	sub    esp,0xc
c001a37b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a37f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a382:	85 c0                	test   eax,eax
c001a384:	74 1d                	je     c001a3a3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a38a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a38c:	85 c0                	test   eax,eax
c001a38e:	74 13                	je     c001a3a3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a397:	83 ec 0c             	sub    esp,0xc
c001a39a:	50                   	push   eax
c001a39b:	e8 bb 54 ff ff       	call   c000f85b <free>
c001a3a0:	83 c4 10             	add    esp,0x10
c001a3a3:	90                   	nop
c001a3a4:	83 c4 0c             	add    esp,0xc
c001a3a7:	c3                   	ret    

c001a3a8 <Krnl::getEnv(Process*, char const*)>:
c001a3a8:	53                   	push   ebx
c001a3a9:	83 ec 08             	sub    esp,0x8
c001a3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3b0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a3b4:	39 05 d4 19 03 c0    	cmp    DWORD PTR ds:0xc00319d4,eax
c001a3ba:	74 04                	je     c001a3c0 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3bc:	85 c0                	test   eax,eax
c001a3be:	75 0b                	jne    c001a3cb <Krnl::getEnv(Process*, char const*)+0x23>
c001a3c0:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a3c5:	85 c0                	test   eax,eax
c001a3c7:	75 19                	jne    c001a3e2 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a3c9:	eb 27                	jmp    c001a3f2 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a3cb:	52                   	push   edx
c001a3cc:	52                   	push   edx
c001a3cd:	53                   	push   ebx
c001a3ce:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a3d4:	e8 5f fc ff ff       	call   c001a038 <EnvVarContainer::getEnv(char const*)>
c001a3d9:	83 c4 10             	add    esp,0x10
c001a3dc:	85 c0                	test   eax,eax
c001a3de:	75 28                	jne    c001a408 <Krnl::getEnv(Process*, char const*)+0x60>
c001a3e0:	eb de                	jmp    c001a3c0 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3e2:	52                   	push   edx
c001a3e3:	52                   	push   edx
c001a3e4:	53                   	push   ebx
c001a3e5:	50                   	push   eax
c001a3e6:	e8 4d fc ff ff       	call   c001a038 <EnvVarContainer::getEnv(char const*)>
c001a3eb:	83 c4 10             	add    esp,0x10
c001a3ee:	85 c0                	test   eax,eax
c001a3f0:	75 16                	jne    c001a408 <Krnl::getEnv(Process*, char const*)+0x60>
c001a3f2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a3f6:	a1 b8 0f 03 c0       	mov    eax,ds:0xc0030fb8
c001a3fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a3ff:	83 c4 08             	add    esp,0x8
c001a402:	5b                   	pop    ebx
c001a403:	e9 30 fc ff ff       	jmp    c001a038 <EnvVarContainer::getEnv(char const*)>
c001a408:	83 c4 08             	add    esp,0x8
c001a40b:	5b                   	pop    ebx
c001a40c:	c3                   	ret    

c001a40d <Krnl::setEnvSystem(char const*, char const*)>:
c001a40d:	83 ec 10             	sub    esp,0x10
c001a410:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a414:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a418:	ff 35 b8 0f 03 c0    	push   DWORD PTR ds:0xc0030fb8
c001a41e:	e8 53 fc ff ff       	call   c001a076 <EnvVarContainer::setEnv(char const*, char const*)>
c001a423:	83 c4 1c             	add    esp,0x1c
c001a426:	c3                   	ret    

c001a427 <Krnl::setEnvUser(char const*, char const*)>:
c001a427:	a1 b4 0f 03 c0       	mov    eax,ds:0xc0030fb4
c001a42c:	85 c0                	test   eax,eax
c001a42e:	74 15                	je     c001a445 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a430:	83 ec 10             	sub    esp,0x10
c001a433:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a437:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a43b:	50                   	push   eax
c001a43c:	e8 35 fc ff ff       	call   c001a076 <EnvVarContainer::setEnv(char const*, char const*)>
c001a441:	83 c4 1c             	add    esp,0x1c
c001a444:	c3                   	ret    
c001a445:	c3                   	ret    

c001a446 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a44a:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a450:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a454:	e9 1d fc ff ff       	jmp    c001a076 <EnvVarContainer::setEnv(char const*, char const*)>

c001a459 <Krnl::deleteEnvSystem(char const*)>:
c001a459:	c3                   	ret    

c001a45a <Krnl::deleteEnvUser(char const*)>:
c001a45a:	c3                   	ret    

c001a45b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a45b:	c3                   	ret    

c001a45c <Krnl::newProcessEnv(Process*)>:
c001a45c:	83 ec 28             	sub    esp,0x28
c001a45f:	6a 0c                	push   0xc
c001a461:	e8 e5 53 ff ff       	call   c000f84b <malloc>
c001a466:	5a                   	pop    edx
c001a467:	59                   	pop    ecx
c001a468:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a46c:	50                   	push   eax
c001a46d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a471:	e8 e0 fe ff ff       	call   c001a356 <EnvVarContainer::EnvVarContainer(Process*)>
c001a476:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a47a:	83 c4 2c             	add    esp,0x2c
c001a47d:	c3                   	ret    

c001a47e <Krnl::copyProcessEnv(Process*, Process*)>:
c001a47e:	56                   	push   esi
c001a47f:	53                   	push   ebx
c001a480:	83 ec 10             	sub    esp,0x10
c001a483:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a487:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a48d:	6a 0c                	push   0xc
c001a48f:	e8 b7 53 ff ff       	call   c000f84b <malloc>
c001a494:	89 c3                	mov    ebx,eax
c001a496:	58                   	pop    eax
c001a497:	5a                   	pop    edx
c001a498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a49c:	53                   	push   ebx
c001a49d:	e8 b4 fe ff ff       	call   c001a356 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4a2:	8b 06                	mov    eax,DWORD PTR [esi]
c001a4a4:	89 03                	mov    DWORD PTR [ebx],eax
c001a4a6:	c1 e0 03             	shl    eax,0x3
c001a4a9:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4ac:	e8 9a 53 ff ff       	call   c000f84b <malloc>
c001a4b1:	83 c4 0c             	add    esp,0xc
c001a4b4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a4b7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a4b9:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a4c0:	52                   	push   edx
c001a4c1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a4c4:	50                   	push   eax
c001a4c5:	e8 82 62 fe ff       	call   c000074c <memcpy>
c001a4ca:	89 d8                	mov    eax,ebx
c001a4cc:	83 c4 14             	add    esp,0x14
c001a4cf:	5b                   	pop    ebx
c001a4d0:	5e                   	pop    esi
c001a4d1:	c3                   	ret    

c001a4d2 <Krnl::loadSystemEnv()>:
c001a4d2:	53                   	push   ebx
c001a4d3:	83 ec 14             	sub    esp,0x14
c001a4d6:	6a 0c                	push   0xc
c001a4d8:	e8 6e 53 ff ff       	call   c000f84b <malloc>
c001a4dd:	89 c3                	mov    ebx,eax
c001a4df:	58                   	pop    eax
c001a4e0:	5a                   	pop    edx
c001a4e1:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001a4e7:	53                   	push   ebx
c001a4e8:	e8 69 fe ff ff       	call   c001a356 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4f0:	89 1d b8 0f 03 c0    	mov    DWORD PTR ds:0xc0030fb8,ebx
c001a4f6:	e8 3f fe ff ff       	call   c001a33a <EnvVarContainer::__loadSystem()>
c001a4fb:	83 c4 18             	add    esp,0x18
c001a4fe:	5b                   	pop    ebx
c001a4ff:	c3                   	ret    

c001a500 <Krnl::loadUserEnv()>:
c001a500:	53                   	push   ebx
c001a501:	83 ec 14             	sub    esp,0x14
c001a504:	6a 0c                	push   0xc
c001a506:	e8 40 53 ff ff       	call   c000f84b <malloc>
c001a50b:	89 c3                	mov    ebx,eax
c001a50d:	58                   	pop    eax
c001a50e:	5a                   	pop    edx
c001a50f:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001a515:	53                   	push   ebx
c001a516:	e8 3b fe ff ff       	call   c001a356 <EnvVarContainer::EnvVarContainer(Process*)>
c001a51b:	89 1d b4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fb4,ebx
c001a521:	83 c4 18             	add    esp,0x18
c001a524:	5b                   	pop    ebx
c001a525:	c3                   	ret    

c001a526 <Krnl::flushEnv()>:
c001a526:	c3                   	ret    

c001a527 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a52b:	8b 15 b4 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fb4
c001a531:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a537:	a1 b8 0f 03 c0       	mov    eax,ds:0xc0030fb8
c001a53c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a53e:	03 01                	add    eax,DWORD PTR [ecx]
c001a540:	85 d2                	test   edx,edx
c001a542:	74 02                	je     c001a546 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a544:	03 02                	add    eax,DWORD PTR [edx]
c001a546:	c3                   	ret    

c001a547 <Krnl::getProcessEnvPair(Process*, int)>:
c001a547:	57                   	push   edi
c001a548:	8b 0d b4 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fb4
c001a54e:	56                   	push   esi
c001a54f:	85 c9                	test   ecx,ecx
c001a551:	53                   	push   ebx
c001a552:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a556:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a55a:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a560:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a564:	8b 02                	mov    eax,DWORD PTR [edx]
c001a566:	75 47                	jne    c001a5af <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a568:	39 c3                	cmp    ebx,eax
c001a56a:	7c 47                	jl     c001a5b3 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a56c:	8b 15 b8 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030fb8
c001a572:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a574:	01 c1                	add    ecx,eax
c001a576:	39 d9                	cmp    ecx,ebx
c001a578:	7e 6c                	jle    c001a5e6 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a57a:	51                   	push   ecx
c001a57b:	89 d9                	mov    ecx,ebx
c001a57d:	29 c1                	sub    ecx,eax
c001a57f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a582:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a586:	53                   	push   ebx
c001a587:	68 bc ba 02 c0       	push   0xc002babc
c001a58c:	e8 4e 89 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001a591:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a597:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a599:	a1 b8 0f 03 c0       	mov    eax,ds:0xc0030fb8
c001a59e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a5a1:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5a5:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5a8:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5ab:	89 06                	mov    DWORD PTR [esi],eax
c001a5ad:	eb 51                	jmp    c001a600 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a5af:	39 c3                	cmp    ebx,eax
c001a5b1:	7d 05                	jge    c001a5b8 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a5b3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5b6:	eb 20                	jmp    c001a5d8 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a5b8:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a5ba:	8d 14 07             	lea    edx,[edi+eax*1]
c001a5bd:	39 da                	cmp    edx,ebx
c001a5bf:	7e 04                	jle    c001a5c5 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a5c1:	29 c3                	sub    ebx,eax
c001a5c3:	eb 10                	jmp    c001a5d5 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a5c5:	8b 0d b8 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fb8
c001a5cb:	03 11                	add    edx,DWORD PTR [ecx]
c001a5cd:	39 da                	cmp    edx,ebx
c001a5cf:	7e 15                	jle    c001a5e6 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5d1:	29 c3                	sub    ebx,eax
c001a5d3:	29 fb                	sub    ebx,edi
c001a5d5:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a5d8:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5dc:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5df:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5e2:	89 06                	mov    DWORD PTR [esi],eax
c001a5e4:	eb 1d                	jmp    c001a603 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a5e6:	83 ec 0c             	sub    esp,0xc
c001a5e9:	68 d0 ba 02 c0       	push   0xc002bad0
c001a5ee:	e8 18 00 00 00       	call   c001a60b <Krnl::panic(char const*)>
c001a5f3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a5f9:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a600:	83 c4 10             	add    esp,0x10
c001a603:	89 f0                	mov    eax,esi
c001a605:	5b                   	pop    ebx
c001a606:	5e                   	pop    esi
c001a607:	5f                   	pop    edi
c001a608:	c2 04 00             	ret    0x4

c001a60b <Krnl::panic(char const*)>:
c001a60b:	55                   	push   ebp
c001a60c:	89 e5                	mov    ebp,esp
c001a60e:	53                   	push   ebx
c001a60f:	83 ec 0c             	sub    esp,0xc
c001a612:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a615:	fa                   	cli    
c001a616:	c6 05 c4 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030fc4,0x1
c001a61d:	53                   	push   ebx
c001a61e:	c6 05 a4 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d3a4,0x0
c001a625:	68 ea ba 02 c0       	push   0xc002baea
c001a62a:	e8 b0 88 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001a62f:	58                   	pop    eax
c001a630:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a635:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a63b:	e8 bd 66 ff ff       	call   c0010cfd <setActiveTerminal(VgaText*)>
c001a640:	83 c4 0c             	add    esp,0xc
c001a643:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a648:	6a 01                	push   0x1
c001a64a:	6a 0f                	push   0xf
c001a64c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a652:	e8 d7 60 ff ff       	call   c001072e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a657:	58                   	pop    eax
c001a658:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a65d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a663:	e8 36 69 ff ff       	call   c0010f9e <VgaText::clearScreen()>
c001a668:	58                   	pop    eax
c001a669:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a66e:	5a                   	pop    edx
c001a66f:	68 03 bb 02 c0       	push   0xc002bb03
c001a674:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a67a:	e8 9d 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a67f:	59                   	pop    ecx
c001a680:	58                   	pop    eax
c001a681:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a686:	68 a8 bb 02 c0       	push   0xc002bba8
c001a68b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a691:	e8 86 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a696:	58                   	pop    eax
c001a697:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a69c:	5a                   	pop    edx
c001a69d:	68 1f bb 02 c0       	push   0xc002bb1f
c001a6a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6a8:	e8 6f 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a6ad:	59                   	pop    ecx
c001a6ae:	58                   	pop    eax
c001a6af:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a6b4:	53                   	push   ebx
c001a6b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6bb:	e8 5c 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a6c0:	58                   	pop    eax
c001a6c1:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a6c6:	5a                   	pop    edx
c001a6c7:	68 3f bb 02 c0       	push   0xc002bb3f
c001a6cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6d2:	e8 45 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a6d7:	a1 c0 0f 03 c0       	mov    eax,ds:0xc0030fc0
c001a6dc:	83 c4 10             	add    esp,0x10
c001a6df:	85 c0                	test   eax,eax
c001a6e1:	74 02                	je     c001a6e5 <Krnl::panic(char const*)+0xda>
c001a6e3:	ff d0                	call   eax
c001a6e5:	83 ec 0c             	sub    esp,0xc
c001a6e8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a6eb:	e8 fd 2f 00 00       	call   c001d6ed <Thr::getDriverNameFromAddress(unsigned long)>
c001a6f0:	83 c4 10             	add    esp,0x10
c001a6f3:	89 c3                	mov    ebx,eax
c001a6f5:	85 c0                	test   eax,eax
c001a6f7:	0f 84 50 02 00 00    	je     c001a94d <Krnl::panic(char const*)+0x342>
c001a6fd:	83 ec 08             	sub    esp,0x8
c001a700:	8b 15 d4 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319d4
c001a706:	68 e4 bb 02 c0       	push   0xc002bbe4
c001a70b:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a711:	e8 06 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a716:	58                   	pop    eax
c001a717:	5a                   	pop    edx
c001a718:	8b 15 d4 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319d4
c001a71e:	68 1f bb 02 c0       	push   0xc002bb1f
c001a723:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a729:	e8 ee 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a72e:	59                   	pop    ecx
c001a72f:	58                   	pop    eax
c001a730:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a735:	53                   	push   ebx
c001a736:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a73c:	e8 db 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a741:	83 c4 10             	add    esp,0x10
c001a744:	83 ec 08             	sub    esp,0x8
c001a747:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a74c:	68 3e bb 02 c0       	push   0xc002bb3e
c001a751:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a757:	e8 c0 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a75c:	58                   	pop    eax
c001a75d:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a762:	5a                   	pop    edx
c001a763:	68 3c bc 02 c0       	push   0xc002bc3c
c001a768:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a76e:	e8 a9 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a773:	59                   	pop    ecx
c001a774:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a779:	5b                   	pop    ebx
c001a77a:	68 7c bc 02 c0       	push   0xc002bc7c
c001a77f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a785:	e8 92 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a78a:	58                   	pop    eax
c001a78b:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a790:	5a                   	pop    edx
c001a791:	68 2a bb 02 c0       	push   0xc002bb2a
c001a796:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a79c:	e8 7b 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a7a1:	59                   	pop    ecx
c001a7a2:	5b                   	pop    ebx
c001a7a3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a7a6:	68 42 bb 02 c0       	push   0xc002bb42
c001a7ab:	e8 2f 87 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001a7b0:	58                   	pop    eax
c001a7b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7b4:	5a                   	pop    edx
c001a7b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7b8:	68 4b bb 02 c0       	push   0xc002bb4b
c001a7bd:	e8 1d 87 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001a7c2:	59                   	pop    ecx
c001a7c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7c6:	5b                   	pop    ebx
c001a7c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7cc:	68 54 bb 02 c0       	push   0xc002bb54
c001a7d1:	e8 09 87 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001a7d6:	58                   	pop    eax
c001a7d7:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a7dc:	5a                   	pop    edx
c001a7dd:	68 c0 bc 02 c0       	push   0xc002bcc0
c001a7e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7e8:	e8 2f 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a7ed:	59                   	pop    ecx
c001a7ee:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a7f3:	5b                   	pop    ebx
c001a7f4:	68 5d bb 02 c0       	push   0xc002bb5d
c001a7f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ff:	e8 18 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a804:	0f 20 c0             	mov    eax,cr0
c001a807:	5a                   	pop    edx
c001a808:	59                   	pop    ecx
c001a809:	50                   	push   eax
c001a80a:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a80f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a815:	e8 28 69 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a81a:	5b                   	pop    ebx
c001a81b:	58                   	pop    eax
c001a81c:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a821:	68 67 bb 02 c0       	push   0xc002bb67
c001a826:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a82c:	e8 eb 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a831:	0f 20 d0             	mov    eax,cr2
c001a834:	5a                   	pop    edx
c001a835:	59                   	pop    ecx
c001a836:	50                   	push   eax
c001a837:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a83c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a842:	e8 fb 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a847:	5b                   	pop    ebx
c001a848:	58                   	pop    eax
c001a849:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a84e:	68 71 bb 02 c0       	push   0xc002bb71
c001a853:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a859:	e8 be 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a85e:	0f 20 d8             	mov    eax,cr3
c001a861:	5a                   	pop    edx
c001a862:	59                   	pop    ecx
c001a863:	50                   	push   eax
c001a864:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a869:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a86f:	e8 ce 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a874:	5b                   	pop    ebx
c001a875:	58                   	pop    eax
c001a876:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a87b:	68 84 bb 02 c0       	push   0xc002bb84
c001a880:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a886:	e8 91 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a88b:	0f 20 e0             	mov    eax,cr4
c001a88e:	5a                   	pop    edx
c001a88f:	59                   	pop    ecx
c001a890:	50                   	push   eax
c001a891:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a896:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a89c:	e8 a1 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a8a1:	5b                   	pop    ebx
c001a8a2:	58                   	pop    eax
c001a8a3:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a8a8:	68 8e bb 02 c0       	push   0xc002bb8e
c001a8ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b3:	e8 64 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a8b8:	5a                   	pop    edx
c001a8b9:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a8be:	59                   	pop    ecx
c001a8bf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8c5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8c8:	50                   	push   eax
c001a8c9:	e8 74 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a8ce:	5b                   	pop    ebx
c001a8cf:	58                   	pop    eax
c001a8d0:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a8d5:	68 a5 bb 02 c0       	push   0xc002bba5
c001a8da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8e0:	e8 37 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a8e5:	5a                   	pop    edx
c001a8e6:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a8eb:	59                   	pop    ecx
c001a8ec:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8f2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8f5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8f8:	50                   	push   eax
c001a8f9:	e8 44 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a8fe:	5b                   	pop    ebx
c001a8ff:	58                   	pop    eax
c001a900:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a905:	68 a5 bb 02 c0       	push   0xc002bba5
c001a90a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a910:	e8 07 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a915:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a91a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a91d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a923:	8b 12                	mov    edx,DWORD PTR [edx]
c001a925:	59                   	pop    ecx
c001a926:	5b                   	pop    ebx
c001a927:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a92a:	50                   	push   eax
c001a92b:	e8 12 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a930:	83 c4 10             	add    esp,0x10
c001a933:	b2 fe                	mov    dl,0xfe
c001a935:	e4 60                	in     al,0x60
c001a937:	3c 1c                	cmp    al,0x1c
c001a939:	74 04                	je     c001a93f <Krnl::panic(char const*)+0x334>
c001a93b:	3c 5a                	cmp    al,0x5a
c001a93d:	75 f6                	jne    c001a935 <Krnl::panic(char const*)+0x32a>
c001a93f:	e4 64                	in     al,0x64
c001a941:	a8 02                	test   al,0x2
c001a943:	75 fa                	jne    c001a93f <Krnl::panic(char const*)+0x334>
c001a945:	88 d0                	mov    al,dl
c001a947:	e6 64                	out    0x64,al
c001a949:	fa                   	cli    
c001a94a:	f4                   	hlt    
c001a94b:	eb e8                	jmp    c001a935 <Krnl::panic(char const*)+0x32a>
c001a94d:	50                   	push   eax
c001a94e:	50                   	push   eax
c001a94f:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a954:	68 10 bc 02 c0       	push   0xc002bc10
c001a959:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a95f:	e8 b8 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a964:	58                   	pop    eax
c001a965:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a96a:	5a                   	pop    edx
c001a96b:	68 1f bb 02 c0       	push   0xc002bb1f
c001a970:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a976:	e8 a1 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a97b:	59                   	pop    ecx
c001a97c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a981:	5b                   	pop    ebx
c001a982:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a985:	83 c0 0c             	add    eax,0xc
c001a988:	50                   	push   eax
c001a989:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001a98e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a994:	e8 83 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a999:	83 c4 10             	add    esp,0x10
c001a99c:	e9 a3 fd ff ff       	jmp    c001a744 <Krnl::panic(char const*)+0x139>

c001a9a1 <Net::switchEndian16(unsigned short)>:
c001a9a1:	83 ec 04             	sub    esp,0x4
c001a9a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9a8:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a9ac:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9b0:	c1 f8 08             	sar    eax,0x8
c001a9b3:	89 c2                	mov    edx,eax
c001a9b5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9b9:	c1 e0 08             	shl    eax,0x8
c001a9bc:	09 d0                	or     eax,edx
c001a9be:	83 c4 04             	add    esp,0x4
c001a9c1:	c3                   	ret    

c001a9c2 <Net::switchEndian32(unsigned int)>:
c001a9c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9c6:	c1 e8 18             	shr    eax,0x18
c001a9c9:	89 c2                	mov    edx,eax
c001a9cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9cf:	c1 e0 08             	shl    eax,0x8
c001a9d2:	25 00 00 ff 00       	and    eax,0xff0000
c001a9d7:	09 c2                	or     edx,eax
c001a9d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9dd:	c1 e8 08             	shr    eax,0x8
c001a9e0:	25 00 ff 00 00       	and    eax,0xff00
c001a9e5:	09 c2                	or     edx,eax
c001a9e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9eb:	c1 e0 18             	shl    eax,0x18
c001a9ee:	09 d0                	or     eax,edx
c001a9f0:	c3                   	ret    

c001a9f1 <Net::crc32Calc(unsigned char*, int)>:
c001a9f1:	83 ec 10             	sub    esp,0x10
c001a9f4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a9f9:	75 07                	jne    c001aa02 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a9fb:	b8 00 00 00 00       	mov    eax,0x0
c001aa00:	eb 7c                	jmp    c001aa7e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa02:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa07:	7f 07                	jg     c001aa10 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa09:	b8 00 00 00 00       	mov    eax,0x0
c001aa0e:	eb 6e                	jmp    c001aa7e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa10:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa18:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa24:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa28:	7d 4e                	jge    c001aa78 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa32:	01 d0                	add    eax,edx
c001aa34:	8a 00                	mov    al,BYTE PTR [eax]
c001aa36:	0f b6 c0             	movzx  eax,al
c001aa39:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa3d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa45:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa4a:	7f 26                	jg     c001aa72 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa50:	83 e0 01             	and    eax,0x1
c001aa53:	74 0d                	je     c001aa62 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa59:	d1 e8                	shr    eax,1
c001aa5b:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa60:	eb 06                	jmp    c001aa68 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa66:	d1 e8                	shr    eax,1
c001aa68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa6c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa70:	eb d3                	jmp    c001aa45 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa72:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa76:	eb a8                	jmp    c001aa20 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa7c:	f7 d0                	not    eax
c001aa7e:	83 c4 10             	add    esp,0x10
c001aa81:	c3                   	ret    

c001aa82 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa82:	83 ec 1c             	sub    esp,0x1c
c001aa85:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa8d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa95:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa9a:	7f 14                	jg     c001aab0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa9c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaa0:	8d 50 01             	lea    edx,[eax+0x1]
c001aaa3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaa7:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aaaa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aaae:	eb e5                	jmp    c001aa95 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aab0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aab4:	8d 50 01             	lea    edx,[eax+0x1]
c001aab7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aabb:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aabe:	83 ec 04             	sub    esp,0x4
c001aac1:	6a 06                	push   0x6
c001aac3:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aac7:	50                   	push   eax
c001aac8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aacc:	e8 7b 5c fe ff       	call   c000074c <memcpy>
c001aad1:	83 c4 10             	add    esp,0x10
c001aad4:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aad9:	83 ec 04             	sub    esp,0x4
c001aadc:	6a 06                	push   0x6
c001aade:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aae2:	50                   	push   eax
c001aae3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aae7:	e8 60 5c fe ff       	call   c000074c <memcpy>
c001aaec:	83 c4 10             	add    esp,0x10
c001aaef:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aaf4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aaf8:	0f b7 c0             	movzx  eax,ax
c001aafb:	c1 f8 08             	sar    eax,0x8
c001aafe:	89 c1                	mov    ecx,eax
c001ab00:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab04:	8d 50 01             	lea    edx,[eax+0x1]
c001ab07:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab0b:	88 ca                	mov    dl,cl
c001ab0d:	88 10                	mov    BYTE PTR [eax],dl
c001ab0f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab13:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab17:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab1a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab1e:	88 10                	mov    BYTE PTR [eax],dl
c001ab20:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab28:	83 ec 04             	sub    esp,0x4
c001ab2b:	52                   	push   edx
c001ab2c:	50                   	push   eax
c001ab2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab31:	e8 16 5c fe ff       	call   c000074c <memcpy>
c001ab36:	83 c4 10             	add    esp,0x10
c001ab39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab3d:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab41:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab45:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab49:	83 ec 08             	sub    esp,0x8
c001ab4c:	50                   	push   eax
c001ab4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab51:	e8 9b fe ff ff       	call   c001a9f1 <Net::crc32Calc(unsigned char*, int)>
c001ab56:	83 c4 10             	add    esp,0x10
c001ab59:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab61:	c1 e8 18             	shr    eax,0x18
c001ab64:	89 c1                	mov    ecx,eax
c001ab66:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab6a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab6d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab71:	88 ca                	mov    dl,cl
c001ab73:	88 10                	mov    BYTE PTR [eax],dl
c001ab75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab79:	c1 e8 10             	shr    eax,0x10
c001ab7c:	89 c1                	mov    ecx,eax
c001ab7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab82:	8d 50 01             	lea    edx,[eax+0x1]
c001ab85:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab89:	88 ca                	mov    dl,cl
c001ab8b:	88 10                	mov    BYTE PTR [eax],dl
c001ab8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab91:	c1 e8 08             	shr    eax,0x8
c001ab94:	89 c1                	mov    ecx,eax
c001ab96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab9a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab9d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aba1:	88 ca                	mov    dl,cl
c001aba3:	88 10                	mov    BYTE PTR [eax],dl
c001aba5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aba9:	8d 50 01             	lea    edx,[eax+0x1]
c001abac:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abb0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abb4:	88 10                	mov    BYTE PTR [eax],dl
c001abb6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abba:	83 c4 1c             	add    esp,0x1c
c001abbd:	c3                   	ret    

c001abbe <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001abbe:	83 ec 2c             	sub    esp,0x2c
c001abc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abc5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abc9:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001abce:	83 ec 04             	sub    esp,0x4
c001abd1:	6a 06                	push   0x6
c001abd3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abdb:	83 c0 0e             	add    eax,0xe
c001abde:	50                   	push   eax
c001abdf:	e8 68 5b fe ff       	call   c000074c <memcpy>
c001abe4:	83 c4 10             	add    esp,0x10
c001abe7:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001abec:	83 ec 04             	sub    esp,0x4
c001abef:	6a 06                	push   0x6
c001abf1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abf5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abf9:	83 c0 08             	add    eax,0x8
c001abfc:	50                   	push   eax
c001abfd:	e8 4a 5b fe ff       	call   c000074c <memcpy>
c001ac02:	83 c4 10             	add    esp,0x10
c001ac05:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac0e:	8d 50 01             	lea    edx,[eax+0x1]
c001ac11:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac15:	8a 00                	mov    al,BYTE PTR [eax]
c001ac17:	0f b6 c0             	movzx  eax,al
c001ac1a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac23:	8d 50 01             	lea    edx,[eax+0x1]
c001ac26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac2a:	8a 00                	mov    al,BYTE PTR [eax]
c001ac2c:	0f b6 c0             	movzx  eax,al
c001ac2f:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac34:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac39:	c1 e0 08             	shl    eax,0x8
c001ac3c:	89 c2                	mov    edx,eax
c001ac3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac42:	09 d0                	or     eax,edx
c001ac44:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac48:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac4c:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac51:	75 3a                	jne    c001ac8d <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac57:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac5a:	66 3d dc 05          	cmp    ax,0x5dc
c001ac5e:	77 10                	ja     c001ac70 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac64:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac67:	0f b7 c0             	movzx  eax,ax
c001ac6a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac6e:	eb 1d                	jmp    c001ac8d <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac70:	83 ec 0c             	sub    esp,0xc
c001ac73:	68 e8 bc 02 c0       	push   0xc002bce8
c001ac78:	e8 62 82 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001ac7d:	83 c4 10             	add    esp,0x10
c001ac80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac84:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac88:	e9 c0 00 00 00       	jmp    c001ad4d <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ac8d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac95:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac97:	83 ec 04             	sub    esp,0x4
c001ac9a:	52                   	push   edx
c001ac9b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac9f:	50                   	push   eax
c001aca0:	e8 a7 5a fe ff       	call   c000074c <memcpy>
c001aca5:	83 c4 10             	add    esp,0x10
c001aca8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001acac:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001acb0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acb4:	8d 50 01             	lea    edx,[eax+0x1]
c001acb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acbb:	8a 00                	mov    al,BYTE PTR [eax]
c001acbd:	0f b6 c0             	movzx  eax,al
c001acc0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acc4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acc8:	8d 50 01             	lea    edx,[eax+0x1]
c001accb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001accf:	8a 00                	mov    al,BYTE PTR [eax]
c001acd1:	0f b6 c0             	movzx  eax,al
c001acd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001acd8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acdc:	8d 50 01             	lea    edx,[eax+0x1]
c001acdf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ace3:	8a 00                	mov    al,BYTE PTR [eax]
c001ace5:	0f b6 c0             	movzx  eax,al
c001ace8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acf0:	8d 50 01             	lea    edx,[eax+0x1]
c001acf3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acf7:	8a 00                	mov    al,BYTE PTR [eax]
c001acf9:	0f b6 c0             	movzx  eax,al
c001acfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad04:	c1 e0 18             	shl    eax,0x18
c001ad07:	89 c2                	mov    edx,eax
c001ad09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad0d:	c1 e0 10             	shl    eax,0x10
c001ad10:	09 c2                	or     edx,eax
c001ad12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad16:	c1 e0 08             	shl    eax,0x8
c001ad19:	09 d0                	or     eax,edx
c001ad1b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad27:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad2b:	83 e8 04             	sub    eax,0x4
c001ad2e:	83 ec 08             	sub    esp,0x8
c001ad31:	50                   	push   eax
c001ad32:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad36:	e8 b6 fc ff ff       	call   c001a9f1 <Net::crc32Calc(unsigned char*, int)>
c001ad3b:	83 c4 10             	add    esp,0x10
c001ad3e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad42:	0f 94 c2             	sete   dl
c001ad45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad49:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad4c:	90                   	nop
c001ad4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad51:	83 c4 2c             	add    esp,0x2c
c001ad54:	c2 04 00             	ret    0x4

c001ad57 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad57:	55                   	push   ebp
c001ad58:	57                   	push   edi
c001ad59:	56                   	push   esi
c001ad5a:	53                   	push   ebx
c001ad5b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad61:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad68:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad6a:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad6d:	80 fb 40             	cmp    bl,0x40
c001ad70:	75 1b                	jne    c001ad8d <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad72:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad74:	84 d2                	test   dl,dl
c001ad76:	0f 84 f1 00 00 00    	je     c001ae6d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad7c:	8d 46 01             	lea    eax,[esi+0x1]
c001ad7f:	80 fa 3a             	cmp    dl,0x3a
c001ad82:	74 04                	je     c001ad88 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad84:	89 c6                	mov    esi,eax
c001ad86:	eb ea                	jmp    c001ad72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad88:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad8b:	89 c6                	mov    esi,eax
c001ad8d:	50                   	push   eax
c001ad8e:	6a 40                	push   0x40
c001ad90:	6a 00                	push   0x0
c001ad92:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad96:	50                   	push   eax
c001ad97:	e8 e4 59 fe ff       	call   c0000780 <memset>
c001ad9c:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ada3:	31 c0                	xor    eax,eax
c001ada5:	83 c4 10             	add    esp,0x10
c001ada8:	8a 0f                	mov    cl,BYTE PTR [edi]
c001adaa:	84 c9                	test   cl,cl
c001adac:	0f 84 bb 00 00 00    	je     c001ae6d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adb2:	3d c7 00 00 00       	cmp    eax,0xc7
c001adb7:	0f 8f b0 00 00 00    	jg     c001ae6d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adbd:	80 f9 0a             	cmp    cl,0xa
c001adc0:	0f 85 98 00 00 00    	jne    c001ae5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001adc6:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001adcb:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001adcf:	a8 df                	test   al,0xdf
c001add1:	0f 94 c1             	sete   cl
c001add4:	3c 23                	cmp    al,0x23
c001add6:	0f 94 c2             	sete   dl
c001add9:	08 d1                	or     cl,dl
c001addb:	75 4a                	jne    c001ae27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001addd:	8d 50 f7             	lea    edx,[eax-0x9]
c001ade0:	80 fa 01             	cmp    dl,0x1
c001ade3:	76 42                	jbe    c001ae27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ade5:	3c 5b                	cmp    al,0x5b
c001ade7:	75 42                	jne    c001ae2b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ade9:	80 fb 40             	cmp    bl,0x40
c001adec:	75 39                	jne    c001ae27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adee:	83 ec 0c             	sub    esp,0xc
c001adf1:	8d 54 24 65          	lea    edx,[esp+0x65]
c001adf5:	52                   	push   edx
c001adf6:	e8 a1 59 fe ff       	call   c000079c <strlen>
c001adfb:	83 c4 10             	add    esp,0x10
c001adfe:	83 f8 3f             	cmp    eax,0x3f
c001ae01:	77 6a                	ja     c001ae6d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae03:	50                   	push   eax
c001ae04:	50                   	push   eax
c001ae05:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae09:	52                   	push   edx
c001ae0a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae0e:	52                   	push   edx
c001ae0f:	e8 28 5a fe ff       	call   c000083c <strcpy>
c001ae14:	58                   	pop    eax
c001ae15:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae19:	52                   	push   edx
c001ae1a:	e8 7d 59 fe ff       	call   c000079c <strlen>
c001ae1f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae24:	83 c4 10             	add    esp,0x10
c001ae27:	31 d2                	xor    edx,edx
c001ae29:	eb 3a                	jmp    c001ae65 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae2b:	80 fb 40             	cmp    bl,0x40
c001ae2e:	74 06                	je     c001ae36 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae30:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae34:	eb 20                	jmp    c001ae56 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae36:	50                   	push   eax
c001ae37:	50                   	push   eax
c001ae38:	55                   	push   ebp
c001ae39:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae3d:	50                   	push   eax
c001ae3e:	e8 85 5a fe ff       	call   c00008c8 <strcmp>
c001ae43:	83 c4 10             	add    esp,0x10
c001ae46:	85 c0                	test   eax,eax
c001ae48:	75 dd                	jne    c001ae27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae4a:	eb e4                	jmp    c001ae30 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae4c:	8d 50 01             	lea    edx,[eax+0x1]
c001ae4f:	80 f9 3d             	cmp    cl,0x3d
c001ae52:	74 1d                	je     c001ae71 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae54:	89 d0                	mov    eax,edx
c001ae56:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae58:	84 c9                	test   cl,cl
c001ae5a:	75 f0                	jne    c001ae4c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae5c:	eb 0f                	jmp    c001ae6d <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae5e:	8d 50 01             	lea    edx,[eax+0x1]
c001ae61:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae65:	47                   	inc    edi
c001ae66:	89 d0                	mov    eax,edx
c001ae68:	e9 3b ff ff ff       	jmp    c001ada8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae6d:	31 c0                	xor    eax,eax
c001ae6f:	eb 33                	jmp    c001aea4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae78:	50                   	push   eax
c001ae79:	50                   	push   eax
c001ae7a:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae7e:	50                   	push   eax
c001ae7f:	56                   	push   esi
c001ae80:	e8 43 5a fe ff       	call   c00008c8 <strcmp>
c001ae85:	83 c4 10             	add    esp,0x10
c001ae88:	85 c0                	test   eax,eax
c001ae8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae8e:	75 97                	jne    c001ae27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae90:	51                   	push   ecx
c001ae91:	51                   	push   ecx
c001ae92:	52                   	push   edx
c001ae93:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae9a:	e8 9d 59 fe ff       	call   c000083c <strcpy>
c001ae9f:	83 c4 10             	add    esp,0x10
c001aea2:	b0 01                	mov    al,0x1
c001aea4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aeaa:	5b                   	pop    ebx
c001aeab:	5e                   	pop    esi
c001aeac:	5f                   	pop    edi
c001aead:	5d                   	pop    ebp
c001aeae:	c3                   	ret    

c001aeaf <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aeaf:	57                   	push   edi
c001aeb0:	56                   	push   esi
c001aeb1:	53                   	push   ebx
c001aeb2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aeb8:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aebf:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aec6:	53                   	push   ebx
c001aec7:	e8 d0 58 fe ff       	call   c000079c <strlen>
c001aecc:	89 34 24             	mov    DWORD PTR [esp],esi
c001aecf:	89 c7                	mov    edi,eax
c001aed1:	e8 c6 58 fe ff       	call   c000079c <strlen>
c001aed6:	83 c4 10             	add    esp,0x10
c001aed9:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aedd:	3d ff 00 00 00       	cmp    eax,0xff
c001aee2:	0f 87 d3 00 00 00    	ja     c001afbb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aee8:	57                   	push   edi
c001aee9:	57                   	push   edi
c001aeea:	56                   	push   esi
c001aeeb:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aeef:	56                   	push   esi
c001aef0:	e8 47 59 fe ff       	call   c000083c <strcpy>
c001aef5:	58                   	pop    eax
c001aef6:	5a                   	pop    edx
c001aef7:	68 31 c2 02 c0       	push   0xc002c231
c001aefc:	56                   	push   esi
c001aefd:	e8 7a 5a fe ff       	call   c000097c <strcat>
c001af02:	59                   	pop    ecx
c001af03:	5f                   	pop    edi
c001af04:	53                   	push   ebx
c001af05:	56                   	push   esi
c001af06:	e8 71 5a fe ff       	call   c000097c <strcat>
c001af0b:	58                   	pop    eax
c001af0c:	5a                   	pop    edx
c001af0d:	68 34 bd 02 c0       	push   0xc002bd34
c001af12:	56                   	push   esi
c001af13:	e8 64 5a fe ff       	call   c000097c <strcat>
c001af18:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af1f:	e8 27 49 ff ff       	call   c000f84b <malloc>
c001af24:	83 c4 0c             	add    esp,0xc
c001af27:	89 c3                	mov    ebx,eax
c001af29:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001af2f:	56                   	push   esi
c001af30:	50                   	push   eax
c001af31:	e8 02 85 ff ff       	call   c0013438 <File::File(char const*, Process*)>
c001af36:	83 c4 10             	add    esp,0x10
c001af39:	85 db                	test   ebx,ebx
c001af3b:	74 7e                	je     c001afbb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af3d:	51                   	push   ecx
c001af3e:	51                   	push   ecx
c001af3f:	6a 01                	push   0x1
c001af41:	53                   	push   ebx
c001af42:	e8 55 85 ff ff       	call   c001349c <File::open(FileOpenMode)>
c001af47:	83 c4 10             	add    esp,0x10
c001af4a:	85 c0                	test   eax,eax
c001af4c:	74 08                	je     c001af56 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af4e:	83 ec 0c             	sub    esp,0xc
c001af51:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af53:	53                   	push   ebx
c001af54:	eb 5f                	jmp    c001afb5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af56:	52                   	push   edx
c001af57:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af5b:	50                   	push   eax
c001af5c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af60:	50                   	push   eax
c001af61:	53                   	push   ebx
c001af62:	e8 e1 87 ff ff       	call   c0013748 <File::stat(unsigned long long*, bool*)>
c001af67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af6b:	83 c4 10             	add    esp,0x10
c001af6e:	89 c1                	mov    ecx,eax
c001af70:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af74:	74 31                	je     c001afa7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af76:	83 ec 0c             	sub    esp,0xc
c001af79:	50                   	push   eax
c001af7a:	e8 cc 48 ff ff       	call   c000f84b <malloc>
c001af7f:	89 c6                	mov    esi,eax
c001af81:	58                   	pop    eax
c001af82:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af84:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af88:	52                   	push   edx
c001af89:	56                   	push   esi
c001af8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af92:	53                   	push   ebx
c001af93:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af96:	83 c4 20             	add    esp,0x20
c001af99:	85 c0                	test   eax,eax
c001af9b:	75 0a                	jne    c001afa7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afa1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001afa5:	74 18                	je     c001afbf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001afa7:	83 ec 0c             	sub    esp,0xc
c001afaa:	53                   	push   ebx
c001afab:	e8 4a 85 ff ff       	call   c00134fa <File::close()>
c001afb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afb5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afb8:	83 c4 10             	add    esp,0x10
c001afbb:	31 c0                	xor    eax,eax
c001afbd:	eb 3b                	jmp    c001affa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001afbf:	83 ec 0c             	sub    esp,0xc
c001afc2:	53                   	push   ebx
c001afc3:	e8 32 85 ff ff       	call   c00134fa <File::close()>
c001afc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afcd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afd0:	83 c4 0c             	add    esp,0xc
c001afd3:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afda:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afe1:	56                   	push   esi
c001afe2:	e8 70 fd ff ff       	call   c001ad57 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001afe7:	89 34 24             	mov    DWORD PTR [esp],esi
c001afea:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001afee:	e8 68 48 ff ff       	call   c000f85b <free>
c001aff3:	83 c4 10             	add    esp,0x10
c001aff6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001affa:	81 c4 20 01 00 00    	add    esp,0x120
c001b000:	5b                   	pop    ebx
c001b001:	5e                   	pop    esi
c001b002:	5f                   	pop    edi
c001b003:	c3                   	ret    

c001b004 <Reg::getLine(char*, char*, char*)>:
c001b004:	57                   	push   edi
c001b005:	56                   	push   esi
c001b006:	53                   	push   ebx
c001b007:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b00b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b00f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b013:	57                   	push   edi
c001b014:	56                   	push   esi
c001b015:	53                   	push   ebx
c001b016:	68 39 bd 02 c0       	push   0xc002bd39
c001b01b:	e8 8f fe ff ff       	call   c001aeaf <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b020:	83 c4 10             	add    esp,0x10
c001b023:	84 c0                	test   al,al
c001b025:	75 10                	jne    c001b037 <Reg::getLine(char*, char*, char*)+0x33>
c001b027:	57                   	push   edi
c001b028:	56                   	push   esi
c001b029:	53                   	push   ebx
c001b02a:	68 5e bd 02 c0       	push   0xc002bd5e
c001b02f:	e8 7b fe ff ff       	call   c001aeaf <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b034:	83 c4 10             	add    esp,0x10
c001b037:	5b                   	pop    ebx
c001b038:	5e                   	pop    esi
c001b039:	5f                   	pop    edi
c001b03a:	c3                   	ret    

c001b03b <Reg::readInt(char*, char*, int*)>:
c001b03b:	55                   	push   ebp
c001b03c:	57                   	push   edi
c001b03d:	56                   	push   esi
c001b03e:	53                   	push   ebx
c001b03f:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b045:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b049:	57                   	push   edi
c001b04a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b051:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b058:	e8 a7 ff ff ff       	call   c001b004 <Reg::getLine(char*, char*, char*)>
c001b05d:	83 c4 10             	add    esp,0x10
c001b060:	84 c0                	test   al,al
c001b062:	0f 84 b3 00 00 00    	je     c001b11b <Reg::readInt(char*, char*, int*)+0xe0>
c001b068:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b06c:	80 fa 2b             	cmp    dl,0x2b
c001b06f:	74 0c                	je     c001b07d <Reg::readInt(char*, char*, int*)+0x42>
c001b071:	80 fa 2d             	cmp    dl,0x2d
c001b074:	75 0e                	jne    c001b084 <Reg::readInt(char*, char*, int*)+0x49>
c001b076:	ba 01 00 00 00       	mov    edx,0x1
c001b07b:	eb 0b                	jmp    c001b088 <Reg::readInt(char*, char*, int*)+0x4d>
c001b07d:	ba 01 00 00 00       	mov    edx,0x1
c001b082:	eb 02                	jmp    c001b086 <Reg::readInt(char*, char*, int*)+0x4b>
c001b084:	31 d2                	xor    edx,edx
c001b086:	31 c0                	xor    eax,eax
c001b088:	be 0a 00 00 00       	mov    esi,0xa
c001b08d:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b092:	75 20                	jne    c001b0b4 <Reg::readInt(char*, char*, int*)+0x79>
c001b094:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b098:	80 f9 78             	cmp    cl,0x78
c001b09b:	75 0a                	jne    c001b0a7 <Reg::readInt(char*, char*, int*)+0x6c>
c001b09d:	83 c2 02             	add    edx,0x2
c001b0a0:	be 10 00 00 00       	mov    esi,0x10
c001b0a5:	eb 0d                	jmp    c001b0b4 <Reg::readInt(char*, char*, int*)+0x79>
c001b0a7:	80 f9 62             	cmp    cl,0x62
c001b0aa:	75 08                	jne    c001b0b4 <Reg::readInt(char*, char*, int*)+0x79>
c001b0ac:	83 c2 02             	add    edx,0x2
c001b0af:	be 02 00 00 00       	mov    esi,0x2
c001b0b4:	01 d7                	add    edi,edx
c001b0b6:	31 d2                	xor    edx,edx
c001b0b8:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b0ba:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b0be:	80 fb 0d             	cmp    bl,0xd
c001b0c1:	0f 94 c3             	sete   bl
c001b0c4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b0c9:	0f 94 c1             	sete   cl
c001b0cc:	08 cb                	or     bl,cl
c001b0ce:	75 3a                	jne    c001b10a <Reg::readInt(char*, char*, int*)+0xcf>
c001b0d0:	0f af d6             	imul   edx,esi
c001b0d3:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b0d8:	83 fe 10             	cmp    esi,0x10
c001b0db:	75 26                	jne    c001b103 <Reg::readInt(char*, char*, int*)+0xc8>
c001b0dd:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0e1:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b0e4:	89 e9                	mov    ecx,ebp
c001b0e6:	80 f9 05             	cmp    cl,0x5
c001b0e9:	77 06                	ja     c001b0f1 <Reg::readInt(char*, char*, int*)+0xb6>
c001b0eb:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b0ef:	eb 16                	jmp    c001b107 <Reg::readInt(char*, char*, int*)+0xcc>
c001b0f1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0f5:	83 e9 61             	sub    ecx,0x61
c001b0f8:	80 f9 05             	cmp    cl,0x5
c001b0fb:	77 06                	ja     c001b103 <Reg::readInt(char*, char*, int*)+0xc8>
c001b0fd:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b101:	eb 04                	jmp    c001b107 <Reg::readInt(char*, char*, int*)+0xcc>
c001b103:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b107:	47                   	inc    edi
c001b108:	eb ae                	jmp    c001b0b8 <Reg::readInt(char*, char*, int*)+0x7d>
c001b10a:	84 c0                	test   al,al
c001b10c:	74 02                	je     c001b110 <Reg::readInt(char*, char*, int*)+0xd5>
c001b10e:	f7 da                	neg    edx
c001b110:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b117:	89 10                	mov    DWORD PTR [eax],edx
c001b119:	88 d8                	mov    al,bl
c001b11b:	81 c4 ec 00 00 00    	add    esp,0xec
c001b121:	5b                   	pop    ebx
c001b122:	5e                   	pop    esi
c001b123:	5f                   	pop    edi
c001b124:	5d                   	pop    ebp
c001b125:	c3                   	ret    

c001b126 <Reg::readString(char*, char*, char*, int)>:
c001b126:	57                   	push   edi
c001b127:	56                   	push   esi
c001b128:	53                   	push   ebx
c001b129:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b12f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b136:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b13a:	57                   	push   edi
c001b13b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b142:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b149:	e8 b6 fe ff ff       	call   c001b004 <Reg::getLine(char*, char*, char*)>
c001b14e:	83 c4 10             	add    esp,0x10
c001b151:	89 c6                	mov    esi,eax
c001b153:	84 c0                	test   al,al
c001b155:	74 44                	je     c001b19b <Reg::readString(char*, char*, char*, int)+0x75>
c001b157:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b15e:	31 c0                	xor    eax,eax
c001b160:	4a                   	dec    edx
c001b161:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b164:	84 c9                	test   cl,cl
c001b166:	74 0f                	je     c001b177 <Reg::readString(char*, char*, char*, int)+0x51>
c001b168:	39 c2                	cmp    edx,eax
c001b16a:	7e 0b                	jle    c001b177 <Reg::readString(char*, char*, char*, int)+0x51>
c001b16c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b16f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b174:	40                   	inc    eax
c001b175:	eb ea                	jmp    c001b161 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b177:	83 ec 0c             	sub    esp,0xc
c001b17a:	53                   	push   ebx
c001b17b:	e8 1c 56 fe ff       	call   c000079c <strlen>
c001b180:	83 c4 10             	add    esp,0x10
c001b183:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b188:	75 11                	jne    c001b19b <Reg::readString(char*, char*, char*, int)+0x75>
c001b18a:	83 ec 0c             	sub    esp,0xc
c001b18d:	53                   	push   ebx
c001b18e:	e8 09 56 fe ff       	call   c000079c <strlen>
c001b193:	83 c4 10             	add    esp,0x10
c001b196:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b19b:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b1a1:	89 f0                	mov    eax,esi
c001b1a3:	5b                   	pop    ebx
c001b1a4:	5e                   	pop    esi
c001b1a5:	5f                   	pop    edi
c001b1a6:	c3                   	ret    

c001b1a7 <Reg::readBool(char*, char*, bool*)>:
c001b1a7:	83 ec 20             	sub    esp,0x20
c001b1aa:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1ae:	50                   	push   eax
c001b1af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1b7:	e8 7f fe ff ff       	call   c001b03b <Reg::readInt(char*, char*, int*)>
c001b1bc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b1c1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b1c5:	0f 95 02             	setne  BYTE PTR [edx]
c001b1c8:	83 c4 2c             	add    esp,0x2c
c001b1cb:	c3                   	ret    

c001b1cc <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b1cc:	53                   	push   ebx
c001b1cd:	83 ec 1c             	sub    esp,0x1c
c001b1d0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b1d4:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b1d8:	50                   	push   eax
c001b1d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1e1:	e8 c1 ff ff ff       	call   c001b1a7 <Reg::readBool(char*, char*, bool*)>
c001b1e6:	83 c4 10             	add    esp,0x10
c001b1e9:	84 c0                	test   al,al
c001b1eb:	74 04                	je     c001b1f1 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b1ed:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b1f1:	88 d8                	mov    al,bl
c001b1f3:	83 c4 18             	add    esp,0x18
c001b1f6:	5b                   	pop    ebx
c001b1f7:	c3                   	ret    

c001b1f8 <Reg::readIntWithDefault(char*, char*, int)>:
c001b1f8:	53                   	push   ebx
c001b1f9:	83 ec 1c             	sub    esp,0x1c
c001b1fc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b200:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b204:	50                   	push   eax
c001b205:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b20d:	e8 29 fe ff ff       	call   c001b03b <Reg::readInt(char*, char*, int*)>
c001b212:	83 c4 10             	add    esp,0x10
c001b215:	84 c0                	test   al,al
c001b217:	74 04                	je     c001b21d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b219:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b21d:	89 d8                	mov    eax,ebx
c001b21f:	83 c4 18             	add    esp,0x18
c001b222:	5b                   	pop    ebx
c001b223:	c3                   	ret    

c001b224 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b224:	57                   	push   edi
c001b225:	56                   	push   esi
c001b226:	53                   	push   ebx
c001b227:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b22b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b22f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b233:	56                   	push   esi
c001b234:	53                   	push   ebx
c001b235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b23d:	e8 e4 fe ff ff       	call   c001b126 <Reg::readString(char*, char*, char*, int)>
c001b242:	83 c4 10             	add    esp,0x10
c001b245:	84 c0                	test   al,al
c001b247:	75 1b                	jne    c001b264 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b249:	50                   	push   eax
c001b24a:	56                   	push   esi
c001b24b:	4e                   	dec    esi
c001b24c:	6a 00                	push   0x0
c001b24e:	53                   	push   ebx
c001b24f:	e8 2c 55 fe ff       	call   c0000780 <memset>
c001b254:	83 c4 0c             	add    esp,0xc
c001b257:	56                   	push   esi
c001b258:	57                   	push   edi
c001b259:	53                   	push   ebx
c001b25a:	89 fb                	mov    ebx,edi
c001b25c:	e8 eb 54 fe ff       	call   c000074c <memcpy>
c001b261:	83 c4 10             	add    esp,0x10
c001b264:	89 d8                	mov    eax,ebx
c001b266:	5b                   	pop    ebx
c001b267:	5e                   	pop    esi
c001b268:	5f                   	pop    edi
c001b269:	c3                   	ret    

c001b26a <Sys::eject(regs*)>:
c001b26a:	83 ec 0c             	sub    esp,0xc
c001b26d:	83 ca ff             	or     edx,0xffffffff
c001b270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b274:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b277:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b27c:	83 e9 41             	sub    ecx,0x41
c001b27f:	83 f9 19             	cmp    ecx,0x19
c001b282:	77 18                	ja     c001b29c <Sys::eject(regs*)+0x32>
c001b284:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c001b28b:	85 c9                	test   ecx,ecx
c001b28d:	74 0d                	je     c001b29c <Sys::eject(regs*)+0x32>
c001b28f:	83 ec 0c             	sub    esp,0xc
c001b292:	51                   	push   ecx
c001b293:	e8 68 b4 ff ff       	call   c0016700 <LogicalDisk::eject()>
c001b298:	83 c4 10             	add    esp,0x10
c001b29b:	99                   	cdq    
c001b29c:	83 c4 0c             	add    esp,0xc
c001b29f:	c3                   	ret    

c001b2a0 <Sys::exit(regs*)>:
c001b2a0:	83 ec 18             	sub    esp,0x18
c001b2a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2a7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2aa:	e8 b4 35 00 00       	call   c001e863 <terminateTask(int)>
c001b2af:	83 c8 ff             	or     eax,0xffffffff
c001b2b2:	83 c4 1c             	add    esp,0x1c
c001b2b5:	89 c2                	mov    edx,eax
c001b2b7:	c3                   	ret    

c001b2b8 <Sys::getCwd(regs*)>:
c001b2b8:	83 ec 10             	sub    esp,0x10
c001b2bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2bf:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b2c2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2ca:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2cd:	e8 68 7f ff ff       	call   c001323a <Fs::getcwd(Process*, char*, int)>
c001b2d2:	83 c4 1c             	add    esp,0x1c
c001b2d5:	99                   	cdq    
c001b2d6:	c3                   	ret    

c001b2d7 <Sys::getPID(regs*)>:
c001b2d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2df:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2e1:	99                   	cdq    
c001b2e2:	c3                   	ret    

c001b2e3 <Sys::getRAMData(regs*)>:
c001b2e3:	8b 0d b4 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e4b4
c001b2e9:	6b 05 b0 e4 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e4b0,0x64
c001b2f0:	99                   	cdq    
c001b2f1:	f7 f9                	idiv   ecx
c001b2f3:	c1 e0 18             	shl    eax,0x18
c001b2f6:	09 c8                	or     eax,ecx
c001b2f8:	99                   	cdq    
c001b2f9:	c3                   	ret    

c001b2fa <Sys::loadDLL(regs*)>:
c001b2fa:	56                   	push   esi
c001b2fb:	53                   	push   ebx
c001b2fc:	31 d2                	xor    edx,edx
c001b2fe:	51                   	push   ecx
c001b2ff:	b8 01 00 00 00       	mov    eax,0x1
c001b304:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b308:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b30c:	0f 84 8c 00 00 00    	je     c001b39e <Sys::loadDLL(regs*)+0xa4>
c001b312:	83 ec 0c             	sub    esp,0xc
c001b315:	68 14 01 00 00       	push   0x114
c001b31a:	e8 2c 45 ff ff       	call   c000f84b <malloc>
c001b31f:	83 c4 0c             	add    esp,0xc
c001b322:	89 c3                	mov    ebx,eax
c001b324:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b329:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b32c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b32f:	53                   	push   ebx
c001b330:	e8 03 81 ff ff       	call   c0013438 <File::File(char const*, Process*)>
c001b335:	83 c4 10             	add    esp,0x10
c001b338:	31 d2                	xor    edx,edx
c001b33a:	b8 02 00 00 00       	mov    eax,0x2
c001b33f:	85 db                	test   ebx,ebx
c001b341:	74 5b                	je     c001b39e <Sys::loadDLL(regs*)+0xa4>
c001b343:	83 ec 0c             	sub    esp,0xc
c001b346:	53                   	push   ebx
c001b347:	e8 be 83 ff ff       	call   c001370a <File::exists()>
c001b34c:	83 c4 10             	add    esp,0x10
c001b34f:	84 c0                	test   al,al
c001b351:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b353:	75 11                	jne    c001b366 <Sys::loadDLL(regs*)+0x6c>
c001b355:	83 ec 0c             	sub    esp,0xc
c001b358:	53                   	push   ebx
c001b359:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b35c:	83 c4 10             	add    esp,0x10
c001b35f:	b8 03 00 00 00       	mov    eax,0x3
c001b364:	eb 36                	jmp    c001b39c <Sys::loadDLL(regs*)+0xa2>
c001b366:	83 ec 0c             	sub    esp,0xc
c001b369:	53                   	push   ebx
c001b36a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b36d:	58                   	pop    eax
c001b36e:	5a                   	pop    edx
c001b36f:	6a 00                	push   0x0
c001b371:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b374:	e8 c5 23 00 00       	call   c001d73e <Thr::loadDLL(char const*, bool)>
c001b379:	83 c4 10             	add    esp,0x10
c001b37c:	89 c1                	mov    ecx,eax
c001b37e:	31 d2                	xor    edx,edx
c001b380:	b8 04 00 00 00       	mov    eax,0x4
c001b385:	85 c9                	test   ecx,ecx
c001b387:	74 15                	je     c001b39e <Sys::loadDLL(regs*)+0xa4>
c001b389:	53                   	push   ebx
c001b38a:	53                   	push   ebx
c001b38b:	ff 35 68 e4 02 c0    	push   DWORD PTR ds:0xc002e468
c001b391:	51                   	push   ecx
c001b392:	e8 db 25 00 00       	call   c001d972 <Thr::executeDLL(unsigned long, void*)>
c001b397:	83 c4 10             	add    esp,0x10
c001b39a:	31 c0                	xor    eax,eax
c001b39c:	31 d2                	xor    edx,edx
c001b39e:	59                   	pop    ecx
c001b39f:	5b                   	pop    ebx
c001b3a0:	5e                   	pop    esi
c001b3a1:	c3                   	ret    

c001b3a2 <Sys::read(regs*)>:
c001b3a2:	57                   	push   edi
c001b3a3:	56                   	push   esi
c001b3a4:	53                   	push   ebx
c001b3a5:	83 ec 10             	sub    esp,0x10
c001b3a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3ac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3af:	83 f8 02             	cmp    eax,0x2
c001b3b2:	77 10                	ja     c001b3c4 <Sys::read(regs*)+0x22>
c001b3b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3bc:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3c2:	eb 0e                	jmp    c001b3d2 <Sys::read(regs*)+0x30>
c001b3c4:	83 ec 0c             	sub    esp,0xc
c001b3c7:	50                   	push   eax
c001b3c8:	e8 28 66 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001b3cd:	83 c4 10             	add    esp,0x10
c001b3d0:	89 c1                	mov    ecx,eax
c001b3d2:	83 c8 ff             	or     eax,0xffffffff
c001b3d5:	85 c9                	test   ecx,ecx
c001b3d7:	89 c2                	mov    edx,eax
c001b3d9:	74 28                	je     c001b403 <Sys::read(regs*)+0x61>
c001b3db:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3e3:	31 ff                	xor    edi,edi
c001b3e5:	83 ec 0c             	sub    esp,0xc
c001b3e8:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b3ea:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b3ee:	52                   	push   edx
c001b3ef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3f2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b3f5:	57                   	push   edi
c001b3f6:	56                   	push   esi
c001b3f7:	51                   	push   ecx
c001b3f8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3ff:	83 c4 20             	add    esp,0x20
c001b402:	99                   	cdq    
c001b403:	83 c4 10             	add    esp,0x10
c001b406:	5b                   	pop    ebx
c001b407:	5e                   	pop    esi
c001b408:	5f                   	pop    edi
c001b409:	c3                   	ret    

c001b40a <Sys::sbrk(regs*)>:
c001b40a:	56                   	push   esi
c001b40b:	53                   	push   ebx
c001b40c:	50                   	push   eax
c001b40d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b412:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b416:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b419:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b41c:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b422:	85 db                	test   ebx,ebx
c001b424:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b427:	74 02                	je     c001b42b <Sys::sbrk(regs*)+0x21>
c001b429:	79 06                	jns    c001b431 <Sys::sbrk(regs*)+0x27>
c001b42b:	89 f0                	mov    eax,esi
c001b42d:	31 d2                	xor    edx,edx
c001b42f:	eb 2a                	jmp    c001b45b <Sys::sbrk(regs*)+0x51>
c001b431:	83 c8 ff             	or     eax,0xffffffff
c001b434:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b43a:	89 c2                	mov    edx,eax
c001b43c:	77 1d                	ja     c001b45b <Sys::sbrk(regs*)+0x51>
c001b43e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b444:	50                   	push   eax
c001b445:	c1 ea 0c             	shr    edx,0xc
c001b448:	68 07 0c 00 00       	push   0xc07
c001b44d:	52                   	push   edx
c001b44e:	51                   	push   ecx
c001b44f:	e8 e4 6f ff ff       	call   c0012438 <VAS::allocatePages(int, int)>
c001b454:	89 f0                	mov    eax,esi
c001b456:	31 d2                	xor    edx,edx
c001b458:	83 c4 10             	add    esp,0x10
c001b45b:	59                   	pop    ecx
c001b45c:	5b                   	pop    ebx
c001b45d:	5e                   	pop    esi
c001b45e:	c3                   	ret    

c001b45f <Sys::setCwd(regs*)>:
c001b45f:	83 ec 14             	sub    esp,0x14
c001b462:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b466:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b469:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b46e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b471:	e8 33 83 ff ff       	call   c00137a9 <Fs::setcwd(Process*, char*)>
c001b476:	83 c4 1c             	add    esp,0x1c
c001b479:	99                   	cdq    
c001b47a:	c3                   	ret    

c001b47b <Sys::setTime(regs*)>:
c001b47b:	55                   	push   ebp
c001b47c:	31 d2                	xor    edx,edx
c001b47e:	57                   	push   edi
c001b47f:	bf 18 00 00 00       	mov    edi,0x18
c001b484:	56                   	push   esi
c001b485:	53                   	push   ebx
c001b486:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b48b:	83 ec 30             	sub    esp,0x30
c001b48e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b492:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b495:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b498:	f7 f3                	div    ebx
c001b49a:	89 d6                	mov    esi,edx
c001b49c:	31 d2                	xor    edx,edx
c001b49e:	f7 f3                	div    ebx
c001b4a0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b4a7:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b4ac:	31 d2                	xor    edx,edx
c001b4ae:	f7 f3                	div    ebx
c001b4b0:	31 d2                	xor    edx,edx
c001b4b2:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4b7:	f7 f7                	div    edi
c001b4b9:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4bc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4c0:	0f b7 cd             	movzx  ecx,bp
c001b4c3:	56                   	push   esi
c001b4c4:	89 c7                	mov    edi,eax
c001b4c6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b4ca:	c1 e6 10             	shl    esi,0x10
c001b4cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4d1:	83 e7 1f             	and    edi,0x1f
c001b4d4:	51                   	push   ecx
c001b4d5:	47                   	inc    edi
c001b4d6:	c1 e8 05             	shr    eax,0x5
c001b4d9:	31 d2                	xor    edx,edx
c001b4db:	f7 f3                	div    ebx
c001b4dd:	31 db                	xor    ebx,ebx
c001b4df:	52                   	push   edx
c001b4e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b4e4:	57                   	push   edi
c001b4e5:	68 79 bd 02 c0       	push   0xc002bd79
c001b4ea:	e8 f0 79 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001b4ef:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b4f3:	89 f8                	mov    eax,edi
c001b4f5:	31 c9                	xor    ecx,ecx
c001b4f7:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b4fb:	88 c1                	mov    cl,al
c001b4fd:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b503:	88 d5                	mov    ch,dl
c001b505:	c1 e0 10             	shl    eax,0x10
c001b508:	0f b7 d1             	movzx  edx,cx
c001b50b:	09 c2                	or     edx,eax
c001b50d:	89 d8                	mov    eax,ebx
c001b50f:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b514:	09 f0                	or     eax,esi
c001b516:	89 c3                	mov    ebx,eax
c001b518:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b51c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b520:	83 c4 18             	add    esp,0x18
c001b523:	53                   	push   ebx
c001b524:	52                   	push   edx
c001b525:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b529:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b52d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b531:	e8 8d 89 ff ff       	call   c0013ec3 <datetimeToSeconds(datetime_t)>
c001b536:	83 c4 0c             	add    esp,0xc
c001b539:	52                   	push   edx
c001b53a:	50                   	push   eax
c001b53b:	56                   	push   esi
c001b53c:	e8 09 8b ff ff       	call   c001404a <secondsToDatetime(unsigned long long)>
c001b541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b545:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b549:	51                   	push   ecx
c001b54a:	89 d6                	mov    esi,edx
c001b54c:	51                   	push   ecx
c001b54d:	c1 ee 10             	shr    esi,0x10
c001b550:	89 f3                	mov    ebx,esi
c001b552:	0f b6 f3             	movzx  esi,bl
c001b555:	56                   	push   esi
c001b556:	0f b6 f6             	movzx  esi,dh
c001b559:	0f b6 d2             	movzx  edx,dl
c001b55c:	56                   	push   esi
c001b55d:	52                   	push   edx
c001b55e:	89 c2                	mov    edx,eax
c001b560:	c1 ea 10             	shr    edx,0x10
c001b563:	52                   	push   edx
c001b564:	0f b6 d4             	movzx  edx,ah
c001b567:	0f b6 c0             	movzx  eax,al
c001b56a:	52                   	push   edx
c001b56b:	50                   	push   eax
c001b56c:	68 95 bd 02 c0       	push   0xc002bd95
c001b571:	e8 69 79 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001b576:	83 c4 2c             	add    esp,0x2c
c001b579:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001b57e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b582:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b586:	53                   	push   ebx
c001b587:	51                   	push   ecx
c001b588:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b58e:	e8 57 8a ff ff       	call   c0013fea <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b593:	83 f0 01             	xor    eax,0x1
c001b596:	31 d2                	xor    edx,edx
c001b598:	0f b6 c0             	movzx  eax,al
c001b59b:	83 c4 3c             	add    esp,0x3c
c001b59e:	5b                   	pop    ebx
c001b59f:	5e                   	pop    esi
c001b5a0:	5f                   	pop    edi
c001b5a1:	5d                   	pop    ebp
c001b5a2:	c3                   	ret    

c001b5a3 <Sys::timezone(regs*)>:
c001b5a3:	53                   	push   ebx
c001b5a4:	83 ec 08             	sub    esp,0x8
c001b5a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5ab:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5af:	75 17                	jne    c001b5c8 <Sys::timezone(regs*)+0x25>
c001b5b1:	83 ec 0c             	sub    esp,0xc
c001b5b4:	68 b1 bd 02 c0       	push   0xc002bdb1
c001b5b9:	e8 21 79 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001b5be:	83 c8 ff             	or     eax,0xffffffff
c001b5c1:	83 c4 10             	add    esp,0x10
c001b5c4:	89 c2                	mov    edx,eax
c001b5c6:	eb 20                	jmp    c001b5e8 <Sys::timezone(regs*)+0x45>
c001b5c8:	83 ec 0c             	sub    esp,0xc
c001b5cb:	68 e9 bd 02 c0       	push   0xc002bde9
c001b5d0:	e8 0a 79 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001b5d5:	58                   	pop    eax
c001b5d6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b5d9:	e8 6e 87 ff ff       	call   c0013d4c <User::loadClockSettings(int)>
c001b5de:	83 c4 10             	add    esp,0x10
c001b5e1:	b8 01 00 00 00       	mov    eax,0x1
c001b5e6:	31 d2                	xor    edx,edx
c001b5e8:	83 c4 08             	add    esp,0x8
c001b5eb:	5b                   	pop    ebx
c001b5ec:	c3                   	ret    

c001b5ed <Sys::write(regs*)>:
c001b5ed:	57                   	push   edi
c001b5ee:	56                   	push   esi
c001b5ef:	53                   	push   ebx
c001b5f0:	83 ec 10             	sub    esp,0x10
c001b5f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b5f7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5fa:	83 f8 02             	cmp    eax,0x2
c001b5fd:	77 10                	ja     c001b60f <Sys::write(regs*)+0x22>
c001b5ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b604:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b607:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b60d:	eb 0e                	jmp    c001b61d <Sys::write(regs*)+0x30>
c001b60f:	83 ec 0c             	sub    esp,0xc
c001b612:	50                   	push   eax
c001b613:	e8 dd 63 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001b618:	83 c4 10             	add    esp,0x10
c001b61b:	89 c1                	mov    ecx,eax
c001b61d:	83 c8 ff             	or     eax,0xffffffff
c001b620:	85 c9                	test   ecx,ecx
c001b622:	89 c2                	mov    edx,eax
c001b624:	74 28                	je     c001b64e <Sys::write(regs*)+0x61>
c001b626:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b62e:	31 ff                	xor    edi,edi
c001b630:	83 ec 0c             	sub    esp,0xc
c001b633:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b635:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b639:	52                   	push   edx
c001b63a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b63d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b640:	57                   	push   edi
c001b641:	56                   	push   esi
c001b642:	51                   	push   ecx
c001b643:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b646:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b64a:	83 c4 20             	add    esp,0x20
c001b64d:	99                   	cdq    
c001b64e:	83 c4 10             	add    esp,0x10
c001b651:	5b                   	pop    ebx
c001b652:	5e                   	pop    esi
c001b653:	5f                   	pop    edi
c001b654:	c3                   	ret    

c001b655 <Sys::wsbe(regs*)>:
c001b655:	57                   	push   edi
c001b656:	b9 0b 00 00 00       	mov    ecx,0xb
c001b65b:	56                   	push   esi
c001b65c:	be 28 be 02 c0       	mov    esi,0xc002be28
c001b661:	53                   	push   ebx
c001b662:	83 ec 30             	sub    esp,0x30
c001b665:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b669:	fc                   	cld    
c001b66a:	83 ec 0c             	sub    esp,0xc
c001b66d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b66f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b673:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b678:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b67b:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b681:	8b 06                	mov    eax,DWORD PTR [esi]
c001b683:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b686:	57                   	push   edi
c001b687:	e8 10 51 fe ff       	call   c000079c <strlen>
c001b68c:	5a                   	pop    edx
c001b68d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b691:	52                   	push   edx
c001b692:	31 d2                	xor    edx,edx
c001b694:	57                   	push   edi
c001b695:	52                   	push   edx
c001b696:	50                   	push   eax
c001b697:	56                   	push   esi
c001b698:	ff d3                	call   ebx
c001b69a:	83 c4 14             	add    esp,0x14
c001b69d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b6a1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6a4:	e8 ba 31 00 00       	call   c001e863 <terminateTask(int)>
c001b6a9:	83 c4 40             	add    esp,0x40
c001b6ac:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6b1:	5b                   	pop    ebx
c001b6b2:	31 d2                	xor    edx,edx
c001b6b4:	5e                   	pop    esi
c001b6b5:	5f                   	pop    edi
c001b6b6:	c3                   	ret    

c001b6b7 <Sys::yield(regs*)>:
c001b6b7:	57                   	push   edi
c001b6b8:	56                   	push   esi
c001b6b9:	53                   	push   ebx
c001b6ba:	e8 27 27 00 00       	call   c001dde6 <lockScheduler()>
c001b6bf:	e8 98 2a 00 00       	call   c001e15c <schedule()>
c001b6c4:	e8 1f 27 00 00       	call   c001dde8 <unlockScheduler()>
c001b6c9:	8b 35 f0 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002eaf0
c001b6cf:	8b 3d f4 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002eaf4
c001b6d5:	89 f0                	mov    eax,esi
c001b6d7:	89 fb                	mov    ebx,edi
c001b6d9:	89 f1                	mov    ecx,esi
c001b6db:	c1 e0 07             	shl    eax,0x7
c001b6de:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b6e2:	25 80 30 0f 00       	and    eax,0xf3080
c001b6e7:	c1 eb 17             	shr    ebx,0x17
c001b6ea:	31 c8                	xor    eax,ecx
c001b6ec:	89 da                	mov    edx,ebx
c001b6ee:	5b                   	pop    ebx
c001b6ef:	5e                   	pop    esi
c001b6f0:	5f                   	pop    edi
c001b6f1:	c3                   	ret    

c001b6f2 <sysCallSeekDir(regs*)>:
c001b6f2:	31 c0                	xor    eax,eax
c001b6f4:	31 d2                	xor    edx,edx
c001b6f6:	c3                   	ret    

c001b6f7 <sysCallTellDir(regs*)>:
c001b6f7:	31 c0                	xor    eax,eax
c001b6f9:	31 d2                	xor    edx,edx
c001b6fb:	c3                   	ret    

c001b6fc <sysCallVerify(regs*)>:
c001b6fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b700:	31 d2                	xor    edx,edx
c001b702:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b705:	c3                   	ret    

c001b706 <sysFormatDisk(regs*)>:
c001b706:	56                   	push   esi
c001b707:	53                   	push   ebx
c001b708:	53                   	push   ebx
c001b709:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b70d:	8b 1d f4 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5f4
c001b713:	eb 25                	jmp    c001b73a <sysFormatDisk(regs*)+0x34>
c001b715:	83 ec 0c             	sub    esp,0xc
c001b718:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b71b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b71d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b720:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b723:	50                   	push   eax
c001b724:	ff 34 85 80 ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1580]
c001b72b:	53                   	push   ebx
c001b72c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b72f:	83 c4 20             	add    esp,0x20
c001b732:	83 f8 08             	cmp    eax,0x8
c001b735:	75 12                	jne    c001b749 <sysFormatDisk(regs*)+0x43>
c001b737:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b73a:	85 db                	test   ebx,ebx
c001b73c:	75 d7                	jne    c001b715 <sysFormatDisk(regs*)+0xf>
c001b73e:	59                   	pop    ecx
c001b73f:	b8 03 00 00 00       	mov    eax,0x3
c001b744:	31 d2                	xor    edx,edx
c001b746:	5b                   	pop    ebx
c001b747:	5e                   	pop    esi
c001b748:	c3                   	ret    
c001b749:	85 c0                	test   eax,eax
c001b74b:	74 1b                	je     c001b768 <sysFormatDisk(regs*)+0x62>
c001b74d:	83 f8 09             	cmp    eax,0x9
c001b750:	74 0b                	je     c001b75d <sysFormatDisk(regs*)+0x57>
c001b752:	59                   	pop    ecx
c001b753:	b8 02 00 00 00       	mov    eax,0x2
c001b758:	31 d2                	xor    edx,edx
c001b75a:	5b                   	pop    ebx
c001b75b:	5e                   	pop    esi
c001b75c:	c3                   	ret    
c001b75d:	59                   	pop    ecx
c001b75e:	b8 01 00 00 00       	mov    eax,0x1
c001b763:	31 d2                	xor    edx,edx
c001b765:	5b                   	pop    ebx
c001b766:	5e                   	pop    esi
c001b767:	c3                   	ret    
c001b768:	59                   	pop    ecx
c001b769:	31 c0                	xor    eax,eax
c001b76b:	31 d2                	xor    edx,edx
c001b76d:	5b                   	pop    ebx
c001b76e:	5e                   	pop    esi
c001b76f:	c3                   	ret    

c001b770 <sysSetDiskVolumeLabel(regs*)>:
c001b770:	56                   	push   esi
c001b771:	53                   	push   ebx
c001b772:	53                   	push   ebx
c001b773:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b777:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b77a:	83 f8 19             	cmp    eax,0x19
c001b77d:	77 29                	ja     c001b7a8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b77f:	8b 0c 85 80 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1580]
c001b786:	85 c9                	test   ecx,ecx
c001b788:	74 1e                	je     c001b7a8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b78a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b78d:	85 d2                	test   edx,edx
c001b78f:	74 17                	je     c001b7a8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b791:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b797:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b799:	52                   	push   edx
c001b79a:	50                   	push   eax
c001b79b:	51                   	push   ecx
c001b79c:	53                   	push   ebx
c001b79d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b7a0:	83 c4 10             	add    esp,0x10
c001b7a3:	99                   	cdq    
c001b7a4:	59                   	pop    ecx
c001b7a5:	5b                   	pop    ebx
c001b7a6:	5e                   	pop    esi
c001b7a7:	c3                   	ret    
c001b7a8:	59                   	pop    ecx
c001b7a9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7b3:	5b                   	pop    ebx
c001b7b4:	5e                   	pop    esi
c001b7b5:	c3                   	ret    

c001b7b6 <sysGetDiskVolumeLabel(regs*)>:
c001b7b6:	57                   	push   edi
c001b7b7:	56                   	push   esi
c001b7b8:	53                   	push   ebx
c001b7b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7bd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7c0:	83 fa 19             	cmp    edx,0x19
c001b7c3:	77 34                	ja     c001b7f9 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7c5:	8b 0c 95 80 ea 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1580]
c001b7cc:	85 c9                	test   ecx,ecx
c001b7ce:	74 29                	je     c001b7f9 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7d0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b7d3:	85 db                	test   ebx,ebx
c001b7d5:	74 22                	je     c001b7f9 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7d7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b7da:	85 c0                	test   eax,eax
c001b7dc:	74 1b                	je     c001b7f9 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7de:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b7e4:	83 ec 0c             	sub    esp,0xc
c001b7e7:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b7e9:	50                   	push   eax
c001b7ea:	53                   	push   ebx
c001b7eb:	52                   	push   edx
c001b7ec:	51                   	push   ecx
c001b7ed:	56                   	push   esi
c001b7ee:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b7f1:	83 c4 20             	add    esp,0x20
c001b7f4:	99                   	cdq    
c001b7f5:	5b                   	pop    ebx
c001b7f6:	5e                   	pop    esi
c001b7f7:	5f                   	pop    edi
c001b7f8:	c3                   	ret    
c001b7f9:	5b                   	pop    ebx
c001b7fa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b804:	5e                   	pop    esi
c001b805:	5f                   	pop    edi
c001b806:	c3                   	ret    

c001b807 <sysShutdown(regs*)>:
c001b807:	83 ec 0c             	sub    esp,0xc
c001b80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b80e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b811:	85 c0                	test   eax,eax
c001b813:	74 18                	je     c001b82d <sysShutdown(regs*)+0x26>
c001b815:	83 f8 01             	cmp    eax,0x1
c001b818:	74 38                	je     c001b852 <sysShutdown(regs*)+0x4b>
c001b81a:	83 f8 02             	cmp    eax,0x2
c001b81d:	74 24                	je     c001b843 <sysShutdown(regs*)+0x3c>
c001b81f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b824:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b829:	83 c4 0c             	add    esp,0xc
c001b82c:	c3                   	ret    
c001b82d:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001b832:	8b 10                	mov    edx,DWORD PTR [eax]
c001b834:	6a 00                	push   0x0
c001b836:	6a 00                	push   0x0
c001b838:	6a 00                	push   0x0
c001b83a:	50                   	push   eax
c001b83b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b83e:	83 c4 10             	add    esp,0x10
c001b841:	eb dc                	jmp    c001b81f <sysShutdown(regs*)+0x18>
c001b843:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001b848:	8b 10                	mov    edx,DWORD PTR [eax]
c001b84a:	6a 00                	push   0x0
c001b84c:	6a 00                	push   0x0
c001b84e:	6a 01                	push   0x1
c001b850:	eb e8                	jmp    c001b83a <sysShutdown(regs*)+0x33>
c001b852:	a1 20 0b 03 c0       	mov    eax,ds:0xc0030b20
c001b857:	85 c0                	test   eax,eax
c001b859:	74 02                	je     c001b85d <sysShutdown(regs*)+0x56>
c001b85b:	ff d0                	call   eax
c001b85d:	31 c0                	xor    eax,eax
c001b85f:	31 d2                	xor    edx,edx
c001b861:	83 c4 0c             	add    esp,0xc
c001b864:	c3                   	ret    

c001b865 <sysCallRealpath(regs*)>:
c001b865:	83 ec 0c             	sub    esp,0xc
c001b868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b86c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b86f:	85 d2                	test   edx,edx
c001b871:	74 07                	je     c001b87a <sysCallRealpath(regs*)+0x15>
c001b873:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b876:	85 c0                	test   eax,eax
c001b878:	75 0b                	jne    c001b885 <sysCallRealpath(regs*)+0x20>
c001b87a:	b8 01 00 00 00       	mov    eax,0x1
c001b87f:	31 d2                	xor    edx,edx
c001b881:	83 c4 0c             	add    esp,0xc
c001b884:	c3                   	ret    
c001b885:	51                   	push   ecx
c001b886:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b88c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b88f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b895:	51                   	push   ecx
c001b896:	52                   	push   edx
c001b897:	50                   	push   eax
c001b898:	e8 f1 79 ff ff       	call   c001328e <Fs::standardiseFiles(char*, char const*, char const*)>
c001b89d:	83 c4 10             	add    esp,0x10
c001b8a0:	31 c0                	xor    eax,eax
c001b8a2:	31 d2                	xor    edx,edx
c001b8a4:	83 c4 0c             	add    esp,0xc
c001b8a7:	c3                   	ret    

c001b8a8 <sysCallGetArgc(regs*)>:
c001b8a8:	83 ec 14             	sub    esp,0x14
c001b8ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8b3:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8b9:	68 54 be 02 c0       	push   0xc002be54
c001b8be:	e8 1c 76 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001b8c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8cb:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b8d1:	83 c4 1c             	add    esp,0x1c
c001b8d4:	99                   	cdq    
c001b8d5:	c3                   	ret    

c001b8d6 <sysCallReadDir(regs*)>:
c001b8d6:	53                   	push   ebx
c001b8d7:	83 ec 18             	sub    esp,0x18
c001b8da:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8e1:	83 f8 02             	cmp    eax,0x2
c001b8e4:	76 53                	jbe    c001b939 <sysCallReadDir(regs*)+0x63>
c001b8e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b8e9:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b8ef:	77 4f                	ja     c001b940 <sysCallReadDir(regs*)+0x6a>
c001b8f1:	83 ec 0c             	sub    esp,0xc
c001b8f4:	50                   	push   eax
c001b8f5:	e8 fb 60 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001b8fa:	83 c4 10             	add    esp,0x10
c001b8fd:	85 c0                	test   eax,eax
c001b8ff:	74 50                	je     c001b951 <sysCallReadDir(regs*)+0x7b>
c001b901:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b909:	83 ec 0c             	sub    esp,0xc
c001b90c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b90e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b912:	51                   	push   ecx
c001b913:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b916:	6a 00                	push   0x0
c001b918:	68 10 01 00 00       	push   0x110
c001b91d:	50                   	push   eax
c001b91e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b921:	83 c4 20             	add    esp,0x20
c001b924:	85 c0                	test   eax,eax
c001b926:	74 38                	je     c001b960 <sysCallReadDir(regs*)+0x8a>
c001b928:	83 f8 07             	cmp    eax,0x7
c001b92b:	74 0c                	je     c001b939 <sysCallReadDir(regs*)+0x63>
c001b92d:	b8 02 00 00 00       	mov    eax,0x2
c001b932:	31 d2                	xor    edx,edx
c001b934:	83 c4 18             	add    esp,0x18
c001b937:	5b                   	pop    ebx
c001b938:	c3                   	ret    
c001b939:	b8 01 00 00 00       	mov    eax,0x1
c001b93e:	eb f2                	jmp    c001b932 <sysCallReadDir(regs*)+0x5c>
c001b940:	83 ec 08             	sub    esp,0x8
c001b943:	52                   	push   edx
c001b944:	68 6c bf 02 c0       	push   0xc002bf6c
c001b949:	e8 91 75 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001b94e:	83 c4 10             	add    esp,0x10
c001b951:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b956:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b95b:	83 c4 18             	add    esp,0x18
c001b95e:	5b                   	pop    ebx
c001b95f:	c3                   	ret    
c001b960:	31 c0                	xor    eax,eax
c001b962:	eb ce                	jmp    c001b932 <sysCallReadDir(regs*)+0x5c>

c001b964 <sysCallIsATTY(regs*)>:
c001b964:	83 ec 0c             	sub    esp,0xc
c001b967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b96b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b96e:	83 f8 02             	cmp    eax,0x2
c001b971:	76 07                	jbe    c001b97a <sysCallIsATTY(regs*)+0x16>
c001b973:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b978:	75 26                	jne    c001b9a0 <sysCallIsATTY(regs*)+0x3c>
c001b97a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b97f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b982:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b988:	85 c0                	test   eax,eax
c001b98a:	74 24                	je     c001b9b0 <sysCallIsATTY(regs*)+0x4c>
c001b98c:	83 ec 0c             	sub    esp,0xc
c001b98f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b991:	50                   	push   eax
c001b992:	ff 12                	call   DWORD PTR [edx]
c001b994:	31 d2                	xor    edx,edx
c001b996:	0f b6 c0             	movzx  eax,al
c001b999:	83 c4 10             	add    esp,0x10
c001b99c:	83 c4 0c             	add    esp,0xc
c001b99f:	c3                   	ret    
c001b9a0:	83 ec 0c             	sub    esp,0xc
c001b9a3:	50                   	push   eax
c001b9a4:	e8 4c 60 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001b9a9:	83 c4 10             	add    esp,0x10
c001b9ac:	85 c0                	test   eax,eax
c001b9ae:	75 dc                	jne    c001b98c <sysCallIsATTY(regs*)+0x28>
c001b9b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9ba:	83 c4 0c             	add    esp,0xc
c001b9bd:	c3                   	ret    

c001b9be <sysCallSeek(regs*)>:
c001b9be:	53                   	push   ebx
c001b9bf:	83 ec 08             	sub    esp,0x8
c001b9c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9c6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9c9:	83 f8 02             	cmp    eax,0x2
c001b9cc:	76 4a                	jbe    c001ba18 <sysCallSeek(regs*)+0x5a>
c001b9ce:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9d3:	77 32                	ja     c001ba07 <sysCallSeek(regs*)+0x49>
c001b9d5:	83 ec 0c             	sub    esp,0xc
c001b9d8:	50                   	push   eax
c001b9d9:	e8 17 60 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001b9de:	83 c4 0c             	add    esp,0xc
c001b9e1:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9e4:	31 db                	xor    ebx,ebx
c001b9e6:	53                   	push   ebx
c001b9e7:	51                   	push   ecx
c001b9e8:	50                   	push   eax
c001b9e9:	e8 6c 7b ff ff       	call   c001355a <File::seek(unsigned long long)>
c001b9ee:	83 c4 10             	add    esp,0x10
c001b9f1:	85 c0                	test   eax,eax
c001b9f3:	0f 95 c0             	setne  al
c001b9f6:	31 d2                	xor    edx,edx
c001b9f8:	0f b6 c0             	movzx  eax,al
c001b9fb:	f7 d8                	neg    eax
c001b9fd:	83 d2 00             	adc    edx,0x0
c001ba00:	83 c4 08             	add    esp,0x8
c001ba03:	f7 da                	neg    edx
c001ba05:	5b                   	pop    ebx
c001ba06:	c3                   	ret    
c001ba07:	83 ec 08             	sub    esp,0x8
c001ba0a:	50                   	push   eax
c001ba0b:	68 5f be 02 c0       	push   0xc002be5f
c001ba10:	e8 ca 74 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001ba15:	83 c4 10             	add    esp,0x10
c001ba18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba1d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba22:	83 c4 08             	add    esp,0x8
c001ba25:	5b                   	pop    ebx
c001ba26:	c3                   	ret    

c001ba27 <sysCallTell(regs*)>:
c001ba27:	53                   	push   ebx
c001ba28:	83 ec 08             	sub    esp,0x8
c001ba2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba2f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba32:	83 f8 02             	cmp    eax,0x2
c001ba35:	76 5e                	jbe    c001ba95 <sysCallTell(regs*)+0x6e>
c001ba37:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba3c:	77 2d                	ja     c001ba6b <sysCallTell(regs*)+0x44>
c001ba3e:	83 ec 0c             	sub    esp,0xc
c001ba41:	50                   	push   eax
c001ba42:	e8 ae 5f ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001ba47:	5a                   	pop    edx
c001ba48:	59                   	pop    ecx
c001ba49:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba4c:	50                   	push   eax
c001ba4d:	e8 5e 7b ff ff       	call   c00135b0 <File::tell(unsigned long long*)>
c001ba52:	83 c4 10             	add    esp,0x10
c001ba55:	85 c0                	test   eax,eax
c001ba57:	0f 95 c0             	setne  al
c001ba5a:	31 d2                	xor    edx,edx
c001ba5c:	0f b6 c0             	movzx  eax,al
c001ba5f:	f7 d8                	neg    eax
c001ba61:	83 d2 00             	adc    edx,0x0
c001ba64:	83 c4 08             	add    esp,0x8
c001ba67:	f7 da                	neg    edx
c001ba69:	5b                   	pop    ebx
c001ba6a:	c3                   	ret    
c001ba6b:	83 ec 08             	sub    esp,0x8
c001ba6e:	50                   	push   eax
c001ba6f:	68 79 be 02 c0       	push   0xc002be79
c001ba74:	e8 66 74 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001ba79:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba7c:	83 c4 10             	add    esp,0x10
c001ba7f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba85:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba8c:	31 d2                	xor    edx,edx
c001ba8e:	31 c0                	xor    eax,eax
c001ba90:	83 c4 08             	add    esp,0x8
c001ba93:	5b                   	pop    ebx
c001ba94:	c3                   	ret    
c001ba95:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba9a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba9f:	83 c4 08             	add    esp,0x8
c001baa2:	5b                   	pop    ebx
c001baa3:	c3                   	ret    

c001baa4 <sysCallSize(regs*)>:
c001baa4:	53                   	push   ebx
c001baa5:	83 ec 18             	sub    esp,0x18
c001baa8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001baac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baaf:	83 f8 02             	cmp    eax,0x2
c001bab2:	76 64                	jbe    c001bb18 <sysCallSize(regs*)+0x74>
c001bab4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bab9:	77 33                	ja     c001baee <sysCallSize(regs*)+0x4a>
c001babb:	83 ec 0c             	sub    esp,0xc
c001babe:	50                   	push   eax
c001babf:	e8 31 5f ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001bac4:	83 c4 0c             	add    esp,0xc
c001bac7:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bacb:	52                   	push   edx
c001bacc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bacf:	50                   	push   eax
c001bad0:	e8 73 7c ff ff       	call   c0013748 <File::stat(unsigned long long*, bool*)>
c001bad5:	83 c4 10             	add    esp,0x10
c001bad8:	85 c0                	test   eax,eax
c001bada:	0f 95 c0             	setne  al
c001badd:	31 d2                	xor    edx,edx
c001badf:	0f b6 c0             	movzx  eax,al
c001bae2:	f7 d8                	neg    eax
c001bae4:	83 d2 00             	adc    edx,0x0
c001bae7:	83 c4 18             	add    esp,0x18
c001baea:	f7 da                	neg    edx
c001baec:	5b                   	pop    ebx
c001baed:	c3                   	ret    
c001baee:	83 ec 08             	sub    esp,0x8
c001baf1:	50                   	push   eax
c001baf2:	68 93 be 02 c0       	push   0xc002be93
c001baf7:	e8 e3 73 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001bafc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001baff:	83 c4 10             	add    esp,0x10
c001bb02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb08:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb0f:	31 d2                	xor    edx,edx
c001bb11:	31 c0                	xor    eax,eax
c001bb13:	83 c4 18             	add    esp,0x18
c001bb16:	5b                   	pop    ebx
c001bb17:	c3                   	ret    
c001bb18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb1d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb22:	83 c4 18             	add    esp,0x18
c001bb25:	5b                   	pop    ebx
c001bb26:	c3                   	ret    

c001bb27 <sysCallSizeFromFilename(regs*)>:
c001bb27:	57                   	push   edi
c001bb28:	56                   	push   esi
c001bb29:	53                   	push   ebx
c001bb2a:	83 ec 20             	sub    esp,0x20
c001bb2d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb31:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb34:	83 fb 02             	cmp    ebx,0x2
c001bb37:	0f 86 99 00 00 00    	jbe    c001bbd6 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb3d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb43:	77 65                	ja     c001bbaa <sysCallSizeFromFilename(regs*)+0x83>
c001bb45:	83 ec 0c             	sub    esp,0xc
c001bb48:	68 14 01 00 00       	push   0x114
c001bb4d:	e8 f9 3c ff ff       	call   c000f84b <malloc>
c001bb52:	83 c4 0c             	add    esp,0xc
c001bb55:	89 c6                	mov    esi,eax
c001bb57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb5c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb5f:	53                   	push   ebx
c001bb60:	56                   	push   esi
c001bb61:	e8 d2 78 ff ff       	call   c0013438 <File::File(char const*, Process*)>
c001bb66:	83 c4 0c             	add    esp,0xc
c001bb69:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb6d:	50                   	push   eax
c001bb6e:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb71:	56                   	push   esi
c001bb72:	e8 d1 7b ff ff       	call   c0013748 <File::stat(unsigned long long*, bool*)>
c001bb77:	83 c4 10             	add    esp,0x10
c001bb7a:	85 f6                	test   esi,esi
c001bb7c:	74 14                	je     c001bb92 <sysCallSizeFromFilename(regs*)+0x6b>
c001bb7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb82:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb84:	83 ec 0c             	sub    esp,0xc
c001bb87:	56                   	push   esi
c001bb88:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb8b:	83 c4 10             	add    esp,0x10
c001bb8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb92:	85 c0                	test   eax,eax
c001bb94:	0f 95 c0             	setne  al
c001bb97:	31 d2                	xor    edx,edx
c001bb99:	0f b6 c0             	movzx  eax,al
c001bb9c:	f7 d8                	neg    eax
c001bb9e:	83 d2 00             	adc    edx,0x0
c001bba1:	83 c4 20             	add    esp,0x20
c001bba4:	f7 da                	neg    edx
c001bba6:	5b                   	pop    ebx
c001bba7:	5e                   	pop    esi
c001bba8:	5f                   	pop    edi
c001bba9:	c3                   	ret    
c001bbaa:	83 ec 08             	sub    esp,0x8
c001bbad:	53                   	push   ebx
c001bbae:	68 93 be 02 c0       	push   0xc002be93
c001bbb3:	e8 27 73 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001bbb8:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bbbb:	83 c4 10             	add    esp,0x10
c001bbbe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbc4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbcb:	31 d2                	xor    edx,edx
c001bbcd:	83 c4 20             	add    esp,0x20
c001bbd0:	31 c0                	xor    eax,eax
c001bbd2:	5b                   	pop    ebx
c001bbd3:	5e                   	pop    esi
c001bbd4:	5f                   	pop    edi
c001bbd5:	c3                   	ret    
c001bbd6:	83 c4 20             	add    esp,0x20
c001bbd9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbde:	5b                   	pop    ebx
c001bbdf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbe4:	5e                   	pop    esi
c001bbe5:	5f                   	pop    edi
c001bbe6:	c3                   	ret    

c001bbe7 <sysCallClose(regs*)>:
c001bbe7:	53                   	push   ebx
c001bbe8:	83 ec 08             	sub    esp,0x8
c001bbeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbf2:	83 f8 02             	cmp    eax,0x2
c001bbf5:	76 50                	jbe    c001bc47 <sysCallClose(regs*)+0x60>
c001bbf7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bbfc:	74 58                	je     c001bc56 <sysCallClose(regs*)+0x6f>
c001bbfe:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc03:	74 60                	je     c001bc65 <sysCallClose(regs*)+0x7e>
c001bc05:	77 2f                	ja     c001bc36 <sysCallClose(regs*)+0x4f>
c001bc07:	83 ec 0c             	sub    esp,0xc
c001bc0a:	50                   	push   eax
c001bc0b:	e8 e5 5d ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001bc10:	89 c3                	mov    ebx,eax
c001bc12:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc15:	e8 e0 78 ff ff       	call   c00134fa <File::close()>
c001bc1a:	83 c4 10             	add    esp,0x10
c001bc1d:	85 db                	test   ebx,ebx
c001bc1f:	74 0c                	je     c001bc2d <sysCallClose(regs*)+0x46>
c001bc21:	83 ec 0c             	sub    esp,0xc
c001bc24:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc26:	53                   	push   ebx
c001bc27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc2a:	83 c4 10             	add    esp,0x10
c001bc2d:	31 c0                	xor    eax,eax
c001bc2f:	31 d2                	xor    edx,edx
c001bc31:	83 c4 08             	add    esp,0x8
c001bc34:	5b                   	pop    ebx
c001bc35:	c3                   	ret    
c001bc36:	83 ec 08             	sub    esp,0x8
c001bc39:	50                   	push   eax
c001bc3a:	68 90 bf 02 c0       	push   0xc002bf90
c001bc3f:	e8 9b 72 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001bc44:	83 c4 10             	add    esp,0x10
c001bc47:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc4c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc51:	83 c4 08             	add    esp,0x8
c001bc54:	5b                   	pop    ebx
c001bc55:	c3                   	ret    
c001bc56:	83 ec 0c             	sub    esp,0xc
c001bc59:	68 ae be 02 c0       	push   0xc002beae
c001bc5e:	e8 7c 72 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001bc63:	eb c5                	jmp    c001bc2a <sysCallClose(regs*)+0x43>
c001bc65:	83 ec 0c             	sub    esp,0xc
c001bc68:	68 bc be 02 c0       	push   0xc002bebc
c001bc6d:	eb ef                	jmp    c001bc5e <sysCallClose(regs*)+0x77>

c001bc6f <sysCallOpenDir(regs*)>:
c001bc6f:	56                   	push   esi
c001bc70:	53                   	push   ebx
c001bc71:	53                   	push   ebx
c001bc72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc76:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc79:	85 f6                	test   esi,esi
c001bc7b:	74 59                	je     c001bcd6 <sysCallOpenDir(regs*)+0x67>
c001bc7d:	83 ec 0c             	sub    esp,0xc
c001bc80:	68 14 01 00 00       	push   0x114
c001bc85:	e8 c1 3b ff ff       	call   c000f84b <malloc>
c001bc8a:	83 c4 0c             	add    esp,0xc
c001bc8d:	89 c6                	mov    esi,eax
c001bc8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc94:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc97:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc9a:	56                   	push   esi
c001bc9b:	e8 44 7c ff ff       	call   c00138e4 <Directory::Directory(char const*, Process*)>
c001bca0:	83 c4 10             	add    esp,0x10
c001bca3:	85 f6                	test   esi,esi
c001bca5:	74 2f                	je     c001bcd6 <sysCallOpenDir(regs*)+0x67>
c001bca7:	83 ec 0c             	sub    esp,0xc
c001bcaa:	56                   	push   esi
c001bcab:	e8 98 7c ff ff       	call   c0013948 <Directory::open()>
c001bcb0:	83 c4 10             	add    esp,0x10
c001bcb3:	85 c0                	test   eax,eax
c001bcb5:	75 1f                	jne    c001bcd6 <sysCallOpenDir(regs*)+0x67>
c001bcb7:	83 ec 0c             	sub    esp,0xc
c001bcba:	56                   	push   esi
c001bcbb:	e8 40 5a ff ff       	call   c0011700 <UnixFile::getFileDescriptor()>
c001bcc0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcc3:	83 c4 10             	add    esp,0x10
c001bcc6:	89 02                	mov    DWORD PTR [edx],eax
c001bcc8:	c1 f8 1f             	sar    eax,0x1f
c001bccb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bcce:	31 c0                	xor    eax,eax
c001bcd0:	59                   	pop    ecx
c001bcd1:	31 d2                	xor    edx,edx
c001bcd3:	5b                   	pop    ebx
c001bcd4:	5e                   	pop    esi
c001bcd5:	c3                   	ret    
c001bcd6:	59                   	pop    ecx
c001bcd7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcdc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bce1:	5b                   	pop    ebx
c001bce2:	5e                   	pop    esi
c001bce3:	c3                   	ret    

c001bce4 <sysCallCloseDir(regs*)>:
c001bce4:	53                   	push   ebx
c001bce5:	83 ec 08             	sub    esp,0x8
c001bce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcef:	83 f8 02             	cmp    eax,0x2
c001bcf2:	76 47                	jbe    c001bd3b <sysCallCloseDir(regs*)+0x57>
c001bcf4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcf9:	77 2f                	ja     c001bd2a <sysCallCloseDir(regs*)+0x46>
c001bcfb:	83 ec 0c             	sub    esp,0xc
c001bcfe:	50                   	push   eax
c001bcff:	e8 f1 5c ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001bd04:	89 c3                	mov    ebx,eax
c001bd06:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd09:	e8 96 7c ff ff       	call   c00139a4 <Directory::close()>
c001bd0e:	83 c4 10             	add    esp,0x10
c001bd11:	85 db                	test   ebx,ebx
c001bd13:	74 0c                	je     c001bd21 <sysCallCloseDir(regs*)+0x3d>
c001bd15:	83 ec 0c             	sub    esp,0xc
c001bd18:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd1a:	53                   	push   ebx
c001bd1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd1e:	83 c4 10             	add    esp,0x10
c001bd21:	31 c0                	xor    eax,eax
c001bd23:	31 d2                	xor    edx,edx
c001bd25:	83 c4 08             	add    esp,0x8
c001bd28:	5b                   	pop    ebx
c001bd29:	c3                   	ret    
c001bd2a:	83 ec 08             	sub    esp,0x8
c001bd2d:	50                   	push   eax
c001bd2e:	68 b8 bf 02 c0       	push   0xc002bfb8
c001bd33:	e8 a7 71 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001bd38:	83 c4 10             	add    esp,0x10
c001bd3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd40:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd45:	83 c4 08             	add    esp,0x8
c001bd48:	5b                   	pop    ebx
c001bd49:	c3                   	ret    

c001bd4a <sysCallMakeDir(regs*)>:
c001bd4a:	56                   	push   esi
c001bd4b:	53                   	push   ebx
c001bd4c:	83 ec 10             	sub    esp,0x10
c001bd4f:	68 14 01 00 00       	push   0x114
c001bd54:	e8 f2 3a ff ff       	call   c000f84b <malloc>
c001bd59:	83 c4 0c             	add    esp,0xc
c001bd5c:	89 c3                	mov    ebx,eax
c001bd5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd63:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd6a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd6d:	53                   	push   ebx
c001bd6e:	e8 71 7b ff ff       	call   c00138e4 <Directory::Directory(char const*, Process*)>
c001bd73:	83 c4 10             	add    esp,0x10
c001bd76:	85 db                	test   ebx,ebx
c001bd78:	74 32                	je     c001bdac <sysCallMakeDir(regs*)+0x62>
c001bd7a:	83 ec 0c             	sub    esp,0xc
c001bd7d:	53                   	push   ebx
c001bd7e:	e8 a5 7d ff ff       	call   c0013b28 <Directory::create()>
c001bd83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd86:	89 c6                	mov    esi,eax
c001bd88:	e8 17 7c ff ff       	call   c00139a4 <Directory::close()>
c001bd8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd92:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd95:	83 c4 10             	add    esp,0x10
c001bd98:	31 c0                	xor    eax,eax
c001bd9a:	59                   	pop    ecx
c001bd9b:	85 f6                	test   esi,esi
c001bd9d:	5b                   	pop    ebx
c001bd9e:	0f 95 c0             	setne  al
c001bda1:	5e                   	pop    esi
c001bda2:	31 d2                	xor    edx,edx
c001bda4:	f7 d8                	neg    eax
c001bda6:	83 d2 00             	adc    edx,0x0
c001bda9:	f7 da                	neg    edx
c001bdab:	c3                   	ret    
c001bdac:	59                   	pop    ecx
c001bdad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdb2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdb7:	5b                   	pop    ebx
c001bdb8:	5e                   	pop    esi
c001bdb9:	c3                   	ret    

c001bdba <sysCallWait(regs*)>:
c001bdba:	83 ec 10             	sub    esp,0x10
c001bdbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdc1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bdc4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdc7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bdca:	e8 08 25 00 00       	call   c001e2d7 <waitTask(int, int*, int)>
c001bdcf:	83 c4 1c             	add    esp,0x1c
c001bdd2:	99                   	cdq    
c001bdd3:	c3                   	ret    

c001bdd4 <sysCallNotImpl(regs*)>:
c001bdd4:	83 ec 18             	sub    esp,0x18
c001bdd7:	68 ca be 02 c0       	push   0xc002beca
c001bddc:	e8 2a e8 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001bde1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bde6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdeb:	83 c4 1c             	add    esp,0x1c
c001bdee:	c3                   	ret    

c001bdef <sysPanic(regs*)>:
c001bdef:	83 ec 18             	sub    esp,0x18
c001bdf2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bdf6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdf9:	e8 0d e8 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001bdfe:	c7 04 24 e4 be 02 c0 	mov    DWORD PTR [esp],0xc002bee4
c001be05:	e8 01 e8 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001be0a:	b8 01 00 00 00       	mov    eax,0x1
c001be0f:	31 d2                	xor    edx,edx
c001be11:	83 c4 1c             	add    esp,0x1c
c001be14:	c3                   	ret    

c001be15 <sysCallRmdir(regs*)>:
c001be15:	56                   	push   esi
c001be16:	53                   	push   ebx
c001be17:	83 ec 20             	sub    esp,0x20
c001be1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be1e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be21:	68 14 01 00 00       	push   0x114
c001be26:	e8 20 3a ff ff       	call   c000f84b <malloc>
c001be2b:	83 c4 0c             	add    esp,0xc
c001be2e:	89 c3                	mov    ebx,eax
c001be30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be35:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be38:	56                   	push   esi
c001be39:	53                   	push   ebx
c001be3a:	e8 f9 75 ff ff       	call   c0013438 <File::File(char const*, Process*)>
c001be3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be42:	e8 cd 77 ff ff       	call   c0013614 <File::unlink()>
c001be47:	83 c4 10             	add    esp,0x10
c001be4a:	85 db                	test   ebx,ebx
c001be4c:	74 14                	je     c001be62 <sysCallRmdir(regs*)+0x4d>
c001be4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be52:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be54:	83 ec 0c             	sub    esp,0xc
c001be57:	53                   	push   ebx
c001be58:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be5b:	83 c4 10             	add    esp,0x10
c001be5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be62:	85 c0                	test   eax,eax
c001be64:	0f 95 c0             	setne  al
c001be67:	31 d2                	xor    edx,edx
c001be69:	0f b6 c0             	movzx  eax,al
c001be6c:	f7 d8                	neg    eax
c001be6e:	83 d2 00             	adc    edx,0x0
c001be71:	83 c4 14             	add    esp,0x14
c001be74:	f7 da                	neg    edx
c001be76:	5b                   	pop    ebx
c001be77:	5e                   	pop    esi
c001be78:	c3                   	ret    

c001be79 <sysCallUnlink(regs*)>:
c001be79:	56                   	push   esi
c001be7a:	53                   	push   ebx
c001be7b:	83 ec 20             	sub    esp,0x20
c001be7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be82:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be85:	68 14 01 00 00       	push   0x114
c001be8a:	e8 bc 39 ff ff       	call   c000f84b <malloc>
c001be8f:	83 c4 0c             	add    esp,0xc
c001be92:	89 c3                	mov    ebx,eax
c001be94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be99:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be9c:	56                   	push   esi
c001be9d:	53                   	push   ebx
c001be9e:	e8 95 75 ff ff       	call   c0013438 <File::File(char const*, Process*)>
c001bea3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bea6:	e8 69 77 ff ff       	call   c0013614 <File::unlink()>
c001beab:	83 c4 10             	add    esp,0x10
c001beae:	85 db                	test   ebx,ebx
c001beb0:	74 14                	je     c001bec6 <sysCallUnlink(regs*)+0x4d>
c001beb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001beb6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001beb8:	83 ec 0c             	sub    esp,0xc
c001bebb:	53                   	push   ebx
c001bebc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bebf:	83 c4 10             	add    esp,0x10
c001bec2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bec6:	85 c0                	test   eax,eax
c001bec8:	0f 95 c0             	setne  al
c001becb:	31 d2                	xor    edx,edx
c001becd:	0f b6 c0             	movzx  eax,al
c001bed0:	f7 d8                	neg    eax
c001bed2:	83 d2 00             	adc    edx,0x0
c001bed5:	83 c4 14             	add    esp,0x14
c001bed8:	f7 da                	neg    edx
c001beda:	5b                   	pop    ebx
c001bedb:	5e                   	pop    esi
c001bedc:	c3                   	ret    

c001bedd <sysCallGetArgv(regs*)>:
c001bedd:	83 ec 0c             	sub    esp,0xc
c001bee0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bee4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bee7:	85 c0                	test   eax,eax
c001bee9:	78 2b                	js     c001bf16 <sysCallGetArgv(regs*)+0x39>
c001beeb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bef1:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bef4:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001befa:	7d 1a                	jge    c001bf16 <sysCallGetArgv(regs*)+0x39>
c001befc:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf03:	85 c0                	test   eax,eax
c001bf05:	74 17                	je     c001bf1e <sysCallGetArgv(regs*)+0x41>
c001bf07:	83 ec 08             	sub    esp,0x8
c001bf0a:	50                   	push   eax
c001bf0b:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf0e:	e8 29 49 fe ff       	call   c000083c <strcpy>
c001bf13:	83 c4 10             	add    esp,0x10
c001bf16:	31 c0                	xor    eax,eax
c001bf18:	31 d2                	xor    edx,edx
c001bf1a:	83 c4 0c             	add    esp,0xc
c001bf1d:	c3                   	ret    
c001bf1e:	b8 01 00 00 00       	mov    eax,0x1
c001bf23:	31 d2                	xor    edx,edx
c001bf25:	83 c4 0c             	add    esp,0xc
c001bf28:	c3                   	ret    

c001bf29 <sysCallTTYName(regs*)>:
c001bf29:	56                   	push   esi
c001bf2a:	53                   	push   ebx
c001bf2b:	53                   	push   ebx
c001bf2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf30:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf33:	85 c0                	test   eax,eax
c001bf35:	74 5f                	je     c001bf96 <sysCallTTYName(regs*)+0x6d>
c001bf37:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf3a:	83 f8 02             	cmp    eax,0x2
c001bf3d:	77 3e                	ja     c001bf7d <sysCallTTYName(regs*)+0x54>
c001bf3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf44:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf47:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf4d:	85 db                	test   ebx,ebx
c001bf4f:	74 45                	je     c001bf96 <sysCallTTYName(regs*)+0x6d>
c001bf51:	83 ec 0c             	sub    esp,0xc
c001bf54:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf56:	53                   	push   ebx
c001bf57:	ff 10                	call   DWORD PTR [eax]
c001bf59:	83 c4 10             	add    esp,0x10
c001bf5c:	84 c0                	test   al,al
c001bf5e:	74 41                	je     c001bfa1 <sysCallTTYName(regs*)+0x78>
c001bf60:	83 ec 08             	sub    esp,0x8
c001bf63:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bf69:	53                   	push   ebx
c001bf6a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf6d:	e8 ca 48 fe ff       	call   c000083c <strcpy>
c001bf72:	83 c4 10             	add    esp,0x10
c001bf75:	31 c0                	xor    eax,eax
c001bf77:	59                   	pop    ecx
c001bf78:	31 d2                	xor    edx,edx
c001bf7a:	5b                   	pop    ebx
c001bf7b:	5e                   	pop    esi
c001bf7c:	c3                   	ret    
c001bf7d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf82:	74 bb                	je     c001bf3f <sysCallTTYName(regs*)+0x16>
c001bf84:	83 ec 0c             	sub    esp,0xc
c001bf87:	50                   	push   eax
c001bf88:	e8 68 5a ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001bf8d:	83 c4 10             	add    esp,0x10
c001bf90:	89 c3                	mov    ebx,eax
c001bf92:	85 db                	test   ebx,ebx
c001bf94:	75 bb                	jne    c001bf51 <sysCallTTYName(regs*)+0x28>
c001bf96:	59                   	pop    ecx
c001bf97:	b8 01 00 00 00       	mov    eax,0x1
c001bf9c:	31 d2                	xor    edx,edx
c001bf9e:	5b                   	pop    ebx
c001bf9f:	5e                   	pop    esi
c001bfa0:	c3                   	ret    
c001bfa1:	59                   	pop    ecx
c001bfa2:	b8 02 00 00 00       	mov    eax,0x2
c001bfa7:	31 d2                	xor    edx,edx
c001bfa9:	5b                   	pop    ebx
c001bfaa:	5e                   	pop    esi
c001bfab:	c3                   	ret    

c001bfac <sysCallUSleep(regs*)>:
c001bfac:	83 ec 14             	sub    esp,0x14
c001bfaf:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bfb4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfb8:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bfbf:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bfc2:	01 ca                	add    edx,ecx
c001bfc4:	52                   	push   edx
c001bfc5:	50                   	push   eax
c001bfc6:	e8 a5 23 00 00       	call   c001e370 <nanoSleep(unsigned long long)>
c001bfcb:	31 c0                	xor    eax,eax
c001bfcd:	31 d2                	xor    edx,edx
c001bfcf:	83 c4 1c             	add    esp,0x1c
c001bfd2:	c3                   	ret    

c001bfd3 <sysCallSpawn(regs*)>:
c001bfd3:	56                   	push   esi
c001bfd4:	53                   	push   ebx
c001bfd5:	53                   	push   ebx
c001bfd6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfda:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bfdd:	85 f6                	test   esi,esi
c001bfdf:	75 08                	jne    c001bfe9 <sysCallSpawn(regs*)+0x16>
c001bfe1:	59                   	pop    ecx
c001bfe2:	31 c0                	xor    eax,eax
c001bfe4:	31 d2                	xor    edx,edx
c001bfe6:	5b                   	pop    ebx
c001bfe7:	5e                   	pop    esi
c001bfe8:	c3                   	ret    
c001bfe9:	83 ec 0c             	sub    esp,0xc
c001bfec:	68 3f 07 00 00       	push   0x73f
c001bff1:	e8 55 38 ff ff       	call   c000f84b <malloc>
c001bff6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bff9:	89 c6                	mov    esi,eax
c001bffb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c000:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c003:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c006:	56                   	push   esi
c001c007:	e8 2a 1a 00 00       	call   c001da36 <Process::Process(char const*, Process*, char**)>
c001c00c:	83 c4 20             	add    esp,0x20
c001c00f:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c016:	75 c9                	jne    c001bfe1 <sysCallSpawn(regs*)+0xe>
c001c018:	83 ec 0c             	sub    esp,0xc
c001c01b:	56                   	push   esi
c001c01c:	e8 fd 1f 00 00       	call   c001e01e <Process::createUserThread()>
c001c021:	8b 06                	mov    eax,DWORD PTR [esi]
c001c023:	83 c4 10             	add    esp,0x10
c001c026:	99                   	cdq    
c001c027:	59                   	pop    ecx
c001c028:	5b                   	pop    ebx
c001c029:	5e                   	pop    esi
c001c02a:	c3                   	ret    

c001c02b <sysCallGetEnv(regs*)>:
c001c02b:	55                   	push   ebp
c001c02c:	57                   	push   edi
c001c02d:	56                   	push   esi
c001c02e:	53                   	push   ebx
c001c02f:	83 ec 28             	sub    esp,0x28
c001c032:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c036:	68 f3 be 02 c0       	push   0xc002bef3
c001c03b:	e8 9f 6e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001c040:	5f                   	pop    edi
c001c041:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c044:	5d                   	pop    ebp
c001c045:	53                   	push   ebx
c001c046:	68 22 c2 02 c0       	push   0xc002c222
c001c04b:	e8 8f 6e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001c050:	58                   	pop    eax
c001c051:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c054:	5a                   	pop    edx
c001c055:	57                   	push   edi
c001c056:	68 fc be 02 c0       	push   0xc002befc
c001c05b:	e8 7f 6e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001c060:	59                   	pop    ecx
c001c061:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c066:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c069:	e8 b9 e4 ff ff       	call   c001a527 <Krnl::getProcessTotalEnvCount(Process*)>
c001c06e:	5a                   	pop    edx
c001c06f:	89 c5                	mov    ebp,eax
c001c071:	59                   	pop    ecx
c001c072:	50                   	push   eax
c001c073:	68 06 bf 02 c0       	push   0xc002bf06
c001c078:	e8 62 6e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001c07d:	83 c4 10             	add    esp,0x10
c001c080:	39 ef                	cmp    edi,ebp
c001c082:	7c 15                	jl     c001c099 <sysCallGetEnv(regs*)+0x6e>
c001c084:	85 db                	test   ebx,ebx
c001c086:	75 0c                	jne    c001c094 <sysCallGetEnv(regs*)+0x69>
c001c088:	83 c4 1c             	add    esp,0x1c
c001c08b:	31 c0                	xor    eax,eax
c001c08d:	5b                   	pop    ebx
c001c08e:	31 d2                	xor    edx,edx
c001c090:	5e                   	pop    esi
c001c091:	5f                   	pop    edi
c001c092:	5d                   	pop    ebp
c001c093:	c3                   	ret    
c001c094:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c097:	eb ef                	jmp    c001c088 <sysCallGetEnv(regs*)+0x5d>
c001c099:	83 ec 0c             	sub    esp,0xc
c001c09c:	68 12 bf 02 c0       	push   0xc002bf12
c001c0a1:	e8 39 6e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001c0a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0aa:	83 c4 0c             	add    esp,0xc
c001c0ad:	57                   	push   edi
c001c0ae:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0b4:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0b7:	50                   	push   eax
c001c0b8:	e8 8a e4 ff ff       	call   c001a547 <Krnl::getProcessEnvPair(Process*, int)>
c001c0bd:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0c1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0c5:	68 a1 c2 02 c0       	push   0xc002c2a1
c001c0ca:	e8 10 6e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001c0cf:	83 c4 10             	add    esp,0x10
c001c0d2:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c0d5:	85 f6                	test   esi,esi
c001c0d7:	75 47                	jne    c001c120 <sysCallGetEnv(regs*)+0xf5>
c001c0d9:	83 ec 0c             	sub    esp,0xc
c001c0dc:	55                   	push   ebp
c001c0dd:	e8 ba 46 fe ff       	call   c000079c <strlen>
c001c0e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0e5:	89 c3                	mov    ebx,eax
c001c0e7:	e8 b0 46 fe ff       	call   c000079c <strlen>
c001c0ec:	5a                   	pop    edx
c001c0ed:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c0f1:	59                   	pop    ecx
c001c0f2:	50                   	push   eax
c001c0f3:	68 15 bf 02 c0       	push   0xc002bf15
c001c0f8:	e8 e2 6d ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001c0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c100:	e8 97 46 fe ff       	call   c000079c <strlen>
c001c105:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c108:	89 c3                	mov    ebx,eax
c001c10a:	e8 8d 46 fe ff       	call   c000079c <strlen>
c001c10f:	83 c4 10             	add    esp,0x10
c001c112:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c116:	83 c4 1c             	add    esp,0x1c
c001c119:	31 d2                	xor    edx,edx
c001c11b:	5b                   	pop    ebx
c001c11c:	5e                   	pop    esi
c001c11d:	5f                   	pop    edi
c001c11e:	5d                   	pop    ebp
c001c11f:	c3                   	ret    
c001c120:	83 ec 0c             	sub    esp,0xc
c001c123:	68 bb c2 02 c0       	push   0xc002c2bb
c001c128:	e8 b2 6d ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001c12d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c130:	58                   	pop    eax
c001c131:	5a                   	pop    edx
c001c132:	55                   	push   ebp
c001c133:	53                   	push   ebx
c001c134:	e8 03 47 fe ff       	call   c000083c <strcpy>
c001c139:	59                   	pop    ecx
c001c13a:	5e                   	pop    esi
c001c13b:	68 1f bf 02 c0       	push   0xc002bf1f
c001c140:	53                   	push   ebx
c001c141:	e8 36 48 fe ff       	call   c000097c <strcat>
c001c146:	5d                   	pop    ebp
c001c147:	58                   	pop    eax
c001c148:	57                   	push   edi
c001c149:	53                   	push   ebx
c001c14a:	e8 2d 48 fe ff       	call   c000097c <strcat>
c001c14f:	c7 04 24 d5 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2d5
c001c156:	e8 84 6d ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001c15b:	83 c4 10             	add    esp,0x10
c001c15e:	e9 25 ff ff ff       	jmp    c001c088 <sysCallGetEnv(regs*)+0x5d>

c001c163 <sysAppSettings(regs*)>:
c001c163:	53                   	push   ebx
c001c164:	83 ec 08             	sub    esp,0x8
c001c167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c16b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c16e:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c174:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c179:	66 3d c0 09          	cmp    ax,0x9c0
c001c17d:	75 2f                	jne    c001c1ae <sysAppSettings(regs*)+0x4b>
c001c17f:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c185:	83 e0 1f             	and    eax,0x1f
c001c188:	3c 01                	cmp    al,0x1
c001c18a:	74 2e                	je     c001c1ba <sysAppSettings(regs*)+0x57>
c001c18c:	3c 07                	cmp    al,0x7
c001c18e:	0f 84 bd 00 00 00    	je     c001c251 <sysAppSettings(regs*)+0xee>
c001c194:	84 c0                	test   al,al
c001c196:	0f 84 dc 00 00 00    	je     c001c278 <sysAppSettings(regs*)+0x115>
c001c19c:	3c 08                	cmp    al,0x8
c001c19e:	74 6d                	je     c001c20d <sysAppSettings(regs*)+0xaa>
c001c1a0:	0f b6 c0             	movzx  eax,al
c001c1a3:	83 c4 08             	add    esp,0x8
c001c1a6:	05 e8 03 00 00       	add    eax,0x3e8
c001c1ab:	5b                   	pop    ebx
c001c1ac:	99                   	cdq    
c001c1ad:	c3                   	ret    
c001c1ae:	b8 01 00 00 00       	mov    eax,0x1
c001c1b3:	31 d2                	xor    edx,edx
c001c1b5:	83 c4 08             	add    esp,0x8
c001c1b8:	5b                   	pop    ebx
c001c1b9:	c3                   	ret    
c001c1ba:	51                   	push   ecx
c001c1bb:	68 00 01 00 00       	push   0x100
c001c1c0:	6a 00                	push   0x0
c001c1c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1ca:	83 c0 0c             	add    eax,0xc
c001c1cd:	50                   	push   eax
c001c1ce:	e8 ad 45 fe ff       	call   c0000780 <memset>
c001c1d3:	83 c4 0c             	add    esp,0xc
c001c1d6:	68 ff 00 00 00       	push   0xff
c001c1db:	53                   	push   ebx
c001c1dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1e4:	83 c0 0c             	add    eax,0xc
c001c1e7:	50                   	push   eax
c001c1e8:	e8 5f 45 fe ff       	call   c000074c <memcpy>
c001c1ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1f2:	5b                   	pop    ebx
c001c1f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1f6:	5a                   	pop    edx
c001c1f7:	8d 50 0c             	lea    edx,[eax+0xc]
c001c1fa:	52                   	push   edx
c001c1fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c201:	e8 6a 49 ff ff       	call   c0010b70 <VgaText::setTitle(char*)>
c001c206:	83 c4 10             	add    esp,0x10
c001c209:	31 c0                	xor    eax,eax
c001c20b:	eb a6                	jmp    c001c1b3 <sysAppSettings(regs*)+0x50>
c001c20d:	83 ec 08             	sub    esp,0x8
c001c210:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c216:	83 e0 0f             	and    eax,0xf
c001c219:	50                   	push   eax
c001c21a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c21f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c222:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c228:	e8 33 49 ff ff       	call   c0010b60 <VgaText::setTitleColour(VgaColour)>
c001c22d:	58                   	pop    eax
c001c22e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c234:	5a                   	pop    edx
c001c235:	c1 e8 04             	shr    eax,0x4
c001c238:	83 e0 0f             	and    eax,0xf
c001c23b:	50                   	push   eax
c001c23c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c241:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c244:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c24a:	e8 01 49 ff ff       	call   c0010b50 <VgaText::setTitleTextColour(VgaColour)>
c001c24f:	eb b5                	jmp    c001c206 <sysAppSettings(regs*)+0xa3>
c001c251:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c256:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c259:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c25f:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c265:	c0 e8 06             	shr    al,0x6
c001c268:	83 e0 01             	and    eax,0x1
c001c26b:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c271:	31 c0                	xor    eax,eax
c001c273:	e9 3b ff ff ff       	jmp    c001c1b3 <sysAppSettings(regs*)+0x50>
c001c278:	b8 02 00 00 00       	mov    eax,0x2
c001c27d:	e9 31 ff ff ff       	jmp    c001c1b3 <sysAppSettings(regs*)+0x50>

c001c282 <sysSetFatAttrib(regs*)>:
c001c282:	57                   	push   edi
c001c283:	56                   	push   esi
c001c284:	53                   	push   ebx
c001c285:	83 ec 1c             	sub    esp,0x1c
c001c288:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c28c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c28f:	68 14 01 00 00       	push   0x114
c001c294:	e8 b2 35 ff ff       	call   c000f84b <malloc>
c001c299:	83 c4 0c             	add    esp,0xc
c001c29c:	89 c3                	mov    ebx,eax
c001c29e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2a3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2a6:	57                   	push   edi
c001c2a7:	53                   	push   ebx
c001c2a8:	e8 8b 71 ff ff       	call   c0013438 <File::File(char const*, Process*)>
c001c2ad:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2b0:	83 c4 0c             	add    esp,0xc
c001c2b3:	0f b6 d4             	movzx  edx,ah
c001c2b6:	0f b6 c0             	movzx  eax,al
c001c2b9:	52                   	push   edx
c001c2ba:	50                   	push   eax
c001c2bb:	53                   	push   ebx
c001c2bc:	e8 ed 73 ff ff       	call   c00136ae <File::chfatattr(unsigned char, unsigned char)>
c001c2c1:	83 c4 10             	add    esp,0x10
c001c2c4:	85 db                	test   ebx,ebx
c001c2c6:	74 14                	je     c001c2dc <sysSetFatAttrib(regs*)+0x5a>
c001c2c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2cc:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2ce:	83 ec 0c             	sub    esp,0xc
c001c2d1:	53                   	push   ebx
c001c2d2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c2d5:	83 c4 10             	add    esp,0x10
c001c2d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2dc:	85 c0                	test   eax,eax
c001c2de:	0f 95 c0             	setne  al
c001c2e1:	31 d2                	xor    edx,edx
c001c2e3:	0f b6 c0             	movzx  eax,al
c001c2e6:	f7 d8                	neg    eax
c001c2e8:	83 d2 00             	adc    edx,0x0
c001c2eb:	83 c4 10             	add    esp,0x10
c001c2ee:	f7 da                	neg    edx
c001c2f0:	5b                   	pop    ebx
c001c2f1:	5e                   	pop    esi
c001c2f2:	5f                   	pop    edi
c001c2f3:	c3                   	ret    

c001c2f4 <sysPipe(regs*)>:
c001c2f4:	57                   	push   edi
c001c2f5:	56                   	push   esi
c001c2f6:	53                   	push   ebx
c001c2f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2fb:	83 ec 0c             	sub    esp,0xc
c001c2fe:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c301:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c304:	6a 20                	push   0x20
c001c306:	e8 40 35 ff ff       	call   c000f84b <malloc>
c001c30b:	89 c3                	mov    ebx,eax
c001c30d:	58                   	pop    eax
c001c30e:	5a                   	pop    edx
c001c30f:	68 00 50 00 00       	push   0x5000
c001c314:	53                   	push   ebx
c001c315:	e8 86 41 ff ff       	call   c00104a0 <Pipe::Pipe(int)>
c001c31a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c31d:	e8 de 53 ff ff       	call   c0011700 <UnixFile::getFileDescriptor()>
c001c322:	89 07                	mov    DWORD PTR [edi],eax
c001c324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c327:	e8 d4 53 ff ff       	call   c0011700 <UnixFile::getFileDescriptor()>
c001c32c:	83 c4 10             	add    esp,0x10
c001c32f:	89 06                	mov    DWORD PTR [esi],eax
c001c331:	31 d2                	xor    edx,edx
c001c333:	5b                   	pop    ebx
c001c334:	31 c0                	xor    eax,eax
c001c336:	5e                   	pop    esi
c001c337:	5f                   	pop    edi
c001c338:	c3                   	ret    

c001c339 <sysGetUnixTime(regs*)>:
c001c339:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001c33e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c344:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c348:	e9 d5 7a ff ff       	jmp    c0013e22 <Clock::timeInSecondsLocal()>

c001c34d <string_ends_with(char const*, char const*)>:
c001c34d:	57                   	push   edi
c001c34e:	56                   	push   esi
c001c34f:	53                   	push   ebx
c001c350:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c354:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c358:	83 ec 0c             	sub    esp,0xc
c001c35b:	53                   	push   ebx
c001c35c:	e8 3b 44 fe ff       	call   c000079c <strlen>
c001c361:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c364:	89 c6                	mov    esi,eax
c001c366:	e8 31 44 fe ff       	call   c000079c <strlen>
c001c36b:	83 c4 10             	add    esp,0x10
c001c36e:	39 c6                	cmp    esi,eax
c001c370:	7d 06                	jge    c001c378 <string_ends_with(char const*, char const*)+0x2b>
c001c372:	5b                   	pop    ebx
c001c373:	31 c0                	xor    eax,eax
c001c375:	5e                   	pop    esi
c001c376:	5f                   	pop    edi
c001c377:	c3                   	ret    
c001c378:	83 ec 08             	sub    esp,0x8
c001c37b:	29 c6                	sub    esi,eax
c001c37d:	57                   	push   edi
c001c37e:	01 f3                	add    ebx,esi
c001c380:	53                   	push   ebx
c001c381:	e8 42 45 fe ff       	call   c00008c8 <strcmp>
c001c386:	83 c4 10             	add    esp,0x10
c001c389:	85 c0                	test   eax,eax
c001c38b:	5b                   	pop    ebx
c001c38c:	0f 94 c0             	sete   al
c001c38f:	5e                   	pop    esi
c001c390:	0f b6 c0             	movzx  eax,al
c001c393:	5f                   	pop    edi
c001c394:	c3                   	ret    

c001c395 <sysCallOpen(regs*)>:
c001c395:	56                   	push   esi
c001c396:	53                   	push   ebx
c001c397:	81 ec 04 01 00 00    	sub    esp,0x104
c001c39d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c3a4:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c3a7:	85 c9                	test   ecx,ecx
c001c3a9:	0f 84 b3 00 00 00    	je     c001c462 <sysCallOpen(regs*)+0xcd>
c001c3af:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3b2:	85 c0                	test   eax,eax
c001c3b4:	0f 84 a8 00 00 00    	je     c001c462 <sysCallOpen(regs*)+0xcd>
c001c3ba:	52                   	push   edx
c001c3bb:	68 21 bf 02 c0       	push   0xc002bf21
c001c3c0:	50                   	push   eax
c001c3c1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3c5:	56                   	push   esi
c001c3c6:	e8 c3 6e ff ff       	call   c001328e <Fs::standardiseFiles(char*, char const*, char const*)>
c001c3cb:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3ce:	e8 c9 43 fe ff       	call   c000079c <strlen>
c001c3d3:	83 c4 10             	add    esp,0x10
c001c3d6:	48                   	dec    eax
c001c3d7:	74 1d                	je     c001c3f6 <sysCallOpen(regs*)+0x61>
c001c3d9:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c3dc:	eb 0f                	jmp    c001c3ed <sysCallOpen(regs*)+0x58>
c001c3de:	80 fa 3a             	cmp    dl,0x3a
c001c3e1:	74 0f                	je     c001c3f2 <sysCallOpen(regs*)+0x5d>
c001c3e3:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c3e7:	48                   	dec    eax
c001c3e8:	74 0c                	je     c001c3f6 <sysCallOpen(regs*)+0x61>
c001c3ea:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c3ed:	80 fa 2e             	cmp    dl,0x2e
c001c3f0:	75 ec                	jne    c001c3de <sysCallOpen(regs*)+0x49>
c001c3f2:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c3f6:	83 ec 08             	sub    esp,0x8
c001c3f9:	68 25 bf 02 c0       	push   0xc002bf25
c001c3fe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c401:	e8 47 ff ff ff       	call   c001c34d <string_ends_with(char const*, char const*)>
c001c406:	83 c4 10             	add    esp,0x10
c001c409:	85 c0                	test   eax,eax
c001c40b:	75 17                	jne    c001c424 <sysCallOpen(regs*)+0x8f>
c001c40d:	83 ec 08             	sub    esp,0x8
c001c410:	68 46 bf 02 c0       	push   0xc002bf46
c001c415:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c418:	e8 30 ff ff ff       	call   c001c34d <string_ends_with(char const*, char const*)>
c001c41d:	83 c4 10             	add    esp,0x10
c001c420:	85 c0                	test   eax,eax
c001c422:	74 51                	je     c001c475 <sysCallOpen(regs*)+0xe0>
c001c424:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c427:	83 ec 08             	sub    esp,0x8
c001c42a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c430:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c437:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c43a:	ff 30                	push   DWORD PTR [eax]
c001c43c:	68 2a bf 02 c0       	push   0xc002bf2a
c001c441:	e8 99 6a ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001c446:	c7 04 24 39 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf39
c001c44d:	e8 8d 6a ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001c452:	83 c4 10             	add    esp,0x10
c001c455:	81 c4 04 01 00 00    	add    esp,0x104
c001c45b:	31 c0                	xor    eax,eax
c001c45d:	31 d2                	xor    edx,edx
c001c45f:	5b                   	pop    ebx
c001c460:	5e                   	pop    esi
c001c461:	c3                   	ret    
c001c462:	81 c4 04 01 00 00    	add    esp,0x104
c001c468:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c46d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c472:	5b                   	pop    ebx
c001c473:	5e                   	pop    esi
c001c474:	c3                   	ret    
c001c475:	83 ec 08             	sub    esp,0x8
c001c478:	68 26 bf 02 c0       	push   0xc002bf26
c001c47d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c480:	e8 43 44 fe ff       	call   c00008c8 <strcmp>
c001c485:	83 c4 10             	add    esp,0x10
c001c488:	85 c0                	test   eax,eax
c001c48a:	74 98                	je     c001c424 <sysCallOpen(regs*)+0x8f>
c001c48c:	83 ec 08             	sub    esp,0x8
c001c48f:	68 25 bf 02 c0       	push   0xc002bf25
c001c494:	56                   	push   esi
c001c495:	e8 b3 fe ff ff       	call   c001c34d <string_ends_with(char const*, char const*)>
c001c49a:	83 c4 10             	add    esp,0x10
c001c49d:	85 c0                	test   eax,eax
c001c49f:	75 83                	jne    c001c424 <sysCallOpen(regs*)+0x8f>
c001c4a1:	83 ec 08             	sub    esp,0x8
c001c4a4:	68 4b bf 02 c0       	push   0xc002bf4b
c001c4a9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4ac:	e8 9c fe ff ff       	call   c001c34d <string_ends_with(char const*, char const*)>
c001c4b1:	83 c4 10             	add    esp,0x10
c001c4b4:	85 c0                	test   eax,eax
c001c4b6:	0f 85 d9 00 00 00    	jne    c001c595 <sysCallOpen(regs*)+0x200>
c001c4bc:	83 ec 08             	sub    esp,0x8
c001c4bf:	68 50 bf 02 c0       	push   0xc002bf50
c001c4c4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4c7:	e8 81 fe ff ff       	call   c001c34d <string_ends_with(char const*, char const*)>
c001c4cc:	83 c4 10             	add    esp,0x10
c001c4cf:	85 c0                	test   eax,eax
c001c4d1:	0f 85 be 00 00 00    	jne    c001c595 <sysCallOpen(regs*)+0x200>
c001c4d7:	83 ec 08             	sub    esp,0x8
c001c4da:	68 4c bf 02 c0       	push   0xc002bf4c
c001c4df:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4e2:	e8 e1 43 fe ff       	call   c00008c8 <strcmp>
c001c4e7:	83 c4 10             	add    esp,0x10
c001c4ea:	85 c0                	test   eax,eax
c001c4ec:	0f 84 a3 00 00 00    	je     c001c595 <sysCallOpen(regs*)+0x200>
c001c4f2:	83 ec 08             	sub    esp,0x8
c001c4f5:	68 4b bf 02 c0       	push   0xc002bf4b
c001c4fa:	56                   	push   esi
c001c4fb:	e8 4d fe ff ff       	call   c001c34d <string_ends_with(char const*, char const*)>
c001c500:	83 c4 10             	add    esp,0x10
c001c503:	85 c0                	test   eax,eax
c001c505:	0f 85 8a 00 00 00    	jne    c001c595 <sysCallOpen(regs*)+0x200>
c001c50b:	83 ec 0c             	sub    esp,0xc
c001c50e:	68 14 01 00 00       	push   0x114
c001c513:	e8 33 33 ff ff       	call   c000f84b <malloc>
c001c518:	83 c4 0c             	add    esp,0xc
c001c51b:	89 c6                	mov    esi,eax
c001c51d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c522:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c525:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c528:	56                   	push   esi
c001c529:	e8 0a 6f ff ff       	call   c0013438 <File::File(char const*, Process*)>
c001c52e:	83 c4 10             	add    esp,0x10
c001c531:	85 f6                	test   esi,esi
c001c533:	0f 84 29 ff ff ff    	je     c001c462 <sysCallOpen(regs*)+0xcd>
c001c539:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c53c:	0f b6 c2             	movzx  eax,dl
c001c53f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c542:	89 d0                	mov    eax,edx
c001c544:	83 e0 01             	and    eax,0x1
c001c547:	f6 c2 02             	test   dl,0x2
c001c54a:	74 03                	je     c001c54f <sysCallOpen(regs*)+0x1ba>
c001c54c:	83 c8 02             	or     eax,0x2
c001c54f:	f6 c2 04             	test   dl,0x4
c001c552:	74 03                	je     c001c557 <sysCallOpen(regs*)+0x1c2>
c001c554:	83 c8 04             	or     eax,0x4
c001c557:	f6 c2 08             	test   dl,0x8
c001c55a:	74 03                	je     c001c55f <sysCallOpen(regs*)+0x1ca>
c001c55c:	83 c8 0a             	or     eax,0xa
c001c55f:	83 e2 10             	and    edx,0x10
c001c562:	74 03                	je     c001c567 <sysCallOpen(regs*)+0x1d2>
c001c564:	83 c8 12             	or     eax,0x12
c001c567:	83 ec 08             	sub    esp,0x8
c001c56a:	50                   	push   eax
c001c56b:	56                   	push   esi
c001c56c:	e8 2b 6f ff ff       	call   c001349c <File::open(FileOpenMode)>
c001c571:	83 c4 10             	add    esp,0x10
c001c574:	85 c0                	test   eax,eax
c001c576:	0f 85 e6 fe ff ff    	jne    c001c462 <sysCallOpen(regs*)+0xcd>
c001c57c:	83 ec 0c             	sub    esp,0xc
c001c57f:	56                   	push   esi
c001c580:	e8 7b 51 ff ff       	call   c0011700 <UnixFile::getFileDescriptor()>
c001c585:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c588:	89 02                	mov    DWORD PTR [edx],eax
c001c58a:	c1 f8 1f             	sar    eax,0x1f
c001c58d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c590:	e9 bd fe ff ff       	jmp    c001c452 <sysCallOpen(regs*)+0xbd>
c001c595:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c598:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c59e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5a5:	e9 ab fe ff ff       	jmp    c001c455 <sysCallOpen(regs*)+0xc0>

c001c5aa <Sys::loadSyscalls()>:
c001c5aa:	c7 05 e0 0f 03 c0 b7 b6 01 c0 	mov    DWORD PTR ds:0xc0030fe0,0xc001b6b7
c001c5b4:	c7 05 e4 0f 03 c0 a0 b2 01 c0 	mov    DWORD PTR ds:0xc0030fe4,0xc001b2a0
c001c5be:	c7 05 e8 0f 03 c0 0a b4 01 c0 	mov    DWORD PTR ds:0xc0030fe8,0xc001b40a
c001c5c8:	c7 05 ec 0f 03 c0 ed b5 01 c0 	mov    DWORD PTR ds:0xc0030fec,0xc001b5ed
c001c5d2:	c7 05 f0 0f 03 c0 a2 b3 01 c0 	mov    DWORD PTR ds:0xc0030ff0,0xc001b3a2
c001c5dc:	c7 05 f4 0f 03 c0 d7 b2 01 c0 	mov    DWORD PTR ds:0xc0030ff4,0xc001b2d7
c001c5e6:	c7 05 f8 0f 03 c0 b8 b2 01 c0 	mov    DWORD PTR ds:0xc0030ff8,0xc001b2b8
c001c5f0:	c7 05 fc 0f 03 c0 5f b4 01 c0 	mov    DWORD PTR ds:0xc0030ffc,0xc001b45f
c001c5fa:	c7 05 04 10 03 c0 e7 bb 01 c0 	mov    DWORD PTR ds:0xc0031004,0xc001bbe7
c001c604:	c7 05 00 10 03 c0 95 c3 01 c0 	mov    DWORD PTR ds:0xc0031000,0xc001c395
c001c60e:	c7 05 08 10 03 c0 6f bc 01 c0 	mov    DWORD PTR ds:0xc0031008,0xc001bc6f
c001c618:	c7 05 0c 10 03 c0 d6 b8 01 c0 	mov    DWORD PTR ds:0xc003100c,0xc001b8d6
c001c622:	c7 05 10 10 03 c0 f2 b6 01 c0 	mov    DWORD PTR ds:0xc0031010,0xc001b6f2
c001c62c:	c7 05 14 10 03 c0 f7 b6 01 c0 	mov    DWORD PTR ds:0xc0031014,0xc001b6f7
c001c636:	c7 05 18 10 03 c0 4a bd 01 c0 	mov    DWORD PTR ds:0xc0031018,0xc001bd4a
c001c640:	c7 05 1c 10 03 c0 e4 bc 01 c0 	mov    DWORD PTR ds:0xc003101c,0xc001bce4
c001c64a:	c7 05 20 10 03 c0 be b9 01 c0 	mov    DWORD PTR ds:0xc0031020,0xc001b9be
c001c654:	c7 05 24 10 03 c0 27 ba 01 c0 	mov    DWORD PTR ds:0xc0031024,0xc001ba27
c001c65e:	c7 05 28 10 03 c0 a4 ba 01 c0 	mov    DWORD PTR ds:0xc0031028,0xc001baa4
c001c668:	c7 05 2c 10 03 c0 fc b6 01 c0 	mov    DWORD PTR ds:0xc003102c,0xc001b6fc
c001c672:	c7 05 30 10 03 c0 ba bd 01 c0 	mov    DWORD PTR ds:0xc0031030,0xc001bdba
c001c67c:	c7 05 34 10 03 c0 d4 bd 01 c0 	mov    DWORD PTR ds:0xc0031034,0xc001bdd4
c001c686:	c7 05 38 10 03 c0 d4 bd 01 c0 	mov    DWORD PTR ds:0xc0031038,0xc001bdd4
c001c690:	c7 05 3c 10 03 c0 15 be 01 c0 	mov    DWORD PTR ds:0xc003103c,0xc001be15
c001c69a:	c7 05 40 10 03 c0 79 be 01 c0 	mov    DWORD PTR ds:0xc0031040,0xc001be79
c001c6a4:	c7 05 44 10 03 c0 a8 b8 01 c0 	mov    DWORD PTR ds:0xc0031044,0xc001b8a8
c001c6ae:	c7 05 48 10 03 c0 dd be 01 c0 	mov    DWORD PTR ds:0xc0031048,0xc001bedd
c001c6b8:	c7 05 4c 10 03 c0 65 b8 01 c0 	mov    DWORD PTR ds:0xc003104c,0xc001b865
c001c6c2:	c7 05 50 10 03 c0 29 bf 01 c0 	mov    DWORD PTR ds:0xc0031050,0xc001bf29
c001c6cc:	c7 05 54 10 03 c0 64 b9 01 c0 	mov    DWORD PTR ds:0xc0031054,0xc001b964
c001c6d6:	c7 05 58 10 03 c0 ac bf 01 c0 	mov    DWORD PTR ds:0xc0031058,0xc001bfac
c001c6e0:	c7 05 5c 10 03 c0 27 bb 01 c0 	mov    DWORD PTR ds:0xc003105c,0xc001bb27
c001c6ea:	c7 05 60 10 03 c0 d3 bf 01 c0 	mov    DWORD PTR ds:0xc0031060,0xc001bfd3
c001c6f4:	c7 05 64 10 03 c0 2b c0 01 c0 	mov    DWORD PTR ds:0xc0031064,0xc001c02b
c001c6fe:	c7 05 68 10 03 c0 63 c1 01 c0 	mov    DWORD PTR ds:0xc0031068,0xc001c163
c001c708:	c7 05 6c 10 03 c0 06 b7 01 c0 	mov    DWORD PTR ds:0xc003106c,0xc001b706
c001c712:	c7 05 70 10 03 c0 70 b7 01 c0 	mov    DWORD PTR ds:0xc0031070,0xc001b770
c001c71c:	c7 05 74 10 03 c0 b6 b7 01 c0 	mov    DWORD PTR ds:0xc0031074,0xc001b7b6
c001c726:	c7 05 78 10 03 c0 82 c2 01 c0 	mov    DWORD PTR ds:0xc0031078,0xc001c282
c001c730:	c7 05 7c 10 03 c0 ef bd 01 c0 	mov    DWORD PTR ds:0xc003107c,0xc001bdef
c001c73a:	c7 05 80 10 03 c0 07 b8 01 c0 	mov    DWORD PTR ds:0xc0031080,0xc001b807
c001c744:	c7 05 84 10 03 c0 f4 c2 01 c0 	mov    DWORD PTR ds:0xc0031084,0xc001c2f4
c001c74e:	c7 05 88 10 03 c0 39 c3 01 c0 	mov    DWORD PTR ds:0xc0031088,0xc001c339
c001c758:	c7 05 8c 10 03 c0 fa b2 01 c0 	mov    DWORD PTR ds:0xc003108c,0xc001b2fa
c001c762:	c7 05 90 10 03 c0 7b b4 01 c0 	mov    DWORD PTR ds:0xc0031090,0xc001b47b
c001c76c:	c7 05 94 10 03 c0 a3 b5 01 c0 	mov    DWORD PTR ds:0xc0031094,0xc001b5a3
c001c776:	c7 05 98 10 03 c0 6a b2 01 c0 	mov    DWORD PTR ds:0xc0031098,0xc001b26a
c001c780:	c7 05 9c 10 03 c0 55 b6 01 c0 	mov    DWORD PTR ds:0xc003109c,0xc001b655
c001c78a:	c7 05 a0 10 03 c0 e3 b2 01 c0 	mov    DWORD PTR ds:0xc00310a0,0xc001b2e3
c001c794:	c3                   	ret    

c001c795 <Sys::systemCall(regs*, void*)>:
c001c795:	53                   	push   ebx
c001c796:	83 ec 08             	sub    esp,0x8
c001c799:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c79d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c7a0:	83 f8 7f             	cmp    eax,0x7f
c001c7a3:	77 16                	ja     c001c7bb <Sys::systemCall(regs*, void*)+0x26>
c001c7a5:	8b 14 85 e0 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf020]
c001c7ac:	85 d2                	test   edx,edx
c001c7ae:	74 0b                	je     c001c7bb <Sys::systemCall(regs*, void*)+0x26>
c001c7b0:	83 ec 0c             	sub    esp,0xc
c001c7b3:	53                   	push   ebx
c001c7b4:	ff d2                	call   edx
c001c7b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7b9:	eb 0d                	jmp    c001c7c8 <Sys::systemCall(regs*, void*)+0x33>
c001c7bb:	52                   	push   edx
c001c7bc:	52                   	push   edx
c001c7bd:	50                   	push   eax
c001c7be:	68 55 bf 02 c0       	push   0xc002bf55
c001c7c3:	e8 17 67 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001c7c8:	83 c4 10             	add    esp,0x10
c001c7cb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c7d0:	31 d2                	xor    edx,edx
c001c7d2:	83 c4 08             	add    esp,0x8
c001c7d5:	5b                   	pop    ebx
c001c7d6:	c3                   	ret    

c001c7d7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c7d7:	55                   	push   ebp
c001c7d8:	57                   	push   edi
c001c7d9:	56                   	push   esi
c001c7da:	53                   	push   ebx
c001c7db:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c7e1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c7e8:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c7ef:	85 c0                	test   eax,eax
c001c7f1:	0f 95 c1             	setne  cl
c001c7f4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c7fc:	0f 94 c2             	sete   dl
c001c7ff:	84 d1                	test   cl,dl
c001c801:	74 23                	je     c001c826 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c803:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c809:	74 1b                	je     c001c826 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c80b:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c811:	89 da                	mov    edx,ebx
c001c813:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c819:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c81f:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c826:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c82d:	05 ff 0f 00 00       	add    eax,0xfff
c001c832:	83 ec 0c             	sub    esp,0xc
c001c835:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c839:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c83f:	c1 e8 0c             	shr    eax,0xc
c001c842:	89 ef                	mov    edi,ebp
c001c844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c848:	c1 ef 0c             	shr    edi,0xc
c001c84b:	6a 01                	push   0x1
c001c84d:	e8 f9 52 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c001c852:	89 c6                	mov    esi,eax
c001c854:	58                   	pop    eax
c001c855:	5a                   	pop    edx
c001c856:	57                   	push   edi
c001c857:	68 db bf 02 c0       	push   0xc002bfdb
c001c85c:	e8 7e 66 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001c861:	59                   	pop    ecx
c001c862:	58                   	pop    eax
c001c863:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c867:	68 ed bf 02 c0       	push   0xc002bfed
c001c86c:	e8 6e 66 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001c871:	83 c4 10             	add    esp,0x10
c001c874:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c87a:	0f 86 24 01 00 00    	jbe    c001c9a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c880:	c1 e7 0c             	shl    edi,0xc
c001c883:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c886:	89 df                	mov    edi,ebx
c001c888:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c88c:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c893:	01 dd                	add    ebp,ebx
c001c895:	29 fd                	sub    ebp,edi
c001c897:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c89b:	0f 84 01 01 00 00    	je     c001c9a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c8a1:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c8a7:	76 05                	jbe    c001c8ae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c8a9:	bd 00 10 00 00       	mov    ebp,0x1000
c001c8ae:	83 ec 0c             	sub    esp,0xc
c001c8b1:	31 d2                	xor    edx,edx
c001c8b3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8ba:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8bc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8c0:	50                   	push   eax
c001c8c1:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c8c5:	50                   	push   eax
c001c8c6:	52                   	push   edx
c001c8c7:	55                   	push   ebp
c001c8c8:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c8cf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8d2:	83 c4 20             	add    esp,0x20
c001c8d5:	85 c0                	test   eax,eax
c001c8d7:	74 0a                	je     c001c8e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c8d9:	53                   	push   ebx
c001c8da:	53                   	push   ebx
c001c8db:	50                   	push   eax
c001c8dc:	68 ff bf 02 c0       	push   0xc002bfff
c001c8e1:	eb 0f                	jmp    c001c8f2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c8e3:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c8e7:	74 20                	je     c001c909 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c8e9:	51                   	push   ecx
c001c8ea:	51                   	push   ecx
c001c8eb:	6a 00                	push   0x0
c001c8ed:	68 2a c0 02 c0       	push   0xc002c02a
c001c8f2:	e8 e8 65 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001c8f7:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8fa:	e8 d2 56 ff ff       	call   c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)>
c001c8ff:	83 c4 10             	add    esp,0x10
c001c902:	31 c0                	xor    eax,eax
c001c904:	e9 55 01 00 00       	jmp    c001ca5e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c909:	e8 d8 14 00 00       	call   c001dde6 <lockScheduler()>
c001c90e:	e8 da 35 ff ff       	call   c000feed <Phys::allocatePage()>
c001c913:	6a 07                	push   0x7
c001c915:	89 c5                	mov    ebp,eax
c001c917:	56                   	push   esi
c001c918:	50                   	push   eax
c001c919:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c91e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c921:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c927:	e8 0c 5a ff ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c92c:	83 c4 0c             	add    esp,0xc
c001c92f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c936:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c93c:	6a 00                	push   0x0
c001c93e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c943:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c946:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c94c:	e8 51 58 ff ff       	call   c00121a2 <VAS::mapOtherVASIn(bool, VAS*)>
c001c951:	58                   	pop    eax
c001c952:	5a                   	pop    edx
c001c953:	68 07 0c 00 00       	push   0xc07
c001c958:	57                   	push   edi
c001c959:	81 c7 00 10 00 00    	add    edi,0x1000
c001c95f:	55                   	push   ebp
c001c960:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c967:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c96d:	6a 00                	push   0x0
c001c96f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c974:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c977:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c97d:	e8 70 5d ff ff       	call   c00126f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c982:	83 c4 1c             	add    esp,0x1c
c001c985:	68 00 10 00 00       	push   0x1000
c001c98a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c98e:	50                   	push   eax
c001c98f:	56                   	push   esi
c001c990:	e8 b7 3d fe ff       	call   c000074c <memcpy>
c001c995:	e8 4e 14 00 00       	call   c001dde8 <unlockScheduler()>
c001c99a:	83 c4 10             	add    esp,0x10
c001c99d:	e9 ea fe ff ff       	jmp    c001c88c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c9a2:	89 fb                	mov    ebx,edi
c001c9a4:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c9ac:	0f 86 9e 00 00 00    	jbe    c001ca50 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c9b2:	e8 2f 14 00 00       	call   c001dde6 <lockScheduler()>
c001c9b7:	51                   	push   ecx
c001c9b8:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9bf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9c5:	6a 00                	push   0x0
c001c9c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9cf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9d5:	e8 c8 57 ff ff       	call   c00121a2 <VAS::mapOtherVASIn(bool, VAS*)>
c001c9da:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c9de:	c1 e7 0c             	shl    edi,0xc
c001c9e1:	01 df                	add    edi,ebx
c001c9e3:	83 c4 10             	add    esp,0x10
c001c9e6:	39 fb                	cmp    ebx,edi
c001c9e8:	74 61                	je     c001ca4b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c9ea:	e8 fe 34 ff ff       	call   c000feed <Phys::allocatePage()>
c001c9ef:	6a 07                	push   0x7
c001c9f1:	89 c5                	mov    ebp,eax
c001c9f3:	56                   	push   esi
c001c9f4:	50                   	push   eax
c001c9f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9fd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca03:	e8 30 59 ff ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca08:	58                   	pop    eax
c001ca09:	5a                   	pop    edx
c001ca0a:	68 07 0c 00 00       	push   0xc07
c001ca0f:	53                   	push   ebx
c001ca10:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca16:	55                   	push   ebp
c001ca17:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca1e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca24:	6a 00                	push   0x0
c001ca26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca2b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca2e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca34:	e8 b9 5c ff ff       	call   c00126f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca39:	83 c4 1c             	add    esp,0x1c
c001ca3c:	68 00 10 00 00       	push   0x1000
c001ca41:	6a 00                	push   0x0
c001ca43:	56                   	push   esi
c001ca44:	e8 37 3d fe ff       	call   c0000780 <memset>
c001ca49:	eb 98                	jmp    c001c9e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca4b:	e8 98 13 00 00       	call   c001dde8 <unlockScheduler()>
c001ca50:	83 ec 0c             	sub    esp,0xc
c001ca53:	56                   	push   esi
c001ca54:	e8 78 55 ff ff       	call   c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)>
c001ca59:	83 c4 10             	add    esp,0x10
c001ca5c:	b0 01                	mov    al,0x1
c001ca5e:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca64:	5b                   	pop    ebx
c001ca65:	5e                   	pop    esi
c001ca66:	5f                   	pop    edi
c001ca67:	5d                   	pop    ebp
c001ca68:	c3                   	ret    

c001ca69 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca69:	55                   	push   ebp
c001ca6a:	57                   	push   edi
c001ca6b:	56                   	push   esi
c001ca6c:	53                   	push   ebx
c001ca6d:	83 ec 48             	sub    esp,0x48
c001ca70:	68 14 01 00 00       	push   0x114
c001ca75:	e8 d1 2d ff ff       	call   c000f84b <malloc>
c001ca7a:	83 c4 0c             	add    esp,0xc
c001ca7d:	89 c6                	mov    esi,eax
c001ca7f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca83:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca87:	50                   	push   eax
c001ca88:	e8 ab 69 ff ff       	call   c0013438 <File::File(char const*, Process*)>
c001ca8d:	58                   	pop    eax
c001ca8e:	5a                   	pop    edx
c001ca8f:	6a 01                	push   0x1
c001ca91:	56                   	push   esi
c001ca92:	e8 05 6a ff ff       	call   c001349c <File::open(FileOpenMode)>
c001ca97:	83 c4 10             	add    esp,0x10
c001ca9a:	85 c0                	test   eax,eax
c001ca9c:	0f 85 47 01 00 00    	jne    c001cbe9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caa2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001caaa:	83 ec 0c             	sub    esp,0xc
c001caad:	6a 34                	push   0x34
c001caaf:	e8 97 2d ff ff       	call   c000f84b <malloc>
c001cab4:	89 c3                	mov    ebx,eax
c001cab6:	58                   	pop    eax
c001cab7:	8b 06                	mov    eax,DWORD PTR [esi]
c001cab9:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cabd:	57                   	push   edi
c001cabe:	53                   	push   ebx
c001cabf:	6a 00                	push   0x0
c001cac1:	6a 34                	push   0x34
c001cac3:	56                   	push   esi
c001cac4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cac7:	83 c4 20             	add    esp,0x20
c001caca:	85 c0                	test   eax,eax
c001cacc:	0f 85 17 01 00 00    	jne    c001cbe9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cad2:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cad8:	0f 85 0b 01 00 00    	jne    c001cbe9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cade:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cae1:	85 c0                	test   eax,eax
c001cae3:	0f 84 00 01 00 00    	je     c001cbe9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cae9:	31 d2                	xor    edx,edx
c001caeb:	55                   	push   ebp
c001caec:	52                   	push   edx
c001caed:	50                   	push   eax
c001caee:	56                   	push   esi
c001caef:	e8 66 6a ff ff       	call   c001355a <File::seek(unsigned long long)>
c001caf4:	83 c4 10             	add    esp,0x10
c001caf7:	85 c0                	test   eax,eax
c001caf9:	0f 85 ea 00 00 00    	jne    c001cbe9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caff:	83 ec 0c             	sub    esp,0xc
c001cb02:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb05:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb09:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb0d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb11:	0f af c2             	imul   eax,edx
c001cb14:	50                   	push   eax
c001cb15:	e8 31 2d ff ff       	call   c000f84b <malloc>
c001cb1a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb1c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb20:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb27:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb2b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb2f:	0f af c2             	imul   eax,edx
c001cb32:	99                   	cdq    
c001cb33:	52                   	push   edx
c001cb34:	50                   	push   eax
c001cb35:	56                   	push   esi
c001cb36:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb39:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb3c:	83 c4 20             	add    esp,0x20
c001cb3f:	85 c0                	test   eax,eax
c001cb41:	0f 84 a2 00 00 00    	je     c001cbe9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb47:	31 d2                	xor    edx,edx
c001cb49:	51                   	push   ecx
c001cb4a:	52                   	push   edx
c001cb4b:	50                   	push   eax
c001cb4c:	56                   	push   esi
c001cb4d:	e8 08 6a ff ff       	call   c001355a <File::seek(unsigned long long)>
c001cb52:	83 c4 10             	add    esp,0x10
c001cb55:	85 c0                	test   eax,eax
c001cb57:	0f 85 8c 00 00 00    	jne    c001cbe9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb5d:	83 ec 0c             	sub    esp,0xc
c001cb60:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb64:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb68:	31 ed                	xor    ebp,ebp
c001cb6a:	0f af c2             	imul   eax,edx
c001cb6d:	50                   	push   eax
c001cb6e:	e8 d8 2c ff ff       	call   c000f84b <malloc>
c001cb73:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb79:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb80:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb84:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb88:	0f af c2             	imul   eax,edx
c001cb8b:	99                   	cdq    
c001cb8c:	52                   	push   edx
c001cb8d:	50                   	push   eax
c001cb8e:	56                   	push   esi
c001cb8f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb92:	83 c4 20             	add    esp,0x20
c001cb95:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb9d:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cba1:	0f 86 80 00 00 00    	jbe    c001cc27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cba7:	0f b7 fd             	movzx  edi,bp
c001cbaa:	c1 e7 05             	shl    edi,0x5
c001cbad:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cbb1:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cbb4:	75 6b                	jne    c001cc21 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbb6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cbb9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbbd:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbc4:	52                   	push   edx
c001cbc5:	31 d2                	xor    edx,edx
c001cbc7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cbca:	52                   	push   edx
c001cbcb:	50                   	push   eax
c001cbcc:	56                   	push   esi
c001cbcd:	e8 88 69 ff ff       	call   c001355a <File::seek(unsigned long long)>
c001cbd2:	83 c4 10             	add    esp,0x10
c001cbd5:	85 c0                	test   eax,eax
c001cbd7:	74 17                	je     c001cbf0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cbd9:	83 ec 0c             	sub    esp,0xc
c001cbdc:	68 56 c0 02 c0       	push   0xc002c056
c001cbe1:	e8 f9 62 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001cbe6:	83 c4 10             	add    esp,0x10
c001cbe9:	31 c0                	xor    eax,eax
c001cbeb:	e9 87 00 00 00       	jmp    c001cc77 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cbf0:	83 ec 0c             	sub    esp,0xc
c001cbf3:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cbf6:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cbf9:	50                   	push   eax
c001cbfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cbfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc02:	56                   	push   esi
c001cc03:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc07:	e8 cb fb ff ff       	call   c001c7d7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc10:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc14:	83 c4 20             	add    esp,0x20
c001cc17:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc1b:	73 04                	jae    c001cc21 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc21:	45                   	inc    ebp
c001cc22:	e9 76 ff ff ff       	jmp    c001cb9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc27:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc2b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc33:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc39:	83 ec 0c             	sub    esp,0xc
c001cc3c:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc42:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc47:	05 00 10 00 00       	add    eax,0x1000
c001cc4c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc53:	e8 03 2c ff ff       	call   c000f85b <free>
c001cc58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc5b:	e8 fb 2b ff ff       	call   c000f85b <free>
c001cc60:	58                   	pop    eax
c001cc61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc65:	e8 f1 2b ff ff       	call   c000f85b <free>
c001cc6a:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc6d:	e8 88 68 ff ff       	call   c00134fa <File::close()>
c001cc72:	83 c4 10             	add    esp,0x10
c001cc75:	b0 01                	mov    al,0x1
c001cc77:	83 c4 3c             	add    esp,0x3c
c001cc7a:	5b                   	pop    ebx
c001cc7b:	5e                   	pop    esi
c001cc7c:	5f                   	pop    edi
c001cc7d:	5d                   	pop    ebp
c001cc7e:	c3                   	ret    

c001cc7f <Thr::runtimeReferenceHelper()>:
c001cc7f:	83 ec 18             	sub    esp,0x18
c001cc82:	68 5e c0 02 c0       	push   0xc002c05e
c001cc87:	e8 53 62 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001cc8c:	fa                   	cli    
c001cc8d:	83 c4 10             	add    esp,0x10
c001cc90:	eb fe                	jmp    c001cc90 <Thr::runtimeReferenceHelper()+0x11>

c001cc92 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc92:	57                   	push   edi
c001cc93:	56                   	push   esi
c001cc94:	53                   	push   ebx
c001cc95:	31 db                	xor    ebx,ebx
c001cc97:	39 1d 80 19 03 c0    	cmp    DWORD PTR ds:0xc0031980,ebx
c001cc9d:	7e 3c                	jle    c001ccdb <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc9f:	8b 34 9d 00 19 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce700]
c001cca6:	31 ff                	xor    edi,edi
c001cca8:	39 3c 9d 00 18 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce800],edi
c001ccaf:	7e 27                	jle    c001ccd8 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001ccb1:	50                   	push   eax
c001ccb2:	50                   	push   eax
c001ccb3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccb7:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccb9:	03 04 9d 80 18 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce780]
c001ccc0:	50                   	push   eax
c001ccc1:	e8 02 3c fe ff       	call   c00008c8 <strcmp>
c001ccc6:	83 c4 10             	add    esp,0x10
c001ccc9:	85 c0                	test   eax,eax
c001cccb:	75 05                	jne    c001ccd2 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cccd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ccd0:	eb 0b                	jmp    c001ccdd <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001ccd2:	83 c6 10             	add    esi,0x10
c001ccd5:	47                   	inc    edi
c001ccd6:	eb d0                	jmp    c001cca8 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001ccd8:	43                   	inc    ebx
c001ccd9:	eb bc                	jmp    c001cc97 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001ccdb:	31 c0                	xor    eax,eax
c001ccdd:	5b                   	pop    ebx
c001ccde:	5e                   	pop    esi
c001ccdf:	5f                   	pop    edi
c001cce0:	c3                   	ret    

c001cce1 <Thr::loadKernelSymbolTable(char const*)>:
c001cce1:	55                   	push   ebp
c001cce2:	57                   	push   edi
c001cce3:	56                   	push   esi
c001cce4:	53                   	push   ebx
c001cce5:	83 ec 68             	sub    esp,0x68
c001cce8:	8b 35 d4 19 03 c0    	mov    esi,DWORD PTR ds:0xc00319d4
c001ccee:	68 14 01 00 00       	push   0x114
c001ccf3:	e8 53 2b ff ff       	call   c000f84b <malloc>
c001ccf8:	83 c4 0c             	add    esp,0xc
c001ccfb:	89 c3                	mov    ebx,eax
c001ccfd:	56                   	push   esi
c001ccfe:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd02:	50                   	push   eax
c001cd03:	e8 30 67 ff ff       	call   c0013438 <File::File(char const*, Process*)>
c001cd08:	5e                   	pop    esi
c001cd09:	5f                   	pop    edi
c001cd0a:	6a 01                	push   0x1
c001cd0c:	53                   	push   ebx
c001cd0d:	e8 8a 67 ff ff       	call   c001349c <File::open(FileOpenMode)>
c001cd12:	83 c4 10             	add    esp,0x10
c001cd15:	85 c0                	test   eax,eax
c001cd17:	74 0a                	je     c001cd23 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd19:	83 ec 0c             	sub    esp,0xc
c001cd1c:	68 80 c0 02 c0       	push   0xc002c080
c001cd21:	eb 34                	jmp    c001cd57 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd23:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd2b:	83 ec 0c             	sub    esp,0xc
c001cd2e:	6a 34                	push   0x34
c001cd30:	e8 16 2b ff ff       	call   c000f84b <malloc>
c001cd35:	59                   	pop    ecx
c001cd36:	89 c7                	mov    edi,eax
c001cd38:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd3e:	56                   	push   esi
c001cd3f:	57                   	push   edi
c001cd40:	6a 00                	push   0x0
c001cd42:	6a 34                	push   0x34
c001cd44:	53                   	push   ebx
c001cd45:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd48:	83 c4 20             	add    esp,0x20
c001cd4b:	85 c0                	test   eax,eax
c001cd4d:	74 17                	je     c001cd66 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd4f:	83 ec 0c             	sub    esp,0xc
c001cd52:	68 97 c0 02 c0       	push   0xc002c097
c001cd57:	e8 af d8 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001cd5c:	83 c4 10             	add    esp,0x10
c001cd5f:	31 c0                	xor    eax,eax
c001cd61:	e9 31 02 00 00       	jmp    c001cf97 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd66:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd6c:	75 e1                	jne    c001cd4f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd6e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd71:	85 c0                	test   eax,eax
c001cd73:	74 da                	je     c001cd4f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd75:	52                   	push   edx
c001cd76:	31 d2                	xor    edx,edx
c001cd78:	52                   	push   edx
c001cd79:	50                   	push   eax
c001cd7a:	53                   	push   ebx
c001cd7b:	e8 da 67 ff ff       	call   c001355a <File::seek(unsigned long long)>
c001cd80:	83 c4 10             	add    esp,0x10
c001cd83:	85 c0                	test   eax,eax
c001cd85:	75 c8                	jne    c001cd4f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd87:	83 ec 0c             	sub    esp,0xc
c001cd8a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd8e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd92:	31 ed                	xor    ebp,ebp
c001cd94:	0f af c2             	imul   eax,edx
c001cd97:	50                   	push   eax
c001cd98:	e8 ae 2a ff ff       	call   c000f84b <malloc>
c001cd9d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cda3:	89 34 24             	mov    DWORD PTR [esp],esi
c001cda6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cdaa:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdae:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdb2:	0f af c2             	imul   eax,edx
c001cdb5:	99                   	cdq    
c001cdb6:	52                   	push   edx
c001cdb7:	50                   	push   eax
c001cdb8:	53                   	push   ebx
c001cdb9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdbc:	83 c4 20             	add    esp,0x20
c001cdbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cdc7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cdcf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cdd7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cddf:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cde3:	0f 86 aa 00 00 00    	jbe    c001ce93 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cde9:	0f b7 f5             	movzx  esi,bp
c001cdec:	6b f6 28             	imul   esi,esi,0x28
c001cdef:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cdf3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cdf6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdfa:	50                   	push   eax
c001cdfb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdff:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce03:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce05:	6b c0 28             	imul   eax,eax,0x28
c001ce08:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce0c:	89 d0                	mov    eax,edx
c001ce0e:	31 d2                	xor    edx,edx
c001ce10:	52                   	push   edx
c001ce11:	50                   	push   eax
c001ce12:	53                   	push   ebx
c001ce13:	e8 42 67 ff ff       	call   c001355a <File::seek(unsigned long long)>
c001ce18:	83 c4 0c             	add    esp,0xc
c001ce1b:	6a 20                	push   0x20
c001ce1d:	6a 00                	push   0x0
c001ce1f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce23:	52                   	push   edx
c001ce24:	e8 57 39 fe ff       	call   c0000780 <memset>
c001ce29:	58                   	pop    eax
c001ce2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce2c:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce30:	51                   	push   ecx
c001ce31:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce35:	52                   	push   edx
c001ce36:	6a 00                	push   0x0
c001ce38:	6a 1f                	push   0x1f
c001ce3a:	53                   	push   ebx
c001ce3b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce3e:	83 c4 18             	add    esp,0x18
c001ce41:	68 ae c0 02 c0       	push   0xc002c0ae
c001ce46:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce4a:	52                   	push   edx
c001ce4b:	e8 78 3a fe ff       	call   c00008c8 <strcmp>
c001ce50:	83 c4 10             	add    esp,0x10
c001ce53:	85 c0                	test   eax,eax
c001ce55:	75 0f                	jne    c001ce66 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce57:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce66:	50                   	push   eax
c001ce67:	50                   	push   eax
c001ce68:	68 b6 c0 02 c0       	push   0xc002c0b6
c001ce6d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce71:	50                   	push   eax
c001ce72:	e8 51 3a fe ff       	call   c00008c8 <strcmp>
c001ce77:	83 c4 10             	add    esp,0x10
c001ce7a:	85 c0                	test   eax,eax
c001ce7c:	75 0f                	jne    c001ce8d <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce7e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce8d:	45                   	inc    ebp
c001ce8e:	e9 4c ff ff ff       	jmp    c001cddf <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce93:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce98:	75 10                	jne    c001ceaa <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce9a:	83 ec 0c             	sub    esp,0xc
c001ce9d:	68 be c0 02 c0       	push   0xc002c0be
c001cea2:	e8 64 d7 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001cea7:	83 c4 10             	add    esp,0x10
c001ceaa:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ceaf:	75 10                	jne    c001cec1 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ceb1:	83 ec 0c             	sub    esp,0xc
c001ceb4:	68 be c0 02 c0       	push   0xc002c0be
c001ceb9:	e8 4d d7 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001cebe:	83 c4 10             	add    esp,0x10
c001cec1:	31 d2                	xor    edx,edx
c001cec3:	50                   	push   eax
c001cec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cec8:	52                   	push   edx
c001cec9:	50                   	push   eax
c001ceca:	53                   	push   ebx
c001cecb:	e8 8a 66 ff ff       	call   c001355a <File::seek(unsigned long long)>
c001ced0:	5a                   	pop    edx
c001ced1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ced5:	e8 71 29 ff ff       	call   c000f84b <malloc>
c001ceda:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cede:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cee2:	31 c9                	xor    ecx,ecx
c001cee4:	5e                   	pop    esi
c001cee5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cee7:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ceeb:	55                   	push   ebp
c001ceec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cef0:	51                   	push   ecx
c001cef1:	52                   	push   edx
c001cef2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cef6:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cefa:	53                   	push   ebx
c001cefb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cefe:	83 c4 14             	add    esp,0x14
c001cf01:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf05:	e8 41 29 ff ff       	call   c000f84b <malloc>
c001cf0a:	89 c6                	mov    esi,eax
c001cf0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf0e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf11:	56                   	push   esi
c001cf12:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf16:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf1a:	51                   	push   ecx
c001cf1b:	52                   	push   edx
c001cf1c:	53                   	push   ebx
c001cf1d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf24:	8b 15 80 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031980
c001cf2a:	83 c4 1c             	add    esp,0x1c
c001cf2d:	c1 e8 04             	shr    eax,0x4
c001cf30:	89 04 95 00 18 03 c0 	mov    DWORD PTR [edx*4-0x3ffce800],eax
c001cf37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf3b:	31 d2                	xor    edx,edx
c001cf3d:	52                   	push   edx
c001cf3e:	50                   	push   eax
c001cf3f:	53                   	push   ebx
c001cf40:	e8 15 66 ff ff       	call   c001355a <File::seek(unsigned long long)>
c001cf45:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf47:	31 d2                	xor    edx,edx
c001cf49:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf4c:	56                   	push   esi
c001cf4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf51:	52                   	push   edx
c001cf52:	50                   	push   eax
c001cf53:	53                   	push   ebx
c001cf54:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf57:	83 c4 14             	add    esp,0x14
c001cf5a:	53                   	push   ebx
c001cf5b:	e8 9a 65 ff ff       	call   c00134fa <File::close()>
c001cf60:	5d                   	pop    ebp
c001cf61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf65:	e8 f1 28 ff ff       	call   c000f85b <free>
c001cf6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf6d:	e8 e9 28 ff ff       	call   c000f85b <free>
c001cf72:	a1 80 19 03 c0       	mov    eax,ds:0xc0031980
c001cf77:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf7b:	8d 50 01             	lea    edx,[eax+0x1]
c001cf7e:	89 0c 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],ecx
c001cf85:	89 34 85 80 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce780],esi
c001cf8c:	89 15 80 19 03 c0    	mov    DWORD PTR ds:0xc0031980,edx
c001cf92:	83 c4 10             	add    esp,0x10
c001cf95:	b0 01                	mov    al,0x1
c001cf97:	83 c4 5c             	add    esp,0x5c
c001cf9a:	5b                   	pop    ebx
c001cf9b:	5e                   	pop    esi
c001cf9c:	5f                   	pop    edi
c001cf9d:	5d                   	pop    ebp
c001cf9e:	c3                   	ret    

c001cf9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf9f:	55                   	push   ebp
c001cfa0:	57                   	push   edi
c001cfa1:	56                   	push   esi
c001cfa2:	53                   	push   ebx
c001cfa3:	81 ec 68 03 00 00    	sub    esp,0x368
c001cfa9:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfb0:	8b 1d d4 19 03 c0    	mov    ebx,DWORD PTR ds:0xc00319d4
c001cfb6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cfba:	68 14 01 00 00       	push   0x114
c001cfbf:	e8 87 28 ff ff       	call   c000f84b <malloc>
c001cfc4:	83 c4 0c             	add    esp,0xc
c001cfc7:	89 c5                	mov    ebp,eax
c001cfc9:	53                   	push   ebx
c001cfca:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cfd1:	50                   	push   eax
c001cfd2:	e8 61 64 ff ff       	call   c0013438 <File::File(char const*, Process*)>
c001cfd7:	5e                   	pop    esi
c001cfd8:	5f                   	pop    edi
c001cfd9:	6a 01                	push   0x1
c001cfdb:	55                   	push   ebp
c001cfdc:	e8 bb 64 ff ff       	call   c001349c <File::open(FileOpenMode)>
c001cfe1:	83 c4 10             	add    esp,0x10
c001cfe4:	85 c0                	test   eax,eax
c001cfe6:	0f 85 8d 06 00 00    	jne    c001d679 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfec:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cff4:	83 ec 0c             	sub    esp,0xc
c001cff7:	6a 34                	push   0x34
c001cff9:	e8 4d 28 ff ff       	call   c000f84b <malloc>
c001cffe:	5b                   	pop    ebx
c001cfff:	89 c7                	mov    edi,eax
c001d001:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d005:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d008:	53                   	push   ebx
c001d009:	57                   	push   edi
c001d00a:	6a 00                	push   0x0
c001d00c:	6a 34                	push   0x34
c001d00e:	55                   	push   ebp
c001d00f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d012:	83 c4 20             	add    esp,0x20
c001d015:	85 c0                	test   eax,eax
c001d017:	0f 85 5c 06 00 00    	jne    c001d679 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d01d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d023:	0f 85 50 06 00 00    	jne    c001d679 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d029:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d02c:	85 c0                	test   eax,eax
c001d02e:	0f 84 45 06 00 00    	je     c001d679 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d034:	31 d2                	xor    edx,edx
c001d036:	51                   	push   ecx
c001d037:	52                   	push   edx
c001d038:	50                   	push   eax
c001d039:	55                   	push   ebp
c001d03a:	e8 1b 65 ff ff       	call   c001355a <File::seek(unsigned long long)>
c001d03f:	83 c4 10             	add    esp,0x10
c001d042:	85 c0                	test   eax,eax
c001d044:	0f 85 2f 06 00 00    	jne    c001d679 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d04a:	83 ec 0c             	sub    esp,0xc
c001d04d:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d050:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d054:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d058:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d05c:	0f af c2             	imul   eax,edx
c001d05f:	50                   	push   eax
c001d060:	e8 e6 27 ff ff       	call   c000f84b <malloc>
c001d065:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d068:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d06c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d06f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d073:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d077:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d07b:	0f af c2             	imul   eax,edx
c001d07e:	99                   	cdq    
c001d07f:	52                   	push   edx
c001d080:	50                   	push   eax
c001d081:	55                   	push   ebp
c001d082:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d085:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d088:	83 c4 20             	add    esp,0x20
c001d08b:	85 c0                	test   eax,eax
c001d08d:	0f 84 e6 05 00 00    	je     c001d679 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d093:	52                   	push   edx
c001d094:	31 d2                	xor    edx,edx
c001d096:	52                   	push   edx
c001d097:	50                   	push   eax
c001d098:	55                   	push   ebp
c001d099:	e8 bc 64 ff ff       	call   c001355a <File::seek(unsigned long long)>
c001d09e:	83 c4 10             	add    esp,0x10
c001d0a1:	85 c0                	test   eax,eax
c001d0a3:	0f 85 d0 05 00 00    	jne    c001d679 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0a9:	83 ec 0c             	sub    esp,0xc
c001d0ac:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0b0:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0b4:	31 f6                	xor    esi,esi
c001d0b6:	0f af c2             	imul   eax,edx
c001d0b9:	50                   	push   eax
c001d0ba:	e8 8c 27 ff ff       	call   c000f84b <malloc>
c001d0bf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0c2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0c9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0cd:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0d1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0d5:	0f af c2             	imul   eax,edx
c001d0d8:	99                   	cdq    
c001d0d9:	52                   	push   edx
c001d0da:	50                   	push   eax
c001d0db:	55                   	push   ebp
c001d0dc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0df:	83 c4 20             	add    esp,0x20
c001d0e2:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d0e6:	0f 86 8a 00 00 00    	jbe    c001d176 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d0ec:	0f b7 de             	movzx  ebx,si
c001d0ef:	c1 e3 05             	shl    ebx,0x5
c001d0f2:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d0f6:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d0f9:	75 75                	jne    c001d170 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d0fb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d0fe:	31 d2                	xor    edx,edx
c001d100:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d104:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d107:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d10b:	50                   	push   eax
c001d10c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d10f:	52                   	push   edx
c001d110:	50                   	push   eax
c001d111:	55                   	push   ebp
c001d112:	e8 43 64 ff ff       	call   c001355a <File::seek(unsigned long long)>
c001d117:	83 c4 10             	add    esp,0x10
c001d11a:	85 c0                	test   eax,eax
c001d11c:	0f 85 57 05 00 00    	jne    c001d679 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d122:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d129:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d12c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d130:	31 d2                	xor    edx,edx
c001d132:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d136:	83 ec 0c             	sub    esp,0xc
c001d139:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d13d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d144:	50                   	push   eax
c001d145:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d14d:	52                   	push   edx
c001d14e:	50                   	push   eax
c001d14f:	55                   	push   ebp
c001d150:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d153:	83 c4 1c             	add    esp,0x1c
c001d156:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d159:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d15c:	50                   	push   eax
c001d15d:	6a 00                	push   0x0
c001d15f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d163:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d167:	50                   	push   eax
c001d168:	e8 13 36 fe ff       	call   c0000780 <memset>
c001d16d:	83 c4 10             	add    esp,0x10
c001d170:	46                   	inc    esi
c001d171:	e9 6c ff ff ff       	jmp    c001d0e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d176:	53                   	push   ebx
c001d177:	31 db                	xor    ebx,ebx
c001d179:	68 00 01 00 00       	push   0x100
c001d17e:	6a 00                	push   0x0
c001d180:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d184:	50                   	push   eax
c001d185:	e8 f6 35 fe ff       	call   c0000780 <memset>
c001d18a:	83 c4 0c             	add    esp,0xc
c001d18d:	68 00 01 00 00       	push   0x100
c001d192:	6a 00                	push   0x0
c001d194:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d19b:	50                   	push   eax
c001d19c:	e8 df 35 fe ff       	call   c0000780 <memset>
c001d1a1:	83 c4 10             	add    esp,0x10
c001d1a4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1ac:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1b4:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1c4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d1cc:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d1d0:	0f 86 30 01 00 00    	jbe    c001d306 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d1d6:	0f b7 f3             	movzx  esi,bx
c001d1d9:	6b f6 28             	imul   esi,esi,0x28
c001d1dc:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d1e0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d1e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1e7:	52                   	push   edx
c001d1e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1ec:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d1f0:	8b 06                	mov    eax,DWORD PTR [esi]
c001d1f2:	6b d2 28             	imul   edx,edx,0x28
c001d1f5:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d1f9:	31 d2                	xor    edx,edx
c001d1fb:	52                   	push   edx
c001d1fc:	50                   	push   eax
c001d1fd:	55                   	push   ebp
c001d1fe:	e8 57 63 ff ff       	call   c001355a <File::seek(unsigned long long)>
c001d203:	83 c4 0c             	add    esp,0xc
c001d206:	6a 20                	push   0x20
c001d208:	6a 00                	push   0x0
c001d20a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d211:	51                   	push   ecx
c001d212:	e8 69 35 fe ff       	call   c0000780 <memset>
c001d217:	59                   	pop    ecx
c001d218:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d21b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d21f:	52                   	push   edx
c001d220:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d227:	51                   	push   ecx
c001d228:	6a 00                	push   0x0
c001d22a:	6a 1f                	push   0x1f
c001d22c:	55                   	push   ebp
c001d22d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d230:	83 c4 1c             	add    esp,0x1c
c001d233:	6a 09                	push   0x9
c001d235:	68 d8 c0 02 c0       	push   0xc002c0d8
c001d23a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d241:	51                   	push   ecx
c001d242:	e8 01 34 fe ff       	call   c0000648 <memcmp>
c001d247:	83 c4 10             	add    esp,0x10
c001d24a:	85 c0                	test   eax,eax
c001d24c:	75 21                	jne    c001d26f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d24e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d252:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d256:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d25a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d25e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d261:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d268:	89 d0                	mov    eax,edx
c001d26a:	40                   	inc    eax
c001d26b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d26f:	50                   	push   eax
c001d270:	6a 09                	push   0x9
c001d272:	68 e2 c0 02 c0       	push   0xc002c0e2
c001d277:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d27e:	50                   	push   eax
c001d27f:	e8 c4 33 fe ff       	call   c0000648 <memcmp>
c001d284:	83 c4 10             	add    esp,0x10
c001d287:	85 c0                	test   eax,eax
c001d289:	75 21                	jne    c001d2ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d28b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d28f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d293:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d297:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d29b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d29e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2a5:	89 d0                	mov    eax,edx
c001d2a7:	40                   	inc    eax
c001d2a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2ac:	50                   	push   eax
c001d2ad:	50                   	push   eax
c001d2ae:	68 ae c0 02 c0       	push   0xc002c0ae
c001d2b3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2ba:	50                   	push   eax
c001d2bb:	e8 08 36 fe ff       	call   c00008c8 <strcmp>
c001d2c0:	83 c4 10             	add    esp,0x10
c001d2c3:	85 c0                	test   eax,eax
c001d2c5:	75 0f                	jne    c001d2d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d2c7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2d6:	50                   	push   eax
c001d2d7:	50                   	push   eax
c001d2d8:	68 b6 c0 02 c0       	push   0xc002c0b6
c001d2dd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2e4:	50                   	push   eax
c001d2e5:	e8 de 35 fe ff       	call   c00008c8 <strcmp>
c001d2ea:	83 c4 10             	add    esp,0x10
c001d2ed:	85 c0                	test   eax,eax
c001d2ef:	75 0f                	jne    c001d300 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d2f1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d300:	43                   	inc    ebx
c001d301:	e9 c6 fe ff ff       	jmp    c001d1cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d306:	31 d2                	xor    edx,edx
c001d308:	50                   	push   eax
c001d309:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d30d:	52                   	push   edx
c001d30e:	50                   	push   eax
c001d30f:	55                   	push   ebp
c001d310:	e8 45 62 ff ff       	call   c001355a <File::seek(unsigned long long)>
c001d315:	58                   	pop    eax
c001d316:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d31a:	e8 2c 25 ff ff       	call   c000f84b <malloc>
c001d31f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d322:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d326:	31 d2                	xor    edx,edx
c001d328:	58                   	pop    eax
c001d329:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d32d:	53                   	push   ebx
c001d32e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d332:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d336:	52                   	push   edx
c001d337:	50                   	push   eax
c001d338:	55                   	push   ebp
c001d339:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d33c:	83 c4 14             	add    esp,0x14
c001d33f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d343:	e8 03 25 ff ff       	call   c000f84b <malloc>
c001d348:	31 d2                	xor    edx,edx
c001d34a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d34e:	83 c4 0c             	add    esp,0xc
c001d351:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d355:	52                   	push   edx
c001d356:	50                   	push   eax
c001d357:	55                   	push   ebp
c001d358:	e8 fd 61 ff ff       	call   c001355a <File::seek(unsigned long long)>
c001d35d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d360:	31 d2                	xor    edx,edx
c001d362:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d365:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d369:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d36d:	52                   	push   edx
c001d36e:	50                   	push   eax
c001d36f:	55                   	push   ebp
c001d370:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d373:	83 c4 20             	add    esp,0x20
c001d376:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d37e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d382:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d386:	0f 84 f1 02 00 00    	je     c001d67d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d38c:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d393:	31 d2                	xor    edx,edx
c001d395:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d399:	c1 e8 03             	shr    eax,0x3
c001d39c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d3a0:	51                   	push   ecx
c001d3a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3a5:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d3a9:	52                   	push   edx
c001d3aa:	50                   	push   eax
c001d3ab:	55                   	push   ebp
c001d3ac:	e8 a9 61 ff ff       	call   c001355a <File::seek(unsigned long long)>
c001d3b1:	5b                   	pop    ebx
c001d3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b6:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3bd:	e8 89 24 ff ff       	call   c000f84b <malloc>
c001d3c2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3c9:	31 d2                	xor    edx,edx
c001d3cb:	5e                   	pop    esi
c001d3cc:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d3d0:	50                   	push   eax
c001d3d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3d9:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d3e0:	52                   	push   edx
c001d3e1:	50                   	push   eax
c001d3e2:	55                   	push   ebp
c001d3e3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3e6:	83 c4 20             	add    esp,0x20
c001d3e9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d3f1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d3f5:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d3f9:	0f 8d 62 02 00 00    	jge    c001d661 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d3ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d403:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d407:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d40c:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d40f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d413:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d417:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d41b:	89 d8                	mov    eax,ebx
c001d41d:	c1 e8 08             	shr    eax,0x8
c001d420:	89 c6                	mov    esi,eax
c001d422:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d426:	c1 e6 04             	shl    esi,0x4
c001d429:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d42d:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d430:	85 d2                	test   edx,edx
c001d432:	0f 85 bf 00 00 00    	jne    c001d4f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d438:	83 ec 0c             	sub    esp,0xc
c001d43b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d43f:	03 06                	add    eax,DWORD PTR [esi]
c001d441:	50                   	push   eax
c001d442:	e8 4b f8 ff ff       	call   c001cc92 <Thr::getAddressOfKernelSymbol(char const*)>
c001d447:	83 c4 10             	add    esp,0x10
c001d44a:	89 c2                	mov    edx,eax
c001d44c:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d451:	85 c0                	test   eax,eax
c001d453:	0f 85 9e 00 00 00    	jne    c001d4f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d459:	83 ec 0c             	sub    esp,0xc
c001d45c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d460:	03 06                	add    eax,DWORD PTR [esi]
c001d462:	50                   	push   eax
c001d463:	e8 95 10 ff ff       	call   c000e4fd <Krnl::resolveCompatibilitySymbol(char*)>
c001d468:	83 c4 10             	add    esp,0x10
c001d46b:	89 c2                	mov    edx,eax
c001d46d:	85 c0                	test   eax,eax
c001d46f:	0f 85 82 00 00 00    	jne    c001d4f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d475:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d479:	50                   	push   eax
c001d47a:	50                   	push   eax
c001d47b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d47f:	03 06                	add    eax,DWORD PTR [esi]
c001d481:	50                   	push   eax
c001d482:	68 ec c0 02 c0       	push   0xc002c0ec
c001d487:	e8 53 5a ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001d48c:	58                   	pop    eax
c001d48d:	5a                   	pop    edx
c001d48e:	68 06 c1 02 c0       	push   0xc002c106
c001d493:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d49a:	50                   	push   eax
c001d49b:	e8 9c 33 fe ff       	call   c000083c <strcpy>
c001d4a0:	59                   	pop    ecx
c001d4a1:	58                   	pop    eax
c001d4a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4a6:	03 06                	add    eax,DWORD PTR [esi]
c001d4a8:	50                   	push   eax
c001d4a9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4b0:	50                   	push   eax
c001d4b1:	e8 c6 34 fe ff       	call   c000097c <strcat>
c001d4b6:	58                   	pop    eax
c001d4b7:	5a                   	pop    edx
c001d4b8:	68 9c c1 02 c0       	push   0xc002c19c
c001d4bd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4c4:	50                   	push   eax
c001d4c5:	e8 b2 34 fe ff       	call   c000097c <strcat>
c001d4ca:	83 c4 10             	add    esp,0x10
c001d4cd:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4d2:	0f 84 43 01 00 00    	je     c001d61b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4d8:	83 ec 0c             	sub    esp,0xc
c001d4db:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4e2:	50                   	push   eax
c001d4e3:	e8 23 d1 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001d4e8:	83 c4 10             	add    esp,0x10
c001d4eb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d4ef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d4f3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d4f7:	80 fb 01             	cmp    bl,0x1
c001d4fa:	75 7d                	jne    c001d579 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d4fc:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d503:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d507:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d50b:	01 ce                	add    esi,ecx
c001d50d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d513:	0f 94 c0             	sete   al
c001d516:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d51c:	0f 94 c3             	sete   bl
c001d51f:	09 c3                	or     ebx,eax
c001d521:	8b 06                	mov    eax,DWORD PTR [esi]
c001d523:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d528:	74 36                	je     c001d560 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d52a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d52d:	84 db                	test   bl,bl
c001d52f:	75 0a                	jne    c001d53b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d531:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d535:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d539:	76 37                	jbe    c001d572 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d53b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d53f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d544:	0f 84 d1 00 00 00    	je     c001d61b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d54a:	83 ec 0c             	sub    esp,0xc
c001d54d:	68 1d c1 02 c0       	push   0xc002c11d
c001d552:	e8 b4 d0 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001d557:	83 c4 10             	add    esp,0x10
c001d55a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d55e:	eb 12                	jmp    c001d572 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d560:	01 c1                	add    ecx,eax
c001d562:	84 db                	test   bl,bl
c001d564:	75 0c                	jne    c001d572 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d566:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d56a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d56e:	77 02                	ja     c001d572 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d570:	01 d1                	add    ecx,edx
c001d572:	89 0e                	mov    DWORD PTR [esi],ecx
c001d574:	e9 df 00 00 00       	jmp    c001d658 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d579:	80 fb 02             	cmp    bl,0x2
c001d57c:	75 71                	jne    c001d5ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d57e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d585:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d589:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d58d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d593:	74 15                	je     c001d5aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d595:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d59b:	74 0d                	je     c001d5aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d59d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5a1:	83 e8 04             	sub    eax,0x4
c001d5a4:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5a8:	76 1f                	jbe    c001d5c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d5aa:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5ae:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5b3:	74 66                	je     c001d61b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5b5:	83 ec 0c             	sub    esp,0xc
c001d5b8:	68 39 c1 02 c0       	push   0xc002c139
c001d5bd:	e8 49 d0 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001d5c2:	83 c4 10             	add    esp,0x10
c001d5c5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d5c9:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5cb:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5d0:	74 13                	je     c001d5e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d5d2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d5d6:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d5dd:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d5e1:	01 c8                	add    eax,ecx
c001d5e3:	eb 04                	jmp    c001d5e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d5e5:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d5e9:	01 c2                	add    edx,eax
c001d5eb:	89 16                	mov    DWORD PTR [esi],edx
c001d5ed:	eb 69                	jmp    c001d658 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5ef:	0f b6 db             	movzx  ebx,bl
c001d5f2:	50                   	push   eax
c001d5f3:	50                   	push   eax
c001d5f4:	53                   	push   ebx
c001d5f5:	68 55 c1 02 c0       	push   0xc002c155
c001d5fa:	e8 e0 58 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001d5ff:	83 c4 10             	add    esp,0x10
c001d602:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d607:	74 12                	je     c001d61b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d609:	83 ec 0c             	sub    esp,0xc
c001d60c:	68 60 c1 02 c0       	push   0xc002c160
c001d611:	e8 f5 cf ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001d616:	83 c4 10             	add    esp,0x10
c001d619:	eb 3d                	jmp    c001d658 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d61b:	83 ec 0c             	sub    esp,0xc
c001d61e:	55                   	push   ebp
c001d61f:	e8 d6 5e ff ff       	call   c00134fa <File::close()>
c001d624:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d627:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d62a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d62d:	59                   	pop    ecx
c001d62e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d632:	e8 24 22 ff ff       	call   c000f85b <free>
c001d637:	5b                   	pop    ebx
c001d638:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d63c:	e8 1a 22 ff ff       	call   c000f85b <free>
c001d641:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d644:	e8 12 22 ff ff       	call   c000f85b <free>
c001d649:	5e                   	pop    esi
c001d64a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d64e:	e8 08 22 ff ff       	call   c000f85b <free>
c001d653:	83 c4 10             	add    esp,0x10
c001d656:	eb 21                	jmp    c001d679 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d658:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d65c:	e9 90 fd ff ff       	jmp    c001d3f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d661:	83 ec 0c             	sub    esp,0xc
c001d664:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d668:	e8 ee 21 ff ff       	call   c000f85b <free>
c001d66d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d671:	83 c4 10             	add    esp,0x10
c001d674:	e9 05 fd ff ff       	jmp    c001d37e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d679:	31 c0                	xor    eax,eax
c001d67b:	eb 33                	jmp    c001d6b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d67d:	83 ec 0c             	sub    esp,0xc
c001d680:	55                   	push   ebp
c001d681:	e8 74 5e ff ff       	call   c00134fa <File::close()>
c001d686:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d689:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d68c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d68f:	58                   	pop    eax
c001d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d694:	e8 c2 21 ff ff       	call   c000f85b <free>
c001d699:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d69c:	e8 ba 21 ff ff       	call   c000f85b <free>
c001d6a1:	5a                   	pop    edx
c001d6a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6a6:	e8 b0 21 ff ff       	call   c000f85b <free>
c001d6ab:	83 c4 10             	add    esp,0x10
c001d6ae:	b0 01                	mov    al,0x1
c001d6b0:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d6b6:	5b                   	pop    ebx
c001d6b7:	5e                   	pop    esi
c001d6b8:	5f                   	pop    edi
c001d6b9:	5d                   	pop    ebp
c001d6ba:	c3                   	ret    

c001d6bb <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d6bb:	56                   	push   esi
c001d6bc:	31 d2                	xor    edx,edx
c001d6be:	53                   	push   ebx
c001d6bf:	8b 1d e0 11 03 c0    	mov    ebx,DWORD PTR ds:0xc00311e0
c001d6c5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6c9:	39 d3                	cmp    ebx,edx
c001d6cb:	7e 1b                	jle    c001d6e8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d6cd:	8b 04 95 00 14 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcec00]
c001d6d4:	39 c8                	cmp    eax,ecx
c001d6d6:	77 0d                	ja     c001d6e5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d6d8:	8b 34 95 00 12 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcee00]
c001d6df:	01 c6                	add    esi,eax
c001d6e1:	39 ce                	cmp    esi,ecx
c001d6e3:	77 05                	ja     c001d6ea <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d6e5:	42                   	inc    edx
c001d6e6:	eb e1                	jmp    c001d6c9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d6e8:	31 c0                	xor    eax,eax
c001d6ea:	5b                   	pop    ebx
c001d6eb:	5e                   	pop    esi
c001d6ec:	c3                   	ret    

c001d6ed <Thr::getDriverNameFromAddress(unsigned long)>:
c001d6ed:	53                   	push   ebx
c001d6ee:	31 c0                	xor    eax,eax
c001d6f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d6f4:	8b 1d e0 11 03 c0    	mov    ebx,DWORD PTR ds:0xc00311e0
c001d6fa:	39 c3                	cmp    ebx,eax
c001d6fc:	7e 22                	jle    c001d720 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d6fe:	8b 14 85 00 14 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcec00]
c001d705:	39 ca                	cmp    edx,ecx
c001d707:	77 14                	ja     c001d71d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d709:	03 14 85 00 12 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcee00]
c001d710:	39 ca                	cmp    edx,ecx
c001d712:	76 09                	jbe    c001d71d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d714:	8b 04 85 00 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcea00]
c001d71b:	eb 05                	jmp    c001d722 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d71d:	40                   	inc    eax
c001d71e:	eb da                	jmp    c001d6fa <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d720:	31 c0                	xor    eax,eax
c001d722:	5b                   	pop    ebx
c001d723:	c3                   	ret    

c001d724 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d724:	53                   	push   ebx
c001d725:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d729:	53                   	push   ebx
c001d72a:	e8 8c ff ff ff       	call   c001d6bb <Thr::getDriverBaseFromAddress(unsigned long)>
c001d72f:	5a                   	pop    edx
c001d730:	31 d2                	xor    edx,edx
c001d732:	85 c0                	test   eax,eax
c001d734:	74 04                	je     c001d73a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d736:	89 da                	mov    edx,ebx
c001d738:	29 c2                	sub    edx,eax
c001d73a:	89 d0                	mov    eax,edx
c001d73c:	5b                   	pop    ebx
c001d73d:	c3                   	ret    

c001d73e <Thr::loadDLL(char const*, bool)>:
c001d73e:	55                   	push   ebp
c001d73f:	57                   	push   edi
c001d740:	56                   	push   esi
c001d741:	53                   	push   ebx
c001d742:	81 ec 34 01 00 00    	sub    esp,0x134
c001d748:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d74f:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d756:	56                   	push   esi
c001d757:	68 78 c1 02 c0       	push   0xc002c178
c001d75c:	e8 7e 57 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001d761:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d768:	e8 de 20 ff ff       	call   c000f84b <malloc>
c001d76d:	83 c4 0c             	add    esp,0xc
c001d770:	89 c3                	mov    ebx,eax
c001d772:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001d778:	56                   	push   esi
c001d779:	50                   	push   eax
c001d77a:	e8 b9 5c ff ff       	call   c0013438 <File::File(char const*, Process*)>
c001d77f:	83 c4 10             	add    esp,0x10
c001d782:	85 db                	test   ebx,ebx
c001d784:	75 3c                	jne    c001d7c2 <Thr::loadDLL(char const*, bool)+0x84>
c001d786:	89 e8                	mov    eax,ebp
c001d788:	84 c0                	test   al,al
c001d78a:	0f 84 d5 01 00 00    	je     c001d965 <Thr::loadDLL(char const*, bool)+0x227>
c001d790:	57                   	push   edi
c001d791:	57                   	push   edi
c001d792:	68 89 c1 02 c0       	push   0xc002c189
c001d797:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d79b:	57                   	push   edi
c001d79c:	e8 9b 30 fe ff       	call   c000083c <strcpy>
c001d7a1:	58                   	pop    eax
c001d7a2:	5a                   	pop    edx
c001d7a3:	56                   	push   esi
c001d7a4:	57                   	push   edi
c001d7a5:	e8 d2 31 fe ff       	call   c000097c <strcat>
c001d7aa:	59                   	pop    ecx
c001d7ab:	58                   	pop    eax
c001d7ac:	68 9c c1 02 c0       	push   0xc002c19c
c001d7b1:	57                   	push   edi
c001d7b2:	e8 c5 31 fe ff       	call   c000097c <strcat>
c001d7b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7ba:	e8 4c ce ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001d7bf:	83 c4 10             	add    esp,0x10
c001d7c2:	51                   	push   ecx
c001d7c3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d7c7:	50                   	push   eax
c001d7c8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d7cc:	50                   	push   eax
c001d7cd:	53                   	push   ebx
c001d7ce:	e8 75 5f ff ff       	call   c0013748 <File::stat(unsigned long long*, bool*)>
c001d7d3:	83 c4 10             	add    esp,0x10
c001d7d6:	85 db                	test   ebx,ebx
c001d7d8:	74 0c                	je     c001d7e6 <Thr::loadDLL(char const*, bool)+0xa8>
c001d7da:	83 ec 0c             	sub    esp,0xc
c001d7dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d7df:	53                   	push   ebx
c001d7e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d7e3:	83 c4 10             	add    esp,0x10
c001d7e6:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d7eb:	75 0a                	jne    c001d7f7 <Thr::loadDLL(char const*, bool)+0xb9>
c001d7ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7f1:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d7f5:	75 3c                	jne    c001d833 <Thr::loadDLL(char const*, bool)+0xf5>
c001d7f7:	89 e8                	mov    eax,ebp
c001d7f9:	84 c0                	test   al,al
c001d7fb:	0f 84 4c 01 00 00    	je     c001d94d <Thr::loadDLL(char const*, bool)+0x20f>
c001d801:	51                   	push   ecx
c001d802:	51                   	push   ecx
c001d803:	68 89 c1 02 c0       	push   0xc002c189
c001d808:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d80c:	53                   	push   ebx
c001d80d:	e8 2a 30 fe ff       	call   c000083c <strcpy>
c001d812:	5f                   	pop    edi
c001d813:	58                   	pop    eax
c001d814:	56                   	push   esi
c001d815:	53                   	push   ebx
c001d816:	e8 61 31 fe ff       	call   c000097c <strcat>
c001d81b:	58                   	pop    eax
c001d81c:	5a                   	pop    edx
c001d81d:	68 9c c1 02 c0       	push   0xc002c19c
c001d822:	53                   	push   ebx
c001d823:	e8 54 31 fe ff       	call   c000097c <strcat>
c001d828:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d82b:	e8 db cd ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001d830:	83 c4 10             	add    esp,0x10
c001d833:	e8 ae 45 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001d838:	51                   	push   ecx
c001d839:	6a 03                	push   0x3
c001d83b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d83f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d843:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d849:	83 d3 00             	adc    ebx,0x0
c001d84c:	89 ca                	mov    edx,ecx
c001d84e:	89 d1                	mov    ecx,edx
c001d850:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d854:	51                   	push   ecx
c001d855:	50                   	push   eax
c001d856:	e8 dd 4b ff ff       	call   c0012438 <VAS::allocatePages(int, int)>
c001d85b:	5f                   	pop    edi
c001d85c:	89 c3                	mov    ebx,eax
c001d85e:	58                   	pop    eax
c001d85f:	53                   	push   ebx
c001d860:	68 9e c1 02 c0       	push   0xc002c19e
c001d865:	e8 75 56 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001d86a:	89 34 24             	mov    DWORD PTR [esp],esi
c001d86d:	e8 2a 2f fe ff       	call   c000079c <strlen>
c001d872:	8b 3d e0 11 03 c0    	mov    edi,DWORD PTR ds:0xc00311e0
c001d878:	40                   	inc    eax
c001d879:	89 04 24             	mov    DWORD PTR [esp],eax
c001d87c:	e8 ca 1f ff ff       	call   c000f84b <malloc>
c001d881:	89 04 bd 00 16 03 c0 	mov    DWORD PTR [edi*4-0x3ffcea00],eax
c001d888:	58                   	pop    eax
c001d889:	a1 e0 11 03 c0       	mov    eax,ds:0xc00311e0
c001d88e:	5a                   	pop    edx
c001d88f:	56                   	push   esi
c001d890:	ff 34 85 00 16 03 c0 	push   DWORD PTR [eax*4-0x3ffcea00]
c001d897:	e8 a0 2f fe ff       	call   c000083c <strcpy>
c001d89c:	a1 e0 11 03 c0       	mov    eax,ds:0xc00311e0
c001d8a1:	8d 50 01             	lea    edx,[eax+0x1]
c001d8a4:	89 1c 85 00 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec00],ebx
c001d8ab:	89 15 e0 11 03 c0    	mov    DWORD PTR ds:0xc00311e0,edx
c001d8b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8b5:	83 c4 0c             	add    esp,0xc
c001d8b8:	89 14 85 00 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee00],edx
c001d8bf:	6a 01                	push   0x1
c001d8c1:	53                   	push   ebx
c001d8c2:	56                   	push   esi
c001d8c3:	e8 d7 f6 ff ff       	call   c001cf9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d8c8:	83 c4 10             	add    esp,0x10
c001d8cb:	89 c7                	mov    edi,eax
c001d8cd:	84 c0                	test   al,al
c001d8cf:	0f 85 8c 00 00 00    	jne    c001d961 <Thr::loadDLL(char const*, bool)+0x223>
c001d8d5:	89 e8                	mov    eax,ebp
c001d8d7:	84 c0                	test   al,al
c001d8d9:	74 76                	je     c001d951 <Thr::loadDLL(char const*, bool)+0x213>
c001d8db:	83 ec 0c             	sub    esp,0xc
c001d8de:	68 ab c1 02 c0       	push   0xc002c1ab
c001d8e3:	e8 23 cd ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001d8e8:	83 c4 10             	add    esp,0x10
c001d8eb:	eb 64                	jmp    c001d951 <Thr::loadDLL(char const*, bool)+0x213>
c001d8ed:	e8 f4 44 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001d8f2:	89 f5                	mov    ebp,esi
c001d8f4:	c1 e5 0c             	shl    ebp,0xc
c001d8f7:	52                   	push   edx
c001d8f8:	01 dd                	add    ebp,ebx
c001d8fa:	52                   	push   edx
c001d8fb:	55                   	push   ebp
c001d8fc:	50                   	push   eax
c001d8fd:	e8 b0 46 ff ff       	call   c0011fb2 <VAS::getPageTableEntry(unsigned long)>
c001d902:	83 c4 10             	add    esp,0x10
c001d905:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d908:	75 0c                	jne    c001d916 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d90a:	83 ec 0c             	sub    esp,0xc
c001d90d:	55                   	push   ebp
c001d90e:	e8 50 25 ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c001d913:	83 c4 10             	add    esp,0x10
c001d916:	46                   	inc    esi
c001d917:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d91b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d91f:	05 ff 0f 00 00       	add    eax,0xfff
c001d924:	83 d2 00             	adc    edx,0x0
c001d927:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d92b:	c1 ea 0c             	shr    edx,0xc
c001d92e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d932:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d936:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d93a:	ba 00 00 00 00       	mov    edx,0x0
c001d93f:	89 d0                	mov    eax,edx
c001d941:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d945:	72 a6                	jb     c001d8ed <Thr::loadDLL(char const*, bool)+0x1af>
c001d947:	89 f8                	mov    eax,edi
c001d949:	84 c0                	test   al,al
c001d94b:	75 18                	jne    c001d965 <Thr::loadDLL(char const*, bool)+0x227>
c001d94d:	31 db                	xor    ebx,ebx
c001d94f:	eb 14                	jmp    c001d965 <Thr::loadDLL(char const*, bool)+0x227>
c001d951:	83 ec 0c             	sub    esp,0xc
c001d954:	68 ca c1 02 c0       	push   0xc002c1ca
c001d959:	e8 ad cc ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001d95e:	83 c4 10             	add    esp,0x10
c001d961:	31 f6                	xor    esi,esi
c001d963:	eb b2                	jmp    c001d917 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d965:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d96b:	89 d8                	mov    eax,ebx
c001d96d:	5b                   	pop    ebx
c001d96e:	5e                   	pop    esi
c001d96f:	5f                   	pop    edi
c001d970:	5d                   	pop    ebp
c001d971:	c3                   	ret    

c001d972 <Thr::executeDLL(unsigned long, void*)>:
c001d972:	56                   	push   esi
c001d973:	53                   	push   ebx
c001d974:	52                   	push   edx
c001d975:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d979:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d97d:	85 db                	test   ebx,ebx
c001d97f:	75 10                	jne    c001d991 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d981:	83 ec 0c             	sub    esp,0xc
c001d984:	68 e6 c1 02 c0       	push   0xc002c1e6
c001d989:	e8 7d cc ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001d98e:	83 c4 10             	add    esp,0x10
c001d991:	50                   	push   eax
c001d992:	50                   	push   eax
c001d993:	53                   	push   ebx
c001d994:	68 10 c2 02 c0       	push   0xc002c210
c001d999:	e8 41 55 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001d99e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9a2:	89 d8                	mov    eax,ebx
c001d9a4:	83 c4 14             	add    esp,0x14
c001d9a7:	5b                   	pop    ebx
c001d9a8:	5e                   	pop    esi
c001d9a9:	ff e0                	jmp    eax
c001d9ab:	90                   	nop

c001d9ac <changeTSS>:
c001d9ac:	83 ec 14             	sub    esp,0x14
c001d9af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9b4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d9b7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d9bc:	c1 e2 15             	shl    edx,0x15
c001d9bf:	29 d0                	sub    eax,edx
c001d9c1:	50                   	push   eax
c001d9c2:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001d9c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9cd:	05 7c 11 00 00       	add    eax,0x117c
c001d9d2:	50                   	push   eax
c001d9d3:	e8 b2 3a ff ff       	call   c001148a <TSS::setESP(unsigned long)>
c001d9d8:	83 c4 1c             	add    esp,0x1c
c001d9db:	c3                   	ret    

c001d9dc <Process::addArgs(char**)>:
c001d9dc:	57                   	push   edi
c001d9dd:	56                   	push   esi
c001d9de:	53                   	push   ebx
c001d9df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d9e3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d9e7:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d9f1:	85 ff                	test   edi,edi
c001d9f3:	74 3d                	je     c001da32 <Process::addArgs(char**)+0x56>
c001d9f5:	8b 07                	mov    eax,DWORD PTR [edi]
c001d9f7:	85 c0                	test   eax,eax
c001d9f9:	74 37                	je     c001da32 <Process::addArgs(char**)+0x56>
c001d9fb:	31 db                	xor    ebx,ebx
c001d9fd:	83 ec 0c             	sub    esp,0xc
c001da00:	50                   	push   eax
c001da01:	e8 96 2d fe ff       	call   c000079c <strlen>
c001da06:	40                   	inc    eax
c001da07:	89 04 24             	mov    DWORD PTR [esp],eax
c001da0a:	e8 3c 1e ff ff       	call   c000f84b <malloc>
c001da0f:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da16:	5a                   	pop    edx
c001da17:	59                   	pop    ecx
c001da18:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da1b:	43                   	inc    ebx
c001da1c:	50                   	push   eax
c001da1d:	e8 1a 2e fe ff       	call   c000083c <strcpy>
c001da22:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da28:	83 c4 10             	add    esp,0x10
c001da2b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da2e:	85 c0                	test   eax,eax
c001da30:	75 cb                	jne    c001d9fd <Process::addArgs(char**)+0x21>
c001da32:	5b                   	pop    ebx
c001da33:	5e                   	pop    esi
c001da34:	5f                   	pop    edi
c001da35:	c3                   	ret    

c001da36 <Process::Process(char const*, Process*, char**)>:
c001da36:	56                   	push   esi
c001da37:	53                   	push   ebx
c001da38:	83 ec 14             	sub    esp,0x14
c001da3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da3f:	05 0c 02 00 00       	add    eax,0x20c
c001da44:	bb 07 00 00 00       	mov    ebx,0x7
c001da49:	89 c6                	mov    esi,eax
c001da4b:	85 db                	test   ebx,ebx
c001da4d:	78 12                	js     c001da61 <Process::Process(char const*, Process*, char**)+0x2b>
c001da4f:	83 ec 0c             	sub    esp,0xc
c001da52:	56                   	push   esi
c001da53:	e8 6a b2 00 00       	call   c0028cc2 <ThreadControlBlock::ThreadControlBlock()>
c001da58:	83 c4 10             	add    esp,0x10
c001da5b:	83 c6 63             	add    esi,0x63
c001da5e:	4b                   	dec    ebx
c001da5f:	eb ea                	jmp    c001da4b <Process::Process(char const*, Process*, char**)+0x15>
c001da61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da65:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001da6c:	83 ec 0c             	sub    esp,0xc
c001da6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da73:	e8 e4 c9 ff ff       	call   c001a45c <Krnl::newProcessEnv(Process*)>
c001da78:	83 c4 10             	add    esp,0x10
c001da7b:	89 c2                	mov    edx,eax
c001da7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da81:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001da87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da8b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001da94:	a1 f0 d9 02 c0       	mov    eax,ds:0xc002d9f0
c001da99:	8d 50 01             	lea    edx,[eax+0x1]
c001da9c:	89 15 f0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9f0,edx
c001daa2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001daa6:	89 02                	mov    DWORD PTR [edx],eax
c001daa8:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001dab0:	83 ec 0c             	sub    esp,0xc
c001dab3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dab7:	e8 8f 1d ff ff       	call   c000f84b <malloc>
c001dabc:	83 c4 10             	add    esp,0x10
c001dabf:	89 c3                	mov    ebx,eax
c001dac1:	83 ec 08             	sub    esp,0x8
c001dac4:	6a 00                	push   0x0
c001dac6:	53                   	push   ebx
c001dac7:	e8 14 4d ff ff       	call   c00127e0 <VAS::VAS(bool)>
c001dacc:	83 c4 10             	add    esp,0x10
c001dacf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dad3:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dadd:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daeb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001daef:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001daf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001daff:	85 c0                	test   eax,eax
c001db01:	74 42                	je     c001db45 <Process::Process(char const*, Process*, char**)+0x10f>
c001db03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db07:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db0d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db17:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db21:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db27:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db31:	05 0c 01 00 00       	add    eax,0x10c
c001db36:	83 ec 08             	sub    esp,0x8
c001db39:	52                   	push   edx
c001db3a:	50                   	push   eax
c001db3b:	e8 fc 2c fe ff       	call   c000083c <strcpy>
c001db40:	83 c4 10             	add    esp,0x10
c001db43:	eb 63                	jmp    c001dba8 <Process::Process(char const*, Process*, char**)+0x172>
c001db45:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db4d:	83 ec 0c             	sub    esp,0xc
c001db50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db54:	e8 f2 1c ff ff       	call   c000f84b <malloc>
c001db59:	83 c4 10             	add    esp,0x10
c001db5c:	89 c3                	mov    ebx,eax
c001db5e:	83 ec 08             	sub    esp,0x8
c001db61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db65:	53                   	push   ebx
c001db66:	e8 1d 36 ff ff       	call   c0011188 <VgaText::VgaText(char const*)>
c001db6b:	83 c4 10             	add    esp,0x10
c001db6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db72:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001db78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db7c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db82:	83 ec 0c             	sub    esp,0xc
c001db85:	50                   	push   eax
c001db86:	e8 f0 29 ff ff       	call   c001057b <addToTerminalCycle(VgaText*)>
c001db8b:	83 c4 10             	add    esp,0x10
c001db8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db92:	05 0c 01 00 00       	add    eax,0x10c
c001db97:	83 ec 08             	sub    esp,0x8
c001db9a:	68 2f c2 02 c0       	push   0xc002c22f
c001db9f:	50                   	push   eax
c001dba0:	e8 97 2c fe ff       	call   c000083c <strcpy>
c001dba5:	83 c4 10             	add    esp,0x10
c001dba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbac:	83 c0 0c             	add    eax,0xc
c001dbaf:	83 ec 08             	sub    esp,0x8
c001dbb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbb6:	50                   	push   eax
c001dbb7:	e8 80 2c fe ff       	call   c000083c <strcpy>
c001dbbc:	83 c4 10             	add    esp,0x10
c001dbbf:	83 ec 08             	sub    esp,0x8
c001dbc2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dbc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbca:	e8 0d fe ff ff       	call   c001d9dc <Process::addArgs(char**)>
c001dbcf:	83 c4 10             	add    esp,0x10
c001dbd2:	83 ec 08             	sub    esp,0x8
c001dbd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbdd:	e8 87 ee ff ff       	call   c001ca69 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dbe2:	83 c4 10             	add    esp,0x10
c001dbe5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbe9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dbed:	83 f0 01             	xor    eax,0x1
c001dbf0:	88 c2                	mov    dl,al
c001dbf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbf6:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dbfc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc01:	83 ec 08             	sub    esp,0x8
c001dc04:	50                   	push   eax
c001dc05:	68 2c c3 02 c0       	push   0xc002c32c
c001dc0a:	e8 d0 52 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001dc0f:	83 c4 10             	add    esp,0x10
c001dc12:	90                   	nop
c001dc13:	83 c4 14             	add    esp,0x14
c001dc16:	5b                   	pop    ebx
c001dc17:	5e                   	pop    esi
c001dc18:	c3                   	ret    
c001dc19:	90                   	nop

c001dc1a <Process::Process(bool, char const*, Process*, char**)>:
c001dc1a:	56                   	push   esi
c001dc1b:	53                   	push   ebx
c001dc1c:	83 ec 24             	sub    esp,0x24
c001dc1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc23:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc2b:	05 0c 02 00 00       	add    eax,0x20c
c001dc30:	bb 07 00 00 00       	mov    ebx,0x7
c001dc35:	89 c6                	mov    esi,eax
c001dc37:	85 db                	test   ebx,ebx
c001dc39:	78 12                	js     c001dc4d <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc3b:	83 ec 0c             	sub    esp,0xc
c001dc3e:	56                   	push   esi
c001dc3f:	e8 7e b0 00 00       	call   c0028cc2 <ThreadControlBlock::ThreadControlBlock()>
c001dc44:	83 c4 10             	add    esp,0x10
c001dc47:	83 c6 63             	add    esi,0x63
c001dc4a:	4b                   	dec    ebx
c001dc4b:	eb ea                	jmp    c001dc37 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc51:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc58:	83 ec 0c             	sub    esp,0xc
c001dc5b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc5f:	e8 f8 c7 ff ff       	call   c001a45c <Krnl::newProcessEnv(Process*)>
c001dc64:	83 c4 10             	add    esp,0x10
c001dc67:	89 c2                	mov    edx,eax
c001dc69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc6d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dc73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc77:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dc80:	a1 f0 d9 02 c0       	mov    eax,ds:0xc002d9f0
c001dc85:	8d 50 01             	lea    edx,[eax+0x1]
c001dc88:	89 15 f0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9f0,edx
c001dc8e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc92:	89 02                	mov    DWORD PTR [edx],eax
c001dc94:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dc9c:	83 ec 0c             	sub    esp,0xc
c001dc9f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dca3:	e8 a3 1b ff ff       	call   c000f84b <malloc>
c001dca8:	83 c4 10             	add    esp,0x10
c001dcab:	89 c3                	mov    ebx,eax
c001dcad:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcb2:	83 ec 08             	sub    esp,0x8
c001dcb5:	50                   	push   eax
c001dcb6:	53                   	push   ebx
c001dcb7:	e8 24 4b ff ff       	call   c00127e0 <VAS::VAS(bool)>
c001dcbc:	83 c4 10             	add    esp,0x10
c001dcbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcc3:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dccd:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dcd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcdb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dcdf:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dce5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dcef:	85 c0                	test   eax,eax
c001dcf1:	74 42                	je     c001dd35 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dcf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcf7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dcfd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd07:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd11:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd17:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd21:	05 0c 01 00 00       	add    eax,0x10c
c001dd26:	83 ec 08             	sub    esp,0x8
c001dd29:	52                   	push   edx
c001dd2a:	50                   	push   eax
c001dd2b:	e8 0c 2b fe ff       	call   c000083c <strcpy>
c001dd30:	83 c4 10             	add    esp,0x10
c001dd33:	eb 63                	jmp    c001dd98 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd35:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd3d:	83 ec 0c             	sub    esp,0xc
c001dd40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd44:	e8 02 1b ff ff       	call   c000f84b <malloc>
c001dd49:	83 c4 10             	add    esp,0x10
c001dd4c:	89 c3                	mov    ebx,eax
c001dd4e:	83 ec 08             	sub    esp,0x8
c001dd51:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd55:	53                   	push   ebx
c001dd56:	e8 2d 34 ff ff       	call   c0011188 <VgaText::VgaText(char const*)>
c001dd5b:	83 c4 10             	add    esp,0x10
c001dd5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd62:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dd68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd6c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dd72:	83 ec 0c             	sub    esp,0xc
c001dd75:	50                   	push   eax
c001dd76:	e8 00 28 ff ff       	call   c001057b <addToTerminalCycle(VgaText*)>
c001dd7b:	83 c4 10             	add    esp,0x10
c001dd7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd82:	05 0c 01 00 00       	add    eax,0x10c
c001dd87:	83 ec 08             	sub    esp,0x8
c001dd8a:	68 2f c2 02 c0       	push   0xc002c22f
c001dd8f:	50                   	push   eax
c001dd90:	e8 a7 2a fe ff       	call   c000083c <strcpy>
c001dd95:	83 c4 10             	add    esp,0x10
c001dd98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd9c:	83 c0 0c             	add    eax,0xc
c001dd9f:	83 ec 08             	sub    esp,0x8
c001dda2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dda6:	50                   	push   eax
c001dda7:	e8 90 2a fe ff       	call   c000083c <strcpy>
c001ddac:	83 c4 10             	add    esp,0x10
c001ddaf:	83 ec 08             	sub    esp,0x8
c001ddb2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ddb6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddba:	e8 1d fc ff ff       	call   c001d9dc <Process::addArgs(char**)>
c001ddbf:	83 c4 10             	add    esp,0x10
c001ddc2:	90                   	nop
c001ddc3:	83 c4 24             	add    esp,0x24
c001ddc6:	5b                   	pop    ebx
c001ddc7:	5e                   	pop    esi
c001ddc8:	c3                   	ret    

c001ddc9 <disableIRQs()>:
c001ddc9:	fa                   	cli    
c001ddca:	ff 05 ac 19 03 c0    	inc    DWORD PTR ds:0xc00319ac
c001ddd0:	c3                   	ret    

c001ddd1 <getIRQNestingLevel()>:
c001ddd1:	a1 ac 19 03 c0       	mov    eax,ds:0xc00319ac
c001ddd6:	c3                   	ret    

c001ddd7 <enableIRQs()>:
c001ddd7:	a1 ac 19 03 c0       	mov    eax,ds:0xc00319ac
c001dddc:	48                   	dec    eax
c001dddd:	a3 ac 19 03 c0       	mov    ds:0xc00319ac,eax
c001dde2:	75 01                	jne    c001dde5 <enableIRQs()+0xe>
c001dde4:	fb                   	sti    
c001dde5:	c3                   	ret    

c001dde6 <lockScheduler()>:
c001dde6:	eb e1                	jmp    c001ddc9 <disableIRQs()>

c001dde8 <unlockScheduler()>:
c001dde8:	eb ed                	jmp    c001ddd7 <enableIRQs()>

c001ddea <userModeEntryPoint(void*)>:
c001ddea:	83 ec 0c             	sub    esp,0xc
c001dded:	e8 f6 ff ff ff       	call   c001dde8 <unlockScheduler()>
c001ddf2:	fb                   	sti    
c001ddf3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddf8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ddfb:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de05:	83 c4 0c             	add    esp,0xc
c001de08:	e9 1d 25 fe ff       	jmp    c000032a <goToUsermode>

c001de0d <lockStuff()>:
c001de0d:	e8 b7 ff ff ff       	call   c001ddc9 <disableIRQs()>
c001de12:	ff 05 a8 19 03 c0    	inc    DWORD PTR ds:0xc00319a8
c001de18:	c3                   	ret    

c001de19 <taskStartupFunction>:
c001de19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de1e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de21:	c3                   	ret    

c001de22 <updateTimeUsed()>:
c001de22:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c001de27:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de2d:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de34:	74 50                	je     c001de86 <updateTimeUsed()+0x64>
c001de36:	57                   	push   edi
c001de37:	56                   	push   esi
c001de38:	53                   	push   ebx
c001de39:	0f 31                	rdtsc  
c001de3b:	89 c1                	mov    ecx,eax
c001de3d:	a3 e8 19 03 c0       	mov    ds:0xc00319e8,eax
c001de42:	2b 0d d8 19 03 c0    	sub    ecx,DWORD PTR ds:0xc00319d8
c001de48:	89 d3                	mov    ebx,edx
c001de4a:	89 0d e0 19 03 c0    	mov    DWORD PTR ds:0xc00319e0,ecx
c001de50:	1b 1d dc 19 03 c0    	sbb    ebx,DWORD PTR ds:0xc00319dc
c001de56:	a3 d8 19 03 c0       	mov    ds:0xc00319d8,eax
c001de5b:	89 1d e4 19 03 c0    	mov    DWORD PTR ds:0xc00319e4,ebx
c001de61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de66:	89 15 ec 19 03 c0    	mov    DWORD PTR ds:0xc00319ec,edx
c001de6c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001de6f:	89 15 dc 19 03 c0    	mov    DWORD PTR ds:0xc00319dc,edx
c001de75:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001de78:	01 f1                	add    ecx,esi
c001de7a:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001de7d:	11 fb                	adc    ebx,edi
c001de7f:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001de82:	5b                   	pop    ebx
c001de83:	5e                   	pop    esi
c001de84:	5f                   	pop    edi
c001de85:	c3                   	ret    
c001de86:	c3                   	ret    

c001de87 <switchToThread(ThreadControlBlock*)>:
c001de87:	53                   	push   ebx
c001de88:	83 ec 08             	sub    esp,0x8
c001de8b:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c001de90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de94:	85 c0                	test   eax,eax
c001de96:	75 30                	jne    c001dec8 <switchToThread(ThreadControlBlock*)+0x41>
c001de98:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001de9b:	3c ff                	cmp    al,0xff
c001de9d:	74 25                	je     c001dec4 <switchToThread(ThreadControlBlock*)+0x3d>
c001de9f:	0f b6 d0             	movzx  edx,al
c001dea2:	b8 84 03 00 00       	mov    eax,0x384
c001dea7:	29 d0                	sub    eax,edx
c001dea9:	c1 e0 10             	shl    eax,0x10
c001deac:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001deaf:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001deb2:	e8 6b ff ff ff       	call   c001de22 <updateTimeUsed()>
c001deb7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001debb:	83 c4 08             	add    esp,0x8
c001debe:	5b                   	pop    ebx
c001debf:	e9 9e 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dec4:	31 c0                	xor    eax,eax
c001dec6:	eb e7                	jmp    c001deaf <switchToThread(ThreadControlBlock*)+0x28>
c001dec8:	c7 05 a4 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00319a4,0x1
c001ded2:	83 c4 08             	add    esp,0x8
c001ded5:	5b                   	pop    ebx
c001ded6:	c3                   	ret    
c001ded7:	90                   	nop

c001ded8 <Semaphore::Semaphore(int)>:
c001ded8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dedc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dee0:	89 10                	mov    DWORD PTR [eax],edx
c001dee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dee6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001deed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001def1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001def8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001defc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df03:	90                   	nop
c001df04:	c3                   	ret    
c001df05:	90                   	nop

c001df06 <Mutex::Mutex()>:
c001df06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df0a:	6a 01                	push   0x1
c001df0c:	50                   	push   eax
c001df0d:	e8 c6 ff ff ff       	call   c001ded8 <Semaphore::Semaphore(int)>
c001df12:	83 c4 08             	add    esp,0x8
c001df15:	90                   	nop
c001df16:	c3                   	ret    
c001df17:	90                   	nop

c001df18 <Process::createThread(void (*)(void*), void*, int)>:
c001df18:	55                   	push   ebp
c001df19:	31 c9                	xor    ecx,ecx
c001df1b:	57                   	push   edi
c001df1c:	56                   	push   esi
c001df1d:	53                   	push   ebx
c001df1e:	83 ec 1c             	sub    esp,0x1c
c001df21:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df25:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df2c:	89 f2                	mov    edx,esi
c001df2e:	0f b7 c2             	movzx  eax,dx
c001df31:	83 e2 01             	and    edx,0x1
c001df34:	74 16                	je     c001df4c <Process::createThread(void (*)(void*), void*, int)+0x34>
c001df36:	d1 f8                	sar    eax,1
c001df38:	41                   	inc    ecx
c001df39:	89 c2                	mov    edx,eax
c001df3b:	83 f9 10             	cmp    ecx,0x10
c001df3e:	75 ee                	jne    c001df2e <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df40:	83 c4 1c             	add    esp,0x1c
c001df43:	31 db                	xor    ebx,ebx
c001df45:	89 d8                	mov    eax,ebx
c001df47:	5b                   	pop    ebx
c001df48:	5e                   	pop    esi
c001df49:	5f                   	pop    edi
c001df4a:	5d                   	pop    ebp
c001df4b:	c3                   	ret    
c001df4c:	b8 01 00 00 00       	mov    eax,0x1
c001df51:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001df54:	d3 e0                	shl    eax,cl
c001df56:	09 c6                	or     esi,eax
c001df58:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001df5b:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df62:	89 c6                	mov    esi,eax
c001df64:	c1 e6 05             	shl    esi,0x5
c001df67:	01 f0                	add    eax,esi
c001df69:	01 d8                	add    eax,ebx
c001df6b:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001df72:	75 0a                	jne    c001df7e <Process::createThread(void (*)(void*), void*, int)+0x66>
c001df74:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001df7e:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df84:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001df88:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001df8b:	01 ca                	add    edx,ecx
c001df8d:	83 ec 08             	sub    esp,0x8
c001df90:	89 d0                	mov    eax,edx
c001df92:	c1 e0 05             	shl    eax,0x5
c001df95:	01 d0                	add    eax,edx
c001df97:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001df9b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001df9f:	01 d8                	add    eax,ebx
c001dfa1:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001dfa7:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001dfad:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dfb3:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dfb9:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dfbf:	89 cd                	mov    ebp,ecx
c001dfc1:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001dfc5:	f7 dd                	neg    ebp
c001dfc7:	c1 e5 15             	shl    ebp,0x15
c001dfca:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001dfd0:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001dfd6:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dfe0:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001dfe6:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dff0:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dffa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dffe:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e005:	53                   	push   ebx
c001e006:	68 c8 19 03 c0       	push   0xc00319c8
c001e00b:	e8 40 ab 00 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e010:	89 d8                	mov    eax,ebx
c001e012:	83 c4 10             	add    esp,0x10
c001e015:	83 c4 1c             	add    esp,0x1c
c001e018:	5b                   	pop    ebx
c001e019:	5e                   	pop    esi
c001e01a:	5f                   	pop    edi
c001e01b:	5d                   	pop    ebp
c001e01c:	c3                   	ret    
c001e01d:	90                   	nop

c001e01e <Process::createUserThread()>:
c001e01e:	83 ec 0c             	sub    esp,0xc
c001e021:	68 80 00 00 00       	push   0x80
c001e026:	6a 00                	push   0x0
c001e028:	68 ea dd 01 c0       	push   0xc001ddea
c001e02d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e031:	e8 e2 fe ff ff       	call   c001df18 <Process::createThread(void (*)(void*), void*, int)>
c001e036:	83 c4 1c             	add    esp,0x1c
c001e039:	c3                   	ret    

c001e03a <setupMultitasking(void (*)())>:
c001e03a:	56                   	push   esi
c001e03b:	53                   	push   ebx
c001e03c:	51                   	push   ecx
c001e03d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e041:	eb 10                	jmp    c001e053 <setupMultitasking(void (*)())+0x19>
c001e043:	83 ec 0c             	sub    esp,0xc
c001e046:	68 c8 19 03 c0       	push   0xc00319c8
c001e04b:	e8 52 aa 00 00       	call   c0028aa2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e050:	83 c4 10             	add    esp,0x10
c001e053:	83 ec 0c             	sub    esp,0xc
c001e056:	68 c8 19 03 c0       	push   0xc00319c8
c001e05b:	e8 26 aa 00 00       	call   c0028a86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e060:	83 c4 10             	add    esp,0x10
c001e063:	84 c0                	test   al,al
c001e065:	74 dc                	je     c001e043 <setupMultitasking(void (*)())+0x9>
c001e067:	83 ec 0c             	sub    esp,0xc
c001e06a:	68 3f 07 00 00       	push   0x73f
c001e06f:	e8 d7 17 ff ff       	call   c000f84b <malloc>
c001e074:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e07b:	89 c3                	mov    ebx,eax
c001e07d:	6a 00                	push   0x0
c001e07f:	68 33 c2 02 c0       	push   0xc002c233
c001e084:	6a 01                	push   0x1
c001e086:	50                   	push   eax
c001e087:	e8 8e fb ff ff       	call   c001dc1a <Process::Process(bool, char const*, Process*, char**)>
c001e08c:	83 c4 18             	add    esp,0x18
c001e08f:	89 1d d4 19 03 c0    	mov    DWORD PTR ds:0xc00319d4,ebx
c001e095:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e09b:	68 54 c3 02 c0       	push   0xc002c354
c001e0a0:	e8 3a 4e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e0a5:	58                   	pop    eax
c001e0a6:	5a                   	pop    edx
c001e0a7:	6a 63                	push   0x63
c001e0a9:	68 88 c3 02 c0       	push   0xc002c388
c001e0ae:	e8 2c 4e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e0b3:	59                   	pop    ecx
c001e0b4:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0ba:	e8 3e 2c ff ff       	call   c0010cfd <setActiveTerminal(VgaText*)>
c001e0bf:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e0c7:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e0d1:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e0d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e0da:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e0e4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e0ea:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e0f0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e0fa:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e104:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e10e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e114:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e11e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e124:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e12e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e134:	58                   	pop    eax
c001e135:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e13b:	5a                   	pop    edx
c001e13c:	68 2f c2 02 c0       	push   0xc002c22f
c001e141:	50                   	push   eax
c001e142:	e8 f5 26 fe ff       	call   c000083c <strcpy>
c001e147:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e14e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e152:	83 c4 14             	add    esp,0x14
c001e155:	5b                   	pop    ebx
c001e156:	5e                   	pop    esi
c001e157:	e9 f8 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e15c <schedule()>:
c001e15c:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c001e161:	85 c0                	test   eax,eax
c001e163:	74 0b                	je     c001e170 <schedule()+0x14>
c001e165:	c7 05 a4 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00319a4,0x1
c001e16f:	c3                   	ret    
c001e170:	53                   	push   ebx
c001e171:	83 ec 14             	sub    esp,0x14
c001e174:	68 c8 19 03 c0       	push   0xc00319c8
c001e179:	e8 08 a9 00 00       	call   c0028a86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e17e:	83 c4 10             	add    esp,0x10
c001e181:	84 c0                	test   al,al
c001e183:	75 38                	jne    c001e1bd <schedule()+0x61>
c001e185:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e18a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e18d:	4a                   	dec    edx
c001e18e:	74 32                	je     c001e1c2 <schedule()+0x66>
c001e190:	83 ec 0c             	sub    esp,0xc
c001e193:	68 c8 19 03 c0       	push   0xc00319c8
c001e198:	e8 e1 a8 00 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e19d:	c7 04 24 c8 19 03 c0 	mov    DWORD PTR [esp],0xc00319c8
c001e1a4:	89 c3                	mov    ebx,eax
c001e1a6:	e8 f7 a8 00 00       	call   c0028aa2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1ab:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e1b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1b5:	e8 cd fc ff ff       	call   c001de87 <switchToThread(ThreadControlBlock*)>
c001e1ba:	83 c4 10             	add    esp,0x10
c001e1bd:	83 c4 08             	add    esp,0x8
c001e1c0:	5b                   	pop    ebx
c001e1c1:	c3                   	ret    
c001e1c2:	83 ec 08             	sub    esp,0x8
c001e1c5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e1cc:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1d2:	68 c8 19 03 c0       	push   0xc00319c8
c001e1d7:	e8 74 a9 00 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1dc:	83 c4 10             	add    esp,0x10
c001e1df:	eb af                	jmp    c001e190 <schedule()+0x34>

c001e1e1 <unlockStuff()>:
c001e1e1:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c001e1e6:	48                   	dec    eax
c001e1e7:	a3 a8 19 03 c0       	mov    ds:0xc00319a8,eax
c001e1ec:	75 09                	jne    c001e1f7 <unlockStuff()+0x16>
c001e1ee:	a1 a4 19 03 c0       	mov    eax,ds:0xc00319a4
c001e1f3:	85 c0                	test   eax,eax
c001e1f5:	75 05                	jne    c001e1fc <unlockStuff()+0x1b>
c001e1f7:	e9 db fb ff ff       	jmp    c001ddd7 <enableIRQs()>
c001e1fc:	83 ec 0c             	sub    esp,0xc
c001e1ff:	c7 05 a4 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00319a4,0x0
c001e209:	e8 4e ff ff ff       	call   c001e15c <schedule()>
c001e20e:	83 c4 0c             	add    esp,0xc
c001e211:	e9 c1 fb ff ff       	jmp    c001ddd7 <enableIRQs()>

c001e216 <Semaphore::tryAcquire()>:
c001e216:	83 ec 0c             	sub    esp,0xc
c001e219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e21d:	e8 eb fb ff ff       	call   c001de0d <lockStuff()>
c001e222:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e225:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e227:	7c 0b                	jl     c001e234 <Semaphore::tryAcquire()+0x1e>
c001e229:	e8 b3 ff ff ff       	call   c001e1e1 <unlockStuff()>
c001e22e:	31 c0                	xor    eax,eax
c001e230:	83 c4 0c             	add    esp,0xc
c001e233:	c3                   	ret    
c001e234:	42                   	inc    edx
c001e235:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e238:	e8 a4 ff ff ff       	call   c001e1e1 <unlockStuff()>
c001e23d:	b0 01                	mov    al,0x1
c001e23f:	83 c4 0c             	add    esp,0xc
c001e242:	c3                   	ret    
c001e243:	90                   	nop

c001e244 <Semaphore::assertLocked(char const*)>:
c001e244:	83 ec 0c             	sub    esp,0xc
c001e247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e24b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e24f:	e8 b9 fb ff ff       	call   c001de0d <lockStuff()>
c001e254:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e256:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e259:	7c 05                	jl     c001e260 <Semaphore::assertLocked(char const*)+0x1c>
c001e25b:	83 c4 0c             	add    esp,0xc
c001e25e:	eb 81                	jmp    c001e1e1 <unlockStuff()>
c001e260:	83 ec 0c             	sub    esp,0xc
c001e263:	52                   	push   edx
c001e264:	e8 a2 c3 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001e269:	83 c4 10             	add    esp,0x10
c001e26c:	83 c4 0c             	add    esp,0xc
c001e26f:	e9 6d ff ff ff       	jmp    c001e1e1 <unlockStuff()>

c001e274 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e274:	83 ec 0c             	sub    esp,0xc
c001e277:	e8 55 fb ff ff       	call   c001ddd1 <getIRQNestingLevel()>
c001e27c:	83 ec 08             	sub    esp,0x8
c001e27f:	50                   	push   eax
c001e280:	68 ac c3 02 c0       	push   0xc002c3ac
c001e285:	e8 55 4c ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e28a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e28e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e293:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e296:	e8 c1 fe ff ff       	call   c001e15c <schedule()>
c001e29b:	e8 48 fb ff ff       	call   c001dde8 <unlockScheduler()>
c001e2a0:	e8 2c fb ff ff       	call   c001ddd1 <getIRQNestingLevel()>
c001e2a5:	5a                   	pop    edx
c001e2a6:	59                   	pop    ecx
c001e2a7:	50                   	push   eax
c001e2a8:	68 e0 c3 02 c0       	push   0xc002c3e0
c001e2ad:	e8 2d 4c ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e2b2:	83 c4 1c             	add    esp,0x1c
c001e2b5:	c3                   	ret    

c001e2b6 <blockTask(TaskState)>:
c001e2b6:	83 ec 0c             	sub    esp,0xc
c001e2b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2bd:	e8 24 fb ff ff       	call   c001dde6 <lockScheduler()>
c001e2c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2c7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2ca:	e8 8d fe ff ff       	call   c001e15c <schedule()>
c001e2cf:	83 c4 0c             	add    esp,0xc
c001e2d2:	e9 11 fb ff ff       	jmp    c001dde8 <unlockScheduler()>

c001e2d7 <waitTask(int, int*, int)>:
c001e2d7:	83 ec 18             	sub    esp,0x18
c001e2da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2e3:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e2e6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2ef:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e2f2:	6a 07                	push   0x7
c001e2f4:	e8 bd ff ff ff       	call   c001e2b6 <blockTask(TaskState)>
c001e2f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2fe:	83 c4 10             	add    esp,0x10
c001e301:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e304:	85 d2                	test   edx,edx
c001e306:	74 0a                	je     c001e312 <waitTask(int, int*, int)+0x3b>
c001e308:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e30b:	89 02                	mov    DWORD PTR [edx],eax
c001e30d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e312:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e315:	83 c4 0c             	add    esp,0xc
c001e318:	c3                   	ret    

c001e319 <nanoSleepUntil(unsigned long long)>:
c001e319:	83 ec 0c             	sub    esp,0xc
c001e31c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e320:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e324:	3b 05 f0 ea 02 c0    	cmp    eax,DWORD PTR ds:0xc002eaf0
c001e32a:	89 d1                	mov    ecx,edx
c001e32c:	1b 0d f4 ea 02 c0    	sbb    ecx,DWORD PTR ds:0xc002eaf4
c001e332:	73 04                	jae    c001e338 <nanoSleepUntil(unsigned long long)+0x1f>
c001e334:	83 c4 0c             	add    esp,0xc
c001e337:	c3                   	ret    
c001e338:	e8 d0 fa ff ff       	call   c001de0d <lockStuff()>
c001e33d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e343:	83 ec 08             	sub    esp,0x8
c001e346:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e349:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e34c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e352:	68 bc 19 03 c0       	push   0xc00319bc
c001e357:	e8 f4 a7 00 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e35c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e363:	e8 4e ff ff ff       	call   c001e2b6 <blockTask(TaskState)>
c001e368:	83 c4 1c             	add    esp,0x1c
c001e36b:	e9 71 fe ff ff       	jmp    c001e1e1 <unlockStuff()>

c001e370 <nanoSleep(unsigned long long)>:
c001e370:	a1 f0 ea 02 c0       	mov    eax,ds:0xc002eaf0
c001e375:	8b 15 f4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eaf4
c001e37b:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e37f:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e383:	eb 94                	jmp    c001e319 <nanoSleepUntil(unsigned long long)>

c001e385 <sleep(unsigned long long)>:
c001e385:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e38d:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e392:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e396:	01 ca                	add    edx,ecx
c001e398:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e39c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e3a0:	eb ce                	jmp    c001e370 <nanoSleep(unsigned long long)>

c001e3a2 <Semaphore::acquire()>:
c001e3a2:	83 ec 0c             	sub    esp,0xc
c001e3a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3a9:	e8 5f fa ff ff       	call   c001de0d <lockStuff()>
c001e3ae:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e3b1:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e3b3:	7d 0c                	jge    c001e3c1 <Semaphore::acquire()+0x1f>
c001e3b5:	42                   	inc    edx
c001e3b6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e3b9:	83 c4 0c             	add    esp,0xc
c001e3bc:	e9 20 fe ff ff       	jmp    c001e1e1 <unlockStuff()>
c001e3c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3c7:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e3ce:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e3d1:	85 d2                	test   edx,edx
c001e3d3:	74 2a                	je     c001e3ff <Semaphore::acquire()+0x5d>
c001e3d5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e3d8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3de:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e3e1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3e7:	83 ec 0c             	sub    esp,0xc
c001e3ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e3ed:	6a 05                	push   0x5
c001e3ef:	e8 c2 fe ff ff       	call   c001e2b6 <blockTask(TaskState)>
c001e3f4:	83 c4 10             	add    esp,0x10
c001e3f7:	83 c4 0c             	add    esp,0xc
c001e3fa:	e9 e2 fd ff ff       	jmp    c001e1e1 <unlockStuff()>
c001e3ff:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e405:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e408:	eb d7                	jmp    c001e3e1 <Semaphore::acquire()+0x3f>

c001e40a <taskReturned>:
c001e40a:	83 ec 18             	sub    esp,0x18
c001e40d:	68 14 c4 02 c0       	push   0xc002c414
c001e412:	e8 f4 c1 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001e417:	83 c4 10             	add    esp,0x10
c001e41a:	83 ec 0c             	sub    esp,0xc
c001e41d:	6a 02                	push   0x2
c001e41f:	e8 92 fe ff ff       	call   c001e2b6 <blockTask(TaskState)>
c001e424:	e8 bd f9 ff ff       	call   c001dde6 <lockScheduler()>
c001e429:	e8 2e fd ff ff       	call   c001e15c <schedule()>
c001e42e:	e8 b5 f9 ff ff       	call   c001dde8 <unlockScheduler()>
c001e433:	83 c4 10             	add    esp,0x10
c001e436:	eb e2                	jmp    c001e41a <taskReturned+0x10>

c001e438 <unblockTask(ThreadControlBlock*)>:
c001e438:	53                   	push   ebx
c001e439:	83 ec 08             	sub    esp,0x8
c001e43c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e440:	e8 a1 f9 ff ff       	call   c001dde6 <lockScheduler()>
c001e445:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e448:	85 c0                	test   eax,eax
c001e44a:	74 5c                	je     c001e4a8 <unblockTask(ThreadControlBlock*)+0x70>
c001e44c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e44f:	48                   	dec    eax
c001e450:	74 31                	je     c001e483 <unblockTask(ThreadControlBlock*)+0x4b>
c001e452:	83 ec 0c             	sub    esp,0xc
c001e455:	68 c8 19 03 c0       	push   0xc00319c8
c001e45a:	e8 1f a6 00 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e45f:	83 c4 10             	add    esp,0x10
c001e462:	85 c0                	test   eax,eax
c001e464:	75 17                	jne    c001e47d <unblockTask(ThreadControlBlock*)+0x45>
c001e466:	eb 65                	jmp    c001e4cd <unblockTask(ThreadControlBlock*)+0x95>
c001e468:	83 ec 08             	sub    esp,0x8
c001e46b:	50                   	push   eax
c001e46c:	68 c8 19 03 c0       	push   0xc00319c8
c001e471:	e8 ee a8 00 00       	call   c0028d64 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e476:	83 c4 10             	add    esp,0x10
c001e479:	85 c0                	test   eax,eax
c001e47b:	74 50                	je     c001e4cd <unblockTask(ThreadControlBlock*)+0x95>
c001e47d:	39 c3                	cmp    ebx,eax
c001e47f:	75 e7                	jne    c001e468 <unblockTask(ThreadControlBlock*)+0x30>
c001e481:	eb 1c                	jmp    c001e49f <unblockTask(ThreadControlBlock*)+0x67>
c001e483:	83 ec 0c             	sub    esp,0xc
c001e486:	68 04 c5 02 c0       	push   0xc002c504
c001e48b:	e8 4f 4a ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e490:	c7 04 24 90 c4 02 c0 	mov    DWORD PTR [esp],0xc002c490
c001e497:	e8 43 4a ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e49c:	83 c4 10             	add    esp,0x10
c001e49f:	83 c4 08             	add    esp,0x8
c001e4a2:	5b                   	pop    ebx
c001e4a3:	e9 40 f9 ff ff       	jmp    c001dde8 <unlockScheduler()>
c001e4a8:	83 ec 0c             	sub    esp,0xc
c001e4ab:	68 48 c4 02 c0       	push   0xc002c448
c001e4b0:	e8 2a 4a ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e4b5:	c7 04 24 90 c4 02 c0 	mov    DWORD PTR [esp],0xc002c490
c001e4bc:	e8 1e 4a ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e4c1:	83 c4 10             	add    esp,0x10
c001e4c4:	83 c4 08             	add    esp,0x8
c001e4c7:	5b                   	pop    ebx
c001e4c8:	e9 1b f9 ff ff       	jmp    c001dde8 <unlockScheduler()>
c001e4cd:	83 ec 08             	sub    esp,0x8
c001e4d0:	53                   	push   ebx
c001e4d1:	68 c8 19 03 c0       	push   0xc00319c8
c001e4d6:	e8 75 a6 00 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4db:	83 c4 10             	add    esp,0x10
c001e4de:	83 c4 08             	add    esp,0x8
c001e4e1:	5b                   	pop    ebx
c001e4e2:	e9 01 f9 ff ff       	jmp    c001dde8 <unlockScheduler()>

c001e4e7 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e4e7:	55                   	push   ebp
c001e4e8:	57                   	push   edi
c001e4e9:	56                   	push   esi
c001e4ea:	53                   	push   ebx
c001e4eb:	83 ec 1c             	sub    esp,0x1c
c001e4ee:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4f2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4f5:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e4fb:	85 ff                	test   edi,edi
c001e4fd:	7e 20                	jle    c001e51f <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e4ff:	31 f6                	xor    esi,esi
c001e501:	83 ec 0c             	sub    esp,0xc
c001e504:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e50b:	46                   	inc    esi
c001e50c:	e8 4a 13 ff ff       	call   c000f85b <free>
c001e511:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e514:	83 c4 10             	add    esp,0x10
c001e517:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e51d:	7f e2                	jg     c001e501 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e51f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e529:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e52e:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e531:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e534:	d3 c0                	rol    eax,cl
c001e536:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e53d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e540:	89 f7                	mov    edi,esi
c001e542:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e54a:	0f 85 74 01 00 00    	jne    c001e6c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e550:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e556:	85 ed                	test   ebp,ebp
c001e558:	74 1b                	je     c001e575 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e55a:	83 ec 0c             	sub    esp,0xc
c001e55d:	55                   	push   ebp
c001e55e:	e8 15 be ff ff       	call   c001a378 <EnvVarContainer::~EnvVarContainer()>
c001e563:	59                   	pop    ecx
c001e564:	5e                   	pop    esi
c001e565:	6a 0c                	push   0xc
c001e567:	55                   	push   ebp
c001e568:	e8 92 48 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c001e56d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e570:	83 c4 10             	add    esp,0x10
c001e573:	89 f7                	mov    edi,esi
c001e575:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e57b:	85 c0                	test   eax,eax
c001e57d:	0f 84 aa 00 00 00    	je     c001e62d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e583:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e586:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e58a:	31 c9                	xor    ecx,ecx
c001e58c:	eb 10                	jmp    c001e59e <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e58e:	41                   	inc    ecx
c001e58f:	83 f9 10             	cmp    ecx,0x10
c001e592:	0f 84 95 00 00 00    	je     c001e62d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e598:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e59e:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e5a5:	d3 fa                	sar    edx,cl
c001e5a7:	83 e2 01             	and    edx,0x1
c001e5aa:	74 e2                	je     c001e58e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5ac:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e5af:	01 ca                	add    edx,ecx
c001e5b1:	89 d5                	mov    ebp,edx
c001e5b3:	c1 e5 05             	shl    ebp,0x5
c001e5b6:	01 ea                	add    edx,ebp
c001e5b8:	01 d0                	add    eax,edx
c001e5ba:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e5c0:	83 fd 07             	cmp    ebp,0x7
c001e5c3:	75 c9                	jne    c001e58e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5c5:	05 40 02 00 00       	add    eax,0x240
c001e5ca:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e5cd:	83 fd ff             	cmp    ebp,0xffffffff
c001e5d0:	0f 8c 08 01 00 00    	jl     c001e6de <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e5d6:	0f 84 b9 01 00 00    	je     c001e795 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e5dc:	85 ed                	test   ebp,ebp
c001e5de:	0f 84 a0 01 00 00    	je     c001e784 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e5e4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e5e6:	75 a6                	jne    c001e58e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5e8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5f2:	01 d0                	add    eax,edx
c001e5f4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e5f8:	83 ec 0c             	sub    esp,0xc
c001e5fb:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e601:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e604:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e60a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e611:	50                   	push   eax
c001e612:	e8 21 fe ff ff       	call   c001e438 <unblockTask(ThreadControlBlock*)>
c001e617:	83 c4 10             	add    esp,0x10
c001e61a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e61d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e621:	89 f7                	mov    edi,esi
c001e623:	41                   	inc    ecx
c001e624:	83 f9 10             	cmp    ecx,0x10
c001e627:	0f 85 6b ff ff ff    	jne    c001e598 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e62d:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e633:	85 c0                	test   eax,eax
c001e635:	74 5d                	je     c001e694 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e637:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e63d:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e643:	74 4f                	je     c001e694 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e645:	83 ec 0c             	sub    esp,0xc
c001e648:	68 c8 19 03 c0       	push   0xc00319c8
c001e64d:	e8 2c a4 00 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e652:	c7 04 24 c8 19 03 c0 	mov    DWORD PTR [esp],0xc00319c8
c001e659:	89 c7                	mov    edi,eax
c001e65b:	e8 26 a4 00 00       	call   c0028a86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e660:	83 c4 10             	add    esp,0x10
c001e663:	84 c0                	test   al,al
c001e665:	0f 84 e4 00 00 00    	je     c001e74f <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e66b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e66e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e674:	85 d2                	test   edx,edx
c001e676:	74 0f                	je     c001e687 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e678:	83 ec 0c             	sub    esp,0xc
c001e67b:	8b 02                	mov    eax,DWORD PTR [edx]
c001e67d:	52                   	push   edx
c001e67e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e681:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e684:	83 c4 10             	add    esp,0x10
c001e687:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e691:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e694:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e69a:	85 db                	test   ebx,ebx
c001e69c:	74 16                	je     c001e6b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e69e:	83 ec 0c             	sub    esp,0xc
c001e6a1:	53                   	push   ebx
c001e6a2:	e8 25 3b ff ff       	call   c00121cc <VAS::~VAS()>
c001e6a7:	58                   	pop    eax
c001e6a8:	5a                   	pop    edx
c001e6a9:	6a 14                	push   0x14
c001e6ab:	53                   	push   ebx
c001e6ac:	e8 4e 47 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c001e6b1:	83 c4 10             	add    esp,0x10
c001e6b4:	83 ec 0c             	sub    esp,0xc
c001e6b7:	68 3a c2 02 c0       	push   0xc002c23a
c001e6bc:	e8 1e 48 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e6c1:	83 c4 10             	add    esp,0x10
c001e6c4:	83 ec 08             	sub    esp,0x8
c001e6c7:	68 3f 07 00 00       	push   0x73f
c001e6cc:	68 48 c2 02 c0       	push   0xc002c248
c001e6d1:	e8 09 48 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e6d6:	83 c4 2c             	add    esp,0x2c
c001e6d9:	5b                   	pop    ebx
c001e6da:	5e                   	pop    esi
c001e6db:	5f                   	pop    edi
c001e6dc:	5d                   	pop    ebp
c001e6dd:	c3                   	ret    
c001e6de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6e2:	83 ec 0c             	sub    esp,0xc
c001e6e5:	68 48 c5 02 c0       	push   0xc002c548
c001e6ea:	e8 1c bf ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001e6ef:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6f2:	83 c4 10             	add    esp,0x10
c001e6f5:	89 f7                	mov    edi,esi
c001e6f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6fb:	e9 8e fe ff ff       	jmp    c001e58e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e700:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e706:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e70c:	75 1c                	jne    c001e72a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e70e:	83 ec 0c             	sub    esp,0xc
c001e711:	68 b0 c5 02 c0       	push   0xc002c5b0
c001e716:	e8 c4 47 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e71b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e722:	e8 8f fb ff ff       	call   c001e2b6 <blockTask(TaskState)>
c001e727:	83 c4 10             	add    esp,0x10
c001e72a:	83 ec 08             	sub    esp,0x8
c001e72d:	56                   	push   esi
c001e72e:	68 c8 19 03 c0       	push   0xc00319c8
c001e733:	e8 18 a4 00 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e738:	c7 04 24 c8 19 03 c0 	mov    DWORD PTR [esp],0xc00319c8
c001e73f:	e8 3a a3 00 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e744:	83 c4 10             	add    esp,0x10
c001e747:	39 f8                	cmp    eax,edi
c001e749:	0f 84 1c ff ff ff    	je     c001e66b <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e74f:	83 ec 0c             	sub    esp,0xc
c001e752:	68 c8 19 03 c0       	push   0xc00319c8
c001e757:	e8 22 a3 00 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e75c:	c7 04 24 c8 19 03 c0 	mov    DWORD PTR [esp],0xc00319c8
c001e763:	89 c6                	mov    esi,eax
c001e765:	e8 38 a3 00 00       	call   c0028aa2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e76a:	83 c4 10             	add    esp,0x10
c001e76d:	39 f3                	cmp    ebx,esi
c001e76f:	74 b9                	je     c001e72a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e771:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e774:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e777:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e77d:	75 ab                	jne    c001e72a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e77f:	e9 7c ff ff ff       	jmp    c001e700 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e784:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e788:	83 ec 0c             	sub    esp,0xc
c001e78b:	68 7c c5 02 c0       	push   0xc002c57c
c001e790:	e9 55 ff ff ff       	jmp    c001e6ea <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e795:	8b 36                	mov    esi,DWORD PTR [esi]
c001e797:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e79b:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e79e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7a1:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e7a7:	01 d7                	add    edi,edx
c001e7a9:	89 f8                	mov    eax,edi
c001e7ab:	e9 44 fe ff ff       	jmp    c001e5f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e7b0 <cleanerTaskFunction(void*)>:
c001e7b0:	53                   	push   ebx
c001e7b1:	83 ec 08             	sub    esp,0x8
c001e7b4:	e8 2f f6 ff ff       	call   c001dde8 <unlockScheduler()>
c001e7b9:	e8 28 f6 ff ff       	call   c001dde6 <lockScheduler()>
c001e7be:	80 3d 8c 19 03 c0 00 	cmp    BYTE PTR ds:0xc003198c,0x0
c001e7c5:	0f 85 8e 00 00 00    	jne    c001e859 <cleanerTaskFunction(void*)+0xa9>
c001e7cb:	83 ec 0c             	sub    esp,0xc
c001e7ce:	6a 02                	push   0x2
c001e7d0:	e8 9f fa ff ff       	call   c001e274 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e7d5:	83 c4 10             	add    esp,0x10
c001e7d8:	c6 05 8c 19 03 c0 00 	mov    BYTE PTR ds:0xc003198c,0x0
c001e7df:	e8 29 f6 ff ff       	call   c001de0d <lockStuff()>
c001e7e4:	e8 fd f5 ff ff       	call   c001dde6 <lockScheduler()>
c001e7e9:	83 ec 0c             	sub    esp,0xc
c001e7ec:	68 b0 19 03 c0       	push   0xc00319b0
c001e7f1:	e8 90 a2 00 00       	call   c0028a86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7f6:	83 c4 10             	add    esp,0x10
c001e7f9:	84 c0                	test   al,al
c001e7fb:	75 40                	jne    c001e83d <cleanerTaskFunction(void*)+0x8d>
c001e7fd:	83 ec 0c             	sub    esp,0xc
c001e800:	68 b0 19 03 c0       	push   0xc00319b0
c001e805:	e8 74 a2 00 00       	call   c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e80a:	c7 04 24 b0 19 03 c0 	mov    DWORD PTR [esp],0xc00319b0
c001e811:	89 c3                	mov    ebx,eax
c001e813:	e8 8a a2 00 00       	call   c0028aa2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e818:	c7 04 24 5e c2 02 c0 	mov    DWORD PTR [esp],0xc002c25e
c001e81f:	e8 bb 46 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e824:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e827:	e8 bb fc ff ff       	call   c001e4e7 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e82c:	c7 04 24 77 c2 02 c0 	mov    DWORD PTR [esp],0xc002c277
c001e833:	e8 a7 46 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e838:	83 c4 10             	add    esp,0x10
c001e83b:	eb ac                	jmp    c001e7e9 <cleanerTaskFunction(void*)+0x39>
c001e83d:	e8 a6 f5 ff ff       	call   c001dde8 <unlockScheduler()>
c001e842:	e8 9a f9 ff ff       	call   c001e1e1 <unlockStuff()>
c001e847:	e8 9a f5 ff ff       	call   c001dde6 <lockScheduler()>
c001e84c:	80 3d 8c 19 03 c0 00 	cmp    BYTE PTR ds:0xc003198c,0x0
c001e853:	0f 84 72 ff ff ff    	je     c001e7cb <cleanerTaskFunction(void*)+0x1b>
c001e859:	e8 8a f5 ff ff       	call   c001dde8 <unlockScheduler()>
c001e85e:	e9 75 ff ff ff       	jmp    c001e7d8 <cleanerTaskFunction(void*)+0x28>

c001e863 <terminateTask(int)>:
c001e863:	83 ec 14             	sub    esp,0x14
c001e866:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e86b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e86e:	83 c0 0c             	add    eax,0xc
c001e871:	50                   	push   eax
c001e872:	68 d8 c5 02 c0       	push   0xc002c5d8
c001e877:	e8 63 46 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e87c:	e8 8c f5 ff ff       	call   c001de0d <lockStuff()>
c001e881:	e8 60 f5 ff ff       	call   c001dde6 <lockScheduler()>
c001e886:	c7 04 24 8a c2 02 c0 	mov    DWORD PTR [esp],0xc002c28a
c001e88d:	e8 4d 46 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e892:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e896:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e89b:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e89e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8a3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e8a6:	5a                   	pop    edx
c001e8a7:	59                   	pop    ecx
c001e8a8:	50                   	push   eax
c001e8a9:	68 b0 19 03 c0       	push   0xc00319b0
c001e8ae:	e8 9d a2 00 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8b8:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e8bf:	c7 04 24 a4 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2a4
c001e8c6:	e8 14 46 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e8cb:	83 c4 10             	add    esp,0x10
c001e8ce:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c001e8d3:	85 c0                	test   eax,eax
c001e8d5:	74 5a                	je     c001e931 <terminateTask(int)+0xce>
c001e8d7:	83 ec 0c             	sub    esp,0xc
c001e8da:	68 be c2 02 c0       	push   0xc002c2be
c001e8df:	e8 fb 45 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e8e4:	58                   	pop    eax
c001e8e5:	c6 05 8c 19 03 c0 01 	mov    BYTE PTR ds:0xc003198c,0x1
c001e8ec:	ff 35 88 19 03 c0    	push   DWORD PTR ds:0xc0031988
c001e8f2:	e8 41 fb ff ff       	call   c001e438 <unblockTask(ThreadControlBlock*)>
c001e8f7:	c7 04 24 d8 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2d8
c001e8fe:	e8 dc 45 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e903:	83 c4 10             	add    esp,0x10
c001e906:	e8 dd f4 ff ff       	call   c001dde8 <unlockScheduler()>
c001e90b:	e8 d1 f8 ff ff       	call   c001e1e1 <unlockStuff()>
c001e910:	83 ec 0c             	sub    esp,0xc
c001e913:	68 10 c3 02 c0       	push   0xc002c310
c001e918:	e8 c2 45 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e91d:	83 c4 10             	add    esp,0x10
c001e920:	e8 c1 f4 ff ff       	call   c001dde6 <lockScheduler()>
c001e925:	e8 32 f8 ff ff       	call   c001e15c <schedule()>
c001e92a:	e8 b9 f4 ff ff       	call   c001dde8 <unlockScheduler()>
c001e92f:	eb ef                	jmp    c001e920 <terminateTask(int)+0xbd>
c001e931:	83 ec 0c             	sub    esp,0xc
c001e934:	68 f2 c2 02 c0       	push   0xc002c2f2
c001e939:	e8 a1 45 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001e93e:	83 c4 10             	add    esp,0x10
c001e941:	eb c3                	jmp    c001e906 <terminateTask(int)+0xa3>

c001e943 <Thr::terminateFromIRQ(int)>:
c001e943:	83 ec 18             	sub    esp,0x18
c001e946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e94a:	e8 14 ff ff ff       	call   c001e863 <terminateTask(int)>
c001e94f:	90                   	nop

c001e950 <Semaphore::release()>:
c001e950:	83 ec 0c             	sub    esp,0xc
c001e953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e957:	e8 b1 f4 ff ff       	call   c001de0d <lockStuff()>
c001e95c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e95f:	85 d2                	test   edx,edx
c001e961:	74 1a                	je     c001e97d <Semaphore::release()+0x2d>
c001e963:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e966:	83 ec 0c             	sub    esp,0xc
c001e969:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e96c:	52                   	push   edx
c001e96d:	e8 c6 fa ff ff       	call   c001e438 <unblockTask(ThreadControlBlock*)>
c001e972:	83 c4 10             	add    esp,0x10
c001e975:	83 c4 0c             	add    esp,0xc
c001e978:	e9 64 f8 ff ff       	jmp    c001e1e1 <unlockStuff()>
c001e97d:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e980:	83 c4 0c             	add    esp,0xc
c001e983:	e9 59 f8 ff ff       	jmp    c001e1e1 <unlockStuff()>

c001e988 <__static_initialization_and_destruction_0(int, int)>:
c001e988:	83 ec 0c             	sub    esp,0xc
c001e98b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e990:	0f 85 88 00 00 00    	jne    c001ea1e <__static_initialization_and_destruction_0(int, int)+0x96>
c001e996:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e99e:	75 7e                	jne    c001ea1e <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9a0:	83 ec 0c             	sub    esp,0xc
c001e9a3:	68 c8 19 03 c0       	push   0xc00319c8
c001e9a8:	e8 5f a3 00 00       	call   c0028d0c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9ad:	83 c4 10             	add    esp,0x10
c001e9b0:	83 ec 04             	sub    esp,0x4
c001e9b3:	68 90 d3 02 c0       	push   0xc002d390
c001e9b8:	68 c8 19 03 c0       	push   0xc00319c8
c001e9bd:	68 c0 8c 02 c0       	push   0xc0028cc0
c001e9c2:	e8 b2 43 ff ff       	call   c0012d79 <__cxa_atexit>
c001e9c7:	83 c4 10             	add    esp,0x10
c001e9ca:	83 ec 0c             	sub    esp,0xc
c001e9cd:	68 bc 19 03 c0       	push   0xc00319bc
c001e9d2:	e8 35 a3 00 00       	call   c0028d0c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9d7:	83 c4 10             	add    esp,0x10
c001e9da:	83 ec 04             	sub    esp,0x4
c001e9dd:	68 90 d3 02 c0       	push   0xc002d390
c001e9e2:	68 bc 19 03 c0       	push   0xc00319bc
c001e9e7:	68 c0 8c 02 c0       	push   0xc0028cc0
c001e9ec:	e8 88 43 ff ff       	call   c0012d79 <__cxa_atexit>
c001e9f1:	83 c4 10             	add    esp,0x10
c001e9f4:	83 ec 0c             	sub    esp,0xc
c001e9f7:	68 b0 19 03 c0       	push   0xc00319b0
c001e9fc:	e8 0b a3 00 00       	call   c0028d0c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea01:	83 c4 10             	add    esp,0x10
c001ea04:	83 ec 04             	sub    esp,0x4
c001ea07:	68 90 d3 02 c0       	push   0xc002d390
c001ea0c:	68 b0 19 03 c0       	push   0xc00319b0
c001ea11:	68 c0 8c 02 c0       	push   0xc0028cc0
c001ea16:	e8 5e 43 ff ff       	call   c0012d79 <__cxa_atexit>
c001ea1b:	83 c4 10             	add    esp,0x10
c001ea1e:	90                   	nop
c001ea1f:	83 c4 0c             	add    esp,0xc
c001ea22:	c3                   	ret    

c001ea23 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea23:	83 ec 0c             	sub    esp,0xc
c001ea26:	83 ec 08             	sub    esp,0x8
c001ea29:	68 ff ff 00 00       	push   0xffff
c001ea2e:	6a 01                	push   0x1
c001ea30:	e8 53 ff ff ff       	call   c001e988 <__static_initialization_and_destruction_0(int, int)>
c001ea35:	83 c4 10             	add    esp,0x10
c001ea38:	83 c4 0c             	add    esp,0xc
c001ea3b:	c3                   	ret    

c001ea3c <Vm::inbv(unsigned short)>:
c001ea3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea40:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea45:	75 06                	jne    c001ea4d <Vm::inbv(unsigned short)+0x11>
c001ea47:	a0 0c 1a 03 c0       	mov    al,ds:0xc0031a0c
c001ea4c:	c3                   	ret    
c001ea4d:	ec                   	in     al,dx
c001ea4e:	c3                   	ret    

c001ea4f <Vm::outbv(unsigned short, unsigned char)>:
c001ea4f:	53                   	push   ebx
c001ea50:	83 ec 08             	sub    esp,0x8
c001ea53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea57:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea5b:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea60:	75 38                	jne    c001ea9a <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea62:	0f b6 c3             	movzx  eax,bl
c001ea65:	51                   	push   ecx
c001ea66:	51                   	push   ecx
c001ea67:	50                   	push   eax
c001ea68:	68 f7 c5 02 c0       	push   0xc002c5f7
c001ea6d:	e8 6d 44 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001ea72:	8b 15 0c 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a0c
c001ea78:	83 c4 10             	add    esp,0x10
c001ea7b:	8d 42 01             	lea    eax,[edx+0x1]
c001ea7e:	88 9a 20 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce5e0],bl
c001ea84:	a3 0c 1a 03 c0       	mov    ds:0xc0031a0c,eax
c001ea89:	83 f8 20             	cmp    eax,0x20
c001ea8c:	75 0f                	jne    c001ea9d <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea8e:	c7 05 0c 1a 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031a0c,0x1f
c001ea98:	eb 03                	jmp    c001ea9d <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea9a:	88 d8                	mov    al,bl
c001ea9c:	ee                   	out    dx,al
c001ea9d:	83 c4 08             	add    esp,0x8
c001eaa0:	5b                   	pop    ebx
c001eaa1:	c3                   	ret    

c001eaa2 <Vm::realToLinear(unsigned short, unsigned short)>:
c001eaa2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eaa7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eaac:	c1 e0 04             	shl    eax,0x4
c001eaaf:	01 d0                	add    eax,edx
c001eab1:	c3                   	ret    

c001eab2 <Vm::getSegment(unsigned int)>:
c001eab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eab6:	c1 e8 10             	shr    eax,0x10
c001eab9:	c3                   	ret    

c001eaba <Vm::getOffset(unsigned int)>:
c001eaba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eabe:	c3                   	ret    

c001eabf <Vm::mainloop2()>:
c001eabf:	83 ec 0c             	sub    esp,0xc
c001eac2:	e8 1f f3 ff ff       	call   c001dde6 <lockScheduler()>
c001eac7:	83 ec 0c             	sub    esp,0xc
c001eaca:	c6 05 05 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a05,0x1
c001ead1:	6a 02                	push   0x2
c001ead3:	e8 9c f7 ff ff       	call   c001e274 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ead8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eadd:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eae1:	52                   	push   edx
c001eae2:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eae6:	52                   	push   edx
c001eae7:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eaeb:	52                   	push   edx
c001eaec:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eaf0:	50                   	push   eax
c001eaf1:	e8 04 18 fe ff       	call   c00002fa <goToVM86>
c001eaf6:	83 c4 2c             	add    esp,0x2c
c001eaf9:	c3                   	ret    

c001eafa <Vm::mainVm8086Loop(void*)>:
c001eafa:	83 ec 0c             	sub    esp,0xc
c001eafd:	e8 e6 f2 ff ff       	call   c001dde8 <unlockScheduler()>
c001eb02:	83 c4 0c             	add    esp,0xc
c001eb05:	eb b8                	jmp    c001eabf <Vm::mainloop2()>

c001eb07 <Vm::mainloop3(unsigned long)>:
c001eb07:	53                   	push   ebx
c001eb08:	83 ec 08             	sub    esp,0x8
c001eb0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb0f:	e8 d2 f2 ff ff       	call   c001dde6 <lockScheduler()>
c001eb14:	83 ec 0c             	sub    esp,0xc
c001eb17:	89 1d 00 1a 03 c0    	mov    DWORD PTR ds:0xc0031a00,ebx
c001eb1d:	6a 02                	push   0x2
c001eb1f:	c6 05 04 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a04,0x1
c001eb26:	e8 49 f7 ff ff       	call   c001e274 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb2b:	83 c4 18             	add    esp,0x18
c001eb2e:	5b                   	pop    ebx
c001eb2f:	eb 8e                	jmp    c001eabf <Vm::mainloop2()>

c001eb31 <Vm::initialise8086()>:
c001eb31:	83 ec 0c             	sub    esp,0xc
c001eb34:	68 80 00 00 00       	push   0x80
c001eb39:	6a 00                	push   0x0
c001eb3b:	68 fa ea 01 c0       	push   0xc001eafa
c001eb40:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001eb46:	e8 cd f3 ff ff       	call   c001df18 <Process::createThread(void (*)(void*), void*, int)>
c001eb4b:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb52:	a3 08 1a 03 c0       	mov    ds:0xc0031a08,eax
c001eb57:	68 00 01 00 00       	push   0x100
c001eb5c:	a1 d4 19 03 c0       	mov    eax,ds:0xc00319d4
c001eb61:	6a 00                	push   0x0
c001eb63:	6a 00                	push   0x0
c001eb65:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb6b:	e8 bc 3a ff ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb70:	83 c4 2c             	add    esp,0x2c
c001eb73:	c3                   	ret    

c001eb74 <Vm::finish8086()>:
c001eb74:	53                   	push   ebx
c001eb75:	83 ec 08             	sub    esp,0x8
c001eb78:	e8 69 f2 ff ff       	call   c001dde6 <lockScheduler()>
c001eb7d:	80 3d 04 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a04,0x0
c001eb84:	75 0c                	jne    c001eb92 <Vm::finish8086()+0x1e>
c001eb86:	e8 d1 f5 ff ff       	call   c001e15c <schedule()>
c001eb8b:	e8 58 f2 ff ff       	call   c001dde8 <unlockScheduler()>
c001eb90:	eb e6                	jmp    c001eb78 <Vm::finish8086()+0x4>
c001eb92:	83 ec 0c             	sub    esp,0xc
c001eb95:	8b 1d 00 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031a00
c001eb9b:	ff 35 08 1a 03 c0    	push   DWORD PTR ds:0xc0031a08
c001eba1:	c6 05 04 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a04,0x0
c001eba8:	e8 8b f8 ff ff       	call   c001e438 <unblockTask(ThreadControlBlock*)>
c001ebad:	e8 36 f2 ff ff       	call   c001dde8 <unlockScheduler()>
c001ebb2:	89 d8                	mov    eax,ebx
c001ebb4:	83 c4 18             	add    esp,0x18
c001ebb7:	5b                   	pop    ebx
c001ebb8:	c3                   	ret    

c001ebb9 <Vm::getOutput8086(unsigned char*)>:
c001ebb9:	83 ec 10             	sub    esp,0x10
c001ebbc:	ff 35 0c 1a 03 c0    	push   DWORD PTR ds:0xc0031a0c
c001ebc2:	68 20 1a 03 c0       	push   0xc0031a20
c001ebc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebcb:	e8 7c 1b fe ff       	call   c000074c <memcpy>
c001ebd0:	a1 0c 1a 03 c0       	mov    eax,ds:0xc0031a0c
c001ebd5:	c7 05 0c 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a0c,0x0
c001ebdf:	83 c4 1c             	add    esp,0x1c
c001ebe2:	c3                   	ret    

c001ebe3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ebe3:	55                   	push   ebp
c001ebe4:	57                   	push   edi
c001ebe5:	56                   	push   esi
c001ebe6:	53                   	push   ebx
c001ebe7:	83 ec 2c             	sub    esp,0x2c
c001ebea:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ebee:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ebf2:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ebf6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ebfa:	e8 e7 f1 ff ff       	call   c001dde6 <lockScheduler()>
c001ebff:	a0 05 1a 03 c0       	mov    al,ds:0xc0031a05
c001ec04:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec08:	84 c0                	test   al,al
c001ec0a:	75 0c                	jne    c001ec18 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec0c:	e8 4b f5 ff ff       	call   c001e15c <schedule()>
c001ec11:	e8 d2 f1 ff ff       	call   c001dde8 <unlockScheduler()>
c001ec16:	eb e2                	jmp    c001ebfa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec18:	a1 08 1a 03 c0       	mov    eax,ds:0xc0031a08
c001ec1d:	c7 05 0c 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a0c,0x0
c001ec27:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec2b:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec2f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec33:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec37:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec3b:	50                   	push   eax
c001ec3c:	6a 20                	push   0x20
c001ec3e:	6a 00                	push   0x0
c001ec40:	68 20 1a 03 c0       	push   0xc0031a20
c001ec45:	e8 36 1b fe ff       	call   c0000780 <memset>
c001ec4a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec51:	e8 f5 0b ff ff       	call   c000f84b <malloc>
c001ec56:	83 c4 0c             	add    esp,0xc
c001ec59:	89 c7                	mov    edi,eax
c001ec5b:	ff 35 d4 19 03 c0    	push   DWORD PTR ds:0xc00319d4
c001ec61:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec65:	50                   	push   eax
c001ec66:	e8 cd 47 ff ff       	call   c0013438 <File::File(char const*, Process*)>
c001ec6b:	83 c4 10             	add    esp,0x10
c001ec6e:	85 ff                	test   edi,edi
c001ec70:	75 0a                	jne    c001ec7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec72:	83 ec 0c             	sub    esp,0xc
c001ec75:	68 13 c6 02 c0       	push   0xc002c613
c001ec7a:	eb 27                	jmp    c001eca3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ec7c:	50                   	push   eax
c001ec7d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec81:	50                   	push   eax
c001ec82:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec86:	50                   	push   eax
c001ec87:	57                   	push   edi
c001ec88:	e8 bb 4a ff ff       	call   c0013748 <File::stat(unsigned long long*, bool*)>
c001ec8d:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ec92:	83 c4 10             	add    esp,0x10
c001ec95:	89 e8                	mov    eax,ebp
c001ec97:	84 c0                	test   al,al
c001ec99:	74 19                	je     c001ecb4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec9b:	83 ec 0c             	sub    esp,0xc
c001ec9e:	68 27 c6 02 c0       	push   0xc002c627
c001eca3:	e8 63 b9 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001eca8:	31 ed                	xor    ebp,ebp
c001ecaa:	e8 39 f1 ff ff       	call   c001dde8 <unlockScheduler()>
c001ecaf:	83 c4 10             	add    esp,0x10
c001ecb2:	eb 75                	jmp    c001ed29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecb4:	50                   	push   eax
c001ecb5:	50                   	push   eax
c001ecb6:	6a 01                	push   0x1
c001ecb8:	57                   	push   edi
c001ecb9:	e8 de 47 ff ff       	call   c001349c <File::open(FileOpenMode)>
c001ecbe:	83 c4 10             	add    esp,0x10
c001ecc1:	85 c0                	test   eax,eax
c001ecc3:	74 17                	je     c001ecdc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ecc5:	83 ec 0c             	sub    esp,0xc
c001ecc8:	68 40 c6 02 c0       	push   0xc002c640
c001eccd:	e8 39 b9 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001ecd2:	e8 11 f1 ff ff       	call   c001dde8 <unlockScheduler()>
c001ecd7:	83 c4 10             	add    esp,0x10
c001ecda:	eb 4d                	jmp    c001ed29 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecdc:	0f b7 f6             	movzx  esi,si
c001ecdf:	50                   	push   eax
c001ece0:	0f b7 db             	movzx  ebx,bx
c001ece3:	50                   	push   eax
c001ece4:	56                   	push   esi
c001ece5:	53                   	push   ebx
c001ece6:	e8 b7 fd ff ff       	call   c001eaa2 <Vm::realToLinear(unsigned short, unsigned short)>
c001eceb:	5a                   	pop    edx
c001ecec:	8b 17                	mov    edx,DWORD PTR [edi]
c001ecee:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ecf2:	51                   	push   ecx
c001ecf3:	50                   	push   eax
c001ecf4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecf8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecfc:	57                   	push   edi
c001ecfd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed00:	83 c4 14             	add    esp,0x14
c001ed03:	57                   	push   edi
c001ed04:	e8 f1 47 ff ff       	call   c00134fa <File::close()>
c001ed09:	c6 05 05 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a05,0x0
c001ed10:	e8 d3 f0 ff ff       	call   c001dde8 <unlockScheduler()>
c001ed15:	59                   	pop    ecx
c001ed16:	ff 35 08 1a 03 c0    	push   DWORD PTR ds:0xc0031a08
c001ed1c:	e8 17 f7 ff ff       	call   c001e438 <unblockTask(ThreadControlBlock*)>
c001ed21:	83 c4 10             	add    esp,0x10
c001ed24:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed29:	83 c4 2c             	add    esp,0x2c
c001ed2c:	89 e8                	mov    eax,ebp
c001ed2e:	5b                   	pop    ebx
c001ed2f:	5e                   	pop    esi
c001ed30:	5f                   	pop    edi
c001ed31:	5d                   	pop    ebp
c001ed32:	c3                   	ret    

c001ed33 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed33:	57                   	push   edi
c001ed34:	56                   	push   esi
c001ed35:	53                   	push   ebx
c001ed36:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed3e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed42:	83 e8 06             	sub    eax,0x6
c001ed45:	0f b7 c0             	movzx  eax,ax
c001ed48:	50                   	push   eax
c001ed49:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed4e:	50                   	push   eax
c001ed4f:	e8 4e fd ff ff       	call   c001eaa2 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed54:	5a                   	pop    edx
c001ed55:	5e                   	pop    esi
c001ed56:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed59:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed5c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed62:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed65:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed68:	83 c2 02             	add    edx,0x2
c001ed6b:	66 89 10             	mov    WORD PTR [eax],dx
c001ed6e:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed71:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed75:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed78:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed7c:	89 d6                	mov    esi,edx
c001ed7e:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed84:	66 81 e6 ff fd       	and    si,0xfdff
c001ed89:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed8d:	74 07                	je     c001ed96 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed8f:	89 d6                	mov    esi,edx
c001ed91:	66 81 ce 00 02       	or     si,0x200
c001ed96:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed9f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eda3:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001edab:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001edae:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001edb6:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001edb9:	5b                   	pop    ebx
c001edba:	5e                   	pop    esi
c001edbb:	5f                   	pop    edi
c001edbc:	c3                   	ret    

c001edbd <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001edbd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edc2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edc7:	c1 e0 04             	shl    eax,0x4
c001edca:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001edcd:	c3                   	ret    

c001edce <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001edce:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edd3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edd8:	c1 e0 04             	shl    eax,0x4
c001eddb:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001eddf:	c3                   	ret    

c001ede0 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ede0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ede5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edea:	c1 e0 04             	shl    eax,0x4
c001eded:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001edf0:	c3                   	ret    

c001edf1 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001edf1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edf6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edfb:	c1 e0 04             	shl    eax,0x4
c001edfe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee02:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee05:	c3                   	ret    

c001ee06 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ee06:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee0b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee10:	c1 e0 04             	shl    eax,0x4
c001ee13:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee17:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee1b:	c3                   	ret    

c001ee1c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee21:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee26:	c1 e0 04             	shl    eax,0x4
c001ee29:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee2d:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee30:	c3                   	ret    

c001ee31 <Vm::faultHandler(regs*)>:
c001ee31:	55                   	push   ebp
c001ee32:	57                   	push   edi
c001ee33:	56                   	push   esi
c001ee34:	53                   	push   ebx
c001ee35:	83 ec 1c             	sub    esp,0x1c
c001ee38:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee3c:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee3f:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee42:	0f b7 c1             	movzx  eax,cx
c001ee45:	50                   	push   eax
c001ee46:	0f b7 c3             	movzx  eax,bx
c001ee49:	c1 e3 04             	shl    ebx,0x4
c001ee4c:	50                   	push   eax
c001ee4d:	e8 50 fc ff ff       	call   c001eaa2 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee52:	5a                   	pop    edx
c001ee53:	89 c5                	mov    ebp,eax
c001ee55:	5e                   	pop    esi
c001ee56:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee5a:	50                   	push   eax
c001ee5b:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee5f:	50                   	push   eax
c001ee60:	e8 3d fc ff ff       	call   c001eaa2 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee65:	01 cb                	add    ebx,ecx
c001ee67:	89 c6                	mov    esi,eax
c001ee69:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee6d:	50                   	push   eax
c001ee6e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee72:	50                   	push   eax
c001ee73:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee77:	50                   	push   eax
c001ee78:	55                   	push   ebp
c001ee79:	53                   	push   ebx
c001ee7a:	b3 06                	mov    bl,0x6
c001ee7c:	68 59 c6 02 c0       	push   0xc002c659
c001ee81:	e8 59 40 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001ee86:	83 c4 20             	add    esp,0x20
c001ee89:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ee8e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ee93:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee97:	3c 9d                	cmp    al,0x9d
c001ee99:	0f 84 d7 02 00 00    	je     c001f176 <Vm::faultHandler(regs*)+0x345>
c001ee9f:	0f 87 a3 00 00 00    	ja     c001ef48 <Vm::faultHandler(regs*)+0x117>
c001eea5:	3c 66                	cmp    al,0x66
c001eea7:	0f 84 15 02 00 00    	je     c001f0c2 <Vm::faultHandler(regs*)+0x291>
c001eead:	77 5f                	ja     c001ef0e <Vm::faultHandler(regs*)+0xdd>
c001eeaf:	3c 36                	cmp    al,0x36
c001eeb1:	0f 84 f1 01 00 00    	je     c001f0a8 <Vm::faultHandler(regs*)+0x277>
c001eeb7:	77 28                	ja     c001eee1 <Vm::faultHandler(regs*)+0xb0>
c001eeb9:	3c 26                	cmp    al,0x26
c001eebb:	0f 84 99 01 00 00    	je     c001f05a <Vm::faultHandler(regs*)+0x229>
c001eec1:	3c 2e                	cmp    al,0x2e
c001eec3:	0f 85 3b 07 00 00    	jne    c001f604 <Vm::faultHandler(regs*)+0x7d3>
c001eec9:	83 ec 0c             	sub    esp,0xc
c001eecc:	31 db                	xor    ebx,ebx
c001eece:	68 6e c6 02 c0       	push   0xc002c66e
c001eed3:	e8 07 40 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001eed8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eedb:	83 c4 10             	add    esp,0x10
c001eede:	45                   	inc    ebp
c001eedf:	eb b2                	jmp    c001ee93 <Vm::faultHandler(regs*)+0x62>
c001eee1:	3c 64                	cmp    al,0x64
c001eee3:	0f 84 8b 01 00 00    	je     c001f074 <Vm::faultHandler(regs*)+0x243>
c001eee9:	0f 87 9f 01 00 00    	ja     c001f08e <Vm::faultHandler(regs*)+0x25d>
c001eeef:	3c 3e                	cmp    al,0x3e
c001eef1:	0f 85 0d 07 00 00    	jne    c001f604 <Vm::faultHandler(regs*)+0x7d3>
c001eef7:	83 ec 0c             	sub    esp,0xc
c001eefa:	b3 01                	mov    bl,0x1
c001eefc:	68 72 c6 02 c0       	push   0xc002c672
c001ef01:	e8 d9 3f ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001ef06:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef09:	83 c4 10             	add    esp,0x10
c001ef0c:	eb d0                	jmp    c001eede <Vm::faultHandler(regs*)+0xad>
c001ef0e:	3c 6d                	cmp    al,0x6d
c001ef10:	0f 84 af 03 00 00    	je     c001f2c5 <Vm::faultHandler(regs*)+0x494>
c001ef16:	77 15                	ja     c001ef2d <Vm::faultHandler(regs*)+0xfc>
c001ef18:	3c 67                	cmp    al,0x67
c001ef1a:	0f 84 bf 01 00 00    	je     c001f0df <Vm::faultHandler(regs*)+0x2ae>
c001ef20:	3c 6c                	cmp    al,0x6c
c001ef22:	0f 84 3f 03 00 00    	je     c001f267 <Vm::faultHandler(regs*)+0x436>
c001ef28:	e9 d7 06 00 00       	jmp    c001f604 <Vm::faultHandler(regs*)+0x7d3>
c001ef2d:	3c 6f                	cmp    al,0x6f
c001ef2f:	0f 84 a4 04 00 00    	je     c001f3d9 <Vm::faultHandler(regs*)+0x5a8>
c001ef35:	0f 82 11 04 00 00    	jb     c001f34c <Vm::faultHandler(regs*)+0x51b>
c001ef3b:	3c 9c                	cmp    al,0x9c
c001ef3d:	0f 84 ba 01 00 00    	je     c001f0fd <Vm::faultHandler(regs*)+0x2cc>
c001ef43:	e9 bc 06 00 00       	jmp    c001f604 <Vm::faultHandler(regs*)+0x7d3>
c001ef48:	3c ec                	cmp    al,0xec
c001ef4a:	0f 84 24 06 00 00    	je     c001f574 <Vm::faultHandler(regs*)+0x743>
c001ef50:	0f 87 93 00 00 00    	ja     c001efe9 <Vm::faultHandler(regs*)+0x1b8>
c001ef56:	3c e4                	cmp    al,0xe4
c001ef58:	0f 84 5c 05 00 00    	je     c001f4ba <Vm::faultHandler(regs*)+0x689>
c001ef5e:	77 6a                	ja     c001efca <Vm::faultHandler(regs*)+0x199>
c001ef60:	3c cd                	cmp    al,0xcd
c001ef62:	0f 84 7e 02 00 00    	je     c001f1e6 <Vm::faultHandler(regs*)+0x3b5>
c001ef68:	3c cf                	cmp    al,0xcf
c001ef6a:	0f 85 94 06 00 00    	jne    c001f604 <Vm::faultHandler(regs*)+0x7d3>
c001ef70:	83 ec 0c             	sub    esp,0xc
c001ef73:	68 b6 c6 02 c0       	push   0xc002c6b6
c001ef78:	e8 62 3f ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001ef7d:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ef80:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ef83:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ef87:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ef8a:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ef8e:	0d 00 02 02 00       	or     eax,0x20200
c001ef93:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ef96:	56                   	push   esi
c001ef97:	53                   	push   ebx
c001ef98:	52                   	push   edx
c001ef99:	68 bc c6 02 c0       	push   0xc002c6bc
c001ef9e:	e8 3c 3f ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001efa3:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001efa7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efad:	66 c1 e8 09          	shr    ax,0x9
c001efb1:	83 e0 01             	and    eax,0x1
c001efb4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001efb7:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001efba:	83 c0 06             	add    eax,0x6
c001efbd:	25 ff ff 00 00       	and    eax,0xffff
c001efc2:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001efc5:	e9 95 02 00 00       	jmp    c001f25f <Vm::faultHandler(regs*)+0x42e>
c001efca:	3c e6                	cmp    al,0xe6
c001efcc:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001efd0:	0f 84 4e 05 00 00    	je     c001f524 <Vm::faultHandler(regs*)+0x6f3>
c001efd6:	0f 82 0a 05 00 00    	jb     c001f4e6 <Vm::faultHandler(regs*)+0x6b5>
c001efdc:	3c e7                	cmp    al,0xe7
c001efde:	0f 84 69 05 00 00    	je     c001f54d <Vm::faultHandler(regs*)+0x71c>
c001efe4:	e9 1b 06 00 00       	jmp    c001f604 <Vm::faultHandler(regs*)+0x7d3>
c001efe9:	3c ef                	cmp    al,0xef
c001efeb:	0f 84 e6 05 00 00    	je     c001f5d7 <Vm::faultHandler(regs*)+0x7a6>
c001eff1:	77 37                	ja     c001f02a <Vm::faultHandler(regs*)+0x1f9>
c001eff3:	3c ed                	cmp    al,0xed
c001eff5:	0f 84 a3 05 00 00    	je     c001f59e <Vm::faultHandler(regs*)+0x76d>
c001effb:	3c ee                	cmp    al,0xee
c001effd:	0f 85 01 06 00 00    	jne    c001f604 <Vm::faultHandler(regs*)+0x7d3>
c001f003:	52                   	push   edx
c001f004:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f007:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f00a:	68 57 c7 02 c0       	push   0xc002c757
c001f00f:	e8 cb 3e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f014:	59                   	pop    ecx
c001f015:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f019:	5b                   	pop    ebx
c001f01a:	50                   	push   eax
c001f01b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f01f:	50                   	push   eax
c001f020:	e8 2a fa ff ff       	call   c001ea4f <Vm::outbv(unsigned short, unsigned char)>
c001f025:	e9 a5 05 00 00       	jmp    c001f5cf <Vm::faultHandler(regs*)+0x79e>
c001f02a:	3c fa                	cmp    al,0xfa
c001f02c:	0f 84 f7 01 00 00    	je     c001f229 <Vm::faultHandler(regs*)+0x3f8>
c001f032:	3c fb                	cmp    al,0xfb
c001f034:	0f 84 0a 02 00 00    	je     c001f244 <Vm::faultHandler(regs*)+0x413>
c001f03a:	3c f3                	cmp    al,0xf3
c001f03c:	0f 85 c2 05 00 00    	jne    c001f604 <Vm::faultHandler(regs*)+0x7d3>
c001f042:	83 ec 0c             	sub    esp,0xc
c001f045:	68 8f c6 02 c0       	push   0xc002c68f
c001f04a:	e8 90 3e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f04f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f052:	83 c4 10             	add    esp,0x10
c001f055:	e9 84 fe ff ff       	jmp    c001eede <Vm::faultHandler(regs*)+0xad>
c001f05a:	83 ec 0c             	sub    esp,0xc
c001f05d:	b3 02                	mov    bl,0x2
c001f05f:	68 6a c6 02 c0       	push   0xc002c66a
c001f064:	e8 76 3e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f069:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f06c:	83 c4 10             	add    esp,0x10
c001f06f:	e9 6a fe ff ff       	jmp    c001eede <Vm::faultHandler(regs*)+0xad>
c001f074:	83 ec 0c             	sub    esp,0xc
c001f077:	b3 03                	mov    bl,0x3
c001f079:	68 76 c6 02 c0       	push   0xc002c676
c001f07e:	e8 5c 3e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f083:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f086:	83 c4 10             	add    esp,0x10
c001f089:	e9 50 fe ff ff       	jmp    c001eede <Vm::faultHandler(regs*)+0xad>
c001f08e:	83 ec 0c             	sub    esp,0xc
c001f091:	b3 04                	mov    bl,0x4
c001f093:	68 7a c6 02 c0       	push   0xc002c67a
c001f098:	e8 42 3e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f09d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0a0:	83 c4 10             	add    esp,0x10
c001f0a3:	e9 36 fe ff ff       	jmp    c001eede <Vm::faultHandler(regs*)+0xad>
c001f0a8:	83 ec 0c             	sub    esp,0xc
c001f0ab:	b3 05                	mov    bl,0x5
c001f0ad:	68 7e c6 02 c0       	push   0xc002c67e
c001f0b2:	e8 28 3e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f0b7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0ba:	83 c4 10             	add    esp,0x10
c001f0bd:	e9 1c fe ff ff       	jmp    c001eede <Vm::faultHandler(regs*)+0xad>
c001f0c2:	83 ec 0c             	sub    esp,0xc
c001f0c5:	68 82 c6 02 c0       	push   0xc002c682
c001f0ca:	e8 10 3e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f0cf:	83 c4 10             	add    esp,0x10
c001f0d2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0d5:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f0da:	e9 ff fd ff ff       	jmp    c001eede <Vm::faultHandler(regs*)+0xad>
c001f0df:	50                   	push   eax
c001f0e0:	50                   	push   eax
c001f0e1:	6a 01                	push   0x1
c001f0e3:	68 87 c6 02 c0       	push   0xc002c687
c001f0e8:	e8 f2 3d ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f0ed:	83 c4 10             	add    esp,0x10
c001f0f0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0f3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f0f8:	e9 e1 fd ff ff       	jmp    c001eede <Vm::faultHandler(regs*)+0xad>
c001f0fd:	83 ec 0c             	sub    esp,0xc
c001f100:	68 95 c6 02 c0       	push   0xc002c695
c001f105:	e8 d5 3d ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f10a:	83 c4 10             	add    esp,0x10
c001f10d:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f110:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f115:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f118:	74 2f                	je     c001f149 <Vm::faultHandler(regs*)+0x318>
c001f11a:	83 ea 04             	sub    edx,0x4
c001f11d:	25 ff 0d 00 00       	and    eax,0xdff
c001f122:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f128:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f12b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f12e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f134:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f138:	0f 84 bf 04 00 00    	je     c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f13e:	80 cc 02             	or     ah,0x2
c001f141:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f144:	e9 b4 04 00 00       	jmp    c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f149:	83 ea 02             	sub    edx,0x2
c001f14c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f152:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f155:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f159:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f15f:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f163:	74 05                	je     c001f16a <Vm::faultHandler(regs*)+0x339>
c001f165:	80 cc 02             	or     ah,0x2
c001f168:	eb 03                	jmp    c001f16d <Vm::faultHandler(regs*)+0x33c>
c001f16a:	80 e4 fd             	and    ah,0xfd
c001f16d:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f171:	e9 87 04 00 00       	jmp    c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f176:	83 ec 0c             	sub    esp,0xc
c001f179:	68 9c c6 02 c0       	push   0xc002c69c
c001f17e:	e8 5c 3d ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f183:	83 c4 10             	add    esp,0x10
c001f186:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f18b:	74 28                	je     c001f1b5 <Vm::faultHandler(regs*)+0x384>
c001f18d:	8b 06                	mov    eax,DWORD PTR [esi]
c001f18f:	25 ff 0d 00 00       	and    eax,0xdff
c001f194:	0d 00 02 02 00       	or     eax,0x20200
c001f199:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f19c:	8b 06                	mov    eax,DWORD PTR [esi]
c001f19e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1a4:	c1 e8 09             	shr    eax,0x9
c001f1a7:	83 e0 01             	and    eax,0x1
c001f1aa:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1ad:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1b0:	83 c0 04             	add    eax,0x4
c001f1b3:	eb 24                	jmp    c001f1d9 <Vm::faultHandler(regs*)+0x3a8>
c001f1b5:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f1b8:	0d 00 02 02 00       	or     eax,0x20200
c001f1bd:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1c0:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f1c3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1c9:	66 c1 e8 09          	shr    ax,0x9
c001f1cd:	83 e0 01             	and    eax,0x1
c001f1d0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1d3:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1d6:	83 c0 02             	add    eax,0x2
c001f1d9:	25 ff ff 00 00       	and    eax,0xffff
c001f1de:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f1e1:	e9 17 04 00 00       	jmp    c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f1e6:	53                   	push   ebx
c001f1e7:	53                   	push   ebx
c001f1e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1ec:	50                   	push   eax
c001f1ed:	68 a2 c6 02 c0       	push   0xc002c6a2
c001f1f2:	e8 e8 3c ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f1f7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1fb:	83 c4 10             	add    esp,0x10
c001f1fe:	3c ee                	cmp    al,0xee
c001f200:	75 10                	jne    c001f212 <Vm::faultHandler(regs*)+0x3e1>
c001f202:	83 ec 0c             	sub    esp,0xc
c001f205:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f208:	e8 fa f8 ff ff       	call   c001eb07 <Vm::mainloop3(unsigned long)>
c001f20d:	e9 c0 03 00 00       	jmp    c001f5d2 <Vm::faultHandler(regs*)+0x7a1>
c001f212:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f216:	83 ec 0c             	sub    esp,0xc
c001f219:	53                   	push   ebx
c001f21a:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f21e:	53                   	push   ebx
c001f21f:	55                   	push   ebp
c001f220:	50                   	push   eax
c001f221:	57                   	push   edi
c001f222:	e8 0c fb ff ff       	call   c001ed33 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f227:	eb 36                	jmp    c001f25f <Vm::faultHandler(regs*)+0x42e>
c001f229:	83 ec 0c             	sub    esp,0xc
c001f22c:	68 ac c6 02 c0       	push   0xc002c6ac
c001f231:	e8 a9 3c ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f236:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f23b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f23f:	e9 8b 03 00 00       	jmp    c001f5cf <Vm::faultHandler(regs*)+0x79e>
c001f244:	83 ec 0c             	sub    esp,0xc
c001f247:	68 b1 c6 02 c0       	push   0xc002c6b1
c001f24c:	e8 8e 3c ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f251:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f256:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f25a:	e9 70 03 00 00       	jmp    c001f5cf <Vm::faultHandler(regs*)+0x79e>
c001f25f:	83 c4 20             	add    esp,0x20
c001f262:	e9 99 03 00 00       	jmp    c001f600 <Vm::faultHandler(regs*)+0x7cf>
c001f267:	83 ec 0c             	sub    esp,0xc
c001f26a:	68 ef c6 02 c0       	push   0xc002c6ef
c001f26f:	e8 6b 3c ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f274:	83 c4 10             	add    esp,0x10
c001f277:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f27a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f27f:	74 0d                	je     c001f28e <Vm::faultHandler(regs*)+0x45d>
c001f281:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f288:	0f 87 9e 01 00 00    	ja     c001f42c <Vm::faultHandler(regs*)+0x5fb>
c001f28e:	83 ec 0c             	sub    esp,0xc
c001f291:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f295:	0f b7 db             	movzx  ebx,bx
c001f298:	50                   	push   eax
c001f299:	e8 9e f7 ff ff       	call   c001ea3c <Vm::inbv(unsigned short)>
c001f29e:	83 c4 0c             	add    esp,0xc
c001f2a1:	0f b6 c0             	movzx  eax,al
c001f2a4:	50                   	push   eax
c001f2a5:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f2a9:	50                   	push   eax
c001f2aa:	53                   	push   ebx
c001f2ab:	e8 41 fb ff ff       	call   c001edf1 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f2b0:	83 c4 10             	add    esp,0x10
c001f2b3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2b6:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2ba:	74 03                	je     c001f2bf <Vm::faultHandler(regs*)+0x48e>
c001f2bc:	48                   	dec    eax
c001f2bd:	eb 01                	jmp    c001f2c0 <Vm::faultHandler(regs*)+0x48f>
c001f2bf:	40                   	inc    eax
c001f2c0:	0f b7 c0             	movzx  eax,ax
c001f2c3:	eb 7f                	jmp    c001f344 <Vm::faultHandler(regs*)+0x513>
c001f2c5:	83 ec 0c             	sub    esp,0xc
c001f2c8:	68 21 c7 02 c0       	push   0xc002c721
c001f2cd:	e8 0d 3c ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f2d2:	83 c4 10             	add    esp,0x10
c001f2d5:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2dd:	74 0d                	je     c001f2ec <Vm::faultHandler(regs*)+0x4bb>
c001f2df:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2e6:	0f 87 40 01 00 00    	ja     c001f42c <Vm::faultHandler(regs*)+0x5fb>
c001f2ec:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f2ef:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f2f3:	0f b7 db             	movzx  ebx,bx
c001f2f6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2fb:	74 20                	je     c001f31d <Vm::faultHandler(regs*)+0x4ec>
c001f2fd:	ed                   	in     eax,dx
c001f2fe:	51                   	push   ecx
c001f2ff:	50                   	push   eax
c001f300:	56                   	push   esi
c001f301:	53                   	push   ebx
c001f302:	e8 15 fb ff ff       	call   c001ee1c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f307:	83 c4 10             	add    esp,0x10
c001f30a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f30d:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f311:	74 05                	je     c001f318 <Vm::faultHandler(regs*)+0x4e7>
c001f313:	83 e8 04             	sub    eax,0x4
c001f316:	eb 27                	jmp    c001f33f <Vm::faultHandler(regs*)+0x50e>
c001f318:	83 c0 04             	add    eax,0x4
c001f31b:	eb 22                	jmp    c001f33f <Vm::faultHandler(regs*)+0x50e>
c001f31d:	66 ed                	in     ax,dx
c001f31f:	0f b7 c0             	movzx  eax,ax
c001f322:	52                   	push   edx
c001f323:	50                   	push   eax
c001f324:	56                   	push   esi
c001f325:	53                   	push   ebx
c001f326:	e8 db fa ff ff       	call   c001ee06 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f32b:	83 c4 10             	add    esp,0x10
c001f32e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f331:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f335:	74 05                	je     c001f33c <Vm::faultHandler(regs*)+0x50b>
c001f337:	83 e8 02             	sub    eax,0x2
c001f33a:	eb 03                	jmp    c001f33f <Vm::faultHandler(regs*)+0x50e>
c001f33c:	83 c0 02             	add    eax,0x2
c001f33f:	25 ff ff 00 00       	and    eax,0xffff
c001f344:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f347:	e9 b1 02 00 00       	jmp    c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f34c:	83 ec 0c             	sub    esp,0xc
c001f34f:	4b                   	dec    ebx
c001f350:	68 27 c7 02 c0       	push   0xc002c727
c001f355:	e8 85 3b ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f35a:	83 c4 10             	add    esp,0x10
c001f35d:	80 fb 05             	cmp    bl,0x5
c001f360:	77 0a                	ja     c001f36c <Vm::faultHandler(regs*)+0x53b>
c001f362:	0f b6 db             	movzx  ebx,bl
c001f365:	ff 24 9d 98 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3868]
c001f36c:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f370:	eb 1b                	jmp    c001f38d <Vm::faultHandler(regs*)+0x55c>
c001f372:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f376:	eb 15                	jmp    c001f38d <Vm::faultHandler(regs*)+0x55c>
c001f378:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f37c:	eb 0f                	jmp    c001f38d <Vm::faultHandler(regs*)+0x55c>
c001f37e:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f382:	eb 09                	jmp    c001f38d <Vm::faultHandler(regs*)+0x55c>
c001f384:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f387:	eb 04                	jmp    c001f38d <Vm::faultHandler(regs*)+0x55c>
c001f389:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f38d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f392:	74 0d                	je     c001f3a1 <Vm::faultHandler(regs*)+0x570>
c001f394:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f39b:	0f 87 8b 00 00 00    	ja     c001f42c <Vm::faultHandler(regs*)+0x5fb>
c001f3a1:	53                   	push   ebx
c001f3a2:	53                   	push   ebx
c001f3a3:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f3a7:	52                   	push   edx
c001f3a8:	50                   	push   eax
c001f3a9:	e8 0f fa ff ff       	call   c001edbd <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f3ae:	5e                   	pop    esi
c001f3af:	0f b6 c0             	movzx  eax,al
c001f3b2:	5d                   	pop    ebp
c001f3b3:	50                   	push   eax
c001f3b4:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3b8:	50                   	push   eax
c001f3b9:	e8 91 f6 ff ff       	call   c001ea4f <Vm::outbv(unsigned short, unsigned char)>
c001f3be:	83 c4 10             	add    esp,0x10
c001f3c1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f3c4:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3c8:	74 03                	je     c001f3cd <Vm::faultHandler(regs*)+0x59c>
c001f3ca:	48                   	dec    eax
c001f3cb:	eb 01                	jmp    c001f3ce <Vm::faultHandler(regs*)+0x59d>
c001f3cd:	40                   	inc    eax
c001f3ce:	0f b7 c0             	movzx  eax,ax
c001f3d1:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f3d4:	e9 24 02 00 00       	jmp    c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f3d9:	83 ec 0c             	sub    esp,0xc
c001f3dc:	4b                   	dec    ebx
c001f3dd:	68 27 c7 02 c0       	push   0xc002c727
c001f3e2:	e8 f8 3a ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f3e7:	83 c4 10             	add    esp,0x10
c001f3ea:	80 fb 05             	cmp    bl,0x5
c001f3ed:	77 0a                	ja     c001f3f9 <Vm::faultHandler(regs*)+0x5c8>
c001f3ef:	0f b6 db             	movzx  ebx,bl
c001f3f2:	ff 24 9d b0 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3850]
c001f3f9:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3fd:	eb 1b                	jmp    c001f41a <Vm::faultHandler(regs*)+0x5e9>
c001f3ff:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f403:	eb 15                	jmp    c001f41a <Vm::faultHandler(regs*)+0x5e9>
c001f405:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f409:	eb 0f                	jmp    c001f41a <Vm::faultHandler(regs*)+0x5e9>
c001f40b:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f40f:	eb 09                	jmp    c001f41a <Vm::faultHandler(regs*)+0x5e9>
c001f411:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f414:	eb 04                	jmp    c001f41a <Vm::faultHandler(regs*)+0x5e9>
c001f416:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f41a:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f41d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f422:	74 39                	je     c001f45d <Vm::faultHandler(regs*)+0x62c>
c001f424:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f42a:	76 31                	jbe    c001f45d <Vm::faultHandler(regs*)+0x62c>
c001f42c:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f430:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f434:	51                   	push   ecx
c001f435:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f439:	51                   	push   ecx
c001f43a:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f43e:	51                   	push   ecx
c001f43f:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f443:	51                   	push   ecx
c001f444:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f448:	52                   	push   edx
c001f449:	50                   	push   eax
c001f44a:	50                   	push   eax
c001f44b:	68 f4 c6 02 c0       	push   0xc002c6f4
c001f450:	e8 8a 3a ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f455:	83 c4 20             	add    esp,0x20
c001f458:	e9 fb 01 00 00       	jmp    c001f658 <Vm::faultHandler(regs*)+0x827>
c001f45d:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f460:	0f b7 d3             	movzx  edx,bx
c001f463:	81 e6 00 04 00 00    	and    esi,0x400
c001f469:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f46c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f471:	74 1d                	je     c001f490 <Vm::faultHandler(regs*)+0x65f>
c001f473:	51                   	push   ecx
c001f474:	51                   	push   ecx
c001f475:	52                   	push   edx
c001f476:	50                   	push   eax
c001f477:	e8 64 f9 ff ff       	call   c001ede0 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f47c:	83 c4 10             	add    esp,0x10
c001f47f:	89 ea                	mov    edx,ebp
c001f481:	ef                   	out    dx,eax
c001f482:	85 f6                	test   esi,esi
c001f484:	74 05                	je     c001f48b <Vm::faultHandler(regs*)+0x65a>
c001f486:	83 eb 04             	sub    ebx,0x4
c001f489:	eb 21                	jmp    c001f4ac <Vm::faultHandler(regs*)+0x67b>
c001f48b:	83 c3 04             	add    ebx,0x4
c001f48e:	eb 1c                	jmp    c001f4ac <Vm::faultHandler(regs*)+0x67b>
c001f490:	51                   	push   ecx
c001f491:	51                   	push   ecx
c001f492:	52                   	push   edx
c001f493:	50                   	push   eax
c001f494:	e8 35 f9 ff ff       	call   c001edce <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f499:	83 c4 10             	add    esp,0x10
c001f49c:	89 ea                	mov    edx,ebp
c001f49e:	66 ef                	out    dx,ax
c001f4a0:	85 f6                	test   esi,esi
c001f4a2:	74 05                	je     c001f4a9 <Vm::faultHandler(regs*)+0x678>
c001f4a4:	83 eb 02             	sub    ebx,0x2
c001f4a7:	eb 03                	jmp    c001f4ac <Vm::faultHandler(regs*)+0x67b>
c001f4a9:	83 c3 02             	add    ebx,0x2
c001f4ac:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f4b2:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f4b5:	e9 43 01 00 00       	jmp    c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f4ba:	53                   	push   ebx
c001f4bb:	53                   	push   ebx
c001f4bc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4c0:	50                   	push   eax
c001f4c1:	68 2d c7 02 c0       	push   0xc002c72d
c001f4c6:	e8 14 3a ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f4cb:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f4d2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4d6:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4d9:	e8 5e f5 ff ff       	call   c001ea3c <Vm::inbv(unsigned short)>
c001f4de:	0f b6 c0             	movzx  eax,al
c001f4e1:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f4e4:	eb 5e                	jmp    c001f544 <Vm::faultHandler(regs*)+0x713>
c001f4e6:	51                   	push   ecx
c001f4e7:	51                   	push   ecx
c001f4e8:	53                   	push   ebx
c001f4e9:	68 33 c7 02 c0       	push   0xc002c733
c001f4ee:	e8 ec 39 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f4f3:	83 c4 10             	add    esp,0x10
c001f4f6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4fb:	74 07                	je     c001f504 <Vm::faultHandler(regs*)+0x6d3>
c001f4fd:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f501:	ed                   	in     eax,dx
c001f502:	eb 14                	jmp    c001f518 <Vm::faultHandler(regs*)+0x6e7>
c001f504:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f507:	66 31 db             	xor    bx,bx
c001f50a:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f50d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f511:	66 ed                	in     ax,dx
c001f513:	0f b7 c0             	movzx  eax,ax
c001f516:	09 d8                	or     eax,ebx
c001f518:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f51b:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f51f:	e9 dc 00 00 00       	jmp    c001f600 <Vm::faultHandler(regs*)+0x7cf>
c001f524:	50                   	push   eax
c001f525:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f528:	53                   	push   ebx
c001f529:	68 39 c7 02 c0       	push   0xc002c739
c001f52e:	e8 ac 39 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f533:	58                   	pop    eax
c001f534:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f538:	5a                   	pop    edx
c001f539:	50                   	push   eax
c001f53a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f53e:	50                   	push   eax
c001f53f:	e8 0b f5 ff ff       	call   c001ea4f <Vm::outbv(unsigned short, unsigned char)>
c001f544:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f548:	e9 85 00 00 00       	jmp    c001f5d2 <Vm::faultHandler(regs*)+0x7a1>
c001f54d:	50                   	push   eax
c001f54e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f551:	53                   	push   ebx
c001f552:	68 42 c7 02 c0       	push   0xc002c742
c001f557:	e8 83 39 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f55c:	83 c4 10             	add    esp,0x10
c001f55f:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f563:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f568:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f56b:	74 03                	je     c001f570 <Vm::faultHandler(regs*)+0x73f>
c001f56d:	ef                   	out    dx,eax
c001f56e:	eb ab                	jmp    c001f51b <Vm::faultHandler(regs*)+0x6ea>
c001f570:	66 ef                	out    dx,ax
c001f572:	eb a7                	jmp    c001f51b <Vm::faultHandler(regs*)+0x6ea>
c001f574:	55                   	push   ebp
c001f575:	55                   	push   ebp
c001f576:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f579:	68 4b c7 02 c0       	push   0xc002c74b
c001f57e:	e8 5c 39 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f583:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f58a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f58e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f591:	e8 a6 f4 ff ff       	call   c001ea3c <Vm::inbv(unsigned short)>
c001f596:	0f b6 c0             	movzx  eax,al
c001f599:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f59c:	eb 31                	jmp    c001f5cf <Vm::faultHandler(regs*)+0x79e>
c001f59e:	56                   	push   esi
c001f59f:	56                   	push   esi
c001f5a0:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5a3:	68 51 c7 02 c0       	push   0xc002c751
c001f5a8:	e8 32 39 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f5ad:	83 c4 10             	add    esp,0x10
c001f5b0:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5b3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5b8:	74 03                	je     c001f5bd <Vm::faultHandler(regs*)+0x78c>
c001f5ba:	ed                   	in     eax,dx
c001f5bb:	eb 0d                	jmp    c001f5ca <Vm::faultHandler(regs*)+0x799>
c001f5bd:	66 ed                	in     ax,dx
c001f5bf:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f5c2:	0f b7 c0             	movzx  eax,ax
c001f5c5:	66 31 d2             	xor    dx,dx
c001f5c8:	09 d0                	or     eax,edx
c001f5ca:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f5cd:	eb 2e                	jmp    c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f5cf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5d2:	83 c4 10             	add    esp,0x10
c001f5d5:	eb 29                	jmp    c001f600 <Vm::faultHandler(regs*)+0x7cf>
c001f5d7:	50                   	push   eax
c001f5d8:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5db:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5de:	68 60 c7 02 c0       	push   0xc002c760
c001f5e3:	e8 f7 38 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f5e8:	83 c4 10             	add    esp,0x10
c001f5eb:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5ee:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5f3:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5f6:	74 03                	je     c001f5fb <Vm::faultHandler(regs*)+0x7ca>
c001f5f8:	ef                   	out    dx,eax
c001f5f9:	eb 02                	jmp    c001f5fd <Vm::faultHandler(regs*)+0x7cc>
c001f5fb:	66 ef                	out    dx,ax
c001f5fd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f600:	b0 01                	mov    al,0x1
c001f602:	eb 56                	jmp    c001f65a <Vm::faultHandler(regs*)+0x829>
c001f604:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f608:	51                   	push   ecx
c001f609:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f60d:	51                   	push   ecx
c001f60e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f612:	51                   	push   ecx
c001f613:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f617:	51                   	push   ecx
c001f618:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f61c:	52                   	push   edx
c001f61d:	50                   	push   eax
c001f61e:	50                   	push   eax
c001f61f:	68 69 c7 02 c0       	push   0xc002c769
c001f624:	e8 b6 38 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c001f629:	83 c4 20             	add    esp,0x20
c001f62c:	83 ec 0c             	sub    esp,0xc
c001f62f:	6a 60                	push   0x60
c001f631:	e8 06 f4 ff ff       	call   c001ea3c <Vm::inbv(unsigned short)>
c001f636:	83 c4 10             	add    esp,0x10
c001f639:	3c 1c                	cmp    al,0x1c
c001f63b:	74 04                	je     c001f641 <Vm::faultHandler(regs*)+0x810>
c001f63d:	3c 5a                	cmp    al,0x5a
c001f63f:	75 eb                	jne    c001f62c <Vm::faultHandler(regs*)+0x7fb>
c001f641:	3c 1c                	cmp    al,0x1c
c001f643:	74 04                	je     c001f649 <Vm::faultHandler(regs*)+0x818>
c001f645:	3c 5a                	cmp    al,0x5a
c001f647:	75 0f                	jne    c001f658 <Vm::faultHandler(regs*)+0x827>
c001f649:	83 ec 0c             	sub    esp,0xc
c001f64c:	6a 60                	push   0x60
c001f64e:	e8 e9 f3 ff ff       	call   c001ea3c <Vm::inbv(unsigned short)>
c001f653:	83 c4 10             	add    esp,0x10
c001f656:	eb e9                	jmp    c001f641 <Vm::faultHandler(regs*)+0x810>
c001f658:	31 c0                	xor    eax,eax
c001f65a:	83 c4 1c             	add    esp,0x1c
c001f65d:	5b                   	pop    ebx
c001f65e:	5e                   	pop    esi
c001f65f:	5f                   	pop    edi
c001f660:	5d                   	pop    ebp
c001f661:	c3                   	ret    

c001f662 <Vm::fpuInternalTo32(unsigned long long)>:
c001f662:	57                   	push   edi
c001f663:	56                   	push   esi
c001f664:	53                   	push   ebx
c001f665:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f66d:	89 d6                	mov    esi,edx
c001f66f:	89 d7                	mov    edi,edx
c001f671:	89 c1                	mov    ecx,eax
c001f673:	c1 ef 14             	shr    edi,0x14
c001f676:	89 d3                	mov    ebx,edx
c001f678:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f67e:	31 d2                	xor    edx,edx
c001f680:	89 f8                	mov    eax,edi
c001f682:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f688:	bf ff 00 00 00       	mov    edi,0xff
c001f68d:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f692:	83 d2 ff             	adc    edx,0xffffffff
c001f695:	39 c7                	cmp    edi,eax
c001f697:	bf 00 00 00 00       	mov    edi,0x0
c001f69c:	19 d7                	sbb    edi,edx
c001f69e:	72 15                	jb     c001f6b5 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f6a0:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f6a4:	c1 e0 17             	shl    eax,0x17
c001f6a7:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f6ad:	09 f1                	or     ecx,esi
c001f6af:	09 c1                	or     ecx,eax
c001f6b1:	89 cf                	mov    edi,ecx
c001f6b3:	eb 02                	jmp    c001f6b7 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f6b5:	31 ff                	xor    edi,edi
c001f6b7:	89 f8                	mov    eax,edi
c001f6b9:	5b                   	pop    ebx
c001f6ba:	5e                   	pop    esi
c001f6bb:	5f                   	pop    edi
c001f6bc:	c3                   	ret    

c001f6bd <Vm::fpuInternalTo64(unsigned long long)>:
c001f6bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6c5:	c3                   	ret    

c001f6c6 <Vm::fpu32ToInternal(unsigned int)>:
c001f6c6:	57                   	push   edi
c001f6c7:	31 ff                	xor    edi,edi
c001f6c9:	56                   	push   esi
c001f6ca:	53                   	push   ebx
c001f6cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6cf:	89 cb                	mov    ebx,ecx
c001f6d1:	89 ce                	mov    esi,ecx
c001f6d3:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f6d9:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f6df:	c1 e9 17             	shr    ecx,0x17
c001f6e2:	89 f0                	mov    eax,esi
c001f6e4:	0f b6 d1             	movzx  edx,cl
c001f6e7:	81 c2 80 03 00 00    	add    edx,0x380
c001f6ed:	89 d1                	mov    ecx,edx
c001f6ef:	89 fa                	mov    edx,edi
c001f6f1:	c1 e1 14             	shl    ecx,0x14
c001f6f4:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f6f8:	c1 e0 1d             	shl    eax,0x1d
c001f6fb:	89 d7                	mov    edi,edx
c001f6fd:	89 c6                	mov    esi,eax
c001f6ff:	89 ca                	mov    edx,ecx
c001f701:	89 f0                	mov    eax,esi
c001f703:	09 fa                	or     edx,edi
c001f705:	09 da                	or     edx,ebx
c001f707:	5b                   	pop    ebx
c001f708:	5e                   	pop    esi
c001f709:	5f                   	pop    edi
c001f70a:	c3                   	ret    

c001f70b <Vm::fpu64ToInternal(unsigned long long)>:
c001f70b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f70f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f713:	c3                   	ret    

c001f714 <Vm::fpuFloatToLong(unsigned long long)>:
c001f714:	57                   	push   edi
c001f715:	31 c0                	xor    eax,eax
c001f717:	56                   	push   esi
c001f718:	31 d2                	xor    edx,edx
c001f71a:	53                   	push   ebx
c001f71b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f71f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f723:	89 d9                	mov    ecx,ebx
c001f725:	c1 e9 14             	shr    ecx,0x14
c001f728:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f72e:	89 cf                	mov    edi,ecx
c001f730:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f736:	78 33                	js     c001f76b <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f738:	89 d9                	mov    ecx,ebx
c001f73a:	89 f0                	mov    eax,esi
c001f73c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f742:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f748:	89 ca                	mov    edx,ecx
c001f74a:	b9 34 00 00 00       	mov    ecx,0x34
c001f74f:	29 f9                	sub    ecx,edi
c001f751:	0f ad d0             	shrd   eax,edx,cl
c001f754:	d3 fa                	sar    edx,cl
c001f756:	f6 c1 20             	test   cl,0x20
c001f759:	74 05                	je     c001f760 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f75b:	89 d0                	mov    eax,edx
c001f75d:	c1 fa 1f             	sar    edx,0x1f
c001f760:	85 db                	test   ebx,ebx
c001f762:	79 07                	jns    c001f76b <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f764:	f7 d8                	neg    eax
c001f766:	83 d2 00             	adc    edx,0x0
c001f769:	f7 da                	neg    edx
c001f76b:	5b                   	pop    ebx
c001f76c:	5e                   	pop    esi
c001f76d:	5f                   	pop    edi
c001f76e:	c3                   	ret    

c001f76f <Vm::fpuULongToFloat(unsigned long long)>:
c001f76f:	57                   	push   edi
c001f770:	31 c9                	xor    ecx,ecx
c001f772:	56                   	push   esi
c001f773:	53                   	push   ebx
c001f774:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f778:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f77c:	0f ba e7 14          	bt     edi,0x14
c001f780:	72 07                	jb     c001f789 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f782:	01 f6                	add    esi,esi
c001f784:	11 ff                	adc    edi,edi
c001f786:	41                   	inc    ecx
c001f787:	eb f3                	jmp    c001f77c <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f789:	89 fa                	mov    edx,edi
c001f78b:	89 f0                	mov    eax,esi
c001f78d:	bb 33 04 00 00       	mov    ebx,0x433
c001f792:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f798:	29 cb                	sub    ebx,ecx
c001f79a:	89 d9                	mov    ecx,ebx
c001f79c:	5b                   	pop    ebx
c001f79d:	c1 e1 14             	shl    ecx,0x14
c001f7a0:	5e                   	pop    esi
c001f7a1:	09 ca                	or     edx,ecx
c001f7a3:	5f                   	pop    edi
c001f7a4:	c3                   	ret    

c001f7a5 <Vm::fpuLongToFloat(long long)>:
c001f7a5:	56                   	push   esi
c001f7a6:	31 c0                	xor    eax,eax
c001f7a8:	53                   	push   ebx
c001f7a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f7b1:	39 c8                	cmp    eax,ecx
c001f7b3:	19 d8                	sbb    eax,ebx
c001f7b5:	7d 04                	jge    c001f7bb <Vm::fpuLongToFloat(long long)+0x16>
c001f7b7:	31 f6                	xor    esi,esi
c001f7b9:	eb 0c                	jmp    c001f7c7 <Vm::fpuLongToFloat(long long)+0x22>
c001f7bb:	f7 d9                	neg    ecx
c001f7bd:	be 01 00 00 00       	mov    esi,0x1
c001f7c2:	83 d3 00             	adc    ebx,0x0
c001f7c5:	f7 db                	neg    ebx
c001f7c7:	31 c0                	xor    eax,eax
c001f7c9:	0f ba e3 14          	bt     ebx,0x14
c001f7cd:	72 07                	jb     c001f7d6 <Vm::fpuLongToFloat(long long)+0x31>
c001f7cf:	01 c9                	add    ecx,ecx
c001f7d1:	11 db                	adc    ebx,ebx
c001f7d3:	40                   	inc    eax
c001f7d4:	eb f3                	jmp    c001f7c9 <Vm::fpuLongToFloat(long long)+0x24>
c001f7d6:	ba 33 04 00 00       	mov    edx,0x433
c001f7db:	29 c2                	sub    edx,eax
c001f7dd:	89 c8                	mov    eax,ecx
c001f7df:	c1 e2 14             	shl    edx,0x14
c001f7e2:	89 d9                	mov    ecx,ebx
c001f7e4:	89 f3                	mov    ebx,esi
c001f7e6:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7ec:	09 ca                	or     edx,ecx
c001f7ee:	84 db                	test   bl,bl
c001f7f0:	74 06                	je     c001f7f8 <Vm::fpuLongToFloat(long long)+0x53>
c001f7f2:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f7f8:	5b                   	pop    ebx
c001f7f9:	5e                   	pop    esi
c001f7fa:	c3                   	ret    

c001f7fb <Vm::fpuGet0()>:
c001f7fb:	31 c0                	xor    eax,eax
c001f7fd:	31 d2                	xor    edx,edx
c001f7ff:	c3                   	ret    

c001f800 <Vm::fpuGet1()>:
c001f800:	b8 01 00 00 00       	mov    eax,0x1
c001f805:	31 d2                	xor    edx,edx
c001f807:	c3                   	ret    

c001f808 <Vm::fpuGetPi()>:
c001f808:	b8 03 00 00 00       	mov    eax,0x3
c001f80d:	31 d2                	xor    edx,edx
c001f80f:	c3                   	ret    

c001f810 <Vm::fpuGetLog2E()>:
c001f810:	83 ec 18             	sub    esp,0x18
c001f813:	68 c8 c7 02 c0       	push   0xc002c7c8
c001f818:	e8 ee ad ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001f81d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f822:	31 d2                	xor    edx,edx
c001f824:	83 c4 1c             	add    esp,0x1c
c001f827:	c3                   	ret    

c001f828 <Vm::fpuGetLogE2()>:
c001f828:	83 ec 18             	sub    esp,0x18
c001f82b:	68 d4 c7 02 c0       	push   0xc002c7d4
c001f830:	e8 d6 ad ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001f835:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f83a:	31 d2                	xor    edx,edx
c001f83c:	83 c4 1c             	add    esp,0x1c
c001f83f:	c3                   	ret    

c001f840 <Vm::fpuGetLog210()>:
c001f840:	83 ec 18             	sub    esp,0x18
c001f843:	68 e0 c7 02 c0       	push   0xc002c7e0
c001f848:	e8 be ad ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001f84d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f852:	31 d2                	xor    edx,edx
c001f854:	83 c4 1c             	add    esp,0x1c
c001f857:	c3                   	ret    

c001f858 <Vm::fpuGetLog102()>:
c001f858:	83 ec 18             	sub    esp,0x18
c001f85b:	68 ed c7 02 c0       	push   0xc002c7ed
c001f860:	e8 a6 ad ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001f865:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f86a:	31 d2                	xor    edx,edx
c001f86c:	83 c4 1c             	add    esp,0x1c
c001f86f:	c3                   	ret    

c001f870 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f870:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f874:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f87c:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f880:	0f 92 c0             	setb   al
c001f883:	c3                   	ret    

c001f884 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f884:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88c:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f890:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f894:	09 c2                	or     edx,eax
c001f896:	0f 94 c0             	sete   al
c001f899:	c3                   	ret    

c001f89a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f89a:	57                   	push   edi
c001f89b:	56                   	push   esi
c001f89c:	53                   	push   ebx
c001f89d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f8a1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8a5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f8a9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f8ad:	57                   	push   edi
c001f8ae:	56                   	push   esi
c001f8af:	53                   	push   ebx
c001f8b0:	51                   	push   ecx
c001f8b1:	e8 ce ff ff ff       	call   c001f884 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f8b6:	83 c4 10             	add    esp,0x10
c001f8b9:	88 c2                	mov    dl,al
c001f8bb:	31 c0                	xor    eax,eax
c001f8bd:	84 d2                	test   dl,dl
c001f8bf:	75 0c                	jne    c001f8cd <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f8c1:	57                   	push   edi
c001f8c2:	56                   	push   esi
c001f8c3:	53                   	push   ebx
c001f8c4:	51                   	push   ecx
c001f8c5:	e8 a6 ff ff ff       	call   c001f870 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f8ca:	83 c4 10             	add    esp,0x10
c001f8cd:	83 e0 01             	and    eax,0x1
c001f8d0:	5b                   	pop    ebx
c001f8d1:	88 c1                	mov    cl,al
c001f8d3:	83 e2 01             	and    edx,0x1
c001f8d6:	a0 41 1a 03 c0       	mov    al,ds:0xc0031a41
c001f8db:	c1 e2 06             	shl    edx,0x6
c001f8de:	83 e0 ba             	and    eax,0xffffffba
c001f8e1:	5e                   	pop    esi
c001f8e2:	09 c8                	or     eax,ecx
c001f8e4:	5f                   	pop    edi
c001f8e5:	09 d0                	or     eax,edx
c001f8e7:	a2 41 1a 03 c0       	mov    ds:0xc0031a41,al
c001f8ec:	c3                   	ret    

c001f8ed <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f8ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8f5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f8f9:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f8fd:	c3                   	ret    

c001f8fe <Vm::fpuAbs(unsigned long long)>:
c001f8fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f902:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f906:	c3                   	ret    

c001f907 <Vm::fpuChs(unsigned long long)>:
c001f907:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f90b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f90f:	f7 d8                	neg    eax
c001f911:	83 d2 00             	adc    edx,0x0
c001f914:	f7 da                	neg    edx
c001f916:	c3                   	ret    

c001f917 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f917:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f91b:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f920:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f924:	eb c7                	jmp    c001f8ed <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f926 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f926:	53                   	push   ebx
c001f927:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f92b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f92f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f933:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f937:	0f af ca             	imul   ecx,edx
c001f93a:	0f af d8             	imul   ebx,eax
c001f93d:	f7 e2                	mul    edx
c001f93f:	01 d9                	add    ecx,ebx
c001f941:	5b                   	pop    ebx
c001f942:	01 ca                	add    edx,ecx
c001f944:	c3                   	ret    

c001f945 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f945:	83 ec 0c             	sub    esp,0xc
c001f948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f958:	e8 a7 70 00 00       	call   c0026a04 <__udivdi3>
c001f95d:	83 c4 1c             	add    esp,0x1c
c001f960:	c3                   	ret    

c001f961 <Vm::fpuSquare(unsigned long long)>:
c001f961:	50                   	push   eax
c001f962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f966:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f96a:	52                   	push   edx
c001f96b:	50                   	push   eax
c001f96c:	52                   	push   edx
c001f96d:	50                   	push   eax
c001f96e:	e8 b3 ff ff ff       	call   c001f926 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f973:	83 c4 14             	add    esp,0x14
c001f976:	c3                   	ret    

c001f977 <Vm::fpuGetReg(int)>:
c001f977:	83 ec 0c             	sub    esp,0xc
c001f97a:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f97f:	76 10                	jbe    c001f991 <Vm::fpuGetReg(int)+0x1a>
c001f981:	83 ec 0c             	sub    esp,0xc
c001f984:	68 fa c7 02 c0       	push   0xc002c7fa
c001f989:	e8 7d ac ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001f98e:	83 c4 10             	add    esp,0x10
c001f991:	a0 41 1a 03 c0       	mov    al,ds:0xc0031a41
c001f996:	b9 08 00 00 00       	mov    ecx,0x8
c001f99b:	c0 e8 03             	shr    al,0x3
c001f99e:	83 e0 07             	and    eax,0x7
c001f9a1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9a5:	99                   	cdq    
c001f9a6:	f7 f9                	idiv   ecx
c001f9a8:	8b 04 d5 44 1a 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce5bc]
c001f9af:	8b 14 d5 48 1a 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce5b8]
c001f9b6:	83 c4 0c             	add    esp,0xc
c001f9b9:	c3                   	ret    

c001f9ba <Vm::fpuSetReg(int, unsigned long long)>:
c001f9ba:	57                   	push   edi
c001f9bb:	56                   	push   esi
c001f9bc:	52                   	push   edx
c001f9bd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f9c1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f9c5:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9ca:	76 10                	jbe    c001f9dc <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f9cc:	83 ec 0c             	sub    esp,0xc
c001f9cf:	68 0d c8 02 c0       	push   0xc002c80d
c001f9d4:	e8 32 ac ff ff       	call   c001a60b <Krnl::panic(char const*)>
c001f9d9:	83 c4 10             	add    esp,0x10
c001f9dc:	a0 41 1a 03 c0       	mov    al,ds:0xc0031a41
c001f9e1:	b9 08 00 00 00       	mov    ecx,0x8
c001f9e6:	c0 e8 03             	shr    al,0x3
c001f9e9:	83 e0 07             	and    eax,0x7
c001f9ec:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9f0:	99                   	cdq    
c001f9f1:	f7 f9                	idiv   ecx
c001f9f3:	89 34 d5 44 1a 03 c0 	mov    DWORD PTR [edx*8-0x3ffce5bc],esi
c001f9fa:	89 3c d5 48 1a 03 c0 	mov    DWORD PTR [edx*8-0x3ffce5b8],edi
c001fa01:	58                   	pop    eax
c001fa02:	5e                   	pop    esi
c001fa03:	5f                   	pop    edi
c001fa04:	c3                   	ret    

c001fa05 <Vm::fpuPush(unsigned long long)>:
c001fa05:	a0 41 1a 03 c0       	mov    al,ds:0xc0031a41
c001fa0a:	c0 e8 03             	shr    al,0x3
c001fa0d:	83 e0 07             	and    eax,0x7
c001fa10:	83 c0 07             	add    eax,0x7
c001fa13:	88 c2                	mov    dl,al
c001fa15:	83 e0 07             	and    eax,0x7
c001fa18:	83 e2 07             	and    edx,0x7
c001fa1b:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa22:	8a 15 41 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031a41
c001fa28:	83 e2 c7             	and    edx,0xffffffc7
c001fa2b:	09 ca                	or     edx,ecx
c001fa2d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa31:	88 15 41 1a 03 c0    	mov    BYTE PTR ds:0xc0031a41,dl
c001fa37:	89 0c c5 48 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce5b8],ecx
c001fa3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa42:	89 14 c5 44 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce5bc],edx
c001fa49:	a1 84 1a 03 c0       	mov    eax,ds:0xc0031a84
c001fa4e:	83 f8 08             	cmp    eax,0x8
c001fa51:	75 08                	jne    c001fa5b <Vm::fpuPush(unsigned long long)+0x56>
c001fa53:	80 0d 40 1a 03 c0 40 	or     BYTE PTR ds:0xc0031a40,0x40
c001fa5a:	c3                   	ret    
c001fa5b:	40                   	inc    eax
c001fa5c:	a3 84 1a 03 c0       	mov    ds:0xc0031a84,eax
c001fa61:	c3                   	ret    

c001fa62 <Vm::fpuPop()>:
c001fa62:	8a 0d 41 1a 03 c0    	mov    cl,BYTE PTR ds:0xc0031a41
c001fa68:	53                   	push   ebx
c001fa69:	c0 e9 03             	shr    cl,0x3
c001fa6c:	8a 1d 41 1a 03 c0    	mov    bl,BYTE PTR ds:0xc0031a41
c001fa72:	83 e1 07             	and    ecx,0x7
c001fa75:	83 e3 c7             	and    ebx,0xffffffc7
c001fa78:	8b 04 cd 44 1a 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce5bc]
c001fa7f:	8b 14 cd 48 1a 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce5b8]
c001fa86:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa8d:	83 e1 38             	and    ecx,0x38
c001fa90:	09 d9                	or     ecx,ebx
c001fa92:	88 0d 41 1a 03 c0    	mov    BYTE PTR ds:0xc0031a41,cl
c001fa98:	8b 0d 84 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031a84
c001fa9e:	85 c9                	test   ecx,ecx
c001faa0:	74 09                	je     c001faab <Vm::fpuPop()+0x49>
c001faa2:	49                   	dec    ecx
c001faa3:	89 0d 84 1a 03 c0    	mov    DWORD PTR ds:0xc0031a84,ecx
c001faa9:	eb 07                	jmp    c001fab2 <Vm::fpuPop()+0x50>
c001faab:	80 0d 40 1a 03 c0 40 	or     BYTE PTR ds:0xc0031a40,0x40
c001fab2:	5b                   	pop    ebx
c001fab3:	c3                   	ret    

c001fab4 <Vm::x87Handler(regs*)>:
c001fab4:	55                   	push   ebp
c001fab5:	57                   	push   edi
c001fab6:	56                   	push   esi
c001fab7:	53                   	push   ebx
c001fab8:	83 ec 1c             	sub    esp,0x1c
c001fabb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fabf:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fac4:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fac7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001facf:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fad3:	50                   	push   eax
c001fad4:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fad8:	50                   	push   eax
c001fad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fadd:	50                   	push   eax
c001fade:	53                   	push   ebx
c001fadf:	e8 ee a1 ff ff       	call   c0019cd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fae4:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fae7:	83 c4 10             	add    esp,0x10
c001faea:	89 c6                	mov    esi,eax
c001faec:	80 fa d9             	cmp    dl,0xd9
c001faef:	0f 85 52 01 00 00    	jne    c001fc47 <Vm::x87Handler(regs*)+0x193>
c001faf5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faf9:	8d 50 20             	lea    edx,[eax+0x20]
c001fafc:	80 fa 0e             	cmp    dl,0xe
c001faff:	0f 87 86 00 00 00    	ja     c001fb8b <Vm::x87Handler(regs*)+0xd7>
c001fb05:	0f b6 d2             	movzx  edx,dl
c001fb08:	ff 24 95 20 c8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd37e0]
c001fb0f:	e8 e7 fc ff ff       	call   c001f7fb <Vm::fpuGet0()>
c001fb14:	eb 05                	jmp    c001fb1b <Vm::x87Handler(regs*)+0x67>
c001fb16:	e8 e5 fc ff ff       	call   c001f800 <Vm::fpuGet1()>
c001fb1b:	57                   	push   edi
c001fb1c:	57                   	push   edi
c001fb1d:	52                   	push   edx
c001fb1e:	50                   	push   eax
c001fb1f:	e8 e1 fe ff ff       	call   c001fa05 <Vm::fpuPush(unsigned long long)>
c001fb24:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb28:	83 c4 10             	add    esp,0x10
c001fb2b:	b0 01                	mov    al,0x1
c001fb2d:	e9 e3 09 00 00       	jmp    c0020515 <Vm::x87Handler(regs*)+0xa61>
c001fb32:	83 ec 0c             	sub    esp,0xc
c001fb35:	6a 00                	push   0x0
c001fb37:	e8 3b fe ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fb3c:	59                   	pop    ecx
c001fb3d:	5e                   	pop    esi
c001fb3e:	52                   	push   edx
c001fb3f:	50                   	push   eax
c001fb40:	e8 c2 fd ff ff       	call   c001f907 <Vm::fpuChs(unsigned long long)>
c001fb45:	eb 13                	jmp    c001fb5a <Vm::x87Handler(regs*)+0xa6>
c001fb47:	83 ec 0c             	sub    esp,0xc
c001fb4a:	6a 00                	push   0x0
c001fb4c:	e8 26 fe ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fb51:	5f                   	pop    edi
c001fb52:	5d                   	pop    ebp
c001fb53:	52                   	push   edx
c001fb54:	50                   	push   eax
c001fb55:	e8 a4 fd ff ff       	call   c001f8fe <Vm::fpuAbs(unsigned long long)>
c001fb5a:	83 c4 0c             	add    esp,0xc
c001fb5d:	52                   	push   edx
c001fb5e:	50                   	push   eax
c001fb5f:	6a 00                	push   0x0
c001fb61:	e8 54 fe ff ff       	call   c001f9ba <Vm::fpuSetReg(int, unsigned long long)>
c001fb66:	eb bc                	jmp    c001fb24 <Vm::x87Handler(regs*)+0x70>
c001fb68:	e8 d3 fc ff ff       	call   c001f840 <Vm::fpuGetLog210()>
c001fb6d:	eb ac                	jmp    c001fb1b <Vm::x87Handler(regs*)+0x67>
c001fb6f:	e8 9c fc ff ff       	call   c001f810 <Vm::fpuGetLog2E()>
c001fb74:	eb a5                	jmp    c001fb1b <Vm::x87Handler(regs*)+0x67>
c001fb76:	e8 8d fc ff ff       	call   c001f808 <Vm::fpuGetPi()>
c001fb7b:	eb 9e                	jmp    c001fb1b <Vm::x87Handler(regs*)+0x67>
c001fb7d:	e8 d6 fc ff ff       	call   c001f858 <Vm::fpuGetLog102()>
c001fb82:	eb 97                	jmp    c001fb1b <Vm::x87Handler(regs*)+0x67>
c001fb84:	e8 9f fc ff ff       	call   c001f828 <Vm::fpuGetLogE2()>
c001fb89:	eb 90                	jmp    c001fb1b <Vm::x87Handler(regs*)+0x67>
c001fb8b:	8d 50 40             	lea    edx,[eax+0x40]
c001fb8e:	80 fa 07             	cmp    dl,0x7
c001fb91:	77 15                	ja     c001fba8 <Vm::x87Handler(regs*)+0xf4>
c001fb93:	83 ec 0c             	sub    esp,0xc
c001fb96:	2d c0 00 00 00       	sub    eax,0xc0
c001fb9b:	50                   	push   eax
c001fb9c:	e8 d6 fd ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fba1:	59                   	pop    ecx
c001fba2:	5e                   	pop    esi
c001fba3:	e9 75 ff ff ff       	jmp    c001fb1d <Vm::x87Handler(regs*)+0x69>
c001fba8:	8d 50 38             	lea    edx,[eax+0x38]
c001fbab:	80 fa 07             	cmp    dl,0x7
c001fbae:	77 3c                	ja     c001fbec <Vm::x87Handler(regs*)+0x138>
c001fbb0:	83 ec 0c             	sub    esp,0xc
c001fbb3:	2d c8 00 00 00       	sub    eax,0xc8
c001fbb8:	50                   	push   eax
c001fbb9:	e8 b9 fd ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fbbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbc5:	89 c6                	mov    esi,eax
c001fbc7:	89 d7                	mov    edi,edx
c001fbc9:	e8 a9 fd ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fbce:	83 c4 0c             	add    esp,0xc
c001fbd1:	52                   	push   edx
c001fbd2:	50                   	push   eax
c001fbd3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbd7:	2d c8 00 00 00       	sub    eax,0xc8
c001fbdc:	50                   	push   eax
c001fbdd:	e8 d8 fd ff ff       	call   c001f9ba <Vm::fpuSetReg(int, unsigned long long)>
c001fbe2:	83 c4 0c             	add    esp,0xc
c001fbe5:	57                   	push   edi
c001fbe6:	56                   	push   esi
c001fbe7:	e9 73 ff ff ff       	jmp    c001fb5f <Vm::x87Handler(regs*)+0xab>
c001fbec:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbf0:	84 d2                	test   dl,dl
c001fbf2:	75 0f                	jne    c001fc03 <Vm::x87Handler(regs*)+0x14f>
c001fbf4:	83 ec 0c             	sub    esp,0xc
c001fbf7:	ff 36                	push   DWORD PTR [esi]
c001fbf9:	e8 c8 fa ff ff       	call   c001f6c6 <Vm::fpu32ToInternal(unsigned int)>
c001fbfe:	e9 bf 00 00 00       	jmp    c001fcc2 <Vm::x87Handler(regs*)+0x20e>
c001fc03:	80 fa 03             	cmp    dl,0x3
c001fc06:	75 13                	jne    c001fc1b <Vm::x87Handler(regs*)+0x167>
c001fc08:	e8 55 fe ff ff       	call   c001fa62 <Vm::fpuPop()>
c001fc0d:	55                   	push   ebp
c001fc0e:	55                   	push   ebp
c001fc0f:	52                   	push   edx
c001fc10:	50                   	push   eax
c001fc11:	e8 4c fa ff ff       	call   c001f662 <Vm::fpuInternalTo32(unsigned long long)>
c001fc16:	e9 88 00 00 00       	jmp    c001fca3 <Vm::x87Handler(regs*)+0x1ef>
c001fc1b:	80 fa 05             	cmp    dl,0x5
c001fc1e:	75 0e                	jne    c001fc2e <Vm::x87Handler(regs*)+0x17a>
c001fc20:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc23:	66 a3 42 1a 03 c0    	mov    ds:0xc0031a42,ax
c001fc29:	e9 df 00 00 00       	jmp    c001fd0d <Vm::x87Handler(regs*)+0x259>
c001fc2e:	31 c0                	xor    eax,eax
c001fc30:	80 fa 07             	cmp    dl,0x7
c001fc33:	0f 85 dc 08 00 00    	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c001fc39:	66 a1 42 1a 03 c0    	mov    ax,ds:0xc0031a42
c001fc3f:	66 89 06             	mov    WORD PTR [esi],ax
c001fc42:	e9 c6 00 00 00       	jmp    c001fd0d <Vm::x87Handler(regs*)+0x259>
c001fc47:	80 fa d8             	cmp    dl,0xd8
c001fc4a:	0f 84 c9 00 00 00    	je     c001fd19 <Vm::x87Handler(regs*)+0x265>
c001fc50:	80 fa dc             	cmp    dl,0xdc
c001fc53:	0f 84 0d 02 00 00    	je     c001fe66 <Vm::x87Handler(regs*)+0x3b2>
c001fc59:	80 fa de             	cmp    dl,0xde
c001fc5c:	0f 84 cd 02 00 00    	je     c001ff2f <Vm::x87Handler(regs*)+0x47b>
c001fc62:	80 fa dd             	cmp    dl,0xdd
c001fc65:	0f 84 5f 04 00 00    	je     c00200ca <Vm::x87Handler(regs*)+0x616>
c001fc6b:	80 fa da             	cmp    dl,0xda
c001fc6e:	0f 84 24 05 00 00    	je     c0020198 <Vm::x87Handler(regs*)+0x6e4>
c001fc74:	80 fa df             	cmp    dl,0xdf
c001fc77:	0f 84 68 05 00 00    	je     c00201e5 <Vm::x87Handler(regs*)+0x731>
c001fc7d:	31 c0                	xor    eax,eax
c001fc7f:	80 fa db             	cmp    dl,0xdb
c001fc82:	0f 85 8d 08 00 00    	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c001fc88:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc8c:	80 fa 03             	cmp    dl,0x3
c001fc8f:	0f 85 70 06 00 00    	jne    c0020305 <Vm::x87Handler(regs*)+0x851>
c001fc95:	e8 c8 fd ff ff       	call   c001fa62 <Vm::fpuPop()>
c001fc9a:	55                   	push   ebp
c001fc9b:	55                   	push   ebp
c001fc9c:	52                   	push   edx
c001fc9d:	50                   	push   eax
c001fc9e:	e8 71 fa ff ff       	call   c001f714 <Vm::fpuFloatToLong(unsigned long long)>
c001fca3:	83 c4 10             	add    esp,0x10
c001fca6:	89 06                	mov    DWORD PTR [esi],eax
c001fca8:	eb 63                	jmp    c001fd0d <Vm::x87Handler(regs*)+0x259>
c001fcaa:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcae:	84 d2                	test   dl,dl
c001fcb0:	0f 85 e6 05 00 00    	jne    c002029c <Vm::x87Handler(regs*)+0x7e8>
c001fcb6:	57                   	push   edi
c001fcb7:	57                   	push   edi
c001fcb8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcbb:	ff 36                	push   DWORD PTR [esi]
c001fcbd:	e8 49 fa ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c001fcc2:	5e                   	pop    esi
c001fcc3:	5f                   	pop    edi
c001fcc4:	52                   	push   edx
c001fcc5:	50                   	push   eax
c001fcc6:	e8 3a fd ff ff       	call   c001fa05 <Vm::fpuPush(unsigned long long)>
c001fccb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fccf:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcd2:	e9 51 fe ff ff       	jmp    c001fb28 <Vm::x87Handler(regs*)+0x74>
c001fcd7:	80 fa 03             	cmp    dl,0x3
c001fcda:	0f 85 d7 06 00 00    	jne    c00203b7 <Vm::x87Handler(regs*)+0x903>
c001fce0:	57                   	push   edi
c001fce1:	57                   	push   edi
c001fce2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fce5:	ff 36                	push   DWORD PTR [esi]
c001fce7:	e8 1f fa ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c001fcec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcf3:	89 c6                	mov    esi,eax
c001fcf5:	89 d7                	mov    edi,edx
c001fcf7:	e8 7b fc ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fcfc:	57                   	push   edi
c001fcfd:	56                   	push   esi
c001fcfe:	52                   	push   edx
c001fcff:	50                   	push   eax
c001fd00:	e8 95 fb ff ff       	call   c001f89a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd05:	83 c4 20             	add    esp,0x20
c001fd08:	e8 55 fd ff ff       	call   c001fa62 <Vm::fpuPop()>
c001fd0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd11:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd14:	e9 12 fe ff ff       	jmp    c001fb2b <Vm::x87Handler(regs*)+0x77>
c001fd19:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd1d:	8d 50 40             	lea    edx,[eax+0x40]
c001fd20:	80 fa 07             	cmp    dl,0x7
c001fd23:	77 29                	ja     c001fd4e <Vm::x87Handler(regs*)+0x29a>
c001fd25:	83 ec 0c             	sub    esp,0xc
c001fd28:	2d c0 00 00 00       	sub    eax,0xc0
c001fd2d:	50                   	push   eax
c001fd2e:	e8 44 fc ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fd33:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd3a:	89 c6                	mov    esi,eax
c001fd3c:	89 d7                	mov    edi,edx
c001fd3e:	e8 34 fc ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fd43:	57                   	push   edi
c001fd44:	56                   	push   esi
c001fd45:	52                   	push   edx
c001fd46:	50                   	push   eax
c001fd47:	e8 a1 fb ff ff       	call   c001f8ed <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd4c:	eb 2f                	jmp    c001fd7d <Vm::x87Handler(regs*)+0x2c9>
c001fd4e:	8d 50 38             	lea    edx,[eax+0x38]
c001fd51:	80 fa 07             	cmp    dl,0x7
c001fd54:	77 2f                	ja     c001fd85 <Vm::x87Handler(regs*)+0x2d1>
c001fd56:	83 ec 0c             	sub    esp,0xc
c001fd59:	2d c8 00 00 00       	sub    eax,0xc8
c001fd5e:	50                   	push   eax
c001fd5f:	e8 13 fc ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fd64:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd6b:	89 c6                	mov    esi,eax
c001fd6d:	89 d7                	mov    edi,edx
c001fd6f:	e8 03 fc ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fd74:	57                   	push   edi
c001fd75:	56                   	push   esi
c001fd76:	52                   	push   edx
c001fd77:	50                   	push   eax
c001fd78:	e8 a9 fb ff ff       	call   c001f926 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd7d:	83 c4 1c             	add    esp,0x1c
c001fd80:	e9 d8 fd ff ff       	jmp    c001fb5d <Vm::x87Handler(regs*)+0xa9>
c001fd85:	8d 50 30             	lea    edx,[eax+0x30]
c001fd88:	80 fa 07             	cmp    dl,0x7
c001fd8b:	77 0d                	ja     c001fd9a <Vm::x87Handler(regs*)+0x2e6>
c001fd8d:	83 ec 0c             	sub    esp,0xc
c001fd90:	2d d0 00 00 00       	sub    eax,0xd0
c001fd95:	e9 99 03 00 00       	jmp    c0020133 <Vm::x87Handler(regs*)+0x67f>
c001fd9a:	8d 50 28             	lea    edx,[eax+0x28]
c001fd9d:	80 fa 07             	cmp    dl,0x7
c001fda0:	77 0d                	ja     c001fdaf <Vm::x87Handler(regs*)+0x2fb>
c001fda2:	83 ec 0c             	sub    esp,0xc
c001fda5:	2d d8 00 00 00       	sub    eax,0xd8
c001fdaa:	e9 c0 03 00 00       	jmp    c002016f <Vm::x87Handler(regs*)+0x6bb>
c001fdaf:	8d 50 20             	lea    edx,[eax+0x20]
c001fdb2:	80 fa 07             	cmp    dl,0x7
c001fdb5:	77 1b                	ja     c001fdd2 <Vm::x87Handler(regs*)+0x31e>
c001fdb7:	83 ec 0c             	sub    esp,0xc
c001fdba:	2d e0 00 00 00       	sub    eax,0xe0
c001fdbf:	50                   	push   eax
c001fdc0:	e8 b2 fb ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fdc5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdcc:	89 c6                	mov    esi,eax
c001fdce:	89 d7                	mov    edi,edx
c001fdd0:	eb 22                	jmp    c001fdf4 <Vm::x87Handler(regs*)+0x340>
c001fdd2:	8d 50 18             	lea    edx,[eax+0x18]
c001fdd5:	80 fa 07             	cmp    dl,0x7
c001fdd8:	77 2d                	ja     c001fe07 <Vm::x87Handler(regs*)+0x353>
c001fdda:	83 ec 0c             	sub    esp,0xc
c001fddd:	6a 00                	push   0x0
c001fddf:	e8 93 fb ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fde4:	89 c6                	mov    esi,eax
c001fde6:	89 d7                	mov    edi,edx
c001fde8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdec:	2d e8 00 00 00       	sub    eax,0xe8
c001fdf1:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdf4:	e8 7e fb ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fdf9:	57                   	push   edi
c001fdfa:	56                   	push   esi
c001fdfb:	52                   	push   edx
c001fdfc:	50                   	push   eax
c001fdfd:	e8 15 fb ff ff       	call   c001f917 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe02:	e9 76 ff ff ff       	jmp    c001fd7d <Vm::x87Handler(regs*)+0x2c9>
c001fe07:	8d 50 10             	lea    edx,[eax+0x10]
c001fe0a:	80 fa 07             	cmp    dl,0x7
c001fe0d:	77 1b                	ja     c001fe2a <Vm::x87Handler(regs*)+0x376>
c001fe0f:	83 ec 0c             	sub    esp,0xc
c001fe12:	2d f0 00 00 00       	sub    eax,0xf0
c001fe17:	50                   	push   eax
c001fe18:	e8 5a fb ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fe1d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe24:	89 c6                	mov    esi,eax
c001fe26:	89 d7                	mov    edi,edx
c001fe28:	eb 22                	jmp    c001fe4c <Vm::x87Handler(regs*)+0x398>
c001fe2a:	3c f7                	cmp    al,0xf7
c001fe2c:	0f 86 d1 03 00 00    	jbe    c0020203 <Vm::x87Handler(regs*)+0x74f>
c001fe32:	83 ec 0c             	sub    esp,0xc
c001fe35:	6a 00                	push   0x0
c001fe37:	e8 3b fb ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fe3c:	89 c6                	mov    esi,eax
c001fe3e:	89 d7                	mov    edi,edx
c001fe40:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe44:	2d f8 00 00 00       	sub    eax,0xf8
c001fe49:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe4c:	e8 26 fb ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fe51:	57                   	push   edi
c001fe52:	56                   	push   esi
c001fe53:	52                   	push   edx
c001fe54:	50                   	push   eax
c001fe55:	e8 eb fa ff ff       	call   c001f945 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe5a:	83 c4 1c             	add    esp,0x1c
c001fe5d:	52                   	push   edx
c001fe5e:	50                   	push   eax
c001fe5f:	6a 00                	push   0x0
c001fe61:	e9 51 02 00 00       	jmp    c00200b7 <Vm::x87Handler(regs*)+0x603>
c001fe66:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe6a:	8d 50 40             	lea    edx,[eax+0x40]
c001fe6d:	80 fa 07             	cmp    dl,0x7
c001fe70:	77 37                	ja     c001fea9 <Vm::x87Handler(regs*)+0x3f5>
c001fe72:	83 ec 0c             	sub    esp,0xc
c001fe75:	2d c0 00 00 00       	sub    eax,0xc0
c001fe7a:	50                   	push   eax
c001fe7b:	e8 f7 fa ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fe80:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe87:	89 c6                	mov    esi,eax
c001fe89:	89 d7                	mov    edi,edx
c001fe8b:	e8 e7 fa ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fe90:	57                   	push   edi
c001fe91:	56                   	push   esi
c001fe92:	52                   	push   edx
c001fe93:	50                   	push   eax
c001fe94:	e8 54 fa ff ff       	call   c001f8ed <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe99:	83 c4 1c             	add    esp,0x1c
c001fe9c:	52                   	push   edx
c001fe9d:	50                   	push   eax
c001fe9e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea2:	2d c0 00 00 00       	sub    eax,0xc0
c001fea7:	eb 3d                	jmp    c001fee6 <Vm::x87Handler(regs*)+0x432>
c001fea9:	8d 50 38             	lea    edx,[eax+0x38]
c001feac:	80 fa 07             	cmp    dl,0x7
c001feaf:	77 3b                	ja     c001feec <Vm::x87Handler(regs*)+0x438>
c001feb1:	83 ec 0c             	sub    esp,0xc
c001feb4:	2d c8 00 00 00       	sub    eax,0xc8
c001feb9:	50                   	push   eax
c001feba:	e8 b8 fa ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001febf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fec6:	89 c6                	mov    esi,eax
c001fec8:	89 d7                	mov    edi,edx
c001feca:	e8 a8 fa ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001fecf:	57                   	push   edi
c001fed0:	56                   	push   esi
c001fed1:	52                   	push   edx
c001fed2:	50                   	push   eax
c001fed3:	e8 4e fa ff ff       	call   c001f926 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fed8:	83 c4 1c             	add    esp,0x1c
c001fedb:	52                   	push   edx
c001fedc:	50                   	push   eax
c001fedd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee1:	2d c8 00 00 00       	sub    eax,0xc8
c001fee6:	50                   	push   eax
c001fee7:	e9 75 fc ff ff       	jmp    c001fb61 <Vm::x87Handler(regs*)+0xad>
c001feec:	83 c0 18             	add    eax,0x18
c001feef:	3c 07                	cmp    al,0x7
c001fef1:	0f 87 3b 04 00 00    	ja     c0020332 <Vm::x87Handler(regs*)+0x87e>
c001fef7:	83 ec 0c             	sub    esp,0xc
c001fefa:	6a 00                	push   0x0
c001fefc:	e8 76 fa ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001ff01:	89 c6                	mov    esi,eax
c001ff03:	89 d7                	mov    edi,edx
c001ff05:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff09:	2d e8 00 00 00       	sub    eax,0xe8
c001ff0e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff11:	e8 61 fa ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001ff16:	57                   	push   edi
c001ff17:	56                   	push   esi
c001ff18:	52                   	push   edx
c001ff19:	50                   	push   eax
c001ff1a:	e8 f8 f9 ff ff       	call   c001f917 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff1f:	83 c4 1c             	add    esp,0x1c
c001ff22:	52                   	push   edx
c001ff23:	50                   	push   eax
c001ff24:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff28:	2d e8 00 00 00       	sub    eax,0xe8
c001ff2d:	eb b7                	jmp    c001fee6 <Vm::x87Handler(regs*)+0x432>
c001ff2f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff33:	8d 50 40             	lea    edx,[eax+0x40]
c001ff36:	80 fa 07             	cmp    dl,0x7
c001ff39:	77 3a                	ja     c001ff75 <Vm::x87Handler(regs*)+0x4c1>
c001ff3b:	83 ec 0c             	sub    esp,0xc
c001ff3e:	2d c0 00 00 00       	sub    eax,0xc0
c001ff43:	50                   	push   eax
c001ff44:	e8 2e fa ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001ff49:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff50:	89 c6                	mov    esi,eax
c001ff52:	89 d7                	mov    edi,edx
c001ff54:	e8 1e fa ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001ff59:	57                   	push   edi
c001ff5a:	56                   	push   esi
c001ff5b:	52                   	push   edx
c001ff5c:	50                   	push   eax
c001ff5d:	e8 8b f9 ff ff       	call   c001f8ed <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff62:	83 c4 1c             	add    esp,0x1c
c001ff65:	52                   	push   edx
c001ff66:	50                   	push   eax
c001ff67:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff6b:	2d c0 00 00 00       	sub    eax,0xc0
c001ff70:	e9 9e 01 00 00       	jmp    c0020113 <Vm::x87Handler(regs*)+0x65f>
c001ff75:	8d 50 20             	lea    edx,[eax+0x20]
c001ff78:	80 fa 07             	cmp    dl,0x7
c001ff7b:	77 3a                	ja     c001ffb7 <Vm::x87Handler(regs*)+0x503>
c001ff7d:	83 ec 0c             	sub    esp,0xc
c001ff80:	2d e0 00 00 00       	sub    eax,0xe0
c001ff85:	50                   	push   eax
c001ff86:	e8 ec f9 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001ff8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff92:	89 c6                	mov    esi,eax
c001ff94:	89 d7                	mov    edi,edx
c001ff96:	e8 dc f9 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001ff9b:	57                   	push   edi
c001ff9c:	56                   	push   esi
c001ff9d:	52                   	push   edx
c001ff9e:	50                   	push   eax
c001ff9f:	e8 73 f9 ff ff       	call   c001f917 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffa4:	83 c4 1c             	add    esp,0x1c
c001ffa7:	52                   	push   edx
c001ffa8:	50                   	push   eax
c001ffa9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffad:	2d e0 00 00 00       	sub    eax,0xe0
c001ffb2:	e9 5c 01 00 00       	jmp    c0020113 <Vm::x87Handler(regs*)+0x65f>
c001ffb7:	8d 50 18             	lea    edx,[eax+0x18]
c001ffba:	80 fa 07             	cmp    dl,0x7
c001ffbd:	77 3b                	ja     c001fffa <Vm::x87Handler(regs*)+0x546>
c001ffbf:	83 ec 0c             	sub    esp,0xc
c001ffc2:	6a 00                	push   0x0
c001ffc4:	e8 ae f9 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001ffc9:	89 c6                	mov    esi,eax
c001ffcb:	89 d7                	mov    edi,edx
c001ffcd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffd1:	2d e8 00 00 00       	sub    eax,0xe8
c001ffd6:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffd9:	e8 99 f9 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c001ffde:	57                   	push   edi
c001ffdf:	56                   	push   esi
c001ffe0:	52                   	push   edx
c001ffe1:	50                   	push   eax
c001ffe2:	e8 30 f9 ff ff       	call   c001f917 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffe7:	83 c4 1c             	add    esp,0x1c
c001ffea:	52                   	push   edx
c001ffeb:	50                   	push   eax
c001ffec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fff0:	2d e8 00 00 00       	sub    eax,0xe8
c001fff5:	e9 19 01 00 00       	jmp    c0020113 <Vm::x87Handler(regs*)+0x65f>
c001fffa:	8d 50 38             	lea    edx,[eax+0x38]
c001fffd:	80 fa 07             	cmp    dl,0x7
c0020000:	77 37                	ja     c0020039 <Vm::x87Handler(regs*)+0x585>
c0020002:	83 ec 0c             	sub    esp,0xc
c0020005:	2d c8 00 00 00       	sub    eax,0xc8
c002000a:	50                   	push   eax
c002000b:	e8 67 f9 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020010:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020017:	89 c6                	mov    esi,eax
c0020019:	89 d7                	mov    edi,edx
c002001b:	e8 57 f9 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020020:	57                   	push   edi
c0020021:	56                   	push   esi
c0020022:	52                   	push   edx
c0020023:	50                   	push   eax
c0020024:	e8 fd f8 ff ff       	call   c001f926 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020029:	83 c4 1c             	add    esp,0x1c
c002002c:	52                   	push   edx
c002002d:	50                   	push   eax
c002002e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020032:	2d c8 00 00 00       	sub    eax,0xc8
c0020037:	eb 7d                	jmp    c00200b6 <Vm::x87Handler(regs*)+0x602>
c0020039:	3c f7                	cmp    al,0xf7
c002003b:	76 38                	jbe    c0020075 <Vm::x87Handler(regs*)+0x5c1>
c002003d:	83 ec 0c             	sub    esp,0xc
c0020040:	6a 00                	push   0x0
c0020042:	e8 30 f9 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020047:	89 c6                	mov    esi,eax
c0020049:	89 d7                	mov    edi,edx
c002004b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002004f:	2d f8 00 00 00       	sub    eax,0xf8
c0020054:	89 04 24             	mov    DWORD PTR [esp],eax
c0020057:	e8 1b f9 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c002005c:	57                   	push   edi
c002005d:	56                   	push   esi
c002005e:	52                   	push   edx
c002005f:	50                   	push   eax
c0020060:	e8 e0 f8 ff ff       	call   c001f945 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020065:	83 c4 1c             	add    esp,0x1c
c0020068:	52                   	push   edx
c0020069:	50                   	push   eax
c002006a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002006e:	2d f8 00 00 00       	sub    eax,0xf8
c0020073:	eb 41                	jmp    c00200b6 <Vm::x87Handler(regs*)+0x602>
c0020075:	8d 50 10             	lea    edx,[eax+0x10]
c0020078:	80 fa 07             	cmp    dl,0x7
c002007b:	0f 87 5a 01 00 00    	ja     c00201db <Vm::x87Handler(regs*)+0x727>
c0020081:	83 ec 0c             	sub    esp,0xc
c0020084:	2d f0 00 00 00       	sub    eax,0xf0
c0020089:	50                   	push   eax
c002008a:	e8 e8 f8 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c002008f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020096:	89 c6                	mov    esi,eax
c0020098:	89 d7                	mov    edi,edx
c002009a:	e8 d8 f8 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c002009f:	57                   	push   edi
c00200a0:	56                   	push   esi
c00200a1:	52                   	push   edx
c00200a2:	50                   	push   eax
c00200a3:	e8 9d f8 ff ff       	call   c001f945 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200a8:	83 c4 1c             	add    esp,0x1c
c00200ab:	52                   	push   edx
c00200ac:	50                   	push   eax
c00200ad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200b1:	2d f0 00 00 00       	sub    eax,0xf0
c00200b6:	50                   	push   eax
c00200b7:	e8 fe f8 ff ff       	call   c001f9ba <Vm::fpuSetReg(int, unsigned long long)>
c00200bc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200c0:	e8 9d f9 ff ff       	call   c001fa62 <Vm::fpuPop()>
c00200c5:	e9 5e fa ff ff       	jmp    c001fb28 <Vm::x87Handler(regs*)+0x74>
c00200ca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200ce:	8d 50 30             	lea    edx,[eax+0x30]
c00200d1:	80 fa 07             	cmp    dl,0x7
c00200d4:	77 1d                	ja     c00200f3 <Vm::x87Handler(regs*)+0x63f>
c00200d6:	83 ec 0c             	sub    esp,0xc
c00200d9:	6a 00                	push   0x0
c00200db:	e8 97 f8 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c00200e0:	83 c4 0c             	add    esp,0xc
c00200e3:	52                   	push   edx
c00200e4:	50                   	push   eax
c00200e5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200e9:	2d d0 00 00 00       	sub    eax,0xd0
c00200ee:	e9 f3 fd ff ff       	jmp    c001fee6 <Vm::x87Handler(regs*)+0x432>
c00200f3:	8d 50 28             	lea    edx,[eax+0x28]
c00200f6:	80 fa 07             	cmp    dl,0x7
c00200f9:	77 28                	ja     c0020123 <Vm::x87Handler(regs*)+0x66f>
c00200fb:	83 ec 0c             	sub    esp,0xc
c00200fe:	6a 00                	push   0x0
c0020100:	e8 72 f8 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020105:	83 c4 0c             	add    esp,0xc
c0020108:	52                   	push   edx
c0020109:	50                   	push   eax
c002010a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002010e:	2d d8 00 00 00       	sub    eax,0xd8
c0020113:	50                   	push   eax
c0020114:	e8 a1 f8 ff ff       	call   c001f9ba <Vm::fpuSetReg(int, unsigned long long)>
c0020119:	e8 44 f9 ff ff       	call   c001fa62 <Vm::fpuPop()>
c002011e:	e9 01 fa ff ff       	jmp    c001fb24 <Vm::x87Handler(regs*)+0x70>
c0020123:	8d 50 20             	lea    edx,[eax+0x20]
c0020126:	80 fa 07             	cmp    dl,0x7
c0020129:	77 30                	ja     c002015b <Vm::x87Handler(regs*)+0x6a7>
c002012b:	83 ec 0c             	sub    esp,0xc
c002012e:	2d e0 00 00 00       	sub    eax,0xe0
c0020133:	50                   	push   eax
c0020134:	e8 3e f8 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020139:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020140:	89 c6                	mov    esi,eax
c0020142:	89 d7                	mov    edi,edx
c0020144:	e8 2e f8 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020149:	57                   	push   edi
c002014a:	56                   	push   esi
c002014b:	52                   	push   edx
c002014c:	50                   	push   eax
c002014d:	e8 48 f7 ff ff       	call   c001f89a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020152:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020156:	e9 54 02 00 00       	jmp    c00203af <Vm::x87Handler(regs*)+0x8fb>
c002015b:	8d 50 18             	lea    edx,[eax+0x18]
c002015e:	80 fa 07             	cmp    dl,0x7
c0020161:	0f 87 43 fb ff ff    	ja     c001fcaa <Vm::x87Handler(regs*)+0x1f6>
c0020167:	83 ec 0c             	sub    esp,0xc
c002016a:	2d e8 00 00 00       	sub    eax,0xe8
c002016f:	50                   	push   eax
c0020170:	e8 02 f8 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020175:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002017c:	89 c6                	mov    esi,eax
c002017e:	89 d7                	mov    edi,edx
c0020180:	e8 f2 f7 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020185:	57                   	push   edi
c0020186:	56                   	push   esi
c0020187:	52                   	push   edx
c0020188:	50                   	push   eax
c0020189:	e8 0c f7 ff ff       	call   c001f89a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002018e:	83 c4 20             	add    esp,0x20
c0020191:	e8 cc f8 ff ff       	call   c001fa62 <Vm::fpuPop()>
c0020196:	eb 62                	jmp    c00201fa <Vm::x87Handler(regs*)+0x746>
c0020198:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c002019c:	0f 85 0f 01 00 00    	jne    c00202b1 <Vm::x87Handler(regs*)+0x7fd>
c00201a2:	83 ec 0c             	sub    esp,0xc
c00201a5:	6a 01                	push   0x1
c00201a7:	e8 cb f7 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c00201ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201b3:	89 c6                	mov    esi,eax
c00201b5:	89 d7                	mov    edi,edx
c00201b7:	e8 bb f7 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c00201bc:	57                   	push   edi
c00201bd:	56                   	push   esi
c00201be:	52                   	push   edx
c00201bf:	50                   	push   eax
c00201c0:	e8 d5 f6 ff ff       	call   c001f89a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201c5:	83 c4 20             	add    esp,0x20
c00201c8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201cc:	e8 91 f8 ff ff       	call   c001fa62 <Vm::fpuPop()>
c00201d1:	e8 8c f8 ff ff       	call   c001fa62 <Vm::fpuPop()>
c00201d6:	e9 50 f9 ff ff       	jmp    c001fb2b <Vm::x87Handler(regs*)+0x77>
c00201db:	3c d9                	cmp    al,0xd9
c00201dd:	0f 85 b5 02 00 00    	jne    c0020498 <Vm::x87Handler(regs*)+0x9e4>
c00201e3:	eb bd                	jmp    c00201a2 <Vm::x87Handler(regs*)+0x6ee>
c00201e5:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00201e9:	0f 85 ea 02 00 00    	jne    c00204d9 <Vm::x87Handler(regs*)+0xa25>
c00201ef:	0f b7 05 40 1a 03 c0 	movzx  eax,WORD PTR ds:0xc0031a40
c00201f6:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00201fa:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201fe:	e9 28 f9 ff ff       	jmp    c001fb2b <Vm::x87Handler(regs*)+0x77>
c0020203:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020207:	84 d2                	test   dl,dl
c0020209:	75 0f                	jne    c002021a <Vm::x87Handler(regs*)+0x766>
c002020b:	83 ec 0c             	sub    esp,0xc
c002020e:	ff 36                	push   DWORD PTR [esi]
c0020210:	e8 b1 f4 ff ff       	call   c001f6c6 <Vm::fpu32ToInternal(unsigned int)>
c0020215:	e9 2c 01 00 00       	jmp    c0020346 <Vm::x87Handler(regs*)+0x892>
c002021a:	80 fa 01             	cmp    dl,0x1
c002021d:	75 0f                	jne    c002022e <Vm::x87Handler(regs*)+0x77a>
c002021f:	83 ec 0c             	sub    esp,0xc
c0020222:	ff 36                	push   DWORD PTR [esi]
c0020224:	e8 9d f4 ff ff       	call   c001f6c6 <Vm::fpu32ToInternal(unsigned int)>
c0020229:	e9 81 02 00 00       	jmp    c00204af <Vm::x87Handler(regs*)+0x9fb>
c002022e:	80 fa 04             	cmp    dl,0x4
c0020231:	75 0f                	jne    c0020242 <Vm::x87Handler(regs*)+0x78e>
c0020233:	83 ec 0c             	sub    esp,0xc
c0020236:	ff 36                	push   DWORD PTR [esi]
c0020238:	e8 89 f4 ff ff       	call   c001f6c6 <Vm::fpu32ToInternal(unsigned int)>
c002023d:	e9 86 01 00 00       	jmp    c00203c8 <Vm::x87Handler(regs*)+0x914>
c0020242:	80 fa 05             	cmp    dl,0x5
c0020245:	75 1b                	jne    c0020262 <Vm::x87Handler(regs*)+0x7ae>
c0020247:	83 ec 0c             	sub    esp,0xc
c002024a:	6a 00                	push   0x0
c002024c:	e8 26 f7 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020251:	89 c7                	mov    edi,eax
c0020253:	89 d5                	mov    ebp,edx
c0020255:	58                   	pop    eax
c0020256:	ff 36                	push   DWORD PTR [esi]
c0020258:	e8 69 f4 ff ff       	call   c001f6c6 <Vm::fpu32ToInternal(unsigned int)>
c002025d:	e9 a3 01 00 00       	jmp    c0020405 <Vm::x87Handler(regs*)+0x951>
c0020262:	80 fa 06             	cmp    dl,0x6
c0020265:	75 0f                	jne    c0020276 <Vm::x87Handler(regs*)+0x7c2>
c0020267:	83 ec 0c             	sub    esp,0xc
c002026a:	ff 36                	push   DWORD PTR [esi]
c002026c:	e8 55 f4 ff ff       	call   c001f6c6 <Vm::fpu32ToInternal(unsigned int)>
c0020271:	e9 ae 01 00 00       	jmp    c0020424 <Vm::x87Handler(regs*)+0x970>
c0020276:	31 c0                	xor    eax,eax
c0020278:	80 fa 07             	cmp    dl,0x7
c002027b:	0f 85 94 02 00 00    	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c0020281:	83 ec 0c             	sub    esp,0xc
c0020284:	6a 00                	push   0x0
c0020286:	e8 ec f6 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c002028b:	89 c7                	mov    edi,eax
c002028d:	89 d5                	mov    ebp,edx
c002028f:	58                   	pop    eax
c0020290:	ff 36                	push   DWORD PTR [esi]
c0020292:	e8 2f f4 ff ff       	call   c001f6c6 <Vm::fpu32ToInternal(unsigned int)>
c0020297:	e9 cb 01 00 00       	jmp    c0020467 <Vm::x87Handler(regs*)+0x9b3>
c002029c:	80 fa 03             	cmp    dl,0x3
c002029f:	0f 85 d3 01 00 00    	jne    c0020478 <Vm::x87Handler(regs*)+0x9c4>
c00202a5:	e8 b8 f7 ff ff       	call   c001fa62 <Vm::fpuPop()>
c00202aa:	51                   	push   ecx
c00202ab:	51                   	push   ecx
c00202ac:	e9 de 01 00 00       	jmp    c002048f <Vm::x87Handler(regs*)+0x9db>
c00202b1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202b5:	80 fa 01             	cmp    dl,0x1
c00202b8:	75 09                	jne    c00202c3 <Vm::x87Handler(regs*)+0x80f>
c00202ba:	57                   	push   edi
c00202bb:	57                   	push   edi
c00202bc:	8b 06                	mov    eax,DWORD PTR [esi]
c00202be:	e9 e3 01 00 00       	jmp    c00204a6 <Vm::x87Handler(regs*)+0x9f2>
c00202c3:	80 fa 04             	cmp    dl,0x4
c00202c6:	75 12                	jne    c00202da <Vm::x87Handler(regs*)+0x826>
c00202c8:	31 d2                	xor    edx,edx
c00202ca:	51                   	push   ecx
c00202cb:	51                   	push   ecx
c00202cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00202ce:	52                   	push   edx
c00202cf:	50                   	push   eax
c00202d0:	e8 d0 f4 ff ff       	call   c001f7a5 <Vm::fpuLongToFloat(long long)>
c00202d5:	e9 ee 00 00 00       	jmp    c00203c8 <Vm::x87Handler(regs*)+0x914>
c00202da:	31 c0                	xor    eax,eax
c00202dc:	80 fa 07             	cmp    dl,0x7
c00202df:	0f 85 30 02 00 00    	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c00202e5:	83 ec 0c             	sub    esp,0xc
c00202e8:	6a 00                	push   0x0
c00202ea:	e8 88 f6 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c00202ef:	89 c7                	mov    edi,eax
c00202f1:	89 d5                	mov    ebp,edx
c00202f3:	58                   	pop    eax
c00202f4:	8b 06                	mov    eax,DWORD PTR [esi]
c00202f6:	5a                   	pop    edx
c00202f7:	31 d2                	xor    edx,edx
c00202f9:	52                   	push   edx
c00202fa:	50                   	push   eax
c00202fb:	e8 a5 f4 ff ff       	call   c001f7a5 <Vm::fpuLongToFloat(long long)>
c0020300:	e9 62 01 00 00       	jmp    c0020467 <Vm::x87Handler(regs*)+0x9b3>
c0020305:	84 d2                	test   dl,dl
c0020307:	75 0d                	jne    c0020316 <Vm::x87Handler(regs*)+0x862>
c0020309:	31 d2                	xor    edx,edx
c002030b:	55                   	push   ebp
c002030c:	55                   	push   ebp
c002030d:	8b 06                	mov    eax,DWORD PTR [esi]
c002030f:	52                   	push   edx
c0020310:	50                   	push   eax
c0020311:	e9 d3 01 00 00       	jmp    c00204e9 <Vm::x87Handler(regs*)+0xa35>
c0020316:	31 c0                	xor    eax,eax
c0020318:	80 fa 02             	cmp    dl,0x2
c002031b:	0f 85 f4 01 00 00    	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c0020321:	83 ec 0c             	sub    esp,0xc
c0020324:	6a 00                	push   0x0
c0020326:	e8 4c f6 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c002032b:	59                   	pop    ecx
c002032c:	5f                   	pop    edi
c002032d:	e9 6a f9 ff ff       	jmp    c001fc9c <Vm::x87Handler(regs*)+0x1e8>
c0020332:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020336:	84 d2                	test   dl,dl
c0020338:	75 2a                	jne    c0020364 <Vm::x87Handler(regs*)+0x8b0>
c002033a:	50                   	push   eax
c002033b:	50                   	push   eax
c002033c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002033f:	ff 36                	push   DWORD PTR [esi]
c0020341:	e8 c5 f3 ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c0020346:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002034d:	89 c6                	mov    esi,eax
c002034f:	89 d7                	mov    edi,edx
c0020351:	e8 21 f6 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020356:	57                   	push   edi
c0020357:	56                   	push   esi
c0020358:	52                   	push   edx
c0020359:	50                   	push   eax
c002035a:	e8 8e f5 ff ff       	call   c001f8ed <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002035f:	e9 64 01 00 00       	jmp    c00204c8 <Vm::x87Handler(regs*)+0xa14>
c0020364:	80 fa 01             	cmp    dl,0x1
c0020367:	75 11                	jne    c002037a <Vm::x87Handler(regs*)+0x8c6>
c0020369:	50                   	push   eax
c002036a:	50                   	push   eax
c002036b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002036e:	ff 36                	push   DWORD PTR [esi]
c0020370:	e8 96 f3 ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c0020375:	e9 35 01 00 00       	jmp    c00204af <Vm::x87Handler(regs*)+0x9fb>
c002037a:	80 fa 02             	cmp    dl,0x2
c002037d:	0f 85 54 f9 ff ff    	jne    c001fcd7 <Vm::x87Handler(regs*)+0x223>
c0020383:	55                   	push   ebp
c0020384:	55                   	push   ebp
c0020385:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020388:	ff 36                	push   DWORD PTR [esi]
c002038a:	e8 7c f3 ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c002038f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020396:	89 c6                	mov    esi,eax
c0020398:	89 d7                	mov    edi,edx
c002039a:	e8 d8 f5 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c002039f:	57                   	push   edi
c00203a0:	56                   	push   esi
c00203a1:	52                   	push   edx
c00203a2:	50                   	push   eax
c00203a3:	e8 f2 f4 ff ff       	call   c001f89a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00203a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00203ac:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00203af:	83 c4 20             	add    esp,0x20
c00203b2:	e9 74 f7 ff ff       	jmp    c001fb2b <Vm::x87Handler(regs*)+0x77>
c00203b7:	80 fa 04             	cmp    dl,0x4
c00203ba:	75 2a                	jne    c00203e6 <Vm::x87Handler(regs*)+0x932>
c00203bc:	51                   	push   ecx
c00203bd:	51                   	push   ecx
c00203be:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203c1:	ff 36                	push   DWORD PTR [esi]
c00203c3:	e8 43 f3 ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c00203c8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203cf:	89 c6                	mov    esi,eax
c00203d1:	89 d7                	mov    edi,edx
c00203d3:	e8 9f f5 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c00203d8:	57                   	push   edi
c00203d9:	56                   	push   esi
c00203da:	52                   	push   edx
c00203db:	50                   	push   eax
c00203dc:	e8 36 f5 ff ff       	call   c001f917 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203e1:	e9 e2 00 00 00       	jmp    c00204c8 <Vm::x87Handler(regs*)+0xa14>
c00203e6:	80 fa 05             	cmp    dl,0x5
c00203e9:	75 28                	jne    c0020413 <Vm::x87Handler(regs*)+0x95f>
c00203eb:	83 ec 0c             	sub    esp,0xc
c00203ee:	6a 00                	push   0x0
c00203f0:	e8 82 f5 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c00203f5:	89 c7                	mov    edi,eax
c00203f7:	89 d5                	mov    ebp,edx
c00203f9:	58                   	pop    eax
c00203fa:	5a                   	pop    edx
c00203fb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203fe:	ff 36                	push   DWORD PTR [esi]
c0020400:	e8 06 f3 ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c0020405:	83 c4 10             	add    esp,0x10
c0020408:	55                   	push   ebp
c0020409:	57                   	push   edi
c002040a:	52                   	push   edx
c002040b:	50                   	push   eax
c002040c:	e8 06 f5 ff ff       	call   c001f917 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020411:	eb 60                	jmp    c0020473 <Vm::x87Handler(regs*)+0x9bf>
c0020413:	80 fa 06             	cmp    dl,0x6
c0020416:	75 2a                	jne    c0020442 <Vm::x87Handler(regs*)+0x98e>
c0020418:	51                   	push   ecx
c0020419:	51                   	push   ecx
c002041a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002041d:	ff 36                	push   DWORD PTR [esi]
c002041f:	e8 e7 f2 ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c0020424:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002042b:	89 c6                	mov    esi,eax
c002042d:	89 d7                	mov    edi,edx
c002042f:	e8 43 f5 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020434:	57                   	push   edi
c0020435:	56                   	push   esi
c0020436:	52                   	push   edx
c0020437:	50                   	push   eax
c0020438:	e8 08 f5 ff ff       	call   c001f945 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002043d:	e9 86 00 00 00       	jmp    c00204c8 <Vm::x87Handler(regs*)+0xa14>
c0020442:	31 c0                	xor    eax,eax
c0020444:	80 fa 07             	cmp    dl,0x7
c0020447:	0f 85 c8 00 00 00    	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c002044d:	83 ec 0c             	sub    esp,0xc
c0020450:	6a 00                	push   0x0
c0020452:	e8 20 f5 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c0020457:	89 c7                	mov    edi,eax
c0020459:	89 d5                	mov    ebp,edx
c002045b:	58                   	pop    eax
c002045c:	5a                   	pop    edx
c002045d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020460:	ff 36                	push   DWORD PTR [esi]
c0020462:	e8 a4 f2 ff ff       	call   c001f70b <Vm::fpu64ToInternal(unsigned long long)>
c0020467:	83 c4 10             	add    esp,0x10
c002046a:	55                   	push   ebp
c002046b:	57                   	push   edi
c002046c:	52                   	push   edx
c002046d:	50                   	push   eax
c002046e:	e8 d2 f4 ff ff       	call   c001f945 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020473:	83 c4 0c             	add    esp,0xc
c0020476:	eb 53                	jmp    c00204cb <Vm::x87Handler(regs*)+0xa17>
c0020478:	31 c0                	xor    eax,eax
c002047a:	80 fa 02             	cmp    dl,0x2
c002047d:	0f 85 92 00 00 00    	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c0020483:	83 ec 0c             	sub    esp,0xc
c0020486:	6a 00                	push   0x0
c0020488:	e8 ea f4 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c002048d:	59                   	pop    ecx
c002048e:	5f                   	pop    edi
c002048f:	52                   	push   edx
c0020490:	50                   	push   eax
c0020491:	e8 27 f2 ff ff       	call   c001f6bd <Vm::fpuInternalTo64(unsigned long long)>
c0020496:	eb 70                	jmp    c0020508 <Vm::x87Handler(regs*)+0xa54>
c0020498:	31 c0                	xor    eax,eax
c002049a:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002049f:	75 74                	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c00204a1:	50                   	push   eax
c00204a2:	50                   	push   eax
c00204a3:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00204a6:	31 d2                	xor    edx,edx
c00204a8:	52                   	push   edx
c00204a9:	50                   	push   eax
c00204aa:	e8 f6 f2 ff ff       	call   c001f7a5 <Vm::fpuLongToFloat(long long)>
c00204af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204b6:	89 c6                	mov    esi,eax
c00204b8:	89 d7                	mov    edi,edx
c00204ba:	e8 b8 f4 ff ff       	call   c001f977 <Vm::fpuGetReg(int)>
c00204bf:	57                   	push   edi
c00204c0:	56                   	push   esi
c00204c1:	52                   	push   edx
c00204c2:	50                   	push   eax
c00204c3:	e8 5e f4 ff ff       	call   c001f926 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00204c8:	83 c4 1c             	add    esp,0x1c
c00204cb:	52                   	push   edx
c00204cc:	50                   	push   eax
c00204cd:	6a 00                	push   0x0
c00204cf:	e8 e6 f4 ff ff       	call   c001f9ba <Vm::fpuSetReg(int, unsigned long long)>
c00204d4:	e9 f2 f7 ff ff       	jmp    c001fccb <Vm::x87Handler(regs*)+0x217>
c00204d9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204dd:	80 fa 05             	cmp    dl,0x5
c00204e0:	75 11                	jne    c00204f3 <Vm::x87Handler(regs*)+0xa3f>
c00204e2:	55                   	push   ebp
c00204e3:	55                   	push   ebp
c00204e4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204e7:	ff 36                	push   DWORD PTR [esi]
c00204e9:	e8 81 f2 ff ff       	call   c001f76f <Vm::fpuULongToFloat(unsigned long long)>
c00204ee:	e9 cf f7 ff ff       	jmp    c001fcc2 <Vm::x87Handler(regs*)+0x20e>
c00204f3:	31 c0                	xor    eax,eax
c00204f5:	80 fa 07             	cmp    dl,0x7
c00204f8:	75 1b                	jne    c0020515 <Vm::x87Handler(regs*)+0xa61>
c00204fa:	e8 63 f5 ff ff       	call   c001fa62 <Vm::fpuPop()>
c00204ff:	51                   	push   ecx
c0020500:	51                   	push   ecx
c0020501:	52                   	push   edx
c0020502:	50                   	push   eax
c0020503:	e8 0c f2 ff ff       	call   c001f714 <Vm::fpuFloatToLong(unsigned long long)>
c0020508:	83 c4 10             	add    esp,0x10
c002050b:	89 06                	mov    DWORD PTR [esi],eax
c002050d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020510:	e9 f8 f7 ff ff       	jmp    c001fd0d <Vm::x87Handler(regs*)+0x259>
c0020515:	83 c4 1c             	add    esp,0x1c
c0020518:	5b                   	pop    ebx
c0020519:	5e                   	pop    esi
c002051a:	5f                   	pop    edi
c002051b:	5d                   	pop    ebp
c002051c:	c3                   	ret    

c002051d <__static_initialization_and_destruction_0(int, int)>:
c002051d:	83 ec 0c             	sub    esp,0xc
c0020520:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020525:	75 1a                	jne    c0020541 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020527:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c002052f:	75 10                	jne    c0020541 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020531:	83 ec 0c             	sub    esp,0xc
c0020534:	68 40 1a 03 c0       	push   0xc0031a40
c0020539:	e8 2e 88 00 00       	call   c0028d6c <Vm::_FPUState::_FPUState()>
c002053e:	83 c4 10             	add    esp,0x10
c0020541:	90                   	nop
c0020542:	83 c4 0c             	add    esp,0xc
c0020545:	c3                   	ret    

c0020546 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020546:	83 ec 0c             	sub    esp,0xc
c0020549:	83 ec 08             	sub    esp,0x8
c002054c:	68 ff ff 00 00       	push   0xffff
c0020551:	6a 01                	push   0x1
c0020553:	e8 c5 ff ff ff       	call   c002051d <__static_initialization_and_destruction_0(int, int)>
c0020558:	83 c4 10             	add    esp,0x10
c002055b:	83 c4 0c             	add    esp,0xc
c002055e:	c3                   	ret    
c002055f:	90                   	nop

c0020560 <FAT::getName()>:
c0020560:	b8 5c c8 02 c0       	mov    eax,0xc002c85c
c0020565:	c3                   	ret    

c0020566 <FAT::tell(void*, unsigned long long*)>:
c0020566:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002056b:	75 06                	jne    c0020573 <FAT::tell(void*, unsigned long long*)+0xd>
c002056d:	b8 04 00 00 00       	mov    eax,0x4
c0020572:	c3                   	ret    
c0020573:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020578:	75 06                	jne    c0020580 <FAT::tell(void*, unsigned long long*)+0x1a>
c002057a:	b8 04 00 00 00       	mov    eax,0x4
c002057f:	c3                   	ret    
c0020580:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020584:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020587:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002058a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002058e:	89 01                	mov    DWORD PTR [ecx],eax
c0020590:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020593:	b8 00 00 00 00       	mov    eax,0x0
c0020598:	c3                   	ret    
c0020599:	90                   	nop

c002059a <FAT::stat(void*, unsigned long long*)>:
c002059a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002059f:	75 06                	jne    c00205a7 <FAT::stat(void*, unsigned long long*)+0xd>
c00205a1:	b8 04 00 00 00       	mov    eax,0x4
c00205a6:	c3                   	ret    
c00205a7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205ac:	75 06                	jne    c00205b4 <FAT::stat(void*, unsigned long long*)+0x1a>
c00205ae:	b8 04 00 00 00       	mov    eax,0x4
c00205b3:	c3                   	ret    
c00205b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205b8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00205bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00205be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205c2:	89 01                	mov    DWORD PTR [ecx],eax
c00205c4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205c7:	b8 00 00 00 00       	mov    eax,0x0
c00205cc:	c3                   	ret    
c00205cd:	90                   	nop

c00205ce <FAT::~FAT()>:
c00205ce:	83 ec 0c             	sub    esp,0xc
c00205d1:	ba e0 c8 02 c0       	mov    edx,0xc002c8e0
c00205d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205da:	89 10                	mov    DWORD PTR [eax],edx
c00205dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205e0:	83 ec 0c             	sub    esp,0xc
c00205e3:	50                   	push   eax
c00205e4:	e8 1f 2c ff ff       	call   c0013208 <Filesystem::~Filesystem()>
c00205e9:	83 c4 10             	add    esp,0x10
c00205ec:	90                   	nop
c00205ed:	83 c4 0c             	add    esp,0xc
c00205f0:	c3                   	ret    
c00205f1:	90                   	nop

c00205f2 <FAT::~FAT()>:
c00205f2:	83 ec 0c             	sub    esp,0xc
c00205f5:	83 ec 0c             	sub    esp,0xc
c00205f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205fc:	e8 cd ff ff ff       	call   c00205ce <FAT::~FAT()>
c0020601:	83 c4 10             	add    esp,0x10
c0020604:	83 ec 08             	sub    esp,0x8
c0020607:	6a 08                	push   0x8
c0020609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002060d:	e8 ed 27 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0020612:	83 c4 10             	add    esp,0x10
c0020615:	83 c4 0c             	add    esp,0xc
c0020618:	c3                   	ret    
c0020619:	90                   	nop

c002061a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002061a:	83 ec 1c             	sub    esp,0x1c
c002061d:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020624:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020629:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002062d:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c0020634:	83 f8 ff             	cmp    eax,0xffffffff
c0020637:	75 34                	jne    c002066d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020639:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002063d:	88 c2                	mov    dl,al
c002063f:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0020644:	01 d0                	add    eax,edx
c0020646:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002064a:	8b 15 a0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031aa0
c0020650:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020654:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c002065b:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0020660:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020664:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c002066b:	eb 17                	jmp    c0020684 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002066d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020671:	88 c2                	mov    dl,al
c0020673:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020677:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c002067e:	01 d0                	add    eax,edx
c0020680:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020684:	83 ec 04             	sub    esp,0x4
c0020687:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002068b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002068f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020693:	50                   	push   eax
c0020694:	e8 a7 66 fe ff       	call   c0006d40 <f_getlabel>
c0020699:	83 c4 10             	add    esp,0x10
c002069c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00206a5:	75 07                	jne    c00206ae <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00206a7:	b8 00 00 00 00       	mov    eax,0x0
c00206ac:	eb 05                	jmp    c00206b3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00206ae:	b8 01 00 00 00       	mov    eax,0x1
c00206b3:	83 c4 1c             	add    esp,0x1c
c00206b6:	c3                   	ret    
c00206b7:	90                   	nop

c00206b8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00206b8:	57                   	push   edi
c00206b9:	83 ec 58             	sub    esp,0x58
c00206bc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00206c4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00206c8:	b9 0f 00 00 00       	mov    ecx,0xf
c00206cd:	b8 00 00 00 00       	mov    eax,0x0
c00206d2:	fc                   	cld    
c00206d3:	89 d7                	mov    edi,edx
c00206d5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206d7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206db:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c00206e2:	83 f8 ff             	cmp    eax,0xffffffff
c00206e5:	75 34                	jne    c002071b <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00206e7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206eb:	88 c2                	mov    dl,al
c00206ed:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c00206f2:	01 d0                	add    eax,edx
c00206f4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206f8:	8b 15 a0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031aa0
c00206fe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020702:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c0020709:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c002070e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020712:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c0020719:	eb 17                	jmp    c0020732 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002071b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002071f:	88 c2                	mov    dl,al
c0020721:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020725:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c002072c:	01 d0                	add    eax,edx
c002072e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020732:	83 ec 08             	sub    esp,0x8
c0020735:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020739:	8d 44 24 18          	lea    eax,[esp+0x18]
c002073d:	50                   	push   eax
c002073e:	e8 39 02 fe ff       	call   c000097c <strcat>
c0020743:	83 c4 10             	add    esp,0x10
c0020746:	83 ec 0c             	sub    esp,0xc
c0020749:	8d 44 24 18          	lea    eax,[esp+0x18]
c002074d:	50                   	push   eax
c002074e:	e8 db 67 fe ff       	call   c0006f2e <f_setlabel>
c0020753:	83 c4 10             	add    esp,0x10
c0020756:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002075a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002075f:	75 07                	jne    c0020768 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020761:	b8 00 00 00 00       	mov    eax,0x0
c0020766:	eb 05                	jmp    c002076d <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020768:	b8 01 00 00 00       	mov    eax,0x1
c002076d:	83 c4 58             	add    esp,0x58
c0020770:	5f                   	pop    edi
c0020771:	c3                   	ret    

c0020772 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020772:	83 ec 2c             	sub    esp,0x2c
c0020775:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002077d:	83 ec 08             	sub    esp,0x8
c0020780:	68 80 c8 02 c0       	push   0xc002c880
c0020785:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020789:	e8 3a 01 fe ff       	call   c00008c8 <strcmp>
c002078e:	83 c4 10             	add    esp,0x10
c0020791:	85 c0                	test   eax,eax
c0020793:	0f 94 c0             	sete   al
c0020796:	84 c0                	test   al,al
c0020798:	74 0d                	je     c00207a7 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002079a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207a2:	e9 a6 00 00 00       	jmp    c002084d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207a7:	83 ec 08             	sub    esp,0x8
c00207aa:	68 72 c8 02 c0       	push   0xc002c872
c00207af:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207b3:	e8 10 01 fe ff       	call   c00008c8 <strcmp>
c00207b8:	83 c4 10             	add    esp,0x10
c00207bb:	85 c0                	test   eax,eax
c00207bd:	0f 94 c0             	sete   al
c00207c0:	84 c0                	test   al,al
c00207c2:	74 0a                	je     c00207ce <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00207c4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207cc:	eb 7f                	jmp    c002084d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207ce:	83 ec 08             	sub    esp,0x8
c00207d1:	68 78 c8 02 c0       	push   0xc002c878
c00207d6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207da:	e8 e9 00 fe ff       	call   c00008c8 <strcmp>
c00207df:	83 c4 10             	add    esp,0x10
c00207e2:	85 c0                	test   eax,eax
c00207e4:	0f 94 c0             	sete   al
c00207e7:	84 c0                	test   al,al
c00207e9:	74 0a                	je     c00207f5 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00207eb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207f3:	eb 58                	jmp    c002084d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207f5:	83 ec 08             	sub    esp,0x8
c00207f8:	68 cc 94 02 c0       	push   0xc00294cc
c00207fd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020801:	e8 c2 00 fe ff       	call   c00008c8 <strcmp>
c0020806:	83 c4 10             	add    esp,0x10
c0020809:	85 c0                	test   eax,eax
c002080b:	0f 94 c0             	sete   al
c002080e:	84 c0                	test   al,al
c0020810:	74 0a                	je     c002081c <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020812:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002081a:	eb 31                	jmp    c002084d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002081c:	83 ec 08             	sub    esp,0x8
c002081f:	68 7e c8 02 c0       	push   0xc002c87e
c0020824:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020828:	e8 9b 00 fe ff       	call   c00008c8 <strcmp>
c002082d:	83 c4 10             	add    esp,0x10
c0020830:	85 c0                	test   eax,eax
c0020832:	0f 94 c0             	sete   al
c0020835:	84 c0                	test   al,al
c0020837:	74 0a                	je     c0020843 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020839:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020841:	eb 0a                	jmp    c002084d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020843:	b8 08 00 00 00       	mov    eax,0x8
c0020848:	e9 04 01 00 00       	jmp    c0020951 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002084d:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020854:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020859:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002085d:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c0020864:	83 f8 ff             	cmp    eax,0xffffffff
c0020867:	75 34                	jne    c002089d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020869:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002086d:	88 c2                	mov    dl,al
c002086f:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0020874:	01 d0                	add    eax,edx
c0020876:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002087a:	8b 15 a0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031aa0
c0020880:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020884:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c002088b:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0020890:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020894:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c002089b:	eb 17                	jmp    c00208b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002089d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208a1:	88 c2                	mov    dl,al
c00208a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208a7:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c00208ae:	01 d0                	add    eax,edx
c00208b0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208b8:	88 04 24             	mov    BYTE PTR [esp],al
c00208bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00208bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00208cb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00208d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00208d8:	83 ec 0c             	sub    esp,0xc
c00208db:	68 00 20 00 00       	push   0x2000
c00208e0:	e8 66 ef fe ff       	call   c000f84b <malloc>
c00208e5:	83 c4 10             	add    esp,0x10
c00208e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208ec:	68 00 20 00 00       	push   0x2000
c00208f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208f9:	50                   	push   eax
c00208fa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00208fe:	50                   	push   eax
c00208ff:	e8 75 6a fe ff       	call   c0007379 <f_mkfs>
c0020904:	83 c4 10             	add    esp,0x10
c0020907:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002090b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020910:	75 07                	jne    c0020919 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020912:	b8 00 00 00 00       	mov    eax,0x0
c0020917:	eb 38                	jmp    c0020951 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020919:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002091e:	75 17                	jne    c0020937 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020920:	83 ec 0c             	sub    esp,0xc
c0020923:	68 b0 c8 02 c0       	push   0xc002c8b0
c0020928:	e8 b2 25 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c002092d:	83 c4 10             	add    esp,0x10
c0020930:	b8 09 00 00 00       	mov    eax,0x9
c0020935:	eb 1a                	jmp    c0020951 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020937:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002093b:	83 ec 08             	sub    esp,0x8
c002093e:	50                   	push   eax
c002093f:	68 84 c8 02 c0       	push   0xc002c884
c0020944:	e8 96 25 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0020949:	83 c4 10             	add    esp,0x10
c002094c:	b8 01 00 00 00       	mov    eax,0x1
c0020951:	83 c4 2c             	add    esp,0x2c
c0020954:	c3                   	ret    
c0020955:	90                   	nop

c0020956 <FAT::tryMount(LogicalDisk*, int)>:
c0020956:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002095c:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0020961:	83 f8 14             	cmp    eax,0x14
c0020964:	75 17                	jne    c002097d <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020966:	83 ec 0c             	sub    esp,0xc
c0020969:	68 96 c8 02 c0       	push   0xc002c896
c002096e:	e8 98 9c ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0020973:	83 c4 10             	add    esp,0x10
c0020976:	b0 00                	mov    al,0x0
c0020978:	e9 d7 01 00 00       	jmp    c0020b54 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002097d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020984:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002098a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020990:	3d 00 02 00 00       	cmp    eax,0x200
c0020995:	74 07                	je     c002099e <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020997:	b0 00                	mov    al,0x0
c0020999:	e9 b6 01 00 00       	jmp    c0020b54 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002099e:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00209a6:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209ad:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c00209b4:	83 f8 ff             	cmp    eax,0xffffffff
c00209b7:	74 07                	je     c00209c0 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00209b9:	b0 01                	mov    al,0x1
c00209bb:	e9 94 01 00 00       	jmp    c0020b54 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209c0:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00209ca:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00209d2:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00209d9:	88 c2                	mov    dl,al
c00209db:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c00209e0:	01 d0                	add    eax,edx
c00209e2:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00209e9:	8b 15 a0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031aa0
c00209ef:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209f6:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c00209fd:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0020a02:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020a09:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c0020a10:	83 ec 0c             	sub    esp,0xc
c0020a13:	68 54 02 00 00       	push   0x254
c0020a18:	e8 2e ee fe ff       	call   c000f84b <malloc>
c0020a1d:	83 c4 10             	add    esp,0x10
c0020a20:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a27:	83 ec 04             	sub    esp,0x4
c0020a2a:	6a 00                	push   0x0
c0020a2c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a33:	50                   	push   eax
c0020a34:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a3b:	e8 f7 44 fe ff       	call   c0004f37 <f_mount>
c0020a40:	83 c4 10             	add    esp,0x10
c0020a43:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a4a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a52:	74 19                	je     c0020a6d <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a54:	83 ec 0c             	sub    esp,0xc
c0020a57:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a5e:	e8 08 ee fe ff       	call   c000f86b <rfree>
c0020a63:	83 c4 10             	add    esp,0x10
c0020a66:	b0 00                	mov    al,0x0
c0020a68:	e9 e7 00 00 00       	jmp    c0020b54 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a6d:	83 ec 04             	sub    esp,0x4
c0020a70:	68 00 01 00 00       	push   0x100
c0020a75:	6a 00                	push   0x0
c0020a77:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a7e:	50                   	push   eax
c0020a7f:	e8 fc fc fd ff       	call   c0000780 <memset>
c0020a84:	83 c4 10             	add    esp,0x10
c0020a87:	83 ec 08             	sub    esp,0x8
c0020a8a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a91:	50                   	push   eax
c0020a92:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a99:	50                   	push   eax
c0020a9a:	e8 dd fe fd ff       	call   c000097c <strcat>
c0020a9f:	83 c4 10             	add    esp,0x10
c0020aa2:	83 ec 08             	sub    esp,0x8
c0020aa5:	68 a4 c8 02 c0       	push   0xc002c8a4
c0020aaa:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ab1:	50                   	push   eax
c0020ab2:	e8 c5 fe fd ff       	call   c000097c <strcat>
c0020ab7:	83 c4 10             	add    esp,0x10
c0020aba:	83 ec 04             	sub    esp,0x4
c0020abd:	6a 01                	push   0x1
c0020abf:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020ac6:	50                   	push   eax
c0020ac7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020acb:	50                   	push   eax
c0020acc:	e8 c8 44 fe ff       	call   c0004f99 <f_open>
c0020ad1:	83 c4 10             	add    esp,0x10
c0020ad4:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020adb:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020ae2:	85 c0                	test   eax,eax
c0020ae4:	74 0a                	je     c0020af0 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020ae6:	78 2d                	js     c0020b15 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020ae8:	83 e8 04             	sub    eax,0x4
c0020aeb:	83 f8 01             	cmp    eax,0x1
c0020aee:	77 25                	ja     c0020b15 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020af0:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020af8:	83 ec 0c             	sub    esp,0xc
c0020afb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020aff:	50                   	push   eax
c0020b00:	e8 e6 4f fe ff       	call   c0005aeb <f_close>
c0020b05:	83 c4 10             	add    esp,0x10
c0020b08:	90                   	nop
c0020b09:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b11:	74 3a                	je     c0020b4d <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b13:	eb 2d                	jmp    c0020b42 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b15:	83 ec 0c             	sub    esp,0xc
c0020b18:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b1f:	e8 47 ed fe ff       	call   c000f86b <rfree>
c0020b24:	83 c4 10             	add    esp,0x10
c0020b27:	83 ec 04             	sub    esp,0x4
c0020b2a:	6a 00                	push   0x0
c0020b2c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b33:	50                   	push   eax
c0020b34:	6a 00                	push   0x0
c0020b36:	e8 fc 43 fe ff       	call   c0004f37 <f_mount>
c0020b3b:	83 c4 10             	add    esp,0x10
c0020b3e:	b0 00                	mov    al,0x0
c0020b40:	eb 12                	jmp    c0020b54 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b42:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0020b47:	40                   	inc    eax
c0020b48:	a3 a0 1a 03 c0       	mov    ds:0xc0031aa0,eax
c0020b4d:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b54:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b5a:	c3                   	ret    
c0020b5b:	90                   	nop

c0020b5c <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b5c:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b62:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b6a:	74 0a                	je     c0020b76 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b6c:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b74:	75 0a                	jne    c0020b80 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b76:	b8 04 00 00 00       	mov    eax,0x4
c0020b7b:	e9 db 00 00 00       	jmp    c0020c5b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b80:	83 ec 08             	sub    esp,0x8
c0020b83:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b8a:	50                   	push   eax
c0020b8b:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b92:	e8 5e 55 fe ff       	call   c00060f5 <f_readdir>
c0020b97:	83 c4 10             	add    esp,0x10
c0020b9a:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020ba1:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020ba7:	83 ec 0c             	sub    esp,0xc
c0020baa:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020bb1:	83 c0 1a             	add    eax,0x1a
c0020bb4:	50                   	push   eax
c0020bb5:	e8 e2 fb fd ff       	call   c000079c <strlen>
c0020bba:	83 c4 10             	add    esp,0x10
c0020bbd:	ba 00 00 00 00       	mov    edx,0x0
c0020bc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020bc6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020bca:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020bd1:	0f b6 c0             	movzx  eax,al
c0020bd4:	83 e0 10             	and    eax,0x10
c0020bd7:	74 07                	je     c0020be0 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020bd9:	b8 02 00 00 00       	mov    eax,0x2
c0020bde:	eb 05                	jmp    c0020be5 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020be0:	b8 01 00 00 00       	mov    eax,0x1
c0020be5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020be9:	83 ec 08             	sub    esp,0x8
c0020bec:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bf3:	83 c0 1a             	add    eax,0x1a
c0020bf6:	50                   	push   eax
c0020bf7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bfb:	83 c0 10             	add    eax,0x10
c0020bfe:	50                   	push   eax
c0020bff:	e8 38 fc fd ff       	call   c000083c <strcpy>
c0020c04:	83 c4 10             	add    esp,0x10
c0020c07:	83 ec 04             	sub    esp,0x4
c0020c0a:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020c11:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c15:	50                   	push   eax
c0020c16:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020c1d:	e8 2a fb fd ff       	call   c000074c <memcpy>
c0020c22:	83 c4 10             	add    esp,0x10
c0020c25:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020c2c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c32:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020c39:	84 c0                	test   al,al
c0020c3b:	75 07                	jne    c0020c44 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020c3d:	b8 07 00 00 00       	mov    eax,0x7
c0020c42:	eb 17                	jmp    c0020c5b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c44:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c4b:	85 c0                	test   eax,eax
c0020c4d:	75 07                	jne    c0020c56 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c4f:	b8 00 00 00 00       	mov    eax,0x0
c0020c54:	eb 05                	jmp    c0020c5b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c56:	b8 01 00 00 00       	mov    eax,0x1
c0020c5b:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c61:	c3                   	ret    

c0020c62 <FAT::read(void*, unsigned long, void*, int*)>:
c0020c62:	83 ec 1c             	sub    esp,0x1c
c0020c65:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c6a:	74 07                	je     c0020c73 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c6c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c71:	75 07                	jne    c0020c7a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c73:	b8 04 00 00 00       	mov    eax,0x4
c0020c78:	eb 3d                	jmp    c0020cb7 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c7a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c7e:	50                   	push   eax
c0020c7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c87:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c8b:	e8 45 47 fe ff       	call   c00053d5 <f_read>
c0020c90:	83 c4 10             	add    esp,0x10
c0020c93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c9b:	89 c2                	mov    edx,eax
c0020c9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020ca1:	89 10                	mov    DWORD PTR [eax],edx
c0020ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ca7:	85 c0                	test   eax,eax
c0020ca9:	75 07                	jne    c0020cb2 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020cab:	b8 00 00 00 00       	mov    eax,0x0
c0020cb0:	eb 05                	jmp    c0020cb7 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020cb2:	b8 01 00 00 00       	mov    eax,0x1
c0020cb7:	83 c4 1c             	add    esp,0x1c
c0020cba:	c3                   	ret    
c0020cbb:	90                   	nop

c0020cbc <FAT::write(void*, unsigned long, void*, int*)>:
c0020cbc:	83 ec 1c             	sub    esp,0x1c
c0020cbf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cc4:	74 07                	je     c0020ccd <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020cc6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ccb:	75 07                	jne    c0020cd4 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020ccd:	b8 04 00 00 00       	mov    eax,0x4
c0020cd2:	eb 3d                	jmp    c0020d11 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cd4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cd8:	50                   	push   eax
c0020cd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ce1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ce5:	e8 6b 49 fe ff       	call   c0005655 <f_write>
c0020cea:	83 c4 10             	add    esp,0x10
c0020ced:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cf5:	89 c2                	mov    edx,eax
c0020cf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cfb:	89 10                	mov    DWORD PTR [eax],edx
c0020cfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d01:	85 c0                	test   eax,eax
c0020d03:	75 07                	jne    c0020d0c <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020d05:	b8 00 00 00 00       	mov    eax,0x0
c0020d0a:	eb 05                	jmp    c0020d11 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d0c:	b8 01 00 00 00       	mov    eax,0x1
c0020d11:	83 c4 1c             	add    esp,0x1c
c0020d14:	c3                   	ret    
c0020d15:	90                   	nop

c0020d16 <FAT::close(void*)>:
c0020d16:	83 ec 1c             	sub    esp,0x1c
c0020d19:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d1e:	75 07                	jne    c0020d27 <FAT::close(void*)+0x11>
c0020d20:	b8 04 00 00 00       	mov    eax,0x4
c0020d25:	eb 36                	jmp    c0020d5d <FAT::close(void*)+0x47>
c0020d27:	83 ec 0c             	sub    esp,0xc
c0020d2a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d2e:	e8 b8 4d fe ff       	call   c0005aeb <f_close>
c0020d33:	83 c4 10             	add    esp,0x10
c0020d36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d3a:	83 ec 0c             	sub    esp,0xc
c0020d3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d41:	e8 15 eb fe ff       	call   c000f85b <free>
c0020d46:	83 c4 10             	add    esp,0x10
c0020d49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d4d:	85 c0                	test   eax,eax
c0020d4f:	75 07                	jne    c0020d58 <FAT::close(void*)+0x42>
c0020d51:	b8 00 00 00 00       	mov    eax,0x0
c0020d56:	eb 05                	jmp    c0020d5d <FAT::close(void*)+0x47>
c0020d58:	b8 01 00 00 00       	mov    eax,0x1
c0020d5d:	83 c4 1c             	add    esp,0x1c
c0020d60:	c3                   	ret    
c0020d61:	90                   	nop

c0020d62 <FAT::closeDir(void*)>:
c0020d62:	83 ec 1c             	sub    esp,0x1c
c0020d65:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d6a:	75 07                	jne    c0020d73 <FAT::closeDir(void*)+0x11>
c0020d6c:	b8 04 00 00 00       	mov    eax,0x4
c0020d71:	eb 36                	jmp    c0020da9 <FAT::closeDir(void*)+0x47>
c0020d73:	83 ec 0c             	sub    esp,0xc
c0020d76:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d7a:	e8 54 53 fe ff       	call   c00060d3 <f_closedir>
c0020d7f:	83 c4 10             	add    esp,0x10
c0020d82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d86:	83 ec 0c             	sub    esp,0xc
c0020d89:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d8d:	e8 c9 ea fe ff       	call   c000f85b <free>
c0020d92:	83 c4 10             	add    esp,0x10
c0020d95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d99:	85 c0                	test   eax,eax
c0020d9b:	75 07                	jne    c0020da4 <FAT::closeDir(void*)+0x42>
c0020d9d:	b8 00 00 00 00       	mov    eax,0x0
c0020da2:	eb 05                	jmp    c0020da9 <FAT::closeDir(void*)+0x47>
c0020da4:	b8 01 00 00 00       	mov    eax,0x1
c0020da9:	83 c4 1c             	add    esp,0x1c
c0020dac:	c3                   	ret    
c0020dad:	90                   	nop

c0020dae <FAT::seek(void*, unsigned long long)>:
c0020dae:	83 ec 2c             	sub    esp,0x2c
c0020db1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020db5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020db9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020dbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dc1:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020dc6:	75 07                	jne    c0020dcf <FAT::seek(void*, unsigned long long)+0x21>
c0020dc8:	b8 04 00 00 00       	mov    eax,0x4
c0020dcd:	eb 2f                	jmp    c0020dfe <FAT::seek(void*, unsigned long long)+0x50>
c0020dcf:	83 ec 04             	sub    esp,0x4
c0020dd2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dd6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dda:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020dde:	e8 37 4d fe ff       	call   c0005b1a <f_lseek>
c0020de3:	83 c4 10             	add    esp,0x10
c0020de6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020dea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020dee:	85 c0                	test   eax,eax
c0020df0:	75 07                	jne    c0020df9 <FAT::seek(void*, unsigned long long)+0x4b>
c0020df2:	b8 00 00 00 00       	mov    eax,0x0
c0020df7:	eb 05                	jmp    c0020dfe <FAT::seek(void*, unsigned long long)+0x50>
c0020df9:	b8 01 00 00 00       	mov    eax,0x1
c0020dfe:	83 c4 2c             	add    esp,0x2c
c0020e01:	c3                   	ret    

c0020e02 <fatWrapperReadDisk>:
c0020e02:	83 ec 1c             	sub    esp,0x1c
c0020e05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e09:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e11:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e1c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e21:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0020e28:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e2c:	83 ec 0c             	sub    esp,0xc
c0020e2f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e33:	52                   	push   edx
c0020e34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e3c:	50                   	push   eax
c0020e3d:	e8 28 59 ff ff       	call   c001676a <LogicalDisk::read(unsigned long long, int, void*)>
c0020e42:	83 c4 20             	add    esp,0x20
c0020e45:	83 c4 1c             	add    esp,0x1c
c0020e48:	c3                   	ret    

c0020e49 <fatWrapperWriteDisk>:
c0020e49:	83 ec 1c             	sub    esp,0x1c
c0020e4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e50:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e54:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e58:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e63:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e68:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0020e6f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e73:	83 ec 0c             	sub    esp,0xc
c0020e76:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e7a:	52                   	push   edx
c0020e7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e83:	50                   	push   eax
c0020e84:	e8 4d 59 ff ff       	call   c00167d6 <LogicalDisk::write(unsigned long long, int, void*)>
c0020e89:	83 c4 20             	add    esp,0x20
c0020e8c:	83 c4 1c             	add    esp,0x1c
c0020e8f:	c3                   	ret    

c0020e90 <fatWrapperIoctl>:
c0020e90:	53                   	push   ebx
c0020e91:	83 ec 28             	sub    esp,0x28
c0020e94:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e9c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020ea0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020ea4:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020ea9:	75 31                	jne    c0020edc <fatWrapperIoctl+0x4c>
c0020eab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020eaf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020eb3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020eb8:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0020ebf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ec5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020ecb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ecf:	66 89 02             	mov    WORD PTR [edx],ax
c0020ed2:	b8 00 00 00 00       	mov    eax,0x0
c0020ed7:	e9 b2 00 00 00       	jmp    c0020f8e <fatWrapperIoctl+0xfe>
c0020edc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020ee1:	75 6a                	jne    c0020f4d <fatWrapperIoctl+0xbd>
c0020ee3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ee7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020eeb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ef0:	8b 04 85 80 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1580]
c0020ef7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020efd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020f03:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020f09:	89 c8                	mov    eax,ecx
c0020f0b:	89 da                	mov    edx,ebx
c0020f0d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020f11:	c1 e0 0a             	shl    eax,0xa
c0020f14:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f19:	8b 0c 8d 80 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1580]
c0020f20:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f26:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f2c:	89 cb                	mov    ebx,ecx
c0020f2e:	c1 fb 1f             	sar    ebx,0x1f
c0020f31:	53                   	push   ebx
c0020f32:	51                   	push   ecx
c0020f33:	52                   	push   edx
c0020f34:	50                   	push   eax
c0020f35:	e8 ca 5a 00 00       	call   c0026a04 <__udivdi3>
c0020f3a:	83 c4 10             	add    esp,0x10
c0020f3d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f41:	89 01                	mov    DWORD PTR [ecx],eax
c0020f43:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f46:	b8 00 00 00 00       	mov    eax,0x0
c0020f4b:	eb 41                	jmp    c0020f8e <fatWrapperIoctl+0xfe>
c0020f4d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f52:	75 07                	jne    c0020f5b <fatWrapperIoctl+0xcb>
c0020f54:	b8 00 00 00 00       	mov    eax,0x0
c0020f59:	eb 33                	jmp    c0020f8e <fatWrapperIoctl+0xfe>
c0020f5b:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f60:	75 19                	jne    c0020f7b <fatWrapperIoctl+0xeb>
c0020f62:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f6e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f74:	b8 00 00 00 00       	mov    eax,0x0
c0020f79:	eb 13                	jmp    c0020f8e <fatWrapperIoctl+0xfe>
c0020f7b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f80:	75 07                	jne    c0020f89 <fatWrapperIoctl+0xf9>
c0020f82:	b8 00 00 00 00       	mov    eax,0x0
c0020f87:	eb 05                	jmp    c0020f8e <fatWrapperIoctl+0xfe>
c0020f89:	b8 04 00 00 00       	mov    eax,0x4
c0020f8e:	83 c4 28             	add    esp,0x28
c0020f91:	5b                   	pop    ebx
c0020f92:	c3                   	ret    
c0020f93:	90                   	nop

c0020f94 <FAT::FAT()>:
c0020f94:	83 ec 1c             	sub    esp,0x1c
c0020f97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f9b:	83 ec 0c             	sub    esp,0xc
c0020f9e:	50                   	push   eax
c0020f9f:	e8 40 22 ff ff       	call   c00131e4 <Filesystem::Filesystem()>
c0020fa4:	83 c4 10             	add    esp,0x10
c0020fa7:	ba e0 c8 02 c0       	mov    edx,0xc002c8e0
c0020fac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fb0:	89 10                	mov    DWORD PTR [eax],edx
c0020fb2:	c7 05 a0 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031aa0,0x0
c0020fbc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020fc4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020fc9:	7f 15                	jg     c0020fe0 <FAT::FAT()+0x4c>
c0020fcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fcf:	c7 04 85 c0 1a 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce540],0xffffffff
c0020fda:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020fde:	eb e4                	jmp    c0020fc4 <FAT::FAT()+0x30>
c0020fe0:	90                   	nop
c0020fe1:	83 c4 1c             	add    esp,0x1c
c0020fe4:	c3                   	ret    
c0020fe5:	90                   	nop

c0020fe6 <FAT::fixFilepath(char*)>:
c0020fe6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fea:	8a 00                	mov    al,BYTE PTR [eax]
c0020fec:	3c 40                	cmp    al,0x40
c0020fee:	7e 2c                	jle    c002101c <FAT::fixFilepath(char*)+0x36>
c0020ff0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ff4:	8a 00                	mov    al,BYTE PTR [eax]
c0020ff6:	83 e8 41             	sub    eax,0x41
c0020ff9:	88 c2                	mov    dl,al
c0020ffb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fff:	88 10                	mov    BYTE PTR [eax],dl
c0021001:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021005:	8a 00                	mov    al,BYTE PTR [eax]
c0021007:	0f be c0             	movsx  eax,al
c002100a:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c0021011:	83 c0 30             	add    eax,0x30
c0021014:	88 c2                	mov    dl,al
c0021016:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002101a:	88 10                	mov    BYTE PTR [eax],dl
c002101c:	90                   	nop
c002101d:	c3                   	ret    

c002101e <FAT::open(char const*, void**, FileOpenMode)>:
c002101e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021024:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002102c:	74 0a                	je     c0021038 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c002102e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021036:	75 0a                	jne    c0021042 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021038:	b8 04 00 00 00       	mov    eax,0x4
c002103d:	e9 fd 00 00 00       	jmp    c002113f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021042:	83 ec 08             	sub    esp,0x8
c0021045:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002104c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021050:	50                   	push   eax
c0021051:	e8 e6 f7 fd ff       	call   c000083c <strcpy>
c0021056:	83 c4 10             	add    esp,0x10
c0021059:	83 ec 08             	sub    esp,0x8
c002105c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021060:	50                   	push   eax
c0021061:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021068:	e8 79 ff ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c002106d:	83 c4 10             	add    esp,0x10
c0021070:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021078:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002107f:	83 e0 01             	and    eax,0x1
c0021082:	74 08                	je     c002108c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021084:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002108c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021093:	83 e0 04             	and    eax,0x4
c0021096:	74 10                	je     c00210a8 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021098:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00210a0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210a8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210af:	83 e0 02             	and    eax,0x2
c00210b2:	74 08                	je     c00210bc <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00210b4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210c3:	83 e0 08             	and    eax,0x8
c00210c6:	74 08                	je     c00210d0 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00210c8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00210d0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210d7:	83 e0 10             	and    eax,0x10
c00210da:	74 08                	je     c00210e4 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00210dc:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00210e4:	83 ec 0c             	sub    esp,0xc
c00210e7:	68 50 02 00 00       	push   0x250
c00210ec:	e8 5a e7 fe ff       	call   c000f84b <malloc>
c00210f1:	83 c4 10             	add    esp,0x10
c00210f4:	89 c2                	mov    edx,eax
c00210f6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210fd:	89 10                	mov    DWORD PTR [eax],edx
c00210ff:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021107:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002110e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021110:	83 ec 04             	sub    esp,0x4
c0021113:	52                   	push   edx
c0021114:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021118:	52                   	push   edx
c0021119:	50                   	push   eax
c002111a:	e8 7a 3e fe ff       	call   c0004f99 <f_open>
c002111f:	83 c4 10             	add    esp,0x10
c0021122:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021129:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021131:	74 07                	je     c002113a <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021133:	b8 01 00 00 00       	mov    eax,0x1
c0021138:	eb 05                	jmp    c002113f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002113a:	b8 00 00 00 00       	mov    eax,0x0
c002113f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021145:	c3                   	ret    

c0021146 <FAT::openDir(char const*, void**)>:
c0021146:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002114c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021154:	74 0a                	je     c0021160 <FAT::openDir(char const*, void**)+0x1a>
c0021156:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002115e:	75 07                	jne    c0021167 <FAT::openDir(char const*, void**)+0x21>
c0021160:	b8 04 00 00 00       	mov    eax,0x4
c0021165:	eb 7d                	jmp    c00211e4 <FAT::openDir(char const*, void**)+0x9e>
c0021167:	83 ec 08             	sub    esp,0x8
c002116a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021171:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021175:	50                   	push   eax
c0021176:	e8 c1 f6 fd ff       	call   c000083c <strcpy>
c002117b:	83 c4 10             	add    esp,0x10
c002117e:	83 ec 08             	sub    esp,0x8
c0021181:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021185:	50                   	push   eax
c0021186:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002118d:	e8 54 fe ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c0021192:	83 c4 10             	add    esp,0x10
c0021195:	83 ec 0c             	sub    esp,0xc
c0021198:	6a 4c                	push   0x4c
c002119a:	e8 ac e6 fe ff       	call   c000f84b <malloc>
c002119f:	83 c4 10             	add    esp,0x10
c00211a2:	89 c2                	mov    edx,eax
c00211a4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211ab:	89 10                	mov    DWORD PTR [eax],edx
c00211ad:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00211b6:	83 ec 08             	sub    esp,0x8
c00211b9:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211bd:	52                   	push   edx
c00211be:	50                   	push   eax
c00211bf:	e8 0d 4e fe ff       	call   c0005fd1 <f_opendir>
c00211c4:	83 c4 10             	add    esp,0x10
c00211c7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211ce:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00211d6:	74 07                	je     c00211df <FAT::openDir(char const*, void**)+0x99>
c00211d8:	b8 01 00 00 00       	mov    eax,0x1
c00211dd:	eb 05                	jmp    c00211e4 <FAT::openDir(char const*, void**)+0x9e>
c00211df:	b8 00 00 00 00       	mov    eax,0x0
c00211e4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211ea:	c3                   	ret    
c00211eb:	90                   	nop

c00211ec <FAT::stat(char const*, unsigned long long*, bool*)>:
c00211ec:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00211f2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211fa:	75 0a                	jne    c0021206 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00211fc:	b8 04 00 00 00       	mov    eax,0x4
c0021201:	e9 c9 00 00 00       	jmp    c00212cf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021206:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002120e:	75 0a                	jne    c002121a <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021210:	b8 04 00 00 00       	mov    eax,0x4
c0021215:	e9 b5 00 00 00       	jmp    c00212cf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002121a:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021222:	75 0a                	jne    c002122e <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021224:	b8 04 00 00 00       	mov    eax,0x4
c0021229:	e9 a1 00 00 00       	jmp    c00212cf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002122e:	83 ec 08             	sub    esp,0x8
c0021231:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021238:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002123f:	50                   	push   eax
c0021240:	e8 f7 f5 fd ff       	call   c000083c <strcpy>
c0021245:	83 c4 10             	add    esp,0x10
c0021248:	83 ec 08             	sub    esp,0x8
c002124b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021252:	50                   	push   eax
c0021253:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002125a:	e8 87 fd ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c002125f:	83 c4 10             	add    esp,0x10
c0021262:	83 ec 08             	sub    esp,0x8
c0021265:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021269:	50                   	push   eax
c002126a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021271:	50                   	push   eax
c0021272:	e8 19 4f fe ff       	call   c0006190 <f_stat>
c0021277:	83 c4 10             	add    esp,0x10
c002127a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021281:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021288:	85 c0                	test   eax,eax
c002128a:	74 07                	je     c0021293 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002128c:	83 f8 04             	cmp    eax,0x4
c002128f:	74 32                	je     c00212c3 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021291:	eb 37                	jmp    c00212ca <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021293:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021297:	0f b6 c0             	movzx  eax,al
c002129a:	83 e0 10             	and    eax,0x10
c002129d:	0f 95 c2             	setne  dl
c00212a0:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00212a7:	88 10                	mov    BYTE PTR [eax],dl
c00212a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00212ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00212b0:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00212b7:	89 01                	mov    DWORD PTR [ecx],eax
c00212b9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00212bc:	b8 00 00 00 00       	mov    eax,0x0
c00212c1:	eb 0c                	jmp    c00212cf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212c3:	b8 02 00 00 00       	mov    eax,0x2
c00212c8:	eb 05                	jmp    c00212cf <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212ca:	b8 01 00 00 00       	mov    eax,0x1
c00212cf:	81 c4 2c 02 00 00    	add    esp,0x22c
c00212d5:	c3                   	ret    

c00212d6 <FAT::unlink(char const*)>:
c00212d6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212dc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212e4:	75 07                	jne    c00212ed <FAT::unlink(char const*)+0x17>
c00212e6:	b8 04 00 00 00       	mov    eax,0x4
c00212eb:	eb 5c                	jmp    c0021349 <FAT::unlink(char const*)+0x73>
c00212ed:	83 ec 08             	sub    esp,0x8
c00212f0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212fb:	50                   	push   eax
c00212fc:	e8 3b f5 fd ff       	call   c000083c <strcpy>
c0021301:	83 c4 10             	add    esp,0x10
c0021304:	83 ec 08             	sub    esp,0x8
c0021307:	8d 44 24 14          	lea    eax,[esp+0x14]
c002130b:	50                   	push   eax
c002130c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021313:	e8 ce fc ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c0021318:	83 c4 10             	add    esp,0x10
c002131b:	83 ec 0c             	sub    esp,0xc
c002131e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021322:	50                   	push   eax
c0021323:	e8 ba 51 fe ff       	call   c00064e2 <f_unlink>
c0021328:	83 c4 10             	add    esp,0x10
c002132b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021332:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021339:	85 c0                	test   eax,eax
c002133b:	75 07                	jne    c0021344 <FAT::unlink(char const*)+0x6e>
c002133d:	b8 00 00 00 00       	mov    eax,0x0
c0021342:	eb 05                	jmp    c0021349 <FAT::unlink(char const*)+0x73>
c0021344:	b8 01 00 00 00       	mov    eax,0x1
c0021349:	81 c4 1c 01 00 00    	add    esp,0x11c
c002134f:	c3                   	ret    

c0021350 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021350:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021356:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002135d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021364:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021368:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002136c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021374:	75 0a                	jne    c0021380 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021376:	b8 04 00 00 00       	mov    eax,0x4
c002137b:	e9 1c 01 00 00       	jmp    c002149c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021380:	83 ec 08             	sub    esp,0x8
c0021383:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002138a:	8d 44 24 24          	lea    eax,[esp+0x24]
c002138e:	50                   	push   eax
c002138f:	e8 a8 f4 fd ff       	call   c000083c <strcpy>
c0021394:	83 c4 10             	add    esp,0x10
c0021397:	83 ec 08             	sub    esp,0x8
c002139a:	8d 44 24 20          	lea    eax,[esp+0x20]
c002139e:	50                   	push   eax
c002139f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213a6:	e8 3b fc ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c00213ab:	83 c4 10             	add    esp,0x10
c00213ae:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00213b6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00213be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213c3:	83 e0 01             	and    eax,0x1
c00213c6:	74 08                	je     c00213d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00213c8:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00213d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213d5:	83 e0 02             	and    eax,0x2
c00213d8:	74 08                	je     c00213e2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00213da:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00213e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213e7:	83 e0 04             	and    eax,0x4
c00213ea:	74 08                	je     c00213f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00213ec:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00213f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213f9:	83 e0 08             	and    eax,0x8
c00213fc:	74 08                	je     c0021406 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213fe:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021406:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002140b:	83 e0 01             	and    eax,0x1
c002140e:	74 08                	je     c0021418 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021410:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021418:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002141d:	83 e0 02             	and    eax,0x2
c0021420:	74 08                	je     c002142a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021422:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002142a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002142f:	83 e0 04             	and    eax,0x4
c0021432:	74 08                	je     c002143c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021434:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002143c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021441:	83 e0 08             	and    eax,0x8
c0021444:	74 08                	je     c002144e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021446:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002144e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021455:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002145c:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021464:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002146c:	83 ec 04             	sub    esp,0x4
c002146f:	52                   	push   edx
c0021470:	50                   	push   eax
c0021471:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021475:	50                   	push   eax
c0021476:	e8 09 57 fe ff       	call   c0006b84 <f_chmod>
c002147b:	83 c4 10             	add    esp,0x10
c002147e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021485:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002148c:	85 c0                	test   eax,eax
c002148e:	75 07                	jne    c0021497 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021490:	b8 00 00 00 00       	mov    eax,0x0
c0021495:	eb 05                	jmp    c002149c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021497:	b8 01 00 00 00       	mov    eax,0x1
c002149c:	81 c4 2c 01 00 00    	add    esp,0x12c
c00214a2:	c3                   	ret    
c00214a3:	90                   	nop

c00214a4 <FAT::rename(char const*, char const*)>:
c00214a4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00214aa:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00214b2:	74 0a                	je     c00214be <FAT::rename(char const*, char const*)+0x1a>
c00214b4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00214bc:	75 0a                	jne    c00214c8 <FAT::rename(char const*, char const*)+0x24>
c00214be:	b8 04 00 00 00       	mov    eax,0x4
c00214c3:	e9 98 00 00 00       	jmp    c0021560 <FAT::rename(char const*, char const*)+0xbc>
c00214c8:	83 ec 08             	sub    esp,0x8
c00214cb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214d2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214d9:	50                   	push   eax
c00214da:	e8 5d f3 fd ff       	call   c000083c <strcpy>
c00214df:	83 c4 10             	add    esp,0x10
c00214e2:	83 ec 08             	sub    esp,0x8
c00214e5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00214ec:	50                   	push   eax
c00214ed:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214f4:	e8 ed fa ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c00214f9:	83 c4 10             	add    esp,0x10
c00214fc:	83 ec 08             	sub    esp,0x8
c00214ff:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021506:	8d 44 24 18          	lea    eax,[esp+0x18]
c002150a:	50                   	push   eax
c002150b:	e8 2c f3 fd ff       	call   c000083c <strcpy>
c0021510:	83 c4 10             	add    esp,0x10
c0021513:	83 ec 08             	sub    esp,0x8
c0021516:	8d 44 24 14          	lea    eax,[esp+0x14]
c002151a:	50                   	push   eax
c002151b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021522:	e8 bf fa ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c0021527:	83 c4 10             	add    esp,0x10
c002152a:	83 ec 08             	sub    esp,0x8
c002152d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021531:	50                   	push   eax
c0021532:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021539:	50                   	push   eax
c002153a:	e8 52 53 fe ff       	call   c0006891 <f_rename>
c002153f:	83 c4 10             	add    esp,0x10
c0021542:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021549:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021550:	85 c0                	test   eax,eax
c0021552:	75 07                	jne    c002155b <FAT::rename(char const*, char const*)+0xb7>
c0021554:	b8 00 00 00 00       	mov    eax,0x0
c0021559:	eb 05                	jmp    c0021560 <FAT::rename(char const*, char const*)+0xbc>
c002155b:	b8 01 00 00 00       	mov    eax,0x1
c0021560:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021566:	c3                   	ret    
c0021567:	90                   	nop

c0021568 <FAT::mkdir(char const*)>:
c0021568:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002156e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021576:	75 07                	jne    c002157f <FAT::mkdir(char const*)+0x17>
c0021578:	b8 04 00 00 00       	mov    eax,0x4
c002157d:	eb 5c                	jmp    c00215db <FAT::mkdir(char const*)+0x73>
c002157f:	83 ec 08             	sub    esp,0x8
c0021582:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021589:	8d 44 24 18          	lea    eax,[esp+0x18]
c002158d:	50                   	push   eax
c002158e:	e8 a9 f2 fd ff       	call   c000083c <strcpy>
c0021593:	83 c4 10             	add    esp,0x10
c0021596:	83 ec 08             	sub    esp,0x8
c0021599:	8d 44 24 14          	lea    eax,[esp+0x14]
c002159d:	50                   	push   eax
c002159e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215a5:	e8 3c fa ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c00215aa:	83 c4 10             	add    esp,0x10
c00215ad:	83 ec 0c             	sub    esp,0xc
c00215b0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215b4:	50                   	push   eax
c00215b5:	e8 ab 50 fe ff       	call   c0006665 <f_mkdir>
c00215ba:	83 c4 10             	add    esp,0x10
c00215bd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00215c4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215cb:	85 c0                	test   eax,eax
c00215cd:	75 07                	jne    c00215d6 <FAT::mkdir(char const*)+0x6e>
c00215cf:	b8 00 00 00 00       	mov    eax,0x0
c00215d4:	eb 05                	jmp    c00215db <FAT::mkdir(char const*)+0x73>
c00215d6:	b8 01 00 00 00       	mov    eax,0x1
c00215db:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215e1:	c3                   	ret    

c00215e2 <FAT::exists(char const*)>:
c00215e2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00215e8:	83 ec 08             	sub    esp,0x8
c00215eb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215f6:	50                   	push   eax
c00215f7:	e8 40 f2 fd ff       	call   c000083c <strcpy>
c00215fc:	83 c4 10             	add    esp,0x10
c00215ff:	83 ec 08             	sub    esp,0x8
c0021602:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021606:	50                   	push   eax
c0021607:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002160e:	e8 d3 f9 ff ff       	call   c0020fe6 <FAT::fixFilepath(char*)>
c0021613:	83 c4 10             	add    esp,0x10
c0021616:	83 ec 08             	sub    esp,0x8
c0021619:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021620:	50                   	push   eax
c0021621:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021625:	50                   	push   eax
c0021626:	e8 65 4b fe ff       	call   c0006190 <f_stat>
c002162b:	83 c4 10             	add    esp,0x10
c002162e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021635:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002163c:	85 c0                	test   eax,eax
c002163e:	75 04                	jne    c0021644 <FAT::exists(char const*)+0x62>
c0021640:	b0 01                	mov    al,0x1
c0021642:	eb 02                	jmp    c0021646 <FAT::exists(char const*)+0x64>
c0021644:	b0 00                	mov    al,0x0
c0021646:	81 c4 2c 02 00 00    	add    esp,0x22c
c002164c:	c3                   	ret    
c002164d:	90                   	nop

c002164e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002164e:	b8 08 00 00 00       	mov    eax,0x8
c0021653:	c3                   	ret    

c0021654 <ISO9660::seek(void*, unsigned long long)>:
c0021654:	53                   	push   ebx
c0021655:	b8 04 00 00 00       	mov    eax,0x4
c002165a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002165e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021662:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021666:	85 d2                	test   edx,edx
c0021668:	74 17                	je     c0021681 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002166a:	89 c8                	mov    eax,ecx
c002166c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002166f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021672:	b8 01 00 00 00       	mov    eax,0x1
c0021677:	73 08                	jae    c0021681 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021679:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002167c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002167f:	31 c0                	xor    eax,eax
c0021681:	5b                   	pop    ebx
c0021682:	c3                   	ret    
c0021683:	90                   	nop

c0021684 <ISO9660::tell(void*, unsigned long long*)>:
c0021684:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021688:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002168c:	85 d2                	test   edx,edx
c002168e:	74 12                	je     c00216a2 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021690:	85 c0                	test   eax,eax
c0021692:	74 0e                	je     c00216a2 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021694:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021697:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002169a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002169d:	89 10                	mov    DWORD PTR [eax],edx
c002169f:	31 c0                	xor    eax,eax
c00216a1:	c3                   	ret    
c00216a2:	b8 04 00 00 00       	mov    eax,0x4
c00216a7:	c3                   	ret    

c00216a8 <ISO9660::getName()>:
c00216a8:	b8 3c c9 02 c0       	mov    eax,0xc002c93c
c00216ad:	c3                   	ret    

c00216ae <ISO9660::stat(void*, unsigned long long*)>:
c00216ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216b6:	85 d2                	test   edx,edx
c00216b8:	74 12                	je     c00216cc <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216ba:	85 c0                	test   eax,eax
c00216bc:	74 0e                	je     c00216cc <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216be:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00216c1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00216c4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216c7:	89 10                	mov    DWORD PTR [eax],edx
c00216c9:	31 c0                	xor    eax,eax
c00216cb:	c3                   	ret    
c00216cc:	b8 04 00 00 00       	mov    eax,0x4
c00216d1:	c3                   	ret    

c00216d2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00216d2:	b8 01 00 00 00       	mov    eax,0x1
c00216d7:	c3                   	ret    

c00216d8 <ISO9660::unlink(char const*)>:
c00216d8:	b8 01 00 00 00       	mov    eax,0x1
c00216dd:	c3                   	ret    

c00216de <ISO9660::write(void*, unsigned long, void*, int*)>:
c00216de:	b8 01 00 00 00       	mov    eax,0x1
c00216e3:	c3                   	ret    

c00216e4 <ISO9660::rename(char const*, char const*)>:
c00216e4:	b8 01 00 00 00       	mov    eax,0x1
c00216e9:	c3                   	ret    

c00216ea <ISO9660::mkdir(char const*)>:
c00216ea:	b8 01 00 00 00       	mov    eax,0x1
c00216ef:	c3                   	ret    

c00216f0 <ISO9660::close(void*)>:
c00216f0:	83 ec 0c             	sub    esp,0xc
c00216f3:	b8 04 00 00 00       	mov    eax,0x4
c00216f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216fc:	85 d2                	test   edx,edx
c00216fe:	74 0e                	je     c002170e <ISO9660::close(void*)+0x1e>
c0021700:	83 ec 0c             	sub    esp,0xc
c0021703:	52                   	push   edx
c0021704:	e8 52 e1 fe ff       	call   c000f85b <free>
c0021709:	83 c4 10             	add    esp,0x10
c002170c:	31 c0                	xor    eax,eax
c002170e:	83 c4 0c             	add    esp,0xc
c0021711:	c3                   	ret    

c0021712 <ISO9660::closeDir(void*)>:
c0021712:	83 ec 0c             	sub    esp,0xc
c0021715:	b8 04 00 00 00       	mov    eax,0x4
c002171a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002171e:	85 d2                	test   edx,edx
c0021720:	74 0e                	je     c0021730 <ISO9660::closeDir(void*)+0x1e>
c0021722:	83 ec 0c             	sub    esp,0xc
c0021725:	52                   	push   edx
c0021726:	e8 30 e1 fe ff       	call   c000f85b <free>
c002172b:	83 c4 10             	add    esp,0x10
c002172e:	31 c0                	xor    eax,eax
c0021730:	83 c4 0c             	add    esp,0xc
c0021733:	c3                   	ret    

c0021734 <ISO9660::~ISO9660()>:
c0021734:	83 ec 0c             	sub    esp,0xc
c0021737:	ba a0 c9 02 c0       	mov    edx,0xc002c9a0
c002173c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021740:	89 10                	mov    DWORD PTR [eax],edx
c0021742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021746:	83 ec 0c             	sub    esp,0xc
c0021749:	50                   	push   eax
c002174a:	e8 b9 1a ff ff       	call   c0013208 <Filesystem::~Filesystem()>
c002174f:	83 c4 10             	add    esp,0x10
c0021752:	90                   	nop
c0021753:	83 c4 0c             	add    esp,0xc
c0021756:	c3                   	ret    
c0021757:	90                   	nop

c0021758 <ISO9660::~ISO9660()>:
c0021758:	83 ec 0c             	sub    esp,0xc
c002175b:	83 ec 0c             	sub    esp,0xc
c002175e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021762:	e8 cd ff ff ff       	call   c0021734 <ISO9660::~ISO9660()>
c0021767:	83 c4 10             	add    esp,0x10
c002176a:	83 ec 08             	sub    esp,0x8
c002176d:	6a 08                	push   0x8
c002176f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021773:	e8 87 16 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0021778:	83 c4 10             	add    esp,0x10
c002177b:	83 c4 0c             	add    esp,0xc
c002177e:	c3                   	ret    

c002177f <__memmem(unsigned char*, int, unsigned char*, int)>:
c002177f:	55                   	push   ebp
c0021780:	31 c9                	xor    ecx,ecx
c0021782:	57                   	push   edi
c0021783:	56                   	push   esi
c0021784:	53                   	push   ebx
c0021785:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021789:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002178d:	89 eb                	mov    ebx,ebp
c002178f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021793:	39 ce                	cmp    esi,ecx
c0021795:	7e 17                	jle    c00217ae <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021797:	31 d2                	xor    edx,edx
c0021799:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002179d:	7d 13                	jge    c00217b2 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002179f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00217a3:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00217a6:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00217a9:	75 0d                	jne    c00217b8 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00217ab:	42                   	inc    edx
c00217ac:	eb eb                	jmp    c0021799 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00217ae:	31 c0                	xor    eax,eax
c00217b0:	eb 0a                	jmp    c00217bc <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217b2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00217b6:	eb 04                	jmp    c00217bc <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217b8:	41                   	inc    ecx
c00217b9:	43                   	inc    ebx
c00217ba:	eb d7                	jmp    c0021793 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00217bc:	5b                   	pop    ebx
c00217bd:	5e                   	pop    esi
c00217be:	5f                   	pop    edi
c00217bf:	5d                   	pop    ebp
c00217c0:	c3                   	ret    

c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00217c1:	56                   	push   esi
c00217c2:	53                   	push   ebx
c00217c3:	52                   	push   edx
c00217c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217c8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00217cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00217d0:	39 0d a0 1b 03 c0    	cmp    DWORD PTR ds:0xc0031ba0,ecx
c00217d6:	75 08                	jne    c00217e0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00217d8:	38 05 f4 d9 02 c0    	cmp    BYTE PTR ds:0xc002d9f4,al
c00217de:	74 2b                	je     c002180b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00217e0:	83 ec 0c             	sub    esp,0xc
c00217e3:	a2 f4 d9 02 c0       	mov    ds:0xc002d9f4,al
c00217e8:	68 c0 1b 03 c0       	push   0xc0031bc0
c00217ed:	0f be c0             	movsx  eax,al
c00217f0:	6a 01                	push   0x1
c00217f2:	89 0d a0 1b 03 c0    	mov    DWORD PTR ds:0xc0031ba0,ecx
c00217f8:	31 db                	xor    ebx,ebx
c00217fa:	53                   	push   ebx
c00217fb:	51                   	push   ecx
c00217fc:	ff 34 85 7c e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1684]
c0021803:	e8 62 4f ff ff       	call   c001676a <LogicalDisk::read(unsigned long long, int, void*)>
c0021808:	83 c4 20             	add    esp,0x20
c002180b:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021813:	c7 44 24 14 c0 1b 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031bc0
c002181b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002181f:	58                   	pop    eax
c0021820:	5b                   	pop    ebx
c0021821:	5e                   	pop    esi
c0021822:	e9 25 ef fd ff       	jmp    c000074c <memcpy>
c0021827:	90                   	nop

c0021828 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021828:	81 ec 10 08 00 00    	sub    esp,0x810
c002182e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021835:	83 c0 41             	add    eax,0x41
c0021838:	0f be c0             	movsx  eax,al
c002183b:	50                   	push   eax
c002183c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021840:	50                   	push   eax
c0021841:	6a 10                	push   0x10
c0021843:	e8 79 ff ff ff       	call   c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021848:	83 c4 10             	add    esp,0x10
c002184b:	31 c0                	xor    eax,eax
c002184d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021852:	75 1d                	jne    c0021871 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021854:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021859:	75 16                	jne    c0021871 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002185b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021860:	75 0f                	jne    c0021871 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021862:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021867:	75 08                	jne    c0021871 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021869:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002186e:	0f 94 c0             	sete   al
c0021871:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021877:	c3                   	ret    

c0021878 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021878:	55                   	push   ebp
c0021879:	57                   	push   edi
c002187a:	56                   	push   esi
c002187b:	53                   	push   ebx
c002187c:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021882:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021889:	85 ed                	test   ebp,ebp
c002188b:	0f 84 d6 01 00 00    	je     c0021a67 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021891:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021899:	0f 84 c8 01 00 00    	je     c0021a67 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002189f:	b8 01 00 00 00       	mov    eax,0x1
c00218a4:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00218a8:	0f 85 be 01 00 00    	jne    c0021a6c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00218ae:	31 d2                	xor    edx,edx
c00218b0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00218b7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00218ba:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00218bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00218c1:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00218c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00218c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218cb:	01 f0                	add    eax,esi
c00218cd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00218d0:	11 fa                	adc    edx,edi
c00218d2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00218d6:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00218da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00218de:	19 d1                	sbb    ecx,edx
c00218e0:	72 0a                	jb     c00218ec <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00218e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218ea:	eb 13                	jmp    c00218ff <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00218ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218f4:	29 f0                	sub    eax,esi
c00218f6:	19 fa                	sbb    edx,edi
c00218f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00218fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021902:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021905:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021909:	51                   	push   ecx
c002190a:	c1 e0 0b             	shl    eax,0xb
c002190d:	01 c6                	add    esi,eax
c002190f:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021913:	11 d7                	adc    edi,edx
c0021915:	50                   	push   eax
c0021916:	89 fa                	mov    edx,edi
c0021918:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002191c:	89 f0                	mov    eax,esi
c002191e:	53                   	push   ebx
c002191f:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021923:	50                   	push   eax
c0021924:	e8 98 fe ff ff       	call   c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021929:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002192d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021930:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021934:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002193a:	83 c4 10             	add    esp,0x10
c002193d:	b8 00 08 00 00       	mov    eax,0x800
c0021942:	29 d0                	sub    eax,edx
c0021944:	39 c1                	cmp    ecx,eax
c0021946:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002194a:	83 d9 00             	sbb    ecx,0x0
c002194d:	7d 1c                	jge    c002196b <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c002194f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021954:	75 12                	jne    c0021968 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021956:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002195d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021963:	e9 fb 00 00 00       	jmp    c0021a63 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021968:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002196b:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c002196e:	31 d2                	xor    edx,edx
c0021970:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021974:	39 c2                	cmp    edx,eax
c0021976:	7d 14                	jge    c002198c <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021978:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002197f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021983:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021986:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021989:	42                   	inc    edx
c002198a:	eb e8                	jmp    c0021974 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c002198c:	89 c3                	mov    ebx,eax
c002198e:	85 c0                	test   eax,eax
c0021990:	79 02                	jns    c0021994 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021992:	31 db                	xor    ebx,ebx
c0021994:	99                   	cdq    
c0021995:	01 c3                	add    ebx,eax
c0021997:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c002199e:	01 c6                	add    esi,eax
c00219a0:	11 d7                	adc    edi,edx
c00219a2:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00219a6:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00219aa:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00219ad:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00219b1:	29 c6                	sub    esi,eax
c00219b3:	19 d7                	sbb    edi,edx
c00219b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00219b8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00219bc:	b8 ff 07 00 00       	mov    eax,0x7ff
c00219c1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00219c4:	b8 00 00 00 00       	mov    eax,0x0
c00219c9:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219cd:	7d 3e                	jge    c0021a0d <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00219cf:	52                   	push   edx
c00219d0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219d4:	50                   	push   eax
c00219d5:	53                   	push   ebx
c00219d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00219da:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00219de:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219e2:	50                   	push   eax
c00219e3:	e8 d9 fd ff ff       	call   c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219e8:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00219f0:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00219f5:	81 c3 00 08 00 00    	add    ebx,0x800
c00219fb:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021a03:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021a08:	83 c4 10             	add    esp,0x10
c0021a0b:	eb af                	jmp    c00219bc <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021a0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a11:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021a14:	74 32                	je     c0021a48 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021a16:	50                   	push   eax
c0021a17:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a1b:	50                   	push   eax
c0021a1c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a20:	50                   	push   eax
c0021a21:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021a25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a29:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021a2d:	56                   	push   esi
c0021a2e:	e8 8e fd ff ff       	call   c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a33:	83 c4 0c             	add    esp,0xc
c0021a36:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021a3a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a3e:	50                   	push   eax
c0021a3f:	53                   	push   ebx
c0021a40:	e8 07 ed fd ff       	call   c000074c <memcpy>
c0021a45:	83 c4 10             	add    esp,0x10
c0021a48:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a4f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a57:	89 38                	mov    DWORD PTR [eax],edi
c0021a59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a5d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a60:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a63:	31 c0                	xor    eax,eax
c0021a65:	eb 05                	jmp    c0021a6c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a67:	b8 04 00 00 00       	mov    eax,0x4
c0021a6c:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a72:	5b                   	pop    ebx
c0021a73:	5e                   	pop    esi
c0021a74:	5f                   	pop    edi
c0021a75:	5d                   	pop    ebp
c0021a76:	c3                   	ret    
c0021a77:	90                   	nop

c0021a78 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a78:	55                   	push   ebp
c0021a79:	57                   	push   edi
c0021a7a:	56                   	push   esi
c0021a7b:	53                   	push   ebx
c0021a7c:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a82:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a89:	85 f6                	test   esi,esi
c0021a8b:	0f 84 64 02 00 00    	je     c0021cf5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a91:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a99:	0f 84 56 02 00 00    	je     c0021cf5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a9f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021aa2:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021aa5:	75 0a                	jne    c0021ab1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021aa7:	b8 07 00 00 00       	mov    eax,0x7
c0021aac:	e9 49 02 00 00       	jmp    c0021cfa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021ab1:	50                   	push   eax
c0021ab2:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021ab6:	50                   	push   eax
c0021ab7:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021abe:	53                   	push   ebx
c0021abf:	8b 06                	mov    eax,DWORD PTR [esi]
c0021ac1:	c1 e0 0b             	shl    eax,0xb
c0021ac4:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021ac7:	c1 e8 0b             	shr    eax,0xb
c0021aca:	50                   	push   eax
c0021acb:	e8 f1 fc ff ff       	call   c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ad0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021ad3:	83 c4 10             	add    esp,0x10
c0021ad6:	89 c1                	mov    ecx,eax
c0021ad8:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021adb:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021ae1:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021ae4:	84 db                	test   bl,bl
c0021ae6:	0f 85 90 00 00 00    	jne    c0021b7c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021aec:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021af2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021af8:	29 c7                	sub    edi,eax
c0021afa:	89 fb                	mov    ebx,edi
c0021afc:	c1 fb 1f             	sar    ebx,0x1f
c0021aff:	01 f8                	add    eax,edi
c0021b01:	11 da                	adc    edx,ebx
c0021b03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b0b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021b0e:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021b11:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b14:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b17:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b1e:	89 d8                	mov    eax,ebx
c0021b20:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b23:	ba 00 00 00 00       	mov    edx,0x0
c0021b28:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021b2c:	b8 00 00 00 00       	mov    eax,0x0
c0021b31:	73 0b                	jae    c0021b3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021b33:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b3a:	29 f8                	sub    eax,edi
c0021b3c:	19 da                	sbb    edx,ebx
c0021b3e:	89 d3                	mov    ebx,edx
c0021b40:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b43:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b46:	09 c3                	or     ebx,eax
c0021b48:	0f 84 59 ff ff ff    	je     c0021aa7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b4e:	55                   	push   ebp
c0021b4f:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b53:	50                   	push   eax
c0021b54:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b5b:	53                   	push   ebx
c0021b5c:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b5e:	c1 e0 0b             	shl    eax,0xb
c0021b61:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b65:	c1 e8 0b             	shr    eax,0xb
c0021b68:	50                   	push   eax
c0021b69:	e8 53 fc ff ff       	call   c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b6e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b71:	83 c4 10             	add    esp,0x10
c0021b74:	25 ff 07 00 00       	and    eax,0x7ff
c0021b79:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b7c:	57                   	push   edi
c0021b7d:	6a 28                	push   0x28
c0021b7f:	6a 00                	push   0x0
c0021b81:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b85:	50                   	push   eax
c0021b86:	e8 f5 eb fd ff       	call   c0000780 <memset>
c0021b8b:	31 d2                	xor    edx,edx
c0021b8d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b90:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b96:	89 f8                	mov    eax,edi
c0021b98:	83 c0 21             	add    eax,0x21
c0021b9b:	83 d2 00             	adc    edx,0x0
c0021b9e:	89 c7                	mov    edi,eax
c0021ba0:	89 d5                	mov    ebp,edx
c0021ba2:	83 c4 10             	add    esp,0x10
c0021ba5:	31 c9                	xor    ecx,ecx
c0021ba7:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021bae:	83 f9 28             	cmp    ecx,0x28
c0021bb1:	88 04 24             	mov    BYTE PTR [esp],al
c0021bb4:	0f 94 c2             	sete   dl
c0021bb7:	88 d0                	mov    al,dl
c0021bb9:	ba ff 07 00 00       	mov    edx,0x7ff
c0021bbe:	39 fa                	cmp    edx,edi
c0021bc0:	ba 00 00 00 00       	mov    edx,0x0
c0021bc5:	19 ea                	sbb    edx,ebp
c0021bc7:	0f 92 c2             	setb   dl
c0021bca:	09 c2                	or     edx,eax
c0021bcc:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021bd0:	0f 94 c0             	sete   al
c0021bd3:	08 d0                	or     al,dl
c0021bd5:	75 16                	jne    c0021bed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021bd7:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021bdb:	74 10                	je     c0021bed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021bdd:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021be0:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021be4:	41                   	inc    ecx
c0021be5:	83 c7 01             	add    edi,0x1
c0021be8:	83 d5 00             	adc    ebp,0x0
c0021beb:	eb ba                	jmp    c0021ba7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021bed:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021bf4:	83 ec 0c             	sub    esp,0xc
c0021bf7:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021bfb:	57                   	push   edi
c0021bfc:	e8 9b eb fd ff       	call   c000079c <strlen>
c0021c01:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021c09:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c0d:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021c14:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c17:	5a                   	pop    edx
c0021c18:	25 ff 07 00 00       	and    eax,0x7ff
c0021c1d:	01 c8                	add    eax,ecx
c0021c1f:	59                   	pop    ecx
c0021c20:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c26:	83 e0 02             	and    eax,0x2
c0021c29:	3c 01                	cmp    al,0x1
c0021c2b:	19 c0                	sbb    eax,eax
c0021c2d:	83 c0 02             	add    eax,0x2
c0021c30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c34:	57                   	push   edi
c0021c35:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c39:	50                   	push   eax
c0021c3a:	e8 fd eb fd ff       	call   c000083c <strcpy>
c0021c3f:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c43:	83 c4 10             	add    esp,0x10
c0021c46:	84 c0                	test   al,al
c0021c48:	75 21                	jne    c0021c6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c4a:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c52:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c5a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c62:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c69:	eb 28                	jmp    c0021c93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c6b:	fe c8                	dec    al
c0021c6d:	75 24                	jne    c0021c93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c6f:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c77:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c7f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c87:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c8e:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c93:	0f b6 fb             	movzx  edi,bl
c0021c96:	31 db                	xor    ebx,ebx
c0021c98:	50                   	push   eax
c0021c99:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021ca0:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021ca4:	50                   	push   eax
c0021ca5:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021cac:	e8 9b ea fd ff       	call   c000074c <memcpy>
c0021cb1:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021cb8:	89 f9                	mov    ecx,edi
c0021cba:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021cc0:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021cc3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021cc6:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021cc9:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021ccc:	83 c4 10             	add    esp,0x10
c0021ccf:	39 c7                	cmp    edi,eax
c0021cd1:	89 df                	mov    edi,ebx
c0021cd3:	19 d7                	sbb    edi,edx
c0021cd5:	72 10                	jb     c0021ce7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021cd7:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021cde:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021ce5:	eb 0a                	jmp    c0021cf1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021ce7:	29 c8                	sub    eax,ecx
c0021ce9:	19 da                	sbb    edx,ebx
c0021ceb:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021cee:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021cf1:	31 c0                	xor    eax,eax
c0021cf3:	eb 05                	jmp    c0021cfa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021cf5:	b8 04 00 00 00       	mov    eax,0x4
c0021cfa:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021d00:	5b                   	pop    ebx
c0021d01:	5e                   	pop    esi
c0021d02:	5f                   	pop    edi
c0021d03:	5d                   	pop    ebp
c0021d04:	c3                   	ret    

c0021d05 <readRoot(unsigned int*, unsigned int*, char)>:
c0021d05:	81 ec 40 08 00 00    	sub    esp,0x840
c0021d0b:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021d13:	50                   	push   eax
c0021d14:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021d18:	50                   	push   eax
c0021d19:	6a 10                	push   0x10
c0021d1b:	e8 a1 fa ff ff       	call   c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d20:	83 c4 0c             	add    esp,0xc
c0021d23:	6a 22                	push   0x22
c0021d25:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021d2c:	50                   	push   eax
c0021d2d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021d31:	50                   	push   eax
c0021d32:	e8 15 ea fd ff       	call   c000074c <memcpy>
c0021d37:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d3e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d42:	89 10                	mov    DWORD PTR [eax],edx
c0021d44:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d4f:	89 10                	mov    DWORD PTR [eax],edx
c0021d51:	b0 01                	mov    al,0x1
c0021d53:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d59:	c3                   	ret    

c0021d5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d5a:	55                   	push   ebp
c0021d5b:	57                   	push   edi
c0021d5c:	56                   	push   esi
c0021d5d:	53                   	push   ebx
c0021d5e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d64:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d6b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d76:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d7a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d7e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d82:	75 03                	jne    c0021d87 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d84:	83 c3 02             	add    ebx,0x2
c0021d87:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d8a:	75 03                	jne    c0021d8f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d8c:	43                   	inc    ebx
c0021d8d:	eb f8                	jmp    c0021d87 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d8f:	51                   	push   ecx
c0021d90:	68 00 01 00 00       	push   0x100
c0021d95:	6a 00                	push   0x0
c0021d97:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d9b:	50                   	push   eax
c0021d9c:	e8 df e9 fd ff       	call   c0000780 <memset>
c0021da1:	83 c4 10             	add    esp,0x10
c0021da4:	31 d2                	xor    edx,edx
c0021da6:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021da9:	84 c0                	test   al,al
c0021dab:	74 21                	je     c0021dce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021dad:	3c 2f                	cmp    al,0x2f
c0021daf:	75 0b                	jne    c0021dbc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021db1:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021db5:	bd 01 00 00 00       	mov    ebp,0x1
c0021dba:	eb 14                	jmp    c0021dd0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021dbc:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021dbf:	80 f9 19             	cmp    cl,0x19
c0021dc2:	77 03                	ja     c0021dc7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021dc4:	83 e8 20             	sub    eax,0x20
c0021dc7:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021dcb:	42                   	inc    edx
c0021dcc:	eb d8                	jmp    c0021da6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021dce:	31 ed                	xor    ebp,ebp
c0021dd0:	83 ec 0c             	sub    esp,0xc
c0021dd3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021dda:	e8 6c da fe ff       	call   c000f84b <malloc>
c0021ddf:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021de6:	89 c6                	mov    esi,eax
c0021de8:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021dee:	c1 ef 0b             	shr    edi,0xb
c0021df1:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021df8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021dfc:	83 c4 10             	add    esp,0x10
c0021dff:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021e04:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e08:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021e0f:	74 28                	je     c0021e39 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021e11:	52                   	push   edx
c0021e12:	57                   	push   edi
c0021e13:	50                   	push   eax
c0021e14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e18:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021e1f:	e8 9d f9 ff ff       	call   c00217c1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e28:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021e2f:	05 00 08 00 00       	add    eax,0x800
c0021e34:	83 c4 10             	add    esp,0x10
c0021e37:	eb cb                	jmp    c0021e04 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e39:	83 ec 0c             	sub    esp,0xc
c0021e3c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e40:	57                   	push   edi
c0021e41:	e8 56 e9 fd ff       	call   c000079c <strlen>
c0021e46:	50                   	push   eax
c0021e47:	57                   	push   edi
c0021e48:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e4f:	56                   	push   esi
c0021e50:	e8 2a f9 ff ff       	call   c002177f <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e55:	83 c4 20             	add    esp,0x20
c0021e58:	85 c0                	test   eax,eax
c0021e5a:	75 13                	jne    c0021e6f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e5c:	83 ec 0c             	sub    esp,0xc
c0021e5f:	56                   	push   esi
c0021e60:	e8 f6 d9 fe ff       	call   c000f85b <free>
c0021e65:	83 c4 10             	add    esp,0x10
c0021e68:	31 c0                	xor    eax,eax
c0021e6a:	e9 b3 00 00 00       	jmp    c0021f22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e6f:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e73:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e77:	c1 e7 08             	shl    edi,0x8
c0021e7a:	c1 e2 10             	shl    edx,0x10
c0021e7d:	09 d7                	or     edi,edx
c0021e7f:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e83:	09 d7                	or     edi,edx
c0021e85:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e89:	c1 e2 18             	shl    edx,0x18
c0021e8c:	09 d7                	or     edi,edx
c0021e8e:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e92:	89 d1                	mov    ecx,edx
c0021e94:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e98:	c1 e1 08             	shl    ecx,0x8
c0021e9b:	c1 e2 10             	shl    edx,0x10
c0021e9e:	09 ca                	or     edx,ecx
c0021ea0:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021ea4:	09 ca                	or     edx,ecx
c0021ea6:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021eaa:	c1 e1 18             	shl    ecx,0x18
c0021ead:	09 ca                	or     edx,ecx
c0021eaf:	89 e9                	mov    ecx,ebp
c0021eb1:	84 c9                	test   cl,cl
c0021eb3:	74 3c                	je     c0021ef1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021eb5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021eb9:	83 ec 0c             	sub    esp,0xc
c0021ebc:	56                   	push   esi
c0021ebd:	e8 99 d9 fe ff       	call   c000f85b <free>
c0021ec2:	83 c4 0c             	add    esp,0xc
c0021ec5:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ecc:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021ed1:	50                   	push   eax
c0021ed2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ed9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ee0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021ee4:	52                   	push   edx
c0021ee5:	57                   	push   edi
c0021ee6:	53                   	push   ebx
c0021ee7:	e8 6e fe ff ff       	call   c0021d5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021eec:	83 c4 20             	add    esp,0x20
c0021eef:	eb 31                	jmp    c0021f22 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ef1:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021ef4:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021efb:	d0 e8                	shr    al,1
c0021efd:	89 3b                	mov    DWORD PTR [ebx],edi
c0021eff:	83 e0 01             	and    eax,0x1
c0021f02:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021f09:	83 ec 0c             	sub    esp,0xc
c0021f0c:	89 13                	mov    DWORD PTR [ebx],edx
c0021f0e:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021f15:	89 03                	mov    DWORD PTR [ebx],eax
c0021f17:	56                   	push   esi
c0021f18:	e8 3e d9 fe ff       	call   c000f85b <free>
c0021f1d:	83 c4 10             	add    esp,0x10
c0021f20:	b0 01                	mov    al,0x1
c0021f22:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f28:	5b                   	pop    ebx
c0021f29:	5e                   	pop    esi
c0021f2a:	5f                   	pop    edi
c0021f2b:	5d                   	pop    ebp
c0021f2c:	c3                   	ret    

c0021f2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021f2d:	55                   	push   ebp
c0021f2e:	57                   	push   edi
c0021f2f:	56                   	push   esi
c0021f30:	53                   	push   ebx
c0021f31:	83 ec 20             	sub    esp,0x20
c0021f34:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f38:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021f3c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f48:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f50:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f55:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f5b:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f61:	57                   	push   edi
c0021f62:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f66:	50                   	push   eax
c0021f67:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f6b:	50                   	push   eax
c0021f6c:	e8 94 fd ff ff       	call   c0021d05 <readRoot(unsigned int*, unsigned int*, char)>
c0021f71:	5a                   	pop    edx
c0021f72:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f76:	e8 21 e8 fd ff       	call   c000079c <strlen>
c0021f7b:	83 c4 10             	add    esp,0x10
c0021f7e:	83 f8 03             	cmp    eax,0x3
c0021f81:	77 17                	ja     c0021f9a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f87:	89 03                	mov    DWORD PTR [ebx],eax
c0021f89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f8d:	89 06                	mov    DWORD PTR [esi],eax
c0021f8f:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f96:	b0 01                	mov    al,0x1
c0021f98:	eb 19                	jmp    c0021fb3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f9a:	50                   	push   eax
c0021f9b:	55                   	push   ebp
c0021f9c:	57                   	push   edi
c0021f9d:	56                   	push   esi
c0021f9e:	53                   	push   ebx
c0021f9f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fa3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fa7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fab:	e8 aa fd ff ff       	call   c0021d5a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021fb0:	83 c4 20             	add    esp,0x20
c0021fb3:	83 c4 1c             	add    esp,0x1c
c0021fb6:	5b                   	pop    ebx
c0021fb7:	5e                   	pop    esi
c0021fb8:	5f                   	pop    edi
c0021fb9:	5d                   	pop    ebp
c0021fba:	c3                   	ret    
c0021fbb:	90                   	nop

c0021fbc <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021fbc:	57                   	push   edi
c0021fbd:	56                   	push   esi
c0021fbe:	53                   	push   ebx
c0021fbf:	83 ec 10             	sub    esp,0x10
c0021fc2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fc6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021fca:	85 ff                	test   edi,edi
c0021fcc:	0f 84 9d 00 00 00    	je     c002206f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fd2:	85 f6                	test   esi,esi
c0021fd4:	0f 84 95 00 00 00    	je     c002206f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fda:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021fdf:	74 17                	je     c0021ff8 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021fe1:	83 ec 0c             	sub    esp,0xc
c0021fe4:	68 57 c9 02 c0       	push   0xc002c957
c0021fe9:	e8 f1 0e ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0021fee:	83 c4 10             	add    esp,0x10
c0021ff1:	b8 03 00 00 00       	mov    eax,0x3
c0021ff6:	eb 7c                	jmp    c0022074 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021ff8:	83 ec 0c             	sub    esp,0xc
c0021ffb:	6a 1c                	push   0x1c
c0021ffd:	e8 49 d8 fe ff       	call   c000f84b <malloc>
c0022002:	89 07                	mov    DWORD PTR [edi],eax
c0022004:	89 c3                	mov    ebx,eax
c0022006:	58                   	pop    eax
c0022007:	8d 44 24 18          	lea    eax,[esp+0x18]
c002200b:	50                   	push   eax
c002200c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002200f:	50                   	push   eax
c0022010:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022014:	50                   	push   eax
c0022015:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022019:	50                   	push   eax
c002201a:	56                   	push   esi
c002201b:	e8 0d ff ff ff       	call   c0021f2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022020:	83 c4 20             	add    esp,0x20
c0022023:	84 c0                	test   al,al
c0022025:	74 07                	je     c002202e <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0022027:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002202c:	74 0b                	je     c0022039 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c002202e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022032:	b8 01 00 00 00       	mov    eax,0x1
c0022037:	eb 3b                	jmp    c0022074 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002203d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022041:	89 03                	mov    DWORD PTR [ebx],eax
c0022043:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002204a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002204e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022055:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002205c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002205f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022066:	8a 06                	mov    al,BYTE PTR [esi]
c0022068:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002206b:	31 c0                	xor    eax,eax
c002206d:	eb 05                	jmp    c0022074 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002206f:	b8 04 00 00 00       	mov    eax,0x4
c0022074:	83 c4 10             	add    esp,0x10
c0022077:	5b                   	pop    ebx
c0022078:	5e                   	pop    esi
c0022079:	5f                   	pop    edi
c002207a:	c3                   	ret    
c002207b:	90                   	nop

c002207c <ISO9660::exists(char const*)>:
c002207c:	83 ec 28             	sub    esp,0x28
c002207f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022083:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022087:	52                   	push   edx
c0022088:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002208b:	52                   	push   edx
c002208c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022090:	52                   	push   edx
c0022091:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022095:	52                   	push   edx
c0022096:	50                   	push   eax
c0022097:	e8 91 fe ff ff       	call   c0021f2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002209c:	83 c4 3c             	add    esp,0x3c
c002209f:	c3                   	ret    

c00220a0 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00220a0:	56                   	push   esi
c00220a1:	53                   	push   ebx
c00220a2:	83 ec 14             	sub    esp,0x14
c00220a5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00220a9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00220ad:	85 db                	test   ebx,ebx
c00220af:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00220b3:	0f 94 c2             	sete   dl
c00220b6:	85 f6                	test   esi,esi
c00220b8:	0f 94 c0             	sete   al
c00220bb:	08 c2                	or     dl,al
c00220bd:	75 68                	jne    c0022127 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220bf:	85 c9                	test   ecx,ecx
c00220c1:	74 64                	je     c0022127 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220c3:	83 ec 0c             	sub    esp,0xc
c00220c6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00220c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220cd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220d3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220da:	50                   	push   eax
c00220db:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00220de:	50                   	push   eax
c00220df:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220e3:	50                   	push   eax
c00220e4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220e8:	50                   	push   eax
c00220e9:	51                   	push   ecx
c00220ea:	e8 3e fe ff ff       	call   c0021f2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220ef:	83 c4 20             	add    esp,0x20
c00220f2:	ba 01 00 00 00       	mov    edx,0x1
c00220f7:	84 c0                	test   al,al
c00220f9:	74 31                	je     c002212c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220ff:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022106:	89 03                	mov    DWORD PTR [ebx],eax
c0022108:	ba 00 00 00 00       	mov    edx,0x0
c002210d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022111:	85 c0                	test   eax,eax
c0022113:	0f 95 06             	setne  BYTE PTR [esi]
c0022116:	74 14                	je     c002212c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022118:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002211e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022125:	eb 05                	jmp    c002212c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022127:	ba 04 00 00 00       	mov    edx,0x4
c002212c:	83 c4 14             	add    esp,0x14
c002212f:	89 d0                	mov    eax,edx
c0022131:	5b                   	pop    ebx
c0022132:	5e                   	pop    esi
c0022133:	c3                   	ret    

c0022134 <ISO9660::openDir(char const*, void**)>:
c0022134:	57                   	push   edi
c0022135:	56                   	push   esi
c0022136:	53                   	push   ebx
c0022137:	83 ec 10             	sub    esp,0x10
c002213a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002213e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022142:	85 ff                	test   edi,edi
c0022144:	0f 84 95 00 00 00    	je     c00221df <ISO9660::openDir(char const*, void**)+0xab>
c002214a:	85 f6                	test   esi,esi
c002214c:	0f 84 8d 00 00 00    	je     c00221df <ISO9660::openDir(char const*, void**)+0xab>
c0022152:	83 ec 0c             	sub    esp,0xc
c0022155:	6a 1c                	push   0x1c
c0022157:	e8 ef d6 fe ff       	call   c000f84b <malloc>
c002215c:	89 07                	mov    DWORD PTR [edi],eax
c002215e:	89 c3                	mov    ebx,eax
c0022160:	59                   	pop    ecx
c0022161:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022165:	50                   	push   eax
c0022166:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022169:	50                   	push   eax
c002216a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002216e:	50                   	push   eax
c002216f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022173:	50                   	push   eax
c0022174:	56                   	push   esi
c0022175:	e8 b3 fd ff ff       	call   c0021f2d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002217a:	83 c4 20             	add    esp,0x20
c002217d:	84 c0                	test   al,al
c002217f:	74 07                	je     c0022188 <ISO9660::openDir(char const*, void**)+0x54>
c0022181:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022186:	75 21                	jne    c00221a9 <ISO9660::openDir(char const*, void**)+0x75>
c0022188:	0f b6 c0             	movzx  eax,al
c002218b:	52                   	push   edx
c002218c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022190:	50                   	push   eax
c0022191:	68 7d c9 02 c0       	push   0xc002c97d
c0022196:	e8 44 0d ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c002219b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002219f:	83 c4 10             	add    esp,0x10
c00221a2:	b8 01 00 00 00       	mov    eax,0x1
c00221a7:	eb 3b                	jmp    c00221e4 <ISO9660::openDir(char const*, void**)+0xb0>
c00221a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ad:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00221b1:	89 03                	mov    DWORD PTR [ebx],eax
c00221b3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00221ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221be:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00221c5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00221cf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00221d6:	8a 06                	mov    al,BYTE PTR [esi]
c00221d8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00221db:	31 c0                	xor    eax,eax
c00221dd:	eb 05                	jmp    c00221e4 <ISO9660::openDir(char const*, void**)+0xb0>
c00221df:	b8 04 00 00 00       	mov    eax,0x4
c00221e4:	83 c4 10             	add    esp,0x10
c00221e7:	5b                   	pop    ebx
c00221e8:	5e                   	pop    esi
c00221e9:	5f                   	pop    edi
c00221ea:	c3                   	ret    
c00221eb:	90                   	nop

c00221ec <ISO9660::ISO9660()>:
c00221ec:	83 ec 0c             	sub    esp,0xc
c00221ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f3:	83 ec 0c             	sub    esp,0xc
c00221f6:	50                   	push   eax
c00221f7:	e8 e8 0f ff ff       	call   c00131e4 <Filesystem::Filesystem()>
c00221fc:	83 c4 10             	add    esp,0x10
c00221ff:	ba a0 c9 02 c0       	mov    edx,0xc002c9a0
c0022204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022208:	89 10                	mov    DWORD PTR [eax],edx
c002220a:	90                   	nop
c002220b:	83 c4 0c             	add    esp,0xc
c002220e:	c3                   	ret    
c002220f:	90                   	nop

c0022210 <SoundChannel::~SoundChannel()>:
c0022210:	83 ec 0c             	sub    esp,0xc
c0022213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022217:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002221a:	83 ec 0c             	sub    esp,0xc
c002221d:	50                   	push   eax
c002221e:	e8 38 d6 fe ff       	call   c000f85b <free>
c0022223:	83 c4 10             	add    esp,0x10
c0022226:	90                   	nop
c0022227:	83 c4 0c             	add    esp,0xc
c002222a:	c3                   	ret    
c002222b:	90                   	nop

c002222c <SoundChannel::setSpeed(float)>:
c002222c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022234:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022237:	c3                   	ret    

c0022238 <SoundChannel::getSpeed()>:
c0022238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002223c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c002223f:	c3                   	ret    

c0022240 <SoundChannel::setVolume(int)>:
c0022240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022244:	83 f8 64             	cmp    eax,0x64
c0022247:	7e 05                	jle    c002224e <SoundChannel::setVolume(int)+0xe>
c0022249:	b8 64 00 00 00       	mov    eax,0x64
c002224e:	85 c0                	test   eax,eax
c0022250:	79 02                	jns    c0022254 <SoundChannel::setVolume(int)+0x14>
c0022252:	31 c0                	xor    eax,eax
c0022254:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022258:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002225b:	c3                   	ret    

c002225c <SoundChannel::getVolume()>:
c002225c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022260:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022263:	c3                   	ret    

c0022264 <SoundChannel::pause()>:
c0022264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022268:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002226c:	c3                   	ret    
c002226d:	90                   	nop

c002226e <SoundChannel::SoundChannel(int, int, int, int)>:
c002226e:	83 ec 1c             	sub    esp,0x1c
c0022271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022275:	e8 ea ff ff ff       	call   c0022264 <SoundChannel::pause()>
c002227a:	83 c4 04             	add    esp,0x4
c002227d:	6a 50                	push   0x50
c002227f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022283:	e8 b8 ff ff ff       	call   c0022240 <SoundChannel::setVolume(int)>
c0022288:	83 c4 08             	add    esp,0x8
c002228b:	a1 18 ca 02 c0       	mov    eax,ds:0xc002ca18
c0022290:	50                   	push   eax
c0022291:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022295:	e8 92 ff ff ff       	call   c002222c <SoundChannel::setSpeed(float)>
c002229a:	83 c4 08             	add    esp,0x8
c002229d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00222a5:	89 10                	mov    DWORD PTR [eax],edx
c00222a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00222af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00222b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222b6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00222ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00222bd:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00222c2:	75 23                	jne    c00222e7 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00222c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00222ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222d1:	0f af c2             	imul   eax,edx
c00222d4:	85 c0                	test   eax,eax
c00222d6:	79 03                	jns    c00222db <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00222d8:	83 c0 03             	add    eax,0x3
c00222db:	c1 f8 02             	sar    eax,0x2
c00222de:	05 a0 0f 00 00       	add    eax,0xfa0
c00222e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222eb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00222ef:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00222f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222f6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00222fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022301:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002230c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002230f:	c1 e0 02             	shl    eax,0x2
c0022312:	83 ec 0c             	sub    esp,0xc
c0022315:	50                   	push   eax
c0022316:	e8 30 d5 fe ff       	call   c000f84b <malloc>
c002231b:	83 c4 10             	add    esp,0x10
c002231e:	89 c2                	mov    edx,eax
c0022320:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022324:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022327:	83 ec 04             	sub    esp,0x4
c002232a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002232e:	50                   	push   eax
c002232f:	6a 01                	push   0x1
c0022331:	6a 04                	push   0x4
c0022333:	e8 6f 68 fe ff       	call   c0008ba7 <src_new>
c0022338:	83 c4 10             	add    esp,0x10
c002233b:	89 c2                	mov    edx,eax
c002233d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022341:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022348:	85 c0                	test   eax,eax
c002234a:	74 10                	je     c002235c <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c002234c:	83 ec 0c             	sub    esp,0xc
c002234f:	68 fc c9 02 c0       	push   0xc002c9fc
c0022354:	e8 b2 82 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0022359:	83 c4 10             	add    esp,0x10
c002235c:	a0 c0 27 03 c0       	mov    al,ds:0xc00327c0
c0022361:	83 f0 01             	xor    eax,0x1
c0022364:	84 c0                	test   al,al
c0022366:	74 57                	je     c00223bf <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022368:	a1 1c ca 02 c0       	mov    eax,ds:0xc002ca1c
c002236d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022371:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022379:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022381:	7f 35                	jg     c00223b8 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022383:	83 ec 0c             	sub    esp,0xc
c0022386:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002238a:	e8 a0 4f 00 00       	call   c002732f <__floatsisf>
c002238f:	83 c4 10             	add    esp,0x10
c0022392:	8b 15 1c ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca1c
c0022398:	83 ec 08             	sub    esp,0x8
c002239b:	52                   	push   edx
c002239c:	50                   	push   eax
c002239d:	e8 9f 4b 00 00       	call   c0026f41 <__mulsf3>
c00223a2:	83 c4 10             	add    esp,0x10
c00223a5:	89 c2                	mov    edx,eax
c00223a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223ab:	89 14 85 c0 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc40],edx
c00223b2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00223b6:	eb c1                	jmp    c0022379 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00223b8:	c6 05 c0 27 03 c0 01 	mov    BYTE PTR ds:0xc00327c0,0x1
c00223bf:	90                   	nop
c00223c0:	83 c4 1c             	add    esp,0x1c
c00223c3:	c3                   	ret    

c00223c4 <SoundChannel::play()>:
c00223c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223c8:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00223cc:	c3                   	ret    
c00223cd:	90                   	nop

c00223ce <SoundChannel::paused()>:
c00223ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223d2:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00223d5:	c3                   	ret    

c00223d6 <SoundChannel::getSampleRate()>:
c00223d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223da:	8b 00                	mov    eax,DWORD PTR [eax]
c00223dc:	c3                   	ret    
c00223dd:	90                   	nop

c00223de <SoundChannel::getBits()>:
c00223de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223e5:	c3                   	ret    

c00223e6 <SoundChannel::getBufferUsed()>:
c00223e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ea:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00223ed:	c3                   	ret    

c00223ee <SoundChannel::getBufferSize()>:
c00223ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223f2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223f5:	c3                   	ret    

c00223f6 <SoundChannel::unbuffer(float*, int, int)>:
c00223f6:	56                   	push   esi
c00223f7:	53                   	push   ebx
c00223f8:	83 ec 40             	sub    esp,0x40
c00223fb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00223ff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022402:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022406:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022409:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002240d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022411:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022415:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022419:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002241d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022421:	e8 09 4f 00 00       	call   c002732f <__floatsisf>
c0022426:	5a                   	pop    edx
c0022427:	89 c6                	mov    esi,eax
c0022429:	ff 33                	push   DWORD PTR [ebx]
c002242b:	e8 ff 4e 00 00       	call   c002732f <__floatsisf>
c0022430:	59                   	pop    ecx
c0022431:	5a                   	pop    edx
c0022432:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022435:	50                   	push   eax
c0022436:	e8 06 4b 00 00       	call   c0026f41 <__mulsf3>
c002243b:	59                   	pop    ecx
c002243c:	5a                   	pop    edx
c002243d:	50                   	push   eax
c002243e:	56                   	push   esi
c002243f:	e8 c0 4c 00 00       	call   c0027104 <__divsf3>
c0022444:	89 04 24             	mov    DWORD PTR [esp],eax
c0022447:	e8 b3 61 00 00       	call   c00285ff <__extendsfdf2>
c002244c:	59                   	pop    ecx
c002244d:	5e                   	pop    esi
c002244e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022452:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022456:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002245e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022462:	50                   	push   eax
c0022463:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022466:	e8 31 63 fe ff       	call   c000879c <src_process>
c002246b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002246f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022472:	83 c4 0c             	add    esp,0xc
c0022475:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022478:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002247b:	29 d0                	sub    eax,edx
c002247d:	c1 e0 02             	shl    eax,0x2
c0022480:	50                   	push   eax
c0022481:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022484:	50                   	push   eax
c0022485:	51                   	push   ecx
c0022486:	e8 f9 e1 fd ff       	call   c0000684 <memmove>
c002248b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002248f:	83 c4 44             	add    esp,0x44
c0022492:	5b                   	pop    ebx
c0022493:	5e                   	pop    esi
c0022494:	c3                   	ret    
c0022495:	90                   	nop

c0022496 <SoundChannel::buffer8(unsigned char*, int)>:
c0022496:	55                   	push   ebp
c0022497:	57                   	push   edi
c0022498:	56                   	push   esi
c0022499:	53                   	push   ebx
c002249a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002249e:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00224a2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224a5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00224a9:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224ac:	74 7a                	je     c0022528 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224ae:	85 ff                	test   edi,edi
c00224b0:	7e 76                	jle    c0022528 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224b2:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00224b6:	8d 70 01             	lea    esi,[eax+0x1]
c00224b9:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224bc:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224bf:	8b 1c 9d c0 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc40]
c00224c6:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224c9:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224cc:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224cf:	74 5e                	je     c002252f <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00224d1:	83 ff 01             	cmp    edi,0x1
c00224d4:	74 4b                	je     c0022521 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00224d6:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00224da:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224dd:	8d 70 01             	lea    esi,[eax+0x1]
c00224e0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224e3:	8b 1c 9d c0 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc40]
c00224ea:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224ed:	b8 02 00 00 00       	mov    eax,0x2
c00224f2:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224f5:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224f8:	75 23                	jne    c002251d <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224fa:	eb 27                	jmp    c0022523 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224fc:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022501:	8d 71 01             	lea    esi,[ecx+0x1]
c0022504:	40                   	inc    eax
c0022505:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022508:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002250b:	8b 1c 9d c0 23 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc40]
c0022512:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022515:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022518:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002251b:	74 06                	je     c0022523 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002251d:	39 c7                	cmp    edi,eax
c002251f:	75 db                	jne    c00224fc <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022521:	89 f8                	mov    eax,edi
c0022523:	5b                   	pop    ebx
c0022524:	5e                   	pop    esi
c0022525:	5f                   	pop    edi
c0022526:	5d                   	pop    ebp
c0022527:	c3                   	ret    
c0022528:	5b                   	pop    ebx
c0022529:	31 c0                	xor    eax,eax
c002252b:	5e                   	pop    esi
c002252c:	5f                   	pop    edi
c002252d:	5d                   	pop    ebp
c002252e:	c3                   	ret    
c002252f:	b8 01 00 00 00       	mov    eax,0x1
c0022534:	eb ed                	jmp    c0022523 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022536 <SoundDevice::SoundDevice(char const*)>:
c0022536:	83 ec 1c             	sub    esp,0x1c
c0022539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002253d:	83 ec 08             	sub    esp,0x8
c0022540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022544:	50                   	push   eax
c0022545:	e8 ac 1f ff ff       	call   c00144f6 <Device::Device(char const*)>
c002254a:	83 c4 10             	add    esp,0x10
c002254d:	ba 28 ca 02 c0       	mov    edx,0xc002ca28
c0022552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022556:	89 10                	mov    DWORD PTR [eax],edx
c0022558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002255c:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022566:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002256a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022574:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002257c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022581:	7f 19                	jg     c002259c <SoundDevice::SoundDevice(char const*)+0x66>
c0022583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022587:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002258b:	83 c2 54             	add    edx,0x54
c002258e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022596:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002259a:	eb e0                	jmp    c002257c <SoundDevice::SoundDevice(char const*)+0x46>
c002259c:	90                   	nop
c002259d:	83 c4 1c             	add    esp,0x1c
c00225a0:	c3                   	ret    
c00225a1:	90                   	nop

c00225a2 <SoundDevice::~SoundDevice()>:
c00225a2:	53                   	push   ebx
c00225a3:	83 ec 18             	sub    esp,0x18
c00225a6:	ba 28 ca 02 c0       	mov    edx,0xc002ca28
c00225ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225af:	89 10                	mov    DWORD PTR [eax],edx
c00225b1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225b9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225be:	7f 46                	jg     c0022606 <SoundDevice::~SoundDevice()+0x64>
c00225c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225c8:	83 c2 54             	add    edx,0x54
c00225cb:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00225cf:	85 c0                	test   eax,eax
c00225d1:	74 2d                	je     c0022600 <SoundDevice::~SoundDevice()+0x5e>
c00225d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225db:	83 c2 54             	add    edx,0x54
c00225de:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00225e2:	85 db                	test   ebx,ebx
c00225e4:	74 1a                	je     c0022600 <SoundDevice::~SoundDevice()+0x5e>
c00225e6:	83 ec 0c             	sub    esp,0xc
c00225e9:	53                   	push   ebx
c00225ea:	e8 21 fc ff ff       	call   c0022210 <SoundChannel::~SoundChannel()>
c00225ef:	83 c4 10             	add    esp,0x10
c00225f2:	83 ec 08             	sub    esp,0x8
c00225f5:	6a 2c                	push   0x2c
c00225f7:	53                   	push   ebx
c00225f8:	e8 02 08 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c00225fd:	83 c4 10             	add    esp,0x10
c0022600:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022604:	eb b3                	jmp    c00225b9 <SoundDevice::~SoundDevice()+0x17>
c0022606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002260a:	83 ec 0c             	sub    esp,0xc
c002260d:	50                   	push   eax
c002260e:	e8 c5 1b ff ff       	call   c00141d8 <Device::~Device()>
c0022613:	83 c4 10             	add    esp,0x10
c0022616:	90                   	nop
c0022617:	83 c4 18             	add    esp,0x18
c002261a:	5b                   	pop    ebx
c002261b:	c3                   	ret    

c002261c <SoundDevice::~SoundDevice()>:
c002261c:	83 ec 0c             	sub    esp,0xc
c002261f:	83 ec 0c             	sub    esp,0xc
c0022622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022626:	e8 77 ff ff ff       	call   c00225a2 <SoundDevice::~SoundDevice()>
c002262b:	83 c4 10             	add    esp,0x10
c002262e:	83 ec 08             	sub    esp,0x8
c0022631:	68 e4 01 00 00       	push   0x1e4
c0022636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002263a:	e8 c0 07 ff ff       	call   c0012dff <operator delete(void*, unsigned long)>
c002263f:	83 c4 10             	add    esp,0x10
c0022642:	83 c4 0c             	add    esp,0xc
c0022645:	c3                   	ret    

c0022646 <SoundDevice::getFreeChannelNum()>:
c0022646:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002264a:	31 c0                	xor    eax,eax
c002264c:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022654:	74 09                	je     c002265f <SoundDevice::getFreeChannelNum()+0x19>
c0022656:	40                   	inc    eax
c0022657:	83 f8 20             	cmp    eax,0x20
c002265a:	75 f0                	jne    c002264c <SoundDevice::getFreeChannelNum()+0x6>
c002265c:	83 c8 ff             	or     eax,0xffffffff
c002265f:	c3                   	ret    

c0022660 <SoundDevice::addChannel(SoundChannel*)>:
c0022660:	56                   	push   esi
c0022661:	53                   	push   ebx
c0022662:	51                   	push   ecx
c0022663:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022667:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002266b:	53                   	push   ebx
c002266c:	e8 d5 ff ff ff       	call   c0022646 <SoundDevice::getFreeChannelNum()>
c0022671:	5a                   	pop    edx
c0022672:	83 f8 ff             	cmp    eax,0xffffffff
c0022675:	74 51                	je     c00226c8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022677:	85 f6                	test   esi,esi
c0022679:	74 4d                	je     c00226c8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002267b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022682:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022689:	75 30                	jne    c00226bb <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002268b:	83 ec 0c             	sub    esp,0xc
c002268e:	56                   	push   esi
c002268f:	e8 42 fd ff ff       	call   c00223d6 <SoundChannel::getSampleRate()>
c0022694:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002269a:	89 34 24             	mov    DWORD PTR [esp],esi
c002269d:	e8 3c fd ff ff       	call   c00223de <SoundChannel::getBits()>
c00226a2:	83 c4 0c             	add    esp,0xc
c00226a5:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00226ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00226ad:	50                   	push   eax
c00226ae:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00226b4:	53                   	push   ebx
c00226b5:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00226b8:	83 c4 10             	add    esp,0x10
c00226bb:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00226c1:	b8 01 00 00 00       	mov    eax,0x1
c00226c6:	eb 03                	jmp    c00226cb <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00226c8:	83 c8 ff             	or     eax,0xffffffff
c00226cb:	5a                   	pop    edx
c00226cc:	5b                   	pop    ebx
c00226cd:	5e                   	pop    esi
c00226ce:	c3                   	ret    
c00226cf:	90                   	nop

c00226d0 <SoundDevice::removeChannel(int)>:
c00226d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00226d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226d8:	83 fa 1f             	cmp    edx,0x1f
c00226db:	77 23                	ja     c0022700 <SoundDevice::removeChannel(int)+0x30>
c00226dd:	8d 14 90             	lea    edx,[eax+edx*4]
c00226e0:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00226e7:	74 17                	je     c0022700 <SoundDevice::removeChannel(int)+0x30>
c00226e9:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226f3:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226f9:	75 05                	jne    c0022700 <SoundDevice::removeChannel(int)+0x30>
c00226fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00226fd:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022700:	c3                   	ret    
c0022701:	90                   	nop

c0022702 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022702:	57                   	push   edi
c0022703:	56                   	push   esi
c0022704:	53                   	push   ebx
c0022705:	31 db                	xor    ebx,ebx
c0022707:	83 ec 10             	sub    esp,0x10
c002270a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002270e:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022712:	0f 8d cb 00 00 00    	jge    c00227e3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022718:	83 ec 0c             	sub    esp,0xc
c002271b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002271f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022722:	e8 d8 5e 00 00       	call   c00285ff <__extendsfdf2>
c0022727:	83 c4 10             	add    esp,0x10
c002272a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002272e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022732:	68 00 00 f0 3f       	push   0x3ff00000
c0022737:	6a 00                	push   0x0
c0022739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002273d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022741:	e8 45 4e 00 00       	call   c002758b <__adddf3>
c0022746:	83 c4 10             	add    esp,0x10
c0022749:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002274d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022751:	68 00 00 e0 3f       	push   0x3fe00000
c0022756:	6a 00                	push   0x0
c0022758:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002275c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022760:	e8 a3 54 00 00       	call   c0027c08 <__muldf3>
c0022765:	83 c4 10             	add    esp,0x10
c0022768:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002276c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022770:	68 00 00 60 40       	push   0x40600000
c0022775:	6a 00                	push   0x0
c0022777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002277b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002277f:	e8 84 54 00 00       	call   c0027c08 <__muldf3>
c0022784:	59                   	pop    ecx
c0022785:	5f                   	pop    edi
c0022786:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002278a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002278e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022792:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022796:	e8 40 5d 00 00       	call   c00284db <__truncdfsf2>
c002279b:	5a                   	pop    edx
c002279c:	89 c7                	mov    edi,eax
c002279e:	59                   	pop    ecx
c002279f:	68 00 00 fe 42       	push   0x42fe0000
c00227a4:	50                   	push   eax
c00227a5:	e8 db 4d 00 00       	call   c0027585 <__gesf2>
c00227aa:	83 c4 10             	add    esp,0x10
c00227ad:	85 c0                	test   eax,eax
c00227af:	78 06                	js     c00227b7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00227b1:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00227b5:	eb 26                	jmp    c00227dd <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227b7:	50                   	push   eax
c00227b8:	50                   	push   eax
c00227b9:	6a 00                	push   0x0
c00227bb:	57                   	push   edi
c00227bc:	e8 c8 4d 00 00       	call   c0027589 <__lesf2>
c00227c1:	83 c4 10             	add    esp,0x10
c00227c4:	85 c0                	test   eax,eax
c00227c6:	7f 06                	jg     c00227ce <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00227c8:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00227cc:	eb 0f                	jmp    c00227dd <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227ce:	83 ec 0c             	sub    esp,0xc
c00227d1:	57                   	push   edi
c00227d2:	e8 c5 5e 00 00       	call   c002869c <lrintf>
c00227d7:	83 c4 10             	add    esp,0x10
c00227da:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00227dd:	43                   	inc    ebx
c00227de:	e9 2b ff ff ff       	jmp    c002270e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00227e3:	83 c4 10             	add    esp,0x10
c00227e6:	5b                   	pop    ebx
c00227e7:	5e                   	pop    esi
c00227e8:	5f                   	pop    edi
c00227e9:	c3                   	ret    

c00227ea <SoundDevice::getAudio(int, float*, float*)>:
c00227ea:	55                   	push   ebp
c00227eb:	57                   	push   edi
c00227ec:	56                   	push   esi
c00227ed:	53                   	push   ebx
c00227ee:	31 db                	xor    ebx,ebx
c00227f0:	83 ec 20             	sub    esp,0x20
c00227f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00227f7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00227fb:	c1 e0 02             	shl    eax,0x2
c00227fe:	50                   	push   eax
c00227ff:	6a 00                	push   0x0
c0022801:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022805:	e8 76 df fd ff       	call   c0000780 <memset>
c002280a:	83 c4 10             	add    esp,0x10
c002280d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022811:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022818:	85 c0                	test   eax,eax
c002281a:	0f 84 d7 00 00 00    	je     c00228f7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022820:	83 ec 0c             	sub    esp,0xc
c0022823:	50                   	push   eax
c0022824:	e8 a5 fb ff ff       	call   c00223ce <SoundChannel::paused()>
c0022829:	83 c4 10             	add    esp,0x10
c002282c:	84 c0                	test   al,al
c002282e:	0f 85 c3 00 00 00    	jne    c00228f7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022834:	83 ec 0c             	sub    esp,0xc
c0022837:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002283e:	e8 19 fa ff ff       	call   c002225c <SoundChannel::getVolume()>
c0022843:	83 c4 10             	add    esp,0x10
c0022846:	85 c0                	test   eax,eax
c0022848:	0f 84 a9 00 00 00    	je     c00228f7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002284e:	83 ec 0c             	sub    esp,0xc
c0022851:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022858:	e8 ff f9 ff ff       	call   c002225c <SoundChannel::getVolume()>
c002285d:	83 ec 0c             	sub    esp,0xc
c0022860:	50                   	push   eax
c0022861:	e8 c9 4a 00 00       	call   c002732f <__floatsisf>
c0022866:	59                   	pop    ecx
c0022867:	5d                   	pop    ebp
c0022868:	31 ed                	xor    ebp,ebp
c002286a:	68 00 00 c8 42       	push   0x42c80000
c002286f:	50                   	push   eax
c0022870:	e8 8f 48 00 00       	call   c0027104 <__divsf3>
c0022875:	83 c4 10             	add    esp,0x10
c0022878:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002287c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022880:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022886:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002288a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022891:	e8 60 fb ff ff       	call   c00223f6 <SoundChannel::unbuffer(float*, int, int)>
c0022896:	83 c4 20             	add    esp,0x20
c0022899:	89 c1                	mov    ecx,eax
c002289b:	39 cd                	cmp    ebp,ecx
c002289d:	7d 52                	jge    c00228f1 <SoundDevice::getAudio(int, float*, float*)+0x107>
c002289f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00228a3:	50                   	push   eax
c00228a4:	50                   	push   eax
c00228a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00228a9:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228ac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00228b0:	e8 8c 46 00 00       	call   c0026f41 <__mulsf3>
c00228b5:	5a                   	pop    edx
c00228b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228ba:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00228c0:	e8 6a 4a 00 00       	call   c002732f <__floatsisf>
c00228c5:	59                   	pop    ecx
c00228c6:	5a                   	pop    edx
c00228c7:	50                   	push   eax
c00228c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228cc:	e8 33 48 00 00       	call   c0027104 <__divsf3>
c00228d1:	59                   	pop    ecx
c00228d2:	5a                   	pop    edx
c00228d3:	50                   	push   eax
c00228d4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00228d8:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228db:	e8 3e 43 00 00       	call   c0026c1e <__addsf3>
c00228e0:	83 c4 10             	add    esp,0x10
c00228e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00228e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00228eb:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00228ee:	45                   	inc    ebp
c00228ef:	eb aa                	jmp    c002289b <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00228f1:	39 cf                	cmp    edi,ecx
c00228f3:	7e 02                	jle    c00228f7 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228f5:	89 cf                	mov    edi,ecx
c00228f7:	43                   	inc    ebx
c00228f8:	83 fb 20             	cmp    ebx,0x20
c00228fb:	0f 85 10 ff ff ff    	jne    c0022811 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022901:	83 c4 1c             	add    esp,0x1c
c0022904:	89 f8                	mov    eax,edi
c0022906:	5b                   	pop    ebx
c0022907:	5e                   	pop    esi
c0022908:	5f                   	pop    edi
c0022909:	5d                   	pop    ebp
c002290a:	c3                   	ret    
c002290b:	90                   	nop

c002290c <PCI::open(int, int, void*)>:
c002290c:	83 ec 18             	sub    esp,0x18
c002290f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022913:	8b 10                	mov    edx,DWORD PTR [eax]
c0022915:	50                   	push   eax
c0022916:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022919:	31 c0                	xor    eax,eax
c002291b:	83 c4 1c             	add    esp,0x1c
c002291e:	c3                   	ret    
c002291f:	90                   	nop

c0022920 <PCI::close(int, int, void*)>:
c0022920:	31 c0                	xor    eax,eax
c0022922:	c3                   	ret    
c0022923:	90                   	nop

c0022924 <PCI::PCI()>:
c0022924:	83 ec 0c             	sub    esp,0xc
c0022927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002292b:	83 ec 08             	sub    esp,0x8
c002292e:	68 58 ca 02 c0       	push   0xc002ca58
c0022933:	50                   	push   eax
c0022934:	e8 41 12 ff ff       	call   c0013b7a <Bus::Bus(char const*)>
c0022939:	83 c4 10             	add    esp,0x10
c002293c:	ba c4 ca 02 c0       	mov    edx,0xc002cac4
c0022941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022945:	89 10                	mov    DWORD PTR [eax],edx
c0022947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002294b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022951:	0f b6 d0             	movzx  edx,al
c0022954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022958:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002295f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022963:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022969:	0f b6 d0             	movzx  edx,al
c002296c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022970:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022979:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002297f:	8d 50 01             	lea    edx,[eax+0x1]
c0022982:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022986:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002298c:	0f b6 d0             	movzx  edx,al
c002298f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022993:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022997:	83 c9 c0             	or     ecx,0xffffffc0
c002299a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002299e:	90                   	nop
c002299f:	83 c4 0c             	add    esp,0xc
c00229a2:	c3                   	ret    
c00229a3:	90                   	nop

c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00229a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00229a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00229ad:	89 ca                	mov    edx,ecx
c00229af:	c1 e0 10             	shl    eax,0x10
c00229b2:	81 e2 fc 00 00 00    	and    edx,0xfc
c00229b8:	09 d0                	or     eax,edx
c00229ba:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00229bf:	c1 e2 08             	shl    edx,0x8
c00229c2:	09 d0                	or     eax,edx
c00229c4:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00229c9:	c1 e2 0b             	shl    edx,0xb
c00229cc:	09 d0                	or     eax,edx
c00229ce:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229d3:	0d 00 00 00 80       	or     eax,0x80000000
c00229d8:	ef                   	out    dx,eax
c00229d9:	ba fc 0c 00 00       	mov    edx,0xcfc
c00229de:	ed                   	in     eax,dx
c00229df:	83 e1 02             	and    ecx,0x2
c00229e2:	0f b6 c9             	movzx  ecx,cl
c00229e5:	c1 e1 03             	shl    ecx,0x3
c00229e8:	d3 e8                	shr    eax,cl
c00229ea:	c3                   	ret    
c00229eb:	90                   	nop

c00229ec <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00229ec:	6a 00                	push   0x0
c00229ee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229f3:	50                   	push   eax
c00229f4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229f9:	50                   	push   eax
c00229fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229ff:	50                   	push   eax
c0022a00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a04:	e8 9b ff ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a09:	83 c4 14             	add    esp,0x14
c0022a0c:	c3                   	ret    
c0022a0d:	90                   	nop

c0022a0e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022a0e:	6a 0e                	push   0xe
c0022a10:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a15:	50                   	push   eax
c0022a16:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a1b:	50                   	push   eax
c0022a1c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a21:	50                   	push   eax
c0022a22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a26:	e8 79 ff ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a2b:	83 c4 14             	add    esp,0x14
c0022a2e:	0f b6 c0             	movzx  eax,al
c0022a31:	c3                   	ret    

c0022a32 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022a32:	55                   	push   ebp
c0022a33:	57                   	push   edi
c0022a34:	56                   	push   esi
c0022a35:	53                   	push   ebx
c0022a36:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022a3b:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022a40:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022a45:	6a 0a                	push   0xa
c0022a47:	56                   	push   esi
c0022a48:	55                   	push   ebp
c0022a49:	57                   	push   edi
c0022a4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a4e:	e8 51 ff ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a53:	6a 0a                	push   0xa
c0022a55:	89 c3                	mov    ebx,eax
c0022a57:	56                   	push   esi
c0022a58:	0f b6 db             	movzx  ebx,bl
c0022a5b:	55                   	push   ebp
c0022a5c:	57                   	push   edi
c0022a5d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a61:	e8 3e ff ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a66:	83 c4 28             	add    esp,0x28
c0022a69:	25 00 ff 00 00       	and    eax,0xff00
c0022a6e:	09 d8                	or     eax,ebx
c0022a70:	5b                   	pop    ebx
c0022a71:	5e                   	pop    esi
c0022a72:	5f                   	pop    edi
c0022a73:	5d                   	pop    ebp
c0022a74:	c3                   	ret    
c0022a75:	90                   	nop

c0022a76 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a76:	6a 08                	push   0x8
c0022a78:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a7d:	50                   	push   eax
c0022a7e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a83:	50                   	push   eax
c0022a84:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a89:	50                   	push   eax
c0022a8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a8e:	e8 11 ff ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a93:	83 c4 14             	add    esp,0x14
c0022a96:	0f b6 c4             	movzx  eax,ah
c0022a99:	c3                   	ret    

c0022a9a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a9a:	6a 08                	push   0x8
c0022a9c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa1:	50                   	push   eax
c0022aa2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa7:	50                   	push   eax
c0022aa8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aad:	50                   	push   eax
c0022aae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ab2:	e8 ed fe ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ab7:	83 c4 14             	add    esp,0x14
c0022aba:	c3                   	ret    
c0022abb:	90                   	nop

c0022abc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022abc:	6a 3c                	push   0x3c
c0022abe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ac3:	50                   	push   eax
c0022ac4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ac9:	50                   	push   eax
c0022aca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022acf:	50                   	push   eax
c0022ad0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ad4:	e8 cb fe ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ad9:	83 c4 14             	add    esp,0x14
c0022adc:	c3                   	ret    
c0022add:	90                   	nop

c0022ade <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022ade:	6a 18                	push   0x18
c0022ae0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ae5:	50                   	push   eax
c0022ae6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aeb:	50                   	push   eax
c0022aec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af1:	50                   	push   eax
c0022af2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022af6:	e8 a9 fe ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022afb:	83 c4 14             	add    esp,0x14
c0022afe:	0f b6 c4             	movzx  eax,ah
c0022b01:	c3                   	ret    

c0022b02 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b02:	55                   	push   ebp
c0022b03:	57                   	push   edi
c0022b04:	56                   	push   esi
c0022b05:	53                   	push   ebx
c0022b06:	50                   	push   eax
c0022b07:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022b0b:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022b10:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b15:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022b1a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022b21:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b24:	83 c3 10             	add    ebx,0x10
c0022b27:	0f b6 c0             	movzx  eax,al
c0022b2a:	0f b6 db             	movzx  ebx,bl
c0022b2d:	50                   	push   eax
c0022b2e:	51                   	push   ecx
c0022b2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022b33:	57                   	push   edi
c0022b34:	55                   	push   ebp
c0022b35:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022b39:	e8 66 fe ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b3e:	53                   	push   ebx
c0022b3f:	89 c6                	mov    esi,eax
c0022b41:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022b45:	c1 e6 10             	shl    esi,0x10
c0022b48:	51                   	push   ecx
c0022b49:	57                   	push   edi
c0022b4a:	55                   	push   ebp
c0022b4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b4f:	e8 50 fe ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b54:	83 c4 2c             	add    esp,0x2c
c0022b57:	0f b7 c0             	movzx  eax,ax
c0022b5a:	5b                   	pop    ebx
c0022b5b:	09 f0                	or     eax,esi
c0022b5d:	5e                   	pop    esi
c0022b5e:	5f                   	pop    edi
c0022b5f:	5d                   	pop    ebp
c0022b60:	c3                   	ret    
c0022b61:	90                   	nop

c0022b62 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b62:	53                   	push   ebx
c0022b63:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b68:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b71:	c1 e1 10             	shl    ecx,0x10
c0022b74:	25 fc 00 00 00       	and    eax,0xfc
c0022b79:	09 c1                	or     ecx,eax
c0022b7b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b80:	c1 e0 08             	shl    eax,0x8
c0022b83:	09 c1                	or     ecx,eax
c0022b85:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b8a:	c1 e0 0b             	shl    eax,0xb
c0022b8d:	09 c1                	or     ecx,eax
c0022b8f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b95:	89 c8                	mov    eax,ecx
c0022b97:	ef                   	out    dx,eax
c0022b98:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b9d:	ed                   	in     eax,dx
c0022b9e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022ba3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022ba8:	74 0a                	je     c0022bb4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022baa:	0f b7 d8             	movzx  ebx,ax
c0022bad:	89 d0                	mov    eax,edx
c0022baf:	c1 e0 10             	shl    eax,0x10
c0022bb2:	eb 05                	jmp    c0022bb9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022bb4:	66 31 c0             	xor    ax,ax
c0022bb7:	89 d3                	mov    ebx,edx
c0022bb9:	09 c3                	or     ebx,eax
c0022bbb:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bc0:	89 c8                	mov    eax,ecx
c0022bc2:	ef                   	out    dx,eax
c0022bc3:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022bc8:	89 d8                	mov    eax,ebx
c0022bca:	ef                   	out    dx,eax
c0022bcb:	5b                   	pop    ebx
c0022bcc:	c3                   	ret    
c0022bcd:	90                   	nop

c0022bce <PCI::checkBus(unsigned char)>:
c0022bce:	56                   	push   esi
c0022bcf:	53                   	push   ebx
c0022bd0:	31 db                	xor    ebx,ebx
c0022bd2:	51                   	push   ecx
c0022bd3:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022bd8:	52                   	push   edx
c0022bd9:	53                   	push   ebx
c0022bda:	43                   	inc    ebx
c0022bdb:	56                   	push   esi
c0022bdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022be0:	e8 2b 03 00 00       	call   c0022f10 <PCI::checkDevice(unsigned char, unsigned char)>
c0022be5:	83 c4 10             	add    esp,0x10
c0022be8:	83 fb 20             	cmp    ebx,0x20
c0022beb:	75 eb                	jne    c0022bd8 <PCI::checkBus(unsigned char)+0xa>
c0022bed:	58                   	pop    eax
c0022bee:	5b                   	pop    ebx
c0022bef:	5e                   	pop    esi
c0022bf0:	c3                   	ret    
c0022bf1:	90                   	nop

c0022bf2 <PCI::foundDevice(PCIDeviceInfo)>:
c0022bf2:	55                   	push   ebp
c0022bf3:	57                   	push   edi
c0022bf4:	56                   	push   esi
c0022bf5:	53                   	push   ebx
c0022bf6:	83 ec 1c             	sub    esp,0x1c
c0022bf9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022bfd:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c03:	0f 84 52 01 00 00    	je     c0022d5b <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c09:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c0d:	66 81 f9 06 04       	cmp    cx,0x406
c0022c12:	75 2c                	jne    c0022c40 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022c14:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c19:	50                   	push   eax
c0022c1a:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c1f:	50                   	push   eax
c0022c20:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c25:	50                   	push   eax
c0022c26:	56                   	push   esi
c0022c27:	e8 b2 fe ff ff       	call   c0022ade <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c2c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c30:	0f b6 c0             	movzx  eax,al
c0022c33:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c37:	83 c4 2c             	add    esp,0x2c
c0022c3a:	5b                   	pop    ebx
c0022c3b:	5e                   	pop    esi
c0022c3c:	5f                   	pop    edi
c0022c3d:	5d                   	pop    ebp
c0022c3e:	eb 8e                	jmp    c0022bce <PCI::checkBus(unsigned char)>
c0022c40:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c44:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c4e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c52:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c56:	88 d3                	mov    bl,dl
c0022c58:	85 c0                	test   eax,eax
c0022c5a:	74 33                	je     c0022c8f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c5c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c5f:	85 d2                	test   edx,edx
c0022c61:	74 28                	je     c0022c8b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c63:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c69:	31 ef                	xor    edi,ebp
c0022c6b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c71:	75 18                	jne    c0022c8b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c73:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c77:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c7d:	75 0c                	jne    c0022c8b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c7f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c85:	0f 84 d0 00 00 00    	je     c0022d5b <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c8d:	eb c9                	jmp    c0022c58 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c8f:	66 81 f9 01 06       	cmp    cx,0x601
c0022c94:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c98:	75 19                	jne    c0022cb3 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c9a:	83 ec 0c             	sub    esp,0xc
c0022c9d:	68 64 01 00 00       	push   0x164
c0022ca2:	e8 a4 cb fe ff       	call   c000f84b <malloc>
c0022ca7:	89 c5                	mov    ebp,eax
c0022ca9:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cac:	e8 95 0f 00 00       	call   c0023c46 <SATABus::SATABus()>
c0022cb1:	eb 1e                	jmp    c0022cd1 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022cb3:	66 81 f9 01 01       	cmp    cx,0x101
c0022cb8:	75 60                	jne    c0022d1a <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022cba:	83 ec 0c             	sub    esp,0xc
c0022cbd:	68 70 02 00 00       	push   0x270
c0022cc2:	e8 84 cb fe ff       	call   c000f84b <malloc>
c0022cc7:	89 c5                	mov    ebp,eax
c0022cc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ccc:	e8 03 03 00 00       	call   c0022fd4 <IDE::IDE()>
c0022cd1:	58                   	pop    eax
c0022cd2:	5a                   	pop    edx
c0022cd3:	55                   	push   ebp
c0022cd4:	56                   	push   esi
c0022cd5:	e8 2c 16 ff ff       	call   c0014306 <Device::addChild(Device*)>
c0022cda:	83 ec 1c             	sub    esp,0x1c
c0022cdd:	b9 09 00 00 00       	mov    ecx,0x9
c0022ce2:	fc                   	cld    
c0022ce3:	89 e7                	mov    edi,esp
c0022ce5:	89 de                	mov    esi,ebx
c0022ce7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ce9:	55                   	push   ebp
c0022cea:	e8 21 15 ff ff       	call   c0014210 <Device::preOpenPCI(PCIDeviceInfo)>
c0022cef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022cf2:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022cf6:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022cfe:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d06:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d0e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d11:	83 c4 4c             	add    esp,0x4c
c0022d14:	5b                   	pop    ebx
c0022d15:	5e                   	pop    esi
c0022d16:	5f                   	pop    edi
c0022d17:	5d                   	pop    ebp
c0022d18:	ff e0                	jmp    eax
c0022d1a:	83 ec 0c             	sub    esp,0xc
c0022d1d:	68 58 01 00 00       	push   0x158
c0022d22:	e8 24 cb fe ff       	call   c000f84b <malloc>
c0022d27:	89 c5                	mov    ebp,eax
c0022d29:	58                   	pop    eax
c0022d2a:	5a                   	pop    edx
c0022d2b:	68 60 ca 02 c0       	push   0xc002ca60
c0022d30:	55                   	push   ebp
c0022d31:	e8 c6 18 ff ff       	call   c00145fc <DriverlessDevice::DriverlessDevice(char const*)>
c0022d36:	59                   	pop    ecx
c0022d37:	5f                   	pop    edi
c0022d38:	55                   	push   ebp
c0022d39:	56                   	push   esi
c0022d3a:	e8 c7 15 ff ff       	call   c0014306 <Device::addChild(Device*)>
c0022d3f:	b9 09 00 00 00       	mov    ecx,0x9
c0022d44:	fc                   	cld    
c0022d45:	89 df                	mov    edi,ebx
c0022d47:	89 de                	mov    esi,ebx
c0022d49:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d4b:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d4f:	83 c4 2c             	add    esp,0x2c
c0022d52:	5b                   	pop    ebx
c0022d53:	5e                   	pop    esi
c0022d54:	5f                   	pop    edi
c0022d55:	5d                   	pop    ebp
c0022d56:	e9 b5 14 ff ff       	jmp    c0014210 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d5b:	83 c4 1c             	add    esp,0x1c
c0022d5e:	5b                   	pop    ebx
c0022d5f:	5e                   	pop    esi
c0022d60:	5f                   	pop    edi
c0022d61:	5d                   	pop    ebp
c0022d62:	c3                   	ret    
c0022d63:	90                   	nop

c0022d64 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d64:	55                   	push   ebp
c0022d65:	57                   	push   edi
c0022d66:	56                   	push   esi
c0022d67:	53                   	push   ebx
c0022d68:	83 ec 5c             	sub    esp,0x5c
c0022d6b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d73:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d77:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d80:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d84:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d89:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d8d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d92:	6a 0c                	push   0xc
c0022d94:	55                   	push   ebp
c0022d95:	53                   	push   ebx
c0022d96:	57                   	push   edi
c0022d97:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d9e:	e8 01 fc ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022da3:	55                   	push   ebp
c0022da4:	53                   	push   ebx
c0022da5:	57                   	push   edi
c0022da6:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022dad:	e8 80 fc ff ff       	call   c0022a32 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022db2:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022db7:	83 c4 24             	add    esp,0x24
c0022dba:	55                   	push   ebp
c0022dbb:	53                   	push   ebx
c0022dbc:	57                   	push   edi
c0022dbd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022dc1:	e8 f6 fc ff ff       	call   c0022abc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022dc6:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022dca:	6a 3c                	push   0x3c
c0022dcc:	55                   	push   ebp
c0022dcd:	53                   	push   ebx
c0022dce:	57                   	push   edi
c0022dcf:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022dd6:	e8 c9 fb ff ff       	call   c00229a4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ddb:	0f b6 c4             	movzx  eax,ah
c0022dde:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022de2:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022de6:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022dea:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0022def:	83 c4 24             	add    esp,0x24
c0022df2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022df8:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022dff:	74 6c                	je     c0022e6d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e01:	31 f6                	xor    esi,esi
c0022e03:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c0022e09:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e0f:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022e15:	7e 56                	jle    c0022e6d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e17:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022e1a:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e21:	39 cb                	cmp    ebx,ecx
c0022e23:	75 45                	jne    c0022e6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e25:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e2c:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022e30:	75 38                	jne    c0022e6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e32:	83 ec 0c             	sub    esp,0xc
c0022e35:	68 7a ca 02 c0       	push   0xc002ca7a
c0022e3a:	e8 a0 00 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0022e3f:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c0022e45:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e4b:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e53:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e57:	52                   	push   edx
c0022e58:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e5c:	53                   	push   ebx
c0022e5d:	68 9f ca 02 c0       	push   0xc002ca9f
c0022e62:	e8 78 00 ff ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0022e67:	83 c4 20             	add    esp,0x20
c0022e6a:	46                   	inc    esi
c0022e6b:	eb 96                	jmp    c0022e03 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e6d:	31 d2                	xor    edx,edx
c0022e6f:	83 ec 0c             	sub    esp,0xc
c0022e72:	55                   	push   ebp
c0022e73:	53                   	push   ebx
c0022e74:	57                   	push   edi
c0022e75:	52                   	push   edx
c0022e76:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e7a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e81:	e8 7c fc ff ff       	call   c0022b02 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e86:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e8a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e8e:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e92:	42                   	inc    edx
c0022e93:	83 c4 20             	add    esp,0x20
c0022e96:	83 fa 06             	cmp    edx,0x6
c0022e99:	75 d4                	jne    c0022e6f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e9b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e9f:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022ea3:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022ea7:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022eab:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022eaf:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022eb3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022eb8:	86 e0                	xchg   al,ah
c0022eba:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022ebf:	55                   	push   ebp
c0022ec0:	53                   	push   ebx
c0022ec1:	57                   	push   edi
c0022ec2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022ec6:	e8 ab fb ff ff       	call   c0022a76 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022ecb:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022ecf:	55                   	push   ebp
c0022ed0:	53                   	push   ebx
c0022ed1:	57                   	push   edi
c0022ed2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022ed9:	e8 0e fb ff ff       	call   c00229ec <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ede:	83 ec 0c             	sub    esp,0xc
c0022ee1:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022ee6:	b9 09 00 00 00       	mov    ecx,0x9
c0022eeb:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022eef:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022ef3:	fc                   	cld    
c0022ef4:	89 e7                	mov    edi,esp
c0022ef6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ef8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022eff:	e8 ee fc ff ff       	call   c0022bf2 <PCI::foundDevice(PCIDeviceInfo)>
c0022f04:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f0a:	5b                   	pop    ebx
c0022f0b:	5e                   	pop    esi
c0022f0c:	5f                   	pop    edi
c0022f0d:	5d                   	pop    ebp
c0022f0e:	c3                   	ret    
c0022f0f:	90                   	nop

c0022f10 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f10:	55                   	push   ebp
c0022f11:	57                   	push   edi
c0022f12:	56                   	push   esi
c0022f13:	53                   	push   ebx
c0022f14:	83 ec 0c             	sub    esp,0xc
c0022f17:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f1b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f20:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f25:	6a 00                	push   0x0
c0022f27:	56                   	push   esi
c0022f28:	57                   	push   edi
c0022f29:	55                   	push   ebp
c0022f2a:	e8 bd fa ff ff       	call   c00229ec <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f2f:	6a 00                	push   0x0
c0022f31:	56                   	push   esi
c0022f32:	57                   	push   edi
c0022f33:	55                   	push   ebp
c0022f34:	e8 2b fe ff ff       	call   c0022d64 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f39:	83 c4 20             	add    esp,0x20
c0022f3c:	6a 00                	push   0x0
c0022f3e:	56                   	push   esi
c0022f3f:	57                   	push   edi
c0022f40:	55                   	push   ebp
c0022f41:	e8 c8 fa ff ff       	call   c0022a0e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f46:	83 c4 10             	add    esp,0x10
c0022f49:	84 c0                	test   al,al
c0022f4b:	79 27                	jns    c0022f74 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f4d:	bb 01 00 00 00       	mov    ebx,0x1
c0022f52:	53                   	push   ebx
c0022f53:	56                   	push   esi
c0022f54:	57                   	push   edi
c0022f55:	55                   	push   ebp
c0022f56:	e8 91 fa ff ff       	call   c00229ec <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f5b:	83 c4 10             	add    esp,0x10
c0022f5e:	66 40                	inc    ax
c0022f60:	74 0c                	je     c0022f6e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f62:	53                   	push   ebx
c0022f63:	56                   	push   esi
c0022f64:	57                   	push   edi
c0022f65:	55                   	push   ebp
c0022f66:	e8 f9 fd ff ff       	call   c0022d64 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f6b:	83 c4 10             	add    esp,0x10
c0022f6e:	43                   	inc    ebx
c0022f6f:	83 fb 08             	cmp    ebx,0x8
c0022f72:	75 de                	jne    c0022f52 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f74:	83 c4 0c             	add    esp,0xc
c0022f77:	5b                   	pop    ebx
c0022f78:	5e                   	pop    esi
c0022f79:	5f                   	pop    edi
c0022f7a:	5d                   	pop    ebp
c0022f7b:	c3                   	ret    

c0022f7c <PCI::detect()>:
c0022f7c:	56                   	push   esi
c0022f7d:	53                   	push   ebx
c0022f7e:	53                   	push   ebx
c0022f7f:	31 db                	xor    ebx,ebx
c0022f81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f85:	6a 00                	push   0x0
c0022f87:	6a 00                	push   0x0
c0022f89:	6a 00                	push   0x0
c0022f8b:	56                   	push   esi
c0022f8c:	e8 7d fa ff ff       	call   c0022a0e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f91:	83 c4 10             	add    esp,0x10
c0022f94:	a8 80                	test   al,0x80
c0022f96:	75 21                	jne    c0022fb9 <PCI::detect()+0x3d>
c0022f98:	51                   	push   ecx
c0022f99:	51                   	push   ecx
c0022f9a:	6a 00                	push   0x0
c0022f9c:	56                   	push   esi
c0022f9d:	e8 2c fc ff ff       	call   c0022bce <PCI::checkBus(unsigned char)>
c0022fa2:	83 c4 10             	add    esp,0x10
c0022fa5:	eb 24                	jmp    c0022fcb <PCI::detect()+0x4f>
c0022fa7:	52                   	push   edx
c0022fa8:	52                   	push   edx
c0022fa9:	53                   	push   ebx
c0022faa:	43                   	inc    ebx
c0022fab:	56                   	push   esi
c0022fac:	e8 1d fc ff ff       	call   c0022bce <PCI::checkBus(unsigned char)>
c0022fb1:	83 c4 10             	add    esp,0x10
c0022fb4:	83 fb 08             	cmp    ebx,0x8
c0022fb7:	74 12                	je     c0022fcb <PCI::detect()+0x4f>
c0022fb9:	53                   	push   ebx
c0022fba:	6a 00                	push   0x0
c0022fbc:	6a 00                	push   0x0
c0022fbe:	56                   	push   esi
c0022fbf:	e8 28 fa ff ff       	call   c00229ec <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fc4:	83 c4 10             	add    esp,0x10
c0022fc7:	66 40                	inc    ax
c0022fc9:	74 dc                	je     c0022fa7 <PCI::detect()+0x2b>
c0022fcb:	58                   	pop    eax
c0022fcc:	5b                   	pop    ebx
c0022fcd:	5e                   	pop    esi
c0022fce:	c3                   	ret    
c0022fcf:	90                   	nop

c0022fd0 <IDE::close(int, int, void*)>:
c0022fd0:	83 c8 ff             	or     eax,0xffffffff
c0022fd3:	c3                   	ret    

c0022fd4 <IDE::IDE()>:
c0022fd4:	83 ec 0c             	sub    esp,0xc
c0022fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fdb:	83 ec 08             	sub    esp,0x8
c0022fde:	68 e8 ca 02 c0       	push   0xc002cae8
c0022fe3:	50                   	push   eax
c0022fe4:	e8 a9 16 ff ff       	call   c0014692 <HardDiskController::HardDiskController(char const*)>
c0022fe9:	83 c4 10             	add    esp,0x10
c0022fec:	ba 28 cd 02 c0       	mov    edx,0xc002cd28
c0022ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ff5:	89 10                	mov    DWORD PTR [eax],edx
c0022ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ffb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023002:	90                   	nop
c0023003:	83 c4 0c             	add    esp,0xc
c0023006:	c3                   	ret    
c0023007:	90                   	nop

c0023008 <IDE::prepareInterrupt(unsigned char)>:
c0023008:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002300d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023011:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023019:	c3                   	ret    

c002301a <selectDrive(unsigned char, unsigned char)>:
c002301a:	c3                   	ret    
c002301b:	90                   	nop

c002301c <IDE::getBase(unsigned char)>:
c002301c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023021:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023025:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002302d:	c3                   	ret    

c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002302e:	55                   	push   ebp
c002302f:	57                   	push   edi
c0023030:	56                   	push   esi
c0023031:	53                   	push   ebx
c0023032:	83 ec 1c             	sub    esp,0x1c
c0023035:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023039:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002303d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023040:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023044:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023048:	80 f9 03             	cmp    cl,0x3
c002304b:	77 51                	ja     c002309e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c002304d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023051:	0f b6 f2             	movzx  esi,dl
c0023054:	0f b6 db             	movzx  ebx,bl
c0023057:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002305a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c002305e:	83 ca 80             	or     edx,0xffffff80
c0023061:	0f b6 d2             	movzx  edx,dl
c0023064:	52                   	push   edx
c0023065:	6a 0c                	push   0xc
c0023067:	56                   	push   esi
c0023068:	57                   	push   edi
c0023069:	e8 c0 ff ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002306e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023073:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023077:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002307b:	ee                   	out    dx,al
c002307c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023081:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023085:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023089:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002308d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023095:	83 c4 2c             	add    esp,0x2c
c0023098:	5b                   	pop    ebx
c0023099:	5e                   	pop    esi
c002309a:	5f                   	pop    edi
c002309b:	5d                   	pop    ebp
c002309c:	eb 90                	jmp    c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002309e:	80 fb 07             	cmp    bl,0x7
c00230a1:	77 12                	ja     c00230b5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00230a3:	0f b6 d2             	movzx  edx,dl
c00230a6:	0f b6 db             	movzx  ebx,bl
c00230a9:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00230b1:	89 da                	mov    edx,ebx
c00230b3:	eb 2f                	jmp    c00230e4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230b5:	80 fb 0d             	cmp    bl,0xd
c00230b8:	77 13                	ja     c00230cd <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00230ba:	0f b6 d2             	movzx  edx,dl
c00230bd:	0f b6 db             	movzx  ebx,bl
c00230c0:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00230c7:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00230cb:	eb 17                	jmp    c00230e4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230cd:	80 fb 15             	cmp    bl,0x15
c00230d0:	77 13                	ja     c00230e5 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00230d2:	0f b6 d2             	movzx  edx,dl
c00230d5:	0f b6 db             	movzx  ebx,bl
c00230d8:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00230e0:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00230e4:	ee                   	out    dx,al
c00230e5:	83 c4 1c             	add    esp,0x1c
c00230e8:	5b                   	pop    ebx
c00230e9:	5e                   	pop    esi
c00230ea:	5f                   	pop    edi
c00230eb:	5d                   	pop    ebp
c00230ec:	c3                   	ret    
c00230ed:	90                   	nop

c00230ee <IDE::read(unsigned char, unsigned char)>:
c00230ee:	55                   	push   ebp
c00230ef:	57                   	push   edi
c00230f0:	56                   	push   esi
c00230f1:	53                   	push   ebx
c00230f2:	83 ec 1c             	sub    esp,0x1c
c00230f5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230f9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230fd:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023100:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023104:	3c 03                	cmp    al,0x3
c0023106:	77 43                	ja     c002314b <IDE::read(unsigned char, unsigned char)+0x5d>
c0023108:	0f b6 f2             	movzx  esi,dl
c002310b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002310e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023112:	83 c8 80             	or     eax,0xffffff80
c0023115:	0f b6 c0             	movzx  eax,al
c0023118:	50                   	push   eax
c0023119:	6a 0c                	push   0xc
c002311b:	56                   	push   esi
c002311c:	57                   	push   edi
c002311d:	e8 0c ff ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023122:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023127:	0f b6 c3             	movzx  eax,bl
c002312a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002312e:	ec                   	in     al,dx
c002312f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023133:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023138:	52                   	push   edx
c0023139:	6a 0c                	push   0xc
c002313b:	56                   	push   esi
c002313c:	57                   	push   edi
c002313d:	e8 ec fe ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023142:	83 c4 20             	add    esp,0x20
c0023145:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023149:	eb 49                	jmp    c0023194 <IDE::read(unsigned char, unsigned char)+0xa6>
c002314b:	80 fb 07             	cmp    bl,0x7
c002314e:	77 12                	ja     c0023162 <IDE::read(unsigned char, unsigned char)+0x74>
c0023150:	0f b6 d2             	movzx  edx,dl
c0023153:	0f b6 c3             	movzx  eax,bl
c0023156:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002315e:	89 c2                	mov    edx,eax
c0023160:	eb 31                	jmp    c0023193 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023162:	80 fb 0d             	cmp    bl,0xd
c0023165:	77 13                	ja     c002317a <IDE::read(unsigned char, unsigned char)+0x8c>
c0023167:	0f b6 d2             	movzx  edx,dl
c002316a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023171:	0f b6 d3             	movzx  edx,bl
c0023174:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023178:	eb 19                	jmp    c0023193 <IDE::read(unsigned char, unsigned char)+0xa5>
c002317a:	31 c0                	xor    eax,eax
c002317c:	80 fb 15             	cmp    bl,0x15
c002317f:	77 13                	ja     c0023194 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023181:	0f b6 d2             	movzx  edx,dl
c0023184:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002318c:	0f b6 d3             	movzx  edx,bl
c002318f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023193:	ec                   	in     al,dx
c0023194:	83 c4 1c             	add    esp,0x1c
c0023197:	5b                   	pop    ebx
c0023198:	5e                   	pop    esi
c0023199:	5f                   	pop    edi
c002319a:	5d                   	pop    ebp
c002319b:	c3                   	ret    

c002319c <IDE::waitInterrupt(unsigned char)>:
c002319c:	55                   	push   ebp
c002319d:	57                   	push   edi
c002319e:	56                   	push   esi
c002319f:	53                   	push   ebx
c00231a0:	31 db                	xor    ebx,ebx
c00231a2:	83 ec 0c             	sub    esp,0xc
c00231a5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00231a9:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00231ae:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00231b6:	89 e8                	mov    eax,ebp
c00231b8:	84 c0                	test   al,al
c00231ba:	75 34                	jne    c00231f0 <IDE::waitInterrupt(unsigned char)+0x54>
c00231bc:	52                   	push   edx
c00231bd:	6a 0c                	push   0xc
c00231bf:	56                   	push   esi
c00231c0:	57                   	push   edi
c00231c1:	e8 28 ff ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c00231c6:	83 c4 10             	add    esp,0x10
c00231c9:	a8 01                	test   al,0x1
c00231cb:	75 2b                	jne    c00231f8 <IDE::waitInterrupt(unsigned char)+0x5c>
c00231cd:	f6 c3 04             	test   bl,0x4
c00231d0:	75 16                	jne    c00231e8 <IDE::waitInterrupt(unsigned char)+0x4c>
c00231d2:	83 fb 32             	cmp    ebx,0x32
c00231d5:	7e 11                	jle    c00231e8 <IDE::waitInterrupt(unsigned char)+0x4c>
c00231d7:	50                   	push   eax
c00231d8:	50                   	push   eax
c00231d9:	6a 00                	push   0x0
c00231db:	68 80 96 98 00       	push   0x989680
c00231e0:	e8 8b b1 ff ff       	call   c001e370 <nanoSleep(unsigned long long)>
c00231e5:	83 c4 10             	add    esp,0x10
c00231e8:	83 fb 3c             	cmp    ebx,0x3c
c00231eb:	74 0b                	je     c00231f8 <IDE::waitInterrupt(unsigned char)+0x5c>
c00231ed:	43                   	inc    ebx
c00231ee:	eb be                	jmp    c00231ae <IDE::waitInterrupt(unsigned char)+0x12>
c00231f0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00231f8:	83 c4 0c             	add    esp,0xc
c00231fb:	89 e8                	mov    eax,ebp
c00231fd:	5b                   	pop    ebx
c00231fe:	5e                   	pop    esi
c00231ff:	5f                   	pop    edi
c0023200:	5d                   	pop    ebp
c0023201:	c3                   	ret    

c0023202 <ideChannel0IRQHandler(regs*, void*)>:
c0023202:	83 ec 10             	sub    esp,0x10
c0023205:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023209:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023210:	6a 07                	push   0x7
c0023212:	6a 00                	push   0x0
c0023214:	50                   	push   eax
c0023215:	e8 d4 fe ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c002321a:	83 c4 1c             	add    esp,0x1c
c002321d:	c3                   	ret    

c002321e <ideChannel1IRQHandler(regs*, void*)>:
c002321e:	83 ec 10             	sub    esp,0x10
c0023221:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023225:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002322c:	6a 07                	push   0x7
c002322e:	6a 01                	push   0x1
c0023230:	50                   	push   eax
c0023231:	e8 b8 fe ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0023236:	83 c4 1c             	add    esp,0x1c
c0023239:	c3                   	ret    

c002323a <IDE::enableIRQs(unsigned char, bool)>:
c002323a:	57                   	push   edi
c002323b:	56                   	push   esi
c002323c:	be 04 00 00 00       	mov    esi,0x4
c0023241:	53                   	push   ebx
c0023242:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023247:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002324b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023250:	0f 94 c0             	sete   al
c0023253:	d1 e0                	shl    eax,1
c0023255:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002325c:	0f b6 c0             	movzx  eax,al
c002325f:	50                   	push   eax
c0023260:	6a 0c                	push   0xc
c0023262:	57                   	push   edi
c0023263:	53                   	push   ebx
c0023264:	e8 c5 fd ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023269:	83 c4 10             	add    esp,0x10
c002326c:	50                   	push   eax
c002326d:	6a 0c                	push   0xc
c002326f:	57                   	push   edi
c0023270:	53                   	push   ebx
c0023271:	e8 78 fe ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0023276:	83 c4 10             	add    esp,0x10
c0023279:	4e                   	dec    esi
c002327a:	75 f0                	jne    c002326c <IDE::enableIRQs(unsigned char, bool)+0x32>
c002327c:	5b                   	pop    ebx
c002327d:	5e                   	pop    esi
c002327e:	5f                   	pop    edi
c002327f:	c3                   	ret    

c0023280 <IDE::open(int, int, void*)>:
c0023280:	55                   	push   ebp
c0023281:	57                   	push   edi
c0023282:	56                   	push   esi
c0023283:	53                   	push   ebx
c0023284:	83 ec 1c             	sub    esp,0x1c
c0023287:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002328b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023294:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002329d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00232a4:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00232ab:	0f 85 b0 02 00 00    	jne    c0023561 <IDE::open(int, int, void*)+0x2e1>
c00232b1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00232b7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00232bb:	83 e0 7f             	and    eax,0x7f
c00232be:	3c 05                	cmp    al,0x5
c00232c0:	74 04                	je     c00232c6 <IDE::open(int, int, void*)+0x46>
c00232c2:	3c 0f                	cmp    al,0xf
c00232c4:	75 32                	jne    c00232f8 <IDE::open(int, int, void*)+0x78>
c00232c6:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00232cc:	83 e0 fc             	and    eax,0xfffffffc
c00232cf:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00232d6:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00232dc:	83 e0 fc             	and    eax,0xfffffffc
c00232df:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00232e6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00232ec:	83 e0 fc             	and    eax,0xfffffffc
c00232ef:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232f6:	eb 14                	jmp    c002330c <IDE::open(int, int, void*)+0x8c>
c00232f8:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023302:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002330c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023313:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002331a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002331e:	89 c6                	mov    esi,eax
c0023320:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023325:	c1 e6 10             	shl    esi,0x10
c0023328:	89 e8                	mov    eax,ebp
c002332a:	89 fa                	mov    edx,edi
c002332c:	c1 e0 0b             	shl    eax,0xb
c002332f:	09 f0                	or     eax,esi
c0023331:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023338:	c1 e6 08             	shl    esi,0x8
c002333b:	09 c6                	or     esi,eax
c002333d:	89 f0                	mov    eax,esi
c002333f:	0d 08 00 00 80       	or     eax,0x80000008
c0023344:	ef                   	out    dx,eax
c0023345:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002334a:	89 ca                	mov    edx,ecx
c002334c:	ed                   	in     eax,dx
c002334d:	c1 e8 10             	shr    eax,0x10
c0023350:	3d ff ff 00 00       	cmp    eax,0xffff
c0023355:	0f 84 f5 00 00 00    	je     c0023450 <IDE::open(int, int, void*)+0x1d0>
c002335b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023361:	89 fa                	mov    edx,edi
c0023363:	89 f0                	mov    eax,esi
c0023365:	ef                   	out    dx,eax
c0023366:	b0 fe                	mov    al,0xfe
c0023368:	89 ca                	mov    edx,ecx
c002336a:	ee                   	out    dx,al
c002336b:	89 f0                	mov    eax,esi
c002336d:	89 fa                	mov    edx,edi
c002336f:	ef                   	out    dx,eax
c0023370:	89 ca                	mov    edx,ecx
c0023372:	ed                   	in     eax,dx
c0023373:	3c fe                	cmp    al,0xfe
c0023375:	0f 85 a9 00 00 00    	jne    c0023424 <IDE::open(int, int, void*)+0x1a4>
c002337b:	8b 15 68 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e468
c0023381:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023388:	74 33                	je     c00233bd <IDE::open(int, int, void*)+0x13d>
c002338a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023390:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023394:	40                   	inc    eax
c0023395:	83 ec 0c             	sub    esp,0xc
c0023398:	0f b6 c0             	movzx  eax,al
c002339b:	50                   	push   eax
c002339c:	55                   	push   ebp
c002339d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00233a1:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00233a7:	51                   	push   ecx
c00233a8:	e8 b7 4e ff ff       	call   c0018264 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00233ad:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00233b2:	83 c4 1c             	add    esp,0x1c
c00233b5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00233bb:	eb 0a                	jmp    c00233c7 <IDE::open(int, int, void*)+0x147>
c00233bd:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00233c7:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00233ce:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00233d5:	c1 e1 10             	shl    ecx,0x10
c00233d8:	c1 e0 08             	shl    eax,0x8
c00233db:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233e0:	09 c1                	or     ecx,eax
c00233e2:	89 fa                	mov    edx,edi
c00233e4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00233eb:	c1 e0 0b             	shl    eax,0xb
c00233ee:	09 c1                	or     ecx,eax
c00233f0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00233f6:	89 c8                	mov    eax,ecx
c00233f8:	ef                   	out    dx,eax
c00233f9:	be fc 0c 00 00       	mov    esi,0xcfc
c00233fe:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023404:	89 f2                	mov    edx,esi
c0023406:	ee                   	out    dx,al
c0023407:	89 c8                	mov    eax,ecx
c0023409:	89 fa                	mov    edx,edi
c002340b:	ef                   	out    dx,eax
c002340c:	89 f2                	mov    edx,esi
c002340e:	ed                   	in     eax,dx
c002340f:	0f b6 c0             	movzx  eax,al
c0023412:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023418:	74 46                	je     c0023460 <IDE::open(int, int, void*)+0x1e0>
c002341a:	83 ec 0c             	sub    esp,0xc
c002341d:	68 00 cb 02 c0       	push   0xc002cb00
c0023422:	eb 34                	jmp    c0023458 <IDE::open(int, int, void*)+0x1d8>
c0023424:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002342d:	75 17                	jne    c0023446 <IDE::open(int, int, void*)+0x1c6>
c002342f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023434:	74 07                	je     c002343d <IDE::open(int, int, void*)+0x1bd>
c0023436:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002343b:	75 09                	jne    c0023446 <IDE::open(int, int, void*)+0x1c6>
c002343d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023444:	eb 1a                	jmp    c0023460 <IDE::open(int, int, void*)+0x1e0>
c0023446:	83 ec 0c             	sub    esp,0xc
c0023449:	68 08 cb 02 c0       	push   0xc002cb08
c002344e:	eb 08                	jmp    c0023458 <IDE::open(int, int, void*)+0x1d8>
c0023450:	83 ec 0c             	sub    esp,0xc
c0023453:	68 39 cb 02 c0       	push   0xc002cb39
c0023458:	e8 ae 71 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c002345d:	83 c4 10             	add    esp,0x10
c0023460:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023467:	79 1a                	jns    c0023483 <IDE::open(int, int, void*)+0x203>
c0023469:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002346f:	83 e0 fc             	and    eax,0xfffffffc
c0023472:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023479:	83 c0 08             	add    eax,0x8
c002347c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023483:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023489:	89 c2                	mov    edx,eax
c002348b:	83 e2 0f             	and    edx,0xf
c002348e:	66 83 fa 08          	cmp    dx,0x8
c0023492:	75 0a                	jne    c002349e <IDE::open(int, int, void*)+0x21e>
c0023494:	83 e8 02             	sub    eax,0x2
c0023497:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002349e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00234a4:	89 c2                	mov    edx,eax
c00234a6:	83 e2 0f             	and    edx,0xf
c00234a9:	66 83 fa 08          	cmp    dx,0x8
c00234ad:	75 0a                	jne    c00234b9 <IDE::open(int, int, void*)+0x239>
c00234af:	83 e8 02             	sub    eax,0x2
c00234b2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00234b9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00234c0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00234c7:	89 d0                	mov    eax,edx
c00234c9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234cc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234d0:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00234d4:	8d 4a 01             	lea    ecx,[edx+0x1]
c00234d7:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234dc:	0f b6 c9             	movzx  ecx,cl
c00234df:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00234e6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234e9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234ed:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00234f1:	8d 50 02             	lea    edx,[eax+0x2]
c00234f4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234f9:	0f b6 d2             	movzx  edx,dl
c00234fc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023502:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023505:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023509:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002350d:	8d 48 03             	lea    ecx,[eax+0x3]
c0023510:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023515:	0f b6 c9             	movzx  ecx,cl
c0023518:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002351e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023521:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023525:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023529:	8d 50 04             	lea    edx,[eax+0x4]
c002352c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023532:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023537:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002353e:	66 85 f6             	test   si,si
c0023541:	74 3e                	je     c0023581 <IDE::open(int, int, void*)+0x301>
c0023543:	0f b6 d2             	movzx  edx,dl
c0023546:	83 c0 05             	add    eax,0x5
c0023549:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002354c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023550:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023554:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002355a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002355f:	eb 20                	jmp    c0023581 <IDE::open(int, int, void*)+0x301>
c0023561:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002356b:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023575:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002357c:	e9 02 ff ff ff       	jmp    c0023483 <IDE::open(int, int, void*)+0x203>
c0023581:	52                   	push   edx
c0023582:	52                   	push   edx
c0023583:	6a 00                	push   0x0
c0023585:	53                   	push   ebx
c0023586:	e8 7d fa ff ff       	call   c0023008 <IDE::prepareInterrupt(unsigned char)>
c002358b:	59                   	pop    ecx
c002358c:	5e                   	pop    esi
c002358d:	6a 01                	push   0x1
c002358f:	53                   	push   ebx
c0023590:	e8 73 fa ff ff       	call   c0023008 <IDE::prepareInterrupt(unsigned char)>
c0023595:	83 c4 0c             	add    esp,0xc
c0023598:	6a 00                	push   0x0
c002359a:	6a 00                	push   0x0
c002359c:	53                   	push   ebx
c002359d:	e8 98 fc ff ff       	call   c002323a <IDE::enableIRQs(unsigned char, bool)>
c00235a2:	83 c4 0c             	add    esp,0xc
c00235a5:	6a 00                	push   0x0
c00235a7:	6a 01                	push   0x1
c00235a9:	53                   	push   ebx
c00235aa:	e8 8b fc ff ff       	call   c002323a <IDE::enableIRQs(unsigned char, bool)>
c00235af:	83 c4 10             	add    esp,0x10
c00235b2:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00235b9:	74 40                	je     c00235fb <IDE::open(int, int, void*)+0x37b>
c00235bb:	83 ec 0c             	sub    esp,0xc
c00235be:	68 63 cb 02 c0       	push   0xc002cb63
c00235c3:	e8 17 f9 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00235c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235cb:	6a 01                	push   0x1
c00235cd:	68 02 32 02 c0       	push   0xc0023202
c00235d2:	6a 0e                	push   0xe
c00235d4:	53                   	push   ebx
c00235d5:	e8 b0 0c ff ff       	call   c001428a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235da:	83 c4 14             	add    esp,0x14
c00235dd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00235e3:	53                   	push   ebx
c00235e4:	6a 01                	push   0x1
c00235e6:	68 1e 32 02 c0       	push   0xc002321e
c00235eb:	6a 0f                	push   0xf
c00235ed:	53                   	push   ebx
c00235ee:	e8 97 0c ff ff       	call   c001428a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235f3:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00235f9:	eb 4a                	jmp    c0023645 <IDE::open(int, int, void*)+0x3c5>
c00235fb:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023605:	50                   	push   eax
c0023606:	6a 0f                	push   0xf
c0023608:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002360e:	68 7f cb 02 c0       	push   0xc002cb7f
c0023613:	e8 c7 f8 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023618:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002361b:	6a 00                	push   0x0
c002361d:	68 02 32 02 c0       	push   0xc0023202
c0023622:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023628:	53                   	push   ebx
c0023629:	e8 5c 0c ff ff       	call   c001428a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002362e:	83 c4 14             	add    esp,0x14
c0023631:	53                   	push   ebx
c0023632:	6a 00                	push   0x0
c0023634:	68 1e 32 02 c0       	push   0xc002321e
c0023639:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002363f:	53                   	push   ebx
c0023640:	e8 45 0c ff ff       	call   c001428a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023645:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023647:	83 c4 20             	add    esp,0x20
c002364a:	83 ec 0c             	sub    esp,0xc
c002364d:	53                   	push   ebx
c002364e:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023651:	83 c4 0c             	add    esp,0xc
c0023654:	6a 07                	push   0x7
c0023656:	6a 00                	push   0x0
c0023658:	53                   	push   ebx
c0023659:	e8 90 fa ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c002365e:	83 c4 0c             	add    esp,0xc
c0023661:	6a 07                	push   0x7
c0023663:	6a 01                	push   0x1
c0023665:	53                   	push   ebx
c0023666:	e8 83 fa ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c002366b:	83 c4 0c             	add    esp,0xc
c002366e:	6a 01                	push   0x1
c0023670:	6a 00                	push   0x0
c0023672:	53                   	push   ebx
c0023673:	e8 c2 fb ff ff       	call   c002323a <IDE::enableIRQs(unsigned char, bool)>
c0023678:	83 c4 0c             	add    esp,0xc
c002367b:	6a 01                	push   0x1
c002367d:	6a 01                	push   0x1
c002367f:	53                   	push   ebx
c0023680:	e8 b5 fb ff ff       	call   c002323a <IDE::enableIRQs(unsigned char, bool)>
c0023685:	83 c4 2c             	add    esp,0x2c
c0023688:	31 c0                	xor    eax,eax
c002368a:	5b                   	pop    ebx
c002368b:	5e                   	pop    esi
c002368c:	5f                   	pop    edi
c002368d:	5d                   	pop    ebp
c002368e:	c3                   	ret    
c002368f:	90                   	nop

c0023690 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023690:	55                   	push   ebp
c0023691:	57                   	push   edi
c0023692:	56                   	push   esi
c0023693:	53                   	push   ebx
c0023694:	83 ec 1c             	sub    esp,0x1c
c0023697:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002369b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002369f:	8d 50 f8             	lea    edx,[eax-0x8]
c00236a2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00236a6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00236aa:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00236ae:	80 fa 03             	cmp    dl,0x3
c00236b1:	77 5d                	ja     c0023710 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00236b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00236b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00236bb:	0f b6 db             	movzx  ebx,bl
c00236be:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00236c1:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00236c5:	83 ca 80             	or     edx,0xffffff80
c00236c8:	0f b6 d2             	movzx  edx,dl
c00236cb:	52                   	push   edx
c00236cc:	6a 0c                	push   0xc
c00236ce:	53                   	push   ebx
c00236cf:	56                   	push   esi
c00236d0:	e8 59 f9 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236d5:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00236da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00236de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00236e2:	0f b6 c0             	movzx  eax,al
c00236e5:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00236e9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236eb:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00236f0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00236f4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00236fc:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023704:	83 c4 2c             	add    esp,0x2c
c0023707:	5b                   	pop    ebx
c0023708:	5e                   	pop    esi
c0023709:	5f                   	pop    edi
c002370a:	5d                   	pop    ebp
c002370b:	e9 1e f9 ff ff       	jmp    c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023710:	3c 07                	cmp    al,0x7
c0023712:	77 10                	ja     c0023724 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023714:	0f b6 db             	movzx  ebx,bl
c0023717:	0f b6 d0             	movzx  edx,al
c002371a:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023722:	eb 2d                	jmp    c0023751 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023724:	3c 0d                	cmp    al,0xd
c0023726:	77 13                	ja     c002373b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023728:	0f b6 db             	movzx  ebx,bl
c002372b:	0f b6 c0             	movzx  eax,al
c002372e:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023735:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023739:	eb 16                	jmp    c0023751 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002373b:	3c 15                	cmp    al,0x15
c002373d:	77 14                	ja     c0023753 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002373f:	0f b6 db             	movzx  ebx,bl
c0023742:	0f b6 c0             	movzx  eax,al
c0023745:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002374d:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023751:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023753:	83 c4 1c             	add    esp,0x1c
c0023756:	5b                   	pop    ebx
c0023757:	5e                   	pop    esi
c0023758:	5f                   	pop    edi
c0023759:	5d                   	pop    ebp
c002375a:	c3                   	ret    
c002375b:	90                   	nop

c002375c <IDE::detect()>:
c002375c:	55                   	push   ebp
c002375d:	57                   	push   edi
c002375e:	56                   	push   esi
c002375f:	53                   	push   ebx
c0023760:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023766:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002376d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023774:	0f 85 be 02 00 00    	jne    c0023a38 <IDE::detect()+0x2dc>
c002377a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023781:	31 f6                	xor    esi,esi
c0023783:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002378b:	31 ed                	xor    ebp,ebp
c002378d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023791:	c1 e0 06             	shl    eax,0x6
c0023794:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002379c:	89 e8                	mov    eax,ebp
c002379e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00237a2:	c1 e0 04             	shl    eax,0x4
c00237a5:	83 c8 a0             	or     eax,0xffffffa0
c00237a8:	0f b6 c0             	movzx  eax,al
c00237ab:	50                   	push   eax
c00237ac:	6a 06                	push   0x6
c00237ae:	56                   	push   esi
c00237af:	53                   	push   ebx
c00237b0:	e8 79 f8 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237b5:	83 c4 0c             	add    esp,0xc
c00237b8:	6a 0c                	push   0xc
c00237ba:	56                   	push   esi
c00237bb:	53                   	push   ebx
c00237bc:	e8 2d f9 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c00237c1:	83 c4 0c             	add    esp,0xc
c00237c4:	6a 0c                	push   0xc
c00237c6:	56                   	push   esi
c00237c7:	53                   	push   ebx
c00237c8:	e8 21 f9 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c00237cd:	83 c4 0c             	add    esp,0xc
c00237d0:	6a 0c                	push   0xc
c00237d2:	56                   	push   esi
c00237d3:	53                   	push   ebx
c00237d4:	e8 15 f9 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c00237d9:	83 c4 0c             	add    esp,0xc
c00237dc:	6a 0c                	push   0xc
c00237de:	56                   	push   esi
c00237df:	53                   	push   ebx
c00237e0:	e8 09 f9 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c00237e5:	68 ec 00 00 00       	push   0xec
c00237ea:	6a 07                	push   0x7
c00237ec:	56                   	push   esi
c00237ed:	53                   	push   ebx
c00237ee:	e8 3b f8 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237f3:	83 c4 1c             	add    esp,0x1c
c00237f6:	6a 0c                	push   0xc
c00237f8:	56                   	push   esi
c00237f9:	53                   	push   ebx
c00237fa:	e8 ef f8 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c00237ff:	83 c4 0c             	add    esp,0xc
c0023802:	6a 0c                	push   0xc
c0023804:	56                   	push   esi
c0023805:	53                   	push   ebx
c0023806:	e8 e3 f8 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c002380b:	83 c4 0c             	add    esp,0xc
c002380e:	6a 0c                	push   0xc
c0023810:	56                   	push   esi
c0023811:	53                   	push   ebx
c0023812:	e8 d7 f8 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0023817:	83 c4 0c             	add    esp,0xc
c002381a:	6a 0c                	push   0xc
c002381c:	56                   	push   esi
c002381d:	53                   	push   ebx
c002381e:	e8 cb f8 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0023823:	83 c4 0c             	add    esp,0xc
c0023826:	6a 0c                	push   0xc
c0023828:	56                   	push   esi
c0023829:	53                   	push   ebx
c002382a:	e8 bf f8 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c002382f:	83 c4 10             	add    esp,0x10
c0023832:	84 c0                	test   al,al
c0023834:	0f 84 8b 01 00 00    	je     c00239c5 <IDE::detect()+0x269>
c002383a:	31 ff                	xor    edi,edi
c002383c:	50                   	push   eax
c002383d:	6a 0c                	push   0xc
c002383f:	56                   	push   esi
c0023840:	53                   	push   ebx
c0023841:	e8 a8 f8 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0023846:	83 c4 10             	add    esp,0x10
c0023849:	a8 01                	test   al,0x1
c002384b:	0f 85 8e 01 00 00    	jne    c00239df <IDE::detect()+0x283>
c0023851:	84 c0                	test   al,al
c0023853:	78 04                	js     c0023859 <IDE::detect()+0xfd>
c0023855:	a8 08                	test   al,0x8
c0023857:	75 27                	jne    c0023880 <IDE::detect()+0x124>
c0023859:	47                   	inc    edi
c002385a:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023860:	7e da                	jle    c002383c <IDE::detect()+0xe0>
c0023862:	50                   	push   eax
c0023863:	50                   	push   eax
c0023864:	6a 00                	push   0x0
c0023866:	68 40 4b 4c 00       	push   0x4c4b40
c002386b:	e8 00 ab ff ff       	call   c001e370 <nanoSleep(unsigned long long)>
c0023870:	83 c4 10             	add    esp,0x10
c0023873:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023879:	75 c1                	jne    c002383c <IDE::detect()+0xe0>
c002387b:	e9 5f 01 00 00       	jmp    c00239df <IDE::detect()+0x283>
c0023880:	31 c9                	xor    ecx,ecx
c0023882:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023886:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002388a:	83 ec 0c             	sub    esp,0xc
c002388d:	68 80 00 00 00       	push   0x80
c0023892:	57                   	push   edi
c0023893:	6a 00                	push   0x0
c0023895:	56                   	push   esi
c0023896:	53                   	push   ebx
c0023897:	e8 f4 fd ff ff       	call   c0023690 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002389c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00238a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00238a5:	89 d1                	mov    ecx,edx
c00238a7:	c1 e0 06             	shl    eax,0x6
c00238aa:	01 d8                	add    eax,ebx
c00238ac:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00238b3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00238ba:	89 f2                	mov    edx,esi
c00238bc:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00238c2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00238c6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00238cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00238d0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00238d7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00238df:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00238e6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00238ee:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00238f4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00238fb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023901:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023905:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023909:	83 c4 20             	add    esp,0x20
c002390c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002390f:	83 c0 02             	add    eax,0x2
c0023912:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023918:	83 c7 02             	add    edi,0x2
c002391b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002391e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023924:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023928:	75 e2                	jne    c002390c <IDE::detect()+0x1b0>
c002392a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002392e:	c1 e0 06             	shl    eax,0x6
c0023931:	01 d8                	add    eax,ebx
c0023933:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023939:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023940:	66 c1 ea 09          	shr    dx,0x9
c0023944:	83 e2 01             	and    edx,0x1
c0023947:	84 c9                	test   cl,cl
c0023949:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002394f:	75 2f                	jne    c0023980 <IDE::detect()+0x224>
c0023951:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023957:	85 c0                	test   eax,eax
c0023959:	74 66                	je     c00239c1 <IDE::detect()+0x265>
c002395b:	50                   	push   eax
c002395c:	55                   	push   ebp
c002395d:	56                   	push   esi
c002395e:	68 9b cb 02 c0       	push   0xc002cb9b
c0023963:	e8 77 f5 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023968:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002396f:	e8 d7 be fe ff       	call   c000f84b <malloc>
c0023974:	89 c7                	mov    edi,eax
c0023976:	89 04 24             	mov    DWORD PTR [esp],eax
c0023979:	e8 78 06 00 00       	call   c0023ff6 <ATA::ATA()>
c002397e:	eb 28                	jmp    c00239a8 <IDE::detect()+0x24c>
c0023980:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023986:	55                   	push   ebp
c0023987:	56                   	push   esi
c0023988:	68 ca cb 02 c0       	push   0xc002cbca
c002398d:	e8 4d f5 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023992:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023999:	e8 ad be fe ff       	call   c000f84b <malloc>
c002399e:	89 c7                	mov    edi,eax
c00239a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00239a3:	e8 8e 0c 00 00       	call   c0024636 <ATAPI::ATAPI()>
c00239a8:	5a                   	pop    edx
c00239a9:	59                   	pop    ecx
c00239aa:	57                   	push   edi
c00239ab:	53                   	push   ebx
c00239ac:	e8 55 09 ff ff       	call   c0014306 <Device::addChild(Device*)>
c00239b1:	8b 07                	mov    eax,DWORD PTR [edi]
c00239b3:	53                   	push   ebx
c00239b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00239b8:	6a 00                	push   0x0
c00239ba:	57                   	push   edi
c00239bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00239be:	83 c4 20             	add    esp,0x20
c00239c1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00239c5:	4d                   	dec    ebp
c00239c6:	74 0a                	je     c00239d2 <IDE::detect()+0x276>
c00239c8:	bd 01 00 00 00       	mov    ebp,0x1
c00239cd:	e9 bb fd ff ff       	jmp    c002378d <IDE::detect()+0x31>
c00239d2:	4e                   	dec    esi
c00239d3:	74 63                	je     c0023a38 <IDE::detect()+0x2dc>
c00239d5:	be 01 00 00 00       	mov    esi,0x1
c00239da:	e9 ac fd ff ff       	jmp    c002378b <IDE::detect()+0x2f>
c00239df:	50                   	push   eax
c00239e0:	6a 04                	push   0x4
c00239e2:	56                   	push   esi
c00239e3:	53                   	push   ebx
c00239e4:	e8 05 f7 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c00239e9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00239ed:	83 c4 0c             	add    esp,0xc
c00239f0:	6a 05                	push   0x5
c00239f2:	56                   	push   esi
c00239f3:	53                   	push   ebx
c00239f4:	e8 f5 f6 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c00239f9:	83 c4 10             	add    esp,0x10
c00239fc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a00:	80 fa 14             	cmp    dl,0x14
c0023a03:	75 04                	jne    c0023a09 <IDE::detect()+0x2ad>
c0023a05:	3c eb                	cmp    al,0xeb
c0023a07:	eb 07                	jmp    c0023a10 <IDE::detect()+0x2b4>
c0023a09:	3c 96                	cmp    al,0x96
c0023a0b:	75 b8                	jne    c00239c5 <IDE::detect()+0x269>
c0023a0d:	80 fa 69             	cmp    dl,0x69
c0023a10:	75 b3                	jne    c00239c5 <IDE::detect()+0x269>
c0023a12:	68 a1 00 00 00       	push   0xa1
c0023a17:	6a 07                	push   0x7
c0023a19:	56                   	push   esi
c0023a1a:	53                   	push   ebx
c0023a1b:	e8 0e f6 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a20:	5f                   	pop    edi
c0023a21:	58                   	pop    eax
c0023a22:	6a 00                	push   0x0
c0023a24:	68 40 42 0f 00       	push   0xf4240
c0023a29:	e8 42 a9 ff ff       	call   c001e370 <nanoSleep(unsigned long long)>
c0023a2e:	83 c4 10             	add    esp,0x10
c0023a31:	b1 01                	mov    cl,0x1
c0023a33:	e9 4a fe ff ff       	jmp    c0023882 <IDE::detect()+0x126>
c0023a38:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023a3e:	5b                   	pop    ebx
c0023a3f:	5e                   	pop    esi
c0023a40:	5f                   	pop    edi
c0023a41:	5d                   	pop    ebp
c0023a42:	c3                   	ret    
c0023a43:	90                   	nop

c0023a44 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023a44:	55                   	push   ebp
c0023a45:	57                   	push   edi
c0023a46:	56                   	push   esi
c0023a47:	53                   	push   ebx
c0023a48:	83 ec 1c             	sub    esp,0x1c
c0023a4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a4f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a53:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a57:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a5b:	88 c3                	mov    bl,al
c0023a5d:	84 c0                	test   al,al
c0023a5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a63:	0f 84 67 01 00 00    	je     c0023bd0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a69:	83 ec 0c             	sub    esp,0xc
c0023a6c:	68 fb cb 02 c0       	push   0xc002cbfb
c0023a71:	e8 69 f4 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023a76:	83 c4 10             	add    esp,0x10
c0023a79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a7d:	3c 01                	cmp    al,0x1
c0023a7f:	75 17                	jne    c0023a98 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a81:	83 ec 0c             	sub    esp,0xc
c0023a84:	b3 13                	mov    bl,0x13
c0023a86:	68 07 cc 02 c0       	push   0xc002cc07
c0023a8b:	e8 4f f4 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023a90:	83 c4 10             	add    esp,0x10
c0023a93:	e9 25 01 00 00       	jmp    c0023bbd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a98:	3c 02                	cmp    al,0x2
c0023a9a:	0f 85 ef 00 00 00    	jne    c0023b8f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023aa0:	d1 e6                	shl    esi,1
c0023aa2:	09 ee                	or     esi,ebp
c0023aa4:	52                   	push   edx
c0023aa5:	89 f0                	mov    eax,esi
c0023aa7:	6a 01                	push   0x1
c0023aa9:	0f b6 f0             	movzx  esi,al
c0023aac:	c1 e6 06             	shl    esi,0x6
c0023aaf:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023ab7:	50                   	push   eax
c0023ab8:	57                   	push   edi
c0023ab9:	e8 30 f6 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0023abe:	83 c4 10             	add    esp,0x10
c0023ac1:	89 c6                	mov    esi,eax
c0023ac3:	a8 01                	test   al,0x1
c0023ac5:	74 12                	je     c0023ad9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023ac7:	83 ec 0c             	sub    esp,0xc
c0023aca:	b3 07                	mov    bl,0x7
c0023acc:	68 1c cc 02 c0       	push   0xc002cc1c
c0023ad1:	e8 09 f4 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023ad6:	83 c4 10             	add    esp,0x10
c0023ad9:	f7 c6 02 00 00 00    	test   esi,0x2
c0023adf:	74 12                	je     c0023af3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023ae1:	83 ec 0c             	sub    esp,0xc
c0023ae4:	b3 03                	mov    bl,0x3
c0023ae6:	68 3a cc 02 c0       	push   0xc002cc3a
c0023aeb:	e8 ef f3 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023af0:	83 c4 10             	add    esp,0x10
c0023af3:	f7 c6 04 00 00 00    	test   esi,0x4
c0023af9:	74 12                	je     c0023b0d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023afb:	83 ec 0c             	sub    esp,0xc
c0023afe:	b3 14                	mov    bl,0x14
c0023b00:	68 5a cc 02 c0       	push   0xc002cc5a
c0023b05:	e8 d5 f3 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023b0a:	83 c4 10             	add    esp,0x10
c0023b0d:	f7 c6 08 00 00 00    	test   esi,0x8
c0023b13:	74 12                	je     c0023b27 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023b15:	83 ec 0c             	sub    esp,0xc
c0023b18:	b3 03                	mov    bl,0x3
c0023b1a:	68 3a cc 02 c0       	push   0xc002cc3a
c0023b1f:	e8 bb f3 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023b24:	83 c4 10             	add    esp,0x10
c0023b27:	f7 c6 10 00 00 00    	test   esi,0x10
c0023b2d:	74 12                	je     c0023b41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023b2f:	83 ec 0c             	sub    esp,0xc
c0023b32:	b3 15                	mov    bl,0x15
c0023b34:	68 72 cc 02 c0       	push   0xc002cc72
c0023b39:	e8 a1 f3 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023b3e:	83 c4 10             	add    esp,0x10
c0023b41:	f7 c6 20 00 00 00    	test   esi,0x20
c0023b47:	74 12                	je     c0023b5b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b49:	83 ec 0c             	sub    esp,0xc
c0023b4c:	b3 03                	mov    bl,0x3
c0023b4e:	68 3a cc 02 c0       	push   0xc002cc3a
c0023b53:	e8 87 f3 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023b58:	83 c4 10             	add    esp,0x10
c0023b5b:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b61:	74 12                	je     c0023b75 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b63:	83 ec 0c             	sub    esp,0xc
c0023b66:	b3 16                	mov    bl,0x16
c0023b68:	68 8c cc 02 c0       	push   0xc002cc8c
c0023b6d:	e8 6d f3 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023b72:	83 c4 10             	add    esp,0x10
c0023b75:	89 f0                	mov    eax,esi
c0023b77:	84 c0                	test   al,al
c0023b79:	79 42                	jns    c0023bbd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b7b:	83 ec 0c             	sub    esp,0xc
c0023b7e:	b3 0d                	mov    bl,0xd
c0023b80:	68 ad cc 02 c0       	push   0xc002ccad
c0023b85:	e8 55 f3 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023b8a:	83 c4 10             	add    esp,0x10
c0023b8d:	eb 2e                	jmp    c0023bbd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b8f:	3c 03                	cmp    al,0x3
c0023b91:	75 14                	jne    c0023ba7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b93:	83 ec 0c             	sub    esp,0xc
c0023b96:	b3 17                	mov    bl,0x17
c0023b98:	68 c1 cc 02 c0       	push   0xc002ccc1
c0023b9d:	e8 3d f3 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023ba2:	83 c4 10             	add    esp,0x10
c0023ba5:	eb 16                	jmp    c0023bbd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023ba7:	3c 04                	cmp    al,0x4
c0023ba9:	75 12                	jne    c0023bbd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bab:	83 ec 0c             	sub    esp,0xc
c0023bae:	b3 08                	mov    bl,0x8
c0023bb0:	68 d7 cc 02 c0       	push   0xc002ccd7
c0023bb5:	e8 25 f3 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023bba:	83 c4 10             	add    esp,0x10
c0023bbd:	50                   	push   eax
c0023bbe:	50                   	push   eax
c0023bbf:	0f b6 c3             	movzx  eax,bl
c0023bc2:	50                   	push   eax
c0023bc3:	68 ef cc 02 c0       	push   0xc002ccef
c0023bc8:	e8 12 f3 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023bcd:	83 c4 10             	add    esp,0x10
c0023bd0:	83 c4 1c             	add    esp,0x1c
c0023bd3:	88 d8                	mov    al,bl
c0023bd5:	5b                   	pop    ebx
c0023bd6:	5e                   	pop    esi
c0023bd7:	5f                   	pop    edi
c0023bd8:	5d                   	pop    ebp
c0023bd9:	c3                   	ret    

c0023bda <IDE::polling(unsigned char, unsigned int)>:
c0023bda:	57                   	push   edi
c0023bdb:	56                   	push   esi
c0023bdc:	53                   	push   ebx
c0023bdd:	bb 04 00 00 00       	mov    ebx,0x4
c0023be2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023be6:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023beb:	52                   	push   edx
c0023bec:	6a 0c                	push   0xc
c0023bee:	56                   	push   esi
c0023bef:	57                   	push   edi
c0023bf0:	e8 f9 f4 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0023bf5:	83 c4 10             	add    esp,0x10
c0023bf8:	4b                   	dec    ebx
c0023bf9:	75 f0                	jne    c0023beb <IDE::polling(unsigned char, unsigned int)+0x11>
c0023bfb:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023c00:	50                   	push   eax
c0023c01:	6a 0c                	push   0xc
c0023c03:	56                   	push   esi
c0023c04:	57                   	push   edi
c0023c05:	e8 e4 f4 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0023c0a:	83 c4 10             	add    esp,0x10
c0023c0d:	a8 01                	test   al,0x1
c0023c0f:	74 12                	je     c0023c23 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023c11:	83 ec 0c             	sub    esp,0xc
c0023c14:	68 09 cd 02 c0       	push   0xc002cd09
c0023c19:	e8 c1 f2 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023c1e:	83 c4 10             	add    esp,0x10
c0023c21:	eb 17                	jmp    c0023c3a <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c23:	a8 20                	test   al,0x20
c0023c25:	75 0f                	jne    c0023c36 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c27:	4b                   	dec    ebx
c0023c28:	74 10                	je     c0023c3a <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c2a:	84 c0                	test   al,al
c0023c2c:	78 d2                	js     c0023c00 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c2e:	a8 08                	test   al,0x8
c0023c30:	74 ce                	je     c0023c00 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c32:	31 c0                	xor    eax,eax
c0023c34:	eb 06                	jmp    c0023c3c <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c36:	b0 01                	mov    al,0x1
c0023c38:	eb 02                	jmp    c0023c3c <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c3a:	b0 02                	mov    al,0x2
c0023c3c:	5b                   	pop    ebx
c0023c3d:	5e                   	pop    esi
c0023c3e:	5f                   	pop    edi
c0023c3f:	c3                   	ret    

c0023c40 <SATABus::close(int, int, void*)>:
c0023c40:	31 c0                	xor    eax,eax
c0023c42:	c3                   	ret    
c0023c43:	90                   	nop

c0023c44 <SATABus::detect()>:
c0023c44:	c3                   	ret    
c0023c45:	90                   	nop

c0023c46 <SATABus::SATABus()>:
c0023c46:	83 ec 0c             	sub    esp,0xc
c0023c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c4d:	83 ec 08             	sub    esp,0x8
c0023c50:	68 4c cd 02 c0       	push   0xc002cd4c
c0023c55:	50                   	push   eax
c0023c56:	e8 37 0a ff ff       	call   c0014692 <HardDiskController::HardDiskController(char const*)>
c0023c5b:	83 c4 10             	add    esp,0x10
c0023c5e:	ba 08 ce 02 c0       	mov    edx,0xc002ce08
c0023c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c67:	89 10                	mov    DWORD PTR [eax],edx
c0023c69:	83 ec 0c             	sub    esp,0xc
c0023c6c:	6a 50                	push   0x50
c0023c6e:	e8 5f c3 fe ff       	call   c000ffd2 <Phys::allocateContiguousPages(int)>
c0023c73:	83 c4 10             	add    esp,0x10
c0023c76:	89 c2                	mov    edx,eax
c0023c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c7c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c82:	83 ec 0c             	sub    esp,0xc
c0023c85:	6a 50                	push   0x50
c0023c87:	e8 bf de fe ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0023c8c:	83 c4 10             	add    esp,0x10
c0023c8f:	89 c2                	mov    edx,eax
c0023c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c95:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c9b:	e8 46 e1 fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0023ca0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023ca4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023caa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023cae:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023cb4:	83 ec 0c             	sub    esp,0xc
c0023cb7:	6a 03                	push   0x3
c0023cb9:	6a 50                	push   0x50
c0023cbb:	51                   	push   ecx
c0023cbc:	52                   	push   edx
c0023cbd:	50                   	push   eax
c0023cbe:	e8 69 e9 fe ff       	call   c001262c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023cc3:	83 c4 20             	add    esp,0x20
c0023cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cca:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cd4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023cda:	83 ec 04             	sub    esp,0x4
c0023cdd:	52                   	push   edx
c0023cde:	50                   	push   eax
c0023cdf:	68 70 cd 02 c0       	push   0xc002cd70
c0023ce4:	e8 f6 f1 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023ce9:	83 c4 10             	add    esp,0x10
c0023cec:	90                   	nop
c0023ced:	83 c4 0c             	add    esp,0xc
c0023cf0:	c3                   	ret    
c0023cf1:	90                   	nop

c0023cf2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023cf2:	83 ec 0c             	sub    esp,0xc
c0023cf5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023cf9:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023cfc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023cff:	09 c2                	or     edx,eax
c0023d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d05:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d0b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023d0d:	31 c0                	xor    eax,eax
c0023d0f:	c1 e9 08             	shr    ecx,0x8
c0023d12:	83 e1 0f             	and    ecx,0xf
c0023d15:	39 c8                	cmp    eax,ecx
c0023d17:	74 0a                	je     c0023d23 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023d19:	f6 c2 01             	test   dl,0x1
c0023d1c:	74 18                	je     c0023d36 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d1e:	d1 ea                	shr    edx,1
c0023d20:	40                   	inc    eax
c0023d21:	eb f2                	jmp    c0023d15 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023d23:	83 ec 0c             	sub    esp,0xc
c0023d26:	68 94 cd 02 c0       	push   0xc002cd94
c0023d2b:	e8 db 68 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0023d30:	83 c4 10             	add    esp,0x10
c0023d33:	83 c8 ff             	or     eax,0xffffffff
c0023d36:	83 c4 0c             	add    esp,0xc
c0023d39:	c3                   	ret    

c0023d3a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023d3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d3e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023d41:	89 c2                	mov    edx,eax
c0023d43:	c1 ea 08             	shr    edx,0x8
c0023d46:	83 e2 0f             	and    edx,0xf
c0023d49:	fe ca                	dec    dl
c0023d4b:	75 31                	jne    c0023d7e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d4d:	83 e0 0f             	and    eax,0xf
c0023d50:	3c 03                	cmp    al,0x3
c0023d52:	75 2a                	jne    c0023d7e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d54:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d57:	b8 02 00 00 00       	mov    eax,0x2
c0023d5c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d62:	74 1c                	je     c0023d80 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d64:	b8 04 00 00 00       	mov    eax,0x4
c0023d69:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d6f:	74 0f                	je     c0023d80 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d71:	31 c0                	xor    eax,eax
c0023d73:	83 fa 03             	cmp    edx,0x3
c0023d76:	0f 94 c0             	sete   al
c0023d79:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d7d:	c3                   	ret    
c0023d7e:	31 c0                	xor    eax,eax
c0023d80:	c3                   	ret    
c0023d81:	90                   	nop

c0023d82 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d86:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d89:	0f ba e2 0f          	bt     edx,0xf
c0023d8d:	72 f7                	jb     c0023d86 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d8f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d92:	83 ca 10             	or     edx,0x10
c0023d95:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d98:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d9b:	83 ca 01             	or     edx,0x1
c0023d9e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023da1:	c3                   	ret    

c0023da2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023da2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023da6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023da9:	83 e2 fe             	and    edx,0xfffffffe
c0023dac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023daf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023db2:	83 e2 ef             	and    edx,0xffffffef
c0023db5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023db8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dbb:	0f ba e2 0e          	bt     edx,0xe
c0023dbf:	72 f7                	jb     c0023db8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023dc1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dc4:	0f ba e2 0f          	bt     edx,0xf
c0023dc8:	72 ee                	jb     c0023db8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023dca:	c3                   	ret    
c0023dcb:	90                   	nop

c0023dcc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023dcc:	55                   	push   ebp
c0023dcd:	57                   	push   edi
c0023dce:	56                   	push   esi
c0023dcf:	53                   	push   ebx
c0023dd0:	83 ec 1c             	sub    esp,0x1c
c0023dd3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023dd7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023ddb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023ddf:	53                   	push   ebx
c0023de0:	89 fd                	mov    ebp,edi
c0023de2:	56                   	push   esi
c0023de3:	c1 e5 0a             	shl    ebp,0xa
c0023de6:	e8 b7 ff ff ff       	call   c0023da2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023deb:	83 ec 0c             	sub    esp,0xc
c0023dee:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023df4:	01 e8                	add    eax,ebp
c0023df6:	89 03                	mov    DWORD PTR [ebx],eax
c0023df8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023dfa:	68 00 04 00 00       	push   0x400
c0023dff:	6a 00                	push   0x0
c0023e01:	50                   	push   eax
c0023e02:	e8 79 c9 fd ff       	call   c0000780 <memset>
c0023e07:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023e0d:	89 fa                	mov    edx,edi
c0023e0f:	01 e8                	add    eax,ebp
c0023e11:	c1 e7 0d             	shl    edi,0xd
c0023e14:	89 03                	mov    DWORD PTR [ebx],eax
c0023e16:	c1 e2 08             	shl    edx,0x8
c0023e19:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023e20:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023e2a:	89 d0                	mov    eax,edx
c0023e2c:	83 c4 1c             	add    esp,0x1c
c0023e2f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e35:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023e38:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023e3b:	68 00 01 00 00       	push   0x100
c0023e40:	6a 00                	push   0x0
c0023e42:	50                   	push   eax
c0023e43:	e8 38 c9 fd ff       	call   c0000780 <memset>
c0023e48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e4c:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e52:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e5c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e5f:	83 c4 10             	add    esp,0x10
c0023e62:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e69:	31 ff                	xor    edi,edi
c0023e6b:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e71:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e7b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e81:	83 c5 20             	add    ebp,0x20
c0023e84:	01 f8                	add    eax,edi
c0023e86:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e89:	52                   	push   edx
c0023e8a:	68 00 01 00 00       	push   0x100
c0023e8f:	6a 00                	push   0x0
c0023e91:	50                   	push   eax
c0023e92:	e8 e9 c8 fd ff       	call   c0000780 <memset>
c0023e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e9b:	83 c4 10             	add    esp,0x10
c0023e9e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023ea4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023eab:	01 f8                	add    eax,edi
c0023ead:	81 c7 00 01 00 00    	add    edi,0x100
c0023eb3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023eb6:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023ebc:	75 b3                	jne    c0023e71 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023ebe:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023ec2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023ec6:	83 c4 1c             	add    esp,0x1c
c0023ec9:	5b                   	pop    ebx
c0023eca:	5e                   	pop    esi
c0023ecb:	5f                   	pop    edi
c0023ecc:	5d                   	pop    ebp
c0023ecd:	e9 b0 fe ff ff       	jmp    c0023d82 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023ed2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023ed2:	55                   	push   ebp
c0023ed3:	57                   	push   edi
c0023ed4:	56                   	push   esi
c0023ed5:	53                   	push   ebx
c0023ed6:	31 db                	xor    ebx,ebx
c0023ed8:	83 ec 0c             	sub    esp,0xc
c0023edb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023edf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023ee3:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023ee6:	f7 c7 01 00 00 00    	test   edi,0x1
c0023eec:	0f 84 aa 00 00 00    	je     c0023f9c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023ef2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023ef6:	89 d8                	mov    eax,ebx
c0023ef8:	c1 e0 07             	shl    eax,0x7
c0023efb:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023f02:	55                   	push   ebp
c0023f03:	56                   	push   esi
c0023f04:	e8 31 fe ff ff       	call   c0023d3a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023f09:	5a                   	pop    edx
c0023f0a:	83 f8 01             	cmp    eax,0x1
c0023f0d:	59                   	pop    ecx
c0023f0e:	75 30                	jne    c0023f40 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023f10:	50                   	push   eax
c0023f11:	50                   	push   eax
c0023f12:	53                   	push   ebx
c0023f13:	68 b9 cd 02 c0       	push   0xc002cdb9
c0023f18:	e8 c2 ef fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023f1d:	83 c4 0c             	add    esp,0xc
c0023f20:	53                   	push   ebx
c0023f21:	55                   	push   ebp
c0023f22:	56                   	push   esi
c0023f23:	e8 a4 fe ff ff       	call   c0023dcc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f28:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023f2f:	e8 17 b9 fe ff       	call   c000f84b <malloc>
c0023f34:	89 c5                	mov    ebp,eax
c0023f36:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f39:	e8 60 0d 00 00       	call   c0024c9e <SATA::SATA()>
c0023f3e:	eb 33                	jmp    c0023f73 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023f40:	83 f8 04             	cmp    eax,0x4
c0023f43:	75 47                	jne    c0023f8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023f45:	50                   	push   eax
c0023f46:	50                   	push   eax
c0023f47:	53                   	push   ebx
c0023f48:	68 d0 cd 02 c0       	push   0xc002cdd0
c0023f4d:	e8 8d ef fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023f52:	83 c4 0c             	add    esp,0xc
c0023f55:	53                   	push   ebx
c0023f56:	55                   	push   ebp
c0023f57:	56                   	push   esi
c0023f58:	e8 6f fe ff ff       	call   c0023dcc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f5d:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f64:	e8 e2 b8 fe ff       	call   c000f84b <malloc>
c0023f69:	89 c5                	mov    ebp,eax
c0023f6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f6e:	e8 d7 10 00 00       	call   c002504a <SATAPI::SATAPI()>
c0023f73:	5a                   	pop    edx
c0023f74:	59                   	pop    ecx
c0023f75:	55                   	push   ebp
c0023f76:	56                   	push   esi
c0023f77:	e8 8a 03 ff ff       	call   c0014306 <Device::addChild(Device*)>
c0023f7c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f7f:	56                   	push   esi
c0023f80:	6a 00                	push   0x0
c0023f82:	53                   	push   ebx
c0023f83:	55                   	push   ebp
c0023f84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f87:	83 c4 20             	add    esp,0x20
c0023f8a:	eb 10                	jmp    c0023f9c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f8c:	50                   	push   eax
c0023f8d:	50                   	push   eax
c0023f8e:	53                   	push   ebx
c0023f8f:	68 e9 cd 02 c0       	push   0xc002cde9
c0023f94:	e8 46 ef fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0023f99:	83 c4 10             	add    esp,0x10
c0023f9c:	d1 ef                	shr    edi,1
c0023f9e:	43                   	inc    ebx
c0023f9f:	83 fb 20             	cmp    ebx,0x20
c0023fa2:	0f 85 3e ff ff ff    	jne    c0023ee6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023fa8:	83 c4 0c             	add    esp,0xc
c0023fab:	5b                   	pop    ebx
c0023fac:	5e                   	pop    esi
c0023fad:	5f                   	pop    edi
c0023fae:	5d                   	pop    ebp
c0023faf:	c3                   	ret    

c0023fb0 <SATABus::open(int, int, void*)>:
c0023fb0:	83 ec 14             	sub    esp,0x14
c0023fb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023fb7:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023fbd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023fc3:	52                   	push   edx
c0023fc4:	50                   	push   eax
c0023fc5:	e8 08 ff ff ff       	call   c0023ed2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023fca:	31 c0                	xor    eax,eax
c0023fcc:	83 c4 1c             	add    esp,0x1c
c0023fcf:	c3                   	ret    

c0023fd0 <ATA::close(int, int, void*)>:
c0023fd0:	83 ec 0c             	sub    esp,0xc
c0023fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fd7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023fdd:	85 c0                	test   eax,eax
c0023fdf:	74 0c                	je     c0023fed <ATA::close(int, int, void*)+0x1d>
c0023fe1:	83 ec 0c             	sub    esp,0xc
c0023fe4:	8b 10                	mov    edx,DWORD PTR [eax]
c0023fe6:	50                   	push   eax
c0023fe7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023fea:	83 c4 10             	add    esp,0x10
c0023fed:	31 c0                	xor    eax,eax
c0023fef:	83 c4 0c             	add    esp,0xc
c0023ff2:	c3                   	ret    
c0023ff3:	90                   	nop

c0023ff4 <ATA::powerSaving(PowerSavingLevel)>:
c0023ff4:	c3                   	ret    
c0023ff5:	90                   	nop

c0023ff6 <ATA::ATA()>:
c0023ff6:	83 ec 0c             	sub    esp,0xc
c0023ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ffd:	83 ec 04             	sub    esp,0x4
c0024000:	68 00 02 00 00       	push   0x200
c0024005:	68 d1 ce 02 c0       	push   0xc002ced1
c002400a:	50                   	push   eax
c002400b:	e8 1a 07 ff ff       	call   c001472a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024010:	83 c4 10             	add    esp,0x10
c0024013:	ba 54 ce 02 c0       	mov    edx,0xc002ce54
c0024018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002401c:	89 10                	mov    DWORD PTR [eax],edx
c002401e:	90                   	nop
c002401f:	83 c4 0c             	add    esp,0xc
c0024022:	c3                   	ret    
c0024023:	90                   	nop

c0024024 <ATA::flush(bool)>:
c0024024:	53                   	push   ebx
c0024025:	83 ec 08             	sub    esp,0x8
c0024028:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c002402d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024031:	19 c0                	sbb    eax,eax
c0024033:	83 e0 fd             	and    eax,0xfffffffd
c0024036:	05 ea 00 00 00       	add    eax,0xea
c002403b:	50                   	push   eax
c002403c:	6a 07                	push   0x7
c002403e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024045:	50                   	push   eax
c0024046:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002404c:	e8 dd ef ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024051:	83 c4 0c             	add    esp,0xc
c0024054:	6a 00                	push   0x0
c0024056:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002405d:	50                   	push   eax
c002405e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024064:	e8 71 fb ff ff       	call   c0023bda <IDE::polling(unsigned char, unsigned int)>
c0024069:	83 c4 18             	add    esp,0x18
c002406c:	5b                   	pop    ebx
c002406d:	c3                   	ret    

c002406e <ATA::readyForCommand()>:
c002406e:	56                   	push   esi
c002406f:	53                   	push   ebx
c0024070:	31 db                	xor    ebx,ebx
c0024072:	50                   	push   eax
c0024073:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024077:	50                   	push   eax
c0024078:	6a 0c                	push   0xc
c002407a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024081:	50                   	push   eax
c0024082:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024088:	e8 61 f0 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c002408d:	83 c4 10             	add    esp,0x10
c0024090:	a8 88                	test   al,0x88
c0024092:	74 23                	je     c00240b7 <ATA::readyForCommand()+0x49>
c0024094:	43                   	inc    ebx
c0024095:	83 fb 63             	cmp    ebx,0x63
c0024098:	7e dd                	jle    c0024077 <ATA::readyForCommand()+0x9>
c002409a:	51                   	push   ecx
c002409b:	51                   	push   ecx
c002409c:	6a 00                	push   0x0
c002409e:	68 40 42 0f 00       	push   0xf4240
c00240a3:	e8 c8 a2 ff ff       	call   c001e370 <nanoSleep(unsigned long long)>
c00240a8:	83 c4 10             	add    esp,0x10
c00240ab:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00240b1:	75 c4                	jne    c0024077 <ATA::readyForCommand()+0x9>
c00240b3:	31 c0                	xor    eax,eax
c00240b5:	eb 02                	jmp    c00240b9 <ATA::readyForCommand()+0x4b>
c00240b7:	b0 01                	mov    al,0x1
c00240b9:	5a                   	pop    edx
c00240ba:	5b                   	pop    ebx
c00240bb:	5e                   	pop    esi
c00240bc:	c3                   	ret    
c00240bd:	90                   	nop

c00240be <ATA::access(unsigned long long, int, void*, bool)>:
c00240be:	55                   	push   ebp
c00240bf:	57                   	push   edi
c00240c0:	56                   	push   esi
c00240c1:	53                   	push   ebx
c00240c2:	83 ec 2c             	sub    esp,0x2c
c00240c5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00240c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00240cd:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00240d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00240d5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00240d9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00240dd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00240e1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00240e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00240eb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00240f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240f5:	c1 e0 06             	shl    eax,0x6
c00240f8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024100:	74 5d                	je     c002415f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024102:	89 fa                	mov    edx,edi
c0024104:	89 f0                	mov    eax,esi
c0024106:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002410a:	c1 ea 1c             	shr    edx,0x1c
c002410d:	89 d1                	mov    ecx,edx
c002410f:	09 c1                	or     ecx,eax
c0024111:	74 25                	je     c0024138 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024113:	31 ed                	xor    ebp,ebp
c0024115:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002411c:	89 fa                	mov    edx,edi
c002411e:	89 f0                	mov    eax,esi
c0024120:	0f ad d0             	shrd   eax,edx,cl
c0024123:	d3 ea                	shr    edx,cl
c0024125:	f6 c1 20             	test   cl,0x20
c0024128:	74 02                	je     c002412c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002412a:	89 d0                	mov    eax,edx
c002412c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024130:	45                   	inc    ebp
c0024131:	83 fd 06             	cmp    ebp,0x6
c0024134:	75 df                	jne    c0024115 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024136:	eb 76                	jmp    c00241ae <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024138:	89 f0                	mov    eax,esi
c002413a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002413f:	89 fa                	mov    edx,edi
c0024141:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024148:	0f ac d0 10          	shrd   eax,edx,0x10
c002414c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024151:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024155:	c1 ee 18             	shr    esi,0x18
c0024158:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002415d:	eb 56                	jmp    c00241b5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002415f:	6a 00                	push   0x0
c0024161:	6a 3f                	push   0x3f
c0024163:	57                   	push   edi
c0024164:	56                   	push   esi
c0024165:	e8 9a 29 00 00       	call   c0026b04 <__umoddi3>
c002416a:	83 c4 10             	add    esp,0x10
c002416d:	40                   	inc    eax
c002416e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024172:	6a 00                	push   0x0
c0024174:	68 f0 03 00 00       	push   0x3f0
c0024179:	57                   	push   edi
c002417a:	56                   	push   esi
c002417b:	e8 84 28 00 00       	call   c0026a04 <__udivdi3>
c0024180:	83 c4 10             	add    esp,0x10
c0024183:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024188:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002418f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024194:	6a 00                	push   0x0
c0024196:	6a 3f                	push   0x3f
c0024198:	57                   	push   edi
c0024199:	56                   	push   esi
c002419a:	e8 65 28 00 00       	call   c0026a04 <__udivdi3>
c002419f:	83 c4 10             	add    esp,0x10
c00241a2:	89 c6                	mov    esi,eax
c00241a4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00241a9:	83 e6 0f             	and    esi,0xf
c00241ac:	eb 07                	jmp    c00241b5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241ae:	31 f6                	xor    esi,esi
c00241b0:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00241b5:	bf 01 00 00 00       	mov    edi,0x1
c00241ba:	50                   	push   eax
c00241bb:	6a 00                	push   0x0
c00241bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241c4:	50                   	push   eax
c00241c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00241c9:	e8 6c f0 ff ff       	call   c002323a <IDE::enableIRQs(unsigned char, bool)>
c00241ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241d1:	e8 98 fe ff ff       	call   c002406e <ATA::readyForCommand()>
c00241d6:	83 c4 10             	add    esp,0x10
c00241d9:	84 c0                	test   al,al
c00241db:	0f 84 5a 02 00 00    	je     c002443b <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241e1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00241e7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241ed:	c1 e0 04             	shl    eax,0x4
c00241f0:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00241f7:	09 c6                	or     esi,eax
c00241f9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00241fe:	75 05                	jne    c0024205 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024200:	83 ce a0             	or     esi,0xffffffa0
c0024203:	eb 03                	jmp    c0024208 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024205:	83 ce e0             	or     esi,0xffffffe0
c0024208:	89 f0                	mov    eax,esi
c002420a:	0f b6 f0             	movzx  esi,al
c002420d:	56                   	push   esi
c002420e:	6a 06                	push   0x6
c0024210:	51                   	push   ecx
c0024211:	52                   	push   edx
c0024212:	e8 17 ee ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024217:	83 c4 10             	add    esp,0x10
c002421a:	6a 00                	push   0x0
c002421c:	6a 01                	push   0x1
c002421e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024225:	50                   	push   eax
c0024226:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002422c:	e8 fd ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024231:	83 c4 10             	add    esp,0x10
c0024234:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024239:	75 6e                	jne    c00242a9 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002423b:	6a 00                	push   0x0
c002423d:	6a 08                	push   0x8
c002423f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024246:	50                   	push   eax
c0024247:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002424d:	e8 dc ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024252:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024257:	50                   	push   eax
c0024258:	6a 09                	push   0x9
c002425a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024261:	50                   	push   eax
c0024262:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024268:	e8 c1 ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002426d:	83 c4 20             	add    esp,0x20
c0024270:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024275:	50                   	push   eax
c0024276:	6a 0a                	push   0xa
c0024278:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002427f:	50                   	push   eax
c0024280:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024286:	e8 a3 ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002428b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024290:	50                   	push   eax
c0024291:	6a 0b                	push   0xb
c0024293:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002429a:	50                   	push   eax
c002429b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242a1:	e8 88 ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242a6:	83 c4 20             	add    esp,0x20
c00242a9:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00242ae:	50                   	push   eax
c00242af:	6a 02                	push   0x2
c00242b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242b8:	50                   	push   eax
c00242b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242bf:	e8 6a ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242c4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00242c9:	50                   	push   eax
c00242ca:	6a 03                	push   0x3
c00242cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242d3:	50                   	push   eax
c00242d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242da:	e8 4f ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242df:	83 c4 20             	add    esp,0x20
c00242e2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00242e7:	50                   	push   eax
c00242e8:	6a 04                	push   0x4
c00242ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242f1:	50                   	push   eax
c00242f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242f8:	e8 31 ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024302:	50                   	push   eax
c0024303:	6a 05                	push   0x5
c0024305:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002430c:	50                   	push   eax
c002430d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024313:	e8 16 ed ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024318:	83 c4 20             	add    esp,0x20
c002431b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024320:	0f 94 c0             	sete   al
c0024323:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024328:	74 09                	je     c0024333 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002432a:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024331:	eb 07                	jmp    c002433a <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024333:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002433a:	0f b6 c0             	movzx  eax,al
c002433d:	50                   	push   eax
c002433e:	6a 07                	push   0x7
c0024340:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024347:	50                   	push   eax
c0024348:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002434e:	e8 db ec ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024353:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024357:	83 c4 10             	add    esp,0x10
c002435a:	85 f6                	test   esi,esi
c002435c:	0f 84 ba 00 00 00    	je     c002441c <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024362:	50                   	push   eax
c0024363:	6a 01                	push   0x1
c0024365:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002436c:	50                   	push   eax
c002436d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024373:	e8 62 f8 ff ff       	call   c0023bda <IDE::polling(unsigned char, unsigned int)>
c0024378:	83 c4 10             	add    esp,0x10
c002437b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024381:	84 c0                	test   al,al
c0024383:	74 2c                	je     c00243b1 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024385:	0f b6 f8             	movzx  edi,al
c0024388:	0f b6 d2             	movzx  edx,dl
c002438b:	57                   	push   edi
c002438c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024393:	50                   	push   eax
c0024394:	52                   	push   edx
c0024395:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002439b:	e8 a4 f6 ff ff       	call   c0023a44 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00243a0:	c7 04 24 2c ce 02 c0 	mov    DWORD PTR [esp],0xc002ce2c
c00243a7:	e8 33 eb fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00243ac:	e9 87 00 00 00       	jmp    c0024438 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00243b1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00243b6:	74 33                	je     c00243eb <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00243b8:	31 ed                	xor    ebp,ebp
c00243ba:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00243be:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00243c2:	50                   	push   eax
c00243c3:	50                   	push   eax
c00243c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243cb:	50                   	push   eax
c00243cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243d2:	e8 45 ec ff ff       	call   c002301c <IDE::getBase(unsigned char)>
c00243d7:	89 c2                	mov    edx,eax
c00243d9:	89 f8                	mov    eax,edi
c00243db:	66 ef                	out    dx,ax
c00243dd:	45                   	inc    ebp
c00243de:	83 c4 10             	add    esp,0x10
c00243e1:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00243e7:	75 d1                	jne    c00243ba <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00243e9:	eb 23                	jmp    c002440e <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00243eb:	0f b6 d2             	movzx  edx,dl
c00243ee:	51                   	push   ecx
c00243ef:	51                   	push   ecx
c00243f0:	52                   	push   edx
c00243f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243f7:	e8 20 ec ff ff       	call   c002301c <IDE::getBase(unsigned char)>
c00243fc:	b9 00 01 00 00       	mov    ecx,0x100
c0024401:	89 c2                	mov    edx,eax
c0024403:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024407:	fc                   	cld    
c0024408:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002440b:	83 c4 10             	add    esp,0x10
c002440e:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024416:	4e                   	dec    esi
c0024417:	e9 3e ff ff ff       	jmp    c002435a <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c002441c:	31 ff                	xor    edi,edi
c002441e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024423:	74 16                	je     c002443b <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024425:	50                   	push   eax
c0024426:	50                   	push   eax
c0024427:	31 c0                	xor    eax,eax
c0024429:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002442e:	0f 94 c0             	sete   al
c0024431:	50                   	push   eax
c0024432:	53                   	push   ebx
c0024433:	e8 ec fb ff ff       	call   c0024024 <ATA::flush(bool)>
c0024438:	83 c4 10             	add    esp,0x10
c002443b:	83 c4 2c             	add    esp,0x2c
c002443e:	89 f8                	mov    eax,edi
c0024440:	5b                   	pop    ebx
c0024441:	5e                   	pop    esi
c0024442:	5f                   	pop    edi
c0024443:	5d                   	pop    ebp
c0024444:	c3                   	ret    
c0024445:	90                   	nop

c0024446 <ATA::read(unsigned long long, int, void*)>:
c0024446:	57                   	push   edi
c0024447:	b8 04 00 00 00       	mov    eax,0x4
c002444c:	56                   	push   esi
c002444d:	53                   	push   ebx
c002444e:	83 ec 10             	sub    esp,0x10
c0024451:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024455:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024459:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002445c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024460:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024464:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002446a:	77 3b                	ja     c00244a7 <ATA::read(unsigned long long, int, void*)+0x61>
c002446c:	b8 06 00 00 00       	mov    eax,0x6
c0024471:	85 d2                	test   edx,edx
c0024473:	74 32                	je     c00244a7 <ATA::read(unsigned long long, int, void*)+0x61>
c0024475:	50                   	push   eax
c0024476:	50                   	push   eax
c0024477:	6a 00                	push   0x0
c0024479:	52                   	push   edx
c002447a:	53                   	push   ebx
c002447b:	57                   	push   edi
c002447c:	56                   	push   esi
c002447d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024481:	e8 38 fc ff ff       	call   c00240be <ATA::access(unsigned long long, int, void*, bool)>
c0024486:	83 c4 20             	add    esp,0x20
c0024489:	85 c0                	test   eax,eax
c002448b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002448f:	75 11                	jne    c00244a2 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024491:	01 1d c8 27 03 c0    	add    DWORD PTR ds:0xc00327c8,ebx
c0024497:	e8 04 c5 fe ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c002449c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244a0:	eb 05                	jmp    c00244a7 <ATA::read(unsigned long long, int, void*)+0x61>
c00244a2:	b8 01 00 00 00       	mov    eax,0x1
c00244a7:	83 c4 10             	add    esp,0x10
c00244aa:	5b                   	pop    ebx
c00244ab:	5e                   	pop    esi
c00244ac:	5f                   	pop    edi
c00244ad:	c3                   	ret    

c00244ae <ATA::write(unsigned long long, int, void*)>:
c00244ae:	57                   	push   edi
c00244af:	b8 04 00 00 00       	mov    eax,0x4
c00244b4:	56                   	push   esi
c00244b5:	53                   	push   ebx
c00244b6:	83 ec 10             	sub    esp,0x10
c00244b9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244bd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244c1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244c4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244cc:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244d2:	77 3b                	ja     c002450f <ATA::write(unsigned long long, int, void*)+0x61>
c00244d4:	b8 06 00 00 00       	mov    eax,0x6
c00244d9:	85 d2                	test   edx,edx
c00244db:	74 32                	je     c002450f <ATA::write(unsigned long long, int, void*)+0x61>
c00244dd:	50                   	push   eax
c00244de:	50                   	push   eax
c00244df:	6a 01                	push   0x1
c00244e1:	52                   	push   edx
c00244e2:	53                   	push   ebx
c00244e3:	57                   	push   edi
c00244e4:	56                   	push   esi
c00244e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244e9:	e8 d0 fb ff ff       	call   c00240be <ATA::access(unsigned long long, int, void*, bool)>
c00244ee:	83 c4 20             	add    esp,0x20
c00244f1:	85 c0                	test   eax,eax
c00244f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244f7:	75 11                	jne    c002450a <ATA::write(unsigned long long, int, void*)+0x5c>
c00244f9:	01 1d c4 27 03 c0    	add    DWORD PTR ds:0xc00327c4,ebx
c00244ff:	e8 9c c4 fe ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c0024504:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024508:	eb 05                	jmp    c002450f <ATA::write(unsigned long long, int, void*)+0x61>
c002450a:	b8 01 00 00 00       	mov    eax,0x1
c002450f:	83 c4 10             	add    esp,0x10
c0024512:	5b                   	pop    ebx
c0024513:	5e                   	pop    esi
c0024514:	5f                   	pop    edi
c0024515:	c3                   	ret    

c0024516 <ATA::detectCHS()>:
c0024516:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002451a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024520:	c1 e0 06             	shl    eax,0x6
c0024523:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024529:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024533:	c7 44 24 04 37 ce 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ce37
c002453b:	e9 cb 60 ff ff       	jmp    c001a60b <Krnl::panic(char const*)>

c0024540 <ATA::open(int, int, void*)>:
c0024540:	53                   	push   ebx
c0024541:	83 ec 08             	sub    esp,0x8
c0024544:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024548:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002454c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024550:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024556:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002455c:	c1 e0 06             	shl    eax,0x6
c002455f:	01 d0                	add    eax,edx
c0024561:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024568:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002456e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024575:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002457f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024585:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002458c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024593:	75 0c                	jne    c00245a1 <ATA::open(int, int, void*)+0x61>
c0024595:	83 ec 0c             	sub    esp,0xc
c0024598:	53                   	push   ebx
c0024599:	e8 78 ff ff ff       	call   c0024516 <ATA::detectCHS()>
c002459e:	83 c4 10             	add    esp,0x10
c00245a1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00245a7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00245ad:	c1 e0 06             	shl    eax,0x6
c00245b0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00245b7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00245c1:	d1 e8                	shr    eax,1
c00245c3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00245c9:	6a 04                	push   0x4
c00245cb:	6a 0c                	push   0xc
c00245cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245d4:	50                   	push   eax
c00245d5:	52                   	push   edx
c00245d6:	e8 53 ea ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245db:	90                   	nop
c00245dc:	90                   	nop
c00245dd:	6a 00                	push   0x0
c00245df:	6a 0c                	push   0xc
c00245e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245e8:	50                   	push   eax
c00245e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245ef:	e8 3a ea ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245f4:	83 c4 14             	add    esp,0x14
c00245f7:	53                   	push   ebx
c00245f8:	e8 95 01 ff ff       	call   c0014792 <PhysicalDisk::startCache()>
c00245fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024600:	e8 7d 23 ff ff       	call   c0016982 <createPartitionsForDisk(PhysicalDisk*)>
c0024605:	31 c0                	xor    eax,eax
c0024607:	83 c4 18             	add    esp,0x18
c002460a:	5b                   	pop    ebx
c002460b:	c3                   	ret    

c002460c <ATAPI::write(unsigned long long, int, void*)>:
c002460c:	b8 03 00 00 00       	mov    eax,0x3
c0024611:	c3                   	ret    

c0024612 <ATAPI::close(int, int, void*)>:
c0024612:	83 ec 0c             	sub    esp,0xc
c0024615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024619:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002461f:	85 c0                	test   eax,eax
c0024621:	74 0c                	je     c002462f <ATAPI::close(int, int, void*)+0x1d>
c0024623:	83 ec 0c             	sub    esp,0xc
c0024626:	8b 10                	mov    edx,DWORD PTR [eax]
c0024628:	50                   	push   eax
c0024629:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002462c:	83 c4 10             	add    esp,0x10
c002462f:	31 c0                	xor    eax,eax
c0024631:	83 c4 0c             	add    esp,0xc
c0024634:	c3                   	ret    
c0024635:	90                   	nop

c0024636 <ATAPI::ATAPI()>:
c0024636:	83 ec 0c             	sub    esp,0xc
c0024639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002463d:	83 ec 04             	sub    esp,0x4
c0024640:	68 00 08 00 00       	push   0x800
c0024645:	68 71 cf 02 c0       	push   0xc002cf71
c002464a:	50                   	push   eax
c002464b:	e8 da 00 ff ff       	call   c001472a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024650:	83 c4 10             	add    esp,0x10
c0024653:	ba 8c ce 02 c0       	mov    edx,0xc002ce8c
c0024658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002465c:	89 10                	mov    DWORD PTR [eax],edx
c002465e:	90                   	nop
c002465f:	83 c4 0c             	add    esp,0xc
c0024662:	c3                   	ret    
c0024663:	90                   	nop

c0024664 <ATAPI::readyForCommand()>:
c0024664:	56                   	push   esi
c0024665:	53                   	push   ebx
c0024666:	31 db                	xor    ebx,ebx
c0024668:	50                   	push   eax
c0024669:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002466d:	50                   	push   eax
c002466e:	6a 0c                	push   0xc
c0024670:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024677:	50                   	push   eax
c0024678:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002467e:	e8 6b ea ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0024683:	83 c4 10             	add    esp,0x10
c0024686:	a8 88                	test   al,0x88
c0024688:	74 23                	je     c00246ad <ATAPI::readyForCommand()+0x49>
c002468a:	43                   	inc    ebx
c002468b:	83 fb 63             	cmp    ebx,0x63
c002468e:	7e dd                	jle    c002466d <ATAPI::readyForCommand()+0x9>
c0024690:	51                   	push   ecx
c0024691:	51                   	push   ecx
c0024692:	6a 00                	push   0x0
c0024694:	68 40 42 0f 00       	push   0xf4240
c0024699:	e8 d2 9c ff ff       	call   c001e370 <nanoSleep(unsigned long long)>
c002469e:	83 c4 10             	add    esp,0x10
c00246a1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00246a7:	75 c4                	jne    c002466d <ATAPI::readyForCommand()+0x9>
c00246a9:	31 c0                	xor    eax,eax
c00246ab:	eb 02                	jmp    c00246af <ATAPI::readyForCommand()+0x4b>
c00246ad:	b0 01                	mov    al,0x1
c00246af:	5a                   	pop    edx
c00246b0:	5b                   	pop    ebx
c00246b1:	5e                   	pop    esi
c00246b2:	c3                   	ret    
c00246b3:	90                   	nop

c00246b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00246b4:	55                   	push   ebp
c00246b5:	57                   	push   edi
c00246b6:	56                   	push   esi
c00246b7:	53                   	push   ebx
c00246b8:	83 ec 20             	sub    esp,0x20
c00246bb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00246bf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00246c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00246c7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00246cb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00246cf:	6a 01                	push   0x1
c00246d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246d8:	50                   	push   eax
c00246d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246df:	e8 56 eb ff ff       	call   c002323a <IDE::enableIRQs(unsigned char, bool)>
c00246e4:	5e                   	pop    esi
c00246e5:	58                   	pop    eax
c00246e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246ed:	50                   	push   eax
c00246ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246f4:	e8 0f e9 ff ff       	call   c0023008 <IDE::prepareInterrupt(unsigned char)>
c00246f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00246fc:	e8 63 ff ff ff       	call   c0024664 <ATAPI::readyForCommand()>
c0024701:	83 c4 10             	add    esp,0x10
c0024704:	84 c0                	test   al,al
c0024706:	75 0a                	jne    c0024712 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024708:	bb 01 00 00 00       	mov    ebx,0x1
c002470d:	e9 57 02 00 00       	jmp    c0024969 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024712:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024718:	c1 e0 04             	shl    eax,0x4
c002471b:	0f b6 c0             	movzx  eax,al
c002471e:	50                   	push   eax
c002471f:	6a 06                	push   0x6
c0024721:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024728:	50                   	push   eax
c0024729:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002472f:	e8 fa e8 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024734:	6a 00                	push   0x0
c0024736:	6a 01                	push   0x1
c0024738:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002473f:	50                   	push   eax
c0024740:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024746:	e8 e3 e8 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002474b:	83 c4 20             	add    esp,0x20
c002474e:	0f b6 c3             	movzx  eax,bl
c0024751:	0f b6 df             	movzx  ebx,bh
c0024754:	50                   	push   eax
c0024755:	6a 04                	push   0x4
c0024757:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002475e:	50                   	push   eax
c002475f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024765:	e8 c4 e8 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002476a:	53                   	push   ebx
c002476b:	6a 05                	push   0x5
c002476d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024774:	50                   	push   eax
c0024775:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002477b:	e8 ae e8 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024780:	83 c4 20             	add    esp,0x20
c0024783:	68 a0 00 00 00       	push   0xa0
c0024788:	6a 07                	push   0x7
c002478a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024791:	50                   	push   eax
c0024792:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024798:	e8 91 e8 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002479d:	83 c4 0c             	add    esp,0xc
c00247a0:	6a 01                	push   0x1
c00247a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247a9:	50                   	push   eax
c00247aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247b0:	e8 25 f4 ff ff       	call   c0023bda <IDE::polling(unsigned char, unsigned int)>
c00247b5:	83 c4 10             	add    esp,0x10
c00247b8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00247be:	84 c0                	test   al,al
c00247c0:	74 23                	je     c00247e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00247c2:	0f b6 d8             	movzx  ebx,al
c00247c5:	0f b6 d2             	movzx  edx,dl
c00247c8:	53                   	push   ebx
c00247c9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00247d0:	50                   	push   eax
c00247d1:	52                   	push   edx
c00247d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247d8:	e8 67 f2 ff ff       	call   c0023a44 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00247dd:	83 c4 10             	add    esp,0x10
c00247e0:	e9 84 01 00 00       	jmp    c0024969 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247e5:	0f b6 d2             	movzx  edx,dl
c00247e8:	53                   	push   ebx
c00247e9:	53                   	push   ebx
c00247ea:	52                   	push   edx
c00247eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247f1:	e8 26 e8 ff ff       	call   c002301c <IDE::getBase(unsigned char)>
c00247f6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00247fa:	b9 06 00 00 00       	mov    ecx,0x6
c00247ff:	89 c2                	mov    edx,eax
c0024801:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024804:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024808:	83 c4 10             	add    esp,0x10
c002480b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024811:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024818:	85 db                	test   ebx,ebx
c002481a:	0f 84 ec 00 00 00    	je     c002490c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024820:	51                   	push   ecx
c0024821:	51                   	push   ecx
c0024822:	52                   	push   edx
c0024823:	50                   	push   eax
c0024824:	e8 73 e9 ff ff       	call   c002319c <IDE::waitInterrupt(unsigned char)>
c0024829:	83 c4 10             	add    esp,0x10
c002482c:	84 c0                	test   al,al
c002482e:	0f 84 d4 fe ff ff    	je     c0024708 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024834:	56                   	push   esi
c0024835:	56                   	push   esi
c0024836:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002483d:	50                   	push   eax
c002483e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024844:	e8 bf e7 ff ff       	call   c0023008 <IDE::prepareInterrupt(unsigned char)>
c0024849:	83 c4 0c             	add    esp,0xc
c002484c:	6a 04                	push   0x4
c002484e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024855:	50                   	push   eax
c0024856:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002485c:	e8 8d e8 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c0024861:	83 c4 0c             	add    esp,0xc
c0024864:	89 c6                	mov    esi,eax
c0024866:	6a 05                	push   0x5
c0024868:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002486f:	50                   	push   eax
c0024870:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024876:	e8 73 e8 ff ff       	call   c00230ee <IDE::read(unsigned char, unsigned char)>
c002487b:	89 f1                	mov    ecx,esi
c002487d:	0f b6 c0             	movzx  eax,al
c0024880:	0f b6 f1             	movzx  esi,cl
c0024883:	c1 e0 08             	shl    eax,0x8
c0024886:	09 c6                	or     esi,eax
c0024888:	d1 fe                	sar    esi,1
c002488a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002488e:	83 c4 10             	add    esp,0x10
c0024891:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024896:	74 41                	je     c00248d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024898:	31 c9                	xor    ecx,ecx
c002489a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248a0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248a7:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00248ab:	75 0a                	jne    c00248b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00248ad:	01 c9                	add    ecx,ecx
c00248af:	01 cd                	add    ebp,ecx
c00248b1:	4b                   	dec    ebx
c00248b2:	e9 54 ff ff ff       	jmp    c002480b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00248b7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00248bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00248c0:	51                   	push   ecx
c00248c1:	51                   	push   ecx
c00248c2:	52                   	push   edx
c00248c3:	50                   	push   eax
c00248c4:	e8 53 e7 ff ff       	call   c002301c <IDE::getBase(unsigned char)>
c00248c9:	89 c2                	mov    edx,eax
c00248cb:	89 f0                	mov    eax,esi
c00248cd:	66 ef                	out    dx,ax
c00248cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00248d3:	83 c4 10             	add    esp,0x10
c00248d6:	41                   	inc    ecx
c00248d7:	eb c1                	jmp    c002489a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00248d9:	31 f6                	xor    esi,esi
c00248db:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248e1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248e8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00248ec:	75 06                	jne    c00248f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00248ee:	01 f6                	add    esi,esi
c00248f0:	01 f5                	add    ebp,esi
c00248f2:	eb bd                	jmp    c00248b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00248f4:	51                   	push   ecx
c00248f5:	51                   	push   ecx
c00248f6:	52                   	push   edx
c00248f7:	50                   	push   eax
c00248f8:	e8 1f e7 ff ff       	call   c002301c <IDE::getBase(unsigned char)>
c00248fd:	89 c2                	mov    edx,eax
c00248ff:	66 ed                	in     ax,dx
c0024901:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024906:	83 c4 10             	add    esp,0x10
c0024909:	46                   	inc    esi
c002490a:	eb cf                	jmp    c00248db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002490c:	51                   	push   ecx
c002490d:	51                   	push   ecx
c002490e:	52                   	push   edx
c002490f:	50                   	push   eax
c0024910:	e8 87 e8 ff ff       	call   c002319c <IDE::waitInterrupt(unsigned char)>
c0024915:	83 c4 10             	add    esp,0x10
c0024918:	84 c0                	test   al,al
c002491a:	0f 84 e8 fd ff ff    	je     c0024708 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024920:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024925:	52                   	push   edx
c0024926:	52                   	push   edx
c0024927:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002492e:	50                   	push   eax
c002492f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024935:	e8 ce e6 ff ff       	call   c0023008 <IDE::prepareInterrupt(unsigned char)>
c002493a:	83 c4 10             	add    esp,0x10
c002493d:	50                   	push   eax
c002493e:	50                   	push   eax
c002493f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024946:	50                   	push   eax
c0024947:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002494d:	e8 ca e6 ff ff       	call   c002301c <IDE::getBase(unsigned char)>
c0024952:	8d 50 07             	lea    edx,[eax+0x7]
c0024955:	ec                   	in     al,dx
c0024956:	83 c4 10             	add    esp,0x10
c0024959:	a8 88                	test   al,0x88
c002495b:	74 0a                	je     c0024967 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002495d:	4b                   	dec    ebx
c002495e:	75 dd                	jne    c002493d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024960:	bb 02 00 00 00       	mov    ebx,0x2
c0024965:	eb 02                	jmp    c0024969 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024967:	31 db                	xor    ebx,ebx
c0024969:	83 c4 1c             	add    esp,0x1c
c002496c:	89 d8                	mov    eax,ebx
c002496e:	5b                   	pop    ebx
c002496f:	5e                   	pop    esi
c0024970:	5f                   	pop    edi
c0024971:	5d                   	pop    ebp
c0024972:	c3                   	ret    
c0024973:	90                   	nop

c0024974 <ATAPI::diskRemoved()>:
c0024974:	83 ec 18             	sub    esp,0x18
c0024977:	68 7d cf 02 c0       	push   0xc002cf7d
c002497c:	e8 5e e5 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0024981:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024985:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002498c:	83 c4 1c             	add    esp,0x1c
c002498f:	c3                   	ret    

c0024990 <ATAPI::eject()>:
c0024990:	57                   	push   edi
c0024991:	b9 03 00 00 00       	mov    ecx,0x3
c0024996:	53                   	push   ebx
c0024997:	83 ec 14             	sub    esp,0x14
c002499a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002499e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00249a2:	fc                   	cld    
c00249a3:	31 c0                	xor    eax,eax
c00249a5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00249a7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00249ac:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00249b1:	50                   	push   eax
c00249b2:	50                   	push   eax
c00249b3:	6a 00                	push   0x0
c00249b5:	6a 00                	push   0x0
c00249b7:	6a 00                	push   0x0
c00249b9:	6a 02                	push   0x2
c00249bb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00249bf:	50                   	push   eax
c00249c0:	53                   	push   ebx
c00249c1:	e8 ee fc ff ff       	call   c00246b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249c6:	83 c4 14             	add    esp,0x14
c00249c9:	53                   	push   ebx
c00249ca:	e8 a5 ff ff ff       	call   c0024974 <ATAPI::diskRemoved()>
c00249cf:	83 c4 24             	add    esp,0x24
c00249d2:	31 c0                	xor    eax,eax
c00249d4:	5b                   	pop    ebx
c00249d5:	5f                   	pop    edi
c00249d6:	c3                   	ret    
c00249d7:	90                   	nop

c00249d8 <ATAPI::diskInserted()>:
c00249d8:	53                   	push   ebx
c00249d9:	83 ec 14             	sub    esp,0x14
c00249dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00249e0:	68 94 cf 02 c0       	push   0xc002cf94
c00249e5:	e8 f5 e4 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00249ea:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00249f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249f4:	e8 99 fd fe ff       	call   c0014792 <PhysicalDisk::startCache()>
c00249f9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00249fd:	83 c4 18             	add    esp,0x18
c0024a00:	5b                   	pop    ebx
c0024a01:	e9 7c 1f ff ff       	jmp    c0016982 <createPartitionsForDisk(PhysicalDisk*)>

c0024a06 <ATAPI::detectMedia()>:
c0024a06:	56                   	push   esi
c0024a07:	53                   	push   ebx
c0024a08:	83 ec 28             	sub    esp,0x28
c0024a0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a0f:	6a 0c                	push   0xc
c0024a11:	6a 00                	push   0x0
c0024a13:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a17:	56                   	push   esi
c0024a18:	e8 63 bd fd ff       	call   c0000780 <memset>
c0024a1d:	58                   	pop    eax
c0024a1e:	5a                   	pop    edx
c0024a1f:	6a 00                	push   0x0
c0024a21:	6a 00                	push   0x0
c0024a23:	6a 00                	push   0x0
c0024a25:	6a 00                	push   0x0
c0024a27:	56                   	push   esi
c0024a28:	53                   	push   ebx
c0024a29:	e8 86 fc ff ff       	call   c00246b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a2e:	83 c4 1c             	add    esp,0x1c
c0024a31:	6a 0c                	push   0xc
c0024a33:	6a 00                	push   0x0
c0024a35:	56                   	push   esi
c0024a36:	e8 45 bd fd ff       	call   c0000780 <memset>
c0024a3b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a40:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a45:	59                   	pop    ecx
c0024a46:	58                   	pop    eax
c0024a47:	6a 01                	push   0x1
c0024a49:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a4d:	50                   	push   eax
c0024a4e:	6a 00                	push   0x0
c0024a50:	6a 12                	push   0x12
c0024a52:	56                   	push   esi
c0024a53:	53                   	push   ebx
c0024a54:	e8 5b fc ff ff       	call   c00246b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a59:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a5d:	83 c4 20             	add    esp,0x20
c0024a60:	83 e0 7f             	and    eax,0x7f
c0024a63:	3c 70                	cmp    al,0x70
c0024a65:	74 15                	je     c0024a7c <ATAPI::detectMedia()+0x76>
c0024a67:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a6e:	75 0c                	jne    c0024a7c <ATAPI::detectMedia()+0x76>
c0024a70:	83 ec 0c             	sub    esp,0xc
c0024a73:	53                   	push   ebx
c0024a74:	e8 5f ff ff ff       	call   c00249d8 <ATAPI::diskInserted()>
c0024a79:	83 c4 10             	add    esp,0x10
c0024a7c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a80:	83 e0 0f             	and    eax,0xf
c0024a83:	3c 02                	cmp    al,0x2
c0024a85:	75 1b                	jne    c0024aa2 <ATAPI::detectMedia()+0x9c>
c0024a87:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a8c:	75 2d                	jne    c0024abb <ATAPI::detectMedia()+0xb5>
c0024a8e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a95:	74 24                	je     c0024abb <ATAPI::detectMedia()+0xb5>
c0024a97:	83 ec 0c             	sub    esp,0xc
c0024a9a:	53                   	push   ebx
c0024a9b:	e8 d4 fe ff ff       	call   c0024974 <ATAPI::diskRemoved()>
c0024aa0:	eb 16                	jmp    c0024ab8 <ATAPI::detectMedia()+0xb2>
c0024aa2:	84 c0                	test   al,al
c0024aa4:	75 15                	jne    c0024abb <ATAPI::detectMedia()+0xb5>
c0024aa6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024aad:	75 0c                	jne    c0024abb <ATAPI::detectMedia()+0xb5>
c0024aaf:	83 ec 0c             	sub    esp,0xc
c0024ab2:	53                   	push   ebx
c0024ab3:	e8 20 ff ff ff       	call   c00249d8 <ATAPI::diskInserted()>
c0024ab8:	83 c4 10             	add    esp,0x10
c0024abb:	83 c4 24             	add    esp,0x24
c0024abe:	5b                   	pop    ebx
c0024abf:	5e                   	pop    esi
c0024ac0:	c3                   	ret    
c0024ac1:	90                   	nop

c0024ac2 <ATAPI::open(int, int, void*)>:
c0024ac2:	53                   	push   ebx
c0024ac3:	83 ec 08             	sub    esp,0x8
c0024ac6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024aca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ace:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024ad2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ad8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024ade:	c1 e0 06             	shl    eax,0x6
c0024ae1:	01 d0                	add    eax,edx
c0024ae3:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024aea:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024af0:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024af7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b01:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b07:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b0e:	6a 04                	push   0x4
c0024b10:	6a 0c                	push   0xc
c0024b12:	51                   	push   ecx
c0024b13:	52                   	push   edx
c0024b14:	e8 15 e5 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b19:	90                   	nop
c0024b1a:	90                   	nop
c0024b1b:	6a 00                	push   0x0
c0024b1d:	6a 0c                	push   0xc
c0024b1f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b26:	50                   	push   eax
c0024b27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b2d:	e8 fc e4 ff ff       	call   c002302e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b32:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024b39:	83 c4 14             	add    esp,0x14
c0024b3c:	53                   	push   ebx
c0024b3d:	e8 c4 fe ff ff       	call   c0024a06 <ATAPI::detectMedia()>
c0024b42:	31 c0                	xor    eax,eax
c0024b44:	83 c4 18             	add    esp,0x18
c0024b47:	5b                   	pop    ebx
c0024b48:	c3                   	ret    
c0024b49:	90                   	nop

c0024b4a <ATAPI::read(unsigned long long, int, void*)>:
c0024b4a:	55                   	push   ebp
c0024b4b:	57                   	push   edi
c0024b4c:	56                   	push   esi
c0024b4d:	53                   	push   ebx
c0024b4e:	83 ec 1c             	sub    esp,0x1c
c0024b51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b55:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b59:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b5d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b64:	74 41                	je     c0024ba7 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b66:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b6a:	b9 03 00 00 00       	mov    ecx,0x3
c0024b6f:	fc                   	cld    
c0024b70:	31 c0                	xor    eax,eax
c0024b72:	86 fb                	xchg   bl,bh
c0024b74:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b76:	c1 c3 10             	rol    ebx,0x10
c0024b79:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b7e:	89 e8                	mov    eax,ebp
c0024b80:	86 fb                	xchg   bl,bh
c0024b82:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b86:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b8a:	50                   	push   eax
c0024b8b:	50                   	push   eax
c0024b8c:	55                   	push   ebp
c0024b8d:	c1 e5 0b             	shl    ebp,0xb
c0024b90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b94:	6a 00                	push   0x0
c0024b96:	55                   	push   ebp
c0024b97:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b9b:	50                   	push   eax
c0024b9c:	56                   	push   esi
c0024b9d:	e8 12 fb ff ff       	call   c00246b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ba2:	83 c4 20             	add    esp,0x20
c0024ba5:	eb 1a                	jmp    c0024bc1 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024ba7:	83 ec 0c             	sub    esp,0xc
c0024baa:	56                   	push   esi
c0024bab:	e8 56 fe ff ff       	call   c0024a06 <ATAPI::detectMedia()>
c0024bb0:	83 c4 10             	add    esp,0x10
c0024bb3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024bba:	75 aa                	jne    c0024b66 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024bbc:	b8 02 00 00 00       	mov    eax,0x2
c0024bc1:	83 c4 1c             	add    esp,0x1c
c0024bc4:	5b                   	pop    ebx
c0024bc5:	5e                   	pop    esi
c0024bc6:	5f                   	pop    edi
c0024bc7:	5d                   	pop    ebp
c0024bc8:	c3                   	ret    
c0024bc9:	90                   	nop

c0024bca <SATA::close(int, int, void*)>:
c0024bca:	83 ec 0c             	sub    esp,0xc
c0024bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bd1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024bd7:	85 c0                	test   eax,eax
c0024bd9:	74 0c                	je     c0024be7 <SATA::close(int, int, void*)+0x1d>
c0024bdb:	83 ec 0c             	sub    esp,0xc
c0024bde:	8b 10                	mov    edx,DWORD PTR [eax]
c0024be0:	50                   	push   eax
c0024be1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024be4:	83 c4 10             	add    esp,0x10
c0024be7:	31 c0                	xor    eax,eax
c0024be9:	83 c4 0c             	add    esp,0xc
c0024bec:	c3                   	ret    
c0024bed:	90                   	nop

c0024bee <SATA::powerSaving(PowerSavingLevel)>:
c0024bee:	c3                   	ret    
c0024bef:	90                   	nop

c0024bf0 <SATA::open(int, int, void*)>:
c0024bf0:	56                   	push   esi
c0024bf1:	53                   	push   ebx
c0024bf2:	50                   	push   eax
c0024bf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024bf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024bfb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024c05:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c0b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c19:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c23:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c29:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024c30:	e8 b8 b2 fe ff       	call   c000feed <Phys::allocatePage()>
c0024c35:	89 c6                	mov    esi,eax
c0024c37:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024c3d:	81 c6 00 10 00 00    	add    esi,0x1000
c0024c43:	e8 a5 b2 fe ff       	call   c000feed <Phys::allocatePage()>
c0024c48:	39 c6                	cmp    esi,eax
c0024c4a:	74 10                	je     c0024c5c <SATA::open(int, int, void*)+0x6c>
c0024c4c:	83 ec 0c             	sub    esp,0xc
c0024c4f:	68 bc ce 02 c0       	push   0xc002cebc
c0024c54:	e8 b2 59 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0024c59:	83 c4 10             	add    esp,0x10
c0024c5c:	83 ec 0c             	sub    esp,0xc
c0024c5f:	6a 02                	push   0x2
c0024c61:	e8 e5 ce fe ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0024c66:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c6c:	e8 75 d1 fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0024c71:	6a 03                	push   0x3
c0024c73:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c79:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c7f:	50                   	push   eax
c0024c80:	e8 b3 d6 fe ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c85:	83 c4 14             	add    esp,0x14
c0024c88:	53                   	push   ebx
c0024c89:	e8 04 fb fe ff       	call   c0014792 <PhysicalDisk::startCache()>
c0024c8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c91:	e8 ec 1c ff ff       	call   c0016982 <createPartitionsForDisk(PhysicalDisk*)>
c0024c96:	83 c4 14             	add    esp,0x14
c0024c99:	31 c0                	xor    eax,eax
c0024c9b:	5b                   	pop    ebx
c0024c9c:	5e                   	pop    esi
c0024c9d:	c3                   	ret    

c0024c9e <SATA::SATA()>:
c0024c9e:	83 ec 0c             	sub    esp,0xc
c0024ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ca5:	83 ec 04             	sub    esp,0x4
c0024ca8:	68 00 02 00 00       	push   0x200
c0024cad:	68 d0 ce 02 c0       	push   0xc002ced0
c0024cb2:	50                   	push   eax
c0024cb3:	e8 72 fa fe ff       	call   c001472a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024cb8:	83 c4 10             	add    esp,0x10
c0024cbb:	ba 40 cf 02 c0       	mov    edx,0xc002cf40
c0024cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cc4:	89 10                	mov    DWORD PTR [eax],edx
c0024cc6:	90                   	nop
c0024cc7:	83 c4 0c             	add    esp,0xc
c0024cca:	c3                   	ret    
c0024ccb:	90                   	nop

c0024ccc <SATA::access(unsigned long long, int, void*, bool)>:
c0024ccc:	55                   	push   ebp
c0024ccd:	57                   	push   edi
c0024cce:	56                   	push   esi
c0024ccf:	53                   	push   ebx
c0024cd0:	83 ec 2c             	sub    esp,0x2c
c0024cd3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024cd7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024cdb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024cdf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024ce3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024ce7:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024cec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024cf0:	7e 10                	jle    c0024d02 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024cf2:	83 ec 0c             	sub    esp,0xc
c0024cf5:	68 e0 ce 02 c0       	push   0xc002cee0
c0024cfa:	e8 0c 59 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0024cff:	83 c4 10             	add    esp,0x10
c0024d02:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024d08:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d18:	89 f0                	mov    eax,esi
c0024d1a:	c1 e0 07             	shl    eax,0x7
c0024d1d:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d21:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d2b:	53                   	push   ebx
c0024d2c:	8d 46 02             	lea    eax,[esi+0x2]
c0024d2f:	53                   	push   ebx
c0024d30:	c1 e0 07             	shl    eax,0x7
c0024d33:	bb 01 00 00 00       	mov    ebx,0x1
c0024d38:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024d3c:	50                   	push   eax
c0024d3d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d43:	e8 aa ef ff ff       	call   c0023cf2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d48:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d4c:	83 c4 10             	add    esp,0x10
c0024d4f:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d54:	0f 84 ce 01 00 00    	je     c0024f28 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d5a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d5e:	c1 e0 09             	shl    eax,0x9
c0024d61:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d6a:	74 17                	je     c0024d83 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d6c:	51                   	push   ecx
c0024d6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d71:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d75:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d7b:	e8 cc b9 fd ff       	call   c000074c <memcpy>
c0024d80:	83 c4 10             	add    esp,0x10
c0024d83:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d89:	8d 46 02             	lea    eax,[esi+0x2]
c0024d8c:	c1 e0 07             	shl    eax,0x7
c0024d8f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d93:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d95:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d9b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024da1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024da5:	c1 e1 05             	shl    ecx,0x5
c0024da8:	01 c8                	add    eax,ecx
c0024daa:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024dae:	8a 18                	mov    bl,BYTE PTR [eax]
c0024db0:	83 e1 01             	and    ecx,0x1
c0024db3:	83 e3 bf             	and    ebx,0xffffffbf
c0024db6:	c1 e1 06             	shl    ecx,0x6
c0024db9:	09 d9                	or     ecx,ebx
c0024dbb:	88 08                	mov    BYTE PTR [eax],cl
c0024dbd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024dbf:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024dc5:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024dcb:	89 08                	mov    DWORD PTR [eax],ecx
c0024dcd:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024dd3:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024dd9:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024ddf:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024de2:	52                   	push   edx
c0024de3:	68 90 00 00 00       	push   0x90
c0024de8:	6a 00                	push   0x0
c0024dea:	53                   	push   ebx
c0024deb:	e8 90 b9 fd ff       	call   c0000780 <memset>
c0024df0:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024df6:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024dfa:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e00:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e08:	83 c4 10             	add    esp,0x10
c0024e0b:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024e0e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024e14:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024e1a:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e1f:	09 c8                	or     eax,ecx
c0024e21:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e27:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e2a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e31:	66 25 00 7f          	and    ax,0x7f00
c0024e35:	66 0d 27 80          	or     ax,0x8027
c0024e39:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024e3e:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e41:	19 c0                	sbb    eax,eax
c0024e43:	83 e0 f0             	and    eax,0xfffffff0
c0024e46:	83 c0 35             	add    eax,0x35
c0024e49:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e4c:	89 f8                	mov    eax,edi
c0024e4e:	c1 e8 10             	shr    eax,0x10
c0024e51:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e54:	89 f8                	mov    eax,edi
c0024e56:	c1 e8 18             	shr    eax,0x18
c0024e59:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e5c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e60:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e67:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e6e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e72:	89 f3                	mov    ebx,esi
c0024e74:	31 c0                	xor    eax,eax
c0024e76:	c1 e3 07             	shl    ebx,0x7
c0024e79:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e7d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e83:	80 e1 88             	and    cl,0x88
c0024e86:	74 0a                	je     c0024e92 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e88:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e8d:	74 0a                	je     c0024e99 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e8f:	40                   	inc    eax
c0024e90:	eb eb                	jmp    c0024e7d <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e92:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e97:	75 0a                	jne    c0024ea3 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e99:	83 ec 0c             	sub    esp,0xc
c0024e9c:	68 19 cf 02 c0       	push   0xc002cf19
c0024ea1:	eb 56                	jmp    c0024ef9 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024ea3:	b8 01 00 00 00       	mov    eax,0x1
c0024ea8:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024eac:	c1 e6 07             	shl    esi,0x7
c0024eaf:	d3 e0                	shl    eax,cl
c0024eb1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024eb5:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024ebb:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024ec1:	85 c8                	test   eax,ecx
c0024ec3:	74 20                	je     c0024ee5 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024ec5:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024ecb:	0f ba e1 1e          	bt     ecx,0x1e
c0024ecf:	73 ea                	jae    c0024ebb <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024ed1:	83 ec 0c             	sub    esp,0xc
c0024ed4:	31 db                	xor    ebx,ebx
c0024ed6:	68 27 cf 02 c0       	push   0xc002cf27
c0024edb:	e8 2b 57 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0024ee0:	83 c4 10             	add    esp,0x10
c0024ee3:	eb 43                	jmp    c0024f28 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ee5:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024eeb:	0f ba e0 1e          	bt     eax,0x1e
c0024eef:	73 17                	jae    c0024f08 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024ef1:	83 ec 0c             	sub    esp,0xc
c0024ef4:	68 27 cf 02 c0       	push   0xc002cf27
c0024ef9:	e8 0d 57 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0024efe:	bb 01 00 00 00       	mov    ebx,0x1
c0024f03:	83 c4 10             	add    esp,0x10
c0024f06:	eb 20                	jmp    c0024f28 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f08:	31 db                	xor    ebx,ebx
c0024f0a:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024f0f:	75 17                	jne    c0024f28 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f11:	50                   	push   eax
c0024f12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f16:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f1c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024f20:	e8 27 b8 fd ff       	call   c000074c <memcpy>
c0024f25:	83 c4 10             	add    esp,0x10
c0024f28:	83 c4 2c             	add    esp,0x2c
c0024f2b:	89 d8                	mov    eax,ebx
c0024f2d:	5b                   	pop    ebx
c0024f2e:	5e                   	pop    esi
c0024f2f:	5f                   	pop    edi
c0024f30:	5d                   	pop    ebp
c0024f31:	c3                   	ret    

c0024f32 <SATA::read(unsigned long long, int, void*)>:
c0024f32:	57                   	push   edi
c0024f33:	b8 04 00 00 00       	mov    eax,0x4
c0024f38:	56                   	push   esi
c0024f39:	53                   	push   ebx
c0024f3a:	83 ec 10             	sub    esp,0x10
c0024f3d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f41:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f45:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f48:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f50:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f56:	77 3b                	ja     c0024f93 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f58:	b8 06 00 00 00       	mov    eax,0x6
c0024f5d:	85 d2                	test   edx,edx
c0024f5f:	74 32                	je     c0024f93 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f61:	50                   	push   eax
c0024f62:	50                   	push   eax
c0024f63:	6a 00                	push   0x0
c0024f65:	52                   	push   edx
c0024f66:	53                   	push   ebx
c0024f67:	57                   	push   edi
c0024f68:	56                   	push   esi
c0024f69:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f6d:	e8 5a fd ff ff       	call   c0024ccc <SATA::access(unsigned long long, int, void*, bool)>
c0024f72:	83 c4 20             	add    esp,0x20
c0024f75:	85 c0                	test   eax,eax
c0024f77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f7b:	75 11                	jne    c0024f8e <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f7d:	01 1d c8 27 03 c0    	add    DWORD PTR ds:0xc00327c8,ebx
c0024f83:	e8 18 ba fe ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c0024f88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f8c:	eb 05                	jmp    c0024f93 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f8e:	b8 01 00 00 00       	mov    eax,0x1
c0024f93:	83 c4 10             	add    esp,0x10
c0024f96:	5b                   	pop    ebx
c0024f97:	5e                   	pop    esi
c0024f98:	5f                   	pop    edi
c0024f99:	c3                   	ret    

c0024f9a <SATA::write(unsigned long long, int, void*)>:
c0024f9a:	55                   	push   ebp
c0024f9b:	b8 04 00 00 00       	mov    eax,0x4
c0024fa0:	57                   	push   edi
c0024fa1:	56                   	push   esi
c0024fa2:	53                   	push   ebx
c0024fa3:	83 ec 1c             	sub    esp,0x1c
c0024fa6:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024faa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024fae:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024fb1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024fb5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024fb9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024fbf:	77 56                	ja     c0025017 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024fc1:	b8 06 00 00 00       	mov    eax,0x6
c0024fc6:	85 ff                	test   edi,edi
c0024fc8:	74 4d                	je     c0025017 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024fca:	89 ee                	mov    esi,ebp
c0024fcc:	c1 e6 09             	shl    esi,0x9
c0024fcf:	01 fe                	add    esi,edi
c0024fd1:	89 c8                	mov    eax,ecx
c0024fd3:	89 da                	mov    edx,ebx
c0024fd5:	83 c0 01             	add    eax,0x1
c0024fd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024fdc:	83 d2 00             	adc    edx,0x0
c0024fdf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024fe3:	50                   	push   eax
c0024fe4:	50                   	push   eax
c0024fe5:	6a 01                	push   0x1
c0024fe7:	57                   	push   edi
c0024fe8:	81 c7 00 02 00 00    	add    edi,0x200
c0024fee:	6a 01                	push   0x1
c0024ff0:	53                   	push   ebx
c0024ff1:	51                   	push   ecx
c0024ff2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024ff6:	e8 d1 fc ff ff       	call   c0024ccc <SATA::access(unsigned long long, int, void*, bool)>
c0024ffb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024fff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025003:	83 c4 20             	add    esp,0x20
c0025006:	39 f7                	cmp    edi,esi
c0025008:	75 c7                	jne    c0024fd1 <SATA::write(unsigned long long, int, void*)+0x37>
c002500a:	01 2d c4 27 03 c0    	add    DWORD PTR ds:0xc00327c4,ebp
c0025010:	e8 8b b9 fe ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c0025015:	31 c0                	xor    eax,eax
c0025017:	83 c4 1c             	add    esp,0x1c
c002501a:	5b                   	pop    ebx
c002501b:	5e                   	pop    esi
c002501c:	5f                   	pop    edi
c002501d:	5d                   	pop    ebp
c002501e:	c3                   	ret    
c002501f:	90                   	nop

c0025020 <SATAPI::write(unsigned long long, int, void*)>:
c0025020:	b8 03 00 00 00       	mov    eax,0x3
c0025025:	c3                   	ret    

c0025026 <SATAPI::close(int, int, void*)>:
c0025026:	83 ec 0c             	sub    esp,0xc
c0025029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002502d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025033:	85 c0                	test   eax,eax
c0025035:	74 0c                	je     c0025043 <SATAPI::close(int, int, void*)+0x1d>
c0025037:	83 ec 0c             	sub    esp,0xc
c002503a:	8b 10                	mov    edx,DWORD PTR [eax]
c002503c:	50                   	push   eax
c002503d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025040:	83 c4 10             	add    esp,0x10
c0025043:	31 c0                	xor    eax,eax
c0025045:	83 c4 0c             	add    esp,0xc
c0025048:	c3                   	ret    
c0025049:	90                   	nop

c002504a <SATAPI::SATAPI()>:
c002504a:	83 ec 0c             	sub    esp,0xc
c002504d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025051:	83 ec 04             	sub    esp,0x4
c0025054:	68 00 08 00 00       	push   0x800
c0025059:	68 70 cf 02 c0       	push   0xc002cf70
c002505e:	50                   	push   eax
c002505f:	e8 c6 f6 fe ff       	call   c001472a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025064:	83 c4 10             	add    esp,0x10
c0025067:	ba 1c d0 02 c0       	mov    edx,0xc002d01c
c002506c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025070:	89 10                	mov    DWORD PTR [eax],edx
c0025072:	90                   	nop
c0025073:	83 c4 0c             	add    esp,0xc
c0025076:	c3                   	ret    
c0025077:	90                   	nop

c0025078 <SATAPI::diskRemoved()>:
c0025078:	83 ec 18             	sub    esp,0x18
c002507b:	68 7c cf 02 c0       	push   0xc002cf7c
c0025080:	e8 5a de fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0025085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025089:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025090:	83 c4 1c             	add    esp,0x1c
c0025093:	c3                   	ret    

c0025094 <SATAPI::diskInserted()>:
c0025094:	53                   	push   ebx
c0025095:	83 ec 14             	sub    esp,0x14
c0025098:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002509c:	68 93 cf 02 c0       	push   0xc002cf93
c00250a1:	e8 39 de fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c00250a6:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00250ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00250b0:	e8 dd f6 fe ff       	call   c0014792 <PhysicalDisk::startCache()>
c00250b5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00250b9:	83 c4 18             	add    esp,0x18
c00250bc:	5b                   	pop    ebx
c00250bd:	e9 c0 18 ff ff       	jmp    c0016982 <createPartitionsForDisk(PhysicalDisk*)>

c00250c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00250c2:	55                   	push   ebp
c00250c3:	57                   	push   edi
c00250c4:	56                   	push   esi
c00250c5:	53                   	push   ebx
c00250c6:	83 ec 24             	sub    esp,0x24
c00250c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00250cd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00250d1:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c00250d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250db:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00250df:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c00250e5:	8d 5f 02             	lea    ebx,[edi+0x2]
c00250e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00250ee:	c1 e3 07             	shl    ebx,0x7
c00250f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250f5:	89 f8                	mov    eax,edi
c00250f7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00250fb:	c1 e0 07             	shl    eax,0x7
c00250fe:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025102:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025106:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025110:	53                   	push   ebx
c0025111:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0025117:	e8 d6 eb ff ff       	call   c0023cf2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002511c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025120:	83 c4 10             	add    esp,0x10
c0025123:	b8 01 00 00 00       	mov    eax,0x1
c0025128:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c002512d:	0f 84 8a 01 00 00    	je     c00252bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025133:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025139:	8b 03                	mov    eax,DWORD PTR [ebx]
c002513b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025141:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025147:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002514b:	c1 e1 05             	shl    ecx,0x5
c002514e:	01 c8                	add    eax,ecx
c0025150:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025152:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025158:	81 c9 25 00 01 00    	or     ecx,0x10025
c002515e:	89 08                	mov    DWORD PTR [eax],ecx
c0025160:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025166:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002516c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025172:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025175:	52                   	push   edx
c0025176:	68 90 00 00 00       	push   0x90
c002517b:	6a 00                	push   0x0
c002517d:	53                   	push   ebx
c002517e:	e8 fd b5 fd ff       	call   c0000780 <memset>
c0025183:	83 c4 0c             	add    esp,0xc
c0025186:	8d 43 40             	lea    eax,[ebx+0x40]
c0025189:	6a 0c                	push   0xc
c002518b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002518f:	50                   	push   eax
c0025190:	e8 b7 b5 fd ff       	call   c000074c <memcpy>
c0025195:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002519b:	89 ea                	mov    edx,ebp
c002519d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00251a3:	c1 ea 18             	shr    edx,0x18
c00251a6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00251aa:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00251ad:	8d 48 ff             	lea    ecx,[eax-0x1]
c00251b0:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00251b4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00251ba:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00251c0:	25 00 00 c0 ff       	and    eax,0xffc00000
c00251c5:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00251c9:	09 c8                	or     eax,ecx
c00251cb:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00251cf:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00251d5:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00251d8:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00251df:	66 25 00 7f          	and    ax,0x7f00
c00251e3:	66 0d 27 80          	or     ax,0x8027
c00251e7:	66 89 03             	mov    WORD PTR [ebx],ax
c00251ea:	89 e8                	mov    eax,ebp
c00251ec:	c1 e8 10             	shr    eax,0x10
c00251ef:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00251f2:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00251f6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00251f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251fd:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025200:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025204:	83 c4 10             	add    esp,0x10
c0025207:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002520b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002520f:	31 c0                	xor    eax,eax
c0025211:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0025217:	80 e1 88             	and    cl,0x88
c002521a:	74 0a                	je     c0025226 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c002521c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025221:	74 0a                	je     c002522d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025223:	40                   	inc    eax
c0025224:	eb eb                	jmp    c0025211 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0025226:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002522b:	75 0f                	jne    c002523c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c002522d:	83 ec 0c             	sub    esp,0xc
c0025230:	68 19 cf 02 c0       	push   0xc002cf19
c0025235:	e8 d1 53 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c002523a:	eb 3a                	jmp    c0025276 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c002523c:	b8 01 00 00 00       	mov    eax,0x1
c0025241:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025245:	c1 e7 07             	shl    edi,0x7
c0025248:	d3 e0                	shl    eax,cl
c002524a:	03 3c 24             	add    edi,DWORD PTR [esp]
c002524d:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025253:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025259:	85 d0                	test   eax,edx
c002525b:	74 23                	je     c0025280 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c002525d:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025263:	0f ba e2 1e          	bt     edx,0x1e
c0025267:	73 ea                	jae    c0025253 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025269:	83 ec 0c             	sub    esp,0xc
c002526c:	68 ab cf 02 c0       	push   0xc002cfab
c0025271:	e8 69 dc fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0025276:	83 c4 10             	add    esp,0x10
c0025279:	b8 01 00 00 00       	mov    eax,0x1
c002527e:	eb 3d                	jmp    c00252bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025280:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025286:	0f ba e0 1e          	bt     eax,0x1e
c002528a:	73 0a                	jae    c0025296 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c002528c:	83 ec 0c             	sub    esp,0xc
c002528f:	68 be cf 02 c0       	push   0xc002cfbe
c0025294:	eb db                	jmp    c0025271 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025296:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002529b:	74 1e                	je     c00252bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002529d:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00252a2:	74 17                	je     c00252bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00252a4:	50                   	push   eax
c00252a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00252a9:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00252af:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00252b3:	e8 94 b4 fd ff       	call   c000074c <memcpy>
c00252b8:	83 c4 10             	add    esp,0x10
c00252bb:	31 c0                	xor    eax,eax
c00252bd:	83 c4 1c             	add    esp,0x1c
c00252c0:	5b                   	pop    ebx
c00252c1:	5e                   	pop    esi
c00252c2:	5f                   	pop    edi
c00252c3:	5d                   	pop    ebp
c00252c4:	c3                   	ret    
c00252c5:	90                   	nop

c00252c6 <SATAPI::eject()>:
c00252c6:	57                   	push   edi
c00252c7:	b9 03 00 00 00       	mov    ecx,0x3
c00252cc:	53                   	push   ebx
c00252cd:	83 ec 14             	sub    esp,0x14
c00252d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00252d4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00252d8:	fc                   	cld    
c00252d9:	31 c0                	xor    eax,eax
c00252db:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00252dd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00252e2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00252e7:	50                   	push   eax
c00252e8:	6a 00                	push   0x0
c00252ea:	6a 00                	push   0x0
c00252ec:	6a 00                	push   0x0
c00252ee:	6a 00                	push   0x0
c00252f0:	6a 02                	push   0x2
c00252f2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252f6:	50                   	push   eax
c00252f7:	53                   	push   ebx
c00252f8:	e8 c5 fd ff ff       	call   c00250c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252fd:	83 c4 14             	add    esp,0x14
c0025300:	53                   	push   ebx
c0025301:	e8 72 fd ff ff       	call   c0025078 <SATAPI::diskRemoved()>
c0025306:	83 c4 24             	add    esp,0x24
c0025309:	31 c0                	xor    eax,eax
c002530b:	5b                   	pop    ebx
c002530c:	5f                   	pop    edi
c002530d:	c3                   	ret    

c002530e <SATAPI::detectMedia()>:
c002530e:	56                   	push   esi
c002530f:	53                   	push   ebx
c0025310:	83 ec 28             	sub    esp,0x28
c0025313:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025317:	6a 0c                	push   0xc
c0025319:	6a 00                	push   0x0
c002531b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002531f:	56                   	push   esi
c0025320:	e8 5b b4 fd ff       	call   c0000780 <memset>
c0025325:	83 c4 0c             	add    esp,0xc
c0025328:	6a 00                	push   0x0
c002532a:	6a 00                	push   0x0
c002532c:	6a 00                	push   0x0
c002532e:	6a 00                	push   0x0
c0025330:	6a 00                	push   0x0
c0025332:	56                   	push   esi
c0025333:	53                   	push   ebx
c0025334:	e8 89 fd ff ff       	call   c00250c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025339:	83 c4 1c             	add    esp,0x1c
c002533c:	6a 0c                	push   0xc
c002533e:	6a 00                	push   0x0
c0025340:	56                   	push   esi
c0025341:	e8 3a b4 fd ff       	call   c0000780 <memset>
c0025346:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002534b:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025350:	83 c4 0c             	add    esp,0xc
c0025353:	6a 01                	push   0x1
c0025355:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025359:	50                   	push   eax
c002535a:	6a 00                	push   0x0
c002535c:	6a 00                	push   0x0
c002535e:	6a 12                	push   0x12
c0025360:	56                   	push   esi
c0025361:	53                   	push   ebx
c0025362:	e8 5b fd ff ff       	call   c00250c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025367:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002536b:	83 c4 20             	add    esp,0x20
c002536e:	83 e0 7f             	and    eax,0x7f
c0025371:	3c 70                	cmp    al,0x70
c0025373:	74 15                	je     c002538a <SATAPI::detectMedia()+0x7c>
c0025375:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002537c:	75 0c                	jne    c002538a <SATAPI::detectMedia()+0x7c>
c002537e:	83 ec 0c             	sub    esp,0xc
c0025381:	53                   	push   ebx
c0025382:	e8 0d fd ff ff       	call   c0025094 <SATAPI::diskInserted()>
c0025387:	83 c4 10             	add    esp,0x10
c002538a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002538e:	83 e0 0f             	and    eax,0xf
c0025391:	3c 02                	cmp    al,0x2
c0025393:	75 1b                	jne    c00253b0 <SATAPI::detectMedia()+0xa2>
c0025395:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002539a:	75 2d                	jne    c00253c9 <SATAPI::detectMedia()+0xbb>
c002539c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253a3:	74 24                	je     c00253c9 <SATAPI::detectMedia()+0xbb>
c00253a5:	83 ec 0c             	sub    esp,0xc
c00253a8:	53                   	push   ebx
c00253a9:	e8 ca fc ff ff       	call   c0025078 <SATAPI::diskRemoved()>
c00253ae:	eb 16                	jmp    c00253c6 <SATAPI::detectMedia()+0xb8>
c00253b0:	84 c0                	test   al,al
c00253b2:	75 15                	jne    c00253c9 <SATAPI::detectMedia()+0xbb>
c00253b4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253bb:	75 0c                	jne    c00253c9 <SATAPI::detectMedia()+0xbb>
c00253bd:	83 ec 0c             	sub    esp,0xc
c00253c0:	53                   	push   ebx
c00253c1:	e8 ce fc ff ff       	call   c0025094 <SATAPI::diskInserted()>
c00253c6:	83 c4 10             	add    esp,0x10
c00253c9:	83 c4 24             	add    esp,0x24
c00253cc:	5b                   	pop    ebx
c00253cd:	5e                   	pop    esi
c00253ce:	c3                   	ret    
c00253cf:	90                   	nop

c00253d0 <SATAPI::open(int, int, void*)>:
c00253d0:	56                   	push   esi
c00253d1:	53                   	push   ebx
c00253d2:	50                   	push   eax
c00253d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00253db:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253e5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253eb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253f9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025403:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025409:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025410:	e8 d8 aa fe ff       	call   c000feed <Phys::allocatePage()>
c0025415:	89 c6                	mov    esi,eax
c0025417:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002541d:	81 c6 00 10 00 00    	add    esi,0x1000
c0025423:	e8 c5 aa fe ff       	call   c000feed <Phys::allocatePage()>
c0025428:	39 c6                	cmp    esi,eax
c002542a:	74 10                	je     c002543c <SATAPI::open(int, int, void*)+0x6c>
c002542c:	83 ec 0c             	sub    esp,0xc
c002542f:	68 d3 cf 02 c0       	push   0xc002cfd3
c0025434:	e8 d2 51 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0025439:	83 c4 10             	add    esp,0x10
c002543c:	83 ec 0c             	sub    esp,0xc
c002543f:	6a 02                	push   0x2
c0025441:	e8 05 c7 fe ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0025446:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002544c:	e8 95 c9 fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0025451:	6a 03                	push   0x3
c0025453:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025459:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002545f:	50                   	push   eax
c0025460:	e8 d3 ce fe ff       	call   c0012338 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025465:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002546c:	83 c4 14             	add    esp,0x14
c002546f:	53                   	push   ebx
c0025470:	e8 99 fe ff ff       	call   c002530e <SATAPI::detectMedia()>
c0025475:	83 c4 14             	add    esp,0x14
c0025478:	31 c0                	xor    eax,eax
c002547a:	5b                   	pop    ebx
c002547b:	5e                   	pop    esi
c002547c:	c3                   	ret    
c002547d:	90                   	nop

c002547e <SATAPI::read(unsigned long long, int, void*)>:
c002547e:	55                   	push   ebp
c002547f:	57                   	push   edi
c0025480:	56                   	push   esi
c0025481:	53                   	push   ebx
c0025482:	83 ec 1c             	sub    esp,0x1c
c0025485:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025489:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002548d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025491:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025498:	74 19                	je     c00254b3 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002549a:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002549f:	7e 2e                	jle    c00254cf <SATAPI::read(unsigned long long, int, void*)+0x51>
c00254a1:	83 ec 0c             	sub    esp,0xc
c00254a4:	68 e9 cf 02 c0       	push   0xc002cfe9
c00254a9:	e8 5d 51 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c00254ae:	83 c4 10             	add    esp,0x10
c00254b1:	eb 1c                	jmp    c00254cf <SATAPI::read(unsigned long long, int, void*)+0x51>
c00254b3:	83 ec 0c             	sub    esp,0xc
c00254b6:	55                   	push   ebp
c00254b7:	e8 52 fe ff ff       	call   c002530e <SATAPI::detectMedia()>
c00254bc:	83 c4 10             	add    esp,0x10
c00254bf:	b8 02 00 00 00       	mov    eax,0x2
c00254c4:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00254cb:	75 cd                	jne    c002549a <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00254cd:	eb 49                	jmp    c0025518 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00254cf:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00254d3:	b9 03 00 00 00       	mov    ecx,0x3
c00254d8:	fc                   	cld    
c00254d9:	31 c0                	xor    eax,eax
c00254db:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00254dd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00254e2:	89 d8                	mov    eax,ebx
c00254e4:	86 e0                	xchg   al,ah
c00254e6:	c1 c0 10             	rol    eax,0x10
c00254e9:	86 e0                	xchg   al,ah
c00254eb:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00254ef:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00254f3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00254f7:	50                   	push   eax
c00254f8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00254fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025500:	56                   	push   esi
c0025501:	53                   	push   ebx
c0025502:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025506:	c1 e0 0b             	shl    eax,0xb
c0025509:	50                   	push   eax
c002550a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002550e:	50                   	push   eax
c002550f:	55                   	push   ebp
c0025510:	e8 ad fb ff ff       	call   c00250c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025515:	83 c4 20             	add    esp,0x20
c0025518:	83 c4 1c             	add    esp,0x1c
c002551b:	5b                   	pop    ebx
c002551c:	5e                   	pop    esi
c002551d:	5f                   	pop    edi
c002551e:	5d                   	pop    ebp
c002551f:	c3                   	ret    

c0025520 <AVX::open(int, int, void*)>:
c0025520:	83 ec 0c             	sub    esp,0xc
c0025523:	e8 40 11 00 00       	call   c0026668 <avxInit>
c0025528:	b8 00 00 00 00       	mov    eax,0x0
c002552d:	83 c4 0c             	add    esp,0xc
c0025530:	c3                   	ret    
c0025531:	90                   	nop

c0025532 <AVX::close(int, int, void*)>:
c0025532:	83 ec 0c             	sub    esp,0xc
c0025535:	e8 2f 11 00 00       	call   c0026669 <avxClose>
c002553a:	b8 00 00 00 00       	mov    eax,0x0
c002553f:	83 c4 0c             	add    esp,0xc
c0025542:	c3                   	ret    
c0025543:	90                   	nop

c0025544 <AVX::available()>:
c0025544:	83 ec 0c             	sub    esp,0xc
c0025547:	e8 14 11 00 00       	call   c0026660 <avxDetect>
c002554c:	85 c0                	test   eax,eax
c002554e:	0f 95 c0             	setne  al
c0025551:	83 c4 0c             	add    esp,0xc
c0025554:	c3                   	ret    
c0025555:	90                   	nop

c0025556 <AVX::save(void*)>:
c0025556:	83 ec 0c             	sub    esp,0xc
c0025559:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002555d:	83 ec 0c             	sub    esp,0xc
c0025560:	50                   	push   eax
c0025561:	e8 00 11 00 00       	call   c0026666 <avxSave>
c0025566:	83 c4 10             	add    esp,0x10
c0025569:	90                   	nop
c002556a:	83 c4 0c             	add    esp,0xc
c002556d:	c3                   	ret    

c002556e <AVX::load(void*)>:
c002556e:	83 ec 0c             	sub    esp,0xc
c0025571:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025575:	83 ec 0c             	sub    esp,0xc
c0025578:	50                   	push   eax
c0025579:	e8 e9 10 00 00       	call   c0026667 <avxLoad>
c002557e:	83 c4 10             	add    esp,0x10
c0025581:	90                   	nop
c0025582:	83 c4 0c             	add    esp,0xc
c0025585:	c3                   	ret    

c0025586 <AVX::AVX()>:
c0025586:	83 ec 0c             	sub    esp,0xc
c0025589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002558d:	83 ec 08             	sub    esp,0x8
c0025590:	68 4c d0 02 c0       	push   0xc002d04c
c0025595:	50                   	push   eax
c0025596:	e8 6d f2 fe ff       	call   c0014808 <FPU::FPU(char const*)>
c002559b:	83 c4 10             	add    esp,0x10
c002559e:	ba 5c d0 02 c0       	mov    edx,0xc002d05c
c00255a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255a7:	89 10                	mov    DWORD PTR [eax],edx
c00255a9:	90                   	nop
c00255aa:	83 c4 0c             	add    esp,0xc
c00255ad:	c3                   	ret    

c00255ae <MMX::available()>:
c00255ae:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00255b3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00255b9:	83 e0 20             	and    eax,0x20
c00255bc:	84 c0                	test   al,al
c00255be:	0f 95 c0             	setne  al
c00255c1:	c3                   	ret    

c00255c2 <MMX::open(int, int, void*)>:
c00255c2:	83 ec 0c             	sub    esp,0xc
c00255c5:	e8 28 11 00 00       	call   c00266f2 <x87Init>
c00255ca:	b8 00 00 00 00       	mov    eax,0x0
c00255cf:	83 c4 0c             	add    esp,0xc
c00255d2:	c3                   	ret    
c00255d3:	90                   	nop

c00255d4 <MMX::close(int, int, void*)>:
c00255d4:	83 ec 0c             	sub    esp,0xc
c00255d7:	e8 30 11 00 00       	call   c002670c <x87Close>
c00255dc:	b8 00 00 00 00       	mov    eax,0x0
c00255e1:	83 c4 0c             	add    esp,0xc
c00255e4:	c3                   	ret    
c00255e5:	90                   	nop

c00255e6 <MMX::save(void*)>:
c00255e6:	83 ec 0c             	sub    esp,0xc
c00255e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255ed:	83 ec 0c             	sub    esp,0xc
c00255f0:	50                   	push   eax
c00255f1:	e8 eb 10 00 00       	call   c00266e1 <x87Save>
c00255f6:	83 c4 10             	add    esp,0x10
c00255f9:	90                   	nop
c00255fa:	83 c4 0c             	add    esp,0xc
c00255fd:	c3                   	ret    

c00255fe <MMX::load(void*)>:
c00255fe:	83 ec 0c             	sub    esp,0xc
c0025601:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025605:	83 ec 0c             	sub    esp,0xc
c0025608:	50                   	push   eax
c0025609:	e8 dc 10 00 00       	call   c00266ea <x87Load>
c002560e:	83 c4 10             	add    esp,0x10
c0025611:	90                   	nop
c0025612:	83 c4 0c             	add    esp,0xc
c0025615:	c3                   	ret    

c0025616 <MMX::MMX()>:
c0025616:	83 ec 0c             	sub    esp,0xc
c0025619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002561d:	83 ec 08             	sub    esp,0x8
c0025620:	68 8c d0 02 c0       	push   0xc002d08c
c0025625:	50                   	push   eax
c0025626:	e8 dd f1 fe ff       	call   c0014808 <FPU::FPU(char const*)>
c002562b:	83 c4 10             	add    esp,0x10
c002562e:	ba 9c d0 02 c0       	mov    edx,0xc002d09c
c0025633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025637:	89 10                	mov    DWORD PTR [eax],edx
c0025639:	90                   	nop
c002563a:	83 c4 0c             	add    esp,0xc
c002563d:	c3                   	ret    

c002563e <SSE::open(int, int, void*)>:
c002563e:	83 ec 0c             	sub    esp,0xc
c0025641:	e8 5e 10 00 00       	call   c00266a4 <sseInit>
c0025646:	b8 00 00 00 00       	mov    eax,0x0
c002564b:	83 c4 0c             	add    esp,0xc
c002564e:	c3                   	ret    
c002564f:	90                   	nop

c0025650 <SSE::close(int, int, void*)>:
c0025650:	83 ec 0c             	sub    esp,0xc
c0025653:	e8 5c 10 00 00       	call   c00266b4 <sseClose>
c0025658:	b8 00 00 00 00       	mov    eax,0x0
c002565d:	83 c4 0c             	add    esp,0xc
c0025660:	c3                   	ret    
c0025661:	90                   	nop

c0025662 <SSE::available()>:
c0025662:	83 ec 1c             	sub    esp,0x1c
c0025665:	e8 16 10 00 00       	call   c0026680 <absolutelyNoChanceInHell>
c002566a:	85 c0                	test   eax,eax
c002566c:	0f 95 c0             	setne  al
c002566f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025673:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025677:	83 c4 1c             	add    esp,0x1c
c002567a:	c3                   	ret    
c002567b:	90                   	nop

c002567c <SSE::save(void*)>:
c002567c:	83 ec 0c             	sub    esp,0xc
c002567f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025683:	83 ec 0c             	sub    esp,0xc
c0025686:	50                   	push   eax
c0025687:	e8 0c 10 00 00       	call   c0026698 <sseSave>
c002568c:	83 c4 10             	add    esp,0x10
c002568f:	90                   	nop
c0025690:	83 c4 0c             	add    esp,0xc
c0025693:	c3                   	ret    

c0025694 <SSE::load(void*)>:
c0025694:	83 ec 0c             	sub    esp,0xc
c0025697:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002569b:	83 ec 0c             	sub    esp,0xc
c002569e:	50                   	push   eax
c002569f:	e8 fa 0f 00 00       	call   c002669e <sseLoad>
c00256a4:	83 c4 10             	add    esp,0x10
c00256a7:	90                   	nop
c00256a8:	83 c4 0c             	add    esp,0xc
c00256ab:	c3                   	ret    

c00256ac <SSE::SSE()>:
c00256ac:	83 ec 0c             	sub    esp,0xc
c00256af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256b3:	83 ec 08             	sub    esp,0x8
c00256b6:	68 cc d0 02 c0       	push   0xc002d0cc
c00256bb:	50                   	push   eax
c00256bc:	e8 47 f1 fe ff       	call   c0014808 <FPU::FPU(char const*)>
c00256c1:	83 c4 10             	add    esp,0x10
c00256c4:	ba dc d0 02 c0       	mov    edx,0xc002d0dc
c00256c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256cd:	89 10                	mov    DWORD PTR [eax],edx
c00256cf:	90                   	nop
c00256d0:	83 c4 0c             	add    esp,0xc
c00256d3:	c3                   	ret    

c00256d4 <x87::open(int, int, void*)>:
c00256d4:	83 ec 0c             	sub    esp,0xc
c00256d7:	e8 16 10 00 00       	call   c00266f2 <x87Init>
c00256dc:	b8 00 00 00 00       	mov    eax,0x0
c00256e1:	83 c4 0c             	add    esp,0xc
c00256e4:	c3                   	ret    
c00256e5:	90                   	nop

c00256e6 <x87::close(int, int, void*)>:
c00256e6:	83 ec 0c             	sub    esp,0xc
c00256e9:	e8 1e 10 00 00       	call   c002670c <x87Close>
c00256ee:	b8 00 00 00 00       	mov    eax,0x0
c00256f3:	83 c4 0c             	add    esp,0xc
c00256f6:	c3                   	ret    
c00256f7:	90                   	nop

c00256f8 <x87::available()>:
c00256f8:	83 ec 0c             	sub    esp,0xc
c00256fb:	e8 c6 0f 00 00       	call   c00266c6 <x87Detect>
c0025700:	85 c0                	test   eax,eax
c0025702:	0f 95 c0             	setne  al
c0025705:	83 c4 0c             	add    esp,0xc
c0025708:	c3                   	ret    
c0025709:	90                   	nop

c002570a <x87::save(void*)>:
c002570a:	83 ec 0c             	sub    esp,0xc
c002570d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025711:	83 ec 0c             	sub    esp,0xc
c0025714:	50                   	push   eax
c0025715:	e8 c7 0f 00 00       	call   c00266e1 <x87Save>
c002571a:	83 c4 10             	add    esp,0x10
c002571d:	90                   	nop
c002571e:	83 c4 0c             	add    esp,0xc
c0025721:	c3                   	ret    

c0025722 <x87::load(void*)>:
c0025722:	83 ec 0c             	sub    esp,0xc
c0025725:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025729:	83 ec 0c             	sub    esp,0xc
c002572c:	50                   	push   eax
c002572d:	e8 b8 0f 00 00       	call   c00266ea <x87Load>
c0025732:	83 c4 10             	add    esp,0x10
c0025735:	90                   	nop
c0025736:	83 c4 0c             	add    esp,0xc
c0025739:	c3                   	ret    

c002573a <x87::x87()>:
c002573a:	83 ec 0c             	sub    esp,0xc
c002573d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025741:	83 ec 08             	sub    esp,0x8
c0025744:	68 0c d1 02 c0       	push   0xc002d10c
c0025749:	50                   	push   eax
c002574a:	e8 b9 f0 fe ff       	call   c0014808 <FPU::FPU(char const*)>
c002574f:	83 c4 10             	add    esp,0x10
c0025752:	ba 1c d1 02 c0       	mov    edx,0xc002d11c
c0025757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002575b:	89 10                	mov    DWORD PTR [eax],edx
c002575d:	90                   	nop
c002575e:	83 c4 0c             	add    esp,0xc
c0025761:	c3                   	ret    

c0025762 <APIC::disable()>:
c0025762:	90                   	nop
c0025763:	c3                   	ret    

c0025764 <APIC::close(int, int, void*)>:
c0025764:	55                   	push   ebp
c0025765:	89 e5                	mov    ebp,esp
c0025767:	83 ec 08             	sub    esp,0x8
c002576a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002576d:	8b 00                	mov    eax,DWORD PTR [eax]
c002576f:	83 c0 3c             	add    eax,0x3c
c0025772:	8b 00                	mov    eax,DWORD PTR [eax]
c0025774:	83 ec 0c             	sub    esp,0xc
c0025777:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002577a:	ff d0                	call   eax
c002577c:	83 c4 10             	add    esp,0x10
c002577f:	b8 00 00 00 00       	mov    eax,0x0
c0025784:	c9                   	leave  
c0025785:	c3                   	ret    

c0025786 <IOAPIC::close(int, int, void*)>:
c0025786:	b8 00 00 00 00       	mov    eax,0x0
c002578b:	c3                   	ret    

c002578c <APIC::io_wait()>:
c002578c:	eb 00                	jmp    c002578e <APIC::io_wait()+0x2>
c002578e:	eb 00                	jmp    c0025790 <APIC::io_wait()+0x4>
c0025790:	90                   	nop
c0025791:	c3                   	ret    

c0025792 <APIC::getBase()>:
c0025792:	55                   	push   ebp
c0025793:	89 e5                	mov    ebp,esp
c0025795:	83 ec 18             	sub    esp,0x18
c0025798:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c002579d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00257a3:	83 e0 08             	and    eax,0x8
c00257a6:	84 c0                	test   al,al
c00257a8:	75 07                	jne    c00257b1 <APIC::getBase()+0x1f>
c00257aa:	b8 00 00 00 00       	mov    eax,0x0
c00257af:	eb 21                	jmp    c00257d2 <APIC::getBase()+0x40>
c00257b1:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00257b6:	83 ec 08             	sub    esp,0x8
c00257b9:	6a 1b                	push   0x1b
c00257bb:	50                   	push   eax
c00257bc:	e8 2f 96 fe ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c00257c1:	83 c4 10             	add    esp,0x10
c00257c4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00257c7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00257ca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00257d2:	c9                   	leave  
c00257d3:	c3                   	ret    

c00257d4 <APIC::eoi(unsigned char)>:
c00257d4:	55                   	push   ebp
c00257d5:	89 e5                	mov    ebp,esp
c00257d7:	83 ec 28             	sub    esp,0x28
c00257da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257dd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00257e0:	83 ec 0c             	sub    esp,0xc
c00257e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257e6:	e8 a7 ff ff ff       	call   c0025792 <APIC::getBase()>
c00257eb:	83 c4 10             	add    esp,0x10
c00257ee:	05 b0 00 00 00       	add    eax,0xb0
c00257f3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00257f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00257f9:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00257ff:	90                   	nop
c0025800:	c9                   	leave  
c0025801:	c3                   	ret    

c0025802 <APIC::open(int, int, void*)>:
c0025802:	55                   	push   ebp
c0025803:	89 e5                	mov    ebp,esp
c0025805:	57                   	push   edi
c0025806:	56                   	push   esi
c0025807:	53                   	push   ebx
c0025808:	83 ec 2c             	sub    esp,0x2c
c002580b:	83 ec 0c             	sub    esp,0xc
c002580e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025811:	e8 7c ff ff ff       	call   c0025792 <APIC::getBase()>
c0025816:	83 c4 10             	add    esp,0x10
c0025819:	89 c2                	mov    edx,eax
c002581b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002581e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025824:	0f b6 f8             	movzx  edi,al
c0025827:	89 d0                	mov    eax,edx
c0025829:	ba 00 00 00 00       	mov    edx,0x0
c002582e:	89 c1                	mov    ecx,eax
c0025830:	80 e5 ff             	and    ch,0xff
c0025833:	89 cb                	mov    ebx,ecx
c0025835:	0f b6 f2             	movzx  esi,dl
c0025838:	89 d8                	mov    eax,ebx
c002583a:	89 f2                	mov    edx,esi
c002583c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002583f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025842:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025846:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002584a:	83 e0 00             	and    eax,0x0
c002584d:	09 d0                	or     eax,edx
c002584f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025856:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002585c:	8d 50 01             	lea    edx,[eax+0x1]
c002585f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025862:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025868:	0f b6 d0             	movzx  edx,al
c002586b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002586e:	83 c2 08             	add    edx,0x8
c0025871:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025875:	0f b6 c9             	movzx  ecx,cl
c0025878:	81 c9 00 00 01 00    	or     ecx,0x10000
c002587e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025882:	83 ec 0c             	sub    esp,0xc
c0025885:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025888:	e8 05 ff ff ff       	call   c0025792 <APIC::getBase()>
c002588d:	83 c4 10             	add    esp,0x10
c0025890:	05 f0 00 00 00       	add    eax,0xf0
c0025895:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025898:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002589b:	8b 00                	mov    eax,DWORD PTR [eax]
c002589d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00258a0:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00258a7:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00258ae:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258b1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00258b4:	89 10                	mov    DWORD PTR [eax],edx
c00258b6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00258bd:	a1 50 0d 03 c0       	mov    eax,ds:0xc0030d50
c00258c2:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00258c5:	7d 7c                	jge    c0025943 <APIC::open(int, int, void*)+0x141>
c00258c7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258ca:	8b 04 85 60 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2a0]
c00258d1:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00258d4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258d7:	8b 04 85 60 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2a0]
c00258de:	c1 e8 08             	shr    eax,0x8
c00258e1:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00258e5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258e8:	8b 04 85 60 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2a0]
c00258ef:	c1 e8 18             	shr    eax,0x18
c00258f2:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00258f5:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00258f9:	75 40                	jne    c002593b <APIC::open(int, int, void*)+0x139>
c00258fb:	83 ec 0c             	sub    esp,0xc
c00258fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025901:	e8 8c fe ff ff       	call   c0025792 <APIC::getBase()>
c0025906:	83 c4 10             	add    esp,0x10
c0025909:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002590d:	75 07                	jne    c0025916 <APIC::open(int, int, void*)+0x114>
c002590f:	ba 60 03 00 00       	mov    edx,0x360
c0025914:	eb 05                	jmp    c002591b <APIC::open(int, int, void*)+0x119>
c0025916:	ba 50 03 00 00       	mov    edx,0x350
c002591b:	01 d0                	add    eax,edx
c002591d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025920:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025923:	8b 00                	mov    eax,DWORD PTR [eax]
c0025925:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025928:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002592f:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025933:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025936:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025939:	89 10                	mov    DWORD PTR [eax],edx
c002593b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002593e:	e9 7a ff ff ff       	jmp    c00258bd <APIC::open(int, int, void*)+0xbb>
c0025943:	b8 00 00 00 00       	mov    eax,0x0
c0025948:	8d 65 f4             	lea    esp,[ebp-0xc]
c002594b:	5b                   	pop    ebx
c002594c:	5e                   	pop    esi
c002594d:	5f                   	pop    edi
c002594e:	5d                   	pop    ebp
c002594f:	c3                   	ret    

c0025950 <IOAPIC::IOAPIC()>:
c0025950:	83 ec 0c             	sub    esp,0xc
c0025953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025957:	83 ec 08             	sub    esp,0x8
c002595a:	68 4c d1 02 c0       	push   0xc002d14c
c002595f:	50                   	push   eax
c0025960:	e8 91 eb fe ff       	call   c00144f6 <Device::Device(char const*)>
c0025965:	83 c4 10             	add    esp,0x10
c0025968:	ba 74 d2 02 c0       	mov    edx,0xc002d274
c002596d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025971:	89 10                	mov    DWORD PTR [eax],edx
c0025973:	90                   	nop
c0025974:	83 c4 0c             	add    esp,0xc
c0025977:	c3                   	ret    

c0025978 <APIC::APIC()>:
c0025978:	53                   	push   ebx
c0025979:	83 ec 18             	sub    esp,0x18
c002597c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025980:	83 ec 08             	sub    esp,0x8
c0025983:	68 54 d1 02 c0       	push   0xc002d154
c0025988:	50                   	push   eax
c0025989:	e8 d4 f2 fe ff       	call   c0014c62 <InterruptController::InterruptController(char const*)>
c002598e:	83 c4 10             	add    esp,0x10
c0025991:	ba 2c d2 02 c0       	mov    edx,0xc002d22c
c0025996:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002599a:	89 10                	mov    DWORD PTR [eax],edx
c002599c:	a0 20 28 03 c0       	mov    al,ds:0xc0032820
c00259a1:	83 f0 01             	xor    eax,0x1
c00259a4:	84 c0                	test   al,al
c00259a6:	0f 84 a1 00 00 00    	je     c0025a4d <APIC::APIC()+0xd5>
c00259ac:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00259b1:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c00259b6:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00259ba:	0f 83 86 00 00 00    	jae    c0025a46 <APIC::APIC()+0xce>
c00259c0:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00259c8:	83 ec 0c             	sub    esp,0xc
c00259cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259cf:	e8 77 9e fe ff       	call   c000f84b <malloc>
c00259d4:	83 c4 10             	add    esp,0x10
c00259d7:	89 c3                	mov    ebx,eax
c00259d9:	83 ec 0c             	sub    esp,0xc
c00259dc:	53                   	push   ebx
c00259dd:	e8 6e ff ff ff       	call   c0025950 <IOAPIC::IOAPIC()>
c00259e2:	83 c4 10             	add    esp,0x10
c00259e5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00259e9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00259ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259f2:	89 14 85 00 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd800],edx
c00259f9:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c00259fe:	40                   	inc    eax
c00259ff:	a3 e0 27 03 c0       	mov    ds:0xc00327e0,eax
c0025a04:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0025a09:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025a0f:	83 ec 08             	sub    esp,0x8
c0025a12:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a16:	50                   	push   eax
c0025a17:	e8 ea e8 fe ff       	call   c0014306 <Device::addChild(Device*)>
c0025a1c:	83 c4 10             	add    esp,0x10
c0025a1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025a23:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a25:	83 c0 08             	add    eax,0x8
c0025a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a2a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025a2f:	6a 00                	push   0x0
c0025a31:	6a 00                	push   0x0
c0025a33:	52                   	push   edx
c0025a34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025a38:	ff d0                	call   eax
c0025a3a:	83 c4 10             	add    esp,0x10
c0025a3d:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025a41:	e9 6b ff ff ff       	jmp    c00259b1 <APIC::APIC()+0x39>
c0025a46:	c6 05 20 28 03 c0 01 	mov    BYTE PTR ds:0xc0032820,0x1
c0025a4d:	90                   	nop
c0025a4e:	83 c4 18             	add    esp,0x18
c0025a51:	5b                   	pop    ebx
c0025a52:	c3                   	ret    
c0025a53:	90                   	nop

c0025a54 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a54:	55                   	push   ebp
c0025a55:	89 e5                	mov    ebp,esp
c0025a57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a60:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a63:	72 1d                	jb     c0025a82 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a68:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a71:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a77:	01 d0                	add    eax,edx
c0025a79:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a7c:	73 04                	jae    c0025a82 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a7e:	b0 01                	mov    al,0x1
c0025a80:	eb 02                	jmp    c0025a84 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a82:	b0 00                	mov    al,0x0
c0025a84:	5d                   	pop    ebp
c0025a85:	c3                   	ret    

c0025a86 <IOAPIC::read(int)>:
c0025a86:	55                   	push   ebp
c0025a87:	89 e5                	mov    ebp,esp
c0025a89:	83 ec 10             	sub    esp,0x10
c0025a8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a8f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a95:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a98:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a9b:	0f b6 d0             	movzx  edx,al
c0025a9e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025aa1:	89 10                	mov    DWORD PTR [eax],edx
c0025aa3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025aa6:	83 c0 10             	add    eax,0x10
c0025aa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aab:	c9                   	leave  
c0025aac:	c3                   	ret    
c0025aad:	90                   	nop

c0025aae <IOAPIC::open(int, int, void*)>:
c0025aae:	55                   	push   ebp
c0025aaf:	89 e5                	mov    ebp,esp
c0025ab1:	57                   	push   edi
c0025ab2:	56                   	push   esi
c0025ab3:	53                   	push   ebx
c0025ab4:	83 ec 0c             	sub    esp,0xc
c0025ab7:	83 ec 0c             	sub    esp,0xc
c0025aba:	68 7f d1 02 c0       	push   0xc002d17f
c0025abf:	e8 1b d4 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0025ac4:	83 c4 10             	add    esp,0x10
c0025ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025acd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ad6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025adc:	8b 14 85 40 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf1c0]
c0025ae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025aec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025af5:	8b 14 85 c0 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf140]
c0025afc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aff:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b08:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b11:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b17:	0f b6 f8             	movzx  edi,al
c0025b1a:	89 d0                	mov    eax,edx
c0025b1c:	ba 00 00 00 00       	mov    edx,0x0
c0025b21:	89 c1                	mov    ecx,eax
c0025b23:	80 e5 ff             	and    ch,0xff
c0025b26:	89 cb                	mov    ebx,ecx
c0025b28:	0f b6 f2             	movzx  esi,dl
c0025b2b:	89 d8                	mov    eax,ebx
c0025b2d:	89 f2                	mov    edx,esi
c0025b2f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b32:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b35:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b39:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b3d:	83 e0 00             	and    eax,0x0
c0025b40:	09 d0                	or     eax,edx
c0025b42:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b49:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b4f:	8d 50 01             	lea    edx,[eax+0x1]
c0025b52:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b55:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b5b:	0f b6 d0             	movzx  edx,al
c0025b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b61:	83 c2 08             	add    edx,0x8
c0025b64:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b68:	0f b6 c9             	movzx  ecx,cl
c0025b6b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b71:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b75:	83 ec 08             	sub    esp,0x8
c0025b78:	6a 01                	push   0x1
c0025b7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b7d:	e8 04 ff ff ff       	call   c0025a86 <IOAPIC::read(int)>
c0025b82:	83 c4 10             	add    esp,0x10
c0025b85:	c1 f8 10             	sar    eax,0x10
c0025b88:	0f b6 c0             	movzx  eax,al
c0025b8b:	8d 50 01             	lea    edx,[eax+0x1]
c0025b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b91:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b97:	b8 00 00 00 00       	mov    eax,0x0
c0025b9c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b9f:	5b                   	pop    ebx
c0025ba0:	5e                   	pop    esi
c0025ba1:	5f                   	pop    edi
c0025ba2:	5d                   	pop    ebp
c0025ba3:	c3                   	ret    

c0025ba4 <IOAPIC::write(int, int)>:
c0025ba4:	55                   	push   ebp
c0025ba5:	89 e5                	mov    ebp,esp
c0025ba7:	83 ec 10             	sub    esp,0x10
c0025baa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025bb3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025bb6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bb9:	0f b6 d0             	movzx  edx,al
c0025bbc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bbf:	89 10                	mov    DWORD PTR [eax],edx
c0025bc1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bc4:	8d 50 10             	lea    edx,[eax+0x10]
c0025bc7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025bca:	89 02                	mov    DWORD PTR [edx],eax
c0025bcc:	90                   	nop
c0025bcd:	c9                   	leave  
c0025bce:	c3                   	ret    
c0025bcf:	90                   	nop

c0025bd0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025bd0:	55                   	push   ebp
c0025bd1:	89 e5                	mov    ebp,esp
c0025bd3:	53                   	push   ebx
c0025bd4:	83 ec 2c             	sub    esp,0x2c
c0025bd7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bda:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025bdd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025be0:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025be3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025be6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025be9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025bec:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025bef:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025bf2:	88 d8                	mov    al,bl
c0025bf4:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025bf7:	88 c8                	mov    al,cl
c0025bf9:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025bfc:	88 d0                	mov    al,dl
c0025bfe:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025c01:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c05:	83 c0 08             	add    eax,0x8
c0025c08:	01 c0                	add    eax,eax
c0025c0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025c0d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c11:	83 c0 08             	add    eax,0x8
c0025c14:	01 c0                	add    eax,eax
c0025c16:	40                   	inc    eax
c0025c17:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025c1a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c1d:	50                   	push   eax
c0025c1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c21:	e8 60 fe ff ff       	call   c0025a86 <IOAPIC::read(int)>
c0025c26:	83 c4 08             	add    esp,0x8
c0025c29:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025c2c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025c33:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025c36:	c1 e0 18             	shl    eax,0x18
c0025c39:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025c3c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025c3f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c42:	52                   	push   edx
c0025c43:	50                   	push   eax
c0025c44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c47:	e8 58 ff ff ff       	call   c0025ba4 <IOAPIC::write(int, int)>
c0025c4c:	83 c4 0c             	add    esp,0xc
c0025c4f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c52:	50                   	push   eax
c0025c53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c56:	e8 2b fe ff ff       	call   c0025a86 <IOAPIC::read(int)>
c0025c5b:	83 c4 08             	add    esp,0x8
c0025c5e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c61:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c68:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c6f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c76:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c7a:	74 09                	je     c0025c85 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c7c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c83:	eb 07                	jmp    c0025c8c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c85:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c8c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c90:	74 09                	je     c0025c9b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c92:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c99:	eb 07                	jmp    c0025ca2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c9b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025ca2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025ca9:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025cad:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025cb0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025cb3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cb6:	52                   	push   edx
c0025cb7:	50                   	push   eax
c0025cb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cbb:	e8 e4 fe ff ff       	call   c0025ba4 <IOAPIC::write(int, int)>
c0025cc0:	83 c4 0c             	add    esp,0xc
c0025cc3:	90                   	nop
c0025cc4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025cc7:	c9                   	leave  
c0025cc8:	c3                   	ret    
c0025cc9:	90                   	nop

c0025cca <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025cca:	55                   	push   ebp
c0025ccb:	89 e5                	mov    ebp,esp
c0025ccd:	57                   	push   edi
c0025cce:	56                   	push   esi
c0025ccf:	53                   	push   ebx
c0025cd0:	83 ec 2c             	sub    esp,0x2c
c0025cd3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025cd6:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025cd9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025cdd:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025ce1:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025ce5:	74 5a                	je     c0025d41 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ce7:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025ceb:	7f 44                	jg     c0025d31 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025ced:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cf0:	05 c0 d6 02 c0       	add    eax,0xc002d6c0
c0025cf5:	8a 00                	mov    al,BYTE PTR [eax]
c0025cf7:	0f b6 c0             	movzx  eax,al
c0025cfa:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025cfd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d00:	66 8b 84 00 e0 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf220]
c0025d08:	0f b7 c0             	movzx  eax,ax
c0025d0b:	83 e0 02             	and    eax,0x2
c0025d0e:	85 c0                	test   eax,eax
c0025d10:	74 04                	je     c0025d16 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025d12:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025d16:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d19:	66 8b 84 00 e0 0d 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf220]
c0025d21:	0f b7 c0             	movzx  eax,ax
c0025d24:	83 e0 08             	and    eax,0x8
c0025d27:	85 c0                	test   eax,eax
c0025d29:	74 16                	je     c0025d41 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d2b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d2f:	eb 10                	jmp    c0025d41 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d31:	83 ec 0c             	sub    esp,0xc
c0025d34:	68 90 d1 02 c0       	push   0xc002d190
c0025d39:	e8 cd 48 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0025d3e:	83 c4 10             	add    esp,0x10
c0025d41:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025d45:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c0025d4a:	83 ec 08             	sub    esp,0x8
c0025d4d:	50                   	push   eax
c0025d4e:	68 c8 d1 02 c0       	push   0xc002d1c8
c0025d53:	e8 87 d1 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0025d58:	83 c4 10             	add    esp,0x10
c0025d5b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d62:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c0025d67:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d6a:	7d 67                	jge    c0025dd3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d6c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d6f:	8b 04 85 00 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd800]
c0025d76:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d79:	83 ec 08             	sub    esp,0x8
c0025d7c:	52                   	push   edx
c0025d7d:	50                   	push   eax
c0025d7e:	e8 d1 fc ff ff       	call   c0025a54 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d83:	83 c4 10             	add    esp,0x10
c0025d86:	84 c0                	test   al,al
c0025d88:	74 44                	je     c0025dce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d8a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d8d:	8b 1c 85 00 28 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd800]
c0025d94:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d98:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d9b:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025da2:	83 c0 20             	add    eax,0x20
c0025da5:	0f b6 f0             	movzx  esi,al
c0025da8:	b8 00 00 00 00       	mov    eax,0x0
c0025dad:	99                   	cdq    
c0025dae:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025db1:	0f b6 c9             	movzx  ecx,cl
c0025db4:	83 ec 04             	sub    esp,0x4
c0025db7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025dba:	57                   	push   edi
c0025dbb:	56                   	push   esi
c0025dbc:	52                   	push   edx
c0025dbd:	50                   	push   eax
c0025dbe:	51                   	push   ecx
c0025dbf:	53                   	push   ebx
c0025dc0:	e8 0b fe ff ff       	call   c0025bd0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025dc5:	83 c4 20             	add    esp,0x20
c0025dc8:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025dcc:	eb 05                	jmp    c0025dd3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025dce:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025dd1:	eb 8f                	jmp    c0025d62 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025dd3:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025dd6:	83 f0 01             	xor    eax,0x1
c0025dd9:	84 c0                	test   al,al
c0025ddb:	74 10                	je     c0025ded <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025ddd:	83 ec 0c             	sub    esp,0xc
c0025de0:	68 df d1 02 c0       	push   0xc002d1df
c0025de5:	e8 21 48 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0025dea:	83 c4 10             	add    esp,0x10
c0025ded:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025df1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025df8:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025dfc:	7f 65                	jg     c0025e63 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025dfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e01:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e04:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e0b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e0e:	01 ca                	add    edx,ecx
c0025e10:	83 c2 54             	add    edx,0x54
c0025e13:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025e17:	85 c0                	test   eax,eax
c0025e19:	75 43                	jne    c0025e5e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025e1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e1e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e21:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e28:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e2b:	01 ca                	add    edx,ecx
c0025e2d:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025e30:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025e33:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e3a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e3d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e44:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e47:	01 ca                	add    edx,ecx
c0025e49:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e4f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e52:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e59:	83 e8 20             	sub    eax,0x20
c0025e5c:	eb 1a                	jmp    c0025e78 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e5e:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e61:	eb 95                	jmp    c0025df8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e63:	83 ec 0c             	sub    esp,0xc
c0025e66:	68 ec d1 02 c0       	push   0xc002d1ec
c0025e6b:	e8 9b 47 ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0025e70:	83 c4 10             	add    esp,0x10
c0025e73:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e78:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e7b:	5b                   	pop    ebx
c0025e7c:	5e                   	pop    esi
c0025e7d:	5f                   	pop    edi
c0025e7e:	5d                   	pop    ebp
c0025e7f:	c3                   	ret    

c0025e80 <PIC::disable()>:
c0025e80:	55                   	push   ebp
c0025e81:	89 e5                	mov    ebp,esp
c0025e83:	83 ec 10             	sub    esp,0x10
c0025e86:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e8c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e90:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e93:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e97:	ee                   	out    dx,al
c0025e98:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e9e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025ea2:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025ea5:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025ea9:	ee                   	out    dx,al
c0025eaa:	90                   	nop
c0025eab:	c9                   	leave  
c0025eac:	c3                   	ret    
c0025ead:	90                   	nop

c0025eae <PIC::close(int, int, void*)>:
c0025eae:	55                   	push   ebp
c0025eaf:	89 e5                	mov    ebp,esp
c0025eb1:	83 ec 08             	sub    esp,0x8
c0025eb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025eb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0025eb9:	83 c0 3c             	add    eax,0x3c
c0025ebc:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ebe:	83 ec 0c             	sub    esp,0xc
c0025ec1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ec4:	ff d0                	call   eax
c0025ec6:	83 c4 10             	add    esp,0x10
c0025ec9:	b8 00 00 00 00       	mov    eax,0x0
c0025ece:	c9                   	leave  
c0025ecf:	c3                   	ret    

c0025ed0 <PIC::PIC()>:
c0025ed0:	83 ec 0c             	sub    esp,0xc
c0025ed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed7:	83 ec 08             	sub    esp,0x8
c0025eda:	68 98 d2 02 c0       	push   0xc002d298
c0025edf:	50                   	push   eax
c0025ee0:	e8 7d ed fe ff       	call   c0014c62 <InterruptController::InterruptController(char const*)>
c0025ee5:	83 c4 10             	add    esp,0x10
c0025ee8:	ba c4 d2 02 c0       	mov    edx,0xc002d2c4
c0025eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef1:	89 10                	mov    DWORD PTR [eax],edx
c0025ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025efd:	0f b6 d0             	movzx  edx,al
c0025f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f04:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025f0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f0f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f15:	0f b6 d0             	movzx  edx,al
c0025f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f25:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f2b:	8d 50 01             	lea    edx,[eax+0x1]
c0025f2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f32:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f38:	0f b6 d0             	movzx  edx,al
c0025f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f3f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f43:	83 e1 3f             	and    ecx,0x3f
c0025f46:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f4e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f54:	0f b6 d0             	movzx  edx,al
c0025f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f5b:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f66:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f6c:	0f b6 d0             	movzx  edx,al
c0025f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f73:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f82:	8d 50 01             	lea    edx,[eax+0x1]
c0025f85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f89:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f8f:	0f b6 d0             	movzx  edx,al
c0025f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f96:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f9a:	83 e1 3f             	and    ecx,0x3f
c0025f9d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fa1:	90                   	nop
c0025fa2:	83 c4 0c             	add    esp,0xc
c0025fa5:	c3                   	ret    

c0025fa6 <PIC::ioWait()>:
c0025fa6:	eb 00                	jmp    c0025fa8 <PIC::ioWait()+0x2>
c0025fa8:	eb 00                	jmp    c0025faa <PIC::ioWait()+0x4>
c0025faa:	90                   	nop
c0025fab:	c3                   	ret    

c0025fac <PIC::getIRQReg(int)>:
c0025fac:	55                   	push   ebp
c0025fad:	89 e5                	mov    ebp,esp
c0025faf:	83 ec 10             	sub    esp,0x10
c0025fb2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fb5:	0f b6 c0             	movzx  eax,al
c0025fb8:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025fbe:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025fc1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025fc4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025fc8:	ee                   	out    dx,al
c0025fc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fcc:	0f b6 c0             	movzx  eax,al
c0025fcf:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025fd5:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025fd8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025fdb:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025fdf:	ee                   	out    dx,al
c0025fe0:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025fe6:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025fea:	89 c2                	mov    edx,eax
c0025fec:	ec                   	in     al,dx
c0025fed:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025ff0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ff3:	0f b6 c0             	movzx  eax,al
c0025ff6:	c1 e0 08             	shl    eax,0x8
c0025ff9:	89 c1                	mov    ecx,eax
c0025ffb:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026001:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026005:	89 c2                	mov    edx,eax
c0026007:	ec                   	in     al,dx
c0026008:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002600b:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002600e:	0f b6 c0             	movzx  eax,al
c0026011:	09 c8                	or     eax,ecx
c0026013:	c9                   	leave  
c0026014:	c3                   	ret    
c0026015:	90                   	nop

c0026016 <PIC::eoi(unsigned char)>:
c0026016:	55                   	push   ebp
c0026017:	89 e5                	mov    ebp,esp
c0026019:	83 ec 14             	sub    esp,0x14
c002601c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002601f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026022:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026026:	75 1e                	jne    c0026046 <PIC::eoi(unsigned char)+0x30>
c0026028:	6a 0b                	push   0xb
c002602a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002602d:	e8 7a ff ff ff       	call   c0025fac <PIC::getIRQReg(int)>
c0026032:	83 c4 08             	add    esp,0x8
c0026035:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026039:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002603d:	25 80 00 00 00       	and    eax,0x80
c0026042:	85 c0                	test   eax,eax
c0026044:	74 5f                	je     c00260a5 <PIC::eoi(unsigned char)+0x8f>
c0026046:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002604a:	75 2d                	jne    c0026079 <PIC::eoi(unsigned char)+0x63>
c002604c:	6a 0b                	push   0xb
c002604e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026051:	e8 56 ff ff ff       	call   c0025fac <PIC::getIRQReg(int)>
c0026056:	83 c4 08             	add    esp,0x8
c0026059:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002605d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026060:	66 85 c0             	test   ax,ax
c0026063:	78 14                	js     c0026079 <PIC::eoi(unsigned char)+0x63>
c0026065:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002606b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002606f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026072:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026076:	ee                   	out    dx,al
c0026077:	eb 2d                	jmp    c00260a6 <PIC::eoi(unsigned char)+0x90>
c0026079:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002607d:	76 12                	jbe    c0026091 <PIC::eoi(unsigned char)+0x7b>
c002607f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026085:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026089:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002608c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026090:	ee                   	out    dx,al
c0026091:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026097:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002609b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002609e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00260a2:	ee                   	out    dx,al
c00260a3:	eb 01                	jmp    c00260a6 <PIC::eoi(unsigned char)+0x90>
c00260a5:	90                   	nop
c00260a6:	c9                   	leave  
c00260a7:	c3                   	ret    

c00260a8 <PIC::remap()>:
c00260a8:	55                   	push   ebp
c00260a9:	89 e5                	mov    ebp,esp
c00260ab:	83 ec 48             	sub    esp,0x48
c00260ae:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00260b5:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00260bc:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00260c2:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00260c5:	89 c2                	mov    edx,eax
c00260c7:	ec                   	in     al,dx
c00260c8:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00260cb:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00260ce:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00260d1:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00260d7:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00260da:	89 c2                	mov    edx,eax
c00260dc:	ec                   	in     al,dx
c00260dd:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00260e0:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00260e3:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00260e6:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00260ec:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00260f0:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00260f3:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00260f6:	ee                   	out    dx,al
c00260f7:	83 ec 0c             	sub    esp,0xc
c00260fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260fd:	e8 a4 fe ff ff       	call   c0025fa6 <PIC::ioWait()>
c0026102:	83 c4 10             	add    esp,0x10
c0026105:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002610b:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002610f:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026112:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026115:	ee                   	out    dx,al
c0026116:	83 ec 0c             	sub    esp,0xc
c0026119:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002611c:	e8 85 fe ff ff       	call   c0025fa6 <PIC::ioWait()>
c0026121:	83 c4 10             	add    esp,0x10
c0026124:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026127:	0f b6 c0             	movzx  eax,al
c002612a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026130:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026133:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026136:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026139:	ee                   	out    dx,al
c002613a:	83 ec 0c             	sub    esp,0xc
c002613d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026140:	e8 61 fe ff ff       	call   c0025fa6 <PIC::ioWait()>
c0026145:	83 c4 10             	add    esp,0x10
c0026148:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002614b:	0f b6 c0             	movzx  eax,al
c002614e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026154:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026157:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002615a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002615d:	ee                   	out    dx,al
c002615e:	83 ec 0c             	sub    esp,0xc
c0026161:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026164:	e8 3d fe ff ff       	call   c0025fa6 <PIC::ioWait()>
c0026169:	83 c4 10             	add    esp,0x10
c002616c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026172:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026176:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026179:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002617c:	ee                   	out    dx,al
c002617d:	83 ec 0c             	sub    esp,0xc
c0026180:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026183:	e8 1e fe ff ff       	call   c0025fa6 <PIC::ioWait()>
c0026188:	83 c4 10             	add    esp,0x10
c002618b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026191:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026195:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026198:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002619b:	ee                   	out    dx,al
c002619c:	83 ec 0c             	sub    esp,0xc
c002619f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261a2:	e8 ff fd ff ff       	call   c0025fa6 <PIC::ioWait()>
c00261a7:	83 c4 10             	add    esp,0x10
c00261aa:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00261b0:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00261b4:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00261b7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00261ba:	ee                   	out    dx,al
c00261bb:	83 ec 0c             	sub    esp,0xc
c00261be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261c1:	e8 e0 fd ff ff       	call   c0025fa6 <PIC::ioWait()>
c00261c6:	83 c4 10             	add    esp,0x10
c00261c9:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00261cf:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00261d3:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00261d6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00261d9:	ee                   	out    dx,al
c00261da:	83 ec 0c             	sub    esp,0xc
c00261dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261e0:	e8 c1 fd ff ff       	call   c0025fa6 <PIC::ioWait()>
c00261e5:	83 c4 10             	add    esp,0x10
c00261e8:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00261ec:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00261f2:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00261f5:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00261f8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00261fb:	ee                   	out    dx,al
c00261fc:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026200:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026206:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026209:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002620c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002620f:	ee                   	out    dx,al
c0026210:	90                   	nop
c0026211:	c9                   	leave  
c0026212:	c3                   	ret    
c0026213:	90                   	nop

c0026214 <PIC::open(int, int, void*)>:
c0026214:	55                   	push   ebp
c0026215:	89 e5                	mov    ebp,esp
c0026217:	83 ec 18             	sub    esp,0x18
c002621a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026220:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026224:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026227:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002622b:	ee                   	out    dx,al
c002622c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026232:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026236:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026239:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002623d:	ee                   	out    dx,al
c002623e:	83 ec 0c             	sub    esp,0xc
c0026241:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026244:	e8 5f fe ff ff       	call   c00260a8 <PIC::remap()>
c0026249:	83 c4 10             	add    esp,0x10
c002624c:	b8 00 00 00 00       	mov    eax,0x0
c0026251:	c9                   	leave  
c0026252:	c3                   	ret    
c0026253:	90                   	nop

c0026254 <APICTimer::close(int, int, void*)>:
c0026254:	b8 00 00 00 00       	mov    eax,0x0
c0026259:	c3                   	ret    

c002625a <apicTimerHandler(regs*, void*)>:
c002625a:	83 ec 0c             	sub    esp,0xc
c002625d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026261:	8b 00                	mov    eax,DWORD PTR [eax]
c0026263:	99                   	cdq    
c0026264:	52                   	push   edx
c0026265:	50                   	push   eax
c0026266:	6a 00                	push   0x0
c0026268:	68 00 ca 9a 3b       	push   0x3b9aca00
c002626d:	e8 92 07 00 00       	call   c0026a04 <__udivdi3>
c0026272:	83 c4 10             	add    esp,0x10
c0026275:	83 ec 08             	sub    esp,0x8
c0026278:	52                   	push   edx
c0026279:	50                   	push   eax
c002627a:	e8 a8 0a ff ff       	call   c0016d27 <timerHandler(unsigned long long)>
c002627f:	83 c4 10             	add    esp,0x10
c0026282:	90                   	nop
c0026283:	83 c4 0c             	add    esp,0xc
c0026286:	c3                   	ret    
c0026287:	90                   	nop

c0026288 <APICTimer::write(int)>:
c0026288:	53                   	push   ebx
c0026289:	83 ec 28             	sub    esp,0x28
c002628c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026290:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026294:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002629a:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c002629f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00262a5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00262ab:	83 ec 0c             	sub    esp,0xc
c00262ae:	50                   	push   eax
c00262af:	e8 de f4 ff ff       	call   c0025792 <APIC::getBase()>
c00262b4:	83 c4 10             	add    esp,0x10
c00262b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00262bb:	a1 f0 ea 02 c0       	mov    eax,ds:0xc002eaf0
c00262c0:	8b 15 f4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eaf4
c00262c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00262ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00262ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262d2:	05 e0 03 00 00       	add    eax,0x3e0
c00262d7:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00262dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262e1:	05 80 03 00 00       	add    eax,0x380
c00262e6:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00262ec:	fb                   	sti    
c00262ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262f5:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00262fa:	83 d2 00             	adc    edx,0x0
c00262fd:	89 c1                	mov    ecx,eax
c00262ff:	89 d3                	mov    ebx,edx
c0026301:	a1 f0 ea 02 c0       	mov    eax,ds:0xc002eaf0
c0026306:	8b 15 f4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eaf4
c002630c:	39 c8                	cmp    eax,ecx
c002630e:	89 d0                	mov    eax,edx
c0026310:	19 d8                	sbb    eax,ebx
c0026312:	73 02                	jae    c0026316 <APICTimer::write(int)+0x8e>
c0026314:	eb d7                	jmp    c00262ed <APICTimer::write(int)+0x65>
c0026316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002631a:	05 20 03 00 00       	add    eax,0x320
c002631f:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026325:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026329:	05 90 03 00 00       	add    eax,0x390
c002632e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026330:	f7 d0                	not    eax
c0026332:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026336:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002633a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002633e:	ba 00 00 00 00       	mov    edx,0x0
c0026343:	f7 f3                	div    ebx
c0026345:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026349:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002634d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026353:	0d 00 00 02 00       	or     eax,0x20000
c0026358:	89 c2                	mov    edx,eax
c002635a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002635e:	05 20 03 00 00       	add    eax,0x320
c0026363:	89 10                	mov    DWORD PTR [eax],edx
c0026365:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026369:	05 e0 03 00 00       	add    eax,0x3e0
c002636e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026374:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026378:	05 80 03 00 00       	add    eax,0x380
c002637d:	89 c2                	mov    edx,eax
c002637f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026383:	89 02                	mov    DWORD PTR [edx],eax
c0026385:	90                   	nop
c0026386:	83 c4 28             	add    esp,0x28
c0026389:	5b                   	pop    ebx
c002638a:	c3                   	ret    
c002638b:	90                   	nop

c002638c <APICTimer::open(int, int, void*)>:
c002638c:	57                   	push   edi
c002638d:	56                   	push   esi
c002638e:	53                   	push   ebx
c002638f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026393:	8b 00                	mov    eax,DWORD PTR [eax]
c0026395:	83 c0 24             	add    eax,0x24
c0026398:	8b 00                	mov    eax,DWORD PTR [eax]
c002639a:	83 ec 08             	sub    esp,0x8
c002639d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263a5:	ff d0                	call   eax
c00263a7:	83 c4 10             	add    esp,0x10
c00263aa:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c00263af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00263b5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00263bb:	83 ec 0c             	sub    esp,0xc
c00263be:	50                   	push   eax
c00263bf:	e8 ce f3 ff ff       	call   c0025792 <APIC::getBase()>
c00263c4:	83 c4 10             	add    esp,0x10
c00263c7:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00263cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263d1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263d7:	0f b6 f8             	movzx  edi,al
c00263da:	89 d0                	mov    eax,edx
c00263dc:	ba 00 00 00 00       	mov    edx,0x0
c00263e1:	89 c1                	mov    ecx,eax
c00263e3:	80 e5 ff             	and    ch,0xff
c00263e6:	89 cb                	mov    ebx,ecx
c00263e8:	0f b6 f2             	movzx  esi,dl
c00263eb:	89 d8                	mov    eax,ebx
c00263ed:	89 f2                	mov    edx,esi
c00263ef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263f3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00263f6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00263fa:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00263fe:	83 e0 00             	and    eax,0x0
c0026401:	09 d0                	or     eax,edx
c0026403:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002640b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026411:	8d 50 01             	lea    edx,[eax+0x1]
c0026414:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026418:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002641e:	0f b6 d0             	movzx  edx,al
c0026421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026425:	83 c2 08             	add    edx,0x8
c0026428:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002642c:	0f b6 c9             	movzx  ecx,cl
c002642f:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026435:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002643d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026441:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002644b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002644f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026455:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026459:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002645f:	83 ec 0c             	sub    esp,0xc
c0026462:	51                   	push   ecx
c0026463:	6a 01                	push   0x1
c0026465:	68 5a 62 02 c0       	push   0xc002625a
c002646a:	52                   	push   edx
c002646b:	50                   	push   eax
c002646c:	e8 19 de fe ff       	call   c001428a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026471:	83 c4 20             	add    esp,0x20
c0026474:	89 c2                	mov    edx,eax
c0026476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026480:	b8 00 00 00 00       	mov    eax,0x0
c0026485:	5b                   	pop    ebx
c0026486:	5e                   	pop    esi
c0026487:	5f                   	pop    edi
c0026488:	c3                   	ret    
c0026489:	90                   	nop

c002648a <APICTimer::APICTimer()>:
c002648a:	83 ec 0c             	sub    esp,0xc
c002648d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026491:	83 ec 08             	sub    esp,0x8
c0026494:	68 04 d3 02 c0       	push   0xc002d304
c0026499:	50                   	push   eax
c002649a:	e8 f9 07 ff ff       	call   c0016c98 <Timer::Timer(char const*)>
c002649f:	83 c4 10             	add    esp,0x10
c00264a2:	ba 18 d3 02 c0       	mov    edx,0xc002d318
c00264a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ab:	89 10                	mov    DWORD PTR [eax],edx
c00264ad:	90                   	nop
c00264ae:	83 c4 0c             	add    esp,0xc
c00264b1:	c3                   	ret    

c00264b2 <PIT::write(int)>:
c00264b2:	83 ec 10             	sub    esp,0x10
c00264b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00264b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264bd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00264c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00264c7:	a3 24 28 03 c0       	mov    ds:0xc0032824,eax
c00264cc:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00264d1:	99                   	cdq    
c00264d2:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00264d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264da:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00264e1:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00264e6:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00264ea:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00264ef:	ee                   	out    dx,al
c00264f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264f4:	0f b6 c0             	movzx  eax,al
c00264f7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00264fe:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026502:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026506:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002650b:	ee                   	out    dx,al
c002650c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026510:	c1 f8 08             	sar    eax,0x8
c0026513:	0f b6 c0             	movzx  eax,al
c0026516:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002651d:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026521:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026525:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002652a:	ee                   	out    dx,al
c002652b:	90                   	nop
c002652c:	83 c4 10             	add    esp,0x10
c002652f:	c3                   	ret    

c0026530 <pitHandler(regs*, void*)>:
c0026530:	83 ec 0c             	sub    esp,0xc
c0026533:	a1 24 28 03 c0       	mov    eax,ds:0xc0032824
c0026538:	99                   	cdq    
c0026539:	52                   	push   edx
c002653a:	50                   	push   eax
c002653b:	6a 00                	push   0x0
c002653d:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026542:	e8 bd 04 00 00       	call   c0026a04 <__udivdi3>
c0026547:	83 c4 10             	add    esp,0x10
c002654a:	83 ec 08             	sub    esp,0x8
c002654d:	52                   	push   edx
c002654e:	50                   	push   eax
c002654f:	e8 d3 07 ff ff       	call   c0016d27 <timerHandler(unsigned long long)>
c0026554:	83 c4 10             	add    esp,0x10
c0026557:	90                   	nop
c0026558:	83 c4 0c             	add    esp,0xc
c002655b:	c3                   	ret    

c002655c <PIT::open(int, int, void*)>:
c002655c:	83 ec 0c             	sub    esp,0xc
c002655f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026563:	8b 00                	mov    eax,DWORD PTR [eax]
c0026565:	83 c0 24             	add    eax,0x24
c0026568:	8b 00                	mov    eax,DWORD PTR [eax]
c002656a:	83 ec 08             	sub    esp,0x8
c002656d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026575:	ff d0                	call   eax
c0026577:	83 c4 10             	add    esp,0x10
c002657a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002657e:	83 ec 0c             	sub    esp,0xc
c0026581:	6a 00                	push   0x0
c0026583:	6a 01                	push   0x1
c0026585:	68 30 65 02 c0       	push   0xc0026530
c002658a:	6a 00                	push   0x0
c002658c:	50                   	push   eax
c002658d:	e8 f8 dc fe ff       	call   c001428a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026592:	83 c4 20             	add    esp,0x20
c0026595:	89 c2                	mov    edx,eax
c0026597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002659b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00265a1:	b8 00 00 00 00       	mov    eax,0x0
c00265a6:	83 c4 0c             	add    esp,0xc
c00265a9:	c3                   	ret    

c00265aa <PIT::close(int, int, void*)>:
c00265aa:	83 ec 0c             	sub    esp,0xc
c00265ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b1:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00265bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265bf:	6a 01                	push   0x1
c00265c1:	68 30 65 02 c0       	push   0xc0026530
c00265c6:	6a 00                	push   0x0
c00265c8:	50                   	push   eax
c00265c9:	e8 fa dc fe ff       	call   c00142c8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00265ce:	83 c4 10             	add    esp,0x10
c00265d1:	b8 00 00 00 00       	mov    eax,0x0
c00265d6:	83 c4 0c             	add    esp,0xc
c00265d9:	c3                   	ret    

c00265da <PIT::PIT()>:
c00265da:	83 ec 0c             	sub    esp,0xc
c00265dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e1:	83 ec 08             	sub    esp,0x8
c00265e4:	68 40 d3 02 c0       	push   0xc002d340
c00265e9:	50                   	push   eax
c00265ea:	e8 a9 06 ff ff       	call   c0016c98 <Timer::Timer(char const*)>
c00265ef:	83 c4 10             	add    esp,0x10
c00265f2:	ba 68 d3 02 c0       	mov    edx,0xc002d368
c00265f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265fb:	89 10                	mov    DWORD PTR [eax],edx
c00265fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026601:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026607:	0f b6 d0             	movzx  edx,al
c002660a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002660e:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026619:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002661f:	0f b6 d0             	movzx  edx,al
c0026622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026626:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002662b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002662f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026635:	8d 50 01             	lea    edx,[eax+0x1]
c0026638:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002663c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026642:	0f b6 d0             	movzx  edx,al
c0026645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026649:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002664d:	83 e1 3f             	and    ecx,0x3f
c0026650:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026654:	90                   	nop
c0026655:	83 c4 0c             	add    esp,0xc
c0026658:	c3                   	ret    
c0026659:	66 90                	xchg   ax,ax
c002665b:	66 90                	xchg   ax,ax
c002665d:	66 90                	xchg   ax,ax
c002665f:	90                   	nop

c0026660 <avxDetect>:
c0026660:	b8 00 00 00 00       	mov    eax,0x0
c0026665:	c3                   	ret    

c0026666 <avxSave>:
c0026666:	c3                   	ret    

c0026667 <avxLoad>:
c0026667:	c3                   	ret    

c0026668 <avxInit>:
c0026668:	c3                   	ret    

c0026669 <avxClose>:
c0026669:	c3                   	ret    

c002666a <wouldSheSayYes>:
c002666a:	c3                   	ret    
c002666b:	49                   	dec    ecx
c002666c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026670:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026674:	75 20                	jne    c0026696 <sseDetect.noSSE+0x1>
c0026676:	4e                   	dec    esi
c0026677:	79 61                	jns    c00266da <x87Detect+0x14>
c0026679:	68 2e 2e 2e 00       	push   0x2e2e2e
c002667e:	66 90                	xchg   ax,ax

c0026680 <absolutelyNoChanceInHell>:
c0026680:	b8 01 00 00 00       	mov    eax,0x1
c0026685:	0f a2                	cpuid  
c0026687:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002668d:	74 06                	je     c0026695 <sseDetect.noSSE>
c002668f:	b8 01 00 00 00       	mov    eax,0x1
c0026694:	c3                   	ret    

c0026695 <sseDetect.noSSE>:
c0026695:	31 c0                	xor    eax,eax
c0026697:	c3                   	ret    

c0026698 <sseSave>:
c0026698:	0f ae 44 24 04       	fxsave [esp+0x4]
c002669d:	c3                   	ret    

c002669e <sseLoad>:
c002669e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00266a3:	c3                   	ret    

c00266a4 <sseInit>:
c00266a4:	e8 49 00 00 00       	call   c00266f2 <x87Init>
c00266a9:	0f 20 e0             	mov    eax,cr4
c00266ac:	66 0d 00 06          	or     ax,0x600
c00266b0:	0f 22 e0             	mov    cr4,eax
c00266b3:	c3                   	ret    

c00266b4 <sseClose>:
c00266b4:	c3                   	ret    
c00266b5:	66 90                	xchg   ax,ax
c00266b7:	66 90                	xchg   ax,ax
c00266b9:	66 90                	xchg   ax,ax
c00266bb:	66 90                	xchg   ax,ax
c00266bd:	66 90                	xchg   ax,ax
c00266bf:	90                   	nop

c00266c0 <value_37F>:
c00266c0:	7f 03                	jg     c00266c5 <value_37A+0x1>

c00266c2 <value_37E>:
c00266c2:	7e 03                	jle    c00266c7 <x87Detect+0x1>

c00266c4 <value_37A>:
c00266c4:	7a 03                	jp     c00266c9 <x87Detect+0x3>

c00266c6 <x87Detect>:
c00266c6:	b8 01 00 00 00       	mov    eax,0x1
c00266cb:	0f a2                	cpuid  
c00266cd:	f7 c2 01 00 00 00    	test   edx,0x1
c00266d3:	74 06                	je     c00266db <x87Detect.nox87>
c00266d5:	b8 01 00 00 00       	mov    eax,0x1
c00266da:	c3                   	ret    

c00266db <x87Detect.nox87>:
c00266db:	b8 00 00 00 00       	mov    eax,0x0
c00266e0:	c3                   	ret    

c00266e1 <x87Save>:
c00266e1:	55                   	push   ebp
c00266e2:	89 e5                	mov    ebp,esp
c00266e4:	9b dd 75 08          	fsave  [ebp+0x8]
c00266e8:	c9                   	leave  
c00266e9:	c3                   	ret    

c00266ea <x87Load>:
c00266ea:	55                   	push   ebp
c00266eb:	89 e5                	mov    ebp,esp
c00266ed:	dd 65 08             	frstor [ebp+0x8]
c00266f0:	c9                   	leave  
c00266f1:	c3                   	ret    

c00266f2 <x87Init>:
c00266f2:	9b db e3             	finit  
c00266f5:	0f 20 c0             	mov    eax,cr0
c00266f8:	66 25 fb ff          	and    ax,0xfffb
c00266fc:	66 0d 22 00          	or     ax,0x22
c0026700:	0f 22 c0             	mov    cr0,eax
c0026703:	0f 06                	clts   
c0026705:	d9 2d c4 66 02 c0    	fldcw  WORD PTR ds:0xc00266c4
c002670b:	c3                   	ret    

c002670c <x87Close>:
c002670c:	c3                   	ret    
c002670d:	66 90                	xchg   ax,ax
c002670f:	90                   	nop

c0026710 <__do_global_ctors_aux>:
c0026710:	a1 68 92 02 c0       	mov    eax,ds:0xc0029268
c0026715:	83 f8 ff             	cmp    eax,0xffffffff
c0026718:	74 1a                	je     c0026734 <__do_global_ctors_aux+0x24>
c002671a:	55                   	push   ebp
c002671b:	89 e5                	mov    ebp,esp
c002671d:	53                   	push   ebx
c002671e:	52                   	push   edx
c002671f:	bb 68 92 02 c0       	mov    ebx,0xc0029268
c0026724:	ff d0                	call   eax
c0026726:	83 eb 04             	sub    ebx,0x4
c0026729:	8b 03                	mov    eax,DWORD PTR [ebx]
c002672b:	83 f8 ff             	cmp    eax,0xffffffff
c002672e:	75 f4                	jne    c0026724 <__do_global_ctors_aux+0x14>
c0026730:	58                   	pop    eax
c0026731:	5b                   	pop    ebx
c0026732:	5d                   	pop    ebp
c0026733:	c3                   	ret    
c0026734:	c3                   	ret    
c0026735:	66 90                	xchg   ax,ax
c0026737:	90                   	nop

c0026738 <__divdi3>:
c0026738:	55                   	push   ebp
c0026739:	57                   	push   edi
c002673a:	56                   	push   esi
c002673b:	53                   	push   ebx
c002673c:	83 ec 1c             	sub    esp,0x1c
c002673f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026743:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026747:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002674a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002674e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026752:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026756:	85 db                	test   ebx,ebx
c0026758:	0f 88 8e 00 00 00    	js     c00267ec <__divdi3+0xb4>
c002675e:	89 dd                	mov    ebp,ebx
c0026760:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026768:	89 d3                	mov    ebx,edx
c002676a:	85 d2                	test   edx,edx
c002676c:	79 0d                	jns    c002677b <__divdi3+0x43>
c002676e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026772:	f7 d8                	neg    eax
c0026774:	83 d2 00             	adc    edx,0x0
c0026777:	f7 da                	neg    edx
c0026779:	89 d3                	mov    ebx,edx
c002677b:	89 c7                	mov    edi,eax
c002677d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026780:	85 db                	test   ebx,ebx
c0026782:	75 48                	jne    c00267cc <__divdi3+0x94>
c0026784:	39 ef                	cmp    edi,ebp
c0026786:	76 24                	jbe    c00267ac <__divdi3+0x74>
c0026788:	89 ea                	mov    edx,ebp
c002678a:	f7 f7                	div    edi
c002678c:	89 c1                	mov    ecx,eax
c002678e:	31 f6                	xor    esi,esi
c0026790:	89 c8                	mov    eax,ecx
c0026792:	89 f2                	mov    edx,esi
c0026794:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026798:	85 c9                	test   ecx,ecx
c002679a:	74 07                	je     c00267a3 <__divdi3+0x6b>
c002679c:	f7 d8                	neg    eax
c002679e:	83 d2 00             	adc    edx,0x0
c00267a1:	f7 da                	neg    edx
c00267a3:	83 c4 1c             	add    esp,0x1c
c00267a6:	5b                   	pop    ebx
c00267a7:	5e                   	pop    esi
c00267a8:	5f                   	pop    edi
c00267a9:	5d                   	pop    ebp
c00267aa:	c3                   	ret    
c00267ab:	90                   	nop
c00267ac:	85 ff                	test   edi,edi
c00267ae:	75 0b                	jne    c00267bb <__divdi3+0x83>
c00267b0:	b8 01 00 00 00       	mov    eax,0x1
c00267b5:	31 d2                	xor    edx,edx
c00267b7:	f7 f3                	div    ebx
c00267b9:	89 c7                	mov    edi,eax
c00267bb:	31 d2                	xor    edx,edx
c00267bd:	89 e8                	mov    eax,ebp
c00267bf:	f7 f7                	div    edi
c00267c1:	89 c6                	mov    esi,eax
c00267c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267c6:	f7 f7                	div    edi
c00267c8:	89 c1                	mov    ecx,eax
c00267ca:	eb c4                	jmp    c0026790 <__divdi3+0x58>
c00267cc:	39 eb                	cmp    ebx,ebp
c00267ce:	77 3c                	ja     c002680c <__divdi3+0xd4>
c00267d0:	0f bd f3             	bsr    esi,ebx
c00267d3:	83 f6 1f             	xor    esi,0x1f
c00267d6:	75 40                	jne    c0026818 <__divdi3+0xe0>
c00267d8:	39 eb                	cmp    ebx,ebp
c00267da:	72 09                	jb     c00267e5 <__divdi3+0xad>
c00267dc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00267df:	0f 87 97 00 00 00    	ja     c002687c <__divdi3+0x144>
c00267e5:	b9 01 00 00 00       	mov    ecx,0x1
c00267ea:	eb a4                	jmp    c0026790 <__divdi3+0x58>
c00267ec:	f7 d9                	neg    ecx
c00267ee:	83 d3 00             	adc    ebx,0x0
c00267f1:	f7 db                	neg    ebx
c00267f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267fa:	89 dd                	mov    ebp,ebx
c00267fc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026804:	e9 5f ff ff ff       	jmp    c0026768 <__divdi3+0x30>
c0026809:	8d 76 00             	lea    esi,[esi+0x0]
c002680c:	31 f6                	xor    esi,esi
c002680e:	31 c9                	xor    ecx,ecx
c0026810:	e9 7b ff ff ff       	jmp    c0026790 <__divdi3+0x58>
c0026815:	8d 76 00             	lea    esi,[esi+0x0]
c0026818:	b8 20 00 00 00       	mov    eax,0x20
c002681d:	29 f0                	sub    eax,esi
c002681f:	89 f1                	mov    ecx,esi
c0026821:	d3 e3                	shl    ebx,cl
c0026823:	89 fa                	mov    edx,edi
c0026825:	88 c1                	mov    cl,al
c0026827:	d3 ea                	shr    edx,cl
c0026829:	09 da                	or     edx,ebx
c002682b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002682f:	89 f1                	mov    ecx,esi
c0026831:	d3 e7                	shl    edi,cl
c0026833:	89 eb                	mov    ebx,ebp
c0026835:	88 c1                	mov    cl,al
c0026837:	d3 eb                	shr    ebx,cl
c0026839:	89 f1                	mov    ecx,esi
c002683b:	d3 e5                	shl    ebp,cl
c002683d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026840:	88 c1                	mov    cl,al
c0026842:	d3 ea                	shr    edx,cl
c0026844:	09 d5                	or     ebp,edx
c0026846:	89 e8                	mov    eax,ebp
c0026848:	89 da                	mov    edx,ebx
c002684a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002684e:	89 d3                	mov    ebx,edx
c0026850:	89 c5                	mov    ebp,eax
c0026852:	f7 e7                	mul    edi
c0026854:	39 d3                	cmp    ebx,edx
c0026856:	72 18                	jb     c0026870 <__divdi3+0x138>
c0026858:	74 0a                	je     c0026864 <__divdi3+0x12c>
c002685a:	89 e9                	mov    ecx,ebp
c002685c:	31 f6                	xor    esi,esi
c002685e:	e9 2d ff ff ff       	jmp    c0026790 <__divdi3+0x58>
c0026863:	90                   	nop
c0026864:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026867:	89 f1                	mov    ecx,esi
c0026869:	d3 e7                	shl    edi,cl
c002686b:	39 c7                	cmp    edi,eax
c002686d:	73 eb                	jae    c002685a <__divdi3+0x122>
c002686f:	90                   	nop
c0026870:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026873:	31 f6                	xor    esi,esi
c0026875:	e9 16 ff ff ff       	jmp    c0026790 <__divdi3+0x58>
c002687a:	66 90                	xchg   ax,ax
c002687c:	31 c9                	xor    ecx,ecx
c002687e:	e9 0d ff ff ff       	jmp    c0026790 <__divdi3+0x58>
c0026883:	90                   	nop

c0026884 <__moddi3>:
c0026884:	55                   	push   ebp
c0026885:	57                   	push   edi
c0026886:	56                   	push   esi
c0026887:	53                   	push   ebx
c0026888:	83 ec 2c             	sub    esp,0x2c
c002688b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002688f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026893:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026897:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002689b:	85 db                	test   ebx,ebx
c002689d:	0f 88 85 00 00 00    	js     c0026928 <__moddi3+0xa4>
c00268a3:	89 de                	mov    esi,ebx
c00268a5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00268ad:	89 d7                	mov    edi,edx
c00268af:	85 d2                	test   edx,edx
c00268b1:	79 09                	jns    c00268bc <__moddi3+0x38>
c00268b3:	f7 d8                	neg    eax
c00268b5:	83 d2 00             	adc    edx,0x0
c00268b8:	f7 da                	neg    edx
c00268ba:	89 d7                	mov    edi,edx
c00268bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268c0:	89 cd                	mov    ebp,ecx
c00268c2:	85 ff                	test   edi,edi
c00268c4:	75 52                	jne    c0026918 <__moddi3+0x94>
c00268c6:	89 c3                	mov    ebx,eax
c00268c8:	39 f0                	cmp    eax,esi
c00268ca:	76 24                	jbe    c00268f0 <__moddi3+0x6c>
c00268cc:	89 c8                	mov    eax,ecx
c00268ce:	89 f2                	mov    edx,esi
c00268d0:	f7 f3                	div    ebx
c00268d2:	89 d6                	mov    esi,edx
c00268d4:	89 f0                	mov    eax,esi
c00268d6:	31 d2                	xor    edx,edx
c00268d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00268dc:	85 c9                	test   ecx,ecx
c00268de:	74 07                	je     c00268e7 <__moddi3+0x63>
c00268e0:	f7 d8                	neg    eax
c00268e2:	83 d2 00             	adc    edx,0x0
c00268e5:	f7 da                	neg    edx
c00268e7:	83 c4 2c             	add    esp,0x2c
c00268ea:	5b                   	pop    ebx
c00268eb:	5e                   	pop    esi
c00268ec:	5f                   	pop    edi
c00268ed:	5d                   	pop    ebp
c00268ee:	c3                   	ret    
c00268ef:	90                   	nop
c00268f0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00268f4:	85 db                	test   ebx,ebx
c00268f6:	75 0d                	jne    c0026905 <__moddi3+0x81>
c00268f8:	b8 01 00 00 00       	mov    eax,0x1
c00268fd:	31 d2                	xor    edx,edx
c00268ff:	f7 f7                	div    edi
c0026901:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026905:	89 f0                	mov    eax,esi
c0026907:	31 d2                	xor    edx,edx
c0026909:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002690d:	f7 f7                	div    edi
c002690f:	89 e8                	mov    eax,ebp
c0026911:	f7 f7                	div    edi
c0026913:	89 d6                	mov    esi,edx
c0026915:	eb bd                	jmp    c00268d4 <__moddi3+0x50>
c0026917:	90                   	nop
c0026918:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002691c:	39 f7                	cmp    edi,esi
c002691e:	76 20                	jbe    c0026940 <__moddi3+0xbc>
c0026920:	89 c8                	mov    eax,ecx
c0026922:	89 f2                	mov    edx,esi
c0026924:	eb b2                	jmp    c00268d8 <__moddi3+0x54>
c0026926:	66 90                	xchg   ax,ax
c0026928:	f7 d9                	neg    ecx
c002692a:	83 d3 00             	adc    ebx,0x0
c002692d:	f7 db                	neg    ebx
c002692f:	89 de                	mov    esi,ebx
c0026931:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026939:	e9 6f ff ff ff       	jmp    c00268ad <__moddi3+0x29>
c002693e:	66 90                	xchg   ax,ax
c0026940:	0f bd c7             	bsr    eax,edi
c0026943:	83 f0 1f             	xor    eax,0x1f
c0026946:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002694a:	75 24                	jne    c0026970 <__moddi3+0xec>
c002694c:	39 f7                	cmp    edi,esi
c002694e:	72 06                	jb     c0026956 <__moddi3+0xd2>
c0026950:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026954:	77 0c                	ja     c0026962 <__moddi3+0xde>
c0026956:	89 e9                	mov    ecx,ebp
c0026958:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002695c:	19 fe                	sbb    esi,edi
c002695e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026962:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026966:	89 f2                	mov    edx,esi
c0026968:	e9 6b ff ff ff       	jmp    c00268d8 <__moddi3+0x54>
c002696d:	8d 76 00             	lea    esi,[esi+0x0]
c0026970:	b8 20 00 00 00       	mov    eax,0x20
c0026975:	89 c2                	mov    edx,eax
c0026977:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002697b:	29 da                	sub    edx,ebx
c002697d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026981:	88 d9                	mov    cl,bl
c0026983:	d3 e7                	shl    edi,cl
c0026985:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026989:	88 d1                	mov    cl,dl
c002698b:	d3 e8                	shr    eax,cl
c002698d:	09 c7                	or     edi,eax
c002698f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026993:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026997:	89 d8                	mov    eax,ebx
c0026999:	88 d9                	mov    cl,bl
c002699b:	d3 e7                	shl    edi,cl
c002699d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00269a1:	89 f3                	mov    ebx,esi
c00269a3:	88 d1                	mov    cl,dl
c00269a5:	d3 eb                	shr    ebx,cl
c00269a7:	89 c7                	mov    edi,eax
c00269a9:	88 c1                	mov    cl,al
c00269ab:	d3 e6                	shl    esi,cl
c00269ad:	89 e8                	mov    eax,ebp
c00269af:	88 d1                	mov    cl,dl
c00269b1:	d3 e8                	shr    eax,cl
c00269b3:	09 f0                	or     eax,esi
c00269b5:	89 f9                	mov    ecx,edi
c00269b7:	d3 e5                	shl    ebp,cl
c00269b9:	89 da                	mov    edx,ebx
c00269bb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00269bf:	89 d3                	mov    ebx,edx
c00269c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00269c5:	89 c6                	mov    esi,eax
c00269c7:	89 d1                	mov    ecx,edx
c00269c9:	39 d3                	cmp    ebx,edx
c00269cb:	72 27                	jb     c00269f4 <__moddi3+0x170>
c00269cd:	74 21                	je     c00269f0 <__moddi3+0x16c>
c00269cf:	29 f5                	sub    ebp,esi
c00269d1:	19 cb                	sbb    ebx,ecx
c00269d3:	89 de                	mov    esi,ebx
c00269d5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00269d9:	d3 e6                	shl    esi,cl
c00269db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00269df:	89 f9                	mov    ecx,edi
c00269e1:	d3 ed                	shr    ebp,cl
c00269e3:	09 ee                	or     esi,ebp
c00269e5:	89 f0                	mov    eax,esi
c00269e7:	d3 eb                	shr    ebx,cl
c00269e9:	89 da                	mov    edx,ebx
c00269eb:	e9 e8 fe ff ff       	jmp    c00268d8 <__moddi3+0x54>
c00269f0:	39 c5                	cmp    ebp,eax
c00269f2:	73 db                	jae    c00269cf <__moddi3+0x14b>
c00269f4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269f8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00269fc:	89 d1                	mov    ecx,edx
c00269fe:	89 c6                	mov    esi,eax
c0026a00:	eb cd                	jmp    c00269cf <__moddi3+0x14b>
c0026a02:	66 90                	xchg   ax,ax

c0026a04 <__udivdi3>:
c0026a04:	55                   	push   ebp
c0026a05:	57                   	push   edi
c0026a06:	56                   	push   esi
c0026a07:	53                   	push   ebx
c0026a08:	83 ec 1c             	sub    esp,0x1c
c0026a0b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026a0f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026a13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a17:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026a1b:	85 d2                	test   edx,edx
c0026a1d:	75 41                	jne    c0026a60 <__udivdi3+0x5c>
c0026a1f:	39 f7                	cmp    edi,esi
c0026a21:	76 15                	jbe    c0026a38 <__udivdi3+0x34>
c0026a23:	89 e8                	mov    eax,ebp
c0026a25:	89 f2                	mov    edx,esi
c0026a27:	f7 f7                	div    edi
c0026a29:	31 db                	xor    ebx,ebx
c0026a2b:	89 da                	mov    edx,ebx
c0026a2d:	83 c4 1c             	add    esp,0x1c
c0026a30:	5b                   	pop    ebx
c0026a31:	5e                   	pop    esi
c0026a32:	5f                   	pop    edi
c0026a33:	5d                   	pop    ebp
c0026a34:	c3                   	ret    
c0026a35:	8d 76 00             	lea    esi,[esi+0x0]
c0026a38:	89 f9                	mov    ecx,edi
c0026a3a:	85 ff                	test   edi,edi
c0026a3c:	75 0b                	jne    c0026a49 <__udivdi3+0x45>
c0026a3e:	b8 01 00 00 00       	mov    eax,0x1
c0026a43:	31 d2                	xor    edx,edx
c0026a45:	f7 f7                	div    edi
c0026a47:	89 c1                	mov    ecx,eax
c0026a49:	31 d2                	xor    edx,edx
c0026a4b:	89 f0                	mov    eax,esi
c0026a4d:	f7 f1                	div    ecx
c0026a4f:	89 c3                	mov    ebx,eax
c0026a51:	89 e8                	mov    eax,ebp
c0026a53:	f7 f1                	div    ecx
c0026a55:	89 da                	mov    edx,ebx
c0026a57:	83 c4 1c             	add    esp,0x1c
c0026a5a:	5b                   	pop    ebx
c0026a5b:	5e                   	pop    esi
c0026a5c:	5f                   	pop    edi
c0026a5d:	5d                   	pop    ebp
c0026a5e:	c3                   	ret    
c0026a5f:	90                   	nop
c0026a60:	39 f2                	cmp    edx,esi
c0026a62:	77 1c                	ja     c0026a80 <__udivdi3+0x7c>
c0026a64:	0f bd da             	bsr    ebx,edx
c0026a67:	83 f3 1f             	xor    ebx,0x1f
c0026a6a:	75 24                	jne    c0026a90 <__udivdi3+0x8c>
c0026a6c:	39 f2                	cmp    edx,esi
c0026a6e:	72 08                	jb     c0026a78 <__udivdi3+0x74>
c0026a70:	39 ef                	cmp    edi,ebp
c0026a72:	0f 87 84 00 00 00    	ja     c0026afc <__udivdi3+0xf8>
c0026a78:	b8 01 00 00 00       	mov    eax,0x1
c0026a7d:	eb ac                	jmp    c0026a2b <__udivdi3+0x27>
c0026a7f:	90                   	nop
c0026a80:	31 db                	xor    ebx,ebx
c0026a82:	31 c0                	xor    eax,eax
c0026a84:	89 da                	mov    edx,ebx
c0026a86:	83 c4 1c             	add    esp,0x1c
c0026a89:	5b                   	pop    ebx
c0026a8a:	5e                   	pop    esi
c0026a8b:	5f                   	pop    edi
c0026a8c:	5d                   	pop    ebp
c0026a8d:	c3                   	ret    
c0026a8e:	66 90                	xchg   ax,ax
c0026a90:	b8 20 00 00 00       	mov    eax,0x20
c0026a95:	29 d8                	sub    eax,ebx
c0026a97:	88 d9                	mov    cl,bl
c0026a99:	d3 e2                	shl    edx,cl
c0026a9b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a9f:	89 fa                	mov    edx,edi
c0026aa1:	88 c1                	mov    cl,al
c0026aa3:	d3 ea                	shr    edx,cl
c0026aa5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026aa9:	09 d1                	or     ecx,edx
c0026aab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026aaf:	88 d9                	mov    cl,bl
c0026ab1:	d3 e7                	shl    edi,cl
c0026ab3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026ab7:	89 f7                	mov    edi,esi
c0026ab9:	88 c1                	mov    cl,al
c0026abb:	d3 ef                	shr    edi,cl
c0026abd:	88 d9                	mov    cl,bl
c0026abf:	d3 e6                	shl    esi,cl
c0026ac1:	89 ea                	mov    edx,ebp
c0026ac3:	88 c1                	mov    cl,al
c0026ac5:	d3 ea                	shr    edx,cl
c0026ac7:	09 d6                	or     esi,edx
c0026ac9:	89 f0                	mov    eax,esi
c0026acb:	89 fa                	mov    edx,edi
c0026acd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026ad1:	89 d7                	mov    edi,edx
c0026ad3:	89 c6                	mov    esi,eax
c0026ad5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ad9:	39 d7                	cmp    edi,edx
c0026adb:	72 13                	jb     c0026af0 <__udivdi3+0xec>
c0026add:	74 09                	je     c0026ae8 <__udivdi3+0xe4>
c0026adf:	89 f0                	mov    eax,esi
c0026ae1:	31 db                	xor    ebx,ebx
c0026ae3:	e9 43 ff ff ff       	jmp    c0026a2b <__udivdi3+0x27>
c0026ae8:	88 d9                	mov    cl,bl
c0026aea:	d3 e5                	shl    ebp,cl
c0026aec:	39 c5                	cmp    ebp,eax
c0026aee:	73 ef                	jae    c0026adf <__udivdi3+0xdb>
c0026af0:	8d 46 ff             	lea    eax,[esi-0x1]
c0026af3:	31 db                	xor    ebx,ebx
c0026af5:	e9 31 ff ff ff       	jmp    c0026a2b <__udivdi3+0x27>
c0026afa:	66 90                	xchg   ax,ax
c0026afc:	31 c0                	xor    eax,eax
c0026afe:	e9 28 ff ff ff       	jmp    c0026a2b <__udivdi3+0x27>
c0026b03:	90                   	nop

c0026b04 <__umoddi3>:
c0026b04:	55                   	push   ebp
c0026b05:	57                   	push   edi
c0026b06:	56                   	push   esi
c0026b07:	53                   	push   ebx
c0026b08:	83 ec 1c             	sub    esp,0x1c
c0026b0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026b0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026b17:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026b1b:	89 da                	mov    edx,ebx
c0026b1d:	85 c0                	test   eax,eax
c0026b1f:	75 37                	jne    c0026b58 <__umoddi3+0x54>
c0026b21:	39 df                	cmp    edi,ebx
c0026b23:	76 13                	jbe    c0026b38 <__umoddi3+0x34>
c0026b25:	89 f0                	mov    eax,esi
c0026b27:	f7 f7                	div    edi
c0026b29:	89 d0                	mov    eax,edx
c0026b2b:	31 d2                	xor    edx,edx
c0026b2d:	83 c4 1c             	add    esp,0x1c
c0026b30:	5b                   	pop    ebx
c0026b31:	5e                   	pop    esi
c0026b32:	5f                   	pop    edi
c0026b33:	5d                   	pop    ebp
c0026b34:	c3                   	ret    
c0026b35:	8d 76 00             	lea    esi,[esi+0x0]
c0026b38:	89 fd                	mov    ebp,edi
c0026b3a:	85 ff                	test   edi,edi
c0026b3c:	75 0b                	jne    c0026b49 <__umoddi3+0x45>
c0026b3e:	b8 01 00 00 00       	mov    eax,0x1
c0026b43:	31 d2                	xor    edx,edx
c0026b45:	f7 f7                	div    edi
c0026b47:	89 c5                	mov    ebp,eax
c0026b49:	89 d8                	mov    eax,ebx
c0026b4b:	31 d2                	xor    edx,edx
c0026b4d:	f7 f5                	div    ebp
c0026b4f:	89 f0                	mov    eax,esi
c0026b51:	f7 f5                	div    ebp
c0026b53:	89 d0                	mov    eax,edx
c0026b55:	eb d4                	jmp    c0026b2b <__umoddi3+0x27>
c0026b57:	90                   	nop
c0026b58:	89 f1                	mov    ecx,esi
c0026b5a:	39 d8                	cmp    eax,ebx
c0026b5c:	76 0a                	jbe    c0026b68 <__umoddi3+0x64>
c0026b5e:	89 f0                	mov    eax,esi
c0026b60:	83 c4 1c             	add    esp,0x1c
c0026b63:	5b                   	pop    ebx
c0026b64:	5e                   	pop    esi
c0026b65:	5f                   	pop    edi
c0026b66:	5d                   	pop    ebp
c0026b67:	c3                   	ret    
c0026b68:	0f bd e8             	bsr    ebp,eax
c0026b6b:	83 f5 1f             	xor    ebp,0x1f
c0026b6e:	75 1c                	jne    c0026b8c <__umoddi3+0x88>
c0026b70:	39 d8                	cmp    eax,ebx
c0026b72:	72 04                	jb     c0026b78 <__umoddi3+0x74>
c0026b74:	39 f7                	cmp    edi,esi
c0026b76:	77 08                	ja     c0026b80 <__umoddi3+0x7c>
c0026b78:	89 da                	mov    edx,ebx
c0026b7a:	29 fe                	sub    esi,edi
c0026b7c:	19 c2                	sbb    edx,eax
c0026b7e:	89 f1                	mov    ecx,esi
c0026b80:	89 c8                	mov    eax,ecx
c0026b82:	83 c4 1c             	add    esp,0x1c
c0026b85:	5b                   	pop    ebx
c0026b86:	5e                   	pop    esi
c0026b87:	5f                   	pop    edi
c0026b88:	5d                   	pop    ebp
c0026b89:	c3                   	ret    
c0026b8a:	66 90                	xchg   ax,ax
c0026b8c:	ba 20 00 00 00       	mov    edx,0x20
c0026b91:	29 ea                	sub    edx,ebp
c0026b93:	89 e9                	mov    ecx,ebp
c0026b95:	d3 e0                	shl    eax,cl
c0026b97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b9b:	89 f8                	mov    eax,edi
c0026b9d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026ba1:	88 d1                	mov    cl,dl
c0026ba3:	d3 e8                	shr    eax,cl
c0026ba5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026ba9:	09 c1                	or     ecx,eax
c0026bab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026baf:	89 e9                	mov    ecx,ebp
c0026bb1:	d3 e7                	shl    edi,cl
c0026bb3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026bb7:	89 d8                	mov    eax,ebx
c0026bb9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026bbd:	88 d1                	mov    cl,dl
c0026bbf:	d3 e8                	shr    eax,cl
c0026bc1:	89 c7                	mov    edi,eax
c0026bc3:	89 e9                	mov    ecx,ebp
c0026bc5:	d3 e3                	shl    ebx,cl
c0026bc7:	89 f0                	mov    eax,esi
c0026bc9:	88 d1                	mov    cl,dl
c0026bcb:	d3 e8                	shr    eax,cl
c0026bcd:	09 d8                	or     eax,ebx
c0026bcf:	89 e9                	mov    ecx,ebp
c0026bd1:	d3 e6                	shl    esi,cl
c0026bd3:	89 f3                	mov    ebx,esi
c0026bd5:	89 fa                	mov    edx,edi
c0026bd7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026bdb:	89 d1                	mov    ecx,edx
c0026bdd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026be1:	89 c6                	mov    esi,eax
c0026be3:	89 d7                	mov    edi,edx
c0026be5:	39 d1                	cmp    ecx,edx
c0026be7:	72 27                	jb     c0026c10 <__umoddi3+0x10c>
c0026be9:	74 21                	je     c0026c0c <__umoddi3+0x108>
c0026beb:	89 ca                	mov    edx,ecx
c0026bed:	29 f3                	sub    ebx,esi
c0026bef:	19 fa                	sbb    edx,edi
c0026bf1:	89 d0                	mov    eax,edx
c0026bf3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026bf7:	d3 e0                	shl    eax,cl
c0026bf9:	89 e9                	mov    ecx,ebp
c0026bfb:	d3 eb                	shr    ebx,cl
c0026bfd:	09 d8                	or     eax,ebx
c0026bff:	d3 ea                	shr    edx,cl
c0026c01:	83 c4 1c             	add    esp,0x1c
c0026c04:	5b                   	pop    ebx
c0026c05:	5e                   	pop    esi
c0026c06:	5f                   	pop    edi
c0026c07:	5d                   	pop    ebp
c0026c08:	c3                   	ret    
c0026c09:	8d 76 00             	lea    esi,[esi+0x0]
c0026c0c:	39 c3                	cmp    ebx,eax
c0026c0e:	73 db                	jae    c0026beb <__umoddi3+0xe7>
c0026c10:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026c14:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026c18:	89 d7                	mov    edi,edx
c0026c1a:	89 c6                	mov    esi,eax
c0026c1c:	eb cd                	jmp    c0026beb <__umoddi3+0xe7>

c0026c1e <__addsf3>:
c0026c1e:	55                   	push   ebp
c0026c1f:	89 e5                	mov    ebp,esp
c0026c21:	57                   	push   edi
c0026c22:	56                   	push   esi
c0026c23:	53                   	push   ebx
c0026c24:	83 ec 08             	sub    esp,0x8
c0026c27:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c2a:	89 fa                	mov    edx,edi
c0026c2c:	89 f8                	mov    eax,edi
c0026c2e:	c1 f8 17             	sar    eax,0x17
c0026c31:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c34:	c1 e2 08             	shl    edx,0x8
c0026c37:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c3d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c40:	89 de                	mov    esi,ebx
c0026c42:	c1 fe 17             	sar    esi,0x17
c0026c45:	c1 e3 08             	shl    ebx,0x8
c0026c48:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c4e:	31 f0                	xor    eax,esi
c0026c50:	0f 88 3b 01 00 00    	js     c0026d91 <__addsf3+0x173>
c0026c56:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c59:	29 f1                	sub    ecx,esi
c0026c5b:	85 c9                	test   ecx,ecx
c0026c5d:	7e 54                	jle    c0026cb3 <__addsf3+0x95>
c0026c5f:	89 f0                	mov    eax,esi
c0026c61:	84 c0                	test   al,al
c0026c63:	75 10                	jne    c0026c75 <__addsf3+0x57>
c0026c65:	85 db                	test   ebx,ebx
c0026c67:	0f 84 aa 02 00 00    	je     c0026f17 <__addsf3+0x2f9>
c0026c6d:	49                   	dec    ecx
c0026c6e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c71:	74 38                	je     c0026cab <__addsf3+0x8d>
c0026c73:	eb 13                	jmp    c0026c88 <__addsf3+0x6a>
c0026c75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c78:	f7 d0                	not    eax
c0026c7a:	84 c0                	test   al,al
c0026c7c:	0f 84 95 02 00 00    	je     c0026f17 <__addsf3+0x2f9>
c0026c82:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c88:	83 f9 1f             	cmp    ecx,0x1f
c0026c8b:	0f 8f 86 02 00 00    	jg     c0026f17 <__addsf3+0x2f9>
c0026c91:	89 de                	mov    esi,ebx
c0026c93:	d3 ee                	shr    esi,cl
c0026c95:	b8 20 00 00 00       	mov    eax,0x20
c0026c9a:	29 c8                	sub    eax,ecx
c0026c9c:	89 c1                	mov    ecx,eax
c0026c9e:	d3 e3                	shl    ebx,cl
c0026ca0:	31 c0                	xor    eax,eax
c0026ca2:	85 db                	test   ebx,ebx
c0026ca4:	0f 95 c0             	setne  al
c0026ca7:	09 f0                	or     eax,esi
c0026ca9:	01 d0                	add    eax,edx
c0026cab:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026cae:	e9 b6 00 00 00       	jmp    c0026d69 <__addsf3+0x14b>
c0026cb3:	74 5c                	je     c0026d11 <__addsf3+0xf3>
c0026cb5:	89 f1                	mov    ecx,esi
c0026cb7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026cba:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cbd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026cc1:	75 14                	jne    c0026cd7 <__addsf3+0xb9>
c0026cc3:	85 d2                	test   edx,edx
c0026cc5:	0f 84 4c 02 00 00    	je     c0026f17 <__addsf3+0x2f9>
c0026ccb:	49                   	dec    ecx
c0026ccc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026ccf:	0f 84 94 00 00 00    	je     c0026d69 <__addsf3+0x14b>
c0026cd5:	eb 12                	jmp    c0026ce9 <__addsf3+0xcb>
c0026cd7:	89 f0                	mov    eax,esi
c0026cd9:	f7 d0                	not    eax
c0026cdb:	84 c0                	test   al,al
c0026cdd:	0f 84 34 02 00 00    	je     c0026f17 <__addsf3+0x2f9>
c0026ce3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ce9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cec:	83 f9 1f             	cmp    ecx,0x1f
c0026cef:	0f 8f 22 02 00 00    	jg     c0026f17 <__addsf3+0x2f9>
c0026cf5:	89 d7                	mov    edi,edx
c0026cf7:	d3 ef                	shr    edi,cl
c0026cf9:	b8 20 00 00 00       	mov    eax,0x20
c0026cfe:	29 c8                	sub    eax,ecx
c0026d00:	89 c1                	mov    ecx,eax
c0026d02:	d3 e2                	shl    edx,cl
c0026d04:	31 c0                	xor    eax,eax
c0026d06:	85 d2                	test   edx,edx
c0026d08:	0f 95 c0             	setne  al
c0026d0b:	09 f8                	or     eax,edi
c0026d0d:	01 d8                	add    eax,ebx
c0026d0f:	eb 58                	jmp    c0026d69 <__addsf3+0x14b>
c0026d11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d14:	8d 70 01             	lea    esi,[eax+0x1]
c0026d17:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026d1d:	75 32                	jne    c0026d51 <__addsf3+0x133>
c0026d1f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d23:	75 1f                	jne    c0026d44 <__addsf3+0x126>
c0026d25:	85 d2                	test   edx,edx
c0026d27:	0f 84 e0 01 00 00    	je     c0026f0d <__addsf3+0x2ef>
c0026d2d:	85 db                	test   ebx,ebx
c0026d2f:	0f 84 e2 01 00 00    	je     c0026f17 <__addsf3+0x2f9>
c0026d35:	89 d0                	mov    eax,edx
c0026d37:	01 d8                	add    eax,ebx
c0026d39:	0f 89 a9 01 00 00    	jns    c0026ee8 <__addsf3+0x2ca>
c0026d3f:	e9 9d 01 00 00       	jmp    c0026ee1 <__addsf3+0x2c3>
c0026d44:	85 d2                	test   edx,edx
c0026d46:	0f 85 cb 01 00 00    	jne    c0026f17 <__addsf3+0x2f9>
c0026d4c:	e9 bc 01 00 00       	jmp    c0026f0d <__addsf3+0x2ef>
c0026d51:	31 c0                	xor    eax,eax
c0026d53:	89 f1                	mov    ecx,esi
c0026d55:	f7 d1                	not    ecx
c0026d57:	84 c9                	test   cl,cl
c0026d59:	0f 84 90 01 00 00    	je     c0026eef <__addsf3+0x2d1>
c0026d5f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d62:	d1 e8                	shr    eax,1
c0026d64:	e9 86 01 00 00       	jmp    c0026eef <__addsf3+0x2d1>
c0026d69:	85 c0                	test   eax,eax
c0026d6b:	0f 89 7e 01 00 00    	jns    c0026eef <__addsf3+0x2d1>
c0026d71:	46                   	inc    esi
c0026d72:	89 f2                	mov    edx,esi
c0026d74:	f7 d2                	not    edx
c0026d76:	84 d2                	test   dl,dl
c0026d78:	0f 84 6f 01 00 00    	je     c0026eed <__addsf3+0x2cf>
c0026d7e:	89 c2                	mov    edx,eax
c0026d80:	83 e2 01             	and    edx,0x1
c0026d83:	d1 e8                	shr    eax,1
c0026d85:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d8a:	09 d0                	or     eax,edx
c0026d8c:	e9 5e 01 00 00       	jmp    c0026eef <__addsf3+0x2d1>
c0026d91:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d95:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d98:	89 f0                	mov    eax,esi
c0026d9a:	0f b6 c0             	movzx  eax,al
c0026d9d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026da0:	29 c1                	sub    ecx,eax
c0026da2:	85 c9                	test   ecx,ecx
c0026da4:	7e 55                	jle    c0026dfb <__addsf3+0x1dd>
c0026da6:	85 c0                	test   eax,eax
c0026da8:	75 11                	jne    c0026dbb <__addsf3+0x19d>
c0026daa:	85 db                	test   ebx,ebx
c0026dac:	0f 84 65 01 00 00    	je     c0026f17 <__addsf3+0x2f9>
c0026db2:	49                   	dec    ecx
c0026db3:	75 19                	jne    c0026dce <__addsf3+0x1b0>
c0026db5:	89 d0                	mov    eax,edx
c0026db7:	29 d8                	sub    eax,ebx
c0026db9:	eb 38                	jmp    c0026df3 <__addsf3+0x1d5>
c0026dbb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026dbe:	f7 d0                	not    eax
c0026dc0:	84 c0                	test   al,al
c0026dc2:	0f 84 4f 01 00 00    	je     c0026f17 <__addsf3+0x2f9>
c0026dc8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026dce:	83 f9 1f             	cmp    ecx,0x1f
c0026dd1:	0f 8f 40 01 00 00    	jg     c0026f17 <__addsf3+0x2f9>
c0026dd7:	89 de                	mov    esi,ebx
c0026dd9:	d3 ee                	shr    esi,cl
c0026ddb:	b8 20 00 00 00       	mov    eax,0x20
c0026de0:	29 c8                	sub    eax,ecx
c0026de2:	89 c1                	mov    ecx,eax
c0026de4:	d3 e3                	shl    ebx,cl
c0026de6:	31 c0                	xor    eax,eax
c0026de8:	85 db                	test   ebx,ebx
c0026dea:	0f 95 c0             	setne  al
c0026ded:	09 f0                	or     eax,esi
c0026def:	29 c2                	sub    edx,eax
c0026df1:	89 d0                	mov    eax,edx
c0026df3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026df6:	e9 af 00 00 00       	jmp    c0026eaa <__addsf3+0x28c>
c0026dfb:	74 5c                	je     c0026e59 <__addsf3+0x23b>
c0026dfd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026e00:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e03:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e07:	75 14                	jne    c0026e1d <__addsf3+0x1ff>
c0026e09:	85 d2                	test   edx,edx
c0026e0b:	0f 84 06 01 00 00    	je     c0026f17 <__addsf3+0x2f9>
c0026e11:	48                   	dec    eax
c0026e12:	75 1b                	jne    c0026e2f <__addsf3+0x211>
c0026e14:	89 d8                	mov    eax,ebx
c0026e16:	29 d0                	sub    eax,edx
c0026e18:	e9 8d 00 00 00       	jmp    c0026eaa <__addsf3+0x28c>
c0026e1d:	89 f1                	mov    ecx,esi
c0026e1f:	f7 d1                	not    ecx
c0026e21:	84 c9                	test   cl,cl
c0026e23:	0f 84 ee 00 00 00    	je     c0026f17 <__addsf3+0x2f9>
c0026e29:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e2f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e32:	83 f8 1f             	cmp    eax,0x1f
c0026e35:	0f 8f dc 00 00 00    	jg     c0026f17 <__addsf3+0x2f9>
c0026e3b:	89 d7                	mov    edi,edx
c0026e3d:	88 c1                	mov    cl,al
c0026e3f:	d3 ef                	shr    edi,cl
c0026e41:	b9 20 00 00 00       	mov    ecx,0x20
c0026e46:	29 c1                	sub    ecx,eax
c0026e48:	d3 e2                	shl    edx,cl
c0026e4a:	31 c0                	xor    eax,eax
c0026e4c:	85 d2                	test   edx,edx
c0026e4e:	0f 95 c0             	setne  al
c0026e51:	09 f8                	or     eax,edi
c0026e53:	29 c3                	sub    ebx,eax
c0026e55:	89 d8                	mov    eax,ebx
c0026e57:	eb 51                	jmp    c0026eaa <__addsf3+0x28c>
c0026e59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e5c:	40                   	inc    eax
c0026e5d:	a8 fe                	test   al,0xfe
c0026e5f:	75 3d                	jne    c0026e9e <__addsf3+0x280>
c0026e61:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e65:	0f 85 a7 00 00 00    	jne    c0026f12 <__addsf3+0x2f4>
c0026e6b:	85 d2                	test   edx,edx
c0026e6d:	75 12                	jne    c0026e81 <__addsf3+0x263>
c0026e6f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e72:	85 db                	test   ebx,ebx
c0026e74:	0f 85 9d 00 00 00    	jne    c0026f17 <__addsf3+0x2f9>
c0026e7a:	31 ff                	xor    edi,edi
c0026e7c:	e9 96 00 00 00       	jmp    c0026f17 <__addsf3+0x2f9>
c0026e81:	85 db                	test   ebx,ebx
c0026e83:	0f 84 8e 00 00 00    	je     c0026f17 <__addsf3+0x2f9>
c0026e89:	89 d0                	mov    eax,edx
c0026e8b:	29 d8                	sub    eax,ebx
c0026e8d:	79 06                	jns    c0026e95 <__addsf3+0x277>
c0026e8f:	89 d8                	mov    eax,ebx
c0026e91:	29 d0                	sub    eax,edx
c0026e93:	eb 5a                	jmp    c0026eef <__addsf3+0x2d1>
c0026e95:	bf 00 00 00 00       	mov    edi,0x0
c0026e9a:	74 7b                	je     c0026f17 <__addsf3+0x2f9>
c0026e9c:	eb 4a                	jmp    c0026ee8 <__addsf3+0x2ca>
c0026e9e:	89 d0                	mov    eax,edx
c0026ea0:	29 d8                	sub    eax,ebx
c0026ea2:	79 12                	jns    c0026eb6 <__addsf3+0x298>
c0026ea4:	89 d8                	mov    eax,ebx
c0026ea6:	29 d0                	sub    eax,edx
c0026ea8:	eb 09                	jmp    c0026eb3 <__addsf3+0x295>
c0026eaa:	85 c0                	test   eax,eax
c0026eac:	79 41                	jns    c0026eef <__addsf3+0x2d1>
c0026eae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026eb3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026eb6:	31 f6                	xor    esi,esi
c0026eb8:	85 c0                	test   eax,eax
c0026eba:	74 33                	je     c0026eef <__addsf3+0x2d1>
c0026ebc:	0f bd c8             	bsr    ecx,eax
c0026ebf:	83 f1 1f             	xor    ecx,0x1f
c0026ec2:	d3 e0                	shl    eax,cl
c0026ec4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026ec8:	39 ca                	cmp    edx,ecx
c0026eca:	7f 10                	jg     c0026edc <__addsf3+0x2be>
c0026ecc:	29 d1                	sub    ecx,edx
c0026ece:	41                   	inc    ecx
c0026ecf:	d3 e8                	shr    eax,cl
c0026ed1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ed4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026eda:	eb 13                	jmp    c0026eef <__addsf3+0x2d1>
c0026edc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026edf:	29 ce                	sub    esi,ecx
c0026ee1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ee6:	eb 07                	jmp    c0026eef <__addsf3+0x2d1>
c0026ee8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026eeb:	eb 02                	jmp    c0026eef <__addsf3+0x2d1>
c0026eed:	31 c0                	xor    eax,eax
c0026eef:	89 c2                	mov    edx,eax
c0026ef1:	c1 ea 08             	shr    edx,0x8
c0026ef4:	a8 7f                	test   al,0x7f
c0026ef6:	0f 95 c1             	setne  cl
c0026ef9:	09 d1                	or     ecx,edx
c0026efb:	83 e1 01             	and    ecx,0x1
c0026efe:	c1 e8 07             	shr    eax,0x7
c0026f01:	21 c8                	and    eax,ecx
c0026f03:	c1 e6 17             	shl    esi,0x17
c0026f06:	09 d6                	or     esi,edx
c0026f08:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026f0b:	eb 0a                	jmp    c0026f17 <__addsf3+0x2f9>
c0026f0d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f10:	eb 05                	jmp    c0026f17 <__addsf3+0x2f9>
c0026f12:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026f17:	89 f8                	mov    eax,edi
c0026f19:	5a                   	pop    edx
c0026f1a:	59                   	pop    ecx
c0026f1b:	5b                   	pop    ebx
c0026f1c:	5e                   	pop    esi
c0026f1d:	5f                   	pop    edi
c0026f1e:	5d                   	pop    ebp
c0026f1f:	c3                   	ret    

c0026f20 <__subsf3>:
c0026f20:	55                   	push   ebp
c0026f21:	89 e5                	mov    ebp,esp
c0026f23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f26:	05 00 00 00 80       	add    eax,0x80000000
c0026f2b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026f2e:	5d                   	pop    ebp
c0026f2f:	e9 ea fc ff ff       	jmp    c0026c1e <__addsf3>

c0026f34 <__negsf2>:
c0026f34:	55                   	push   ebp
c0026f35:	89 e5                	mov    ebp,esp
c0026f37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026f3a:	05 00 00 00 80       	add    eax,0x80000000
c0026f3f:	5d                   	pop    ebp
c0026f40:	c3                   	ret    

c0026f41 <__mulsf3>:
c0026f41:	55                   	push   ebp
c0026f42:	89 e5                	mov    ebp,esp
c0026f44:	57                   	push   edi
c0026f45:	56                   	push   esi
c0026f46:	53                   	push   ebx
c0026f47:	83 ec 1c             	sub    esp,0x1c
c0026f4a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f4d:	89 f0                	mov    eax,esi
c0026f4f:	89 f1                	mov    ecx,esi
c0026f51:	c1 f9 17             	sar    ecx,0x17
c0026f54:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f57:	c1 e0 08             	shl    eax,0x8
c0026f5a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f5f:	89 c1                	mov    ecx,eax
c0026f61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f64:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f67:	89 c7                	mov    edi,eax
c0026f69:	c1 ff 17             	sar    edi,0x17
c0026f6c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f70:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f73:	89 f8                	mov    eax,edi
c0026f75:	0f b6 c0             	movzx  eax,al
c0026f78:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f7b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f7f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f82:	42                   	inc    edx
c0026f83:	80 e2 fe             	and    dl,0xfe
c0026f86:	75 7b                	jne    c0027003 <__mulsf3+0xc2>
c0026f88:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f8c:	74 54                	je     c0026fe2 <__mulsf3+0xa1>
c0026f8e:	85 c9                	test   ecx,ecx
c0026f90:	0f 85 64 01 00 00    	jne    c00270fa <__mulsf3+0x1b9>
c0026f96:	8d 57 01             	lea    edx,[edi+0x1]
c0026f99:	80 e2 fe             	and    dl,0xfe
c0026f9c:	75 1f                	jne    c0026fbd <__mulsf3+0x7c>
c0026f9e:	85 c0                	test   eax,eax
c0026fa0:	b8 00 00 00 00       	mov    eax,0x0
c0026fa5:	74 29                	je     c0026fd0 <__mulsf3+0x8f>
c0026fa7:	53                   	push   ebx
c0026fa8:	53                   	push   ebx
c0026fa9:	50                   	push   eax
c0026faa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fad:	e8 96 05 00 00       	call   c0027548 <__nesf2>
c0026fb2:	83 c4 10             	add    esp,0x10
c0026fb5:	85 c0                	test   eax,eax
c0026fb7:	0f 85 3a 01 00 00    	jne    c00270f7 <__mulsf3+0x1b6>
c0026fbd:	85 ff                	test   edi,edi
c0026fbf:	0f 89 35 01 00 00    	jns    c00270fa <__mulsf3+0x1b9>
c0026fc5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026fcb:	e9 2a 01 00 00       	jmp    c00270fa <__mulsf3+0x1b9>
c0026fd0:	51                   	push   ecx
c0026fd1:	51                   	push   ecx
c0026fd2:	50                   	push   eax
c0026fd3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fd6:	e8 6d 05 00 00       	call   c0027548 <__nesf2>
c0026fdb:	83 c4 10             	add    esp,0x10
c0026fde:	85 c0                	test   eax,eax
c0026fe0:	eb 15                	jmp    c0026ff7 <__mulsf3+0xb6>
c0026fe2:	85 c9                	test   ecx,ecx
c0026fe4:	74 0b                	je     c0026ff1 <__mulsf3+0xb0>
c0026fe6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026fe9:	01 c9                	add    ecx,ecx
c0026feb:	78 16                	js     c0027003 <__mulsf3+0xc2>
c0026fed:	89 d3                	mov    ebx,edx
c0026fef:	eb f5                	jmp    c0026fe6 <__mulsf3+0xa5>
c0026ff1:	89 f8                	mov    eax,edi
c0026ff3:	f7 d0                	not    eax
c0026ff5:	84 c0                	test   al,al
c0026ff7:	75 c4                	jne    c0026fbd <__mulsf3+0x7c>
c0026ff9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026ffe:	e9 f7 00 00 00       	jmp    c00270fa <__mulsf3+0x1b9>
c0027003:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027006:	c1 e6 08             	shl    esi,0x8
c0027009:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002700f:	8d 57 01             	lea    edx,[edi+0x1]
c0027012:	80 e2 fe             	and    dl,0xfe
c0027015:	75 63                	jne    c002707a <__mulsf3+0x139>
c0027017:	85 c0                	test   eax,eax
c0027019:	74 2f                	je     c002704a <__mulsf3+0x109>
c002701b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002701f:	0f 89 d2 00 00 00    	jns    c00270f7 <__mulsf3+0x1b6>
c0027025:	52                   	push   edx
c0027026:	52                   	push   edx
c0027027:	6a 00                	push   0x0
c0027029:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002702c:	e8 dc 04 00 00       	call   c002750d <__eqsf2>
c0027031:	83 c4 10             	add    esp,0x10
c0027034:	85 c0                	test   eax,eax
c0027036:	0f 85 bb 00 00 00    	jne    c00270f7 <__mulsf3+0x1b6>
c002703c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002703f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027045:	e9 b0 00 00 00       	jmp    c00270fa <__mulsf3+0x1b9>
c002704a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002704d:	50                   	push   eax
c002704e:	50                   	push   eax
c002704f:	6a 00                	push   0x0
c0027051:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027054:	e8 b4 04 00 00       	call   c002750d <__eqsf2>
c0027059:	83 c4 10             	add    esp,0x10
c002705c:	85 c0                	test   eax,eax
c002705e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027061:	75 0c                	jne    c002706f <__mulsf3+0x12e>
c0027063:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027067:	0f 89 8a 00 00 00    	jns    c00270f7 <__mulsf3+0x1b6>
c002706d:	eb cd                	jmp    c002703c <__mulsf3+0xfb>
c002706f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027072:	01 f6                	add    esi,esi
c0027074:	78 04                	js     c002707a <__mulsf3+0x139>
c0027076:	89 c3                	mov    ebx,eax
c0027078:	eb f5                	jmp    c002706f <__mulsf3+0x12e>
c002707a:	89 c8                	mov    eax,ecx
c002707c:	0d 00 00 00 80       	or     eax,0x80000000
c0027081:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027087:	f7 e6                	mul    esi
c0027089:	85 c0                	test   eax,eax
c002708b:	0f 95 c0             	setne  al
c002708e:	0f b6 c0             	movzx  eax,al
c0027091:	09 c2                	or     edx,eax
c0027093:	78 03                	js     c0027098 <__mulsf3+0x157>
c0027095:	01 d2                	add    edx,edx
c0027097:	4b                   	dec    ebx
c0027098:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002709e:	7f 22                	jg     c00270c2 <__mulsf3+0x181>
c00270a0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00270a6:	85 db                	test   ebx,ebx
c00270a8:	7f 23                	jg     c00270cd <__mulsf3+0x18c>
c00270aa:	83 fb e9             	cmp    ebx,0xffffffe9
c00270ad:	7c 1a                	jl     c00270c9 <__mulsf3+0x188>
c00270af:	81 ca 00 00 00 80    	or     edx,0x80000000
c00270b5:	b9 01 00 00 00       	mov    ecx,0x1
c00270ba:	29 d9                	sub    ecx,ebx
c00270bc:	d3 ea                	shr    edx,cl
c00270be:	31 db                	xor    ebx,ebx
c00270c0:	eb 0b                	jmp    c00270cd <__mulsf3+0x18c>
c00270c2:	bb ff 00 00 00       	mov    ebx,0xff
c00270c7:	eb 02                	jmp    c00270cb <__mulsf3+0x18a>
c00270c9:	31 db                	xor    ebx,ebx
c00270cb:	31 d2                	xor    edx,edx
c00270cd:	89 d0                	mov    eax,edx
c00270cf:	c1 e8 08             	shr    eax,0x8
c00270d2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00270d5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00270db:	09 fb                	or     ebx,edi
c00270dd:	c1 e3 17             	shl    ebx,0x17
c00270e0:	09 c3                	or     ebx,eax
c00270e2:	f6 c2 7f             	test   dl,0x7f
c00270e5:	0f 95 c1             	setne  cl
c00270e8:	09 c8                	or     eax,ecx
c00270ea:	83 e0 01             	and    eax,0x1
c00270ed:	c1 ea 07             	shr    edx,0x7
c00270f0:	21 c2                	and    edx,eax
c00270f2:	8d 34 13             	lea    esi,[ebx+edx*1]
c00270f5:	eb 03                	jmp    c00270fa <__mulsf3+0x1b9>
c00270f7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00270fa:	89 f0                	mov    eax,esi
c00270fc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270ff:	5b                   	pop    ebx
c0027100:	5e                   	pop    esi
c0027101:	5f                   	pop    edi
c0027102:	5d                   	pop    ebp
c0027103:	c3                   	ret    

c0027104 <__divsf3>:
c0027104:	55                   	push   ebp
c0027105:	89 e5                	mov    ebp,esp
c0027107:	57                   	push   edi
c0027108:	56                   	push   esi
c0027109:	53                   	push   ebx
c002710a:	83 ec 1c             	sub    esp,0x1c
c002710d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027110:	89 d8                	mov    eax,ebx
c0027112:	89 d9                	mov    ecx,ebx
c0027114:	c1 f9 17             	sar    ecx,0x17
c0027117:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002711a:	c1 e0 08             	shl    eax,0x8
c002711d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027122:	89 c1                	mov    ecx,eax
c0027124:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027127:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002712a:	89 c7                	mov    edi,eax
c002712c:	c1 ff 17             	sar    edi,0x17
c002712f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027133:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027136:	89 f8                	mov    eax,edi
c0027138:	0f b6 c0             	movzx  eax,al
c002713b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002713e:	29 c6                	sub    esi,eax
c0027140:	83 c6 7f             	add    esi,0x7f
c0027143:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027146:	42                   	inc    edx
c0027147:	80 e2 fe             	and    dl,0xfe
c002714a:	0f 85 9c 00 00 00    	jne    c00271ec <__divsf3+0xe8>
c0027150:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027154:	74 33                	je     c0027189 <__divsf3+0x85>
c0027156:	85 c9                	test   ecx,ecx
c0027158:	0f 85 c7 01 00 00    	jne    c0027325 <__divsf3+0x221>
c002715e:	8d 57 01             	lea    edx,[edi+0x1]
c0027161:	80 e2 fe             	and    dl,0xfe
c0027164:	75 2f                	jne    c0027195 <__divsf3+0x91>
c0027166:	85 c0                	test   eax,eax
c0027168:	74 2b                	je     c0027195 <__divsf3+0x91>
c002716a:	51                   	push   ecx
c002716b:	51                   	push   ecx
c002716c:	6a 00                	push   0x0
c002716e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027171:	e8 d2 03 00 00       	call   c0027548 <__nesf2>
c0027176:	83 c4 10             	add    esp,0x10
c0027179:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002717c:	85 c0                	test   eax,eax
c002717e:	0f 85 a1 01 00 00    	jne    c0027325 <__divsf3+0x221>
c0027184:	e9 92 01 00 00       	jmp    c002731b <__divsf3+0x217>
c0027189:	85 c9                	test   ecx,ecx
c002718b:	75 1b                	jne    c00271a8 <__divsf3+0xa4>
c002718d:	8d 57 01             	lea    edx,[edi+0x1]
c0027190:	80 e2 fe             	and    dl,0xfe
c0027193:	74 1e                	je     c00271b3 <__divsf3+0xaf>
c0027195:	85 ff                	test   edi,edi
c0027197:	0f 89 88 01 00 00    	jns    c0027325 <__divsf3+0x221>
c002719d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00271a3:	e9 7d 01 00 00       	jmp    c0027325 <__divsf3+0x221>
c00271a8:	8d 56 ff             	lea    edx,[esi-0x1]
c00271ab:	01 c9                	add    ecx,ecx
c00271ad:	78 3d                	js     c00271ec <__divsf3+0xe8>
c00271af:	89 d6                	mov    esi,edx
c00271b1:	eb f5                	jmp    c00271a8 <__divsf3+0xa4>
c00271b3:	85 c0                	test   eax,eax
c00271b5:	b8 00 00 00 00       	mov    eax,0x0
c00271ba:	74 18                	je     c00271d4 <__divsf3+0xd0>
c00271bc:	52                   	push   edx
c00271bd:	52                   	push   edx
c00271be:	50                   	push   eax
c00271bf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271c2:	e8 81 03 00 00       	call   c0027548 <__nesf2>
c00271c7:	83 c4 10             	add    esp,0x10
c00271ca:	85 c0                	test   eax,eax
c00271cc:	0f 85 50 01 00 00    	jne    c0027322 <__divsf3+0x21e>
c00271d2:	eb c1                	jmp    c0027195 <__divsf3+0x91>
c00271d4:	56                   	push   esi
c00271d5:	56                   	push   esi
c00271d6:	50                   	push   eax
c00271d7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271da:	e8 69 03 00 00       	call   c0027548 <__nesf2>
c00271df:	83 c4 10             	add    esp,0x10
c00271e2:	85 c0                	test   eax,eax
c00271e4:	0f 84 31 01 00 00    	je     c002731b <__divsf3+0x217>
c00271ea:	eb a9                	jmp    c0027195 <__divsf3+0x91>
c00271ec:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00271ef:	c1 e3 08             	shl    ebx,0x8
c00271f2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271f8:	8d 57 01             	lea    edx,[edi+0x1]
c00271fb:	80 e2 fe             	and    dl,0xfe
c00271fe:	75 71                	jne    c0027271 <__divsf3+0x16d>
c0027200:	85 c0                	test   eax,eax
c0027202:	ba 00 00 00 00       	mov    edx,0x0
c0027207:	74 2f                	je     c0027238 <__divsf3+0x134>
c0027209:	51                   	push   ecx
c002720a:	51                   	push   ecx
c002720b:	52                   	push   edx
c002720c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002720f:	e8 f9 02 00 00       	call   c002750d <__eqsf2>
c0027214:	83 c4 10             	add    esp,0x10
c0027217:	85 c0                	test   eax,eax
c0027219:	0f 85 03 01 00 00    	jne    c0027322 <__divsf3+0x21e>
c002721f:	31 d2                	xor    edx,edx
c0027221:	89 d3                	mov    ebx,edx
c0027223:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027226:	31 f8                	xor    eax,edi
c0027228:	0f 89 f7 00 00 00    	jns    c0027325 <__divsf3+0x221>
c002722e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027233:	e9 ed 00 00 00       	jmp    c0027325 <__divsf3+0x221>
c0027238:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002723b:	50                   	push   eax
c002723c:	50                   	push   eax
c002723d:	52                   	push   edx
c002723e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027241:	e8 c7 02 00 00       	call   c002750d <__eqsf2>
c0027246:	83 c4 10             	add    esp,0x10
c0027249:	85 c0                	test   eax,eax
c002724b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002724e:	75 16                	jne    c0027266 <__divsf3+0x162>
c0027250:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027253:	31 fb                	xor    ebx,edi
c0027255:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002725b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027261:	e9 bf 00 00 00       	jmp    c0027325 <__divsf3+0x221>
c0027266:	8d 46 01             	lea    eax,[esi+0x1]
c0027269:	01 db                	add    ebx,ebx
c002726b:	78 04                	js     c0027271 <__divsf3+0x16d>
c002726d:	89 c6                	mov    esi,eax
c002726f:	eb f5                	jmp    c0027266 <__divsf3+0x162>
c0027271:	89 c8                	mov    eax,ecx
c0027273:	0d 00 00 00 80       	or     eax,0x80000000
c0027278:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002727e:	31 d2                	xor    edx,edx
c0027280:	39 d8                	cmp    eax,ebx
c0027282:	72 07                	jb     c002728b <__divsf3+0x187>
c0027284:	29 d8                	sub    eax,ebx
c0027286:	ba 01 00 00 00       	mov    edx,0x1
c002728b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027292:	01 d2                	add    edx,edx
c0027294:	89 c1                	mov    ecx,eax
c0027296:	01 c0                	add    eax,eax
c0027298:	85 c9                	test   ecx,ecx
c002729a:	78 04                	js     c00272a0 <__divsf3+0x19c>
c002729c:	39 c3                	cmp    ebx,eax
c002729e:	77 05                	ja     c00272a5 <__divsf3+0x1a1>
c00272a0:	29 d8                	sub    eax,ebx
c00272a2:	83 ca 01             	or     edx,0x1
c00272a5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00272a8:	75 e8                	jne    c0027292 <__divsf3+0x18e>
c00272aa:	85 c0                	test   eax,eax
c00272ac:	0f 95 c0             	setne  al
c00272af:	0f b6 c0             	movzx  eax,al
c00272b2:	c1 e2 06             	shl    edx,0x6
c00272b5:	09 c2                	or     edx,eax
c00272b7:	78 03                	js     c00272bc <__divsf3+0x1b8>
c00272b9:	01 d2                	add    edx,edx
c00272bb:	4e                   	dec    esi
c00272bc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00272c2:	7f 22                	jg     c00272e6 <__divsf3+0x1e2>
c00272c4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00272ca:	85 f6                	test   esi,esi
c00272cc:	7f 23                	jg     c00272f1 <__divsf3+0x1ed>
c00272ce:	83 fe e9             	cmp    esi,0xffffffe9
c00272d1:	7c 1a                	jl     c00272ed <__divsf3+0x1e9>
c00272d3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00272d9:	b9 01 00 00 00       	mov    ecx,0x1
c00272de:	29 f1                	sub    ecx,esi
c00272e0:	d3 ea                	shr    edx,cl
c00272e2:	31 f6                	xor    esi,esi
c00272e4:	eb 0b                	jmp    c00272f1 <__divsf3+0x1ed>
c00272e6:	be ff 00 00 00       	mov    esi,0xff
c00272eb:	eb 02                	jmp    c00272ef <__divsf3+0x1eb>
c00272ed:	31 f6                	xor    esi,esi
c00272ef:	31 d2                	xor    edx,edx
c00272f1:	89 d0                	mov    eax,edx
c00272f3:	c1 e8 08             	shr    eax,0x8
c00272f6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00272f9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00272ff:	09 fe                	or     esi,edi
c0027301:	c1 e6 17             	shl    esi,0x17
c0027304:	09 c6                	or     esi,eax
c0027306:	f6 c2 7f             	test   dl,0x7f
c0027309:	0f 95 c1             	setne  cl
c002730c:	09 c8                	or     eax,ecx
c002730e:	83 e0 01             	and    eax,0x1
c0027311:	c1 ea 07             	shr    edx,0x7
c0027314:	21 c2                	and    edx,eax
c0027316:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027319:	eb 0a                	jmp    c0027325 <__divsf3+0x221>
c002731b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027320:	eb 03                	jmp    c0027325 <__divsf3+0x221>
c0027322:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027325:	89 d8                	mov    eax,ebx
c0027327:	8d 65 f4             	lea    esp,[ebp-0xc]
c002732a:	5b                   	pop    ebx
c002732b:	5e                   	pop    esi
c002732c:	5f                   	pop    edi
c002732d:	5d                   	pop    ebp
c002732e:	c3                   	ret    

c002732f <__floatsisf>:
c002732f:	55                   	push   ebp
c0027330:	89 e5                	mov    ebp,esp
c0027332:	53                   	push   ebx
c0027333:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027336:	85 d2                	test   edx,edx
c0027338:	7e 2b                	jle    c0027365 <__floatsisf+0x36>
c002733a:	0f bd ca             	bsr    ecx,edx
c002733d:	83 f1 1f             	xor    ecx,0x1f
c0027340:	d3 e2                	shl    edx,cl
c0027342:	89 d0                	mov    eax,edx
c0027344:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027349:	89 c3                	mov    ebx,eax
c002734b:	c1 eb 08             	shr    ebx,0x8
c002734e:	80 e2 7f             	and    dl,0x7f
c0027351:	0f 95 c2             	setne  dl
c0027354:	09 da                	or     edx,ebx
c0027356:	83 e2 01             	and    edx,0x1
c0027359:	c1 e8 07             	shr    eax,0x7
c002735c:	21 c2                	and    edx,eax
c002735e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027363:	eb 32                	jmp    c0027397 <__floatsisf+0x68>
c0027365:	b8 00 00 00 00       	mov    eax,0x0
c002736a:	74 34                	je     c00273a0 <__floatsisf+0x71>
c002736c:	f7 da                	neg    edx
c002736e:	0f bd ca             	bsr    ecx,edx
c0027371:	83 f1 1f             	xor    ecx,0x1f
c0027374:	d3 e2                	shl    edx,cl
c0027376:	89 d0                	mov    eax,edx
c0027378:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002737d:	89 c3                	mov    ebx,eax
c002737f:	c1 eb 08             	shr    ebx,0x8
c0027382:	80 e2 7f             	and    dl,0x7f
c0027385:	0f 95 c2             	setne  dl
c0027388:	09 da                	or     edx,ebx
c002738a:	83 e2 01             	and    edx,0x1
c002738d:	c1 e8 07             	shr    eax,0x7
c0027390:	21 c2                	and    edx,eax
c0027392:	b8 9e 01 00 00       	mov    eax,0x19e
c0027397:	29 c8                	sub    eax,ecx
c0027399:	c1 e0 17             	shl    eax,0x17
c002739c:	09 d8                	or     eax,ebx
c002739e:	01 d0                	add    eax,edx
c00273a0:	5b                   	pop    ebx
c00273a1:	5d                   	pop    ebp
c00273a2:	c3                   	ret    

c00273a3 <__floatunsisf>:
c00273a3:	55                   	push   ebp
c00273a4:	89 e5                	mov    ebp,esp
c00273a6:	53                   	push   ebx
c00273a7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273aa:	31 c0                	xor    eax,eax
c00273ac:	85 d2                	test   edx,edx
c00273ae:	74 32                	je     c00273e2 <__floatunsisf+0x3f>
c00273b0:	0f bd ca             	bsr    ecx,edx
c00273b3:	83 f1 1f             	xor    ecx,0x1f
c00273b6:	d3 e2                	shl    edx,cl
c00273b8:	89 d0                	mov    eax,edx
c00273ba:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273bf:	89 c3                	mov    ebx,eax
c00273c1:	c1 eb 08             	shr    ebx,0x8
c00273c4:	80 e2 7f             	and    dl,0x7f
c00273c7:	0f 95 c2             	setne  dl
c00273ca:	09 da                	or     edx,ebx
c00273cc:	83 e2 01             	and    edx,0x1
c00273cf:	c1 e8 07             	shr    eax,0x7
c00273d2:	21 c2                	and    edx,eax
c00273d4:	b8 9e 00 00 00       	mov    eax,0x9e
c00273d9:	29 c8                	sub    eax,ecx
c00273db:	c1 e0 17             	shl    eax,0x17
c00273de:	09 d8                	or     eax,ebx
c00273e0:	01 d0                	add    eax,edx
c00273e2:	5b                   	pop    ebx
c00273e3:	5d                   	pop    ebp
c00273e4:	c3                   	ret    

c00273e5 <__fixsfsi>:
c00273e5:	55                   	push   ebp
c00273e6:	89 e5                	mov    ebp,esp
c00273e8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273eb:	89 d1                	mov    ecx,edx
c00273ed:	c1 e1 08             	shl    ecx,0x8
c00273f0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00273f6:	c1 fa 17             	sar    edx,0x17
c00273f9:	78 1c                	js     c0027417 <__fixsfsi+0x32>
c00273fb:	83 ea 7f             	sub    edx,0x7f
c00273fe:	31 c0                	xor    eax,eax
c0027400:	83 fa 1e             	cmp    edx,0x1e
c0027403:	77 40                	ja     c0027445 <__fixsfsi+0x60>
c0027405:	89 c8                	mov    eax,ecx
c0027407:	0d 00 00 00 80       	or     eax,0x80000000
c002740c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027411:	29 d1                	sub    ecx,edx
c0027413:	d3 e8                	shr    eax,cl
c0027415:	eb 2e                	jmp    c0027445 <__fixsfsi+0x60>
c0027417:	31 c0                	xor    eax,eax
c0027419:	81 c2 81 00 00 00    	add    edx,0x81
c002741f:	78 24                	js     c0027445 <__fixsfsi+0x60>
c0027421:	83 fa 1e             	cmp    edx,0x1e
c0027424:	7e 09                	jle    c002742f <__fixsfsi+0x4a>
c0027426:	83 fa 1f             	cmp    edx,0x1f
c0027429:	75 18                	jne    c0027443 <__fixsfsi+0x5e>
c002742b:	85 c9                	test   ecx,ecx
c002742d:	75 14                	jne    c0027443 <__fixsfsi+0x5e>
c002742f:	89 c8                	mov    eax,ecx
c0027431:	0d 00 00 00 80       	or     eax,0x80000000
c0027436:	b9 1f 00 00 00       	mov    ecx,0x1f
c002743b:	29 d1                	sub    ecx,edx
c002743d:	d3 e8                	shr    eax,cl
c002743f:	f7 d8                	neg    eax
c0027441:	eb 02                	jmp    c0027445 <__fixsfsi+0x60>
c0027443:	31 c0                	xor    eax,eax
c0027445:	5d                   	pop    ebp
c0027446:	c3                   	ret    

c0027447 <__fixunssfsi>:
c0027447:	55                   	push   ebp
c0027448:	89 e5                	mov    ebp,esp
c002744a:	53                   	push   ebx
c002744b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002744e:	89 d3                	mov    ebx,edx
c0027450:	c1 fb 17             	sar    ebx,0x17
c0027453:	83 eb 7f             	sub    ebx,0x7f
c0027456:	31 c0                	xor    eax,eax
c0027458:	83 fb 1f             	cmp    ebx,0x1f
c002745b:	77 18                	ja     c0027475 <__fixunssfsi+0x2e>
c002745d:	89 d0                	mov    eax,edx
c002745f:	c1 e0 08             	shl    eax,0x8
c0027462:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027467:	0d 00 00 00 80       	or     eax,0x80000000
c002746c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027471:	29 d9                	sub    ecx,ebx
c0027473:	d3 e8                	shr    eax,cl
c0027475:	5b                   	pop    ebx
c0027476:	5d                   	pop    ebp
c0027477:	c3                   	ret    

c0027478 <__cmpsf2>:
c0027478:	55                   	push   ebp
c0027479:	89 e5                	mov    ebp,esp
c002747b:	57                   	push   edi
c002747c:	56                   	push   esi
c002747d:	53                   	push   ebx
c002747e:	83 ec 24             	sub    esp,0x24
c0027481:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027484:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027487:	e8 4f 10 00 00       	call   c00284db <__truncdfsf2>
c002748c:	5a                   	pop    edx
c002748d:	59                   	pop    ecx
c002748e:	89 c3                	mov    ebx,eax
c0027490:	c1 e8 17             	shr    eax,0x17
c0027493:	0f b6 f0             	movzx  esi,al
c0027496:	89 d8                	mov    eax,ebx
c0027498:	c1 e8 1f             	shr    eax,0x1f
c002749b:	31 c6                	xor    esi,eax
c002749d:	c1 e3 08             	shl    ebx,0x8
c00274a0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00274a3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00274a6:	e8 30 10 00 00       	call   c00284db <__truncdfsf2>
c00274ab:	83 c4 10             	add    esp,0x10
c00274ae:	89 c1                	mov    ecx,eax
c00274b0:	c1 e9 17             	shr    ecx,0x17
c00274b3:	0f b6 c9             	movzx  ecx,cl
c00274b6:	89 c7                	mov    edi,eax
c00274b8:	c1 ef 1f             	shr    edi,0x1f
c00274bb:	89 ca                	mov    edx,ecx
c00274bd:	31 fa                	xor    edx,edi
c00274bf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00274c2:	c1 e0 08             	shl    eax,0x8
c00274c5:	89 c2                	mov    edx,eax
c00274c7:	89 d8                	mov    eax,ebx
c00274c9:	09 d0                	or     eax,edx
c00274cb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274d0:	09 f0                	or     eax,esi
c00274d2:	75 08                	jne    c00274dc <__cmpsf2+0x64>
c00274d4:	31 c0                	xor    eax,eax
c00274d6:	39 f9                	cmp    ecx,edi
c00274d8:	75 0c                	jne    c00274e6 <__cmpsf2+0x6e>
c00274da:	eb 29                	jmp    c0027505 <__cmpsf2+0x8d>
c00274dc:	b8 01 00 00 00       	mov    eax,0x1
c00274e1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274e4:	7f 1f                	jg     c0027505 <__cmpsf2+0x8d>
c00274e6:	83 c8 ff             	or     eax,0xffffffff
c00274e9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274ec:	7c 17                	jl     c0027505 <__cmpsf2+0x8d>
c00274ee:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00274f4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00274fa:	b8 01 00 00 00       	mov    eax,0x1
c00274ff:	39 d3                	cmp    ebx,edx
c0027501:	77 02                	ja     c0027505 <__cmpsf2+0x8d>
c0027503:	19 c0                	sbb    eax,eax
c0027505:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027508:	5b                   	pop    ebx
c0027509:	5e                   	pop    esi
c002750a:	5f                   	pop    edi
c002750b:	5d                   	pop    ebp
c002750c:	c3                   	ret    

c002750d <__eqsf2>:
c002750d:	55                   	push   ebp
c002750e:	89 e5                	mov    ebp,esp
c0027510:	83 ec 24             	sub    esp,0x24
c0027513:	6a 01                	push   0x1
c0027515:	83 ec 0c             	sub    esp,0xc
c0027518:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002751b:	e8 df 10 00 00       	call   c00285ff <__extendsfdf2>
c0027520:	83 c4 10             	add    esp,0x10
c0027523:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027526:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027529:	52                   	push   edx
c002752a:	50                   	push   eax
c002752b:	50                   	push   eax
c002752c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002752f:	e8 cb 10 00 00       	call   c00285ff <__extendsfdf2>
c0027534:	59                   	pop    ecx
c0027535:	59                   	pop    ecx
c0027536:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027539:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002753c:	52                   	push   edx
c002753d:	50                   	push   eax
c002753e:	e8 35 ff ff ff       	call   c0027478 <__cmpsf2>
c0027543:	83 c4 20             	add    esp,0x20
c0027546:	c9                   	leave  
c0027547:	c3                   	ret    

c0027548 <__nesf2>:
c0027548:	eb c3                	jmp    c002750d <__eqsf2>

c002754a <__gtsf2>:
c002754a:	55                   	push   ebp
c002754b:	89 e5                	mov    ebp,esp
c002754d:	83 ec 24             	sub    esp,0x24
c0027550:	6a ff                	push   0xffffffff
c0027552:	83 ec 0c             	sub    esp,0xc
c0027555:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027558:	e8 a2 10 00 00       	call   c00285ff <__extendsfdf2>
c002755d:	83 c4 10             	add    esp,0x10
c0027560:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027563:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027566:	52                   	push   edx
c0027567:	50                   	push   eax
c0027568:	50                   	push   eax
c0027569:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002756c:	e8 8e 10 00 00       	call   c00285ff <__extendsfdf2>
c0027571:	59                   	pop    ecx
c0027572:	59                   	pop    ecx
c0027573:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027576:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027579:	52                   	push   edx
c002757a:	50                   	push   eax
c002757b:	e8 f8 fe ff ff       	call   c0027478 <__cmpsf2>
c0027580:	83 c4 20             	add    esp,0x20
c0027583:	c9                   	leave  
c0027584:	c3                   	ret    

c0027585 <__gesf2>:
c0027585:	eb c3                	jmp    c002754a <__gtsf2>

c0027587 <__ltsf2>:
c0027587:	eb 84                	jmp    c002750d <__eqsf2>

c0027589 <__lesf2>:
c0027589:	eb 82                	jmp    c002750d <__eqsf2>

c002758b <__adddf3>:
c002758b:	55                   	push   ebp
c002758c:	89 e5                	mov    ebp,esp
c002758e:	57                   	push   edi
c002758f:	56                   	push   esi
c0027590:	53                   	push   ebx
c0027591:	83 ec 24             	sub    esp,0x24
c0027594:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027597:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002759a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002759d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00275a0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00275a3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00275a6:	89 c8                	mov    eax,ecx
c00275a8:	89 ce                	mov    esi,ecx
c00275aa:	c1 fe 14             	sar    esi,0x14
c00275ad:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00275b0:	89 fb                	mov    ebx,edi
c00275b2:	89 fa                	mov    edx,edi
c00275b4:	c1 e2 0b             	shl    edx,0xb
c00275b7:	c1 e0 0b             	shl    eax,0xb
c00275ba:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00275bf:	c1 eb 15             	shr    ebx,0x15
c00275c2:	09 d8                	or     eax,ebx
c00275c4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00275c7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00275ca:	c1 fe 14             	sar    esi,0x14
c00275cd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00275d0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00275d3:	89 f3                	mov    ebx,esi
c00275d5:	c1 e3 0b             	shl    ebx,0xb
c00275d8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00275db:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00275de:	c1 e3 0b             	shl    ebx,0xb
c00275e1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00275e7:	c1 ee 15             	shr    esi,0x15
c00275ea:	09 f3                	or     ebx,esi
c00275ec:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00275ef:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275f2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00275f5:	0f 88 5f 02 00 00    	js     c002785a <__adddf3+0x2cf>
c00275fb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275fe:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027601:	85 db                	test   ebx,ebx
c0027603:	0f 8e c7 00 00 00    	jle    c00276d0 <__adddf3+0x145>
c0027609:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027610:	75 1a                	jne    c002762c <__adddf3+0xa1>
c0027612:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027615:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027618:	0f 84 b2 05 00 00    	je     c0027bd0 <__adddf3+0x645>
c002761e:	4b                   	dec    ebx
c002761f:	75 23                	jne    c0027644 <__adddf3+0xb9>
c0027621:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027624:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027627:	e9 99 00 00 00       	jmp    c00276c5 <__adddf3+0x13a>
c002762c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002762f:	f7 d6                	not    esi
c0027631:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027637:	0f 84 93 05 00 00    	je     c0027bd0 <__adddf3+0x645>
c002763d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027644:	83 fb 1f             	cmp    ebx,0x1f
c0027647:	7e 42                	jle    c002768b <__adddf3+0x100>
c0027649:	83 fb 3f             	cmp    ebx,0x3f
c002764c:	0f 8f 7e 05 00 00    	jg     c0027bd0 <__adddf3+0x645>
c0027652:	83 e3 1f             	and    ebx,0x1f
c0027655:	89 d9                	mov    ecx,ebx
c0027657:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002765a:	d3 ef                	shr    edi,cl
c002765c:	31 db                	xor    ebx,ebx
c002765e:	85 c9                	test   ecx,ecx
c0027660:	74 15                	je     c0027677 <__adddf3+0xec>
c0027662:	be 20 00 00 00       	mov    esi,0x20
c0027667:	29 ce                	sub    esi,ecx
c0027669:	89 f1                	mov    ecx,esi
c002766b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002766e:	d3 e6                	shl    esi,cl
c0027670:	31 db                	xor    ebx,ebx
c0027672:	85 f6                	test   esi,esi
c0027674:	0f 95 c3             	setne  bl
c0027677:	31 c9                	xor    ecx,ecx
c0027679:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002767d:	0f 95 c1             	setne  cl
c0027680:	09 cf                	or     edi,ecx
c0027682:	09 fb                	or     ebx,edi
c0027684:	01 da                	add    edx,ebx
c0027686:	83 d0 00             	adc    eax,0x0
c0027689:	eb 3a                	jmp    c00276c5 <__adddf3+0x13a>
c002768b:	bf 20 00 00 00       	mov    edi,0x20
c0027690:	29 df                	sub    edi,ebx
c0027692:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027695:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027698:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002769b:	d3 e6                	shl    esi,cl
c002769d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276a0:	88 d9                	mov    cl,bl
c00276a2:	d3 ef                	shr    edi,cl
c00276a4:	09 fe                	or     esi,edi
c00276a6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276a9:	88 d9                	mov    cl,bl
c00276ab:	d3 ef                	shr    edi,cl
c00276ad:	89 fb                	mov    ebx,edi
c00276af:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276b2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276b5:	d3 e7                	shl    edi,cl
c00276b7:	85 ff                	test   edi,edi
c00276b9:	0f 95 c1             	setne  cl
c00276bc:	0f b6 c9             	movzx  ecx,cl
c00276bf:	09 ce                	or     esi,ecx
c00276c1:	01 f2                	add    edx,esi
c00276c3:	11 d8                	adc    eax,ebx
c00276c5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276cb:	e9 52 01 00 00       	jmp    c0027822 <__adddf3+0x297>
c00276d0:	0f 84 d5 00 00 00    	je     c00277ab <__adddf3+0x220>
c00276d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00276d9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00276dc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276df:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276e2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276e9:	75 20                	jne    c002770b <__adddf3+0x180>
c00276eb:	89 d6                	mov    esi,edx
c00276ed:	09 c6                	or     esi,eax
c00276ef:	0f 84 db 04 00 00    	je     c0027bd0 <__adddf3+0x645>
c00276f5:	4b                   	dec    ebx
c00276f6:	75 29                	jne    c0027721 <__adddf3+0x196>
c00276f8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276fb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276fe:	01 d1                	add    ecx,edx
c0027700:	11 c6                	adc    esi,eax
c0027702:	89 f0                	mov    eax,esi
c0027704:	89 ca                	mov    edx,ecx
c0027706:	e9 17 01 00 00       	jmp    c0027822 <__adddf3+0x297>
c002770b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002770e:	f7 d6                	not    esi
c0027710:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027716:	0f 84 b4 04 00 00    	je     c0027bd0 <__adddf3+0x645>
c002771c:	0d 00 00 00 80       	or     eax,0x80000000
c0027721:	83 fb 1f             	cmp    ebx,0x1f
c0027724:	7e 48                	jle    c002776e <__adddf3+0x1e3>
c0027726:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027729:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002772c:	83 fb 3f             	cmp    ebx,0x3f
c002772f:	0f 8f 9b 04 00 00    	jg     c0027bd0 <__adddf3+0x645>
c0027735:	83 e3 1f             	and    ebx,0x1f
c0027738:	89 d9                	mov    ecx,ebx
c002773a:	89 c7                	mov    edi,eax
c002773c:	d3 ef                	shr    edi,cl
c002773e:	31 db                	xor    ebx,ebx
c0027740:	85 c9                	test   ecx,ecx
c0027742:	74 12                	je     c0027756 <__adddf3+0x1cb>
c0027744:	be 20 00 00 00       	mov    esi,0x20
c0027749:	29 ce                	sub    esi,ecx
c002774b:	89 f1                	mov    ecx,esi
c002774d:	d3 e0                	shl    eax,cl
c002774f:	31 db                	xor    ebx,ebx
c0027751:	85 c0                	test   eax,eax
c0027753:	0f 95 c3             	setne  bl
c0027756:	31 c0                	xor    eax,eax
c0027758:	85 d2                	test   edx,edx
c002775a:	0f 95 c0             	setne  al
c002775d:	09 c7                	or     edi,eax
c002775f:	09 fb                	or     ebx,edi
c0027761:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027764:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027767:	01 da                	add    edx,ebx
c0027769:	83 d6 00             	adc    esi,0x0
c002776c:	eb 39                	jmp    c00277a7 <__adddf3+0x21c>
c002776e:	be 20 00 00 00       	mov    esi,0x20
c0027773:	29 de                	sub    esi,ebx
c0027775:	89 c7                	mov    edi,eax
c0027777:	89 f1                	mov    ecx,esi
c0027779:	d3 e7                	shl    edi,cl
c002777b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002777e:	89 d7                	mov    edi,edx
c0027780:	88 d9                	mov    cl,bl
c0027782:	d3 ef                	shr    edi,cl
c0027784:	89 f9                	mov    ecx,edi
c0027786:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027789:	09 cf                	or     edi,ecx
c002778b:	88 d9                	mov    cl,bl
c002778d:	d3 e8                	shr    eax,cl
c002778f:	89 f1                	mov    ecx,esi
c0027791:	d3 e2                	shl    edx,cl
c0027793:	85 d2                	test   edx,edx
c0027795:	0f 95 c2             	setne  dl
c0027798:	0f b6 d2             	movzx  edx,dl
c002779b:	09 d7                	or     edi,edx
c002779d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277a0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277a3:	01 fa                	add    edx,edi
c00277a5:	11 c6                	adc    esi,eax
c00277a7:	89 f0                	mov    eax,esi
c00277a9:	eb 77                	jmp    c0027822 <__adddf3+0x297>
c00277ab:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277ae:	46                   	inc    esi
c00277af:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00277b2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00277b8:	75 41                	jne    c00277fb <__adddf3+0x270>
c00277ba:	89 d3                	mov    ebx,edx
c00277bc:	09 c3                	or     ebx,eax
c00277be:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00277c5:	75 27                	jne    c00277ee <__adddf3+0x263>
c00277c7:	85 db                	test   ebx,ebx
c00277c9:	0f 84 fb 03 00 00    	je     c0027bca <__adddf3+0x63f>
c00277cf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00277d2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00277d5:	0f 84 f5 03 00 00    	je     c0027bd0 <__adddf3+0x645>
c00277db:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277de:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277e1:	85 c0                	test   eax,eax
c00277e3:	0f 89 91 03 00 00    	jns    c0027b7a <__adddf3+0x5ef>
c00277e9:	e9 85 03 00 00       	jmp    c0027b73 <__adddf3+0x5e8>
c00277ee:	85 db                	test   ebx,ebx
c00277f0:	0f 85 da 03 00 00    	jne    c0027bd0 <__adddf3+0x645>
c00277f6:	e9 cf 03 00 00       	jmp    c0027bca <__adddf3+0x63f>
c00277fb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277fe:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027801:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027804:	f7 d1                	not    ecx
c0027806:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002780c:	0f 84 70 03 00 00    	je     c0027b82 <__adddf3+0x5f7>
c0027812:	d1 ea                	shr    edx,1
c0027814:	89 c1                	mov    ecx,eax
c0027816:	c1 e1 1f             	shl    ecx,0x1f
c0027819:	09 ca                	or     edx,ecx
c002781b:	d1 e8                	shr    eax,1
c002781d:	e9 6f 03 00 00       	jmp    c0027b91 <__adddf3+0x606>
c0027822:	85 c0                	test   eax,eax
c0027824:	0f 89 67 03 00 00    	jns    c0027b91 <__adddf3+0x606>
c002782a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002782d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027830:	f7 d1                	not    ecx
c0027832:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027838:	0f 84 44 03 00 00    	je     c0027b82 <__adddf3+0x5f7>
c002783e:	89 d1                	mov    ecx,edx
c0027840:	d1 e9                	shr    ecx,1
c0027842:	83 e2 01             	and    edx,0x1
c0027845:	09 ca                	or     edx,ecx
c0027847:	89 c1                	mov    ecx,eax
c0027849:	c1 e1 1f             	shl    ecx,0x1f
c002784c:	09 ca                	or     edx,ecx
c002784e:	d1 e8                	shr    eax,1
c0027850:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027855:	e9 37 03 00 00       	jmp    c0027b91 <__adddf3+0x606>
c002785a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002785d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027863:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027866:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027869:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002786f:	29 de                	sub    esi,ebx
c0027871:	85 f6                	test   esi,esi
c0027873:	0f 8e bd 00 00 00    	jle    c0027936 <__adddf3+0x3ab>
c0027879:	85 db                	test   ebx,ebx
c002787b:	75 17                	jne    c0027894 <__adddf3+0x309>
c002787d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027880:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027883:	0f 84 47 03 00 00    	je     c0027bd0 <__adddf3+0x645>
c0027889:	4e                   	dec    esi
c002788a:	75 20                	jne    c00278ac <__adddf3+0x321>
c002788c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002788f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027892:	eb 5b                	jmp    c00278ef <__adddf3+0x364>
c0027894:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027897:	f7 d3                	not    ebx
c0027899:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002789f:	0f 84 2b 03 00 00    	je     c0027bd0 <__adddf3+0x645>
c00278a5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00278ac:	83 fe 1f             	cmp    esi,0x1f
c00278af:	7e 49                	jle    c00278fa <__adddf3+0x36f>
c00278b1:	83 fe 3f             	cmp    esi,0x3f
c00278b4:	0f 8f 16 03 00 00    	jg     c0027bd0 <__adddf3+0x645>
c00278ba:	83 e6 1f             	and    esi,0x1f
c00278bd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278c0:	89 f1                	mov    ecx,esi
c00278c2:	d3 ef                	shr    edi,cl
c00278c4:	31 db                	xor    ebx,ebx
c00278c6:	85 f6                	test   esi,esi
c00278c8:	74 13                	je     c00278dd <__adddf3+0x352>
c00278ca:	b9 20 00 00 00       	mov    ecx,0x20
c00278cf:	29 f1                	sub    ecx,esi
c00278d1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278d4:	d3 e6                	shl    esi,cl
c00278d6:	31 db                	xor    ebx,ebx
c00278d8:	85 f6                	test   esi,esi
c00278da:	0f 95 c3             	setne  bl
c00278dd:	31 c9                	xor    ecx,ecx
c00278df:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00278e3:	0f 95 c1             	setne  cl
c00278e6:	09 cf                	or     edi,ecx
c00278e8:	09 fb                	or     ebx,edi
c00278ea:	29 da                	sub    edx,ebx
c00278ec:	83 d8 00             	sbb    eax,0x0
c00278ef:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278f2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278f5:	e9 aa 01 00 00       	jmp    c0027aa4 <__adddf3+0x519>
c00278fa:	bf 20 00 00 00       	mov    edi,0x20
c00278ff:	29 f7                	sub    edi,esi
c0027901:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027904:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027907:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002790a:	d3 e3                	shl    ebx,cl
c002790c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002790f:	89 f1                	mov    ecx,esi
c0027911:	d3 ef                	shr    edi,cl
c0027913:	09 fb                	or     ebx,edi
c0027915:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027918:	89 f1                	mov    ecx,esi
c002791a:	d3 ef                	shr    edi,cl
c002791c:	89 fe                	mov    esi,edi
c002791e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027921:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027924:	d3 e7                	shl    edi,cl
c0027926:	85 ff                	test   edi,edi
c0027928:	0f 95 c1             	setne  cl
c002792b:	0f b6 c9             	movzx  ecx,cl
c002792e:	09 cb                	or     ebx,ecx
c0027930:	29 da                	sub    edx,ebx
c0027932:	19 f0                	sbb    eax,esi
c0027934:	eb b9                	jmp    c00278ef <__adddf3+0x364>
c0027936:	0f 84 cd 00 00 00    	je     c0027a09 <__adddf3+0x47e>
c002793c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002793f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027942:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027945:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027949:	75 1b                	jne    c0027966 <__adddf3+0x3db>
c002794b:	89 d6                	mov    esi,edx
c002794d:	09 c6                	or     esi,eax
c002794f:	0f 84 7b 02 00 00    	je     c0027bd0 <__adddf3+0x645>
c0027955:	4b                   	dec    ebx
c0027956:	75 24                	jne    c002797c <__adddf3+0x3f1>
c0027958:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002795b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002795e:	29 d1                	sub    ecx,edx
c0027960:	19 c6                	sbb    esi,eax
c0027962:	89 ca                	mov    edx,ecx
c0027964:	eb 61                	jmp    c00279c7 <__adddf3+0x43c>
c0027966:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027969:	f7 d6                	not    esi
c002796b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027971:	0f 84 59 02 00 00    	je     c0027bd0 <__adddf3+0x645>
c0027977:	0d 00 00 00 80       	or     eax,0x80000000
c002797c:	83 fb 1f             	cmp    ebx,0x1f
c002797f:	7e 4d                	jle    c00279ce <__adddf3+0x443>
c0027981:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027984:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027987:	83 fb 3f             	cmp    ebx,0x3f
c002798a:	0f 8f 40 02 00 00    	jg     c0027bd0 <__adddf3+0x645>
c0027990:	83 e3 1f             	and    ebx,0x1f
c0027993:	89 d9                	mov    ecx,ebx
c0027995:	89 c7                	mov    edi,eax
c0027997:	d3 ef                	shr    edi,cl
c0027999:	31 db                	xor    ebx,ebx
c002799b:	85 c9                	test   ecx,ecx
c002799d:	74 12                	je     c00279b1 <__adddf3+0x426>
c002799f:	be 20 00 00 00       	mov    esi,0x20
c00279a4:	29 ce                	sub    esi,ecx
c00279a6:	89 f1                	mov    ecx,esi
c00279a8:	d3 e0                	shl    eax,cl
c00279aa:	31 db                	xor    ebx,ebx
c00279ac:	85 c0                	test   eax,eax
c00279ae:	0f 95 c3             	setne  bl
c00279b1:	31 c0                	xor    eax,eax
c00279b3:	85 d2                	test   edx,edx
c00279b5:	0f 95 c0             	setne  al
c00279b8:	09 c7                	or     edi,eax
c00279ba:	09 fb                	or     ebx,edi
c00279bc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279bf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279c2:	29 da                	sub    edx,ebx
c00279c4:	83 de 00             	sbb    esi,0x0
c00279c7:	89 f0                	mov    eax,esi
c00279c9:	e9 d6 00 00 00       	jmp    c0027aa4 <__adddf3+0x519>
c00279ce:	be 20 00 00 00       	mov    esi,0x20
c00279d3:	29 de                	sub    esi,ebx
c00279d5:	89 c7                	mov    edi,eax
c00279d7:	89 f1                	mov    ecx,esi
c00279d9:	d3 e7                	shl    edi,cl
c00279db:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00279de:	89 d7                	mov    edi,edx
c00279e0:	88 d9                	mov    cl,bl
c00279e2:	d3 ef                	shr    edi,cl
c00279e4:	89 f9                	mov    ecx,edi
c00279e6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279e9:	09 cf                	or     edi,ecx
c00279eb:	88 d9                	mov    cl,bl
c00279ed:	d3 e8                	shr    eax,cl
c00279ef:	89 f1                	mov    ecx,esi
c00279f1:	d3 e2                	shl    edx,cl
c00279f3:	85 d2                	test   edx,edx
c00279f5:	0f 95 c2             	setne  dl
c00279f8:	0f b6 d2             	movzx  edx,dl
c00279fb:	09 d7                	or     edi,edx
c00279fd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a00:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a03:	29 fa                	sub    edx,edi
c0027a05:	19 c6                	sbb    esi,eax
c0027a07:	eb be                	jmp    c00279c7 <__adddf3+0x43c>
c0027a09:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a0c:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027a0f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027a15:	75 6a                	jne    c0027a81 <__adddf3+0x4f6>
c0027a17:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a1b:	75 58                	jne    c0027a75 <__adddf3+0x4ea>
c0027a1d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027a20:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027a23:	89 d6                	mov    esi,edx
c0027a25:	09 c6                	or     esi,eax
c0027a27:	75 17                	jne    c0027a40 <__adddf3+0x4b5>
c0027a29:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a2c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a2f:	85 db                	test   ebx,ebx
c0027a31:	0f 85 99 01 00 00    	jne    c0027bd0 <__adddf3+0x645>
c0027a37:	31 ff                	xor    edi,edi
c0027a39:	31 c9                	xor    ecx,ecx
c0027a3b:	e9 90 01 00 00       	jmp    c0027bd0 <__adddf3+0x645>
c0027a40:	85 db                	test   ebx,ebx
c0027a42:	0f 84 88 01 00 00    	je     c0027bd0 <__adddf3+0x645>
c0027a48:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a4b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a4e:	85 c0                	test   eax,eax
c0027a50:	79 10                	jns    c0027a62 <__adddf3+0x4d7>
c0027a52:	31 c9                	xor    ecx,ecx
c0027a54:	f7 da                	neg    edx
c0027a56:	0f 95 c1             	setne  cl
c0027a59:	01 c8                	add    eax,ecx
c0027a5b:	f7 d8                	neg    eax
c0027a5d:	e9 2f 01 00 00       	jmp    c0027b91 <__adddf3+0x606>
c0027a62:	31 ff                	xor    edi,edi
c0027a64:	31 c9                	xor    ecx,ecx
c0027a66:	89 c3                	mov    ebx,eax
c0027a68:	09 d3                	or     ebx,edx
c0027a6a:	0f 84 60 01 00 00    	je     c0027bd0 <__adddf3+0x645>
c0027a70:	e9 05 01 00 00       	jmp    c0027b7a <__adddf3+0x5ef>
c0027a75:	31 ff                	xor    edi,edi
c0027a77:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a7c:	e9 4f 01 00 00       	jmp    c0027bd0 <__adddf3+0x645>
c0027a81:	89 c1                	mov    ecx,eax
c0027a83:	89 d0                	mov    eax,edx
c0027a85:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a88:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a8b:	89 ca                	mov    edx,ecx
c0027a8d:	85 c9                	test   ecx,ecx
c0027a8f:	79 2c                	jns    c0027abd <__adddf3+0x532>
c0027a91:	31 c9                	xor    ecx,ecx
c0027a93:	f7 d8                	neg    eax
c0027a95:	0f 95 c1             	setne  cl
c0027a98:	01 ca                	add    edx,ecx
c0027a9a:	f7 da                	neg    edx
c0027a9c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a9f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027aa2:	eb 19                	jmp    c0027abd <__adddf3+0x532>
c0027aa4:	85 c0                	test   eax,eax
c0027aa6:	0f 89 e5 00 00 00    	jns    c0027b91 <__adddf3+0x606>
c0027aac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ab1:	89 c1                	mov    ecx,eax
c0027ab3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027ab6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027ab9:	89 d0                	mov    eax,edx
c0027abb:	89 ca                	mov    edx,ecx
c0027abd:	85 d2                	test   edx,edx
c0027abf:	74 59                	je     c0027b1a <__adddf3+0x58f>
c0027ac1:	0f bd da             	bsr    ebx,edx
c0027ac4:	83 f3 1f             	xor    ebx,0x1f
c0027ac7:	88 d9                	mov    cl,bl
c0027ac9:	d3 e2                	shl    edx,cl
c0027acb:	bf 20 00 00 00       	mov    edi,0x20
c0027ad0:	89 f9                	mov    ecx,edi
c0027ad2:	29 d9                	sub    ecx,ebx
c0027ad4:	89 c6                	mov    esi,eax
c0027ad6:	d3 ee                	shr    esi,cl
c0027ad8:	09 d6                	or     esi,edx
c0027ada:	88 d9                	mov    cl,bl
c0027adc:	d3 e0                	shl    eax,cl
c0027ade:	89 c2                	mov    edx,eax
c0027ae0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ae3:	25 ff 07 00 00       	and    eax,0x7ff
c0027ae8:	39 d8                	cmp    eax,ebx
c0027aea:	7f 22                	jg     c0027b0e <__adddf3+0x583>
c0027aec:	29 c3                	sub    ebx,eax
c0027aee:	43                   	inc    ebx
c0027aef:	88 d9                	mov    cl,bl
c0027af1:	d3 ea                	shr    edx,cl
c0027af3:	29 df                	sub    edi,ebx
c0027af5:	89 f9                	mov    ecx,edi
c0027af7:	89 f0                	mov    eax,esi
c0027af9:	d3 e0                	shl    eax,cl
c0027afb:	09 c2                	or     edx,eax
c0027afd:	89 f0                	mov    eax,esi
c0027aff:	88 d9                	mov    cl,bl
c0027b01:	d3 e8                	shr    eax,cl
c0027b03:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b06:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027b0c:	eb 6f                	jmp    c0027b7d <__adddf3+0x5f2>
c0027b0e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b11:	29 d8                	sub    eax,ebx
c0027b13:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b16:	89 f0                	mov    eax,esi
c0027b18:	eb 59                	jmp    c0027b73 <__adddf3+0x5e8>
c0027b1a:	85 c0                	test   eax,eax
c0027b1c:	74 6a                	je     c0027b88 <__adddf3+0x5fd>
c0027b1e:	0f bd c8             	bsr    ecx,eax
c0027b21:	83 f1 1f             	xor    ecx,0x1f
c0027b24:	d3 e0                	shl    eax,cl
c0027b26:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b29:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b2f:	83 c1 20             	add    ecx,0x20
c0027b32:	39 cb                	cmp    ebx,ecx
c0027b34:	7f 35                	jg     c0027b6b <__adddf3+0x5e0>
c0027b36:	29 d9                	sub    ecx,ebx
c0027b38:	8d 71 01             	lea    esi,[ecx+0x1]
c0027b3b:	83 fe 1f             	cmp    esi,0x1f
c0027b3e:	7e 09                	jle    c0027b49 <__adddf3+0x5be>
c0027b40:	83 e9 1f             	sub    ecx,0x1f
c0027b43:	d3 e8                	shr    eax,cl
c0027b45:	89 c3                	mov    ebx,eax
c0027b47:	eb 11                	jmp    c0027b5a <__adddf3+0x5cf>
c0027b49:	b9 20 00 00 00       	mov    ecx,0x20
c0027b4e:	29 f1                	sub    ecx,esi
c0027b50:	89 c3                	mov    ebx,eax
c0027b52:	d3 e3                	shl    ebx,cl
c0027b54:	89 f1                	mov    ecx,esi
c0027b56:	d3 e8                	shr    eax,cl
c0027b58:	89 c2                	mov    edx,eax
c0027b5a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b5d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b62:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b65:	89 d0                	mov    eax,edx
c0027b67:	89 da                	mov    edx,ebx
c0027b69:	eb 26                	jmp    c0027b91 <__adddf3+0x606>
c0027b6b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b6e:	29 cf                	sub    edi,ecx
c0027b70:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b73:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b78:	eb 17                	jmp    c0027b91 <__adddf3+0x606>
c0027b7a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b7d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b80:	eb 0f                	jmp    c0027b91 <__adddf3+0x606>
c0027b82:	31 d2                	xor    edx,edx
c0027b84:	31 c0                	xor    eax,eax
c0027b86:	eb 09                	jmp    c0027b91 <__adddf3+0x606>
c0027b88:	89 c2                	mov    edx,eax
c0027b8a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b91:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b94:	c1 e1 14             	shl    ecx,0x14
c0027b97:	89 c3                	mov    ebx,eax
c0027b99:	c1 eb 0b             	shr    ebx,0xb
c0027b9c:	09 d9                	or     ecx,ebx
c0027b9e:	89 d3                	mov    ebx,edx
c0027ba0:	c1 eb 0b             	shr    ebx,0xb
c0027ba3:	c1 e0 15             	shl    eax,0x15
c0027ba6:	09 d8                	or     eax,ebx
c0027ba8:	89 c7                	mov    edi,eax
c0027baa:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027bb0:	0f 95 c0             	setne  al
c0027bb3:	89 c6                	mov    esi,eax
c0027bb5:	09 f3                	or     ebx,esi
c0027bb7:	83 e3 01             	and    ebx,0x1
c0027bba:	c1 ea 0a             	shr    edx,0xa
c0027bbd:	21 da                	and    edx,ebx
c0027bbf:	89 f8                	mov    eax,edi
c0027bc1:	01 d0                	add    eax,edx
c0027bc3:	83 d1 00             	adc    ecx,0x0
c0027bc6:	89 c7                	mov    edi,eax
c0027bc8:	eb 06                	jmp    c0027bd0 <__adddf3+0x645>
c0027bca:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027bcd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027bd0:	89 f8                	mov    eax,edi
c0027bd2:	89 ca                	mov    edx,ecx
c0027bd4:	83 c4 24             	add    esp,0x24
c0027bd7:	5b                   	pop    ebx
c0027bd8:	5e                   	pop    esi
c0027bd9:	5f                   	pop    edi
c0027bda:	5d                   	pop    ebp
c0027bdb:	c3                   	ret    

c0027bdc <__subdf3>:
c0027bdc:	55                   	push   ebp
c0027bdd:	89 e5                	mov    ebp,esp
c0027bdf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027be2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027be5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027beb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027bee:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027bf1:	5d                   	pop    ebp
c0027bf2:	e9 94 f9 ff ff       	jmp    c002758b <__adddf3>

c0027bf7 <__negdf2>:
c0027bf7:	55                   	push   ebp
c0027bf8:	89 e5                	mov    ebp,esp
c0027bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027bfd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c00:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c06:	5d                   	pop    ebp
c0027c07:	c3                   	ret    

c0027c08 <__muldf3>:
c0027c08:	55                   	push   ebp
c0027c09:	89 e5                	mov    ebp,esp
c0027c0b:	57                   	push   edi
c0027c0c:	56                   	push   esi
c0027c0d:	53                   	push   ebx
c0027c0e:	83 ec 24             	sub    esp,0x24
c0027c11:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c17:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c1a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c1d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027c20:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027c23:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c26:	89 c8                	mov    eax,ecx
c0027c28:	c1 f8 14             	sar    eax,0x14
c0027c2b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c2e:	89 f8                	mov    eax,edi
c0027c30:	89 fb                	mov    ebx,edi
c0027c32:	c1 e3 0b             	shl    ebx,0xb
c0027c35:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027c38:	c1 e1 0b             	shl    ecx,0xb
c0027c3b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c41:	c1 e8 15             	shr    eax,0x15
c0027c44:	09 c1                	or     ecx,eax
c0027c46:	89 d6                	mov    esi,edx
c0027c48:	89 d0                	mov    eax,edx
c0027c4a:	c1 f8 14             	sar    eax,0x14
c0027c4d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c50:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c53:	89 c3                	mov    ebx,eax
c0027c55:	c1 e3 0b             	shl    ebx,0xb
c0027c58:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c5b:	c1 e6 0b             	shl    esi,0xb
c0027c5e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c64:	c1 e8 15             	shr    eax,0x15
c0027c67:	09 c6                	or     esi,eax
c0027c69:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c6c:	25 ff 07 00 00       	and    eax,0x7ff
c0027c71:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c74:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c77:	25 ff 07 00 00       	and    eax,0x7ff
c0027c7c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c7f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c82:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c85:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c8c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c8f:	40                   	inc    eax
c0027c90:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c95:	0f 85 8d 00 00 00    	jne    c0027d28 <__muldf3+0x120>
c0027c9b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c9e:	09 c8                	or     eax,ecx
c0027ca0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027ca4:	74 44                	je     c0027cea <__muldf3+0xe2>
c0027ca6:	85 c0                	test   eax,eax
c0027ca8:	0f 85 31 02 00 00    	jne    c0027edf <__muldf3+0x2d7>
c0027cae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cb1:	40                   	inc    eax
c0027cb2:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cb7:	75 13                	jne    c0027ccc <__muldf3+0xc4>
c0027cb9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027cbc:	09 f1                	or     ecx,esi
c0027cbe:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cc2:	74 22                	je     c0027ce6 <__muldf3+0xde>
c0027cc4:	85 c9                	test   ecx,ecx
c0027cc6:	0f 85 0d 02 00 00    	jne    c0027ed9 <__muldf3+0x2d1>
c0027ccc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027cd0:	0f 89 09 02 00 00    	jns    c0027edf <__muldf3+0x2d7>
c0027cd6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027cd9:	05 00 00 00 80       	add    eax,0x80000000
c0027cde:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ce1:	e9 f9 01 00 00       	jmp    c0027edf <__muldf3+0x2d7>
c0027ce6:	85 c9                	test   ecx,ecx
c0027ce8:	eb 2e                	jmp    c0027d18 <__muldf3+0x110>
c0027cea:	85 c0                	test   eax,eax
c0027cec:	74 20                	je     c0027d0e <__muldf3+0x106>
c0027cee:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027cf1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cf4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027cf7:	c1 ef 1f             	shr    edi,0x1f
c0027cfa:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027cfd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027d00:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d03:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d06:	09 f9                	or     ecx,edi
c0027d08:	78 1e                	js     c0027d28 <__muldf3+0x120>
c0027d0a:	89 c3                	mov    ebx,eax
c0027d0c:	eb e0                	jmp    c0027cee <__muldf3+0xe6>
c0027d0e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d11:	f7 d0                	not    eax
c0027d13:	a9 ff 07 00 00       	test   eax,0x7ff
c0027d18:	75 b2                	jne    c0027ccc <__muldf3+0xc4>
c0027d1a:	31 ff                	xor    edi,edi
c0027d1c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027d23:	e9 b7 01 00 00       	jmp    c0027edf <__muldf3+0x2d7>
c0027d28:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d2b:	40                   	inc    eax
c0027d2c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d31:	75 57                	jne    c0027d8a <__muldf3+0x182>
c0027d33:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027d36:	09 f0                	or     eax,esi
c0027d38:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d3c:	74 23                	je     c0027d61 <__muldf3+0x159>
c0027d3e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d42:	0f 89 91 01 00 00    	jns    c0027ed9 <__muldf3+0x2d1>
c0027d48:	85 c0                	test   eax,eax
c0027d4a:	0f 85 89 01 00 00    	jne    c0027ed9 <__muldf3+0x2d1>
c0027d50:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d53:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d59:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d5c:	e9 7e 01 00 00       	jmp    c0027edf <__muldf3+0x2d7>
c0027d61:	85 c0                	test   eax,eax
c0027d63:	75 0c                	jne    c0027d71 <__muldf3+0x169>
c0027d65:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d69:	0f 89 6a 01 00 00    	jns    c0027ed9 <__muldf3+0x2d1>
c0027d6f:	eb df                	jmp    c0027d50 <__muldf3+0x148>
c0027d71:	01 f6                	add    esi,esi
c0027d73:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d76:	c1 ea 1f             	shr    edx,0x1f
c0027d79:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d7c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d7f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d82:	09 d6                	or     esi,edx
c0027d84:	78 04                	js     c0027d8a <__muldf3+0x182>
c0027d86:	89 c3                	mov    ebx,eax
c0027d88:	eb e7                	jmp    c0027d71 <__muldf3+0x169>
c0027d8a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d90:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d96:	89 c8                	mov    eax,ecx
c0027d98:	f7 e6                	mul    esi
c0027d9a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d9d:	89 c7                	mov    edi,eax
c0027d9f:	89 c8                	mov    eax,ecx
c0027da1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027da4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027da7:	89 c1                	mov    ecx,eax
c0027da9:	89 f0                	mov    eax,esi
c0027dab:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027dae:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027db1:	89 c6                	mov    esi,eax
c0027db3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027db6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027db9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027dbc:	31 c0                	xor    eax,eax
c0027dbe:	01 f1                	add    ecx,esi
c0027dc0:	0f 92 c0             	setb   al
c0027dc3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027dc6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027dc9:	83 d6 00             	adc    esi,0x0
c0027dcc:	01 c7                	add    edi,eax
c0027dce:	83 d6 00             	adc    esi,0x0
c0027dd1:	01 ca                	add    edx,ecx
c0027dd3:	0f 92 c1             	setb   cl
c0027dd6:	0f b6 c9             	movzx  ecx,cl
c0027dd9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027ddc:	83 d6 00             	adc    esi,0x0
c0027ddf:	01 cf                	add    edi,ecx
c0027de1:	83 d6 00             	adc    esi,0x0
c0027de4:	31 c9                	xor    ecx,ecx
c0027de6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027de9:	0f 95 c1             	setne  cl
c0027dec:	09 cf                	or     edi,ecx
c0027dee:	85 f6                	test   esi,esi
c0027df0:	78 0c                	js     c0027dfe <__muldf3+0x1f6>
c0027df2:	01 f6                	add    esi,esi
c0027df4:	89 f8                	mov    eax,edi
c0027df6:	c1 e8 1f             	shr    eax,0x1f
c0027df9:	09 c6                	or     esi,eax
c0027dfb:	01 ff                	add    edi,edi
c0027dfd:	4b                   	dec    ebx
c0027dfe:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027e04:	0f 8f 85 00 00 00    	jg     c0027e8f <__muldf3+0x287>
c0027e0a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027e10:	85 db                	test   ebx,ebx
c0027e12:	0f 8f 84 00 00 00    	jg     c0027e9c <__muldf3+0x294>
c0027e18:	83 fb cc             	cmp    ebx,0xffffffcc
c0027e1b:	7c 79                	jl     c0027e96 <__muldf3+0x28e>
c0027e1d:	ba 01 00 00 00       	mov    edx,0x1
c0027e22:	29 da                	sub    edx,ebx
c0027e24:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e2a:	83 fa 1f             	cmp    edx,0x1f
c0027e2d:	7e 30                	jle    c0027e5f <__muldf3+0x257>
c0027e2f:	83 fa 20             	cmp    edx,0x20
c0027e32:	75 0b                	jne    c0027e3f <__muldf3+0x237>
c0027e34:	31 c0                	xor    eax,eax
c0027e36:	85 ff                	test   edi,edi
c0027e38:	0f 95 c0             	setne  al
c0027e3b:	89 c7                	mov    edi,eax
c0027e3d:	eb 1a                	jmp    c0027e59 <__muldf3+0x251>
c0027e3f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027e42:	89 f0                	mov    eax,esi
c0027e44:	d3 e0                	shl    eax,cl
c0027e46:	09 f8                	or     eax,edi
c0027e48:	0f 95 c0             	setne  al
c0027e4b:	0f b6 c0             	movzx  eax,al
c0027e4e:	89 c7                	mov    edi,eax
c0027e50:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e55:	29 d9                	sub    ecx,ebx
c0027e57:	d3 ee                	shr    esi,cl
c0027e59:	09 f7                	or     edi,esi
c0027e5b:	31 db                	xor    ebx,ebx
c0027e5d:	eb 3b                	jmp    c0027e9a <__muldf3+0x292>
c0027e5f:	83 c3 1f             	add    ebx,0x1f
c0027e62:	89 f0                	mov    eax,esi
c0027e64:	88 d9                	mov    cl,bl
c0027e66:	d3 e0                	shl    eax,cl
c0027e68:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e6b:	89 f8                	mov    eax,edi
c0027e6d:	88 d1                	mov    cl,dl
c0027e6f:	d3 e8                	shr    eax,cl
c0027e71:	89 c1                	mov    ecx,eax
c0027e73:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e76:	09 c8                	or     eax,ecx
c0027e78:	88 d9                	mov    cl,bl
c0027e7a:	d3 e7                	shl    edi,cl
c0027e7c:	31 db                	xor    ebx,ebx
c0027e7e:	85 ff                	test   edi,edi
c0027e80:	0f 95 c3             	setne  bl
c0027e83:	89 df                	mov    edi,ebx
c0027e85:	09 c7                	or     edi,eax
c0027e87:	88 d1                	mov    cl,dl
c0027e89:	d3 ee                	shr    esi,cl
c0027e8b:	31 db                	xor    ebx,ebx
c0027e8d:	eb 0d                	jmp    c0027e9c <__muldf3+0x294>
c0027e8f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e94:	eb 02                	jmp    c0027e98 <__muldf3+0x290>
c0027e96:	31 db                	xor    ebx,ebx
c0027e98:	31 ff                	xor    edi,edi
c0027e9a:	31 f6                	xor    esi,esi
c0027e9c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e9f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027ea2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027ea7:	09 c3                	or     ebx,eax
c0027ea9:	c1 e3 14             	shl    ebx,0x14
c0027eac:	89 f0                	mov    eax,esi
c0027eae:	c1 e8 0b             	shr    eax,0xb
c0027eb1:	09 c3                	or     ebx,eax
c0027eb3:	89 f8                	mov    eax,edi
c0027eb5:	c1 e8 0b             	shr    eax,0xb
c0027eb8:	c1 e6 15             	shl    esi,0x15
c0027ebb:	09 c6                	or     esi,eax
c0027ebd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027ec3:	0f 95 c1             	setne  cl
c0027ec6:	09 c8                	or     eax,ecx
c0027ec8:	83 e0 01             	and    eax,0x1
c0027ecb:	c1 ef 0a             	shr    edi,0xa
c0027ece:	21 c7                	and    edi,eax
c0027ed0:	01 f7                	add    edi,esi
c0027ed2:	83 d3 00             	adc    ebx,0x0
c0027ed5:	89 da                	mov    edx,ebx
c0027ed7:	eb 03                	jmp    c0027edc <__muldf3+0x2d4>
c0027ed9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027edc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027edf:	89 f8                	mov    eax,edi
c0027ee1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027ee4:	83 c4 24             	add    esp,0x24
c0027ee7:	5b                   	pop    ebx
c0027ee8:	5e                   	pop    esi
c0027ee9:	5f                   	pop    edi
c0027eea:	5d                   	pop    ebp
c0027eeb:	c3                   	ret    

c0027eec <__divdf3>:
c0027eec:	55                   	push   ebp
c0027eed:	89 e5                	mov    ebp,esp
c0027eef:	57                   	push   edi
c0027ef0:	56                   	push   esi
c0027ef1:	53                   	push   ebx
c0027ef2:	83 ec 2c             	sub    esp,0x2c
c0027ef5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027ef8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027efb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027efe:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027f01:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027f04:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027f07:	89 ce                	mov    esi,ecx
c0027f09:	89 c8                	mov    eax,ecx
c0027f0b:	c1 f8 14             	sar    eax,0x14
c0027f0e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f11:	89 f8                	mov    eax,edi
c0027f13:	89 fb                	mov    ebx,edi
c0027f15:	c1 e3 0b             	shl    ebx,0xb
c0027f18:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027f1b:	c1 e6 0b             	shl    esi,0xb
c0027f1e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f24:	c1 e8 15             	shr    eax,0x15
c0027f27:	09 c6                	or     esi,eax
c0027f29:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027f2c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f2f:	89 c2                	mov    edx,eax
c0027f31:	c1 fa 14             	sar    edx,0x14
c0027f34:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f37:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027f3a:	89 de                	mov    esi,ebx
c0027f3c:	c1 e6 0b             	shl    esi,0xb
c0027f3f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f42:	c1 e0 0b             	shl    eax,0xb
c0027f45:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f4a:	c1 eb 15             	shr    ebx,0x15
c0027f4d:	09 d8                	or     eax,ebx
c0027f4f:	89 c2                	mov    edx,eax
c0027f51:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f54:	25 ff 07 00 00       	and    eax,0x7ff
c0027f59:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f5c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f5f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f65:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f68:	29 d8                	sub    eax,ebx
c0027f6a:	05 ff 03 00 00       	add    eax,0x3ff
c0027f6f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f72:	46                   	inc    esi
c0027f73:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f79:	0f 85 a5 00 00 00    	jne    c0028024 <__divdf3+0x138>
c0027f7f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f82:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f85:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f89:	74 2a                	je     c0027fb5 <__divdf3+0xc9>
c0027f8b:	85 f6                	test   esi,esi
c0027f8d:	0f 85 cc 02 00 00    	jne    c002825f <__divdf3+0x373>
c0027f93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f96:	40                   	inc    eax
c0027f97:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f9c:	75 26                	jne    c0027fc4 <__divdf3+0xd8>
c0027f9e:	85 db                	test   ebx,ebx
c0027fa0:	74 22                	je     c0027fc4 <__divdf3+0xd8>
c0027fa2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fa5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fa8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fab:	09 d0                	or     eax,edx
c0027fad:	0f 85 ac 02 00 00    	jne    c002825f <__divdf3+0x373>
c0027fb3:	eb 63                	jmp    c0028018 <__divdf3+0x12c>
c0027fb5:	85 f6                	test   esi,esi
c0027fb7:	75 22                	jne    c0027fdb <__divdf3+0xef>
c0027fb9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027fbc:	40                   	inc    eax
c0027fbd:	a9 fe 07 00 00       	test   eax,0x7fe
c0027fc2:	74 36                	je     c0027ffa <__divdf3+0x10e>
c0027fc4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027fc8:	0f 89 91 02 00 00    	jns    c002825f <__divdf3+0x373>
c0027fce:	89 f8                	mov    eax,edi
c0027fd0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027fd6:	e9 80 02 00 00       	jmp    c002825b <__divdf3+0x36f>
c0027fdb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fde:	01 f6                	add    esi,esi
c0027fe0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027fe3:	c1 ef 1f             	shr    edi,0x1f
c0027fe6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fe9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027fec:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027fef:	09 f7                	or     edi,esi
c0027ff1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027ff4:	78 2e                	js     c0028024 <__divdf3+0x138>
c0027ff6:	89 c8                	mov    eax,ecx
c0027ff8:	eb e1                	jmp    c0027fdb <__divdf3+0xef>
c0027ffa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ffd:	09 d0                	or     eax,edx
c0027fff:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028003:	74 0f                	je     c0028014 <__divdf3+0x128>
c0028005:	85 c0                	test   eax,eax
c0028007:	74 bb                	je     c0027fc4 <__divdf3+0xd8>
c0028009:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002800c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002800f:	e9 4b 02 00 00       	jmp    c002825f <__divdf3+0x373>
c0028014:	85 c0                	test   eax,eax
c0028016:	75 ac                	jne    c0027fc4 <__divdf3+0xd8>
c0028018:	31 ff                	xor    edi,edi
c002801a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002801f:	e9 3b 02 00 00       	jmp    c002825f <__divdf3+0x373>
c0028024:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028027:	8d 4f 01             	lea    ecx,[edi+0x1]
c002802a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028030:	75 6b                	jne    c002809d <__divdf3+0x1b1>
c0028032:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028035:	09 d6                	or     esi,edx
c0028037:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002803b:	74 28                	je     c0028065 <__divdf3+0x179>
c002803d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028040:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028043:	85 f6                	test   esi,esi
c0028045:	0f 85 14 02 00 00    	jne    c002825f <__divdf3+0x373>
c002804b:	31 ff                	xor    edi,edi
c002804d:	31 c9                	xor    ecx,ecx
c002804f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028052:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028055:	0f 89 04 02 00 00    	jns    c002825f <__divdf3+0x373>
c002805b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028060:	e9 fa 01 00 00       	jmp    c002825f <__divdf3+0x373>
c0028065:	85 f6                	test   esi,esi
c0028067:	75 1b                	jne    c0028084 <__divdf3+0x198>
c0028069:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002806c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002806f:	25 00 00 00 80       	and    eax,0x80000000
c0028074:	31 c9                	xor    ecx,ecx
c0028076:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002807b:	89 cf                	mov    edi,ecx
c002807d:	89 c1                	mov    ecx,eax
c002807f:	e9 db 01 00 00       	jmp    c002825f <__divdf3+0x373>
c0028084:	01 d2                	add    edx,edx
c0028086:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028089:	c1 eb 1f             	shr    ebx,0x1f
c002808c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002808f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028092:	8d 48 01             	lea    ecx,[eax+0x1]
c0028095:	09 da                	or     edx,ebx
c0028097:	78 04                	js     c002809d <__divdf3+0x1b1>
c0028099:	89 c8                	mov    eax,ecx
c002809b:	eb e7                	jmp    c0028084 <__divdf3+0x198>
c002809d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00280a0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00280a6:	81 ca 00 00 00 80    	or     edx,0x80000000
c00280ac:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00280af:	39 d6                	cmp    esi,edx
c00280b1:	77 0d                	ja     c00280c0 <__divdf3+0x1d4>
c00280b3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00280b6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00280b9:	72 1b                	jb     c00280d6 <__divdf3+0x1ea>
c00280bb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00280be:	75 16                	jne    c00280d6 <__divdf3+0x1ea>
c00280c0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280c3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280c6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00280c9:	83 de 00             	sbb    esi,0x0
c00280cc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00280cf:	ba 01 00 00 00       	mov    edx,0x1
c00280d4:	eb 02                	jmp    c00280d8 <__divdf3+0x1ec>
c00280d6:	31 d2                	xor    edx,edx
c00280d8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00280df:	31 ff                	xor    edi,edi
c00280e1:	01 ff                	add    edi,edi
c00280e3:	89 d1                	mov    ecx,edx
c00280e5:	c1 e9 1f             	shr    ecx,0x1f
c00280e8:	09 cf                	or     edi,ecx
c00280ea:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00280ed:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00280f0:	89 da                	mov    edx,ebx
c00280f2:	89 f3                	mov    ebx,esi
c00280f4:	8d 34 36             	lea    esi,[esi+esi*1]
c00280f7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280fa:	c1 e9 1f             	shr    ecx,0x1f
c00280fd:	09 ce                	or     esi,ecx
c00280ff:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028102:	01 c9                	add    ecx,ecx
c0028104:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028107:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002810a:	85 db                	test   ebx,ebx
c002810c:	78 29                	js     c0028137 <__divdf3+0x24b>
c002810e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028111:	72 07                	jb     c002811a <__divdf3+0x22e>
c0028113:	75 3c                	jne    c0028151 <__divdf3+0x265>
c0028115:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028118:	77 37                	ja     c0028151 <__divdf3+0x265>
c002811a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002811d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028120:	31 d2                	xor    edx,edx
c0028122:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028125:	0f 97 c2             	seta   dl
c0028128:	29 d6                	sub    esi,edx
c002812a:	89 d9                	mov    ecx,ebx
c002812c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002812f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028132:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028135:	eb 17                	jmp    c002814e <__divdf3+0x262>
c0028137:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002813a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002813d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028140:	0f 97 c1             	seta   cl
c0028143:	0f b6 c9             	movzx  ecx,cl
c0028146:	29 ce                	sub    esi,ecx
c0028148:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002814b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002814e:	83 ca 01             	or     edx,0x1
c0028151:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028154:	75 8b                	jne    c00280e1 <__divdf3+0x1f5>
c0028156:	c1 e7 09             	shl    edi,0x9
c0028159:	89 d1                	mov    ecx,edx
c002815b:	c1 e9 17             	shr    ecx,0x17
c002815e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028161:	09 f3                	or     ebx,esi
c0028163:	0f 95 c3             	setne  bl
c0028166:	0f b6 db             	movzx  ebx,bl
c0028169:	c1 e2 09             	shl    edx,0x9
c002816c:	09 d3                	or     ebx,edx
c002816e:	89 ca                	mov    edx,ecx
c0028170:	09 fa                	or     edx,edi
c0028172:	78 0c                	js     c0028180 <__divdf3+0x294>
c0028174:	01 d2                	add    edx,edx
c0028176:	89 d9                	mov    ecx,ebx
c0028178:	c1 e9 1f             	shr    ecx,0x1f
c002817b:	09 ca                	or     edx,ecx
c002817d:	01 db                	add    ebx,ebx
c002817f:	48                   	dec    eax
c0028180:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028185:	0f 8f 83 00 00 00    	jg     c002820e <__divdf3+0x322>
c002818b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028191:	85 c0                	test   eax,eax
c0028193:	0f 8f 82 00 00 00    	jg     c002821b <__divdf3+0x32f>
c0028199:	83 f8 cc             	cmp    eax,0xffffffcc
c002819c:	7c 77                	jl     c0028215 <__divdf3+0x329>
c002819e:	be 01 00 00 00       	mov    esi,0x1
c00281a3:	29 c6                	sub    esi,eax
c00281a5:	81 ca 00 00 00 80    	or     edx,0x80000000
c00281ab:	83 fe 1f             	cmp    esi,0x1f
c00281ae:	7e 2f                	jle    c00281df <__divdf3+0x2f3>
c00281b0:	83 fe 20             	cmp    esi,0x20
c00281b3:	75 0a                	jne    c00281bf <__divdf3+0x2d3>
c00281b5:	85 db                	test   ebx,ebx
c00281b7:	0f 95 c3             	setne  bl
c00281ba:	0f b6 db             	movzx  ebx,bl
c00281bd:	eb 1a                	jmp    c00281d9 <__divdf3+0x2ed>
c00281bf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00281c2:	89 d7                	mov    edi,edx
c00281c4:	d3 e7                	shl    edi,cl
c00281c6:	89 f9                	mov    ecx,edi
c00281c8:	09 d9                	or     ecx,ebx
c00281ca:	0f 95 c3             	setne  bl
c00281cd:	0f b6 db             	movzx  ebx,bl
c00281d0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00281d5:	29 c1                	sub    ecx,eax
c00281d7:	d3 ea                	shr    edx,cl
c00281d9:	09 d3                	or     ebx,edx
c00281db:	31 c0                	xor    eax,eax
c00281dd:	eb 3a                	jmp    c0028219 <__divdf3+0x32d>
c00281df:	83 c0 1f             	add    eax,0x1f
c00281e2:	89 d7                	mov    edi,edx
c00281e4:	88 c1                	mov    cl,al
c00281e6:	d3 e7                	shl    edi,cl
c00281e8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281eb:	89 df                	mov    edi,ebx
c00281ed:	89 f1                	mov    ecx,esi
c00281ef:	d3 ef                	shr    edi,cl
c00281f1:	89 f9                	mov    ecx,edi
c00281f3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00281f6:	09 cf                	or     edi,ecx
c00281f8:	88 c1                	mov    cl,al
c00281fa:	d3 e3                	shl    ebx,cl
c00281fc:	85 db                	test   ebx,ebx
c00281fe:	0f 95 c3             	setne  bl
c0028201:	0f b6 db             	movzx  ebx,bl
c0028204:	09 fb                	or     ebx,edi
c0028206:	89 f1                	mov    ecx,esi
c0028208:	d3 ea                	shr    edx,cl
c002820a:	31 c0                	xor    eax,eax
c002820c:	eb 0d                	jmp    c002821b <__divdf3+0x32f>
c002820e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028213:	eb 02                	jmp    c0028217 <__divdf3+0x32b>
c0028215:	31 c0                	xor    eax,eax
c0028217:	31 db                	xor    ebx,ebx
c0028219:	31 d2                	xor    edx,edx
c002821b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c002821e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028221:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028227:	09 c8                	or     eax,ecx
c0028229:	c1 e0 14             	shl    eax,0x14
c002822c:	89 d1                	mov    ecx,edx
c002822e:	c1 e9 0b             	shr    ecx,0xb
c0028231:	09 c8                	or     eax,ecx
c0028233:	89 c6                	mov    esi,eax
c0028235:	89 d9                	mov    ecx,ebx
c0028237:	c1 e9 0b             	shr    ecx,0xb
c002823a:	c1 e2 15             	shl    edx,0x15
c002823d:	09 ca                	or     edx,ecx
c002823f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028245:	0f 95 c0             	setne  al
c0028248:	09 c1                	or     ecx,eax
c002824a:	83 e1 01             	and    ecx,0x1
c002824d:	c1 eb 0a             	shr    ebx,0xa
c0028250:	21 cb                	and    ebx,ecx
c0028252:	01 d3                	add    ebx,edx
c0028254:	89 d8                	mov    eax,ebx
c0028256:	83 d6 00             	adc    esi,0x0
c0028259:	89 f2                	mov    edx,esi
c002825b:	89 c7                	mov    edi,eax
c002825d:	89 d1                	mov    ecx,edx
c002825f:	89 f8                	mov    eax,edi
c0028261:	89 ca                	mov    edx,ecx
c0028263:	83 c4 2c             	add    esp,0x2c
c0028266:	5b                   	pop    ebx
c0028267:	5e                   	pop    esi
c0028268:	5f                   	pop    edi
c0028269:	5d                   	pop    ebp
c002826a:	c3                   	ret    

c002826b <__floatsidf>:
c002826b:	55                   	push   ebp
c002826c:	89 e5                	mov    ebp,esp
c002826e:	56                   	push   esi
c002826f:	53                   	push   ebx
c0028270:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028273:	85 db                	test   ebx,ebx
c0028275:	7e 15                	jle    c002828c <__floatsidf+0x21>
c0028277:	0f bd cb             	bsr    ecx,ebx
c002827a:	83 f1 1f             	xor    ecx,0x1f
c002827d:	d3 e3                	shl    ebx,cl
c002827f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028285:	b8 1e 04 00 00       	mov    eax,0x41e
c002828a:	eb 21                	jmp    c00282ad <__floatsidf+0x42>
c002828c:	b8 00 00 00 00       	mov    eax,0x0
c0028291:	ba 00 00 00 00       	mov    edx,0x0
c0028296:	74 2a                	je     c00282c2 <__floatsidf+0x57>
c0028298:	f7 db                	neg    ebx
c002829a:	0f bd cb             	bsr    ecx,ebx
c002829d:	83 f1 1f             	xor    ecx,0x1f
c00282a0:	d3 e3                	shl    ebx,cl
c00282a2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282a8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00282ad:	29 c8                	sub    eax,ecx
c00282af:	c1 e0 14             	shl    eax,0x14
c00282b2:	89 c1                	mov    ecx,eax
c00282b4:	89 de                	mov    esi,ebx
c00282b6:	c1 ee 0b             	shr    esi,0xb
c00282b9:	09 f1                	or     ecx,esi
c00282bb:	89 ca                	mov    edx,ecx
c00282bd:	c1 e3 15             	shl    ebx,0x15
c00282c0:	89 d8                	mov    eax,ebx
c00282c2:	5b                   	pop    ebx
c00282c3:	5e                   	pop    esi
c00282c4:	5d                   	pop    ebp
c00282c5:	c3                   	ret    

c00282c6 <__floatunsidf>:
c00282c6:	55                   	push   ebp
c00282c7:	89 e5                	mov    ebp,esp
c00282c9:	56                   	push   esi
c00282ca:	53                   	push   ebx
c00282cb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282ce:	85 db                	test   ebx,ebx
c00282d0:	74 2a                	je     c00282fc <__floatunsidf+0x36>
c00282d2:	0f bd cb             	bsr    ecx,ebx
c00282d5:	83 f1 1f             	xor    ecx,0x1f
c00282d8:	d3 e3                	shl    ebx,cl
c00282da:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282e0:	b8 1e 04 00 00       	mov    eax,0x41e
c00282e5:	29 c8                	sub    eax,ecx
c00282e7:	c1 e0 14             	shl    eax,0x14
c00282ea:	89 c1                	mov    ecx,eax
c00282ec:	89 de                	mov    esi,ebx
c00282ee:	c1 ee 0b             	shr    esi,0xb
c00282f1:	09 f1                	or     ecx,esi
c00282f3:	89 ca                	mov    edx,ecx
c00282f5:	c1 e3 15             	shl    ebx,0x15
c00282f8:	89 d8                	mov    eax,ebx
c00282fa:	eb 04                	jmp    c0028300 <__floatunsidf+0x3a>
c00282fc:	31 c0                	xor    eax,eax
c00282fe:	31 d2                	xor    edx,edx
c0028300:	5b                   	pop    ebx
c0028301:	5e                   	pop    esi
c0028302:	5d                   	pop    ebp
c0028303:	c3                   	ret    

c0028304 <__fixdfsi>:
c0028304:	55                   	push   ebp
c0028305:	89 e5                	mov    ebp,esp
c0028307:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002830a:	89 d1                	mov    ecx,edx
c002830c:	c1 e1 0b             	shl    ecx,0xb
c002830f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028315:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028318:	c1 e8 15             	shr    eax,0x15
c002831b:	09 c1                	or     ecx,eax
c002831d:	c1 fa 14             	sar    edx,0x14
c0028320:	78 1f                	js     c0028341 <__fixdfsi+0x3d>
c0028322:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028328:	31 c0                	xor    eax,eax
c002832a:	83 fa 1e             	cmp    edx,0x1e
c002832d:	77 40                	ja     c002836f <__fixdfsi+0x6b>
c002832f:	89 c8                	mov    eax,ecx
c0028331:	0d 00 00 00 80       	or     eax,0x80000000
c0028336:	b9 1f 00 00 00       	mov    ecx,0x1f
c002833b:	29 d1                	sub    ecx,edx
c002833d:	d3 e8                	shr    eax,cl
c002833f:	eb 2e                	jmp    c002836f <__fixdfsi+0x6b>
c0028341:	31 c0                	xor    eax,eax
c0028343:	81 c2 01 04 00 00    	add    edx,0x401
c0028349:	78 24                	js     c002836f <__fixdfsi+0x6b>
c002834b:	83 fa 1e             	cmp    edx,0x1e
c002834e:	7e 09                	jle    c0028359 <__fixdfsi+0x55>
c0028350:	83 fa 1f             	cmp    edx,0x1f
c0028353:	75 18                	jne    c002836d <__fixdfsi+0x69>
c0028355:	85 c9                	test   ecx,ecx
c0028357:	75 14                	jne    c002836d <__fixdfsi+0x69>
c0028359:	89 c8                	mov    eax,ecx
c002835b:	0d 00 00 00 80       	or     eax,0x80000000
c0028360:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028365:	29 d1                	sub    ecx,edx
c0028367:	d3 e8                	shr    eax,cl
c0028369:	f7 d8                	neg    eax
c002836b:	eb 02                	jmp    c002836f <__fixdfsi+0x6b>
c002836d:	31 c0                	xor    eax,eax
c002836f:	5d                   	pop    ebp
c0028370:	c3                   	ret    

c0028371 <__fixunsdfsi>:
c0028371:	55                   	push   ebp
c0028372:	89 e5                	mov    ebp,esp
c0028374:	53                   	push   ebx
c0028375:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002837b:	89 d3                	mov    ebx,edx
c002837d:	c1 fb 14             	sar    ebx,0x14
c0028380:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028386:	31 c0                	xor    eax,eax
c0028388:	83 fb 1f             	cmp    ebx,0x1f
c002838b:	77 1d                	ja     c00283aa <__fixunsdfsi+0x39>
c002838d:	89 d0                	mov    eax,edx
c002838f:	c1 e0 0b             	shl    eax,0xb
c0028392:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028397:	c1 e9 15             	shr    ecx,0x15
c002839a:	09 c8                	or     eax,ecx
c002839c:	0d 00 00 00 80       	or     eax,0x80000000
c00283a1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283a6:	29 d9                	sub    ecx,ebx
c00283a8:	d3 e8                	shr    eax,cl
c00283aa:	5b                   	pop    ebx
c00283ab:	5d                   	pop    ebp
c00283ac:	c3                   	ret    

c00283ad <__cmpdf2>:
c00283ad:	55                   	push   ebp
c00283ae:	89 e5                	mov    ebp,esp
c00283b0:	57                   	push   edi
c00283b1:	56                   	push   esi
c00283b2:	53                   	push   ebx
c00283b3:	83 ec 0c             	sub    esp,0xc
c00283b6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00283b9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283bc:	89 ca                	mov    edx,ecx
c00283be:	c1 ea 14             	shr    edx,0x14
c00283c1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00283c7:	89 cb                	mov    ebx,ecx
c00283c9:	c1 fb 1f             	sar    ebx,0x1f
c00283cc:	31 da                	xor    edx,ebx
c00283ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283d1:	89 df                	mov    edi,ebx
c00283d3:	c1 e7 0b             	shl    edi,0xb
c00283d6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00283d9:	c1 e1 0b             	shl    ecx,0xb
c00283dc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283e2:	c1 eb 15             	shr    ebx,0x15
c00283e5:	09 d9                	or     ecx,ebx
c00283e7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00283ea:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283ed:	89 ce                	mov    esi,ecx
c00283ef:	c1 ee 14             	shr    esi,0x14
c00283f2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283f8:	89 cb                	mov    ebx,ecx
c00283fa:	c1 fb 1f             	sar    ebx,0x1f
c00283fd:	31 de                	xor    esi,ebx
c00283ff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028402:	89 df                	mov    edi,ebx
c0028404:	c1 e7 0b             	shl    edi,0xb
c0028407:	c1 e1 0b             	shl    ecx,0xb
c002840a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028410:	c1 eb 15             	shr    ebx,0x15
c0028413:	09 d9                	or     ecx,ebx
c0028415:	89 d3                	mov    ebx,edx
c0028417:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002841d:	43                   	inc    ebx
c002841e:	83 fb 01             	cmp    ebx,0x1
c0028421:	77 08                	ja     c002842b <__cmpdf2+0x7e>
c0028423:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028426:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028429:	75 68                	jne    c0028493 <__cmpdf2+0xe6>
c002842b:	89 f3                	mov    ebx,esi
c002842d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028433:	43                   	inc    ebx
c0028434:	83 fb 01             	cmp    ebx,0x1
c0028437:	77 06                	ja     c002843f <__cmpdf2+0x92>
c0028439:	89 fb                	mov    ebx,edi
c002843b:	09 cb                	or     ebx,ecx
c002843d:	75 54                	jne    c0028493 <__cmpdf2+0xe6>
c002843f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028442:	09 f8                	or     eax,edi
c0028444:	09 c8                	or     eax,ecx
c0028446:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028449:	75 12                	jne    c002845d <__cmpdf2+0xb0>
c002844b:	8d 42 01             	lea    eax,[edx+0x1]
c002844e:	83 f8 01             	cmp    eax,0x1
c0028451:	77 0a                	ja     c002845d <__cmpdf2+0xb0>
c0028453:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028456:	31 c0                	xor    eax,eax
c0028458:	83 fb 01             	cmp    ebx,0x1
c002845b:	76 36                	jbe    c0028493 <__cmpdf2+0xe6>
c002845d:	b8 01 00 00 00       	mov    eax,0x1
c0028462:	39 f2                	cmp    edx,esi
c0028464:	7f 2d                	jg     c0028493 <__cmpdf2+0xe6>
c0028466:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002846b:	7c 26                	jl     c0028493 <__cmpdf2+0xe6>
c002846d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028470:	77 07                	ja     c0028479 <__cmpdf2+0xcc>
c0028472:	72 16                	jb     c002848a <__cmpdf2+0xdd>
c0028474:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028477:	76 0a                	jbe    c0028483 <__cmpdf2+0xd6>
c0028479:	89 d0                	mov    eax,edx
c002847b:	c1 f8 1f             	sar    eax,0x1f
c002847e:	83 c8 01             	or     eax,0x1
c0028481:	eb 10                	jmp    c0028493 <__cmpdf2+0xe6>
c0028483:	b8 00 00 00 00       	mov    eax,0x0
c0028488:	73 09                	jae    c0028493 <__cmpdf2+0xe6>
c002848a:	89 d0                	mov    eax,edx
c002848c:	c1 f8 1f             	sar    eax,0x1f
c002848f:	83 e0 02             	and    eax,0x2
c0028492:	48                   	dec    eax
c0028493:	83 c4 0c             	add    esp,0xc
c0028496:	5b                   	pop    ebx
c0028497:	5e                   	pop    esi
c0028498:	5f                   	pop    edi
c0028499:	5d                   	pop    ebp
c002849a:	c3                   	ret    

c002849b <__eqdf2>:
c002849b:	55                   	push   ebp
c002849c:	89 e5                	mov    ebp,esp
c002849e:	50                   	push   eax
c002849f:	6a 01                	push   0x1
c00284a1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00284a4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00284a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284ad:	e8 fb fe ff ff       	call   c00283ad <__cmpdf2>
c00284b2:	83 c4 18             	add    esp,0x18
c00284b5:	c9                   	leave  
c00284b6:	c3                   	ret    

c00284b7 <__nedf2>:
c00284b7:	eb e2                	jmp    c002849b <__eqdf2>

c00284b9 <__gtdf2>:
c00284b9:	55                   	push   ebp
c00284ba:	89 e5                	mov    ebp,esp
c00284bc:	50                   	push   eax
c00284bd:	6a ff                	push   0xffffffff
c00284bf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00284c2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00284c5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284cb:	e8 dd fe ff ff       	call   c00283ad <__cmpdf2>
c00284d0:	83 c4 18             	add    esp,0x18
c00284d3:	c9                   	leave  
c00284d4:	c3                   	ret    

c00284d5 <__gedf2>:
c00284d5:	eb e2                	jmp    c00284b9 <__gtdf2>

c00284d7 <__ltdf2>:
c00284d7:	eb c2                	jmp    c002849b <__eqdf2>

c00284d9 <__ledf2>:
c00284d9:	eb c0                	jmp    c002849b <__eqdf2>

c00284db <__truncdfsf2>:
c00284db:	55                   	push   ebp
c00284dc:	89 e5                	mov    ebp,esp
c00284de:	57                   	push   edi
c00284df:	56                   	push   esi
c00284e0:	53                   	push   ebx
c00284e1:	83 ec 0c             	sub    esp,0xc
c00284e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00284e7:	89 d1                	mov    ecx,edx
c00284e9:	c1 f9 14             	sar    ecx,0x14
c00284ec:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284ef:	89 df                	mov    edi,ebx
c00284f1:	c1 e7 0b             	shl    edi,0xb
c00284f4:	89 d0                	mov    eax,edx
c00284f6:	c1 e0 0b             	shl    eax,0xb
c00284f9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00284fe:	c1 eb 15             	shr    ebx,0x15
c0028501:	09 d8                	or     eax,ebx
c0028503:	89 cb                	mov    ebx,ecx
c0028505:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002850b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028511:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028517:	0f 86 9e 00 00 00    	jbe    c00285bb <__truncdfsf2+0xe0>
c002851d:	85 db                	test   ebx,ebx
c002851f:	75 0a                	jne    c002852b <__truncdfsf2+0x50>
c0028521:	c1 fa 17             	sar    edx,0x17
c0028524:	30 d2                	xor    dl,dl
c0028526:	e9 84 00 00 00       	jmp    c00285af <__truncdfsf2+0xd4>
c002852b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028531:	83 fe 83             	cmp    esi,0xffffff83
c0028534:	7d 4b                	jge    c0028581 <__truncdfsf2+0xa6>
c0028536:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002853b:	29 f1                	sub    ecx,esi
c002853d:	83 f9 1f             	cmp    ecx,0x1f
c0028540:	7f 6b                	jg     c00285ad <__truncdfsf2+0xd2>
c0028542:	0d 00 00 00 80       	or     eax,0x80000000
c0028547:	89 c3                	mov    ebx,eax
c0028549:	d3 eb                	shr    ebx,cl
c002854b:	be 01 00 00 00       	mov    esi,0x1
c0028550:	d3 e6                	shl    esi,cl
c0028552:	4e                   	dec    esi
c0028553:	21 f0                	and    eax,esi
c0028555:	09 f8                	or     eax,edi
c0028557:	0f 95 c0             	setne  al
c002855a:	0f b6 c0             	movzx  eax,al
c002855d:	09 c3                	or     ebx,eax
c002855f:	89 d9                	mov    ecx,ebx
c0028561:	c1 e9 08             	shr    ecx,0x8
c0028564:	f6 c3 7f             	test   bl,0x7f
c0028567:	0f 95 c0             	setne  al
c002856a:	09 c8                	or     eax,ecx
c002856c:	83 e0 01             	and    eax,0x1
c002856f:	c1 eb 07             	shr    ebx,0x7
c0028572:	21 c3                	and    ebx,eax
c0028574:	81 e2 00 00 00 80    	and    edx,0x80000000
c002857a:	09 d1                	or     ecx,edx
c002857c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002857f:	eb 76                	jmp    c00285f7 <__truncdfsf2+0x11c>
c0028581:	83 c6 80             	add    esi,0xffffff80
c0028584:	7e 1d                	jle    c00285a3 <__truncdfsf2+0xc8>
c0028586:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002858c:	75 0b                	jne    c0028599 <__truncdfsf2+0xbe>
c002858e:	09 f8                	or     eax,edi
c0028590:	74 09                	je     c002859b <__truncdfsf2+0xc0>
c0028592:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028597:	eb 02                	jmp    c002859b <__truncdfsf2+0xc0>
c0028599:	31 c0                	xor    eax,eax
c002859b:	c1 fa 17             	sar    edx,0x17
c002859e:	80 ca ff             	or     dl,0xff
c00285a1:	eb 0e                	jmp    c00285b1 <__truncdfsf2+0xd6>
c00285a3:	c1 fa 1f             	sar    edx,0x1f
c00285a6:	c1 e2 08             	shl    edx,0x8
c00285a9:	09 ca                	or     edx,ecx
c00285ab:	eb 04                	jmp    c00285b1 <__truncdfsf2+0xd6>
c00285ad:	31 d2                	xor    edx,edx
c00285af:	31 c0                	xor    eax,eax
c00285b1:	c1 e2 17             	shl    edx,0x17
c00285b4:	c1 e8 08             	shr    eax,0x8
c00285b7:	09 d0                	or     eax,edx
c00285b9:	eb 3c                	jmp    c00285f7 <__truncdfsf2+0x11c>
c00285bb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00285c1:	89 ca                	mov    edx,ecx
c00285c3:	c1 fa 0b             	sar    edx,0xb
c00285c6:	c1 e2 08             	shl    edx,0x8
c00285c9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00285cc:	31 db                	xor    ebx,ebx
c00285ce:	85 ff                	test   edi,edi
c00285d0:	0f 95 c3             	setne  bl
c00285d3:	09 d8                	or     eax,ebx
c00285d5:	89 c3                	mov    ebx,eax
c00285d7:	c1 eb 08             	shr    ebx,0x8
c00285da:	a8 7f                	test   al,0x7f
c00285dc:	0f 95 c2             	setne  dl
c00285df:	89 d6                	mov    esi,edx
c00285e1:	09 de                	or     esi,ebx
c00285e3:	83 e6 01             	and    esi,0x1
c00285e6:	c1 e8 07             	shr    eax,0x7
c00285e9:	21 f0                	and    eax,esi
c00285eb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00285ee:	09 ca                	or     edx,ecx
c00285f0:	c1 e2 17             	shl    edx,0x17
c00285f3:	09 da                	or     edx,ebx
c00285f5:	01 d0                	add    eax,edx
c00285f7:	83 c4 0c             	add    esp,0xc
c00285fa:	5b                   	pop    ebx
c00285fb:	5e                   	pop    esi
c00285fc:	5f                   	pop    edi
c00285fd:	5d                   	pop    ebp
c00285fe:	c3                   	ret    

c00285ff <__extendsfdf2>:
c00285ff:	55                   	push   ebp
c0028600:	89 e5                	mov    ebp,esp
c0028602:	57                   	push   edi
c0028603:	56                   	push   esi
c0028604:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028607:	89 d1                	mov    ecx,edx
c0028609:	c1 f9 17             	sar    ecx,0x17
c002860c:	c1 e2 08             	shl    edx,0x8
c002860f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028615:	89 c8                	mov    eax,ecx
c0028617:	80 e4 f8             	and    ah,0xf8
c002861a:	8d 71 01             	lea    esi,[ecx+0x1]
c002861d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028623:	75 27                	jne    c002864c <__extendsfdf2+0x4d>
c0028625:	81 e1 ff 00 00 00    	and    ecx,0xff
c002862b:	75 18                	jne    c0028645 <__extendsfdf2+0x46>
c002862d:	85 d2                	test   edx,edx
c002862f:	74 20                	je     c0028651 <__extendsfdf2+0x52>
c0028631:	41                   	inc    ecx
c0028632:	01 d2                	add    edx,edx
c0028634:	79 fb                	jns    c0028631 <__extendsfdf2+0x32>
c0028636:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002863c:	29 c8                	sub    eax,ecx
c002863e:	05 81 03 00 00       	add    eax,0x381
c0028643:	eb 0c                	jmp    c0028651 <__extendsfdf2+0x52>
c0028645:	05 00 07 00 00       	add    eax,0x700
c002864a:	eb 05                	jmp    c0028651 <__extendsfdf2+0x52>
c002864c:	05 80 03 00 00       	add    eax,0x380
c0028651:	c1 e0 14             	shl    eax,0x14
c0028654:	89 c1                	mov    ecx,eax
c0028656:	89 d0                	mov    eax,edx
c0028658:	c1 e8 0b             	shr    eax,0xb
c002865b:	09 c1                	or     ecx,eax
c002865d:	c1 e2 15             	shl    edx,0x15
c0028660:	89 d0                	mov    eax,edx
c0028662:	89 ca                	mov    edx,ecx
c0028664:	5e                   	pop    esi
c0028665:	5f                   	pop    edi
c0028666:	5d                   	pop    ebp
c0028667:	c3                   	ret    
c0028668:	66 90                	xchg   ax,ax
c002866a:	66 90                	xchg   ax,ax
c002866c:	66 90                	xchg   ax,ax
c002866e:	66 90                	xchg   ax,ax

c0028670 <fabs>:
c0028670:	83 ec 0c             	sub    esp,0xc
c0028673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028677:	89 04 24             	mov    DWORD PTR [esp],eax
c002867a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002867e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028683:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028687:	dd 04 24             	fld    QWORD PTR [esp]
c002868a:	83 c4 0c             	add    esp,0xc
c002868d:	c3                   	ret    
c002868e:	66 90                	xchg   ax,ax

c0028690 <lrint>:
c0028690:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028694:	83 ec 04             	sub    esp,0x4
c0028697:	db 1c 24             	fistp  DWORD PTR [esp]
c002869a:	58                   	pop    eax
c002869b:	c3                   	ret    

c002869c <lrintf>:
c002869c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00286a0:	83 ec 04             	sub    esp,0x4
c00286a3:	db 1c 24             	fistp  DWORD PTR [esp]
c00286a6:	58                   	pop    eax
c00286a7:	c3                   	ret    

Disassembly of section .init:

c00286a8 <_init>:
c00286a8:	55                   	push   ebp
c00286a9:	89 e5                	mov    ebp,esp
c00286ab:	e8 68 7a fd ff       	call   c0000118 <frame_dummy>
c00286b0:	e8 5b e0 ff ff       	call   c0026710 <__do_global_ctors_aux>
c00286b5:	5d                   	pop    ebp
c00286b6:	c3                   	ret    

Disassembly of section .fini:

c00286b7 <_fini>:
c00286b7:	55                   	push   ebp
c00286b8:	89 e5                	mov    ebp,esp
c00286ba:	e8 e9 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00286bf:	5d                   	pop    ebp
c00286c0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00286c2 <Computer::~Computer()>:
c00286c2:	83 ec 0c             	sub    esp,0xc
c00286c5:	ba 08 a2 02 c0       	mov    edx,0xc002a208
c00286ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ce:	89 10                	mov    DWORD PTR [eax],edx
c00286d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d4:	83 ec 0c             	sub    esp,0xc
c00286d7:	50                   	push   eax
c00286d8:	e8 fb ba fe ff       	call   c00141d8 <Device::~Device()>
c00286dd:	83 c4 10             	add    esp,0x10
c00286e0:	90                   	nop
c00286e1:	83 c4 0c             	add    esp,0xc
c00286e4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00286e6 <Computer::~Computer()>:
c00286e6:	83 ec 0c             	sub    esp,0xc
c00286e9:	83 ec 0c             	sub    esp,0xc
c00286ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286f0:	e8 cd ff ff ff       	call   c00286c2 <Computer::~Computer()>
c00286f5:	83 c4 10             	add    esp,0x10
c00286f8:	83 ec 08             	sub    esp,0x8
c00286fb:	68 ec 01 00 00       	push   0x1ec
c0028700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028704:	e8 f6 a6 fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0028709:	83 c4 10             	add    esp,0x10
c002870c:	83 c4 0c             	add    esp,0xc
c002870f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028710 <idleCommon()>:
c0028710:	83 ec 0c             	sub    esp,0xc
c0028713:	e8 ce 56 ff ff       	call   c001dde6 <lockScheduler()>
c0028718:	e8 3f 5a ff ff       	call   c001e15c <schedule()>
c002871d:	83 c4 0c             	add    esp,0xc
c0028720:	e9 c3 56 ff ff       	jmp    c001dde8 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028726 <LinkedList<UnixFile>::~LinkedList()>:
c0028726:	90                   	nop
c0028727:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028728 <LinkedList<UnixFile>::LinkedList()>:
c0028728:	83 ec 0c             	sub    esp,0xc
c002872b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028739:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028744:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002874b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028759:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028764:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002876b:	83 ec 0c             	sub    esp,0xc
c002876e:	68 c6 a4 02 c0       	push   0xc002a4c6
c0028773:	e8 67 a7 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0028778:	83 c4 10             	add    esp,0x10
c002877b:	90                   	nop
c002877c:	83 c4 0c             	add    esp,0xc
c002877f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028780 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028780:	83 ec 0c             	sub    esp,0xc
c0028783:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028788:	75 10                	jne    c002879a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002878a:	83 ec 0c             	sub    esp,0xc
c002878d:	68 e0 a4 02 c0       	push   0xc002a4e0
c0028792:	e8 74 1e ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0028797:	83 c4 10             	add    esp,0x10
c002879a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879e:	8b 00                	mov    eax,DWORD PTR [eax]
c00287a0:	85 c0                	test   eax,eax
c00287a2:	74 34                	je     c00287d8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00287a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287ab:	85 c0                	test   eax,eax
c00287ad:	74 29                	je     c00287d8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00287af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287d6:	eb 65                	jmp    c002883d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00287de:	85 c0                	test   eax,eax
c00287e0:	75 4b                	jne    c002882d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287e9:	85 c0                	test   eax,eax
c00287eb:	75 40                	jne    c002882d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287f5:	89 10                	mov    DWORD PTR [eax],edx
c00287f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028806:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028809:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028814:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028817:	85 c0                	test   eax,eax
c0028819:	74 22                	je     c002883d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002881b:	83 ec 0c             	sub    esp,0xc
c002881e:	68 02 a5 02 c0       	push   0xc002a502
c0028823:	e8 e3 1d ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0028828:	83 c4 10             	add    esp,0x10
c002882b:	eb 10                	jmp    c002883d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002882d:	83 ec 0c             	sub    esp,0xc
c0028830:	68 0c a5 02 c0       	push   0xc002a50c
c0028835:	e8 d1 1d ff ff       	call   c001a60b <Krnl::panic(char const*)>
c002883a:	83 c4 10             	add    esp,0x10
c002883d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028841:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028844:	8d 50 01             	lea    edx,[eax+0x1]
c0028847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002884e:	90                   	nop
c002884f:	83 c4 0c             	add    esp,0xc
c0028852:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028854 <LinkedList<UnixFile>::getFirstElement()>:
c0028854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028858:	8b 00                	mov    eax,DWORD PTR [eax]
c002885a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002885c <LinkedList<UnixFile>::removeFirst()>:
c002885c:	83 ec 0c             	sub    esp,0xc
c002885f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028863:	8b 00                	mov    eax,DWORD PTR [eax]
c0028865:	85 c0                	test   eax,eax
c0028867:	75 12                	jne    c002887b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028869:	83 ec 0c             	sub    esp,0xc
c002886c:	68 18 a5 02 c0       	push   0xc002a518
c0028871:	e8 95 1d ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0028876:	83 c4 10             	add    esp,0x10
c0028879:	eb 7e                	jmp    c00288f9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002887b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028882:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028885:	85 c0                	test   eax,eax
c0028887:	74 10                	je     c0028899 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028889:	83 ec 0c             	sub    esp,0xc
c002888c:	68 63 a5 02 c0       	push   0xc002a563
c0028891:	e8 75 1d ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0028896:	83 c4 10             	add    esp,0x10
c0028899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889d:	8b 00                	mov    eax,DWORD PTR [eax]
c002889f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a2:	85 c0                	test   eax,eax
c00288a4:	75 33                	jne    c00288d9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00288a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288c2:	83 f8 01             	cmp    eax,0x1
c00288c5:	74 21                	je     c00288e8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288c7:	83 ec 0c             	sub    esp,0xc
c00288ca:	68 3c a5 02 c0       	push   0xc002a53c
c00288cf:	e8 37 1d ff ff       	call   c001a60b <Krnl::panic(char const*)>
c00288d4:	83 c4 10             	add    esp,0x10
c00288d7:	eb 0f                	jmp    c00288e8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00288df:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00288e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e6:	89 10                	mov    DWORD PTR [eax],edx
c00288e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288ef:	8d 50 ff             	lea    edx,[eax-0x1]
c00288f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288f9:	83 c4 0c             	add    esp,0xc
c00288fc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00288fe <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00288fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028902:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028905:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028906 <DriverlessDevice::~DriverlessDevice()>:
c0028906:	ba c4 ac 02 c0       	mov    edx,0xc002acc4
c002890b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002890f:	89 10                	mov    DWORD PTR [eax],edx
c0028911:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028915:	50                   	push   eax
c0028916:	e8 bd b8 fe ff       	call   c00141d8 <Device::~Device()>
c002891b:	83 c4 04             	add    esp,0x4
c002891e:	90                   	nop
c002891f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028920 <DriverlessDevice::~DriverlessDevice()>:
c0028920:	83 ec 0c             	sub    esp,0xc
c0028923:	83 ec 0c             	sub    esp,0xc
c0028926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002892a:	e8 d7 ff ff ff       	call   c0028906 <DriverlessDevice::~DriverlessDevice()>
c002892f:	83 c4 10             	add    esp,0x10
c0028932:	83 ec 08             	sub    esp,0x8
c0028935:	68 58 01 00 00       	push   0x158
c002893a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002893e:	e8 bc a4 fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0028943:	83 c4 10             	add    esp,0x10
c0028946:	83 c4 0c             	add    esp,0xc
c0028949:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002894a <LinkedList<Device>::addElement(Device*)>:
c002894a:	83 ec 0c             	sub    esp,0xc
c002894d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028952:	75 10                	jne    c0028964 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028954:	83 ec 0c             	sub    esp,0xc
c0028957:	68 e0 a4 02 c0       	push   0xc002a4e0
c002895c:	e8 aa 1c ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0028961:	83 c4 10             	add    esp,0x10
c0028964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028968:	8b 00                	mov    eax,DWORD PTR [eax]
c002896a:	85 c0                	test   eax,eax
c002896c:	74 3a                	je     c00289a8 <LinkedList<Device>::addElement(Device*)+0x5e>
c002896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028972:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028975:	85 c0                	test   eax,eax
c0028977:	74 2f                	je     c00289a8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028980:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028984:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002898a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028992:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028999:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002899c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289a6:	eb 68                	jmp    c0028a10 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00289ae:	85 c0                	test   eax,eax
c00289b0:	75 4e                	jne    c0028a00 <LinkedList<Device>::addElement(Device*)+0xb6>
c00289b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289b9:	85 c0                	test   eax,eax
c00289bb:	75 43                	jne    c0028a00 <LinkedList<Device>::addElement(Device*)+0xb6>
c00289bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289c5:	89 10                	mov    DWORD PTR [eax],edx
c00289c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289d9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289ea:	85 c0                	test   eax,eax
c00289ec:	74 22                	je     c0028a10 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289ee:	83 ec 0c             	sub    esp,0xc
c00289f1:	68 02 a5 02 c0       	push   0xc002a502
c00289f6:	e8 10 1c ff ff       	call   c001a60b <Krnl::panic(char const*)>
c00289fb:	83 c4 10             	add    esp,0x10
c00289fe:	eb 10                	jmp    c0028a10 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a00:	83 ec 0c             	sub    esp,0xc
c0028a03:	68 0c a5 02 c0       	push   0xc002a50c
c0028a08:	e8 fe 1b ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0028a0d:	83 c4 10             	add    esp,0x10
c0028a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a17:	8d 50 01             	lea    edx,[eax+0x1]
c0028a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a21:	90                   	nop
c0028a22:	83 c4 0c             	add    esp,0xc
c0028a25:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028a26 <LinkedList<Device>::LinkedList()>:
c0028a26:	83 ec 0c             	sub    esp,0xc
c0028a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a42:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a62:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a69:	83 ec 0c             	sub    esp,0xc
c0028a6c:	68 c6 a4 02 c0       	push   0xc002a4c6
c0028a71:	e8 69 a4 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0028a76:	83 c4 10             	add    esp,0x10
c0028a79:	90                   	nop
c0028a7a:	83 c4 0c             	add    esp,0xc
c0028a7d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a7e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a82:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a84:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a86 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a8c:	85 c0                	test   eax,eax
c0028a8e:	75 0e                	jne    c0028a9e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a97:	85 c0                	test   eax,eax
c0028a99:	75 03                	jne    c0028a9e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a9b:	b0 01                	mov    al,0x1
c0028a9d:	c3                   	ret    
c0028a9e:	b0 00                	mov    al,0x0
c0028aa0:	90                   	nop
c0028aa1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028aa2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028aa2:	83 ec 0c             	sub    esp,0xc
c0028aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aab:	85 c0                	test   eax,eax
c0028aad:	75 15                	jne    c0028ac4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028aaf:	83 ec 0c             	sub    esp,0xc
c0028ab2:	68 18 a5 02 c0       	push   0xc002a518
c0028ab7:	e8 4f 1b ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0028abc:	83 c4 10             	add    esp,0x10
c0028abf:	e9 88 00 00 00       	jmp    c0028b4c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028acb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ace:	85 c0                	test   eax,eax
c0028ad0:	0f 95 c0             	setne  al
c0028ad3:	84 c0                	test   al,al
c0028ad5:	74 10                	je     c0028ae7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028ad7:	83 ec 0c             	sub    esp,0xc
c0028ada:	68 63 a5 02 c0       	push   0xc002a563
c0028adf:	e8 27 1b ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0028ae4:	83 c4 10             	add    esp,0x10
c0028ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028af0:	85 c0                	test   eax,eax
c0028af2:	0f 94 c0             	sete   al
c0028af5:	84 c0                	test   al,al
c0028af7:	74 33                	je     c0028b2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028af9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028afd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b15:	83 f8 01             	cmp    eax,0x1
c0028b18:	74 21                	je     c0028b3b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b1a:	83 ec 0c             	sub    esp,0xc
c0028b1d:	68 3c a5 02 c0       	push   0xc002a53c
c0028b22:	e8 e4 1a ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0028b27:	83 c4 10             	add    esp,0x10
c0028b2a:	eb 0f                	jmp    c0028b3b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b30:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b32:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b39:	89 10                	mov    DWORD PTR [eax],edx
c0028b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b42:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b49:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b4c:	83 c4 0c             	add    esp,0xc
c0028b4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b50 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b50:	83 ec 0c             	sub    esp,0xc
c0028b53:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b58:	75 10                	jne    c0028b6a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b5a:	83 ec 0c             	sub    esp,0xc
c0028b5d:	68 e0 a4 02 c0       	push   0xc002a4e0
c0028b62:	e8 a4 1a ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0028b67:	83 c4 10             	add    esp,0x10
c0028b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b70:	85 c0                	test   eax,eax
c0028b72:	74 34                	je     c0028ba8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b7b:	85 c0                	test   eax,eax
c0028b7d:	74 29                	je     c0028ba8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b8a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b95:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b9f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ba6:	eb 65                	jmp    c0028c0d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bac:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bae:	85 c0                	test   eax,eax
c0028bb0:	75 4b                	jne    c0028bfd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bb9:	85 c0                	test   eax,eax
c0028bbb:	75 40                	jne    c0028bfd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bc5:	89 10                	mov    DWORD PTR [eax],edx
c0028bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bcf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bd9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028be7:	85 c0                	test   eax,eax
c0028be9:	74 22                	je     c0028c0d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028beb:	83 ec 0c             	sub    esp,0xc
c0028bee:	68 02 a5 02 c0       	push   0xc002a502
c0028bf3:	e8 13 1a ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0028bf8:	83 c4 10             	add    esp,0x10
c0028bfb:	eb 10                	jmp    c0028c0d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bfd:	83 ec 0c             	sub    esp,0xc
c0028c00:	68 0c a5 02 c0       	push   0xc002a50c
c0028c05:	e8 01 1a ff ff       	call   c001a60b <Krnl::panic(char const*)>
c0028c0a:	83 c4 10             	add    esp,0x10
c0028c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c11:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c14:	8d 50 01             	lea    edx,[eax+0x1]
c0028c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c1e:	90                   	nop
c0028c1f:	83 c4 0c             	add    esp,0xc
c0028c22:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028c24 <ACPI::~ACPI()>:
c0028c24:	83 ec 0c             	sub    esp,0xc
c0028c27:	ba 3c b6 02 c0       	mov    edx,0xc002b63c
c0028c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c30:	89 10                	mov    DWORD PTR [eax],edx
c0028c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c36:	83 ec 0c             	sub    esp,0xc
c0028c39:	50                   	push   eax
c0028c3a:	e8 99 b5 fe ff       	call   c00141d8 <Device::~Device()>
c0028c3f:	83 c4 10             	add    esp,0x10
c0028c42:	90                   	nop
c0028c43:	83 c4 0c             	add    esp,0xc
c0028c46:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028c48 <ACPI::~ACPI()>:
c0028c48:	83 ec 0c             	sub    esp,0xc
c0028c4b:	83 ec 0c             	sub    esp,0xc
c0028c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c52:	e8 cd ff ff ff       	call   c0028c24 <ACPI::~ACPI()>
c0028c57:	83 c4 10             	add    esp,0x10
c0028c5a:	83 ec 08             	sub    esp,0x8
c0028c5d:	68 68 12 00 00       	push   0x1268
c0028c62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c66:	e8 94 a1 fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0028c6b:	83 c4 10             	add    esp,0x10
c0028c6e:	83 c4 0c             	add    esp,0xc
c0028c71:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c72 <CPU::~CPU()>:
c0028c72:	83 ec 0c             	sub    esp,0xc
c0028c75:	ba 2c ba 02 c0       	mov    edx,0xc002ba2c
c0028c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c7e:	89 10                	mov    DWORD PTR [eax],edx
c0028c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c84:	83 ec 0c             	sub    esp,0xc
c0028c87:	50                   	push   eax
c0028c88:	e8 4b b5 fe ff       	call   c00141d8 <Device::~Device()>
c0028c8d:	83 c4 10             	add    esp,0x10
c0028c90:	90                   	nop
c0028c91:	83 c4 0c             	add    esp,0xc
c0028c94:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c96 <CPU::~CPU()>:
c0028c96:	83 ec 0c             	sub    esp,0xc
c0028c99:	83 ec 0c             	sub    esp,0xc
c0028c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca0:	e8 cd ff ff ff       	call   c0028c72 <CPU::~CPU()>
c0028ca5:	83 c4 10             	add    esp,0x10
c0028ca8:	83 ec 08             	sub    esp,0x8
c0028cab:	68 98 11 00 00       	push   0x1198
c0028cb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb4:	e8 46 a1 fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0028cb9:	83 c4 10             	add    esp,0x10
c0028cbc:	83 c4 0c             	add    esp,0xc
c0028cbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028cc0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028cc0:	90                   	nop
c0028cc1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028cc2 <ThreadControlBlock::ThreadControlBlock()>:
c0028cc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cc6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ccd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cd1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cdc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028ce3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ce7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028cee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cf2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028cf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cfd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028d01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d05:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028d09:	90                   	nop
c0028d0a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028d0c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028d0c:	83 ec 0c             	sub    esp,0xc
c0028d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d13:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d1d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d28:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d48:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d4f:	83 ec 0c             	sub    esp,0xc
c0028d52:	68 c6 a4 02 c0       	push   0xc002a4c6
c0028d57:	e8 83 a1 fe ff       	call   c0012edf <Dbg::kprintf(char const*, ...)>
c0028d5c:	83 c4 10             	add    esp,0x10
c0028d5f:	90                   	nop
c0028d60:	83 c4 0c             	add    esp,0xc
c0028d63:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d64 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d68:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d6b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d6c <Vm::_FPUState::_FPUState()>:
c0028d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d70:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d77:	90                   	nop
c0028d78:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d7a <PCI::~PCI()>:
c0028d7a:	83 ec 0c             	sub    esp,0xc
c0028d7d:	ba c4 ca 02 c0       	mov    edx,0xc002cac4
c0028d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d86:	89 10                	mov    DWORD PTR [eax],edx
c0028d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d8c:	83 ec 0c             	sub    esp,0xc
c0028d8f:	50                   	push   eax
c0028d90:	e8 1b ae fe ff       	call   c0013bb0 <Bus::~Bus()>
c0028d95:	83 c4 10             	add    esp,0x10
c0028d98:	90                   	nop
c0028d99:	83 c4 0c             	add    esp,0xc
c0028d9c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d9e <PCI::~PCI()>:
c0028d9e:	83 ec 0c             	sub    esp,0xc
c0028da1:	83 ec 0c             	sub    esp,0xc
c0028da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da8:	e8 cd ff ff ff       	call   c0028d7a <PCI::~PCI()>
c0028dad:	83 c4 10             	add    esp,0x10
c0028db0:	83 ec 08             	sub    esp,0x8
c0028db3:	68 58 01 00 00       	push   0x158
c0028db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dbc:	e8 3e a0 fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0028dc1:	83 c4 10             	add    esp,0x10
c0028dc4:	83 c4 0c             	add    esp,0xc
c0028dc7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028dc8 <IDE::~IDE()>:
c0028dc8:	83 ec 0c             	sub    esp,0xc
c0028dcb:	ba 28 cd 02 c0       	mov    edx,0xc002cd28
c0028dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd4:	89 10                	mov    DWORD PTR [eax],edx
c0028dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dda:	83 ec 0c             	sub    esp,0xc
c0028ddd:	50                   	push   eax
c0028dde:	e8 e5 b8 fe ff       	call   c00146c8 <HardDiskController::~HardDiskController()>
c0028de3:	83 c4 10             	add    esp,0x10
c0028de6:	90                   	nop
c0028de7:	83 c4 0c             	add    esp,0xc
c0028dea:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028dec <IDE::~IDE()>:
c0028dec:	83 ec 0c             	sub    esp,0xc
c0028def:	83 ec 0c             	sub    esp,0xc
c0028df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df6:	e8 cd ff ff ff       	call   c0028dc8 <IDE::~IDE()>
c0028dfb:	83 c4 10             	add    esp,0x10
c0028dfe:	83 ec 08             	sub    esp,0x8
c0028e01:	68 70 02 00 00       	push   0x270
c0028e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e0a:	e8 f0 9f fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0028e0f:	83 c4 10             	add    esp,0x10
c0028e12:	83 c4 0c             	add    esp,0xc
c0028e15:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028e16 <SATABus::~SATABus()>:
c0028e16:	83 ec 0c             	sub    esp,0xc
c0028e19:	ba 08 ce 02 c0       	mov    edx,0xc002ce08
c0028e1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e22:	89 10                	mov    DWORD PTR [eax],edx
c0028e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e28:	83 ec 0c             	sub    esp,0xc
c0028e2b:	50                   	push   eax
c0028e2c:	e8 97 b8 fe ff       	call   c00146c8 <HardDiskController::~HardDiskController()>
c0028e31:	83 c4 10             	add    esp,0x10
c0028e34:	90                   	nop
c0028e35:	83 c4 0c             	add    esp,0xc
c0028e38:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028e3a <SATABus::~SATABus()>:
c0028e3a:	83 ec 0c             	sub    esp,0xc
c0028e3d:	83 ec 0c             	sub    esp,0xc
c0028e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e44:	e8 cd ff ff ff       	call   c0028e16 <SATABus::~SATABus()>
c0028e49:	83 c4 10             	add    esp,0x10
c0028e4c:	83 ec 08             	sub    esp,0x8
c0028e4f:	68 64 01 00 00       	push   0x164
c0028e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e58:	e8 a2 9f fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0028e5d:	83 c4 10             	add    esp,0x10
c0028e60:	83 c4 0c             	add    esp,0xc
c0028e63:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e64 <ATA::~ATA()>:
c0028e64:	83 ec 0c             	sub    esp,0xc
c0028e67:	ba 54 ce 02 c0       	mov    edx,0xc002ce54
c0028e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e70:	89 10                	mov    DWORD PTR [eax],edx
c0028e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e76:	83 ec 0c             	sub    esp,0xc
c0028e79:	50                   	push   eax
c0028e7a:	e8 3b b9 fe ff       	call   c00147ba <PhysicalDisk::~PhysicalDisk()>
c0028e7f:	83 c4 10             	add    esp,0x10
c0028e82:	90                   	nop
c0028e83:	83 c4 0c             	add    esp,0xc
c0028e86:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e88 <ATA::~ATA()>:
c0028e88:	83 ec 0c             	sub    esp,0xc
c0028e8b:	83 ec 0c             	sub    esp,0xc
c0028e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e92:	e8 cd ff ff ff       	call   c0028e64 <ATA::~ATA()>
c0028e97:	83 c4 10             	add    esp,0x10
c0028e9a:	83 ec 08             	sub    esp,0x8
c0028e9d:	68 7c 01 00 00       	push   0x17c
c0028ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea6:	e8 54 9f fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0028eab:	83 c4 10             	add    esp,0x10
c0028eae:	83 c4 0c             	add    esp,0xc
c0028eb1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028eb2 <ATAPI::~ATAPI()>:
c0028eb2:	83 ec 0c             	sub    esp,0xc
c0028eb5:	ba 8c ce 02 c0       	mov    edx,0xc002ce8c
c0028eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ebe:	89 10                	mov    DWORD PTR [eax],edx
c0028ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec4:	83 ec 0c             	sub    esp,0xc
c0028ec7:	50                   	push   eax
c0028ec8:	e8 ed b8 fe ff       	call   c00147ba <PhysicalDisk::~PhysicalDisk()>
c0028ecd:	83 c4 10             	add    esp,0x10
c0028ed0:	90                   	nop
c0028ed1:	83 c4 0c             	add    esp,0xc
c0028ed4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028ed6 <ATAPI::~ATAPI()>:
c0028ed6:	83 ec 0c             	sub    esp,0xc
c0028ed9:	83 ec 0c             	sub    esp,0xc
c0028edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee0:	e8 cd ff ff ff       	call   c0028eb2 <ATAPI::~ATAPI()>
c0028ee5:	83 c4 10             	add    esp,0x10
c0028ee8:	83 ec 08             	sub    esp,0x8
c0028eeb:	68 80 01 00 00       	push   0x180
c0028ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef4:	e8 06 9f fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0028ef9:	83 c4 10             	add    esp,0x10
c0028efc:	83 c4 0c             	add    esp,0xc
c0028eff:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028f00 <SATA::~SATA()>:
c0028f00:	83 ec 0c             	sub    esp,0xc
c0028f03:	ba 40 cf 02 c0       	mov    edx,0xc002cf40
c0028f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f0c:	89 10                	mov    DWORD PTR [eax],edx
c0028f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f12:	83 ec 0c             	sub    esp,0xc
c0028f15:	50                   	push   eax
c0028f16:	e8 9f b8 fe ff       	call   c00147ba <PhysicalDisk::~PhysicalDisk()>
c0028f1b:	83 c4 10             	add    esp,0x10
c0028f1e:	90                   	nop
c0028f1f:	83 c4 0c             	add    esp,0xc
c0028f22:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028f24 <SATA::~SATA()>:
c0028f24:	83 ec 0c             	sub    esp,0xc
c0028f27:	83 ec 0c             	sub    esp,0xc
c0028f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f2e:	e8 cd ff ff ff       	call   c0028f00 <SATA::~SATA()>
c0028f33:	83 c4 10             	add    esp,0x10
c0028f36:	83 ec 08             	sub    esp,0x8
c0028f39:	68 7c 01 00 00       	push   0x17c
c0028f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f42:	e8 b8 9e fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0028f47:	83 c4 10             	add    esp,0x10
c0028f4a:	83 c4 0c             	add    esp,0xc
c0028f4d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028f4e <SATAPI::~SATAPI()>:
c0028f4e:	83 ec 0c             	sub    esp,0xc
c0028f51:	ba 1c d0 02 c0       	mov    edx,0xc002d01c
c0028f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5a:	89 10                	mov    DWORD PTR [eax],edx
c0028f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f60:	83 ec 0c             	sub    esp,0xc
c0028f63:	50                   	push   eax
c0028f64:	e8 51 b8 fe ff       	call   c00147ba <PhysicalDisk::~PhysicalDisk()>
c0028f69:	83 c4 10             	add    esp,0x10
c0028f6c:	90                   	nop
c0028f6d:	83 c4 0c             	add    esp,0xc
c0028f70:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f72 <SATAPI::~SATAPI()>:
c0028f72:	83 ec 0c             	sub    esp,0xc
c0028f75:	83 ec 0c             	sub    esp,0xc
c0028f78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f7c:	e8 cd ff ff ff       	call   c0028f4e <SATAPI::~SATAPI()>
c0028f81:	83 c4 10             	add    esp,0x10
c0028f84:	83 ec 08             	sub    esp,0x8
c0028f87:	68 80 01 00 00       	push   0x180
c0028f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f90:	e8 6a 9e fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0028f95:	83 c4 10             	add    esp,0x10
c0028f98:	83 c4 0c             	add    esp,0xc
c0028f9b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f9c <AVX::~AVX()>:
c0028f9c:	83 ec 0c             	sub    esp,0xc
c0028f9f:	ba 5c d0 02 c0       	mov    edx,0xc002d05c
c0028fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa8:	89 10                	mov    DWORD PTR [eax],edx
c0028faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fae:	83 ec 0c             	sub    esp,0xc
c0028fb1:	50                   	push   eax
c0028fb2:	e8 87 b8 fe ff       	call   c001483e <FPU::~FPU()>
c0028fb7:	83 c4 10             	add    esp,0x10
c0028fba:	90                   	nop
c0028fbb:	83 c4 0c             	add    esp,0xc
c0028fbe:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028fc0 <AVX::~AVX()>:
c0028fc0:	83 ec 0c             	sub    esp,0xc
c0028fc3:	83 ec 0c             	sub    esp,0xc
c0028fc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fca:	e8 cd ff ff ff       	call   c0028f9c <AVX::~AVX()>
c0028fcf:	83 c4 10             	add    esp,0x10
c0028fd2:	83 ec 08             	sub    esp,0x8
c0028fd5:	68 58 01 00 00       	push   0x158
c0028fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fde:	e8 1c 9e fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0028fe3:	83 c4 10             	add    esp,0x10
c0028fe6:	83 c4 0c             	add    esp,0xc
c0028fe9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028fea <MMX::~MMX()>:
c0028fea:	83 ec 0c             	sub    esp,0xc
c0028fed:	ba 9c d0 02 c0       	mov    edx,0xc002d09c
c0028ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff6:	89 10                	mov    DWORD PTR [eax],edx
c0028ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ffc:	83 ec 0c             	sub    esp,0xc
c0028fff:	50                   	push   eax
c0029000:	e8 39 b8 fe ff       	call   c001483e <FPU::~FPU()>
c0029005:	83 c4 10             	add    esp,0x10
c0029008:	90                   	nop
c0029009:	83 c4 0c             	add    esp,0xc
c002900c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002900e <MMX::~MMX()>:
c002900e:	83 ec 0c             	sub    esp,0xc
c0029011:	83 ec 0c             	sub    esp,0xc
c0029014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029018:	e8 cd ff ff ff       	call   c0028fea <MMX::~MMX()>
c002901d:	83 c4 10             	add    esp,0x10
c0029020:	83 ec 08             	sub    esp,0x8
c0029023:	68 58 01 00 00       	push   0x158
c0029028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002902c:	e8 ce 9d fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0029031:	83 c4 10             	add    esp,0x10
c0029034:	83 c4 0c             	add    esp,0xc
c0029037:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029038 <SSE::~SSE()>:
c0029038:	83 ec 0c             	sub    esp,0xc
c002903b:	ba dc d0 02 c0       	mov    edx,0xc002d0dc
c0029040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029044:	89 10                	mov    DWORD PTR [eax],edx
c0029046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904a:	83 ec 0c             	sub    esp,0xc
c002904d:	50                   	push   eax
c002904e:	e8 eb b7 fe ff       	call   c001483e <FPU::~FPU()>
c0029053:	83 c4 10             	add    esp,0x10
c0029056:	90                   	nop
c0029057:	83 c4 0c             	add    esp,0xc
c002905a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002905c <SSE::~SSE()>:
c002905c:	83 ec 0c             	sub    esp,0xc
c002905f:	83 ec 0c             	sub    esp,0xc
c0029062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029066:	e8 cd ff ff ff       	call   c0029038 <SSE::~SSE()>
c002906b:	83 c4 10             	add    esp,0x10
c002906e:	83 ec 08             	sub    esp,0x8
c0029071:	68 58 01 00 00       	push   0x158
c0029076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002907a:	e8 80 9d fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c002907f:	83 c4 10             	add    esp,0x10
c0029082:	83 c4 0c             	add    esp,0xc
c0029085:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029086 <x87::~x87()>:
c0029086:	83 ec 0c             	sub    esp,0xc
c0029089:	ba 1c d1 02 c0       	mov    edx,0xc002d11c
c002908e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029092:	89 10                	mov    DWORD PTR [eax],edx
c0029094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029098:	83 ec 0c             	sub    esp,0xc
c002909b:	50                   	push   eax
c002909c:	e8 9d b7 fe ff       	call   c001483e <FPU::~FPU()>
c00290a1:	83 c4 10             	add    esp,0x10
c00290a4:	90                   	nop
c00290a5:	83 c4 0c             	add    esp,0xc
c00290a8:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00290aa <x87::~x87()>:
c00290aa:	83 ec 0c             	sub    esp,0xc
c00290ad:	83 ec 0c             	sub    esp,0xc
c00290b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290b4:	e8 cd ff ff ff       	call   c0029086 <x87::~x87()>
c00290b9:	83 c4 10             	add    esp,0x10
c00290bc:	83 ec 08             	sub    esp,0x8
c00290bf:	68 58 01 00 00       	push   0x158
c00290c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290c8:	e8 32 9d fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c00290cd:	83 c4 10             	add    esp,0x10
c00290d0:	83 c4 0c             	add    esp,0xc
c00290d3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00290d4 <IOAPIC::~IOAPIC()>:
c00290d4:	83 ec 0c             	sub    esp,0xc
c00290d7:	ba 74 d2 02 c0       	mov    edx,0xc002d274
c00290dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e0:	89 10                	mov    DWORD PTR [eax],edx
c00290e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e6:	83 ec 0c             	sub    esp,0xc
c00290e9:	50                   	push   eax
c00290ea:	e8 e9 b0 fe ff       	call   c00141d8 <Device::~Device()>
c00290ef:	83 c4 10             	add    esp,0x10
c00290f2:	90                   	nop
c00290f3:	83 c4 0c             	add    esp,0xc
c00290f6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00290f8 <IOAPIC::~IOAPIC()>:
c00290f8:	83 ec 0c             	sub    esp,0xc
c00290fb:	83 ec 0c             	sub    esp,0xc
c00290fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029102:	e8 cd ff ff ff       	call   c00290d4 <IOAPIC::~IOAPIC()>
c0029107:	83 c4 10             	add    esp,0x10
c002910a:	83 ec 08             	sub    esp,0x8
c002910d:	68 68 01 00 00       	push   0x168
c0029112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029116:	e8 e4 9c fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c002911b:	83 c4 10             	add    esp,0x10
c002911e:	83 c4 0c             	add    esp,0xc
c0029121:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029122 <APIC::~APIC()>:
c0029122:	83 ec 0c             	sub    esp,0xc
c0029125:	ba 2c d2 02 c0       	mov    edx,0xc002d22c
c002912a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002912e:	89 10                	mov    DWORD PTR [eax],edx
c0029130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029134:	83 ec 0c             	sub    esp,0xc
c0029137:	50                   	push   eax
c0029138:	e8 cb bb fe ff       	call   c0014d08 <InterruptController::~InterruptController()>
c002913d:	83 c4 10             	add    esp,0x10
c0029140:	90                   	nop
c0029141:	83 c4 0c             	add    esp,0xc
c0029144:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029146 <APIC::~APIC()>:
c0029146:	83 ec 0c             	sub    esp,0xc
c0029149:	83 ec 0c             	sub    esp,0xc
c002914c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029150:	e8 cd ff ff ff       	call   c0029122 <APIC::~APIC()>
c0029155:	83 c4 10             	add    esp,0x10
c0029158:	83 ec 08             	sub    esp,0x8
c002915b:	68 58 21 00 00       	push   0x2158
c0029160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029164:	e8 96 9c fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0029169:	83 c4 10             	add    esp,0x10
c002916c:	83 c4 0c             	add    esp,0xc
c002916f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029170 <PIC::~PIC()>:
c0029170:	83 ec 0c             	sub    esp,0xc
c0029173:	ba c4 d2 02 c0       	mov    edx,0xc002d2c4
c0029178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002917c:	89 10                	mov    DWORD PTR [eax],edx
c002917e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029182:	83 ec 0c             	sub    esp,0xc
c0029185:	50                   	push   eax
c0029186:	e8 7d bb fe ff       	call   c0014d08 <InterruptController::~InterruptController()>
c002918b:	83 c4 10             	add    esp,0x10
c002918e:	90                   	nop
c002918f:	83 c4 0c             	add    esp,0xc
c0029192:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029194 <PIC::~PIC()>:
c0029194:	83 ec 0c             	sub    esp,0xc
c0029197:	83 ec 0c             	sub    esp,0xc
c002919a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002919e:	e8 cd ff ff ff       	call   c0029170 <PIC::~PIC()>
c00291a3:	83 c4 10             	add    esp,0x10
c00291a6:	83 ec 08             	sub    esp,0x8
c00291a9:	68 58 21 00 00       	push   0x2158
c00291ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291b2:	e8 48 9c fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c00291b7:	83 c4 10             	add    esp,0x10
c00291ba:	83 c4 0c             	add    esp,0xc
c00291bd:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00291be <APICTimer::~APICTimer()>:
c00291be:	83 ec 0c             	sub    esp,0xc
c00291c1:	ba 18 d3 02 c0       	mov    edx,0xc002d318
c00291c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ca:	89 10                	mov    DWORD PTR [eax],edx
c00291cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d0:	83 ec 0c             	sub    esp,0xc
c00291d3:	50                   	push   eax
c00291d4:	e8 f5 da fe ff       	call   c0016cce <Timer::~Timer()>
c00291d9:	83 c4 10             	add    esp,0x10
c00291dc:	90                   	nop
c00291dd:	83 c4 0c             	add    esp,0xc
c00291e0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00291e2 <APICTimer::~APICTimer()>:
c00291e2:	83 ec 0c             	sub    esp,0xc
c00291e5:	83 ec 0c             	sub    esp,0xc
c00291e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291ec:	e8 cd ff ff ff       	call   c00291be <APICTimer::~APICTimer()>
c00291f1:	83 c4 10             	add    esp,0x10
c00291f4:	83 ec 08             	sub    esp,0x8
c00291f7:	68 60 01 00 00       	push   0x160
c00291fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029200:	e8 fa 9b fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0029205:	83 c4 10             	add    esp,0x10
c0029208:	83 c4 0c             	add    esp,0xc
c002920b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002920c <PIT::~PIT()>:
c002920c:	83 ec 0c             	sub    esp,0xc
c002920f:	ba 68 d3 02 c0       	mov    edx,0xc002d368
c0029214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029218:	89 10                	mov    DWORD PTR [eax],edx
c002921a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002921e:	83 ec 0c             	sub    esp,0xc
c0029221:	50                   	push   eax
c0029222:	e8 a7 da fe ff       	call   c0016cce <Timer::~Timer()>
c0029227:	83 c4 10             	add    esp,0x10
c002922a:	90                   	nop
c002922b:	83 c4 0c             	add    esp,0xc
c002922e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029230 <PIT::~PIT()>:
c0029230:	83 ec 0c             	sub    esp,0xc
c0029233:	83 ec 0c             	sub    esp,0xc
c0029236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002923a:	e8 cd ff ff ff       	call   c002920c <PIT::~PIT()>
c002923f:	83 c4 10             	add    esp,0x10
c0029242:	83 ec 08             	sub    esp,0x8
c0029245:	68 5c 01 00 00       	push   0x15c
c002924a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002924e:	e8 ac 9b fe ff       	call   c0012dff <operator delete(void*, unsigned long)>
c0029253:	83 c4 10             	add    esp,0x10
c0029256:	83 c4 0c             	add    esp,0xc
c0029259:	c3                   	ret    
